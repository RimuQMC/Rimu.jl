var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21510972136753792 ± 0.001593786283575248\n   G2(1) = 0.9156245653164508 ± 0.0008173746032948266\n   G2(2) = 0.9830415377169281 ± 0.0005614746098720876\n   G2(3) = 0.9875580725657039 ± 0.0007439117558230493\n   G2(4) = 0.9830415377169281 ± 0.0005614746098720876\n   G2(5) = 0.9156245653164508 ± 0.0008173746032948266\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0209068945537245 ± 0.14084832903539568\n   Replica 2: -4.029448192768286 ± 0.14802485006367583\n   Replica 3: -4.093624215152077 ± 0.12731663721935418\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip910\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip911\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip912\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.26 2211.02,1003.26 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.691 2211.02,745.691 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.121 2211.02,488.121 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.55 2211.02,230.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.26 423.181,1003.26 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.691 423.181,745.691 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.121 423.181,488.121 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.55 423.181,230.55 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M290.043 1016.61 L306.363 1016.61 L306.363 1020.54 L284.418 1020.54 L284.418 1016.61 Q287.08 1013.85 291.664 1009.22 Q296.27 1004.57 297.451 1003.23 Q299.696 1000.7 300.576 998.967 Q301.478 997.208 301.478 995.518 Q301.478 992.764 299.534 991.027 Q297.613 989.291 294.511 989.291 Q292.312 989.291 289.858 990.055 Q287.427 990.819 284.65 992.37 L284.65 987.648 Q287.474 986.514 289.927 985.935 Q292.381 985.356 294.418 985.356 Q299.789 985.356 302.983 988.041 Q306.177 990.726 306.177 995.217 Q306.177 997.347 305.367 999.268 Q304.58 1001.17 302.474 1003.76 Q301.895 1004.43 298.793 1007.65 Q295.691 1010.84 290.043 1016.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 985.981 L334.58 985.981 L334.58 989.916 L320.506 989.916 L320.506 998.388 Q321.524 998.041 322.543 997.879 Q323.562 997.694 324.58 997.694 Q330.367 997.694 333.747 1000.87 Q337.126 1004.04 337.126 1009.45 Q337.126 1015.03 333.654 1018.13 Q330.182 1021.21 323.862 1021.21 Q321.687 1021.21 319.418 1020.84 Q317.173 1020.47 314.765 1019.73 L314.765 1015.03 Q316.849 1016.17 319.071 1016.72 Q321.293 1017.28 323.77 1017.28 Q327.774 1017.28 330.112 1015.17 Q332.45 1013.06 332.45 1009.45 Q332.45 1005.84 330.112 1003.74 Q327.774 1001.63 323.77 1001.63 Q321.895 1001.63 320.02 1002.05 Q318.168 1002.46 316.224 1003.34 L316.224 985.981 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 989.06 Q352.728 989.06 350.899 992.625 Q349.094 996.166 349.094 1003.3 Q349.094 1010.4 350.899 1013.97 Q352.728 1017.51 356.339 1017.51 Q359.973 1017.51 361.779 1013.97 Q363.608 1010.4 363.608 1003.3 Q363.608 996.166 361.779 992.625 Q359.973 989.06 356.339 989.06 M356.339 985.356 Q362.149 985.356 365.205 989.963 Q368.284 994.546 368.284 1003.3 Q368.284 1012.02 365.205 1016.63 Q362.149 1021.21 356.339 1021.21 Q350.529 1021.21 347.45 1016.63 Q344.395 1012.02 344.395 1003.3 Q344.395 994.546 347.45 989.963 Q350.529 985.356 356.339 985.356 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M286.062 728.411 L304.418 728.411 L304.418 732.346 L290.344 732.346 L290.344 740.818 Q291.363 740.471 292.381 740.309 Q293.4 740.124 294.418 740.124 Q300.205 740.124 303.585 743.295 Q306.964 746.466 306.964 751.883 Q306.964 757.462 303.492 760.563 Q300.02 763.642 293.701 763.642 Q291.525 763.642 289.256 763.272 Q287.011 762.901 284.603 762.161 L284.603 757.462 Q286.687 758.596 288.909 759.151 Q291.131 759.707 293.608 759.707 Q297.613 759.707 299.951 757.601 Q302.288 755.494 302.288 751.883 Q302.288 748.272 299.951 746.165 Q297.613 744.059 293.608 744.059 Q291.733 744.059 289.858 744.476 Q288.006 744.892 286.062 745.772 L286.062 728.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 731.49 Q322.566 731.49 320.737 735.054 Q318.932 738.596 318.932 745.726 Q318.932 752.832 320.737 756.397 Q322.566 759.939 326.177 759.939 Q329.811 759.939 331.617 756.397 Q333.446 752.832 333.446 745.726 Q333.446 738.596 331.617 735.054 Q329.811 731.49 326.177 731.49 M326.177 727.786 Q331.987 727.786 335.043 732.392 Q338.122 736.976 338.122 745.726 Q338.122 754.452 335.043 759.059 Q331.987 763.642 326.177 763.642 Q320.367 763.642 317.288 759.059 Q314.233 754.452 314.233 745.726 Q314.233 736.976 317.288 732.392 Q320.367 727.786 326.177 727.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 731.49 Q352.728 731.49 350.899 735.054 Q349.094 738.596 349.094 745.726 Q349.094 752.832 350.899 756.397 Q352.728 759.939 356.339 759.939 Q359.973 759.939 361.779 756.397 Q363.608 752.832 363.608 745.726 Q363.608 738.596 361.779 735.054 Q359.973 731.49 356.339 731.49 M356.339 727.786 Q362.149 727.786 365.205 732.392 Q368.284 736.976 368.284 745.726 Q368.284 754.452 365.205 759.059 Q362.149 763.642 356.339 763.642 Q350.529 763.642 347.45 759.059 Q344.395 754.452 344.395 745.726 Q344.395 736.976 347.45 732.392 Q350.529 727.786 356.339 727.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M284.835 470.841 L307.057 470.841 L307.057 472.831 L294.511 505.401 L289.627 505.401 L301.432 474.776 L284.835 474.776 L284.835 470.841 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 470.841 L334.58 470.841 L334.58 474.776 L320.506 474.776 L320.506 483.248 Q321.524 482.901 322.543 482.739 Q323.562 482.554 324.58 482.554 Q330.367 482.554 333.747 485.725 Q337.126 488.896 337.126 494.313 Q337.126 499.891 333.654 502.993 Q330.182 506.072 323.862 506.072 Q321.687 506.072 319.418 505.702 Q317.173 505.331 314.765 504.59 L314.765 499.891 Q316.849 501.026 319.071 501.581 Q321.293 502.137 323.77 502.137 Q327.774 502.137 330.112 500.03 Q332.45 497.924 332.45 494.313 Q332.45 490.702 330.112 488.595 Q327.774 486.489 323.77 486.489 Q321.895 486.489 320.02 486.905 Q318.168 487.322 316.224 488.202 L316.224 470.841 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 473.919 Q352.728 473.919 350.899 477.484 Q349.094 481.026 349.094 488.155 Q349.094 495.262 350.899 498.827 Q352.728 502.368 356.339 502.368 Q359.973 502.368 361.779 498.827 Q363.608 495.262 363.608 488.155 Q363.608 481.026 361.779 477.484 Q359.973 473.919 356.339 473.919 M356.339 470.216 Q362.149 470.216 365.205 474.822 Q368.284 479.405 368.284 488.155 Q368.284 496.882 365.205 501.489 Q362.149 506.072 356.339 506.072 Q350.529 506.072 347.45 501.489 Q344.395 496.882 344.395 488.155 Q344.395 479.405 347.45 474.822 Q350.529 470.216 356.339 470.216 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M256.664 243.895 L264.303 243.895 L264.303 217.53 L255.992 219.196 L255.992 214.937 L264.256 213.27 L268.932 213.27 L268.932 243.895 L276.571 243.895 L276.571 247.83 L256.664 247.83 L256.664 243.895 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M296.015 216.349 Q292.404 216.349 290.576 219.914 Q288.77 223.456 288.77 230.585 Q288.77 237.692 290.576 241.256 Q292.404 244.798 296.015 244.798 Q299.65 244.798 301.455 241.256 Q303.284 237.692 303.284 230.585 Q303.284 223.456 301.455 219.914 Q299.65 216.349 296.015 216.349 M296.015 212.645 Q301.826 212.645 304.881 217.252 Q307.96 221.835 307.96 230.585 Q307.96 239.312 304.881 243.918 Q301.826 248.502 296.015 248.502 Q290.205 248.502 287.127 243.918 Q284.071 239.312 284.071 230.585 Q284.071 221.835 287.127 217.252 Q290.205 212.645 296.015 212.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 216.349 Q322.566 216.349 320.737 219.914 Q318.932 223.456 318.932 230.585 Q318.932 237.692 320.737 241.256 Q322.566 244.798 326.177 244.798 Q329.811 244.798 331.617 241.256 Q333.446 237.692 333.446 230.585 Q333.446 223.456 331.617 219.914 Q329.811 216.349 326.177 216.349 M326.177 212.645 Q331.987 212.645 335.043 217.252 Q338.122 221.835 338.122 230.585 Q338.122 239.312 335.043 243.918 Q331.987 248.502 326.177 248.502 Q320.367 248.502 317.288 243.918 Q314.233 239.312 314.233 230.585 Q314.233 221.835 317.288 217.252 Q320.367 212.645 326.177 212.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 216.349 Q352.728 216.349 350.899 219.914 Q349.094 223.456 349.094 230.585 Q349.094 237.692 350.899 241.256 Q352.728 244.798 356.339 244.798 Q359.973 244.798 361.779 241.256 Q363.608 237.692 363.608 230.585 Q363.608 223.456 361.779 219.914 Q359.973 216.349 356.339 216.349 M356.339 212.645 Q362.149 212.645 365.205 217.252 Q368.284 221.835 368.284 230.585 Q368.284 239.312 365.205 243.918 Q362.149 248.502 356.339 248.502 Q350.529 248.502 347.45 243.918 Q344.395 239.312 344.395 230.585 Q344.395 221.835 347.45 217.252 Q350.529 212.645 356.339 212.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.55 4017.76,230.55 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1244.23 463.375,1242.19 463.943,1241.09 464.511,1238.86 465.08,1237.56 465.648,1236.14 466.216,1234.62 466.785,1232.96 467.353,1231.18 467.921,1229.25 468.49,1227.19 469.058,1223.93 469.626,1221.58 470.195,1219.09 470.763,1213.35 471.331,1210.44 471.9,1207.34 472.468,1204.06 473.036,1200.58 473.605,1196.91 474.173,1192.03 474.741,1187.96 475.31,1182.62 475.878,1178.2 476.446,1173.5 477.015,1168.6 477.583,1161.43 478.152,1156 478.72,1148.25 479.288,1142.39 479.857,1135.21 480.425,1127.89 480.993,1119.28 481.562,1112.33 482.13,1105.14 482.698,1097.8 483.267,1089.22 483.835,1078.24 484.403,1068.23 484.972,1059.08 485.54,1049.73 486.108,1039.1 486.677,1029.45 487.245,1020.6 487.813,1011.56 488.382,1001.45 488.95,991.182 489.518,980.884 490.087,969.367 490.655,957.983 491.224,947.545 491.792,937.012 492.36,925.45 492.929,914.829 493.497,904.192 494.065,894.661 494.634,885.049 495.202,874.442 495.77,863.693 496.339,853.972 496.907,841.105 497.475,827.253 498.044,817.613 498.612,807.968 499.18,798.378 499.749,787.682 500.317,778.028 500.885,768.491 501.454,756.994 502.022,747.621 502.59,738.311 503.159,726.847 503.727,712.591 504.295,703.762 504.864,692.963 505.432,681.275 506.001,671.012 506.569,661.797 507.137,652.782 507.706,643.785 508.274,634.976 508.842,627.013 509.411,616.065 509.979,608.657 510.547,597.055 511.116,587.955 511.684,579.937 512.252,571.058 512.821,564.361 513.389,555.79 513.957,548.353 514.526,541.015 515.094,532.911 515.662,528.057 516.231,521.154 516.799,513.207 517.367,506.611 517.936,500.032 518.504,492.423 519.072,485.082 519.641,478.995 520.209,474.02 520.778,467.137 521.346,461.145 521.914,454.446 522.483,450.001 523.051,446.657 523.619,440.319 524.188,435.129 524.756,429.144 525.324,426.261 525.893,422.192 526.461,416.272 527.029,410.586 527.598,405.101 528.166,401.809 528.734,398.328 529.303,392.906 529.871,388.661 530.439,383.624 531.008,379.712 531.576,376.797 532.144,371.978 532.713,369.327 533.281,364.794 533.85,361.217 534.418,357.742 534.986,355.565 535.555,352.408 536.123,350.15 536.691,346.912 537.26,341.619 537.828,338.835 538.396,337.026 538.965,334.325 539.533,331.572 540.101,328.762 540.67,326.326 541.238,324.822 541.806,323.394 542.375,321.718 542.943,320.335 543.511,316.799 544.08,314.565 544.648,313.344 545.216,312.239 545.785,310.871 546.353,306.708 546.921,303.314 547.49,301.463 548.058,300.545 548.627,301.884 549.195,300.698 549.763,297.691 550.332,297.094 550.9,298.258 551.468,294.175 552.037,293.245 552.605,291.457 553.173,289.655 553.742,290.098 554.31,287.361 554.878,284.643 555.447,284.141 556.015,282.625 556.583,281.136 557.152,280.5 557.72,280.155 558.288,280.521 558.857,279.828 559.425,278.973 559.993,277.52 560.562,277.022 561.13,276.496 561.698,272.819 562.267,272.555 562.835,270.141 563.404,269.868 563.972,266.252 564.54,265.131 565.109,266.033 565.677,263.574 566.245,263.653 566.814,264.641 567.382,262.439 567.95,263.649 568.519,261.581 569.087,259.761 569.655,258.812 570.224,259.994 570.792,260.05 571.36,261.109 571.929,261.07 572.497,261.014 573.065,260.812 573.634,261.074 574.202,260.851 574.77,258.537 575.339,255.545 575.907,255.588 576.476,254.577 577.044,254.747 577.612,254.028 578.181,252.072 578.749,248.368 579.317,246.069 579.886,244.521 580.454,245.353 581.022,246.912 581.591,247.585 582.159,246.978 582.727,247.545 583.296,251.185 583.864,253.565 584.432,252.661 585.001,252.639 585.569,252.575 586.137,252.612 586.706,250.643 587.274,251.787 587.842,252.078 588.411,253.24 588.979,252.095 589.547,251.113 590.116,250.934 590.684,247.764 591.253,249.881 591.821,249.834 592.389,247.616 592.958,246.867 593.526,245.088 594.094,245.395 594.663,244.622 595.231,243.885 595.799,245.599 596.368,245.835 596.936,246.038 597.504,246.225 598.073,245.243 598.641,244.515 599.209,243.821 599.778,244.549 600.346,242.751 600.914,244.205 601.483,246.521 602.051,245.607 602.619,242.747 603.188,243.103 603.756,244.423 604.325,243.473 604.893,244.802 605.461,243.986 606.03,244.921 606.598,245.08 607.166,245.086 607.735,246.099 608.303,245.767 608.871,245.82 609.44,246.031 610.008,247.124 610.576,247.12 611.145,246.051 611.713,245.08 612.281,243.958 612.85,242.831 613.418,242.151 613.986,243.422 614.555,244.771 615.123,244.874 615.691,245.071 616.26,243.987 616.828,243.957 617.396,242.925 617.965,242.968 618.533,242.893 619.102,244.121 619.67,246.072 620.238,248.804 620.807,248.198 621.375,247.759 621.943,246.343 622.512,247.025 623.08,246.675 623.648,246.361 624.217,248.231 624.785,247.946 625.353,246.305 625.922,242.104 626.49,242.179 627.058,243.195 627.627,242.899 628.195,242.858 628.763,243.741 629.332,241.456 629.9,240.211 630.468,239.134 631.037,238.115 631.605,237.189 632.173,236.366 632.742,237.753 633.31,240.877 633.879,239.655 634.447,237.819 635.015,238.14 635.584,237.336 636.152,236.638 636.72,236.929 637.289,238.091 637.857,236.994 638.425,237.475 638.994,235.611 639.562,236.972 640.13,233.966 640.699,232.287 641.267,232.63 641.835,234.122 642.404,234.747 642.972,237.061 643.54,237.143 644.109,240.157 644.677,239.134 645.245,239.955 645.814,239.79 646.382,238.801 646.951,238.74 647.519,239.409 648.087,235.471 648.656,237.066 649.224,239.256 649.792,238.169 650.361,238.069 650.929,237.969 651.497,234.829 652.066,236.076 652.634,235.202 653.202,235.298 653.771,234.729 654.339,231.751 654.907,232.165 655.476,233.769 656.044,232.898 656.612,235.376 657.181,236.554 657.749,235.632 658.317,235.798 658.886,234.954 659.454,237.067 660.022,238.284 660.591,238.258 661.159,238.246 661.728,237.259 662.296,237.204 662.864,233.986 663.433,235.087 664.001,235.174 664.569,235.295 665.138,235.484 665.706,234.681 666.274,235.939 666.843,236.888 667.411,235.695 667.979,235.562 668.548,233.532 669.116,233.695 669.684,233.624 670.253,234.69 670.821,235.89 671.389,234.831 671.958,233.984 672.526,232.096 673.094,232.266 673.663,232.541 674.231,232.71 674.799,230.721 675.368,230.058 675.936,228.469 676.505,229.079 677.073,230.941 677.641,230.341 678.21,229.86 678.778,230.437 679.346,232.01 679.915,231.073 680.483,229.553 681.051,232.127 681.62,232.485 682.188,233.73 682.756,233.056 683.325,233.543 683.893,232.922 684.461,232.295 685.03,232.433 685.598,229.667 686.166,232.302 686.735,229.424 687.303,230.023 687.871,230.47 688.44,231.253 689.008,232.816 689.577,230.887 690.145,233.322 690.713,231.681 691.282,234.995 691.85,234.189 692.418,233.481 692.987,232.862 693.555,234.173 694.123,235.25 694.692,233.404 695.26,235.613 695.828,233.679 696.397,233.881 696.965,232.972 697.533,232.356 698.102,231.646 698.67,232.96 699.238,235.256 699.807,233.356 700.375,232.559 700.943,234.098 701.512,234.362 702.08,233.391 702.648,232.402 703.217,233.627 703.785,235.97 704.354,234.868 704.922,234.975 705.49,236.384 706.059,236.365 706.627,237.44 707.195,238.201 707.764,236.151 708.332,237.304 708.9,238.505 709.469,238.433 710.037,238.517 710.605,238.233 711.174,236.07 711.742,235.996 712.31,234.948 712.879,234.852 713.447,236.063 714.015,236.07 714.584,236.076 715.152,235.988 715.72,235.024 716.289,236.941 716.857,235.613 717.425,235.355 717.994,236.247 718.562,235.01 719.131,236.081 719.699,236.16 720.267,237.108 720.836,238.617 721.404,239.333 721.972,240.981 722.541,239.602 723.109,241.097 723.677,238.495 724.246,238.257 724.814,236.852 725.382,236.92 725.951,236.526 726.519,237.466 727.087,237.006 727.656,236.738 728.224,237.397 728.792,236.185 729.361,234.769 729.929,236.519 730.497,234.218 731.066,237.311 731.634,239.822 732.203,238.282 732.771,237.615 733.339,237.045 733.908,234.845 734.476,234.585 735.044,233.45 735.613,234.327 736.181,236.452 736.749,237.134 737.318,237.717 737.886,235.437 738.454,235.386 739.023,233.089 739.591,230.868 740.159,229.868 740.728,229.25 741.296,228.342 741.864,229.667 742.433,227.691 743.001,228.301 743.569,227.626 744.138,229.028 744.706,225.969 745.274,227.464 745.843,227.888 746.411,227.06 746.98,227.595 747.548,225.985 748.116,226.323 748.685,224.652 749.253,224.455 749.821,224.961 750.39,227.592 750.958,226.86 751.526,225.282 752.095,224.722 752.663,226.476 753.231,229.822 753.8,229.091 754.368,226.507 754.936,226.237 755.505,227.815 756.073,228.253 756.641,229.775 757.21,229.168 757.778,228.377 758.346,230.708 758.915,230.096 759.483,231.401 760.052,232.712 760.62,232.889 761.188,228.745 761.757,230.218 762.325,230.43 762.893,233.95 763.462,234.006 764.03,233.076 764.598,231.041 765.167,231.261 765.735,231.509 766.303,230.768 766.872,231.008 767.44,232.246 768.008,233.152 768.577,233.061 769.145,233.255 769.713,235.156 770.282,235.252 770.85,235.217 771.418,236.134 771.987,234.797 772.555,233.594 773.123,237.739 773.692,235.398 774.26,235.295 774.829,235.132 775.397,236.017 775.965,234.851 776.534,234.525 777.102,234.408 777.67,234.252 778.239,234.322 778.807,235.286 779.375,233.137 779.944,233.041 780.512,234.095 781.08,234.005 781.649,234.87 782.217,234.831 782.785,232.61 783.354,233.62 783.922,235.708 784.49,235.38 785.059,236.088 785.627,236.879 786.195,234.713 786.764,234.673 787.332,233.356 787.9,232.154 788.469,232.17 789.037,232.212 789.606,231.091 790.174,230.157 790.742,229.354 791.311,230.293 791.879,230.41 792.447,229.44 793.016,229.575 793.584,229.681 794.152,229.201 794.721,227.444 795.289,226.874 795.857,223.475 796.426,224.365 796.994,227.144 797.562,228.705 798.131,227.968 798.699,228.283 799.267,228.627 799.836,227.775 800.404,230.112 800.972,231.443 801.541,231.632 802.109,231.419 802.678,231.456 803.246,231.773 803.814,229.644 804.383,229.786 804.951,227.98 805.519,227.394 806.088,229.059 806.656,228.18 807.224,230.639 807.793,231.847 808.361,232.132 808.929,229.986 809.498,230.267 810.066,230.426 810.634,227.745 811.203,226.965 811.771,228.379 812.339,228.67 812.908,228.833 813.476,227.9 814.044,229.332 814.613,230.701 815.181,232.837 815.749,232.895 816.318,233.062 816.886,234.113 817.455,234.11 818.023,231.948 818.591,229.938 819.16,229.222 819.728,230.445 820.296,229.747 820.865,230.118 821.433,229.355 822.001,230.976 822.57,231.337 823.138,231.341 823.706,232.652 824.275,233.756 824.843,235.772 825.411,235.654 825.98,235.505 826.548,236.315 827.116,237.357 827.685,237.968 828.253,237.523 828.821,239.331 829.39,238.927 829.958,239.228 830.526,238.772 831.095,238.271 831.663,237.825 832.232,237.482 832.8,237.9 833.368,237.257 833.937,234.773 834.505,233.75 835.073,233.437 835.642,230.079 836.21,231.405 836.778,233.543 837.347,233.26 837.915,236.323 838.483,234.097 839.052,229.763 839.62,229.928 840.188,229.041 840.757,230.021 841.325,232.239 841.893,232.27 842.462,233.382 843.03,235.359 843.598,232.945 844.167,234.942 844.735,231.683 845.304,232.682 845.872,233.622 846.44,233.395 847.009,231.164 847.577,231.086 848.145,232.229 848.714,231.111 849.282,230.038 849.85,228.918 850.419,230.003 850.987,230.075 851.555,232.285 852.124,231.099 852.692,229.9 853.26,230.084 853.829,232.433 854.397,232.287 854.965,232.412 855.534,232.35 856.102,231.034 856.67,230.826 857.239,229.803 857.807,230.851 858.375,229.9 858.944,230.144 859.512,230.324 860.081,230.306 860.649,230.437 861.217,230.372 861.786,229.47 862.354,226.522 862.922,227.089 863.491,224.159 864.059,225.674 864.627,225.172 865.196,224.599 865.764,227.331 866.332,226.598 866.901,227.048 867.469,229.596 868.037,230.046 868.606,232.226 869.174,233.228 869.742,235.436 870.311,236.342 870.879,237.212 871.447,235.031 872.016,232.708 872.584,231.704 873.152,229.652 873.721,228.636 874.289,227.753 874.858,228.304 875.426,229.467 875.994,230.631 876.563,228.568 877.131,226.547 877.699,229.16 878.268,229.326 878.836,227.484 879.404,227.75 879.973,227.107 880.541,227.304 881.109,227.701 881.678,227.889 882.246,227.342 882.814,228.832 883.383,226.833 883.951,229.503 884.519,231.852 885.088,232.3 885.656,233.384 886.224,233.152 886.793,236.146 887.361,235.942 887.93,233.511 888.498,234.381 889.066,237.196 889.635,236.634 890.203,234.238 890.771,235.096 891.34,234.822 891.908,233.618 892.476,234.567 893.045,236.343 893.613,238.184 894.181,237.748 894.75,236.287 895.318,236.275 895.886,234.945 896.455,234.35 897.023,234.316 897.591,234.099 898.16,232.94 898.728,231.684 899.296,232.806 899.865,231.739 900.433,231.689 901.001,231.59 901.57,230.505 902.138,231.26 902.707,231.216 903.275,232.242 903.843,232.065 904.412,231.078 904.98,230.99 905.548,228.952 906.117,229.131 906.685,229.34 907.253,229.479 907.822,229.669 908.39,231.971 908.958,230.911 909.527,230.706 910.095,232.801 910.663,232.708 911.232,232.58 911.8,233.736 912.368,233.55 912.937,231.538 913.505,231.53 914.073,232.52 914.642,231.551 915.21,231.536 915.779,231.236 916.347,233.229 916.915,234.092 917.484,233.575 918.052,233.343 918.62,231.982 919.189,230.684 919.757,231.898 920.325,231.669 920.894,228.604 921.462,229.648 922.03,229.537 922.599,229.748 923.167,228.81 923.735,228.942 924.304,230.126 924.872,229.286 925.44,229.4 926.009,230.502 926.577,232.637 927.145,231.361 927.714,231.299 928.282,231.293 928.85,229.191 929.419,229.131 929.987,228.15 930.556,229.481 931.124,227.537 931.692,227.794 932.261,229.023 932.829,229.275 933.397,226.518 933.966,226.96 934.534,227.435 935.102,229.826 935.671,229.904 936.239,232.045 936.807,234.208 937.376,233.073 937.944,231.93 938.512,231.622 939.081,229.777 939.649,227.825 940.217,229.037 940.786,231.032 941.354,229.91 941.922,228.871 942.491,230.044 943.059,228.21 943.627,224.134 944.196,224.681 944.764,224.062 945.333,228.819 945.901,227.808 946.469,230.178 947.038,233.405 947.606,231.315 948.174,231.343 948.743,232.344 949.311,232.177 949.879,233.28 950.448,232.931 951.016,234.034 951.584,233.848 952.153,234.628 952.721,232.21 953.289,231.043 953.858,230.012 954.426,227.071 954.994,227.545 955.563,227.952 956.131,228.159 956.699,227.383 957.268,227.615 957.836,226.991 958.405,228.276 958.973,229.33 959.541,229.552 960.11,227.633 960.678,228.062 961.246,229.437 961.815,228.681 962.383,229.844 962.951,228.023 963.52,228.404 964.088,228.719 964.656,229.918 965.225,228.968 965.793,227.085 966.361,227.402 966.93,228.84 967.498,231.252 968.066,230.238 968.635,233.405 969.203,233.06 969.771,230.966 970.34,232.073 970.908,235.116 971.476,236.962 972.045,237.634 972.613,237.156 973.182,235.809 973.75,236.59 974.318,238.029 974.887,237.553 975.455,237.003 976.023,236.527 976.592,237.358 977.16,235.976 977.728,231.665 978.297,231.747 978.865,232.673 979.433,231.543 980.002,233.772 980.57,234.712 981.138,230.418 981.707,229.473 982.275,229.773 982.843,233.153 983.412,231.865 983.98,231.818 984.548,231.742 985.117,232.714 985.685,234.763 986.253,236.685 986.822,235.433 987.39,236.113 987.959,235.706 988.527,230.062 989.095,231.197 989.664,230.263 990.232,230.505 990.8,232.611 991.369,233.328 991.937,232.323 992.505,232.452 993.074,234.382 993.642,234.278 994.21,233.842 994.779,235.82 995.347,235.425 995.915,235.968 996.484,236.701 997.052,237.407 997.62,233.907 998.189,232.555 998.757,232.361 999.325,232.122 999.894,231.864 1000.46,232.525 1001.03,231.117 1001.6,230.932 1002.17,232.832 1002.74,232.415 1003.3,231.13 1003.87,230.915 1004.44,230.877 1005.01,231.889 1005.58,232.708 1006.15,233.472 1006.71,234.386 1007.28,233.996 1007.85,235.572 1008.42,236.113 1008.99,237.612 1009.56,238.882 1010.12,237.211 1010.69,235.596 1011.26,234.126 1011.83,233.82 1012.4,232.451 1012.97,232.024 1013.53,230.695 1014.1,231.521 1014.67,230.286 1015.24,232.119 1015.81,231.011 1016.38,231.737 1016.94,230.457 1017.51,232.207 1018.08,231.113 1018.65,232.132 1019.22,233.89 1019.79,231.404 1020.35,229.696 1020.92,230.493 1021.49,230.317 1022.06,230.145 1022.63,229.261 1023.2,229.491 1023.76,227.33 1024.33,228.267 1024.9,229.146 1025.47,227.9 1026.04,228.017 1026.61,228.199 1027.17,227.271 1027.74,227.442 1028.31,227.53 1028.88,226.698 1029.45,227.988 1030.02,228.167 1030.58,228.234 1031.15,227.206 1031.72,227.537 1032.29,226.654 1032.86,225.674 1033.43,226.071 1033.99,226.391 1034.56,227.475 1035.13,227.595 1035.7,226.773 1036.27,229.08 1036.84,227.975 1037.4,230.152 1037.97,230.069 1038.54,227.976 1039.11,225.902 1039.68,226.269 1040.25,224.435 1040.81,224.832 1041.38,226.158 1041.95,226.487 1042.52,224.645 1043.09,224.94 1043.66,221.308 1044.22,222.051 1044.79,220.475 1045.36,220.148 1045.93,219.895 1046.5,221.915 1047.07,222.646 1047.63,221.214 1048.2,223.781 1048.77,227.72 1049.34,226.839 1049.91,229.358 1050.48,229.663 1051.05,228.767 1051.61,227.97 1052.18,225.204 1052.75,225.752 1053.32,228.063 1053.89,229.475 1054.46,227.708 1055.02,228.05 1055.59,228.511 1056.16,227.726 1056.73,228.998 1057.3,230.23 1057.87,231.35 1058.43,228.314 1059,228.737 1059.57,229.99 1060.14,231.209 1060.71,232.354 1061.28,231.144 1061.84,229.153 1062.41,229.256 1062.98,229.51 1063.55,230.551 1064.12,231.72 1064.69,233.786 1065.25,235.855 1065.82,236.393 1066.39,236.195 1066.96,235.979 1067.53,237.846 1068.1,237.382 1068.66,237.974 1069.23,237.738 1069.8,237.458 1070.37,237.1 1070.94,236.545 1071.51,235.941 1072.07,237.871 1072.64,238.292 1073.21,236.759 1073.78,236.079 1074.35,234.555 1074.92,232.526 1075.48,232.359 1076.05,231.162 1076.62,231.032 1077.19,229.971 1077.76,231.98 1078.33,233.962 1078.89,232.8 1079.46,232.381 1080.03,232.195 1080.6,231.827 1081.17,232.647 1081.74,229.384 1082.3,228.526 1082.87,228.597 1083.44,228.707 1084.01,229.919 1084.58,228.857 1085.15,229.024 1085.71,228.987 1086.28,227.003 1086.85,226.291 1087.42,227.762 1087.99,229.162 1088.56,229.238 1089.12,229.38 1089.69,226.121 1090.26,227.268 1090.83,227.518 1091.4,227.867 1091.97,229.227 1092.53,228.095 1093.1,230.254 1093.67,230.265 1094.24,228.021 1094.81,227.099 1095.38,227.23 1095.94,228.371 1096.51,228.511 1097.08,228.55 1097.65,226.654 1098.22,228.029 1098.79,229.183 1099.35,229.492 1099.92,228.613 1100.49,227.742 1101.06,228.041 1101.63,229.344 1102.2,230.586 1102.76,230.52 1103.33,229.811 1103.9,230.856 1104.47,230.995 1105.04,228.975 1105.61,227.07 1106.17,230.402 1106.74,231.528 1107.31,231.662 1107.88,231.734 1108.45,231.752 1109.02,232.833 1109.58,233.694 1110.15,233.503 1110.72,234.384 1111.29,233.392 1111.86,233.086 1112.43,231.952 1112.99,231.782 1113.56,231.594 1114.13,230.609 1114.7,231.773 1115.27,232.692 1115.84,234.628 1116.4,235.389 1116.97,235.21 1117.54,231.793 1118.11,231.785 1118.68,231.967 1119.25,230.861 1119.81,230.952 1120.38,230.05 1120.95,229.203 1121.52,227.318 1122.09,228.755 1122.66,229.027 1123.23,231.126 1123.79,227.986 1124.36,230.257 1124.93,230.209 1125.5,228.358 1126.07,229.578 1126.64,229.741 1127.2,230.937 1127.77,231.008 1128.34,229.05 1128.91,228.186 1129.48,228.44 1130.05,227.586 1130.61,229.893 1131.18,229.817 1131.75,232.993 1132.32,231.626 1132.89,230.466 1133.46,231.524 1134.02,231.093 1134.59,231.082 1135.16,229.972 1135.73,231.052 1136.3,232.059 1136.87,231.818 1137.43,231.852 1138,230.894 1138.57,229.875 1139.14,227.965 1139.71,229.162 1140.28,229.433 1140.84,227.527 1141.41,228.907 1141.98,228.05 1142.55,231.398 1143.12,231.236 1143.69,231.109 1144.25,232.232 1144.82,231.198 1145.39,230.235 1145.96,229.235 1146.53,228.418 1147.1,227.752 1147.66,229.156 1148.23,231.524 1148.8,232.479 1149.37,234.447 1149.94,235.28 1150.51,235.277 1151.07,234.826 1151.64,233.698 1152.21,232.562 1152.78,232.54 1153.35,232.378 1153.92,232.282 1154.48,231.345 1155.05,230.172 1155.62,236.234 1156.19,238.053 1156.76,237.574 1157.33,236.976 1157.89,235.327 1158.46,235.921 1159.03,235.561 1159.6,234.233 1160.17,234.086 1160.74,232.732 1161.3,233.713 1161.87,232.308 1162.44,234.159 1163.01,232.604 1163.58,230.337 1164.15,230.427 1164.71,230.513 1165.28,231.61 1165.85,230.264 1166.42,230.205 1166.99,228.971 1167.56,228.174 1168.12,228.391 1168.69,227.522 1169.26,227.572 1169.83,225.606 1170.4,226.953 1170.97,230.114 1171.53,232.037 1172.1,230.848 1172.67,231.866 1173.24,232.529 1173.81,231.234 1174.38,229.131 1174.94,229.436 1175.51,229.556 1176.08,230.672 1176.65,230.919 1177.22,230.981 1177.79,230.802 1178.35,231.792 1178.92,231.837 1179.49,231.635 1180.06,230.431 1180.63,231.557 1181.2,233.402 1181.76,230.947 1182.33,231.648 1182.9,232.367 1183.47,231.867 1184.04,229.586 1184.61,229.721 1185.17,229.862 1185.74,232.8 1186.31,232.641 1186.88,231.478 1187.45,230.173 1188.02,231.3 1188.58,232.232 1189.15,233.065 1189.72,232.84 1190.29,231.724 1190.86,232.673 1191.43,230.225 1192,229.202 1192.56,229.291 1193.13,229.312 1193.7,228.31 1194.27,227.414 1194.84,227.67 1195.41,227.807 1195.97,226.803 1196.54,229.092 1197.11,231.281 1197.68,229.048 1198.25,226.837 1198.82,227.015 1199.38,228.103 1199.95,230.052 1200.52,229.199 1201.09,228.108 1201.66,230.484 1202.23,232.648 1202.79,230.403 1203.36,231.414 1203.93,231.399 1204.5,232.334 1205.07,232.376 1205.64,233.298 1206.2,233.005 1206.77,233.854 1207.34,234.605 1207.91,235.431 1208.48,235.877 1209.05,235.476 1209.61,235.001 1210.18,234.671 1210.75,235.346 1211.32,234.773 1211.89,231.246 1212.46,230.999 1213.02,232.743 1213.59,233.461 1214.16,229.852 1214.73,230.774 1215.3,229.598 1215.87,230.74 1216.43,230.548 1217,229.549 1217.57,230.323 1218.14,230.266 1218.71,230.101 1219.28,230.136 1219.84,229.035 1220.41,229.178 1220.98,230.057 1221.55,229.87 1222.12,227.503 1222.69,229.889 1223.25,228.976 1223.82,228.839 1224.39,229.931 1224.96,230 1225.53,229.128 1226.1,229.279 1226.66,230.144 1227.23,229.228 1227.8,228.147 1228.37,229.104 1228.94,228.236 1229.51,230.678 1230.07,231.754 1230.64,231.548 1231.21,233.227 1231.78,234.026 1232.35,232.876 1232.92,230.403 1233.48,231.426 1234.05,230.259 1234.62,230.185 1235.19,229.237 1235.76,230.433 1236.33,230.252 1236.89,229.113 1237.46,228.178 1238.03,228.196 1238.6,229.537 1239.17,229.925 1239.74,229.924 1240.3,227.886 1240.87,226.96 1241.44,229.158 1242.01,230.283 1242.58,230.316 1243.15,228.243 1243.71,227.411 1244.28,228.761 1244.85,227.856 1245.42,229.007 1245.99,227.012 1246.56,227.295 1247.12,228.324 1247.69,228.644 1248.26,227.805 1248.83,227.01 1249.4,228.196 1249.97,228.37 1250.53,227.426 1251.1,226.557 1251.67,225.785 1252.24,226.117 1252.81,227.413 1253.38,226.55 1253.94,227.192 1254.51,226.339 1255.08,228.49 1255.65,228.825 1256.22,227.031 1256.79,228.546 1257.35,228.977 1257.92,228.006 1258.49,228.457 1259.06,228.623 1259.63,231.903 1260.2,231.896 1260.76,230.684 1261.33,230.991 1261.9,231.974 1262.47,229.901 1263.04,229.807 1263.61,228.826 1264.18,227.997 1264.74,228.141 1265.31,232.479 1265.88,232.527 1266.45,231.591 1267.02,232.554 1267.59,230.289 1268.15,232.474 1268.72,233.534 1269.29,231.181 1269.86,231.262 1270.43,231.282 1271,233.277 1271.56,233.109 1272.13,233.926 1272.7,233.698 1273.27,232.395 1273.84,232.192 1274.41,231.962 1274.97,230.933 1275.54,233.06 1276.11,233.977 1276.68,231.628 1277.25,232.426 1277.82,232.274 1278.38,235.337 1278.95,233.926 1279.52,234.837 1280.09,235.778 1280.66,234.589 1281.23,231.058 1281.79,229.049 1282.36,228.085 1282.93,227.421 1283.5,227.687 1284.07,227.997 1284.64,227.135 1285.2,228.361 1285.77,229.781 1286.34,229.891 1286.91,231.025 1287.48,231.193 1288.05,231.968 1288.61,229.844 1289.18,229.669 1289.75,228.921 1290.32,227.996 1290.89,229.008 1291.46,229.338 1292.02,231.63 1292.59,231.655 1293.16,232.635 1293.73,233.558 1294.3,231.302 1294.87,229.296 1295.43,230.356 1296,229.241 1296.57,228.242 1297.14,230.557 1297.71,233.564 1298.28,235.353 1298.84,233.033 1299.41,234.053 1299.98,234.962 1300.55,234.706 1301.12,234.463 1301.69,231.265 1302.25,228.896 1302.82,227.968 1303.39,226.281 1303.96,226.856 1304.53,227.207 1305.1,225.277 1305.66,224.545 1306.23,225.967 1306.8,224.205 1307.37,222.804 1307.94,224.392 1308.51,225.709 1309.07,227.231 1309.64,226.341 1310.21,227.747 1310.78,229.08 1311.35,230.375 1311.92,230.696 1312.48,229.765 1313.05,228.932 1313.62,229.209 1314.19,228.39 1314.76,227.65 1315.33,227.837 1315.89,229.122 1316.46,230.338 1317.03,230.441 1317.6,231.66 1318.17,231.872 1318.74,232.033 1319.3,234.072 1319.87,230.948 1320.44,231.752 1321.01,232.627 1321.58,231.394 1322.15,230.45 1322.71,227.469 1323.28,227.95 1323.85,230.161 1324.42,230.45 1324.99,231.325 1325.56,231.222 1326.12,233.449 1326.69,234.313 1327.26,233.253 1327.83,232.16 1328.4,233.19 1328.97,232.982 1329.53,232.497 1330.1,233.481 1330.67,233.117 1331.24,237.883 1331.81,238.558 1332.38,240.328 1332.94,241.668 1333.51,241.995 1334.08,240.14 1334.65,241.274 1335.22,239.374 1335.79,238.766 1336.36,238.037 1336.92,236.276 1337.49,233.648 1338.06,232.429 1338.63,230.198 1339.2,231.187 1339.77,230.001 1340.33,227.826 1340.9,229.193 1341.47,228.082 1342.04,228.253 1342.61,229.497 1343.18,229.583 1343.74,228.451 1344.31,229.574 1344.88,230.463 1345.45,231.399 1346.02,231.28 1346.59,229.146 1347.15,230.208 1347.72,229.201 1348.29,228.412 1348.86,227.246 1349.43,228.358 1350,229.607 1350.56,230.934 1351.13,231.635 1351.7,230.616 1352.27,229.748 1352.84,228.865 1353.41,227.732 1353.97,231.016 1354.54,230.856 1355.11,230.844 1355.68,229.788 1356.25,231.022 1356.82,229.93 1357.38,228.824 1357.95,229.871 1358.52,229.019 1359.09,229.093 1359.66,229.179 1360.23,230.528 1360.79,230.522 1361.36,229.532 1361.93,229.614 1362.5,228.705 1363.07,230.801 1363.64,230.819 1364.2,230.794 1364.77,230.768 1365.34,233.929 1365.91,235.463 1366.48,235.838 1367.05,234.41 1367.61,229.769 1368.18,229.508 1368.75,231.606 1369.32,232.501 1369.89,232.358 1370.46,233.02 1371.02,232.728 1371.59,233.607 1372.16,234.239 1372.73,233.811 1373.3,233.267 1373.87,230.812 1374.43,228.771 1375,229.91 1375.57,228.888 1376.14,228.019 1376.71,229.042 1377.28,227.862 1377.84,228.194 1378.41,227.222 1378.98,228.547 1379.55,228.667 1380.12,229.591 1380.69,231.548 1381.25,233.488 1381.82,234.156 1382.39,231.891 1382.96,231.637 1383.53,231.445 1384.1,231.358 1384.66,233.228 1385.23,234.074 1385.8,236.876 1386.37,234.18 1386.94,236.055 1387.51,232.625 1388.07,230.441 1388.64,231.52 1389.21,232.288 1389.78,231.999 1390.35,230.472 1390.92,230.367 1391.48,227.337 1392.05,227.538 1392.62,227.74 1393.19,227.968 1393.76,228.835 1394.33,230.073 1394.89,230.921 1395.46,229.88 1396.03,228.991 1396.6,227.119 1397.17,226.443 1397.74,227.67 1398.3,229.823 1398.87,227.78 1399.44,227.775 1400.01,226.834 1400.58,228.09 1401.15,228.114 1401.71,228.368 1402.28,226.174 1402.85,225.343 1403.42,227.639 1403.99,229.172 1404.56,228.229 1405.13,228.505 1405.69,228.634 1406.26,227.788 1406.83,228.978 1407.4,227.837 1407.97,227.809 1408.54,227.928 1409.1,228.294 1409.67,229.632 1410.24,230.629 1410.81,231.708 1411.38,229.554 1411.95,228.518 1412.51,228.739 1413.08,227.59 1413.65,226.862 1414.22,226.031 1414.79,226.28 1415.36,225.972 1415.92,223.321 1416.49,222.931 1417.06,223.401 1417.63,224.074 1418.2,223.405 1418.77,222.827 1419.33,223.6 1419.9,224.311 1420.47,224.97 1421.04,223.545 1421.61,222.15 1422.18,222.794 1422.74,224.302 1423.31,225.971 1423.88,224.415 1424.45,225.956 1425.02,226.452 1425.59,225.946 1426.15,226.317 1426.72,227.773 1427.29,227.25 1427.86,230.668 1428.43,232.932 1429,231.986 1429.56,232.054 1430.13,232.27 1430.7,230.218 1431.27,230.437 1431.84,231.555 1432.41,231.526 1432.97,232.516 1433.54,232.582 1434.11,233.533 1434.68,232.513 1435.25,231.35 1435.82,230.427 1436.38,229.372 1436.95,228.644 1437.52,231.06 1438.09,231.262 1438.66,234.376 1439.23,236.409 1439.79,237.108 1440.36,236.889 1440.93,239.622 1441.5,238.105 1442.07,240.714 1442.64,236.993 1443.2,237.742 1443.77,237.242 1444.34,237.956 1444.91,238.623 1445.48,235.954 1446.05,235.654 1446.61,235.157 1447.18,234.875 1447.75,234.688 1448.32,233.263 1448.89,233.081 1449.46,231.987 1450.02,231.946 1450.59,232.01 1451.16,233.156 1451.73,232.799 1452.3,234.68 1452.87,237.499 1453.43,235.763 1454,238.588 1454.57,235.106 1455.14,233.727 1455.71,229.397 1456.28,231.592 1456.84,232.676 1457.41,232.477 1457.98,233.35 1458.55,234.076 1459.12,233.719 1459.69,233.504 1460.25,232.165 1460.82,233.003 1461.39,232.854 1461.96,233.59 1462.53,234.257 1463.1,232.822 1463.66,232.632 1464.23,233.384 1464.8,235.344 1465.37,235.195 1465.94,233.643 1466.51,233.531 1467.07,233.043 1467.64,233.076 1468.21,233.929 1468.78,233.48 1469.35,234.264 1469.92,233.943 1470.48,232.717 1471.05,231.311 1471.62,232.098 1472.19,231.732 1472.76,230.496 1473.33,228.364 1473.89,228.49 1474.46,228.538 1475.03,227.586 1475.6,228.719 1476.17,228.7 1476.74,231.838 1477.31,232.793 1477.87,233.472 1478.44,232.099 1479.01,231.904 1479.58,231.752 1480.15,231.272 1480.72,231.08 1481.28,230.109 1481.85,229.988 1482.42,229.852 1482.99,228.844 1483.56,227.949 1484.13,228.06 1484.69,226.836 1485.26,228.021 1485.83,223.966 1486.4,222.434 1486.97,223.977 1487.54,225.367 1488.1,226.78 1488.67,228.103 1489.24,228.025 1489.81,229.003 1490.38,227.912 1490.95,228.053 1491.51,229.38 1492.08,228.262 1492.65,226.334 1493.22,226.649 1493.79,227.076 1494.36,227.172 1494.92,223.392 1495.49,222.766 1496.06,224.344 1496.63,223.743 1497.2,223.366 1497.77,223.876 1498.33,223.315 1498.9,222.72 1499.47,224.277 1500.04,224.87 1500.61,226.247 1501.18,224.582 1501.74,226.095 1502.31,226.385 1502.88,226.688 1503.45,227.004 1504.02,226.335 1504.59,226.585 1505.15,226.93 1505.72,223.384 1506.29,222.856 1506.86,224.866 1507.43,225.272 1508,222.641 1508.56,224.401 1509.13,223.997 1509.7,225.731 1510.27,226.088 1510.84,226.777 1511.41,228.265 1511.97,230.583 1512.54,230.819 1513.11,232.087 1513.68,231.05 1514.25,232.309 1514.82,235.452 1515.38,236.232 1515.95,234.843 1516.52,234.774 1517.09,235.981 1517.66,236.754 1518.23,238.647 1518.79,240.214 1519.36,237.541 1519.93,236.107 1520.5,234.701 1521.07,234.482 1521.64,234.263 1522.2,233.981 1522.77,232.861 1523.34,232.731 1523.91,233.762 1524.48,233.756 1525.05,232.456 1525.61,233.362 1526.18,233.091 1526.75,231.953 1527.32,229.688 1527.89,229.992 1528.46,228.975 1529.02,229.374 1529.59,231.448 1530.16,230.409 1530.73,229.204 1531.3,229.137 1531.87,230.472 1532.43,233.421 1533,234.214 1533.57,235.197 1534.14,232.968 1534.71,233.926 1535.28,234.713 1535.84,235.347 1536.41,236.036 1536.98,234.741 1537.55,234.563 1538.12,233.328 1538.69,232.938 1539.25,231.806 1539.82,231.655 1540.39,232.643 1540.96,231.428 1541.53,231.5 1542.1,230.459 1542.66,231.579 1543.23,231.484 1543.8,229.391 1544.37,226.255 1544.94,224.574 1545.51,226.082 1546.08,227.507 1546.64,228.756 1547.21,225.868 1547.78,228.046 1548.35,226.251 1548.92,225.919 1549.49,226.167 1550.05,225.507 1550.62,225.758 1551.19,227.231 1551.76,228.595 1552.33,229.696 1552.9,228.903 1553.46,231.418 1554.03,231.173 1554.6,232.282 1555.17,232.174 1555.74,236.081 1556.31,237.916 1556.87,238.235 1557.44,235.745 1558.01,235.466 1558.58,236.129 1559.15,235.6 1559.72,233.046 1560.28,231.883 1560.85,231.958 1561.42,233.942 1561.99,233.61 1562.56,233.317 1563.13,233.182 1563.69,234.17 1564.26,233.999 1564.83,232.701 1565.4,233.624 1565.97,234.299 1566.54,234.096 1567.1,235.667 1567.67,234.346 1568.24,234.986 1568.81,232.492 1569.38,230.165 1569.95,232.222 1570.51,230.9 1571.08,231.849 1571.65,230.682 1572.22,229.68 1572.79,229.707 1573.36,229.835 1573.92,228.578 1574.49,229.673 1575.06,229.668 1575.63,227.752 1576.2,226.869 1576.77,228.211 1577.33,229.552 1577.9,231.833 1578.47,231.684 1579.04,231.593 1579.61,232.429 1580.18,232.303 1580.74,232.225 1581.31,231.157 1581.88,230.111 1582.45,231.31 1583.02,231.561 1583.59,229.476 1584.15,230.435 1584.72,231.375 1585.29,230.327 1585.86,230.191 1586.43,230.097 1587,228.286 1587.56,231.41 1588.13,231.146 1588.7,229.86 1589.27,227.78 1589.84,230.806 1590.41,230.497 1590.97,230.46 1591.54,230.339 1592.11,228.261 1592.68,230.405 1593.25,230.443 1593.82,230.25 1594.38,230.152 1594.95,229.068 1595.52,227.856 1596.09,228.044 1596.66,227.083 1597.23,228.459 1597.79,230.613 1598.36,233.549 1598.93,234.159 1599.5,231.811 1600.07,230.641 1600.64,230.844 1601.2,230.892 1601.77,230.731 1602.34,230.81 1602.91,229.571 1603.48,228.546 1604.05,228.591 1604.61,226.702 1605.18,225.796 1605.75,224.997 1606.32,222.353 1606.89,223.886 1607.46,224.465 1608.02,222.796 1608.59,223.113 1609.16,223.627 1609.73,225.156 1610.3,225.445 1610.87,226.771 1611.43,227.127 1612,227.313 1612.57,227.738 1613.14,229.087 1613.71,228.304 1614.28,228.702 1614.84,228.873 1615.41,228.059 1615.98,228.381 1616.55,228.488 1617.12,227.839 1617.69,228.053 1618.26,227.466 1618.82,226.833 1619.39,228.338 1619.96,229.751 1620.53,230.778 1621.1,229.983 1621.67,231.306 1622.23,230.125 1622.8,230.091 1623.37,232.08 1623.94,231.935 1624.51,231.06 1625.08,230.056 1625.64,228.253 1626.21,230.391 1626.78,231.635 1627.35,231.65 1627.92,231.568 1628.49,230.819 1629.05,232.016 1629.62,233.938 1630.19,235.905 1630.76,235.357 1631.33,235.043 1631.9,235.953 1632.46,234.665 1633.03,234.384 1633.6,234.168 1634.17,233.984 1634.74,233.748 1635.31,232.787 1635.87,233.622 1636.44,234.544 1637.01,234.252 1637.58,233.041 1638.15,233.882 1638.72,231.407 1639.28,233.468 1639.85,233.261 1640.42,235.067 1640.99,234.784 1641.56,235.564 1642.13,234.232 1642.69,230.943 1643.26,231.984 1643.83,232.941 1644.4,232.484 1644.97,231.076 1645.54,231.141 1646.1,230.045 1646.67,229.022 1647.24,230.276 1647.81,230.185 1648.38,230.022 1648.95,228.898 1649.51,228.103 1650.08,230.298 1650.65,231.253 1651.22,232.032 1651.79,229.667 1652.36,230.115 1652.92,230.117 1653.49,229.254 1654.06,227.442 1654.63,225.629 1655.2,225.841 1655.77,224.182 1656.33,226.727 1656.9,228.916 1657.47,227.827 1658.04,228.101 1658.61,228.252 1659.18,226.228 1659.74,225.468 1660.31,225.785 1660.88,226.094 1661.45,226.382 1662.02,225.733 1662.59,225.059 1663.15,228.751 1663.72,226.781 1664.29,228.017 1664.86,232.307 1665.43,232.138 1666,235.125 1666.56,233.949 1667.13,235.031 1667.7,234.69 1668.27,229.46 1668.84,229.679 1669.41,229.81 1669.97,230.851 1670.54,233.031 1671.11,231.985 1671.68,230.906 1672.25,230.793 1672.82,231.617 1673.38,230.775 1673.95,231.734 1674.52,232.861 1675.09,232.947 1675.66,233.031 1676.23,231.694 1676.79,232.621 1677.36,232.58 1677.93,232.391 1678.5,232.266 1679.07,235.358 1679.64,234.11 1680.2,234.644 1680.77,234.412 1681.34,237.113 1681.91,236.657 1682.48,236.258 1683.05,234.974 1683.61,234.626 1684.18,234.023 1684.75,232.852 1685.32,232.953 1685.89,232.84 1686.46,231.713 1687.02,232.624 1687.59,234.315 1688.16,233.906 1688.73,234.629 1689.3,234.373 1689.87,234.27 1690.44,231.975 1691,232.506 1691.57,234.277 1692.14,233.977 1692.71,233.705 1693.28,232.375 1693.85,231.076 1694.41,230.086 1694.98,231.235 1695.55,230.244 1696.12,228.121 1696.69,229.505 1697.26,229.614 1697.82,229.732 1698.39,229.708 1698.96,232.794 1699.53,233.482 1700.1,233.071 1700.67,232.899 1701.23,232.699 1701.8,231.343 1702.37,228.241 1702.94,228.319 1703.51,228.408 1704.08,229.625 1704.64,228.531 1705.21,226.488 1705.78,227.7 1706.35,227.035 1706.92,227.331 1707.49,229.641 1708.05,230.763 1708.62,227.655 1709.19,227.737 1709.76,229.949 1710.33,233.122 1710.9,234.713 1711.46,235.674 1712.03,229.116 1712.6,229.231 1713.17,227.38 1713.74,226.481 1714.31,228.691 1714.87,228.663 1715.44,226.742 1716.01,227.143 1716.58,228.484 1717.15,228.527 1717.72,229.587 1718.28,230.663 1718.85,230.756 1719.42,229.787 1719.99,230.608 1720.56,230.511 1721.13,234.76 1721.69,235.249 1722.26,232.804 1722.83,229.755 1723.4,228.785 1723.97,228.683 1724.54,226.555 1725.1,226.681 1725.67,229.123 1726.24,230.157 1726.81,230.136 1727.38,231.39 1727.95,230.374 1728.51,229.521 1729.08,230.611 1729.65,228.745 1730.22,228.006 1730.79,227.373 1731.36,226.528 1731.92,227.688 1732.49,228.896 1733.06,228.972 1733.63,226.923 1734.2,228.004 1734.77,227.987 1735.33,228.046 1735.9,229.922 1736.47,227.8 1737.04,227.994 1737.61,227.08 1738.18,228.39 1738.74,226.333 1739.31,226.749 1739.88,229.184 1740.45,227.186 1741.02,225.509 1741.59,224.793 1742.15,226.22 1742.72,223.635 1743.29,223.907 1743.86,226.204 1744.43,224.461 1745,225.162 1745.56,225.487 1746.13,223.619 1746.7,223.172 1747.27,222.679 1747.84,225.154 1748.41,222.55 1748.97,222.191 1749.54,223.965 1750.11,226.836 1750.68,225.001 1751.25,225.564 1751.82,226.153 1752.38,227.435 1752.95,226.88 1753.52,226.498 1754.09,229.108 1754.66,230.464 1755.23,231.541 1755.79,230.641 1756.36,233.793 1756.93,233.93 1757.5,229.682 1758.07,233.042 1758.64,233.256 1759.21,234.497 1759.77,234.269 1760.34,232.2 1760.91,233.386 1761.48,234.406 1762.05,235.434 1762.62,235.292 1763.18,236.139 1763.75,238.049 1764.32,235.409 1764.89,236.191 1765.46,235.824 1766.03,235.421 1766.59,235.271 1767.16,234.814 1767.73,234.543 1768.3,236.318 1768.87,237.007 1769.44,237.69 1770,237.308 1770.57,236.836 1771.14,235.239 1771.71,235.136 1772.28,235.972 1772.85,233.87 1773.41,233.691 1773.98,235.556 1774.55,232.305 1775.12,235.161 1775.69,234.833 1776.26,234.479 1776.82,235.316 1777.39,235.076 1777.96,231.485 1778.53,230.597 1779.1,230.683 1779.67,230.772 1780.23,229.69 1780.8,228.832 1781.37,229.128 1781.94,227.084 1782.51,227.456 1783.08,227.796 1783.64,230.058 1784.21,231.897 1784.78,230.98 1785.35,232.887 1785.92,232.705 1786.49,233.653 1787.05,233.615 1787.62,232.433 1788.19,231.229 1788.76,229.859 1789.33,228.98 1789.9,227.104 1790.46,226.344 1791.03,227.691 1791.6,230.013 1792.17,231.115 1792.74,229.074 1793.31,229.208 1793.87,229.383 1794.44,229.324 1795.01,229.386 1795.58,230.616 1796.15,232.768 1796.72,232.547 1797.28,232.455 1797.85,231.302 1798.42,233.419 1798.99,234.231 1799.56,235.802 1800.13,236.677 1800.69,235.213 1801.26,235.879 1801.83,237.348 1802.4,236.747 1802.97,234.25 1803.54,235.099 1804.1,235.872 1804.67,231.322 1805.24,230.206 1805.81,230.18 1806.38,231.269 1806.95,231.331 1807.51,230.175 1808.08,230.021 1808.65,229.936 1809.22,228.883 1809.79,228.937 1810.36,228.968 1810.92,228.046 1811.49,229.033 1812.06,229.351 1812.63,227.472 1813.2,229.815 1813.77,230.848 1814.33,230.817 1814.9,230.712 1815.47,233.642 1816.04,234.439 1816.61,234.159 1817.18,233.821 1817.74,233.379 1818.31,232.727 1818.88,232.251 1819.45,228.918 1820.02,228.937 1820.59,229.019 1821.15,228.874 1821.72,228.912 1822.29,230.187 1822.86,231.083 1823.43,233.033 1824,232.73 1824.56,232.608 1825.13,233.52 1825.7,236.175 1826.27,235.628 1826.84,234.198 1827.41,231.962 1827.97,229.658 1828.54,229.718 1829.11,228.729 1829.68,226.705 1830.25,226.921 1830.82,226.204 1831.39,225.627 1831.95,227.043 1832.52,227.155 1833.09,227.189 1833.66,225.312 1834.23,223.684 1834.8,224.072 1835.36,225.391 1835.93,226.645 1836.5,225.975 1837.07,227.305 1837.64,229.875 1838.21,229.781 1838.77,229.883 1839.34,229.81 1839.91,229.812 1840.48,228.835 1841.05,229.933 1841.62,231.007 1842.18,231.821 1842.75,232.753 1843.32,232.57 1843.89,231.364 1844.46,231.098 1845.03,231.071 1845.59,232.157 1846.16,234.108 1846.73,233.845 1847.3,230.4 1847.87,232.44 1848.44,232.433 1849,232.111 1849.57,232.161 1850.14,228.985 1850.71,230.912 1851.28,230.592 1851.85,233.287 1852.41,230.761 1852.98,229.756 1853.55,229.855 1854.12,231.806 1854.69,231.569 1855.26,228.586 1855.82,227.762 1856.39,228.112 1856.96,227.263 1857.53,228.323 1858.1,227.394 1858.67,228.678 1859.23,227.789 1859.8,226.676 1860.37,225.871 1860.94,226.354 1861.51,227.86 1862.08,228.047 1862.64,229.124 1863.21,227.044 1863.78,228.295 1864.35,227.23 1864.92,227.612 1865.49,226.632 1866.05,226.817 1866.62,227.038 1867.19,225.346 1867.76,225.841 1868.33,228.103 1868.9,229.504 1869.46,230.554 1870.03,230.697 1870.6,232.968 1871.17,234.947 1871.74,234.769 1872.31,236.559 1872.87,236.121 1873.44,237.868 1874.01,237.473 1874.58,237.973 1875.15,235.289 1875.72,233.987 1876.28,232.538 1876.85,232.339 1877.42,233.175 1877.99,231.993 1878.56,230.955 1879.13,233.204 1879.69,233.1 1880.26,232.842 1880.83,231.721 1881.4,228.507 1881.97,225.799 1882.54,226.337 1883.1,226.686 1883.67,224.922 1884.24,226.387 1884.81,225.281 1885.38,222.446 1885.95,222.026 1886.51,224.638 1887.08,224.291 1887.65,224.705 1888.22,226.377 1888.79,225.716 1889.36,228.158 1889.92,228.307 1890.49,228.49 1891.06,230.751 1891.63,231.756 1892.2,231.799 1892.77,230.799 1893.33,229.921 1893.9,231.965 1894.47,232.141 1895.04,229.016 1895.61,229.267 1896.18,229.456 1896.74,229.491 1897.31,229.814 1897.88,233.052 1898.45,233.89 1899.02,234.621 1899.59,235.387 1900.16,230.905 1900.72,229.849 1901.29,228.073 1901.86,226.325 1902.43,226.759 1903,232.006 1903.57,230.994 1904.13,233.14 1904.7,232.073 1905.27,233.945 1905.84,235.934 1906.41,234.76 1906.98,234.537 1907.54,234.183 1908.11,234.018 1908.68,234.9 1909.25,233.563 1909.82,233.309 1910.39,231.154 1910.95,229.791 1911.52,230.987 1912.09,230.972 1912.66,233.231 1913.23,231.015 1913.8,230.904 1914.36,227.779 1914.93,228.982 1915.5,230.024 1916.07,231.05 1916.64,230.284 1917.21,231.165 1917.77,230.276 1918.34,229.313 1918.91,230.344 1919.48,233.475 1920.05,234.589 1920.62,235.258 1921.18,234.754 1921.75,235.352 1922.32,235.091 1922.89,234.404 1923.46,233.182 1924.03,236.13 1924.59,236.839 1925.16,236.258 1925.73,233.715 1926.3,231.555 1926.87,232.401 1927.44,232.442 1928,231.183 1928.57,231.987 1929.14,230.685 1929.71,229.781 1930.28,230.538 1930.85,231.652 1931.41,232.409 1931.98,229.216 1932.55,229.128 1933.12,228.076 1933.69,231.478 1934.26,233.462 1934.82,234.319 1935.39,235.023 1935.96,233.602 1936.53,233.22 1937.1,233.048 1937.67,232.897 1938.23,231.578 1938.8,231.647 1939.37,231.205 1939.94,231.935 1940.51,232.889 1941.08,232.57 1941.64,227.195 1942.21,227.11 1942.78,229.332 1943.35,228.229 1943.92,229.174 1944.49,230.124 1945.05,228.944 1945.62,229.787 1946.19,230.736 1946.76,230.673 1947.33,229.828 1947.9,229.806 1948.46,229.869 1949.03,229.926 1949.6,229.024 1950.17,228.241 1950.74,228.554 1951.31,229.993 1951.87,230.009 1952.44,227.915 1953.01,229.05 1953.58,229.173 1954.15,228.464 1954.72,230.498 1955.28,232.413 1955.85,228.305 1956.42,228.405 1956.99,229.423 1957.56,229.431 1958.13,229.746 1958.69,230.754 1959.26,230.556 1959.83,231.469 1960.4,230.476 1960.97,230.376 1961.54,230.585 1962.1,230.67 1962.67,229.623 1963.24,230.661 1963.81,228.378 1964.38,229.472 1964.95,228.649 1965.51,227.596 1966.08,226.82 1966.65,228.956 1967.22,229.011 1967.79,230.134 1968.36,231.232 1968.92,233.353 1969.49,231.058 1970.06,230.031 1970.63,231.051 1971.2,231.907 1971.77,230.799 1972.34,230.901 1972.9,228.829 1973.47,228.963 1974.04,227.031 1974.61,228.138 1975.18,228.341 1975.75,229.784 1976.31,228.971 1976.88,227.972 1977.45,228.251 1978.02,226.379 1978.59,225.311 1979.16,227.8 1979.72,227.107 1980.29,228.462 1980.86,227.664 1981.43,227.009 1982,226.202 1982.57,225.689 1983.13,228.008 1983.7,226.202 1984.27,228.742 1984.84,227.967 1985.41,229.28 1985.98,226.222 1986.54,225.564 1987.11,227.009 1987.68,225.164 1988.25,223.668 1988.82,222.321 1989.39,224.881 1989.95,223.553 1990.52,224.181 1991.09,224.798 1991.66,228.28 1992.23,226.677 1992.8,227.472 1993.36,229.119 1993.93,227.373 1994.5,227.774 1995.07,229.118 1995.64,231.402 1996.21,232.368 1996.77,232.377 1997.34,232.514 1997.91,234.649 1998.48,234.529 1999.05,233.324 1999.62,236.427 2000.18,234.876 2000.75,233.793 2001.32,235.711 2001.89,235.44 2002.46,233.094 2003.03,231.019 2003.59,231.124 2004.16,231.317 2004.73,232.467 2005.3,233.467 2005.87,233.126 2006.44,234.2 2007,232.95 2007.57,232.624 2008.14,232.645 2008.71,232.642 2009.28,233.409 2009.85,234.34 2010.41,237.182 2010.98,238.695 2011.55,238.137 2012.12,237.529 2012.69,237.033 2013.26,236.66 2013.82,236.195 2014.39,233.737 2014.96,233.55 2015.53,235.396 2016.1,234.041 2016.67,233.972 2017.23,236.895 2017.8,234.231 2018.37,232.935 2018.94,231.85 2019.51,231.887 2020.08,230.734 2020.64,229.862 2021.21,228.925 2021.78,230.846 2022.35,233.982 2022.92,234.749 2023.49,233.379 2024.05,236.281 2024.62,234.792 2025.19,234.55 2025.76,237.115 2026.33,236.523 2026.9,235.196 2027.46,235.92 2028.03,234.543 2028.6,235.07 2029.17,234.617 2029.74,231.075 2030.31,231.859 2030.87,230.572 2031.44,231.298 2032.01,234.293 2032.58,232.739 2033.15,235.339 2033.72,234.786 2034.28,234.229 2034.85,233.511 2035.42,232.148 2035.99,229.882 2036.56,229.677 2037.13,230.698 2037.69,229.535 2038.26,229.343 2038.83,229.25 2039.4,227.12 2039.97,227.456 2040.54,231.63 2041.11,231.437 2041.67,230.094 2042.24,229.982 2042.81,229.862 2043.38,229.818 2043.95,227.679 2044.52,229.862 2045.08,230.813 2045.65,230.621 2046.22,230.495 2046.79,230.31 2047.36,228.156 2047.93,226.181 2048.49,226.138 2049.06,226.53 2049.63,225.674 2050.2,225.232 2050.77,225.627 2051.34,225.76 2051.9,226.958 2052.47,231.169 2053.04,230.963 2053.61,230.74 2054.18,230.785 2054.75,229.481 2055.31,229.41 2055.88,227.502 2056.45,228.466 2057.02,226.534 2057.59,225.854 2058.16,225.269 2058.72,225.409 2059.29,226.891 2059.86,228.459 2060.43,228.418 2061,231.731 2061.57,231.686 2062.13,231.567 2062.7,232.367 2063.27,234.51 2063.84,235.869 2064.41,235.432 2064.98,236.151 2065.54,235.778 2066.11,235.216 2066.68,236.059 2067.25,236.575 2067.82,236.086 2068.39,236.418 2068.95,237.105 2069.52,238.721 2070.09,238.055 2070.66,236.653 2071.23,237.461 2071.8,234.782 2072.36,235.408 2072.93,234.832 2073.5,235.272 2074.07,232.681 2074.64,233.333 2075.21,233.126 2075.77,232.957 2076.34,231.443 2076.91,231.095 2077.48,231.977 2078.05,229.529 2078.62,231.41 2079.18,229.108 2079.75,226.115 2080.32,225.162 2080.89,225.398 2081.46,224.434 2082.03,222.619 2082.59,225.184 2083.16,224.205 2083.73,224.606 2084.3,225.002 2084.87,225.268 2085.44,226.512 2086,226.629 2086.57,224.894 2087.14,223.146 2087.71,225.643 2088.28,226.935 2088.85,227.354 2089.41,228.66 2089.98,229.972 2090.55,230.017 2091.12,230.946 2091.69,228.811 2092.26,231.973 2092.82,229.832 2093.39,229.87 2093.96,229.935 2094.53,231.015 2095.1,230.802 2095.67,227.698 2096.23,226.905 2096.8,225.844 2097.37,224.836 2097.94,225.114 2098.51,226.37 2099.08,227.762 2099.64,230.074 2100.21,232.038 2100.78,232.955 2101.35,231.9 2101.92,230.586 2102.49,230.617 2103.05,228.45 2103.62,227.594 2104.19,228.797 2104.76,227.974 2105.33,227.204 2105.9,224.337 2106.46,224.848 2107.03,225.29 2107.6,223.625 2108.17,227.087 2108.74,225.988 2109.31,226.213 2109.87,226.547 2110.44,225.785 2111.01,226.191 2111.58,224.402 2112.15,227.599 2112.72,227.8 2113.29,229.07 2113.85,231.306 2114.42,230.227 2114.99,227.562 2115.56,227.985 2116.13,228.508 2116.7,228.791 2117.26,227.934 2117.83,227.101 2118.4,228.555 2118.97,229.817 2119.54,229.974 2120.11,230.077 2120.67,230.21 2121.24,230.264 2121.81,231.328 2122.38,228.182 2122.95,227.328 2123.52,227.6 2124.08,230.091 2124.65,229.21 2125.22,232.425 2125.79,231.518 2126.36,233.69 2126.93,232.571 2127.49,232.544 2128.06,232.675 2128.63,233.563 2129.2,231.478 2129.77,232.398 2130.34,233.65 2130.9,233.459 2131.47,233.148 2132.04,233.879 2132.61,234.693 2133.18,235.412 2133.75,234.038 2134.31,236.767 2134.88,234.392 2135.45,236.237 2136.02,236.846 2136.59,235.439 2137.16,235.185 2137.72,232.695 2138.29,230.212 2138.86,230.295 2139.43,230.239 2140,230.975 2140.57,230.689 2141.13,229.541 2141.7,229.604 2142.27,229.493 2142.84,229.484 2143.41,229.619 2143.98,229.623 2144.54,228.725 2145.11,229.84 2145.68,229.938 2146.25,228.793 2146.82,227.979 2147.39,230.278 2147.95,230.428 2148.52,230.502 2149.09,230.374 2149.66,231.377 2150.23,230.435 2150.8,228.516 2151.36,228.597 2151.93,227.563 2152.5,228.828 2153.07,227.088 2153.64,222.433 2154.21,223.058 2154.77,226.547 2155.34,227.958 2155.91,229.209 2156.48,230.237 2157.05,229.238 2157.62,230.577 2158.18,230.629 2158.75,230.574 2159.32,229.671 2159.89,229.116 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.041 ± 0.024\n  with uncertainty of ± 0.002175312162081619\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01522 ± (0.00453205, 0.00503271) (MC)\n  95% confidence interval: [-4.02456, -4.00611] (MC)\n  linear error propagation: -4.01587 ± 0.00470365\n  |δ_y| = |0.00329099| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015224637554786, val_l = 0.009338110206128292, val_u = 0.009114966359480725)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip940\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip941\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip942\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.49 2211.02,1147.49 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1001.76 2211.02,1001.76 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,856.028 2211.02,856.028 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,710.295 2211.02,710.295 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,564.563 2211.02,564.563 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,418.83 2211.02,418.83 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,273.098 2211.02,273.098 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.49 365.751,1147.49 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1001.76 365.751,1001.76 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,856.028 365.751,856.028 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,710.295 365.751,710.295 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,564.563 365.751,564.563 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,418.83 365.751,418.83 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,273.098 365.751,273.098 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M298.909 1133.29 Q295.298 1133.29 293.469 1136.86 Q291.664 1140.4 291.664 1147.53 Q291.664 1154.63 293.469 1158.2 Q295.298 1161.74 298.909 1161.74 Q302.543 1161.74 304.349 1158.2 Q306.177 1154.63 306.177 1147.53 Q306.177 1140.4 304.349 1136.86 Q302.543 1133.29 298.909 1133.29 M298.909 1129.59 Q304.719 1129.59 307.775 1134.19 Q310.853 1138.78 310.853 1147.53 Q310.853 1156.25 307.775 1160.86 Q304.719 1165.44 298.909 1165.44 Q293.099 1165.44 290.02 1160.86 Q286.964 1156.25 286.964 1147.53 Q286.964 1138.78 290.02 1134.19 Q293.099 1129.59 298.909 1129.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M259.557 1015.11 L267.196 1015.11 L267.196 988.74 L258.886 990.406 L258.886 986.147 L267.15 984.481 L271.826 984.481 L271.826 1015.11 L279.465 1015.11 L279.465 1019.04 L259.557 1019.04 L259.557 1015.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 987.559 Q295.298 987.559 293.469 991.124 Q291.664 994.666 291.664 1001.8 Q291.664 1008.9 293.469 1012.47 Q295.298 1016.01 298.909 1016.01 Q302.543 1016.01 304.349 1012.47 Q306.177 1008.9 306.177 1001.8 Q306.177 994.666 304.349 991.124 Q302.543 987.559 298.909 987.559 M298.909 983.856 Q304.719 983.856 307.775 988.462 Q310.853 993.045 310.853 1001.8 Q310.853 1010.52 307.775 1015.13 Q304.719 1019.71 298.909 1019.71 Q293.099 1019.71 290.02 1015.13 Q286.964 1010.52 286.964 1001.8 Q286.964 993.045 290.02 988.462 Q293.099 983.856 298.909 983.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M262.775 869.373 L279.094 869.373 L279.094 873.308 L257.15 873.308 L257.15 869.373 Q259.812 866.618 264.395 861.989 Q269.002 857.336 270.182 855.993 Q272.428 853.47 273.307 851.734 Q274.21 849.975 274.21 848.285 Q274.21 845.53 272.266 843.794 Q270.344 842.058 267.242 842.058 Q265.043 842.058 262.59 842.822 Q260.159 843.586 257.381 845.137 L257.381 840.415 Q260.205 839.28 262.659 838.702 Q265.113 838.123 267.15 838.123 Q272.52 838.123 275.715 840.808 Q278.909 843.493 278.909 847.984 Q278.909 850.114 278.099 852.035 Q277.312 853.933 275.205 856.526 Q274.627 857.197 271.525 860.415 Q268.423 863.609 262.775 869.373 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 841.827 Q295.298 841.827 293.469 845.391 Q291.664 848.933 291.664 856.063 Q291.664 863.169 293.469 866.734 Q295.298 870.276 298.909 870.276 Q302.543 870.276 304.349 866.734 Q306.177 863.169 306.177 856.063 Q306.177 848.933 304.349 845.391 Q302.543 841.827 298.909 841.827 M298.909 838.123 Q304.719 838.123 307.775 842.729 Q310.853 847.313 310.853 856.063 Q310.853 864.789 307.775 869.396 Q304.719 873.979 298.909 873.979 Q293.099 873.979 290.02 869.396 Q286.964 864.789 286.964 856.063 Q286.964 847.313 290.02 842.729 Q293.099 838.123 298.909 838.123 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M272.914 708.941 Q276.27 709.659 278.145 711.927 Q280.043 714.196 280.043 717.529 Q280.043 722.645 276.525 725.446 Q273.006 728.247 266.525 728.247 Q264.349 728.247 262.034 727.807 Q259.742 727.39 257.289 726.534 L257.289 722.02 Q259.233 723.154 261.548 723.733 Q263.863 724.312 266.386 724.312 Q270.784 724.312 273.076 722.575 Q275.39 720.839 275.39 717.529 Q275.39 714.474 273.238 712.761 Q271.108 711.025 267.289 711.025 L263.261 711.025 L263.261 707.182 L267.474 707.182 Q270.923 707.182 272.752 705.816 Q274.58 704.427 274.58 701.835 Q274.58 699.173 272.682 697.761 Q270.807 696.326 267.289 696.326 Q265.367 696.326 263.168 696.742 Q260.969 697.159 258.33 698.039 L258.33 693.872 Q260.992 693.131 263.307 692.761 Q265.645 692.39 267.705 692.39 Q273.029 692.39 276.131 694.821 Q279.233 697.228 279.233 701.349 Q279.233 704.219 277.59 706.21 Q275.946 708.177 272.914 708.941 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 696.094 Q295.298 696.094 293.469 699.659 Q291.664 703.201 291.664 710.33 Q291.664 717.437 293.469 721.001 Q295.298 724.543 298.909 724.543 Q302.543 724.543 304.349 721.001 Q306.177 717.437 306.177 710.33 Q306.177 703.201 304.349 699.659 Q302.543 696.094 298.909 696.094 M298.909 692.39 Q304.719 692.39 307.775 696.997 Q310.853 701.58 310.853 710.33 Q310.853 719.057 307.775 723.663 Q304.719 728.247 298.909 728.247 Q293.099 728.247 290.02 723.663 Q286.964 719.057 286.964 710.33 Q286.964 701.58 290.02 696.997 Q293.099 692.39 298.909 692.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M271.594 551.357 L259.789 569.806 L271.594 569.806 L271.594 551.357 M270.367 547.283 L276.247 547.283 L276.247 569.806 L281.177 569.806 L281.177 573.695 L276.247 573.695 L276.247 581.843 L271.594 581.843 L271.594 573.695 L255.992 573.695 L255.992 569.181 L270.367 547.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 550.362 Q295.298 550.362 293.469 553.926 Q291.664 557.468 291.664 564.598 Q291.664 571.704 293.469 575.269 Q295.298 578.81 298.909 578.81 Q302.543 578.81 304.349 575.269 Q306.177 571.704 306.177 564.598 Q306.177 557.468 304.349 553.926 Q302.543 550.362 298.909 550.362 M298.909 546.658 Q304.719 546.658 307.775 551.264 Q310.853 555.848 310.853 564.598 Q310.853 573.324 307.775 577.931 Q304.719 582.514 298.909 582.514 Q293.099 582.514 290.02 577.931 Q286.964 573.324 286.964 564.598 Q286.964 555.848 290.02 551.264 Q293.099 546.658 298.909 546.658 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M258.793 401.55 L277.15 401.55 L277.15 405.485 L263.076 405.485 L263.076 413.958 Q264.094 413.61 265.113 413.448 Q266.131 413.263 267.15 413.263 Q272.937 413.263 276.316 416.434 Q279.696 419.606 279.696 425.022 Q279.696 430.601 276.224 433.703 Q272.752 436.782 266.432 436.782 Q264.256 436.782 261.988 436.411 Q259.742 436.041 257.335 435.3 L257.335 430.601 Q259.418 431.735 261.641 432.291 Q263.863 432.846 266.34 432.846 Q270.344 432.846 272.682 430.74 Q275.02 428.633 275.02 425.022 Q275.02 421.411 272.682 419.305 Q270.344 417.198 266.34 417.198 Q264.465 417.198 262.59 417.615 Q260.738 418.032 258.793 418.911 L258.793 401.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 404.629 Q295.298 404.629 293.469 408.194 Q291.664 411.735 291.664 418.865 Q291.664 425.971 293.469 429.536 Q295.298 433.078 298.909 433.078 Q302.543 433.078 304.349 429.536 Q306.177 425.971 306.177 418.865 Q306.177 411.735 304.349 408.194 Q302.543 404.629 298.909 404.629 M298.909 400.925 Q304.719 400.925 307.775 405.532 Q310.853 410.115 310.853 418.865 Q310.853 427.592 307.775 432.198 Q304.719 436.782 298.909 436.782 Q293.099 436.782 290.02 432.198 Q286.964 427.592 286.964 418.865 Q286.964 410.115 290.02 405.532 Q293.099 400.925 298.909 400.925 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M269.326 271.234 Q266.178 271.234 264.326 273.387 Q262.497 275.54 262.497 279.29 Q262.497 283.017 264.326 285.193 Q266.178 287.345 269.326 287.345 Q272.474 287.345 274.303 285.193 Q276.154 283.017 276.154 279.29 Q276.154 275.54 274.303 273.387 Q272.474 271.234 269.326 271.234 M278.608 256.582 L278.608 260.841 Q276.849 260.007 275.043 259.568 Q273.261 259.128 271.502 259.128 Q266.872 259.128 264.418 262.253 Q261.988 265.378 261.641 271.697 Q263.006 269.683 265.066 268.619 Q267.127 267.531 269.603 267.531 Q274.812 267.531 277.821 270.702 Q280.853 273.85 280.853 279.29 Q280.853 284.614 277.705 287.831 Q274.557 291.049 269.326 291.049 Q263.33 291.049 260.159 286.466 Q256.988 281.859 256.988 273.132 Q256.988 264.938 260.877 260.077 Q264.766 255.193 271.316 255.193 Q273.076 255.193 274.858 255.54 Q276.664 255.887 278.608 256.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 258.896 Q295.298 258.896 293.469 262.461 Q291.664 266.003 291.664 273.132 Q291.664 280.239 293.469 283.804 Q295.298 287.345 298.909 287.345 Q302.543 287.345 304.349 283.804 Q306.177 280.239 306.177 273.132 Q306.177 266.003 304.349 262.461 Q302.543 258.896 298.909 258.896 M298.909 255.193 Q304.719 255.193 307.775 259.799 Q310.853 264.382 310.853 273.132 Q310.853 281.859 307.775 286.466 Q304.719 291.049 298.909 291.049 Q293.099 291.049 290.02 286.466 Q286.964 281.859 286.964 273.132 Q286.964 264.382 290.02 259.799 Q293.099 255.193 298.909 255.193 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1040.11 400.199,941.464 400.786,850.949 401.372,768.023 401.958,692.18 402.545,622.953 403.131,559.908 403.718,502.644 404.304,450.784 404.891,403.979 405.477,361.903 406.063,324.249 406.65,290.731 407.236,261.081 407.823,302.645 408.409,277.239 408.995,312.227 409.582,290.957 410.168,272.651 410.755,257.11 411.341,244.147 411.927,233.588 412.514,226.187 413.1,219.895 413.687,250.046 414.273,245.907 414.86,242.698 415.446,321.208 416.032,320.354 416.619,320.908 417.205,322.68 417.792,325.909 418.378,330.008 418.964,352.673 419.551,357.859 420.137,380.286 420.724,385.467 421.31,392.456 421.896,399.846 422.483,432.501 423.069,441.273 423.656,472.83 424.242,481.539 424.829,501.089 425.415,519.344 426.001,546.274 426.588,556.935 427.174,568.052 427.761,578.737 428.347,596.716 428.933,628.699 429.52,651.847 430.106,667.94 430.693,683.75 431.279,705.245 431.865,720.085 432.452,729.883 433.038,739.838 433.625,754.055 434.211,768.057 434.798,781.371 435.384,798.929 435.97,815.052 436.557,826.798 437.143,838.364 437.73,853.096 438.316,864.003 438.902,874.567 439.489,881.193 440.075,887.885 440.662,897.471 441.248,907.233 441.835,913.76 442.421,929.122 443.007,946.796 443.594,952.763 444.18,958.697 444.767,964.45 445.353,972.963 445.939,978.837 446.526,984.424 447.112,994.656 447.699,999.895 448.285,1005.02 448.871,1015 449.458,1031.01 450.044,1035.3 450.631,1043.79 451.217,1054.13 451.804,1061.59 452.39,1067.02 452.976,1072.14 453.563,1077.31 454.149,1082.21 454.736,1085.62 455.322,1094.66 455.908,1097.32 456.495,1107.63 457.081,1113.57 457.668,1117.72 458.254,1123.47 458.84,1125.6 459.427,1131.02 460.013,1134.65 460.6,1138.23 461.186,1143.19 461.773,1142.99 462.359,1146.19 462.945,1151.18 463.532,1154.15 464.118,1157.2 464.705,1161.96 465.291,1166.43 465.877,1169.11 466.464,1170.22 467.05,1174.29 467.637,1177.15 468.223,1181.16 468.809,1181.99 469.396,1181.3 469.982,1185.03 470.569,1187.22 471.155,1190.65 471.742,1189.77 472.328,1190.64 472.914,1194.21 473.501,1197.55 474.087,1200.72 474.674,1200.96 475.26,1201.53 475.846,1204.84 476.433,1206.64 477.019,1209.6 477.606,1211.14 478.192,1211.42 478.778,1214.32 479.365,1214.42 479.951,1217.08 480.538,1218.56 481.124,1219.98 481.711,1219.77 482.297,1220.89 482.883,1220.91 483.47,1222.26 484.056,1226.33 484.643,1227.26 485.229,1227.01 485.815,1227.94 486.402,1228.99 486.988,1230.17 487.575,1230.94 488.161,1230.58 488.748,1230.15 489.334,1230.07 489.92,1229.66 490.507,1232 491.093,1232.77 491.68,1232.32 492.266,1231.76 492.852,1231.54 493.439,1234.85 494.025,1237.28 494.612,1237.87 495.198,1237.35 495.784,1234.05 496.371,1233.84 496.957,1235.92 497.544,1235.08 498.13,1232.09 498.717,1235.54 499.303,1235.19 499.889,1235.93 500.476,1236.71 501.062,1234.79 501.649,1236.75 502.235,1238.75 502.821,1238.1 503.408,1238.7 503.994,1239.3 504.581,1238.9 505.167,1238.16 505.753,1236.56 506.34,1236.24 506.926,1236.14 507.513,1236.77 508.099,1236.29 508.686,1235.85 509.272,1239.22 509.858,1238.56 510.445,1240.49 511.031,1239.9 511.618,1243.33 512.204,1243.84 512.79,1241.97 513.377,1244.09 513.963,1243.23 514.55,1241.29 515.136,1243.13 515.722,1240.96 516.309,1242.66 516.895,1244.11 517.482,1244.57 518.068,1242.52 518.655,1241.77 519.241,1239.84 519.827,1239.18 520.414,1238.55 521,1238.09 521.587,1237.08 522.173,1236.65 522.759,1238.7 523.346,1241.6 523.932,1240.98 524.519,1241.6 525.105,1240.85 525.691,1241.14 526.278,1242.91 526.864,1246.78 527.451,1249.07 528.037,1250.53 528.624,1249.24 529.21,1247.07 529.796,1245.91 530.383,1246.23 530.969,1245.19 531.556,1240.52 532.142,1237.25 532.728,1237.79 533.315,1237.31 533.901,1236.88 534.488,1236.33 535.074,1238.15 535.661,1236.34 536.247,1235.51 536.833,1233.65 537.42,1234.48 538.006,1235.14 538.593,1234.88 539.179,1238.14 539.765,1235.26 540.352,1234.88 540.938,1237.04 541.525,1237.53 542.111,1239.24 542.697,1238.55 543.284,1239.12 543.87,1239.66 544.457,1237.35 545.043,1236.73 545.63,1236.15 546.216,1235.57 546.802,1236.37 547.389,1236.88 547.975,1237.38 548.562,1236.22 549.148,1238.01 549.734,1236.03 550.321,1233.01 550.907,1233.71 551.494,1236.71 552.08,1236.02 552.666,1234.19 553.253,1234.99 553.839,1233.14 554.426,1233.77 555.012,1232.37 555.599,1231.85 556.185,1231.52 556.771,1230 557.358,1230.03 557.944,1229.62 558.531,1229.03 559.117,1227.39 559.703,1227.02 560.29,1227.9 560.876,1228.68 561.463,1229.66 562.049,1230.67 562.635,1231.19 563.222,1229.44 563.808,1227.57 564.395,1227.12 564.981,1226.57 565.568,1227.5 566.154,1227.23 566.74,1228.13 567.327,1227.8 567.913,1227.61 568.5,1225.89 569.086,1223.3 569.672,1219.74 570.259,1220.03 570.845,1220.14 571.432,1221.41 572.018,1220.25 572.605,1220.29 573.191,1220.29 573.777,1217.73 574.364,1217.66 574.95,1219.19 575.537,1223.75 576.123,1223.4 576.709,1221.94 577.296,1222 577.882,1221.77 578.469,1220.46 579.055,1222.83 579.641,1224.03 580.228,1225.06 580.814,1226.05 581.401,1226.96 581.987,1227.76 582.574,1226.02 583.16,1222.22 583.746,1223.41 584.333,1225.34 584.919,1224.8 585.506,1225.56 586.092,1226.22 586.678,1225.74 587.265,1224.25 587.851,1225.35 588.438,1224.65 589.024,1226.65 589.61,1224.96 590.197,1228.3 590.783,1230.16 591.37,1229.73 591.956,1227.95 592.543,1227.15 593.129,1224.37 593.715,1224.13 594.302,1220.47 594.888,1221.44 595.475,1220.29 596.061,1220.27 596.647,1221.21 597.234,1221.09 597.82,1220.13 598.407,1224.5 598.993,1222.54 599.579,1219.85 600.166,1220.91 600.752,1220.86 601.339,1220.8 601.925,1224.28 602.512,1222.74 603.098,1223.62 603.684,1223.41 604.271,1223.96 604.857,1227.31 605.444,1226.8 606.03,1224.91 606.616,1225.85 607.203,1222.92 607.789,1221.45 608.376,1222.38 608.962,1222.07 609.548,1222.93 610.135,1220.38 610.721,1218.82 611.308,1218.67 611.894,1218.51 612.481,1219.48 613.067,1219.4 613.653,1222.98 614.24,1221.62 614.826,1221.42 615.413,1221.18 615.999,1220.85 616.585,1221.67 617.172,1220.11 617.758,1218.89 618.345,1220.13 618.931,1220.17 619.518,1222.41 620.104,1222.15 620.69,1222.16 621.277,1220.86 621.863,1219.37 622.45,1220.48 623.036,1221.36 623.622,1223.47 624.209,1223.24 624.795,1222.88 625.382,1222.64 625.968,1224.89 626.554,1225.65 627.141,1227.5 627.727,1226.84 628.314,1224.72 628.9,1225.41 629.487,1225.97 630.073,1225.32 630.659,1223.5 631.246,1224.55 631.832,1226.3 632.419,1223.35 633.005,1222.9 633.591,1221.41 634.178,1222.12 634.764,1221.5 635.351,1222.15 635.937,1222.82 636.523,1222.62 637.11,1225.78 637.696,1222.75 638.283,1226.04 638.869,1225.37 639.456,1224.87 640.042,1223.96 640.628,1222.14 641.215,1224.32 641.801,1221.5 642.388,1223.33 642.974,1219.47 643.56,1220.3 644.147,1221.04 644.733,1221.69 645.32,1220.12 645.906,1218.79 646.492,1220.82 647.079,1218.2 647.665,1220.33 648.252,1220.02 648.838,1221 649.425,1221.65 650.011,1222.43 650.597,1220.89 651.184,1218.18 651.77,1220.27 652.357,1221.13 652.943,1219.3 653.529,1218.92 654.116,1219.95 654.702,1221.03 655.289,1219.57 655.875,1216.79 656.462,1217.94 657.048,1217.72 657.634,1215.99 658.221,1215.88 658.807,1214.5 659.394,1213.46 659.98,1215.66 660.566,1214.2 661.153,1212.65 661.739,1212.55 662.326,1212.27 662.912,1212.42 663.498,1214.76 664.085,1214.72 664.671,1215.81 665.258,1215.83 665.844,1214.32 666.431,1214.19 667.017,1214.06 667.603,1214.03 668.19,1215.03 668.776,1212.7 669.363,1214.1 669.949,1214.28 670.535,1213.14 671.122,1214.45 671.708,1213.1 672.295,1212.89 672.881,1211.66 673.467,1209.75 674.054,1208.74 674.64,1206.62 675.227,1207.99 675.813,1206.04 676.4,1208.83 676.986,1208.93 677.572,1210.39 678.159,1210.16 678.745,1210.48 679.332,1209.25 679.918,1209.63 680.504,1209.79 681.091,1208.88 681.677,1210.14 682.264,1211.65 682.85,1209.52 683.436,1212.06 684.023,1208.39 684.609,1205.31 685.196,1206.89 685.782,1207.49 686.369,1208 686.955,1210.4 687.541,1210.6 688.128,1211.83 688.714,1210.75 689.301,1208.2 689.887,1207.27 690.473,1206.44 691.06,1208.93 691.646,1208.88 692.233,1211.43 692.819,1213.94 693.405,1215.08 693.992,1215.81 694.578,1216.89 695.165,1215.41 695.751,1217.71 696.338,1217.07 696.924,1217.9 697.51,1216.35 698.097,1219.9 698.683,1218.29 699.27,1217.87 699.856,1218.88 700.442,1218.35 701.029,1220.26 701.615,1219.98 702.202,1221.99 702.788,1222.35 703.375,1221.91 703.961,1219.01 704.547,1219.92 705.134,1221.82 705.72,1222.58 706.307,1220.69 706.893,1216.93 707.479,1217.79 708.066,1220.8 708.652,1221.2 709.239,1219.49 709.825,1219.04 710.411,1217.34 710.998,1218.06 711.584,1219 712.171,1216.36 712.757,1217.06 713.344,1215.57 713.93,1214.03 714.516,1213.78 715.103,1218.51 715.689,1216.85 716.276,1216.62 716.862,1212.55 717.448,1212.41 718.035,1213.41 718.621,1215.7 719.208,1215.44 719.794,1215.13 720.38,1215.97 720.967,1215.69 721.553,1214.24 722.14,1213.16 722.726,1213.21 723.313,1212.92 723.899,1210.66 724.485,1210.44 725.072,1210.38 725.658,1209.21 726.245,1210.63 726.831,1211.93 727.417,1207.05 728.004,1209.61 728.59,1209.62 729.177,1209.7 729.763,1208.57 730.349,1209.8 730.936,1210.08 731.522,1210.12 732.109,1210.22 732.695,1210.05 733.282,1208.85 733.868,1211.23 734.454,1211.28 735.041,1210 735.627,1210.03 736.214,1208.95 736.8,1208.9 737.386,1211.37 737.973,1210.15 738.559,1207.66 739.146,1207.93 739.732,1207 740.318,1205.95 740.905,1208.32 741.491,1208.28 742.078,1209.71 742.664,1211.03 743.251,1210.98 743.837,1210.89 744.423,1212.15 745.01,1213.22 745.596,1214.15 746.183,1213.1 746.769,1212.97 747.355,1214.09 747.942,1213.96 748.528,1213.86 749.115,1214.43 749.701,1216.49 750.288,1217.21 750.874,1221.2 751.46,1220.34 752.047,1217.28 752.633,1215.56 753.22,1216.45 753.806,1216.15 754.392,1215.8 754.979,1216.83 755.565,1214.2 756.152,1212.67 756.738,1212.43 757.324,1212.65 757.911,1212.59 758.497,1212.21 759.084,1214.63 759.67,1214.49 760.257,1216.59 760.843,1217.32 761.429,1215.48 762.016,1216.52 762.602,1213.74 763.189,1212.34 763.775,1211.99 764.361,1214.43 764.948,1214.12 765.534,1213.94 766.121,1217.03 766.707,1217.99 767.293,1216.45 767.88,1216.16 768.466,1216.02 769.053,1217.13 769.639,1215.54 770.226,1213.99 770.812,1211.52 771.398,1211.4 771.985,1211.15 772.571,1209.88 773.158,1209.8 773.744,1212.22 774.33,1214.51 774.917,1215.35 775.503,1213.97 776.09,1214.78 776.676,1214.37 777.262,1215.26 777.849,1213.41 778.435,1212.99 779.022,1212.96 779.608,1211.43 780.195,1210.1 780.781,1207.7 781.367,1207.72 781.954,1207.77 782.54,1206.72 783.127,1205.38 783.713,1204.51 784.299,1204.86 784.886,1202.6 785.472,1202.87 786.059,1202.33 786.645,1202.66 787.232,1203.06 787.818,1203.4 788.404,1203.64 788.991,1202.99 789.577,1203.57 790.164,1206.3 790.75,1207.39 791.336,1207.68 791.923,1211.5 792.509,1209.98 793.096,1207.49 793.682,1207.75 794.268,1204.13 794.855,1206.59 795.441,1211.51 796.028,1211.34 796.614,1212.38 797.201,1211.28 797.787,1208.73 798.373,1208.66 798.96,1207.33 799.546,1204.98 800.133,1207.67 800.719,1205.3 801.305,1208.97 801.892,1207.79 802.478,1206.65 803.065,1206.85 803.651,1209.36 804.237,1209.44 804.824,1208.11 805.41,1209.36 805.997,1210.59 806.583,1211.89 807.17,1210.68 807.756,1210.6 808.342,1208.06 808.929,1209.39 809.515,1210.76 810.102,1210.57 810.688,1207.86 811.274,1207.99 811.861,1207.81 812.447,1207.84 813.034,1209.32 813.62,1209.55 814.206,1210.72 814.793,1209.53 815.379,1210.62 815.966,1210.35 816.552,1210.15 817.139,1210.18 817.725,1210.03 818.311,1210.11 818.898,1211.15 819.484,1214.57 820.071,1214.01 820.657,1217.46 821.243,1215.86 821.83,1216.55 822.416,1217.33 823.003,1214.32 823.589,1215.24 824.175,1214.81 824.762,1211.95 825.348,1211.46 825.935,1208.95 826.521,1207.75 827.108,1205.14 827.694,1203.97 828.28,1202.83 828.867,1205.21 829.453,1207.8 830.04,1208.91 830.626,1211.25 831.212,1212.45 831.799,1213.51 832.385,1212.94 832.972,1211.65 833.558,1210.33 834.145,1212.7 834.731,1215.07 835.317,1212.16 835.904,1212 836.49,1214.15 837.077,1213.91 837.663,1214.71 838.249,1214.56 838.836,1214.18 839.422,1214.03 840.009,1214.72 840.595,1213.08 841.181,1215.42 841.768,1212.42 842.354,1209.74 842.941,1209.19 843.527,1207.9 844.114,1208.1 844.7,1204.57 845.286,1204.68 845.873,1207.38 846.459,1206.3 847.046,1202.95 847.632,1203.45 848.218,1206.09 848.805,1205.01 849.391,1205.23 849.978,1206.53 850.564,1205.36 851.15,1203.21 851.737,1200.94 852.323,1201.27 852.91,1202.8 853.496,1202.69 854.083,1204.1 854.669,1204.69 855.255,1204.64 855.842,1204.81 856.428,1206.07 857.015,1207.47 857.601,1206.15 858.187,1207.33 858.774,1207.36 859.36,1207.45 859.947,1208.68 860.533,1207.81 861.119,1207.84 861.706,1206.64 862.292,1206.81 862.879,1207.91 863.465,1208 864.052,1210.34 864.638,1210.17 865.224,1209.96 865.811,1209.83 866.397,1209.64 866.984,1207 867.57,1208.19 868.156,1208.42 868.743,1205.99 869.329,1206.05 869.916,1206.15 870.502,1204.77 871.089,1204.91 871.675,1207.17 872.261,1207.16 872.848,1205.99 873.434,1207.06 874.021,1207.06 874.607,1207.38 875.193,1205.06 875.78,1204 876.366,1204.52 876.953,1204.72 877.539,1206.23 878.125,1207.7 878.712,1206.3 879.298,1206.53 879.885,1210.04 880.471,1208.88 881.058,1209.03 881.644,1208.81 882.23,1209.91 882.817,1209.8 883.403,1208.47 883.99,1209.44 884.576,1209.34 885.162,1208.1 885.749,1205.63 886.335,1207.06 886.922,1207.11 887.508,1207.1 888.094,1209.51 888.681,1209.61 889.267,1210.77 889.854,1209.29 890.44,1211.56 891.027,1211.33 891.613,1209.98 892.199,1209.72 892.786,1212.92 893.372,1212.51 893.959,1212.04 894.545,1209.36 895.131,1209.28 895.718,1206.82 896.304,1204.29 896.891,1205.52 897.477,1206.78 898.063,1207.11 898.65,1209.21 899.236,1211.48 899.823,1210.15 900.409,1207.88 900.996,1209.16 901.582,1210.38 902.168,1209.06 902.755,1211.19 903.341,1215.92 903.928,1215.44 904.514,1216.28 905.1,1210.96 905.687,1212.16 906.273,1209.5 906.86,1205.78 907.446,1208.13 908.032,1208.08 908.619,1206.9 909.205,1207.05 909.792,1205.74 910.378,1206.08 910.965,1204.75 911.551,1204.89 912.137,1203.91 912.724,1206.62 913.31,1207.93 913.897,1209.11 914.483,1212.51 915.069,1212.04 915.656,1211.64 916.242,1211.46 916.829,1212.41 917.415,1212.21 918.002,1213 918.588,1211.6 919.174,1210.44 919.761,1210.21 920.347,1212.44 920.934,1212.01 921.52,1210.48 922.106,1211.38 922.693,1210.08 923.279,1212.2 923.866,1211.82 924.452,1211.5 925.038,1210.16 925.625,1211.27 926.211,1213.47 926.798,1213.19 927.384,1211.6 927.971,1208.86 928.557,1210.01 929.143,1206.36 929.73,1206.69 930.316,1209.06 930.903,1207.77 931.489,1204.21 932.075,1201.97 932.662,1201.04 933.248,1201.44 933.835,1202.85 934.421,1201.82 935.007,1200.01 935.594,1200.4 936.18,1200.88 936.767,1201.28 937.353,1200.18 937.94,1201.63 938.526,1206.5 939.112,1206.38 939.699,1205.28 940.285,1206.54 940.872,1203.94 941.458,1202.78 942.044,1207.65 942.631,1208.74 943.217,1208.42 943.804,1204.54 944.39,1205.97 944.976,1205.99 945.563,1206.05 946.149,1204.9 946.736,1202.48 947.322,1200.15 947.909,1201.47 948.495,1200.57 949.081,1200.91 949.668,1207.33 950.254,1206.03 950.841,1207.09 951.427,1206.82 952.013,1204.38 952.6,1203.51 953.186,1204.61 953.773,1204.42 954.359,1202.14 954.945,1202.17 955.532,1202.6 956.118,1200.23 956.705,1200.57 957.291,1199.83 957.878,1198.85 958.464,1197.89 959.05,1201.8 959.637,1203.29 960.223,1203.47 960.81,1203.7 961.396,1203.96 961.982,1203.17 962.569,1204.75 963.155,1204.95 963.742,1202.75 964.328,1203.18 964.915,1204.62 965.501,1204.86 966.087,1204.89 966.674,1203.72 967.26,1202.74 967.847,1201.8 968.433,1200.68 969.019,1201.05 969.606,1199.14 970.192,1198.4 970.779,1196.53 971.365,1194.89 971.951,1196.65 972.538,1198.37 973.124,1199.96 973.711,1200.23 974.297,1201.74 974.884,1202.19 975.47,1203.7 976.056,1202.74 976.643,1204.14 977.229,1202.03 977.816,1203.28 978.402,1202.43 978.988,1203.88 979.575,1201.86 980.161,1203.09 980.748,1201.9 981.334,1199.83 981.92,1202.63 982.507,1204.58 983.093,1203.68 983.68,1203.88 984.266,1204.09 984.853,1205.12 985.439,1204.88 986.025,1207.39 986.612,1206.39 987.198,1205.42 987.785,1206.89 988.371,1206.82 988.957,1206.66 989.544,1207.79 990.13,1207.66 990.717,1207.63 991.303,1208.66 991.889,1207.26 992.476,1207.11 993.062,1207.09 993.649,1208.33 994.235,1208.02 994.822,1209.1 995.408,1210.32 995.994,1209.97 996.581,1209.71 997.167,1208.55 997.754,1208.48 998.34,1209.5 998.926,1206.93 999.513,1208.23 1000.1,1205.78 1000.69,1205.89 1001.27,1208.31 1001.86,1210.75 1002.44,1210.44 1003.03,1212.64 1003.62,1212.32 1004.2,1210.93 1004.79,1210.65 1005.38,1212.86 1005.96,1212.65 1006.55,1216.94 1007.14,1216.3 1007.72,1218.29 1008.31,1218.89 1008.9,1219.41 1009.48,1217.34 1010.07,1216.7 1010.65,1218.52 1011.24,1215.79 1011.83,1211.42 1012.41,1212.5 1013,1209.68 1013.59,1209.35 1014.17,1210.41 1014.76,1211.37 1015.35,1214.6 1015.93,1214.1 1016.52,1211.55 1017.11,1209.98 1017.69,1212.04 1018.28,1211.71 1018.86,1211.23 1019.45,1212.18 1020.04,1210.78 1020.62,1209.39 1021.21,1208.11 1021.8,1211.59 1022.38,1211.16 1022.97,1209.75 1023.56,1208.36 1024.14,1207.02 1024.73,1208.38 1025.32,1210.66 1025.9,1210.57 1026.49,1210.31 1027.07,1209.13 1027.66,1207.78 1028.25,1205.37 1028.83,1202.9 1029.42,1202.15 1030.01,1202.25 1030.59,1202.37 1031.18,1200.08 1031.77,1200.45 1032.35,1199.61 1032.94,1199.71 1033.52,1199.88 1034.11,1200.14 1034.7,1200.63 1035.28,1201.2 1035.87,1198.83 1036.46,1198.18 1037.04,1199.78 1037.63,1200.43 1038.22,1202.07 1038.8,1204.33 1039.39,1204.48 1039.98,1205.82 1040.56,1205.96 1041.15,1207.17 1041.73,1204.86 1042.32,1202.54 1042.91,1203.81 1043.49,1204.24 1044.08,1204.41 1044.67,1204.8 1045.25,1203.82 1045.84,1207.55 1046.43,1208.56 1047.01,1208.52 1047.6,1208.44 1048.19,1207.09 1048.77,1208.33 1049.36,1208.17 1049.94,1208.25 1050.53,1210.57 1051.12,1211.47 1051.7,1209.87 1052.29,1208.32 1052.88,1208.26 1053.46,1208.13 1054.05,1211.91 1054.64,1210.69 1055.22,1210.48 1055.81,1210.14 1056.39,1208.64 1056.98,1209.97 1057.57,1207.54 1058.15,1207.53 1058.74,1210.13 1059.33,1211.24 1059.91,1211.17 1060.5,1209.93 1061.09,1209.82 1061.67,1209.82 1062.26,1212.05 1062.85,1210.55 1063.43,1209.28 1064.02,1208.96 1064.6,1209.99 1065.19,1211.04 1065.78,1210.76 1066.36,1209.31 1066.95,1207.91 1067.54,1207.99 1068.12,1208.8 1068.71,1207.62 1069.3,1207.45 1069.88,1209.77 1070.47,1212 1071.06,1208.24 1071.64,1206.94 1072.23,1206.76 1072.81,1206.65 1073.4,1206.61 1073.99,1205.33 1074.57,1204.28 1075.16,1204.43 1075.75,1203.34 1076.33,1204.41 1076.92,1204.7 1077.51,1205.95 1078.09,1206.11 1078.68,1206.3 1079.26,1207.42 1079.85,1206.07 1080.44,1204.98 1081.02,1202.69 1081.61,1201.72 1082.2,1201.81 1082.78,1205.66 1083.37,1205.65 1083.96,1205.41 1084.54,1206.65 1085.13,1206.54 1085.72,1207.57 1086.3,1208.56 1086.89,1210.76 1087.47,1209.18 1088.06,1208.91 1088.65,1206.52 1089.23,1210.13 1089.82,1207.57 1090.41,1207.63 1090.99,1209.77 1091.58,1208.42 1092.17,1208.25 1092.75,1206.89 1093.34,1206.8 1093.93,1209.05 1094.51,1210.08 1095.1,1209.84 1095.68,1210.87 1096.27,1208.28 1096.86,1208.38 1097.44,1204.73 1098.03,1206.25 1098.62,1207.57 1099.2,1206.35 1099.79,1206.82 1100.38,1206.82 1100.96,1208.09 1101.55,1206.86 1102.14,1205.68 1102.72,1205.93 1103.31,1205.86 1103.89,1206.94 1104.48,1208.11 1105.07,1210.32 1105.65,1209 1106.24,1208.72 1106.83,1210.94 1107.41,1209.42 1108,1210.45 1108.59,1206.64 1109.17,1206.81 1109.76,1206.94 1110.34,1205.63 1110.93,1206.79 1111.52,1207.88 1112.1,1209.04 1112.69,1210.01 1113.28,1210.83 1113.86,1209.28 1114.45,1206.57 1115.04,1205.45 1115.62,1203.13 1116.21,1202.07 1116.8,1201.97 1117.38,1202.38 1117.97,1203.59 1118.55,1204.84 1119.14,1204.82 1119.73,1204.96 1120.31,1205.03 1120.9,1206.07 1121.49,1207.41 1122.07,1200.4 1122.66,1198.16 1123.25,1198.55 1123.83,1199.08 1124.42,1200.85 1125.01,1200.05 1125.59,1200.35 1126.18,1201.77 1126.76,1201.86 1127.35,1203.35 1127.94,1202.16 1128.52,1203.72 1129.11,1201.54 1129.7,1203.25 1130.28,1205.83 1130.87,1205.73 1131.46,1205.63 1132.04,1204.36 1132.63,1205.89 1133.21,1205.97 1133.8,1207.4 1134.39,1208.35 1134.97,1208.16 1135.56,1209.21 1136.15,1209.22 1136.73,1211.55 1137.32,1210.11 1137.91,1206.55 1138.49,1204.34 1139.08,1205.68 1139.67,1204.5 1140.25,1203.7 1140.84,1205.15 1141.42,1207.56 1142.01,1207.24 1142.6,1207.13 1143.18,1205.86 1143.77,1205.58 1144.36,1205.5 1144.94,1205.69 1145.53,1204.54 1146.12,1204.46 1146.7,1204.67 1147.29,1206.03 1147.88,1204.74 1148.46,1202.58 1149.05,1205.35 1149.63,1204.53 1150.22,1203.68 1150.81,1204.22 1151.39,1206.82 1151.98,1206.68 1152.57,1206.54 1153.15,1203.16 1153.74,1203.3 1154.33,1204.59 1154.91,1206.08 1155.5,1204.79 1156.09,1203.69 1156.67,1202.69 1157.26,1202.89 1157.84,1204.13 1158.43,1203.01 1159.02,1205.79 1159.6,1206.98 1160.19,1206.9 1160.78,1206.91 1161.36,1208.09 1161.95,1209.17 1162.54,1208.95 1163.12,1208.86 1163.71,1210.07 1164.29,1207.52 1164.88,1205.03 1165.47,1207.59 1166.05,1210.17 1166.64,1210.05 1167.23,1208.88 1167.81,1206.69 1168.4,1207.68 1168.99,1208.97 1169.57,1206.28 1170.16,1203.79 1170.75,1206.33 1171.33,1205.17 1171.92,1205.17 1172.5,1204.07 1173.09,1203.98 1173.68,1202.87 1174.26,1203.15 1174.85,1202.11 1175.44,1201.16 1176.02,1200.11 1176.61,1199.48 1177.2,1199.83 1177.78,1200.27 1178.37,1200.55 1178.96,1199.67 1179.54,1200.23 1180.13,1204.21 1180.71,1204.48 1181.3,1202.46 1181.89,1201.58 1182.47,1205.68 1183.06,1204.63 1183.65,1205.99 1184.23,1204.69 1184.82,1204.91 1185.41,1206.06 1185.99,1205.19 1186.58,1205.26 1187.16,1205.46 1187.75,1205.43 1188.34,1206.71 1188.92,1206.58 1189.51,1205.59 1190.1,1205.82 1190.68,1208.56 1191.27,1205.88 1191.86,1206.95 1192.44,1207.14 1193.03,1205.92 1193.62,1205.86 1194.2,1206.87 1194.79,1206.73 1195.37,1205.76 1195.96,1206.83 1196.55,1208.1 1197.13,1207.06 1197.72,1208.09 1198.31,1205.33 1198.89,1204.08 1199.48,1204.29 1200.07,1202.33 1200.65,1201.34 1201.24,1202.59 1201.83,1205.4 1202.41,1204.22 1203,1205.55 1203.58,1205.64 1204.17,1206.74 1204.76,1205.39 1205.34,1205.6 1205.93,1206.92 1206.52,1208.03 1207.1,1208.07 1207.69,1206.57 1208.28,1206.15 1208.86,1206.16 1209.45,1208.53 1210.03,1209.65 1210.62,1207.2 1211.21,1205.94 1211.79,1205.91 1212.38,1208.3 1212.97,1209.31 1213.55,1207.83 1214.14,1208.91 1214.73,1207.65 1215.31,1209.98 1215.9,1209.73 1216.49,1208.62 1217.07,1208.3 1217.66,1209.31 1218.24,1210.29 1218.83,1209 1219.42,1208.86 1220,1209.99 1220.59,1211.06 1221.18,1212.04 1221.76,1211.77 1222.35,1210.38 1222.94,1211.44 1223.52,1210.79 1224.11,1211.85 1224.7,1209.47 1225.28,1209.13 1225.87,1211.23 1226.45,1209.57 1227.04,1209.12 1227.63,1210.27 1228.21,1209.81 1228.8,1209.67 1229.39,1205.92 1229.97,1205.9 1230.56,1207.27 1231.15,1206.91 1231.73,1205.77 1232.32,1208.13 1232.91,1208.25 1233.49,1209.4 1234.08,1210.39 1234.66,1210.29 1235.25,1205.34 1235.84,1205.24 1236.42,1206.27 1237.01,1205.14 1237.6,1207.71 1238.18,1205.19 1238.77,1203.92 1239.36,1206.57 1239.94,1206.46 1240.53,1206.43 1241.11,1204.1 1241.7,1204.24 1242.29,1203.23 1242.87,1203.42 1243.46,1204.85 1244.05,1205.05 1244.63,1205.28 1245.22,1206.43 1245.81,1203.97 1246.39,1202.85 1246.98,1205.49 1247.57,1204.54 1248.15,1204.67 1248.74,1201.09 1249.32,1202.61 1249.91,1201.48 1250.5,1200.29 1251.08,1201.55 1251.67,1205.55 1252.26,1207.85 1252.84,1209 1253.43,1209.82 1254.02,1209.58 1254.6,1209.29 1255.19,1210.34 1255.78,1209.01 1256.36,1207.42 1256.95,1207.31 1257.53,1206.02 1258.12,1205.81 1258.71,1204.9 1259.29,1207.32 1259.88,1207.54 1260.47,1208.42 1261.05,1209.52 1261.64,1208.42 1262.23,1208.07 1262.81,1205.45 1263.4,1205.4 1263.98,1204.24 1264.57,1203.13 1265.16,1205.67 1265.74,1207.96 1266.33,1206.77 1266.92,1208.06 1267.5,1209.24 1268.09,1206.62 1268.68,1203.15 1269.26,1201.01 1269.85,1203.59 1270.44,1202.35 1271.02,1201.22 1271.61,1201.41 1272.19,1201.6 1272.78,1205.21 1273.37,1207.93 1273.95,1209.03 1274.54,1211.03 1275.13,1210.47 1275.71,1210.15 1276.3,1212.44 1276.89,1213.4 1277.47,1211.9 1278.06,1214.03 1278.65,1215.78 1279.23,1214.13 1279.82,1212.76 1280.4,1211.12 1280.99,1212.22 1281.58,1210.7 1282.16,1209.22 1282.75,1207.76 1283.34,1207.4 1283.92,1208.47 1284.51,1209.45 1285.1,1209.16 1285.68,1210.14 1286.27,1211.04 1286.86,1210.89 1287.44,1209.47 1288.03,1208.1 1288.61,1207.99 1289.2,1206.58 1289.79,1206.31 1290.37,1206.09 1290.96,1203.7 1291.55,1207.23 1292.13,1206.3 1292.72,1205.26 1293.31,1206.64 1293.89,1207.71 1294.48,1211.14 1295.06,1210.66 1295.65,1208.17 1296.24,1207.85 1296.82,1206.84 1297.41,1206.94 1298,1204.35 1298.58,1203.28 1299.17,1204.43 1299.76,1205.63 1300.34,1204.4 1300.93,1204.58 1301.52,1205.09 1302.1,1203.9 1302.69,1204.26 1303.27,1198.67 1303.86,1197.72 1304.45,1195.48 1305.03,1193.7 1305.62,1193.06 1306.21,1194.96 1306.79,1193.42 1307.38,1195.39 1307.97,1195.9 1308.55,1196.56 1309.14,1198.44 1309.73,1201.35 1310.31,1202.69 1310.9,1205.23 1311.48,1204.09 1312.07,1205.45 1312.66,1207.97 1313.24,1206.46 1313.83,1207.77 1314.42,1207.62 1315,1206.24 1315.59,1206.17 1316.18,1207.49 1316.76,1206.25 1317.35,1205.24 1317.93,1204.17 1318.52,1204.28 1319.11,1206.73 1319.69,1205.54 1320.28,1206.7 1320.87,1207.64 1321.45,1209.04 1322.04,1207.83 1322.63,1206.44 1323.21,1204.93 1323.8,1204.11 1324.39,1205.26 1324.97,1206.26 1325.56,1207.3 1326.14,1208.64 1326.73,1204.92 1327.32,1205.09 1327.9,1205.1 1328.49,1206.31 1329.08,1204.91 1329.66,1206.16 1330.25,1207.45 1330.84,1206.28 1331.42,1207.28 1332.01,1207.22 1332.6,1207.16 1333.18,1205.63 1333.77,1205.64 1334.35,1206.78 1334.94,1206.71 1335.53,1207.78 1336.11,1205.41 1336.7,1205.38 1337.29,1205.4 1337.87,1205.43 1338.46,1201.77 1339.05,1199.91 1339.63,1199.37 1340.22,1200.9 1340.8,1206.18 1341.39,1206.5 1341.98,1204.1 1342.56,1203.04 1343.15,1203.16 1343.74,1202.36 1344.32,1202.64 1344.91,1201.57 1345.5,1200.77 1346.08,1201.18 1346.67,1201.74 1347.26,1204.51 1347.84,1206.86 1348.43,1205.59 1349.01,1206.78 1349.6,1207.82 1350.19,1206.7 1350.77,1208.09 1351.36,1207.77 1351.95,1208.94 1352.53,1207.49 1353.12,1207.4 1353.71,1206.38 1354.29,1204.14 1354.88,1201.87 1355.47,1201.03 1356.05,1203.57 1356.64,1203.84 1357.22,1204.03 1357.81,1204.11 1358.4,1201.93 1358.98,1200.89 1359.57,1197.56 1360.16,1200.55 1360.74,1198.29 1361.33,1202.14 1361.92,1204.62 1362.5,1203.37 1363.09,1202.46 1363.68,1202.76 1364.26,1204.49 1364.85,1204.61 1365.43,1208.11 1366.02,1207.95 1366.61,1207.78 1367.19,1207.59 1367.78,1206.65 1368.37,1205.26 1368.95,1204.29 1369.54,1205.48 1370.13,1206.52 1370.71,1208.71 1371.3,1209.57 1371.88,1208.25 1372.47,1205.83 1373.06,1208.2 1373.64,1208.27 1374.23,1209.42 1374.82,1208.06 1375.4,1208.08 1375.99,1207.85 1376.58,1210.42 1377.16,1211.47 1377.75,1208.95 1378.34,1207.25 1378.92,1208.37 1379.51,1208.1 1380.09,1208 1380.68,1209.02 1381.27,1207.71 1381.85,1209.06 1382.44,1209.15 1383.03,1209.08 1383.61,1208.72 1384.2,1207.23 1384.79,1206.1 1385.37,1204.85 1385.96,1207.31 1386.55,1208.53 1387.13,1208.32 1387.72,1209.68 1388.3,1210.59 1388.89,1211.62 1389.48,1211.44 1390.06,1211.89 1390.65,1215.04 1391.24,1215.65 1391.82,1215.28 1392.41,1214.67 1393,1215.58 1393.58,1216.41 1394.17,1215.69 1394.75,1215.04 1395.34,1214.42 1395.93,1216.18 1396.51,1217.94 1397.1,1217.39 1397.69,1215.83 1398.27,1214.06 1398.86,1215.95 1399.45,1214.32 1400.03,1213.85 1400.62,1214.53 1401.21,1214.2 1401.79,1212.62 1402.38,1213.29 1402.96,1209.42 1403.55,1206.81 1404.14,1207.85 1404.72,1207.73 1405.31,1207.45 1405.9,1209.78 1406.48,1209.54 1407.07,1208.25 1407.66,1208.26 1408.24,1207.09 1408.83,1206.97 1409.42,1205.83 1410,1206.94 1410.59,1208.24 1411.17,1209.28 1411.76,1210.5 1412.35,1211.37 1412.93,1208.63 1413.52,1208.38 1414.11,1204.76 1414.69,1202.32 1415.28,1201.37 1415.87,1201.48 1416.45,1198.16 1417.04,1199.72 1417.63,1196.51 1418.21,1200.61 1418.8,1199.59 1419.38,1200.01 1419.97,1199.03 1420.56,1198.08 1421.14,1201 1421.73,1201.23 1422.32,1201.69 1422.9,1201.91 1423.49,1202.03 1424.08,1203.58 1424.66,1203.73 1425.25,1204.94 1425.83,1204.95 1426.42,1204.85 1427.01,1203.49 1427.59,1203.84 1428.18,1201.62 1428.77,1198.25 1429.35,1200.11 1429.94,1196.71 1430.53,1200.57 1431.11,1202.06 1431.7,1206.99 1432.29,1204.49 1432.87,1203.21 1433.46,1203.39 1434.04,1202.34 1434.63,1201.44 1435.22,1201.77 1435.8,1201.95 1436.39,1203.43 1436.98,1202.42 1437.56,1202.54 1438.15,1201.64 1438.74,1200.79 1439.32,1202.37 1439.91,1202.54 1440.5,1201.62 1441.08,1199.29 1441.67,1199.35 1442.25,1201.04 1442.84,1201.1 1443.43,1201.6 1444.01,1201.51 1444.6,1200.46 1445.19,1200.9 1445.77,1199.93 1446.36,1200.22 1446.95,1201.56 1447.53,1203.14 1448.12,1202.21 1448.7,1202.6 1449.29,1204 1449.88,1206.46 1450.46,1206.36 1451.05,1206.35 1451.64,1207.49 1452.22,1206.26 1452.81,1206.32 1453.4,1202.74 1453.98,1201.61 1454.57,1200.77 1455.16,1202.29 1455.74,1202.48 1456.33,1202.63 1456.91,1203.16 1457.5,1203.36 1458.09,1204.47 1458.67,1204.62 1459.26,1204.79 1459.85,1205.97 1460.43,1207.04 1461.02,1206.97 1461.61,1208.43 1462.19,1207.15 1462.78,1211.87 1463.37,1213.77 1463.95,1212.19 1464.54,1210.74 1465.12,1209.23 1465.71,1207.8 1466.3,1207.94 1466.88,1206.87 1467.47,1208.16 1468.06,1208.06 1468.64,1206.59 1469.23,1207.9 1469.82,1210.17 1470.4,1209.91 1470.99,1209.5 1471.57,1209.47 1472.16,1213.89 1472.75,1214.77 1473.33,1213.14 1473.92,1213.96 1474.51,1214.55 1475.09,1214.13 1475.68,1214.92 1476.27,1215.77 1476.85,1214.16 1477.44,1213.62 1478.03,1212.16 1478.61,1214.17 1479.2,1212.57 1479.78,1212.34 1480.37,1212.08 1480.96,1211.81 1481.54,1212.66 1482.13,1212.47 1482.72,1212.16 1483.3,1216.31 1483.89,1217.08 1484.48,1214.95 1485.06,1214.61 1485.65,1217.75 1486.24,1215.91 1486.82,1216.51 1487.41,1214.67 1487.99,1214.36 1488.58,1213.67 1489.17,1212.05 1489.75,1209.43 1490.34,1209.15 1490.93,1207.68 1491.51,1208.84 1492.1,1207.38 1492.69,1203.7 1493.27,1202.68 1493.86,1204.16 1494.45,1204.15 1495.03,1202.65 1495.62,1201.63 1496.2,1199.29 1496.79,1197.28 1497.38,1200.17 1497.96,1201.68 1498.55,1203.18 1499.14,1203.34 1499.72,1203.51 1500.31,1203.75 1500.9,1204.97 1501.48,1205.07 1502.07,1203.82 1502.65,1203.76 1503.24,1205.19 1503.83,1204.1 1504.41,1204.35 1505,1205.61 1505.59,1208.19 1506.17,1207.86 1506.76,1209.05 1507.35,1208.62 1507.93,1206.25 1508.52,1207.43 1509.11,1208.83 1509.69,1208.93 1510.28,1207.43 1510.86,1204.02 1511.45,1203.04 1512.04,1201.81 1512.62,1204.29 1513.21,1203.13 1513.8,1202.14 1514.38,1201.31 1514.97,1200.4 1515.56,1201.78 1516.14,1201.89 1516.73,1203.23 1517.32,1203.62 1517.9,1204.87 1518.49,1205.02 1519.07,1203.85 1519.66,1205.21 1520.25,1205.1 1520.83,1206.28 1521.42,1204.99 1522.01,1205.08 1522.59,1207.47 1523.18,1211.11 1523.77,1213.14 1524.35,1211.54 1524.94,1210 1525.52,1208.63 1526.11,1212 1526.7,1209.6 1527.28,1211.72 1527.87,1212.2 1528.46,1212.02 1529.04,1212.88 1529.63,1212.7 1530.22,1211.12 1530.8,1209.62 1531.39,1208.4 1531.98,1209.33 1532.56,1206.46 1533.15,1206.73 1533.73,1205.43 1534.32,1205.52 1534.91,1200.96 1535.49,1198.7 1536.08,1198.16 1536.67,1200.88 1537.25,1201.08 1537.84,1200.2 1538.43,1200.69 1539.01,1203.53 1539.6,1204.82 1540.19,1204.71 1540.77,1202.38 1541.36,1202.69 1541.94,1202.96 1542.53,1203.05 1543.12,1201.85 1543.7,1201.96 1544.29,1203.39 1544.88,1202.27 1545.46,1201.42 1546.05,1201.57 1546.64,1199.67 1547.22,1201.08 1547.81,1200.25 1548.4,1203.04 1548.98,1205.69 1549.57,1203.32 1550.15,1204.81 1550.74,1203.7 1551.33,1205.02 1551.91,1206.17 1552.5,1206.16 1553.09,1206.03 1553.67,1207.5 1554.26,1206.28 1554.85,1206.31 1555.43,1208.54 1556.02,1209.62 1556.6,1208.15 1557.19,1206.66 1557.78,1204.05 1558.36,1204.19 1558.95,1204.27 1559.54,1203.28 1560.12,1203.39 1560.71,1203.44 1561.3,1204.63 1561.88,1205.83 1562.47,1204.45 1563.06,1204.15 1563.64,1206.53 1564.23,1205.45 1564.81,1204.37 1565.4,1205.56 1565.99,1205.72 1566.57,1205.83 1567.16,1207.93 1567.75,1204.38 1568.33,1204.67 1568.92,1206.14 1569.51,1208.55 1570.09,1205.12 1570.68,1205.47 1571.27,1205.52 1571.85,1205.66 1572.44,1208.06 1573.02,1205.64 1573.61,1205.6 1574.2,1205.82 1574.78,1205.94 1575.37,1207.2 1575.96,1208.63 1576.54,1208.48 1577.13,1209.64 1577.72,1208.13 1578.3,1205.7 1578.89,1202.3 1579.47,1201.53 1580.06,1204.16 1580.65,1205.49 1581.23,1205.25 1581.82,1205.19 1582.41,1205.37 1582.99,1205.27 1583.58,1206.69 1584.17,1207.9 1584.75,1207.89 1585.34,1210.11 1585.93,1211.24 1586.51,1212.26 1587.1,1215.42 1587.68,1213.85 1588.27,1213.33 1588.86,1215.38 1589.44,1215.2 1590.03,1214.78 1590.62,1213.18 1591.2,1212.97 1591.79,1211.56 1592.38,1211.23 1592.96,1211.1 1593.55,1210.68 1594.14,1209.19 1594.72,1210.13 1595.31,1209.72 1595.89,1209.56 1596.48,1210.54 1597.07,1210.22 1597.65,1210.15 1598.24,1210.94 1598.83,1210.76 1599.41,1211.49 1600,1212.29 1600.59,1210.64 1601.17,1209.06 1601.76,1207.9 1602.34,1208.81 1602.93,1207.29 1603.52,1208.64 1604.1,1208.69 1604.69,1206.4 1605.28,1206.54 1605.86,1207.51 1606.45,1208.66 1607.04,1210.75 1607.62,1208.34 1608.21,1206.91 1608.8,1206.86 1609.38,1206.93 1609.97,1207.78 1610.55,1206.39 1611.14,1204.13 1611.73,1201.77 1612.31,1202.29 1612.9,1202.54 1613.49,1201.39 1614.07,1202.76 1614.66,1202.99 1615.25,1203.15 1615.83,1203.28 1616.42,1203.48 1617.01,1204.52 1617.59,1203.5 1618.18,1202.36 1618.76,1202.61 1619.35,1203.93 1619.94,1202.9 1620.52,1205.69 1621.11,1203.28 1621.7,1203.46 1622.28,1201.3 1622.87,1201.53 1623.46,1200.53 1624.04,1201.96 1624.63,1205.68 1625.22,1204.47 1625.8,1203.33 1626.39,1203.8 1626.97,1205.39 1627.56,1205.3 1628.15,1206.55 1628.73,1207.74 1629.32,1206.33 1629.91,1206.44 1630.49,1206.64 1631.08,1207.95 1631.67,1208.9 1632.25,1206.42 1632.84,1205.33 1633.42,1204.41 1634.01,1207.11 1634.6,1206.61 1635.18,1206.62 1635.77,1207.62 1636.36,1209.74 1636.94,1211.9 1637.53,1211.76 1638.12,1213.77 1638.7,1210.99 1639.29,1208.56 1639.88,1209.85 1640.46,1209.6 1641.05,1209.48 1641.63,1211.86 1642.22,1212.83 1642.81,1212.58 1643.39,1212.33 1643.98,1212.1 1644.57,1212.94 1645.15,1213.83 1645.74,1209.7 1646.33,1212.01 1646.91,1210.68 1647.5,1205.78 1648.09,1205.94 1648.67,1202.44 1649.26,1203.7 1649.84,1202.37 1650.43,1202.67 1651.02,1208.62 1651.6,1208.39 1652.19,1208.26 1652.78,1207.07 1653.36,1204.55 1653.95,1205.7 1654.54,1206.92 1655.12,1207.04 1655.71,1206.08 1656.29,1207.03 1656.88,1205.92 1657.47,1204.59 1658.05,1204.44 1658.64,1204.28 1659.23,1205.77 1659.81,1204.68 1660.4,1204.68 1660.99,1204.85 1661.57,1204.95 1662.16,1201.33 1662.75,1202.67 1663.33,1201.97 1663.92,1202.15 1664.5,1198.93 1665.09,1199.31 1665.68,1199.63 1666.26,1200.99 1666.85,1201.29 1667.44,1201.9 1668.02,1203.18 1668.61,1203.01 1669.2,1203.08 1669.78,1204.33 1670.37,1203.26 1670.96,1201.25 1671.54,1201.64 1672.13,1200.73 1672.71,1200.93 1673.3,1200.96 1673.89,1203.53 1674.47,1202.89 1675.06,1200.79 1675.65,1201.06 1676.23,1201.29 1676.82,1202.76 1677.41,1204.22 1677.99,1205.35 1678.58,1204.04 1679.17,1205.16 1679.75,1207.62 1680.34,1206.08 1680.92,1205.98 1681.51,1205.86 1682.1,1205.91 1682.68,1202.36 1683.27,1201.52 1683.86,1201.93 1684.44,1202.07 1685.03,1202.24 1685.62,1203.76 1686.2,1207.32 1686.79,1207.29 1687.37,1207.23 1687.96,1205.88 1688.55,1207.16 1689.13,1209.56 1689.72,1208.26 1690.31,1209.08 1690.89,1208.82 1691.48,1206.24 1692.07,1204.96 1692.65,1208.54 1693.24,1208.51 1693.83,1206.03 1694.41,1202.37 1695,1200.47 1695.58,1199.26 1696.17,1206.73 1696.76,1206.63 1697.34,1208.79 1697.93,1209.9 1698.52,1207.45 1699.1,1207.52 1699.69,1209.77 1700.28,1209.4 1700.86,1207.93 1701.45,1207.93 1702.04,1206.75 1702.62,1205.53 1703.21,1205.42 1703.79,1206.54 1704.38,1205.61 1704.97,1205.72 1705.55,1200.8 1706.14,1200.14 1706.73,1202.87 1707.31,1206.34 1707.9,1207.47 1708.49,1207.63 1709.07,1210.12 1709.66,1210.07 1710.24,1207.34 1710.83,1206.19 1711.42,1206.22 1712,1204.78 1712.59,1205.93 1713.18,1206.92 1713.76,1205.69 1714.35,1207.84 1714.94,1208.73 1715.52,1209.52 1716.11,1210.56 1716.7,1209.32 1717.28,1207.99 1717.87,1207.94 1718.45,1210.33 1719.04,1209.17 1719.63,1209.25 1720.21,1209.24 1720.8,1207.13 1721.39,1209.59 1721.97,1209.43 1722.56,1210.54 1723.15,1209.11 1723.73,1211.53 1724.32,1211.15 1724.91,1208.43 1725.49,1210.76 1726.08,1212.76 1726.66,1213.7 1727.25,1212.19 1727.84,1215.25 1728.42,1215.1 1729.01,1212.61 1729.6,1214.71 1730.18,1214.04 1730.77,1213.79 1731.36,1216.05 1731.94,1216.72 1732.53,1217.45 1733.11,1214.79 1733.7,1217.9 1734.29,1218.49 1734.87,1216.64 1735.46,1213.5 1736.05,1215.69 1736.63,1215.17 1737.22,1214.6 1737.81,1213.23 1738.39,1213.94 1738.98,1214.46 1739.57,1211.55 1740.15,1210.02 1740.74,1208.77 1741.32,1209.79 1741.91,1206.14 1742.5,1205.91 1743.08,1210.74 1743.67,1206.88 1744.26,1206.58 1744.84,1205.08 1745.43,1205.25 1746.02,1207.57 1746.6,1206.16 1747.19,1204.91 1747.78,1203.63 1748.36,1203.69 1748.95,1202.59 1749.53,1200.25 1750.12,1203.14 1750.71,1202.13 1751.29,1202.42 1751.88,1202.77 1752.47,1202.84 1753.05,1203.26 1753.64,1203.48 1754.23,1201.33 1754.81,1200.4 1755.4,1199.46 1755.99,1199.74 1756.57,1200.13 1757.16,1201.84 1757.74,1201.86 1758.33,1200.78 1758.92,1203.1 1759.5,1203.23 1760.09,1201 1760.68,1204.65 1761.26,1201.3 1761.85,1201.58 1762.44,1201.89 1763.02,1200.83 1763.61,1201 1764.19,1205.05 1764.78,1206.06 1765.37,1205.96 1765.95,1205.85 1766.54,1207.1 1767.13,1208.1 1767.71,1207.8 1768.3,1210.19 1768.89,1209.84 1769.47,1209.52 1770.06,1206.97 1770.65,1204.86 1771.23,1205.89 1771.82,1203.67 1772.4,1203.83 1772.99,1202.69 1773.58,1202.66 1774.16,1203.96 1774.75,1205.31 1775.34,1206.87 1775.92,1207.9 1776.51,1210.1 1777.1,1211.05 1777.68,1209.59 1778.27,1206.98 1778.86,1205.72 1779.44,1208.07 1780.03,1207.94 1780.61,1207.77 1781.2,1207.87 1781.79,1207.82 1782.37,1206.43 1782.96,1203.94 1783.55,1204.15 1784.13,1204.21 1784.72,1205.5 1785.31,1203.03 1785.89,1202.03 1786.48,1200.12 1787.06,1198.99 1787.65,1200.55 1788.24,1199.67 1788.82,1197.84 1789.41,1198.39 1790,1201.14 1790.58,1200.08 1791.17,1199.08 1791.76,1204.22 1792.34,1205.49 1792.93,1205.53 1793.52,1204.28 1794.1,1204.2 1794.69,1205.51 1795.27,1205.7 1795.86,1205.81 1796.45,1207.04 1797.03,1207.01 1797.62,1207.01 1798.21,1208.11 1798.79,1207.03 1799.38,1206.7 1799.97,1208.89 1800.55,1206.26 1801.14,1205.08 1801.73,1205.11 1802.31,1205.23 1802.9,1201.84 1803.48,1200.84 1804.07,1201.08 1804.66,1201.39 1805.24,1201.83 1805.83,1202.52 1806.42,1203.02 1807,1206.83 1807.59,1206.84 1808.18,1206.78 1808.76,1206.99 1809.35,1206.98 1809.94,1205.55 1810.52,1204.52 1811.11,1202.25 1811.69,1202.55 1812.28,1202.64 1812.87,1201.54 1813.45,1198.39 1814.04,1198.9 1814.63,1200.44 1815.21,1202.95 1815.8,1205.58 1816.39,1205.53 1816.97,1206.69 1817.56,1209.06 1818.14,1208.9 1818.73,1209.8 1819.32,1210.56 1819.9,1209.05 1820.49,1209 1821.08,1209.04 1821.66,1211.27 1822.25,1213.25 1822.84,1212.96 1823.42,1211.6 1824.01,1210.27 1824.6,1211.13 1825.18,1209.7 1825.77,1206.82 1826.35,1206.94 1826.94,1206.84 1827.53,1206.94 1828.11,1206.95 1828.7,1208.1 1829.29,1206.87 1829.87,1205.64 1830.46,1204.69 1831.05,1203.59 1831.63,1203.75 1832.22,1205.1 1832.81,1205.39 1833.39,1205.41 1833.98,1204.14 1834.56,1201.84 1835.15,1202.07 1835.74,1205.98 1836.32,1203.62 1836.91,1203.59 1837.5,1203.92 1838.08,1203.83 1838.67,1207.45 1839.26,1205.27 1839.84,1205.63 1840.43,1202.51 1841.01,1205.37 1841.6,1206.52 1842.19,1206.43 1842.77,1204.19 1843.36,1204.44 1843.95,1207.86 1844.53,1208.85 1845.12,1208.51 1845.71,1209.54 1846.29,1208.4 1846.88,1209.52 1847.47,1208.11 1848.05,1209.17 1848.64,1210.52 1849.22,1211.53 1849.81,1211.08 1850.4,1209.44 1850.98,1209.29 1851.57,1208.1 1852.16,1210.53 1852.74,1209.17 1853.33,1210.45 1853.92,1210.08 1854.5,1211.28 1855.09,1211.15 1855.68,1210.98 1856.26,1213.01 1856.85,1212.56 1857.43,1210.06 1858.02,1208.5 1858.61,1207.31 1859.19,1207.15 1859.78,1204.52 1860.37,1202.17 1860.95,1202.28 1861.54,1200.11 1862.13,1200.48 1862.71,1198.33 1863.3,1198.62 1863.88,1197.88 1864.47,1200.83 1865.06,1202.23 1865.64,1203.83 1866.23,1204.01 1866.82,1203.01 1867.4,1204.31 1867.99,1205.48 1868.58,1202.87 1869.16,1202.93 1869.75,1203.17 1870.34,1204.42 1870.92,1208.1 1871.51,1211.26 1872.09,1210.75 1872.68,1210.44 1873.27,1212.56 1873.85,1211 1874.44,1212.37 1875.03,1215.73 1875.61,1216.4 1876.2,1213.6 1876.79,1214.13 1877.37,1213.79 1877.96,1212.01 1878.55,1212.86 1879.13,1210.16 1879.72,1210.04 1880.3,1209.88 1880.89,1207.32 1881.48,1206.16 1882.06,1206.08 1882.65,1207.21 1883.24,1208.21 1883.82,1205.87 1884.41,1205.63 1885,1209.2 1885.58,1208.95 1886.17,1208.76 1886.76,1208.74 1887.34,1208.4 1887.93,1204.67 1888.51,1203.65 1889.1,1202.72 1889.69,1201.74 1890.27,1206.82 1890.86,1208.03 1891.45,1210.09 1892.03,1212.16 1892.62,1211.76 1893.21,1205.79 1893.79,1206.93 1894.38,1204.44 1894.96,1205.61 1895.55,1203.41 1896.14,1201.03 1896.72,1202.27 1897.31,1202.43 1897.9,1202.75 1898.48,1202.86 1899.07,1201.76 1899.66,1203.21 1900.24,1203.44 1900.83,1205.86 1901.42,1207.42 1902,1206.06 1902.59,1206.07 1903.17,1203.45 1903.76,1205.95 1904.35,1206.07 1904.93,1209.66 1905.52,1208.34 1906.11,1207.17 1906.69,1206 1907.28,1206.87 1907.87,1205.86 1908.45,1206.87 1909.04,1207.99 1909.63,1206.83 1910.21,1203.22 1910.8,1201.86 1911.38,1200.99 1911.97,1201.47 1912.56,1200.68 1913.14,1200.87 1913.73,1201.57 1914.32,1202.9 1914.9,1199.42 1915.49,1198.47 1916.08,1199 1916.66,1201.82 1917.25,1204.25 1917.83,1203.25 1918.42,1203.16 1919.01,1204.57 1919.59,1203.63 1920.18,1205.1 1920.77,1206.14 1921.35,1205.28 1921.94,1204 1922.53,1203.09 1923.11,1206.74 1923.7,1206.87 1924.29,1208.11 1924.87,1204.25 1925.46,1201.93 1926.04,1200.87 1926.63,1199.97 1927.22,1201.52 1927.8,1201.89 1928.39,1202.03 1928.98,1202.15 1929.56,1203.62 1930.15,1203.51 1930.74,1204 1931.32,1203.14 1931.91,1202.01 1932.5,1202.32 1933.08,1208.48 1933.67,1208.65 1934.25,1206.17 1934.84,1207.47 1935.43,1206.43 1936.01,1205.37 1936.6,1206.74 1937.19,1205.8 1937.77,1204.73 1938.36,1204.79 1938.95,1205.77 1939.53,1205.81 1940.12,1205.75 1940.71,1205.7 1941.29,1206.76 1941.88,1207.69 1942.46,1207.38 1943.05,1205.77 1943.64,1205.76 1944.22,1208.19 1944.81,1206.94 1945.4,1206.83 1945.98,1207.68 1946.57,1205.38 1947.16,1203.17 1947.74,1207.87 1948.33,1207.81 1948.91,1206.68 1949.5,1206.7 1950.09,1206.36 1950.67,1205.22 1951.26,1205.44 1951.85,1204.39 1952.43,1205.51 1953.02,1205.63 1953.61,1205.39 1954.19,1205.29 1954.78,1206.5 1955.37,1205.32 1955.95,1207.95 1956.54,1206.74 1957.12,1207.71 1957.71,1208.97 1958.3,1209.93 1958.88,1207.55 1959.47,1207.53 1960.06,1206.27 1960.64,1205.01 1961.23,1202.54 1961.82,1205.13 1962.4,1206.3 1962.99,1205.14 1963.58,1204.14 1964.16,1205.39 1964.75,1205.26 1965.33,1207.65 1965.92,1207.53 1966.51,1209.79 1967.09,1208.6 1967.68,1208.42 1968.27,1206.8 1968.85,1207.76 1969.44,1208.94 1970.03,1208.68 1970.61,1210.89 1971.2,1212.21 1971.78,1209.46 1972.37,1210.33 1972.96,1208.84 1973.54,1209.81 1974.13,1210.63 1974.72,1211.64 1975.3,1212.32 1975.89,1209.77 1976.48,1211.9 1977.06,1209.08 1977.65,1210.01 1978.24,1208.56 1978.82,1212.1 1979.41,1212.96 1979.99,1211.41 1980.58,1213.61 1981.17,1215.45 1981.75,1217.15 1982.34,1214.4 1982.93,1216.05 1983.51,1215.49 1984.1,1214.92 1984.69,1211.05 1985.27,1212.94 1985.86,1212.12 1986.45,1210.29 1987.03,1212.33 1987.62,1211.94 1988.2,1210.46 1988.79,1207.85 1989.38,1206.72 1989.96,1206.67 1990.55,1206.47 1991.14,1203.95 1991.72,1204 1992.31,1205.3 1992.9,1201.64 1993.48,1203.31 1994.07,1204.47 1994.65,1202.17 1995.24,1202.37 1995.83,1204.97 1996.41,1207.31 1997,1207.18 1997.59,1206.95 1998.17,1205.6 1998.76,1204.4 1999.35,1204.73 1999.93,1203.43 2000.52,1204.79 2001.11,1205.11 2001.69,1205.04 2002.28,1205 2002.86,1204.06 2003.45,1202.92 2004.04,1199.54 2004.62,1197.63 2005.21,1198.09 2005.8,1198.63 2006.38,1199.04 2006.97,1199.33 2007.56,1199.73 2008.14,1202.45 2008.73,1202.6 2009.32,1200.39 2009.9,1201.85 2010.49,1201.85 2011.07,1198.38 2011.66,1201.33 2012.25,1202.75 2012.83,1203.95 2013.42,1203.88 2014.01,1205.18 2014.59,1206.18 2015.18,1207.28 2015.77,1205.1 2016.35,1201.46 2016.94,1200.5 2017.53,1201.99 2018.11,1198.56 2018.7,1200.16 2019.28,1200.34 2019.87,1197.27 2020.46,1197.81 2021.04,1199.22 2021.63,1198.27 2022.22,1199.75 2022.8,1199.05 2023.39,1199.47 2023.98,1203.47 2024.56,1202.56 2025.15,1204.01 2025.73,1203.17 2026.32,1199.69 2026.91,1201.41 2027.49,1198.35 2028.08,1198.88 2028.67,1199.43 2029.25,1200.18 2029.84,1201.69 2030.43,1204.27 2031.01,1204.52 2031.6,1203.36 2032.19,1204.7 2032.77,1204.94 2033.36,1205.08 2033.94,1207.56 2034.53,1207.25 2035.12,1202.51 2035.7,1202.71 2036.29,1204.24 2036.88,1204.37 2037.46,1204.53 2038.05,1204.59 2038.64,1207.07 2039.22,1204.62 2039.81,1203.54 2040.4,1203.76 2040.98,1203.9 2041.57,1204.12 2042.15,1206.6 2042.74,1208.93 2043.33,1209.08 2043.91,1208.73 2044.5,1209.8 2045.09,1210.42 2045.67,1210.09 2046.26,1210.04 2046.85,1208.78 2047.43,1204 2048.02,1204.23 2048.6,1204.48 2049.19,1204.42 2049.78,1205.92 2050.36,1206.02 2050.95,1208.25 2051.54,1207.21 2052.12,1209.48 2052.71,1210.35 2053.3,1211.13 2053.88,1211.09 2054.47,1209.5 2055.06,1207.78 2055.64,1207.87 2056.23,1204.1 2056.81,1204.12 2057.4,1204.23 2057.99,1203.29 2058.57,1200.77 2059.16,1199.1 2059.75,1199.49 2060.33,1198.54 2060.92,1198.85 2061.51,1199.38 2062.09,1198.3 2062.68,1197.57 2063.27,1198 2063.85,1197.49 2064.44,1196.56 2065.02,1194.53 2065.61,1195.12 2066.2,1196.58 2066.78,1195.5 2067.37,1198.46 2067.96,1197.63 2068.54,1198.19 2069.13,1197.58 2069.72,1200.48 2070.3,1199.68 2070.89,1199.85 2071.48,1199.99 2072.06,1201.69 2072.65,1202.07 2073.23,1201.04 2073.82,1203.83 2074.41,1201.68 2074.99,1204.32 2075.58,1207.8 2076.17,1208.99 2076.75,1208.84 2077.34,1210.06 2077.93,1212.28 2078.51,1209.52 2079.1,1210.77 2079.68,1210.45 2080.27,1210.13 2080.86,1209.95 2081.44,1208.64 2082.03,1208.59 2082.62,1210.68 2083.2,1212.81 2083.79,1210.11 2084.38,1208.74 2084.96,1208.34 2085.55,1206.9 2086.14,1205.43 2086.72,1205.4 2087.31,1204.34 2087.89,1206.79 2088.48,1203.18 2089.07,1205.62 2089.65,1205.59 2090.24,1205.53 2090.83,1204.3 2091.41,1204.53 2092,1208.11 2092.59,1209.08 2093.17,1210.39 2093.76,1211.65 2094.35,1211.46 2094.93,1210.14 2095.52,1208.63 2096.1,1206.03 2096.69,1203.77 2097.28,1202.68 2097.86,1203.85 2098.45,1205.33 2099.04,1205.3 2099.62,1207.79 2100.21,1208.83 2100.8,1207.51 2101.38,1208.5 2101.97,1209.44 2102.55,1212.81 2103.14,1212.36 2103.73,1211.98 2104.31,1214.01 2104.9,1210.19 2105.49,1211.54 2106.07,1211.38 2106.66,1211.09 2107.25,1212.06 2107.83,1211.7 2108.42,1213.86 2109.01,1210.32 2109.59,1210.15 2110.18,1208.75 2110.76,1206.21 2111.35,1207.44 2111.94,1210.51 2112.52,1210.1 2113.11,1209.55 2113.7,1209.27 2114.28,1210.3 2114.87,1211.32 2115.46,1209.72 2116.04,1208.31 2116.63,1208.15 2117.22,1208.04 2117.8,1207.9 2118.39,1207.84 2118.97,1206.62 2119.56,1210.23 2120.15,1211.27 2120.73,1211.03 2121.32,1208.22 2121.91,1209.25 2122.49,1205.57 2123.08,1206.58 2123.67,1204.04 2124.25,1205.27 2124.84,1205.25 2125.42,1205.05 2126.01,1203.98 2126.6,1206.32 2127.18,1205.24 2127.77,1203.75 2128.36,1203.9 2128.94,1204.19 2129.53,1203.29 2130.12,1202.27 2130.7,1201.34 2131.29,1202.82 2131.88,1199.58 2132.46,1202.19 2133.05,1199.97 2133.63,1199.13 2134.22,1200.62 2134.81,1200.8 2135.39,1203.58 2135.98,1206.4 2136.57,1206.31 2137.15,1206.38 2137.74,1205.54 2138.33,1205.86 2138.91,1207.18 2139.5,1207.13 2140.09,1207.28 2140.67,1207.32 2141.26,1207.18 2141.84,1207.2 2142.43,1208.26 2143.02,1207.01 2143.6,1206.92 2144.19,1208.25 2144.78,1209.23 2145.36,1206.64 2145.95,1206.47 2146.54,1206.39 2147.12,1206.53 2147.71,1205.38 2148.3,1206.45 2148.88,1208.66 2149.47,1208.62 2150.05,1209.85 2150.64,1208.46 2151.23,1210.51 2151.81,1215.93 2152.4,1215.39 2152.99,1211.56 2153.57,1210.03 2154.16,1208.64 2154.75,1207.49 2155.33,1208.65 2155.92,1207.13 2156.5,1207.07 2157.09,1207.13 2157.68,1208.17 2158.26,1208.83 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1206.73 L986.612 1206.73 L987.198 1206.73 L987.785 1206.73 L988.371 1206.73 L988.957 1206.73 L989.544 1206.73 L990.13 1206.73 L990.717 1206.73 L991.303 1206.73 L991.889 1206.73 L992.476 1206.73 L993.062 1206.73 L993.649 1206.73 L994.235 1206.73 L994.822 1206.73 L995.408 1206.73 L995.994 1206.73 L996.581 1206.73 L997.167 1206.73 L997.754 1206.73 L998.34 1206.73 L998.926 1206.73 L999.513 1206.73 L1000.1 1206.73 L1000.69 1206.73 L1001.27 1206.73 L1001.86 1206.73 L1002.44 1206.73 L1003.03 1206.73 L1003.62 1206.73 L1004.2 1206.73 L1004.79 1206.73 L1005.38 1206.73 L1005.96 1206.73 L1006.55 1206.73 L1007.14 1206.73 L1007.72 1206.73 L1008.31 1206.73 L1008.9 1206.73 L1009.48 1206.73 L1010.07 1206.73 L1010.65 1206.73 L1011.24 1206.73 L1011.83 1206.73 L1012.41 1206.73 L1013 1206.73 L1013.59 1206.73 L1014.17 1206.73 L1014.76 1206.73 L1015.35 1206.73 L1015.93 1206.73 L1016.52 1206.73 L1017.11 1206.73 L1017.69 1206.73 L1018.28 1206.73 L1018.86 1206.73 L1019.45 1206.73 L1020.04 1206.73 L1020.62 1206.73 L1021.21 1206.73 L1021.8 1206.73 L1022.38 1206.73 L1022.97 1206.73 L1023.56 1206.73 L1024.14 1206.73 L1024.73 1206.73 L1025.32 1206.73 L1025.9 1206.73 L1026.49 1206.73 L1027.07 1206.73 L1027.66 1206.73 L1028.25 1206.73 L1028.83 1206.73 L1029.42 1206.73 L1030.01 1206.73 L1030.59 1206.73 L1031.18 1206.73 L1031.77 1206.73 L1032.35 1206.73 L1032.94 1206.73 L1033.52 1206.73 L1034.11 1206.73 L1034.7 1206.73 L1035.28 1206.73 L1035.87 1206.73 L1036.46 1206.73 L1037.04 1206.73 L1037.63 1206.73 L1038.22 1206.73 L1038.8 1206.73 L1039.39 1206.73 L1039.98 1206.73 L1040.56 1206.73 L1041.15 1206.73 L1041.73 1206.73 L1042.32 1206.73 L1042.91 1206.73 L1043.49 1206.73 L1044.08 1206.73 L1044.67 1206.73 L1045.25 1206.73 L1045.84 1206.73 L1046.43 1206.73 L1047.01 1206.73 L1047.6 1206.73 L1048.19 1206.73 L1048.77 1206.73 L1049.36 1206.73 L1049.94 1206.73 L1050.53 1206.73 L1051.12 1206.73 L1051.7 1206.73 L1052.29 1206.73 L1052.88 1206.73 L1053.46 1206.73 L1054.05 1206.73 L1054.64 1206.73 L1055.22 1206.73 L1055.81 1206.73 L1056.39 1206.73 L1056.98 1206.73 L1057.57 1206.73 L1058.15 1206.73 L1058.74 1206.73 L1059.33 1206.73 L1059.91 1206.73 L1060.5 1206.73 L1061.09 1206.73 L1061.67 1206.73 L1062.26 1206.73 L1062.85 1206.73 L1063.43 1206.73 L1064.02 1206.73 L1064.6 1206.73 L1065.19 1206.73 L1065.78 1206.73 L1066.36 1206.73 L1066.95 1206.73 L1067.54 1206.73 L1068.12 1206.73 L1068.71 1206.73 L1069.3 1206.73 L1069.88 1206.73 L1070.47 1206.73 L1071.06 1206.73 L1071.64 1206.73 L1072.23 1206.73 L1072.81 1206.73 L1073.4 1206.73 L1073.99 1206.73 L1074.57 1206.73 L1075.16 1206.73 L1075.75 1206.73 L1076.33 1206.73 L1076.92 1206.73 L1077.51 1206.73 L1078.09 1206.73 L1078.68 1206.73 L1079.26 1206.73 L1079.85 1206.73 L1080.44 1206.73 L1081.02 1206.73 L1081.61 1206.73 L1082.2 1206.73 L1082.78 1206.73 L1083.37 1206.73 L1083.96 1206.73 L1084.54 1206.73 L1085.13 1206.73 L1085.72 1206.73 L1086.3 1206.73 L1086.89 1206.73 L1087.47 1206.73 L1088.06 1206.73 L1088.65 1206.73 L1089.23 1206.73 L1089.82 1206.73 L1090.41 1206.73 L1090.99 1206.73 L1091.58 1206.73 L1092.17 1206.73 L1092.75 1206.73 L1093.34 1206.73 L1093.93 1206.73 L1094.51 1206.73 L1095.1 1206.73 L1095.68 1206.73 L1096.27 1206.73 L1096.86 1206.73 L1097.44 1206.73 L1098.03 1206.73 L1098.62 1206.73 L1099.2 1206.73 L1099.79 1206.73 L1100.38 1206.73 L1100.96 1206.73 L1101.55 1206.73 L1102.14 1206.73 L1102.72 1206.73 L1103.31 1206.73 L1103.89 1206.73 L1104.48 1206.73 L1105.07 1206.73 L1105.65 1206.73 L1106.24 1206.73 L1106.83 1206.73 L1107.41 1206.73 L1108 1206.73 L1108.59 1206.73 L1109.17 1206.73 L1109.76 1206.73 L1110.34 1206.73 L1110.93 1206.73 L1111.52 1206.73 L1112.1 1206.73 L1112.69 1206.73 L1113.28 1206.73 L1113.86 1206.73 L1114.45 1206.73 L1115.04 1206.73 L1115.62 1206.73 L1116.21 1206.73 L1116.8 1206.73 L1117.38 1206.73 L1117.97 1206.73 L1118.55 1206.73 L1119.14 1206.73 L1119.73 1206.73 L1120.31 1206.73 L1120.9 1206.73 L1121.49 1206.73 L1122.07 1206.73 L1122.66 1206.73 L1123.25 1206.73 L1123.83 1206.73 L1124.42 1206.73 L1125.01 1206.73 L1125.59 1206.73 L1126.18 1206.73 L1126.76 1206.73 L1127.35 1206.73 L1127.94 1206.73 L1128.52 1206.73 L1129.11 1206.73 L1129.7 1206.73 L1130.28 1206.73 L1130.87 1206.73 L1131.46 1206.73 L1132.04 1206.73 L1132.63 1206.73 L1133.21 1206.73 L1133.8 1206.73 L1134.39 1206.73 L1134.97 1206.73 L1135.56 1206.73 L1136.15 1206.73 L1136.73 1206.73 L1137.32 1206.73 L1137.91 1206.73 L1138.49 1206.73 L1139.08 1206.73 L1139.67 1206.73 L1140.25 1206.73 L1140.84 1206.73 L1141.42 1206.73 L1142.01 1206.73 L1142.6 1206.73 L1143.18 1206.73 L1143.77 1206.73 L1144.36 1206.73 L1144.94 1206.73 L1145.53 1206.73 L1146.12 1206.73 L1146.7 1206.73 L1147.29 1206.73 L1147.88 1206.73 L1148.46 1206.73 L1149.05 1206.73 L1149.63 1206.73 L1150.22 1206.73 L1150.81 1206.73 L1151.39 1206.73 L1151.98 1206.73 L1152.57 1206.73 L1153.15 1206.73 L1153.74 1206.73 L1154.33 1206.73 L1154.91 1206.73 L1155.5 1206.73 L1156.09 1206.73 L1156.67 1206.73 L1157.26 1206.73 L1157.84 1206.73 L1158.43 1206.73 L1159.02 1206.73 L1159.6 1206.73 L1160.19 1206.73 L1160.78 1206.73 L1161.36 1206.73 L1161.95 1206.73 L1162.54 1206.73 L1163.12 1206.73 L1163.71 1206.73 L1164.29 1206.73 L1164.88 1206.73 L1165.47 1206.73 L1166.05 1206.73 L1166.64 1206.73 L1167.23 1206.73 L1167.81 1206.73 L1168.4 1206.73 L1168.99 1206.73 L1169.57 1206.73 L1170.16 1206.73 L1170.75 1206.73 L1171.33 1206.73 L1171.92 1206.73 L1172.5 1206.73 L1173.09 1206.73 L1173.68 1206.73 L1174.26 1206.73 L1174.85 1206.73 L1175.44 1206.73 L1176.02 1206.73 L1176.61 1206.73 L1177.2 1206.73 L1177.78 1206.73 L1178.37 1206.73 L1178.96 1206.73 L1179.54 1206.73 L1180.13 1206.73 L1180.71 1206.73 L1181.3 1206.73 L1181.89 1206.73 L1182.47 1206.73 L1183.06 1206.73 L1183.65 1206.73 L1184.23 1206.73 L1184.82 1206.73 L1185.41 1206.73 L1185.99 1206.73 L1186.58 1206.73 L1187.16 1206.73 L1187.75 1206.73 L1188.34 1206.73 L1188.92 1206.73 L1189.51 1206.73 L1190.1 1206.73 L1190.68 1206.73 L1191.27 1206.73 L1191.86 1206.73 L1192.44 1206.73 L1193.03 1206.73 L1193.62 1206.73 L1194.2 1206.73 L1194.79 1206.73 L1195.37 1206.73 L1195.96 1206.73 L1196.55 1206.73 L1197.13 1206.73 L1197.72 1206.73 L1198.31 1206.73 L1198.89 1206.73 L1199.48 1206.73 L1200.07 1206.73 L1200.65 1206.73 L1201.24 1206.73 L1201.83 1206.73 L1202.41 1206.73 L1203 1206.73 L1203.58 1206.73 L1204.17 1206.73 L1204.76 1206.73 L1205.34 1206.73 L1205.93 1206.73 L1206.52 1206.73 L1207.1 1206.73 L1207.69 1206.73 L1208.28 1206.73 L1208.86 1206.73 L1209.45 1206.73 L1210.03 1206.73 L1210.62 1206.73 L1211.21 1206.73 L1211.79 1206.73 L1212.38 1206.73 L1212.97 1206.73 L1213.55 1206.73 L1214.14 1206.73 L1214.73 1206.73 L1215.31 1206.73 L1215.9 1206.73 L1216.49 1206.73 L1217.07 1206.73 L1217.66 1206.73 L1218.24 1206.73 L1218.83 1206.73 L1219.42 1206.73 L1220 1206.73 L1220.59 1206.73 L1221.18 1206.73 L1221.76 1206.73 L1222.35 1206.73 L1222.94 1206.73 L1223.52 1206.73 L1224.11 1206.73 L1224.7 1206.73 L1225.28 1206.73 L1225.87 1206.73 L1226.45 1206.73 L1227.04 1206.73 L1227.63 1206.73 L1228.21 1206.73 L1228.8 1206.73 L1229.39 1206.73 L1229.97 1206.73 L1230.56 1206.73 L1231.15 1206.73 L1231.73 1206.73 L1232.32 1206.73 L1232.91 1206.73 L1233.49 1206.73 L1234.08 1206.73 L1234.66 1206.73 L1235.25 1206.73 L1235.84 1206.73 L1236.42 1206.73 L1237.01 1206.73 L1237.6 1206.73 L1238.18 1206.73 L1238.77 1206.73 L1239.36 1206.73 L1239.94 1206.73 L1240.53 1206.73 L1241.11 1206.73 L1241.7 1206.73 L1242.29 1206.73 L1242.87 1206.73 L1243.46 1206.73 L1244.05 1206.73 L1244.63 1206.73 L1245.22 1206.73 L1245.81 1206.73 L1246.39 1206.73 L1246.98 1206.73 L1247.57 1206.73 L1248.15 1206.73 L1248.74 1206.73 L1249.32 1206.73 L1249.91 1206.73 L1250.5 1206.73 L1251.08 1206.73 L1251.67 1206.73 L1252.26 1206.73 L1252.84 1206.73 L1253.43 1206.73 L1254.02 1206.73 L1254.6 1206.73 L1255.19 1206.73 L1255.78 1206.73 L1256.36 1206.73 L1256.95 1206.73 L1257.53 1206.73 L1258.12 1206.73 L1258.71 1206.73 L1259.29 1206.73 L1259.88 1206.73 L1260.47 1206.73 L1261.05 1206.73 L1261.64 1206.73 L1262.23 1206.73 L1262.81 1206.73 L1263.4 1206.73 L1263.98 1206.73 L1264.57 1206.73 L1265.16 1206.73 L1265.74 1206.73 L1266.33 1206.73 L1266.92 1206.73 L1267.5 1206.73 L1268.09 1206.73 L1268.68 1206.73 L1269.26 1206.73 L1269.85 1206.73 L1270.44 1206.73 L1271.02 1206.73 L1271.61 1206.73 L1272.19 1206.73 L1272.78 1206.73 L1273.37 1206.73 L1273.95 1206.73 L1274.54 1206.73 L1275.13 1206.73 L1275.71 1206.73 L1276.3 1206.73 L1276.89 1206.73 L1277.47 1206.73 L1278.06 1206.73 L1278.65 1206.73 L1279.23 1206.73 L1279.82 1206.73 L1280.4 1206.73 L1280.99 1206.73 L1281.58 1206.73 L1282.16 1206.73 L1282.75 1206.73 L1283.34 1206.73 L1283.92 1206.73 L1284.51 1206.73 L1285.1 1206.73 L1285.68 1206.73 L1286.27 1206.73 L1286.86 1206.73 L1287.44 1206.73 L1288.03 1206.73 L1288.61 1206.73 L1289.2 1206.73 L1289.79 1206.73 L1290.37 1206.73 L1290.96 1206.73 L1291.55 1206.73 L1292.13 1206.73 L1292.72 1206.73 L1293.31 1206.73 L1293.89 1206.73 L1294.48 1206.73 L1295.06 1206.73 L1295.65 1206.73 L1296.24 1206.73 L1296.82 1206.73 L1297.41 1206.73 L1298 1206.73 L1298.58 1206.73 L1299.17 1206.73 L1299.76 1206.73 L1300.34 1206.73 L1300.93 1206.73 L1301.52 1206.73 L1302.1 1206.73 L1302.69 1206.73 L1303.27 1206.73 L1303.86 1206.73 L1304.45 1206.73 L1305.03 1206.73 L1305.62 1206.73 L1306.21 1206.73 L1306.79 1206.73 L1307.38 1206.73 L1307.97 1206.73 L1308.55 1206.73 L1309.14 1206.73 L1309.73 1206.73 L1310.31 1206.73 L1310.9 1206.73 L1311.48 1206.73 L1312.07 1206.73 L1312.66 1206.73 L1313.24 1206.73 L1313.83 1206.73 L1314.42 1206.73 L1315 1206.73 L1315.59 1206.73 L1316.18 1206.73 L1316.76 1206.73 L1317.35 1206.73 L1317.93 1206.73 L1318.52 1206.73 L1319.11 1206.73 L1319.69 1206.73 L1320.28 1206.73 L1320.87 1206.73 L1321.45 1206.73 L1322.04 1206.73 L1322.63 1206.73 L1323.21 1206.73 L1323.8 1206.73 L1324.39 1206.73 L1324.97 1206.73 L1325.56 1206.73 L1326.14 1206.73 L1326.73 1206.73 L1327.32 1206.73 L1327.9 1206.73 L1328.49 1206.73 L1329.08 1206.73 L1329.66 1206.73 L1330.25 1206.73 L1330.84 1206.73 L1331.42 1206.73 L1332.01 1206.73 L1332.6 1206.73 L1333.18 1206.73 L1333.77 1206.73 L1334.35 1206.73 L1334.94 1206.73 L1335.53 1206.73 L1336.11 1206.73 L1336.7 1206.73 L1337.29 1206.73 L1337.87 1206.73 L1338.46 1206.73 L1339.05 1206.73 L1339.63 1206.73 L1340.22 1206.73 L1340.8 1206.73 L1341.39 1206.73 L1341.98 1206.73 L1342.56 1206.73 L1343.15 1206.73 L1343.74 1206.73 L1344.32 1206.73 L1344.91 1206.73 L1345.5 1206.73 L1346.08 1206.73 L1346.67 1206.73 L1347.26 1206.73 L1347.84 1206.73 L1348.43 1206.73 L1349.01 1206.73 L1349.6 1206.73 L1350.19 1206.73 L1350.77 1206.73 L1351.36 1206.73 L1351.95 1206.73 L1352.53 1206.73 L1353.12 1206.73 L1353.71 1206.73 L1354.29 1206.73 L1354.88 1206.73 L1355.47 1206.73 L1356.05 1206.73 L1356.64 1206.73 L1357.22 1206.73 L1357.81 1206.73 L1358.4 1206.73 L1358.98 1206.73 L1359.57 1206.73 L1360.16 1206.73 L1360.74 1206.73 L1361.33 1206.73 L1361.92 1206.73 L1362.5 1206.73 L1363.09 1206.73 L1363.68 1206.73 L1364.26 1206.73 L1364.85 1206.73 L1365.43 1206.73 L1366.02 1206.73 L1366.61 1206.73 L1367.19 1206.73 L1367.78 1206.73 L1368.37 1206.73 L1368.95 1206.73 L1369.54 1206.73 L1370.13 1206.73 L1370.71 1206.73 L1371.3 1206.73 L1371.88 1206.73 L1372.47 1206.73 L1373.06 1206.73 L1373.64 1206.73 L1374.23 1206.73 L1374.82 1206.73 L1375.4 1206.73 L1375.99 1206.73 L1376.58 1206.73 L1377.16 1206.73 L1377.75 1206.73 L1378.34 1206.73 L1378.92 1206.73 L1379.51 1206.73 L1380.09 1206.73 L1380.68 1206.73 L1381.27 1206.73 L1381.85 1206.73 L1382.44 1206.73 L1383.03 1206.73 L1383.61 1206.73 L1384.2 1206.73 L1384.79 1206.73 L1385.37 1206.73 L1385.96 1206.73 L1386.55 1206.73 L1387.13 1206.73 L1387.72 1206.73 L1388.3 1206.73 L1388.89 1206.73 L1389.48 1206.73 L1390.06 1206.73 L1390.65 1206.73 L1391.24 1206.73 L1391.82 1206.73 L1392.41 1206.73 L1393 1206.73 L1393.58 1206.73 L1394.17 1206.73 L1394.75 1206.73 L1395.34 1206.73 L1395.93 1206.73 L1396.51 1206.73 L1397.1 1206.73 L1397.69 1206.73 L1398.27 1206.73 L1398.86 1206.73 L1399.45 1206.73 L1400.03 1206.73 L1400.62 1206.73 L1401.21 1206.73 L1401.79 1206.73 L1402.38 1206.73 L1402.96 1206.73 L1403.55 1206.73 L1404.14 1206.73 L1404.72 1206.73 L1405.31 1206.73 L1405.9 1206.73 L1406.48 1206.73 L1407.07 1206.73 L1407.66 1206.73 L1408.24 1206.73 L1408.83 1206.73 L1409.42 1206.73 L1410 1206.73 L1410.59 1206.73 L1411.17 1206.73 L1411.76 1206.73 L1412.35 1206.73 L1412.93 1206.73 L1413.52 1206.73 L1414.11 1206.73 L1414.69 1206.73 L1415.28 1206.73 L1415.87 1206.73 L1416.45 1206.73 L1417.04 1206.73 L1417.63 1206.73 L1418.21 1206.73 L1418.8 1206.73 L1419.38 1206.73 L1419.97 1206.73 L1420.56 1206.73 L1421.14 1206.73 L1421.73 1206.73 L1422.32 1206.73 L1422.9 1206.73 L1423.49 1206.73 L1424.08 1206.73 L1424.66 1206.73 L1425.25 1206.73 L1425.83 1206.73 L1426.42 1206.73 L1427.01 1206.73 L1427.59 1206.73 L1428.18 1206.73 L1428.77 1206.73 L1429.35 1206.73 L1429.94 1206.73 L1430.53 1206.73 L1431.11 1206.73 L1431.7 1206.73 L1432.29 1206.73 L1432.87 1206.73 L1433.46 1206.73 L1434.04 1206.73 L1434.63 1206.73 L1435.22 1206.73 L1435.8 1206.73 L1436.39 1206.73 L1436.98 1206.73 L1437.56 1206.73 L1438.15 1206.73 L1438.74 1206.73 L1439.32 1206.73 L1439.91 1206.73 L1440.5 1206.73 L1441.08 1206.73 L1441.67 1206.73 L1442.25 1206.73 L1442.84 1206.73 L1443.43 1206.73 L1444.01 1206.73 L1444.6 1206.73 L1445.19 1206.73 L1445.77 1206.73 L1446.36 1206.73 L1446.95 1206.73 L1447.53 1206.73 L1448.12 1206.73 L1448.7 1206.73 L1449.29 1206.73 L1449.88 1206.73 L1450.46 1206.73 L1451.05 1206.73 L1451.64 1206.73 L1452.22 1206.73 L1452.81 1206.73 L1453.4 1206.73 L1453.98 1206.73 L1454.57 1206.73 L1455.16 1206.73 L1455.74 1206.73 L1456.33 1206.73 L1456.91 1206.73 L1457.5 1206.73 L1458.09 1206.73 L1458.67 1206.73 L1459.26 1206.73 L1459.85 1206.73 L1460.43 1206.73 L1461.02 1206.73 L1461.61 1206.73 L1462.19 1206.73 L1462.78 1206.73 L1463.37 1206.73 L1463.95 1206.73 L1464.54 1206.73 L1465.12 1206.73 L1465.71 1206.73 L1466.3 1206.73 L1466.88 1206.73 L1467.47 1206.73 L1468.06 1206.73 L1468.64 1206.73 L1469.23 1206.73 L1469.82 1206.73 L1470.4 1206.73 L1470.99 1206.73 L1471.57 1206.73 L1472.16 1206.73 L1472.75 1206.73 L1473.33 1206.73 L1473.92 1206.73 L1474.51 1206.73 L1475.09 1206.73 L1475.68 1206.73 L1476.27 1206.73 L1476.85 1206.73 L1477.44 1206.73 L1478.03 1206.73 L1478.61 1206.73 L1479.2 1206.73 L1479.78 1206.73 L1480.37 1206.73 L1480.96 1206.73 L1481.54 1206.73 L1482.13 1206.73 L1482.72 1206.73 L1483.3 1206.73 L1483.89 1206.73 L1484.48 1206.73 L1485.06 1206.73 L1485.65 1206.73 L1486.24 1206.73 L1486.82 1206.73 L1487.41 1206.73 L1487.99 1206.73 L1488.58 1206.73 L1489.17 1206.73 L1489.75 1206.73 L1490.34 1206.73 L1490.93 1206.73 L1491.51 1206.73 L1492.1 1206.73 L1492.69 1206.73 L1493.27 1206.73 L1493.86 1206.73 L1494.45 1206.73 L1495.03 1206.73 L1495.62 1206.73 L1496.2 1206.73 L1496.79 1206.73 L1497.38 1206.73 L1497.96 1206.73 L1498.55 1206.73 L1499.14 1206.73 L1499.72 1206.73 L1500.31 1206.73 L1500.9 1206.73 L1501.48 1206.73 L1502.07 1206.73 L1502.65 1206.73 L1503.24 1206.73 L1503.83 1206.73 L1504.41 1206.73 L1505 1206.73 L1505.59 1206.73 L1506.17 1206.73 L1506.76 1206.73 L1507.35 1206.73 L1507.93 1206.73 L1508.52 1206.73 L1509.11 1206.73 L1509.69 1206.73 L1510.28 1206.73 L1510.86 1206.73 L1511.45 1206.73 L1512.04 1206.73 L1512.62 1206.73 L1513.21 1206.73 L1513.8 1206.73 L1514.38 1206.73 L1514.97 1206.73 L1515.56 1206.73 L1516.14 1206.73 L1516.73 1206.73 L1517.32 1206.73 L1517.9 1206.73 L1518.49 1206.73 L1519.07 1206.73 L1519.66 1206.73 L1520.25 1206.73 L1520.83 1206.73 L1521.42 1206.73 L1522.01 1206.73 L1522.59 1206.73 L1523.18 1206.73 L1523.77 1206.73 L1524.35 1206.73 L1524.94 1206.73 L1525.52 1206.73 L1526.11 1206.73 L1526.7 1206.73 L1527.28 1206.73 L1527.87 1206.73 L1528.46 1206.73 L1529.04 1206.73 L1529.63 1206.73 L1530.22 1206.73 L1530.8 1206.73 L1531.39 1206.73 L1531.98 1206.73 L1532.56 1206.73 L1533.15 1206.73 L1533.73 1206.73 L1534.32 1206.73 L1534.91 1206.73 L1535.49 1206.73 L1536.08 1206.73 L1536.67 1206.73 L1537.25 1206.73 L1537.84 1206.73 L1538.43 1206.73 L1539.01 1206.73 L1539.6 1206.73 L1540.19 1206.73 L1540.77 1206.73 L1541.36 1206.73 L1541.94 1206.73 L1542.53 1206.73 L1543.12 1206.73 L1543.7 1206.73 L1544.29 1206.73 L1544.88 1206.73 L1545.46 1206.73 L1546.05 1206.73 L1546.64 1206.73 L1547.22 1206.73 L1547.81 1206.73 L1548.4 1206.73 L1548.98 1206.73 L1549.57 1206.73 L1550.15 1206.73 L1550.74 1206.73 L1551.33 1206.73 L1551.91 1206.73 L1552.5 1206.73 L1553.09 1206.73 L1553.67 1206.73 L1554.26 1206.73 L1554.85 1206.73 L1555.43 1206.73 L1556.02 1206.73 L1556.6 1206.73 L1557.19 1206.73 L1557.78 1206.73 L1558.36 1206.73 L1558.95 1206.73 L1559.54 1206.73 L1560.12 1206.73 L1560.71 1206.73 L1561.3 1206.73 L1561.88 1206.73 L1562.47 1206.73 L1563.06 1206.73 L1563.64 1206.73 L1564.23 1206.73 L1564.81 1206.73 L1565.4 1206.73 L1565.99 1206.73 L1566.57 1206.73 L1567.16 1206.73 L1567.75 1206.73 L1568.33 1206.73 L1568.92 1206.73 L1569.51 1206.73 L1570.09 1206.73 L1570.68 1206.73 L1571.27 1206.73 L1571.85 1206.73 L1572.44 1206.73 L1573.02 1206.73 L1573.61 1206.73 L1574.2 1206.73 L1574.78 1206.73 L1575.37 1206.73 L1575.96 1206.73 L1576.54 1206.73 L1577.13 1206.73 L1577.72 1206.73 L1578.3 1206.73 L1578.89 1206.73 L1579.47 1206.73 L1580.06 1206.73 L1580.65 1206.73 L1581.23 1206.73 L1581.82 1206.73 L1582.41 1206.73 L1582.99 1206.73 L1583.58 1206.73 L1584.17 1206.73 L1584.75 1206.73 L1585.34 1206.73 L1585.93 1206.73 L1586.51 1206.73 L1587.1 1206.73 L1587.68 1206.73 L1588.27 1206.73 L1588.86 1206.73 L1589.44 1206.73 L1590.03 1206.73 L1590.62 1206.73 L1591.2 1206.73 L1591.79 1206.73 L1592.38 1206.73 L1592.96 1206.73 L1593.55 1206.73 L1594.14 1206.73 L1594.72 1206.73 L1595.31 1206.73 L1595.89 1206.73 L1596.48 1206.73 L1597.07 1206.73 L1597.65 1206.73 L1598.24 1206.73 L1598.83 1206.73 L1599.41 1206.73 L1600 1206.73 L1600.59 1206.73 L1601.17 1206.73 L1601.76 1206.73 L1602.34 1206.73 L1602.93 1206.73 L1603.52 1206.73 L1604.1 1206.73 L1604.69 1206.73 L1605.28 1206.73 L1605.86 1206.73 L1606.45 1206.73 L1607.04 1206.73 L1607.62 1206.73 L1608.21 1206.73 L1608.8 1206.73 L1609.38 1206.73 L1609.97 1206.73 L1610.55 1206.73 L1611.14 1206.73 L1611.73 1206.73 L1612.31 1206.73 L1612.9 1206.73 L1613.49 1206.73 L1614.07 1206.73 L1614.66 1206.73 L1615.25 1206.73 L1615.83 1206.73 L1616.42 1206.73 L1617.01 1206.73 L1617.59 1206.73 L1618.18 1206.73 L1618.76 1206.73 L1619.35 1206.73 L1619.94 1206.73 L1620.52 1206.73 L1621.11 1206.73 L1621.7 1206.73 L1622.28 1206.73 L1622.87 1206.73 L1623.46 1206.73 L1624.04 1206.73 L1624.63 1206.73 L1625.22 1206.73 L1625.8 1206.73 L1626.39 1206.73 L1626.97 1206.73 L1627.56 1206.73 L1628.15 1206.73 L1628.73 1206.73 L1629.32 1206.73 L1629.91 1206.73 L1630.49 1206.73 L1631.08 1206.73 L1631.67 1206.73 L1632.25 1206.73 L1632.84 1206.73 L1633.42 1206.73 L1634.01 1206.73 L1634.6 1206.73 L1635.18 1206.73 L1635.77 1206.73 L1636.36 1206.73 L1636.94 1206.73 L1637.53 1206.73 L1638.12 1206.73 L1638.7 1206.73 L1639.29 1206.73 L1639.88 1206.73 L1640.46 1206.73 L1641.05 1206.73 L1641.63 1206.73 L1642.22 1206.73 L1642.81 1206.73 L1643.39 1206.73 L1643.98 1206.73 L1644.57 1206.73 L1645.15 1206.73 L1645.74 1206.73 L1646.33 1206.73 L1646.91 1206.73 L1647.5 1206.73 L1648.09 1206.73 L1648.67 1206.73 L1649.26 1206.73 L1649.84 1206.73 L1650.43 1206.73 L1651.02 1206.73 L1651.6 1206.73 L1652.19 1206.73 L1652.78 1206.73 L1653.36 1206.73 L1653.95 1206.73 L1654.54 1206.73 L1655.12 1206.73 L1655.71 1206.73 L1656.29 1206.73 L1656.88 1206.73 L1657.47 1206.73 L1658.05 1206.73 L1658.64 1206.73 L1659.23 1206.73 L1659.81 1206.73 L1660.4 1206.73 L1660.99 1206.73 L1661.57 1206.73 L1662.16 1206.73 L1662.75 1206.73 L1663.33 1206.73 L1663.92 1206.73 L1664.5 1206.73 L1665.09 1206.73 L1665.68 1206.73 L1666.26 1206.73 L1666.85 1206.73 L1667.44 1206.73 L1668.02 1206.73 L1668.61 1206.73 L1669.2 1206.73 L1669.78 1206.73 L1670.37 1206.73 L1670.96 1206.73 L1671.54 1206.73 L1672.13 1206.73 L1672.71 1206.73 L1673.3 1206.73 L1673.89 1206.73 L1674.47 1206.73 L1675.06 1206.73 L1675.65 1206.73 L1676.23 1206.73 L1676.82 1206.73 L1677.41 1206.73 L1677.99 1206.73 L1678.58 1206.73 L1679.17 1206.73 L1679.75 1206.73 L1680.34 1206.73 L1680.92 1206.73 L1681.51 1206.73 L1682.1 1206.73 L1682.68 1206.73 L1683.27 1206.73 L1683.86 1206.73 L1684.44 1206.73 L1685.03 1206.73 L1685.62 1206.73 L1686.2 1206.73 L1686.79 1206.73 L1687.37 1206.73 L1687.96 1206.73 L1688.55 1206.73 L1689.13 1206.73 L1689.72 1206.73 L1690.31 1206.73 L1690.89 1206.73 L1691.48 1206.73 L1692.07 1206.73 L1692.65 1206.73 L1693.24 1206.73 L1693.83 1206.73 L1694.41 1206.73 L1695 1206.73 L1695.58 1206.73 L1696.17 1206.73 L1696.76 1206.73 L1697.34 1206.73 L1697.93 1206.73 L1698.52 1206.73 L1699.1 1206.73 L1699.69 1206.73 L1700.28 1206.73 L1700.86 1206.73 L1701.45 1206.73 L1702.04 1206.73 L1702.62 1206.73 L1703.21 1206.73 L1703.79 1206.73 L1704.38 1206.73 L1704.97 1206.73 L1705.55 1206.73 L1706.14 1206.73 L1706.73 1206.73 L1707.31 1206.73 L1707.9 1206.73 L1708.49 1206.73 L1709.07 1206.73 L1709.66 1206.73 L1710.24 1206.73 L1710.83 1206.73 L1711.42 1206.73 L1712 1206.73 L1712.59 1206.73 L1713.18 1206.73 L1713.76 1206.73 L1714.35 1206.73 L1714.94 1206.73 L1715.52 1206.73 L1716.11 1206.73 L1716.7 1206.73 L1717.28 1206.73 L1717.87 1206.73 L1718.45 1206.73 L1719.04 1206.73 L1719.63 1206.73 L1720.21 1206.73 L1720.8 1206.73 L1721.39 1206.73 L1721.97 1206.73 L1722.56 1206.73 L1723.15 1206.73 L1723.73 1206.73 L1724.32 1206.73 L1724.91 1206.73 L1725.49 1206.73 L1726.08 1206.73 L1726.66 1206.73 L1727.25 1206.73 L1727.84 1206.73 L1728.42 1206.73 L1729.01 1206.73 L1729.6 1206.73 L1730.18 1206.73 L1730.77 1206.73 L1731.36 1206.73 L1731.94 1206.73 L1732.53 1206.73 L1733.11 1206.73 L1733.7 1206.73 L1734.29 1206.73 L1734.87 1206.73 L1735.46 1206.73 L1736.05 1206.73 L1736.63 1206.73 L1737.22 1206.73 L1737.81 1206.73 L1738.39 1206.73 L1738.98 1206.73 L1739.57 1206.73 L1740.15 1206.73 L1740.74 1206.73 L1741.32 1206.73 L1741.91 1206.73 L1742.5 1206.73 L1743.08 1206.73 L1743.67 1206.73 L1744.26 1206.73 L1744.84 1206.73 L1745.43 1206.73 L1746.02 1206.73 L1746.6 1206.73 L1747.19 1206.73 L1747.78 1206.73 L1748.36 1206.73 L1748.95 1206.73 L1749.53 1206.73 L1750.12 1206.73 L1750.71 1206.73 L1751.29 1206.73 L1751.88 1206.73 L1752.47 1206.73 L1753.05 1206.73 L1753.64 1206.73 L1754.23 1206.73 L1754.81 1206.73 L1755.4 1206.73 L1755.99 1206.73 L1756.57 1206.73 L1757.16 1206.73 L1757.74 1206.73 L1758.33 1206.73 L1758.92 1206.73 L1759.5 1206.73 L1760.09 1206.73 L1760.68 1206.73 L1761.26 1206.73 L1761.85 1206.73 L1762.44 1206.73 L1763.02 1206.73 L1763.61 1206.73 L1764.19 1206.73 L1764.78 1206.73 L1765.37 1206.73 L1765.95 1206.73 L1766.54 1206.73 L1767.13 1206.73 L1767.71 1206.73 L1768.3 1206.73 L1768.89 1206.73 L1769.47 1206.73 L1770.06 1206.73 L1770.65 1206.73 L1771.23 1206.73 L1771.82 1206.73 L1772.4 1206.73 L1772.99 1206.73 L1773.58 1206.73 L1774.16 1206.73 L1774.75 1206.73 L1775.34 1206.73 L1775.92 1206.73 L1776.51 1206.73 L1777.1 1206.73 L1777.68 1206.73 L1778.27 1206.73 L1778.86 1206.73 L1779.44 1206.73 L1780.03 1206.73 L1780.61 1206.73 L1781.2 1206.73 L1781.79 1206.73 L1782.37 1206.73 L1782.96 1206.73 L1783.55 1206.73 L1784.13 1206.73 L1784.72 1206.73 L1785.31 1206.73 L1785.89 1206.73 L1786.48 1206.73 L1787.06 1206.73 L1787.65 1206.73 L1788.24 1206.73 L1788.82 1206.73 L1789.41 1206.73 L1790 1206.73 L1790.58 1206.73 L1791.17 1206.73 L1791.76 1206.73 L1792.34 1206.73 L1792.93 1206.73 L1793.52 1206.73 L1794.1 1206.73 L1794.69 1206.73 L1795.27 1206.73 L1795.86 1206.73 L1796.45 1206.73 L1797.03 1206.73 L1797.62 1206.73 L1798.21 1206.73 L1798.79 1206.73 L1799.38 1206.73 L1799.97 1206.73 L1800.55 1206.73 L1801.14 1206.73 L1801.73 1206.73 L1802.31 1206.73 L1802.9 1206.73 L1803.48 1206.73 L1804.07 1206.73 L1804.66 1206.73 L1805.24 1206.73 L1805.83 1206.73 L1806.42 1206.73 L1807 1206.73 L1807.59 1206.73 L1808.18 1206.73 L1808.76 1206.73 L1809.35 1206.73 L1809.94 1206.73 L1810.52 1206.73 L1811.11 1206.73 L1811.69 1206.73 L1812.28 1206.73 L1812.87 1206.73 L1813.45 1206.73 L1814.04 1206.73 L1814.63 1206.73 L1815.21 1206.73 L1815.8 1206.73 L1816.39 1206.73 L1816.97 1206.73 L1817.56 1206.73 L1818.14 1206.73 L1818.73 1206.73 L1819.32 1206.73 L1819.9 1206.73 L1820.49 1206.73 L1821.08 1206.73 L1821.66 1206.73 L1822.25 1206.73 L1822.84 1206.73 L1823.42 1206.73 L1824.01 1206.73 L1824.6 1206.73 L1825.18 1206.73 L1825.77 1206.73 L1826.35 1206.73 L1826.94 1206.73 L1827.53 1206.73 L1828.11 1206.73 L1828.7 1206.73 L1829.29 1206.73 L1829.87 1206.73 L1830.46 1206.73 L1831.05 1206.73 L1831.63 1206.73 L1832.22 1206.73 L1832.81 1206.73 L1833.39 1206.73 L1833.98 1206.73 L1834.56 1206.73 L1835.15 1206.73 L1835.74 1206.73 L1836.32 1206.73 L1836.91 1206.73 L1837.5 1206.73 L1838.08 1206.73 L1838.67 1206.73 L1839.26 1206.73 L1839.84 1206.73 L1840.43 1206.73 L1841.01 1206.73 L1841.6 1206.73 L1842.19 1206.73 L1842.77 1206.73 L1843.36 1206.73 L1843.95 1206.73 L1844.53 1206.73 L1845.12 1206.73 L1845.71 1206.73 L1846.29 1206.73 L1846.88 1206.73 L1847.47 1206.73 L1848.05 1206.73 L1848.64 1206.73 L1849.22 1206.73 L1849.81 1206.73 L1850.4 1206.73 L1850.98 1206.73 L1851.57 1206.73 L1852.16 1206.73 L1852.74 1206.73 L1853.33 1206.73 L1853.92 1206.73 L1854.5 1206.73 L1855.09 1206.73 L1855.68 1206.73 L1856.26 1206.73 L1856.85 1206.73 L1857.43 1206.73 L1858.02 1206.73 L1858.61 1206.73 L1859.19 1206.73 L1859.78 1206.73 L1860.37 1206.73 L1860.95 1206.73 L1861.54 1206.73 L1862.13 1206.73 L1862.71 1206.73 L1863.3 1206.73 L1863.88 1206.73 L1864.47 1206.73 L1865.06 1206.73 L1865.64 1206.73 L1866.23 1206.73 L1866.82 1206.73 L1867.4 1206.73 L1867.99 1206.73 L1868.58 1206.73 L1869.16 1206.73 L1869.75 1206.73 L1870.34 1206.73 L1870.92 1206.73 L1871.51 1206.73 L1872.09 1206.73 L1872.68 1206.73 L1873.27 1206.73 L1873.85 1206.73 L1874.44 1206.73 L1875.03 1206.73 L1875.61 1206.73 L1876.2 1206.73 L1876.79 1206.73 L1877.37 1206.73 L1877.96 1206.73 L1878.55 1206.73 L1879.13 1206.73 L1879.72 1206.73 L1880.3 1206.73 L1880.89 1206.73 L1881.48 1206.73 L1882.06 1206.73 L1882.65 1206.73 L1883.24 1206.73 L1883.82 1206.73 L1884.41 1206.73 L1885 1206.73 L1885.58 1206.73 L1886.17 1206.73 L1886.76 1206.73 L1887.34 1206.73 L1887.93 1206.73 L1888.51 1206.73 L1889.1 1206.73 L1889.69 1206.73 L1890.27 1206.73 L1890.86 1206.73 L1891.45 1206.73 L1892.03 1206.73 L1892.62 1206.73 L1893.21 1206.73 L1893.79 1206.73 L1894.38 1206.73 L1894.96 1206.73 L1895.55 1206.73 L1896.14 1206.73 L1896.72 1206.73 L1897.31 1206.73 L1897.9 1206.73 L1898.48 1206.73 L1899.07 1206.73 L1899.66 1206.73 L1900.24 1206.73 L1900.83 1206.73 L1901.42 1206.73 L1902 1206.73 L1902.59 1206.73 L1903.17 1206.73 L1903.76 1206.73 L1904.35 1206.73 L1904.93 1206.73 L1905.52 1206.73 L1906.11 1206.73 L1906.69 1206.73 L1907.28 1206.73 L1907.87 1206.73 L1908.45 1206.73 L1909.04 1206.73 L1909.63 1206.73 L1910.21 1206.73 L1910.8 1206.73 L1911.38 1206.73 L1911.97 1206.73 L1912.56 1206.73 L1913.14 1206.73 L1913.73 1206.73 L1914.32 1206.73 L1914.9 1206.73 L1915.49 1206.73 L1916.08 1206.73 L1916.66 1206.73 L1917.25 1206.73 L1917.83 1206.73 L1918.42 1206.73 L1919.01 1206.73 L1919.59 1206.73 L1920.18 1206.73 L1920.77 1206.73 L1921.35 1206.73 L1921.94 1206.73 L1922.53 1206.73 L1923.11 1206.73 L1923.7 1206.73 L1924.29 1206.73 L1924.87 1206.73 L1925.46 1206.73 L1926.04 1206.73 L1926.63 1206.73 L1927.22 1206.73 L1927.8 1206.73 L1928.39 1206.73 L1928.98 1206.73 L1929.56 1206.73 L1930.15 1206.73 L1930.74 1206.73 L1931.32 1206.73 L1931.91 1206.73 L1932.5 1206.73 L1933.08 1206.73 L1933.67 1206.73 L1934.25 1206.73 L1934.84 1206.73 L1935.43 1206.73 L1936.01 1206.73 L1936.6 1206.73 L1937.19 1206.73 L1937.77 1206.73 L1938.36 1206.73 L1938.95 1206.73 L1939.53 1206.73 L1940.12 1206.73 L1940.71 1206.73 L1941.29 1206.73 L1941.88 1206.73 L1942.46 1206.73 L1943.05 1206.73 L1943.64 1206.73 L1944.22 1206.73 L1944.81 1206.73 L1945.4 1206.73 L1945.98 1206.73 L1946.57 1206.73 L1947.16 1206.73 L1947.74 1206.73 L1948.33 1206.73 L1948.91 1206.73 L1949.5 1206.73 L1950.09 1206.73 L1950.67 1206.73 L1951.26 1206.73 L1951.85 1206.73 L1952.43 1206.73 L1953.02 1206.73 L1953.61 1206.73 L1954.19 1206.73 L1954.78 1206.73 L1955.37 1206.73 L1955.95 1206.73 L1956.54 1206.73 L1957.12 1206.73 L1957.71 1206.73 L1958.3 1206.73 L1958.88 1206.73 L1959.47 1206.73 L1960.06 1206.73 L1960.64 1206.73 L1961.23 1206.73 L1961.82 1206.73 L1962.4 1206.73 L1962.99 1206.73 L1963.58 1206.73 L1964.16 1206.73 L1964.75 1206.73 L1965.33 1206.73 L1965.92 1206.73 L1966.51 1206.73 L1967.09 1206.73 L1967.68 1206.73 L1968.27 1206.73 L1968.85 1206.73 L1969.44 1206.73 L1970.03 1206.73 L1970.61 1206.73 L1971.2 1206.73 L1971.78 1206.73 L1972.37 1206.73 L1972.96 1206.73 L1973.54 1206.73 L1974.13 1206.73 L1974.72 1206.73 L1975.3 1206.73 L1975.89 1206.73 L1976.48 1206.73 L1977.06 1206.73 L1977.65 1206.73 L1978.24 1206.73 L1978.82 1206.73 L1979.41 1206.73 L1979.99 1206.73 L1980.58 1206.73 L1981.17 1206.73 L1981.75 1206.73 L1982.34 1206.73 L1982.93 1206.73 L1983.51 1206.73 L1984.1 1206.73 L1984.69 1206.73 L1985.27 1206.73 L1985.86 1206.73 L1986.45 1206.73 L1987.03 1206.73 L1987.62 1206.73 L1988.2 1206.73 L1988.79 1206.73 L1989.38 1206.73 L1989.96 1206.73 L1990.55 1206.73 L1991.14 1206.73 L1991.72 1206.73 L1992.31 1206.73 L1992.9 1206.73 L1993.48 1206.73 L1994.07 1206.73 L1994.65 1206.73 L1995.24 1206.73 L1995.83 1206.73 L1996.41 1206.73 L1997 1206.73 L1997.59 1206.73 L1998.17 1206.73 L1998.76 1206.73 L1999.35 1206.73 L1999.93 1206.73 L2000.52 1206.73 L2001.11 1206.73 L2001.69 1206.73 L2002.28 1206.73 L2002.86 1206.73 L2003.45 1206.73 L2004.04 1206.73 L2004.62 1206.73 L2005.21 1206.73 L2005.8 1206.73 L2006.38 1206.73 L2006.97 1206.73 L2007.56 1206.73 L2008.14 1206.73 L2008.73 1206.73 L2009.32 1206.73 L2009.9 1206.73 L2010.49 1206.73 L2011.07 1206.73 L2011.66 1206.73 L2012.25 1206.73 L2012.83 1206.73 L2013.42 1206.73 L2014.01 1206.73 L2014.59 1206.73 L2015.18 1206.73 L2015.77 1206.73 L2016.35 1206.73 L2016.94 1206.73 L2017.53 1206.73 L2018.11 1206.73 L2018.7 1206.73 L2019.28 1206.73 L2019.87 1206.73 L2020.46 1206.73 L2021.04 1206.73 L2021.63 1206.73 L2022.22 1206.73 L2022.8 1206.73 L2023.39 1206.73 L2023.98 1206.73 L2024.56 1206.73 L2025.15 1206.73 L2025.73 1206.73 L2026.32 1206.73 L2026.91 1206.73 L2027.49 1206.73 L2028.08 1206.73 L2028.67 1206.73 L2029.25 1206.73 L2029.84 1206.73 L2030.43 1206.73 L2031.01 1206.73 L2031.6 1206.73 L2032.19 1206.73 L2032.77 1206.73 L2033.36 1206.73 L2033.94 1206.73 L2034.53 1206.73 L2035.12 1206.73 L2035.7 1206.73 L2036.29 1206.73 L2036.88 1206.73 L2037.46 1206.73 L2038.05 1206.73 L2038.64 1206.73 L2039.22 1206.73 L2039.81 1206.73 L2040.4 1206.73 L2040.98 1206.73 L2041.57 1206.73 L2042.15 1206.73 L2042.74 1206.73 L2043.33 1206.73 L2043.91 1206.73 L2044.5 1206.73 L2045.09 1206.73 L2045.67 1206.73 L2046.26 1206.73 L2046.85 1206.73 L2047.43 1206.73 L2048.02 1206.73 L2048.6 1206.73 L2049.19 1206.73 L2049.78 1206.73 L2050.36 1206.73 L2050.95 1206.73 L2051.54 1206.73 L2052.12 1206.73 L2052.71 1206.73 L2053.3 1206.73 L2053.88 1206.73 L2054.47 1206.73 L2055.06 1206.73 L2055.64 1206.73 L2056.23 1206.73 L2056.81 1206.73 L2057.4 1206.73 L2057.99 1206.73 L2058.57 1206.73 L2059.16 1206.73 L2059.75 1206.73 L2060.33 1206.73 L2060.92 1206.73 L2061.51 1206.73 L2062.09 1206.73 L2062.68 1206.73 L2063.27 1206.73 L2063.85 1206.73 L2064.44 1206.73 L2065.02 1206.73 L2065.61 1206.73 L2066.2 1206.73 L2066.78 1206.73 L2067.37 1206.73 L2067.96 1206.73 L2068.54 1206.73 L2069.13 1206.73 L2069.72 1206.73 L2070.3 1206.73 L2070.89 1206.73 L2071.48 1206.73 L2072.06 1206.73 L2072.65 1206.73 L2073.23 1206.73 L2073.82 1206.73 L2074.41 1206.73 L2074.99 1206.73 L2075.58 1206.73 L2076.17 1206.73 L2076.75 1206.73 L2077.34 1206.73 L2077.93 1206.73 L2078.51 1206.73 L2079.1 1206.73 L2079.68 1206.73 L2080.27 1206.73 L2080.86 1206.73 L2081.44 1206.73 L2082.03 1206.73 L2082.62 1206.73 L2083.2 1206.73 L2083.79 1206.73 L2084.38 1206.73 L2084.96 1206.73 L2085.55 1206.73 L2086.14 1206.73 L2086.72 1206.73 L2087.31 1206.73 L2087.89 1206.73 L2088.48 1206.73 L2089.07 1206.73 L2089.65 1206.73 L2090.24 1206.73 L2090.83 1206.73 L2091.41 1206.73 L2092 1206.73 L2092.59 1206.73 L2093.17 1206.73 L2093.76 1206.73 L2094.35 1206.73 L2094.93 1206.73 L2095.52 1206.73 L2096.1 1206.73 L2096.69 1206.73 L2097.28 1206.73 L2097.86 1206.73 L2098.45 1206.73 L2099.04 1206.73 L2099.62 1206.73 L2100.21 1206.73 L2100.8 1206.73 L2101.38 1206.73 L2101.97 1206.73 L2102.55 1206.73 L2103.14 1206.73 L2103.73 1206.73 L2104.31 1206.73 L2104.9 1206.73 L2105.49 1206.73 L2106.07 1206.73 L2106.66 1206.73 L2107.25 1206.73 L2107.83 1206.73 L2108.42 1206.73 L2109.01 1206.73 L2109.59 1206.73 L2110.18 1206.73 L2110.76 1206.73 L2111.35 1206.73 L2111.94 1206.73 L2112.52 1206.73 L2113.11 1206.73 L2113.7 1206.73 L2114.28 1206.73 L2114.87 1206.73 L2115.46 1206.73 L2116.04 1206.73 L2116.63 1206.73 L2117.22 1206.73 L2117.8 1206.73 L2118.39 1206.73 L2118.97 1206.73 L2119.56 1206.73 L2120.15 1206.73 L2120.73 1206.73 L2121.32 1206.73 L2121.91 1206.73 L2122.49 1206.73 L2123.08 1206.73 L2123.67 1206.73 L2124.25 1206.73 L2124.84 1206.73 L2125.42 1206.73 L2126.01 1206.73 L2126.6 1206.73 L2127.18 1206.73 L2127.77 1206.73 L2128.36 1206.73 L2128.94 1206.73 L2129.53 1206.73 L2130.12 1206.73 L2130.7 1206.73 L2131.29 1206.73 L2131.88 1206.73 L2132.46 1206.73 L2133.05 1206.73 L2133.63 1206.73 L2134.22 1206.73 L2134.81 1206.73 L2135.39 1206.73 L2135.98 1206.73 L2136.57 1206.73 L2137.15 1206.73 L2137.74 1206.73 L2138.33 1206.73 L2138.91 1206.73 L2139.5 1206.73 L2140.09 1206.73 L2140.67 1206.73 L2141.26 1206.73 L2141.84 1206.73 L2142.43 1206.73 L2143.02 1206.73 L2143.6 1206.73 L2144.19 1206.73 L2144.78 1206.73 L2145.36 1206.73 L2145.95 1206.73 L2146.54 1206.73 L2147.12 1206.73 L2147.71 1206.73 L2148.3 1206.73 L2148.88 1206.73 L2149.47 1206.73 L2150.05 1206.73 L2150.64 1206.73 L2151.23 1206.73 L2151.81 1206.73 L2152.4 1206.73 L2152.99 1206.73 L2153.57 1206.73 L2154.16 1206.73 L2154.75 1206.73 L2155.33 1206.73 L2155.92 1206.73 L2156.5 1206.73 L2157.09 1206.73 L2157.68 1206.73 L2158.26 1206.73 L2158.26 1206.03 L2157.68 1206.03 L2157.09 1206.03 L2156.5 1206.03 L2155.92 1206.03 L2155.33 1206.03 L2154.75 1206.03 L2154.16 1206.03 L2153.57 1206.03 L2152.99 1206.03 L2152.4 1206.03 L2151.81 1206.03 L2151.23 1206.03 L2150.64 1206.03 L2150.05 1206.03 L2149.47 1206.03 L2148.88 1206.03 L2148.3 1206.03 L2147.71 1206.03 L2147.12 1206.03 L2146.54 1206.03 L2145.95 1206.03 L2145.36 1206.03 L2144.78 1206.03 L2144.19 1206.03 L2143.6 1206.03 L2143.02 1206.03 L2142.43 1206.03 L2141.84 1206.03 L2141.26 1206.03 L2140.67 1206.03 L2140.09 1206.03 L2139.5 1206.03 L2138.91 1206.03 L2138.33 1206.03 L2137.74 1206.03 L2137.15 1206.03 L2136.57 1206.03 L2135.98 1206.03 L2135.39 1206.03 L2134.81 1206.03 L2134.22 1206.03 L2133.63 1206.03 L2133.05 1206.03 L2132.46 1206.03 L2131.88 1206.03 L2131.29 1206.03 L2130.7 1206.03 L2130.12 1206.03 L2129.53 1206.03 L2128.94 1206.03 L2128.36 1206.03 L2127.77 1206.03 L2127.18 1206.03 L2126.6 1206.03 L2126.01 1206.03 L2125.42 1206.03 L2124.84 1206.03 L2124.25 1206.03 L2123.67 1206.03 L2123.08 1206.03 L2122.49 1206.03 L2121.91 1206.03 L2121.32 1206.03 L2120.73 1206.03 L2120.15 1206.03 L2119.56 1206.03 L2118.97 1206.03 L2118.39 1206.03 L2117.8 1206.03 L2117.22 1206.03 L2116.63 1206.03 L2116.04 1206.03 L2115.46 1206.03 L2114.87 1206.03 L2114.28 1206.03 L2113.7 1206.03 L2113.11 1206.03 L2112.52 1206.03 L2111.94 1206.03 L2111.35 1206.03 L2110.76 1206.03 L2110.18 1206.03 L2109.59 1206.03 L2109.01 1206.03 L2108.42 1206.03 L2107.83 1206.03 L2107.25 1206.03 L2106.66 1206.03 L2106.07 1206.03 L2105.49 1206.03 L2104.9 1206.03 L2104.31 1206.03 L2103.73 1206.03 L2103.14 1206.03 L2102.55 1206.03 L2101.97 1206.03 L2101.38 1206.03 L2100.8 1206.03 L2100.21 1206.03 L2099.62 1206.03 L2099.04 1206.03 L2098.45 1206.03 L2097.86 1206.03 L2097.28 1206.03 L2096.69 1206.03 L2096.1 1206.03 L2095.52 1206.03 L2094.93 1206.03 L2094.35 1206.03 L2093.76 1206.03 L2093.17 1206.03 L2092.59 1206.03 L2092 1206.03 L2091.41 1206.03 L2090.83 1206.03 L2090.24 1206.03 L2089.65 1206.03 L2089.07 1206.03 L2088.48 1206.03 L2087.89 1206.03 L2087.31 1206.03 L2086.72 1206.03 L2086.14 1206.03 L2085.55 1206.03 L2084.96 1206.03 L2084.38 1206.03 L2083.79 1206.03 L2083.2 1206.03 L2082.62 1206.03 L2082.03 1206.03 L2081.44 1206.03 L2080.86 1206.03 L2080.27 1206.03 L2079.68 1206.03 L2079.1 1206.03 L2078.51 1206.03 L2077.93 1206.03 L2077.34 1206.03 L2076.75 1206.03 L2076.17 1206.03 L2075.58 1206.03 L2074.99 1206.03 L2074.41 1206.03 L2073.82 1206.03 L2073.23 1206.03 L2072.65 1206.03 L2072.06 1206.03 L2071.48 1206.03 L2070.89 1206.03 L2070.3 1206.03 L2069.72 1206.03 L2069.13 1206.03 L2068.54 1206.03 L2067.96 1206.03 L2067.37 1206.03 L2066.78 1206.03 L2066.2 1206.03 L2065.61 1206.03 L2065.02 1206.03 L2064.44 1206.03 L2063.85 1206.03 L2063.27 1206.03 L2062.68 1206.03 L2062.09 1206.03 L2061.51 1206.03 L2060.92 1206.03 L2060.33 1206.03 L2059.75 1206.03 L2059.16 1206.03 L2058.57 1206.03 L2057.99 1206.03 L2057.4 1206.03 L2056.81 1206.03 L2056.23 1206.03 L2055.64 1206.03 L2055.06 1206.03 L2054.47 1206.03 L2053.88 1206.03 L2053.3 1206.03 L2052.71 1206.03 L2052.12 1206.03 L2051.54 1206.03 L2050.95 1206.03 L2050.36 1206.03 L2049.78 1206.03 L2049.19 1206.03 L2048.6 1206.03 L2048.02 1206.03 L2047.43 1206.03 L2046.85 1206.03 L2046.26 1206.03 L2045.67 1206.03 L2045.09 1206.03 L2044.5 1206.03 L2043.91 1206.03 L2043.33 1206.03 L2042.74 1206.03 L2042.15 1206.03 L2041.57 1206.03 L2040.98 1206.03 L2040.4 1206.03 L2039.81 1206.03 L2039.22 1206.03 L2038.64 1206.03 L2038.05 1206.03 L2037.46 1206.03 L2036.88 1206.03 L2036.29 1206.03 L2035.7 1206.03 L2035.12 1206.03 L2034.53 1206.03 L2033.94 1206.03 L2033.36 1206.03 L2032.77 1206.03 L2032.19 1206.03 L2031.6 1206.03 L2031.01 1206.03 L2030.43 1206.03 L2029.84 1206.03 L2029.25 1206.03 L2028.67 1206.03 L2028.08 1206.03 L2027.49 1206.03 L2026.91 1206.03 L2026.32 1206.03 L2025.73 1206.03 L2025.15 1206.03 L2024.56 1206.03 L2023.98 1206.03 L2023.39 1206.03 L2022.8 1206.03 L2022.22 1206.03 L2021.63 1206.03 L2021.04 1206.03 L2020.46 1206.03 L2019.87 1206.03 L2019.28 1206.03 L2018.7 1206.03 L2018.11 1206.03 L2017.53 1206.03 L2016.94 1206.03 L2016.35 1206.03 L2015.77 1206.03 L2015.18 1206.03 L2014.59 1206.03 L2014.01 1206.03 L2013.42 1206.03 L2012.83 1206.03 L2012.25 1206.03 L2011.66 1206.03 L2011.07 1206.03 L2010.49 1206.03 L2009.9 1206.03 L2009.32 1206.03 L2008.73 1206.03 L2008.14 1206.03 L2007.56 1206.03 L2006.97 1206.03 L2006.38 1206.03 L2005.8 1206.03 L2005.21 1206.03 L2004.62 1206.03 L2004.04 1206.03 L2003.45 1206.03 L2002.86 1206.03 L2002.28 1206.03 L2001.69 1206.03 L2001.11 1206.03 L2000.52 1206.03 L1999.93 1206.03 L1999.35 1206.03 L1998.76 1206.03 L1998.17 1206.03 L1997.59 1206.03 L1997 1206.03 L1996.41 1206.03 L1995.83 1206.03 L1995.24 1206.03 L1994.65 1206.03 L1994.07 1206.03 L1993.48 1206.03 L1992.9 1206.03 L1992.31 1206.03 L1991.72 1206.03 L1991.14 1206.03 L1990.55 1206.03 L1989.96 1206.03 L1989.38 1206.03 L1988.79 1206.03 L1988.2 1206.03 L1987.62 1206.03 L1987.03 1206.03 L1986.45 1206.03 L1985.86 1206.03 L1985.27 1206.03 L1984.69 1206.03 L1984.1 1206.03 L1983.51 1206.03 L1982.93 1206.03 L1982.34 1206.03 L1981.75 1206.03 L1981.17 1206.03 L1980.58 1206.03 L1979.99 1206.03 L1979.41 1206.03 L1978.82 1206.03 L1978.24 1206.03 L1977.65 1206.03 L1977.06 1206.03 L1976.48 1206.03 L1975.89 1206.03 L1975.3 1206.03 L1974.72 1206.03 L1974.13 1206.03 L1973.54 1206.03 L1972.96 1206.03 L1972.37 1206.03 L1971.78 1206.03 L1971.2 1206.03 L1970.61 1206.03 L1970.03 1206.03 L1969.44 1206.03 L1968.85 1206.03 L1968.27 1206.03 L1967.68 1206.03 L1967.09 1206.03 L1966.51 1206.03 L1965.92 1206.03 L1965.33 1206.03 L1964.75 1206.03 L1964.16 1206.03 L1963.58 1206.03 L1962.99 1206.03 L1962.4 1206.03 L1961.82 1206.03 L1961.23 1206.03 L1960.64 1206.03 L1960.06 1206.03 L1959.47 1206.03 L1958.88 1206.03 L1958.3 1206.03 L1957.71 1206.03 L1957.12 1206.03 L1956.54 1206.03 L1955.95 1206.03 L1955.37 1206.03 L1954.78 1206.03 L1954.19 1206.03 L1953.61 1206.03 L1953.02 1206.03 L1952.43 1206.03 L1951.85 1206.03 L1951.26 1206.03 L1950.67 1206.03 L1950.09 1206.03 L1949.5 1206.03 L1948.91 1206.03 L1948.33 1206.03 L1947.74 1206.03 L1947.16 1206.03 L1946.57 1206.03 L1945.98 1206.03 L1945.4 1206.03 L1944.81 1206.03 L1944.22 1206.03 L1943.64 1206.03 L1943.05 1206.03 L1942.46 1206.03 L1941.88 1206.03 L1941.29 1206.03 L1940.71 1206.03 L1940.12 1206.03 L1939.53 1206.03 L1938.95 1206.03 L1938.36 1206.03 L1937.77 1206.03 L1937.19 1206.03 L1936.6 1206.03 L1936.01 1206.03 L1935.43 1206.03 L1934.84 1206.03 L1934.25 1206.03 L1933.67 1206.03 L1933.08 1206.03 L1932.5 1206.03 L1931.91 1206.03 L1931.32 1206.03 L1930.74 1206.03 L1930.15 1206.03 L1929.56 1206.03 L1928.98 1206.03 L1928.39 1206.03 L1927.8 1206.03 L1927.22 1206.03 L1926.63 1206.03 L1926.04 1206.03 L1925.46 1206.03 L1924.87 1206.03 L1924.29 1206.03 L1923.7 1206.03 L1923.11 1206.03 L1922.53 1206.03 L1921.94 1206.03 L1921.35 1206.03 L1920.77 1206.03 L1920.18 1206.03 L1919.59 1206.03 L1919.01 1206.03 L1918.42 1206.03 L1917.83 1206.03 L1917.25 1206.03 L1916.66 1206.03 L1916.08 1206.03 L1915.49 1206.03 L1914.9 1206.03 L1914.32 1206.03 L1913.73 1206.03 L1913.14 1206.03 L1912.56 1206.03 L1911.97 1206.03 L1911.38 1206.03 L1910.8 1206.03 L1910.21 1206.03 L1909.63 1206.03 L1909.04 1206.03 L1908.45 1206.03 L1907.87 1206.03 L1907.28 1206.03 L1906.69 1206.03 L1906.11 1206.03 L1905.52 1206.03 L1904.93 1206.03 L1904.35 1206.03 L1903.76 1206.03 L1903.17 1206.03 L1902.59 1206.03 L1902 1206.03 L1901.42 1206.03 L1900.83 1206.03 L1900.24 1206.03 L1899.66 1206.03 L1899.07 1206.03 L1898.48 1206.03 L1897.9 1206.03 L1897.31 1206.03 L1896.72 1206.03 L1896.14 1206.03 L1895.55 1206.03 L1894.96 1206.03 L1894.38 1206.03 L1893.79 1206.03 L1893.21 1206.03 L1892.62 1206.03 L1892.03 1206.03 L1891.45 1206.03 L1890.86 1206.03 L1890.27 1206.03 L1889.69 1206.03 L1889.1 1206.03 L1888.51 1206.03 L1887.93 1206.03 L1887.34 1206.03 L1886.76 1206.03 L1886.17 1206.03 L1885.58 1206.03 L1885 1206.03 L1884.41 1206.03 L1883.82 1206.03 L1883.24 1206.03 L1882.65 1206.03 L1882.06 1206.03 L1881.48 1206.03 L1880.89 1206.03 L1880.3 1206.03 L1879.72 1206.03 L1879.13 1206.03 L1878.55 1206.03 L1877.96 1206.03 L1877.37 1206.03 L1876.79 1206.03 L1876.2 1206.03 L1875.61 1206.03 L1875.03 1206.03 L1874.44 1206.03 L1873.85 1206.03 L1873.27 1206.03 L1872.68 1206.03 L1872.09 1206.03 L1871.51 1206.03 L1870.92 1206.03 L1870.34 1206.03 L1869.75 1206.03 L1869.16 1206.03 L1868.58 1206.03 L1867.99 1206.03 L1867.4 1206.03 L1866.82 1206.03 L1866.23 1206.03 L1865.64 1206.03 L1865.06 1206.03 L1864.47 1206.03 L1863.88 1206.03 L1863.3 1206.03 L1862.71 1206.03 L1862.13 1206.03 L1861.54 1206.03 L1860.95 1206.03 L1860.37 1206.03 L1859.78 1206.03 L1859.19 1206.03 L1858.61 1206.03 L1858.02 1206.03 L1857.43 1206.03 L1856.85 1206.03 L1856.26 1206.03 L1855.68 1206.03 L1855.09 1206.03 L1854.5 1206.03 L1853.92 1206.03 L1853.33 1206.03 L1852.74 1206.03 L1852.16 1206.03 L1851.57 1206.03 L1850.98 1206.03 L1850.4 1206.03 L1849.81 1206.03 L1849.22 1206.03 L1848.64 1206.03 L1848.05 1206.03 L1847.47 1206.03 L1846.88 1206.03 L1846.29 1206.03 L1845.71 1206.03 L1845.12 1206.03 L1844.53 1206.03 L1843.95 1206.03 L1843.36 1206.03 L1842.77 1206.03 L1842.19 1206.03 L1841.6 1206.03 L1841.01 1206.03 L1840.43 1206.03 L1839.84 1206.03 L1839.26 1206.03 L1838.67 1206.03 L1838.08 1206.03 L1837.5 1206.03 L1836.91 1206.03 L1836.32 1206.03 L1835.74 1206.03 L1835.15 1206.03 L1834.56 1206.03 L1833.98 1206.03 L1833.39 1206.03 L1832.81 1206.03 L1832.22 1206.03 L1831.63 1206.03 L1831.05 1206.03 L1830.46 1206.03 L1829.87 1206.03 L1829.29 1206.03 L1828.7 1206.03 L1828.11 1206.03 L1827.53 1206.03 L1826.94 1206.03 L1826.35 1206.03 L1825.77 1206.03 L1825.18 1206.03 L1824.6 1206.03 L1824.01 1206.03 L1823.42 1206.03 L1822.84 1206.03 L1822.25 1206.03 L1821.66 1206.03 L1821.08 1206.03 L1820.49 1206.03 L1819.9 1206.03 L1819.32 1206.03 L1818.73 1206.03 L1818.14 1206.03 L1817.56 1206.03 L1816.97 1206.03 L1816.39 1206.03 L1815.8 1206.03 L1815.21 1206.03 L1814.63 1206.03 L1814.04 1206.03 L1813.45 1206.03 L1812.87 1206.03 L1812.28 1206.03 L1811.69 1206.03 L1811.11 1206.03 L1810.52 1206.03 L1809.94 1206.03 L1809.35 1206.03 L1808.76 1206.03 L1808.18 1206.03 L1807.59 1206.03 L1807 1206.03 L1806.42 1206.03 L1805.83 1206.03 L1805.24 1206.03 L1804.66 1206.03 L1804.07 1206.03 L1803.48 1206.03 L1802.9 1206.03 L1802.31 1206.03 L1801.73 1206.03 L1801.14 1206.03 L1800.55 1206.03 L1799.97 1206.03 L1799.38 1206.03 L1798.79 1206.03 L1798.21 1206.03 L1797.62 1206.03 L1797.03 1206.03 L1796.45 1206.03 L1795.86 1206.03 L1795.27 1206.03 L1794.69 1206.03 L1794.1 1206.03 L1793.52 1206.03 L1792.93 1206.03 L1792.34 1206.03 L1791.76 1206.03 L1791.17 1206.03 L1790.58 1206.03 L1790 1206.03 L1789.41 1206.03 L1788.82 1206.03 L1788.24 1206.03 L1787.65 1206.03 L1787.06 1206.03 L1786.48 1206.03 L1785.89 1206.03 L1785.31 1206.03 L1784.72 1206.03 L1784.13 1206.03 L1783.55 1206.03 L1782.96 1206.03 L1782.37 1206.03 L1781.79 1206.03 L1781.2 1206.03 L1780.61 1206.03 L1780.03 1206.03 L1779.44 1206.03 L1778.86 1206.03 L1778.27 1206.03 L1777.68 1206.03 L1777.1 1206.03 L1776.51 1206.03 L1775.92 1206.03 L1775.34 1206.03 L1774.75 1206.03 L1774.16 1206.03 L1773.58 1206.03 L1772.99 1206.03 L1772.4 1206.03 L1771.82 1206.03 L1771.23 1206.03 L1770.65 1206.03 L1770.06 1206.03 L1769.47 1206.03 L1768.89 1206.03 L1768.3 1206.03 L1767.71 1206.03 L1767.13 1206.03 L1766.54 1206.03 L1765.95 1206.03 L1765.37 1206.03 L1764.78 1206.03 L1764.19 1206.03 L1763.61 1206.03 L1763.02 1206.03 L1762.44 1206.03 L1761.85 1206.03 L1761.26 1206.03 L1760.68 1206.03 L1760.09 1206.03 L1759.5 1206.03 L1758.92 1206.03 L1758.33 1206.03 L1757.74 1206.03 L1757.16 1206.03 L1756.57 1206.03 L1755.99 1206.03 L1755.4 1206.03 L1754.81 1206.03 L1754.23 1206.03 L1753.64 1206.03 L1753.05 1206.03 L1752.47 1206.03 L1751.88 1206.03 L1751.29 1206.03 L1750.71 1206.03 L1750.12 1206.03 L1749.53 1206.03 L1748.95 1206.03 L1748.36 1206.03 L1747.78 1206.03 L1747.19 1206.03 L1746.6 1206.03 L1746.02 1206.03 L1745.43 1206.03 L1744.84 1206.03 L1744.26 1206.03 L1743.67 1206.03 L1743.08 1206.03 L1742.5 1206.03 L1741.91 1206.03 L1741.32 1206.03 L1740.74 1206.03 L1740.15 1206.03 L1739.57 1206.03 L1738.98 1206.03 L1738.39 1206.03 L1737.81 1206.03 L1737.22 1206.03 L1736.63 1206.03 L1736.05 1206.03 L1735.46 1206.03 L1734.87 1206.03 L1734.29 1206.03 L1733.7 1206.03 L1733.11 1206.03 L1732.53 1206.03 L1731.94 1206.03 L1731.36 1206.03 L1730.77 1206.03 L1730.18 1206.03 L1729.6 1206.03 L1729.01 1206.03 L1728.42 1206.03 L1727.84 1206.03 L1727.25 1206.03 L1726.66 1206.03 L1726.08 1206.03 L1725.49 1206.03 L1724.91 1206.03 L1724.32 1206.03 L1723.73 1206.03 L1723.15 1206.03 L1722.56 1206.03 L1721.97 1206.03 L1721.39 1206.03 L1720.8 1206.03 L1720.21 1206.03 L1719.63 1206.03 L1719.04 1206.03 L1718.45 1206.03 L1717.87 1206.03 L1717.28 1206.03 L1716.7 1206.03 L1716.11 1206.03 L1715.52 1206.03 L1714.94 1206.03 L1714.35 1206.03 L1713.76 1206.03 L1713.18 1206.03 L1712.59 1206.03 L1712 1206.03 L1711.42 1206.03 L1710.83 1206.03 L1710.24 1206.03 L1709.66 1206.03 L1709.07 1206.03 L1708.49 1206.03 L1707.9 1206.03 L1707.31 1206.03 L1706.73 1206.03 L1706.14 1206.03 L1705.55 1206.03 L1704.97 1206.03 L1704.38 1206.03 L1703.79 1206.03 L1703.21 1206.03 L1702.62 1206.03 L1702.04 1206.03 L1701.45 1206.03 L1700.86 1206.03 L1700.28 1206.03 L1699.69 1206.03 L1699.1 1206.03 L1698.52 1206.03 L1697.93 1206.03 L1697.34 1206.03 L1696.76 1206.03 L1696.17 1206.03 L1695.58 1206.03 L1695 1206.03 L1694.41 1206.03 L1693.83 1206.03 L1693.24 1206.03 L1692.65 1206.03 L1692.07 1206.03 L1691.48 1206.03 L1690.89 1206.03 L1690.31 1206.03 L1689.72 1206.03 L1689.13 1206.03 L1688.55 1206.03 L1687.96 1206.03 L1687.37 1206.03 L1686.79 1206.03 L1686.2 1206.03 L1685.62 1206.03 L1685.03 1206.03 L1684.44 1206.03 L1683.86 1206.03 L1683.27 1206.03 L1682.68 1206.03 L1682.1 1206.03 L1681.51 1206.03 L1680.92 1206.03 L1680.34 1206.03 L1679.75 1206.03 L1679.17 1206.03 L1678.58 1206.03 L1677.99 1206.03 L1677.41 1206.03 L1676.82 1206.03 L1676.23 1206.03 L1675.65 1206.03 L1675.06 1206.03 L1674.47 1206.03 L1673.89 1206.03 L1673.3 1206.03 L1672.71 1206.03 L1672.13 1206.03 L1671.54 1206.03 L1670.96 1206.03 L1670.37 1206.03 L1669.78 1206.03 L1669.2 1206.03 L1668.61 1206.03 L1668.02 1206.03 L1667.44 1206.03 L1666.85 1206.03 L1666.26 1206.03 L1665.68 1206.03 L1665.09 1206.03 L1664.5 1206.03 L1663.92 1206.03 L1663.33 1206.03 L1662.75 1206.03 L1662.16 1206.03 L1661.57 1206.03 L1660.99 1206.03 L1660.4 1206.03 L1659.81 1206.03 L1659.23 1206.03 L1658.64 1206.03 L1658.05 1206.03 L1657.47 1206.03 L1656.88 1206.03 L1656.29 1206.03 L1655.71 1206.03 L1655.12 1206.03 L1654.54 1206.03 L1653.95 1206.03 L1653.36 1206.03 L1652.78 1206.03 L1652.19 1206.03 L1651.6 1206.03 L1651.02 1206.03 L1650.43 1206.03 L1649.84 1206.03 L1649.26 1206.03 L1648.67 1206.03 L1648.09 1206.03 L1647.5 1206.03 L1646.91 1206.03 L1646.33 1206.03 L1645.74 1206.03 L1645.15 1206.03 L1644.57 1206.03 L1643.98 1206.03 L1643.39 1206.03 L1642.81 1206.03 L1642.22 1206.03 L1641.63 1206.03 L1641.05 1206.03 L1640.46 1206.03 L1639.88 1206.03 L1639.29 1206.03 L1638.7 1206.03 L1638.12 1206.03 L1637.53 1206.03 L1636.94 1206.03 L1636.36 1206.03 L1635.77 1206.03 L1635.18 1206.03 L1634.6 1206.03 L1634.01 1206.03 L1633.42 1206.03 L1632.84 1206.03 L1632.25 1206.03 L1631.67 1206.03 L1631.08 1206.03 L1630.49 1206.03 L1629.91 1206.03 L1629.32 1206.03 L1628.73 1206.03 L1628.15 1206.03 L1627.56 1206.03 L1626.97 1206.03 L1626.39 1206.03 L1625.8 1206.03 L1625.22 1206.03 L1624.63 1206.03 L1624.04 1206.03 L1623.46 1206.03 L1622.87 1206.03 L1622.28 1206.03 L1621.7 1206.03 L1621.11 1206.03 L1620.52 1206.03 L1619.94 1206.03 L1619.35 1206.03 L1618.76 1206.03 L1618.18 1206.03 L1617.59 1206.03 L1617.01 1206.03 L1616.42 1206.03 L1615.83 1206.03 L1615.25 1206.03 L1614.66 1206.03 L1614.07 1206.03 L1613.49 1206.03 L1612.9 1206.03 L1612.31 1206.03 L1611.73 1206.03 L1611.14 1206.03 L1610.55 1206.03 L1609.97 1206.03 L1609.38 1206.03 L1608.8 1206.03 L1608.21 1206.03 L1607.62 1206.03 L1607.04 1206.03 L1606.45 1206.03 L1605.86 1206.03 L1605.28 1206.03 L1604.69 1206.03 L1604.1 1206.03 L1603.52 1206.03 L1602.93 1206.03 L1602.34 1206.03 L1601.76 1206.03 L1601.17 1206.03 L1600.59 1206.03 L1600 1206.03 L1599.41 1206.03 L1598.83 1206.03 L1598.24 1206.03 L1597.65 1206.03 L1597.07 1206.03 L1596.48 1206.03 L1595.89 1206.03 L1595.31 1206.03 L1594.72 1206.03 L1594.14 1206.03 L1593.55 1206.03 L1592.96 1206.03 L1592.38 1206.03 L1591.79 1206.03 L1591.2 1206.03 L1590.62 1206.03 L1590.03 1206.03 L1589.44 1206.03 L1588.86 1206.03 L1588.27 1206.03 L1587.68 1206.03 L1587.1 1206.03 L1586.51 1206.03 L1585.93 1206.03 L1585.34 1206.03 L1584.75 1206.03 L1584.17 1206.03 L1583.58 1206.03 L1582.99 1206.03 L1582.41 1206.03 L1581.82 1206.03 L1581.23 1206.03 L1580.65 1206.03 L1580.06 1206.03 L1579.47 1206.03 L1578.89 1206.03 L1578.3 1206.03 L1577.72 1206.03 L1577.13 1206.03 L1576.54 1206.03 L1575.96 1206.03 L1575.37 1206.03 L1574.78 1206.03 L1574.2 1206.03 L1573.61 1206.03 L1573.02 1206.03 L1572.44 1206.03 L1571.85 1206.03 L1571.27 1206.03 L1570.68 1206.03 L1570.09 1206.03 L1569.51 1206.03 L1568.92 1206.03 L1568.33 1206.03 L1567.75 1206.03 L1567.16 1206.03 L1566.57 1206.03 L1565.99 1206.03 L1565.4 1206.03 L1564.81 1206.03 L1564.23 1206.03 L1563.64 1206.03 L1563.06 1206.03 L1562.47 1206.03 L1561.88 1206.03 L1561.3 1206.03 L1560.71 1206.03 L1560.12 1206.03 L1559.54 1206.03 L1558.95 1206.03 L1558.36 1206.03 L1557.78 1206.03 L1557.19 1206.03 L1556.6 1206.03 L1556.02 1206.03 L1555.43 1206.03 L1554.85 1206.03 L1554.26 1206.03 L1553.67 1206.03 L1553.09 1206.03 L1552.5 1206.03 L1551.91 1206.03 L1551.33 1206.03 L1550.74 1206.03 L1550.15 1206.03 L1549.57 1206.03 L1548.98 1206.03 L1548.4 1206.03 L1547.81 1206.03 L1547.22 1206.03 L1546.64 1206.03 L1546.05 1206.03 L1545.46 1206.03 L1544.88 1206.03 L1544.29 1206.03 L1543.7 1206.03 L1543.12 1206.03 L1542.53 1206.03 L1541.94 1206.03 L1541.36 1206.03 L1540.77 1206.03 L1540.19 1206.03 L1539.6 1206.03 L1539.01 1206.03 L1538.43 1206.03 L1537.84 1206.03 L1537.25 1206.03 L1536.67 1206.03 L1536.08 1206.03 L1535.49 1206.03 L1534.91 1206.03 L1534.32 1206.03 L1533.73 1206.03 L1533.15 1206.03 L1532.56 1206.03 L1531.98 1206.03 L1531.39 1206.03 L1530.8 1206.03 L1530.22 1206.03 L1529.63 1206.03 L1529.04 1206.03 L1528.46 1206.03 L1527.87 1206.03 L1527.28 1206.03 L1526.7 1206.03 L1526.11 1206.03 L1525.52 1206.03 L1524.94 1206.03 L1524.35 1206.03 L1523.77 1206.03 L1523.18 1206.03 L1522.59 1206.03 L1522.01 1206.03 L1521.42 1206.03 L1520.83 1206.03 L1520.25 1206.03 L1519.66 1206.03 L1519.07 1206.03 L1518.49 1206.03 L1517.9 1206.03 L1517.32 1206.03 L1516.73 1206.03 L1516.14 1206.03 L1515.56 1206.03 L1514.97 1206.03 L1514.38 1206.03 L1513.8 1206.03 L1513.21 1206.03 L1512.62 1206.03 L1512.04 1206.03 L1511.45 1206.03 L1510.86 1206.03 L1510.28 1206.03 L1509.69 1206.03 L1509.11 1206.03 L1508.52 1206.03 L1507.93 1206.03 L1507.35 1206.03 L1506.76 1206.03 L1506.17 1206.03 L1505.59 1206.03 L1505 1206.03 L1504.41 1206.03 L1503.83 1206.03 L1503.24 1206.03 L1502.65 1206.03 L1502.07 1206.03 L1501.48 1206.03 L1500.9 1206.03 L1500.31 1206.03 L1499.72 1206.03 L1499.14 1206.03 L1498.55 1206.03 L1497.96 1206.03 L1497.38 1206.03 L1496.79 1206.03 L1496.2 1206.03 L1495.62 1206.03 L1495.03 1206.03 L1494.45 1206.03 L1493.86 1206.03 L1493.27 1206.03 L1492.69 1206.03 L1492.1 1206.03 L1491.51 1206.03 L1490.93 1206.03 L1490.34 1206.03 L1489.75 1206.03 L1489.17 1206.03 L1488.58 1206.03 L1487.99 1206.03 L1487.41 1206.03 L1486.82 1206.03 L1486.24 1206.03 L1485.65 1206.03 L1485.06 1206.03 L1484.48 1206.03 L1483.89 1206.03 L1483.3 1206.03 L1482.72 1206.03 L1482.13 1206.03 L1481.54 1206.03 L1480.96 1206.03 L1480.37 1206.03 L1479.78 1206.03 L1479.2 1206.03 L1478.61 1206.03 L1478.03 1206.03 L1477.44 1206.03 L1476.85 1206.03 L1476.27 1206.03 L1475.68 1206.03 L1475.09 1206.03 L1474.51 1206.03 L1473.92 1206.03 L1473.33 1206.03 L1472.75 1206.03 L1472.16 1206.03 L1471.57 1206.03 L1470.99 1206.03 L1470.4 1206.03 L1469.82 1206.03 L1469.23 1206.03 L1468.64 1206.03 L1468.06 1206.03 L1467.47 1206.03 L1466.88 1206.03 L1466.3 1206.03 L1465.71 1206.03 L1465.12 1206.03 L1464.54 1206.03 L1463.95 1206.03 L1463.37 1206.03 L1462.78 1206.03 L1462.19 1206.03 L1461.61 1206.03 L1461.02 1206.03 L1460.43 1206.03 L1459.85 1206.03 L1459.26 1206.03 L1458.67 1206.03 L1458.09 1206.03 L1457.5 1206.03 L1456.91 1206.03 L1456.33 1206.03 L1455.74 1206.03 L1455.16 1206.03 L1454.57 1206.03 L1453.98 1206.03 L1453.4 1206.03 L1452.81 1206.03 L1452.22 1206.03 L1451.64 1206.03 L1451.05 1206.03 L1450.46 1206.03 L1449.88 1206.03 L1449.29 1206.03 L1448.7 1206.03 L1448.12 1206.03 L1447.53 1206.03 L1446.95 1206.03 L1446.36 1206.03 L1445.77 1206.03 L1445.19 1206.03 L1444.6 1206.03 L1444.01 1206.03 L1443.43 1206.03 L1442.84 1206.03 L1442.25 1206.03 L1441.67 1206.03 L1441.08 1206.03 L1440.5 1206.03 L1439.91 1206.03 L1439.32 1206.03 L1438.74 1206.03 L1438.15 1206.03 L1437.56 1206.03 L1436.98 1206.03 L1436.39 1206.03 L1435.8 1206.03 L1435.22 1206.03 L1434.63 1206.03 L1434.04 1206.03 L1433.46 1206.03 L1432.87 1206.03 L1432.29 1206.03 L1431.7 1206.03 L1431.11 1206.03 L1430.53 1206.03 L1429.94 1206.03 L1429.35 1206.03 L1428.77 1206.03 L1428.18 1206.03 L1427.59 1206.03 L1427.01 1206.03 L1426.42 1206.03 L1425.83 1206.03 L1425.25 1206.03 L1424.66 1206.03 L1424.08 1206.03 L1423.49 1206.03 L1422.9 1206.03 L1422.32 1206.03 L1421.73 1206.03 L1421.14 1206.03 L1420.56 1206.03 L1419.97 1206.03 L1419.38 1206.03 L1418.8 1206.03 L1418.21 1206.03 L1417.63 1206.03 L1417.04 1206.03 L1416.45 1206.03 L1415.87 1206.03 L1415.28 1206.03 L1414.69 1206.03 L1414.11 1206.03 L1413.52 1206.03 L1412.93 1206.03 L1412.35 1206.03 L1411.76 1206.03 L1411.17 1206.03 L1410.59 1206.03 L1410 1206.03 L1409.42 1206.03 L1408.83 1206.03 L1408.24 1206.03 L1407.66 1206.03 L1407.07 1206.03 L1406.48 1206.03 L1405.9 1206.03 L1405.31 1206.03 L1404.72 1206.03 L1404.14 1206.03 L1403.55 1206.03 L1402.96 1206.03 L1402.38 1206.03 L1401.79 1206.03 L1401.21 1206.03 L1400.62 1206.03 L1400.03 1206.03 L1399.45 1206.03 L1398.86 1206.03 L1398.27 1206.03 L1397.69 1206.03 L1397.1 1206.03 L1396.51 1206.03 L1395.93 1206.03 L1395.34 1206.03 L1394.75 1206.03 L1394.17 1206.03 L1393.58 1206.03 L1393 1206.03 L1392.41 1206.03 L1391.82 1206.03 L1391.24 1206.03 L1390.65 1206.03 L1390.06 1206.03 L1389.48 1206.03 L1388.89 1206.03 L1388.3 1206.03 L1387.72 1206.03 L1387.13 1206.03 L1386.55 1206.03 L1385.96 1206.03 L1385.37 1206.03 L1384.79 1206.03 L1384.2 1206.03 L1383.61 1206.03 L1383.03 1206.03 L1382.44 1206.03 L1381.85 1206.03 L1381.27 1206.03 L1380.68 1206.03 L1380.09 1206.03 L1379.51 1206.03 L1378.92 1206.03 L1378.34 1206.03 L1377.75 1206.03 L1377.16 1206.03 L1376.58 1206.03 L1375.99 1206.03 L1375.4 1206.03 L1374.82 1206.03 L1374.23 1206.03 L1373.64 1206.03 L1373.06 1206.03 L1372.47 1206.03 L1371.88 1206.03 L1371.3 1206.03 L1370.71 1206.03 L1370.13 1206.03 L1369.54 1206.03 L1368.95 1206.03 L1368.37 1206.03 L1367.78 1206.03 L1367.19 1206.03 L1366.61 1206.03 L1366.02 1206.03 L1365.43 1206.03 L1364.85 1206.03 L1364.26 1206.03 L1363.68 1206.03 L1363.09 1206.03 L1362.5 1206.03 L1361.92 1206.03 L1361.33 1206.03 L1360.74 1206.03 L1360.16 1206.03 L1359.57 1206.03 L1358.98 1206.03 L1358.4 1206.03 L1357.81 1206.03 L1357.22 1206.03 L1356.64 1206.03 L1356.05 1206.03 L1355.47 1206.03 L1354.88 1206.03 L1354.29 1206.03 L1353.71 1206.03 L1353.12 1206.03 L1352.53 1206.03 L1351.95 1206.03 L1351.36 1206.03 L1350.77 1206.03 L1350.19 1206.03 L1349.6 1206.03 L1349.01 1206.03 L1348.43 1206.03 L1347.84 1206.03 L1347.26 1206.03 L1346.67 1206.03 L1346.08 1206.03 L1345.5 1206.03 L1344.91 1206.03 L1344.32 1206.03 L1343.74 1206.03 L1343.15 1206.03 L1342.56 1206.03 L1341.98 1206.03 L1341.39 1206.03 L1340.8 1206.03 L1340.22 1206.03 L1339.63 1206.03 L1339.05 1206.03 L1338.46 1206.03 L1337.87 1206.03 L1337.29 1206.03 L1336.7 1206.03 L1336.11 1206.03 L1335.53 1206.03 L1334.94 1206.03 L1334.35 1206.03 L1333.77 1206.03 L1333.18 1206.03 L1332.6 1206.03 L1332.01 1206.03 L1331.42 1206.03 L1330.84 1206.03 L1330.25 1206.03 L1329.66 1206.03 L1329.08 1206.03 L1328.49 1206.03 L1327.9 1206.03 L1327.32 1206.03 L1326.73 1206.03 L1326.14 1206.03 L1325.56 1206.03 L1324.97 1206.03 L1324.39 1206.03 L1323.8 1206.03 L1323.21 1206.03 L1322.63 1206.03 L1322.04 1206.03 L1321.45 1206.03 L1320.87 1206.03 L1320.28 1206.03 L1319.69 1206.03 L1319.11 1206.03 L1318.52 1206.03 L1317.93 1206.03 L1317.35 1206.03 L1316.76 1206.03 L1316.18 1206.03 L1315.59 1206.03 L1315 1206.03 L1314.42 1206.03 L1313.83 1206.03 L1313.24 1206.03 L1312.66 1206.03 L1312.07 1206.03 L1311.48 1206.03 L1310.9 1206.03 L1310.31 1206.03 L1309.73 1206.03 L1309.14 1206.03 L1308.55 1206.03 L1307.97 1206.03 L1307.38 1206.03 L1306.79 1206.03 L1306.21 1206.03 L1305.62 1206.03 L1305.03 1206.03 L1304.45 1206.03 L1303.86 1206.03 L1303.27 1206.03 L1302.69 1206.03 L1302.1 1206.03 L1301.52 1206.03 L1300.93 1206.03 L1300.34 1206.03 L1299.76 1206.03 L1299.17 1206.03 L1298.58 1206.03 L1298 1206.03 L1297.41 1206.03 L1296.82 1206.03 L1296.24 1206.03 L1295.65 1206.03 L1295.06 1206.03 L1294.48 1206.03 L1293.89 1206.03 L1293.31 1206.03 L1292.72 1206.03 L1292.13 1206.03 L1291.55 1206.03 L1290.96 1206.03 L1290.37 1206.03 L1289.79 1206.03 L1289.2 1206.03 L1288.61 1206.03 L1288.03 1206.03 L1287.44 1206.03 L1286.86 1206.03 L1286.27 1206.03 L1285.68 1206.03 L1285.1 1206.03 L1284.51 1206.03 L1283.92 1206.03 L1283.34 1206.03 L1282.75 1206.03 L1282.16 1206.03 L1281.58 1206.03 L1280.99 1206.03 L1280.4 1206.03 L1279.82 1206.03 L1279.23 1206.03 L1278.65 1206.03 L1278.06 1206.03 L1277.47 1206.03 L1276.89 1206.03 L1276.3 1206.03 L1275.71 1206.03 L1275.13 1206.03 L1274.54 1206.03 L1273.95 1206.03 L1273.37 1206.03 L1272.78 1206.03 L1272.19 1206.03 L1271.61 1206.03 L1271.02 1206.03 L1270.44 1206.03 L1269.85 1206.03 L1269.26 1206.03 L1268.68 1206.03 L1268.09 1206.03 L1267.5 1206.03 L1266.92 1206.03 L1266.33 1206.03 L1265.74 1206.03 L1265.16 1206.03 L1264.57 1206.03 L1263.98 1206.03 L1263.4 1206.03 L1262.81 1206.03 L1262.23 1206.03 L1261.64 1206.03 L1261.05 1206.03 L1260.47 1206.03 L1259.88 1206.03 L1259.29 1206.03 L1258.71 1206.03 L1258.12 1206.03 L1257.53 1206.03 L1256.95 1206.03 L1256.36 1206.03 L1255.78 1206.03 L1255.19 1206.03 L1254.6 1206.03 L1254.02 1206.03 L1253.43 1206.03 L1252.84 1206.03 L1252.26 1206.03 L1251.67 1206.03 L1251.08 1206.03 L1250.5 1206.03 L1249.91 1206.03 L1249.32 1206.03 L1248.74 1206.03 L1248.15 1206.03 L1247.57 1206.03 L1246.98 1206.03 L1246.39 1206.03 L1245.81 1206.03 L1245.22 1206.03 L1244.63 1206.03 L1244.05 1206.03 L1243.46 1206.03 L1242.87 1206.03 L1242.29 1206.03 L1241.7 1206.03 L1241.11 1206.03 L1240.53 1206.03 L1239.94 1206.03 L1239.36 1206.03 L1238.77 1206.03 L1238.18 1206.03 L1237.6 1206.03 L1237.01 1206.03 L1236.42 1206.03 L1235.84 1206.03 L1235.25 1206.03 L1234.66 1206.03 L1234.08 1206.03 L1233.49 1206.03 L1232.91 1206.03 L1232.32 1206.03 L1231.73 1206.03 L1231.15 1206.03 L1230.56 1206.03 L1229.97 1206.03 L1229.39 1206.03 L1228.8 1206.03 L1228.21 1206.03 L1227.63 1206.03 L1227.04 1206.03 L1226.45 1206.03 L1225.87 1206.03 L1225.28 1206.03 L1224.7 1206.03 L1224.11 1206.03 L1223.52 1206.03 L1222.94 1206.03 L1222.35 1206.03 L1221.76 1206.03 L1221.18 1206.03 L1220.59 1206.03 L1220 1206.03 L1219.42 1206.03 L1218.83 1206.03 L1218.24 1206.03 L1217.66 1206.03 L1217.07 1206.03 L1216.49 1206.03 L1215.9 1206.03 L1215.31 1206.03 L1214.73 1206.03 L1214.14 1206.03 L1213.55 1206.03 L1212.97 1206.03 L1212.38 1206.03 L1211.79 1206.03 L1211.21 1206.03 L1210.62 1206.03 L1210.03 1206.03 L1209.45 1206.03 L1208.86 1206.03 L1208.28 1206.03 L1207.69 1206.03 L1207.1 1206.03 L1206.52 1206.03 L1205.93 1206.03 L1205.34 1206.03 L1204.76 1206.03 L1204.17 1206.03 L1203.58 1206.03 L1203 1206.03 L1202.41 1206.03 L1201.83 1206.03 L1201.24 1206.03 L1200.65 1206.03 L1200.07 1206.03 L1199.48 1206.03 L1198.89 1206.03 L1198.31 1206.03 L1197.72 1206.03 L1197.13 1206.03 L1196.55 1206.03 L1195.96 1206.03 L1195.37 1206.03 L1194.79 1206.03 L1194.2 1206.03 L1193.62 1206.03 L1193.03 1206.03 L1192.44 1206.03 L1191.86 1206.03 L1191.27 1206.03 L1190.68 1206.03 L1190.1 1206.03 L1189.51 1206.03 L1188.92 1206.03 L1188.34 1206.03 L1187.75 1206.03 L1187.16 1206.03 L1186.58 1206.03 L1185.99 1206.03 L1185.41 1206.03 L1184.82 1206.03 L1184.23 1206.03 L1183.65 1206.03 L1183.06 1206.03 L1182.47 1206.03 L1181.89 1206.03 L1181.3 1206.03 L1180.71 1206.03 L1180.13 1206.03 L1179.54 1206.03 L1178.96 1206.03 L1178.37 1206.03 L1177.78 1206.03 L1177.2 1206.03 L1176.61 1206.03 L1176.02 1206.03 L1175.44 1206.03 L1174.85 1206.03 L1174.26 1206.03 L1173.68 1206.03 L1173.09 1206.03 L1172.5 1206.03 L1171.92 1206.03 L1171.33 1206.03 L1170.75 1206.03 L1170.16 1206.03 L1169.57 1206.03 L1168.99 1206.03 L1168.4 1206.03 L1167.81 1206.03 L1167.23 1206.03 L1166.64 1206.03 L1166.05 1206.03 L1165.47 1206.03 L1164.88 1206.03 L1164.29 1206.03 L1163.71 1206.03 L1163.12 1206.03 L1162.54 1206.03 L1161.95 1206.03 L1161.36 1206.03 L1160.78 1206.03 L1160.19 1206.03 L1159.6 1206.03 L1159.02 1206.03 L1158.43 1206.03 L1157.84 1206.03 L1157.26 1206.03 L1156.67 1206.03 L1156.09 1206.03 L1155.5 1206.03 L1154.91 1206.03 L1154.33 1206.03 L1153.74 1206.03 L1153.15 1206.03 L1152.57 1206.03 L1151.98 1206.03 L1151.39 1206.03 L1150.81 1206.03 L1150.22 1206.03 L1149.63 1206.03 L1149.05 1206.03 L1148.46 1206.03 L1147.88 1206.03 L1147.29 1206.03 L1146.7 1206.03 L1146.12 1206.03 L1145.53 1206.03 L1144.94 1206.03 L1144.36 1206.03 L1143.77 1206.03 L1143.18 1206.03 L1142.6 1206.03 L1142.01 1206.03 L1141.42 1206.03 L1140.84 1206.03 L1140.25 1206.03 L1139.67 1206.03 L1139.08 1206.03 L1138.49 1206.03 L1137.91 1206.03 L1137.32 1206.03 L1136.73 1206.03 L1136.15 1206.03 L1135.56 1206.03 L1134.97 1206.03 L1134.39 1206.03 L1133.8 1206.03 L1133.21 1206.03 L1132.63 1206.03 L1132.04 1206.03 L1131.46 1206.03 L1130.87 1206.03 L1130.28 1206.03 L1129.7 1206.03 L1129.11 1206.03 L1128.52 1206.03 L1127.94 1206.03 L1127.35 1206.03 L1126.76 1206.03 L1126.18 1206.03 L1125.59 1206.03 L1125.01 1206.03 L1124.42 1206.03 L1123.83 1206.03 L1123.25 1206.03 L1122.66 1206.03 L1122.07 1206.03 L1121.49 1206.03 L1120.9 1206.03 L1120.31 1206.03 L1119.73 1206.03 L1119.14 1206.03 L1118.55 1206.03 L1117.97 1206.03 L1117.38 1206.03 L1116.8 1206.03 L1116.21 1206.03 L1115.62 1206.03 L1115.04 1206.03 L1114.45 1206.03 L1113.86 1206.03 L1113.28 1206.03 L1112.69 1206.03 L1112.1 1206.03 L1111.52 1206.03 L1110.93 1206.03 L1110.34 1206.03 L1109.76 1206.03 L1109.17 1206.03 L1108.59 1206.03 L1108 1206.03 L1107.41 1206.03 L1106.83 1206.03 L1106.24 1206.03 L1105.65 1206.03 L1105.07 1206.03 L1104.48 1206.03 L1103.89 1206.03 L1103.31 1206.03 L1102.72 1206.03 L1102.14 1206.03 L1101.55 1206.03 L1100.96 1206.03 L1100.38 1206.03 L1099.79 1206.03 L1099.2 1206.03 L1098.62 1206.03 L1098.03 1206.03 L1097.44 1206.03 L1096.86 1206.03 L1096.27 1206.03 L1095.68 1206.03 L1095.1 1206.03 L1094.51 1206.03 L1093.93 1206.03 L1093.34 1206.03 L1092.75 1206.03 L1092.17 1206.03 L1091.58 1206.03 L1090.99 1206.03 L1090.41 1206.03 L1089.82 1206.03 L1089.23 1206.03 L1088.65 1206.03 L1088.06 1206.03 L1087.47 1206.03 L1086.89 1206.03 L1086.3 1206.03 L1085.72 1206.03 L1085.13 1206.03 L1084.54 1206.03 L1083.96 1206.03 L1083.37 1206.03 L1082.78 1206.03 L1082.2 1206.03 L1081.61 1206.03 L1081.02 1206.03 L1080.44 1206.03 L1079.85 1206.03 L1079.26 1206.03 L1078.68 1206.03 L1078.09 1206.03 L1077.51 1206.03 L1076.92 1206.03 L1076.33 1206.03 L1075.75 1206.03 L1075.16 1206.03 L1074.57 1206.03 L1073.99 1206.03 L1073.4 1206.03 L1072.81 1206.03 L1072.23 1206.03 L1071.64 1206.03 L1071.06 1206.03 L1070.47 1206.03 L1069.88 1206.03 L1069.3 1206.03 L1068.71 1206.03 L1068.12 1206.03 L1067.54 1206.03 L1066.95 1206.03 L1066.36 1206.03 L1065.78 1206.03 L1065.19 1206.03 L1064.6 1206.03 L1064.02 1206.03 L1063.43 1206.03 L1062.85 1206.03 L1062.26 1206.03 L1061.67 1206.03 L1061.09 1206.03 L1060.5 1206.03 L1059.91 1206.03 L1059.33 1206.03 L1058.74 1206.03 L1058.15 1206.03 L1057.57 1206.03 L1056.98 1206.03 L1056.39 1206.03 L1055.81 1206.03 L1055.22 1206.03 L1054.64 1206.03 L1054.05 1206.03 L1053.46 1206.03 L1052.88 1206.03 L1052.29 1206.03 L1051.7 1206.03 L1051.12 1206.03 L1050.53 1206.03 L1049.94 1206.03 L1049.36 1206.03 L1048.77 1206.03 L1048.19 1206.03 L1047.6 1206.03 L1047.01 1206.03 L1046.43 1206.03 L1045.84 1206.03 L1045.25 1206.03 L1044.67 1206.03 L1044.08 1206.03 L1043.49 1206.03 L1042.91 1206.03 L1042.32 1206.03 L1041.73 1206.03 L1041.15 1206.03 L1040.56 1206.03 L1039.98 1206.03 L1039.39 1206.03 L1038.8 1206.03 L1038.22 1206.03 L1037.63 1206.03 L1037.04 1206.03 L1036.46 1206.03 L1035.87 1206.03 L1035.28 1206.03 L1034.7 1206.03 L1034.11 1206.03 L1033.52 1206.03 L1032.94 1206.03 L1032.35 1206.03 L1031.77 1206.03 L1031.18 1206.03 L1030.59 1206.03 L1030.01 1206.03 L1029.42 1206.03 L1028.83 1206.03 L1028.25 1206.03 L1027.66 1206.03 L1027.07 1206.03 L1026.49 1206.03 L1025.9 1206.03 L1025.32 1206.03 L1024.73 1206.03 L1024.14 1206.03 L1023.56 1206.03 L1022.97 1206.03 L1022.38 1206.03 L1021.8 1206.03 L1021.21 1206.03 L1020.62 1206.03 L1020.04 1206.03 L1019.45 1206.03 L1018.86 1206.03 L1018.28 1206.03 L1017.69 1206.03 L1017.11 1206.03 L1016.52 1206.03 L1015.93 1206.03 L1015.35 1206.03 L1014.76 1206.03 L1014.17 1206.03 L1013.59 1206.03 L1013 1206.03 L1012.41 1206.03 L1011.83 1206.03 L1011.24 1206.03 L1010.65 1206.03 L1010.07 1206.03 L1009.48 1206.03 L1008.9 1206.03 L1008.31 1206.03 L1007.72 1206.03 L1007.14 1206.03 L1006.55 1206.03 L1005.96 1206.03 L1005.38 1206.03 L1004.79 1206.03 L1004.2 1206.03 L1003.62 1206.03 L1003.03 1206.03 L1002.44 1206.03 L1001.86 1206.03 L1001.27 1206.03 L1000.69 1206.03 L1000.1 1206.03 L999.513 1206.03 L998.926 1206.03 L998.34 1206.03 L997.754 1206.03 L997.167 1206.03 L996.581 1206.03 L995.994 1206.03 L995.408 1206.03 L994.822 1206.03 L994.235 1206.03 L993.649 1206.03 L993.062 1206.03 L992.476 1206.03 L991.889 1206.03 L991.303 1206.03 L990.717 1206.03 L990.13 1206.03 L989.544 1206.03 L988.957 1206.03 L988.371 1206.03 L987.785 1206.03 L987.198 1206.03 L986.612 1206.03 L986.025 1206.03  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.38 986.612,1206.38 987.198,1206.38 987.785,1206.38 988.371,1206.38 988.957,1206.38 989.544,1206.38 990.13,1206.38 990.717,1206.38 991.303,1206.38 991.889,1206.38 992.476,1206.38 993.062,1206.38 993.649,1206.38 994.235,1206.38 994.822,1206.38 995.408,1206.38 995.994,1206.38 996.581,1206.38 997.167,1206.38 997.754,1206.38 998.34,1206.38 998.926,1206.38 999.513,1206.38 1000.1,1206.38 1000.69,1206.38 1001.27,1206.38 1001.86,1206.38 1002.44,1206.38 1003.03,1206.38 1003.62,1206.38 1004.2,1206.38 1004.79,1206.38 1005.38,1206.38 1005.96,1206.38 1006.55,1206.38 1007.14,1206.38 1007.72,1206.38 1008.31,1206.38 1008.9,1206.38 1009.48,1206.38 1010.07,1206.38 1010.65,1206.38 1011.24,1206.38 1011.83,1206.38 1012.41,1206.38 1013,1206.38 1013.59,1206.38 1014.17,1206.38 1014.76,1206.38 1015.35,1206.38 1015.93,1206.38 1016.52,1206.38 1017.11,1206.38 1017.69,1206.38 1018.28,1206.38 1018.86,1206.38 1019.45,1206.38 1020.04,1206.38 1020.62,1206.38 1021.21,1206.38 1021.8,1206.38 1022.38,1206.38 1022.97,1206.38 1023.56,1206.38 1024.14,1206.38 1024.73,1206.38 1025.32,1206.38 1025.9,1206.38 1026.49,1206.38 1027.07,1206.38 1027.66,1206.38 1028.25,1206.38 1028.83,1206.38 1029.42,1206.38 1030.01,1206.38 1030.59,1206.38 1031.18,1206.38 1031.77,1206.38 1032.35,1206.38 1032.94,1206.38 1033.52,1206.38 1034.11,1206.38 1034.7,1206.38 1035.28,1206.38 1035.87,1206.38 1036.46,1206.38 1037.04,1206.38 1037.63,1206.38 1038.22,1206.38 1038.8,1206.38 1039.39,1206.38 1039.98,1206.38 1040.56,1206.38 1041.15,1206.38 1041.73,1206.38 1042.32,1206.38 1042.91,1206.38 1043.49,1206.38 1044.08,1206.38 1044.67,1206.38 1045.25,1206.38 1045.84,1206.38 1046.43,1206.38 1047.01,1206.38 1047.6,1206.38 1048.19,1206.38 1048.77,1206.38 1049.36,1206.38 1049.94,1206.38 1050.53,1206.38 1051.12,1206.38 1051.7,1206.38 1052.29,1206.38 1052.88,1206.38 1053.46,1206.38 1054.05,1206.38 1054.64,1206.38 1055.22,1206.38 1055.81,1206.38 1056.39,1206.38 1056.98,1206.38 1057.57,1206.38 1058.15,1206.38 1058.74,1206.38 1059.33,1206.38 1059.91,1206.38 1060.5,1206.38 1061.09,1206.38 1061.67,1206.38 1062.26,1206.38 1062.85,1206.38 1063.43,1206.38 1064.02,1206.38 1064.6,1206.38 1065.19,1206.38 1065.78,1206.38 1066.36,1206.38 1066.95,1206.38 1067.54,1206.38 1068.12,1206.38 1068.71,1206.38 1069.3,1206.38 1069.88,1206.38 1070.47,1206.38 1071.06,1206.38 1071.64,1206.38 1072.23,1206.38 1072.81,1206.38 1073.4,1206.38 1073.99,1206.38 1074.57,1206.38 1075.16,1206.38 1075.75,1206.38 1076.33,1206.38 1076.92,1206.38 1077.51,1206.38 1078.09,1206.38 1078.68,1206.38 1079.26,1206.38 1079.85,1206.38 1080.44,1206.38 1081.02,1206.38 1081.61,1206.38 1082.2,1206.38 1082.78,1206.38 1083.37,1206.38 1083.96,1206.38 1084.54,1206.38 1085.13,1206.38 1085.72,1206.38 1086.3,1206.38 1086.89,1206.38 1087.47,1206.38 1088.06,1206.38 1088.65,1206.38 1089.23,1206.38 1089.82,1206.38 1090.41,1206.38 1090.99,1206.38 1091.58,1206.38 1092.17,1206.38 1092.75,1206.38 1093.34,1206.38 1093.93,1206.38 1094.51,1206.38 1095.1,1206.38 1095.68,1206.38 1096.27,1206.38 1096.86,1206.38 1097.44,1206.38 1098.03,1206.38 1098.62,1206.38 1099.2,1206.38 1099.79,1206.38 1100.38,1206.38 1100.96,1206.38 1101.55,1206.38 1102.14,1206.38 1102.72,1206.38 1103.31,1206.38 1103.89,1206.38 1104.48,1206.38 1105.07,1206.38 1105.65,1206.38 1106.24,1206.38 1106.83,1206.38 1107.41,1206.38 1108,1206.38 1108.59,1206.38 1109.17,1206.38 1109.76,1206.38 1110.34,1206.38 1110.93,1206.38 1111.52,1206.38 1112.1,1206.38 1112.69,1206.38 1113.28,1206.38 1113.86,1206.38 1114.45,1206.38 1115.04,1206.38 1115.62,1206.38 1116.21,1206.38 1116.8,1206.38 1117.38,1206.38 1117.97,1206.38 1118.55,1206.38 1119.14,1206.38 1119.73,1206.38 1120.31,1206.38 1120.9,1206.38 1121.49,1206.38 1122.07,1206.38 1122.66,1206.38 1123.25,1206.38 1123.83,1206.38 1124.42,1206.38 1125.01,1206.38 1125.59,1206.38 1126.18,1206.38 1126.76,1206.38 1127.35,1206.38 1127.94,1206.38 1128.52,1206.38 1129.11,1206.38 1129.7,1206.38 1130.28,1206.38 1130.87,1206.38 1131.46,1206.38 1132.04,1206.38 1132.63,1206.38 1133.21,1206.38 1133.8,1206.38 1134.39,1206.38 1134.97,1206.38 1135.56,1206.38 1136.15,1206.38 1136.73,1206.38 1137.32,1206.38 1137.91,1206.38 1138.49,1206.38 1139.08,1206.38 1139.67,1206.38 1140.25,1206.38 1140.84,1206.38 1141.42,1206.38 1142.01,1206.38 1142.6,1206.38 1143.18,1206.38 1143.77,1206.38 1144.36,1206.38 1144.94,1206.38 1145.53,1206.38 1146.12,1206.38 1146.7,1206.38 1147.29,1206.38 1147.88,1206.38 1148.46,1206.38 1149.05,1206.38 1149.63,1206.38 1150.22,1206.38 1150.81,1206.38 1151.39,1206.38 1151.98,1206.38 1152.57,1206.38 1153.15,1206.38 1153.74,1206.38 1154.33,1206.38 1154.91,1206.38 1155.5,1206.38 1156.09,1206.38 1156.67,1206.38 1157.26,1206.38 1157.84,1206.38 1158.43,1206.38 1159.02,1206.38 1159.6,1206.38 1160.19,1206.38 1160.78,1206.38 1161.36,1206.38 1161.95,1206.38 1162.54,1206.38 1163.12,1206.38 1163.71,1206.38 1164.29,1206.38 1164.88,1206.38 1165.47,1206.38 1166.05,1206.38 1166.64,1206.38 1167.23,1206.38 1167.81,1206.38 1168.4,1206.38 1168.99,1206.38 1169.57,1206.38 1170.16,1206.38 1170.75,1206.38 1171.33,1206.38 1171.92,1206.38 1172.5,1206.38 1173.09,1206.38 1173.68,1206.38 1174.26,1206.38 1174.85,1206.38 1175.44,1206.38 1176.02,1206.38 1176.61,1206.38 1177.2,1206.38 1177.78,1206.38 1178.37,1206.38 1178.96,1206.38 1179.54,1206.38 1180.13,1206.38 1180.71,1206.38 1181.3,1206.38 1181.89,1206.38 1182.47,1206.38 1183.06,1206.38 1183.65,1206.38 1184.23,1206.38 1184.82,1206.38 1185.41,1206.38 1185.99,1206.38 1186.58,1206.38 1187.16,1206.38 1187.75,1206.38 1188.34,1206.38 1188.92,1206.38 1189.51,1206.38 1190.1,1206.38 1190.68,1206.38 1191.27,1206.38 1191.86,1206.38 1192.44,1206.38 1193.03,1206.38 1193.62,1206.38 1194.2,1206.38 1194.79,1206.38 1195.37,1206.38 1195.96,1206.38 1196.55,1206.38 1197.13,1206.38 1197.72,1206.38 1198.31,1206.38 1198.89,1206.38 1199.48,1206.38 1200.07,1206.38 1200.65,1206.38 1201.24,1206.38 1201.83,1206.38 1202.41,1206.38 1203,1206.38 1203.58,1206.38 1204.17,1206.38 1204.76,1206.38 1205.34,1206.38 1205.93,1206.38 1206.52,1206.38 1207.1,1206.38 1207.69,1206.38 1208.28,1206.38 1208.86,1206.38 1209.45,1206.38 1210.03,1206.38 1210.62,1206.38 1211.21,1206.38 1211.79,1206.38 1212.38,1206.38 1212.97,1206.38 1213.55,1206.38 1214.14,1206.38 1214.73,1206.38 1215.31,1206.38 1215.9,1206.38 1216.49,1206.38 1217.07,1206.38 1217.66,1206.38 1218.24,1206.38 1218.83,1206.38 1219.42,1206.38 1220,1206.38 1220.59,1206.38 1221.18,1206.38 1221.76,1206.38 1222.35,1206.38 1222.94,1206.38 1223.52,1206.38 1224.11,1206.38 1224.7,1206.38 1225.28,1206.38 1225.87,1206.38 1226.45,1206.38 1227.04,1206.38 1227.63,1206.38 1228.21,1206.38 1228.8,1206.38 1229.39,1206.38 1229.97,1206.38 1230.56,1206.38 1231.15,1206.38 1231.73,1206.38 1232.32,1206.38 1232.91,1206.38 1233.49,1206.38 1234.08,1206.38 1234.66,1206.38 1235.25,1206.38 1235.84,1206.38 1236.42,1206.38 1237.01,1206.38 1237.6,1206.38 1238.18,1206.38 1238.77,1206.38 1239.36,1206.38 1239.94,1206.38 1240.53,1206.38 1241.11,1206.38 1241.7,1206.38 1242.29,1206.38 1242.87,1206.38 1243.46,1206.38 1244.05,1206.38 1244.63,1206.38 1245.22,1206.38 1245.81,1206.38 1246.39,1206.38 1246.98,1206.38 1247.57,1206.38 1248.15,1206.38 1248.74,1206.38 1249.32,1206.38 1249.91,1206.38 1250.5,1206.38 1251.08,1206.38 1251.67,1206.38 1252.26,1206.38 1252.84,1206.38 1253.43,1206.38 1254.02,1206.38 1254.6,1206.38 1255.19,1206.38 1255.78,1206.38 1256.36,1206.38 1256.95,1206.38 1257.53,1206.38 1258.12,1206.38 1258.71,1206.38 1259.29,1206.38 1259.88,1206.38 1260.47,1206.38 1261.05,1206.38 1261.64,1206.38 1262.23,1206.38 1262.81,1206.38 1263.4,1206.38 1263.98,1206.38 1264.57,1206.38 1265.16,1206.38 1265.74,1206.38 1266.33,1206.38 1266.92,1206.38 1267.5,1206.38 1268.09,1206.38 1268.68,1206.38 1269.26,1206.38 1269.85,1206.38 1270.44,1206.38 1271.02,1206.38 1271.61,1206.38 1272.19,1206.38 1272.78,1206.38 1273.37,1206.38 1273.95,1206.38 1274.54,1206.38 1275.13,1206.38 1275.71,1206.38 1276.3,1206.38 1276.89,1206.38 1277.47,1206.38 1278.06,1206.38 1278.65,1206.38 1279.23,1206.38 1279.82,1206.38 1280.4,1206.38 1280.99,1206.38 1281.58,1206.38 1282.16,1206.38 1282.75,1206.38 1283.34,1206.38 1283.92,1206.38 1284.51,1206.38 1285.1,1206.38 1285.68,1206.38 1286.27,1206.38 1286.86,1206.38 1287.44,1206.38 1288.03,1206.38 1288.61,1206.38 1289.2,1206.38 1289.79,1206.38 1290.37,1206.38 1290.96,1206.38 1291.55,1206.38 1292.13,1206.38 1292.72,1206.38 1293.31,1206.38 1293.89,1206.38 1294.48,1206.38 1295.06,1206.38 1295.65,1206.38 1296.24,1206.38 1296.82,1206.38 1297.41,1206.38 1298,1206.38 1298.58,1206.38 1299.17,1206.38 1299.76,1206.38 1300.34,1206.38 1300.93,1206.38 1301.52,1206.38 1302.1,1206.38 1302.69,1206.38 1303.27,1206.38 1303.86,1206.38 1304.45,1206.38 1305.03,1206.38 1305.62,1206.38 1306.21,1206.38 1306.79,1206.38 1307.38,1206.38 1307.97,1206.38 1308.55,1206.38 1309.14,1206.38 1309.73,1206.38 1310.31,1206.38 1310.9,1206.38 1311.48,1206.38 1312.07,1206.38 1312.66,1206.38 1313.24,1206.38 1313.83,1206.38 1314.42,1206.38 1315,1206.38 1315.59,1206.38 1316.18,1206.38 1316.76,1206.38 1317.35,1206.38 1317.93,1206.38 1318.52,1206.38 1319.11,1206.38 1319.69,1206.38 1320.28,1206.38 1320.87,1206.38 1321.45,1206.38 1322.04,1206.38 1322.63,1206.38 1323.21,1206.38 1323.8,1206.38 1324.39,1206.38 1324.97,1206.38 1325.56,1206.38 1326.14,1206.38 1326.73,1206.38 1327.32,1206.38 1327.9,1206.38 1328.49,1206.38 1329.08,1206.38 1329.66,1206.38 1330.25,1206.38 1330.84,1206.38 1331.42,1206.38 1332.01,1206.38 1332.6,1206.38 1333.18,1206.38 1333.77,1206.38 1334.35,1206.38 1334.94,1206.38 1335.53,1206.38 1336.11,1206.38 1336.7,1206.38 1337.29,1206.38 1337.87,1206.38 1338.46,1206.38 1339.05,1206.38 1339.63,1206.38 1340.22,1206.38 1340.8,1206.38 1341.39,1206.38 1341.98,1206.38 1342.56,1206.38 1343.15,1206.38 1343.74,1206.38 1344.32,1206.38 1344.91,1206.38 1345.5,1206.38 1346.08,1206.38 1346.67,1206.38 1347.26,1206.38 1347.84,1206.38 1348.43,1206.38 1349.01,1206.38 1349.6,1206.38 1350.19,1206.38 1350.77,1206.38 1351.36,1206.38 1351.95,1206.38 1352.53,1206.38 1353.12,1206.38 1353.71,1206.38 1354.29,1206.38 1354.88,1206.38 1355.47,1206.38 1356.05,1206.38 1356.64,1206.38 1357.22,1206.38 1357.81,1206.38 1358.4,1206.38 1358.98,1206.38 1359.57,1206.38 1360.16,1206.38 1360.74,1206.38 1361.33,1206.38 1361.92,1206.38 1362.5,1206.38 1363.09,1206.38 1363.68,1206.38 1364.26,1206.38 1364.85,1206.38 1365.43,1206.38 1366.02,1206.38 1366.61,1206.38 1367.19,1206.38 1367.78,1206.38 1368.37,1206.38 1368.95,1206.38 1369.54,1206.38 1370.13,1206.38 1370.71,1206.38 1371.3,1206.38 1371.88,1206.38 1372.47,1206.38 1373.06,1206.38 1373.64,1206.38 1374.23,1206.38 1374.82,1206.38 1375.4,1206.38 1375.99,1206.38 1376.58,1206.38 1377.16,1206.38 1377.75,1206.38 1378.34,1206.38 1378.92,1206.38 1379.51,1206.38 1380.09,1206.38 1380.68,1206.38 1381.27,1206.38 1381.85,1206.38 1382.44,1206.38 1383.03,1206.38 1383.61,1206.38 1384.2,1206.38 1384.79,1206.38 1385.37,1206.38 1385.96,1206.38 1386.55,1206.38 1387.13,1206.38 1387.72,1206.38 1388.3,1206.38 1388.89,1206.38 1389.48,1206.38 1390.06,1206.38 1390.65,1206.38 1391.24,1206.38 1391.82,1206.38 1392.41,1206.38 1393,1206.38 1393.58,1206.38 1394.17,1206.38 1394.75,1206.38 1395.34,1206.38 1395.93,1206.38 1396.51,1206.38 1397.1,1206.38 1397.69,1206.38 1398.27,1206.38 1398.86,1206.38 1399.45,1206.38 1400.03,1206.38 1400.62,1206.38 1401.21,1206.38 1401.79,1206.38 1402.38,1206.38 1402.96,1206.38 1403.55,1206.38 1404.14,1206.38 1404.72,1206.38 1405.31,1206.38 1405.9,1206.38 1406.48,1206.38 1407.07,1206.38 1407.66,1206.38 1408.24,1206.38 1408.83,1206.38 1409.42,1206.38 1410,1206.38 1410.59,1206.38 1411.17,1206.38 1411.76,1206.38 1412.35,1206.38 1412.93,1206.38 1413.52,1206.38 1414.11,1206.38 1414.69,1206.38 1415.28,1206.38 1415.87,1206.38 1416.45,1206.38 1417.04,1206.38 1417.63,1206.38 1418.21,1206.38 1418.8,1206.38 1419.38,1206.38 1419.97,1206.38 1420.56,1206.38 1421.14,1206.38 1421.73,1206.38 1422.32,1206.38 1422.9,1206.38 1423.49,1206.38 1424.08,1206.38 1424.66,1206.38 1425.25,1206.38 1425.83,1206.38 1426.42,1206.38 1427.01,1206.38 1427.59,1206.38 1428.18,1206.38 1428.77,1206.38 1429.35,1206.38 1429.94,1206.38 1430.53,1206.38 1431.11,1206.38 1431.7,1206.38 1432.29,1206.38 1432.87,1206.38 1433.46,1206.38 1434.04,1206.38 1434.63,1206.38 1435.22,1206.38 1435.8,1206.38 1436.39,1206.38 1436.98,1206.38 1437.56,1206.38 1438.15,1206.38 1438.74,1206.38 1439.32,1206.38 1439.91,1206.38 1440.5,1206.38 1441.08,1206.38 1441.67,1206.38 1442.25,1206.38 1442.84,1206.38 1443.43,1206.38 1444.01,1206.38 1444.6,1206.38 1445.19,1206.38 1445.77,1206.38 1446.36,1206.38 1446.95,1206.38 1447.53,1206.38 1448.12,1206.38 1448.7,1206.38 1449.29,1206.38 1449.88,1206.38 1450.46,1206.38 1451.05,1206.38 1451.64,1206.38 1452.22,1206.38 1452.81,1206.38 1453.4,1206.38 1453.98,1206.38 1454.57,1206.38 1455.16,1206.38 1455.74,1206.38 1456.33,1206.38 1456.91,1206.38 1457.5,1206.38 1458.09,1206.38 1458.67,1206.38 1459.26,1206.38 1459.85,1206.38 1460.43,1206.38 1461.02,1206.38 1461.61,1206.38 1462.19,1206.38 1462.78,1206.38 1463.37,1206.38 1463.95,1206.38 1464.54,1206.38 1465.12,1206.38 1465.71,1206.38 1466.3,1206.38 1466.88,1206.38 1467.47,1206.38 1468.06,1206.38 1468.64,1206.38 1469.23,1206.38 1469.82,1206.38 1470.4,1206.38 1470.99,1206.38 1471.57,1206.38 1472.16,1206.38 1472.75,1206.38 1473.33,1206.38 1473.92,1206.38 1474.51,1206.38 1475.09,1206.38 1475.68,1206.38 1476.27,1206.38 1476.85,1206.38 1477.44,1206.38 1478.03,1206.38 1478.61,1206.38 1479.2,1206.38 1479.78,1206.38 1480.37,1206.38 1480.96,1206.38 1481.54,1206.38 1482.13,1206.38 1482.72,1206.38 1483.3,1206.38 1483.89,1206.38 1484.48,1206.38 1485.06,1206.38 1485.65,1206.38 1486.24,1206.38 1486.82,1206.38 1487.41,1206.38 1487.99,1206.38 1488.58,1206.38 1489.17,1206.38 1489.75,1206.38 1490.34,1206.38 1490.93,1206.38 1491.51,1206.38 1492.1,1206.38 1492.69,1206.38 1493.27,1206.38 1493.86,1206.38 1494.45,1206.38 1495.03,1206.38 1495.62,1206.38 1496.2,1206.38 1496.79,1206.38 1497.38,1206.38 1497.96,1206.38 1498.55,1206.38 1499.14,1206.38 1499.72,1206.38 1500.31,1206.38 1500.9,1206.38 1501.48,1206.38 1502.07,1206.38 1502.65,1206.38 1503.24,1206.38 1503.83,1206.38 1504.41,1206.38 1505,1206.38 1505.59,1206.38 1506.17,1206.38 1506.76,1206.38 1507.35,1206.38 1507.93,1206.38 1508.52,1206.38 1509.11,1206.38 1509.69,1206.38 1510.28,1206.38 1510.86,1206.38 1511.45,1206.38 1512.04,1206.38 1512.62,1206.38 1513.21,1206.38 1513.8,1206.38 1514.38,1206.38 1514.97,1206.38 1515.56,1206.38 1516.14,1206.38 1516.73,1206.38 1517.32,1206.38 1517.9,1206.38 1518.49,1206.38 1519.07,1206.38 1519.66,1206.38 1520.25,1206.38 1520.83,1206.38 1521.42,1206.38 1522.01,1206.38 1522.59,1206.38 1523.18,1206.38 1523.77,1206.38 1524.35,1206.38 1524.94,1206.38 1525.52,1206.38 1526.11,1206.38 1526.7,1206.38 1527.28,1206.38 1527.87,1206.38 1528.46,1206.38 1529.04,1206.38 1529.63,1206.38 1530.22,1206.38 1530.8,1206.38 1531.39,1206.38 1531.98,1206.38 1532.56,1206.38 1533.15,1206.38 1533.73,1206.38 1534.32,1206.38 1534.91,1206.38 1535.49,1206.38 1536.08,1206.38 1536.67,1206.38 1537.25,1206.38 1537.84,1206.38 1538.43,1206.38 1539.01,1206.38 1539.6,1206.38 1540.19,1206.38 1540.77,1206.38 1541.36,1206.38 1541.94,1206.38 1542.53,1206.38 1543.12,1206.38 1543.7,1206.38 1544.29,1206.38 1544.88,1206.38 1545.46,1206.38 1546.05,1206.38 1546.64,1206.38 1547.22,1206.38 1547.81,1206.38 1548.4,1206.38 1548.98,1206.38 1549.57,1206.38 1550.15,1206.38 1550.74,1206.38 1551.33,1206.38 1551.91,1206.38 1552.5,1206.38 1553.09,1206.38 1553.67,1206.38 1554.26,1206.38 1554.85,1206.38 1555.43,1206.38 1556.02,1206.38 1556.6,1206.38 1557.19,1206.38 1557.78,1206.38 1558.36,1206.38 1558.95,1206.38 1559.54,1206.38 1560.12,1206.38 1560.71,1206.38 1561.3,1206.38 1561.88,1206.38 1562.47,1206.38 1563.06,1206.38 1563.64,1206.38 1564.23,1206.38 1564.81,1206.38 1565.4,1206.38 1565.99,1206.38 1566.57,1206.38 1567.16,1206.38 1567.75,1206.38 1568.33,1206.38 1568.92,1206.38 1569.51,1206.38 1570.09,1206.38 1570.68,1206.38 1571.27,1206.38 1571.85,1206.38 1572.44,1206.38 1573.02,1206.38 1573.61,1206.38 1574.2,1206.38 1574.78,1206.38 1575.37,1206.38 1575.96,1206.38 1576.54,1206.38 1577.13,1206.38 1577.72,1206.38 1578.3,1206.38 1578.89,1206.38 1579.47,1206.38 1580.06,1206.38 1580.65,1206.38 1581.23,1206.38 1581.82,1206.38 1582.41,1206.38 1582.99,1206.38 1583.58,1206.38 1584.17,1206.38 1584.75,1206.38 1585.34,1206.38 1585.93,1206.38 1586.51,1206.38 1587.1,1206.38 1587.68,1206.38 1588.27,1206.38 1588.86,1206.38 1589.44,1206.38 1590.03,1206.38 1590.62,1206.38 1591.2,1206.38 1591.79,1206.38 1592.38,1206.38 1592.96,1206.38 1593.55,1206.38 1594.14,1206.38 1594.72,1206.38 1595.31,1206.38 1595.89,1206.38 1596.48,1206.38 1597.07,1206.38 1597.65,1206.38 1598.24,1206.38 1598.83,1206.38 1599.41,1206.38 1600,1206.38 1600.59,1206.38 1601.17,1206.38 1601.76,1206.38 1602.34,1206.38 1602.93,1206.38 1603.52,1206.38 1604.1,1206.38 1604.69,1206.38 1605.28,1206.38 1605.86,1206.38 1606.45,1206.38 1607.04,1206.38 1607.62,1206.38 1608.21,1206.38 1608.8,1206.38 1609.38,1206.38 1609.97,1206.38 1610.55,1206.38 1611.14,1206.38 1611.73,1206.38 1612.31,1206.38 1612.9,1206.38 1613.49,1206.38 1614.07,1206.38 1614.66,1206.38 1615.25,1206.38 1615.83,1206.38 1616.42,1206.38 1617.01,1206.38 1617.59,1206.38 1618.18,1206.38 1618.76,1206.38 1619.35,1206.38 1619.94,1206.38 1620.52,1206.38 1621.11,1206.38 1621.7,1206.38 1622.28,1206.38 1622.87,1206.38 1623.46,1206.38 1624.04,1206.38 1624.63,1206.38 1625.22,1206.38 1625.8,1206.38 1626.39,1206.38 1626.97,1206.38 1627.56,1206.38 1628.15,1206.38 1628.73,1206.38 1629.32,1206.38 1629.91,1206.38 1630.49,1206.38 1631.08,1206.38 1631.67,1206.38 1632.25,1206.38 1632.84,1206.38 1633.42,1206.38 1634.01,1206.38 1634.6,1206.38 1635.18,1206.38 1635.77,1206.38 1636.36,1206.38 1636.94,1206.38 1637.53,1206.38 1638.12,1206.38 1638.7,1206.38 1639.29,1206.38 1639.88,1206.38 1640.46,1206.38 1641.05,1206.38 1641.63,1206.38 1642.22,1206.38 1642.81,1206.38 1643.39,1206.38 1643.98,1206.38 1644.57,1206.38 1645.15,1206.38 1645.74,1206.38 1646.33,1206.38 1646.91,1206.38 1647.5,1206.38 1648.09,1206.38 1648.67,1206.38 1649.26,1206.38 1649.84,1206.38 1650.43,1206.38 1651.02,1206.38 1651.6,1206.38 1652.19,1206.38 1652.78,1206.38 1653.36,1206.38 1653.95,1206.38 1654.54,1206.38 1655.12,1206.38 1655.71,1206.38 1656.29,1206.38 1656.88,1206.38 1657.47,1206.38 1658.05,1206.38 1658.64,1206.38 1659.23,1206.38 1659.81,1206.38 1660.4,1206.38 1660.99,1206.38 1661.57,1206.38 1662.16,1206.38 1662.75,1206.38 1663.33,1206.38 1663.92,1206.38 1664.5,1206.38 1665.09,1206.38 1665.68,1206.38 1666.26,1206.38 1666.85,1206.38 1667.44,1206.38 1668.02,1206.38 1668.61,1206.38 1669.2,1206.38 1669.78,1206.38 1670.37,1206.38 1670.96,1206.38 1671.54,1206.38 1672.13,1206.38 1672.71,1206.38 1673.3,1206.38 1673.89,1206.38 1674.47,1206.38 1675.06,1206.38 1675.65,1206.38 1676.23,1206.38 1676.82,1206.38 1677.41,1206.38 1677.99,1206.38 1678.58,1206.38 1679.17,1206.38 1679.75,1206.38 1680.34,1206.38 1680.92,1206.38 1681.51,1206.38 1682.1,1206.38 1682.68,1206.38 1683.27,1206.38 1683.86,1206.38 1684.44,1206.38 1685.03,1206.38 1685.62,1206.38 1686.2,1206.38 1686.79,1206.38 1687.37,1206.38 1687.96,1206.38 1688.55,1206.38 1689.13,1206.38 1689.72,1206.38 1690.31,1206.38 1690.89,1206.38 1691.48,1206.38 1692.07,1206.38 1692.65,1206.38 1693.24,1206.38 1693.83,1206.38 1694.41,1206.38 1695,1206.38 1695.58,1206.38 1696.17,1206.38 1696.76,1206.38 1697.34,1206.38 1697.93,1206.38 1698.52,1206.38 1699.1,1206.38 1699.69,1206.38 1700.28,1206.38 1700.86,1206.38 1701.45,1206.38 1702.04,1206.38 1702.62,1206.38 1703.21,1206.38 1703.79,1206.38 1704.38,1206.38 1704.97,1206.38 1705.55,1206.38 1706.14,1206.38 1706.73,1206.38 1707.31,1206.38 1707.9,1206.38 1708.49,1206.38 1709.07,1206.38 1709.66,1206.38 1710.24,1206.38 1710.83,1206.38 1711.42,1206.38 1712,1206.38 1712.59,1206.38 1713.18,1206.38 1713.76,1206.38 1714.35,1206.38 1714.94,1206.38 1715.52,1206.38 1716.11,1206.38 1716.7,1206.38 1717.28,1206.38 1717.87,1206.38 1718.45,1206.38 1719.04,1206.38 1719.63,1206.38 1720.21,1206.38 1720.8,1206.38 1721.39,1206.38 1721.97,1206.38 1722.56,1206.38 1723.15,1206.38 1723.73,1206.38 1724.32,1206.38 1724.91,1206.38 1725.49,1206.38 1726.08,1206.38 1726.66,1206.38 1727.25,1206.38 1727.84,1206.38 1728.42,1206.38 1729.01,1206.38 1729.6,1206.38 1730.18,1206.38 1730.77,1206.38 1731.36,1206.38 1731.94,1206.38 1732.53,1206.38 1733.11,1206.38 1733.7,1206.38 1734.29,1206.38 1734.87,1206.38 1735.46,1206.38 1736.05,1206.38 1736.63,1206.38 1737.22,1206.38 1737.81,1206.38 1738.39,1206.38 1738.98,1206.38 1739.57,1206.38 1740.15,1206.38 1740.74,1206.38 1741.32,1206.38 1741.91,1206.38 1742.5,1206.38 1743.08,1206.38 1743.67,1206.38 1744.26,1206.38 1744.84,1206.38 1745.43,1206.38 1746.02,1206.38 1746.6,1206.38 1747.19,1206.38 1747.78,1206.38 1748.36,1206.38 1748.95,1206.38 1749.53,1206.38 1750.12,1206.38 1750.71,1206.38 1751.29,1206.38 1751.88,1206.38 1752.47,1206.38 1753.05,1206.38 1753.64,1206.38 1754.23,1206.38 1754.81,1206.38 1755.4,1206.38 1755.99,1206.38 1756.57,1206.38 1757.16,1206.38 1757.74,1206.38 1758.33,1206.38 1758.92,1206.38 1759.5,1206.38 1760.09,1206.38 1760.68,1206.38 1761.26,1206.38 1761.85,1206.38 1762.44,1206.38 1763.02,1206.38 1763.61,1206.38 1764.19,1206.38 1764.78,1206.38 1765.37,1206.38 1765.95,1206.38 1766.54,1206.38 1767.13,1206.38 1767.71,1206.38 1768.3,1206.38 1768.89,1206.38 1769.47,1206.38 1770.06,1206.38 1770.65,1206.38 1771.23,1206.38 1771.82,1206.38 1772.4,1206.38 1772.99,1206.38 1773.58,1206.38 1774.16,1206.38 1774.75,1206.38 1775.34,1206.38 1775.92,1206.38 1776.51,1206.38 1777.1,1206.38 1777.68,1206.38 1778.27,1206.38 1778.86,1206.38 1779.44,1206.38 1780.03,1206.38 1780.61,1206.38 1781.2,1206.38 1781.79,1206.38 1782.37,1206.38 1782.96,1206.38 1783.55,1206.38 1784.13,1206.38 1784.72,1206.38 1785.31,1206.38 1785.89,1206.38 1786.48,1206.38 1787.06,1206.38 1787.65,1206.38 1788.24,1206.38 1788.82,1206.38 1789.41,1206.38 1790,1206.38 1790.58,1206.38 1791.17,1206.38 1791.76,1206.38 1792.34,1206.38 1792.93,1206.38 1793.52,1206.38 1794.1,1206.38 1794.69,1206.38 1795.27,1206.38 1795.86,1206.38 1796.45,1206.38 1797.03,1206.38 1797.62,1206.38 1798.21,1206.38 1798.79,1206.38 1799.38,1206.38 1799.97,1206.38 1800.55,1206.38 1801.14,1206.38 1801.73,1206.38 1802.31,1206.38 1802.9,1206.38 1803.48,1206.38 1804.07,1206.38 1804.66,1206.38 1805.24,1206.38 1805.83,1206.38 1806.42,1206.38 1807,1206.38 1807.59,1206.38 1808.18,1206.38 1808.76,1206.38 1809.35,1206.38 1809.94,1206.38 1810.52,1206.38 1811.11,1206.38 1811.69,1206.38 1812.28,1206.38 1812.87,1206.38 1813.45,1206.38 1814.04,1206.38 1814.63,1206.38 1815.21,1206.38 1815.8,1206.38 1816.39,1206.38 1816.97,1206.38 1817.56,1206.38 1818.14,1206.38 1818.73,1206.38 1819.32,1206.38 1819.9,1206.38 1820.49,1206.38 1821.08,1206.38 1821.66,1206.38 1822.25,1206.38 1822.84,1206.38 1823.42,1206.38 1824.01,1206.38 1824.6,1206.38 1825.18,1206.38 1825.77,1206.38 1826.35,1206.38 1826.94,1206.38 1827.53,1206.38 1828.11,1206.38 1828.7,1206.38 1829.29,1206.38 1829.87,1206.38 1830.46,1206.38 1831.05,1206.38 1831.63,1206.38 1832.22,1206.38 1832.81,1206.38 1833.39,1206.38 1833.98,1206.38 1834.56,1206.38 1835.15,1206.38 1835.74,1206.38 1836.32,1206.38 1836.91,1206.38 1837.5,1206.38 1838.08,1206.38 1838.67,1206.38 1839.26,1206.38 1839.84,1206.38 1840.43,1206.38 1841.01,1206.38 1841.6,1206.38 1842.19,1206.38 1842.77,1206.38 1843.36,1206.38 1843.95,1206.38 1844.53,1206.38 1845.12,1206.38 1845.71,1206.38 1846.29,1206.38 1846.88,1206.38 1847.47,1206.38 1848.05,1206.38 1848.64,1206.38 1849.22,1206.38 1849.81,1206.38 1850.4,1206.38 1850.98,1206.38 1851.57,1206.38 1852.16,1206.38 1852.74,1206.38 1853.33,1206.38 1853.92,1206.38 1854.5,1206.38 1855.09,1206.38 1855.68,1206.38 1856.26,1206.38 1856.85,1206.38 1857.43,1206.38 1858.02,1206.38 1858.61,1206.38 1859.19,1206.38 1859.78,1206.38 1860.37,1206.38 1860.95,1206.38 1861.54,1206.38 1862.13,1206.38 1862.71,1206.38 1863.3,1206.38 1863.88,1206.38 1864.47,1206.38 1865.06,1206.38 1865.64,1206.38 1866.23,1206.38 1866.82,1206.38 1867.4,1206.38 1867.99,1206.38 1868.58,1206.38 1869.16,1206.38 1869.75,1206.38 1870.34,1206.38 1870.92,1206.38 1871.51,1206.38 1872.09,1206.38 1872.68,1206.38 1873.27,1206.38 1873.85,1206.38 1874.44,1206.38 1875.03,1206.38 1875.61,1206.38 1876.2,1206.38 1876.79,1206.38 1877.37,1206.38 1877.96,1206.38 1878.55,1206.38 1879.13,1206.38 1879.72,1206.38 1880.3,1206.38 1880.89,1206.38 1881.48,1206.38 1882.06,1206.38 1882.65,1206.38 1883.24,1206.38 1883.82,1206.38 1884.41,1206.38 1885,1206.38 1885.58,1206.38 1886.17,1206.38 1886.76,1206.38 1887.34,1206.38 1887.93,1206.38 1888.51,1206.38 1889.1,1206.38 1889.69,1206.38 1890.27,1206.38 1890.86,1206.38 1891.45,1206.38 1892.03,1206.38 1892.62,1206.38 1893.21,1206.38 1893.79,1206.38 1894.38,1206.38 1894.96,1206.38 1895.55,1206.38 1896.14,1206.38 1896.72,1206.38 1897.31,1206.38 1897.9,1206.38 1898.48,1206.38 1899.07,1206.38 1899.66,1206.38 1900.24,1206.38 1900.83,1206.38 1901.42,1206.38 1902,1206.38 1902.59,1206.38 1903.17,1206.38 1903.76,1206.38 1904.35,1206.38 1904.93,1206.38 1905.52,1206.38 1906.11,1206.38 1906.69,1206.38 1907.28,1206.38 1907.87,1206.38 1908.45,1206.38 1909.04,1206.38 1909.63,1206.38 1910.21,1206.38 1910.8,1206.38 1911.38,1206.38 1911.97,1206.38 1912.56,1206.38 1913.14,1206.38 1913.73,1206.38 1914.32,1206.38 1914.9,1206.38 1915.49,1206.38 1916.08,1206.38 1916.66,1206.38 1917.25,1206.38 1917.83,1206.38 1918.42,1206.38 1919.01,1206.38 1919.59,1206.38 1920.18,1206.38 1920.77,1206.38 1921.35,1206.38 1921.94,1206.38 1922.53,1206.38 1923.11,1206.38 1923.7,1206.38 1924.29,1206.38 1924.87,1206.38 1925.46,1206.38 1926.04,1206.38 1926.63,1206.38 1927.22,1206.38 1927.8,1206.38 1928.39,1206.38 1928.98,1206.38 1929.56,1206.38 1930.15,1206.38 1930.74,1206.38 1931.32,1206.38 1931.91,1206.38 1932.5,1206.38 1933.08,1206.38 1933.67,1206.38 1934.25,1206.38 1934.84,1206.38 1935.43,1206.38 1936.01,1206.38 1936.6,1206.38 1937.19,1206.38 1937.77,1206.38 1938.36,1206.38 1938.95,1206.38 1939.53,1206.38 1940.12,1206.38 1940.71,1206.38 1941.29,1206.38 1941.88,1206.38 1942.46,1206.38 1943.05,1206.38 1943.64,1206.38 1944.22,1206.38 1944.81,1206.38 1945.4,1206.38 1945.98,1206.38 1946.57,1206.38 1947.16,1206.38 1947.74,1206.38 1948.33,1206.38 1948.91,1206.38 1949.5,1206.38 1950.09,1206.38 1950.67,1206.38 1951.26,1206.38 1951.85,1206.38 1952.43,1206.38 1953.02,1206.38 1953.61,1206.38 1954.19,1206.38 1954.78,1206.38 1955.37,1206.38 1955.95,1206.38 1956.54,1206.38 1957.12,1206.38 1957.71,1206.38 1958.3,1206.38 1958.88,1206.38 1959.47,1206.38 1960.06,1206.38 1960.64,1206.38 1961.23,1206.38 1961.82,1206.38 1962.4,1206.38 1962.99,1206.38 1963.58,1206.38 1964.16,1206.38 1964.75,1206.38 1965.33,1206.38 1965.92,1206.38 1966.51,1206.38 1967.09,1206.38 1967.68,1206.38 1968.27,1206.38 1968.85,1206.38 1969.44,1206.38 1970.03,1206.38 1970.61,1206.38 1971.2,1206.38 1971.78,1206.38 1972.37,1206.38 1972.96,1206.38 1973.54,1206.38 1974.13,1206.38 1974.72,1206.38 1975.3,1206.38 1975.89,1206.38 1976.48,1206.38 1977.06,1206.38 1977.65,1206.38 1978.24,1206.38 1978.82,1206.38 1979.41,1206.38 1979.99,1206.38 1980.58,1206.38 1981.17,1206.38 1981.75,1206.38 1982.34,1206.38 1982.93,1206.38 1983.51,1206.38 1984.1,1206.38 1984.69,1206.38 1985.27,1206.38 1985.86,1206.38 1986.45,1206.38 1987.03,1206.38 1987.62,1206.38 1988.2,1206.38 1988.79,1206.38 1989.38,1206.38 1989.96,1206.38 1990.55,1206.38 1991.14,1206.38 1991.72,1206.38 1992.31,1206.38 1992.9,1206.38 1993.48,1206.38 1994.07,1206.38 1994.65,1206.38 1995.24,1206.38 1995.83,1206.38 1996.41,1206.38 1997,1206.38 1997.59,1206.38 1998.17,1206.38 1998.76,1206.38 1999.35,1206.38 1999.93,1206.38 2000.52,1206.38 2001.11,1206.38 2001.69,1206.38 2002.28,1206.38 2002.86,1206.38 2003.45,1206.38 2004.04,1206.38 2004.62,1206.38 2005.21,1206.38 2005.8,1206.38 2006.38,1206.38 2006.97,1206.38 2007.56,1206.38 2008.14,1206.38 2008.73,1206.38 2009.32,1206.38 2009.9,1206.38 2010.49,1206.38 2011.07,1206.38 2011.66,1206.38 2012.25,1206.38 2012.83,1206.38 2013.42,1206.38 2014.01,1206.38 2014.59,1206.38 2015.18,1206.38 2015.77,1206.38 2016.35,1206.38 2016.94,1206.38 2017.53,1206.38 2018.11,1206.38 2018.7,1206.38 2019.28,1206.38 2019.87,1206.38 2020.46,1206.38 2021.04,1206.38 2021.63,1206.38 2022.22,1206.38 2022.8,1206.38 2023.39,1206.38 2023.98,1206.38 2024.56,1206.38 2025.15,1206.38 2025.73,1206.38 2026.32,1206.38 2026.91,1206.38 2027.49,1206.38 2028.08,1206.38 2028.67,1206.38 2029.25,1206.38 2029.84,1206.38 2030.43,1206.38 2031.01,1206.38 2031.6,1206.38 2032.19,1206.38 2032.77,1206.38 2033.36,1206.38 2033.94,1206.38 2034.53,1206.38 2035.12,1206.38 2035.7,1206.38 2036.29,1206.38 2036.88,1206.38 2037.46,1206.38 2038.05,1206.38 2038.64,1206.38 2039.22,1206.38 2039.81,1206.38 2040.4,1206.38 2040.98,1206.38 2041.57,1206.38 2042.15,1206.38 2042.74,1206.38 2043.33,1206.38 2043.91,1206.38 2044.5,1206.38 2045.09,1206.38 2045.67,1206.38 2046.26,1206.38 2046.85,1206.38 2047.43,1206.38 2048.02,1206.38 2048.6,1206.38 2049.19,1206.38 2049.78,1206.38 2050.36,1206.38 2050.95,1206.38 2051.54,1206.38 2052.12,1206.38 2052.71,1206.38 2053.3,1206.38 2053.88,1206.38 2054.47,1206.38 2055.06,1206.38 2055.64,1206.38 2056.23,1206.38 2056.81,1206.38 2057.4,1206.38 2057.99,1206.38 2058.57,1206.38 2059.16,1206.38 2059.75,1206.38 2060.33,1206.38 2060.92,1206.38 2061.51,1206.38 2062.09,1206.38 2062.68,1206.38 2063.27,1206.38 2063.85,1206.38 2064.44,1206.38 2065.02,1206.38 2065.61,1206.38 2066.2,1206.38 2066.78,1206.38 2067.37,1206.38 2067.96,1206.38 2068.54,1206.38 2069.13,1206.38 2069.72,1206.38 2070.3,1206.38 2070.89,1206.38 2071.48,1206.38 2072.06,1206.38 2072.65,1206.38 2073.23,1206.38 2073.82,1206.38 2074.41,1206.38 2074.99,1206.38 2075.58,1206.38 2076.17,1206.38 2076.75,1206.38 2077.34,1206.38 2077.93,1206.38 2078.51,1206.38 2079.1,1206.38 2079.68,1206.38 2080.27,1206.38 2080.86,1206.38 2081.44,1206.38 2082.03,1206.38 2082.62,1206.38 2083.2,1206.38 2083.79,1206.38 2084.38,1206.38 2084.96,1206.38 2085.55,1206.38 2086.14,1206.38 2086.72,1206.38 2087.31,1206.38 2087.89,1206.38 2088.48,1206.38 2089.07,1206.38 2089.65,1206.38 2090.24,1206.38 2090.83,1206.38 2091.41,1206.38 2092,1206.38 2092.59,1206.38 2093.17,1206.38 2093.76,1206.38 2094.35,1206.38 2094.93,1206.38 2095.52,1206.38 2096.1,1206.38 2096.69,1206.38 2097.28,1206.38 2097.86,1206.38 2098.45,1206.38 2099.04,1206.38 2099.62,1206.38 2100.21,1206.38 2100.8,1206.38 2101.38,1206.38 2101.97,1206.38 2102.55,1206.38 2103.14,1206.38 2103.73,1206.38 2104.31,1206.38 2104.9,1206.38 2105.49,1206.38 2106.07,1206.38 2106.66,1206.38 2107.25,1206.38 2107.83,1206.38 2108.42,1206.38 2109.01,1206.38 2109.59,1206.38 2110.18,1206.38 2110.76,1206.38 2111.35,1206.38 2111.94,1206.38 2112.52,1206.38 2113.11,1206.38 2113.7,1206.38 2114.28,1206.38 2114.87,1206.38 2115.46,1206.38 2116.04,1206.38 2116.63,1206.38 2117.22,1206.38 2117.8,1206.38 2118.39,1206.38 2118.97,1206.38 2119.56,1206.38 2120.15,1206.38 2120.73,1206.38 2121.32,1206.38 2121.91,1206.38 2122.49,1206.38 2123.08,1206.38 2123.67,1206.38 2124.25,1206.38 2124.84,1206.38 2125.42,1206.38 2126.01,1206.38 2126.6,1206.38 2127.18,1206.38 2127.77,1206.38 2128.36,1206.38 2128.94,1206.38 2129.53,1206.38 2130.12,1206.38 2130.7,1206.38 2131.29,1206.38 2131.88,1206.38 2132.46,1206.38 2133.05,1206.38 2133.63,1206.38 2134.22,1206.38 2134.81,1206.38 2135.39,1206.38 2135.98,1206.38 2136.57,1206.38 2137.15,1206.38 2137.74,1206.38 2138.33,1206.38 2138.91,1206.38 2139.5,1206.38 2140.09,1206.38 2140.67,1206.38 2141.26,1206.38 2141.84,1206.38 2142.43,1206.38 2143.02,1206.38 2143.6,1206.38 2144.19,1206.38 2144.78,1206.38 2145.36,1206.38 2145.95,1206.38 2146.54,1206.38 2147.12,1206.38 2147.71,1206.38 2148.3,1206.38 2148.88,1206.38 2149.47,1206.38 2150.05,1206.38 2150.64,1206.38 2151.23,1206.38 2151.81,1206.38 2152.4,1206.38 2152.99,1206.38 2153.57,1206.38 2154.16,1206.38 2154.75,1206.38 2155.33,1206.38 2155.92,1206.38 2156.5,1206.38 2157.09,1206.38 2157.68,1206.38 2158.26,1206.38 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1206.14 L986.612 1206.14 L987.198 1206.14 L987.785 1206.14 L988.371 1206.14 L988.957 1206.14 L989.544 1206.14 L990.13 1206.14 L990.717 1206.14 L991.303 1206.14 L991.889 1206.14 L992.476 1206.14 L993.062 1206.14 L993.649 1206.14 L994.235 1206.14 L994.822 1206.14 L995.408 1206.14 L995.994 1206.14 L996.581 1206.14 L997.167 1206.14 L997.754 1206.14 L998.34 1206.14 L998.926 1206.14 L999.513 1206.14 L1000.1 1206.14 L1000.69 1206.14 L1001.27 1206.14 L1001.86 1206.14 L1002.44 1206.14 L1003.03 1206.14 L1003.62 1206.14 L1004.2 1206.14 L1004.79 1206.14 L1005.38 1206.14 L1005.96 1206.14 L1006.55 1206.14 L1007.14 1206.14 L1007.72 1206.14 L1008.31 1206.14 L1008.9 1206.14 L1009.48 1206.14 L1010.07 1206.14 L1010.65 1206.14 L1011.24 1206.14 L1011.83 1206.14 L1012.41 1206.14 L1013 1206.14 L1013.59 1206.14 L1014.17 1206.14 L1014.76 1206.14 L1015.35 1206.14 L1015.93 1206.14 L1016.52 1206.14 L1017.11 1206.14 L1017.69 1206.14 L1018.28 1206.14 L1018.86 1206.14 L1019.45 1206.14 L1020.04 1206.14 L1020.62 1206.14 L1021.21 1206.14 L1021.8 1206.14 L1022.38 1206.14 L1022.97 1206.14 L1023.56 1206.14 L1024.14 1206.14 L1024.73 1206.14 L1025.32 1206.14 L1025.9 1206.14 L1026.49 1206.14 L1027.07 1206.14 L1027.66 1206.14 L1028.25 1206.14 L1028.83 1206.14 L1029.42 1206.14 L1030.01 1206.14 L1030.59 1206.14 L1031.18 1206.14 L1031.77 1206.14 L1032.35 1206.14 L1032.94 1206.14 L1033.52 1206.14 L1034.11 1206.14 L1034.7 1206.14 L1035.28 1206.14 L1035.87 1206.14 L1036.46 1206.14 L1037.04 1206.14 L1037.63 1206.14 L1038.22 1206.14 L1038.8 1206.14 L1039.39 1206.14 L1039.98 1206.14 L1040.56 1206.14 L1041.15 1206.14 L1041.73 1206.14 L1042.32 1206.14 L1042.91 1206.14 L1043.49 1206.14 L1044.08 1206.14 L1044.67 1206.14 L1045.25 1206.14 L1045.84 1206.14 L1046.43 1206.14 L1047.01 1206.14 L1047.6 1206.14 L1048.19 1206.14 L1048.77 1206.14 L1049.36 1206.14 L1049.94 1206.14 L1050.53 1206.14 L1051.12 1206.14 L1051.7 1206.14 L1052.29 1206.14 L1052.88 1206.14 L1053.46 1206.14 L1054.05 1206.14 L1054.64 1206.14 L1055.22 1206.14 L1055.81 1206.14 L1056.39 1206.14 L1056.98 1206.14 L1057.57 1206.14 L1058.15 1206.14 L1058.74 1206.14 L1059.33 1206.14 L1059.91 1206.14 L1060.5 1206.14 L1061.09 1206.14 L1061.67 1206.14 L1062.26 1206.14 L1062.85 1206.14 L1063.43 1206.14 L1064.02 1206.14 L1064.6 1206.14 L1065.19 1206.14 L1065.78 1206.14 L1066.36 1206.14 L1066.95 1206.14 L1067.54 1206.14 L1068.12 1206.14 L1068.71 1206.14 L1069.3 1206.14 L1069.88 1206.14 L1070.47 1206.14 L1071.06 1206.14 L1071.64 1206.14 L1072.23 1206.14 L1072.81 1206.14 L1073.4 1206.14 L1073.99 1206.14 L1074.57 1206.14 L1075.16 1206.14 L1075.75 1206.14 L1076.33 1206.14 L1076.92 1206.14 L1077.51 1206.14 L1078.09 1206.14 L1078.68 1206.14 L1079.26 1206.14 L1079.85 1206.14 L1080.44 1206.14 L1081.02 1206.14 L1081.61 1206.14 L1082.2 1206.14 L1082.78 1206.14 L1083.37 1206.14 L1083.96 1206.14 L1084.54 1206.14 L1085.13 1206.14 L1085.72 1206.14 L1086.3 1206.14 L1086.89 1206.14 L1087.47 1206.14 L1088.06 1206.14 L1088.65 1206.14 L1089.23 1206.14 L1089.82 1206.14 L1090.41 1206.14 L1090.99 1206.14 L1091.58 1206.14 L1092.17 1206.14 L1092.75 1206.14 L1093.34 1206.14 L1093.93 1206.14 L1094.51 1206.14 L1095.1 1206.14 L1095.68 1206.14 L1096.27 1206.14 L1096.86 1206.14 L1097.44 1206.14 L1098.03 1206.14 L1098.62 1206.14 L1099.2 1206.14 L1099.79 1206.14 L1100.38 1206.14 L1100.96 1206.14 L1101.55 1206.14 L1102.14 1206.14 L1102.72 1206.14 L1103.31 1206.14 L1103.89 1206.14 L1104.48 1206.14 L1105.07 1206.14 L1105.65 1206.14 L1106.24 1206.14 L1106.83 1206.14 L1107.41 1206.14 L1108 1206.14 L1108.59 1206.14 L1109.17 1206.14 L1109.76 1206.14 L1110.34 1206.14 L1110.93 1206.14 L1111.52 1206.14 L1112.1 1206.14 L1112.69 1206.14 L1113.28 1206.14 L1113.86 1206.14 L1114.45 1206.14 L1115.04 1206.14 L1115.62 1206.14 L1116.21 1206.14 L1116.8 1206.14 L1117.38 1206.14 L1117.97 1206.14 L1118.55 1206.14 L1119.14 1206.14 L1119.73 1206.14 L1120.31 1206.14 L1120.9 1206.14 L1121.49 1206.14 L1122.07 1206.14 L1122.66 1206.14 L1123.25 1206.14 L1123.83 1206.14 L1124.42 1206.14 L1125.01 1206.14 L1125.59 1206.14 L1126.18 1206.14 L1126.76 1206.14 L1127.35 1206.14 L1127.94 1206.14 L1128.52 1206.14 L1129.11 1206.14 L1129.7 1206.14 L1130.28 1206.14 L1130.87 1206.14 L1131.46 1206.14 L1132.04 1206.14 L1132.63 1206.14 L1133.21 1206.14 L1133.8 1206.14 L1134.39 1206.14 L1134.97 1206.14 L1135.56 1206.14 L1136.15 1206.14 L1136.73 1206.14 L1137.32 1206.14 L1137.91 1206.14 L1138.49 1206.14 L1139.08 1206.14 L1139.67 1206.14 L1140.25 1206.14 L1140.84 1206.14 L1141.42 1206.14 L1142.01 1206.14 L1142.6 1206.14 L1143.18 1206.14 L1143.77 1206.14 L1144.36 1206.14 L1144.94 1206.14 L1145.53 1206.14 L1146.12 1206.14 L1146.7 1206.14 L1147.29 1206.14 L1147.88 1206.14 L1148.46 1206.14 L1149.05 1206.14 L1149.63 1206.14 L1150.22 1206.14 L1150.81 1206.14 L1151.39 1206.14 L1151.98 1206.14 L1152.57 1206.14 L1153.15 1206.14 L1153.74 1206.14 L1154.33 1206.14 L1154.91 1206.14 L1155.5 1206.14 L1156.09 1206.14 L1156.67 1206.14 L1157.26 1206.14 L1157.84 1206.14 L1158.43 1206.14 L1159.02 1206.14 L1159.6 1206.14 L1160.19 1206.14 L1160.78 1206.14 L1161.36 1206.14 L1161.95 1206.14 L1162.54 1206.14 L1163.12 1206.14 L1163.71 1206.14 L1164.29 1206.14 L1164.88 1206.14 L1165.47 1206.14 L1166.05 1206.14 L1166.64 1206.14 L1167.23 1206.14 L1167.81 1206.14 L1168.4 1206.14 L1168.99 1206.14 L1169.57 1206.14 L1170.16 1206.14 L1170.75 1206.14 L1171.33 1206.14 L1171.92 1206.14 L1172.5 1206.14 L1173.09 1206.14 L1173.68 1206.14 L1174.26 1206.14 L1174.85 1206.14 L1175.44 1206.14 L1176.02 1206.14 L1176.61 1206.14 L1177.2 1206.14 L1177.78 1206.14 L1178.37 1206.14 L1178.96 1206.14 L1179.54 1206.14 L1180.13 1206.14 L1180.71 1206.14 L1181.3 1206.14 L1181.89 1206.14 L1182.47 1206.14 L1183.06 1206.14 L1183.65 1206.14 L1184.23 1206.14 L1184.82 1206.14 L1185.41 1206.14 L1185.99 1206.14 L1186.58 1206.14 L1187.16 1206.14 L1187.75 1206.14 L1188.34 1206.14 L1188.92 1206.14 L1189.51 1206.14 L1190.1 1206.14 L1190.68 1206.14 L1191.27 1206.14 L1191.86 1206.14 L1192.44 1206.14 L1193.03 1206.14 L1193.62 1206.14 L1194.2 1206.14 L1194.79 1206.14 L1195.37 1206.14 L1195.96 1206.14 L1196.55 1206.14 L1197.13 1206.14 L1197.72 1206.14 L1198.31 1206.14 L1198.89 1206.14 L1199.48 1206.14 L1200.07 1206.14 L1200.65 1206.14 L1201.24 1206.14 L1201.83 1206.14 L1202.41 1206.14 L1203 1206.14 L1203.58 1206.14 L1204.17 1206.14 L1204.76 1206.14 L1205.34 1206.14 L1205.93 1206.14 L1206.52 1206.14 L1207.1 1206.14 L1207.69 1206.14 L1208.28 1206.14 L1208.86 1206.14 L1209.45 1206.14 L1210.03 1206.14 L1210.62 1206.14 L1211.21 1206.14 L1211.79 1206.14 L1212.38 1206.14 L1212.97 1206.14 L1213.55 1206.14 L1214.14 1206.14 L1214.73 1206.14 L1215.31 1206.14 L1215.9 1206.14 L1216.49 1206.14 L1217.07 1206.14 L1217.66 1206.14 L1218.24 1206.14 L1218.83 1206.14 L1219.42 1206.14 L1220 1206.14 L1220.59 1206.14 L1221.18 1206.14 L1221.76 1206.14 L1222.35 1206.14 L1222.94 1206.14 L1223.52 1206.14 L1224.11 1206.14 L1224.7 1206.14 L1225.28 1206.14 L1225.87 1206.14 L1226.45 1206.14 L1227.04 1206.14 L1227.63 1206.14 L1228.21 1206.14 L1228.8 1206.14 L1229.39 1206.14 L1229.97 1206.14 L1230.56 1206.14 L1231.15 1206.14 L1231.73 1206.14 L1232.32 1206.14 L1232.91 1206.14 L1233.49 1206.14 L1234.08 1206.14 L1234.66 1206.14 L1235.25 1206.14 L1235.84 1206.14 L1236.42 1206.14 L1237.01 1206.14 L1237.6 1206.14 L1238.18 1206.14 L1238.77 1206.14 L1239.36 1206.14 L1239.94 1206.14 L1240.53 1206.14 L1241.11 1206.14 L1241.7 1206.14 L1242.29 1206.14 L1242.87 1206.14 L1243.46 1206.14 L1244.05 1206.14 L1244.63 1206.14 L1245.22 1206.14 L1245.81 1206.14 L1246.39 1206.14 L1246.98 1206.14 L1247.57 1206.14 L1248.15 1206.14 L1248.74 1206.14 L1249.32 1206.14 L1249.91 1206.14 L1250.5 1206.14 L1251.08 1206.14 L1251.67 1206.14 L1252.26 1206.14 L1252.84 1206.14 L1253.43 1206.14 L1254.02 1206.14 L1254.6 1206.14 L1255.19 1206.14 L1255.78 1206.14 L1256.36 1206.14 L1256.95 1206.14 L1257.53 1206.14 L1258.12 1206.14 L1258.71 1206.14 L1259.29 1206.14 L1259.88 1206.14 L1260.47 1206.14 L1261.05 1206.14 L1261.64 1206.14 L1262.23 1206.14 L1262.81 1206.14 L1263.4 1206.14 L1263.98 1206.14 L1264.57 1206.14 L1265.16 1206.14 L1265.74 1206.14 L1266.33 1206.14 L1266.92 1206.14 L1267.5 1206.14 L1268.09 1206.14 L1268.68 1206.14 L1269.26 1206.14 L1269.85 1206.14 L1270.44 1206.14 L1271.02 1206.14 L1271.61 1206.14 L1272.19 1206.14 L1272.78 1206.14 L1273.37 1206.14 L1273.95 1206.14 L1274.54 1206.14 L1275.13 1206.14 L1275.71 1206.14 L1276.3 1206.14 L1276.89 1206.14 L1277.47 1206.14 L1278.06 1206.14 L1278.65 1206.14 L1279.23 1206.14 L1279.82 1206.14 L1280.4 1206.14 L1280.99 1206.14 L1281.58 1206.14 L1282.16 1206.14 L1282.75 1206.14 L1283.34 1206.14 L1283.92 1206.14 L1284.51 1206.14 L1285.1 1206.14 L1285.68 1206.14 L1286.27 1206.14 L1286.86 1206.14 L1287.44 1206.14 L1288.03 1206.14 L1288.61 1206.14 L1289.2 1206.14 L1289.79 1206.14 L1290.37 1206.14 L1290.96 1206.14 L1291.55 1206.14 L1292.13 1206.14 L1292.72 1206.14 L1293.31 1206.14 L1293.89 1206.14 L1294.48 1206.14 L1295.06 1206.14 L1295.65 1206.14 L1296.24 1206.14 L1296.82 1206.14 L1297.41 1206.14 L1298 1206.14 L1298.58 1206.14 L1299.17 1206.14 L1299.76 1206.14 L1300.34 1206.14 L1300.93 1206.14 L1301.52 1206.14 L1302.1 1206.14 L1302.69 1206.14 L1303.27 1206.14 L1303.86 1206.14 L1304.45 1206.14 L1305.03 1206.14 L1305.62 1206.14 L1306.21 1206.14 L1306.79 1206.14 L1307.38 1206.14 L1307.97 1206.14 L1308.55 1206.14 L1309.14 1206.14 L1309.73 1206.14 L1310.31 1206.14 L1310.9 1206.14 L1311.48 1206.14 L1312.07 1206.14 L1312.66 1206.14 L1313.24 1206.14 L1313.83 1206.14 L1314.42 1206.14 L1315 1206.14 L1315.59 1206.14 L1316.18 1206.14 L1316.76 1206.14 L1317.35 1206.14 L1317.93 1206.14 L1318.52 1206.14 L1319.11 1206.14 L1319.69 1206.14 L1320.28 1206.14 L1320.87 1206.14 L1321.45 1206.14 L1322.04 1206.14 L1322.63 1206.14 L1323.21 1206.14 L1323.8 1206.14 L1324.39 1206.14 L1324.97 1206.14 L1325.56 1206.14 L1326.14 1206.14 L1326.73 1206.14 L1327.32 1206.14 L1327.9 1206.14 L1328.49 1206.14 L1329.08 1206.14 L1329.66 1206.14 L1330.25 1206.14 L1330.84 1206.14 L1331.42 1206.14 L1332.01 1206.14 L1332.6 1206.14 L1333.18 1206.14 L1333.77 1206.14 L1334.35 1206.14 L1334.94 1206.14 L1335.53 1206.14 L1336.11 1206.14 L1336.7 1206.14 L1337.29 1206.14 L1337.87 1206.14 L1338.46 1206.14 L1339.05 1206.14 L1339.63 1206.14 L1340.22 1206.14 L1340.8 1206.14 L1341.39 1206.14 L1341.98 1206.14 L1342.56 1206.14 L1343.15 1206.14 L1343.74 1206.14 L1344.32 1206.14 L1344.91 1206.14 L1345.5 1206.14 L1346.08 1206.14 L1346.67 1206.14 L1347.26 1206.14 L1347.84 1206.14 L1348.43 1206.14 L1349.01 1206.14 L1349.6 1206.14 L1350.19 1206.14 L1350.77 1206.14 L1351.36 1206.14 L1351.95 1206.14 L1352.53 1206.14 L1353.12 1206.14 L1353.71 1206.14 L1354.29 1206.14 L1354.88 1206.14 L1355.47 1206.14 L1356.05 1206.14 L1356.64 1206.14 L1357.22 1206.14 L1357.81 1206.14 L1358.4 1206.14 L1358.98 1206.14 L1359.57 1206.14 L1360.16 1206.14 L1360.74 1206.14 L1361.33 1206.14 L1361.92 1206.14 L1362.5 1206.14 L1363.09 1206.14 L1363.68 1206.14 L1364.26 1206.14 L1364.85 1206.14 L1365.43 1206.14 L1366.02 1206.14 L1366.61 1206.14 L1367.19 1206.14 L1367.78 1206.14 L1368.37 1206.14 L1368.95 1206.14 L1369.54 1206.14 L1370.13 1206.14 L1370.71 1206.14 L1371.3 1206.14 L1371.88 1206.14 L1372.47 1206.14 L1373.06 1206.14 L1373.64 1206.14 L1374.23 1206.14 L1374.82 1206.14 L1375.4 1206.14 L1375.99 1206.14 L1376.58 1206.14 L1377.16 1206.14 L1377.75 1206.14 L1378.34 1206.14 L1378.92 1206.14 L1379.51 1206.14 L1380.09 1206.14 L1380.68 1206.14 L1381.27 1206.14 L1381.85 1206.14 L1382.44 1206.14 L1383.03 1206.14 L1383.61 1206.14 L1384.2 1206.14 L1384.79 1206.14 L1385.37 1206.14 L1385.96 1206.14 L1386.55 1206.14 L1387.13 1206.14 L1387.72 1206.14 L1388.3 1206.14 L1388.89 1206.14 L1389.48 1206.14 L1390.06 1206.14 L1390.65 1206.14 L1391.24 1206.14 L1391.82 1206.14 L1392.41 1206.14 L1393 1206.14 L1393.58 1206.14 L1394.17 1206.14 L1394.75 1206.14 L1395.34 1206.14 L1395.93 1206.14 L1396.51 1206.14 L1397.1 1206.14 L1397.69 1206.14 L1398.27 1206.14 L1398.86 1206.14 L1399.45 1206.14 L1400.03 1206.14 L1400.62 1206.14 L1401.21 1206.14 L1401.79 1206.14 L1402.38 1206.14 L1402.96 1206.14 L1403.55 1206.14 L1404.14 1206.14 L1404.72 1206.14 L1405.31 1206.14 L1405.9 1206.14 L1406.48 1206.14 L1407.07 1206.14 L1407.66 1206.14 L1408.24 1206.14 L1408.83 1206.14 L1409.42 1206.14 L1410 1206.14 L1410.59 1206.14 L1411.17 1206.14 L1411.76 1206.14 L1412.35 1206.14 L1412.93 1206.14 L1413.52 1206.14 L1414.11 1206.14 L1414.69 1206.14 L1415.28 1206.14 L1415.87 1206.14 L1416.45 1206.14 L1417.04 1206.14 L1417.63 1206.14 L1418.21 1206.14 L1418.8 1206.14 L1419.38 1206.14 L1419.97 1206.14 L1420.56 1206.14 L1421.14 1206.14 L1421.73 1206.14 L1422.32 1206.14 L1422.9 1206.14 L1423.49 1206.14 L1424.08 1206.14 L1424.66 1206.14 L1425.25 1206.14 L1425.83 1206.14 L1426.42 1206.14 L1427.01 1206.14 L1427.59 1206.14 L1428.18 1206.14 L1428.77 1206.14 L1429.35 1206.14 L1429.94 1206.14 L1430.53 1206.14 L1431.11 1206.14 L1431.7 1206.14 L1432.29 1206.14 L1432.87 1206.14 L1433.46 1206.14 L1434.04 1206.14 L1434.63 1206.14 L1435.22 1206.14 L1435.8 1206.14 L1436.39 1206.14 L1436.98 1206.14 L1437.56 1206.14 L1438.15 1206.14 L1438.74 1206.14 L1439.32 1206.14 L1439.91 1206.14 L1440.5 1206.14 L1441.08 1206.14 L1441.67 1206.14 L1442.25 1206.14 L1442.84 1206.14 L1443.43 1206.14 L1444.01 1206.14 L1444.6 1206.14 L1445.19 1206.14 L1445.77 1206.14 L1446.36 1206.14 L1446.95 1206.14 L1447.53 1206.14 L1448.12 1206.14 L1448.7 1206.14 L1449.29 1206.14 L1449.88 1206.14 L1450.46 1206.14 L1451.05 1206.14 L1451.64 1206.14 L1452.22 1206.14 L1452.81 1206.14 L1453.4 1206.14 L1453.98 1206.14 L1454.57 1206.14 L1455.16 1206.14 L1455.74 1206.14 L1456.33 1206.14 L1456.91 1206.14 L1457.5 1206.14 L1458.09 1206.14 L1458.67 1206.14 L1459.26 1206.14 L1459.85 1206.14 L1460.43 1206.14 L1461.02 1206.14 L1461.61 1206.14 L1462.19 1206.14 L1462.78 1206.14 L1463.37 1206.14 L1463.95 1206.14 L1464.54 1206.14 L1465.12 1206.14 L1465.71 1206.14 L1466.3 1206.14 L1466.88 1206.14 L1467.47 1206.14 L1468.06 1206.14 L1468.64 1206.14 L1469.23 1206.14 L1469.82 1206.14 L1470.4 1206.14 L1470.99 1206.14 L1471.57 1206.14 L1472.16 1206.14 L1472.75 1206.14 L1473.33 1206.14 L1473.92 1206.14 L1474.51 1206.14 L1475.09 1206.14 L1475.68 1206.14 L1476.27 1206.14 L1476.85 1206.14 L1477.44 1206.14 L1478.03 1206.14 L1478.61 1206.14 L1479.2 1206.14 L1479.78 1206.14 L1480.37 1206.14 L1480.96 1206.14 L1481.54 1206.14 L1482.13 1206.14 L1482.72 1206.14 L1483.3 1206.14 L1483.89 1206.14 L1484.48 1206.14 L1485.06 1206.14 L1485.65 1206.14 L1486.24 1206.14 L1486.82 1206.14 L1487.41 1206.14 L1487.99 1206.14 L1488.58 1206.14 L1489.17 1206.14 L1489.75 1206.14 L1490.34 1206.14 L1490.93 1206.14 L1491.51 1206.14 L1492.1 1206.14 L1492.69 1206.14 L1493.27 1206.14 L1493.86 1206.14 L1494.45 1206.14 L1495.03 1206.14 L1495.62 1206.14 L1496.2 1206.14 L1496.79 1206.14 L1497.38 1206.14 L1497.96 1206.14 L1498.55 1206.14 L1499.14 1206.14 L1499.72 1206.14 L1500.31 1206.14 L1500.9 1206.14 L1501.48 1206.14 L1502.07 1206.14 L1502.65 1206.14 L1503.24 1206.14 L1503.83 1206.14 L1504.41 1206.14 L1505 1206.14 L1505.59 1206.14 L1506.17 1206.14 L1506.76 1206.14 L1507.35 1206.14 L1507.93 1206.14 L1508.52 1206.14 L1509.11 1206.14 L1509.69 1206.14 L1510.28 1206.14 L1510.86 1206.14 L1511.45 1206.14 L1512.04 1206.14 L1512.62 1206.14 L1513.21 1206.14 L1513.8 1206.14 L1514.38 1206.14 L1514.97 1206.14 L1515.56 1206.14 L1516.14 1206.14 L1516.73 1206.14 L1517.32 1206.14 L1517.9 1206.14 L1518.49 1206.14 L1519.07 1206.14 L1519.66 1206.14 L1520.25 1206.14 L1520.83 1206.14 L1521.42 1206.14 L1522.01 1206.14 L1522.59 1206.14 L1523.18 1206.14 L1523.77 1206.14 L1524.35 1206.14 L1524.94 1206.14 L1525.52 1206.14 L1526.11 1206.14 L1526.7 1206.14 L1527.28 1206.14 L1527.87 1206.14 L1528.46 1206.14 L1529.04 1206.14 L1529.63 1206.14 L1530.22 1206.14 L1530.8 1206.14 L1531.39 1206.14 L1531.98 1206.14 L1532.56 1206.14 L1533.15 1206.14 L1533.73 1206.14 L1534.32 1206.14 L1534.91 1206.14 L1535.49 1206.14 L1536.08 1206.14 L1536.67 1206.14 L1537.25 1206.14 L1537.84 1206.14 L1538.43 1206.14 L1539.01 1206.14 L1539.6 1206.14 L1540.19 1206.14 L1540.77 1206.14 L1541.36 1206.14 L1541.94 1206.14 L1542.53 1206.14 L1543.12 1206.14 L1543.7 1206.14 L1544.29 1206.14 L1544.88 1206.14 L1545.46 1206.14 L1546.05 1206.14 L1546.64 1206.14 L1547.22 1206.14 L1547.81 1206.14 L1548.4 1206.14 L1548.98 1206.14 L1549.57 1206.14 L1550.15 1206.14 L1550.74 1206.14 L1551.33 1206.14 L1551.91 1206.14 L1552.5 1206.14 L1553.09 1206.14 L1553.67 1206.14 L1554.26 1206.14 L1554.85 1206.14 L1555.43 1206.14 L1556.02 1206.14 L1556.6 1206.14 L1557.19 1206.14 L1557.78 1206.14 L1558.36 1206.14 L1558.95 1206.14 L1559.54 1206.14 L1560.12 1206.14 L1560.71 1206.14 L1561.3 1206.14 L1561.88 1206.14 L1562.47 1206.14 L1563.06 1206.14 L1563.64 1206.14 L1564.23 1206.14 L1564.81 1206.14 L1565.4 1206.14 L1565.99 1206.14 L1566.57 1206.14 L1567.16 1206.14 L1567.75 1206.14 L1568.33 1206.14 L1568.92 1206.14 L1569.51 1206.14 L1570.09 1206.14 L1570.68 1206.14 L1571.27 1206.14 L1571.85 1206.14 L1572.44 1206.14 L1573.02 1206.14 L1573.61 1206.14 L1574.2 1206.14 L1574.78 1206.14 L1575.37 1206.14 L1575.96 1206.14 L1576.54 1206.14 L1577.13 1206.14 L1577.72 1206.14 L1578.3 1206.14 L1578.89 1206.14 L1579.47 1206.14 L1580.06 1206.14 L1580.65 1206.14 L1581.23 1206.14 L1581.82 1206.14 L1582.41 1206.14 L1582.99 1206.14 L1583.58 1206.14 L1584.17 1206.14 L1584.75 1206.14 L1585.34 1206.14 L1585.93 1206.14 L1586.51 1206.14 L1587.1 1206.14 L1587.68 1206.14 L1588.27 1206.14 L1588.86 1206.14 L1589.44 1206.14 L1590.03 1206.14 L1590.62 1206.14 L1591.2 1206.14 L1591.79 1206.14 L1592.38 1206.14 L1592.96 1206.14 L1593.55 1206.14 L1594.14 1206.14 L1594.72 1206.14 L1595.31 1206.14 L1595.89 1206.14 L1596.48 1206.14 L1597.07 1206.14 L1597.65 1206.14 L1598.24 1206.14 L1598.83 1206.14 L1599.41 1206.14 L1600 1206.14 L1600.59 1206.14 L1601.17 1206.14 L1601.76 1206.14 L1602.34 1206.14 L1602.93 1206.14 L1603.52 1206.14 L1604.1 1206.14 L1604.69 1206.14 L1605.28 1206.14 L1605.86 1206.14 L1606.45 1206.14 L1607.04 1206.14 L1607.62 1206.14 L1608.21 1206.14 L1608.8 1206.14 L1609.38 1206.14 L1609.97 1206.14 L1610.55 1206.14 L1611.14 1206.14 L1611.73 1206.14 L1612.31 1206.14 L1612.9 1206.14 L1613.49 1206.14 L1614.07 1206.14 L1614.66 1206.14 L1615.25 1206.14 L1615.83 1206.14 L1616.42 1206.14 L1617.01 1206.14 L1617.59 1206.14 L1618.18 1206.14 L1618.76 1206.14 L1619.35 1206.14 L1619.94 1206.14 L1620.52 1206.14 L1621.11 1206.14 L1621.7 1206.14 L1622.28 1206.14 L1622.87 1206.14 L1623.46 1206.14 L1624.04 1206.14 L1624.63 1206.14 L1625.22 1206.14 L1625.8 1206.14 L1626.39 1206.14 L1626.97 1206.14 L1627.56 1206.14 L1628.15 1206.14 L1628.73 1206.14 L1629.32 1206.14 L1629.91 1206.14 L1630.49 1206.14 L1631.08 1206.14 L1631.67 1206.14 L1632.25 1206.14 L1632.84 1206.14 L1633.42 1206.14 L1634.01 1206.14 L1634.6 1206.14 L1635.18 1206.14 L1635.77 1206.14 L1636.36 1206.14 L1636.94 1206.14 L1637.53 1206.14 L1638.12 1206.14 L1638.7 1206.14 L1639.29 1206.14 L1639.88 1206.14 L1640.46 1206.14 L1641.05 1206.14 L1641.63 1206.14 L1642.22 1206.14 L1642.81 1206.14 L1643.39 1206.14 L1643.98 1206.14 L1644.57 1206.14 L1645.15 1206.14 L1645.74 1206.14 L1646.33 1206.14 L1646.91 1206.14 L1647.5 1206.14 L1648.09 1206.14 L1648.67 1206.14 L1649.26 1206.14 L1649.84 1206.14 L1650.43 1206.14 L1651.02 1206.14 L1651.6 1206.14 L1652.19 1206.14 L1652.78 1206.14 L1653.36 1206.14 L1653.95 1206.14 L1654.54 1206.14 L1655.12 1206.14 L1655.71 1206.14 L1656.29 1206.14 L1656.88 1206.14 L1657.47 1206.14 L1658.05 1206.14 L1658.64 1206.14 L1659.23 1206.14 L1659.81 1206.14 L1660.4 1206.14 L1660.99 1206.14 L1661.57 1206.14 L1662.16 1206.14 L1662.75 1206.14 L1663.33 1206.14 L1663.92 1206.14 L1664.5 1206.14 L1665.09 1206.14 L1665.68 1206.14 L1666.26 1206.14 L1666.85 1206.14 L1667.44 1206.14 L1668.02 1206.14 L1668.61 1206.14 L1669.2 1206.14 L1669.78 1206.14 L1670.37 1206.14 L1670.96 1206.14 L1671.54 1206.14 L1672.13 1206.14 L1672.71 1206.14 L1673.3 1206.14 L1673.89 1206.14 L1674.47 1206.14 L1675.06 1206.14 L1675.65 1206.14 L1676.23 1206.14 L1676.82 1206.14 L1677.41 1206.14 L1677.99 1206.14 L1678.58 1206.14 L1679.17 1206.14 L1679.75 1206.14 L1680.34 1206.14 L1680.92 1206.14 L1681.51 1206.14 L1682.1 1206.14 L1682.68 1206.14 L1683.27 1206.14 L1683.86 1206.14 L1684.44 1206.14 L1685.03 1206.14 L1685.62 1206.14 L1686.2 1206.14 L1686.79 1206.14 L1687.37 1206.14 L1687.96 1206.14 L1688.55 1206.14 L1689.13 1206.14 L1689.72 1206.14 L1690.31 1206.14 L1690.89 1206.14 L1691.48 1206.14 L1692.07 1206.14 L1692.65 1206.14 L1693.24 1206.14 L1693.83 1206.14 L1694.41 1206.14 L1695 1206.14 L1695.58 1206.14 L1696.17 1206.14 L1696.76 1206.14 L1697.34 1206.14 L1697.93 1206.14 L1698.52 1206.14 L1699.1 1206.14 L1699.69 1206.14 L1700.28 1206.14 L1700.86 1206.14 L1701.45 1206.14 L1702.04 1206.14 L1702.62 1206.14 L1703.21 1206.14 L1703.79 1206.14 L1704.38 1206.14 L1704.97 1206.14 L1705.55 1206.14 L1706.14 1206.14 L1706.73 1206.14 L1707.31 1206.14 L1707.9 1206.14 L1708.49 1206.14 L1709.07 1206.14 L1709.66 1206.14 L1710.24 1206.14 L1710.83 1206.14 L1711.42 1206.14 L1712 1206.14 L1712.59 1206.14 L1713.18 1206.14 L1713.76 1206.14 L1714.35 1206.14 L1714.94 1206.14 L1715.52 1206.14 L1716.11 1206.14 L1716.7 1206.14 L1717.28 1206.14 L1717.87 1206.14 L1718.45 1206.14 L1719.04 1206.14 L1719.63 1206.14 L1720.21 1206.14 L1720.8 1206.14 L1721.39 1206.14 L1721.97 1206.14 L1722.56 1206.14 L1723.15 1206.14 L1723.73 1206.14 L1724.32 1206.14 L1724.91 1206.14 L1725.49 1206.14 L1726.08 1206.14 L1726.66 1206.14 L1727.25 1206.14 L1727.84 1206.14 L1728.42 1206.14 L1729.01 1206.14 L1729.6 1206.14 L1730.18 1206.14 L1730.77 1206.14 L1731.36 1206.14 L1731.94 1206.14 L1732.53 1206.14 L1733.11 1206.14 L1733.7 1206.14 L1734.29 1206.14 L1734.87 1206.14 L1735.46 1206.14 L1736.05 1206.14 L1736.63 1206.14 L1737.22 1206.14 L1737.81 1206.14 L1738.39 1206.14 L1738.98 1206.14 L1739.57 1206.14 L1740.15 1206.14 L1740.74 1206.14 L1741.32 1206.14 L1741.91 1206.14 L1742.5 1206.14 L1743.08 1206.14 L1743.67 1206.14 L1744.26 1206.14 L1744.84 1206.14 L1745.43 1206.14 L1746.02 1206.14 L1746.6 1206.14 L1747.19 1206.14 L1747.78 1206.14 L1748.36 1206.14 L1748.95 1206.14 L1749.53 1206.14 L1750.12 1206.14 L1750.71 1206.14 L1751.29 1206.14 L1751.88 1206.14 L1752.47 1206.14 L1753.05 1206.14 L1753.64 1206.14 L1754.23 1206.14 L1754.81 1206.14 L1755.4 1206.14 L1755.99 1206.14 L1756.57 1206.14 L1757.16 1206.14 L1757.74 1206.14 L1758.33 1206.14 L1758.92 1206.14 L1759.5 1206.14 L1760.09 1206.14 L1760.68 1206.14 L1761.26 1206.14 L1761.85 1206.14 L1762.44 1206.14 L1763.02 1206.14 L1763.61 1206.14 L1764.19 1206.14 L1764.78 1206.14 L1765.37 1206.14 L1765.95 1206.14 L1766.54 1206.14 L1767.13 1206.14 L1767.71 1206.14 L1768.3 1206.14 L1768.89 1206.14 L1769.47 1206.14 L1770.06 1206.14 L1770.65 1206.14 L1771.23 1206.14 L1771.82 1206.14 L1772.4 1206.14 L1772.99 1206.14 L1773.58 1206.14 L1774.16 1206.14 L1774.75 1206.14 L1775.34 1206.14 L1775.92 1206.14 L1776.51 1206.14 L1777.1 1206.14 L1777.68 1206.14 L1778.27 1206.14 L1778.86 1206.14 L1779.44 1206.14 L1780.03 1206.14 L1780.61 1206.14 L1781.2 1206.14 L1781.79 1206.14 L1782.37 1206.14 L1782.96 1206.14 L1783.55 1206.14 L1784.13 1206.14 L1784.72 1206.14 L1785.31 1206.14 L1785.89 1206.14 L1786.48 1206.14 L1787.06 1206.14 L1787.65 1206.14 L1788.24 1206.14 L1788.82 1206.14 L1789.41 1206.14 L1790 1206.14 L1790.58 1206.14 L1791.17 1206.14 L1791.76 1206.14 L1792.34 1206.14 L1792.93 1206.14 L1793.52 1206.14 L1794.1 1206.14 L1794.69 1206.14 L1795.27 1206.14 L1795.86 1206.14 L1796.45 1206.14 L1797.03 1206.14 L1797.62 1206.14 L1798.21 1206.14 L1798.79 1206.14 L1799.38 1206.14 L1799.97 1206.14 L1800.55 1206.14 L1801.14 1206.14 L1801.73 1206.14 L1802.31 1206.14 L1802.9 1206.14 L1803.48 1206.14 L1804.07 1206.14 L1804.66 1206.14 L1805.24 1206.14 L1805.83 1206.14 L1806.42 1206.14 L1807 1206.14 L1807.59 1206.14 L1808.18 1206.14 L1808.76 1206.14 L1809.35 1206.14 L1809.94 1206.14 L1810.52 1206.14 L1811.11 1206.14 L1811.69 1206.14 L1812.28 1206.14 L1812.87 1206.14 L1813.45 1206.14 L1814.04 1206.14 L1814.63 1206.14 L1815.21 1206.14 L1815.8 1206.14 L1816.39 1206.14 L1816.97 1206.14 L1817.56 1206.14 L1818.14 1206.14 L1818.73 1206.14 L1819.32 1206.14 L1819.9 1206.14 L1820.49 1206.14 L1821.08 1206.14 L1821.66 1206.14 L1822.25 1206.14 L1822.84 1206.14 L1823.42 1206.14 L1824.01 1206.14 L1824.6 1206.14 L1825.18 1206.14 L1825.77 1206.14 L1826.35 1206.14 L1826.94 1206.14 L1827.53 1206.14 L1828.11 1206.14 L1828.7 1206.14 L1829.29 1206.14 L1829.87 1206.14 L1830.46 1206.14 L1831.05 1206.14 L1831.63 1206.14 L1832.22 1206.14 L1832.81 1206.14 L1833.39 1206.14 L1833.98 1206.14 L1834.56 1206.14 L1835.15 1206.14 L1835.74 1206.14 L1836.32 1206.14 L1836.91 1206.14 L1837.5 1206.14 L1838.08 1206.14 L1838.67 1206.14 L1839.26 1206.14 L1839.84 1206.14 L1840.43 1206.14 L1841.01 1206.14 L1841.6 1206.14 L1842.19 1206.14 L1842.77 1206.14 L1843.36 1206.14 L1843.95 1206.14 L1844.53 1206.14 L1845.12 1206.14 L1845.71 1206.14 L1846.29 1206.14 L1846.88 1206.14 L1847.47 1206.14 L1848.05 1206.14 L1848.64 1206.14 L1849.22 1206.14 L1849.81 1206.14 L1850.4 1206.14 L1850.98 1206.14 L1851.57 1206.14 L1852.16 1206.14 L1852.74 1206.14 L1853.33 1206.14 L1853.92 1206.14 L1854.5 1206.14 L1855.09 1206.14 L1855.68 1206.14 L1856.26 1206.14 L1856.85 1206.14 L1857.43 1206.14 L1858.02 1206.14 L1858.61 1206.14 L1859.19 1206.14 L1859.78 1206.14 L1860.37 1206.14 L1860.95 1206.14 L1861.54 1206.14 L1862.13 1206.14 L1862.71 1206.14 L1863.3 1206.14 L1863.88 1206.14 L1864.47 1206.14 L1865.06 1206.14 L1865.64 1206.14 L1866.23 1206.14 L1866.82 1206.14 L1867.4 1206.14 L1867.99 1206.14 L1868.58 1206.14 L1869.16 1206.14 L1869.75 1206.14 L1870.34 1206.14 L1870.92 1206.14 L1871.51 1206.14 L1872.09 1206.14 L1872.68 1206.14 L1873.27 1206.14 L1873.85 1206.14 L1874.44 1206.14 L1875.03 1206.14 L1875.61 1206.14 L1876.2 1206.14 L1876.79 1206.14 L1877.37 1206.14 L1877.96 1206.14 L1878.55 1206.14 L1879.13 1206.14 L1879.72 1206.14 L1880.3 1206.14 L1880.89 1206.14 L1881.48 1206.14 L1882.06 1206.14 L1882.65 1206.14 L1883.24 1206.14 L1883.82 1206.14 L1884.41 1206.14 L1885 1206.14 L1885.58 1206.14 L1886.17 1206.14 L1886.76 1206.14 L1887.34 1206.14 L1887.93 1206.14 L1888.51 1206.14 L1889.1 1206.14 L1889.69 1206.14 L1890.27 1206.14 L1890.86 1206.14 L1891.45 1206.14 L1892.03 1206.14 L1892.62 1206.14 L1893.21 1206.14 L1893.79 1206.14 L1894.38 1206.14 L1894.96 1206.14 L1895.55 1206.14 L1896.14 1206.14 L1896.72 1206.14 L1897.31 1206.14 L1897.9 1206.14 L1898.48 1206.14 L1899.07 1206.14 L1899.66 1206.14 L1900.24 1206.14 L1900.83 1206.14 L1901.42 1206.14 L1902 1206.14 L1902.59 1206.14 L1903.17 1206.14 L1903.76 1206.14 L1904.35 1206.14 L1904.93 1206.14 L1905.52 1206.14 L1906.11 1206.14 L1906.69 1206.14 L1907.28 1206.14 L1907.87 1206.14 L1908.45 1206.14 L1909.04 1206.14 L1909.63 1206.14 L1910.21 1206.14 L1910.8 1206.14 L1911.38 1206.14 L1911.97 1206.14 L1912.56 1206.14 L1913.14 1206.14 L1913.73 1206.14 L1914.32 1206.14 L1914.9 1206.14 L1915.49 1206.14 L1916.08 1206.14 L1916.66 1206.14 L1917.25 1206.14 L1917.83 1206.14 L1918.42 1206.14 L1919.01 1206.14 L1919.59 1206.14 L1920.18 1206.14 L1920.77 1206.14 L1921.35 1206.14 L1921.94 1206.14 L1922.53 1206.14 L1923.11 1206.14 L1923.7 1206.14 L1924.29 1206.14 L1924.87 1206.14 L1925.46 1206.14 L1926.04 1206.14 L1926.63 1206.14 L1927.22 1206.14 L1927.8 1206.14 L1928.39 1206.14 L1928.98 1206.14 L1929.56 1206.14 L1930.15 1206.14 L1930.74 1206.14 L1931.32 1206.14 L1931.91 1206.14 L1932.5 1206.14 L1933.08 1206.14 L1933.67 1206.14 L1934.25 1206.14 L1934.84 1206.14 L1935.43 1206.14 L1936.01 1206.14 L1936.6 1206.14 L1937.19 1206.14 L1937.77 1206.14 L1938.36 1206.14 L1938.95 1206.14 L1939.53 1206.14 L1940.12 1206.14 L1940.71 1206.14 L1941.29 1206.14 L1941.88 1206.14 L1942.46 1206.14 L1943.05 1206.14 L1943.64 1206.14 L1944.22 1206.14 L1944.81 1206.14 L1945.4 1206.14 L1945.98 1206.14 L1946.57 1206.14 L1947.16 1206.14 L1947.74 1206.14 L1948.33 1206.14 L1948.91 1206.14 L1949.5 1206.14 L1950.09 1206.14 L1950.67 1206.14 L1951.26 1206.14 L1951.85 1206.14 L1952.43 1206.14 L1953.02 1206.14 L1953.61 1206.14 L1954.19 1206.14 L1954.78 1206.14 L1955.37 1206.14 L1955.95 1206.14 L1956.54 1206.14 L1957.12 1206.14 L1957.71 1206.14 L1958.3 1206.14 L1958.88 1206.14 L1959.47 1206.14 L1960.06 1206.14 L1960.64 1206.14 L1961.23 1206.14 L1961.82 1206.14 L1962.4 1206.14 L1962.99 1206.14 L1963.58 1206.14 L1964.16 1206.14 L1964.75 1206.14 L1965.33 1206.14 L1965.92 1206.14 L1966.51 1206.14 L1967.09 1206.14 L1967.68 1206.14 L1968.27 1206.14 L1968.85 1206.14 L1969.44 1206.14 L1970.03 1206.14 L1970.61 1206.14 L1971.2 1206.14 L1971.78 1206.14 L1972.37 1206.14 L1972.96 1206.14 L1973.54 1206.14 L1974.13 1206.14 L1974.72 1206.14 L1975.3 1206.14 L1975.89 1206.14 L1976.48 1206.14 L1977.06 1206.14 L1977.65 1206.14 L1978.24 1206.14 L1978.82 1206.14 L1979.41 1206.14 L1979.99 1206.14 L1980.58 1206.14 L1981.17 1206.14 L1981.75 1206.14 L1982.34 1206.14 L1982.93 1206.14 L1983.51 1206.14 L1984.1 1206.14 L1984.69 1206.14 L1985.27 1206.14 L1985.86 1206.14 L1986.45 1206.14 L1987.03 1206.14 L1987.62 1206.14 L1988.2 1206.14 L1988.79 1206.14 L1989.38 1206.14 L1989.96 1206.14 L1990.55 1206.14 L1991.14 1206.14 L1991.72 1206.14 L1992.31 1206.14 L1992.9 1206.14 L1993.48 1206.14 L1994.07 1206.14 L1994.65 1206.14 L1995.24 1206.14 L1995.83 1206.14 L1996.41 1206.14 L1997 1206.14 L1997.59 1206.14 L1998.17 1206.14 L1998.76 1206.14 L1999.35 1206.14 L1999.93 1206.14 L2000.52 1206.14 L2001.11 1206.14 L2001.69 1206.14 L2002.28 1206.14 L2002.86 1206.14 L2003.45 1206.14 L2004.04 1206.14 L2004.62 1206.14 L2005.21 1206.14 L2005.8 1206.14 L2006.38 1206.14 L2006.97 1206.14 L2007.56 1206.14 L2008.14 1206.14 L2008.73 1206.14 L2009.32 1206.14 L2009.9 1206.14 L2010.49 1206.14 L2011.07 1206.14 L2011.66 1206.14 L2012.25 1206.14 L2012.83 1206.14 L2013.42 1206.14 L2014.01 1206.14 L2014.59 1206.14 L2015.18 1206.14 L2015.77 1206.14 L2016.35 1206.14 L2016.94 1206.14 L2017.53 1206.14 L2018.11 1206.14 L2018.7 1206.14 L2019.28 1206.14 L2019.87 1206.14 L2020.46 1206.14 L2021.04 1206.14 L2021.63 1206.14 L2022.22 1206.14 L2022.8 1206.14 L2023.39 1206.14 L2023.98 1206.14 L2024.56 1206.14 L2025.15 1206.14 L2025.73 1206.14 L2026.32 1206.14 L2026.91 1206.14 L2027.49 1206.14 L2028.08 1206.14 L2028.67 1206.14 L2029.25 1206.14 L2029.84 1206.14 L2030.43 1206.14 L2031.01 1206.14 L2031.6 1206.14 L2032.19 1206.14 L2032.77 1206.14 L2033.36 1206.14 L2033.94 1206.14 L2034.53 1206.14 L2035.12 1206.14 L2035.7 1206.14 L2036.29 1206.14 L2036.88 1206.14 L2037.46 1206.14 L2038.05 1206.14 L2038.64 1206.14 L2039.22 1206.14 L2039.81 1206.14 L2040.4 1206.14 L2040.98 1206.14 L2041.57 1206.14 L2042.15 1206.14 L2042.74 1206.14 L2043.33 1206.14 L2043.91 1206.14 L2044.5 1206.14 L2045.09 1206.14 L2045.67 1206.14 L2046.26 1206.14 L2046.85 1206.14 L2047.43 1206.14 L2048.02 1206.14 L2048.6 1206.14 L2049.19 1206.14 L2049.78 1206.14 L2050.36 1206.14 L2050.95 1206.14 L2051.54 1206.14 L2052.12 1206.14 L2052.71 1206.14 L2053.3 1206.14 L2053.88 1206.14 L2054.47 1206.14 L2055.06 1206.14 L2055.64 1206.14 L2056.23 1206.14 L2056.81 1206.14 L2057.4 1206.14 L2057.99 1206.14 L2058.57 1206.14 L2059.16 1206.14 L2059.75 1206.14 L2060.33 1206.14 L2060.92 1206.14 L2061.51 1206.14 L2062.09 1206.14 L2062.68 1206.14 L2063.27 1206.14 L2063.85 1206.14 L2064.44 1206.14 L2065.02 1206.14 L2065.61 1206.14 L2066.2 1206.14 L2066.78 1206.14 L2067.37 1206.14 L2067.96 1206.14 L2068.54 1206.14 L2069.13 1206.14 L2069.72 1206.14 L2070.3 1206.14 L2070.89 1206.14 L2071.48 1206.14 L2072.06 1206.14 L2072.65 1206.14 L2073.23 1206.14 L2073.82 1206.14 L2074.41 1206.14 L2074.99 1206.14 L2075.58 1206.14 L2076.17 1206.14 L2076.75 1206.14 L2077.34 1206.14 L2077.93 1206.14 L2078.51 1206.14 L2079.1 1206.14 L2079.68 1206.14 L2080.27 1206.14 L2080.86 1206.14 L2081.44 1206.14 L2082.03 1206.14 L2082.62 1206.14 L2083.2 1206.14 L2083.79 1206.14 L2084.38 1206.14 L2084.96 1206.14 L2085.55 1206.14 L2086.14 1206.14 L2086.72 1206.14 L2087.31 1206.14 L2087.89 1206.14 L2088.48 1206.14 L2089.07 1206.14 L2089.65 1206.14 L2090.24 1206.14 L2090.83 1206.14 L2091.41 1206.14 L2092 1206.14 L2092.59 1206.14 L2093.17 1206.14 L2093.76 1206.14 L2094.35 1206.14 L2094.93 1206.14 L2095.52 1206.14 L2096.1 1206.14 L2096.69 1206.14 L2097.28 1206.14 L2097.86 1206.14 L2098.45 1206.14 L2099.04 1206.14 L2099.62 1206.14 L2100.21 1206.14 L2100.8 1206.14 L2101.38 1206.14 L2101.97 1206.14 L2102.55 1206.14 L2103.14 1206.14 L2103.73 1206.14 L2104.31 1206.14 L2104.9 1206.14 L2105.49 1206.14 L2106.07 1206.14 L2106.66 1206.14 L2107.25 1206.14 L2107.83 1206.14 L2108.42 1206.14 L2109.01 1206.14 L2109.59 1206.14 L2110.18 1206.14 L2110.76 1206.14 L2111.35 1206.14 L2111.94 1206.14 L2112.52 1206.14 L2113.11 1206.14 L2113.7 1206.14 L2114.28 1206.14 L2114.87 1206.14 L2115.46 1206.14 L2116.04 1206.14 L2116.63 1206.14 L2117.22 1206.14 L2117.8 1206.14 L2118.39 1206.14 L2118.97 1206.14 L2119.56 1206.14 L2120.15 1206.14 L2120.73 1206.14 L2121.32 1206.14 L2121.91 1206.14 L2122.49 1206.14 L2123.08 1206.14 L2123.67 1206.14 L2124.25 1206.14 L2124.84 1206.14 L2125.42 1206.14 L2126.01 1206.14 L2126.6 1206.14 L2127.18 1206.14 L2127.77 1206.14 L2128.36 1206.14 L2128.94 1206.14 L2129.53 1206.14 L2130.12 1206.14 L2130.7 1206.14 L2131.29 1206.14 L2131.88 1206.14 L2132.46 1206.14 L2133.05 1206.14 L2133.63 1206.14 L2134.22 1206.14 L2134.81 1206.14 L2135.39 1206.14 L2135.98 1206.14 L2136.57 1206.14 L2137.15 1206.14 L2137.74 1206.14 L2138.33 1206.14 L2138.91 1206.14 L2139.5 1206.14 L2140.09 1206.14 L2140.67 1206.14 L2141.26 1206.14 L2141.84 1206.14 L2142.43 1206.14 L2143.02 1206.14 L2143.6 1206.14 L2144.19 1206.14 L2144.78 1206.14 L2145.36 1206.14 L2145.95 1206.14 L2146.54 1206.14 L2147.12 1206.14 L2147.71 1206.14 L2148.3 1206.14 L2148.88 1206.14 L2149.47 1206.14 L2150.05 1206.14 L2150.64 1206.14 L2151.23 1206.14 L2151.81 1206.14 L2152.4 1206.14 L2152.99 1206.14 L2153.57 1206.14 L2154.16 1206.14 L2154.75 1206.14 L2155.33 1206.14 L2155.92 1206.14 L2156.5 1206.14 L2157.09 1206.14 L2157.68 1206.14 L2158.26 1206.14 L2158.26 1205.88 L2157.68 1205.88 L2157.09 1205.88 L2156.5 1205.88 L2155.92 1205.88 L2155.33 1205.88 L2154.75 1205.88 L2154.16 1205.88 L2153.57 1205.88 L2152.99 1205.88 L2152.4 1205.88 L2151.81 1205.88 L2151.23 1205.88 L2150.64 1205.88 L2150.05 1205.88 L2149.47 1205.88 L2148.88 1205.88 L2148.3 1205.88 L2147.71 1205.88 L2147.12 1205.88 L2146.54 1205.88 L2145.95 1205.88 L2145.36 1205.88 L2144.78 1205.88 L2144.19 1205.88 L2143.6 1205.88 L2143.02 1205.88 L2142.43 1205.88 L2141.84 1205.88 L2141.26 1205.88 L2140.67 1205.88 L2140.09 1205.88 L2139.5 1205.88 L2138.91 1205.88 L2138.33 1205.88 L2137.74 1205.88 L2137.15 1205.88 L2136.57 1205.88 L2135.98 1205.88 L2135.39 1205.88 L2134.81 1205.88 L2134.22 1205.88 L2133.63 1205.88 L2133.05 1205.88 L2132.46 1205.88 L2131.88 1205.88 L2131.29 1205.88 L2130.7 1205.88 L2130.12 1205.88 L2129.53 1205.88 L2128.94 1205.88 L2128.36 1205.88 L2127.77 1205.88 L2127.18 1205.88 L2126.6 1205.88 L2126.01 1205.88 L2125.42 1205.88 L2124.84 1205.88 L2124.25 1205.88 L2123.67 1205.88 L2123.08 1205.88 L2122.49 1205.88 L2121.91 1205.88 L2121.32 1205.88 L2120.73 1205.88 L2120.15 1205.88 L2119.56 1205.88 L2118.97 1205.88 L2118.39 1205.88 L2117.8 1205.88 L2117.22 1205.88 L2116.63 1205.88 L2116.04 1205.88 L2115.46 1205.88 L2114.87 1205.88 L2114.28 1205.88 L2113.7 1205.88 L2113.11 1205.88 L2112.52 1205.88 L2111.94 1205.88 L2111.35 1205.88 L2110.76 1205.88 L2110.18 1205.88 L2109.59 1205.88 L2109.01 1205.88 L2108.42 1205.88 L2107.83 1205.88 L2107.25 1205.88 L2106.66 1205.88 L2106.07 1205.88 L2105.49 1205.88 L2104.9 1205.88 L2104.31 1205.88 L2103.73 1205.88 L2103.14 1205.88 L2102.55 1205.88 L2101.97 1205.88 L2101.38 1205.88 L2100.8 1205.88 L2100.21 1205.88 L2099.62 1205.88 L2099.04 1205.88 L2098.45 1205.88 L2097.86 1205.88 L2097.28 1205.88 L2096.69 1205.88 L2096.1 1205.88 L2095.52 1205.88 L2094.93 1205.88 L2094.35 1205.88 L2093.76 1205.88 L2093.17 1205.88 L2092.59 1205.88 L2092 1205.88 L2091.41 1205.88 L2090.83 1205.88 L2090.24 1205.88 L2089.65 1205.88 L2089.07 1205.88 L2088.48 1205.88 L2087.89 1205.88 L2087.31 1205.88 L2086.72 1205.88 L2086.14 1205.88 L2085.55 1205.88 L2084.96 1205.88 L2084.38 1205.88 L2083.79 1205.88 L2083.2 1205.88 L2082.62 1205.88 L2082.03 1205.88 L2081.44 1205.88 L2080.86 1205.88 L2080.27 1205.88 L2079.68 1205.88 L2079.1 1205.88 L2078.51 1205.88 L2077.93 1205.88 L2077.34 1205.88 L2076.75 1205.88 L2076.17 1205.88 L2075.58 1205.88 L2074.99 1205.88 L2074.41 1205.88 L2073.82 1205.88 L2073.23 1205.88 L2072.65 1205.88 L2072.06 1205.88 L2071.48 1205.88 L2070.89 1205.88 L2070.3 1205.88 L2069.72 1205.88 L2069.13 1205.88 L2068.54 1205.88 L2067.96 1205.88 L2067.37 1205.88 L2066.78 1205.88 L2066.2 1205.88 L2065.61 1205.88 L2065.02 1205.88 L2064.44 1205.88 L2063.85 1205.88 L2063.27 1205.88 L2062.68 1205.88 L2062.09 1205.88 L2061.51 1205.88 L2060.92 1205.88 L2060.33 1205.88 L2059.75 1205.88 L2059.16 1205.88 L2058.57 1205.88 L2057.99 1205.88 L2057.4 1205.88 L2056.81 1205.88 L2056.23 1205.88 L2055.64 1205.88 L2055.06 1205.88 L2054.47 1205.88 L2053.88 1205.88 L2053.3 1205.88 L2052.71 1205.88 L2052.12 1205.88 L2051.54 1205.88 L2050.95 1205.88 L2050.36 1205.88 L2049.78 1205.88 L2049.19 1205.88 L2048.6 1205.88 L2048.02 1205.88 L2047.43 1205.88 L2046.85 1205.88 L2046.26 1205.88 L2045.67 1205.88 L2045.09 1205.88 L2044.5 1205.88 L2043.91 1205.88 L2043.33 1205.88 L2042.74 1205.88 L2042.15 1205.88 L2041.57 1205.88 L2040.98 1205.88 L2040.4 1205.88 L2039.81 1205.88 L2039.22 1205.88 L2038.64 1205.88 L2038.05 1205.88 L2037.46 1205.88 L2036.88 1205.88 L2036.29 1205.88 L2035.7 1205.88 L2035.12 1205.88 L2034.53 1205.88 L2033.94 1205.88 L2033.36 1205.88 L2032.77 1205.88 L2032.19 1205.88 L2031.6 1205.88 L2031.01 1205.88 L2030.43 1205.88 L2029.84 1205.88 L2029.25 1205.88 L2028.67 1205.88 L2028.08 1205.88 L2027.49 1205.88 L2026.91 1205.88 L2026.32 1205.88 L2025.73 1205.88 L2025.15 1205.88 L2024.56 1205.88 L2023.98 1205.88 L2023.39 1205.88 L2022.8 1205.88 L2022.22 1205.88 L2021.63 1205.88 L2021.04 1205.88 L2020.46 1205.88 L2019.87 1205.88 L2019.28 1205.88 L2018.7 1205.88 L2018.11 1205.88 L2017.53 1205.88 L2016.94 1205.88 L2016.35 1205.88 L2015.77 1205.88 L2015.18 1205.88 L2014.59 1205.88 L2014.01 1205.88 L2013.42 1205.88 L2012.83 1205.88 L2012.25 1205.88 L2011.66 1205.88 L2011.07 1205.88 L2010.49 1205.88 L2009.9 1205.88 L2009.32 1205.88 L2008.73 1205.88 L2008.14 1205.88 L2007.56 1205.88 L2006.97 1205.88 L2006.38 1205.88 L2005.8 1205.88 L2005.21 1205.88 L2004.62 1205.88 L2004.04 1205.88 L2003.45 1205.88 L2002.86 1205.88 L2002.28 1205.88 L2001.69 1205.88 L2001.11 1205.88 L2000.52 1205.88 L1999.93 1205.88 L1999.35 1205.88 L1998.76 1205.88 L1998.17 1205.88 L1997.59 1205.88 L1997 1205.88 L1996.41 1205.88 L1995.83 1205.88 L1995.24 1205.88 L1994.65 1205.88 L1994.07 1205.88 L1993.48 1205.88 L1992.9 1205.88 L1992.31 1205.88 L1991.72 1205.88 L1991.14 1205.88 L1990.55 1205.88 L1989.96 1205.88 L1989.38 1205.88 L1988.79 1205.88 L1988.2 1205.88 L1987.62 1205.88 L1987.03 1205.88 L1986.45 1205.88 L1985.86 1205.88 L1985.27 1205.88 L1984.69 1205.88 L1984.1 1205.88 L1983.51 1205.88 L1982.93 1205.88 L1982.34 1205.88 L1981.75 1205.88 L1981.17 1205.88 L1980.58 1205.88 L1979.99 1205.88 L1979.41 1205.88 L1978.82 1205.88 L1978.24 1205.88 L1977.65 1205.88 L1977.06 1205.88 L1976.48 1205.88 L1975.89 1205.88 L1975.3 1205.88 L1974.72 1205.88 L1974.13 1205.88 L1973.54 1205.88 L1972.96 1205.88 L1972.37 1205.88 L1971.78 1205.88 L1971.2 1205.88 L1970.61 1205.88 L1970.03 1205.88 L1969.44 1205.88 L1968.85 1205.88 L1968.27 1205.88 L1967.68 1205.88 L1967.09 1205.88 L1966.51 1205.88 L1965.92 1205.88 L1965.33 1205.88 L1964.75 1205.88 L1964.16 1205.88 L1963.58 1205.88 L1962.99 1205.88 L1962.4 1205.88 L1961.82 1205.88 L1961.23 1205.88 L1960.64 1205.88 L1960.06 1205.88 L1959.47 1205.88 L1958.88 1205.88 L1958.3 1205.88 L1957.71 1205.88 L1957.12 1205.88 L1956.54 1205.88 L1955.95 1205.88 L1955.37 1205.88 L1954.78 1205.88 L1954.19 1205.88 L1953.61 1205.88 L1953.02 1205.88 L1952.43 1205.88 L1951.85 1205.88 L1951.26 1205.88 L1950.67 1205.88 L1950.09 1205.88 L1949.5 1205.88 L1948.91 1205.88 L1948.33 1205.88 L1947.74 1205.88 L1947.16 1205.88 L1946.57 1205.88 L1945.98 1205.88 L1945.4 1205.88 L1944.81 1205.88 L1944.22 1205.88 L1943.64 1205.88 L1943.05 1205.88 L1942.46 1205.88 L1941.88 1205.88 L1941.29 1205.88 L1940.71 1205.88 L1940.12 1205.88 L1939.53 1205.88 L1938.95 1205.88 L1938.36 1205.88 L1937.77 1205.88 L1937.19 1205.88 L1936.6 1205.88 L1936.01 1205.88 L1935.43 1205.88 L1934.84 1205.88 L1934.25 1205.88 L1933.67 1205.88 L1933.08 1205.88 L1932.5 1205.88 L1931.91 1205.88 L1931.32 1205.88 L1930.74 1205.88 L1930.15 1205.88 L1929.56 1205.88 L1928.98 1205.88 L1928.39 1205.88 L1927.8 1205.88 L1927.22 1205.88 L1926.63 1205.88 L1926.04 1205.88 L1925.46 1205.88 L1924.87 1205.88 L1924.29 1205.88 L1923.7 1205.88 L1923.11 1205.88 L1922.53 1205.88 L1921.94 1205.88 L1921.35 1205.88 L1920.77 1205.88 L1920.18 1205.88 L1919.59 1205.88 L1919.01 1205.88 L1918.42 1205.88 L1917.83 1205.88 L1917.25 1205.88 L1916.66 1205.88 L1916.08 1205.88 L1915.49 1205.88 L1914.9 1205.88 L1914.32 1205.88 L1913.73 1205.88 L1913.14 1205.88 L1912.56 1205.88 L1911.97 1205.88 L1911.38 1205.88 L1910.8 1205.88 L1910.21 1205.88 L1909.63 1205.88 L1909.04 1205.88 L1908.45 1205.88 L1907.87 1205.88 L1907.28 1205.88 L1906.69 1205.88 L1906.11 1205.88 L1905.52 1205.88 L1904.93 1205.88 L1904.35 1205.88 L1903.76 1205.88 L1903.17 1205.88 L1902.59 1205.88 L1902 1205.88 L1901.42 1205.88 L1900.83 1205.88 L1900.24 1205.88 L1899.66 1205.88 L1899.07 1205.88 L1898.48 1205.88 L1897.9 1205.88 L1897.31 1205.88 L1896.72 1205.88 L1896.14 1205.88 L1895.55 1205.88 L1894.96 1205.88 L1894.38 1205.88 L1893.79 1205.88 L1893.21 1205.88 L1892.62 1205.88 L1892.03 1205.88 L1891.45 1205.88 L1890.86 1205.88 L1890.27 1205.88 L1889.69 1205.88 L1889.1 1205.88 L1888.51 1205.88 L1887.93 1205.88 L1887.34 1205.88 L1886.76 1205.88 L1886.17 1205.88 L1885.58 1205.88 L1885 1205.88 L1884.41 1205.88 L1883.82 1205.88 L1883.24 1205.88 L1882.65 1205.88 L1882.06 1205.88 L1881.48 1205.88 L1880.89 1205.88 L1880.3 1205.88 L1879.72 1205.88 L1879.13 1205.88 L1878.55 1205.88 L1877.96 1205.88 L1877.37 1205.88 L1876.79 1205.88 L1876.2 1205.88 L1875.61 1205.88 L1875.03 1205.88 L1874.44 1205.88 L1873.85 1205.88 L1873.27 1205.88 L1872.68 1205.88 L1872.09 1205.88 L1871.51 1205.88 L1870.92 1205.88 L1870.34 1205.88 L1869.75 1205.88 L1869.16 1205.88 L1868.58 1205.88 L1867.99 1205.88 L1867.4 1205.88 L1866.82 1205.88 L1866.23 1205.88 L1865.64 1205.88 L1865.06 1205.88 L1864.47 1205.88 L1863.88 1205.88 L1863.3 1205.88 L1862.71 1205.88 L1862.13 1205.88 L1861.54 1205.88 L1860.95 1205.88 L1860.37 1205.88 L1859.78 1205.88 L1859.19 1205.88 L1858.61 1205.88 L1858.02 1205.88 L1857.43 1205.88 L1856.85 1205.88 L1856.26 1205.88 L1855.68 1205.88 L1855.09 1205.88 L1854.5 1205.88 L1853.92 1205.88 L1853.33 1205.88 L1852.74 1205.88 L1852.16 1205.88 L1851.57 1205.88 L1850.98 1205.88 L1850.4 1205.88 L1849.81 1205.88 L1849.22 1205.88 L1848.64 1205.88 L1848.05 1205.88 L1847.47 1205.88 L1846.88 1205.88 L1846.29 1205.88 L1845.71 1205.88 L1845.12 1205.88 L1844.53 1205.88 L1843.95 1205.88 L1843.36 1205.88 L1842.77 1205.88 L1842.19 1205.88 L1841.6 1205.88 L1841.01 1205.88 L1840.43 1205.88 L1839.84 1205.88 L1839.26 1205.88 L1838.67 1205.88 L1838.08 1205.88 L1837.5 1205.88 L1836.91 1205.88 L1836.32 1205.88 L1835.74 1205.88 L1835.15 1205.88 L1834.56 1205.88 L1833.98 1205.88 L1833.39 1205.88 L1832.81 1205.88 L1832.22 1205.88 L1831.63 1205.88 L1831.05 1205.88 L1830.46 1205.88 L1829.87 1205.88 L1829.29 1205.88 L1828.7 1205.88 L1828.11 1205.88 L1827.53 1205.88 L1826.94 1205.88 L1826.35 1205.88 L1825.77 1205.88 L1825.18 1205.88 L1824.6 1205.88 L1824.01 1205.88 L1823.42 1205.88 L1822.84 1205.88 L1822.25 1205.88 L1821.66 1205.88 L1821.08 1205.88 L1820.49 1205.88 L1819.9 1205.88 L1819.32 1205.88 L1818.73 1205.88 L1818.14 1205.88 L1817.56 1205.88 L1816.97 1205.88 L1816.39 1205.88 L1815.8 1205.88 L1815.21 1205.88 L1814.63 1205.88 L1814.04 1205.88 L1813.45 1205.88 L1812.87 1205.88 L1812.28 1205.88 L1811.69 1205.88 L1811.11 1205.88 L1810.52 1205.88 L1809.94 1205.88 L1809.35 1205.88 L1808.76 1205.88 L1808.18 1205.88 L1807.59 1205.88 L1807 1205.88 L1806.42 1205.88 L1805.83 1205.88 L1805.24 1205.88 L1804.66 1205.88 L1804.07 1205.88 L1803.48 1205.88 L1802.9 1205.88 L1802.31 1205.88 L1801.73 1205.88 L1801.14 1205.88 L1800.55 1205.88 L1799.97 1205.88 L1799.38 1205.88 L1798.79 1205.88 L1798.21 1205.88 L1797.62 1205.88 L1797.03 1205.88 L1796.45 1205.88 L1795.86 1205.88 L1795.27 1205.88 L1794.69 1205.88 L1794.1 1205.88 L1793.52 1205.88 L1792.93 1205.88 L1792.34 1205.88 L1791.76 1205.88 L1791.17 1205.88 L1790.58 1205.88 L1790 1205.88 L1789.41 1205.88 L1788.82 1205.88 L1788.24 1205.88 L1787.65 1205.88 L1787.06 1205.88 L1786.48 1205.88 L1785.89 1205.88 L1785.31 1205.88 L1784.72 1205.88 L1784.13 1205.88 L1783.55 1205.88 L1782.96 1205.88 L1782.37 1205.88 L1781.79 1205.88 L1781.2 1205.88 L1780.61 1205.88 L1780.03 1205.88 L1779.44 1205.88 L1778.86 1205.88 L1778.27 1205.88 L1777.68 1205.88 L1777.1 1205.88 L1776.51 1205.88 L1775.92 1205.88 L1775.34 1205.88 L1774.75 1205.88 L1774.16 1205.88 L1773.58 1205.88 L1772.99 1205.88 L1772.4 1205.88 L1771.82 1205.88 L1771.23 1205.88 L1770.65 1205.88 L1770.06 1205.88 L1769.47 1205.88 L1768.89 1205.88 L1768.3 1205.88 L1767.71 1205.88 L1767.13 1205.88 L1766.54 1205.88 L1765.95 1205.88 L1765.37 1205.88 L1764.78 1205.88 L1764.19 1205.88 L1763.61 1205.88 L1763.02 1205.88 L1762.44 1205.88 L1761.85 1205.88 L1761.26 1205.88 L1760.68 1205.88 L1760.09 1205.88 L1759.5 1205.88 L1758.92 1205.88 L1758.33 1205.88 L1757.74 1205.88 L1757.16 1205.88 L1756.57 1205.88 L1755.99 1205.88 L1755.4 1205.88 L1754.81 1205.88 L1754.23 1205.88 L1753.64 1205.88 L1753.05 1205.88 L1752.47 1205.88 L1751.88 1205.88 L1751.29 1205.88 L1750.71 1205.88 L1750.12 1205.88 L1749.53 1205.88 L1748.95 1205.88 L1748.36 1205.88 L1747.78 1205.88 L1747.19 1205.88 L1746.6 1205.88 L1746.02 1205.88 L1745.43 1205.88 L1744.84 1205.88 L1744.26 1205.88 L1743.67 1205.88 L1743.08 1205.88 L1742.5 1205.88 L1741.91 1205.88 L1741.32 1205.88 L1740.74 1205.88 L1740.15 1205.88 L1739.57 1205.88 L1738.98 1205.88 L1738.39 1205.88 L1737.81 1205.88 L1737.22 1205.88 L1736.63 1205.88 L1736.05 1205.88 L1735.46 1205.88 L1734.87 1205.88 L1734.29 1205.88 L1733.7 1205.88 L1733.11 1205.88 L1732.53 1205.88 L1731.94 1205.88 L1731.36 1205.88 L1730.77 1205.88 L1730.18 1205.88 L1729.6 1205.88 L1729.01 1205.88 L1728.42 1205.88 L1727.84 1205.88 L1727.25 1205.88 L1726.66 1205.88 L1726.08 1205.88 L1725.49 1205.88 L1724.91 1205.88 L1724.32 1205.88 L1723.73 1205.88 L1723.15 1205.88 L1722.56 1205.88 L1721.97 1205.88 L1721.39 1205.88 L1720.8 1205.88 L1720.21 1205.88 L1719.63 1205.88 L1719.04 1205.88 L1718.45 1205.88 L1717.87 1205.88 L1717.28 1205.88 L1716.7 1205.88 L1716.11 1205.88 L1715.52 1205.88 L1714.94 1205.88 L1714.35 1205.88 L1713.76 1205.88 L1713.18 1205.88 L1712.59 1205.88 L1712 1205.88 L1711.42 1205.88 L1710.83 1205.88 L1710.24 1205.88 L1709.66 1205.88 L1709.07 1205.88 L1708.49 1205.88 L1707.9 1205.88 L1707.31 1205.88 L1706.73 1205.88 L1706.14 1205.88 L1705.55 1205.88 L1704.97 1205.88 L1704.38 1205.88 L1703.79 1205.88 L1703.21 1205.88 L1702.62 1205.88 L1702.04 1205.88 L1701.45 1205.88 L1700.86 1205.88 L1700.28 1205.88 L1699.69 1205.88 L1699.1 1205.88 L1698.52 1205.88 L1697.93 1205.88 L1697.34 1205.88 L1696.76 1205.88 L1696.17 1205.88 L1695.58 1205.88 L1695 1205.88 L1694.41 1205.88 L1693.83 1205.88 L1693.24 1205.88 L1692.65 1205.88 L1692.07 1205.88 L1691.48 1205.88 L1690.89 1205.88 L1690.31 1205.88 L1689.72 1205.88 L1689.13 1205.88 L1688.55 1205.88 L1687.96 1205.88 L1687.37 1205.88 L1686.79 1205.88 L1686.2 1205.88 L1685.62 1205.88 L1685.03 1205.88 L1684.44 1205.88 L1683.86 1205.88 L1683.27 1205.88 L1682.68 1205.88 L1682.1 1205.88 L1681.51 1205.88 L1680.92 1205.88 L1680.34 1205.88 L1679.75 1205.88 L1679.17 1205.88 L1678.58 1205.88 L1677.99 1205.88 L1677.41 1205.88 L1676.82 1205.88 L1676.23 1205.88 L1675.65 1205.88 L1675.06 1205.88 L1674.47 1205.88 L1673.89 1205.88 L1673.3 1205.88 L1672.71 1205.88 L1672.13 1205.88 L1671.54 1205.88 L1670.96 1205.88 L1670.37 1205.88 L1669.78 1205.88 L1669.2 1205.88 L1668.61 1205.88 L1668.02 1205.88 L1667.44 1205.88 L1666.85 1205.88 L1666.26 1205.88 L1665.68 1205.88 L1665.09 1205.88 L1664.5 1205.88 L1663.92 1205.88 L1663.33 1205.88 L1662.75 1205.88 L1662.16 1205.88 L1661.57 1205.88 L1660.99 1205.88 L1660.4 1205.88 L1659.81 1205.88 L1659.23 1205.88 L1658.64 1205.88 L1658.05 1205.88 L1657.47 1205.88 L1656.88 1205.88 L1656.29 1205.88 L1655.71 1205.88 L1655.12 1205.88 L1654.54 1205.88 L1653.95 1205.88 L1653.36 1205.88 L1652.78 1205.88 L1652.19 1205.88 L1651.6 1205.88 L1651.02 1205.88 L1650.43 1205.88 L1649.84 1205.88 L1649.26 1205.88 L1648.67 1205.88 L1648.09 1205.88 L1647.5 1205.88 L1646.91 1205.88 L1646.33 1205.88 L1645.74 1205.88 L1645.15 1205.88 L1644.57 1205.88 L1643.98 1205.88 L1643.39 1205.88 L1642.81 1205.88 L1642.22 1205.88 L1641.63 1205.88 L1641.05 1205.88 L1640.46 1205.88 L1639.88 1205.88 L1639.29 1205.88 L1638.7 1205.88 L1638.12 1205.88 L1637.53 1205.88 L1636.94 1205.88 L1636.36 1205.88 L1635.77 1205.88 L1635.18 1205.88 L1634.6 1205.88 L1634.01 1205.88 L1633.42 1205.88 L1632.84 1205.88 L1632.25 1205.88 L1631.67 1205.88 L1631.08 1205.88 L1630.49 1205.88 L1629.91 1205.88 L1629.32 1205.88 L1628.73 1205.88 L1628.15 1205.88 L1627.56 1205.88 L1626.97 1205.88 L1626.39 1205.88 L1625.8 1205.88 L1625.22 1205.88 L1624.63 1205.88 L1624.04 1205.88 L1623.46 1205.88 L1622.87 1205.88 L1622.28 1205.88 L1621.7 1205.88 L1621.11 1205.88 L1620.52 1205.88 L1619.94 1205.88 L1619.35 1205.88 L1618.76 1205.88 L1618.18 1205.88 L1617.59 1205.88 L1617.01 1205.88 L1616.42 1205.88 L1615.83 1205.88 L1615.25 1205.88 L1614.66 1205.88 L1614.07 1205.88 L1613.49 1205.88 L1612.9 1205.88 L1612.31 1205.88 L1611.73 1205.88 L1611.14 1205.88 L1610.55 1205.88 L1609.97 1205.88 L1609.38 1205.88 L1608.8 1205.88 L1608.21 1205.88 L1607.62 1205.88 L1607.04 1205.88 L1606.45 1205.88 L1605.86 1205.88 L1605.28 1205.88 L1604.69 1205.88 L1604.1 1205.88 L1603.52 1205.88 L1602.93 1205.88 L1602.34 1205.88 L1601.76 1205.88 L1601.17 1205.88 L1600.59 1205.88 L1600 1205.88 L1599.41 1205.88 L1598.83 1205.88 L1598.24 1205.88 L1597.65 1205.88 L1597.07 1205.88 L1596.48 1205.88 L1595.89 1205.88 L1595.31 1205.88 L1594.72 1205.88 L1594.14 1205.88 L1593.55 1205.88 L1592.96 1205.88 L1592.38 1205.88 L1591.79 1205.88 L1591.2 1205.88 L1590.62 1205.88 L1590.03 1205.88 L1589.44 1205.88 L1588.86 1205.88 L1588.27 1205.88 L1587.68 1205.88 L1587.1 1205.88 L1586.51 1205.88 L1585.93 1205.88 L1585.34 1205.88 L1584.75 1205.88 L1584.17 1205.88 L1583.58 1205.88 L1582.99 1205.88 L1582.41 1205.88 L1581.82 1205.88 L1581.23 1205.88 L1580.65 1205.88 L1580.06 1205.88 L1579.47 1205.88 L1578.89 1205.88 L1578.3 1205.88 L1577.72 1205.88 L1577.13 1205.88 L1576.54 1205.88 L1575.96 1205.88 L1575.37 1205.88 L1574.78 1205.88 L1574.2 1205.88 L1573.61 1205.88 L1573.02 1205.88 L1572.44 1205.88 L1571.85 1205.88 L1571.27 1205.88 L1570.68 1205.88 L1570.09 1205.88 L1569.51 1205.88 L1568.92 1205.88 L1568.33 1205.88 L1567.75 1205.88 L1567.16 1205.88 L1566.57 1205.88 L1565.99 1205.88 L1565.4 1205.88 L1564.81 1205.88 L1564.23 1205.88 L1563.64 1205.88 L1563.06 1205.88 L1562.47 1205.88 L1561.88 1205.88 L1561.3 1205.88 L1560.71 1205.88 L1560.12 1205.88 L1559.54 1205.88 L1558.95 1205.88 L1558.36 1205.88 L1557.78 1205.88 L1557.19 1205.88 L1556.6 1205.88 L1556.02 1205.88 L1555.43 1205.88 L1554.85 1205.88 L1554.26 1205.88 L1553.67 1205.88 L1553.09 1205.88 L1552.5 1205.88 L1551.91 1205.88 L1551.33 1205.88 L1550.74 1205.88 L1550.15 1205.88 L1549.57 1205.88 L1548.98 1205.88 L1548.4 1205.88 L1547.81 1205.88 L1547.22 1205.88 L1546.64 1205.88 L1546.05 1205.88 L1545.46 1205.88 L1544.88 1205.88 L1544.29 1205.88 L1543.7 1205.88 L1543.12 1205.88 L1542.53 1205.88 L1541.94 1205.88 L1541.36 1205.88 L1540.77 1205.88 L1540.19 1205.88 L1539.6 1205.88 L1539.01 1205.88 L1538.43 1205.88 L1537.84 1205.88 L1537.25 1205.88 L1536.67 1205.88 L1536.08 1205.88 L1535.49 1205.88 L1534.91 1205.88 L1534.32 1205.88 L1533.73 1205.88 L1533.15 1205.88 L1532.56 1205.88 L1531.98 1205.88 L1531.39 1205.88 L1530.8 1205.88 L1530.22 1205.88 L1529.63 1205.88 L1529.04 1205.88 L1528.46 1205.88 L1527.87 1205.88 L1527.28 1205.88 L1526.7 1205.88 L1526.11 1205.88 L1525.52 1205.88 L1524.94 1205.88 L1524.35 1205.88 L1523.77 1205.88 L1523.18 1205.88 L1522.59 1205.88 L1522.01 1205.88 L1521.42 1205.88 L1520.83 1205.88 L1520.25 1205.88 L1519.66 1205.88 L1519.07 1205.88 L1518.49 1205.88 L1517.9 1205.88 L1517.32 1205.88 L1516.73 1205.88 L1516.14 1205.88 L1515.56 1205.88 L1514.97 1205.88 L1514.38 1205.88 L1513.8 1205.88 L1513.21 1205.88 L1512.62 1205.88 L1512.04 1205.88 L1511.45 1205.88 L1510.86 1205.88 L1510.28 1205.88 L1509.69 1205.88 L1509.11 1205.88 L1508.52 1205.88 L1507.93 1205.88 L1507.35 1205.88 L1506.76 1205.88 L1506.17 1205.88 L1505.59 1205.88 L1505 1205.88 L1504.41 1205.88 L1503.83 1205.88 L1503.24 1205.88 L1502.65 1205.88 L1502.07 1205.88 L1501.48 1205.88 L1500.9 1205.88 L1500.31 1205.88 L1499.72 1205.88 L1499.14 1205.88 L1498.55 1205.88 L1497.96 1205.88 L1497.38 1205.88 L1496.79 1205.88 L1496.2 1205.88 L1495.62 1205.88 L1495.03 1205.88 L1494.45 1205.88 L1493.86 1205.88 L1493.27 1205.88 L1492.69 1205.88 L1492.1 1205.88 L1491.51 1205.88 L1490.93 1205.88 L1490.34 1205.88 L1489.75 1205.88 L1489.17 1205.88 L1488.58 1205.88 L1487.99 1205.88 L1487.41 1205.88 L1486.82 1205.88 L1486.24 1205.88 L1485.65 1205.88 L1485.06 1205.88 L1484.48 1205.88 L1483.89 1205.88 L1483.3 1205.88 L1482.72 1205.88 L1482.13 1205.88 L1481.54 1205.88 L1480.96 1205.88 L1480.37 1205.88 L1479.78 1205.88 L1479.2 1205.88 L1478.61 1205.88 L1478.03 1205.88 L1477.44 1205.88 L1476.85 1205.88 L1476.27 1205.88 L1475.68 1205.88 L1475.09 1205.88 L1474.51 1205.88 L1473.92 1205.88 L1473.33 1205.88 L1472.75 1205.88 L1472.16 1205.88 L1471.57 1205.88 L1470.99 1205.88 L1470.4 1205.88 L1469.82 1205.88 L1469.23 1205.88 L1468.64 1205.88 L1468.06 1205.88 L1467.47 1205.88 L1466.88 1205.88 L1466.3 1205.88 L1465.71 1205.88 L1465.12 1205.88 L1464.54 1205.88 L1463.95 1205.88 L1463.37 1205.88 L1462.78 1205.88 L1462.19 1205.88 L1461.61 1205.88 L1461.02 1205.88 L1460.43 1205.88 L1459.85 1205.88 L1459.26 1205.88 L1458.67 1205.88 L1458.09 1205.88 L1457.5 1205.88 L1456.91 1205.88 L1456.33 1205.88 L1455.74 1205.88 L1455.16 1205.88 L1454.57 1205.88 L1453.98 1205.88 L1453.4 1205.88 L1452.81 1205.88 L1452.22 1205.88 L1451.64 1205.88 L1451.05 1205.88 L1450.46 1205.88 L1449.88 1205.88 L1449.29 1205.88 L1448.7 1205.88 L1448.12 1205.88 L1447.53 1205.88 L1446.95 1205.88 L1446.36 1205.88 L1445.77 1205.88 L1445.19 1205.88 L1444.6 1205.88 L1444.01 1205.88 L1443.43 1205.88 L1442.84 1205.88 L1442.25 1205.88 L1441.67 1205.88 L1441.08 1205.88 L1440.5 1205.88 L1439.91 1205.88 L1439.32 1205.88 L1438.74 1205.88 L1438.15 1205.88 L1437.56 1205.88 L1436.98 1205.88 L1436.39 1205.88 L1435.8 1205.88 L1435.22 1205.88 L1434.63 1205.88 L1434.04 1205.88 L1433.46 1205.88 L1432.87 1205.88 L1432.29 1205.88 L1431.7 1205.88 L1431.11 1205.88 L1430.53 1205.88 L1429.94 1205.88 L1429.35 1205.88 L1428.77 1205.88 L1428.18 1205.88 L1427.59 1205.88 L1427.01 1205.88 L1426.42 1205.88 L1425.83 1205.88 L1425.25 1205.88 L1424.66 1205.88 L1424.08 1205.88 L1423.49 1205.88 L1422.9 1205.88 L1422.32 1205.88 L1421.73 1205.88 L1421.14 1205.88 L1420.56 1205.88 L1419.97 1205.88 L1419.38 1205.88 L1418.8 1205.88 L1418.21 1205.88 L1417.63 1205.88 L1417.04 1205.88 L1416.45 1205.88 L1415.87 1205.88 L1415.28 1205.88 L1414.69 1205.88 L1414.11 1205.88 L1413.52 1205.88 L1412.93 1205.88 L1412.35 1205.88 L1411.76 1205.88 L1411.17 1205.88 L1410.59 1205.88 L1410 1205.88 L1409.42 1205.88 L1408.83 1205.88 L1408.24 1205.88 L1407.66 1205.88 L1407.07 1205.88 L1406.48 1205.88 L1405.9 1205.88 L1405.31 1205.88 L1404.72 1205.88 L1404.14 1205.88 L1403.55 1205.88 L1402.96 1205.88 L1402.38 1205.88 L1401.79 1205.88 L1401.21 1205.88 L1400.62 1205.88 L1400.03 1205.88 L1399.45 1205.88 L1398.86 1205.88 L1398.27 1205.88 L1397.69 1205.88 L1397.1 1205.88 L1396.51 1205.88 L1395.93 1205.88 L1395.34 1205.88 L1394.75 1205.88 L1394.17 1205.88 L1393.58 1205.88 L1393 1205.88 L1392.41 1205.88 L1391.82 1205.88 L1391.24 1205.88 L1390.65 1205.88 L1390.06 1205.88 L1389.48 1205.88 L1388.89 1205.88 L1388.3 1205.88 L1387.72 1205.88 L1387.13 1205.88 L1386.55 1205.88 L1385.96 1205.88 L1385.37 1205.88 L1384.79 1205.88 L1384.2 1205.88 L1383.61 1205.88 L1383.03 1205.88 L1382.44 1205.88 L1381.85 1205.88 L1381.27 1205.88 L1380.68 1205.88 L1380.09 1205.88 L1379.51 1205.88 L1378.92 1205.88 L1378.34 1205.88 L1377.75 1205.88 L1377.16 1205.88 L1376.58 1205.88 L1375.99 1205.88 L1375.4 1205.88 L1374.82 1205.88 L1374.23 1205.88 L1373.64 1205.88 L1373.06 1205.88 L1372.47 1205.88 L1371.88 1205.88 L1371.3 1205.88 L1370.71 1205.88 L1370.13 1205.88 L1369.54 1205.88 L1368.95 1205.88 L1368.37 1205.88 L1367.78 1205.88 L1367.19 1205.88 L1366.61 1205.88 L1366.02 1205.88 L1365.43 1205.88 L1364.85 1205.88 L1364.26 1205.88 L1363.68 1205.88 L1363.09 1205.88 L1362.5 1205.88 L1361.92 1205.88 L1361.33 1205.88 L1360.74 1205.88 L1360.16 1205.88 L1359.57 1205.88 L1358.98 1205.88 L1358.4 1205.88 L1357.81 1205.88 L1357.22 1205.88 L1356.64 1205.88 L1356.05 1205.88 L1355.47 1205.88 L1354.88 1205.88 L1354.29 1205.88 L1353.71 1205.88 L1353.12 1205.88 L1352.53 1205.88 L1351.95 1205.88 L1351.36 1205.88 L1350.77 1205.88 L1350.19 1205.88 L1349.6 1205.88 L1349.01 1205.88 L1348.43 1205.88 L1347.84 1205.88 L1347.26 1205.88 L1346.67 1205.88 L1346.08 1205.88 L1345.5 1205.88 L1344.91 1205.88 L1344.32 1205.88 L1343.74 1205.88 L1343.15 1205.88 L1342.56 1205.88 L1341.98 1205.88 L1341.39 1205.88 L1340.8 1205.88 L1340.22 1205.88 L1339.63 1205.88 L1339.05 1205.88 L1338.46 1205.88 L1337.87 1205.88 L1337.29 1205.88 L1336.7 1205.88 L1336.11 1205.88 L1335.53 1205.88 L1334.94 1205.88 L1334.35 1205.88 L1333.77 1205.88 L1333.18 1205.88 L1332.6 1205.88 L1332.01 1205.88 L1331.42 1205.88 L1330.84 1205.88 L1330.25 1205.88 L1329.66 1205.88 L1329.08 1205.88 L1328.49 1205.88 L1327.9 1205.88 L1327.32 1205.88 L1326.73 1205.88 L1326.14 1205.88 L1325.56 1205.88 L1324.97 1205.88 L1324.39 1205.88 L1323.8 1205.88 L1323.21 1205.88 L1322.63 1205.88 L1322.04 1205.88 L1321.45 1205.88 L1320.87 1205.88 L1320.28 1205.88 L1319.69 1205.88 L1319.11 1205.88 L1318.52 1205.88 L1317.93 1205.88 L1317.35 1205.88 L1316.76 1205.88 L1316.18 1205.88 L1315.59 1205.88 L1315 1205.88 L1314.42 1205.88 L1313.83 1205.88 L1313.24 1205.88 L1312.66 1205.88 L1312.07 1205.88 L1311.48 1205.88 L1310.9 1205.88 L1310.31 1205.88 L1309.73 1205.88 L1309.14 1205.88 L1308.55 1205.88 L1307.97 1205.88 L1307.38 1205.88 L1306.79 1205.88 L1306.21 1205.88 L1305.62 1205.88 L1305.03 1205.88 L1304.45 1205.88 L1303.86 1205.88 L1303.27 1205.88 L1302.69 1205.88 L1302.1 1205.88 L1301.52 1205.88 L1300.93 1205.88 L1300.34 1205.88 L1299.76 1205.88 L1299.17 1205.88 L1298.58 1205.88 L1298 1205.88 L1297.41 1205.88 L1296.82 1205.88 L1296.24 1205.88 L1295.65 1205.88 L1295.06 1205.88 L1294.48 1205.88 L1293.89 1205.88 L1293.31 1205.88 L1292.72 1205.88 L1292.13 1205.88 L1291.55 1205.88 L1290.96 1205.88 L1290.37 1205.88 L1289.79 1205.88 L1289.2 1205.88 L1288.61 1205.88 L1288.03 1205.88 L1287.44 1205.88 L1286.86 1205.88 L1286.27 1205.88 L1285.68 1205.88 L1285.1 1205.88 L1284.51 1205.88 L1283.92 1205.88 L1283.34 1205.88 L1282.75 1205.88 L1282.16 1205.88 L1281.58 1205.88 L1280.99 1205.88 L1280.4 1205.88 L1279.82 1205.88 L1279.23 1205.88 L1278.65 1205.88 L1278.06 1205.88 L1277.47 1205.88 L1276.89 1205.88 L1276.3 1205.88 L1275.71 1205.88 L1275.13 1205.88 L1274.54 1205.88 L1273.95 1205.88 L1273.37 1205.88 L1272.78 1205.88 L1272.19 1205.88 L1271.61 1205.88 L1271.02 1205.88 L1270.44 1205.88 L1269.85 1205.88 L1269.26 1205.88 L1268.68 1205.88 L1268.09 1205.88 L1267.5 1205.88 L1266.92 1205.88 L1266.33 1205.88 L1265.74 1205.88 L1265.16 1205.88 L1264.57 1205.88 L1263.98 1205.88 L1263.4 1205.88 L1262.81 1205.88 L1262.23 1205.88 L1261.64 1205.88 L1261.05 1205.88 L1260.47 1205.88 L1259.88 1205.88 L1259.29 1205.88 L1258.71 1205.88 L1258.12 1205.88 L1257.53 1205.88 L1256.95 1205.88 L1256.36 1205.88 L1255.78 1205.88 L1255.19 1205.88 L1254.6 1205.88 L1254.02 1205.88 L1253.43 1205.88 L1252.84 1205.88 L1252.26 1205.88 L1251.67 1205.88 L1251.08 1205.88 L1250.5 1205.88 L1249.91 1205.88 L1249.32 1205.88 L1248.74 1205.88 L1248.15 1205.88 L1247.57 1205.88 L1246.98 1205.88 L1246.39 1205.88 L1245.81 1205.88 L1245.22 1205.88 L1244.63 1205.88 L1244.05 1205.88 L1243.46 1205.88 L1242.87 1205.88 L1242.29 1205.88 L1241.7 1205.88 L1241.11 1205.88 L1240.53 1205.88 L1239.94 1205.88 L1239.36 1205.88 L1238.77 1205.88 L1238.18 1205.88 L1237.6 1205.88 L1237.01 1205.88 L1236.42 1205.88 L1235.84 1205.88 L1235.25 1205.88 L1234.66 1205.88 L1234.08 1205.88 L1233.49 1205.88 L1232.91 1205.88 L1232.32 1205.88 L1231.73 1205.88 L1231.15 1205.88 L1230.56 1205.88 L1229.97 1205.88 L1229.39 1205.88 L1228.8 1205.88 L1228.21 1205.88 L1227.63 1205.88 L1227.04 1205.88 L1226.45 1205.88 L1225.87 1205.88 L1225.28 1205.88 L1224.7 1205.88 L1224.11 1205.88 L1223.52 1205.88 L1222.94 1205.88 L1222.35 1205.88 L1221.76 1205.88 L1221.18 1205.88 L1220.59 1205.88 L1220 1205.88 L1219.42 1205.88 L1218.83 1205.88 L1218.24 1205.88 L1217.66 1205.88 L1217.07 1205.88 L1216.49 1205.88 L1215.9 1205.88 L1215.31 1205.88 L1214.73 1205.88 L1214.14 1205.88 L1213.55 1205.88 L1212.97 1205.88 L1212.38 1205.88 L1211.79 1205.88 L1211.21 1205.88 L1210.62 1205.88 L1210.03 1205.88 L1209.45 1205.88 L1208.86 1205.88 L1208.28 1205.88 L1207.69 1205.88 L1207.1 1205.88 L1206.52 1205.88 L1205.93 1205.88 L1205.34 1205.88 L1204.76 1205.88 L1204.17 1205.88 L1203.58 1205.88 L1203 1205.88 L1202.41 1205.88 L1201.83 1205.88 L1201.24 1205.88 L1200.65 1205.88 L1200.07 1205.88 L1199.48 1205.88 L1198.89 1205.88 L1198.31 1205.88 L1197.72 1205.88 L1197.13 1205.88 L1196.55 1205.88 L1195.96 1205.88 L1195.37 1205.88 L1194.79 1205.88 L1194.2 1205.88 L1193.62 1205.88 L1193.03 1205.88 L1192.44 1205.88 L1191.86 1205.88 L1191.27 1205.88 L1190.68 1205.88 L1190.1 1205.88 L1189.51 1205.88 L1188.92 1205.88 L1188.34 1205.88 L1187.75 1205.88 L1187.16 1205.88 L1186.58 1205.88 L1185.99 1205.88 L1185.41 1205.88 L1184.82 1205.88 L1184.23 1205.88 L1183.65 1205.88 L1183.06 1205.88 L1182.47 1205.88 L1181.89 1205.88 L1181.3 1205.88 L1180.71 1205.88 L1180.13 1205.88 L1179.54 1205.88 L1178.96 1205.88 L1178.37 1205.88 L1177.78 1205.88 L1177.2 1205.88 L1176.61 1205.88 L1176.02 1205.88 L1175.44 1205.88 L1174.85 1205.88 L1174.26 1205.88 L1173.68 1205.88 L1173.09 1205.88 L1172.5 1205.88 L1171.92 1205.88 L1171.33 1205.88 L1170.75 1205.88 L1170.16 1205.88 L1169.57 1205.88 L1168.99 1205.88 L1168.4 1205.88 L1167.81 1205.88 L1167.23 1205.88 L1166.64 1205.88 L1166.05 1205.88 L1165.47 1205.88 L1164.88 1205.88 L1164.29 1205.88 L1163.71 1205.88 L1163.12 1205.88 L1162.54 1205.88 L1161.95 1205.88 L1161.36 1205.88 L1160.78 1205.88 L1160.19 1205.88 L1159.6 1205.88 L1159.02 1205.88 L1158.43 1205.88 L1157.84 1205.88 L1157.26 1205.88 L1156.67 1205.88 L1156.09 1205.88 L1155.5 1205.88 L1154.91 1205.88 L1154.33 1205.88 L1153.74 1205.88 L1153.15 1205.88 L1152.57 1205.88 L1151.98 1205.88 L1151.39 1205.88 L1150.81 1205.88 L1150.22 1205.88 L1149.63 1205.88 L1149.05 1205.88 L1148.46 1205.88 L1147.88 1205.88 L1147.29 1205.88 L1146.7 1205.88 L1146.12 1205.88 L1145.53 1205.88 L1144.94 1205.88 L1144.36 1205.88 L1143.77 1205.88 L1143.18 1205.88 L1142.6 1205.88 L1142.01 1205.88 L1141.42 1205.88 L1140.84 1205.88 L1140.25 1205.88 L1139.67 1205.88 L1139.08 1205.88 L1138.49 1205.88 L1137.91 1205.88 L1137.32 1205.88 L1136.73 1205.88 L1136.15 1205.88 L1135.56 1205.88 L1134.97 1205.88 L1134.39 1205.88 L1133.8 1205.88 L1133.21 1205.88 L1132.63 1205.88 L1132.04 1205.88 L1131.46 1205.88 L1130.87 1205.88 L1130.28 1205.88 L1129.7 1205.88 L1129.11 1205.88 L1128.52 1205.88 L1127.94 1205.88 L1127.35 1205.88 L1126.76 1205.88 L1126.18 1205.88 L1125.59 1205.88 L1125.01 1205.88 L1124.42 1205.88 L1123.83 1205.88 L1123.25 1205.88 L1122.66 1205.88 L1122.07 1205.88 L1121.49 1205.88 L1120.9 1205.88 L1120.31 1205.88 L1119.73 1205.88 L1119.14 1205.88 L1118.55 1205.88 L1117.97 1205.88 L1117.38 1205.88 L1116.8 1205.88 L1116.21 1205.88 L1115.62 1205.88 L1115.04 1205.88 L1114.45 1205.88 L1113.86 1205.88 L1113.28 1205.88 L1112.69 1205.88 L1112.1 1205.88 L1111.52 1205.88 L1110.93 1205.88 L1110.34 1205.88 L1109.76 1205.88 L1109.17 1205.88 L1108.59 1205.88 L1108 1205.88 L1107.41 1205.88 L1106.83 1205.88 L1106.24 1205.88 L1105.65 1205.88 L1105.07 1205.88 L1104.48 1205.88 L1103.89 1205.88 L1103.31 1205.88 L1102.72 1205.88 L1102.14 1205.88 L1101.55 1205.88 L1100.96 1205.88 L1100.38 1205.88 L1099.79 1205.88 L1099.2 1205.88 L1098.62 1205.88 L1098.03 1205.88 L1097.44 1205.88 L1096.86 1205.88 L1096.27 1205.88 L1095.68 1205.88 L1095.1 1205.88 L1094.51 1205.88 L1093.93 1205.88 L1093.34 1205.88 L1092.75 1205.88 L1092.17 1205.88 L1091.58 1205.88 L1090.99 1205.88 L1090.41 1205.88 L1089.82 1205.88 L1089.23 1205.88 L1088.65 1205.88 L1088.06 1205.88 L1087.47 1205.88 L1086.89 1205.88 L1086.3 1205.88 L1085.72 1205.88 L1085.13 1205.88 L1084.54 1205.88 L1083.96 1205.88 L1083.37 1205.88 L1082.78 1205.88 L1082.2 1205.88 L1081.61 1205.88 L1081.02 1205.88 L1080.44 1205.88 L1079.85 1205.88 L1079.26 1205.88 L1078.68 1205.88 L1078.09 1205.88 L1077.51 1205.88 L1076.92 1205.88 L1076.33 1205.88 L1075.75 1205.88 L1075.16 1205.88 L1074.57 1205.88 L1073.99 1205.88 L1073.4 1205.88 L1072.81 1205.88 L1072.23 1205.88 L1071.64 1205.88 L1071.06 1205.88 L1070.47 1205.88 L1069.88 1205.88 L1069.3 1205.88 L1068.71 1205.88 L1068.12 1205.88 L1067.54 1205.88 L1066.95 1205.88 L1066.36 1205.88 L1065.78 1205.88 L1065.19 1205.88 L1064.6 1205.88 L1064.02 1205.88 L1063.43 1205.88 L1062.85 1205.88 L1062.26 1205.88 L1061.67 1205.88 L1061.09 1205.88 L1060.5 1205.88 L1059.91 1205.88 L1059.33 1205.88 L1058.74 1205.88 L1058.15 1205.88 L1057.57 1205.88 L1056.98 1205.88 L1056.39 1205.88 L1055.81 1205.88 L1055.22 1205.88 L1054.64 1205.88 L1054.05 1205.88 L1053.46 1205.88 L1052.88 1205.88 L1052.29 1205.88 L1051.7 1205.88 L1051.12 1205.88 L1050.53 1205.88 L1049.94 1205.88 L1049.36 1205.88 L1048.77 1205.88 L1048.19 1205.88 L1047.6 1205.88 L1047.01 1205.88 L1046.43 1205.88 L1045.84 1205.88 L1045.25 1205.88 L1044.67 1205.88 L1044.08 1205.88 L1043.49 1205.88 L1042.91 1205.88 L1042.32 1205.88 L1041.73 1205.88 L1041.15 1205.88 L1040.56 1205.88 L1039.98 1205.88 L1039.39 1205.88 L1038.8 1205.88 L1038.22 1205.88 L1037.63 1205.88 L1037.04 1205.88 L1036.46 1205.88 L1035.87 1205.88 L1035.28 1205.88 L1034.7 1205.88 L1034.11 1205.88 L1033.52 1205.88 L1032.94 1205.88 L1032.35 1205.88 L1031.77 1205.88 L1031.18 1205.88 L1030.59 1205.88 L1030.01 1205.88 L1029.42 1205.88 L1028.83 1205.88 L1028.25 1205.88 L1027.66 1205.88 L1027.07 1205.88 L1026.49 1205.88 L1025.9 1205.88 L1025.32 1205.88 L1024.73 1205.88 L1024.14 1205.88 L1023.56 1205.88 L1022.97 1205.88 L1022.38 1205.88 L1021.8 1205.88 L1021.21 1205.88 L1020.62 1205.88 L1020.04 1205.88 L1019.45 1205.88 L1018.86 1205.88 L1018.28 1205.88 L1017.69 1205.88 L1017.11 1205.88 L1016.52 1205.88 L1015.93 1205.88 L1015.35 1205.88 L1014.76 1205.88 L1014.17 1205.88 L1013.59 1205.88 L1013 1205.88 L1012.41 1205.88 L1011.83 1205.88 L1011.24 1205.88 L1010.65 1205.88 L1010.07 1205.88 L1009.48 1205.88 L1008.9 1205.88 L1008.31 1205.88 L1007.72 1205.88 L1007.14 1205.88 L1006.55 1205.88 L1005.96 1205.88 L1005.38 1205.88 L1004.79 1205.88 L1004.2 1205.88 L1003.62 1205.88 L1003.03 1205.88 L1002.44 1205.88 L1001.86 1205.88 L1001.27 1205.88 L1000.69 1205.88 L1000.1 1205.88 L999.513 1205.88 L998.926 1205.88 L998.34 1205.88 L997.754 1205.88 L997.167 1205.88 L996.581 1205.88 L995.994 1205.88 L995.408 1205.88 L994.822 1205.88 L994.235 1205.88 L993.649 1205.88 L993.062 1205.88 L992.476 1205.88 L991.889 1205.88 L991.303 1205.88 L990.717 1205.88 L990.13 1205.88 L989.544 1205.88 L988.957 1205.88 L988.371 1205.88 L987.785 1205.88 L987.198 1205.88 L986.612 1205.88 L986.025 1205.88  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.01 986.612,1206.01 987.198,1206.01 987.785,1206.01 988.371,1206.01 988.957,1206.01 989.544,1206.01 990.13,1206.01 990.717,1206.01 991.303,1206.01 991.889,1206.01 992.476,1206.01 993.062,1206.01 993.649,1206.01 994.235,1206.01 994.822,1206.01 995.408,1206.01 995.994,1206.01 996.581,1206.01 997.167,1206.01 997.754,1206.01 998.34,1206.01 998.926,1206.01 999.513,1206.01 1000.1,1206.01 1000.69,1206.01 1001.27,1206.01 1001.86,1206.01 1002.44,1206.01 1003.03,1206.01 1003.62,1206.01 1004.2,1206.01 1004.79,1206.01 1005.38,1206.01 1005.96,1206.01 1006.55,1206.01 1007.14,1206.01 1007.72,1206.01 1008.31,1206.01 1008.9,1206.01 1009.48,1206.01 1010.07,1206.01 1010.65,1206.01 1011.24,1206.01 1011.83,1206.01 1012.41,1206.01 1013,1206.01 1013.59,1206.01 1014.17,1206.01 1014.76,1206.01 1015.35,1206.01 1015.93,1206.01 1016.52,1206.01 1017.11,1206.01 1017.69,1206.01 1018.28,1206.01 1018.86,1206.01 1019.45,1206.01 1020.04,1206.01 1020.62,1206.01 1021.21,1206.01 1021.8,1206.01 1022.38,1206.01 1022.97,1206.01 1023.56,1206.01 1024.14,1206.01 1024.73,1206.01 1025.32,1206.01 1025.9,1206.01 1026.49,1206.01 1027.07,1206.01 1027.66,1206.01 1028.25,1206.01 1028.83,1206.01 1029.42,1206.01 1030.01,1206.01 1030.59,1206.01 1031.18,1206.01 1031.77,1206.01 1032.35,1206.01 1032.94,1206.01 1033.52,1206.01 1034.11,1206.01 1034.7,1206.01 1035.28,1206.01 1035.87,1206.01 1036.46,1206.01 1037.04,1206.01 1037.63,1206.01 1038.22,1206.01 1038.8,1206.01 1039.39,1206.01 1039.98,1206.01 1040.56,1206.01 1041.15,1206.01 1041.73,1206.01 1042.32,1206.01 1042.91,1206.01 1043.49,1206.01 1044.08,1206.01 1044.67,1206.01 1045.25,1206.01 1045.84,1206.01 1046.43,1206.01 1047.01,1206.01 1047.6,1206.01 1048.19,1206.01 1048.77,1206.01 1049.36,1206.01 1049.94,1206.01 1050.53,1206.01 1051.12,1206.01 1051.7,1206.01 1052.29,1206.01 1052.88,1206.01 1053.46,1206.01 1054.05,1206.01 1054.64,1206.01 1055.22,1206.01 1055.81,1206.01 1056.39,1206.01 1056.98,1206.01 1057.57,1206.01 1058.15,1206.01 1058.74,1206.01 1059.33,1206.01 1059.91,1206.01 1060.5,1206.01 1061.09,1206.01 1061.67,1206.01 1062.26,1206.01 1062.85,1206.01 1063.43,1206.01 1064.02,1206.01 1064.6,1206.01 1065.19,1206.01 1065.78,1206.01 1066.36,1206.01 1066.95,1206.01 1067.54,1206.01 1068.12,1206.01 1068.71,1206.01 1069.3,1206.01 1069.88,1206.01 1070.47,1206.01 1071.06,1206.01 1071.64,1206.01 1072.23,1206.01 1072.81,1206.01 1073.4,1206.01 1073.99,1206.01 1074.57,1206.01 1075.16,1206.01 1075.75,1206.01 1076.33,1206.01 1076.92,1206.01 1077.51,1206.01 1078.09,1206.01 1078.68,1206.01 1079.26,1206.01 1079.85,1206.01 1080.44,1206.01 1081.02,1206.01 1081.61,1206.01 1082.2,1206.01 1082.78,1206.01 1083.37,1206.01 1083.96,1206.01 1084.54,1206.01 1085.13,1206.01 1085.72,1206.01 1086.3,1206.01 1086.89,1206.01 1087.47,1206.01 1088.06,1206.01 1088.65,1206.01 1089.23,1206.01 1089.82,1206.01 1090.41,1206.01 1090.99,1206.01 1091.58,1206.01 1092.17,1206.01 1092.75,1206.01 1093.34,1206.01 1093.93,1206.01 1094.51,1206.01 1095.1,1206.01 1095.68,1206.01 1096.27,1206.01 1096.86,1206.01 1097.44,1206.01 1098.03,1206.01 1098.62,1206.01 1099.2,1206.01 1099.79,1206.01 1100.38,1206.01 1100.96,1206.01 1101.55,1206.01 1102.14,1206.01 1102.72,1206.01 1103.31,1206.01 1103.89,1206.01 1104.48,1206.01 1105.07,1206.01 1105.65,1206.01 1106.24,1206.01 1106.83,1206.01 1107.41,1206.01 1108,1206.01 1108.59,1206.01 1109.17,1206.01 1109.76,1206.01 1110.34,1206.01 1110.93,1206.01 1111.52,1206.01 1112.1,1206.01 1112.69,1206.01 1113.28,1206.01 1113.86,1206.01 1114.45,1206.01 1115.04,1206.01 1115.62,1206.01 1116.21,1206.01 1116.8,1206.01 1117.38,1206.01 1117.97,1206.01 1118.55,1206.01 1119.14,1206.01 1119.73,1206.01 1120.31,1206.01 1120.9,1206.01 1121.49,1206.01 1122.07,1206.01 1122.66,1206.01 1123.25,1206.01 1123.83,1206.01 1124.42,1206.01 1125.01,1206.01 1125.59,1206.01 1126.18,1206.01 1126.76,1206.01 1127.35,1206.01 1127.94,1206.01 1128.52,1206.01 1129.11,1206.01 1129.7,1206.01 1130.28,1206.01 1130.87,1206.01 1131.46,1206.01 1132.04,1206.01 1132.63,1206.01 1133.21,1206.01 1133.8,1206.01 1134.39,1206.01 1134.97,1206.01 1135.56,1206.01 1136.15,1206.01 1136.73,1206.01 1137.32,1206.01 1137.91,1206.01 1138.49,1206.01 1139.08,1206.01 1139.67,1206.01 1140.25,1206.01 1140.84,1206.01 1141.42,1206.01 1142.01,1206.01 1142.6,1206.01 1143.18,1206.01 1143.77,1206.01 1144.36,1206.01 1144.94,1206.01 1145.53,1206.01 1146.12,1206.01 1146.7,1206.01 1147.29,1206.01 1147.88,1206.01 1148.46,1206.01 1149.05,1206.01 1149.63,1206.01 1150.22,1206.01 1150.81,1206.01 1151.39,1206.01 1151.98,1206.01 1152.57,1206.01 1153.15,1206.01 1153.74,1206.01 1154.33,1206.01 1154.91,1206.01 1155.5,1206.01 1156.09,1206.01 1156.67,1206.01 1157.26,1206.01 1157.84,1206.01 1158.43,1206.01 1159.02,1206.01 1159.6,1206.01 1160.19,1206.01 1160.78,1206.01 1161.36,1206.01 1161.95,1206.01 1162.54,1206.01 1163.12,1206.01 1163.71,1206.01 1164.29,1206.01 1164.88,1206.01 1165.47,1206.01 1166.05,1206.01 1166.64,1206.01 1167.23,1206.01 1167.81,1206.01 1168.4,1206.01 1168.99,1206.01 1169.57,1206.01 1170.16,1206.01 1170.75,1206.01 1171.33,1206.01 1171.92,1206.01 1172.5,1206.01 1173.09,1206.01 1173.68,1206.01 1174.26,1206.01 1174.85,1206.01 1175.44,1206.01 1176.02,1206.01 1176.61,1206.01 1177.2,1206.01 1177.78,1206.01 1178.37,1206.01 1178.96,1206.01 1179.54,1206.01 1180.13,1206.01 1180.71,1206.01 1181.3,1206.01 1181.89,1206.01 1182.47,1206.01 1183.06,1206.01 1183.65,1206.01 1184.23,1206.01 1184.82,1206.01 1185.41,1206.01 1185.99,1206.01 1186.58,1206.01 1187.16,1206.01 1187.75,1206.01 1188.34,1206.01 1188.92,1206.01 1189.51,1206.01 1190.1,1206.01 1190.68,1206.01 1191.27,1206.01 1191.86,1206.01 1192.44,1206.01 1193.03,1206.01 1193.62,1206.01 1194.2,1206.01 1194.79,1206.01 1195.37,1206.01 1195.96,1206.01 1196.55,1206.01 1197.13,1206.01 1197.72,1206.01 1198.31,1206.01 1198.89,1206.01 1199.48,1206.01 1200.07,1206.01 1200.65,1206.01 1201.24,1206.01 1201.83,1206.01 1202.41,1206.01 1203,1206.01 1203.58,1206.01 1204.17,1206.01 1204.76,1206.01 1205.34,1206.01 1205.93,1206.01 1206.52,1206.01 1207.1,1206.01 1207.69,1206.01 1208.28,1206.01 1208.86,1206.01 1209.45,1206.01 1210.03,1206.01 1210.62,1206.01 1211.21,1206.01 1211.79,1206.01 1212.38,1206.01 1212.97,1206.01 1213.55,1206.01 1214.14,1206.01 1214.73,1206.01 1215.31,1206.01 1215.9,1206.01 1216.49,1206.01 1217.07,1206.01 1217.66,1206.01 1218.24,1206.01 1218.83,1206.01 1219.42,1206.01 1220,1206.01 1220.59,1206.01 1221.18,1206.01 1221.76,1206.01 1222.35,1206.01 1222.94,1206.01 1223.52,1206.01 1224.11,1206.01 1224.7,1206.01 1225.28,1206.01 1225.87,1206.01 1226.45,1206.01 1227.04,1206.01 1227.63,1206.01 1228.21,1206.01 1228.8,1206.01 1229.39,1206.01 1229.97,1206.01 1230.56,1206.01 1231.15,1206.01 1231.73,1206.01 1232.32,1206.01 1232.91,1206.01 1233.49,1206.01 1234.08,1206.01 1234.66,1206.01 1235.25,1206.01 1235.84,1206.01 1236.42,1206.01 1237.01,1206.01 1237.6,1206.01 1238.18,1206.01 1238.77,1206.01 1239.36,1206.01 1239.94,1206.01 1240.53,1206.01 1241.11,1206.01 1241.7,1206.01 1242.29,1206.01 1242.87,1206.01 1243.46,1206.01 1244.05,1206.01 1244.63,1206.01 1245.22,1206.01 1245.81,1206.01 1246.39,1206.01 1246.98,1206.01 1247.57,1206.01 1248.15,1206.01 1248.74,1206.01 1249.32,1206.01 1249.91,1206.01 1250.5,1206.01 1251.08,1206.01 1251.67,1206.01 1252.26,1206.01 1252.84,1206.01 1253.43,1206.01 1254.02,1206.01 1254.6,1206.01 1255.19,1206.01 1255.78,1206.01 1256.36,1206.01 1256.95,1206.01 1257.53,1206.01 1258.12,1206.01 1258.71,1206.01 1259.29,1206.01 1259.88,1206.01 1260.47,1206.01 1261.05,1206.01 1261.64,1206.01 1262.23,1206.01 1262.81,1206.01 1263.4,1206.01 1263.98,1206.01 1264.57,1206.01 1265.16,1206.01 1265.74,1206.01 1266.33,1206.01 1266.92,1206.01 1267.5,1206.01 1268.09,1206.01 1268.68,1206.01 1269.26,1206.01 1269.85,1206.01 1270.44,1206.01 1271.02,1206.01 1271.61,1206.01 1272.19,1206.01 1272.78,1206.01 1273.37,1206.01 1273.95,1206.01 1274.54,1206.01 1275.13,1206.01 1275.71,1206.01 1276.3,1206.01 1276.89,1206.01 1277.47,1206.01 1278.06,1206.01 1278.65,1206.01 1279.23,1206.01 1279.82,1206.01 1280.4,1206.01 1280.99,1206.01 1281.58,1206.01 1282.16,1206.01 1282.75,1206.01 1283.34,1206.01 1283.92,1206.01 1284.51,1206.01 1285.1,1206.01 1285.68,1206.01 1286.27,1206.01 1286.86,1206.01 1287.44,1206.01 1288.03,1206.01 1288.61,1206.01 1289.2,1206.01 1289.79,1206.01 1290.37,1206.01 1290.96,1206.01 1291.55,1206.01 1292.13,1206.01 1292.72,1206.01 1293.31,1206.01 1293.89,1206.01 1294.48,1206.01 1295.06,1206.01 1295.65,1206.01 1296.24,1206.01 1296.82,1206.01 1297.41,1206.01 1298,1206.01 1298.58,1206.01 1299.17,1206.01 1299.76,1206.01 1300.34,1206.01 1300.93,1206.01 1301.52,1206.01 1302.1,1206.01 1302.69,1206.01 1303.27,1206.01 1303.86,1206.01 1304.45,1206.01 1305.03,1206.01 1305.62,1206.01 1306.21,1206.01 1306.79,1206.01 1307.38,1206.01 1307.97,1206.01 1308.55,1206.01 1309.14,1206.01 1309.73,1206.01 1310.31,1206.01 1310.9,1206.01 1311.48,1206.01 1312.07,1206.01 1312.66,1206.01 1313.24,1206.01 1313.83,1206.01 1314.42,1206.01 1315,1206.01 1315.59,1206.01 1316.18,1206.01 1316.76,1206.01 1317.35,1206.01 1317.93,1206.01 1318.52,1206.01 1319.11,1206.01 1319.69,1206.01 1320.28,1206.01 1320.87,1206.01 1321.45,1206.01 1322.04,1206.01 1322.63,1206.01 1323.21,1206.01 1323.8,1206.01 1324.39,1206.01 1324.97,1206.01 1325.56,1206.01 1326.14,1206.01 1326.73,1206.01 1327.32,1206.01 1327.9,1206.01 1328.49,1206.01 1329.08,1206.01 1329.66,1206.01 1330.25,1206.01 1330.84,1206.01 1331.42,1206.01 1332.01,1206.01 1332.6,1206.01 1333.18,1206.01 1333.77,1206.01 1334.35,1206.01 1334.94,1206.01 1335.53,1206.01 1336.11,1206.01 1336.7,1206.01 1337.29,1206.01 1337.87,1206.01 1338.46,1206.01 1339.05,1206.01 1339.63,1206.01 1340.22,1206.01 1340.8,1206.01 1341.39,1206.01 1341.98,1206.01 1342.56,1206.01 1343.15,1206.01 1343.74,1206.01 1344.32,1206.01 1344.91,1206.01 1345.5,1206.01 1346.08,1206.01 1346.67,1206.01 1347.26,1206.01 1347.84,1206.01 1348.43,1206.01 1349.01,1206.01 1349.6,1206.01 1350.19,1206.01 1350.77,1206.01 1351.36,1206.01 1351.95,1206.01 1352.53,1206.01 1353.12,1206.01 1353.71,1206.01 1354.29,1206.01 1354.88,1206.01 1355.47,1206.01 1356.05,1206.01 1356.64,1206.01 1357.22,1206.01 1357.81,1206.01 1358.4,1206.01 1358.98,1206.01 1359.57,1206.01 1360.16,1206.01 1360.74,1206.01 1361.33,1206.01 1361.92,1206.01 1362.5,1206.01 1363.09,1206.01 1363.68,1206.01 1364.26,1206.01 1364.85,1206.01 1365.43,1206.01 1366.02,1206.01 1366.61,1206.01 1367.19,1206.01 1367.78,1206.01 1368.37,1206.01 1368.95,1206.01 1369.54,1206.01 1370.13,1206.01 1370.71,1206.01 1371.3,1206.01 1371.88,1206.01 1372.47,1206.01 1373.06,1206.01 1373.64,1206.01 1374.23,1206.01 1374.82,1206.01 1375.4,1206.01 1375.99,1206.01 1376.58,1206.01 1377.16,1206.01 1377.75,1206.01 1378.34,1206.01 1378.92,1206.01 1379.51,1206.01 1380.09,1206.01 1380.68,1206.01 1381.27,1206.01 1381.85,1206.01 1382.44,1206.01 1383.03,1206.01 1383.61,1206.01 1384.2,1206.01 1384.79,1206.01 1385.37,1206.01 1385.96,1206.01 1386.55,1206.01 1387.13,1206.01 1387.72,1206.01 1388.3,1206.01 1388.89,1206.01 1389.48,1206.01 1390.06,1206.01 1390.65,1206.01 1391.24,1206.01 1391.82,1206.01 1392.41,1206.01 1393,1206.01 1393.58,1206.01 1394.17,1206.01 1394.75,1206.01 1395.34,1206.01 1395.93,1206.01 1396.51,1206.01 1397.1,1206.01 1397.69,1206.01 1398.27,1206.01 1398.86,1206.01 1399.45,1206.01 1400.03,1206.01 1400.62,1206.01 1401.21,1206.01 1401.79,1206.01 1402.38,1206.01 1402.96,1206.01 1403.55,1206.01 1404.14,1206.01 1404.72,1206.01 1405.31,1206.01 1405.9,1206.01 1406.48,1206.01 1407.07,1206.01 1407.66,1206.01 1408.24,1206.01 1408.83,1206.01 1409.42,1206.01 1410,1206.01 1410.59,1206.01 1411.17,1206.01 1411.76,1206.01 1412.35,1206.01 1412.93,1206.01 1413.52,1206.01 1414.11,1206.01 1414.69,1206.01 1415.28,1206.01 1415.87,1206.01 1416.45,1206.01 1417.04,1206.01 1417.63,1206.01 1418.21,1206.01 1418.8,1206.01 1419.38,1206.01 1419.97,1206.01 1420.56,1206.01 1421.14,1206.01 1421.73,1206.01 1422.32,1206.01 1422.9,1206.01 1423.49,1206.01 1424.08,1206.01 1424.66,1206.01 1425.25,1206.01 1425.83,1206.01 1426.42,1206.01 1427.01,1206.01 1427.59,1206.01 1428.18,1206.01 1428.77,1206.01 1429.35,1206.01 1429.94,1206.01 1430.53,1206.01 1431.11,1206.01 1431.7,1206.01 1432.29,1206.01 1432.87,1206.01 1433.46,1206.01 1434.04,1206.01 1434.63,1206.01 1435.22,1206.01 1435.8,1206.01 1436.39,1206.01 1436.98,1206.01 1437.56,1206.01 1438.15,1206.01 1438.74,1206.01 1439.32,1206.01 1439.91,1206.01 1440.5,1206.01 1441.08,1206.01 1441.67,1206.01 1442.25,1206.01 1442.84,1206.01 1443.43,1206.01 1444.01,1206.01 1444.6,1206.01 1445.19,1206.01 1445.77,1206.01 1446.36,1206.01 1446.95,1206.01 1447.53,1206.01 1448.12,1206.01 1448.7,1206.01 1449.29,1206.01 1449.88,1206.01 1450.46,1206.01 1451.05,1206.01 1451.64,1206.01 1452.22,1206.01 1452.81,1206.01 1453.4,1206.01 1453.98,1206.01 1454.57,1206.01 1455.16,1206.01 1455.74,1206.01 1456.33,1206.01 1456.91,1206.01 1457.5,1206.01 1458.09,1206.01 1458.67,1206.01 1459.26,1206.01 1459.85,1206.01 1460.43,1206.01 1461.02,1206.01 1461.61,1206.01 1462.19,1206.01 1462.78,1206.01 1463.37,1206.01 1463.95,1206.01 1464.54,1206.01 1465.12,1206.01 1465.71,1206.01 1466.3,1206.01 1466.88,1206.01 1467.47,1206.01 1468.06,1206.01 1468.64,1206.01 1469.23,1206.01 1469.82,1206.01 1470.4,1206.01 1470.99,1206.01 1471.57,1206.01 1472.16,1206.01 1472.75,1206.01 1473.33,1206.01 1473.92,1206.01 1474.51,1206.01 1475.09,1206.01 1475.68,1206.01 1476.27,1206.01 1476.85,1206.01 1477.44,1206.01 1478.03,1206.01 1478.61,1206.01 1479.2,1206.01 1479.78,1206.01 1480.37,1206.01 1480.96,1206.01 1481.54,1206.01 1482.13,1206.01 1482.72,1206.01 1483.3,1206.01 1483.89,1206.01 1484.48,1206.01 1485.06,1206.01 1485.65,1206.01 1486.24,1206.01 1486.82,1206.01 1487.41,1206.01 1487.99,1206.01 1488.58,1206.01 1489.17,1206.01 1489.75,1206.01 1490.34,1206.01 1490.93,1206.01 1491.51,1206.01 1492.1,1206.01 1492.69,1206.01 1493.27,1206.01 1493.86,1206.01 1494.45,1206.01 1495.03,1206.01 1495.62,1206.01 1496.2,1206.01 1496.79,1206.01 1497.38,1206.01 1497.96,1206.01 1498.55,1206.01 1499.14,1206.01 1499.72,1206.01 1500.31,1206.01 1500.9,1206.01 1501.48,1206.01 1502.07,1206.01 1502.65,1206.01 1503.24,1206.01 1503.83,1206.01 1504.41,1206.01 1505,1206.01 1505.59,1206.01 1506.17,1206.01 1506.76,1206.01 1507.35,1206.01 1507.93,1206.01 1508.52,1206.01 1509.11,1206.01 1509.69,1206.01 1510.28,1206.01 1510.86,1206.01 1511.45,1206.01 1512.04,1206.01 1512.62,1206.01 1513.21,1206.01 1513.8,1206.01 1514.38,1206.01 1514.97,1206.01 1515.56,1206.01 1516.14,1206.01 1516.73,1206.01 1517.32,1206.01 1517.9,1206.01 1518.49,1206.01 1519.07,1206.01 1519.66,1206.01 1520.25,1206.01 1520.83,1206.01 1521.42,1206.01 1522.01,1206.01 1522.59,1206.01 1523.18,1206.01 1523.77,1206.01 1524.35,1206.01 1524.94,1206.01 1525.52,1206.01 1526.11,1206.01 1526.7,1206.01 1527.28,1206.01 1527.87,1206.01 1528.46,1206.01 1529.04,1206.01 1529.63,1206.01 1530.22,1206.01 1530.8,1206.01 1531.39,1206.01 1531.98,1206.01 1532.56,1206.01 1533.15,1206.01 1533.73,1206.01 1534.32,1206.01 1534.91,1206.01 1535.49,1206.01 1536.08,1206.01 1536.67,1206.01 1537.25,1206.01 1537.84,1206.01 1538.43,1206.01 1539.01,1206.01 1539.6,1206.01 1540.19,1206.01 1540.77,1206.01 1541.36,1206.01 1541.94,1206.01 1542.53,1206.01 1543.12,1206.01 1543.7,1206.01 1544.29,1206.01 1544.88,1206.01 1545.46,1206.01 1546.05,1206.01 1546.64,1206.01 1547.22,1206.01 1547.81,1206.01 1548.4,1206.01 1548.98,1206.01 1549.57,1206.01 1550.15,1206.01 1550.74,1206.01 1551.33,1206.01 1551.91,1206.01 1552.5,1206.01 1553.09,1206.01 1553.67,1206.01 1554.26,1206.01 1554.85,1206.01 1555.43,1206.01 1556.02,1206.01 1556.6,1206.01 1557.19,1206.01 1557.78,1206.01 1558.36,1206.01 1558.95,1206.01 1559.54,1206.01 1560.12,1206.01 1560.71,1206.01 1561.3,1206.01 1561.88,1206.01 1562.47,1206.01 1563.06,1206.01 1563.64,1206.01 1564.23,1206.01 1564.81,1206.01 1565.4,1206.01 1565.99,1206.01 1566.57,1206.01 1567.16,1206.01 1567.75,1206.01 1568.33,1206.01 1568.92,1206.01 1569.51,1206.01 1570.09,1206.01 1570.68,1206.01 1571.27,1206.01 1571.85,1206.01 1572.44,1206.01 1573.02,1206.01 1573.61,1206.01 1574.2,1206.01 1574.78,1206.01 1575.37,1206.01 1575.96,1206.01 1576.54,1206.01 1577.13,1206.01 1577.72,1206.01 1578.3,1206.01 1578.89,1206.01 1579.47,1206.01 1580.06,1206.01 1580.65,1206.01 1581.23,1206.01 1581.82,1206.01 1582.41,1206.01 1582.99,1206.01 1583.58,1206.01 1584.17,1206.01 1584.75,1206.01 1585.34,1206.01 1585.93,1206.01 1586.51,1206.01 1587.1,1206.01 1587.68,1206.01 1588.27,1206.01 1588.86,1206.01 1589.44,1206.01 1590.03,1206.01 1590.62,1206.01 1591.2,1206.01 1591.79,1206.01 1592.38,1206.01 1592.96,1206.01 1593.55,1206.01 1594.14,1206.01 1594.72,1206.01 1595.31,1206.01 1595.89,1206.01 1596.48,1206.01 1597.07,1206.01 1597.65,1206.01 1598.24,1206.01 1598.83,1206.01 1599.41,1206.01 1600,1206.01 1600.59,1206.01 1601.17,1206.01 1601.76,1206.01 1602.34,1206.01 1602.93,1206.01 1603.52,1206.01 1604.1,1206.01 1604.69,1206.01 1605.28,1206.01 1605.86,1206.01 1606.45,1206.01 1607.04,1206.01 1607.62,1206.01 1608.21,1206.01 1608.8,1206.01 1609.38,1206.01 1609.97,1206.01 1610.55,1206.01 1611.14,1206.01 1611.73,1206.01 1612.31,1206.01 1612.9,1206.01 1613.49,1206.01 1614.07,1206.01 1614.66,1206.01 1615.25,1206.01 1615.83,1206.01 1616.42,1206.01 1617.01,1206.01 1617.59,1206.01 1618.18,1206.01 1618.76,1206.01 1619.35,1206.01 1619.94,1206.01 1620.52,1206.01 1621.11,1206.01 1621.7,1206.01 1622.28,1206.01 1622.87,1206.01 1623.46,1206.01 1624.04,1206.01 1624.63,1206.01 1625.22,1206.01 1625.8,1206.01 1626.39,1206.01 1626.97,1206.01 1627.56,1206.01 1628.15,1206.01 1628.73,1206.01 1629.32,1206.01 1629.91,1206.01 1630.49,1206.01 1631.08,1206.01 1631.67,1206.01 1632.25,1206.01 1632.84,1206.01 1633.42,1206.01 1634.01,1206.01 1634.6,1206.01 1635.18,1206.01 1635.77,1206.01 1636.36,1206.01 1636.94,1206.01 1637.53,1206.01 1638.12,1206.01 1638.7,1206.01 1639.29,1206.01 1639.88,1206.01 1640.46,1206.01 1641.05,1206.01 1641.63,1206.01 1642.22,1206.01 1642.81,1206.01 1643.39,1206.01 1643.98,1206.01 1644.57,1206.01 1645.15,1206.01 1645.74,1206.01 1646.33,1206.01 1646.91,1206.01 1647.5,1206.01 1648.09,1206.01 1648.67,1206.01 1649.26,1206.01 1649.84,1206.01 1650.43,1206.01 1651.02,1206.01 1651.6,1206.01 1652.19,1206.01 1652.78,1206.01 1653.36,1206.01 1653.95,1206.01 1654.54,1206.01 1655.12,1206.01 1655.71,1206.01 1656.29,1206.01 1656.88,1206.01 1657.47,1206.01 1658.05,1206.01 1658.64,1206.01 1659.23,1206.01 1659.81,1206.01 1660.4,1206.01 1660.99,1206.01 1661.57,1206.01 1662.16,1206.01 1662.75,1206.01 1663.33,1206.01 1663.92,1206.01 1664.5,1206.01 1665.09,1206.01 1665.68,1206.01 1666.26,1206.01 1666.85,1206.01 1667.44,1206.01 1668.02,1206.01 1668.61,1206.01 1669.2,1206.01 1669.78,1206.01 1670.37,1206.01 1670.96,1206.01 1671.54,1206.01 1672.13,1206.01 1672.71,1206.01 1673.3,1206.01 1673.89,1206.01 1674.47,1206.01 1675.06,1206.01 1675.65,1206.01 1676.23,1206.01 1676.82,1206.01 1677.41,1206.01 1677.99,1206.01 1678.58,1206.01 1679.17,1206.01 1679.75,1206.01 1680.34,1206.01 1680.92,1206.01 1681.51,1206.01 1682.1,1206.01 1682.68,1206.01 1683.27,1206.01 1683.86,1206.01 1684.44,1206.01 1685.03,1206.01 1685.62,1206.01 1686.2,1206.01 1686.79,1206.01 1687.37,1206.01 1687.96,1206.01 1688.55,1206.01 1689.13,1206.01 1689.72,1206.01 1690.31,1206.01 1690.89,1206.01 1691.48,1206.01 1692.07,1206.01 1692.65,1206.01 1693.24,1206.01 1693.83,1206.01 1694.41,1206.01 1695,1206.01 1695.58,1206.01 1696.17,1206.01 1696.76,1206.01 1697.34,1206.01 1697.93,1206.01 1698.52,1206.01 1699.1,1206.01 1699.69,1206.01 1700.28,1206.01 1700.86,1206.01 1701.45,1206.01 1702.04,1206.01 1702.62,1206.01 1703.21,1206.01 1703.79,1206.01 1704.38,1206.01 1704.97,1206.01 1705.55,1206.01 1706.14,1206.01 1706.73,1206.01 1707.31,1206.01 1707.9,1206.01 1708.49,1206.01 1709.07,1206.01 1709.66,1206.01 1710.24,1206.01 1710.83,1206.01 1711.42,1206.01 1712,1206.01 1712.59,1206.01 1713.18,1206.01 1713.76,1206.01 1714.35,1206.01 1714.94,1206.01 1715.52,1206.01 1716.11,1206.01 1716.7,1206.01 1717.28,1206.01 1717.87,1206.01 1718.45,1206.01 1719.04,1206.01 1719.63,1206.01 1720.21,1206.01 1720.8,1206.01 1721.39,1206.01 1721.97,1206.01 1722.56,1206.01 1723.15,1206.01 1723.73,1206.01 1724.32,1206.01 1724.91,1206.01 1725.49,1206.01 1726.08,1206.01 1726.66,1206.01 1727.25,1206.01 1727.84,1206.01 1728.42,1206.01 1729.01,1206.01 1729.6,1206.01 1730.18,1206.01 1730.77,1206.01 1731.36,1206.01 1731.94,1206.01 1732.53,1206.01 1733.11,1206.01 1733.7,1206.01 1734.29,1206.01 1734.87,1206.01 1735.46,1206.01 1736.05,1206.01 1736.63,1206.01 1737.22,1206.01 1737.81,1206.01 1738.39,1206.01 1738.98,1206.01 1739.57,1206.01 1740.15,1206.01 1740.74,1206.01 1741.32,1206.01 1741.91,1206.01 1742.5,1206.01 1743.08,1206.01 1743.67,1206.01 1744.26,1206.01 1744.84,1206.01 1745.43,1206.01 1746.02,1206.01 1746.6,1206.01 1747.19,1206.01 1747.78,1206.01 1748.36,1206.01 1748.95,1206.01 1749.53,1206.01 1750.12,1206.01 1750.71,1206.01 1751.29,1206.01 1751.88,1206.01 1752.47,1206.01 1753.05,1206.01 1753.64,1206.01 1754.23,1206.01 1754.81,1206.01 1755.4,1206.01 1755.99,1206.01 1756.57,1206.01 1757.16,1206.01 1757.74,1206.01 1758.33,1206.01 1758.92,1206.01 1759.5,1206.01 1760.09,1206.01 1760.68,1206.01 1761.26,1206.01 1761.85,1206.01 1762.44,1206.01 1763.02,1206.01 1763.61,1206.01 1764.19,1206.01 1764.78,1206.01 1765.37,1206.01 1765.95,1206.01 1766.54,1206.01 1767.13,1206.01 1767.71,1206.01 1768.3,1206.01 1768.89,1206.01 1769.47,1206.01 1770.06,1206.01 1770.65,1206.01 1771.23,1206.01 1771.82,1206.01 1772.4,1206.01 1772.99,1206.01 1773.58,1206.01 1774.16,1206.01 1774.75,1206.01 1775.34,1206.01 1775.92,1206.01 1776.51,1206.01 1777.1,1206.01 1777.68,1206.01 1778.27,1206.01 1778.86,1206.01 1779.44,1206.01 1780.03,1206.01 1780.61,1206.01 1781.2,1206.01 1781.79,1206.01 1782.37,1206.01 1782.96,1206.01 1783.55,1206.01 1784.13,1206.01 1784.72,1206.01 1785.31,1206.01 1785.89,1206.01 1786.48,1206.01 1787.06,1206.01 1787.65,1206.01 1788.24,1206.01 1788.82,1206.01 1789.41,1206.01 1790,1206.01 1790.58,1206.01 1791.17,1206.01 1791.76,1206.01 1792.34,1206.01 1792.93,1206.01 1793.52,1206.01 1794.1,1206.01 1794.69,1206.01 1795.27,1206.01 1795.86,1206.01 1796.45,1206.01 1797.03,1206.01 1797.62,1206.01 1798.21,1206.01 1798.79,1206.01 1799.38,1206.01 1799.97,1206.01 1800.55,1206.01 1801.14,1206.01 1801.73,1206.01 1802.31,1206.01 1802.9,1206.01 1803.48,1206.01 1804.07,1206.01 1804.66,1206.01 1805.24,1206.01 1805.83,1206.01 1806.42,1206.01 1807,1206.01 1807.59,1206.01 1808.18,1206.01 1808.76,1206.01 1809.35,1206.01 1809.94,1206.01 1810.52,1206.01 1811.11,1206.01 1811.69,1206.01 1812.28,1206.01 1812.87,1206.01 1813.45,1206.01 1814.04,1206.01 1814.63,1206.01 1815.21,1206.01 1815.8,1206.01 1816.39,1206.01 1816.97,1206.01 1817.56,1206.01 1818.14,1206.01 1818.73,1206.01 1819.32,1206.01 1819.9,1206.01 1820.49,1206.01 1821.08,1206.01 1821.66,1206.01 1822.25,1206.01 1822.84,1206.01 1823.42,1206.01 1824.01,1206.01 1824.6,1206.01 1825.18,1206.01 1825.77,1206.01 1826.35,1206.01 1826.94,1206.01 1827.53,1206.01 1828.11,1206.01 1828.7,1206.01 1829.29,1206.01 1829.87,1206.01 1830.46,1206.01 1831.05,1206.01 1831.63,1206.01 1832.22,1206.01 1832.81,1206.01 1833.39,1206.01 1833.98,1206.01 1834.56,1206.01 1835.15,1206.01 1835.74,1206.01 1836.32,1206.01 1836.91,1206.01 1837.5,1206.01 1838.08,1206.01 1838.67,1206.01 1839.26,1206.01 1839.84,1206.01 1840.43,1206.01 1841.01,1206.01 1841.6,1206.01 1842.19,1206.01 1842.77,1206.01 1843.36,1206.01 1843.95,1206.01 1844.53,1206.01 1845.12,1206.01 1845.71,1206.01 1846.29,1206.01 1846.88,1206.01 1847.47,1206.01 1848.05,1206.01 1848.64,1206.01 1849.22,1206.01 1849.81,1206.01 1850.4,1206.01 1850.98,1206.01 1851.57,1206.01 1852.16,1206.01 1852.74,1206.01 1853.33,1206.01 1853.92,1206.01 1854.5,1206.01 1855.09,1206.01 1855.68,1206.01 1856.26,1206.01 1856.85,1206.01 1857.43,1206.01 1858.02,1206.01 1858.61,1206.01 1859.19,1206.01 1859.78,1206.01 1860.37,1206.01 1860.95,1206.01 1861.54,1206.01 1862.13,1206.01 1862.71,1206.01 1863.3,1206.01 1863.88,1206.01 1864.47,1206.01 1865.06,1206.01 1865.64,1206.01 1866.23,1206.01 1866.82,1206.01 1867.4,1206.01 1867.99,1206.01 1868.58,1206.01 1869.16,1206.01 1869.75,1206.01 1870.34,1206.01 1870.92,1206.01 1871.51,1206.01 1872.09,1206.01 1872.68,1206.01 1873.27,1206.01 1873.85,1206.01 1874.44,1206.01 1875.03,1206.01 1875.61,1206.01 1876.2,1206.01 1876.79,1206.01 1877.37,1206.01 1877.96,1206.01 1878.55,1206.01 1879.13,1206.01 1879.72,1206.01 1880.3,1206.01 1880.89,1206.01 1881.48,1206.01 1882.06,1206.01 1882.65,1206.01 1883.24,1206.01 1883.82,1206.01 1884.41,1206.01 1885,1206.01 1885.58,1206.01 1886.17,1206.01 1886.76,1206.01 1887.34,1206.01 1887.93,1206.01 1888.51,1206.01 1889.1,1206.01 1889.69,1206.01 1890.27,1206.01 1890.86,1206.01 1891.45,1206.01 1892.03,1206.01 1892.62,1206.01 1893.21,1206.01 1893.79,1206.01 1894.38,1206.01 1894.96,1206.01 1895.55,1206.01 1896.14,1206.01 1896.72,1206.01 1897.31,1206.01 1897.9,1206.01 1898.48,1206.01 1899.07,1206.01 1899.66,1206.01 1900.24,1206.01 1900.83,1206.01 1901.42,1206.01 1902,1206.01 1902.59,1206.01 1903.17,1206.01 1903.76,1206.01 1904.35,1206.01 1904.93,1206.01 1905.52,1206.01 1906.11,1206.01 1906.69,1206.01 1907.28,1206.01 1907.87,1206.01 1908.45,1206.01 1909.04,1206.01 1909.63,1206.01 1910.21,1206.01 1910.8,1206.01 1911.38,1206.01 1911.97,1206.01 1912.56,1206.01 1913.14,1206.01 1913.73,1206.01 1914.32,1206.01 1914.9,1206.01 1915.49,1206.01 1916.08,1206.01 1916.66,1206.01 1917.25,1206.01 1917.83,1206.01 1918.42,1206.01 1919.01,1206.01 1919.59,1206.01 1920.18,1206.01 1920.77,1206.01 1921.35,1206.01 1921.94,1206.01 1922.53,1206.01 1923.11,1206.01 1923.7,1206.01 1924.29,1206.01 1924.87,1206.01 1925.46,1206.01 1926.04,1206.01 1926.63,1206.01 1927.22,1206.01 1927.8,1206.01 1928.39,1206.01 1928.98,1206.01 1929.56,1206.01 1930.15,1206.01 1930.74,1206.01 1931.32,1206.01 1931.91,1206.01 1932.5,1206.01 1933.08,1206.01 1933.67,1206.01 1934.25,1206.01 1934.84,1206.01 1935.43,1206.01 1936.01,1206.01 1936.6,1206.01 1937.19,1206.01 1937.77,1206.01 1938.36,1206.01 1938.95,1206.01 1939.53,1206.01 1940.12,1206.01 1940.71,1206.01 1941.29,1206.01 1941.88,1206.01 1942.46,1206.01 1943.05,1206.01 1943.64,1206.01 1944.22,1206.01 1944.81,1206.01 1945.4,1206.01 1945.98,1206.01 1946.57,1206.01 1947.16,1206.01 1947.74,1206.01 1948.33,1206.01 1948.91,1206.01 1949.5,1206.01 1950.09,1206.01 1950.67,1206.01 1951.26,1206.01 1951.85,1206.01 1952.43,1206.01 1953.02,1206.01 1953.61,1206.01 1954.19,1206.01 1954.78,1206.01 1955.37,1206.01 1955.95,1206.01 1956.54,1206.01 1957.12,1206.01 1957.71,1206.01 1958.3,1206.01 1958.88,1206.01 1959.47,1206.01 1960.06,1206.01 1960.64,1206.01 1961.23,1206.01 1961.82,1206.01 1962.4,1206.01 1962.99,1206.01 1963.58,1206.01 1964.16,1206.01 1964.75,1206.01 1965.33,1206.01 1965.92,1206.01 1966.51,1206.01 1967.09,1206.01 1967.68,1206.01 1968.27,1206.01 1968.85,1206.01 1969.44,1206.01 1970.03,1206.01 1970.61,1206.01 1971.2,1206.01 1971.78,1206.01 1972.37,1206.01 1972.96,1206.01 1973.54,1206.01 1974.13,1206.01 1974.72,1206.01 1975.3,1206.01 1975.89,1206.01 1976.48,1206.01 1977.06,1206.01 1977.65,1206.01 1978.24,1206.01 1978.82,1206.01 1979.41,1206.01 1979.99,1206.01 1980.58,1206.01 1981.17,1206.01 1981.75,1206.01 1982.34,1206.01 1982.93,1206.01 1983.51,1206.01 1984.1,1206.01 1984.69,1206.01 1985.27,1206.01 1985.86,1206.01 1986.45,1206.01 1987.03,1206.01 1987.62,1206.01 1988.2,1206.01 1988.79,1206.01 1989.38,1206.01 1989.96,1206.01 1990.55,1206.01 1991.14,1206.01 1991.72,1206.01 1992.31,1206.01 1992.9,1206.01 1993.48,1206.01 1994.07,1206.01 1994.65,1206.01 1995.24,1206.01 1995.83,1206.01 1996.41,1206.01 1997,1206.01 1997.59,1206.01 1998.17,1206.01 1998.76,1206.01 1999.35,1206.01 1999.93,1206.01 2000.52,1206.01 2001.11,1206.01 2001.69,1206.01 2002.28,1206.01 2002.86,1206.01 2003.45,1206.01 2004.04,1206.01 2004.62,1206.01 2005.21,1206.01 2005.8,1206.01 2006.38,1206.01 2006.97,1206.01 2007.56,1206.01 2008.14,1206.01 2008.73,1206.01 2009.32,1206.01 2009.9,1206.01 2010.49,1206.01 2011.07,1206.01 2011.66,1206.01 2012.25,1206.01 2012.83,1206.01 2013.42,1206.01 2014.01,1206.01 2014.59,1206.01 2015.18,1206.01 2015.77,1206.01 2016.35,1206.01 2016.94,1206.01 2017.53,1206.01 2018.11,1206.01 2018.7,1206.01 2019.28,1206.01 2019.87,1206.01 2020.46,1206.01 2021.04,1206.01 2021.63,1206.01 2022.22,1206.01 2022.8,1206.01 2023.39,1206.01 2023.98,1206.01 2024.56,1206.01 2025.15,1206.01 2025.73,1206.01 2026.32,1206.01 2026.91,1206.01 2027.49,1206.01 2028.08,1206.01 2028.67,1206.01 2029.25,1206.01 2029.84,1206.01 2030.43,1206.01 2031.01,1206.01 2031.6,1206.01 2032.19,1206.01 2032.77,1206.01 2033.36,1206.01 2033.94,1206.01 2034.53,1206.01 2035.12,1206.01 2035.7,1206.01 2036.29,1206.01 2036.88,1206.01 2037.46,1206.01 2038.05,1206.01 2038.64,1206.01 2039.22,1206.01 2039.81,1206.01 2040.4,1206.01 2040.98,1206.01 2041.57,1206.01 2042.15,1206.01 2042.74,1206.01 2043.33,1206.01 2043.91,1206.01 2044.5,1206.01 2045.09,1206.01 2045.67,1206.01 2046.26,1206.01 2046.85,1206.01 2047.43,1206.01 2048.02,1206.01 2048.6,1206.01 2049.19,1206.01 2049.78,1206.01 2050.36,1206.01 2050.95,1206.01 2051.54,1206.01 2052.12,1206.01 2052.71,1206.01 2053.3,1206.01 2053.88,1206.01 2054.47,1206.01 2055.06,1206.01 2055.64,1206.01 2056.23,1206.01 2056.81,1206.01 2057.4,1206.01 2057.99,1206.01 2058.57,1206.01 2059.16,1206.01 2059.75,1206.01 2060.33,1206.01 2060.92,1206.01 2061.51,1206.01 2062.09,1206.01 2062.68,1206.01 2063.27,1206.01 2063.85,1206.01 2064.44,1206.01 2065.02,1206.01 2065.61,1206.01 2066.2,1206.01 2066.78,1206.01 2067.37,1206.01 2067.96,1206.01 2068.54,1206.01 2069.13,1206.01 2069.72,1206.01 2070.3,1206.01 2070.89,1206.01 2071.48,1206.01 2072.06,1206.01 2072.65,1206.01 2073.23,1206.01 2073.82,1206.01 2074.41,1206.01 2074.99,1206.01 2075.58,1206.01 2076.17,1206.01 2076.75,1206.01 2077.34,1206.01 2077.93,1206.01 2078.51,1206.01 2079.1,1206.01 2079.68,1206.01 2080.27,1206.01 2080.86,1206.01 2081.44,1206.01 2082.03,1206.01 2082.62,1206.01 2083.2,1206.01 2083.79,1206.01 2084.38,1206.01 2084.96,1206.01 2085.55,1206.01 2086.14,1206.01 2086.72,1206.01 2087.31,1206.01 2087.89,1206.01 2088.48,1206.01 2089.07,1206.01 2089.65,1206.01 2090.24,1206.01 2090.83,1206.01 2091.41,1206.01 2092,1206.01 2092.59,1206.01 2093.17,1206.01 2093.76,1206.01 2094.35,1206.01 2094.93,1206.01 2095.52,1206.01 2096.1,1206.01 2096.69,1206.01 2097.28,1206.01 2097.86,1206.01 2098.45,1206.01 2099.04,1206.01 2099.62,1206.01 2100.21,1206.01 2100.8,1206.01 2101.38,1206.01 2101.97,1206.01 2102.55,1206.01 2103.14,1206.01 2103.73,1206.01 2104.31,1206.01 2104.9,1206.01 2105.49,1206.01 2106.07,1206.01 2106.66,1206.01 2107.25,1206.01 2107.83,1206.01 2108.42,1206.01 2109.01,1206.01 2109.59,1206.01 2110.18,1206.01 2110.76,1206.01 2111.35,1206.01 2111.94,1206.01 2112.52,1206.01 2113.11,1206.01 2113.7,1206.01 2114.28,1206.01 2114.87,1206.01 2115.46,1206.01 2116.04,1206.01 2116.63,1206.01 2117.22,1206.01 2117.8,1206.01 2118.39,1206.01 2118.97,1206.01 2119.56,1206.01 2120.15,1206.01 2120.73,1206.01 2121.32,1206.01 2121.91,1206.01 2122.49,1206.01 2123.08,1206.01 2123.67,1206.01 2124.25,1206.01 2124.84,1206.01 2125.42,1206.01 2126.01,1206.01 2126.6,1206.01 2127.18,1206.01 2127.77,1206.01 2128.36,1206.01 2128.94,1206.01 2129.53,1206.01 2130.12,1206.01 2130.7,1206.01 2131.29,1206.01 2131.88,1206.01 2132.46,1206.01 2133.05,1206.01 2133.63,1206.01 2134.22,1206.01 2134.81,1206.01 2135.39,1206.01 2135.98,1206.01 2136.57,1206.01 2137.15,1206.01 2137.74,1206.01 2138.33,1206.01 2138.91,1206.01 2139.5,1206.01 2140.09,1206.01 2140.67,1206.01 2141.26,1206.01 2141.84,1206.01 2142.43,1206.01 2143.02,1206.01 2143.6,1206.01 2144.19,1206.01 2144.78,1206.01 2145.36,1206.01 2145.95,1206.01 2146.54,1206.01 2147.12,1206.01 2147.71,1206.01 2148.3,1206.01 2148.88,1206.01 2149.47,1206.01 2150.05,1206.01 2150.64,1206.01 2151.23,1206.01 2151.81,1206.01 2152.4,1206.01 2152.99,1206.01 2153.57,1206.01 2154.16,1206.01 2154.75,1206.01 2155.33,1206.01 2155.92,1206.01 2156.5,1206.01 2157.09,1206.01 2157.68,1206.01 2158.26,1206.01 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.91,1189.76 1400.8,899.083 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1221.82 985.439,1189.76 2158.26,1189.76 2158.26,1221.82 985.439,1221.82 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip943\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip943)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-11629.1 169.384,-11975.4 169.943,-11498.5 170.503,-11788.4 171.062,-12037.9 171.621,-12249.7 172.18,-12426.4 172.74,-12570.3 173.299,-12671.2 173.858,-12756.9 174.417,-12346 174.977,-12402.4 175.536,-12446.1 176.095,-11376.1 176.655,-11387.7 177.214,-11380.2 177.773,-11356 178.332,-11312 178.892,-11256.1 179.451,-10947.2 180.01,-10876.5 180.569,-10570.8 181.129,-10500.2 181.688,-10405 182.247,-10304.2 182.806,-9859.16 183.366,-9739.6 183.925,-9309.48 184.484,-9190.78 185.043,-8924.31 185.603,-8675.5 186.162,-8308.46 186.721,-8163.14 187.28,-8011.62 187.84,-7865.99 188.399,-7620.93 188.958,-7185.02 189.517,-6869.52 190.077,-6650.17 190.636,-6434.68 191.195,-6141.7 191.754,-5939.45 192.314,-5805.89 192.873,-5670.21 193.432,-5476.43 193.991,-5285.59 194.551,-5104.13 195.11,-4864.8 195.669,-4645.06 196.228,-4484.96 196.788,-4327.32 197.347,-4126.52 197.906,-3977.86 198.465,-3833.88 199.025,-3743.56 199.584,-3652.35 200.143,-3521.7 200.702,-3388.64 201.262,-3299.68 201.821,-3090.3 202.38,-2849.4 202.939,-2768.07 203.499,-2687.2 204.058,-2608.79 204.617,-2492.76 205.176,-2412.7 205.736,-2336.54 206.295,-2197.08 206.854,-2125.67 207.413,-2055.75 207.973,-1919.76 208.532,-1701.57 209.091,-1643.14 209.65,-1527.37 210.21,-1386.47 210.769,-1284.8 211.328,-1210.78 211.887,-1141.02 212.447,-1070.54 213.006,-1003.7 213.565,-957.199 214.124,-834.036 214.684,-797.828 215.243,-657.331 215.802,-576.356 216.361,-519.776 216.921,-441.406 217.48,-412.315 218.039,-338.511 218.598,-288.988 219.158,-240.123 219.717,-172.634 220.276,-175.298 220.835,-131.631 221.395,-63.7267 221.954,-23.2685 222.513,18.376 223.072,83.3065 223.632,144.22 224.191,180.715 224.75,195.831 225.309,251.317 225.869,290.319 226.428,345 226.987,356.233 227.546,346.807 228.106,397.683 228.665,427.532 229.224,474.25 229.783,462.282 230.343,474.159 230.902,522.76 231.461,568.354 232.02,611.528 232.58,614.781 233.139,622.542 233.698,667.629 234.257,692.21 234.817,732.596 235.376,753.599 235.935,757.429 236.494,796.896 237.054,798.246 237.613,834.457 238.172,854.673 238.731,874.054 239.291,871.211 239.85,886.518 240.409,886.749 240.968,905.07 241.528,960.581 242.087,973.339 242.646,969.819 243.205,982.476 243.765,996.817 244.324,1012.97 244.883,1023.43 245.442,1018.49 246.002,1012.7 246.561,1011.64 247.12,1006.05 247.679,1037.9 248.239,1048.41 248.798,1042.29 249.357,1034.55 249.916,1031.65 250.476,1076.73 251.035,1109.88 251.594,1117.91 252.153,1110.74 252.713,1065.77 253.272,1062.99 253.831,1091.28 254.39,1079.9 254.95,1039.09 255.509,1086.1 256.068,1081.42 256.627,1091.39 257.187,1102.13 257.746,1075.96 258.305,1102.68 258.864,1129.85 259.424,1121.03 259.983,1129.19 260.542,1137.37 261.101,1131.88 261.661,1121.8 262.22,1100.06 262.779,1095.72 263.338,1094.26 263.898,1102.92 264.457,1096.31 265.016,1090.3 265.575,1136.23 266.135,1127.25 266.694,1153.57 267.253,1145.58 267.812,1192.25 268.372,1199.3 268.931,1173.75 269.49,1202.64 270.049,1191 270.609,1164.56 271.168,1189.64 271.727,1160 272.286,1183.2 272.846,1202.98 273.405,1209.19 273.964,1181.22 274.523,1171.1 275.083,1144.71 275.642,1135.77 276.201,1127.11 276.76,1120.86 277.32,1107.14 277.879,1101.2 278.438,1129.17 278.997,1168.73 279.557,1160.23 280.116,1168.71 280.675,1158.46 281.234,1162.49 281.794,1186.63 282.353,1239.31 282.912,1270.54 283.471,1290.42 284.031,1272.81 284.59,1243.31 285.149,1227.45 285.708,1231.87 286.268,1217.68 286.827,1154.07 287.386,1109.4 287.945,1116.76 288.505,1110.21 289.064,1104.35 289.623,1096.9 290.182,1121.64 290.742,1097.01 291.301,1085.71 291.86,1060.32 292.419,1071.65 292.979,1080.72 293.538,1077.18 294.097,1121.62 294.656,1082.36 295.216,1077.1 295.775,1106.62 296.334,1113.27 296.893,1136.61 297.453,1127.21 298.012,1134.92 298.571,1142.3 299.13,1110.83 299.69,1102.38 300.249,1094.39 300.808,1086.58 301.368,1097.4 301.927,1104.44 302.486,1111.18 303.045,1095.45 303.605,1119.74 304.164,1092.79 304.723,1051.59 305.282,1061.22 305.842,1102.14 306.401,1092.69 306.96,1067.76 307.519,1078.58 308.079,1053.39 308.638,1061.98 309.197,1042.9 309.756,1035.89 310.316,1031.29 310.875,1010.59 311.434,1011.07 311.993,1005.49 312.553,997.379 313.112,975.099 313.671,970.003 314.23,981.935 314.79,992.614 315.349,1006 315.908,1019.79 316.467,1026.8 317.027,1002.96 317.586,977.461 318.145,971.401 318.704,963.809 319.264,976.597 319.823,972.895 320.382,985.173 320.941,980.648 321.501,977.984 322.06,954.591 322.619,919.252 323.178,870.732 323.738,874.742 324.297,876.285 324.856,893.575 325.415,877.758 325.975,878.237 326.534,878.234 327.093,843.416 327.652,842.484 328.212,863.298 328.771,925.383 329.33,920.605 329.889,900.819 330.449,901.608 331.008,898.436 331.567,880.554 332.126,912.835 332.686,929.228 333.245,943.325 333.804,956.835 334.363,969.163 334.923,980.128 335.482,956.363 336.041,904.579 336.6,920.783 337.16,947.079 337.719,939.732 338.278,950.115 338.837,959.075 339.397,952.584 339.956,932.2 340.515,947.239 341.074,937.64 341.634,964.995 342.193,941.891 342.752,987.421 343.311,1012.84 343.871,1006.91 344.43,982.724 344.989,971.748 345.548,933.854 346.108,930.555 346.667,880.71 347.226,893.97 347.785,878.284 348.345,877.999 348.904,890.814 349.463,889.234 350.022,876.079 350.582,935.707 351.141,908.954 351.7,872.227 352.259,886.774 352.819,885.999 353.378,885.257 353.937,932.645 354.496,911.608 355.056,923.714 355.615,920.755 356.174,928.285 356.733,973.966 357.293,967.064 357.852,941.276 358.411,954.015 358.97,914.172 359.53,894.057 360.089,906.772 360.648,902.584 361.207,914.299 361.767,879.522 362.326,858.227 362.885,856.238 363.444,854.044 364.004,867.301 364.563,866.098 365.122,914.918 365.681,896.466 366.241,893.689 366.8,890.346 367.359,885.892 367.918,897.05 368.478,875.887 369.037,859.214 369.596,876.126 370.155,876.632 370.715,907.138 371.274,903.653 371.833,903.796 372.392,886.028 372.952,865.774 373.511,880.864 374.07,892.918 374.629,921.63 375.189,918.473 375.748,913.609 376.307,910.324 376.866,940.993 377.426,951.373 377.985,976.485 378.544,967.544 379.103,938.715 379.663,948.044 380.222,955.672 380.781,946.807 381.34,922.086 381.9,936.38 382.459,960.137 383.018,919.935 383.577,913.804 384.137,893.57 384.696,903.225 385.255,894.768 385.814,903.632 386.374,912.795 386.933,910.075 387.492,953.035 388.051,911.837 388.611,956.586 389.17,947.508 389.729,940.643 390.288,928.347 390.848,903.514 391.407,933.193 391.966,894.717 392.525,919.737 393.085,867.101 393.644,878.461 394.203,888.519 394.762,897.363 395.322,875.975 395.881,857.833 396.44,885.536 396.999,849.768 397.559,878.756 398.118,874.592 398.677,887.9 399.236,896.872 399.796,907.499 400.355,886.455 400.914,849.459 401.473,878.006 402.033,889.709 402.592,864.811 403.151,859.546 403.71,873.697 404.27,888.409 404.829,868.516 405.388,830.556 405.947,846.306 406.507,843.271 407.066,819.637 407.625,818.133 408.184,799.314 408.744,785.122 409.303,815.209 409.862,795.236 410.421,774.11 410.981,772.787 411.54,769.021 412.099,771.06 412.658,802.914 413.218,802.378 413.777,817.267 414.336,817.429 414.895,796.946 415.455,795.131 416.014,793.336 416.573,793.011 417.132,806.575 417.692,774.868 418.251,793.903 418.81,796.411 419.369,780.822 419.929,798.627 420.488,780.315 421.047,777.351 421.606,760.607 422.166,734.671 422.725,720.825 423.284,691.923 423.843,710.601 424.403,684.043 424.962,722.086 425.521,723.4 426.08,743.27 426.64,740.23 427.199,744.502 427.758,727.774 428.318,732.921 428.877,735.159 429.436,722.819 429.995,739.877 430.555,760.522 431.114,731.545 431.673,766.076 432.232,716.028 432.792,674.123 433.351,695.682 433.91,703.855 434.469,710.696 435.029,743.483 435.588,746.265 436.147,762.923 436.706,748.19 437.266,713.434 437.825,700.817 438.384,689.543 438.943,723.4 439.503,722.706 440.062,757.463 440.621,791.681 441.18,807.3 441.74,817.235 442.299,831.896 442.858,811.763 443.417,843.069 443.977,834.372 444.536,845.658 445.095,824.552 445.654,872.991 446.214,850.982 446.773,845.279 447.332,859.085 447.891,851.769 448.451,877.91 449.01,874.024 449.569,901.48 450.128,906.374 450.688,900.343 451.247,860.84 451.806,873.225 452.365,899.09 452.925,909.461 453.484,883.794 454.043,832.533 454.602,844.255 455.162,885.246 455.721,890.721 456.28,867.305 456.839,861.271 457.399,838.073 457.958,847.854 458.517,860.706 459.076,824.729 459.636,834.304 460.195,813.924 460.754,793 461.313,789.535 461.873,854.033 462.432,831.435 462.991,828.21 463.55,772.771 464.11,770.843 464.669,784.447 465.228,815.723 465.787,812.11 466.347,807.989 466.906,819.355 467.465,815.515 468.024,795.871 468.584,781.074 469.143,781.71 469.702,777.87 470.261,747.019 470.821,744.079 471.38,743.171 471.939,727.234 472.498,746.64 473.058,764.318 473.617,697.844 474.176,732.671 474.735,732.799 475.295,733.908 475.854,718.506 476.413,735.237 476.972,739.058 477.532,739.687 478.091,740.958 478.65,738.697 479.209,722.31 479.769,754.778 480.328,755.49 480.887,738.087 481.446,738.409 482.006,723.685 482.565,722.973 483.124,756.695 483.683,740.133 484.243,706.197 484.802,709.786 485.361,697.107 485.92,682.871 486.48,715.172 487.039,714.512 487.598,734.023 488.157,752.115 488.717,751.369 489.276,750.192 489.835,767.339 490.394,781.876 490.954,794.615 491.513,780.215 492.072,778.462 492.631,793.749 493.191,791.978 493.75,790.61 494.309,798.418 494.868,826.416 495.428,836.316 495.987,890.642 496.546,878.908 497.105,837.296 497.665,813.837 498.224,825.98 498.783,821.838 499.342,817.132 499.902,831.094 500.461,795.243 501.02,774.427 501.579,771.188 502.139,774.197 502.698,773.346 503.257,768.082 503.816,801.196 504.376,799.248 504.935,827.854 505.494,837.838 506.053,812.667 506.613,826.934 507.172,789.017 507.731,769.976 508.29,765.09 508.85,798.379 509.409,794.127 509.968,791.724 510.527,833.88 511.087,846.98 511.646,825.9 512.205,821.99 512.764,820.009 513.324,835.186 513.883,813.514 514.442,792.367 515.001,758.676 515.561,757.056 516.12,753.696 516.679,736.344 517.238,735.286 517.798,768.285 518.357,799.485 518.916,810.933 519.475,792.105 520.035,803.119 520.594,797.534 521.153,809.663 521.712,784.532 522.272,778.718 522.831,778.415 523.39,757.519 523.949,739.453 524.509,706.626 525.068,706.88 525.627,707.646 526.186,693.315 526.746,675.036 527.305,663.251 527.864,668.007 528.423,637.177 528.983,640.875 529.542,633.503 530.101,638.038 530.66,643.437 531.22,648.112 531.779,651.301 532.338,642.54 532.897,650.447 533.457,687.655 534.016,702.5 534.575,706.458 535.134,758.443 535.694,737.723 536.253,703.762 536.812,707.31 537.371,658.081 537.931,691.48 538.49,758.655 539.049,756.311 539.608,770.435 540.168,755.504 540.727,720.754 541.286,719.734 541.845,701.684 542.405,669.591 542.964,706.213 543.523,673.945 544.082,723.999 544.642,707.903 545.201,692.427 545.76,695.062 546.319,729.339 546.879,730.379 547.438,712.215 547.997,729.3 548.556,745.998 549.116,763.762 549.675,747.224 550.234,746.258 550.793,711.61 551.353,729.755 551.912,748.446 552.471,745.752 553.031,708.922 553.59,710.642 554.149,708.139 554.708,708.54 555.268,728.713 555.827,731.833 556.386,747.836 556.945,731.575 557.505,746.451 558.064,742.814 558.623,740.099 559.182,740.457 559.742,738.475 560.301,739.534 560.86,753.762 561.419,800.363 561.979,792.718 562.538,839.66 563.097,817.922 563.656,827.284 564.216,837.9 564.775,796.944 565.334,809.426 565.893,803.58 566.453,764.664 567.012,757.89 567.571,723.726 568.13,707.417 568.69,671.725 569.249,655.889 569.808,640.314 570.367,672.761 570.927,708.034 571.486,723.188 572.045,755.117 572.604,771.365 573.164,785.811 573.723,778.03 574.282,760.445 574.841,742.48 575.401,774.876 575.96,807.188 576.519,767.422 577.078,765.239 577.638,794.547 578.197,791.319 578.756,802.264 579.315,800.228 579.875,795.012 580.434,792.931 580.993,802.334 581.552,779.943 582.112,811.831 582.671,771.074 583.23,734.438 583.789,726.973 584.349,709.345 584.908,712.126 585.467,664.035 586.026,665.529 586.586,702.267 587.145,687.614 587.704,641.924 588.263,648.766 588.823,684.755 589.382,670.061 589.941,672.978 590.5,690.666 591.06,674.739 591.619,645.429 592.178,614.475 592.737,619.021 593.297,639.924 593.856,638.343 594.415,657.6 594.974,665.643 595.534,665.009 596.093,667.265 596.652,684.45 597.211,703.506 597.771,685.486 598.33,701.592 598.889,702.013 599.448,703.22 600.008,719.981 600.567,708.113 601.126,708.588 601.685,692.227 602.245,694.486 602.804,709.572 603.363,710.791 603.922,742.691 604.482,740.373 605.041,737.526 605.6,735.724 606.159,733.06 606.719,697.107 607.278,713.357 607.837,716.474 608.396,683.428 608.956,684.205 609.515,685.547 610.074,666.693 610.633,668.639 611.193,699.429 611.752,699.261 612.311,683.35 612.87,698.008 613.43,697.945 613.989,702.359 614.548,670.738 615.107,656.295 615.667,663.355 616.226,666.094 616.785,686.688 617.344,706.682 617.904,687.528 618.463,690.718 619.022,738.571 619.581,722.769 620.141,724.795 620.7,721.784 621.259,736.771 621.818,735.233 622.378,717.113 622.937,730.456 623.496,729.05 624.055,712.085 624.615,678.478 625.174,697.937 625.733,698.664 626.292,698.522 626.852,731.355 627.411,732.716 627.97,748.56 628.529,728.391 629.089,759.237 629.648,756.141 630.207,737.691 630.766,734.206 631.326,777.855 631.885,772.172 632.444,765.832 633.003,729.245 633.563,728.245 634.122,694.744 634.681,660.165 635.24,676.952 635.8,694.183 636.359,698.617 636.918,727.307 637.477,758.202 638.037,740.012 638.596,709.123 639.155,726.623 639.714,743.139 640.274,725.222 640.833,754.194 641.392,818.768 641.951,812.184 642.511,823.668 643.07,751.127 643.629,767.524 644.188,731.148 644.748,680.442 645.307,712.485 645.866,711.815 646.425,695.801 646.985,697.875 647.544,679.99 648.103,684.656 648.662,666.515 649.222,668.366 649.781,655.043 650.34,691.924 650.899,709.783 651.459,725.853 652.018,772.2 652.577,765.833 653.136,760.374 653.696,757.932 654.255,770.835 654.814,768.176 655.373,778.872 655.933,759.808 656.492,743.959 657.051,740.84 657.61,771.28 658.17,765.444 658.729,744.629 659.288,756.838 659.847,739.147 660.407,767.966 660.966,762.765 661.525,758.482 662.084,740.209 662.644,755.327 663.203,785.359 663.762,781.462 664.321,759.857 664.881,722.469 665.44,738.199 665.999,688.412 666.558,692.97 667.118,725.183 667.677,707.62 668.236,659.143 668.795,628.54 669.355,615.905 669.914,621.292 670.473,640.553 671.032,626.573 671.592,601.927 672.151,607.139 672.71,613.688 673.269,619.226 673.829,604.218 674.388,623.979 674.947,690.348 675.506,688.714 676.066,673.741 676.625,690.898 677.184,655.455 677.743,639.612 678.303,706.013 678.862,720.913 679.421,716.525 679.981,663.544 680.54,683.049 681.099,683.374 681.658,684.188 682.218,668.51 682.777,635.494 683.336,603.81 683.895,621.713 684.455,609.455 685.014,614.16 685.573,701.564 686.132,683.853 686.692,698.349 687.251,694.63 687.81,661.487 688.369,649.548 688.929,664.539 689.488,661.95 690.047,630.913 690.606,631.368 691.166,637.098 691.725,604.837 692.284,609.453 692.843,599.363 693.403,586.097 693.962,573.005 694.521,626.224 695.08,646.509 695.64,648.954 696.199,652.159 696.758,655.743 697.317,644.92 697.877,666.479 698.436,669.223 698.995,639.176 699.554,645.04 700.114,664.709 700.673,667.92 701.232,668.395 701.791,652.372 702.351,639.038 702.91,626.326 703.469,610.996 704.028,615.974 704.588,590.015 705.147,579.908 705.706,554.456 706.265,532.144 706.825,556.035 707.384,579.537 707.943,601.189 708.502,604.912 709.062,625.502 709.621,631.642 710.18,652.115 710.739,639.063 711.299,658.199 711.858,629.433 712.417,646.389 712.976,634.817 713.536,654.606 714.095,627.082 714.654,643.797 715.213,627.574 715.773,599.367 716.332,637.519 716.891,664.126 717.45,651.851 718.01,654.651 718.569,657.415 719.128,671.441 719.687,668.219 720.247,702.484 720.806,688.775 721.365,675.661 721.924,695.668 722.484,694.645 723.043,692.562 723.602,707.859 724.161,706.175 724.721,705.753 725.28,719.738 725.839,700.696 726.398,698.663 726.958,698.358 727.517,715.199 728.076,711.027 728.635,725.798 729.195,742.35 729.754,737.633 730.313,734.006 730.872,718.288 731.432,717.364 731.991,731.158 732.55,696.116 733.109,713.93 733.669,680.517 734.228,681.949 734.787,714.968 735.346,748.281 735.906,743.956 736.465,773.992 737.024,769.655 737.583,750.652 738.143,746.862 738.702,776.941 739.261,774.143 739.82,832.6 740.38,823.853 740.939,851.036 741.498,859.227 742.057,866.347 742.617,838.132 743.176,829.38 743.735,854.155 744.294,816.956 744.854,757.345 745.413,772.03 745.972,733.649 746.531,729.225 747.091,743.576 747.65,756.628 748.209,800.779 748.768,793.842 749.328,759.094 749.887,737.687 750.446,765.762 751.005,761.267 751.565,754.798 752.124,767.748 752.683,748.651 753.242,729.773 753.802,712.243 754.361,759.728 754.92,753.777 755.479,734.647 756.039,715.641 756.598,697.4 757.157,715.901 757.716,747.02 758.276,745.836 758.835,742.25 759.394,726.191 759.953,707.803 760.513,674.867 761.072,641.186 761.631,631.032 762.19,632.349 762.75,634.028 763.309,602.793 763.868,607.88 764.427,596.394 764.987,597.835 765.546,600.039 766.105,603.567 766.664,610.337 767.224,618.027 767.783,585.817 768.342,576.868 768.901,598.755 769.461,607.596 770.02,629.971 770.579,660.744 771.138,662.765 771.698,681.063 772.257,682.922 772.816,699.464 773.375,668.02 773.935,636.334 774.494,653.603 775.053,659.52 775.612,661.879 776.172,667.169 776.731,653.851 777.29,704.571 777.849,718.408 778.409,717.908 778.968,716.788 779.527,698.314 780.086,715.201 780.646,713.097 781.205,714.138 781.764,745.756 782.323,758.009 782.883,736.258 783.442,715.147 784.001,714.371 784.56,712.551 785.12,764.034 785.679,747.419 786.238,744.51 786.797,739.977 787.357,719.439 787.916,737.625 788.475,704.46 789.034,704.392 789.594,739.73 790.153,754.968 790.712,753.986 791.271,737.099 791.831,735.57 792.39,735.586 792.949,765.941 793.508,745.586 794.068,728.238 794.627,723.813 795.186,737.946 795.745,752.205 796.305,748.382 796.864,728.686 797.423,709.541 797.982,710.562 798.542,721.722 799.101,705.518 799.66,703.23 800.219,734.854 800.779,765.246 801.338,713.976 801.897,696.305 802.456,693.898 803.016,692.425 803.575,691.775 804.134,674.369 804.693,660.086 805.253,662.116 805.812,647.3 806.371,661.773 806.931,665.72 807.49,682.808 808.049,685.068 808.608,687.642 809.168,702.831 809.727,684.487 810.286,669.629 810.845,638.416 811.405,625.129 811.964,626.46 812.523,678.935 813.082,678.675 813.642,675.424 814.201,692.396 814.76,690.869 815.319,704.939 815.879,718.416 816.438,748.409 816.997,726.853 817.556,723.145 818.116,690.603 818.675,739.774 819.234,704.883 819.793,705.732 820.353,734.928 820.912,716.43 821.471,714.166 822.03,695.613 822.59,694.371 823.149,725.025 823.708,739.048 824.267,735.796 824.827,749.834 825.386,714.521 825.945,715.92 826.504,666.141 827.064,686.935 827.623,704.851 828.182,688.234 828.741,694.709 829.301,694.727 829.86,712.014 830.419,695.21 830.978,679.191 831.538,682.533 832.097,681.599 832.656,696.282 833.215,712.199 833.775,742.418 834.334,724.417 834.893,720.586 835.452,750.855 836.012,730.118 836.571,744.09 837.13,692.22 837.689,694.511 838.249,696.298 838.808,678.449 839.367,694.206 839.926,709.163 840.486,724.974 841.045,738.22 841.604,749.333 842.163,728.153 842.723,691.328 843.282,675.981 843.841,644.34 844.4,629.983 844.96,628.562 845.519,634.231 846.078,650.719 846.637,667.662 847.197,667.379 847.756,669.326 848.315,670.272 848.874,684.502 849.434,702.705 849.993,607.214 850.552,576.649 851.111,581.916 851.671,589.216 852.23,613.308 852.789,602.449 853.348,606.471 853.908,625.899 854.467,627.081 855.026,647.354 855.585,631.204 856.145,652.39 856.704,622.647 857.263,646.063 857.822,681.13 858.382,679.772 858.941,678.458 859.5,661.208 860.059,682.059 860.619,683.084 861.178,702.581 861.737,715.578 862.296,712.916 862.856,727.217 863.415,727.352 863.974,759.093 864.533,739.509 865.093,690.974 865.652,660.853 866.211,679.116 866.77,662.992 867.33,652.136 867.889,671.93 868.448,704.795 869.007,700.427 869.567,698.894 870.126,681.647 870.685,677.718 871.244,676.635 871.804,679.313 872.363,663.656 872.922,662.558 873.481,665.341 874.041,683.955 874.6,666.271 875.159,636.884 875.718,674.691 876.278,663.526 876.837,651.867 877.396,659.177 877.955,694.665 878.515,692.837 879.074,690.879 879.633,644.841 880.192,646.656 880.752,664.324 881.311,684.58 881.87,666.962 882.429,652.046 882.989,638.4 883.548,641.168 884.107,658.048 884.666,642.74 885.226,680.625 885.785,696.806 886.344,695.819 886.903,695.883 887.463,711.995 888.022,726.751 888.581,723.694 889.14,722.441 889.7,739.025 890.259,704.256 890.818,670.278 891.377,705.179 891.937,740.33 892.496,738.69 893.055,722.713 893.614,692.849 894.174,706.411 894.733,723.956 895.292,687.378 895.851,653.321 896.411,688.024 896.97,672.151 897.529,672.125 898.088,657.134 898.648,655.924 899.207,640.829 899.766,644.602 900.325,630.441 900.885,617.56 901.444,603.259 902.003,594.696 902.562,599.388 903.122,605.381 903.681,609.214 904.24,597.276 904.799,604.84 905.359,659.163 905.918,662.828 906.477,635.216 907.036,623.228 907.596,679.16 908.155,664.872 908.714,683.301 909.273,665.634 909.833,668.599 910.392,684.309 910.951,672.446 911.51,673.414 912.07,676.098 912.629,675.69 913.188,693.113 913.747,691.344 914.307,677.94 914.866,681.038 915.425,718.419 915.984,681.889 916.544,696.439 917.103,699.077 917.662,682.449 918.221,681.551 918.781,695.429 919.34,693.489 919.899,680.278 920.458,694.812 921.018,712.187 921.577,697.908 922.136,711.989 922.695,674.314 923.255,657.338 923.814,660.219 924.373,633.439 924.932,620.015 925.492,637.074 926.051,675.306 926.61,659.249 927.169,677.349 927.729,678.597 928.288,693.622 928.847,675.221 929.406,678.098 929.966,696.104 930.525,711.222 931.084,711.666 931.644,691.332 932.203,685.539 932.762,685.748 933.321,717.962 933.881,733.301 934.44,699.912 934.999,682.651 935.558,682.222 936.118,714.861 936.677,728.626 937.236,708.405 937.795,723.176 938.355,705.935 938.914,737.717 939.473,734.357 940.032,719.225 940.592,714.888 941.151,728.648 941.71,741.963 942.269,724.437 942.829,722.433 943.388,737.919 943.947,752.512 944.506,765.827 945.066,762.09 945.625,743.147 946.184,757.638 946.743,748.807 947.303,763.222 947.862,730.779 948.421,726.156 948.98,754.84 949.54,732.142 950.099,725.989 950.658,741.723 951.217,735.425 951.777,733.468 952.336,682.48 952.895,682.173 953.454,700.831 954.014,695.964 954.573,680.352 955.132,712.54 955.691,714.204 956.251,729.86 956.81,743.401 957.369,741.922 957.928,674.445 958.488,673.086 959.047,687.225 959.606,671.734 960.165,706.769 960.725,672.458 961.284,655.139 961.843,691.311 962.402,689.839 962.962,689.306 963.521,657.632 964.08,659.452 964.639,645.76 965.199,648.313 965.758,667.889 966.317,670.531 966.876,673.636 967.436,689.406 967.995,655.781 968.554,640.534 969.113,676.51 969.673,663.612 970.232,665.431 970.791,616.555 971.35,637.364 971.91,621.926 972.469,605.741 973.028,622.912 973.587,677.326 974.147,708.772 974.706,724.366 975.265,735.544 975.824,732.33 976.384,728.348 976.943,742.656 977.502,724.473 978.061,702.847 978.621,701.348 979.18,683.711 979.739,680.933 980.298,668.525 980.858,701.511 981.417,704.485 981.976,716.513 982.535,731.538 983.095,716.426 983.654,711.723 984.213,676.037 984.772,675.307 985.332,659.529 985.891,644.325 986.45,678.963 987.009,710.279 987.569,694 988.128,711.583 988.687,727.675 989.246,692.014 989.806,644.639 990.365,615.446 990.924,650.591 991.483,633.736 992.043,618.289 992.602,620.97 993.161,623.522 993.72,672.75 994.28,709.772 994.839,724.862 995.398,752.096 995.957,744.397 996.517,740.036 997.076,771.309 997.635,784.388 998.194,763.971 998.754,792.952 999.313,816.792 999.872,794.367 1000.43,775.652 1000.99,753.291 1001.55,768.257 1002.11,747.511 1002.67,727.448 1003.23,707.552 1003.79,702.544 1004.35,717.151 1004.91,730.472 1005.46,726.622 1006.02,739.896 1006.58,752.176 1007.14,750.136 1007.7,730.802 1008.26,712.124 1008.82,710.569 1009.38,691.423 1009.94,687.743 1010.5,684.787 1011.06,652.178 1011.62,700.328 1012.18,687.555 1012.73,673.389 1013.29,692.173 1013.85,706.769 1014.41,753.628 1014.97,747.023 1015.53,713.103 1016.09,708.681 1016.65,694.941 1017.21,696.314 1017.77,661.02 1018.33,646.481 1018.89,662.053 1019.45,678.448 1020.01,661.71 1020.56,664.175 1021.12,671.067 1021.68,654.948 1022.24,659.793 1022.8,583.658 1023.36,570.687 1023.92,540.119 1024.48,515.796 1025.04,507.149 1025.6,533.071 1026.16,512.082 1026.72,538.931 1027.28,545.849 1027.83,554.867 1028.39,580.428 1028.95,620.181 1029.51,638.449 1030.07,672.991 1030.63,657.534 1031.19,676.003 1031.75,710.338 1032.31,689.714 1032.87,707.566 1033.43,705.64 1033.99,686.823 1034.55,685.785 1035.1,703.865 1035.66,686.877 1036.22,673.204 1036.78,658.494 1037.34,660.105 1037.9,693.442 1038.46,677.176 1039.02,693.112 1039.58,705.918 1040.14,724.872 1040.7,708.455 1041.26,689.513 1041.82,668.927 1042.38,657.77 1042.93,673.48 1043.49,687.113 1044.05,701.226 1044.61,719.534 1045.17,668.799 1045.73,671.167 1046.29,671.268 1046.85,687.789 1047.41,668.611 1047.97,685.647 1048.53,703.213 1049.09,687.297 1049.65,700.886 1050.2,700.194 1050.76,699.3 1051.32,678.516 1051.88,678.618 1052.44,694.185 1053,693.216 1053.56,707.78 1054.12,675.402 1054.68,675.04 1055.24,675.35 1055.8,675.691 1056.36,625.811 1056.92,600.534 1057.48,593.078 1058.03,614.011 1058.59,685.94 1059.15,690.29 1059.71,657.603 1060.27,643.177 1060.83,644.831 1061.39,633.834 1061.95,637.667 1062.51,623.144 1063.07,612.22 1063.63,617.837 1064.19,625.411 1064.75,663.246 1065.3,695.247 1065.86,677.902 1066.42,694.154 1066.98,708.321 1067.54,693.031 1068.1,712.021 1068.66,707.651 1069.22,723.626 1069.78,703.86 1070.34,702.59 1070.9,688.644 1071.46,658.165 1072.02,627.273 1072.57,615.823 1073.13,650.42 1073.69,654.008 1074.25,656.706 1074.81,657.803 1075.37,628.085 1075.93,613.895 1076.49,568.523 1077.05,609.184 1077.61,578.426 1078.17,630.882 1078.73,664.642 1079.29,647.689 1079.85,635.302 1080.4,639.309 1080.96,662.902 1081.52,664.573 1082.08,712.219 1082.64,710.063 1083.2,707.823 1083.76,705.115 1084.32,692.301 1084.88,673.374 1085.44,660.167 1086,676.433 1086.56,690.618 1087.12,720.477 1087.67,732.118 1088.23,714.151 1088.79,681.222 1089.35,713.532 1089.91,714.469 1090.47,730.073 1091.03,711.524 1091.59,711.899 1092.15,708.672 1092.71,743.746 1093.27,758.111 1093.83,723.737 1094.39,700.559 1094.94,715.796 1095.5,712.175 1096.06,710.79 1096.62,724.656 1097.18,706.827 1097.74,725.224 1098.3,726.499 1098.86,725.466 1099.42,720.531 1099.98,700.207 1100.54,684.814 1101.1,667.802 1101.66,701.347 1102.22,717.93 1102.77,715.076 1103.33,733.671 1103.89,746.003 1104.45,760.161 1105.01,757.65 1105.57,763.784 1106.13,806.662 1106.69,814.984 1107.25,809.973 1107.81,801.657 1108.37,814.103 1108.93,825.334 1109.49,815.621 1110.04,806.655 1110.6,798.257 1111.16,822.257 1111.72,846.201 1112.28,838.726 1112.84,817.546 1113.4,793.351 1113.96,819.101 1114.52,796.882 1115.08,790.518 1115.64,799.717 1116.2,795.311 1116.76,773.796 1117.31,782.846 1117.87,730.176 1118.43,694.479 1118.99,708.662 1119.55,707.146 1120.11,703.268 1120.67,735.052 1121.23,731.7 1121.79,714.145 1122.35,714.283 1122.91,698.399 1123.47,696.751 1124.03,681.121 1124.59,696.287 1125.14,713.997 1125.7,728.275 1126.26,744.9 1126.82,756.706 1127.38,719.3 1127.94,715.969 1128.5,666.652 1129.06,633.332 1129.62,620.454 1130.18,621.906 1130.74,576.611 1131.3,597.865 1131.86,554.126 1132.41,609.994 1132.97,596.13 1133.53,601.824 1134.09,588.442 1134.65,575.577 1135.21,615.352 1135.77,618.424 1136.33,624.697 1136.89,627.735 1137.45,629.345 1138.01,650.563 1138.57,652.588 1139.13,669.059 1139.68,669.26 1140.24,667.818 1140.8,649.305 1141.36,654.121 1141.92,623.753 1142.48,577.892 1143.04,603.203 1143.6,556.868 1144.16,609.498 1144.72,629.86 1145.28,697.065 1145.84,662.896 1146.4,645.49 1146.96,647.977 1147.51,633.602 1148.07,621.293 1148.63,625.837 1149.19,628.24 1149.75,648.44 1150.31,634.735 1150.87,636.333 1151.43,624.016 1151.99,612.551 1152.55,634.045 1153.11,636.33 1153.67,623.838 1154.23,592.008 1154.78,592.876 1155.34,615.954 1155.9,616.767 1156.46,623.544 1157.02,622.254 1157.58,608.015 1158.14,614.048 1158.7,600.768 1159.26,604.695 1159.82,622.985 1160.38,644.471 1160.94,631.838 1161.5,637.132 1162.05,656.218 1162.61,689.735 1163.17,688.44 1163.73,688.31 1164.29,703.877 1164.85,687.005 1165.41,687.865 1165.97,639.086 1166.53,623.637 1167.09,612.23 1167.65,632.977 1168.21,635.571 1168.77,637.558 1169.33,644.742 1169.88,647.546 1170.44,662.656 1171,664.695 1171.56,667.009 1172.12,683.049 1172.68,697.632 1173.24,696.7 1173.8,716.662 1174.36,699.218 1174.92,763.507 1175.48,789.456 1176.04,767.859 1176.6,748.125 1177.15,727.59 1177.71,708.007 1178.27,709.976 1178.83,695.409 1179.39,713.006 1179.95,711.617 1180.51,691.544 1181.07,709.464 1181.63,740.4 1182.19,736.758 1182.75,731.268 1183.31,730.841 1183.87,791.042 1184.43,803.021 1184.98,780.76 1185.54,792.06 1186.1,800.044 1186.66,794.279 1187.22,805.1 1187.78,816.61 1188.34,794.697 1188.9,787.344 1189.46,767.529 1190.02,794.92 1190.58,773.074 1191.14,769.912 1191.7,766.433 1192.25,762.668 1192.81,774.256 1193.37,771.63 1193.93,767.441 1194.49,824.052 1195.05,834.506 1195.61,805.451 1196.17,800.855 1196.73,843.599 1197.29,818.532 1197.85,826.744 1198.41,801.619 1198.97,797.512 1199.52,788.096 1200.08,765.918 1200.64,730.191 1201.2,726.462 1201.76,706.422 1202.32,722.274 1202.88,702.289 1203.44,652.143 1204,638.3 1204.56,658.49 1205.12,658.26 1205.68,637.87 1206.24,623.967 1206.8,592.051 1207.35,564.679 1207.91,604.084 1208.47,624.61 1209.03,645.124 1209.59,647.291 1210.15,649.545 1210.71,652.843 1211.27,669.461 1211.83,670.795 1212.39,653.851 1212.95,652.962 1213.51,672.476 1214.07,657.603 1214.62,661.002 1215.18,678.159 1215.74,713.367 1216.3,708.848 1216.86,725.007 1217.42,719.217 1217.98,686.961 1218.54,703.042 1219.1,722.024 1219.66,723.494 1220.22,702.936 1220.78,656.505 1221.34,643.108 1221.89,626.439 1222.45,660.203 1223.01,644.332 1223.57,630.874 1224.13,619.564 1224.69,607.181 1225.25,625.956 1225.81,627.467 1226.37,645.727 1226.93,651.021 1227.49,668.117 1228.05,670.108 1228.61,654.199 1229.17,672.694 1229.72,671.293 1230.28,687.386 1230.84,669.779 1231.4,670.958 1231.96,703.6 1232.52,753.166 1233.08,780.797 1233.64,759.031 1234.2,738.068 1234.76,719.406 1235.32,765.252 1235.88,732.541 1236.44,761.471 1236.99,767.981 1237.55,765.534 1238.11,777.222 1238.67,774.837 1239.23,753.233 1239.79,732.852 1240.35,716.154 1240.91,728.877 1241.47,689.834 1242.03,693.426 1242.59,675.767 1243.15,676.936 1243.71,614.746 1244.26,583.992 1244.82,576.65 1245.38,613.702 1245.94,616.503 1246.5,604.503 1247.06,611.13 1247.62,649.897 1248.18,667.454 1248.74,665.864 1249.3,634.143 1249.86,638.347 1250.42,642.01 1250.98,643.299 1251.54,626.889 1252.09,628.472 1252.65,647.882 1253.21,632.664 1253.77,621.05 1254.33,623.097 1254.89,597.185 1255.45,616.475 1256.01,605.188 1256.57,643.182 1257.13,679.21 1257.69,646.955 1258.25,667.258 1258.81,652.207 1259.36,670.182 1259.92,685.888 1260.48,685.739 1261.04,683.98 1261.6,703.949 1262.16,687.368 1262.72,687.707 1263.28,718.077 1263.84,732.781 1264.4,712.866 1264.96,692.519 1265.52,656.938 1266.08,658.895 1266.63,659.974 1267.19,646.491 1267.75,647.885 1268.31,648.574 1268.87,664.887 1269.43,681.157 1269.99,662.423 1270.55,658.231 1271.11,690.723 1271.67,675.977 1272.23,661.223 1272.79,677.459 1273.35,679.66 1273.91,681.249 1274.46,709.84 1275.02,661.422 1275.58,665.326 1276.14,685.362 1276.7,718.254 1277.26,671.551 1277.82,676.331 1278.38,676.939 1278.94,678.866 1279.5,711.579 1280.06,678.598 1280.62,678.04 1281.18,681.113 1281.73,682.751 1282.29,699.909 1282.85,719.393 1283.41,717.269 1283.97,733.119 1284.53,712.601 1285.09,679.384 1285.65,633.116 1286.21,622.565 1286.77,658.475 1287.33,676.504 1287.89,673.281 1288.45,672.432 1289,674.856 1289.56,673.559 1290.12,692.97 1290.68,709.364 1291.24,709.279 1291.8,739.521 1292.36,754.903 1292.92,768.871 1293.48,811.905 1294.04,790.465 1294.6,783.468 1295.16,811.417 1295.72,808.847 1296.28,803.114 1296.83,781.325 1297.39,778.465 1297.95,759.255 1298.51,754.843 1299.07,752.984 1299.63,747.32 1300.19,726.996 1300.75,739.755 1301.31,734.195 1301.87,732.078 1302.43,745.377 1302.99,741.086 1303.55,740.077 1304.1,750.893 1304.66,748.368 1305.22,758.351 1305.78,769.227 1306.34,746.765 1306.9,725.25 1307.46,709.338 1308.02,721.772 1308.58,701.141 1309.14,719.488 1309.7,720.155 1310.26,688.993 1310.82,690.798 1311.38,704.144 1311.93,719.787 1312.49,748.271 1313.05,715.375 1313.61,695.852 1314.17,695.278 1314.73,696.228 1315.29,707.704 1315.85,688.784 1316.41,658.01 1316.97,625.894 1317.53,632.907 1318.09,636.38 1318.65,620.604 1319.2,639.29 1319.76,642.459 1320.32,644.676 1320.88,646.468 1321.44,649.131 1322,663.3 1322.56,649.434 1323.12,633.936 1323.68,637.317 1324.24,655.285 1324.8,641.237 1325.36,679.226 1325.92,646.479 1326.47,648.846 1327.03,619.5 1327.59,622.575 1328.15,608.943 1328.71,628.424 1329.27,679.133 1329.83,662.628 1330.39,647.106 1330.95,653.571 1331.51,675.151 1332.07,673.962 1332.63,691.016 1333.19,707.253 1333.75,688.009 1334.3,689.527 1334.86,692.203 1335.42,710.026 1335.98,723.021 1336.54,689.294 1337.1,674.341 1337.66,661.857 1338.22,698.616 1338.78,691.846 1339.34,691.947 1339.9,705.652 1340.46,734.5 1341.02,763.863 1341.57,762.062 1342.13,789.464 1342.69,751.583 1343.25,718.421 1343.81,736.007 1344.37,732.553 1344.93,730.939 1345.49,763.385 1346.05,776.616 1346.61,773.214 1347.17,769.844 1347.73,766.7 1348.29,778.146 1348.84,790.192 1349.4,733.992 1349.96,765.459 1350.52,747.231 1351.08,680.546 1351.64,682.678 1352.2,635.044 1352.76,652.206 1353.32,634.066 1353.88,638.079 1354.44,719.195 1355,716.088 1355.56,714.305 1356.12,698.156 1356.67,663.719 1357.23,679.438 1357.79,695.978 1358.35,697.657 1358.91,684.607 1359.47,697.527 1360.03,682.364 1360.59,664.241 1361.15,662.174 1361.71,660.114 1362.27,680.409 1362.83,665.447 1363.39,665.466 1363.94,667.811 1364.5,669.21 1365.06,619.885 1365.62,638.116 1366.18,628.582 1366.74,630.975 1367.3,587.077 1367.86,592.26 1368.42,596.683 1368.98,615.22 1369.54,619.358 1370.1,627.612 1370.66,645.012 1371.21,642.715 1371.77,643.752 1372.33,660.81 1372.89,646.092 1373.45,618.772 1374.01,624.066 1374.57,611.61 1375.13,614.401 1375.69,614.844 1376.25,649.889 1376.81,641.081 1377.37,612.534 1377.93,616.123 1378.49,619.363 1379.04,639.355 1379.6,659.256 1380.16,674.668 1380.72,656.737 1381.28,672.119 1381.84,705.568 1382.4,684.576 1382.96,683.184 1383.52,681.612 1384.08,682.246 1384.64,633.918 1385.2,622.381 1385.76,627.966 1386.31,629.892 1386.87,632.321 1387.43,653.025 1387.99,701.541 1388.55,701.029 1389.11,700.322 1389.67,681.852 1390.23,699.331 1390.79,732.005 1391.35,714.245 1391.91,725.55 1392.47,722 1393.03,686.713 1393.58,669.346 1394.14,718.113 1394.7,717.733 1395.26,683.846 1395.82,634.077 1396.38,608.162 1396.94,591.693 1397.5,693.459 1398.06,692.092 1398.62,721.566 1399.18,736.623 1399.74,703.209 1400.3,704.225 1400.86,734.942 1401.41,729.829 1401.97,709.843 1402.53,709.81 1403.09,693.779 1403.65,677.149 1404.21,675.649 1404.77,690.826 1405.33,678.156 1405.89,679.665 1406.45,612.693 1407.01,603.673 1407.57,640.802 1408.13,688.111 1408.68,703.604 1409.24,705.753 1409.8,739.708 1410.36,738.965 1410.92,701.83 1411.48,686.028 1412.04,686.464 1412.6,666.87 1413.16,682.604 1413.72,696.068 1414.28,679.237 1414.84,708.552 1415.4,720.716 1415.95,731.422 1416.51,745.651 1417.07,728.7 1417.63,710.617 1418.19,709.939 1418.75,742.582 1419.31,726.742 1419.87,727.797 1420.43,727.646 1420.99,698.951 1421.55,732.477 1422.11,730.289 1422.67,745.401 1423.23,725.93 1423.78,758.849 1424.34,753.633 1424.9,716.583 1425.46,748.375 1426.02,775.682 1426.58,788.432 1427.14,767.873 1427.7,809.647 1428.26,807.516 1428.82,773.624 1429.38,802.242 1429.94,793.15 1430.5,789.715 1431.05,820.487 1431.61,829.609 1432.17,839.581 1432.73,803.306 1433.29,845.672 1433.85,853.727 1434.41,828.59 1434.97,785.677 1435.53,815.554 1436.09,808.448 1436.65,800.756 1437.21,782.025 1437.77,791.684 1438.33,798.797 1438.88,759.088 1439.44,738.231 1440,721.292 1440.56,735.161 1441.12,685.469 1441.68,682.306 1442.24,748.167 1442.8,695.542 1443.36,691.396 1443.92,670.964 1444.48,673.346 1445.04,704.835 1445.6,685.624 1446.15,668.657 1446.71,651.22 1447.27,651.953 1447.83,637.087 1448.39,605.123 1448.95,644.586 1449.51,630.721 1450.07,634.772 1450.63,639.524 1451.19,640.378 1451.75,646.145 1452.31,649.109 1452.87,619.817 1453.42,607.124 1453.98,594.319 1454.54,598.151 1455.1,603.541 1455.66,626.844 1456.22,627.027 1456.78,612.393 1457.34,643.926 1457.9,645.726 1458.46,615.303 1459.02,665.07 1459.58,619.456 1460.14,623.212 1460.7,627.484 1461.25,613.035 1461.81,615.364 1462.37,670.611 1462.93,684.293 1463.49,682.921 1464.05,681.477 1464.61,698.428 1465.17,712.186 1465.73,708.063 1466.29,740.569 1466.85,735.812 1467.41,731.425 1467.97,696.744 1468.52,667.958 1469.08,681.982 1469.64,651.807 1470.2,653.947 1470.76,638.339 1471.32,637.981 1471.88,655.678 1472.44,674.06 1473,695.392 1473.56,709.421 1474.12,739.353 1474.68,752.319 1475.24,732.5 1475.79,696.908 1476.35,679.736 1476.91,711.668 1477.47,710.004 1478.03,707.679 1478.59,708.96 1479.15,708.358 1479.71,689.385 1480.27,655.468 1480.83,658.266 1481.39,659.111 1481.95,676.673 1482.51,643.084 1483.07,629.388 1483.62,603.417 1484.18,587.954 1484.74,609.219 1485.3,597.236 1485.86,572.342 1486.42,579.753 1486.98,617.311 1487.54,602.767 1488.1,589.143 1488.66,659.283 1489.22,676.6 1489.78,677.122 1490.34,660.105 1490.89,658.904 1491.45,676.852 1492.01,679.387 1492.57,680.884 1493.13,697.622 1493.69,697.284 1494.25,697.306 1494.81,712.258 1495.37,697.535 1495.93,693.013 1496.49,722.873 1497.05,687.028 1497.61,671.022 1498.16,671.407 1498.72,672.974 1499.28,626.764 1499.84,613.229 1500.4,616.446 1500.96,620.669 1501.52,626.634 1502.08,636.045 1502.64,642.863 1503.2,694.782 1503.76,694.991 1504.32,694.194 1504.88,696.937 1505.44,696.869 1505.99,677.331 1506.55,663.35 1507.11,632.458 1507.67,636.476 1508.23,637.727 1508.79,622.708 1509.35,579.84 1509.91,586.752 1510.47,607.767 1511.03,641.914 1511.59,677.725 1512.15,677.068 1512.71,692.86 1513.26,725.181 1513.82,722.964 1514.38,735.325 1514.94,745.701 1515.5,725.026 1516.06,724.348 1516.62,724.872 1517.18,755.306 1517.74,782.387 1518.3,778.424 1518.86,759.786 1519.42,741.739 1519.98,753.437 1520.53,734.002 1521.09,694.634 1521.65,696.332 1522.21,694.964 1522.77,696.308 1523.33,696.511 1523.89,712.09 1524.45,695.371 1525.01,678.66 1525.57,665.71 1526.13,650.624 1526.69,652.822 1527.25,671.198 1527.81,675.138 1528.36,675.394 1528.92,658.134 1529.48,626.868 1530.04,629.913 1530.6,683.18 1531.16,651.109 1531.72,650.63 1532.28,655.122 1532.84,653.861 1533.4,703.327 1533.96,673.515 1534.52,678.431 1535.08,635.965 1535.63,674.917 1536.19,690.652 1536.75,689.353 1537.31,658.859 1537.87,662.2 1538.43,708.79 1538.99,722.342 1539.55,717.707 1540.11,731.772 1540.67,716.154 1541.23,731.413 1541.79,712.245 1542.35,726.768 1542.9,745.077 1543.46,758.874 1544.02,752.76 1544.58,730.427 1545.14,728.329 1545.7,712.18 1546.26,745.278 1546.82,726.722 1547.38,744.136 1547.94,739.163 1548.5,755.435 1549.06,753.736 1549.62,751.424 1550.18,779.004 1550.73,772.859 1551.29,738.843 1551.85,717.607 1552.41,701.415 1552.97,699.158 1553.53,663.34 1554.09,631.358 1554.65,632.812 1555.21,603.217 1555.77,608.276 1556.33,578.897 1556.89,582.886 1557.45,572.831 1558,613.003 1558.56,632.103 1559.12,653.894 1559.68,656.418 1560.24,642.688 1560.8,660.508 1561.36,676.409 1561.92,640.855 1562.48,641.678 1563.04,644.951 1563.6,661.909 1564.16,712.094 1564.72,755.186 1565.28,748.215 1565.83,744.039 1566.39,772.858 1566.95,751.657 1567.51,770.261 1568.07,816.186 1568.63,825.226 1569.19,787.05 1569.75,794.297 1570.31,789.735 1570.87,765.364 1571.43,777.005 1571.99,740.206 1572.55,738.603 1573.1,736.427 1573.66,701.52 1574.22,685.641 1574.78,684.586 1575.34,699.95 1575.9,713.682 1576.46,681.709 1577.02,678.491 1577.58,727.168 1578.14,723.701 1578.7,721.121 1579.26,720.909 1579.82,716.164 1580.37,665.398 1580.93,651.406 1581.49,638.836 1582.05,625.479 1582.61,694.675 1583.17,711.169 1583.73,739.281 1584.29,767.463 1584.85,761.952 1585.41,680.678 1585.97,696.154 1586.53,662.212 1587.09,678.229 1587.65,648.233 1588.2,615.769 1588.76,632.659 1589.32,634.873 1589.88,639.234 1590.44,640.712 1591,625.718 1591.56,645.485 1592.12,648.559 1592.68,681.659 1593.24,702.92 1593.8,684.339 1594.36,684.442 1594.92,648.715 1595.47,682.805 1596.03,684.413 1596.59,733.408 1597.15,715.366 1597.71,699.487 1598.27,683.502 1598.83,695.393 1599.39,681.622 1599.95,695.426 1600.51,710.647 1601.07,694.813 1601.63,645.558 1602.19,627.068 1602.74,615.244 1603.3,621.756 1603.86,611.009 1604.42,613.643 1604.98,623.106 1605.54,641.194 1606.1,593.818 1606.66,580.87 1607.22,588.123 1607.78,626.537 1608.34,659.6 1608.9,645.967 1609.46,644.751 1610.02,664.002 1610.57,651.138 1611.13,671.197 1611.69,685.367 1612.25,673.704 1612.81,656.178 1613.37,643.902 1613.93,693.579 1614.49,695.38 1615.05,712.326 1615.61,659.618 1616.17,628.051 1616.73,613.627 1617.29,601.339 1617.84,622.407 1618.4,627.489 1618.96,629.376 1619.52,630.979 1620.08,651.042 1620.64,649.631 1621.2,656.26 1621.76,644.569 1622.32,629.106 1622.88,633.412 1623.44,717.289 1624,719.652 1624.56,685.833 1625.11,703.527 1625.67,689.413 1626.23,674.901 1626.79,693.58 1627.35,680.833 1627.91,666.131 1628.47,667.076 1629.03,680.316 1629.59,680.891 1630.15,680.125 1630.71,679.448 1631.27,693.816 1631.83,706.571 1632.39,702.377 1632.94,680.379 1633.5,680.3 1634.06,713.361 1634.62,696.356 1635.18,694.881 1635.74,706.447 1636.3,675.116 1636.86,644.98 1637.42,709.016 1637.98,708.15 1638.54,692.822 1639.1,693.032 1639.66,688.432 1640.21,672.824 1640.77,675.886 1641.33,661.504 1641.89,676.849 1642.45,678.445 1643.01,675.215 1643.57,673.866 1644.13,690.293 1644.69,674.257 1645.25,710.11 1645.81,693.585 1646.37,706.855 1646.93,723.968 1647.48,737.044 1648.04,704.673 1648.6,704.294 1649.16,687.128 1649.72,669.969 1650.28,636.339 1650.84,671.642 1651.4,687.632 1651.96,671.75 1652.52,658.116 1653.08,675.146 1653.64,673.464 1654.2,705.932 1654.76,704.361 1655.31,735.169 1655.87,718.886 1656.43,716.438 1656.99,694.46 1657.55,707.464 1658.11,723.632 1658.67,720.049 1659.23,750.121 1659.79,768.125 1660.35,730.727 1660.91,742.456 1661.47,722.247 1662.03,735.425 1662.58,746.579 1663.14,760.324 1663.7,769.699 1664.26,734.837 1664.82,763.939 1665.38,725.441 1665.94,738.166 1666.5,718.331 1667.06,766.712 1667.62,778.343 1668.18,757.232 1668.74,787.234 1669.3,812.28 1669.85,835.44 1670.41,797.961 1670.97,820.468 1671.53,812.797 1672.09,805.112 1672.65,752.311 1673.21,778.161 1673.77,766.891 1674.33,741.979 1674.89,769.826 1675.45,764.515 1676.01,744.273 1676.57,708.784 1677.13,693.309 1677.68,692.612 1678.24,689.887 1678.8,655.596 1679.36,656.227 1679.92,674.017 1680.48,624.14 1681.04,646.829 1681.6,662.598 1682.16,631.301 1682.72,633.988 1683.28,669.523 1683.84,701.42 1684.4,699.629 1684.95,696.415 1685.51,678.062 1686.07,661.693 1686.63,666.18 1687.19,648.439 1687.75,667.03 1688.31,671.425 1688.87,670.461 1689.43,669.851 1689.99,657.108 1690.55,641.539 1691.11,595.428 1691.67,569.409 1692.23,575.72 1692.78,583.016 1693.34,588.707 1693.9,592.611 1694.46,598.078 1695.02,635.166 1695.58,637.126 1696.14,607.048 1696.7,626.948 1697.26,626.961 1697.82,579.71 1698.38,619.861 1698.94,639.173 1699.5,655.538 1700.05,654.545 1700.61,672.279 1701.17,685.945 1701.73,700.887 1702.29,671.182 1702.85,621.66 1703.41,608.492 1703.97,628.816 1704.53,582.102 1705.09,603.876 1705.65,606.383 1706.21,564.581 1706.77,571.925 1707.32,591.061 1707.88,578.179 1708.44,598.273 1709,588.722 1709.56,594.473 1710.12,649.071 1710.68,636.555 1711.24,656.413 1711.8,644.986 1712.36,597.534 1712.92,620.901 1713.48,579.177 1714.04,586.444 1714.6,593.92 1715.15,604.123 1715.71,624.696 1716.27,659.872 1716.83,663.291 1717.39,647.507 1717.95,665.756 1718.51,669.077 1719.07,670.912 1719.63,704.751 1720.19,700.536 1720.75,635.894 1721.31,638.599 1721.87,659.447 1722.42,661.349 1722.98,663.409 1723.54,664.321 1724.1,698.131 1724.66,664.744 1725.22,649.991 1725.78,652.936 1726.34,654.895 1726.9,657.815 1727.46,691.739 1728.02,723.437 1728.58,725.466 1729.14,720.685 1729.69,735.325 1730.25,743.746 1730.81,739.191 1731.37,738.625 1731.93,721.332 1732.49,656.295 1733.05,659.334 1733.61,662.73 1734.17,661.953 1734.73,682.395 1735.29,683.828 1735.85,714.139 1736.41,699.959 1736.97,730.897 1737.52,742.795 1738.08,753.393 1738.64,752.825 1739.2,731.195 1739.76,707.724 1740.32,709.013 1740.88,657.565 1741.44,657.907 1742,659.444 1742.56,646.527 1743.12,612.153 1743.68,589.45 1744.24,594.724 1744.79,581.832 1745.35,585.997 1745.91,593.276 1746.47,578.495 1747.03,568.642 1747.59,574.5 1748.15,567.543 1748.71,554.858 1749.27,527.228 1749.83,535.243 1750.39,555.124 1750.95,540.446 1751.51,580.681 1752.06,569.481 1752.62,577.087 1753.18,568.807 1753.74,608.247 1754.3,597.302 1754.86,599.711 1755.42,601.585 1755.98,624.697 1756.54,629.903 1757.1,615.834 1757.66,653.924 1758.22,624.649 1758.78,660.584 1759.34,707.973 1759.89,724.273 1760.45,722.235 1761.01,738.897 1761.57,769.135 1762.13,731.476 1762.69,748.455 1763.25,744.123 1763.81,739.767 1764.37,737.312 1764.93,719.445 1765.49,718.857 1766.05,747.238 1766.61,776.301 1767.16,739.527 1767.72,720.802 1768.28,715.342 1768.84,695.831 1769.4,675.795 1769.96,675.27 1770.52,660.819 1771.08,694.259 1771.64,645.058 1772.2,678.318 1772.76,677.94 1773.32,677.129 1773.88,660.335 1774.43,663.534 1774.99,712.223 1775.55,725.545 1776.11,743.288 1776.67,760.514 1777.23,757.926 1777.79,739.928 1778.35,719.392 1778.91,683.932 1779.47,653.165 1780.03,638.258 1780.59,654.14 1781.15,674.413 1781.71,673.916 1782.26,707.949 1782.82,722.037 1783.38,704.067 1783.94,717.527 1784.5,730.395 1785.06,776.312 1785.62,770.24 1786.18,765.069 1786.74,792.729 1787.3,740.665 1787.86,758.953 1788.42,756.843 1788.98,752.944 1789.53,766.113 1790.09,761.216 1790.65,790.566 1791.21,742.371 1791.77,740.13 1792.33,721.048 1792.89,686.34 1793.45,703.088 1794.01,745.033 1794.57,739.318 1795.13,731.91 1795.69,728.084 1796.25,742.084 1796.8,755.964 1797.36,734.207 1797.92,714.989 1798.48,712.748 1799.04,711.306 1799.6,709.36 1800.16,708.626 1800.72,691.972 1801.28,741.173 1801.84,755.313 1802.4,752.027 1802.96,713.814 1803.52,727.805 1804.08,677.634 1804.63,691.347 1805.19,656.797 1805.75,673.489 1806.31,673.281 1806.87,670.602 1807.43,655.948 1807.99,687.881 1808.55,673.089 1809.11,652.789 1809.67,654.839 1810.23,658.841 1810.79,646.506 1811.35,632.624 1811.9,619.983 1812.46,640.184 1813.02,595.975 1813.58,631.604 1814.14,601.252 1814.7,589.853 1815.26,610.16 1815.82,612.669 1816.38,650.531 1816.94,688.97 1817.5,687.772 1818.06,688.732 1818.62,677.249 1819.18,681.61 1819.73,699.628 1820.29,698.951 1820.85,700.987 1821.41,701.447 1821.97,699.65 1822.53,699.877 1823.09,714.275 1823.65,697.323 1824.21,695.993 1824.77,714.183 1825.33,727.503 1825.89,692.173 1826.45,689.894 1827,688.773 1827.56,690.792 1828.12,675.068 1828.68,689.637 1829.24,719.825 1829.8,719.194 1830.36,736.014 1830.92,717.089 1831.48,744.912 1832.04,818.814 1832.6,811.541 1833.16,759.264 1833.72,738.365 1834.27,719.519 1834.83,703.778 1835.39,719.577 1835.95,698.933 1836.51,698.107 1837.07,698.943 1837.63,713.145 1838.19,722.136 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 693.442 L720.806 693.442 L721.365 693.442 L721.924 693.442 L722.484 693.442 L723.043 693.442 L723.602 693.442 L724.161 693.442 L724.721 693.442 L725.28 693.442 L725.839 693.442 L726.398 693.442 L726.958 693.442 L727.517 693.442 L728.076 693.442 L728.635 693.442 L729.195 693.442 L729.754 693.442 L730.313 693.442 L730.872 693.442 L731.432 693.442 L731.991 693.442 L732.55 693.442 L733.109 693.442 L733.669 693.442 L734.228 693.442 L734.787 693.442 L735.346 693.442 L735.906 693.442 L736.465 693.442 L737.024 693.442 L737.583 693.442 L738.143 693.442 L738.702 693.442 L739.261 693.442 L739.82 693.442 L740.38 693.442 L740.939 693.442 L741.498 693.442 L742.057 693.442 L742.617 693.442 L743.176 693.442 L743.735 693.442 L744.294 693.442 L744.854 693.442 L745.413 693.442 L745.972 693.442 L746.531 693.442 L747.091 693.442 L747.65 693.442 L748.209 693.442 L748.768 693.442 L749.328 693.442 L749.887 693.442 L750.446 693.442 L751.005 693.442 L751.565 693.442 L752.124 693.442 L752.683 693.442 L753.242 693.442 L753.802 693.442 L754.361 693.442 L754.92 693.442 L755.479 693.442 L756.039 693.442 L756.598 693.442 L757.157 693.442 L757.716 693.442 L758.276 693.442 L758.835 693.442 L759.394 693.442 L759.953 693.442 L760.513 693.442 L761.072 693.442 L761.631 693.442 L762.19 693.442 L762.75 693.442 L763.309 693.442 L763.868 693.442 L764.427 693.442 L764.987 693.442 L765.546 693.442 L766.105 693.442 L766.664 693.442 L767.224 693.442 L767.783 693.442 L768.342 693.442 L768.901 693.442 L769.461 693.442 L770.02 693.442 L770.579 693.442 L771.138 693.442 L771.698 693.442 L772.257 693.442 L772.816 693.442 L773.375 693.442 L773.935 693.442 L774.494 693.442 L775.053 693.442 L775.612 693.442 L776.172 693.442 L776.731 693.442 L777.29 693.442 L777.849 693.442 L778.409 693.442 L778.968 693.442 L779.527 693.442 L780.086 693.442 L780.646 693.442 L781.205 693.442 L781.764 693.442 L782.323 693.442 L782.883 693.442 L783.442 693.442 L784.001 693.442 L784.56 693.442 L785.12 693.442 L785.679 693.442 L786.238 693.442 L786.797 693.442 L787.357 693.442 L787.916 693.442 L788.475 693.442 L789.034 693.442 L789.594 693.442 L790.153 693.442 L790.712 693.442 L791.271 693.442 L791.831 693.442 L792.39 693.442 L792.949 693.442 L793.508 693.442 L794.068 693.442 L794.627 693.442 L795.186 693.442 L795.745 693.442 L796.305 693.442 L796.864 693.442 L797.423 693.442 L797.982 693.442 L798.542 693.442 L799.101 693.442 L799.66 693.442 L800.219 693.442 L800.779 693.442 L801.338 693.442 L801.897 693.442 L802.456 693.442 L803.016 693.442 L803.575 693.442 L804.134 693.442 L804.693 693.442 L805.253 693.442 L805.812 693.442 L806.371 693.442 L806.931 693.442 L807.49 693.442 L808.049 693.442 L808.608 693.442 L809.168 693.442 L809.727 693.442 L810.286 693.442 L810.845 693.442 L811.405 693.442 L811.964 693.442 L812.523 693.442 L813.082 693.442 L813.642 693.442 L814.201 693.442 L814.76 693.442 L815.319 693.442 L815.879 693.442 L816.438 693.442 L816.997 693.442 L817.556 693.442 L818.116 693.442 L818.675 693.442 L819.234 693.442 L819.793 693.442 L820.353 693.442 L820.912 693.442 L821.471 693.442 L822.03 693.442 L822.59 693.442 L823.149 693.442 L823.708 693.442 L824.267 693.442 L824.827 693.442 L825.386 693.442 L825.945 693.442 L826.504 693.442 L827.064 693.442 L827.623 693.442 L828.182 693.442 L828.741 693.442 L829.301 693.442 L829.86 693.442 L830.419 693.442 L830.978 693.442 L831.538 693.442 L832.097 693.442 L832.656 693.442 L833.215 693.442 L833.775 693.442 L834.334 693.442 L834.893 693.442 L835.452 693.442 L836.012 693.442 L836.571 693.442 L837.13 693.442 L837.689 693.442 L838.249 693.442 L838.808 693.442 L839.367 693.442 L839.926 693.442 L840.486 693.442 L841.045 693.442 L841.604 693.442 L842.163 693.442 L842.723 693.442 L843.282 693.442 L843.841 693.442 L844.4 693.442 L844.96 693.442 L845.519 693.442 L846.078 693.442 L846.637 693.442 L847.197 693.442 L847.756 693.442 L848.315 693.442 L848.874 693.442 L849.434 693.442 L849.993 693.442 L850.552 693.442 L851.111 693.442 L851.671 693.442 L852.23 693.442 L852.789 693.442 L853.348 693.442 L853.908 693.442 L854.467 693.442 L855.026 693.442 L855.585 693.442 L856.145 693.442 L856.704 693.442 L857.263 693.442 L857.822 693.442 L858.382 693.442 L858.941 693.442 L859.5 693.442 L860.059 693.442 L860.619 693.442 L861.178 693.442 L861.737 693.442 L862.296 693.442 L862.856 693.442 L863.415 693.442 L863.974 693.442 L864.533 693.442 L865.093 693.442 L865.652 693.442 L866.211 693.442 L866.77 693.442 L867.33 693.442 L867.889 693.442 L868.448 693.442 L869.007 693.442 L869.567 693.442 L870.126 693.442 L870.685 693.442 L871.244 693.442 L871.804 693.442 L872.363 693.442 L872.922 693.442 L873.481 693.442 L874.041 693.442 L874.6 693.442 L875.159 693.442 L875.718 693.442 L876.278 693.442 L876.837 693.442 L877.396 693.442 L877.955 693.442 L878.515 693.442 L879.074 693.442 L879.633 693.442 L880.192 693.442 L880.752 693.442 L881.311 693.442 L881.87 693.442 L882.429 693.442 L882.989 693.442 L883.548 693.442 L884.107 693.442 L884.666 693.442 L885.226 693.442 L885.785 693.442 L886.344 693.442 L886.903 693.442 L887.463 693.442 L888.022 693.442 L888.581 693.442 L889.14 693.442 L889.7 693.442 L890.259 693.442 L890.818 693.442 L891.377 693.442 L891.937 693.442 L892.496 693.442 L893.055 693.442 L893.614 693.442 L894.174 693.442 L894.733 693.442 L895.292 693.442 L895.851 693.442 L896.411 693.442 L896.97 693.442 L897.529 693.442 L898.088 693.442 L898.648 693.442 L899.207 693.442 L899.766 693.442 L900.325 693.442 L900.885 693.442 L901.444 693.442 L902.003 693.442 L902.562 693.442 L903.122 693.442 L903.681 693.442 L904.24 693.442 L904.799 693.442 L905.359 693.442 L905.918 693.442 L906.477 693.442 L907.036 693.442 L907.596 693.442 L908.155 693.442 L908.714 693.442 L909.273 693.442 L909.833 693.442 L910.392 693.442 L910.951 693.442 L911.51 693.442 L912.07 693.442 L912.629 693.442 L913.188 693.442 L913.747 693.442 L914.307 693.442 L914.866 693.442 L915.425 693.442 L915.984 693.442 L916.544 693.442 L917.103 693.442 L917.662 693.442 L918.221 693.442 L918.781 693.442 L919.34 693.442 L919.899 693.442 L920.458 693.442 L921.018 693.442 L921.577 693.442 L922.136 693.442 L922.695 693.442 L923.255 693.442 L923.814 693.442 L924.373 693.442 L924.932 693.442 L925.492 693.442 L926.051 693.442 L926.61 693.442 L927.169 693.442 L927.729 693.442 L928.288 693.442 L928.847 693.442 L929.406 693.442 L929.966 693.442 L930.525 693.442 L931.084 693.442 L931.644 693.442 L932.203 693.442 L932.762 693.442 L933.321 693.442 L933.881 693.442 L934.44 693.442 L934.999 693.442 L935.558 693.442 L936.118 693.442 L936.677 693.442 L937.236 693.442 L937.795 693.442 L938.355 693.442 L938.914 693.442 L939.473 693.442 L940.032 693.442 L940.592 693.442 L941.151 693.442 L941.71 693.442 L942.269 693.442 L942.829 693.442 L943.388 693.442 L943.947 693.442 L944.506 693.442 L945.066 693.442 L945.625 693.442 L946.184 693.442 L946.743 693.442 L947.303 693.442 L947.862 693.442 L948.421 693.442 L948.98 693.442 L949.54 693.442 L950.099 693.442 L950.658 693.442 L951.217 693.442 L951.777 693.442 L952.336 693.442 L952.895 693.442 L953.454 693.442 L954.014 693.442 L954.573 693.442 L955.132 693.442 L955.691 693.442 L956.251 693.442 L956.81 693.442 L957.369 693.442 L957.928 693.442 L958.488 693.442 L959.047 693.442 L959.606 693.442 L960.165 693.442 L960.725 693.442 L961.284 693.442 L961.843 693.442 L962.402 693.442 L962.962 693.442 L963.521 693.442 L964.08 693.442 L964.639 693.442 L965.199 693.442 L965.758 693.442 L966.317 693.442 L966.876 693.442 L967.436 693.442 L967.995 693.442 L968.554 693.442 L969.113 693.442 L969.673 693.442 L970.232 693.442 L970.791 693.442 L971.35 693.442 L971.91 693.442 L972.469 693.442 L973.028 693.442 L973.587 693.442 L974.147 693.442 L974.706 693.442 L975.265 693.442 L975.824 693.442 L976.384 693.442 L976.943 693.442 L977.502 693.442 L978.061 693.442 L978.621 693.442 L979.18 693.442 L979.739 693.442 L980.298 693.442 L980.858 693.442 L981.417 693.442 L981.976 693.442 L982.535 693.442 L983.095 693.442 L983.654 693.442 L984.213 693.442 L984.772 693.442 L985.332 693.442 L985.891 693.442 L986.45 693.442 L987.009 693.442 L987.569 693.442 L988.128 693.442 L988.687 693.442 L989.246 693.442 L989.806 693.442 L990.365 693.442 L990.924 693.442 L991.483 693.442 L992.043 693.442 L992.602 693.442 L993.161 693.442 L993.72 693.442 L994.28 693.442 L994.839 693.442 L995.398 693.442 L995.957 693.442 L996.517 693.442 L997.076 693.442 L997.635 693.442 L998.194 693.442 L998.754 693.442 L999.313 693.442 L999.872 693.442 L1000.43 693.442 L1000.99 693.442 L1001.55 693.442 L1002.11 693.442 L1002.67 693.442 L1003.23 693.442 L1003.79 693.442 L1004.35 693.442 L1004.91 693.442 L1005.46 693.442 L1006.02 693.442 L1006.58 693.442 L1007.14 693.442 L1007.7 693.442 L1008.26 693.442 L1008.82 693.442 L1009.38 693.442 L1009.94 693.442 L1010.5 693.442 L1011.06 693.442 L1011.62 693.442 L1012.18 693.442 L1012.73 693.442 L1013.29 693.442 L1013.85 693.442 L1014.41 693.442 L1014.97 693.442 L1015.53 693.442 L1016.09 693.442 L1016.65 693.442 L1017.21 693.442 L1017.77 693.442 L1018.33 693.442 L1018.89 693.442 L1019.45 693.442 L1020.01 693.442 L1020.56 693.442 L1021.12 693.442 L1021.68 693.442 L1022.24 693.442 L1022.8 693.442 L1023.36 693.442 L1023.92 693.442 L1024.48 693.442 L1025.04 693.442 L1025.6 693.442 L1026.16 693.442 L1026.72 693.442 L1027.28 693.442 L1027.83 693.442 L1028.39 693.442 L1028.95 693.442 L1029.51 693.442 L1030.07 693.442 L1030.63 693.442 L1031.19 693.442 L1031.75 693.442 L1032.31 693.442 L1032.87 693.442 L1033.43 693.442 L1033.99 693.442 L1034.55 693.442 L1035.1 693.442 L1035.66 693.442 L1036.22 693.442 L1036.78 693.442 L1037.34 693.442 L1037.9 693.442 L1038.46 693.442 L1039.02 693.442 L1039.58 693.442 L1040.14 693.442 L1040.7 693.442 L1041.26 693.442 L1041.82 693.442 L1042.38 693.442 L1042.93 693.442 L1043.49 693.442 L1044.05 693.442 L1044.61 693.442 L1045.17 693.442 L1045.73 693.442 L1046.29 693.442 L1046.85 693.442 L1047.41 693.442 L1047.97 693.442 L1048.53 693.442 L1049.09 693.442 L1049.65 693.442 L1050.2 693.442 L1050.76 693.442 L1051.32 693.442 L1051.88 693.442 L1052.44 693.442 L1053 693.442 L1053.56 693.442 L1054.12 693.442 L1054.68 693.442 L1055.24 693.442 L1055.8 693.442 L1056.36 693.442 L1056.92 693.442 L1057.48 693.442 L1058.03 693.442 L1058.59 693.442 L1059.15 693.442 L1059.71 693.442 L1060.27 693.442 L1060.83 693.442 L1061.39 693.442 L1061.95 693.442 L1062.51 693.442 L1063.07 693.442 L1063.63 693.442 L1064.19 693.442 L1064.75 693.442 L1065.3 693.442 L1065.86 693.442 L1066.42 693.442 L1066.98 693.442 L1067.54 693.442 L1068.1 693.442 L1068.66 693.442 L1069.22 693.442 L1069.78 693.442 L1070.34 693.442 L1070.9 693.442 L1071.46 693.442 L1072.02 693.442 L1072.57 693.442 L1073.13 693.442 L1073.69 693.442 L1074.25 693.442 L1074.81 693.442 L1075.37 693.442 L1075.93 693.442 L1076.49 693.442 L1077.05 693.442 L1077.61 693.442 L1078.17 693.442 L1078.73 693.442 L1079.29 693.442 L1079.85 693.442 L1080.4 693.442 L1080.96 693.442 L1081.52 693.442 L1082.08 693.442 L1082.64 693.442 L1083.2 693.442 L1083.76 693.442 L1084.32 693.442 L1084.88 693.442 L1085.44 693.442 L1086 693.442 L1086.56 693.442 L1087.12 693.442 L1087.67 693.442 L1088.23 693.442 L1088.79 693.442 L1089.35 693.442 L1089.91 693.442 L1090.47 693.442 L1091.03 693.442 L1091.59 693.442 L1092.15 693.442 L1092.71 693.442 L1093.27 693.442 L1093.83 693.442 L1094.39 693.442 L1094.94 693.442 L1095.5 693.442 L1096.06 693.442 L1096.62 693.442 L1097.18 693.442 L1097.74 693.442 L1098.3 693.442 L1098.86 693.442 L1099.42 693.442 L1099.98 693.442 L1100.54 693.442 L1101.1 693.442 L1101.66 693.442 L1102.22 693.442 L1102.77 693.442 L1103.33 693.442 L1103.89 693.442 L1104.45 693.442 L1105.01 693.442 L1105.57 693.442 L1106.13 693.442 L1106.69 693.442 L1107.25 693.442 L1107.81 693.442 L1108.37 693.442 L1108.93 693.442 L1109.49 693.442 L1110.04 693.442 L1110.6 693.442 L1111.16 693.442 L1111.72 693.442 L1112.28 693.442 L1112.84 693.442 L1113.4 693.442 L1113.96 693.442 L1114.52 693.442 L1115.08 693.442 L1115.64 693.442 L1116.2 693.442 L1116.76 693.442 L1117.31 693.442 L1117.87 693.442 L1118.43 693.442 L1118.99 693.442 L1119.55 693.442 L1120.11 693.442 L1120.67 693.442 L1121.23 693.442 L1121.79 693.442 L1122.35 693.442 L1122.91 693.442 L1123.47 693.442 L1124.03 693.442 L1124.59 693.442 L1125.14 693.442 L1125.7 693.442 L1126.26 693.442 L1126.82 693.442 L1127.38 693.442 L1127.94 693.442 L1128.5 693.442 L1129.06 693.442 L1129.62 693.442 L1130.18 693.442 L1130.74 693.442 L1131.3 693.442 L1131.86 693.442 L1132.41 693.442 L1132.97 693.442 L1133.53 693.442 L1134.09 693.442 L1134.65 693.442 L1135.21 693.442 L1135.77 693.442 L1136.33 693.442 L1136.89 693.442 L1137.45 693.442 L1138.01 693.442 L1138.57 693.442 L1139.13 693.442 L1139.68 693.442 L1140.24 693.442 L1140.8 693.442 L1141.36 693.442 L1141.92 693.442 L1142.48 693.442 L1143.04 693.442 L1143.6 693.442 L1144.16 693.442 L1144.72 693.442 L1145.28 693.442 L1145.84 693.442 L1146.4 693.442 L1146.96 693.442 L1147.51 693.442 L1148.07 693.442 L1148.63 693.442 L1149.19 693.442 L1149.75 693.442 L1150.31 693.442 L1150.87 693.442 L1151.43 693.442 L1151.99 693.442 L1152.55 693.442 L1153.11 693.442 L1153.67 693.442 L1154.23 693.442 L1154.78 693.442 L1155.34 693.442 L1155.9 693.442 L1156.46 693.442 L1157.02 693.442 L1157.58 693.442 L1158.14 693.442 L1158.7 693.442 L1159.26 693.442 L1159.82 693.442 L1160.38 693.442 L1160.94 693.442 L1161.5 693.442 L1162.05 693.442 L1162.61 693.442 L1163.17 693.442 L1163.73 693.442 L1164.29 693.442 L1164.85 693.442 L1165.41 693.442 L1165.97 693.442 L1166.53 693.442 L1167.09 693.442 L1167.65 693.442 L1168.21 693.442 L1168.77 693.442 L1169.33 693.442 L1169.88 693.442 L1170.44 693.442 L1171 693.442 L1171.56 693.442 L1172.12 693.442 L1172.68 693.442 L1173.24 693.442 L1173.8 693.442 L1174.36 693.442 L1174.92 693.442 L1175.48 693.442 L1176.04 693.442 L1176.6 693.442 L1177.15 693.442 L1177.71 693.442 L1178.27 693.442 L1178.83 693.442 L1179.39 693.442 L1179.95 693.442 L1180.51 693.442 L1181.07 693.442 L1181.63 693.442 L1182.19 693.442 L1182.75 693.442 L1183.31 693.442 L1183.87 693.442 L1184.43 693.442 L1184.98 693.442 L1185.54 693.442 L1186.1 693.442 L1186.66 693.442 L1187.22 693.442 L1187.78 693.442 L1188.34 693.442 L1188.9 693.442 L1189.46 693.442 L1190.02 693.442 L1190.58 693.442 L1191.14 693.442 L1191.7 693.442 L1192.25 693.442 L1192.81 693.442 L1193.37 693.442 L1193.93 693.442 L1194.49 693.442 L1195.05 693.442 L1195.61 693.442 L1196.17 693.442 L1196.73 693.442 L1197.29 693.442 L1197.85 693.442 L1198.41 693.442 L1198.97 693.442 L1199.52 693.442 L1200.08 693.442 L1200.64 693.442 L1201.2 693.442 L1201.76 693.442 L1202.32 693.442 L1202.88 693.442 L1203.44 693.442 L1204 693.442 L1204.56 693.442 L1205.12 693.442 L1205.68 693.442 L1206.24 693.442 L1206.8 693.442 L1207.35 693.442 L1207.91 693.442 L1208.47 693.442 L1209.03 693.442 L1209.59 693.442 L1210.15 693.442 L1210.71 693.442 L1211.27 693.442 L1211.83 693.442 L1212.39 693.442 L1212.95 693.442 L1213.51 693.442 L1214.07 693.442 L1214.62 693.442 L1215.18 693.442 L1215.74 693.442 L1216.3 693.442 L1216.86 693.442 L1217.42 693.442 L1217.98 693.442 L1218.54 693.442 L1219.1 693.442 L1219.66 693.442 L1220.22 693.442 L1220.78 693.442 L1221.34 693.442 L1221.89 693.442 L1222.45 693.442 L1223.01 693.442 L1223.57 693.442 L1224.13 693.442 L1224.69 693.442 L1225.25 693.442 L1225.81 693.442 L1226.37 693.442 L1226.93 693.442 L1227.49 693.442 L1228.05 693.442 L1228.61 693.442 L1229.17 693.442 L1229.72 693.442 L1230.28 693.442 L1230.84 693.442 L1231.4 693.442 L1231.96 693.442 L1232.52 693.442 L1233.08 693.442 L1233.64 693.442 L1234.2 693.442 L1234.76 693.442 L1235.32 693.442 L1235.88 693.442 L1236.44 693.442 L1236.99 693.442 L1237.55 693.442 L1238.11 693.442 L1238.67 693.442 L1239.23 693.442 L1239.79 693.442 L1240.35 693.442 L1240.91 693.442 L1241.47 693.442 L1242.03 693.442 L1242.59 693.442 L1243.15 693.442 L1243.71 693.442 L1244.26 693.442 L1244.82 693.442 L1245.38 693.442 L1245.94 693.442 L1246.5 693.442 L1247.06 693.442 L1247.62 693.442 L1248.18 693.442 L1248.74 693.442 L1249.3 693.442 L1249.86 693.442 L1250.42 693.442 L1250.98 693.442 L1251.54 693.442 L1252.09 693.442 L1252.65 693.442 L1253.21 693.442 L1253.77 693.442 L1254.33 693.442 L1254.89 693.442 L1255.45 693.442 L1256.01 693.442 L1256.57 693.442 L1257.13 693.442 L1257.69 693.442 L1258.25 693.442 L1258.81 693.442 L1259.36 693.442 L1259.92 693.442 L1260.48 693.442 L1261.04 693.442 L1261.6 693.442 L1262.16 693.442 L1262.72 693.442 L1263.28 693.442 L1263.84 693.442 L1264.4 693.442 L1264.96 693.442 L1265.52 693.442 L1266.08 693.442 L1266.63 693.442 L1267.19 693.442 L1267.75 693.442 L1268.31 693.442 L1268.87 693.442 L1269.43 693.442 L1269.99 693.442 L1270.55 693.442 L1271.11 693.442 L1271.67 693.442 L1272.23 693.442 L1272.79 693.442 L1273.35 693.442 L1273.91 693.442 L1274.46 693.442 L1275.02 693.442 L1275.58 693.442 L1276.14 693.442 L1276.7 693.442 L1277.26 693.442 L1277.82 693.442 L1278.38 693.442 L1278.94 693.442 L1279.5 693.442 L1280.06 693.442 L1280.62 693.442 L1281.18 693.442 L1281.73 693.442 L1282.29 693.442 L1282.85 693.442 L1283.41 693.442 L1283.97 693.442 L1284.53 693.442 L1285.09 693.442 L1285.65 693.442 L1286.21 693.442 L1286.77 693.442 L1287.33 693.442 L1287.89 693.442 L1288.45 693.442 L1289 693.442 L1289.56 693.442 L1290.12 693.442 L1290.68 693.442 L1291.24 693.442 L1291.8 693.442 L1292.36 693.442 L1292.92 693.442 L1293.48 693.442 L1294.04 693.442 L1294.6 693.442 L1295.16 693.442 L1295.72 693.442 L1296.28 693.442 L1296.83 693.442 L1297.39 693.442 L1297.95 693.442 L1298.51 693.442 L1299.07 693.442 L1299.63 693.442 L1300.19 693.442 L1300.75 693.442 L1301.31 693.442 L1301.87 693.442 L1302.43 693.442 L1302.99 693.442 L1303.55 693.442 L1304.1 693.442 L1304.66 693.442 L1305.22 693.442 L1305.78 693.442 L1306.34 693.442 L1306.9 693.442 L1307.46 693.442 L1308.02 693.442 L1308.58 693.442 L1309.14 693.442 L1309.7 693.442 L1310.26 693.442 L1310.82 693.442 L1311.38 693.442 L1311.93 693.442 L1312.49 693.442 L1313.05 693.442 L1313.61 693.442 L1314.17 693.442 L1314.73 693.442 L1315.29 693.442 L1315.85 693.442 L1316.41 693.442 L1316.97 693.442 L1317.53 693.442 L1318.09 693.442 L1318.65 693.442 L1319.2 693.442 L1319.76 693.442 L1320.32 693.442 L1320.88 693.442 L1321.44 693.442 L1322 693.442 L1322.56 693.442 L1323.12 693.442 L1323.68 693.442 L1324.24 693.442 L1324.8 693.442 L1325.36 693.442 L1325.92 693.442 L1326.47 693.442 L1327.03 693.442 L1327.59 693.442 L1328.15 693.442 L1328.71 693.442 L1329.27 693.442 L1329.83 693.442 L1330.39 693.442 L1330.95 693.442 L1331.51 693.442 L1332.07 693.442 L1332.63 693.442 L1333.19 693.442 L1333.75 693.442 L1334.3 693.442 L1334.86 693.442 L1335.42 693.442 L1335.98 693.442 L1336.54 693.442 L1337.1 693.442 L1337.66 693.442 L1338.22 693.442 L1338.78 693.442 L1339.34 693.442 L1339.9 693.442 L1340.46 693.442 L1341.02 693.442 L1341.57 693.442 L1342.13 693.442 L1342.69 693.442 L1343.25 693.442 L1343.81 693.442 L1344.37 693.442 L1344.93 693.442 L1345.49 693.442 L1346.05 693.442 L1346.61 693.442 L1347.17 693.442 L1347.73 693.442 L1348.29 693.442 L1348.84 693.442 L1349.4 693.442 L1349.96 693.442 L1350.52 693.442 L1351.08 693.442 L1351.64 693.442 L1352.2 693.442 L1352.76 693.442 L1353.32 693.442 L1353.88 693.442 L1354.44 693.442 L1355 693.442 L1355.56 693.442 L1356.12 693.442 L1356.67 693.442 L1357.23 693.442 L1357.79 693.442 L1358.35 693.442 L1358.91 693.442 L1359.47 693.442 L1360.03 693.442 L1360.59 693.442 L1361.15 693.442 L1361.71 693.442 L1362.27 693.442 L1362.83 693.442 L1363.39 693.442 L1363.94 693.442 L1364.5 693.442 L1365.06 693.442 L1365.62 693.442 L1366.18 693.442 L1366.74 693.442 L1367.3 693.442 L1367.86 693.442 L1368.42 693.442 L1368.98 693.442 L1369.54 693.442 L1370.1 693.442 L1370.66 693.442 L1371.21 693.442 L1371.77 693.442 L1372.33 693.442 L1372.89 693.442 L1373.45 693.442 L1374.01 693.442 L1374.57 693.442 L1375.13 693.442 L1375.69 693.442 L1376.25 693.442 L1376.81 693.442 L1377.37 693.442 L1377.93 693.442 L1378.49 693.442 L1379.04 693.442 L1379.6 693.442 L1380.16 693.442 L1380.72 693.442 L1381.28 693.442 L1381.84 693.442 L1382.4 693.442 L1382.96 693.442 L1383.52 693.442 L1384.08 693.442 L1384.64 693.442 L1385.2 693.442 L1385.76 693.442 L1386.31 693.442 L1386.87 693.442 L1387.43 693.442 L1387.99 693.442 L1388.55 693.442 L1389.11 693.442 L1389.67 693.442 L1390.23 693.442 L1390.79 693.442 L1391.35 693.442 L1391.91 693.442 L1392.47 693.442 L1393.03 693.442 L1393.58 693.442 L1394.14 693.442 L1394.7 693.442 L1395.26 693.442 L1395.82 693.442 L1396.38 693.442 L1396.94 693.442 L1397.5 693.442 L1398.06 693.442 L1398.62 693.442 L1399.18 693.442 L1399.74 693.442 L1400.3 693.442 L1400.86 693.442 L1401.41 693.442 L1401.97 693.442 L1402.53 693.442 L1403.09 693.442 L1403.65 693.442 L1404.21 693.442 L1404.77 693.442 L1405.33 693.442 L1405.89 693.442 L1406.45 693.442 L1407.01 693.442 L1407.57 693.442 L1408.13 693.442 L1408.68 693.442 L1409.24 693.442 L1409.8 693.442 L1410.36 693.442 L1410.92 693.442 L1411.48 693.442 L1412.04 693.442 L1412.6 693.442 L1413.16 693.442 L1413.72 693.442 L1414.28 693.442 L1414.84 693.442 L1415.4 693.442 L1415.95 693.442 L1416.51 693.442 L1417.07 693.442 L1417.63 693.442 L1418.19 693.442 L1418.75 693.442 L1419.31 693.442 L1419.87 693.442 L1420.43 693.442 L1420.99 693.442 L1421.55 693.442 L1422.11 693.442 L1422.67 693.442 L1423.23 693.442 L1423.78 693.442 L1424.34 693.442 L1424.9 693.442 L1425.46 693.442 L1426.02 693.442 L1426.58 693.442 L1427.14 693.442 L1427.7 693.442 L1428.26 693.442 L1428.82 693.442 L1429.38 693.442 L1429.94 693.442 L1430.5 693.442 L1431.05 693.442 L1431.61 693.442 L1432.17 693.442 L1432.73 693.442 L1433.29 693.442 L1433.85 693.442 L1434.41 693.442 L1434.97 693.442 L1435.53 693.442 L1436.09 693.442 L1436.65 693.442 L1437.21 693.442 L1437.77 693.442 L1438.33 693.442 L1438.88 693.442 L1439.44 693.442 L1440 693.442 L1440.56 693.442 L1441.12 693.442 L1441.68 693.442 L1442.24 693.442 L1442.8 693.442 L1443.36 693.442 L1443.92 693.442 L1444.48 693.442 L1445.04 693.442 L1445.6 693.442 L1446.15 693.442 L1446.71 693.442 L1447.27 693.442 L1447.83 693.442 L1448.39 693.442 L1448.95 693.442 L1449.51 693.442 L1450.07 693.442 L1450.63 693.442 L1451.19 693.442 L1451.75 693.442 L1452.31 693.442 L1452.87 693.442 L1453.42 693.442 L1453.98 693.442 L1454.54 693.442 L1455.1 693.442 L1455.66 693.442 L1456.22 693.442 L1456.78 693.442 L1457.34 693.442 L1457.9 693.442 L1458.46 693.442 L1459.02 693.442 L1459.58 693.442 L1460.14 693.442 L1460.7 693.442 L1461.25 693.442 L1461.81 693.442 L1462.37 693.442 L1462.93 693.442 L1463.49 693.442 L1464.05 693.442 L1464.61 693.442 L1465.17 693.442 L1465.73 693.442 L1466.29 693.442 L1466.85 693.442 L1467.41 693.442 L1467.97 693.442 L1468.52 693.442 L1469.08 693.442 L1469.64 693.442 L1470.2 693.442 L1470.76 693.442 L1471.32 693.442 L1471.88 693.442 L1472.44 693.442 L1473 693.442 L1473.56 693.442 L1474.12 693.442 L1474.68 693.442 L1475.24 693.442 L1475.79 693.442 L1476.35 693.442 L1476.91 693.442 L1477.47 693.442 L1478.03 693.442 L1478.59 693.442 L1479.15 693.442 L1479.71 693.442 L1480.27 693.442 L1480.83 693.442 L1481.39 693.442 L1481.95 693.442 L1482.51 693.442 L1483.07 693.442 L1483.62 693.442 L1484.18 693.442 L1484.74 693.442 L1485.3 693.442 L1485.86 693.442 L1486.42 693.442 L1486.98 693.442 L1487.54 693.442 L1488.1 693.442 L1488.66 693.442 L1489.22 693.442 L1489.78 693.442 L1490.34 693.442 L1490.89 693.442 L1491.45 693.442 L1492.01 693.442 L1492.57 693.442 L1493.13 693.442 L1493.69 693.442 L1494.25 693.442 L1494.81 693.442 L1495.37 693.442 L1495.93 693.442 L1496.49 693.442 L1497.05 693.442 L1497.61 693.442 L1498.16 693.442 L1498.72 693.442 L1499.28 693.442 L1499.84 693.442 L1500.4 693.442 L1500.96 693.442 L1501.52 693.442 L1502.08 693.442 L1502.64 693.442 L1503.2 693.442 L1503.76 693.442 L1504.32 693.442 L1504.88 693.442 L1505.44 693.442 L1505.99 693.442 L1506.55 693.442 L1507.11 693.442 L1507.67 693.442 L1508.23 693.442 L1508.79 693.442 L1509.35 693.442 L1509.91 693.442 L1510.47 693.442 L1511.03 693.442 L1511.59 693.442 L1512.15 693.442 L1512.71 693.442 L1513.26 693.442 L1513.82 693.442 L1514.38 693.442 L1514.94 693.442 L1515.5 693.442 L1516.06 693.442 L1516.62 693.442 L1517.18 693.442 L1517.74 693.442 L1518.3 693.442 L1518.86 693.442 L1519.42 693.442 L1519.98 693.442 L1520.53 693.442 L1521.09 693.442 L1521.65 693.442 L1522.21 693.442 L1522.77 693.442 L1523.33 693.442 L1523.89 693.442 L1524.45 693.442 L1525.01 693.442 L1525.57 693.442 L1526.13 693.442 L1526.69 693.442 L1527.25 693.442 L1527.81 693.442 L1528.36 693.442 L1528.92 693.442 L1529.48 693.442 L1530.04 693.442 L1530.6 693.442 L1531.16 693.442 L1531.72 693.442 L1532.28 693.442 L1532.84 693.442 L1533.4 693.442 L1533.96 693.442 L1534.52 693.442 L1535.08 693.442 L1535.63 693.442 L1536.19 693.442 L1536.75 693.442 L1537.31 693.442 L1537.87 693.442 L1538.43 693.442 L1538.99 693.442 L1539.55 693.442 L1540.11 693.442 L1540.67 693.442 L1541.23 693.442 L1541.79 693.442 L1542.35 693.442 L1542.9 693.442 L1543.46 693.442 L1544.02 693.442 L1544.58 693.442 L1545.14 693.442 L1545.7 693.442 L1546.26 693.442 L1546.82 693.442 L1547.38 693.442 L1547.94 693.442 L1548.5 693.442 L1549.06 693.442 L1549.62 693.442 L1550.18 693.442 L1550.73 693.442 L1551.29 693.442 L1551.85 693.442 L1552.41 693.442 L1552.97 693.442 L1553.53 693.442 L1554.09 693.442 L1554.65 693.442 L1555.21 693.442 L1555.77 693.442 L1556.33 693.442 L1556.89 693.442 L1557.45 693.442 L1558 693.442 L1558.56 693.442 L1559.12 693.442 L1559.68 693.442 L1560.24 693.442 L1560.8 693.442 L1561.36 693.442 L1561.92 693.442 L1562.48 693.442 L1563.04 693.442 L1563.6 693.442 L1564.16 693.442 L1564.72 693.442 L1565.28 693.442 L1565.83 693.442 L1566.39 693.442 L1566.95 693.442 L1567.51 693.442 L1568.07 693.442 L1568.63 693.442 L1569.19 693.442 L1569.75 693.442 L1570.31 693.442 L1570.87 693.442 L1571.43 693.442 L1571.99 693.442 L1572.55 693.442 L1573.1 693.442 L1573.66 693.442 L1574.22 693.442 L1574.78 693.442 L1575.34 693.442 L1575.9 693.442 L1576.46 693.442 L1577.02 693.442 L1577.58 693.442 L1578.14 693.442 L1578.7 693.442 L1579.26 693.442 L1579.82 693.442 L1580.37 693.442 L1580.93 693.442 L1581.49 693.442 L1582.05 693.442 L1582.61 693.442 L1583.17 693.442 L1583.73 693.442 L1584.29 693.442 L1584.85 693.442 L1585.41 693.442 L1585.97 693.442 L1586.53 693.442 L1587.09 693.442 L1587.65 693.442 L1588.2 693.442 L1588.76 693.442 L1589.32 693.442 L1589.88 693.442 L1590.44 693.442 L1591 693.442 L1591.56 693.442 L1592.12 693.442 L1592.68 693.442 L1593.24 693.442 L1593.8 693.442 L1594.36 693.442 L1594.92 693.442 L1595.47 693.442 L1596.03 693.442 L1596.59 693.442 L1597.15 693.442 L1597.71 693.442 L1598.27 693.442 L1598.83 693.442 L1599.39 693.442 L1599.95 693.442 L1600.51 693.442 L1601.07 693.442 L1601.63 693.442 L1602.19 693.442 L1602.74 693.442 L1603.3 693.442 L1603.86 693.442 L1604.42 693.442 L1604.98 693.442 L1605.54 693.442 L1606.1 693.442 L1606.66 693.442 L1607.22 693.442 L1607.78 693.442 L1608.34 693.442 L1608.9 693.442 L1609.46 693.442 L1610.02 693.442 L1610.57 693.442 L1611.13 693.442 L1611.69 693.442 L1612.25 693.442 L1612.81 693.442 L1613.37 693.442 L1613.93 693.442 L1614.49 693.442 L1615.05 693.442 L1615.61 693.442 L1616.17 693.442 L1616.73 693.442 L1617.29 693.442 L1617.84 693.442 L1618.4 693.442 L1618.96 693.442 L1619.52 693.442 L1620.08 693.442 L1620.64 693.442 L1621.2 693.442 L1621.76 693.442 L1622.32 693.442 L1622.88 693.442 L1623.44 693.442 L1624 693.442 L1624.56 693.442 L1625.11 693.442 L1625.67 693.442 L1626.23 693.442 L1626.79 693.442 L1627.35 693.442 L1627.91 693.442 L1628.47 693.442 L1629.03 693.442 L1629.59 693.442 L1630.15 693.442 L1630.71 693.442 L1631.27 693.442 L1631.83 693.442 L1632.39 693.442 L1632.94 693.442 L1633.5 693.442 L1634.06 693.442 L1634.62 693.442 L1635.18 693.442 L1635.74 693.442 L1636.3 693.442 L1636.86 693.442 L1637.42 693.442 L1637.98 693.442 L1638.54 693.442 L1639.1 693.442 L1639.66 693.442 L1640.21 693.442 L1640.77 693.442 L1641.33 693.442 L1641.89 693.442 L1642.45 693.442 L1643.01 693.442 L1643.57 693.442 L1644.13 693.442 L1644.69 693.442 L1645.25 693.442 L1645.81 693.442 L1646.37 693.442 L1646.93 693.442 L1647.48 693.442 L1648.04 693.442 L1648.6 693.442 L1649.16 693.442 L1649.72 693.442 L1650.28 693.442 L1650.84 693.442 L1651.4 693.442 L1651.96 693.442 L1652.52 693.442 L1653.08 693.442 L1653.64 693.442 L1654.2 693.442 L1654.76 693.442 L1655.31 693.442 L1655.87 693.442 L1656.43 693.442 L1656.99 693.442 L1657.55 693.442 L1658.11 693.442 L1658.67 693.442 L1659.23 693.442 L1659.79 693.442 L1660.35 693.442 L1660.91 693.442 L1661.47 693.442 L1662.03 693.442 L1662.58 693.442 L1663.14 693.442 L1663.7 693.442 L1664.26 693.442 L1664.82 693.442 L1665.38 693.442 L1665.94 693.442 L1666.5 693.442 L1667.06 693.442 L1667.62 693.442 L1668.18 693.442 L1668.74 693.442 L1669.3 693.442 L1669.85 693.442 L1670.41 693.442 L1670.97 693.442 L1671.53 693.442 L1672.09 693.442 L1672.65 693.442 L1673.21 693.442 L1673.77 693.442 L1674.33 693.442 L1674.89 693.442 L1675.45 693.442 L1676.01 693.442 L1676.57 693.442 L1677.13 693.442 L1677.68 693.442 L1678.24 693.442 L1678.8 693.442 L1679.36 693.442 L1679.92 693.442 L1680.48 693.442 L1681.04 693.442 L1681.6 693.442 L1682.16 693.442 L1682.72 693.442 L1683.28 693.442 L1683.84 693.442 L1684.4 693.442 L1684.95 693.442 L1685.51 693.442 L1686.07 693.442 L1686.63 693.442 L1687.19 693.442 L1687.75 693.442 L1688.31 693.442 L1688.87 693.442 L1689.43 693.442 L1689.99 693.442 L1690.55 693.442 L1691.11 693.442 L1691.67 693.442 L1692.23 693.442 L1692.78 693.442 L1693.34 693.442 L1693.9 693.442 L1694.46 693.442 L1695.02 693.442 L1695.58 693.442 L1696.14 693.442 L1696.7 693.442 L1697.26 693.442 L1697.82 693.442 L1698.38 693.442 L1698.94 693.442 L1699.5 693.442 L1700.05 693.442 L1700.61 693.442 L1701.17 693.442 L1701.73 693.442 L1702.29 693.442 L1702.85 693.442 L1703.41 693.442 L1703.97 693.442 L1704.53 693.442 L1705.09 693.442 L1705.65 693.442 L1706.21 693.442 L1706.77 693.442 L1707.32 693.442 L1707.88 693.442 L1708.44 693.442 L1709 693.442 L1709.56 693.442 L1710.12 693.442 L1710.68 693.442 L1711.24 693.442 L1711.8 693.442 L1712.36 693.442 L1712.92 693.442 L1713.48 693.442 L1714.04 693.442 L1714.6 693.442 L1715.15 693.442 L1715.71 693.442 L1716.27 693.442 L1716.83 693.442 L1717.39 693.442 L1717.95 693.442 L1718.51 693.442 L1719.07 693.442 L1719.63 693.442 L1720.19 693.442 L1720.75 693.442 L1721.31 693.442 L1721.87 693.442 L1722.42 693.442 L1722.98 693.442 L1723.54 693.442 L1724.1 693.442 L1724.66 693.442 L1725.22 693.442 L1725.78 693.442 L1726.34 693.442 L1726.9 693.442 L1727.46 693.442 L1728.02 693.442 L1728.58 693.442 L1729.14 693.442 L1729.69 693.442 L1730.25 693.442 L1730.81 693.442 L1731.37 693.442 L1731.93 693.442 L1732.49 693.442 L1733.05 693.442 L1733.61 693.442 L1734.17 693.442 L1734.73 693.442 L1735.29 693.442 L1735.85 693.442 L1736.41 693.442 L1736.97 693.442 L1737.52 693.442 L1738.08 693.442 L1738.64 693.442 L1739.2 693.442 L1739.76 693.442 L1740.32 693.442 L1740.88 693.442 L1741.44 693.442 L1742 693.442 L1742.56 693.442 L1743.12 693.442 L1743.68 693.442 L1744.24 693.442 L1744.79 693.442 L1745.35 693.442 L1745.91 693.442 L1746.47 693.442 L1747.03 693.442 L1747.59 693.442 L1748.15 693.442 L1748.71 693.442 L1749.27 693.442 L1749.83 693.442 L1750.39 693.442 L1750.95 693.442 L1751.51 693.442 L1752.06 693.442 L1752.62 693.442 L1753.18 693.442 L1753.74 693.442 L1754.3 693.442 L1754.86 693.442 L1755.42 693.442 L1755.98 693.442 L1756.54 693.442 L1757.1 693.442 L1757.66 693.442 L1758.22 693.442 L1758.78 693.442 L1759.34 693.442 L1759.89 693.442 L1760.45 693.442 L1761.01 693.442 L1761.57 693.442 L1762.13 693.442 L1762.69 693.442 L1763.25 693.442 L1763.81 693.442 L1764.37 693.442 L1764.93 693.442 L1765.49 693.442 L1766.05 693.442 L1766.61 693.442 L1767.16 693.442 L1767.72 693.442 L1768.28 693.442 L1768.84 693.442 L1769.4 693.442 L1769.96 693.442 L1770.52 693.442 L1771.08 693.442 L1771.64 693.442 L1772.2 693.442 L1772.76 693.442 L1773.32 693.442 L1773.88 693.442 L1774.43 693.442 L1774.99 693.442 L1775.55 693.442 L1776.11 693.442 L1776.67 693.442 L1777.23 693.442 L1777.79 693.442 L1778.35 693.442 L1778.91 693.442 L1779.47 693.442 L1780.03 693.442 L1780.59 693.442 L1781.15 693.442 L1781.71 693.442 L1782.26 693.442 L1782.82 693.442 L1783.38 693.442 L1783.94 693.442 L1784.5 693.442 L1785.06 693.442 L1785.62 693.442 L1786.18 693.442 L1786.74 693.442 L1787.3 693.442 L1787.86 693.442 L1788.42 693.442 L1788.98 693.442 L1789.53 693.442 L1790.09 693.442 L1790.65 693.442 L1791.21 693.442 L1791.77 693.442 L1792.33 693.442 L1792.89 693.442 L1793.45 693.442 L1794.01 693.442 L1794.57 693.442 L1795.13 693.442 L1795.69 693.442 L1796.25 693.442 L1796.8 693.442 L1797.36 693.442 L1797.92 693.442 L1798.48 693.442 L1799.04 693.442 L1799.6 693.442 L1800.16 693.442 L1800.72 693.442 L1801.28 693.442 L1801.84 693.442 L1802.4 693.442 L1802.96 693.442 L1803.52 693.442 L1804.08 693.442 L1804.63 693.442 L1805.19 693.442 L1805.75 693.442 L1806.31 693.442 L1806.87 693.442 L1807.43 693.442 L1807.99 693.442 L1808.55 693.442 L1809.11 693.442 L1809.67 693.442 L1810.23 693.442 L1810.79 693.442 L1811.35 693.442 L1811.9 693.442 L1812.46 693.442 L1813.02 693.442 L1813.58 693.442 L1814.14 693.442 L1814.7 693.442 L1815.26 693.442 L1815.82 693.442 L1816.38 693.442 L1816.94 693.442 L1817.5 693.442 L1818.06 693.442 L1818.62 693.442 L1819.18 693.442 L1819.73 693.442 L1820.29 693.442 L1820.85 693.442 L1821.41 693.442 L1821.97 693.442 L1822.53 693.442 L1823.09 693.442 L1823.65 693.442 L1824.21 693.442 L1824.77 693.442 L1825.33 693.442 L1825.89 693.442 L1826.45 693.442 L1827 693.442 L1827.56 693.442 L1828.12 693.442 L1828.68 693.442 L1829.24 693.442 L1829.8 693.442 L1830.36 693.442 L1830.92 693.442 L1831.48 693.442 L1832.04 693.442 L1832.6 693.442 L1833.16 693.442 L1833.72 693.442 L1834.27 693.442 L1834.83 693.442 L1835.39 693.442 L1835.95 693.442 L1836.51 693.442 L1837.07 693.442 L1837.63 693.442 L1838.19 693.442 L1838.19 683.897 L1837.63 683.897 L1837.07 683.897 L1836.51 683.897 L1835.95 683.897 L1835.39 683.897 L1834.83 683.897 L1834.27 683.897 L1833.72 683.897 L1833.16 683.897 L1832.6 683.897 L1832.04 683.897 L1831.48 683.897 L1830.92 683.897 L1830.36 683.897 L1829.8 683.897 L1829.24 683.897 L1828.68 683.897 L1828.12 683.897 L1827.56 683.897 L1827 683.897 L1826.45 683.897 L1825.89 683.897 L1825.33 683.897 L1824.77 683.897 L1824.21 683.897 L1823.65 683.897 L1823.09 683.897 L1822.53 683.897 L1821.97 683.897 L1821.41 683.897 L1820.85 683.897 L1820.29 683.897 L1819.73 683.897 L1819.18 683.897 L1818.62 683.897 L1818.06 683.897 L1817.5 683.897 L1816.94 683.897 L1816.38 683.897 L1815.82 683.897 L1815.26 683.897 L1814.7 683.897 L1814.14 683.897 L1813.58 683.897 L1813.02 683.897 L1812.46 683.897 L1811.9 683.897 L1811.35 683.897 L1810.79 683.897 L1810.23 683.897 L1809.67 683.897 L1809.11 683.897 L1808.55 683.897 L1807.99 683.897 L1807.43 683.897 L1806.87 683.897 L1806.31 683.897 L1805.75 683.897 L1805.19 683.897 L1804.63 683.897 L1804.08 683.897 L1803.52 683.897 L1802.96 683.897 L1802.4 683.897 L1801.84 683.897 L1801.28 683.897 L1800.72 683.897 L1800.16 683.897 L1799.6 683.897 L1799.04 683.897 L1798.48 683.897 L1797.92 683.897 L1797.36 683.897 L1796.8 683.897 L1796.25 683.897 L1795.69 683.897 L1795.13 683.897 L1794.57 683.897 L1794.01 683.897 L1793.45 683.897 L1792.89 683.897 L1792.33 683.897 L1791.77 683.897 L1791.21 683.897 L1790.65 683.897 L1790.09 683.897 L1789.53 683.897 L1788.98 683.897 L1788.42 683.897 L1787.86 683.897 L1787.3 683.897 L1786.74 683.897 L1786.18 683.897 L1785.62 683.897 L1785.06 683.897 L1784.5 683.897 L1783.94 683.897 L1783.38 683.897 L1782.82 683.897 L1782.26 683.897 L1781.71 683.897 L1781.15 683.897 L1780.59 683.897 L1780.03 683.897 L1779.47 683.897 L1778.91 683.897 L1778.35 683.897 L1777.79 683.897 L1777.23 683.897 L1776.67 683.897 L1776.11 683.897 L1775.55 683.897 L1774.99 683.897 L1774.43 683.897 L1773.88 683.897 L1773.32 683.897 L1772.76 683.897 L1772.2 683.897 L1771.64 683.897 L1771.08 683.897 L1770.52 683.897 L1769.96 683.897 L1769.4 683.897 L1768.84 683.897 L1768.28 683.897 L1767.72 683.897 L1767.16 683.897 L1766.61 683.897 L1766.05 683.897 L1765.49 683.897 L1764.93 683.897 L1764.37 683.897 L1763.81 683.897 L1763.25 683.897 L1762.69 683.897 L1762.13 683.897 L1761.57 683.897 L1761.01 683.897 L1760.45 683.897 L1759.89 683.897 L1759.34 683.897 L1758.78 683.897 L1758.22 683.897 L1757.66 683.897 L1757.1 683.897 L1756.54 683.897 L1755.98 683.897 L1755.42 683.897 L1754.86 683.897 L1754.3 683.897 L1753.74 683.897 L1753.18 683.897 L1752.62 683.897 L1752.06 683.897 L1751.51 683.897 L1750.95 683.897 L1750.39 683.897 L1749.83 683.897 L1749.27 683.897 L1748.71 683.897 L1748.15 683.897 L1747.59 683.897 L1747.03 683.897 L1746.47 683.897 L1745.91 683.897 L1745.35 683.897 L1744.79 683.897 L1744.24 683.897 L1743.68 683.897 L1743.12 683.897 L1742.56 683.897 L1742 683.897 L1741.44 683.897 L1740.88 683.897 L1740.32 683.897 L1739.76 683.897 L1739.2 683.897 L1738.64 683.897 L1738.08 683.897 L1737.52 683.897 L1736.97 683.897 L1736.41 683.897 L1735.85 683.897 L1735.29 683.897 L1734.73 683.897 L1734.17 683.897 L1733.61 683.897 L1733.05 683.897 L1732.49 683.897 L1731.93 683.897 L1731.37 683.897 L1730.81 683.897 L1730.25 683.897 L1729.69 683.897 L1729.14 683.897 L1728.58 683.897 L1728.02 683.897 L1727.46 683.897 L1726.9 683.897 L1726.34 683.897 L1725.78 683.897 L1725.22 683.897 L1724.66 683.897 L1724.1 683.897 L1723.54 683.897 L1722.98 683.897 L1722.42 683.897 L1721.87 683.897 L1721.31 683.897 L1720.75 683.897 L1720.19 683.897 L1719.63 683.897 L1719.07 683.897 L1718.51 683.897 L1717.95 683.897 L1717.39 683.897 L1716.83 683.897 L1716.27 683.897 L1715.71 683.897 L1715.15 683.897 L1714.6 683.897 L1714.04 683.897 L1713.48 683.897 L1712.92 683.897 L1712.36 683.897 L1711.8 683.897 L1711.24 683.897 L1710.68 683.897 L1710.12 683.897 L1709.56 683.897 L1709 683.897 L1708.44 683.897 L1707.88 683.897 L1707.32 683.897 L1706.77 683.897 L1706.21 683.897 L1705.65 683.897 L1705.09 683.897 L1704.53 683.897 L1703.97 683.897 L1703.41 683.897 L1702.85 683.897 L1702.29 683.897 L1701.73 683.897 L1701.17 683.897 L1700.61 683.897 L1700.05 683.897 L1699.5 683.897 L1698.94 683.897 L1698.38 683.897 L1697.82 683.897 L1697.26 683.897 L1696.7 683.897 L1696.14 683.897 L1695.58 683.897 L1695.02 683.897 L1694.46 683.897 L1693.9 683.897 L1693.34 683.897 L1692.78 683.897 L1692.23 683.897 L1691.67 683.897 L1691.11 683.897 L1690.55 683.897 L1689.99 683.897 L1689.43 683.897 L1688.87 683.897 L1688.31 683.897 L1687.75 683.897 L1687.19 683.897 L1686.63 683.897 L1686.07 683.897 L1685.51 683.897 L1684.95 683.897 L1684.4 683.897 L1683.84 683.897 L1683.28 683.897 L1682.72 683.897 L1682.16 683.897 L1681.6 683.897 L1681.04 683.897 L1680.48 683.897 L1679.92 683.897 L1679.36 683.897 L1678.8 683.897 L1678.24 683.897 L1677.68 683.897 L1677.13 683.897 L1676.57 683.897 L1676.01 683.897 L1675.45 683.897 L1674.89 683.897 L1674.33 683.897 L1673.77 683.897 L1673.21 683.897 L1672.65 683.897 L1672.09 683.897 L1671.53 683.897 L1670.97 683.897 L1670.41 683.897 L1669.85 683.897 L1669.3 683.897 L1668.74 683.897 L1668.18 683.897 L1667.62 683.897 L1667.06 683.897 L1666.5 683.897 L1665.94 683.897 L1665.38 683.897 L1664.82 683.897 L1664.26 683.897 L1663.7 683.897 L1663.14 683.897 L1662.58 683.897 L1662.03 683.897 L1661.47 683.897 L1660.91 683.897 L1660.35 683.897 L1659.79 683.897 L1659.23 683.897 L1658.67 683.897 L1658.11 683.897 L1657.55 683.897 L1656.99 683.897 L1656.43 683.897 L1655.87 683.897 L1655.31 683.897 L1654.76 683.897 L1654.2 683.897 L1653.64 683.897 L1653.08 683.897 L1652.52 683.897 L1651.96 683.897 L1651.4 683.897 L1650.84 683.897 L1650.28 683.897 L1649.72 683.897 L1649.16 683.897 L1648.6 683.897 L1648.04 683.897 L1647.48 683.897 L1646.93 683.897 L1646.37 683.897 L1645.81 683.897 L1645.25 683.897 L1644.69 683.897 L1644.13 683.897 L1643.57 683.897 L1643.01 683.897 L1642.45 683.897 L1641.89 683.897 L1641.33 683.897 L1640.77 683.897 L1640.21 683.897 L1639.66 683.897 L1639.1 683.897 L1638.54 683.897 L1637.98 683.897 L1637.42 683.897 L1636.86 683.897 L1636.3 683.897 L1635.74 683.897 L1635.18 683.897 L1634.62 683.897 L1634.06 683.897 L1633.5 683.897 L1632.94 683.897 L1632.39 683.897 L1631.83 683.897 L1631.27 683.897 L1630.71 683.897 L1630.15 683.897 L1629.59 683.897 L1629.03 683.897 L1628.47 683.897 L1627.91 683.897 L1627.35 683.897 L1626.79 683.897 L1626.23 683.897 L1625.67 683.897 L1625.11 683.897 L1624.56 683.897 L1624 683.897 L1623.44 683.897 L1622.88 683.897 L1622.32 683.897 L1621.76 683.897 L1621.2 683.897 L1620.64 683.897 L1620.08 683.897 L1619.52 683.897 L1618.96 683.897 L1618.4 683.897 L1617.84 683.897 L1617.29 683.897 L1616.73 683.897 L1616.17 683.897 L1615.61 683.897 L1615.05 683.897 L1614.49 683.897 L1613.93 683.897 L1613.37 683.897 L1612.81 683.897 L1612.25 683.897 L1611.69 683.897 L1611.13 683.897 L1610.57 683.897 L1610.02 683.897 L1609.46 683.897 L1608.9 683.897 L1608.34 683.897 L1607.78 683.897 L1607.22 683.897 L1606.66 683.897 L1606.1 683.897 L1605.54 683.897 L1604.98 683.897 L1604.42 683.897 L1603.86 683.897 L1603.3 683.897 L1602.74 683.897 L1602.19 683.897 L1601.63 683.897 L1601.07 683.897 L1600.51 683.897 L1599.95 683.897 L1599.39 683.897 L1598.83 683.897 L1598.27 683.897 L1597.71 683.897 L1597.15 683.897 L1596.59 683.897 L1596.03 683.897 L1595.47 683.897 L1594.92 683.897 L1594.36 683.897 L1593.8 683.897 L1593.24 683.897 L1592.68 683.897 L1592.12 683.897 L1591.56 683.897 L1591 683.897 L1590.44 683.897 L1589.88 683.897 L1589.32 683.897 L1588.76 683.897 L1588.2 683.897 L1587.65 683.897 L1587.09 683.897 L1586.53 683.897 L1585.97 683.897 L1585.41 683.897 L1584.85 683.897 L1584.29 683.897 L1583.73 683.897 L1583.17 683.897 L1582.61 683.897 L1582.05 683.897 L1581.49 683.897 L1580.93 683.897 L1580.37 683.897 L1579.82 683.897 L1579.26 683.897 L1578.7 683.897 L1578.14 683.897 L1577.58 683.897 L1577.02 683.897 L1576.46 683.897 L1575.9 683.897 L1575.34 683.897 L1574.78 683.897 L1574.22 683.897 L1573.66 683.897 L1573.1 683.897 L1572.55 683.897 L1571.99 683.897 L1571.43 683.897 L1570.87 683.897 L1570.31 683.897 L1569.75 683.897 L1569.19 683.897 L1568.63 683.897 L1568.07 683.897 L1567.51 683.897 L1566.95 683.897 L1566.39 683.897 L1565.83 683.897 L1565.28 683.897 L1564.72 683.897 L1564.16 683.897 L1563.6 683.897 L1563.04 683.897 L1562.48 683.897 L1561.92 683.897 L1561.36 683.897 L1560.8 683.897 L1560.24 683.897 L1559.68 683.897 L1559.12 683.897 L1558.56 683.897 L1558 683.897 L1557.45 683.897 L1556.89 683.897 L1556.33 683.897 L1555.77 683.897 L1555.21 683.897 L1554.65 683.897 L1554.09 683.897 L1553.53 683.897 L1552.97 683.897 L1552.41 683.897 L1551.85 683.897 L1551.29 683.897 L1550.73 683.897 L1550.18 683.897 L1549.62 683.897 L1549.06 683.897 L1548.5 683.897 L1547.94 683.897 L1547.38 683.897 L1546.82 683.897 L1546.26 683.897 L1545.7 683.897 L1545.14 683.897 L1544.58 683.897 L1544.02 683.897 L1543.46 683.897 L1542.9 683.897 L1542.35 683.897 L1541.79 683.897 L1541.23 683.897 L1540.67 683.897 L1540.11 683.897 L1539.55 683.897 L1538.99 683.897 L1538.43 683.897 L1537.87 683.897 L1537.31 683.897 L1536.75 683.897 L1536.19 683.897 L1535.63 683.897 L1535.08 683.897 L1534.52 683.897 L1533.96 683.897 L1533.4 683.897 L1532.84 683.897 L1532.28 683.897 L1531.72 683.897 L1531.16 683.897 L1530.6 683.897 L1530.04 683.897 L1529.48 683.897 L1528.92 683.897 L1528.36 683.897 L1527.81 683.897 L1527.25 683.897 L1526.69 683.897 L1526.13 683.897 L1525.57 683.897 L1525.01 683.897 L1524.45 683.897 L1523.89 683.897 L1523.33 683.897 L1522.77 683.897 L1522.21 683.897 L1521.65 683.897 L1521.09 683.897 L1520.53 683.897 L1519.98 683.897 L1519.42 683.897 L1518.86 683.897 L1518.3 683.897 L1517.74 683.897 L1517.18 683.897 L1516.62 683.897 L1516.06 683.897 L1515.5 683.897 L1514.94 683.897 L1514.38 683.897 L1513.82 683.897 L1513.26 683.897 L1512.71 683.897 L1512.15 683.897 L1511.59 683.897 L1511.03 683.897 L1510.47 683.897 L1509.91 683.897 L1509.35 683.897 L1508.79 683.897 L1508.23 683.897 L1507.67 683.897 L1507.11 683.897 L1506.55 683.897 L1505.99 683.897 L1505.44 683.897 L1504.88 683.897 L1504.32 683.897 L1503.76 683.897 L1503.2 683.897 L1502.64 683.897 L1502.08 683.897 L1501.52 683.897 L1500.96 683.897 L1500.4 683.897 L1499.84 683.897 L1499.28 683.897 L1498.72 683.897 L1498.16 683.897 L1497.61 683.897 L1497.05 683.897 L1496.49 683.897 L1495.93 683.897 L1495.37 683.897 L1494.81 683.897 L1494.25 683.897 L1493.69 683.897 L1493.13 683.897 L1492.57 683.897 L1492.01 683.897 L1491.45 683.897 L1490.89 683.897 L1490.34 683.897 L1489.78 683.897 L1489.22 683.897 L1488.66 683.897 L1488.1 683.897 L1487.54 683.897 L1486.98 683.897 L1486.42 683.897 L1485.86 683.897 L1485.3 683.897 L1484.74 683.897 L1484.18 683.897 L1483.62 683.897 L1483.07 683.897 L1482.51 683.897 L1481.95 683.897 L1481.39 683.897 L1480.83 683.897 L1480.27 683.897 L1479.71 683.897 L1479.15 683.897 L1478.59 683.897 L1478.03 683.897 L1477.47 683.897 L1476.91 683.897 L1476.35 683.897 L1475.79 683.897 L1475.24 683.897 L1474.68 683.897 L1474.12 683.897 L1473.56 683.897 L1473 683.897 L1472.44 683.897 L1471.88 683.897 L1471.32 683.897 L1470.76 683.897 L1470.2 683.897 L1469.64 683.897 L1469.08 683.897 L1468.52 683.897 L1467.97 683.897 L1467.41 683.897 L1466.85 683.897 L1466.29 683.897 L1465.73 683.897 L1465.17 683.897 L1464.61 683.897 L1464.05 683.897 L1463.49 683.897 L1462.93 683.897 L1462.37 683.897 L1461.81 683.897 L1461.25 683.897 L1460.7 683.897 L1460.14 683.897 L1459.58 683.897 L1459.02 683.897 L1458.46 683.897 L1457.9 683.897 L1457.34 683.897 L1456.78 683.897 L1456.22 683.897 L1455.66 683.897 L1455.1 683.897 L1454.54 683.897 L1453.98 683.897 L1453.42 683.897 L1452.87 683.897 L1452.31 683.897 L1451.75 683.897 L1451.19 683.897 L1450.63 683.897 L1450.07 683.897 L1449.51 683.897 L1448.95 683.897 L1448.39 683.897 L1447.83 683.897 L1447.27 683.897 L1446.71 683.897 L1446.15 683.897 L1445.6 683.897 L1445.04 683.897 L1444.48 683.897 L1443.92 683.897 L1443.36 683.897 L1442.8 683.897 L1442.24 683.897 L1441.68 683.897 L1441.12 683.897 L1440.56 683.897 L1440 683.897 L1439.44 683.897 L1438.88 683.897 L1438.33 683.897 L1437.77 683.897 L1437.21 683.897 L1436.65 683.897 L1436.09 683.897 L1435.53 683.897 L1434.97 683.897 L1434.41 683.897 L1433.85 683.897 L1433.29 683.897 L1432.73 683.897 L1432.17 683.897 L1431.61 683.897 L1431.05 683.897 L1430.5 683.897 L1429.94 683.897 L1429.38 683.897 L1428.82 683.897 L1428.26 683.897 L1427.7 683.897 L1427.14 683.897 L1426.58 683.897 L1426.02 683.897 L1425.46 683.897 L1424.9 683.897 L1424.34 683.897 L1423.78 683.897 L1423.23 683.897 L1422.67 683.897 L1422.11 683.897 L1421.55 683.897 L1420.99 683.897 L1420.43 683.897 L1419.87 683.897 L1419.31 683.897 L1418.75 683.897 L1418.19 683.897 L1417.63 683.897 L1417.07 683.897 L1416.51 683.897 L1415.95 683.897 L1415.4 683.897 L1414.84 683.897 L1414.28 683.897 L1413.72 683.897 L1413.16 683.897 L1412.6 683.897 L1412.04 683.897 L1411.48 683.897 L1410.92 683.897 L1410.36 683.897 L1409.8 683.897 L1409.24 683.897 L1408.68 683.897 L1408.13 683.897 L1407.57 683.897 L1407.01 683.897 L1406.45 683.897 L1405.89 683.897 L1405.33 683.897 L1404.77 683.897 L1404.21 683.897 L1403.65 683.897 L1403.09 683.897 L1402.53 683.897 L1401.97 683.897 L1401.41 683.897 L1400.86 683.897 L1400.3 683.897 L1399.74 683.897 L1399.18 683.897 L1398.62 683.897 L1398.06 683.897 L1397.5 683.897 L1396.94 683.897 L1396.38 683.897 L1395.82 683.897 L1395.26 683.897 L1394.7 683.897 L1394.14 683.897 L1393.58 683.897 L1393.03 683.897 L1392.47 683.897 L1391.91 683.897 L1391.35 683.897 L1390.79 683.897 L1390.23 683.897 L1389.67 683.897 L1389.11 683.897 L1388.55 683.897 L1387.99 683.897 L1387.43 683.897 L1386.87 683.897 L1386.31 683.897 L1385.76 683.897 L1385.2 683.897 L1384.64 683.897 L1384.08 683.897 L1383.52 683.897 L1382.96 683.897 L1382.4 683.897 L1381.84 683.897 L1381.28 683.897 L1380.72 683.897 L1380.16 683.897 L1379.6 683.897 L1379.04 683.897 L1378.49 683.897 L1377.93 683.897 L1377.37 683.897 L1376.81 683.897 L1376.25 683.897 L1375.69 683.897 L1375.13 683.897 L1374.57 683.897 L1374.01 683.897 L1373.45 683.897 L1372.89 683.897 L1372.33 683.897 L1371.77 683.897 L1371.21 683.897 L1370.66 683.897 L1370.1 683.897 L1369.54 683.897 L1368.98 683.897 L1368.42 683.897 L1367.86 683.897 L1367.3 683.897 L1366.74 683.897 L1366.18 683.897 L1365.62 683.897 L1365.06 683.897 L1364.5 683.897 L1363.94 683.897 L1363.39 683.897 L1362.83 683.897 L1362.27 683.897 L1361.71 683.897 L1361.15 683.897 L1360.59 683.897 L1360.03 683.897 L1359.47 683.897 L1358.91 683.897 L1358.35 683.897 L1357.79 683.897 L1357.23 683.897 L1356.67 683.897 L1356.12 683.897 L1355.56 683.897 L1355 683.897 L1354.44 683.897 L1353.88 683.897 L1353.32 683.897 L1352.76 683.897 L1352.2 683.897 L1351.64 683.897 L1351.08 683.897 L1350.52 683.897 L1349.96 683.897 L1349.4 683.897 L1348.84 683.897 L1348.29 683.897 L1347.73 683.897 L1347.17 683.897 L1346.61 683.897 L1346.05 683.897 L1345.49 683.897 L1344.93 683.897 L1344.37 683.897 L1343.81 683.897 L1343.25 683.897 L1342.69 683.897 L1342.13 683.897 L1341.57 683.897 L1341.02 683.897 L1340.46 683.897 L1339.9 683.897 L1339.34 683.897 L1338.78 683.897 L1338.22 683.897 L1337.66 683.897 L1337.1 683.897 L1336.54 683.897 L1335.98 683.897 L1335.42 683.897 L1334.86 683.897 L1334.3 683.897 L1333.75 683.897 L1333.19 683.897 L1332.63 683.897 L1332.07 683.897 L1331.51 683.897 L1330.95 683.897 L1330.39 683.897 L1329.83 683.897 L1329.27 683.897 L1328.71 683.897 L1328.15 683.897 L1327.59 683.897 L1327.03 683.897 L1326.47 683.897 L1325.92 683.897 L1325.36 683.897 L1324.8 683.897 L1324.24 683.897 L1323.68 683.897 L1323.12 683.897 L1322.56 683.897 L1322 683.897 L1321.44 683.897 L1320.88 683.897 L1320.32 683.897 L1319.76 683.897 L1319.2 683.897 L1318.65 683.897 L1318.09 683.897 L1317.53 683.897 L1316.97 683.897 L1316.41 683.897 L1315.85 683.897 L1315.29 683.897 L1314.73 683.897 L1314.17 683.897 L1313.61 683.897 L1313.05 683.897 L1312.49 683.897 L1311.93 683.897 L1311.38 683.897 L1310.82 683.897 L1310.26 683.897 L1309.7 683.897 L1309.14 683.897 L1308.58 683.897 L1308.02 683.897 L1307.46 683.897 L1306.9 683.897 L1306.34 683.897 L1305.78 683.897 L1305.22 683.897 L1304.66 683.897 L1304.1 683.897 L1303.55 683.897 L1302.99 683.897 L1302.43 683.897 L1301.87 683.897 L1301.31 683.897 L1300.75 683.897 L1300.19 683.897 L1299.63 683.897 L1299.07 683.897 L1298.51 683.897 L1297.95 683.897 L1297.39 683.897 L1296.83 683.897 L1296.28 683.897 L1295.72 683.897 L1295.16 683.897 L1294.6 683.897 L1294.04 683.897 L1293.48 683.897 L1292.92 683.897 L1292.36 683.897 L1291.8 683.897 L1291.24 683.897 L1290.68 683.897 L1290.12 683.897 L1289.56 683.897 L1289 683.897 L1288.45 683.897 L1287.89 683.897 L1287.33 683.897 L1286.77 683.897 L1286.21 683.897 L1285.65 683.897 L1285.09 683.897 L1284.53 683.897 L1283.97 683.897 L1283.41 683.897 L1282.85 683.897 L1282.29 683.897 L1281.73 683.897 L1281.18 683.897 L1280.62 683.897 L1280.06 683.897 L1279.5 683.897 L1278.94 683.897 L1278.38 683.897 L1277.82 683.897 L1277.26 683.897 L1276.7 683.897 L1276.14 683.897 L1275.58 683.897 L1275.02 683.897 L1274.46 683.897 L1273.91 683.897 L1273.35 683.897 L1272.79 683.897 L1272.23 683.897 L1271.67 683.897 L1271.11 683.897 L1270.55 683.897 L1269.99 683.897 L1269.43 683.897 L1268.87 683.897 L1268.31 683.897 L1267.75 683.897 L1267.19 683.897 L1266.63 683.897 L1266.08 683.897 L1265.52 683.897 L1264.96 683.897 L1264.4 683.897 L1263.84 683.897 L1263.28 683.897 L1262.72 683.897 L1262.16 683.897 L1261.6 683.897 L1261.04 683.897 L1260.48 683.897 L1259.92 683.897 L1259.36 683.897 L1258.81 683.897 L1258.25 683.897 L1257.69 683.897 L1257.13 683.897 L1256.57 683.897 L1256.01 683.897 L1255.45 683.897 L1254.89 683.897 L1254.33 683.897 L1253.77 683.897 L1253.21 683.897 L1252.65 683.897 L1252.09 683.897 L1251.54 683.897 L1250.98 683.897 L1250.42 683.897 L1249.86 683.897 L1249.3 683.897 L1248.74 683.897 L1248.18 683.897 L1247.62 683.897 L1247.06 683.897 L1246.5 683.897 L1245.94 683.897 L1245.38 683.897 L1244.82 683.897 L1244.26 683.897 L1243.71 683.897 L1243.15 683.897 L1242.59 683.897 L1242.03 683.897 L1241.47 683.897 L1240.91 683.897 L1240.35 683.897 L1239.79 683.897 L1239.23 683.897 L1238.67 683.897 L1238.11 683.897 L1237.55 683.897 L1236.99 683.897 L1236.44 683.897 L1235.88 683.897 L1235.32 683.897 L1234.76 683.897 L1234.2 683.897 L1233.64 683.897 L1233.08 683.897 L1232.52 683.897 L1231.96 683.897 L1231.4 683.897 L1230.84 683.897 L1230.28 683.897 L1229.72 683.897 L1229.17 683.897 L1228.61 683.897 L1228.05 683.897 L1227.49 683.897 L1226.93 683.897 L1226.37 683.897 L1225.81 683.897 L1225.25 683.897 L1224.69 683.897 L1224.13 683.897 L1223.57 683.897 L1223.01 683.897 L1222.45 683.897 L1221.89 683.897 L1221.34 683.897 L1220.78 683.897 L1220.22 683.897 L1219.66 683.897 L1219.1 683.897 L1218.54 683.897 L1217.98 683.897 L1217.42 683.897 L1216.86 683.897 L1216.3 683.897 L1215.74 683.897 L1215.18 683.897 L1214.62 683.897 L1214.07 683.897 L1213.51 683.897 L1212.95 683.897 L1212.39 683.897 L1211.83 683.897 L1211.27 683.897 L1210.71 683.897 L1210.15 683.897 L1209.59 683.897 L1209.03 683.897 L1208.47 683.897 L1207.91 683.897 L1207.35 683.897 L1206.8 683.897 L1206.24 683.897 L1205.68 683.897 L1205.12 683.897 L1204.56 683.897 L1204 683.897 L1203.44 683.897 L1202.88 683.897 L1202.32 683.897 L1201.76 683.897 L1201.2 683.897 L1200.64 683.897 L1200.08 683.897 L1199.52 683.897 L1198.97 683.897 L1198.41 683.897 L1197.85 683.897 L1197.29 683.897 L1196.73 683.897 L1196.17 683.897 L1195.61 683.897 L1195.05 683.897 L1194.49 683.897 L1193.93 683.897 L1193.37 683.897 L1192.81 683.897 L1192.25 683.897 L1191.7 683.897 L1191.14 683.897 L1190.58 683.897 L1190.02 683.897 L1189.46 683.897 L1188.9 683.897 L1188.34 683.897 L1187.78 683.897 L1187.22 683.897 L1186.66 683.897 L1186.1 683.897 L1185.54 683.897 L1184.98 683.897 L1184.43 683.897 L1183.87 683.897 L1183.31 683.897 L1182.75 683.897 L1182.19 683.897 L1181.63 683.897 L1181.07 683.897 L1180.51 683.897 L1179.95 683.897 L1179.39 683.897 L1178.83 683.897 L1178.27 683.897 L1177.71 683.897 L1177.15 683.897 L1176.6 683.897 L1176.04 683.897 L1175.48 683.897 L1174.92 683.897 L1174.36 683.897 L1173.8 683.897 L1173.24 683.897 L1172.68 683.897 L1172.12 683.897 L1171.56 683.897 L1171 683.897 L1170.44 683.897 L1169.88 683.897 L1169.33 683.897 L1168.77 683.897 L1168.21 683.897 L1167.65 683.897 L1167.09 683.897 L1166.53 683.897 L1165.97 683.897 L1165.41 683.897 L1164.85 683.897 L1164.29 683.897 L1163.73 683.897 L1163.17 683.897 L1162.61 683.897 L1162.05 683.897 L1161.5 683.897 L1160.94 683.897 L1160.38 683.897 L1159.82 683.897 L1159.26 683.897 L1158.7 683.897 L1158.14 683.897 L1157.58 683.897 L1157.02 683.897 L1156.46 683.897 L1155.9 683.897 L1155.34 683.897 L1154.78 683.897 L1154.23 683.897 L1153.67 683.897 L1153.11 683.897 L1152.55 683.897 L1151.99 683.897 L1151.43 683.897 L1150.87 683.897 L1150.31 683.897 L1149.75 683.897 L1149.19 683.897 L1148.63 683.897 L1148.07 683.897 L1147.51 683.897 L1146.96 683.897 L1146.4 683.897 L1145.84 683.897 L1145.28 683.897 L1144.72 683.897 L1144.16 683.897 L1143.6 683.897 L1143.04 683.897 L1142.48 683.897 L1141.92 683.897 L1141.36 683.897 L1140.8 683.897 L1140.24 683.897 L1139.68 683.897 L1139.13 683.897 L1138.57 683.897 L1138.01 683.897 L1137.45 683.897 L1136.89 683.897 L1136.33 683.897 L1135.77 683.897 L1135.21 683.897 L1134.65 683.897 L1134.09 683.897 L1133.53 683.897 L1132.97 683.897 L1132.41 683.897 L1131.86 683.897 L1131.3 683.897 L1130.74 683.897 L1130.18 683.897 L1129.62 683.897 L1129.06 683.897 L1128.5 683.897 L1127.94 683.897 L1127.38 683.897 L1126.82 683.897 L1126.26 683.897 L1125.7 683.897 L1125.14 683.897 L1124.59 683.897 L1124.03 683.897 L1123.47 683.897 L1122.91 683.897 L1122.35 683.897 L1121.79 683.897 L1121.23 683.897 L1120.67 683.897 L1120.11 683.897 L1119.55 683.897 L1118.99 683.897 L1118.43 683.897 L1117.87 683.897 L1117.31 683.897 L1116.76 683.897 L1116.2 683.897 L1115.64 683.897 L1115.08 683.897 L1114.52 683.897 L1113.96 683.897 L1113.4 683.897 L1112.84 683.897 L1112.28 683.897 L1111.72 683.897 L1111.16 683.897 L1110.6 683.897 L1110.04 683.897 L1109.49 683.897 L1108.93 683.897 L1108.37 683.897 L1107.81 683.897 L1107.25 683.897 L1106.69 683.897 L1106.13 683.897 L1105.57 683.897 L1105.01 683.897 L1104.45 683.897 L1103.89 683.897 L1103.33 683.897 L1102.77 683.897 L1102.22 683.897 L1101.66 683.897 L1101.1 683.897 L1100.54 683.897 L1099.98 683.897 L1099.42 683.897 L1098.86 683.897 L1098.3 683.897 L1097.74 683.897 L1097.18 683.897 L1096.62 683.897 L1096.06 683.897 L1095.5 683.897 L1094.94 683.897 L1094.39 683.897 L1093.83 683.897 L1093.27 683.897 L1092.71 683.897 L1092.15 683.897 L1091.59 683.897 L1091.03 683.897 L1090.47 683.897 L1089.91 683.897 L1089.35 683.897 L1088.79 683.897 L1088.23 683.897 L1087.67 683.897 L1087.12 683.897 L1086.56 683.897 L1086 683.897 L1085.44 683.897 L1084.88 683.897 L1084.32 683.897 L1083.76 683.897 L1083.2 683.897 L1082.64 683.897 L1082.08 683.897 L1081.52 683.897 L1080.96 683.897 L1080.4 683.897 L1079.85 683.897 L1079.29 683.897 L1078.73 683.897 L1078.17 683.897 L1077.61 683.897 L1077.05 683.897 L1076.49 683.897 L1075.93 683.897 L1075.37 683.897 L1074.81 683.897 L1074.25 683.897 L1073.69 683.897 L1073.13 683.897 L1072.57 683.897 L1072.02 683.897 L1071.46 683.897 L1070.9 683.897 L1070.34 683.897 L1069.78 683.897 L1069.22 683.897 L1068.66 683.897 L1068.1 683.897 L1067.54 683.897 L1066.98 683.897 L1066.42 683.897 L1065.86 683.897 L1065.3 683.897 L1064.75 683.897 L1064.19 683.897 L1063.63 683.897 L1063.07 683.897 L1062.51 683.897 L1061.95 683.897 L1061.39 683.897 L1060.83 683.897 L1060.27 683.897 L1059.71 683.897 L1059.15 683.897 L1058.59 683.897 L1058.03 683.897 L1057.48 683.897 L1056.92 683.897 L1056.36 683.897 L1055.8 683.897 L1055.24 683.897 L1054.68 683.897 L1054.12 683.897 L1053.56 683.897 L1053 683.897 L1052.44 683.897 L1051.88 683.897 L1051.32 683.897 L1050.76 683.897 L1050.2 683.897 L1049.65 683.897 L1049.09 683.897 L1048.53 683.897 L1047.97 683.897 L1047.41 683.897 L1046.85 683.897 L1046.29 683.897 L1045.73 683.897 L1045.17 683.897 L1044.61 683.897 L1044.05 683.897 L1043.49 683.897 L1042.93 683.897 L1042.38 683.897 L1041.82 683.897 L1041.26 683.897 L1040.7 683.897 L1040.14 683.897 L1039.58 683.897 L1039.02 683.897 L1038.46 683.897 L1037.9 683.897 L1037.34 683.897 L1036.78 683.897 L1036.22 683.897 L1035.66 683.897 L1035.1 683.897 L1034.55 683.897 L1033.99 683.897 L1033.43 683.897 L1032.87 683.897 L1032.31 683.897 L1031.75 683.897 L1031.19 683.897 L1030.63 683.897 L1030.07 683.897 L1029.51 683.897 L1028.95 683.897 L1028.39 683.897 L1027.83 683.897 L1027.28 683.897 L1026.72 683.897 L1026.16 683.897 L1025.6 683.897 L1025.04 683.897 L1024.48 683.897 L1023.92 683.897 L1023.36 683.897 L1022.8 683.897 L1022.24 683.897 L1021.68 683.897 L1021.12 683.897 L1020.56 683.897 L1020.01 683.897 L1019.45 683.897 L1018.89 683.897 L1018.33 683.897 L1017.77 683.897 L1017.21 683.897 L1016.65 683.897 L1016.09 683.897 L1015.53 683.897 L1014.97 683.897 L1014.41 683.897 L1013.85 683.897 L1013.29 683.897 L1012.73 683.897 L1012.18 683.897 L1011.62 683.897 L1011.06 683.897 L1010.5 683.897 L1009.94 683.897 L1009.38 683.897 L1008.82 683.897 L1008.26 683.897 L1007.7 683.897 L1007.14 683.897 L1006.58 683.897 L1006.02 683.897 L1005.46 683.897 L1004.91 683.897 L1004.35 683.897 L1003.79 683.897 L1003.23 683.897 L1002.67 683.897 L1002.11 683.897 L1001.55 683.897 L1000.99 683.897 L1000.43 683.897 L999.872 683.897 L999.313 683.897 L998.754 683.897 L998.194 683.897 L997.635 683.897 L997.076 683.897 L996.517 683.897 L995.957 683.897 L995.398 683.897 L994.839 683.897 L994.28 683.897 L993.72 683.897 L993.161 683.897 L992.602 683.897 L992.043 683.897 L991.483 683.897 L990.924 683.897 L990.365 683.897 L989.806 683.897 L989.246 683.897 L988.687 683.897 L988.128 683.897 L987.569 683.897 L987.009 683.897 L986.45 683.897 L985.891 683.897 L985.332 683.897 L984.772 683.897 L984.213 683.897 L983.654 683.897 L983.095 683.897 L982.535 683.897 L981.976 683.897 L981.417 683.897 L980.858 683.897 L980.298 683.897 L979.739 683.897 L979.18 683.897 L978.621 683.897 L978.061 683.897 L977.502 683.897 L976.943 683.897 L976.384 683.897 L975.824 683.897 L975.265 683.897 L974.706 683.897 L974.147 683.897 L973.587 683.897 L973.028 683.897 L972.469 683.897 L971.91 683.897 L971.35 683.897 L970.791 683.897 L970.232 683.897 L969.673 683.897 L969.113 683.897 L968.554 683.897 L967.995 683.897 L967.436 683.897 L966.876 683.897 L966.317 683.897 L965.758 683.897 L965.199 683.897 L964.639 683.897 L964.08 683.897 L963.521 683.897 L962.962 683.897 L962.402 683.897 L961.843 683.897 L961.284 683.897 L960.725 683.897 L960.165 683.897 L959.606 683.897 L959.047 683.897 L958.488 683.897 L957.928 683.897 L957.369 683.897 L956.81 683.897 L956.251 683.897 L955.691 683.897 L955.132 683.897 L954.573 683.897 L954.014 683.897 L953.454 683.897 L952.895 683.897 L952.336 683.897 L951.777 683.897 L951.217 683.897 L950.658 683.897 L950.099 683.897 L949.54 683.897 L948.98 683.897 L948.421 683.897 L947.862 683.897 L947.303 683.897 L946.743 683.897 L946.184 683.897 L945.625 683.897 L945.066 683.897 L944.506 683.897 L943.947 683.897 L943.388 683.897 L942.829 683.897 L942.269 683.897 L941.71 683.897 L941.151 683.897 L940.592 683.897 L940.032 683.897 L939.473 683.897 L938.914 683.897 L938.355 683.897 L937.795 683.897 L937.236 683.897 L936.677 683.897 L936.118 683.897 L935.558 683.897 L934.999 683.897 L934.44 683.897 L933.881 683.897 L933.321 683.897 L932.762 683.897 L932.203 683.897 L931.644 683.897 L931.084 683.897 L930.525 683.897 L929.966 683.897 L929.406 683.897 L928.847 683.897 L928.288 683.897 L927.729 683.897 L927.169 683.897 L926.61 683.897 L926.051 683.897 L925.492 683.897 L924.932 683.897 L924.373 683.897 L923.814 683.897 L923.255 683.897 L922.695 683.897 L922.136 683.897 L921.577 683.897 L921.018 683.897 L920.458 683.897 L919.899 683.897 L919.34 683.897 L918.781 683.897 L918.221 683.897 L917.662 683.897 L917.103 683.897 L916.544 683.897 L915.984 683.897 L915.425 683.897 L914.866 683.897 L914.307 683.897 L913.747 683.897 L913.188 683.897 L912.629 683.897 L912.07 683.897 L911.51 683.897 L910.951 683.897 L910.392 683.897 L909.833 683.897 L909.273 683.897 L908.714 683.897 L908.155 683.897 L907.596 683.897 L907.036 683.897 L906.477 683.897 L905.918 683.897 L905.359 683.897 L904.799 683.897 L904.24 683.897 L903.681 683.897 L903.122 683.897 L902.562 683.897 L902.003 683.897 L901.444 683.897 L900.885 683.897 L900.325 683.897 L899.766 683.897 L899.207 683.897 L898.648 683.897 L898.088 683.897 L897.529 683.897 L896.97 683.897 L896.411 683.897 L895.851 683.897 L895.292 683.897 L894.733 683.897 L894.174 683.897 L893.614 683.897 L893.055 683.897 L892.496 683.897 L891.937 683.897 L891.377 683.897 L890.818 683.897 L890.259 683.897 L889.7 683.897 L889.14 683.897 L888.581 683.897 L888.022 683.897 L887.463 683.897 L886.903 683.897 L886.344 683.897 L885.785 683.897 L885.226 683.897 L884.666 683.897 L884.107 683.897 L883.548 683.897 L882.989 683.897 L882.429 683.897 L881.87 683.897 L881.311 683.897 L880.752 683.897 L880.192 683.897 L879.633 683.897 L879.074 683.897 L878.515 683.897 L877.955 683.897 L877.396 683.897 L876.837 683.897 L876.278 683.897 L875.718 683.897 L875.159 683.897 L874.6 683.897 L874.041 683.897 L873.481 683.897 L872.922 683.897 L872.363 683.897 L871.804 683.897 L871.244 683.897 L870.685 683.897 L870.126 683.897 L869.567 683.897 L869.007 683.897 L868.448 683.897 L867.889 683.897 L867.33 683.897 L866.77 683.897 L866.211 683.897 L865.652 683.897 L865.093 683.897 L864.533 683.897 L863.974 683.897 L863.415 683.897 L862.856 683.897 L862.296 683.897 L861.737 683.897 L861.178 683.897 L860.619 683.897 L860.059 683.897 L859.5 683.897 L858.941 683.897 L858.382 683.897 L857.822 683.897 L857.263 683.897 L856.704 683.897 L856.145 683.897 L855.585 683.897 L855.026 683.897 L854.467 683.897 L853.908 683.897 L853.348 683.897 L852.789 683.897 L852.23 683.897 L851.671 683.897 L851.111 683.897 L850.552 683.897 L849.993 683.897 L849.434 683.897 L848.874 683.897 L848.315 683.897 L847.756 683.897 L847.197 683.897 L846.637 683.897 L846.078 683.897 L845.519 683.897 L844.96 683.897 L844.4 683.897 L843.841 683.897 L843.282 683.897 L842.723 683.897 L842.163 683.897 L841.604 683.897 L841.045 683.897 L840.486 683.897 L839.926 683.897 L839.367 683.897 L838.808 683.897 L838.249 683.897 L837.689 683.897 L837.13 683.897 L836.571 683.897 L836.012 683.897 L835.452 683.897 L834.893 683.897 L834.334 683.897 L833.775 683.897 L833.215 683.897 L832.656 683.897 L832.097 683.897 L831.538 683.897 L830.978 683.897 L830.419 683.897 L829.86 683.897 L829.301 683.897 L828.741 683.897 L828.182 683.897 L827.623 683.897 L827.064 683.897 L826.504 683.897 L825.945 683.897 L825.386 683.897 L824.827 683.897 L824.267 683.897 L823.708 683.897 L823.149 683.897 L822.59 683.897 L822.03 683.897 L821.471 683.897 L820.912 683.897 L820.353 683.897 L819.793 683.897 L819.234 683.897 L818.675 683.897 L818.116 683.897 L817.556 683.897 L816.997 683.897 L816.438 683.897 L815.879 683.897 L815.319 683.897 L814.76 683.897 L814.201 683.897 L813.642 683.897 L813.082 683.897 L812.523 683.897 L811.964 683.897 L811.405 683.897 L810.845 683.897 L810.286 683.897 L809.727 683.897 L809.168 683.897 L808.608 683.897 L808.049 683.897 L807.49 683.897 L806.931 683.897 L806.371 683.897 L805.812 683.897 L805.253 683.897 L804.693 683.897 L804.134 683.897 L803.575 683.897 L803.016 683.897 L802.456 683.897 L801.897 683.897 L801.338 683.897 L800.779 683.897 L800.219 683.897 L799.66 683.897 L799.101 683.897 L798.542 683.897 L797.982 683.897 L797.423 683.897 L796.864 683.897 L796.305 683.897 L795.745 683.897 L795.186 683.897 L794.627 683.897 L794.068 683.897 L793.508 683.897 L792.949 683.897 L792.39 683.897 L791.831 683.897 L791.271 683.897 L790.712 683.897 L790.153 683.897 L789.594 683.897 L789.034 683.897 L788.475 683.897 L787.916 683.897 L787.357 683.897 L786.797 683.897 L786.238 683.897 L785.679 683.897 L785.12 683.897 L784.56 683.897 L784.001 683.897 L783.442 683.897 L782.883 683.897 L782.323 683.897 L781.764 683.897 L781.205 683.897 L780.646 683.897 L780.086 683.897 L779.527 683.897 L778.968 683.897 L778.409 683.897 L777.849 683.897 L777.29 683.897 L776.731 683.897 L776.172 683.897 L775.612 683.897 L775.053 683.897 L774.494 683.897 L773.935 683.897 L773.375 683.897 L772.816 683.897 L772.257 683.897 L771.698 683.897 L771.138 683.897 L770.579 683.897 L770.02 683.897 L769.461 683.897 L768.901 683.897 L768.342 683.897 L767.783 683.897 L767.224 683.897 L766.664 683.897 L766.105 683.897 L765.546 683.897 L764.987 683.897 L764.427 683.897 L763.868 683.897 L763.309 683.897 L762.75 683.897 L762.19 683.897 L761.631 683.897 L761.072 683.897 L760.513 683.897 L759.953 683.897 L759.394 683.897 L758.835 683.897 L758.276 683.897 L757.716 683.897 L757.157 683.897 L756.598 683.897 L756.039 683.897 L755.479 683.897 L754.92 683.897 L754.361 683.897 L753.802 683.897 L753.242 683.897 L752.683 683.897 L752.124 683.897 L751.565 683.897 L751.005 683.897 L750.446 683.897 L749.887 683.897 L749.328 683.897 L748.768 683.897 L748.209 683.897 L747.65 683.897 L747.091 683.897 L746.531 683.897 L745.972 683.897 L745.413 683.897 L744.854 683.897 L744.294 683.897 L743.735 683.897 L743.176 683.897 L742.617 683.897 L742.057 683.897 L741.498 683.897 L740.939 683.897 L740.38 683.897 L739.82 683.897 L739.261 683.897 L738.702 683.897 L738.143 683.897 L737.583 683.897 L737.024 683.897 L736.465 683.897 L735.906 683.897 L735.346 683.897 L734.787 683.897 L734.228 683.897 L733.669 683.897 L733.109 683.897 L732.55 683.897 L731.991 683.897 L731.432 683.897 L730.872 683.897 L730.313 683.897 L729.754 683.897 L729.195 683.897 L728.635 683.897 L728.076 683.897 L727.517 683.897 L726.958 683.897 L726.398 683.897 L725.839 683.897 L725.28 683.897 L724.721 683.897 L724.161 683.897 L723.602 683.897 L723.043 683.897 L722.484 683.897 L721.924 683.897 L721.365 683.897 L720.806 683.897 L720.247 683.897  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.669 720.806,688.669 721.365,688.669 721.924,688.669 722.484,688.669 723.043,688.669 723.602,688.669 724.161,688.669 724.721,688.669 725.28,688.669 725.839,688.669 726.398,688.669 726.958,688.669 727.517,688.669 728.076,688.669 728.635,688.669 729.195,688.669 729.754,688.669 730.313,688.669 730.872,688.669 731.432,688.669 731.991,688.669 732.55,688.669 733.109,688.669 733.669,688.669 734.228,688.669 734.787,688.669 735.346,688.669 735.906,688.669 736.465,688.669 737.024,688.669 737.583,688.669 738.143,688.669 738.702,688.669 739.261,688.669 739.82,688.669 740.38,688.669 740.939,688.669 741.498,688.669 742.057,688.669 742.617,688.669 743.176,688.669 743.735,688.669 744.294,688.669 744.854,688.669 745.413,688.669 745.972,688.669 746.531,688.669 747.091,688.669 747.65,688.669 748.209,688.669 748.768,688.669 749.328,688.669 749.887,688.669 750.446,688.669 751.005,688.669 751.565,688.669 752.124,688.669 752.683,688.669 753.242,688.669 753.802,688.669 754.361,688.669 754.92,688.669 755.479,688.669 756.039,688.669 756.598,688.669 757.157,688.669 757.716,688.669 758.276,688.669 758.835,688.669 759.394,688.669 759.953,688.669 760.513,688.669 761.072,688.669 761.631,688.669 762.19,688.669 762.75,688.669 763.309,688.669 763.868,688.669 764.427,688.669 764.987,688.669 765.546,688.669 766.105,688.669 766.664,688.669 767.224,688.669 767.783,688.669 768.342,688.669 768.901,688.669 769.461,688.669 770.02,688.669 770.579,688.669 771.138,688.669 771.698,688.669 772.257,688.669 772.816,688.669 773.375,688.669 773.935,688.669 774.494,688.669 775.053,688.669 775.612,688.669 776.172,688.669 776.731,688.669 777.29,688.669 777.849,688.669 778.409,688.669 778.968,688.669 779.527,688.669 780.086,688.669 780.646,688.669 781.205,688.669 781.764,688.669 782.323,688.669 782.883,688.669 783.442,688.669 784.001,688.669 784.56,688.669 785.12,688.669 785.679,688.669 786.238,688.669 786.797,688.669 787.357,688.669 787.916,688.669 788.475,688.669 789.034,688.669 789.594,688.669 790.153,688.669 790.712,688.669 791.271,688.669 791.831,688.669 792.39,688.669 792.949,688.669 793.508,688.669 794.068,688.669 794.627,688.669 795.186,688.669 795.745,688.669 796.305,688.669 796.864,688.669 797.423,688.669 797.982,688.669 798.542,688.669 799.101,688.669 799.66,688.669 800.219,688.669 800.779,688.669 801.338,688.669 801.897,688.669 802.456,688.669 803.016,688.669 803.575,688.669 804.134,688.669 804.693,688.669 805.253,688.669 805.812,688.669 806.371,688.669 806.931,688.669 807.49,688.669 808.049,688.669 808.608,688.669 809.168,688.669 809.727,688.669 810.286,688.669 810.845,688.669 811.405,688.669 811.964,688.669 812.523,688.669 813.082,688.669 813.642,688.669 814.201,688.669 814.76,688.669 815.319,688.669 815.879,688.669 816.438,688.669 816.997,688.669 817.556,688.669 818.116,688.669 818.675,688.669 819.234,688.669 819.793,688.669 820.353,688.669 820.912,688.669 821.471,688.669 822.03,688.669 822.59,688.669 823.149,688.669 823.708,688.669 824.267,688.669 824.827,688.669 825.386,688.669 825.945,688.669 826.504,688.669 827.064,688.669 827.623,688.669 828.182,688.669 828.741,688.669 829.301,688.669 829.86,688.669 830.419,688.669 830.978,688.669 831.538,688.669 832.097,688.669 832.656,688.669 833.215,688.669 833.775,688.669 834.334,688.669 834.893,688.669 835.452,688.669 836.012,688.669 836.571,688.669 837.13,688.669 837.689,688.669 838.249,688.669 838.808,688.669 839.367,688.669 839.926,688.669 840.486,688.669 841.045,688.669 841.604,688.669 842.163,688.669 842.723,688.669 843.282,688.669 843.841,688.669 844.4,688.669 844.96,688.669 845.519,688.669 846.078,688.669 846.637,688.669 847.197,688.669 847.756,688.669 848.315,688.669 848.874,688.669 849.434,688.669 849.993,688.669 850.552,688.669 851.111,688.669 851.671,688.669 852.23,688.669 852.789,688.669 853.348,688.669 853.908,688.669 854.467,688.669 855.026,688.669 855.585,688.669 856.145,688.669 856.704,688.669 857.263,688.669 857.822,688.669 858.382,688.669 858.941,688.669 859.5,688.669 860.059,688.669 860.619,688.669 861.178,688.669 861.737,688.669 862.296,688.669 862.856,688.669 863.415,688.669 863.974,688.669 864.533,688.669 865.093,688.669 865.652,688.669 866.211,688.669 866.77,688.669 867.33,688.669 867.889,688.669 868.448,688.669 869.007,688.669 869.567,688.669 870.126,688.669 870.685,688.669 871.244,688.669 871.804,688.669 872.363,688.669 872.922,688.669 873.481,688.669 874.041,688.669 874.6,688.669 875.159,688.669 875.718,688.669 876.278,688.669 876.837,688.669 877.396,688.669 877.955,688.669 878.515,688.669 879.074,688.669 879.633,688.669 880.192,688.669 880.752,688.669 881.311,688.669 881.87,688.669 882.429,688.669 882.989,688.669 883.548,688.669 884.107,688.669 884.666,688.669 885.226,688.669 885.785,688.669 886.344,688.669 886.903,688.669 887.463,688.669 888.022,688.669 888.581,688.669 889.14,688.669 889.7,688.669 890.259,688.669 890.818,688.669 891.377,688.669 891.937,688.669 892.496,688.669 893.055,688.669 893.614,688.669 894.174,688.669 894.733,688.669 895.292,688.669 895.851,688.669 896.411,688.669 896.97,688.669 897.529,688.669 898.088,688.669 898.648,688.669 899.207,688.669 899.766,688.669 900.325,688.669 900.885,688.669 901.444,688.669 902.003,688.669 902.562,688.669 903.122,688.669 903.681,688.669 904.24,688.669 904.799,688.669 905.359,688.669 905.918,688.669 906.477,688.669 907.036,688.669 907.596,688.669 908.155,688.669 908.714,688.669 909.273,688.669 909.833,688.669 910.392,688.669 910.951,688.669 911.51,688.669 912.07,688.669 912.629,688.669 913.188,688.669 913.747,688.669 914.307,688.669 914.866,688.669 915.425,688.669 915.984,688.669 916.544,688.669 917.103,688.669 917.662,688.669 918.221,688.669 918.781,688.669 919.34,688.669 919.899,688.669 920.458,688.669 921.018,688.669 921.577,688.669 922.136,688.669 922.695,688.669 923.255,688.669 923.814,688.669 924.373,688.669 924.932,688.669 925.492,688.669 926.051,688.669 926.61,688.669 927.169,688.669 927.729,688.669 928.288,688.669 928.847,688.669 929.406,688.669 929.966,688.669 930.525,688.669 931.084,688.669 931.644,688.669 932.203,688.669 932.762,688.669 933.321,688.669 933.881,688.669 934.44,688.669 934.999,688.669 935.558,688.669 936.118,688.669 936.677,688.669 937.236,688.669 937.795,688.669 938.355,688.669 938.914,688.669 939.473,688.669 940.032,688.669 940.592,688.669 941.151,688.669 941.71,688.669 942.269,688.669 942.829,688.669 943.388,688.669 943.947,688.669 944.506,688.669 945.066,688.669 945.625,688.669 946.184,688.669 946.743,688.669 947.303,688.669 947.862,688.669 948.421,688.669 948.98,688.669 949.54,688.669 950.099,688.669 950.658,688.669 951.217,688.669 951.777,688.669 952.336,688.669 952.895,688.669 953.454,688.669 954.014,688.669 954.573,688.669 955.132,688.669 955.691,688.669 956.251,688.669 956.81,688.669 957.369,688.669 957.928,688.669 958.488,688.669 959.047,688.669 959.606,688.669 960.165,688.669 960.725,688.669 961.284,688.669 961.843,688.669 962.402,688.669 962.962,688.669 963.521,688.669 964.08,688.669 964.639,688.669 965.199,688.669 965.758,688.669 966.317,688.669 966.876,688.669 967.436,688.669 967.995,688.669 968.554,688.669 969.113,688.669 969.673,688.669 970.232,688.669 970.791,688.669 971.35,688.669 971.91,688.669 972.469,688.669 973.028,688.669 973.587,688.669 974.147,688.669 974.706,688.669 975.265,688.669 975.824,688.669 976.384,688.669 976.943,688.669 977.502,688.669 978.061,688.669 978.621,688.669 979.18,688.669 979.739,688.669 980.298,688.669 980.858,688.669 981.417,688.669 981.976,688.669 982.535,688.669 983.095,688.669 983.654,688.669 984.213,688.669 984.772,688.669 985.332,688.669 985.891,688.669 986.45,688.669 987.009,688.669 987.569,688.669 988.128,688.669 988.687,688.669 989.246,688.669 989.806,688.669 990.365,688.669 990.924,688.669 991.483,688.669 992.043,688.669 992.602,688.669 993.161,688.669 993.72,688.669 994.28,688.669 994.839,688.669 995.398,688.669 995.957,688.669 996.517,688.669 997.076,688.669 997.635,688.669 998.194,688.669 998.754,688.669 999.313,688.669 999.872,688.669 1000.43,688.669 1000.99,688.669 1001.55,688.669 1002.11,688.669 1002.67,688.669 1003.23,688.669 1003.79,688.669 1004.35,688.669 1004.91,688.669 1005.46,688.669 1006.02,688.669 1006.58,688.669 1007.14,688.669 1007.7,688.669 1008.26,688.669 1008.82,688.669 1009.38,688.669 1009.94,688.669 1010.5,688.669 1011.06,688.669 1011.62,688.669 1012.18,688.669 1012.73,688.669 1013.29,688.669 1013.85,688.669 1014.41,688.669 1014.97,688.669 1015.53,688.669 1016.09,688.669 1016.65,688.669 1017.21,688.669 1017.77,688.669 1018.33,688.669 1018.89,688.669 1019.45,688.669 1020.01,688.669 1020.56,688.669 1021.12,688.669 1021.68,688.669 1022.24,688.669 1022.8,688.669 1023.36,688.669 1023.92,688.669 1024.48,688.669 1025.04,688.669 1025.6,688.669 1026.16,688.669 1026.72,688.669 1027.28,688.669 1027.83,688.669 1028.39,688.669 1028.95,688.669 1029.51,688.669 1030.07,688.669 1030.63,688.669 1031.19,688.669 1031.75,688.669 1032.31,688.669 1032.87,688.669 1033.43,688.669 1033.99,688.669 1034.55,688.669 1035.1,688.669 1035.66,688.669 1036.22,688.669 1036.78,688.669 1037.34,688.669 1037.9,688.669 1038.46,688.669 1039.02,688.669 1039.58,688.669 1040.14,688.669 1040.7,688.669 1041.26,688.669 1041.82,688.669 1042.38,688.669 1042.93,688.669 1043.49,688.669 1044.05,688.669 1044.61,688.669 1045.17,688.669 1045.73,688.669 1046.29,688.669 1046.85,688.669 1047.41,688.669 1047.97,688.669 1048.53,688.669 1049.09,688.669 1049.65,688.669 1050.2,688.669 1050.76,688.669 1051.32,688.669 1051.88,688.669 1052.44,688.669 1053,688.669 1053.56,688.669 1054.12,688.669 1054.68,688.669 1055.24,688.669 1055.8,688.669 1056.36,688.669 1056.92,688.669 1057.48,688.669 1058.03,688.669 1058.59,688.669 1059.15,688.669 1059.71,688.669 1060.27,688.669 1060.83,688.669 1061.39,688.669 1061.95,688.669 1062.51,688.669 1063.07,688.669 1063.63,688.669 1064.19,688.669 1064.75,688.669 1065.3,688.669 1065.86,688.669 1066.42,688.669 1066.98,688.669 1067.54,688.669 1068.1,688.669 1068.66,688.669 1069.22,688.669 1069.78,688.669 1070.34,688.669 1070.9,688.669 1071.46,688.669 1072.02,688.669 1072.57,688.669 1073.13,688.669 1073.69,688.669 1074.25,688.669 1074.81,688.669 1075.37,688.669 1075.93,688.669 1076.49,688.669 1077.05,688.669 1077.61,688.669 1078.17,688.669 1078.73,688.669 1079.29,688.669 1079.85,688.669 1080.4,688.669 1080.96,688.669 1081.52,688.669 1082.08,688.669 1082.64,688.669 1083.2,688.669 1083.76,688.669 1084.32,688.669 1084.88,688.669 1085.44,688.669 1086,688.669 1086.56,688.669 1087.12,688.669 1087.67,688.669 1088.23,688.669 1088.79,688.669 1089.35,688.669 1089.91,688.669 1090.47,688.669 1091.03,688.669 1091.59,688.669 1092.15,688.669 1092.71,688.669 1093.27,688.669 1093.83,688.669 1094.39,688.669 1094.94,688.669 1095.5,688.669 1096.06,688.669 1096.62,688.669 1097.18,688.669 1097.74,688.669 1098.3,688.669 1098.86,688.669 1099.42,688.669 1099.98,688.669 1100.54,688.669 1101.1,688.669 1101.66,688.669 1102.22,688.669 1102.77,688.669 1103.33,688.669 1103.89,688.669 1104.45,688.669 1105.01,688.669 1105.57,688.669 1106.13,688.669 1106.69,688.669 1107.25,688.669 1107.81,688.669 1108.37,688.669 1108.93,688.669 1109.49,688.669 1110.04,688.669 1110.6,688.669 1111.16,688.669 1111.72,688.669 1112.28,688.669 1112.84,688.669 1113.4,688.669 1113.96,688.669 1114.52,688.669 1115.08,688.669 1115.64,688.669 1116.2,688.669 1116.76,688.669 1117.31,688.669 1117.87,688.669 1118.43,688.669 1118.99,688.669 1119.55,688.669 1120.11,688.669 1120.67,688.669 1121.23,688.669 1121.79,688.669 1122.35,688.669 1122.91,688.669 1123.47,688.669 1124.03,688.669 1124.59,688.669 1125.14,688.669 1125.7,688.669 1126.26,688.669 1126.82,688.669 1127.38,688.669 1127.94,688.669 1128.5,688.669 1129.06,688.669 1129.62,688.669 1130.18,688.669 1130.74,688.669 1131.3,688.669 1131.86,688.669 1132.41,688.669 1132.97,688.669 1133.53,688.669 1134.09,688.669 1134.65,688.669 1135.21,688.669 1135.77,688.669 1136.33,688.669 1136.89,688.669 1137.45,688.669 1138.01,688.669 1138.57,688.669 1139.13,688.669 1139.68,688.669 1140.24,688.669 1140.8,688.669 1141.36,688.669 1141.92,688.669 1142.48,688.669 1143.04,688.669 1143.6,688.669 1144.16,688.669 1144.72,688.669 1145.28,688.669 1145.84,688.669 1146.4,688.669 1146.96,688.669 1147.51,688.669 1148.07,688.669 1148.63,688.669 1149.19,688.669 1149.75,688.669 1150.31,688.669 1150.87,688.669 1151.43,688.669 1151.99,688.669 1152.55,688.669 1153.11,688.669 1153.67,688.669 1154.23,688.669 1154.78,688.669 1155.34,688.669 1155.9,688.669 1156.46,688.669 1157.02,688.669 1157.58,688.669 1158.14,688.669 1158.7,688.669 1159.26,688.669 1159.82,688.669 1160.38,688.669 1160.94,688.669 1161.5,688.669 1162.05,688.669 1162.61,688.669 1163.17,688.669 1163.73,688.669 1164.29,688.669 1164.85,688.669 1165.41,688.669 1165.97,688.669 1166.53,688.669 1167.09,688.669 1167.65,688.669 1168.21,688.669 1168.77,688.669 1169.33,688.669 1169.88,688.669 1170.44,688.669 1171,688.669 1171.56,688.669 1172.12,688.669 1172.68,688.669 1173.24,688.669 1173.8,688.669 1174.36,688.669 1174.92,688.669 1175.48,688.669 1176.04,688.669 1176.6,688.669 1177.15,688.669 1177.71,688.669 1178.27,688.669 1178.83,688.669 1179.39,688.669 1179.95,688.669 1180.51,688.669 1181.07,688.669 1181.63,688.669 1182.19,688.669 1182.75,688.669 1183.31,688.669 1183.87,688.669 1184.43,688.669 1184.98,688.669 1185.54,688.669 1186.1,688.669 1186.66,688.669 1187.22,688.669 1187.78,688.669 1188.34,688.669 1188.9,688.669 1189.46,688.669 1190.02,688.669 1190.58,688.669 1191.14,688.669 1191.7,688.669 1192.25,688.669 1192.81,688.669 1193.37,688.669 1193.93,688.669 1194.49,688.669 1195.05,688.669 1195.61,688.669 1196.17,688.669 1196.73,688.669 1197.29,688.669 1197.85,688.669 1198.41,688.669 1198.97,688.669 1199.52,688.669 1200.08,688.669 1200.64,688.669 1201.2,688.669 1201.76,688.669 1202.32,688.669 1202.88,688.669 1203.44,688.669 1204,688.669 1204.56,688.669 1205.12,688.669 1205.68,688.669 1206.24,688.669 1206.8,688.669 1207.35,688.669 1207.91,688.669 1208.47,688.669 1209.03,688.669 1209.59,688.669 1210.15,688.669 1210.71,688.669 1211.27,688.669 1211.83,688.669 1212.39,688.669 1212.95,688.669 1213.51,688.669 1214.07,688.669 1214.62,688.669 1215.18,688.669 1215.74,688.669 1216.3,688.669 1216.86,688.669 1217.42,688.669 1217.98,688.669 1218.54,688.669 1219.1,688.669 1219.66,688.669 1220.22,688.669 1220.78,688.669 1221.34,688.669 1221.89,688.669 1222.45,688.669 1223.01,688.669 1223.57,688.669 1224.13,688.669 1224.69,688.669 1225.25,688.669 1225.81,688.669 1226.37,688.669 1226.93,688.669 1227.49,688.669 1228.05,688.669 1228.61,688.669 1229.17,688.669 1229.72,688.669 1230.28,688.669 1230.84,688.669 1231.4,688.669 1231.96,688.669 1232.52,688.669 1233.08,688.669 1233.64,688.669 1234.2,688.669 1234.76,688.669 1235.32,688.669 1235.88,688.669 1236.44,688.669 1236.99,688.669 1237.55,688.669 1238.11,688.669 1238.67,688.669 1239.23,688.669 1239.79,688.669 1240.35,688.669 1240.91,688.669 1241.47,688.669 1242.03,688.669 1242.59,688.669 1243.15,688.669 1243.71,688.669 1244.26,688.669 1244.82,688.669 1245.38,688.669 1245.94,688.669 1246.5,688.669 1247.06,688.669 1247.62,688.669 1248.18,688.669 1248.74,688.669 1249.3,688.669 1249.86,688.669 1250.42,688.669 1250.98,688.669 1251.54,688.669 1252.09,688.669 1252.65,688.669 1253.21,688.669 1253.77,688.669 1254.33,688.669 1254.89,688.669 1255.45,688.669 1256.01,688.669 1256.57,688.669 1257.13,688.669 1257.69,688.669 1258.25,688.669 1258.81,688.669 1259.36,688.669 1259.92,688.669 1260.48,688.669 1261.04,688.669 1261.6,688.669 1262.16,688.669 1262.72,688.669 1263.28,688.669 1263.84,688.669 1264.4,688.669 1264.96,688.669 1265.52,688.669 1266.08,688.669 1266.63,688.669 1267.19,688.669 1267.75,688.669 1268.31,688.669 1268.87,688.669 1269.43,688.669 1269.99,688.669 1270.55,688.669 1271.11,688.669 1271.67,688.669 1272.23,688.669 1272.79,688.669 1273.35,688.669 1273.91,688.669 1274.46,688.669 1275.02,688.669 1275.58,688.669 1276.14,688.669 1276.7,688.669 1277.26,688.669 1277.82,688.669 1278.38,688.669 1278.94,688.669 1279.5,688.669 1280.06,688.669 1280.62,688.669 1281.18,688.669 1281.73,688.669 1282.29,688.669 1282.85,688.669 1283.41,688.669 1283.97,688.669 1284.53,688.669 1285.09,688.669 1285.65,688.669 1286.21,688.669 1286.77,688.669 1287.33,688.669 1287.89,688.669 1288.45,688.669 1289,688.669 1289.56,688.669 1290.12,688.669 1290.68,688.669 1291.24,688.669 1291.8,688.669 1292.36,688.669 1292.92,688.669 1293.48,688.669 1294.04,688.669 1294.6,688.669 1295.16,688.669 1295.72,688.669 1296.28,688.669 1296.83,688.669 1297.39,688.669 1297.95,688.669 1298.51,688.669 1299.07,688.669 1299.63,688.669 1300.19,688.669 1300.75,688.669 1301.31,688.669 1301.87,688.669 1302.43,688.669 1302.99,688.669 1303.55,688.669 1304.1,688.669 1304.66,688.669 1305.22,688.669 1305.78,688.669 1306.34,688.669 1306.9,688.669 1307.46,688.669 1308.02,688.669 1308.58,688.669 1309.14,688.669 1309.7,688.669 1310.26,688.669 1310.82,688.669 1311.38,688.669 1311.93,688.669 1312.49,688.669 1313.05,688.669 1313.61,688.669 1314.17,688.669 1314.73,688.669 1315.29,688.669 1315.85,688.669 1316.41,688.669 1316.97,688.669 1317.53,688.669 1318.09,688.669 1318.65,688.669 1319.2,688.669 1319.76,688.669 1320.32,688.669 1320.88,688.669 1321.44,688.669 1322,688.669 1322.56,688.669 1323.12,688.669 1323.68,688.669 1324.24,688.669 1324.8,688.669 1325.36,688.669 1325.92,688.669 1326.47,688.669 1327.03,688.669 1327.59,688.669 1328.15,688.669 1328.71,688.669 1329.27,688.669 1329.83,688.669 1330.39,688.669 1330.95,688.669 1331.51,688.669 1332.07,688.669 1332.63,688.669 1333.19,688.669 1333.75,688.669 1334.3,688.669 1334.86,688.669 1335.42,688.669 1335.98,688.669 1336.54,688.669 1337.1,688.669 1337.66,688.669 1338.22,688.669 1338.78,688.669 1339.34,688.669 1339.9,688.669 1340.46,688.669 1341.02,688.669 1341.57,688.669 1342.13,688.669 1342.69,688.669 1343.25,688.669 1343.81,688.669 1344.37,688.669 1344.93,688.669 1345.49,688.669 1346.05,688.669 1346.61,688.669 1347.17,688.669 1347.73,688.669 1348.29,688.669 1348.84,688.669 1349.4,688.669 1349.96,688.669 1350.52,688.669 1351.08,688.669 1351.64,688.669 1352.2,688.669 1352.76,688.669 1353.32,688.669 1353.88,688.669 1354.44,688.669 1355,688.669 1355.56,688.669 1356.12,688.669 1356.67,688.669 1357.23,688.669 1357.79,688.669 1358.35,688.669 1358.91,688.669 1359.47,688.669 1360.03,688.669 1360.59,688.669 1361.15,688.669 1361.71,688.669 1362.27,688.669 1362.83,688.669 1363.39,688.669 1363.94,688.669 1364.5,688.669 1365.06,688.669 1365.62,688.669 1366.18,688.669 1366.74,688.669 1367.3,688.669 1367.86,688.669 1368.42,688.669 1368.98,688.669 1369.54,688.669 1370.1,688.669 1370.66,688.669 1371.21,688.669 1371.77,688.669 1372.33,688.669 1372.89,688.669 1373.45,688.669 1374.01,688.669 1374.57,688.669 1375.13,688.669 1375.69,688.669 1376.25,688.669 1376.81,688.669 1377.37,688.669 1377.93,688.669 1378.49,688.669 1379.04,688.669 1379.6,688.669 1380.16,688.669 1380.72,688.669 1381.28,688.669 1381.84,688.669 1382.4,688.669 1382.96,688.669 1383.52,688.669 1384.08,688.669 1384.64,688.669 1385.2,688.669 1385.76,688.669 1386.31,688.669 1386.87,688.669 1387.43,688.669 1387.99,688.669 1388.55,688.669 1389.11,688.669 1389.67,688.669 1390.23,688.669 1390.79,688.669 1391.35,688.669 1391.91,688.669 1392.47,688.669 1393.03,688.669 1393.58,688.669 1394.14,688.669 1394.7,688.669 1395.26,688.669 1395.82,688.669 1396.38,688.669 1396.94,688.669 1397.5,688.669 1398.06,688.669 1398.62,688.669 1399.18,688.669 1399.74,688.669 1400.3,688.669 1400.86,688.669 1401.41,688.669 1401.97,688.669 1402.53,688.669 1403.09,688.669 1403.65,688.669 1404.21,688.669 1404.77,688.669 1405.33,688.669 1405.89,688.669 1406.45,688.669 1407.01,688.669 1407.57,688.669 1408.13,688.669 1408.68,688.669 1409.24,688.669 1409.8,688.669 1410.36,688.669 1410.92,688.669 1411.48,688.669 1412.04,688.669 1412.6,688.669 1413.16,688.669 1413.72,688.669 1414.28,688.669 1414.84,688.669 1415.4,688.669 1415.95,688.669 1416.51,688.669 1417.07,688.669 1417.63,688.669 1418.19,688.669 1418.75,688.669 1419.31,688.669 1419.87,688.669 1420.43,688.669 1420.99,688.669 1421.55,688.669 1422.11,688.669 1422.67,688.669 1423.23,688.669 1423.78,688.669 1424.34,688.669 1424.9,688.669 1425.46,688.669 1426.02,688.669 1426.58,688.669 1427.14,688.669 1427.7,688.669 1428.26,688.669 1428.82,688.669 1429.38,688.669 1429.94,688.669 1430.5,688.669 1431.05,688.669 1431.61,688.669 1432.17,688.669 1432.73,688.669 1433.29,688.669 1433.85,688.669 1434.41,688.669 1434.97,688.669 1435.53,688.669 1436.09,688.669 1436.65,688.669 1437.21,688.669 1437.77,688.669 1438.33,688.669 1438.88,688.669 1439.44,688.669 1440,688.669 1440.56,688.669 1441.12,688.669 1441.68,688.669 1442.24,688.669 1442.8,688.669 1443.36,688.669 1443.92,688.669 1444.48,688.669 1445.04,688.669 1445.6,688.669 1446.15,688.669 1446.71,688.669 1447.27,688.669 1447.83,688.669 1448.39,688.669 1448.95,688.669 1449.51,688.669 1450.07,688.669 1450.63,688.669 1451.19,688.669 1451.75,688.669 1452.31,688.669 1452.87,688.669 1453.42,688.669 1453.98,688.669 1454.54,688.669 1455.1,688.669 1455.66,688.669 1456.22,688.669 1456.78,688.669 1457.34,688.669 1457.9,688.669 1458.46,688.669 1459.02,688.669 1459.58,688.669 1460.14,688.669 1460.7,688.669 1461.25,688.669 1461.81,688.669 1462.37,688.669 1462.93,688.669 1463.49,688.669 1464.05,688.669 1464.61,688.669 1465.17,688.669 1465.73,688.669 1466.29,688.669 1466.85,688.669 1467.41,688.669 1467.97,688.669 1468.52,688.669 1469.08,688.669 1469.64,688.669 1470.2,688.669 1470.76,688.669 1471.32,688.669 1471.88,688.669 1472.44,688.669 1473,688.669 1473.56,688.669 1474.12,688.669 1474.68,688.669 1475.24,688.669 1475.79,688.669 1476.35,688.669 1476.91,688.669 1477.47,688.669 1478.03,688.669 1478.59,688.669 1479.15,688.669 1479.71,688.669 1480.27,688.669 1480.83,688.669 1481.39,688.669 1481.95,688.669 1482.51,688.669 1483.07,688.669 1483.62,688.669 1484.18,688.669 1484.74,688.669 1485.3,688.669 1485.86,688.669 1486.42,688.669 1486.98,688.669 1487.54,688.669 1488.1,688.669 1488.66,688.669 1489.22,688.669 1489.78,688.669 1490.34,688.669 1490.89,688.669 1491.45,688.669 1492.01,688.669 1492.57,688.669 1493.13,688.669 1493.69,688.669 1494.25,688.669 1494.81,688.669 1495.37,688.669 1495.93,688.669 1496.49,688.669 1497.05,688.669 1497.61,688.669 1498.16,688.669 1498.72,688.669 1499.28,688.669 1499.84,688.669 1500.4,688.669 1500.96,688.669 1501.52,688.669 1502.08,688.669 1502.64,688.669 1503.2,688.669 1503.76,688.669 1504.32,688.669 1504.88,688.669 1505.44,688.669 1505.99,688.669 1506.55,688.669 1507.11,688.669 1507.67,688.669 1508.23,688.669 1508.79,688.669 1509.35,688.669 1509.91,688.669 1510.47,688.669 1511.03,688.669 1511.59,688.669 1512.15,688.669 1512.71,688.669 1513.26,688.669 1513.82,688.669 1514.38,688.669 1514.94,688.669 1515.5,688.669 1516.06,688.669 1516.62,688.669 1517.18,688.669 1517.74,688.669 1518.3,688.669 1518.86,688.669 1519.42,688.669 1519.98,688.669 1520.53,688.669 1521.09,688.669 1521.65,688.669 1522.21,688.669 1522.77,688.669 1523.33,688.669 1523.89,688.669 1524.45,688.669 1525.01,688.669 1525.57,688.669 1526.13,688.669 1526.69,688.669 1527.25,688.669 1527.81,688.669 1528.36,688.669 1528.92,688.669 1529.48,688.669 1530.04,688.669 1530.6,688.669 1531.16,688.669 1531.72,688.669 1532.28,688.669 1532.84,688.669 1533.4,688.669 1533.96,688.669 1534.52,688.669 1535.08,688.669 1535.63,688.669 1536.19,688.669 1536.75,688.669 1537.31,688.669 1537.87,688.669 1538.43,688.669 1538.99,688.669 1539.55,688.669 1540.11,688.669 1540.67,688.669 1541.23,688.669 1541.79,688.669 1542.35,688.669 1542.9,688.669 1543.46,688.669 1544.02,688.669 1544.58,688.669 1545.14,688.669 1545.7,688.669 1546.26,688.669 1546.82,688.669 1547.38,688.669 1547.94,688.669 1548.5,688.669 1549.06,688.669 1549.62,688.669 1550.18,688.669 1550.73,688.669 1551.29,688.669 1551.85,688.669 1552.41,688.669 1552.97,688.669 1553.53,688.669 1554.09,688.669 1554.65,688.669 1555.21,688.669 1555.77,688.669 1556.33,688.669 1556.89,688.669 1557.45,688.669 1558,688.669 1558.56,688.669 1559.12,688.669 1559.68,688.669 1560.24,688.669 1560.8,688.669 1561.36,688.669 1561.92,688.669 1562.48,688.669 1563.04,688.669 1563.6,688.669 1564.16,688.669 1564.72,688.669 1565.28,688.669 1565.83,688.669 1566.39,688.669 1566.95,688.669 1567.51,688.669 1568.07,688.669 1568.63,688.669 1569.19,688.669 1569.75,688.669 1570.31,688.669 1570.87,688.669 1571.43,688.669 1571.99,688.669 1572.55,688.669 1573.1,688.669 1573.66,688.669 1574.22,688.669 1574.78,688.669 1575.34,688.669 1575.9,688.669 1576.46,688.669 1577.02,688.669 1577.58,688.669 1578.14,688.669 1578.7,688.669 1579.26,688.669 1579.82,688.669 1580.37,688.669 1580.93,688.669 1581.49,688.669 1582.05,688.669 1582.61,688.669 1583.17,688.669 1583.73,688.669 1584.29,688.669 1584.85,688.669 1585.41,688.669 1585.97,688.669 1586.53,688.669 1587.09,688.669 1587.65,688.669 1588.2,688.669 1588.76,688.669 1589.32,688.669 1589.88,688.669 1590.44,688.669 1591,688.669 1591.56,688.669 1592.12,688.669 1592.68,688.669 1593.24,688.669 1593.8,688.669 1594.36,688.669 1594.92,688.669 1595.47,688.669 1596.03,688.669 1596.59,688.669 1597.15,688.669 1597.71,688.669 1598.27,688.669 1598.83,688.669 1599.39,688.669 1599.95,688.669 1600.51,688.669 1601.07,688.669 1601.63,688.669 1602.19,688.669 1602.74,688.669 1603.3,688.669 1603.86,688.669 1604.42,688.669 1604.98,688.669 1605.54,688.669 1606.1,688.669 1606.66,688.669 1607.22,688.669 1607.78,688.669 1608.34,688.669 1608.9,688.669 1609.46,688.669 1610.02,688.669 1610.57,688.669 1611.13,688.669 1611.69,688.669 1612.25,688.669 1612.81,688.669 1613.37,688.669 1613.93,688.669 1614.49,688.669 1615.05,688.669 1615.61,688.669 1616.17,688.669 1616.73,688.669 1617.29,688.669 1617.84,688.669 1618.4,688.669 1618.96,688.669 1619.52,688.669 1620.08,688.669 1620.64,688.669 1621.2,688.669 1621.76,688.669 1622.32,688.669 1622.88,688.669 1623.44,688.669 1624,688.669 1624.56,688.669 1625.11,688.669 1625.67,688.669 1626.23,688.669 1626.79,688.669 1627.35,688.669 1627.91,688.669 1628.47,688.669 1629.03,688.669 1629.59,688.669 1630.15,688.669 1630.71,688.669 1631.27,688.669 1631.83,688.669 1632.39,688.669 1632.94,688.669 1633.5,688.669 1634.06,688.669 1634.62,688.669 1635.18,688.669 1635.74,688.669 1636.3,688.669 1636.86,688.669 1637.42,688.669 1637.98,688.669 1638.54,688.669 1639.1,688.669 1639.66,688.669 1640.21,688.669 1640.77,688.669 1641.33,688.669 1641.89,688.669 1642.45,688.669 1643.01,688.669 1643.57,688.669 1644.13,688.669 1644.69,688.669 1645.25,688.669 1645.81,688.669 1646.37,688.669 1646.93,688.669 1647.48,688.669 1648.04,688.669 1648.6,688.669 1649.16,688.669 1649.72,688.669 1650.28,688.669 1650.84,688.669 1651.4,688.669 1651.96,688.669 1652.52,688.669 1653.08,688.669 1653.64,688.669 1654.2,688.669 1654.76,688.669 1655.31,688.669 1655.87,688.669 1656.43,688.669 1656.99,688.669 1657.55,688.669 1658.11,688.669 1658.67,688.669 1659.23,688.669 1659.79,688.669 1660.35,688.669 1660.91,688.669 1661.47,688.669 1662.03,688.669 1662.58,688.669 1663.14,688.669 1663.7,688.669 1664.26,688.669 1664.82,688.669 1665.38,688.669 1665.94,688.669 1666.5,688.669 1667.06,688.669 1667.62,688.669 1668.18,688.669 1668.74,688.669 1669.3,688.669 1669.85,688.669 1670.41,688.669 1670.97,688.669 1671.53,688.669 1672.09,688.669 1672.65,688.669 1673.21,688.669 1673.77,688.669 1674.33,688.669 1674.89,688.669 1675.45,688.669 1676.01,688.669 1676.57,688.669 1677.13,688.669 1677.68,688.669 1678.24,688.669 1678.8,688.669 1679.36,688.669 1679.92,688.669 1680.48,688.669 1681.04,688.669 1681.6,688.669 1682.16,688.669 1682.72,688.669 1683.28,688.669 1683.84,688.669 1684.4,688.669 1684.95,688.669 1685.51,688.669 1686.07,688.669 1686.63,688.669 1687.19,688.669 1687.75,688.669 1688.31,688.669 1688.87,688.669 1689.43,688.669 1689.99,688.669 1690.55,688.669 1691.11,688.669 1691.67,688.669 1692.23,688.669 1692.78,688.669 1693.34,688.669 1693.9,688.669 1694.46,688.669 1695.02,688.669 1695.58,688.669 1696.14,688.669 1696.7,688.669 1697.26,688.669 1697.82,688.669 1698.38,688.669 1698.94,688.669 1699.5,688.669 1700.05,688.669 1700.61,688.669 1701.17,688.669 1701.73,688.669 1702.29,688.669 1702.85,688.669 1703.41,688.669 1703.97,688.669 1704.53,688.669 1705.09,688.669 1705.65,688.669 1706.21,688.669 1706.77,688.669 1707.32,688.669 1707.88,688.669 1708.44,688.669 1709,688.669 1709.56,688.669 1710.12,688.669 1710.68,688.669 1711.24,688.669 1711.8,688.669 1712.36,688.669 1712.92,688.669 1713.48,688.669 1714.04,688.669 1714.6,688.669 1715.15,688.669 1715.71,688.669 1716.27,688.669 1716.83,688.669 1717.39,688.669 1717.95,688.669 1718.51,688.669 1719.07,688.669 1719.63,688.669 1720.19,688.669 1720.75,688.669 1721.31,688.669 1721.87,688.669 1722.42,688.669 1722.98,688.669 1723.54,688.669 1724.1,688.669 1724.66,688.669 1725.22,688.669 1725.78,688.669 1726.34,688.669 1726.9,688.669 1727.46,688.669 1728.02,688.669 1728.58,688.669 1729.14,688.669 1729.69,688.669 1730.25,688.669 1730.81,688.669 1731.37,688.669 1731.93,688.669 1732.49,688.669 1733.05,688.669 1733.61,688.669 1734.17,688.669 1734.73,688.669 1735.29,688.669 1735.85,688.669 1736.41,688.669 1736.97,688.669 1737.52,688.669 1738.08,688.669 1738.64,688.669 1739.2,688.669 1739.76,688.669 1740.32,688.669 1740.88,688.669 1741.44,688.669 1742,688.669 1742.56,688.669 1743.12,688.669 1743.68,688.669 1744.24,688.669 1744.79,688.669 1745.35,688.669 1745.91,688.669 1746.47,688.669 1747.03,688.669 1747.59,688.669 1748.15,688.669 1748.71,688.669 1749.27,688.669 1749.83,688.669 1750.39,688.669 1750.95,688.669 1751.51,688.669 1752.06,688.669 1752.62,688.669 1753.18,688.669 1753.74,688.669 1754.3,688.669 1754.86,688.669 1755.42,688.669 1755.98,688.669 1756.54,688.669 1757.1,688.669 1757.66,688.669 1758.22,688.669 1758.78,688.669 1759.34,688.669 1759.89,688.669 1760.45,688.669 1761.01,688.669 1761.57,688.669 1762.13,688.669 1762.69,688.669 1763.25,688.669 1763.81,688.669 1764.37,688.669 1764.93,688.669 1765.49,688.669 1766.05,688.669 1766.61,688.669 1767.16,688.669 1767.72,688.669 1768.28,688.669 1768.84,688.669 1769.4,688.669 1769.96,688.669 1770.52,688.669 1771.08,688.669 1771.64,688.669 1772.2,688.669 1772.76,688.669 1773.32,688.669 1773.88,688.669 1774.43,688.669 1774.99,688.669 1775.55,688.669 1776.11,688.669 1776.67,688.669 1777.23,688.669 1777.79,688.669 1778.35,688.669 1778.91,688.669 1779.47,688.669 1780.03,688.669 1780.59,688.669 1781.15,688.669 1781.71,688.669 1782.26,688.669 1782.82,688.669 1783.38,688.669 1783.94,688.669 1784.5,688.669 1785.06,688.669 1785.62,688.669 1786.18,688.669 1786.74,688.669 1787.3,688.669 1787.86,688.669 1788.42,688.669 1788.98,688.669 1789.53,688.669 1790.09,688.669 1790.65,688.669 1791.21,688.669 1791.77,688.669 1792.33,688.669 1792.89,688.669 1793.45,688.669 1794.01,688.669 1794.57,688.669 1795.13,688.669 1795.69,688.669 1796.25,688.669 1796.8,688.669 1797.36,688.669 1797.92,688.669 1798.48,688.669 1799.04,688.669 1799.6,688.669 1800.16,688.669 1800.72,688.669 1801.28,688.669 1801.84,688.669 1802.4,688.669 1802.96,688.669 1803.52,688.669 1804.08,688.669 1804.63,688.669 1805.19,688.669 1805.75,688.669 1806.31,688.669 1806.87,688.669 1807.43,688.669 1807.99,688.669 1808.55,688.669 1809.11,688.669 1809.67,688.669 1810.23,688.669 1810.79,688.669 1811.35,688.669 1811.9,688.669 1812.46,688.669 1813.02,688.669 1813.58,688.669 1814.14,688.669 1814.7,688.669 1815.26,688.669 1815.82,688.669 1816.38,688.669 1816.94,688.669 1817.5,688.669 1818.06,688.669 1818.62,688.669 1819.18,688.669 1819.73,688.669 1820.29,688.669 1820.85,688.669 1821.41,688.669 1821.97,688.669 1822.53,688.669 1823.09,688.669 1823.65,688.669 1824.21,688.669 1824.77,688.669 1825.33,688.669 1825.89,688.669 1826.45,688.669 1827,688.669 1827.56,688.669 1828.12,688.669 1828.68,688.669 1829.24,688.669 1829.8,688.669 1830.36,688.669 1830.92,688.669 1831.48,688.669 1832.04,688.669 1832.6,688.669 1833.16,688.669 1833.72,688.669 1834.27,688.669 1834.83,688.669 1835.39,688.669 1835.95,688.669 1836.51,688.669 1837.07,688.669 1837.63,688.669 1838.19,688.669 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 685.467 L720.806 685.467 L721.365 685.467 L721.924 685.467 L722.484 685.467 L723.043 685.467 L723.602 685.467 L724.161 685.467 L724.721 685.467 L725.28 685.467 L725.839 685.467 L726.398 685.467 L726.958 685.467 L727.517 685.467 L728.076 685.467 L728.635 685.467 L729.195 685.467 L729.754 685.467 L730.313 685.467 L730.872 685.467 L731.432 685.467 L731.991 685.467 L732.55 685.467 L733.109 685.467 L733.669 685.467 L734.228 685.467 L734.787 685.467 L735.346 685.467 L735.906 685.467 L736.465 685.467 L737.024 685.467 L737.583 685.467 L738.143 685.467 L738.702 685.467 L739.261 685.467 L739.82 685.467 L740.38 685.467 L740.939 685.467 L741.498 685.467 L742.057 685.467 L742.617 685.467 L743.176 685.467 L743.735 685.467 L744.294 685.467 L744.854 685.467 L745.413 685.467 L745.972 685.467 L746.531 685.467 L747.091 685.467 L747.65 685.467 L748.209 685.467 L748.768 685.467 L749.328 685.467 L749.887 685.467 L750.446 685.467 L751.005 685.467 L751.565 685.467 L752.124 685.467 L752.683 685.467 L753.242 685.467 L753.802 685.467 L754.361 685.467 L754.92 685.467 L755.479 685.467 L756.039 685.467 L756.598 685.467 L757.157 685.467 L757.716 685.467 L758.276 685.467 L758.835 685.467 L759.394 685.467 L759.953 685.467 L760.513 685.467 L761.072 685.467 L761.631 685.467 L762.19 685.467 L762.75 685.467 L763.309 685.467 L763.868 685.467 L764.427 685.467 L764.987 685.467 L765.546 685.467 L766.105 685.467 L766.664 685.467 L767.224 685.467 L767.783 685.467 L768.342 685.467 L768.901 685.467 L769.461 685.467 L770.02 685.467 L770.579 685.467 L771.138 685.467 L771.698 685.467 L772.257 685.467 L772.816 685.467 L773.375 685.467 L773.935 685.467 L774.494 685.467 L775.053 685.467 L775.612 685.467 L776.172 685.467 L776.731 685.467 L777.29 685.467 L777.849 685.467 L778.409 685.467 L778.968 685.467 L779.527 685.467 L780.086 685.467 L780.646 685.467 L781.205 685.467 L781.764 685.467 L782.323 685.467 L782.883 685.467 L783.442 685.467 L784.001 685.467 L784.56 685.467 L785.12 685.467 L785.679 685.467 L786.238 685.467 L786.797 685.467 L787.357 685.467 L787.916 685.467 L788.475 685.467 L789.034 685.467 L789.594 685.467 L790.153 685.467 L790.712 685.467 L791.271 685.467 L791.831 685.467 L792.39 685.467 L792.949 685.467 L793.508 685.467 L794.068 685.467 L794.627 685.467 L795.186 685.467 L795.745 685.467 L796.305 685.467 L796.864 685.467 L797.423 685.467 L797.982 685.467 L798.542 685.467 L799.101 685.467 L799.66 685.467 L800.219 685.467 L800.779 685.467 L801.338 685.467 L801.897 685.467 L802.456 685.467 L803.016 685.467 L803.575 685.467 L804.134 685.467 L804.693 685.467 L805.253 685.467 L805.812 685.467 L806.371 685.467 L806.931 685.467 L807.49 685.467 L808.049 685.467 L808.608 685.467 L809.168 685.467 L809.727 685.467 L810.286 685.467 L810.845 685.467 L811.405 685.467 L811.964 685.467 L812.523 685.467 L813.082 685.467 L813.642 685.467 L814.201 685.467 L814.76 685.467 L815.319 685.467 L815.879 685.467 L816.438 685.467 L816.997 685.467 L817.556 685.467 L818.116 685.467 L818.675 685.467 L819.234 685.467 L819.793 685.467 L820.353 685.467 L820.912 685.467 L821.471 685.467 L822.03 685.467 L822.59 685.467 L823.149 685.467 L823.708 685.467 L824.267 685.467 L824.827 685.467 L825.386 685.467 L825.945 685.467 L826.504 685.467 L827.064 685.467 L827.623 685.467 L828.182 685.467 L828.741 685.467 L829.301 685.467 L829.86 685.467 L830.419 685.467 L830.978 685.467 L831.538 685.467 L832.097 685.467 L832.656 685.467 L833.215 685.467 L833.775 685.467 L834.334 685.467 L834.893 685.467 L835.452 685.467 L836.012 685.467 L836.571 685.467 L837.13 685.467 L837.689 685.467 L838.249 685.467 L838.808 685.467 L839.367 685.467 L839.926 685.467 L840.486 685.467 L841.045 685.467 L841.604 685.467 L842.163 685.467 L842.723 685.467 L843.282 685.467 L843.841 685.467 L844.4 685.467 L844.96 685.467 L845.519 685.467 L846.078 685.467 L846.637 685.467 L847.197 685.467 L847.756 685.467 L848.315 685.467 L848.874 685.467 L849.434 685.467 L849.993 685.467 L850.552 685.467 L851.111 685.467 L851.671 685.467 L852.23 685.467 L852.789 685.467 L853.348 685.467 L853.908 685.467 L854.467 685.467 L855.026 685.467 L855.585 685.467 L856.145 685.467 L856.704 685.467 L857.263 685.467 L857.822 685.467 L858.382 685.467 L858.941 685.467 L859.5 685.467 L860.059 685.467 L860.619 685.467 L861.178 685.467 L861.737 685.467 L862.296 685.467 L862.856 685.467 L863.415 685.467 L863.974 685.467 L864.533 685.467 L865.093 685.467 L865.652 685.467 L866.211 685.467 L866.77 685.467 L867.33 685.467 L867.889 685.467 L868.448 685.467 L869.007 685.467 L869.567 685.467 L870.126 685.467 L870.685 685.467 L871.244 685.467 L871.804 685.467 L872.363 685.467 L872.922 685.467 L873.481 685.467 L874.041 685.467 L874.6 685.467 L875.159 685.467 L875.718 685.467 L876.278 685.467 L876.837 685.467 L877.396 685.467 L877.955 685.467 L878.515 685.467 L879.074 685.467 L879.633 685.467 L880.192 685.467 L880.752 685.467 L881.311 685.467 L881.87 685.467 L882.429 685.467 L882.989 685.467 L883.548 685.467 L884.107 685.467 L884.666 685.467 L885.226 685.467 L885.785 685.467 L886.344 685.467 L886.903 685.467 L887.463 685.467 L888.022 685.467 L888.581 685.467 L889.14 685.467 L889.7 685.467 L890.259 685.467 L890.818 685.467 L891.377 685.467 L891.937 685.467 L892.496 685.467 L893.055 685.467 L893.614 685.467 L894.174 685.467 L894.733 685.467 L895.292 685.467 L895.851 685.467 L896.411 685.467 L896.97 685.467 L897.529 685.467 L898.088 685.467 L898.648 685.467 L899.207 685.467 L899.766 685.467 L900.325 685.467 L900.885 685.467 L901.444 685.467 L902.003 685.467 L902.562 685.467 L903.122 685.467 L903.681 685.467 L904.24 685.467 L904.799 685.467 L905.359 685.467 L905.918 685.467 L906.477 685.467 L907.036 685.467 L907.596 685.467 L908.155 685.467 L908.714 685.467 L909.273 685.467 L909.833 685.467 L910.392 685.467 L910.951 685.467 L911.51 685.467 L912.07 685.467 L912.629 685.467 L913.188 685.467 L913.747 685.467 L914.307 685.467 L914.866 685.467 L915.425 685.467 L915.984 685.467 L916.544 685.467 L917.103 685.467 L917.662 685.467 L918.221 685.467 L918.781 685.467 L919.34 685.467 L919.899 685.467 L920.458 685.467 L921.018 685.467 L921.577 685.467 L922.136 685.467 L922.695 685.467 L923.255 685.467 L923.814 685.467 L924.373 685.467 L924.932 685.467 L925.492 685.467 L926.051 685.467 L926.61 685.467 L927.169 685.467 L927.729 685.467 L928.288 685.467 L928.847 685.467 L929.406 685.467 L929.966 685.467 L930.525 685.467 L931.084 685.467 L931.644 685.467 L932.203 685.467 L932.762 685.467 L933.321 685.467 L933.881 685.467 L934.44 685.467 L934.999 685.467 L935.558 685.467 L936.118 685.467 L936.677 685.467 L937.236 685.467 L937.795 685.467 L938.355 685.467 L938.914 685.467 L939.473 685.467 L940.032 685.467 L940.592 685.467 L941.151 685.467 L941.71 685.467 L942.269 685.467 L942.829 685.467 L943.388 685.467 L943.947 685.467 L944.506 685.467 L945.066 685.467 L945.625 685.467 L946.184 685.467 L946.743 685.467 L947.303 685.467 L947.862 685.467 L948.421 685.467 L948.98 685.467 L949.54 685.467 L950.099 685.467 L950.658 685.467 L951.217 685.467 L951.777 685.467 L952.336 685.467 L952.895 685.467 L953.454 685.467 L954.014 685.467 L954.573 685.467 L955.132 685.467 L955.691 685.467 L956.251 685.467 L956.81 685.467 L957.369 685.467 L957.928 685.467 L958.488 685.467 L959.047 685.467 L959.606 685.467 L960.165 685.467 L960.725 685.467 L961.284 685.467 L961.843 685.467 L962.402 685.467 L962.962 685.467 L963.521 685.467 L964.08 685.467 L964.639 685.467 L965.199 685.467 L965.758 685.467 L966.317 685.467 L966.876 685.467 L967.436 685.467 L967.995 685.467 L968.554 685.467 L969.113 685.467 L969.673 685.467 L970.232 685.467 L970.791 685.467 L971.35 685.467 L971.91 685.467 L972.469 685.467 L973.028 685.467 L973.587 685.467 L974.147 685.467 L974.706 685.467 L975.265 685.467 L975.824 685.467 L976.384 685.467 L976.943 685.467 L977.502 685.467 L978.061 685.467 L978.621 685.467 L979.18 685.467 L979.739 685.467 L980.298 685.467 L980.858 685.467 L981.417 685.467 L981.976 685.467 L982.535 685.467 L983.095 685.467 L983.654 685.467 L984.213 685.467 L984.772 685.467 L985.332 685.467 L985.891 685.467 L986.45 685.467 L987.009 685.467 L987.569 685.467 L988.128 685.467 L988.687 685.467 L989.246 685.467 L989.806 685.467 L990.365 685.467 L990.924 685.467 L991.483 685.467 L992.043 685.467 L992.602 685.467 L993.161 685.467 L993.72 685.467 L994.28 685.467 L994.839 685.467 L995.398 685.467 L995.957 685.467 L996.517 685.467 L997.076 685.467 L997.635 685.467 L998.194 685.467 L998.754 685.467 L999.313 685.467 L999.872 685.467 L1000.43 685.467 L1000.99 685.467 L1001.55 685.467 L1002.11 685.467 L1002.67 685.467 L1003.23 685.467 L1003.79 685.467 L1004.35 685.467 L1004.91 685.467 L1005.46 685.467 L1006.02 685.467 L1006.58 685.467 L1007.14 685.467 L1007.7 685.467 L1008.26 685.467 L1008.82 685.467 L1009.38 685.467 L1009.94 685.467 L1010.5 685.467 L1011.06 685.467 L1011.62 685.467 L1012.18 685.467 L1012.73 685.467 L1013.29 685.467 L1013.85 685.467 L1014.41 685.467 L1014.97 685.467 L1015.53 685.467 L1016.09 685.467 L1016.65 685.467 L1017.21 685.467 L1017.77 685.467 L1018.33 685.467 L1018.89 685.467 L1019.45 685.467 L1020.01 685.467 L1020.56 685.467 L1021.12 685.467 L1021.68 685.467 L1022.24 685.467 L1022.8 685.467 L1023.36 685.467 L1023.92 685.467 L1024.48 685.467 L1025.04 685.467 L1025.6 685.467 L1026.16 685.467 L1026.72 685.467 L1027.28 685.467 L1027.83 685.467 L1028.39 685.467 L1028.95 685.467 L1029.51 685.467 L1030.07 685.467 L1030.63 685.467 L1031.19 685.467 L1031.75 685.467 L1032.31 685.467 L1032.87 685.467 L1033.43 685.467 L1033.99 685.467 L1034.55 685.467 L1035.1 685.467 L1035.66 685.467 L1036.22 685.467 L1036.78 685.467 L1037.34 685.467 L1037.9 685.467 L1038.46 685.467 L1039.02 685.467 L1039.58 685.467 L1040.14 685.467 L1040.7 685.467 L1041.26 685.467 L1041.82 685.467 L1042.38 685.467 L1042.93 685.467 L1043.49 685.467 L1044.05 685.467 L1044.61 685.467 L1045.17 685.467 L1045.73 685.467 L1046.29 685.467 L1046.85 685.467 L1047.41 685.467 L1047.97 685.467 L1048.53 685.467 L1049.09 685.467 L1049.65 685.467 L1050.2 685.467 L1050.76 685.467 L1051.32 685.467 L1051.88 685.467 L1052.44 685.467 L1053 685.467 L1053.56 685.467 L1054.12 685.467 L1054.68 685.467 L1055.24 685.467 L1055.8 685.467 L1056.36 685.467 L1056.92 685.467 L1057.48 685.467 L1058.03 685.467 L1058.59 685.467 L1059.15 685.467 L1059.71 685.467 L1060.27 685.467 L1060.83 685.467 L1061.39 685.467 L1061.95 685.467 L1062.51 685.467 L1063.07 685.467 L1063.63 685.467 L1064.19 685.467 L1064.75 685.467 L1065.3 685.467 L1065.86 685.467 L1066.42 685.467 L1066.98 685.467 L1067.54 685.467 L1068.1 685.467 L1068.66 685.467 L1069.22 685.467 L1069.78 685.467 L1070.34 685.467 L1070.9 685.467 L1071.46 685.467 L1072.02 685.467 L1072.57 685.467 L1073.13 685.467 L1073.69 685.467 L1074.25 685.467 L1074.81 685.467 L1075.37 685.467 L1075.93 685.467 L1076.49 685.467 L1077.05 685.467 L1077.61 685.467 L1078.17 685.467 L1078.73 685.467 L1079.29 685.467 L1079.85 685.467 L1080.4 685.467 L1080.96 685.467 L1081.52 685.467 L1082.08 685.467 L1082.64 685.467 L1083.2 685.467 L1083.76 685.467 L1084.32 685.467 L1084.88 685.467 L1085.44 685.467 L1086 685.467 L1086.56 685.467 L1087.12 685.467 L1087.67 685.467 L1088.23 685.467 L1088.79 685.467 L1089.35 685.467 L1089.91 685.467 L1090.47 685.467 L1091.03 685.467 L1091.59 685.467 L1092.15 685.467 L1092.71 685.467 L1093.27 685.467 L1093.83 685.467 L1094.39 685.467 L1094.94 685.467 L1095.5 685.467 L1096.06 685.467 L1096.62 685.467 L1097.18 685.467 L1097.74 685.467 L1098.3 685.467 L1098.86 685.467 L1099.42 685.467 L1099.98 685.467 L1100.54 685.467 L1101.1 685.467 L1101.66 685.467 L1102.22 685.467 L1102.77 685.467 L1103.33 685.467 L1103.89 685.467 L1104.45 685.467 L1105.01 685.467 L1105.57 685.467 L1106.13 685.467 L1106.69 685.467 L1107.25 685.467 L1107.81 685.467 L1108.37 685.467 L1108.93 685.467 L1109.49 685.467 L1110.04 685.467 L1110.6 685.467 L1111.16 685.467 L1111.72 685.467 L1112.28 685.467 L1112.84 685.467 L1113.4 685.467 L1113.96 685.467 L1114.52 685.467 L1115.08 685.467 L1115.64 685.467 L1116.2 685.467 L1116.76 685.467 L1117.31 685.467 L1117.87 685.467 L1118.43 685.467 L1118.99 685.467 L1119.55 685.467 L1120.11 685.467 L1120.67 685.467 L1121.23 685.467 L1121.79 685.467 L1122.35 685.467 L1122.91 685.467 L1123.47 685.467 L1124.03 685.467 L1124.59 685.467 L1125.14 685.467 L1125.7 685.467 L1126.26 685.467 L1126.82 685.467 L1127.38 685.467 L1127.94 685.467 L1128.5 685.467 L1129.06 685.467 L1129.62 685.467 L1130.18 685.467 L1130.74 685.467 L1131.3 685.467 L1131.86 685.467 L1132.41 685.467 L1132.97 685.467 L1133.53 685.467 L1134.09 685.467 L1134.65 685.467 L1135.21 685.467 L1135.77 685.467 L1136.33 685.467 L1136.89 685.467 L1137.45 685.467 L1138.01 685.467 L1138.57 685.467 L1139.13 685.467 L1139.68 685.467 L1140.24 685.467 L1140.8 685.467 L1141.36 685.467 L1141.92 685.467 L1142.48 685.467 L1143.04 685.467 L1143.6 685.467 L1144.16 685.467 L1144.72 685.467 L1145.28 685.467 L1145.84 685.467 L1146.4 685.467 L1146.96 685.467 L1147.51 685.467 L1148.07 685.467 L1148.63 685.467 L1149.19 685.467 L1149.75 685.467 L1150.31 685.467 L1150.87 685.467 L1151.43 685.467 L1151.99 685.467 L1152.55 685.467 L1153.11 685.467 L1153.67 685.467 L1154.23 685.467 L1154.78 685.467 L1155.34 685.467 L1155.9 685.467 L1156.46 685.467 L1157.02 685.467 L1157.58 685.467 L1158.14 685.467 L1158.7 685.467 L1159.26 685.467 L1159.82 685.467 L1160.38 685.467 L1160.94 685.467 L1161.5 685.467 L1162.05 685.467 L1162.61 685.467 L1163.17 685.467 L1163.73 685.467 L1164.29 685.467 L1164.85 685.467 L1165.41 685.467 L1165.97 685.467 L1166.53 685.467 L1167.09 685.467 L1167.65 685.467 L1168.21 685.467 L1168.77 685.467 L1169.33 685.467 L1169.88 685.467 L1170.44 685.467 L1171 685.467 L1171.56 685.467 L1172.12 685.467 L1172.68 685.467 L1173.24 685.467 L1173.8 685.467 L1174.36 685.467 L1174.92 685.467 L1175.48 685.467 L1176.04 685.467 L1176.6 685.467 L1177.15 685.467 L1177.71 685.467 L1178.27 685.467 L1178.83 685.467 L1179.39 685.467 L1179.95 685.467 L1180.51 685.467 L1181.07 685.467 L1181.63 685.467 L1182.19 685.467 L1182.75 685.467 L1183.31 685.467 L1183.87 685.467 L1184.43 685.467 L1184.98 685.467 L1185.54 685.467 L1186.1 685.467 L1186.66 685.467 L1187.22 685.467 L1187.78 685.467 L1188.34 685.467 L1188.9 685.467 L1189.46 685.467 L1190.02 685.467 L1190.58 685.467 L1191.14 685.467 L1191.7 685.467 L1192.25 685.467 L1192.81 685.467 L1193.37 685.467 L1193.93 685.467 L1194.49 685.467 L1195.05 685.467 L1195.61 685.467 L1196.17 685.467 L1196.73 685.467 L1197.29 685.467 L1197.85 685.467 L1198.41 685.467 L1198.97 685.467 L1199.52 685.467 L1200.08 685.467 L1200.64 685.467 L1201.2 685.467 L1201.76 685.467 L1202.32 685.467 L1202.88 685.467 L1203.44 685.467 L1204 685.467 L1204.56 685.467 L1205.12 685.467 L1205.68 685.467 L1206.24 685.467 L1206.8 685.467 L1207.35 685.467 L1207.91 685.467 L1208.47 685.467 L1209.03 685.467 L1209.59 685.467 L1210.15 685.467 L1210.71 685.467 L1211.27 685.467 L1211.83 685.467 L1212.39 685.467 L1212.95 685.467 L1213.51 685.467 L1214.07 685.467 L1214.62 685.467 L1215.18 685.467 L1215.74 685.467 L1216.3 685.467 L1216.86 685.467 L1217.42 685.467 L1217.98 685.467 L1218.54 685.467 L1219.1 685.467 L1219.66 685.467 L1220.22 685.467 L1220.78 685.467 L1221.34 685.467 L1221.89 685.467 L1222.45 685.467 L1223.01 685.467 L1223.57 685.467 L1224.13 685.467 L1224.69 685.467 L1225.25 685.467 L1225.81 685.467 L1226.37 685.467 L1226.93 685.467 L1227.49 685.467 L1228.05 685.467 L1228.61 685.467 L1229.17 685.467 L1229.72 685.467 L1230.28 685.467 L1230.84 685.467 L1231.4 685.467 L1231.96 685.467 L1232.52 685.467 L1233.08 685.467 L1233.64 685.467 L1234.2 685.467 L1234.76 685.467 L1235.32 685.467 L1235.88 685.467 L1236.44 685.467 L1236.99 685.467 L1237.55 685.467 L1238.11 685.467 L1238.67 685.467 L1239.23 685.467 L1239.79 685.467 L1240.35 685.467 L1240.91 685.467 L1241.47 685.467 L1242.03 685.467 L1242.59 685.467 L1243.15 685.467 L1243.71 685.467 L1244.26 685.467 L1244.82 685.467 L1245.38 685.467 L1245.94 685.467 L1246.5 685.467 L1247.06 685.467 L1247.62 685.467 L1248.18 685.467 L1248.74 685.467 L1249.3 685.467 L1249.86 685.467 L1250.42 685.467 L1250.98 685.467 L1251.54 685.467 L1252.09 685.467 L1252.65 685.467 L1253.21 685.467 L1253.77 685.467 L1254.33 685.467 L1254.89 685.467 L1255.45 685.467 L1256.01 685.467 L1256.57 685.467 L1257.13 685.467 L1257.69 685.467 L1258.25 685.467 L1258.81 685.467 L1259.36 685.467 L1259.92 685.467 L1260.48 685.467 L1261.04 685.467 L1261.6 685.467 L1262.16 685.467 L1262.72 685.467 L1263.28 685.467 L1263.84 685.467 L1264.4 685.467 L1264.96 685.467 L1265.52 685.467 L1266.08 685.467 L1266.63 685.467 L1267.19 685.467 L1267.75 685.467 L1268.31 685.467 L1268.87 685.467 L1269.43 685.467 L1269.99 685.467 L1270.55 685.467 L1271.11 685.467 L1271.67 685.467 L1272.23 685.467 L1272.79 685.467 L1273.35 685.467 L1273.91 685.467 L1274.46 685.467 L1275.02 685.467 L1275.58 685.467 L1276.14 685.467 L1276.7 685.467 L1277.26 685.467 L1277.82 685.467 L1278.38 685.467 L1278.94 685.467 L1279.5 685.467 L1280.06 685.467 L1280.62 685.467 L1281.18 685.467 L1281.73 685.467 L1282.29 685.467 L1282.85 685.467 L1283.41 685.467 L1283.97 685.467 L1284.53 685.467 L1285.09 685.467 L1285.65 685.467 L1286.21 685.467 L1286.77 685.467 L1287.33 685.467 L1287.89 685.467 L1288.45 685.467 L1289 685.467 L1289.56 685.467 L1290.12 685.467 L1290.68 685.467 L1291.24 685.467 L1291.8 685.467 L1292.36 685.467 L1292.92 685.467 L1293.48 685.467 L1294.04 685.467 L1294.6 685.467 L1295.16 685.467 L1295.72 685.467 L1296.28 685.467 L1296.83 685.467 L1297.39 685.467 L1297.95 685.467 L1298.51 685.467 L1299.07 685.467 L1299.63 685.467 L1300.19 685.467 L1300.75 685.467 L1301.31 685.467 L1301.87 685.467 L1302.43 685.467 L1302.99 685.467 L1303.55 685.467 L1304.1 685.467 L1304.66 685.467 L1305.22 685.467 L1305.78 685.467 L1306.34 685.467 L1306.9 685.467 L1307.46 685.467 L1308.02 685.467 L1308.58 685.467 L1309.14 685.467 L1309.7 685.467 L1310.26 685.467 L1310.82 685.467 L1311.38 685.467 L1311.93 685.467 L1312.49 685.467 L1313.05 685.467 L1313.61 685.467 L1314.17 685.467 L1314.73 685.467 L1315.29 685.467 L1315.85 685.467 L1316.41 685.467 L1316.97 685.467 L1317.53 685.467 L1318.09 685.467 L1318.65 685.467 L1319.2 685.467 L1319.76 685.467 L1320.32 685.467 L1320.88 685.467 L1321.44 685.467 L1322 685.467 L1322.56 685.467 L1323.12 685.467 L1323.68 685.467 L1324.24 685.467 L1324.8 685.467 L1325.36 685.467 L1325.92 685.467 L1326.47 685.467 L1327.03 685.467 L1327.59 685.467 L1328.15 685.467 L1328.71 685.467 L1329.27 685.467 L1329.83 685.467 L1330.39 685.467 L1330.95 685.467 L1331.51 685.467 L1332.07 685.467 L1332.63 685.467 L1333.19 685.467 L1333.75 685.467 L1334.3 685.467 L1334.86 685.467 L1335.42 685.467 L1335.98 685.467 L1336.54 685.467 L1337.1 685.467 L1337.66 685.467 L1338.22 685.467 L1338.78 685.467 L1339.34 685.467 L1339.9 685.467 L1340.46 685.467 L1341.02 685.467 L1341.57 685.467 L1342.13 685.467 L1342.69 685.467 L1343.25 685.467 L1343.81 685.467 L1344.37 685.467 L1344.93 685.467 L1345.49 685.467 L1346.05 685.467 L1346.61 685.467 L1347.17 685.467 L1347.73 685.467 L1348.29 685.467 L1348.84 685.467 L1349.4 685.467 L1349.96 685.467 L1350.52 685.467 L1351.08 685.467 L1351.64 685.467 L1352.2 685.467 L1352.76 685.467 L1353.32 685.467 L1353.88 685.467 L1354.44 685.467 L1355 685.467 L1355.56 685.467 L1356.12 685.467 L1356.67 685.467 L1357.23 685.467 L1357.79 685.467 L1358.35 685.467 L1358.91 685.467 L1359.47 685.467 L1360.03 685.467 L1360.59 685.467 L1361.15 685.467 L1361.71 685.467 L1362.27 685.467 L1362.83 685.467 L1363.39 685.467 L1363.94 685.467 L1364.5 685.467 L1365.06 685.467 L1365.62 685.467 L1366.18 685.467 L1366.74 685.467 L1367.3 685.467 L1367.86 685.467 L1368.42 685.467 L1368.98 685.467 L1369.54 685.467 L1370.1 685.467 L1370.66 685.467 L1371.21 685.467 L1371.77 685.467 L1372.33 685.467 L1372.89 685.467 L1373.45 685.467 L1374.01 685.467 L1374.57 685.467 L1375.13 685.467 L1375.69 685.467 L1376.25 685.467 L1376.81 685.467 L1377.37 685.467 L1377.93 685.467 L1378.49 685.467 L1379.04 685.467 L1379.6 685.467 L1380.16 685.467 L1380.72 685.467 L1381.28 685.467 L1381.84 685.467 L1382.4 685.467 L1382.96 685.467 L1383.52 685.467 L1384.08 685.467 L1384.64 685.467 L1385.2 685.467 L1385.76 685.467 L1386.31 685.467 L1386.87 685.467 L1387.43 685.467 L1387.99 685.467 L1388.55 685.467 L1389.11 685.467 L1389.67 685.467 L1390.23 685.467 L1390.79 685.467 L1391.35 685.467 L1391.91 685.467 L1392.47 685.467 L1393.03 685.467 L1393.58 685.467 L1394.14 685.467 L1394.7 685.467 L1395.26 685.467 L1395.82 685.467 L1396.38 685.467 L1396.94 685.467 L1397.5 685.467 L1398.06 685.467 L1398.62 685.467 L1399.18 685.467 L1399.74 685.467 L1400.3 685.467 L1400.86 685.467 L1401.41 685.467 L1401.97 685.467 L1402.53 685.467 L1403.09 685.467 L1403.65 685.467 L1404.21 685.467 L1404.77 685.467 L1405.33 685.467 L1405.89 685.467 L1406.45 685.467 L1407.01 685.467 L1407.57 685.467 L1408.13 685.467 L1408.68 685.467 L1409.24 685.467 L1409.8 685.467 L1410.36 685.467 L1410.92 685.467 L1411.48 685.467 L1412.04 685.467 L1412.6 685.467 L1413.16 685.467 L1413.72 685.467 L1414.28 685.467 L1414.84 685.467 L1415.4 685.467 L1415.95 685.467 L1416.51 685.467 L1417.07 685.467 L1417.63 685.467 L1418.19 685.467 L1418.75 685.467 L1419.31 685.467 L1419.87 685.467 L1420.43 685.467 L1420.99 685.467 L1421.55 685.467 L1422.11 685.467 L1422.67 685.467 L1423.23 685.467 L1423.78 685.467 L1424.34 685.467 L1424.9 685.467 L1425.46 685.467 L1426.02 685.467 L1426.58 685.467 L1427.14 685.467 L1427.7 685.467 L1428.26 685.467 L1428.82 685.467 L1429.38 685.467 L1429.94 685.467 L1430.5 685.467 L1431.05 685.467 L1431.61 685.467 L1432.17 685.467 L1432.73 685.467 L1433.29 685.467 L1433.85 685.467 L1434.41 685.467 L1434.97 685.467 L1435.53 685.467 L1436.09 685.467 L1436.65 685.467 L1437.21 685.467 L1437.77 685.467 L1438.33 685.467 L1438.88 685.467 L1439.44 685.467 L1440 685.467 L1440.56 685.467 L1441.12 685.467 L1441.68 685.467 L1442.24 685.467 L1442.8 685.467 L1443.36 685.467 L1443.92 685.467 L1444.48 685.467 L1445.04 685.467 L1445.6 685.467 L1446.15 685.467 L1446.71 685.467 L1447.27 685.467 L1447.83 685.467 L1448.39 685.467 L1448.95 685.467 L1449.51 685.467 L1450.07 685.467 L1450.63 685.467 L1451.19 685.467 L1451.75 685.467 L1452.31 685.467 L1452.87 685.467 L1453.42 685.467 L1453.98 685.467 L1454.54 685.467 L1455.1 685.467 L1455.66 685.467 L1456.22 685.467 L1456.78 685.467 L1457.34 685.467 L1457.9 685.467 L1458.46 685.467 L1459.02 685.467 L1459.58 685.467 L1460.14 685.467 L1460.7 685.467 L1461.25 685.467 L1461.81 685.467 L1462.37 685.467 L1462.93 685.467 L1463.49 685.467 L1464.05 685.467 L1464.61 685.467 L1465.17 685.467 L1465.73 685.467 L1466.29 685.467 L1466.85 685.467 L1467.41 685.467 L1467.97 685.467 L1468.52 685.467 L1469.08 685.467 L1469.64 685.467 L1470.2 685.467 L1470.76 685.467 L1471.32 685.467 L1471.88 685.467 L1472.44 685.467 L1473 685.467 L1473.56 685.467 L1474.12 685.467 L1474.68 685.467 L1475.24 685.467 L1475.79 685.467 L1476.35 685.467 L1476.91 685.467 L1477.47 685.467 L1478.03 685.467 L1478.59 685.467 L1479.15 685.467 L1479.71 685.467 L1480.27 685.467 L1480.83 685.467 L1481.39 685.467 L1481.95 685.467 L1482.51 685.467 L1483.07 685.467 L1483.62 685.467 L1484.18 685.467 L1484.74 685.467 L1485.3 685.467 L1485.86 685.467 L1486.42 685.467 L1486.98 685.467 L1487.54 685.467 L1488.1 685.467 L1488.66 685.467 L1489.22 685.467 L1489.78 685.467 L1490.34 685.467 L1490.89 685.467 L1491.45 685.467 L1492.01 685.467 L1492.57 685.467 L1493.13 685.467 L1493.69 685.467 L1494.25 685.467 L1494.81 685.467 L1495.37 685.467 L1495.93 685.467 L1496.49 685.467 L1497.05 685.467 L1497.61 685.467 L1498.16 685.467 L1498.72 685.467 L1499.28 685.467 L1499.84 685.467 L1500.4 685.467 L1500.96 685.467 L1501.52 685.467 L1502.08 685.467 L1502.64 685.467 L1503.2 685.467 L1503.76 685.467 L1504.32 685.467 L1504.88 685.467 L1505.44 685.467 L1505.99 685.467 L1506.55 685.467 L1507.11 685.467 L1507.67 685.467 L1508.23 685.467 L1508.79 685.467 L1509.35 685.467 L1509.91 685.467 L1510.47 685.467 L1511.03 685.467 L1511.59 685.467 L1512.15 685.467 L1512.71 685.467 L1513.26 685.467 L1513.82 685.467 L1514.38 685.467 L1514.94 685.467 L1515.5 685.467 L1516.06 685.467 L1516.62 685.467 L1517.18 685.467 L1517.74 685.467 L1518.3 685.467 L1518.86 685.467 L1519.42 685.467 L1519.98 685.467 L1520.53 685.467 L1521.09 685.467 L1521.65 685.467 L1522.21 685.467 L1522.77 685.467 L1523.33 685.467 L1523.89 685.467 L1524.45 685.467 L1525.01 685.467 L1525.57 685.467 L1526.13 685.467 L1526.69 685.467 L1527.25 685.467 L1527.81 685.467 L1528.36 685.467 L1528.92 685.467 L1529.48 685.467 L1530.04 685.467 L1530.6 685.467 L1531.16 685.467 L1531.72 685.467 L1532.28 685.467 L1532.84 685.467 L1533.4 685.467 L1533.96 685.467 L1534.52 685.467 L1535.08 685.467 L1535.63 685.467 L1536.19 685.467 L1536.75 685.467 L1537.31 685.467 L1537.87 685.467 L1538.43 685.467 L1538.99 685.467 L1539.55 685.467 L1540.11 685.467 L1540.67 685.467 L1541.23 685.467 L1541.79 685.467 L1542.35 685.467 L1542.9 685.467 L1543.46 685.467 L1544.02 685.467 L1544.58 685.467 L1545.14 685.467 L1545.7 685.467 L1546.26 685.467 L1546.82 685.467 L1547.38 685.467 L1547.94 685.467 L1548.5 685.467 L1549.06 685.467 L1549.62 685.467 L1550.18 685.467 L1550.73 685.467 L1551.29 685.467 L1551.85 685.467 L1552.41 685.467 L1552.97 685.467 L1553.53 685.467 L1554.09 685.467 L1554.65 685.467 L1555.21 685.467 L1555.77 685.467 L1556.33 685.467 L1556.89 685.467 L1557.45 685.467 L1558 685.467 L1558.56 685.467 L1559.12 685.467 L1559.68 685.467 L1560.24 685.467 L1560.8 685.467 L1561.36 685.467 L1561.92 685.467 L1562.48 685.467 L1563.04 685.467 L1563.6 685.467 L1564.16 685.467 L1564.72 685.467 L1565.28 685.467 L1565.83 685.467 L1566.39 685.467 L1566.95 685.467 L1567.51 685.467 L1568.07 685.467 L1568.63 685.467 L1569.19 685.467 L1569.75 685.467 L1570.31 685.467 L1570.87 685.467 L1571.43 685.467 L1571.99 685.467 L1572.55 685.467 L1573.1 685.467 L1573.66 685.467 L1574.22 685.467 L1574.78 685.467 L1575.34 685.467 L1575.9 685.467 L1576.46 685.467 L1577.02 685.467 L1577.58 685.467 L1578.14 685.467 L1578.7 685.467 L1579.26 685.467 L1579.82 685.467 L1580.37 685.467 L1580.93 685.467 L1581.49 685.467 L1582.05 685.467 L1582.61 685.467 L1583.17 685.467 L1583.73 685.467 L1584.29 685.467 L1584.85 685.467 L1585.41 685.467 L1585.97 685.467 L1586.53 685.467 L1587.09 685.467 L1587.65 685.467 L1588.2 685.467 L1588.76 685.467 L1589.32 685.467 L1589.88 685.467 L1590.44 685.467 L1591 685.467 L1591.56 685.467 L1592.12 685.467 L1592.68 685.467 L1593.24 685.467 L1593.8 685.467 L1594.36 685.467 L1594.92 685.467 L1595.47 685.467 L1596.03 685.467 L1596.59 685.467 L1597.15 685.467 L1597.71 685.467 L1598.27 685.467 L1598.83 685.467 L1599.39 685.467 L1599.95 685.467 L1600.51 685.467 L1601.07 685.467 L1601.63 685.467 L1602.19 685.467 L1602.74 685.467 L1603.3 685.467 L1603.86 685.467 L1604.42 685.467 L1604.98 685.467 L1605.54 685.467 L1606.1 685.467 L1606.66 685.467 L1607.22 685.467 L1607.78 685.467 L1608.34 685.467 L1608.9 685.467 L1609.46 685.467 L1610.02 685.467 L1610.57 685.467 L1611.13 685.467 L1611.69 685.467 L1612.25 685.467 L1612.81 685.467 L1613.37 685.467 L1613.93 685.467 L1614.49 685.467 L1615.05 685.467 L1615.61 685.467 L1616.17 685.467 L1616.73 685.467 L1617.29 685.467 L1617.84 685.467 L1618.4 685.467 L1618.96 685.467 L1619.52 685.467 L1620.08 685.467 L1620.64 685.467 L1621.2 685.467 L1621.76 685.467 L1622.32 685.467 L1622.88 685.467 L1623.44 685.467 L1624 685.467 L1624.56 685.467 L1625.11 685.467 L1625.67 685.467 L1626.23 685.467 L1626.79 685.467 L1627.35 685.467 L1627.91 685.467 L1628.47 685.467 L1629.03 685.467 L1629.59 685.467 L1630.15 685.467 L1630.71 685.467 L1631.27 685.467 L1631.83 685.467 L1632.39 685.467 L1632.94 685.467 L1633.5 685.467 L1634.06 685.467 L1634.62 685.467 L1635.18 685.467 L1635.74 685.467 L1636.3 685.467 L1636.86 685.467 L1637.42 685.467 L1637.98 685.467 L1638.54 685.467 L1639.1 685.467 L1639.66 685.467 L1640.21 685.467 L1640.77 685.467 L1641.33 685.467 L1641.89 685.467 L1642.45 685.467 L1643.01 685.467 L1643.57 685.467 L1644.13 685.467 L1644.69 685.467 L1645.25 685.467 L1645.81 685.467 L1646.37 685.467 L1646.93 685.467 L1647.48 685.467 L1648.04 685.467 L1648.6 685.467 L1649.16 685.467 L1649.72 685.467 L1650.28 685.467 L1650.84 685.467 L1651.4 685.467 L1651.96 685.467 L1652.52 685.467 L1653.08 685.467 L1653.64 685.467 L1654.2 685.467 L1654.76 685.467 L1655.31 685.467 L1655.87 685.467 L1656.43 685.467 L1656.99 685.467 L1657.55 685.467 L1658.11 685.467 L1658.67 685.467 L1659.23 685.467 L1659.79 685.467 L1660.35 685.467 L1660.91 685.467 L1661.47 685.467 L1662.03 685.467 L1662.58 685.467 L1663.14 685.467 L1663.7 685.467 L1664.26 685.467 L1664.82 685.467 L1665.38 685.467 L1665.94 685.467 L1666.5 685.467 L1667.06 685.467 L1667.62 685.467 L1668.18 685.467 L1668.74 685.467 L1669.3 685.467 L1669.85 685.467 L1670.41 685.467 L1670.97 685.467 L1671.53 685.467 L1672.09 685.467 L1672.65 685.467 L1673.21 685.467 L1673.77 685.467 L1674.33 685.467 L1674.89 685.467 L1675.45 685.467 L1676.01 685.467 L1676.57 685.467 L1677.13 685.467 L1677.68 685.467 L1678.24 685.467 L1678.8 685.467 L1679.36 685.467 L1679.92 685.467 L1680.48 685.467 L1681.04 685.467 L1681.6 685.467 L1682.16 685.467 L1682.72 685.467 L1683.28 685.467 L1683.84 685.467 L1684.4 685.467 L1684.95 685.467 L1685.51 685.467 L1686.07 685.467 L1686.63 685.467 L1687.19 685.467 L1687.75 685.467 L1688.31 685.467 L1688.87 685.467 L1689.43 685.467 L1689.99 685.467 L1690.55 685.467 L1691.11 685.467 L1691.67 685.467 L1692.23 685.467 L1692.78 685.467 L1693.34 685.467 L1693.9 685.467 L1694.46 685.467 L1695.02 685.467 L1695.58 685.467 L1696.14 685.467 L1696.7 685.467 L1697.26 685.467 L1697.82 685.467 L1698.38 685.467 L1698.94 685.467 L1699.5 685.467 L1700.05 685.467 L1700.61 685.467 L1701.17 685.467 L1701.73 685.467 L1702.29 685.467 L1702.85 685.467 L1703.41 685.467 L1703.97 685.467 L1704.53 685.467 L1705.09 685.467 L1705.65 685.467 L1706.21 685.467 L1706.77 685.467 L1707.32 685.467 L1707.88 685.467 L1708.44 685.467 L1709 685.467 L1709.56 685.467 L1710.12 685.467 L1710.68 685.467 L1711.24 685.467 L1711.8 685.467 L1712.36 685.467 L1712.92 685.467 L1713.48 685.467 L1714.04 685.467 L1714.6 685.467 L1715.15 685.467 L1715.71 685.467 L1716.27 685.467 L1716.83 685.467 L1717.39 685.467 L1717.95 685.467 L1718.51 685.467 L1719.07 685.467 L1719.63 685.467 L1720.19 685.467 L1720.75 685.467 L1721.31 685.467 L1721.87 685.467 L1722.42 685.467 L1722.98 685.467 L1723.54 685.467 L1724.1 685.467 L1724.66 685.467 L1725.22 685.467 L1725.78 685.467 L1726.34 685.467 L1726.9 685.467 L1727.46 685.467 L1728.02 685.467 L1728.58 685.467 L1729.14 685.467 L1729.69 685.467 L1730.25 685.467 L1730.81 685.467 L1731.37 685.467 L1731.93 685.467 L1732.49 685.467 L1733.05 685.467 L1733.61 685.467 L1734.17 685.467 L1734.73 685.467 L1735.29 685.467 L1735.85 685.467 L1736.41 685.467 L1736.97 685.467 L1737.52 685.467 L1738.08 685.467 L1738.64 685.467 L1739.2 685.467 L1739.76 685.467 L1740.32 685.467 L1740.88 685.467 L1741.44 685.467 L1742 685.467 L1742.56 685.467 L1743.12 685.467 L1743.68 685.467 L1744.24 685.467 L1744.79 685.467 L1745.35 685.467 L1745.91 685.467 L1746.47 685.467 L1747.03 685.467 L1747.59 685.467 L1748.15 685.467 L1748.71 685.467 L1749.27 685.467 L1749.83 685.467 L1750.39 685.467 L1750.95 685.467 L1751.51 685.467 L1752.06 685.467 L1752.62 685.467 L1753.18 685.467 L1753.74 685.467 L1754.3 685.467 L1754.86 685.467 L1755.42 685.467 L1755.98 685.467 L1756.54 685.467 L1757.1 685.467 L1757.66 685.467 L1758.22 685.467 L1758.78 685.467 L1759.34 685.467 L1759.89 685.467 L1760.45 685.467 L1761.01 685.467 L1761.57 685.467 L1762.13 685.467 L1762.69 685.467 L1763.25 685.467 L1763.81 685.467 L1764.37 685.467 L1764.93 685.467 L1765.49 685.467 L1766.05 685.467 L1766.61 685.467 L1767.16 685.467 L1767.72 685.467 L1768.28 685.467 L1768.84 685.467 L1769.4 685.467 L1769.96 685.467 L1770.52 685.467 L1771.08 685.467 L1771.64 685.467 L1772.2 685.467 L1772.76 685.467 L1773.32 685.467 L1773.88 685.467 L1774.43 685.467 L1774.99 685.467 L1775.55 685.467 L1776.11 685.467 L1776.67 685.467 L1777.23 685.467 L1777.79 685.467 L1778.35 685.467 L1778.91 685.467 L1779.47 685.467 L1780.03 685.467 L1780.59 685.467 L1781.15 685.467 L1781.71 685.467 L1782.26 685.467 L1782.82 685.467 L1783.38 685.467 L1783.94 685.467 L1784.5 685.467 L1785.06 685.467 L1785.62 685.467 L1786.18 685.467 L1786.74 685.467 L1787.3 685.467 L1787.86 685.467 L1788.42 685.467 L1788.98 685.467 L1789.53 685.467 L1790.09 685.467 L1790.65 685.467 L1791.21 685.467 L1791.77 685.467 L1792.33 685.467 L1792.89 685.467 L1793.45 685.467 L1794.01 685.467 L1794.57 685.467 L1795.13 685.467 L1795.69 685.467 L1796.25 685.467 L1796.8 685.467 L1797.36 685.467 L1797.92 685.467 L1798.48 685.467 L1799.04 685.467 L1799.6 685.467 L1800.16 685.467 L1800.72 685.467 L1801.28 685.467 L1801.84 685.467 L1802.4 685.467 L1802.96 685.467 L1803.52 685.467 L1804.08 685.467 L1804.63 685.467 L1805.19 685.467 L1805.75 685.467 L1806.31 685.467 L1806.87 685.467 L1807.43 685.467 L1807.99 685.467 L1808.55 685.467 L1809.11 685.467 L1809.67 685.467 L1810.23 685.467 L1810.79 685.467 L1811.35 685.467 L1811.9 685.467 L1812.46 685.467 L1813.02 685.467 L1813.58 685.467 L1814.14 685.467 L1814.7 685.467 L1815.26 685.467 L1815.82 685.467 L1816.38 685.467 L1816.94 685.467 L1817.5 685.467 L1818.06 685.467 L1818.62 685.467 L1819.18 685.467 L1819.73 685.467 L1820.29 685.467 L1820.85 685.467 L1821.41 685.467 L1821.97 685.467 L1822.53 685.467 L1823.09 685.467 L1823.65 685.467 L1824.21 685.467 L1824.77 685.467 L1825.33 685.467 L1825.89 685.467 L1826.45 685.467 L1827 685.467 L1827.56 685.467 L1828.12 685.467 L1828.68 685.467 L1829.24 685.467 L1829.8 685.467 L1830.36 685.467 L1830.92 685.467 L1831.48 685.467 L1832.04 685.467 L1832.6 685.467 L1833.16 685.467 L1833.72 685.467 L1834.27 685.467 L1834.83 685.467 L1835.39 685.467 L1835.95 685.467 L1836.51 685.467 L1837.07 685.467 L1837.63 685.467 L1838.19 685.467 L1838.19 681.802 L1837.63 681.802 L1837.07 681.802 L1836.51 681.802 L1835.95 681.802 L1835.39 681.802 L1834.83 681.802 L1834.27 681.802 L1833.72 681.802 L1833.16 681.802 L1832.6 681.802 L1832.04 681.802 L1831.48 681.802 L1830.92 681.802 L1830.36 681.802 L1829.8 681.802 L1829.24 681.802 L1828.68 681.802 L1828.12 681.802 L1827.56 681.802 L1827 681.802 L1826.45 681.802 L1825.89 681.802 L1825.33 681.802 L1824.77 681.802 L1824.21 681.802 L1823.65 681.802 L1823.09 681.802 L1822.53 681.802 L1821.97 681.802 L1821.41 681.802 L1820.85 681.802 L1820.29 681.802 L1819.73 681.802 L1819.18 681.802 L1818.62 681.802 L1818.06 681.802 L1817.5 681.802 L1816.94 681.802 L1816.38 681.802 L1815.82 681.802 L1815.26 681.802 L1814.7 681.802 L1814.14 681.802 L1813.58 681.802 L1813.02 681.802 L1812.46 681.802 L1811.9 681.802 L1811.35 681.802 L1810.79 681.802 L1810.23 681.802 L1809.67 681.802 L1809.11 681.802 L1808.55 681.802 L1807.99 681.802 L1807.43 681.802 L1806.87 681.802 L1806.31 681.802 L1805.75 681.802 L1805.19 681.802 L1804.63 681.802 L1804.08 681.802 L1803.52 681.802 L1802.96 681.802 L1802.4 681.802 L1801.84 681.802 L1801.28 681.802 L1800.72 681.802 L1800.16 681.802 L1799.6 681.802 L1799.04 681.802 L1798.48 681.802 L1797.92 681.802 L1797.36 681.802 L1796.8 681.802 L1796.25 681.802 L1795.69 681.802 L1795.13 681.802 L1794.57 681.802 L1794.01 681.802 L1793.45 681.802 L1792.89 681.802 L1792.33 681.802 L1791.77 681.802 L1791.21 681.802 L1790.65 681.802 L1790.09 681.802 L1789.53 681.802 L1788.98 681.802 L1788.42 681.802 L1787.86 681.802 L1787.3 681.802 L1786.74 681.802 L1786.18 681.802 L1785.62 681.802 L1785.06 681.802 L1784.5 681.802 L1783.94 681.802 L1783.38 681.802 L1782.82 681.802 L1782.26 681.802 L1781.71 681.802 L1781.15 681.802 L1780.59 681.802 L1780.03 681.802 L1779.47 681.802 L1778.91 681.802 L1778.35 681.802 L1777.79 681.802 L1777.23 681.802 L1776.67 681.802 L1776.11 681.802 L1775.55 681.802 L1774.99 681.802 L1774.43 681.802 L1773.88 681.802 L1773.32 681.802 L1772.76 681.802 L1772.2 681.802 L1771.64 681.802 L1771.08 681.802 L1770.52 681.802 L1769.96 681.802 L1769.4 681.802 L1768.84 681.802 L1768.28 681.802 L1767.72 681.802 L1767.16 681.802 L1766.61 681.802 L1766.05 681.802 L1765.49 681.802 L1764.93 681.802 L1764.37 681.802 L1763.81 681.802 L1763.25 681.802 L1762.69 681.802 L1762.13 681.802 L1761.57 681.802 L1761.01 681.802 L1760.45 681.802 L1759.89 681.802 L1759.34 681.802 L1758.78 681.802 L1758.22 681.802 L1757.66 681.802 L1757.1 681.802 L1756.54 681.802 L1755.98 681.802 L1755.42 681.802 L1754.86 681.802 L1754.3 681.802 L1753.74 681.802 L1753.18 681.802 L1752.62 681.802 L1752.06 681.802 L1751.51 681.802 L1750.95 681.802 L1750.39 681.802 L1749.83 681.802 L1749.27 681.802 L1748.71 681.802 L1748.15 681.802 L1747.59 681.802 L1747.03 681.802 L1746.47 681.802 L1745.91 681.802 L1745.35 681.802 L1744.79 681.802 L1744.24 681.802 L1743.68 681.802 L1743.12 681.802 L1742.56 681.802 L1742 681.802 L1741.44 681.802 L1740.88 681.802 L1740.32 681.802 L1739.76 681.802 L1739.2 681.802 L1738.64 681.802 L1738.08 681.802 L1737.52 681.802 L1736.97 681.802 L1736.41 681.802 L1735.85 681.802 L1735.29 681.802 L1734.73 681.802 L1734.17 681.802 L1733.61 681.802 L1733.05 681.802 L1732.49 681.802 L1731.93 681.802 L1731.37 681.802 L1730.81 681.802 L1730.25 681.802 L1729.69 681.802 L1729.14 681.802 L1728.58 681.802 L1728.02 681.802 L1727.46 681.802 L1726.9 681.802 L1726.34 681.802 L1725.78 681.802 L1725.22 681.802 L1724.66 681.802 L1724.1 681.802 L1723.54 681.802 L1722.98 681.802 L1722.42 681.802 L1721.87 681.802 L1721.31 681.802 L1720.75 681.802 L1720.19 681.802 L1719.63 681.802 L1719.07 681.802 L1718.51 681.802 L1717.95 681.802 L1717.39 681.802 L1716.83 681.802 L1716.27 681.802 L1715.71 681.802 L1715.15 681.802 L1714.6 681.802 L1714.04 681.802 L1713.48 681.802 L1712.92 681.802 L1712.36 681.802 L1711.8 681.802 L1711.24 681.802 L1710.68 681.802 L1710.12 681.802 L1709.56 681.802 L1709 681.802 L1708.44 681.802 L1707.88 681.802 L1707.32 681.802 L1706.77 681.802 L1706.21 681.802 L1705.65 681.802 L1705.09 681.802 L1704.53 681.802 L1703.97 681.802 L1703.41 681.802 L1702.85 681.802 L1702.29 681.802 L1701.73 681.802 L1701.17 681.802 L1700.61 681.802 L1700.05 681.802 L1699.5 681.802 L1698.94 681.802 L1698.38 681.802 L1697.82 681.802 L1697.26 681.802 L1696.7 681.802 L1696.14 681.802 L1695.58 681.802 L1695.02 681.802 L1694.46 681.802 L1693.9 681.802 L1693.34 681.802 L1692.78 681.802 L1692.23 681.802 L1691.67 681.802 L1691.11 681.802 L1690.55 681.802 L1689.99 681.802 L1689.43 681.802 L1688.87 681.802 L1688.31 681.802 L1687.75 681.802 L1687.19 681.802 L1686.63 681.802 L1686.07 681.802 L1685.51 681.802 L1684.95 681.802 L1684.4 681.802 L1683.84 681.802 L1683.28 681.802 L1682.72 681.802 L1682.16 681.802 L1681.6 681.802 L1681.04 681.802 L1680.48 681.802 L1679.92 681.802 L1679.36 681.802 L1678.8 681.802 L1678.24 681.802 L1677.68 681.802 L1677.13 681.802 L1676.57 681.802 L1676.01 681.802 L1675.45 681.802 L1674.89 681.802 L1674.33 681.802 L1673.77 681.802 L1673.21 681.802 L1672.65 681.802 L1672.09 681.802 L1671.53 681.802 L1670.97 681.802 L1670.41 681.802 L1669.85 681.802 L1669.3 681.802 L1668.74 681.802 L1668.18 681.802 L1667.62 681.802 L1667.06 681.802 L1666.5 681.802 L1665.94 681.802 L1665.38 681.802 L1664.82 681.802 L1664.26 681.802 L1663.7 681.802 L1663.14 681.802 L1662.58 681.802 L1662.03 681.802 L1661.47 681.802 L1660.91 681.802 L1660.35 681.802 L1659.79 681.802 L1659.23 681.802 L1658.67 681.802 L1658.11 681.802 L1657.55 681.802 L1656.99 681.802 L1656.43 681.802 L1655.87 681.802 L1655.31 681.802 L1654.76 681.802 L1654.2 681.802 L1653.64 681.802 L1653.08 681.802 L1652.52 681.802 L1651.96 681.802 L1651.4 681.802 L1650.84 681.802 L1650.28 681.802 L1649.72 681.802 L1649.16 681.802 L1648.6 681.802 L1648.04 681.802 L1647.48 681.802 L1646.93 681.802 L1646.37 681.802 L1645.81 681.802 L1645.25 681.802 L1644.69 681.802 L1644.13 681.802 L1643.57 681.802 L1643.01 681.802 L1642.45 681.802 L1641.89 681.802 L1641.33 681.802 L1640.77 681.802 L1640.21 681.802 L1639.66 681.802 L1639.1 681.802 L1638.54 681.802 L1637.98 681.802 L1637.42 681.802 L1636.86 681.802 L1636.3 681.802 L1635.74 681.802 L1635.18 681.802 L1634.62 681.802 L1634.06 681.802 L1633.5 681.802 L1632.94 681.802 L1632.39 681.802 L1631.83 681.802 L1631.27 681.802 L1630.71 681.802 L1630.15 681.802 L1629.59 681.802 L1629.03 681.802 L1628.47 681.802 L1627.91 681.802 L1627.35 681.802 L1626.79 681.802 L1626.23 681.802 L1625.67 681.802 L1625.11 681.802 L1624.56 681.802 L1624 681.802 L1623.44 681.802 L1622.88 681.802 L1622.32 681.802 L1621.76 681.802 L1621.2 681.802 L1620.64 681.802 L1620.08 681.802 L1619.52 681.802 L1618.96 681.802 L1618.4 681.802 L1617.84 681.802 L1617.29 681.802 L1616.73 681.802 L1616.17 681.802 L1615.61 681.802 L1615.05 681.802 L1614.49 681.802 L1613.93 681.802 L1613.37 681.802 L1612.81 681.802 L1612.25 681.802 L1611.69 681.802 L1611.13 681.802 L1610.57 681.802 L1610.02 681.802 L1609.46 681.802 L1608.9 681.802 L1608.34 681.802 L1607.78 681.802 L1607.22 681.802 L1606.66 681.802 L1606.1 681.802 L1605.54 681.802 L1604.98 681.802 L1604.42 681.802 L1603.86 681.802 L1603.3 681.802 L1602.74 681.802 L1602.19 681.802 L1601.63 681.802 L1601.07 681.802 L1600.51 681.802 L1599.95 681.802 L1599.39 681.802 L1598.83 681.802 L1598.27 681.802 L1597.71 681.802 L1597.15 681.802 L1596.59 681.802 L1596.03 681.802 L1595.47 681.802 L1594.92 681.802 L1594.36 681.802 L1593.8 681.802 L1593.24 681.802 L1592.68 681.802 L1592.12 681.802 L1591.56 681.802 L1591 681.802 L1590.44 681.802 L1589.88 681.802 L1589.32 681.802 L1588.76 681.802 L1588.2 681.802 L1587.65 681.802 L1587.09 681.802 L1586.53 681.802 L1585.97 681.802 L1585.41 681.802 L1584.85 681.802 L1584.29 681.802 L1583.73 681.802 L1583.17 681.802 L1582.61 681.802 L1582.05 681.802 L1581.49 681.802 L1580.93 681.802 L1580.37 681.802 L1579.82 681.802 L1579.26 681.802 L1578.7 681.802 L1578.14 681.802 L1577.58 681.802 L1577.02 681.802 L1576.46 681.802 L1575.9 681.802 L1575.34 681.802 L1574.78 681.802 L1574.22 681.802 L1573.66 681.802 L1573.1 681.802 L1572.55 681.802 L1571.99 681.802 L1571.43 681.802 L1570.87 681.802 L1570.31 681.802 L1569.75 681.802 L1569.19 681.802 L1568.63 681.802 L1568.07 681.802 L1567.51 681.802 L1566.95 681.802 L1566.39 681.802 L1565.83 681.802 L1565.28 681.802 L1564.72 681.802 L1564.16 681.802 L1563.6 681.802 L1563.04 681.802 L1562.48 681.802 L1561.92 681.802 L1561.36 681.802 L1560.8 681.802 L1560.24 681.802 L1559.68 681.802 L1559.12 681.802 L1558.56 681.802 L1558 681.802 L1557.45 681.802 L1556.89 681.802 L1556.33 681.802 L1555.77 681.802 L1555.21 681.802 L1554.65 681.802 L1554.09 681.802 L1553.53 681.802 L1552.97 681.802 L1552.41 681.802 L1551.85 681.802 L1551.29 681.802 L1550.73 681.802 L1550.18 681.802 L1549.62 681.802 L1549.06 681.802 L1548.5 681.802 L1547.94 681.802 L1547.38 681.802 L1546.82 681.802 L1546.26 681.802 L1545.7 681.802 L1545.14 681.802 L1544.58 681.802 L1544.02 681.802 L1543.46 681.802 L1542.9 681.802 L1542.35 681.802 L1541.79 681.802 L1541.23 681.802 L1540.67 681.802 L1540.11 681.802 L1539.55 681.802 L1538.99 681.802 L1538.43 681.802 L1537.87 681.802 L1537.31 681.802 L1536.75 681.802 L1536.19 681.802 L1535.63 681.802 L1535.08 681.802 L1534.52 681.802 L1533.96 681.802 L1533.4 681.802 L1532.84 681.802 L1532.28 681.802 L1531.72 681.802 L1531.16 681.802 L1530.6 681.802 L1530.04 681.802 L1529.48 681.802 L1528.92 681.802 L1528.36 681.802 L1527.81 681.802 L1527.25 681.802 L1526.69 681.802 L1526.13 681.802 L1525.57 681.802 L1525.01 681.802 L1524.45 681.802 L1523.89 681.802 L1523.33 681.802 L1522.77 681.802 L1522.21 681.802 L1521.65 681.802 L1521.09 681.802 L1520.53 681.802 L1519.98 681.802 L1519.42 681.802 L1518.86 681.802 L1518.3 681.802 L1517.74 681.802 L1517.18 681.802 L1516.62 681.802 L1516.06 681.802 L1515.5 681.802 L1514.94 681.802 L1514.38 681.802 L1513.82 681.802 L1513.26 681.802 L1512.71 681.802 L1512.15 681.802 L1511.59 681.802 L1511.03 681.802 L1510.47 681.802 L1509.91 681.802 L1509.35 681.802 L1508.79 681.802 L1508.23 681.802 L1507.67 681.802 L1507.11 681.802 L1506.55 681.802 L1505.99 681.802 L1505.44 681.802 L1504.88 681.802 L1504.32 681.802 L1503.76 681.802 L1503.2 681.802 L1502.64 681.802 L1502.08 681.802 L1501.52 681.802 L1500.96 681.802 L1500.4 681.802 L1499.84 681.802 L1499.28 681.802 L1498.72 681.802 L1498.16 681.802 L1497.61 681.802 L1497.05 681.802 L1496.49 681.802 L1495.93 681.802 L1495.37 681.802 L1494.81 681.802 L1494.25 681.802 L1493.69 681.802 L1493.13 681.802 L1492.57 681.802 L1492.01 681.802 L1491.45 681.802 L1490.89 681.802 L1490.34 681.802 L1489.78 681.802 L1489.22 681.802 L1488.66 681.802 L1488.1 681.802 L1487.54 681.802 L1486.98 681.802 L1486.42 681.802 L1485.86 681.802 L1485.3 681.802 L1484.74 681.802 L1484.18 681.802 L1483.62 681.802 L1483.07 681.802 L1482.51 681.802 L1481.95 681.802 L1481.39 681.802 L1480.83 681.802 L1480.27 681.802 L1479.71 681.802 L1479.15 681.802 L1478.59 681.802 L1478.03 681.802 L1477.47 681.802 L1476.91 681.802 L1476.35 681.802 L1475.79 681.802 L1475.24 681.802 L1474.68 681.802 L1474.12 681.802 L1473.56 681.802 L1473 681.802 L1472.44 681.802 L1471.88 681.802 L1471.32 681.802 L1470.76 681.802 L1470.2 681.802 L1469.64 681.802 L1469.08 681.802 L1468.52 681.802 L1467.97 681.802 L1467.41 681.802 L1466.85 681.802 L1466.29 681.802 L1465.73 681.802 L1465.17 681.802 L1464.61 681.802 L1464.05 681.802 L1463.49 681.802 L1462.93 681.802 L1462.37 681.802 L1461.81 681.802 L1461.25 681.802 L1460.7 681.802 L1460.14 681.802 L1459.58 681.802 L1459.02 681.802 L1458.46 681.802 L1457.9 681.802 L1457.34 681.802 L1456.78 681.802 L1456.22 681.802 L1455.66 681.802 L1455.1 681.802 L1454.54 681.802 L1453.98 681.802 L1453.42 681.802 L1452.87 681.802 L1452.31 681.802 L1451.75 681.802 L1451.19 681.802 L1450.63 681.802 L1450.07 681.802 L1449.51 681.802 L1448.95 681.802 L1448.39 681.802 L1447.83 681.802 L1447.27 681.802 L1446.71 681.802 L1446.15 681.802 L1445.6 681.802 L1445.04 681.802 L1444.48 681.802 L1443.92 681.802 L1443.36 681.802 L1442.8 681.802 L1442.24 681.802 L1441.68 681.802 L1441.12 681.802 L1440.56 681.802 L1440 681.802 L1439.44 681.802 L1438.88 681.802 L1438.33 681.802 L1437.77 681.802 L1437.21 681.802 L1436.65 681.802 L1436.09 681.802 L1435.53 681.802 L1434.97 681.802 L1434.41 681.802 L1433.85 681.802 L1433.29 681.802 L1432.73 681.802 L1432.17 681.802 L1431.61 681.802 L1431.05 681.802 L1430.5 681.802 L1429.94 681.802 L1429.38 681.802 L1428.82 681.802 L1428.26 681.802 L1427.7 681.802 L1427.14 681.802 L1426.58 681.802 L1426.02 681.802 L1425.46 681.802 L1424.9 681.802 L1424.34 681.802 L1423.78 681.802 L1423.23 681.802 L1422.67 681.802 L1422.11 681.802 L1421.55 681.802 L1420.99 681.802 L1420.43 681.802 L1419.87 681.802 L1419.31 681.802 L1418.75 681.802 L1418.19 681.802 L1417.63 681.802 L1417.07 681.802 L1416.51 681.802 L1415.95 681.802 L1415.4 681.802 L1414.84 681.802 L1414.28 681.802 L1413.72 681.802 L1413.16 681.802 L1412.6 681.802 L1412.04 681.802 L1411.48 681.802 L1410.92 681.802 L1410.36 681.802 L1409.8 681.802 L1409.24 681.802 L1408.68 681.802 L1408.13 681.802 L1407.57 681.802 L1407.01 681.802 L1406.45 681.802 L1405.89 681.802 L1405.33 681.802 L1404.77 681.802 L1404.21 681.802 L1403.65 681.802 L1403.09 681.802 L1402.53 681.802 L1401.97 681.802 L1401.41 681.802 L1400.86 681.802 L1400.3 681.802 L1399.74 681.802 L1399.18 681.802 L1398.62 681.802 L1398.06 681.802 L1397.5 681.802 L1396.94 681.802 L1396.38 681.802 L1395.82 681.802 L1395.26 681.802 L1394.7 681.802 L1394.14 681.802 L1393.58 681.802 L1393.03 681.802 L1392.47 681.802 L1391.91 681.802 L1391.35 681.802 L1390.79 681.802 L1390.23 681.802 L1389.67 681.802 L1389.11 681.802 L1388.55 681.802 L1387.99 681.802 L1387.43 681.802 L1386.87 681.802 L1386.31 681.802 L1385.76 681.802 L1385.2 681.802 L1384.64 681.802 L1384.08 681.802 L1383.52 681.802 L1382.96 681.802 L1382.4 681.802 L1381.84 681.802 L1381.28 681.802 L1380.72 681.802 L1380.16 681.802 L1379.6 681.802 L1379.04 681.802 L1378.49 681.802 L1377.93 681.802 L1377.37 681.802 L1376.81 681.802 L1376.25 681.802 L1375.69 681.802 L1375.13 681.802 L1374.57 681.802 L1374.01 681.802 L1373.45 681.802 L1372.89 681.802 L1372.33 681.802 L1371.77 681.802 L1371.21 681.802 L1370.66 681.802 L1370.1 681.802 L1369.54 681.802 L1368.98 681.802 L1368.42 681.802 L1367.86 681.802 L1367.3 681.802 L1366.74 681.802 L1366.18 681.802 L1365.62 681.802 L1365.06 681.802 L1364.5 681.802 L1363.94 681.802 L1363.39 681.802 L1362.83 681.802 L1362.27 681.802 L1361.71 681.802 L1361.15 681.802 L1360.59 681.802 L1360.03 681.802 L1359.47 681.802 L1358.91 681.802 L1358.35 681.802 L1357.79 681.802 L1357.23 681.802 L1356.67 681.802 L1356.12 681.802 L1355.56 681.802 L1355 681.802 L1354.44 681.802 L1353.88 681.802 L1353.32 681.802 L1352.76 681.802 L1352.2 681.802 L1351.64 681.802 L1351.08 681.802 L1350.52 681.802 L1349.96 681.802 L1349.4 681.802 L1348.84 681.802 L1348.29 681.802 L1347.73 681.802 L1347.17 681.802 L1346.61 681.802 L1346.05 681.802 L1345.49 681.802 L1344.93 681.802 L1344.37 681.802 L1343.81 681.802 L1343.25 681.802 L1342.69 681.802 L1342.13 681.802 L1341.57 681.802 L1341.02 681.802 L1340.46 681.802 L1339.9 681.802 L1339.34 681.802 L1338.78 681.802 L1338.22 681.802 L1337.66 681.802 L1337.1 681.802 L1336.54 681.802 L1335.98 681.802 L1335.42 681.802 L1334.86 681.802 L1334.3 681.802 L1333.75 681.802 L1333.19 681.802 L1332.63 681.802 L1332.07 681.802 L1331.51 681.802 L1330.95 681.802 L1330.39 681.802 L1329.83 681.802 L1329.27 681.802 L1328.71 681.802 L1328.15 681.802 L1327.59 681.802 L1327.03 681.802 L1326.47 681.802 L1325.92 681.802 L1325.36 681.802 L1324.8 681.802 L1324.24 681.802 L1323.68 681.802 L1323.12 681.802 L1322.56 681.802 L1322 681.802 L1321.44 681.802 L1320.88 681.802 L1320.32 681.802 L1319.76 681.802 L1319.2 681.802 L1318.65 681.802 L1318.09 681.802 L1317.53 681.802 L1316.97 681.802 L1316.41 681.802 L1315.85 681.802 L1315.29 681.802 L1314.73 681.802 L1314.17 681.802 L1313.61 681.802 L1313.05 681.802 L1312.49 681.802 L1311.93 681.802 L1311.38 681.802 L1310.82 681.802 L1310.26 681.802 L1309.7 681.802 L1309.14 681.802 L1308.58 681.802 L1308.02 681.802 L1307.46 681.802 L1306.9 681.802 L1306.34 681.802 L1305.78 681.802 L1305.22 681.802 L1304.66 681.802 L1304.1 681.802 L1303.55 681.802 L1302.99 681.802 L1302.43 681.802 L1301.87 681.802 L1301.31 681.802 L1300.75 681.802 L1300.19 681.802 L1299.63 681.802 L1299.07 681.802 L1298.51 681.802 L1297.95 681.802 L1297.39 681.802 L1296.83 681.802 L1296.28 681.802 L1295.72 681.802 L1295.16 681.802 L1294.6 681.802 L1294.04 681.802 L1293.48 681.802 L1292.92 681.802 L1292.36 681.802 L1291.8 681.802 L1291.24 681.802 L1290.68 681.802 L1290.12 681.802 L1289.56 681.802 L1289 681.802 L1288.45 681.802 L1287.89 681.802 L1287.33 681.802 L1286.77 681.802 L1286.21 681.802 L1285.65 681.802 L1285.09 681.802 L1284.53 681.802 L1283.97 681.802 L1283.41 681.802 L1282.85 681.802 L1282.29 681.802 L1281.73 681.802 L1281.18 681.802 L1280.62 681.802 L1280.06 681.802 L1279.5 681.802 L1278.94 681.802 L1278.38 681.802 L1277.82 681.802 L1277.26 681.802 L1276.7 681.802 L1276.14 681.802 L1275.58 681.802 L1275.02 681.802 L1274.46 681.802 L1273.91 681.802 L1273.35 681.802 L1272.79 681.802 L1272.23 681.802 L1271.67 681.802 L1271.11 681.802 L1270.55 681.802 L1269.99 681.802 L1269.43 681.802 L1268.87 681.802 L1268.31 681.802 L1267.75 681.802 L1267.19 681.802 L1266.63 681.802 L1266.08 681.802 L1265.52 681.802 L1264.96 681.802 L1264.4 681.802 L1263.84 681.802 L1263.28 681.802 L1262.72 681.802 L1262.16 681.802 L1261.6 681.802 L1261.04 681.802 L1260.48 681.802 L1259.92 681.802 L1259.36 681.802 L1258.81 681.802 L1258.25 681.802 L1257.69 681.802 L1257.13 681.802 L1256.57 681.802 L1256.01 681.802 L1255.45 681.802 L1254.89 681.802 L1254.33 681.802 L1253.77 681.802 L1253.21 681.802 L1252.65 681.802 L1252.09 681.802 L1251.54 681.802 L1250.98 681.802 L1250.42 681.802 L1249.86 681.802 L1249.3 681.802 L1248.74 681.802 L1248.18 681.802 L1247.62 681.802 L1247.06 681.802 L1246.5 681.802 L1245.94 681.802 L1245.38 681.802 L1244.82 681.802 L1244.26 681.802 L1243.71 681.802 L1243.15 681.802 L1242.59 681.802 L1242.03 681.802 L1241.47 681.802 L1240.91 681.802 L1240.35 681.802 L1239.79 681.802 L1239.23 681.802 L1238.67 681.802 L1238.11 681.802 L1237.55 681.802 L1236.99 681.802 L1236.44 681.802 L1235.88 681.802 L1235.32 681.802 L1234.76 681.802 L1234.2 681.802 L1233.64 681.802 L1233.08 681.802 L1232.52 681.802 L1231.96 681.802 L1231.4 681.802 L1230.84 681.802 L1230.28 681.802 L1229.72 681.802 L1229.17 681.802 L1228.61 681.802 L1228.05 681.802 L1227.49 681.802 L1226.93 681.802 L1226.37 681.802 L1225.81 681.802 L1225.25 681.802 L1224.69 681.802 L1224.13 681.802 L1223.57 681.802 L1223.01 681.802 L1222.45 681.802 L1221.89 681.802 L1221.34 681.802 L1220.78 681.802 L1220.22 681.802 L1219.66 681.802 L1219.1 681.802 L1218.54 681.802 L1217.98 681.802 L1217.42 681.802 L1216.86 681.802 L1216.3 681.802 L1215.74 681.802 L1215.18 681.802 L1214.62 681.802 L1214.07 681.802 L1213.51 681.802 L1212.95 681.802 L1212.39 681.802 L1211.83 681.802 L1211.27 681.802 L1210.71 681.802 L1210.15 681.802 L1209.59 681.802 L1209.03 681.802 L1208.47 681.802 L1207.91 681.802 L1207.35 681.802 L1206.8 681.802 L1206.24 681.802 L1205.68 681.802 L1205.12 681.802 L1204.56 681.802 L1204 681.802 L1203.44 681.802 L1202.88 681.802 L1202.32 681.802 L1201.76 681.802 L1201.2 681.802 L1200.64 681.802 L1200.08 681.802 L1199.52 681.802 L1198.97 681.802 L1198.41 681.802 L1197.85 681.802 L1197.29 681.802 L1196.73 681.802 L1196.17 681.802 L1195.61 681.802 L1195.05 681.802 L1194.49 681.802 L1193.93 681.802 L1193.37 681.802 L1192.81 681.802 L1192.25 681.802 L1191.7 681.802 L1191.14 681.802 L1190.58 681.802 L1190.02 681.802 L1189.46 681.802 L1188.9 681.802 L1188.34 681.802 L1187.78 681.802 L1187.22 681.802 L1186.66 681.802 L1186.1 681.802 L1185.54 681.802 L1184.98 681.802 L1184.43 681.802 L1183.87 681.802 L1183.31 681.802 L1182.75 681.802 L1182.19 681.802 L1181.63 681.802 L1181.07 681.802 L1180.51 681.802 L1179.95 681.802 L1179.39 681.802 L1178.83 681.802 L1178.27 681.802 L1177.71 681.802 L1177.15 681.802 L1176.6 681.802 L1176.04 681.802 L1175.48 681.802 L1174.92 681.802 L1174.36 681.802 L1173.8 681.802 L1173.24 681.802 L1172.68 681.802 L1172.12 681.802 L1171.56 681.802 L1171 681.802 L1170.44 681.802 L1169.88 681.802 L1169.33 681.802 L1168.77 681.802 L1168.21 681.802 L1167.65 681.802 L1167.09 681.802 L1166.53 681.802 L1165.97 681.802 L1165.41 681.802 L1164.85 681.802 L1164.29 681.802 L1163.73 681.802 L1163.17 681.802 L1162.61 681.802 L1162.05 681.802 L1161.5 681.802 L1160.94 681.802 L1160.38 681.802 L1159.82 681.802 L1159.26 681.802 L1158.7 681.802 L1158.14 681.802 L1157.58 681.802 L1157.02 681.802 L1156.46 681.802 L1155.9 681.802 L1155.34 681.802 L1154.78 681.802 L1154.23 681.802 L1153.67 681.802 L1153.11 681.802 L1152.55 681.802 L1151.99 681.802 L1151.43 681.802 L1150.87 681.802 L1150.31 681.802 L1149.75 681.802 L1149.19 681.802 L1148.63 681.802 L1148.07 681.802 L1147.51 681.802 L1146.96 681.802 L1146.4 681.802 L1145.84 681.802 L1145.28 681.802 L1144.72 681.802 L1144.16 681.802 L1143.6 681.802 L1143.04 681.802 L1142.48 681.802 L1141.92 681.802 L1141.36 681.802 L1140.8 681.802 L1140.24 681.802 L1139.68 681.802 L1139.13 681.802 L1138.57 681.802 L1138.01 681.802 L1137.45 681.802 L1136.89 681.802 L1136.33 681.802 L1135.77 681.802 L1135.21 681.802 L1134.65 681.802 L1134.09 681.802 L1133.53 681.802 L1132.97 681.802 L1132.41 681.802 L1131.86 681.802 L1131.3 681.802 L1130.74 681.802 L1130.18 681.802 L1129.62 681.802 L1129.06 681.802 L1128.5 681.802 L1127.94 681.802 L1127.38 681.802 L1126.82 681.802 L1126.26 681.802 L1125.7 681.802 L1125.14 681.802 L1124.59 681.802 L1124.03 681.802 L1123.47 681.802 L1122.91 681.802 L1122.35 681.802 L1121.79 681.802 L1121.23 681.802 L1120.67 681.802 L1120.11 681.802 L1119.55 681.802 L1118.99 681.802 L1118.43 681.802 L1117.87 681.802 L1117.31 681.802 L1116.76 681.802 L1116.2 681.802 L1115.64 681.802 L1115.08 681.802 L1114.52 681.802 L1113.96 681.802 L1113.4 681.802 L1112.84 681.802 L1112.28 681.802 L1111.72 681.802 L1111.16 681.802 L1110.6 681.802 L1110.04 681.802 L1109.49 681.802 L1108.93 681.802 L1108.37 681.802 L1107.81 681.802 L1107.25 681.802 L1106.69 681.802 L1106.13 681.802 L1105.57 681.802 L1105.01 681.802 L1104.45 681.802 L1103.89 681.802 L1103.33 681.802 L1102.77 681.802 L1102.22 681.802 L1101.66 681.802 L1101.1 681.802 L1100.54 681.802 L1099.98 681.802 L1099.42 681.802 L1098.86 681.802 L1098.3 681.802 L1097.74 681.802 L1097.18 681.802 L1096.62 681.802 L1096.06 681.802 L1095.5 681.802 L1094.94 681.802 L1094.39 681.802 L1093.83 681.802 L1093.27 681.802 L1092.71 681.802 L1092.15 681.802 L1091.59 681.802 L1091.03 681.802 L1090.47 681.802 L1089.91 681.802 L1089.35 681.802 L1088.79 681.802 L1088.23 681.802 L1087.67 681.802 L1087.12 681.802 L1086.56 681.802 L1086 681.802 L1085.44 681.802 L1084.88 681.802 L1084.32 681.802 L1083.76 681.802 L1083.2 681.802 L1082.64 681.802 L1082.08 681.802 L1081.52 681.802 L1080.96 681.802 L1080.4 681.802 L1079.85 681.802 L1079.29 681.802 L1078.73 681.802 L1078.17 681.802 L1077.61 681.802 L1077.05 681.802 L1076.49 681.802 L1075.93 681.802 L1075.37 681.802 L1074.81 681.802 L1074.25 681.802 L1073.69 681.802 L1073.13 681.802 L1072.57 681.802 L1072.02 681.802 L1071.46 681.802 L1070.9 681.802 L1070.34 681.802 L1069.78 681.802 L1069.22 681.802 L1068.66 681.802 L1068.1 681.802 L1067.54 681.802 L1066.98 681.802 L1066.42 681.802 L1065.86 681.802 L1065.3 681.802 L1064.75 681.802 L1064.19 681.802 L1063.63 681.802 L1063.07 681.802 L1062.51 681.802 L1061.95 681.802 L1061.39 681.802 L1060.83 681.802 L1060.27 681.802 L1059.71 681.802 L1059.15 681.802 L1058.59 681.802 L1058.03 681.802 L1057.48 681.802 L1056.92 681.802 L1056.36 681.802 L1055.8 681.802 L1055.24 681.802 L1054.68 681.802 L1054.12 681.802 L1053.56 681.802 L1053 681.802 L1052.44 681.802 L1051.88 681.802 L1051.32 681.802 L1050.76 681.802 L1050.2 681.802 L1049.65 681.802 L1049.09 681.802 L1048.53 681.802 L1047.97 681.802 L1047.41 681.802 L1046.85 681.802 L1046.29 681.802 L1045.73 681.802 L1045.17 681.802 L1044.61 681.802 L1044.05 681.802 L1043.49 681.802 L1042.93 681.802 L1042.38 681.802 L1041.82 681.802 L1041.26 681.802 L1040.7 681.802 L1040.14 681.802 L1039.58 681.802 L1039.02 681.802 L1038.46 681.802 L1037.9 681.802 L1037.34 681.802 L1036.78 681.802 L1036.22 681.802 L1035.66 681.802 L1035.1 681.802 L1034.55 681.802 L1033.99 681.802 L1033.43 681.802 L1032.87 681.802 L1032.31 681.802 L1031.75 681.802 L1031.19 681.802 L1030.63 681.802 L1030.07 681.802 L1029.51 681.802 L1028.95 681.802 L1028.39 681.802 L1027.83 681.802 L1027.28 681.802 L1026.72 681.802 L1026.16 681.802 L1025.6 681.802 L1025.04 681.802 L1024.48 681.802 L1023.92 681.802 L1023.36 681.802 L1022.8 681.802 L1022.24 681.802 L1021.68 681.802 L1021.12 681.802 L1020.56 681.802 L1020.01 681.802 L1019.45 681.802 L1018.89 681.802 L1018.33 681.802 L1017.77 681.802 L1017.21 681.802 L1016.65 681.802 L1016.09 681.802 L1015.53 681.802 L1014.97 681.802 L1014.41 681.802 L1013.85 681.802 L1013.29 681.802 L1012.73 681.802 L1012.18 681.802 L1011.62 681.802 L1011.06 681.802 L1010.5 681.802 L1009.94 681.802 L1009.38 681.802 L1008.82 681.802 L1008.26 681.802 L1007.7 681.802 L1007.14 681.802 L1006.58 681.802 L1006.02 681.802 L1005.46 681.802 L1004.91 681.802 L1004.35 681.802 L1003.79 681.802 L1003.23 681.802 L1002.67 681.802 L1002.11 681.802 L1001.55 681.802 L1000.99 681.802 L1000.43 681.802 L999.872 681.802 L999.313 681.802 L998.754 681.802 L998.194 681.802 L997.635 681.802 L997.076 681.802 L996.517 681.802 L995.957 681.802 L995.398 681.802 L994.839 681.802 L994.28 681.802 L993.72 681.802 L993.161 681.802 L992.602 681.802 L992.043 681.802 L991.483 681.802 L990.924 681.802 L990.365 681.802 L989.806 681.802 L989.246 681.802 L988.687 681.802 L988.128 681.802 L987.569 681.802 L987.009 681.802 L986.45 681.802 L985.891 681.802 L985.332 681.802 L984.772 681.802 L984.213 681.802 L983.654 681.802 L983.095 681.802 L982.535 681.802 L981.976 681.802 L981.417 681.802 L980.858 681.802 L980.298 681.802 L979.739 681.802 L979.18 681.802 L978.621 681.802 L978.061 681.802 L977.502 681.802 L976.943 681.802 L976.384 681.802 L975.824 681.802 L975.265 681.802 L974.706 681.802 L974.147 681.802 L973.587 681.802 L973.028 681.802 L972.469 681.802 L971.91 681.802 L971.35 681.802 L970.791 681.802 L970.232 681.802 L969.673 681.802 L969.113 681.802 L968.554 681.802 L967.995 681.802 L967.436 681.802 L966.876 681.802 L966.317 681.802 L965.758 681.802 L965.199 681.802 L964.639 681.802 L964.08 681.802 L963.521 681.802 L962.962 681.802 L962.402 681.802 L961.843 681.802 L961.284 681.802 L960.725 681.802 L960.165 681.802 L959.606 681.802 L959.047 681.802 L958.488 681.802 L957.928 681.802 L957.369 681.802 L956.81 681.802 L956.251 681.802 L955.691 681.802 L955.132 681.802 L954.573 681.802 L954.014 681.802 L953.454 681.802 L952.895 681.802 L952.336 681.802 L951.777 681.802 L951.217 681.802 L950.658 681.802 L950.099 681.802 L949.54 681.802 L948.98 681.802 L948.421 681.802 L947.862 681.802 L947.303 681.802 L946.743 681.802 L946.184 681.802 L945.625 681.802 L945.066 681.802 L944.506 681.802 L943.947 681.802 L943.388 681.802 L942.829 681.802 L942.269 681.802 L941.71 681.802 L941.151 681.802 L940.592 681.802 L940.032 681.802 L939.473 681.802 L938.914 681.802 L938.355 681.802 L937.795 681.802 L937.236 681.802 L936.677 681.802 L936.118 681.802 L935.558 681.802 L934.999 681.802 L934.44 681.802 L933.881 681.802 L933.321 681.802 L932.762 681.802 L932.203 681.802 L931.644 681.802 L931.084 681.802 L930.525 681.802 L929.966 681.802 L929.406 681.802 L928.847 681.802 L928.288 681.802 L927.729 681.802 L927.169 681.802 L926.61 681.802 L926.051 681.802 L925.492 681.802 L924.932 681.802 L924.373 681.802 L923.814 681.802 L923.255 681.802 L922.695 681.802 L922.136 681.802 L921.577 681.802 L921.018 681.802 L920.458 681.802 L919.899 681.802 L919.34 681.802 L918.781 681.802 L918.221 681.802 L917.662 681.802 L917.103 681.802 L916.544 681.802 L915.984 681.802 L915.425 681.802 L914.866 681.802 L914.307 681.802 L913.747 681.802 L913.188 681.802 L912.629 681.802 L912.07 681.802 L911.51 681.802 L910.951 681.802 L910.392 681.802 L909.833 681.802 L909.273 681.802 L908.714 681.802 L908.155 681.802 L907.596 681.802 L907.036 681.802 L906.477 681.802 L905.918 681.802 L905.359 681.802 L904.799 681.802 L904.24 681.802 L903.681 681.802 L903.122 681.802 L902.562 681.802 L902.003 681.802 L901.444 681.802 L900.885 681.802 L900.325 681.802 L899.766 681.802 L899.207 681.802 L898.648 681.802 L898.088 681.802 L897.529 681.802 L896.97 681.802 L896.411 681.802 L895.851 681.802 L895.292 681.802 L894.733 681.802 L894.174 681.802 L893.614 681.802 L893.055 681.802 L892.496 681.802 L891.937 681.802 L891.377 681.802 L890.818 681.802 L890.259 681.802 L889.7 681.802 L889.14 681.802 L888.581 681.802 L888.022 681.802 L887.463 681.802 L886.903 681.802 L886.344 681.802 L885.785 681.802 L885.226 681.802 L884.666 681.802 L884.107 681.802 L883.548 681.802 L882.989 681.802 L882.429 681.802 L881.87 681.802 L881.311 681.802 L880.752 681.802 L880.192 681.802 L879.633 681.802 L879.074 681.802 L878.515 681.802 L877.955 681.802 L877.396 681.802 L876.837 681.802 L876.278 681.802 L875.718 681.802 L875.159 681.802 L874.6 681.802 L874.041 681.802 L873.481 681.802 L872.922 681.802 L872.363 681.802 L871.804 681.802 L871.244 681.802 L870.685 681.802 L870.126 681.802 L869.567 681.802 L869.007 681.802 L868.448 681.802 L867.889 681.802 L867.33 681.802 L866.77 681.802 L866.211 681.802 L865.652 681.802 L865.093 681.802 L864.533 681.802 L863.974 681.802 L863.415 681.802 L862.856 681.802 L862.296 681.802 L861.737 681.802 L861.178 681.802 L860.619 681.802 L860.059 681.802 L859.5 681.802 L858.941 681.802 L858.382 681.802 L857.822 681.802 L857.263 681.802 L856.704 681.802 L856.145 681.802 L855.585 681.802 L855.026 681.802 L854.467 681.802 L853.908 681.802 L853.348 681.802 L852.789 681.802 L852.23 681.802 L851.671 681.802 L851.111 681.802 L850.552 681.802 L849.993 681.802 L849.434 681.802 L848.874 681.802 L848.315 681.802 L847.756 681.802 L847.197 681.802 L846.637 681.802 L846.078 681.802 L845.519 681.802 L844.96 681.802 L844.4 681.802 L843.841 681.802 L843.282 681.802 L842.723 681.802 L842.163 681.802 L841.604 681.802 L841.045 681.802 L840.486 681.802 L839.926 681.802 L839.367 681.802 L838.808 681.802 L838.249 681.802 L837.689 681.802 L837.13 681.802 L836.571 681.802 L836.012 681.802 L835.452 681.802 L834.893 681.802 L834.334 681.802 L833.775 681.802 L833.215 681.802 L832.656 681.802 L832.097 681.802 L831.538 681.802 L830.978 681.802 L830.419 681.802 L829.86 681.802 L829.301 681.802 L828.741 681.802 L828.182 681.802 L827.623 681.802 L827.064 681.802 L826.504 681.802 L825.945 681.802 L825.386 681.802 L824.827 681.802 L824.267 681.802 L823.708 681.802 L823.149 681.802 L822.59 681.802 L822.03 681.802 L821.471 681.802 L820.912 681.802 L820.353 681.802 L819.793 681.802 L819.234 681.802 L818.675 681.802 L818.116 681.802 L817.556 681.802 L816.997 681.802 L816.438 681.802 L815.879 681.802 L815.319 681.802 L814.76 681.802 L814.201 681.802 L813.642 681.802 L813.082 681.802 L812.523 681.802 L811.964 681.802 L811.405 681.802 L810.845 681.802 L810.286 681.802 L809.727 681.802 L809.168 681.802 L808.608 681.802 L808.049 681.802 L807.49 681.802 L806.931 681.802 L806.371 681.802 L805.812 681.802 L805.253 681.802 L804.693 681.802 L804.134 681.802 L803.575 681.802 L803.016 681.802 L802.456 681.802 L801.897 681.802 L801.338 681.802 L800.779 681.802 L800.219 681.802 L799.66 681.802 L799.101 681.802 L798.542 681.802 L797.982 681.802 L797.423 681.802 L796.864 681.802 L796.305 681.802 L795.745 681.802 L795.186 681.802 L794.627 681.802 L794.068 681.802 L793.508 681.802 L792.949 681.802 L792.39 681.802 L791.831 681.802 L791.271 681.802 L790.712 681.802 L790.153 681.802 L789.594 681.802 L789.034 681.802 L788.475 681.802 L787.916 681.802 L787.357 681.802 L786.797 681.802 L786.238 681.802 L785.679 681.802 L785.12 681.802 L784.56 681.802 L784.001 681.802 L783.442 681.802 L782.883 681.802 L782.323 681.802 L781.764 681.802 L781.205 681.802 L780.646 681.802 L780.086 681.802 L779.527 681.802 L778.968 681.802 L778.409 681.802 L777.849 681.802 L777.29 681.802 L776.731 681.802 L776.172 681.802 L775.612 681.802 L775.053 681.802 L774.494 681.802 L773.935 681.802 L773.375 681.802 L772.816 681.802 L772.257 681.802 L771.698 681.802 L771.138 681.802 L770.579 681.802 L770.02 681.802 L769.461 681.802 L768.901 681.802 L768.342 681.802 L767.783 681.802 L767.224 681.802 L766.664 681.802 L766.105 681.802 L765.546 681.802 L764.987 681.802 L764.427 681.802 L763.868 681.802 L763.309 681.802 L762.75 681.802 L762.19 681.802 L761.631 681.802 L761.072 681.802 L760.513 681.802 L759.953 681.802 L759.394 681.802 L758.835 681.802 L758.276 681.802 L757.716 681.802 L757.157 681.802 L756.598 681.802 L756.039 681.802 L755.479 681.802 L754.92 681.802 L754.361 681.802 L753.802 681.802 L753.242 681.802 L752.683 681.802 L752.124 681.802 L751.565 681.802 L751.005 681.802 L750.446 681.802 L749.887 681.802 L749.328 681.802 L748.768 681.802 L748.209 681.802 L747.65 681.802 L747.091 681.802 L746.531 681.802 L745.972 681.802 L745.413 681.802 L744.854 681.802 L744.294 681.802 L743.735 681.802 L743.176 681.802 L742.617 681.802 L742.057 681.802 L741.498 681.802 L740.939 681.802 L740.38 681.802 L739.82 681.802 L739.261 681.802 L738.702 681.802 L738.143 681.802 L737.583 681.802 L737.024 681.802 L736.465 681.802 L735.906 681.802 L735.346 681.802 L734.787 681.802 L734.228 681.802 L733.669 681.802 L733.109 681.802 L732.55 681.802 L731.991 681.802 L731.432 681.802 L730.872 681.802 L730.313 681.802 L729.754 681.802 L729.195 681.802 L728.635 681.802 L728.076 681.802 L727.517 681.802 L726.958 681.802 L726.398 681.802 L725.839 681.802 L725.28 681.802 L724.721 681.802 L724.161 681.802 L723.602 681.802 L723.043 681.802 L722.484 681.802 L721.924 681.802 L721.365 681.802 L720.806 681.802 L720.247 681.802  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.612 720.806,683.612 721.365,683.612 721.924,683.612 722.484,683.612 723.043,683.612 723.602,683.612 724.161,683.612 724.721,683.612 725.28,683.612 725.839,683.612 726.398,683.612 726.958,683.612 727.517,683.612 728.076,683.612 728.635,683.612 729.195,683.612 729.754,683.612 730.313,683.612 730.872,683.612 731.432,683.612 731.991,683.612 732.55,683.612 733.109,683.612 733.669,683.612 734.228,683.612 734.787,683.612 735.346,683.612 735.906,683.612 736.465,683.612 737.024,683.612 737.583,683.612 738.143,683.612 738.702,683.612 739.261,683.612 739.82,683.612 740.38,683.612 740.939,683.612 741.498,683.612 742.057,683.612 742.617,683.612 743.176,683.612 743.735,683.612 744.294,683.612 744.854,683.612 745.413,683.612 745.972,683.612 746.531,683.612 747.091,683.612 747.65,683.612 748.209,683.612 748.768,683.612 749.328,683.612 749.887,683.612 750.446,683.612 751.005,683.612 751.565,683.612 752.124,683.612 752.683,683.612 753.242,683.612 753.802,683.612 754.361,683.612 754.92,683.612 755.479,683.612 756.039,683.612 756.598,683.612 757.157,683.612 757.716,683.612 758.276,683.612 758.835,683.612 759.394,683.612 759.953,683.612 760.513,683.612 761.072,683.612 761.631,683.612 762.19,683.612 762.75,683.612 763.309,683.612 763.868,683.612 764.427,683.612 764.987,683.612 765.546,683.612 766.105,683.612 766.664,683.612 767.224,683.612 767.783,683.612 768.342,683.612 768.901,683.612 769.461,683.612 770.02,683.612 770.579,683.612 771.138,683.612 771.698,683.612 772.257,683.612 772.816,683.612 773.375,683.612 773.935,683.612 774.494,683.612 775.053,683.612 775.612,683.612 776.172,683.612 776.731,683.612 777.29,683.612 777.849,683.612 778.409,683.612 778.968,683.612 779.527,683.612 780.086,683.612 780.646,683.612 781.205,683.612 781.764,683.612 782.323,683.612 782.883,683.612 783.442,683.612 784.001,683.612 784.56,683.612 785.12,683.612 785.679,683.612 786.238,683.612 786.797,683.612 787.357,683.612 787.916,683.612 788.475,683.612 789.034,683.612 789.594,683.612 790.153,683.612 790.712,683.612 791.271,683.612 791.831,683.612 792.39,683.612 792.949,683.612 793.508,683.612 794.068,683.612 794.627,683.612 795.186,683.612 795.745,683.612 796.305,683.612 796.864,683.612 797.423,683.612 797.982,683.612 798.542,683.612 799.101,683.612 799.66,683.612 800.219,683.612 800.779,683.612 801.338,683.612 801.897,683.612 802.456,683.612 803.016,683.612 803.575,683.612 804.134,683.612 804.693,683.612 805.253,683.612 805.812,683.612 806.371,683.612 806.931,683.612 807.49,683.612 808.049,683.612 808.608,683.612 809.168,683.612 809.727,683.612 810.286,683.612 810.845,683.612 811.405,683.612 811.964,683.612 812.523,683.612 813.082,683.612 813.642,683.612 814.201,683.612 814.76,683.612 815.319,683.612 815.879,683.612 816.438,683.612 816.997,683.612 817.556,683.612 818.116,683.612 818.675,683.612 819.234,683.612 819.793,683.612 820.353,683.612 820.912,683.612 821.471,683.612 822.03,683.612 822.59,683.612 823.149,683.612 823.708,683.612 824.267,683.612 824.827,683.612 825.386,683.612 825.945,683.612 826.504,683.612 827.064,683.612 827.623,683.612 828.182,683.612 828.741,683.612 829.301,683.612 829.86,683.612 830.419,683.612 830.978,683.612 831.538,683.612 832.097,683.612 832.656,683.612 833.215,683.612 833.775,683.612 834.334,683.612 834.893,683.612 835.452,683.612 836.012,683.612 836.571,683.612 837.13,683.612 837.689,683.612 838.249,683.612 838.808,683.612 839.367,683.612 839.926,683.612 840.486,683.612 841.045,683.612 841.604,683.612 842.163,683.612 842.723,683.612 843.282,683.612 843.841,683.612 844.4,683.612 844.96,683.612 845.519,683.612 846.078,683.612 846.637,683.612 847.197,683.612 847.756,683.612 848.315,683.612 848.874,683.612 849.434,683.612 849.993,683.612 850.552,683.612 851.111,683.612 851.671,683.612 852.23,683.612 852.789,683.612 853.348,683.612 853.908,683.612 854.467,683.612 855.026,683.612 855.585,683.612 856.145,683.612 856.704,683.612 857.263,683.612 857.822,683.612 858.382,683.612 858.941,683.612 859.5,683.612 860.059,683.612 860.619,683.612 861.178,683.612 861.737,683.612 862.296,683.612 862.856,683.612 863.415,683.612 863.974,683.612 864.533,683.612 865.093,683.612 865.652,683.612 866.211,683.612 866.77,683.612 867.33,683.612 867.889,683.612 868.448,683.612 869.007,683.612 869.567,683.612 870.126,683.612 870.685,683.612 871.244,683.612 871.804,683.612 872.363,683.612 872.922,683.612 873.481,683.612 874.041,683.612 874.6,683.612 875.159,683.612 875.718,683.612 876.278,683.612 876.837,683.612 877.396,683.612 877.955,683.612 878.515,683.612 879.074,683.612 879.633,683.612 880.192,683.612 880.752,683.612 881.311,683.612 881.87,683.612 882.429,683.612 882.989,683.612 883.548,683.612 884.107,683.612 884.666,683.612 885.226,683.612 885.785,683.612 886.344,683.612 886.903,683.612 887.463,683.612 888.022,683.612 888.581,683.612 889.14,683.612 889.7,683.612 890.259,683.612 890.818,683.612 891.377,683.612 891.937,683.612 892.496,683.612 893.055,683.612 893.614,683.612 894.174,683.612 894.733,683.612 895.292,683.612 895.851,683.612 896.411,683.612 896.97,683.612 897.529,683.612 898.088,683.612 898.648,683.612 899.207,683.612 899.766,683.612 900.325,683.612 900.885,683.612 901.444,683.612 902.003,683.612 902.562,683.612 903.122,683.612 903.681,683.612 904.24,683.612 904.799,683.612 905.359,683.612 905.918,683.612 906.477,683.612 907.036,683.612 907.596,683.612 908.155,683.612 908.714,683.612 909.273,683.612 909.833,683.612 910.392,683.612 910.951,683.612 911.51,683.612 912.07,683.612 912.629,683.612 913.188,683.612 913.747,683.612 914.307,683.612 914.866,683.612 915.425,683.612 915.984,683.612 916.544,683.612 917.103,683.612 917.662,683.612 918.221,683.612 918.781,683.612 919.34,683.612 919.899,683.612 920.458,683.612 921.018,683.612 921.577,683.612 922.136,683.612 922.695,683.612 923.255,683.612 923.814,683.612 924.373,683.612 924.932,683.612 925.492,683.612 926.051,683.612 926.61,683.612 927.169,683.612 927.729,683.612 928.288,683.612 928.847,683.612 929.406,683.612 929.966,683.612 930.525,683.612 931.084,683.612 931.644,683.612 932.203,683.612 932.762,683.612 933.321,683.612 933.881,683.612 934.44,683.612 934.999,683.612 935.558,683.612 936.118,683.612 936.677,683.612 937.236,683.612 937.795,683.612 938.355,683.612 938.914,683.612 939.473,683.612 940.032,683.612 940.592,683.612 941.151,683.612 941.71,683.612 942.269,683.612 942.829,683.612 943.388,683.612 943.947,683.612 944.506,683.612 945.066,683.612 945.625,683.612 946.184,683.612 946.743,683.612 947.303,683.612 947.862,683.612 948.421,683.612 948.98,683.612 949.54,683.612 950.099,683.612 950.658,683.612 951.217,683.612 951.777,683.612 952.336,683.612 952.895,683.612 953.454,683.612 954.014,683.612 954.573,683.612 955.132,683.612 955.691,683.612 956.251,683.612 956.81,683.612 957.369,683.612 957.928,683.612 958.488,683.612 959.047,683.612 959.606,683.612 960.165,683.612 960.725,683.612 961.284,683.612 961.843,683.612 962.402,683.612 962.962,683.612 963.521,683.612 964.08,683.612 964.639,683.612 965.199,683.612 965.758,683.612 966.317,683.612 966.876,683.612 967.436,683.612 967.995,683.612 968.554,683.612 969.113,683.612 969.673,683.612 970.232,683.612 970.791,683.612 971.35,683.612 971.91,683.612 972.469,683.612 973.028,683.612 973.587,683.612 974.147,683.612 974.706,683.612 975.265,683.612 975.824,683.612 976.384,683.612 976.943,683.612 977.502,683.612 978.061,683.612 978.621,683.612 979.18,683.612 979.739,683.612 980.298,683.612 980.858,683.612 981.417,683.612 981.976,683.612 982.535,683.612 983.095,683.612 983.654,683.612 984.213,683.612 984.772,683.612 985.332,683.612 985.891,683.612 986.45,683.612 987.009,683.612 987.569,683.612 988.128,683.612 988.687,683.612 989.246,683.612 989.806,683.612 990.365,683.612 990.924,683.612 991.483,683.612 992.043,683.612 992.602,683.612 993.161,683.612 993.72,683.612 994.28,683.612 994.839,683.612 995.398,683.612 995.957,683.612 996.517,683.612 997.076,683.612 997.635,683.612 998.194,683.612 998.754,683.612 999.313,683.612 999.872,683.612 1000.43,683.612 1000.99,683.612 1001.55,683.612 1002.11,683.612 1002.67,683.612 1003.23,683.612 1003.79,683.612 1004.35,683.612 1004.91,683.612 1005.46,683.612 1006.02,683.612 1006.58,683.612 1007.14,683.612 1007.7,683.612 1008.26,683.612 1008.82,683.612 1009.38,683.612 1009.94,683.612 1010.5,683.612 1011.06,683.612 1011.62,683.612 1012.18,683.612 1012.73,683.612 1013.29,683.612 1013.85,683.612 1014.41,683.612 1014.97,683.612 1015.53,683.612 1016.09,683.612 1016.65,683.612 1017.21,683.612 1017.77,683.612 1018.33,683.612 1018.89,683.612 1019.45,683.612 1020.01,683.612 1020.56,683.612 1021.12,683.612 1021.68,683.612 1022.24,683.612 1022.8,683.612 1023.36,683.612 1023.92,683.612 1024.48,683.612 1025.04,683.612 1025.6,683.612 1026.16,683.612 1026.72,683.612 1027.28,683.612 1027.83,683.612 1028.39,683.612 1028.95,683.612 1029.51,683.612 1030.07,683.612 1030.63,683.612 1031.19,683.612 1031.75,683.612 1032.31,683.612 1032.87,683.612 1033.43,683.612 1033.99,683.612 1034.55,683.612 1035.1,683.612 1035.66,683.612 1036.22,683.612 1036.78,683.612 1037.34,683.612 1037.9,683.612 1038.46,683.612 1039.02,683.612 1039.58,683.612 1040.14,683.612 1040.7,683.612 1041.26,683.612 1041.82,683.612 1042.38,683.612 1042.93,683.612 1043.49,683.612 1044.05,683.612 1044.61,683.612 1045.17,683.612 1045.73,683.612 1046.29,683.612 1046.85,683.612 1047.41,683.612 1047.97,683.612 1048.53,683.612 1049.09,683.612 1049.65,683.612 1050.2,683.612 1050.76,683.612 1051.32,683.612 1051.88,683.612 1052.44,683.612 1053,683.612 1053.56,683.612 1054.12,683.612 1054.68,683.612 1055.24,683.612 1055.8,683.612 1056.36,683.612 1056.92,683.612 1057.48,683.612 1058.03,683.612 1058.59,683.612 1059.15,683.612 1059.71,683.612 1060.27,683.612 1060.83,683.612 1061.39,683.612 1061.95,683.612 1062.51,683.612 1063.07,683.612 1063.63,683.612 1064.19,683.612 1064.75,683.612 1065.3,683.612 1065.86,683.612 1066.42,683.612 1066.98,683.612 1067.54,683.612 1068.1,683.612 1068.66,683.612 1069.22,683.612 1069.78,683.612 1070.34,683.612 1070.9,683.612 1071.46,683.612 1072.02,683.612 1072.57,683.612 1073.13,683.612 1073.69,683.612 1074.25,683.612 1074.81,683.612 1075.37,683.612 1075.93,683.612 1076.49,683.612 1077.05,683.612 1077.61,683.612 1078.17,683.612 1078.73,683.612 1079.29,683.612 1079.85,683.612 1080.4,683.612 1080.96,683.612 1081.52,683.612 1082.08,683.612 1082.64,683.612 1083.2,683.612 1083.76,683.612 1084.32,683.612 1084.88,683.612 1085.44,683.612 1086,683.612 1086.56,683.612 1087.12,683.612 1087.67,683.612 1088.23,683.612 1088.79,683.612 1089.35,683.612 1089.91,683.612 1090.47,683.612 1091.03,683.612 1091.59,683.612 1092.15,683.612 1092.71,683.612 1093.27,683.612 1093.83,683.612 1094.39,683.612 1094.94,683.612 1095.5,683.612 1096.06,683.612 1096.62,683.612 1097.18,683.612 1097.74,683.612 1098.3,683.612 1098.86,683.612 1099.42,683.612 1099.98,683.612 1100.54,683.612 1101.1,683.612 1101.66,683.612 1102.22,683.612 1102.77,683.612 1103.33,683.612 1103.89,683.612 1104.45,683.612 1105.01,683.612 1105.57,683.612 1106.13,683.612 1106.69,683.612 1107.25,683.612 1107.81,683.612 1108.37,683.612 1108.93,683.612 1109.49,683.612 1110.04,683.612 1110.6,683.612 1111.16,683.612 1111.72,683.612 1112.28,683.612 1112.84,683.612 1113.4,683.612 1113.96,683.612 1114.52,683.612 1115.08,683.612 1115.64,683.612 1116.2,683.612 1116.76,683.612 1117.31,683.612 1117.87,683.612 1118.43,683.612 1118.99,683.612 1119.55,683.612 1120.11,683.612 1120.67,683.612 1121.23,683.612 1121.79,683.612 1122.35,683.612 1122.91,683.612 1123.47,683.612 1124.03,683.612 1124.59,683.612 1125.14,683.612 1125.7,683.612 1126.26,683.612 1126.82,683.612 1127.38,683.612 1127.94,683.612 1128.5,683.612 1129.06,683.612 1129.62,683.612 1130.18,683.612 1130.74,683.612 1131.3,683.612 1131.86,683.612 1132.41,683.612 1132.97,683.612 1133.53,683.612 1134.09,683.612 1134.65,683.612 1135.21,683.612 1135.77,683.612 1136.33,683.612 1136.89,683.612 1137.45,683.612 1138.01,683.612 1138.57,683.612 1139.13,683.612 1139.68,683.612 1140.24,683.612 1140.8,683.612 1141.36,683.612 1141.92,683.612 1142.48,683.612 1143.04,683.612 1143.6,683.612 1144.16,683.612 1144.72,683.612 1145.28,683.612 1145.84,683.612 1146.4,683.612 1146.96,683.612 1147.51,683.612 1148.07,683.612 1148.63,683.612 1149.19,683.612 1149.75,683.612 1150.31,683.612 1150.87,683.612 1151.43,683.612 1151.99,683.612 1152.55,683.612 1153.11,683.612 1153.67,683.612 1154.23,683.612 1154.78,683.612 1155.34,683.612 1155.9,683.612 1156.46,683.612 1157.02,683.612 1157.58,683.612 1158.14,683.612 1158.7,683.612 1159.26,683.612 1159.82,683.612 1160.38,683.612 1160.94,683.612 1161.5,683.612 1162.05,683.612 1162.61,683.612 1163.17,683.612 1163.73,683.612 1164.29,683.612 1164.85,683.612 1165.41,683.612 1165.97,683.612 1166.53,683.612 1167.09,683.612 1167.65,683.612 1168.21,683.612 1168.77,683.612 1169.33,683.612 1169.88,683.612 1170.44,683.612 1171,683.612 1171.56,683.612 1172.12,683.612 1172.68,683.612 1173.24,683.612 1173.8,683.612 1174.36,683.612 1174.92,683.612 1175.48,683.612 1176.04,683.612 1176.6,683.612 1177.15,683.612 1177.71,683.612 1178.27,683.612 1178.83,683.612 1179.39,683.612 1179.95,683.612 1180.51,683.612 1181.07,683.612 1181.63,683.612 1182.19,683.612 1182.75,683.612 1183.31,683.612 1183.87,683.612 1184.43,683.612 1184.98,683.612 1185.54,683.612 1186.1,683.612 1186.66,683.612 1187.22,683.612 1187.78,683.612 1188.34,683.612 1188.9,683.612 1189.46,683.612 1190.02,683.612 1190.58,683.612 1191.14,683.612 1191.7,683.612 1192.25,683.612 1192.81,683.612 1193.37,683.612 1193.93,683.612 1194.49,683.612 1195.05,683.612 1195.61,683.612 1196.17,683.612 1196.73,683.612 1197.29,683.612 1197.85,683.612 1198.41,683.612 1198.97,683.612 1199.52,683.612 1200.08,683.612 1200.64,683.612 1201.2,683.612 1201.76,683.612 1202.32,683.612 1202.88,683.612 1203.44,683.612 1204,683.612 1204.56,683.612 1205.12,683.612 1205.68,683.612 1206.24,683.612 1206.8,683.612 1207.35,683.612 1207.91,683.612 1208.47,683.612 1209.03,683.612 1209.59,683.612 1210.15,683.612 1210.71,683.612 1211.27,683.612 1211.83,683.612 1212.39,683.612 1212.95,683.612 1213.51,683.612 1214.07,683.612 1214.62,683.612 1215.18,683.612 1215.74,683.612 1216.3,683.612 1216.86,683.612 1217.42,683.612 1217.98,683.612 1218.54,683.612 1219.1,683.612 1219.66,683.612 1220.22,683.612 1220.78,683.612 1221.34,683.612 1221.89,683.612 1222.45,683.612 1223.01,683.612 1223.57,683.612 1224.13,683.612 1224.69,683.612 1225.25,683.612 1225.81,683.612 1226.37,683.612 1226.93,683.612 1227.49,683.612 1228.05,683.612 1228.61,683.612 1229.17,683.612 1229.72,683.612 1230.28,683.612 1230.84,683.612 1231.4,683.612 1231.96,683.612 1232.52,683.612 1233.08,683.612 1233.64,683.612 1234.2,683.612 1234.76,683.612 1235.32,683.612 1235.88,683.612 1236.44,683.612 1236.99,683.612 1237.55,683.612 1238.11,683.612 1238.67,683.612 1239.23,683.612 1239.79,683.612 1240.35,683.612 1240.91,683.612 1241.47,683.612 1242.03,683.612 1242.59,683.612 1243.15,683.612 1243.71,683.612 1244.26,683.612 1244.82,683.612 1245.38,683.612 1245.94,683.612 1246.5,683.612 1247.06,683.612 1247.62,683.612 1248.18,683.612 1248.74,683.612 1249.3,683.612 1249.86,683.612 1250.42,683.612 1250.98,683.612 1251.54,683.612 1252.09,683.612 1252.65,683.612 1253.21,683.612 1253.77,683.612 1254.33,683.612 1254.89,683.612 1255.45,683.612 1256.01,683.612 1256.57,683.612 1257.13,683.612 1257.69,683.612 1258.25,683.612 1258.81,683.612 1259.36,683.612 1259.92,683.612 1260.48,683.612 1261.04,683.612 1261.6,683.612 1262.16,683.612 1262.72,683.612 1263.28,683.612 1263.84,683.612 1264.4,683.612 1264.96,683.612 1265.52,683.612 1266.08,683.612 1266.63,683.612 1267.19,683.612 1267.75,683.612 1268.31,683.612 1268.87,683.612 1269.43,683.612 1269.99,683.612 1270.55,683.612 1271.11,683.612 1271.67,683.612 1272.23,683.612 1272.79,683.612 1273.35,683.612 1273.91,683.612 1274.46,683.612 1275.02,683.612 1275.58,683.612 1276.14,683.612 1276.7,683.612 1277.26,683.612 1277.82,683.612 1278.38,683.612 1278.94,683.612 1279.5,683.612 1280.06,683.612 1280.62,683.612 1281.18,683.612 1281.73,683.612 1282.29,683.612 1282.85,683.612 1283.41,683.612 1283.97,683.612 1284.53,683.612 1285.09,683.612 1285.65,683.612 1286.21,683.612 1286.77,683.612 1287.33,683.612 1287.89,683.612 1288.45,683.612 1289,683.612 1289.56,683.612 1290.12,683.612 1290.68,683.612 1291.24,683.612 1291.8,683.612 1292.36,683.612 1292.92,683.612 1293.48,683.612 1294.04,683.612 1294.6,683.612 1295.16,683.612 1295.72,683.612 1296.28,683.612 1296.83,683.612 1297.39,683.612 1297.95,683.612 1298.51,683.612 1299.07,683.612 1299.63,683.612 1300.19,683.612 1300.75,683.612 1301.31,683.612 1301.87,683.612 1302.43,683.612 1302.99,683.612 1303.55,683.612 1304.1,683.612 1304.66,683.612 1305.22,683.612 1305.78,683.612 1306.34,683.612 1306.9,683.612 1307.46,683.612 1308.02,683.612 1308.58,683.612 1309.14,683.612 1309.7,683.612 1310.26,683.612 1310.82,683.612 1311.38,683.612 1311.93,683.612 1312.49,683.612 1313.05,683.612 1313.61,683.612 1314.17,683.612 1314.73,683.612 1315.29,683.612 1315.85,683.612 1316.41,683.612 1316.97,683.612 1317.53,683.612 1318.09,683.612 1318.65,683.612 1319.2,683.612 1319.76,683.612 1320.32,683.612 1320.88,683.612 1321.44,683.612 1322,683.612 1322.56,683.612 1323.12,683.612 1323.68,683.612 1324.24,683.612 1324.8,683.612 1325.36,683.612 1325.92,683.612 1326.47,683.612 1327.03,683.612 1327.59,683.612 1328.15,683.612 1328.71,683.612 1329.27,683.612 1329.83,683.612 1330.39,683.612 1330.95,683.612 1331.51,683.612 1332.07,683.612 1332.63,683.612 1333.19,683.612 1333.75,683.612 1334.3,683.612 1334.86,683.612 1335.42,683.612 1335.98,683.612 1336.54,683.612 1337.1,683.612 1337.66,683.612 1338.22,683.612 1338.78,683.612 1339.34,683.612 1339.9,683.612 1340.46,683.612 1341.02,683.612 1341.57,683.612 1342.13,683.612 1342.69,683.612 1343.25,683.612 1343.81,683.612 1344.37,683.612 1344.93,683.612 1345.49,683.612 1346.05,683.612 1346.61,683.612 1347.17,683.612 1347.73,683.612 1348.29,683.612 1348.84,683.612 1349.4,683.612 1349.96,683.612 1350.52,683.612 1351.08,683.612 1351.64,683.612 1352.2,683.612 1352.76,683.612 1353.32,683.612 1353.88,683.612 1354.44,683.612 1355,683.612 1355.56,683.612 1356.12,683.612 1356.67,683.612 1357.23,683.612 1357.79,683.612 1358.35,683.612 1358.91,683.612 1359.47,683.612 1360.03,683.612 1360.59,683.612 1361.15,683.612 1361.71,683.612 1362.27,683.612 1362.83,683.612 1363.39,683.612 1363.94,683.612 1364.5,683.612 1365.06,683.612 1365.62,683.612 1366.18,683.612 1366.74,683.612 1367.3,683.612 1367.86,683.612 1368.42,683.612 1368.98,683.612 1369.54,683.612 1370.1,683.612 1370.66,683.612 1371.21,683.612 1371.77,683.612 1372.33,683.612 1372.89,683.612 1373.45,683.612 1374.01,683.612 1374.57,683.612 1375.13,683.612 1375.69,683.612 1376.25,683.612 1376.81,683.612 1377.37,683.612 1377.93,683.612 1378.49,683.612 1379.04,683.612 1379.6,683.612 1380.16,683.612 1380.72,683.612 1381.28,683.612 1381.84,683.612 1382.4,683.612 1382.96,683.612 1383.52,683.612 1384.08,683.612 1384.64,683.612 1385.2,683.612 1385.76,683.612 1386.31,683.612 1386.87,683.612 1387.43,683.612 1387.99,683.612 1388.55,683.612 1389.11,683.612 1389.67,683.612 1390.23,683.612 1390.79,683.612 1391.35,683.612 1391.91,683.612 1392.47,683.612 1393.03,683.612 1393.58,683.612 1394.14,683.612 1394.7,683.612 1395.26,683.612 1395.82,683.612 1396.38,683.612 1396.94,683.612 1397.5,683.612 1398.06,683.612 1398.62,683.612 1399.18,683.612 1399.74,683.612 1400.3,683.612 1400.86,683.612 1401.41,683.612 1401.97,683.612 1402.53,683.612 1403.09,683.612 1403.65,683.612 1404.21,683.612 1404.77,683.612 1405.33,683.612 1405.89,683.612 1406.45,683.612 1407.01,683.612 1407.57,683.612 1408.13,683.612 1408.68,683.612 1409.24,683.612 1409.8,683.612 1410.36,683.612 1410.92,683.612 1411.48,683.612 1412.04,683.612 1412.6,683.612 1413.16,683.612 1413.72,683.612 1414.28,683.612 1414.84,683.612 1415.4,683.612 1415.95,683.612 1416.51,683.612 1417.07,683.612 1417.63,683.612 1418.19,683.612 1418.75,683.612 1419.31,683.612 1419.87,683.612 1420.43,683.612 1420.99,683.612 1421.55,683.612 1422.11,683.612 1422.67,683.612 1423.23,683.612 1423.78,683.612 1424.34,683.612 1424.9,683.612 1425.46,683.612 1426.02,683.612 1426.58,683.612 1427.14,683.612 1427.7,683.612 1428.26,683.612 1428.82,683.612 1429.38,683.612 1429.94,683.612 1430.5,683.612 1431.05,683.612 1431.61,683.612 1432.17,683.612 1432.73,683.612 1433.29,683.612 1433.85,683.612 1434.41,683.612 1434.97,683.612 1435.53,683.612 1436.09,683.612 1436.65,683.612 1437.21,683.612 1437.77,683.612 1438.33,683.612 1438.88,683.612 1439.44,683.612 1440,683.612 1440.56,683.612 1441.12,683.612 1441.68,683.612 1442.24,683.612 1442.8,683.612 1443.36,683.612 1443.92,683.612 1444.48,683.612 1445.04,683.612 1445.6,683.612 1446.15,683.612 1446.71,683.612 1447.27,683.612 1447.83,683.612 1448.39,683.612 1448.95,683.612 1449.51,683.612 1450.07,683.612 1450.63,683.612 1451.19,683.612 1451.75,683.612 1452.31,683.612 1452.87,683.612 1453.42,683.612 1453.98,683.612 1454.54,683.612 1455.1,683.612 1455.66,683.612 1456.22,683.612 1456.78,683.612 1457.34,683.612 1457.9,683.612 1458.46,683.612 1459.02,683.612 1459.58,683.612 1460.14,683.612 1460.7,683.612 1461.25,683.612 1461.81,683.612 1462.37,683.612 1462.93,683.612 1463.49,683.612 1464.05,683.612 1464.61,683.612 1465.17,683.612 1465.73,683.612 1466.29,683.612 1466.85,683.612 1467.41,683.612 1467.97,683.612 1468.52,683.612 1469.08,683.612 1469.64,683.612 1470.2,683.612 1470.76,683.612 1471.32,683.612 1471.88,683.612 1472.44,683.612 1473,683.612 1473.56,683.612 1474.12,683.612 1474.68,683.612 1475.24,683.612 1475.79,683.612 1476.35,683.612 1476.91,683.612 1477.47,683.612 1478.03,683.612 1478.59,683.612 1479.15,683.612 1479.71,683.612 1480.27,683.612 1480.83,683.612 1481.39,683.612 1481.95,683.612 1482.51,683.612 1483.07,683.612 1483.62,683.612 1484.18,683.612 1484.74,683.612 1485.3,683.612 1485.86,683.612 1486.42,683.612 1486.98,683.612 1487.54,683.612 1488.1,683.612 1488.66,683.612 1489.22,683.612 1489.78,683.612 1490.34,683.612 1490.89,683.612 1491.45,683.612 1492.01,683.612 1492.57,683.612 1493.13,683.612 1493.69,683.612 1494.25,683.612 1494.81,683.612 1495.37,683.612 1495.93,683.612 1496.49,683.612 1497.05,683.612 1497.61,683.612 1498.16,683.612 1498.72,683.612 1499.28,683.612 1499.84,683.612 1500.4,683.612 1500.96,683.612 1501.52,683.612 1502.08,683.612 1502.64,683.612 1503.2,683.612 1503.76,683.612 1504.32,683.612 1504.88,683.612 1505.44,683.612 1505.99,683.612 1506.55,683.612 1507.11,683.612 1507.67,683.612 1508.23,683.612 1508.79,683.612 1509.35,683.612 1509.91,683.612 1510.47,683.612 1511.03,683.612 1511.59,683.612 1512.15,683.612 1512.71,683.612 1513.26,683.612 1513.82,683.612 1514.38,683.612 1514.94,683.612 1515.5,683.612 1516.06,683.612 1516.62,683.612 1517.18,683.612 1517.74,683.612 1518.3,683.612 1518.86,683.612 1519.42,683.612 1519.98,683.612 1520.53,683.612 1521.09,683.612 1521.65,683.612 1522.21,683.612 1522.77,683.612 1523.33,683.612 1523.89,683.612 1524.45,683.612 1525.01,683.612 1525.57,683.612 1526.13,683.612 1526.69,683.612 1527.25,683.612 1527.81,683.612 1528.36,683.612 1528.92,683.612 1529.48,683.612 1530.04,683.612 1530.6,683.612 1531.16,683.612 1531.72,683.612 1532.28,683.612 1532.84,683.612 1533.4,683.612 1533.96,683.612 1534.52,683.612 1535.08,683.612 1535.63,683.612 1536.19,683.612 1536.75,683.612 1537.31,683.612 1537.87,683.612 1538.43,683.612 1538.99,683.612 1539.55,683.612 1540.11,683.612 1540.67,683.612 1541.23,683.612 1541.79,683.612 1542.35,683.612 1542.9,683.612 1543.46,683.612 1544.02,683.612 1544.58,683.612 1545.14,683.612 1545.7,683.612 1546.26,683.612 1546.82,683.612 1547.38,683.612 1547.94,683.612 1548.5,683.612 1549.06,683.612 1549.62,683.612 1550.18,683.612 1550.73,683.612 1551.29,683.612 1551.85,683.612 1552.41,683.612 1552.97,683.612 1553.53,683.612 1554.09,683.612 1554.65,683.612 1555.21,683.612 1555.77,683.612 1556.33,683.612 1556.89,683.612 1557.45,683.612 1558,683.612 1558.56,683.612 1559.12,683.612 1559.68,683.612 1560.24,683.612 1560.8,683.612 1561.36,683.612 1561.92,683.612 1562.48,683.612 1563.04,683.612 1563.6,683.612 1564.16,683.612 1564.72,683.612 1565.28,683.612 1565.83,683.612 1566.39,683.612 1566.95,683.612 1567.51,683.612 1568.07,683.612 1568.63,683.612 1569.19,683.612 1569.75,683.612 1570.31,683.612 1570.87,683.612 1571.43,683.612 1571.99,683.612 1572.55,683.612 1573.1,683.612 1573.66,683.612 1574.22,683.612 1574.78,683.612 1575.34,683.612 1575.9,683.612 1576.46,683.612 1577.02,683.612 1577.58,683.612 1578.14,683.612 1578.7,683.612 1579.26,683.612 1579.82,683.612 1580.37,683.612 1580.93,683.612 1581.49,683.612 1582.05,683.612 1582.61,683.612 1583.17,683.612 1583.73,683.612 1584.29,683.612 1584.85,683.612 1585.41,683.612 1585.97,683.612 1586.53,683.612 1587.09,683.612 1587.65,683.612 1588.2,683.612 1588.76,683.612 1589.32,683.612 1589.88,683.612 1590.44,683.612 1591,683.612 1591.56,683.612 1592.12,683.612 1592.68,683.612 1593.24,683.612 1593.8,683.612 1594.36,683.612 1594.92,683.612 1595.47,683.612 1596.03,683.612 1596.59,683.612 1597.15,683.612 1597.71,683.612 1598.27,683.612 1598.83,683.612 1599.39,683.612 1599.95,683.612 1600.51,683.612 1601.07,683.612 1601.63,683.612 1602.19,683.612 1602.74,683.612 1603.3,683.612 1603.86,683.612 1604.42,683.612 1604.98,683.612 1605.54,683.612 1606.1,683.612 1606.66,683.612 1607.22,683.612 1607.78,683.612 1608.34,683.612 1608.9,683.612 1609.46,683.612 1610.02,683.612 1610.57,683.612 1611.13,683.612 1611.69,683.612 1612.25,683.612 1612.81,683.612 1613.37,683.612 1613.93,683.612 1614.49,683.612 1615.05,683.612 1615.61,683.612 1616.17,683.612 1616.73,683.612 1617.29,683.612 1617.84,683.612 1618.4,683.612 1618.96,683.612 1619.52,683.612 1620.08,683.612 1620.64,683.612 1621.2,683.612 1621.76,683.612 1622.32,683.612 1622.88,683.612 1623.44,683.612 1624,683.612 1624.56,683.612 1625.11,683.612 1625.67,683.612 1626.23,683.612 1626.79,683.612 1627.35,683.612 1627.91,683.612 1628.47,683.612 1629.03,683.612 1629.59,683.612 1630.15,683.612 1630.71,683.612 1631.27,683.612 1631.83,683.612 1632.39,683.612 1632.94,683.612 1633.5,683.612 1634.06,683.612 1634.62,683.612 1635.18,683.612 1635.74,683.612 1636.3,683.612 1636.86,683.612 1637.42,683.612 1637.98,683.612 1638.54,683.612 1639.1,683.612 1639.66,683.612 1640.21,683.612 1640.77,683.612 1641.33,683.612 1641.89,683.612 1642.45,683.612 1643.01,683.612 1643.57,683.612 1644.13,683.612 1644.69,683.612 1645.25,683.612 1645.81,683.612 1646.37,683.612 1646.93,683.612 1647.48,683.612 1648.04,683.612 1648.6,683.612 1649.16,683.612 1649.72,683.612 1650.28,683.612 1650.84,683.612 1651.4,683.612 1651.96,683.612 1652.52,683.612 1653.08,683.612 1653.64,683.612 1654.2,683.612 1654.76,683.612 1655.31,683.612 1655.87,683.612 1656.43,683.612 1656.99,683.612 1657.55,683.612 1658.11,683.612 1658.67,683.612 1659.23,683.612 1659.79,683.612 1660.35,683.612 1660.91,683.612 1661.47,683.612 1662.03,683.612 1662.58,683.612 1663.14,683.612 1663.7,683.612 1664.26,683.612 1664.82,683.612 1665.38,683.612 1665.94,683.612 1666.5,683.612 1667.06,683.612 1667.62,683.612 1668.18,683.612 1668.74,683.612 1669.3,683.612 1669.85,683.612 1670.41,683.612 1670.97,683.612 1671.53,683.612 1672.09,683.612 1672.65,683.612 1673.21,683.612 1673.77,683.612 1674.33,683.612 1674.89,683.612 1675.45,683.612 1676.01,683.612 1676.57,683.612 1677.13,683.612 1677.68,683.612 1678.24,683.612 1678.8,683.612 1679.36,683.612 1679.92,683.612 1680.48,683.612 1681.04,683.612 1681.6,683.612 1682.16,683.612 1682.72,683.612 1683.28,683.612 1683.84,683.612 1684.4,683.612 1684.95,683.612 1685.51,683.612 1686.07,683.612 1686.63,683.612 1687.19,683.612 1687.75,683.612 1688.31,683.612 1688.87,683.612 1689.43,683.612 1689.99,683.612 1690.55,683.612 1691.11,683.612 1691.67,683.612 1692.23,683.612 1692.78,683.612 1693.34,683.612 1693.9,683.612 1694.46,683.612 1695.02,683.612 1695.58,683.612 1696.14,683.612 1696.7,683.612 1697.26,683.612 1697.82,683.612 1698.38,683.612 1698.94,683.612 1699.5,683.612 1700.05,683.612 1700.61,683.612 1701.17,683.612 1701.73,683.612 1702.29,683.612 1702.85,683.612 1703.41,683.612 1703.97,683.612 1704.53,683.612 1705.09,683.612 1705.65,683.612 1706.21,683.612 1706.77,683.612 1707.32,683.612 1707.88,683.612 1708.44,683.612 1709,683.612 1709.56,683.612 1710.12,683.612 1710.68,683.612 1711.24,683.612 1711.8,683.612 1712.36,683.612 1712.92,683.612 1713.48,683.612 1714.04,683.612 1714.6,683.612 1715.15,683.612 1715.71,683.612 1716.27,683.612 1716.83,683.612 1717.39,683.612 1717.95,683.612 1718.51,683.612 1719.07,683.612 1719.63,683.612 1720.19,683.612 1720.75,683.612 1721.31,683.612 1721.87,683.612 1722.42,683.612 1722.98,683.612 1723.54,683.612 1724.1,683.612 1724.66,683.612 1725.22,683.612 1725.78,683.612 1726.34,683.612 1726.9,683.612 1727.46,683.612 1728.02,683.612 1728.58,683.612 1729.14,683.612 1729.69,683.612 1730.25,683.612 1730.81,683.612 1731.37,683.612 1731.93,683.612 1732.49,683.612 1733.05,683.612 1733.61,683.612 1734.17,683.612 1734.73,683.612 1735.29,683.612 1735.85,683.612 1736.41,683.612 1736.97,683.612 1737.52,683.612 1738.08,683.612 1738.64,683.612 1739.2,683.612 1739.76,683.612 1740.32,683.612 1740.88,683.612 1741.44,683.612 1742,683.612 1742.56,683.612 1743.12,683.612 1743.68,683.612 1744.24,683.612 1744.79,683.612 1745.35,683.612 1745.91,683.612 1746.47,683.612 1747.03,683.612 1747.59,683.612 1748.15,683.612 1748.71,683.612 1749.27,683.612 1749.83,683.612 1750.39,683.612 1750.95,683.612 1751.51,683.612 1752.06,683.612 1752.62,683.612 1753.18,683.612 1753.74,683.612 1754.3,683.612 1754.86,683.612 1755.42,683.612 1755.98,683.612 1756.54,683.612 1757.1,683.612 1757.66,683.612 1758.22,683.612 1758.78,683.612 1759.34,683.612 1759.89,683.612 1760.45,683.612 1761.01,683.612 1761.57,683.612 1762.13,683.612 1762.69,683.612 1763.25,683.612 1763.81,683.612 1764.37,683.612 1764.93,683.612 1765.49,683.612 1766.05,683.612 1766.61,683.612 1767.16,683.612 1767.72,683.612 1768.28,683.612 1768.84,683.612 1769.4,683.612 1769.96,683.612 1770.52,683.612 1771.08,683.612 1771.64,683.612 1772.2,683.612 1772.76,683.612 1773.32,683.612 1773.88,683.612 1774.43,683.612 1774.99,683.612 1775.55,683.612 1776.11,683.612 1776.67,683.612 1777.23,683.612 1777.79,683.612 1778.35,683.612 1778.91,683.612 1779.47,683.612 1780.03,683.612 1780.59,683.612 1781.15,683.612 1781.71,683.612 1782.26,683.612 1782.82,683.612 1783.38,683.612 1783.94,683.612 1784.5,683.612 1785.06,683.612 1785.62,683.612 1786.18,683.612 1786.74,683.612 1787.3,683.612 1787.86,683.612 1788.42,683.612 1788.98,683.612 1789.53,683.612 1790.09,683.612 1790.65,683.612 1791.21,683.612 1791.77,683.612 1792.33,683.612 1792.89,683.612 1793.45,683.612 1794.01,683.612 1794.57,683.612 1795.13,683.612 1795.69,683.612 1796.25,683.612 1796.8,683.612 1797.36,683.612 1797.92,683.612 1798.48,683.612 1799.04,683.612 1799.6,683.612 1800.16,683.612 1800.72,683.612 1801.28,683.612 1801.84,683.612 1802.4,683.612 1802.96,683.612 1803.52,683.612 1804.08,683.612 1804.63,683.612 1805.19,683.612 1805.75,683.612 1806.31,683.612 1806.87,683.612 1807.43,683.612 1807.99,683.612 1808.55,683.612 1809.11,683.612 1809.67,683.612 1810.23,683.612 1810.79,683.612 1811.35,683.612 1811.9,683.612 1812.46,683.612 1813.02,683.612 1813.58,683.612 1814.14,683.612 1814.7,683.612 1815.26,683.612 1815.82,683.612 1816.38,683.612 1816.94,683.612 1817.5,683.612 1818.06,683.612 1818.62,683.612 1819.18,683.612 1819.73,683.612 1820.29,683.612 1820.85,683.612 1821.41,683.612 1821.97,683.612 1822.53,683.612 1823.09,683.612 1823.65,683.612 1824.21,683.612 1824.77,683.612 1825.33,683.612 1825.89,683.612 1826.45,683.612 1827,683.612 1827.56,683.612 1828.12,683.612 1828.68,683.612 1829.24,683.612 1829.8,683.612 1830.36,683.612 1830.92,683.612 1831.48,683.612 1832.04,683.612 1832.6,683.612 1833.16,683.612 1833.72,683.612 1834.27,683.612 1834.83,683.612 1835.39,683.612 1835.95,683.612 1836.51,683.612 1837.07,683.612 1837.63,683.612 1838.19,683.612 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.040681617133162 ± 0.024027108155269653\nProjected Energy: -4.015224637554786 ± (0.009338110206128292, 0.009114966359480725)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.559871</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4227e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2543e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0199e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.172e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.916e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.498e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.363124291613369\n -0.7590191922770888\n  0.13584182219622498\n  0.15789998694608443\n  0.8767114411781378\n  1.5305929970973242\n  1.5835732611867437\n  3.072870330325866\n  3.125672653951833\n  4.862107221562173\n  6.26069485038059\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
