var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndœÑ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dœÑ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ¬± $(r.œÉ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ¬± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ¬± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ¬± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ¬± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ¬± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ¬± 0.13748856752861724\n   Replica 2: -3.974753826250174 ¬± 0.12466355058904417\n   Replica 3: -4.011054302602586 ¬± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1‚ü©\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1‚ü©\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0‚ü©\"=>-14.1421, fs\"|0 2 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 1 0 2‚ü©\"=>-14.1421, fs\"|1 2 0 1 1 1‚ü©\"=>-14.1421, fs\"|2 0 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 2 0 1‚ü©\"=>-14.1421, fs\"|1 1 2 0 1 1‚ü©\"=>-14.1421, fs\"|1 1 0 2 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 0 2 1‚ü©\"=>-14.1421, fs\"|1 0 2 1 1 1‚ü©\"=>-14.1421, fs\"|2 1 1 1 1 0‚ü©\"=>-14.1421, fs\"|0 1 1 1 1 2‚ü©\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.84 2211.02,1003.84 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.863 2211.02,746.863 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.89 2211.02,489.89 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.918 2211.02,232.918 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.84 423.181,1003.84 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.863 423.181,746.863 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.89 423.181,489.89 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.918 423.181,232.918 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.17 Q349.094 1253.71 349.094 1260.84 Q349.094 1267.95 350.899 1271.51 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.51 Q363.608 1267.95 363.608 1260.84 Q363.608 1253.71 361.779 1250.17 Q359.973 1246.61 356.339 1246.61 M356.339 1242.9 Q362.149 1242.9 365.205 1247.51 Q368.284 1252.09 368.284 1260.84 Q368.284 1269.57 365.205 1274.18 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.18 Q344.395 1269.57 344.395 1260.84 Q344.395 1252.09 347.45 1247.51 Q350.529 1242.9 356.339 1242.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M290.043 1017.18 L306.363 1017.18 L306.363 1021.12 L284.418 1021.12 L284.418 1017.18 Q287.08 1014.43 291.664 1009.8 Q296.27 1005.14 297.451 1003.8 Q299.696 1001.28 300.576 999.541 Q301.478 997.782 301.478 996.092 Q301.478 993.337 299.534 991.601 Q297.613 989.865 294.511 989.865 Q292.312 989.865 289.858 990.629 Q287.427 991.393 284.65 992.944 L284.65 988.222 Q287.474 987.087 289.927 986.509 Q292.381 985.93 294.418 985.93 Q299.789 985.93 302.983 988.615 Q306.177 991.3 306.177 995.791 Q306.177 997.921 305.367 999.842 Q304.58 1001.74 302.474 1004.33 Q301.895 1005 298.793 1008.22 Q295.691 1011.42 290.043 1017.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M316.224 986.555 L334.58 986.555 L334.58 990.49 L320.506 990.49 L320.506 998.962 Q321.524 998.615 322.543 998.453 Q323.562 998.268 324.58 998.268 Q330.367 998.268 333.747 1001.44 Q337.126 1004.61 337.126 1010.03 Q337.126 1015.61 333.654 1018.71 Q330.182 1021.79 323.862 1021.79 Q321.687 1021.79 319.418 1021.42 Q317.173 1021.05 314.765 1020.3 L314.765 1015.61 Q316.849 1016.74 319.071 1017.3 Q321.293 1017.85 323.77 1017.85 Q327.774 1017.85 330.112 1015.74 Q332.45 1013.64 332.45 1010.03 Q332.45 1006.42 330.112 1004.31 Q327.774 1002.2 323.77 1002.2 Q321.895 1002.2 320.02 1002.62 Q318.168 1003.04 316.224 1003.92 L316.224 986.555 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 989.634 Q352.728 989.634 350.899 993.199 Q349.094 996.74 349.094 1003.87 Q349.094 1010.98 350.899 1014.54 Q352.728 1018.08 356.339 1018.08 Q359.973 1018.08 361.779 1014.54 Q363.608 1010.98 363.608 1003.87 Q363.608 996.74 361.779 993.199 Q359.973 989.634 356.339 989.634 M356.339 985.93 Q362.149 985.93 365.205 990.537 Q368.284 995.12 368.284 1003.87 Q368.284 1012.6 365.205 1017.2 Q362.149 1021.79 356.339 1021.79 Q350.529 1021.79 347.45 1017.2 Q344.395 1012.6 344.395 1003.87 Q344.395 995.12 347.45 990.537 Q350.529 985.93 356.339 985.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M286.062 729.583 L304.418 729.583 L304.418 733.518 L290.344 733.518 L290.344 741.99 Q291.363 741.643 292.381 741.481 Q293.4 741.296 294.418 741.296 Q300.205 741.296 303.585 744.467 Q306.964 747.638 306.964 753.055 Q306.964 758.633 303.492 761.735 Q300.02 764.814 293.701 764.814 Q291.525 764.814 289.256 764.444 Q287.011 764.073 284.603 763.332 L284.603 758.633 Q286.687 759.768 288.909 760.323 Q291.131 760.879 293.608 760.879 Q297.613 760.879 299.951 758.772 Q302.288 756.666 302.288 753.055 Q302.288 749.444 299.951 747.337 Q297.613 745.231 293.608 745.231 Q291.733 745.231 289.858 745.647 Q288.006 746.064 286.062 746.944 L286.062 729.583 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M326.177 732.661 Q322.566 732.661 320.737 736.226 Q318.932 739.768 318.932 746.897 Q318.932 754.004 320.737 757.569 Q322.566 761.11 326.177 761.11 Q329.811 761.11 331.617 757.569 Q333.446 754.004 333.446 746.897 Q333.446 739.768 331.617 736.226 Q329.811 732.661 326.177 732.661 M326.177 728.958 Q331.987 728.958 335.043 733.564 Q338.122 738.147 338.122 746.897 Q338.122 755.624 335.043 760.231 Q331.987 764.814 326.177 764.814 Q320.367 764.814 317.288 760.231 Q314.233 755.624 314.233 746.897 Q314.233 738.147 317.288 733.564 Q320.367 728.958 326.177 728.958 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 732.661 Q352.728 732.661 350.899 736.226 Q349.094 739.768 349.094 746.897 Q349.094 754.004 350.899 757.569 Q352.728 761.11 356.339 761.11 Q359.973 761.11 361.779 757.569 Q363.608 754.004 363.608 746.897 Q363.608 739.768 361.779 736.226 Q359.973 732.661 356.339 732.661 M356.339 728.958 Q362.149 728.958 365.205 733.564 Q368.284 738.147 368.284 746.897 Q368.284 755.624 365.205 760.231 Q362.149 764.814 356.339 764.814 Q350.529 764.814 347.45 760.231 Q344.395 755.624 344.395 746.897 Q344.395 738.147 347.45 733.564 Q350.529 728.958 356.339 728.958 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M284.835 472.61 L307.057 472.61 L307.057 474.601 L294.511 507.17 L289.627 507.17 L301.432 476.545 L284.835 476.545 L284.835 472.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M316.224 472.61 L334.58 472.61 L334.58 476.545 L320.506 476.545 L320.506 485.018 Q321.524 484.67 322.543 484.508 Q323.562 484.323 324.58 484.323 Q330.367 484.323 333.747 487.494 Q337.126 490.666 337.126 496.082 Q337.126 501.661 333.654 504.763 Q330.182 507.842 323.862 507.842 Q321.687 507.842 319.418 507.471 Q317.173 507.101 314.765 506.36 L314.765 501.661 Q316.849 502.795 319.071 503.351 Q321.293 503.906 323.77 503.906 Q327.774 503.906 330.112 501.8 Q332.45 499.693 332.45 496.082 Q332.45 492.471 330.112 490.365 Q327.774 488.258 323.77 488.258 Q321.895 488.258 320.02 488.675 Q318.168 489.092 316.224 489.971 L316.224 472.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 475.689 Q352.728 475.689 350.899 479.254 Q349.094 482.795 349.094 489.925 Q349.094 497.031 350.899 500.596 Q352.728 504.138 356.339 504.138 Q359.973 504.138 361.779 500.596 Q363.608 497.031 363.608 489.925 Q363.608 482.795 361.779 479.254 Q359.973 475.689 356.339 475.689 M356.339 471.985 Q362.149 471.985 365.205 476.592 Q368.284 481.175 368.284 489.925 Q368.284 498.652 365.205 503.258 Q362.149 507.842 356.339 507.842 Q350.529 507.842 347.45 503.258 Q344.395 498.652 344.395 489.925 Q344.395 481.175 347.45 476.592 Q350.529 471.985 356.339 471.985 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M256.664 246.263 L264.303 246.263 L264.303 219.897 L255.992 221.564 L255.992 217.304 L264.256 215.638 L268.932 215.638 L268.932 246.263 L276.571 246.263 L276.571 250.198 L256.664 250.198 L256.664 246.263 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M296.015 218.716 Q292.404 218.716 290.576 222.281 Q288.77 225.823 288.77 232.953 Q288.77 240.059 290.576 243.624 Q292.404 247.165 296.015 247.165 Q299.65 247.165 301.455 243.624 Q303.284 240.059 303.284 232.953 Q303.284 225.823 301.455 222.281 Q299.65 218.716 296.015 218.716 M296.015 215.013 Q301.826 215.013 304.881 219.619 Q307.96 224.203 307.96 232.953 Q307.96 241.679 304.881 246.286 Q301.826 250.869 296.015 250.869 Q290.205 250.869 287.127 246.286 Q284.071 241.679 284.071 232.953 Q284.071 224.203 287.127 219.619 Q290.205 215.013 296.015 215.013 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M326.177 218.716 Q322.566 218.716 320.737 222.281 Q318.932 225.823 318.932 232.953 Q318.932 240.059 320.737 243.624 Q322.566 247.165 326.177 247.165 Q329.811 247.165 331.617 243.624 Q333.446 240.059 333.446 232.953 Q333.446 225.823 331.617 222.281 Q329.811 218.716 326.177 218.716 M326.177 215.013 Q331.987 215.013 335.043 219.619 Q338.122 224.203 338.122 232.953 Q338.122 241.679 335.043 246.286 Q331.987 250.869 326.177 250.869 Q320.367 250.869 317.288 246.286 Q314.233 241.679 314.233 232.953 Q314.233 224.203 317.288 219.619 Q320.367 215.013 326.177 215.013 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 218.716 Q352.728 218.716 350.899 222.281 Q349.094 225.823 349.094 232.953 Q349.094 240.059 350.899 243.624 Q352.728 247.165 356.339 247.165 Q359.973 247.165 361.779 243.624 Q363.608 240.059 363.608 232.953 Q363.608 225.823 361.779 222.281 Q359.973 218.716 356.339 218.716 M356.339 215.013 Q362.149 215.013 365.205 219.619 Q368.284 224.203 368.284 232.953 Q368.284 241.679 365.205 246.286 Q362.149 250.869 356.339 250.869 Q350.529 250.869 347.45 246.286 Q344.395 241.679 344.395 232.953 Q344.395 224.203 347.45 219.619 Q350.529 215.013 356.339 215.013 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.918 4017.76,232.918 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.34 457.123,1248.15 457.691,1248 458.259,1247.74 458.828,1247.37 459.396,1246.98 459.964,1246.54 460.533,1245.99 461.101,1245.34 461.669,1244.63 462.238,1241.79 462.806,1239.97 463.375,1238.07 463.943,1237.14 464.511,1236.08 465.08,1233.86 465.648,1232.59 466.216,1231.23 466.785,1229.74 467.353,1228.13 467.921,1226.4 468.49,1224.54 469.058,1221.49 469.626,1219.31 470.195,1214.97 470.763,1210.46 471.331,1207.92 471.9,1205.21 472.468,1201.28 473.036,1197.2 473.605,1193.98 474.173,1190.53 474.741,1184.87 475.31,1181.07 475.878,1177.2 476.446,1170.86 477.015,1166.48 477.583,1161.94 478.152,1157.18 478.72,1151.23 479.288,1144.98 479.857,1138.6 480.425,1130.99 480.993,1125.25 481.562,1116.13 482.13,1110 482.698,1103.79 483.267,1097.27 483.835,1089.55 484.403,1081.56 484.972,1073.59 485.54,1063.26 486.108,1053.77 486.677,1046.31 487.245,1037.63 487.813,1027.74 488.382,1019.83 488.95,1008.67 489.518,997.633 490.087,989.482 490.655,980.06 491.224,970.495 491.792,961.937 492.36,952.129 492.929,943.254 493.497,933.432 494.065,924.439 494.634,914.266 495.202,903.074 495.77,891.818 496.339,881.534 496.907,871.277 497.475,858.785 498.044,848.483 498.612,837.307 499.18,826.061 499.749,816.866 500.317,802.632 500.885,793.7 501.454,782.721 502.022,772.705 502.59,761.762 503.159,752.912 503.727,744.023 504.295,733.387 504.864,723.657 505.432,712.98 506.001,703.35 506.569,694.836 507.137,685.343 507.706,675.85 508.274,665.665 508.842,656.579 509.411,646.564 509.979,637.473 510.547,628.761 511.116,620.305 511.684,611.592 512.252,602.056 512.821,592.489 513.389,582.067 513.957,574.996 514.526,568.238 515.094,559.225 515.662,550.494 516.231,542.893 516.799,536.672 517.367,529.505 517.936,523.437 518.504,517.308 519.072,511.179 519.641,501.467 520.209,492.85 520.778,485.218 521.346,479.016 521.914,471.906 522.483,465.863 523.051,458.854 523.619,452.169 524.188,445.53 524.756,438.206 525.324,434.118 525.893,430.227 526.461,426.42 527.029,421.369 527.598,415.554 528.166,411.892 528.734,407.177 529.303,404.664 529.871,400.212 530.439,397.65 531.008,395.115 531.576,391.672 532.144,386.392 532.713,383.996 533.281,380.444 533.85,377.321 534.418,374.246 534.986,371.029 535.555,366.827 536.123,361.81 536.691,356.988 537.26,353.341 537.828,348.972 538.396,344.804 538.965,341.577 539.533,339.358 540.101,337.242 540.67,332.145 541.238,329.277 541.806,327.738 542.375,324.942 542.943,324.441 543.511,322.801 544.08,318.093 544.648,315.614 545.216,313.06 545.785,311.837 546.353,310.448 546.921,309.206 547.49,307.969 548.058,305.632 548.627,303.259 549.195,302.28 549.763,301.19 550.332,298.169 550.9,297.518 551.468,296.402 552.037,292.311 552.605,290.335 553.173,289.573 553.742,284.712 554.31,283.353 554.878,287.109 555.447,286.528 556.015,286.752 556.583,283.88 557.152,282.126 557.72,281.403 558.288,277.65 558.857,278.445 559.425,277.957 559.993,277.434 560.562,275.824 561.13,274.407 561.698,273.221 562.267,269.853 562.835,268.64 563.404,268.419 563.972,266.42 564.54,266.723 565.109,265.473 565.677,266.509 566.245,267.312 566.814,265.881 567.382,266.593 567.95,265.35 568.519,265.209 569.087,263.003 569.655,262.001 570.224,259.869 570.792,259.89 571.36,259.851 571.929,259.952 572.497,258.725 573.065,258.802 573.634,259.904 574.202,259.773 574.77,257.623 575.339,256.316 575.907,258.248 576.476,256.061 577.044,255.767 577.612,255.653 578.181,255.586 578.749,256.382 579.317,256.199 579.886,253.973 580.454,253.878 581.022,253.951 581.591,253.651 582.159,253.571 582.727,252.6 583.296,248.584 583.864,247.842 584.432,248.164 585.001,248.229 585.569,250.562 586.137,248.465 586.706,246.44 587.274,246.529 587.842,246.791 588.411,247 588.979,246.837 589.547,245.065 590.116,245.474 590.684,244.686 591.253,243.829 591.821,243.167 592.389,243.489 592.958,242.765 593.526,241.321 594.094,242.945 594.663,243.293 595.231,244.826 595.799,244.848 596.368,245.938 596.936,247.283 597.504,244.211 598.073,245.699 598.641,243.67 599.209,243.883 599.778,242.029 600.346,243.473 600.914,242.814 601.483,243.176 602.051,242.567 602.619,240.92 603.188,240.374 603.756,239.756 604.325,240.26 604.893,241.706 605.461,241.951 606.03,241.219 606.598,241.517 607.166,240.753 607.735,243.272 608.303,242.471 608.871,240.732 609.44,241.189 610.008,242.655 610.576,241.482 611.145,240.776 611.713,240.093 612.281,241.394 612.85,241.591 613.418,241.736 613.986,240.957 614.555,242.113 615.123,243.276 615.691,244.249 616.26,244.393 616.828,243.554 617.396,244.549 617.965,244.473 618.533,245.483 619.102,245.426 619.67,245.594 620.238,243.435 620.807,244.287 621.375,245.184 621.943,243.886 622.512,243.816 623.08,246.031 623.648,246.951 624.217,246.789 624.785,244.445 625.353,243.21 625.922,243.187 626.49,243.294 627.058,243.413 627.627,243.073 628.195,239.843 628.763,239.974 629.332,240.291 629.9,240.379 630.468,242.528 631.037,241.295 631.605,240.465 632.173,239.549 632.742,240.726 633.31,239.776 633.879,237.781 634.447,238.042 635.015,239.382 635.584,238.513 636.152,237.556 636.72,239.74 637.289,238.82 637.857,238.953 638.425,239.003 638.994,238.302 639.562,239.524 640.13,238.352 640.699,240.601 641.267,241.639 641.835,240.656 642.404,237.494 642.972,239.834 643.54,238.899 644.109,237.844 644.677,237.985 645.245,237.202 645.814,237.341 646.382,237.337 646.951,239.546 647.519,237.555 648.087,237.045 648.656,236.143 649.224,235.429 649.792,234.669 650.361,235.033 650.929,235.313 651.497,235.627 652.066,235.85 652.634,238.336 653.202,239.343 653.771,238.434 654.339,238.373 654.907,237.45 655.476,235.639 656.044,235.683 656.612,236.946 657.181,237.319 657.749,235.302 658.317,236.66 658.886,234.789 659.454,234.072 660.022,233.557 660.591,233.948 661.159,233.363 661.728,234.02 662.296,234.36 662.864,234.843 663.433,235.191 664.001,234.477 664.569,234.1 665.138,234.613 665.706,235.148 666.274,236.49 666.843,234.602 667.411,236.013 667.979,235.411 668.548,236.583 669.116,236.786 669.684,237.951 670.253,238.122 670.821,235.2 671.389,235.714 671.958,233.137 672.526,233.649 673.094,233.934 673.663,234.31 674.231,233.711 674.799,235.935 675.368,236.212 675.936,237.454 676.505,240.47 677.073,241.439 677.641,239.384 678.21,238.344 678.778,235.338 679.346,238.924 679.915,235.913 680.483,236.244 681.051,235.408 681.62,235.693 682.188,235.955 682.756,234.218 683.325,236.611 683.893,235.829 684.461,235.134 685.03,235.506 685.598,236.692 686.166,237.637 686.735,238.745 687.303,236.827 687.871,236.75 688.44,236.921 689.008,237.168 689.577,236.08 690.145,236.202 690.713,236.434 691.282,237.545 691.85,236.453 692.418,238.72 692.987,239.519 693.555,242.419 694.123,244.246 694.692,242.634 695.26,241.156 695.828,241.028 696.397,240.749 696.965,238.515 697.533,236.387 698.102,234.486 698.67,235.707 699.238,234.752 699.807,234.701 700.375,234.872 700.943,234.983 701.512,235.129 702.08,236.269 702.648,237.339 703.217,238.177 703.785,236.824 704.354,238.765 704.922,237.747 705.49,237.658 706.059,236.725 706.627,237.632 707.195,237.483 707.764,236.226 708.332,238.425 708.9,237.289 709.469,237.398 710.037,236.354 710.605,236.511 711.174,236.532 711.742,237.453 712.31,237.407 712.879,239.281 713.447,239.942 714.015,239.752 714.584,239.521 715.152,237.232 715.72,238.266 716.289,238.99 716.857,238.602 717.425,236.26 717.994,236.476 718.562,236.669 719.131,236.509 719.699,235.398 720.267,234.354 720.836,234.25 721.404,233.166 721.972,232.371 722.541,233.592 723.109,237.052 723.677,238.228 724.246,237.892 724.814,239.683 725.382,238.194 725.951,237.808 726.519,237.403 727.087,236.204 727.656,236.062 728.224,235.94 728.792,231.963 729.361,232.236 729.929,230.31 730.497,229.38 731.066,229.734 731.634,230.043 732.203,229.403 732.771,229.796 733.339,228.123 733.908,229.563 734.476,230.92 735.044,231.265 735.613,230.574 736.181,230.975 736.749,229.41 737.318,231.214 737.886,229.393 738.454,229.915 739.023,230.433 739.591,230.951 740.159,231.383 740.728,228.507 741.296,231.965 741.864,230.298 742.433,229.632 743.001,231.349 743.569,232.738 744.138,235.234 744.706,232.873 745.274,233.193 745.843,236.468 746.411,237.556 746.98,236.365 747.548,236.496 748.116,236.479 748.685,238.594 749.253,238.237 749.821,237.132 750.39,238.016 750.958,237.888 751.526,237.869 752.095,238.78 752.663,236.556 753.231,236.645 753.8,235.651 754.368,234.534 754.936,235.604 755.505,235.56 756.073,233.727 756.641,230.72 757.21,231.12 757.778,230.281 758.346,231.598 758.915,231.86 759.483,232.239 760.052,231.651 760.62,231.825 761.188,231.961 761.757,231.213 762.325,232.48 762.893,231.829 763.462,233.048 764.03,234.172 764.598,234.505 765.167,236.828 765.735,235.61 766.303,237.501 766.872,237.3 767.44,235.159 768.008,236.147 768.577,237.012 769.145,237.765 769.713,236.719 770.282,235.822 770.85,234.715 771.418,235.81 771.987,236.913 772.555,236.748 773.123,237.767 773.692,239.642 774.26,238.306 774.829,237.942 775.397,234.701 775.965,235.784 776.534,237.794 777.102,238.663 777.67,237.608 778.239,236.463 778.807,235.186 779.375,238.221 779.944,238.069 780.512,234.764 781.08,240.034 781.649,239.603 782.217,237.122 782.785,235.784 783.354,235.788 783.922,236.845 784.49,235.584 785.059,234.336 785.627,234.473 786.195,235.357 786.764,235.17 787.332,236.083 787.9,232.718 788.469,232.936 789.037,229.744 789.606,234.104 790.174,232.999 790.742,234.379 791.311,236.698 791.879,237.502 792.447,237.141 793.016,235.929 793.584,235.798 794.152,235.742 794.721,235.612 795.289,234.377 795.857,233.141 796.426,233.262 796.994,234.485 797.562,234.41 798.131,234.742 798.699,235.546 799.267,236.34 799.836,235.251 800.404,235.168 800.972,235.084 801.541,234.168 802.109,234.124 802.678,234.882 803.246,231.798 803.814,231.887 804.383,231.887 804.951,230.129 805.519,231.285 806.088,232.534 806.656,231.632 807.224,229.949 807.793,230.146 808.361,231.372 808.929,232.539 809.498,234.581 810.066,235.472 810.634,235.331 811.203,234.11 811.771,234.033 812.339,233.062 812.908,230.037 813.476,227.211 814.044,230.929 814.613,232.074 815.181,231.314 815.749,234.604 816.318,235.685 816.886,236.649 817.455,238.662 818.023,240.4 818.591,238.968 819.16,238.518 819.728,238.237 820.296,239.226 820.865,236.617 821.433,236.444 822.001,236.145 822.57,235.934 823.138,234.667 823.706,233.748 824.275,234.591 824.843,234.372 825.411,234.27 825.98,234.32 826.548,234.135 827.116,233.838 827.685,232.672 828.253,233.692 828.821,232.843 829.39,232.972 829.958,234.091 830.526,233.992 831.095,233.89 831.663,233.944 832.232,233.842 832.8,233.701 833.368,234.577 833.937,235.606 834.505,234.643 835.073,234.4 835.642,234.261 836.21,233.345 836.778,235.564 837.347,235.34 837.915,233.125 838.483,232.995 839.052,232.155 839.62,233.257 840.188,233.342 840.757,233.408 841.325,233.47 841.893,233.101 842.462,233.099 843.03,232.919 843.598,231.977 844.167,231.929 844.735,232.937 845.304,233.672 845.872,232.739 846.44,233.755 847.009,231.446 847.577,230.471 848.145,230.744 848.714,230.929 849.282,229.023 849.85,229.63 850.419,231.051 850.987,230.984 851.555,235.477 852.124,233.218 852.692,233.313 853.26,231.112 853.829,232.172 854.397,232.477 854.965,233.671 855.534,233.655 856.102,234.657 856.67,236.603 857.239,236.108 857.807,237.914 858.375,236.552 858.944,236.405 859.512,235.094 860.081,234.82 860.649,231.649 861.217,230.56 861.786,230.788 862.354,232.196 862.922,233.365 863.491,234.516 864.059,234.469 864.627,234.298 865.196,235.246 865.764,235.096 866.332,233.784 866.901,233.695 867.469,232.901 868.037,231.635 868.606,231.506 869.174,229.612 869.742,231.145 870.311,229.413 870.879,228.31 871.447,229.923 872.016,231.115 872.584,230.528 873.152,232.917 873.721,232.247 874.289,231.241 874.858,231.363 875.426,233.739 875.994,232.792 876.563,229.982 877.131,232.221 877.699,231.441 878.268,229.516 878.836,227.821 879.404,231.291 879.973,231.429 880.541,228.745 881.109,228.055 881.678,229.475 882.246,231.957 882.814,234.139 883.383,233.177 883.951,231.08 884.519,230.289 885.088,231.61 885.656,233.9 886.224,235.977 886.793,238.942 887.361,237.793 887.93,233.444 888.498,232.639 889.066,234.592 889.635,234.637 890.203,234.924 890.771,233.699 891.34,232.765 891.908,234.021 892.476,236.113 893.045,235.052 893.613,234.017 894.181,235.215 894.75,234.946 895.318,234.05 895.886,235.995 896.455,233.907 897.023,234.975 897.591,234.726 898.16,235.774 898.728,232.595 899.296,231.642 899.865,231.876 900.433,230.053 901.001,231.39 901.57,231.696 902.138,231.772 902.707,230.891 903.275,229.06 903.843,229.417 904.412,229.913 904.98,226.912 905.548,225.273 906.117,227.089 906.685,225.62 907.253,226.451 907.822,227.245 908.39,227.866 908.958,227.524 909.527,228.259 910.095,229.612 910.663,231.047 911.232,232.397 911.8,232.564 912.368,232.85 912.937,231.967 913.505,232.354 914.073,233.744 914.642,234.069 915.21,236.146 915.779,237.193 916.347,239.021 916.915,239.845 917.484,239.369 918.052,237.008 918.62,236.971 919.189,236.952 919.757,236.561 920.325,237.22 920.894,238.956 921.462,235.656 922.03,235.568 922.599,234.429 923.167,232.388 923.735,232.692 924.304,232.856 924.872,232.927 925.44,234.046 926.009,235.073 926.577,233.947 927.145,234.159 927.714,234.207 928.282,234.123 928.85,234.321 929.419,234.095 929.987,234.186 930.556,233.002 931.124,232.192 931.692,233.332 932.261,233.649 932.829,234.831 933.397,234.69 933.966,236.755 934.534,236.497 935.102,236.429 935.671,235.121 936.239,232.808 936.807,233.056 937.376,233.935 937.944,236.085 938.512,233.813 939.081,233.84 939.649,232.791 940.217,229.771 940.786,231.157 941.354,229.97 941.922,231.082 942.491,232.313 943.059,232.517 943.627,235.734 944.196,236.713 944.764,237.845 945.333,240.477 945.901,239.962 946.469,239.206 947.038,239.957 947.606,242.445 948.174,240.74 948.743,242.398 949.311,242.648 949.879,238.956 950.448,240.546 951.016,240.081 951.584,239.391 952.153,240.016 952.721,239.148 953.289,240.963 953.858,240.305 954.426,239.957 954.994,240.446 955.563,239.589 956.131,237.966 956.699,237.539 957.268,236.03 957.836,236.777 958.405,236.337 958.973,236.114 959.541,237.826 960.11,236.404 960.678,236.028 961.246,235.919 961.815,235.389 962.383,235.156 962.951,235.063 963.52,232.678 964.088,234.29 964.656,231.968 965.225,229.662 965.793,230.51 966.361,229.525 966.93,230.685 967.498,232.801 968.066,232.675 968.635,234.585 969.203,234.288 969.771,236.161 970.34,236.814 970.908,236.327 971.476,236.764 972.045,236.394 972.613,238.083 973.182,235.35 973.75,236.779 974.318,236.97 974.887,236.445 975.455,235.231 976.023,234.985 976.592,234.674 977.16,232.026 977.728,231.758 978.297,231.541 978.865,231.376 979.433,232.219 980.002,231.017 980.57,226.99 981.138,227.988 981.707,227.24 982.275,227.4 982.843,227.542 983.412,226.927 983.98,228.248 984.548,227.294 985.117,228.625 985.685,229.93 986.253,228.789 986.822,227.909 987.39,226.065 987.959,227.533 988.527,224.871 989.095,225.381 989.664,224.605 990.232,226.259 990.8,226.683 991.369,224.207 991.937,227.062 992.505,228.638 993.074,227.942 993.642,221.997 994.21,223.763 994.779,226.429 995.347,225.966 995.915,225.608 996.484,224.036 997.052,222.733 997.62,225.563 998.189,228.258 998.757,226.661 999.325,224.945 999.894,226.89 1000.46,227.345 1001.03,228.88 1001.6,227.282 1002.17,228.987 1002.74,230.604 1003.3,232.826 1003.87,231.887 1004.44,232.224 1005.01,235.702 1005.58,234.545 1006.15,234.494 1006.71,234.396 1007.28,232.27 1007.85,233.539 1008.42,234.789 1008.99,234.674 1009.56,233.638 1010.12,231.713 1010.69,234.065 1011.26,234.08 1011.83,234.225 1012.4,234.351 1012.97,232.412 1013.53,231.449 1014.1,234.724 1014.67,235.521 1015.24,235.412 1015.81,236.453 1016.38,238.155 1016.94,238.782 1017.51,238.329 1018.08,240.056 1018.65,240.629 1019.22,240.149 1019.79,239.741 1020.35,239.156 1020.92,238.878 1021.49,239.515 1022.06,237.982 1022.63,239.744 1023.2,239.292 1023.76,238.97 1024.33,239.572 1024.9,237.105 1025.47,235.887 1026.04,235.783 1026.61,236.822 1027.17,236.636 1027.74,232.393 1028.31,232.466 1028.88,231.469 1029.45,232.629 1030.02,231.604 1030.58,232.8 1031.15,233.865 1031.72,232.511 1032.29,233.67 1032.86,234.476 1033.43,234.991 1033.99,234.921 1034.56,235.023 1035.13,233.766 1035.7,233.571 1036.27,233.384 1036.84,233.043 1037.4,232.015 1037.97,232.993 1038.54,231.941 1039.11,229.076 1039.68,230.415 1040.25,230.306 1040.81,231.404 1041.38,231.354 1041.95,231.527 1042.52,232.631 1043.09,231.565 1043.66,230.833 1044.22,229.775 1044.79,229.954 1045.36,232.149 1045.93,232.239 1046.5,231.136 1047.07,231.356 1047.63,230.6 1048.2,228.857 1048.77,230.237 1049.34,227.284 1049.91,228.748 1050.48,229.191 1051.05,229.535 1051.61,231.744 1052.18,231.804 1052.75,231.648 1053.32,229.845 1053.89,229.062 1054.46,230.43 1055.02,230.468 1055.59,233.05 1056.16,232.997 1056.73,233.075 1057.3,235.199 1057.87,234.095 1058.43,233.011 1059,233.085 1059.57,232.198 1060.14,233.081 1060.71,232.073 1061.28,230.173 1061.84,232.665 1062.41,231.664 1062.98,230.932 1063.55,231.109 1064.12,230.437 1064.69,232.892 1065.25,230.758 1065.82,230.047 1066.39,229.399 1066.96,230.735 1067.53,232.054 1068.1,233.192 1068.66,233.299 1069.23,235.441 1069.8,237.474 1070.37,238.166 1070.94,238.782 1071.51,238.374 1072.07,236.155 1072.64,236.046 1073.21,234.662 1073.78,236.514 1074.35,233.267 1074.92,233.4 1075.48,232.482 1076.05,230.534 1076.62,230.613 1077.19,230.483 1077.76,230.664 1078.33,229.882 1078.89,230.234 1079.46,229.403 1080.03,229.735 1080.6,230.193 1081.17,231.582 1081.74,235.03 1082.3,233.999 1082.87,235.185 1083.44,235.09 1084.01,234.056 1084.58,235.197 1085.15,235.095 1085.71,235.113 1086.28,235.008 1086.85,235.918 1087.42,236.804 1087.99,233.47 1088.56,234.425 1089.12,234.115 1089.69,233.952 1090.26,233.763 1090.83,232.619 1091.4,230.592 1091.97,231.88 1092.53,234.109 1093.1,235.116 1093.67,235.929 1094.24,236.704 1094.81,238.456 1095.38,238.061 1095.94,238.596 1096.51,237.449 1097.08,237.302 1097.65,236.99 1098.22,237.681 1098.79,235.511 1099.35,235.336 1099.92,235.995 1100.49,237.88 1101.06,238.487 1101.63,235.956 1102.2,236.558 1102.76,237.323 1103.33,237.779 1103.9,237.231 1104.47,238.918 1105.04,240.443 1105.61,238.904 1106.17,238.431 1106.74,235.833 1107.31,234.478 1107.88,235.048 1108.45,234.796 1109.02,234.508 1109.58,234.289 1110.15,236.164 1110.72,235.794 1111.29,234.238 1111.86,233.967 1112.43,234.786 1112.99,233.541 1113.56,234.207 1114.13,231.911 1114.7,230.723 1115.27,229.711 1115.84,228.633 1116.4,226.962 1116.97,228.099 1117.54,229.244 1118.11,230.43 1118.68,230.562 1119.25,229.566 1119.81,231.838 1120.38,230.639 1120.95,231.655 1121.52,231.771 1122.09,230.75 1122.66,230.9 1123.23,230.922 1123.79,227.846 1124.36,229.998 1124.93,230.111 1125.5,230.45 1126.07,228.338 1126.64,228.73 1127.2,228.852 1127.77,223.957 1128.34,224.608 1128.91,225.17 1129.48,225.915 1130.05,225.402 1130.61,226.012 1131.18,226.53 1131.75,226.834 1132.32,228.314 1132.89,228.692 1133.46,231.311 1134.02,235.523 1134.59,235.229 1135.16,235.275 1135.73,234.187 1136.3,236.246 1136.87,234.081 1137.43,232.056 1138,230.077 1138.57,230.333 1139.14,230.588 1139.71,231.955 1140.28,232.262 1140.84,231.251 1141.41,230.17 1141.98,229.631 1142.55,230.093 1143.12,231.508 1143.69,230.484 1144.25,230.631 1144.82,232.099 1145.39,231.228 1145.96,232.453 1146.53,233.637 1147.1,233.534 1147.66,236.694 1148.23,237.472 1148.8,237.059 1149.37,236.014 1149.94,236.93 1150.51,239.902 1151.07,239.196 1151.64,238.746 1152.21,237.616 1152.78,236.243 1153.35,236.042 1153.92,237.872 1154.48,236.331 1155.05,237.059 1155.62,237.85 1156.19,238.466 1156.76,239.159 1157.33,238.842 1157.89,238.647 1158.46,239.065 1159.03,236.597 1159.6,236.404 1160.17,235.148 1160.74,234.786 1161.3,234.622 1161.87,235.537 1162.44,235.181 1163.01,235.747 1163.58,236.464 1164.15,236.075 1164.71,233.96 1165.28,234.014 1165.85,233.775 1166.42,233.359 1166.99,233.317 1167.56,234.373 1168.12,234.23 1168.69,230.828 1169.26,229.848 1169.83,229.89 1170.4,230.894 1170.97,231.888 1171.53,229.918 1172.1,226.903 1172.67,227.338 1173.24,227.689 1173.81,228.152 1174.38,228.412 1174.94,228.982 1175.51,229.23 1176.08,233.452 1176.65,230.238 1177.22,229.353 1177.79,229.575 1178.35,231.745 1178.92,233.013 1179.49,234.876 1180.06,235.675 1180.63,234.462 1181.2,235.467 1181.76,236.293 1182.33,236.148 1182.9,235.825 1183.47,233.337 1184.04,234.357 1184.61,235.2 1185.17,236.017 1185.74,235.801 1186.31,235.508 1186.88,236.506 1187.45,237.249 1188.02,237.48 1188.58,236.248 1189.15,235.889 1189.72,234.628 1190.29,235.428 1190.86,233.126 1191.43,234.033 1192,233.929 1192.56,232.713 1193.13,232.777 1193.7,233.877 1194.27,235.95 1194.84,234.672 1195.41,235.632 1195.97,235.422 1196.54,235.214 1197.11,232.748 1197.68,233.742 1198.25,234.76 1198.82,233.402 1199.38,234.174 1199.95,235.186 1200.52,234.082 1201.09,233.93 1201.66,233.641 1202.23,232.457 1202.79,234.254 1203.36,235.178 1203.93,234.065 1204.5,232.898 1205.07,234.626 1205.64,234.418 1206.2,233.126 1206.77,233.206 1207.34,233.714 1207.91,231.468 1208.48,231.616 1209.05,232.54 1209.61,232.715 1210.18,233.602 1210.75,234.425 1211.32,234.159 1211.89,234.854 1212.46,232.641 1213.02,231.704 1213.59,231.443 1214.16,231.361 1214.73,229.337 1215.3,229.442 1215.87,228.539 1216.43,227.822 1217,228.091 1217.57,227.435 1218.14,230.969 1218.71,231.122 1219.28,231.224 1219.84,231.235 1220.41,228.253 1220.98,228.722 1221.55,229.094 1222.12,228.333 1222.69,229.525 1223.25,227.615 1223.82,229.065 1224.39,228.299 1224.96,228.7 1225.53,229.024 1226.1,230.165 1226.66,229.231 1227.23,231.505 1227.8,231.355 1228.37,231.536 1228.94,230.672 1229.51,232.014 1230.07,233.04 1230.64,235.27 1231.21,232.81 1231.78,232.807 1232.35,234.132 1232.92,232.862 1233.48,230.882 1234.05,236.086 1234.62,235.932 1235.19,235.668 1235.76,235.386 1236.33,236.243 1236.89,234.964 1237.46,235.915 1238.03,234.655 1238.6,235.574 1239.17,233.372 1239.74,234.357 1240.3,232.109 1240.87,233.216 1241.44,232.036 1242.01,231.101 1242.58,229.298 1243.15,231.55 1243.71,232.793 1244.28,233.9 1244.85,232.742 1245.42,232.824 1245.99,232.906 1246.56,232.997 1247.12,232.995 1247.69,232.897 1248.26,233.089 1248.83,231.136 1249.4,232.433 1249.97,232.577 1250.53,232.674 1251.1,232.485 1251.67,233.649 1252.24,233.628 1252.81,231.456 1253.38,230.389 1253.94,230.424 1254.51,231.565 1255.08,231.629 1255.65,230.796 1256.22,230.989 1256.79,231.046 1257.35,232.559 1257.92,233.565 1258.49,231.599 1259.06,231.694 1259.63,231.742 1260.2,232.797 1260.76,233.436 1261.33,234.437 1261.9,233.262 1262.47,232.161 1263.04,232.192 1263.61,233.364 1264.18,231.259 1264.74,231.313 1265.31,231.557 1265.88,229.476 1266.45,229.764 1267.02,227.85 1267.59,225.227 1268.15,224.888 1268.72,224.306 1269.29,225.09 1269.86,226.596 1270.43,229.087 1271,230.347 1271.56,230.772 1272.13,230.746 1272.7,229.079 1273.27,232.525 1273.84,233.762 1274.41,232.914 1274.97,234.13 1275.54,235.058 1276.11,235.888 1276.68,234.751 1277.25,235.826 1277.82,235.788 1278.38,235.601 1278.95,233.146 1279.52,233.191 1280.09,233.1 1280.66,232.134 1281.23,230.447 1281.79,231.907 1282.36,230.179 1282.93,230.581 1283.5,231.001 1284.07,231.111 1284.64,234.444 1285.2,236.462 1285.77,236.313 1286.34,236.25 1286.91,236.285 1287.48,235.088 1288.05,237.076 1288.61,236.57 1289.18,237.404 1289.75,236.196 1290.32,233.918 1290.89,235.703 1291.46,237.629 1292.02,236.219 1292.59,235.038 1293.16,235.103 1293.73,234.781 1294.3,234.72 1294.87,234.638 1295.43,234.541 1296,231.462 1296.57,231.554 1297.14,231.632 1297.71,233.875 1298.28,232.838 1298.84,233.958 1299.41,234.927 1299.98,232.845 1300.55,233.983 1301.12,231.818 1301.69,235.807 1302.25,236.748 1302.82,239.519 1303.39,238.189 1303.96,236.719 1304.53,235.407 1305.1,235.268 1305.66,235.907 1306.23,235.523 1306.8,235.119 1307.37,237.01 1307.94,233.67 1308.51,234.68 1309.07,235.432 1309.64,236.246 1310.21,235.81 1310.78,238.566 1311.35,239.111 1311.92,238.501 1312.48,238.255 1313.05,237.855 1313.62,237.48 1314.19,237.021 1314.76,235.498 1315.33,236.267 1315.89,234.738 1316.46,234.563 1317.03,234.315 1317.6,233.922 1318.17,234.626 1318.74,235.3 1319.3,233.895 1319.87,231.437 1320.44,232.474 1321.01,232.555 1321.58,232.361 1322.15,232.129 1322.71,233.144 1323.28,231.033 1323.85,230.106 1324.42,230.35 1324.99,230.62 1325.56,230.682 1326.12,230.88 1326.69,229.85 1327.26,231.113 1327.83,229.165 1328.4,228.62 1328.97,226.912 1329.53,227.028 1330.1,226.265 1330.67,226.844 1331.24,227.266 1331.81,228.474 1332.38,228.886 1332.94,229.116 1333.51,229.266 1334.08,230.551 1334.65,230.453 1335.22,229.577 1335.79,228.85 1336.36,229.169 1336.92,230.524 1337.49,230.762 1338.06,231.16 1338.63,231.307 1339.2,229.333 1339.77,229.555 1340.33,228.779 1340.9,227.97 1341.47,229.303 1342.04,226.458 1342.61,228.986 1343.18,231.398 1343.74,230.423 1344.31,230.835 1344.88,230.313 1345.45,230.397 1346.02,232.727 1346.59,233.972 1347.15,233.953 1347.72,234.001 1348.29,235.092 1348.86,234.016 1349.43,233.058 1350,234.946 1350.56,235.93 1351.13,236.787 1351.7,235.541 1352.27,235.397 1352.84,235.161 1353.41,236.049 1353.97,235.885 1354.54,236.909 1355.11,235.622 1355.68,236.442 1356.25,235.247 1356.82,236.248 1357.38,237.048 1357.95,236.84 1358.52,236.754 1359.09,237.32 1359.66,234.828 1360.23,234.8 1360.79,234.662 1361.36,234.35 1361.93,235.453 1362.5,234.046 1363.07,236.147 1363.64,234.741 1364.2,235.654 1364.77,233.214 1365.34,233.119 1365.91,235.076 1366.48,234.935 1367.05,233.844 1367.61,233.509 1368.18,230.418 1368.75,230.484 1369.32,230.694 1369.89,230.869 1370.46,230.792 1371.02,230.741 1371.59,230.79 1372.16,230.818 1372.73,231.105 1373.3,231.627 1373.87,231.749 1374.43,231.728 1375,230.787 1375.57,229.006 1376.14,231.396 1376.71,231.708 1377.28,230.771 1377.84,228.674 1378.41,228.135 1378.98,228.316 1379.55,226.621 1380.12,226.889 1380.69,227.291 1381.25,227.558 1381.82,228.975 1382.39,228.112 1382.96,228.331 1383.53,229.539 1384.1,229.623 1384.66,227.682 1385.23,229.09 1385.8,229.714 1386.37,230.239 1386.94,231.566 1387.51,232.936 1388.07,231.936 1388.64,229.014 1389.21,227.569 1389.78,227.09 1390.35,228.726 1390.92,229.915 1391.48,231.411 1392.05,231.667 1392.62,231.97 1393.19,233.058 1393.76,233.201 1394.33,232.324 1394.89,232.376 1395.46,233.586 1396.03,233.607 1396.6,233.588 1397.17,233.539 1397.74,232.751 1398.3,233.945 1398.87,233.358 1399.44,233.41 1400.01,234.305 1400.58,233.22 1401.15,234.443 1401.71,234.466 1402.28,233.446 1402.85,235.585 1403.42,235.62 1403.99,233.513 1404.56,231.372 1405.13,232.626 1405.69,231.657 1406.26,231.913 1406.83,231.875 1407.4,230.996 1407.97,232.098 1408.54,233.231 1409.1,233.583 1409.67,233.559 1410.24,233.65 1410.81,232.712 1411.38,232.677 1411.95,232.903 1412.51,233.814 1413.08,232.787 1413.65,231.822 1414.22,229.83 1414.79,229.274 1415.36,229.675 1415.92,229.952 1416.49,227.289 1417.06,228.095 1417.63,231.819 1418.2,230.352 1418.77,229.525 1419.33,227.968 1419.9,227.437 1420.47,228.761 1421.04,228.286 1421.61,229.813 1422.18,227.04 1422.74,229.635 1423.31,231.196 1423.88,231.499 1424.45,234.605 1425.02,235.727 1425.59,234.498 1426.15,234.567 1426.72,235.892 1427.29,234.648 1427.86,237.674 1428.43,238.54 1429,236.053 1429.56,236.166 1430.13,236.127 1430.7,237.01 1431.27,237.802 1431.84,238.591 1432.41,237.18 1432.97,237.939 1433.54,235.686 1434.11,235.374 1434.68,234.189 1435.25,235.383 1435.82,234.432 1436.38,232.638 1436.95,235.644 1437.52,235.424 1438.09,238.459 1438.66,238.226 1439.23,236.875 1439.79,235.542 1440.36,234.49 1440.93,231.254 1441.5,232.437 1442.07,231.382 1442.64,231.778 1443.2,231.779 1443.77,230.714 1444.34,230.85 1444.91,232.061 1445.48,232.059 1446.05,231.352 1446.61,232.713 1447.18,234.057 1447.75,232.041 1448.32,230.938 1448.89,232.072 1449.46,231.252 1450.02,232.555 1450.59,229.433 1451.16,233.725 1451.73,234.932 1452.3,235.89 1452.87,235.579 1453.43,234.575 1454,235.427 1454.57,236.352 1455.14,237.077 1455.71,236.986 1456.28,235.653 1456.84,234.407 1457.41,234.34 1457.98,235.349 1458.55,234.2 1459.12,234.201 1459.69,235.283 1460.25,232.109 1460.82,231.432 1461.39,231.71 1461.96,230.941 1462.53,232.144 1463.1,234.368 1463.66,235.116 1464.23,233.014 1464.8,236.186 1465.37,236.957 1465.94,237.734 1466.51,238.287 1467.07,240.093 1467.64,241.773 1468.21,241.188 1468.78,239.646 1469.35,238.351 1469.92,235.728 1470.48,234.472 1471.05,235.497 1471.62,235.437 1472.19,235.303 1472.76,233.053 1473.33,231.008 1473.89,229.974 1474.46,231.131 1475.03,233.486 1475.6,232.468 1476.17,231.576 1476.74,230.645 1477.31,228.692 1477.87,228.976 1478.44,229.3 1479.01,231.622 1479.58,232.928 1480.15,232.761 1480.72,231.813 1481.28,231.961 1481.85,235.018 1482.42,232.717 1482.99,232.61 1483.56,232.598 1484.13,232.719 1484.69,232.576 1485.26,234.488 1485.83,235.502 1486.4,234.32 1486.97,234.278 1487.54,234.142 1488.1,235.223 1488.67,234.253 1489.24,234.124 1489.81,236.312 1490.38,235.198 1490.95,234.203 1491.51,232.364 1492.08,232.471 1492.65,233.361 1493.22,234.434 1493.79,234.186 1494.36,235.139 1494.92,236.006 1495.49,235.766 1496.06,237.248 1496.63,235.862 1497.2,235.616 1497.77,237.376 1498.33,238.03 1498.9,238.736 1499.47,239.459 1500.04,239.916 1500.61,240.234 1501.18,241.518 1501.74,242.031 1502.31,241.298 1502.88,239.587 1503.45,239.933 1504.02,240.199 1504.59,240.732 1505.15,238.953 1505.72,239.37 1506.29,237.779 1506.86,237.258 1507.43,236.75 1508,238.26 1508.56,238.69 1509.13,237.914 1509.7,238.352 1510.27,236.845 1510.84,236.407 1511.41,235.965 1511.97,234.392 1512.54,231.101 1513.11,230.218 1513.68,230.146 1514.25,230.021 1514.82,230.971 1515.38,229.935 1515.95,228.875 1516.52,231.165 1517.09,232.17 1517.66,232.042 1518.23,230.911 1518.79,229.808 1519.36,229.749 1519.93,228.784 1520.5,231.199 1521.07,234.323 1521.64,234.209 1522.2,235.211 1522.77,233.936 1523.34,232.606 1523.91,231.707 1524.48,232.703 1525.05,230.605 1525.61,230.532 1526.18,230.524 1526.75,230.561 1527.32,228.763 1527.89,228.023 1528.46,227.211 1529.02,227.712 1529.59,228.873 1530.16,229.067 1530.73,229.101 1531.3,230.4 1531.87,231.661 1532.43,229.506 1533,229.625 1533.57,227.569 1534.14,225.883 1534.71,226.435 1535.28,225.788 1535.84,227.26 1536.41,224.405 1536.98,219.895 1537.55,220.722 1538.12,222.781 1538.69,222.593 1539.25,223.185 1539.82,225.729 1540.39,226.146 1540.96,225.617 1541.53,227.353 1542.1,227.75 1542.66,227.159 1543.23,228.714 1543.8,228.915 1544.37,230.274 1544.94,229.583 1545.51,229.821 1546.08,230.312 1546.64,229.342 1547.21,230.821 1547.78,232.03 1548.35,233.678 1548.92,234.759 1549.49,232.873 1550.05,231.963 1550.62,232.112 1551.19,233.384 1551.76,232.582 1552.33,231.791 1552.9,230.949 1553.46,230.187 1554.03,231.585 1554.6,235.779 1555.17,233.472 1555.74,232.313 1556.31,232.389 1556.87,231.709 1557.44,230.925 1558.01,232.134 1558.58,235.412 1559.15,236.368 1559.72,236.11 1560.28,234.996 1560.85,234.744 1561.42,233.675 1561.99,232.744 1562.56,232.78 1563.13,232.775 1563.69,231.914 1564.26,233.215 1564.83,233.271 1565.4,236.52 1565.97,237.303 1566.54,236.966 1567.1,238.635 1567.67,237.129 1568.24,234.787 1568.81,237.703 1569.38,237.295 1569.95,235.965 1570.51,233.674 1571.08,233.604 1571.65,232.695 1572.22,232.808 1572.79,231.678 1573.36,232.889 1573.92,231.878 1574.49,231.994 1575.06,230.137 1575.63,231.408 1576.2,231.472 1576.77,231.625 1577.33,230.949 1577.9,231.998 1578.47,234.939 1579.04,234.875 1579.61,233.379 1580.18,231.23 1580.74,231.442 1581.31,231.624 1581.88,232.683 1582.45,233.679 1583.02,235.597 1583.59,237.446 1584.15,237.273 1584.72,239.048 1585.29,237.605 1585.86,237.007 1586.43,237.815 1587,237.281 1587.56,236.083 1588.13,233.621 1588.7,232.522 1589.27,232.629 1589.84,232.659 1590.41,233.719 1590.97,234.628 1591.54,232.025 1592.11,229.625 1592.68,229.794 1593.25,230.023 1593.82,230.098 1594.38,230.291 1594.95,232.287 1595.52,234.526 1596.09,234.462 1596.66,235.245 1597.23,236.204 1597.79,236.038 1598.36,235.814 1598.93,237.553 1599.5,238.183 1600.07,236.933 1600.64,233.542 1601.2,233.565 1601.77,233.373 1602.34,235.266 1602.91,235.104 1603.48,234.939 1604.05,233.599 1604.61,233.416 1605.18,234.348 1605.75,234.146 1606.32,235.085 1606.89,233.709 1607.46,233.526 1608.02,234.449 1608.59,232.179 1609.16,231.153 1609.73,231.295 1610.3,228.433 1610.87,230.033 1611.43,231.005 1612,229.925 1612.57,227.983 1613.14,228.252 1613.71,226.554 1614.28,227.104 1614.84,227.592 1615.41,228.115 1615.98,228.522 1616.55,229.861 1617.12,229.338 1617.69,230.835 1618.26,231.127 1618.82,234.348 1619.39,234.115 1619.96,235.116 1620.53,235.927 1621.1,238.626 1621.67,239.127 1622.23,239.776 1622.8,238.244 1623.37,235.64 1623.94,236.367 1624.51,236.35 1625.08,237.097 1625.64,235.927 1626.21,237.751 1626.78,237.469 1627.35,237.197 1627.92,236.732 1628.49,236.366 1629.05,235.184 1629.62,235.939 1630.19,238.831 1630.76,238.414 1631.33,237.891 1631.9,237.569 1632.46,237.139 1633.03,233.628 1633.6,231.333 1634.17,230.368 1634.74,231.314 1635.31,232.102 1635.87,233.932 1636.44,233.894 1637.01,229.93 1637.58,231.198 1638.15,232.284 1638.72,232.366 1639.28,235.42 1639.85,235.11 1640.42,230.656 1640.99,230.849 1641.56,230.049 1642.13,230.311 1642.69,230.401 1643.26,231.428 1643.83,229.551 1644.4,229.794 1644.97,231.999 1645.54,234.193 1646.1,233.155 1646.67,232.92 1647.24,233.023 1647.81,232.23 1648.38,230.425 1648.95,229.509 1649.51,228.871 1650.08,229.17 1650.65,229.303 1651.22,229.639 1651.79,229.939 1652.36,229.07 1652.92,231.209 1653.49,231.238 1654.06,231.243 1654.63,230.44 1655.2,230.466 1655.77,231.546 1656.33,231.714 1656.9,230.592 1657.47,230.776 1658.04,229.801 1658.61,232.305 1659.18,231.209 1659.74,233.155 1660.31,231.952 1660.88,232.888 1661.45,232.824 1662.02,232.606 1662.59,232.666 1663.15,230.617 1663.72,230.983 1664.29,230.942 1664.86,231.287 1665.43,231.375 1666,232.288 1666.56,232.361 1667.13,229.504 1667.7,229.784 1668.27,231.968 1668.84,231.116 1669.41,229.356 1669.97,229.681 1670.54,228.752 1671.11,229.034 1671.68,227.347 1672.25,227.998 1672.82,228.491 1673.38,228.762 1673.95,229.301 1674.52,228.639 1675.09,231.215 1675.66,231.428 1676.23,230.636 1676.79,229.968 1677.36,229.371 1677.93,232.834 1678.5,232.902 1679.07,233.125 1679.64,233.174 1680.2,233.24 1680.77,234.174 1681.34,234.129 1681.91,235.018 1682.48,237.168 1683.05,238.948 1683.61,237.481 1684.18,238.215 1684.75,238.763 1685.32,237.243 1685.89,237.882 1686.46,238.533 1687.02,238.005 1687.59,236.534 1688.16,239.438 1688.73,238.976 1689.3,237.47 1689.87,237.214 1690.44,235.846 1691,238.645 1691.57,237.056 1692.14,236.777 1692.71,237.353 1693.28,238.134 1693.85,236.862 1694.41,236.409 1694.98,236.259 1695.55,235.88 1696.12,234.81 1696.69,233.502 1697.26,234.514 1697.82,233.156 1698.39,233.009 1698.96,230.799 1699.53,231.85 1700.1,232.923 1700.67,230.803 1701.23,229.903 1701.8,231.163 1702.37,231.293 1702.94,233.462 1703.51,234.326 1704.08,234.051 1704.64,233.051 1705.21,232.729 1705.78,232.659 1706.35,232.424 1706.92,232.277 1707.49,233.205 1708.05,233.307 1708.62,233.057 1709.19,231.901 1709.76,235.04 1710.33,234.831 1710.9,234.358 1711.46,232.235 1712.03,229.154 1712.6,232.455 1713.17,232.448 1713.74,231.314 1714.31,231.381 1714.87,234.467 1715.44,234.49 1716.01,235.374 1716.58,235.152 1717.15,234.065 1717.72,231.82 1718.28,229.678 1718.85,229.903 1719.42,230.111 1719.99,230.321 1720.56,231.422 1721.13,233.381 1721.69,232.247 1722.26,233.594 1722.83,232.55 1723.4,230.393 1723.97,229.669 1724.54,230.749 1725.1,230.92 1725.67,231.166 1726.24,230.129 1726.81,230.285 1727.38,227.456 1727.95,226.865 1728.51,228.357 1729.08,227.659 1729.65,226.93 1730.22,228.536 1730.79,229.019 1731.36,226.352 1731.92,227.845 1732.49,228.294 1733.06,228.64 1733.63,231.128 1734.2,232.357 1734.77,232.457 1735.33,235.586 1735.9,237.482 1736.47,239.129 1737.04,238.755 1737.61,238.336 1738.18,238.996 1738.74,238.687 1739.31,239.278 1739.88,239.996 1740.45,239.401 1741.02,241.09 1741.59,237.413 1742.15,234.905 1742.72,235.805 1743.29,234.485 1743.86,236.367 1744.43,237.806 1745,237.353 1745.56,237.828 1746.13,237.596 1746.7,236.112 1747.27,235.711 1747.84,235.366 1748.41,235.091 1748.97,235.84 1749.54,235.715 1750.11,235.604 1750.68,236.359 1751.25,236.136 1751.82,236.766 1752.38,235.489 1752.95,234.113 1753.52,233.005 1754.09,232.953 1754.66,233.832 1755.23,232.757 1755.79,230.875 1756.36,228.932 1756.93,230.997 1757.5,230.296 1758.07,230.536 1758.64,229.674 1759.21,227.888 1759.77,229.132 1760.34,229.361 1760.91,228.331 1761.48,227.498 1762.05,227.968 1762.62,228.163 1763.18,228.516 1763.75,227.695 1764.32,230.235 1764.89,229.355 1765.46,229.737 1766.03,229.747 1766.59,229.803 1767.16,230.147 1767.73,230.194 1768.3,232.513 1768.87,233.634 1769.44,234.735 1770,234.705 1770.57,234.421 1771.14,233.34 1771.71,232.44 1772.28,229.319 1772.85,229.68 1773.41,229.709 1773.98,230.868 1774.55,228.955 1775.12,229.28 1775.69,229.585 1776.26,228.776 1776.82,229.929 1777.39,233.071 1777.96,232.146 1778.53,233.346 1779.1,233.138 1779.67,232.233 1780.23,232.276 1780.8,230.503 1781.37,230.757 1781.94,231.058 1782.51,231.241 1783.08,231.377 1783.64,231.262 1784.21,231.209 1784.78,232.559 1785.35,233.398 1785.92,232.586 1786.49,231.59 1787.05,230.415 1787.62,229.736 1788.19,229.251 1788.76,229.757 1789.33,232.005 1789.9,232.261 1790.46,231.309 1791.03,228.393 1791.6,227.696 1792.17,225.919 1792.74,227.632 1793.31,229.032 1793.87,229.276 1794.44,230.751 1795.01,230.862 1795.58,231.171 1796.15,232.421 1796.72,231.558 1797.28,232.687 1797.85,234.706 1798.42,233.484 1798.99,234.467 1799.56,234.317 1800.13,234.444 1800.69,234.383 1801.26,233.137 1801.83,233.1 1802.4,233.171 1802.97,231.175 1803.54,230.454 1804.1,230.718 1804.67,231.953 1805.24,233.029 1805.81,232.962 1806.38,233.184 1806.95,230.09 1807.51,228.323 1808.08,226.838 1808.65,227.502 1809.22,228.165 1809.79,228.651 1810.36,228.019 1810.92,229.367 1811.49,228.892 1812.06,227.519 1812.63,228.031 1813.2,229.708 1813.77,230.207 1814.33,230.457 1814.9,231.726 1815.47,232.999 1816.04,234.226 1816.61,235.53 1817.18,234.617 1817.74,236.556 1818.31,237.272 1818.88,238.068 1819.45,237.892 1820.02,239.972 1820.59,237.441 1821.15,237.284 1821.72,233.92 1822.29,231.894 1822.86,231.196 1823.43,229.359 1824,228.797 1824.56,233.301 1825.13,236.409 1825.7,238.466 1826.27,240.21 1826.84,236.645 1827.41,236.483 1827.97,236.226 1828.54,235.113 1829.11,236.876 1829.68,238.859 1830.25,239.287 1830.82,238.827 1831.39,238.602 1831.95,237.46 1832.52,238.07 1833.09,236.727 1833.66,235.702 1834.23,236.488 1834.8,236.563 1835.36,236.265 1835.93,237.042 1836.5,236.681 1837.07,236.599 1837.64,237.185 1838.21,237.98 1838.77,238.746 1839.34,240.288 1839.91,240.891 1840.48,239.549 1841.05,239.018 1841.62,236.553 1842.18,235.182 1842.75,233.865 1843.32,234.694 1843.89,234.366 1844.46,232.071 1845.03,231.178 1845.59,229.346 1846.16,228.937 1846.73,228.286 1847.3,228.733 1847.87,228.267 1848.44,227.601 1849,226.997 1849.57,225.336 1850.14,227.105 1850.71,226.61 1851.28,228.222 1851.85,226.594 1852.41,229.049 1852.98,229.312 1853.55,229.487 1854.12,229.649 1854.69,230.924 1855.26,232.285 1855.82,231.514 1856.39,233.684 1856.96,232.518 1857.53,232.517 1858.1,229.441 1858.67,229.784 1859.23,228.951 1859.8,228.163 1860.37,228.635 1860.94,226.917 1861.51,227.646 1862.08,226.891 1862.64,225.392 1863.21,227.079 1863.78,227.516 1864.35,228.969 1864.92,229.288 1865.49,231.594 1866.05,233.959 1866.62,234.856 1867.19,234.721 1867.76,234.695 1868.33,233.751 1868.9,235.773 1869.46,236.809 1870.03,236.804 1870.6,237.723 1871.17,238.484 1871.74,237.381 1872.31,237.131 1872.87,235.887 1873.44,238.723 1874.01,238.398 1874.58,236.957 1875.15,237.803 1875.72,236.558 1876.28,236.192 1876.85,237.077 1877.42,239.984 1877.99,239.384 1878.56,239.904 1879.13,239.296 1879.69,238.964 1880.26,240.753 1880.83,239.381 1881.4,238.833 1881.97,237.34 1882.54,237.041 1883.1,235.753 1883.67,236.573 1884.24,236.422 1884.81,236.064 1885.38,235.922 1885.95,232.326 1886.51,232.316 1887.08,234.431 1887.65,233.198 1888.22,231.238 1888.79,231.385 1889.36,227.257 1889.92,229.556 1890.49,227.806 1891.06,229.154 1891.63,230.536 1892.2,230.64 1892.77,230.546 1893.33,232.841 1893.9,231.711 1894.47,230.755 1895.04,230.827 1895.61,231.868 1896.18,232.908 1896.74,234.783 1897.31,236.76 1897.88,237.476 1898.45,235.192 1899.02,234.902 1899.59,234.74 1900.16,233.685 1900.72,232.477 1901.29,232.461 1901.86,231.351 1902.43,234.479 1903,233.404 1903.57,230.165 1904.13,232.495 1904.7,231.758 1905.27,231.685 1905.84,232.831 1906.41,235.884 1906.98,236.778 1907.54,236.662 1908.11,237.187 1908.68,238.156 1909.25,236.684 1909.82,236.216 1910.39,235.863 1910.95,235.831 1911.52,236.471 1912.09,235.095 1912.66,236.873 1913.23,237.546 1913.8,235.315 1914.36,236.232 1914.93,237.705 1915.5,238.357 1916.07,237.866 1916.64,239.526 1917.21,239.866 1917.77,240.165 1918.34,239.318 1918.91,236.774 1919.48,237.325 1920.05,238.886 1920.62,237.348 1921.18,235.978 1921.75,233.606 1922.32,233.577 1922.89,232.307 1923.46,236.382 1924.03,237.82 1924.59,237.279 1925.16,239.805 1925.73,240.259 1926.3,239.532 1926.87,237.706 1927.44,238.032 1928,238.498 1928.57,237.77 1929.14,235.155 1929.71,233.679 1930.28,231.151 1930.85,228.943 1931.41,229.277 1931.98,229.316 1932.55,227.142 1933.12,225.078 1933.69,224.376 1934.26,223.714 1934.82,225.156 1935.39,225.43 1935.96,226.947 1936.53,225.285 1937.1,224.658 1937.67,226.104 1938.23,224.43 1938.8,225.004 1939.37,226.685 1939.94,225.911 1940.51,225.313 1941.08,224.917 1941.64,223.527 1942.21,224.148 1942.78,225.839 1943.35,227.425 1943.92,229.866 1944.49,230.122 1945.05,231.402 1945.62,230.651 1946.19,228.903 1946.76,228.19 1947.33,230.804 1947.9,233.008 1948.46,232.792 1949.03,233.708 1949.6,234.852 1950.17,234.706 1950.74,233.538 1951.31,232.629 1951.87,231.629 1952.44,229.843 1953.01,232.172 1953.58,234.184 1954.15,232.04 1954.72,231.122 1955.28,231.24 1955.85,231.203 1956.42,230.144 1956.99,229.429 1957.56,229.774 1958.13,231.08 1958.69,228.171 1959.26,226.587 1959.83,228.247 1960.4,229.628 1960.97,231.895 1961.54,230.037 1962.1,228.548 1962.67,226.943 1963.24,226.551 1963.81,227.986 1964.38,229.303 1964.95,229.412 1965.51,229.69 1966.08,231.074 1966.65,230.199 1967.22,230.502 1967.79,234.029 1968.36,233.044 1968.92,235.498 1969.49,235.356 1970.06,236.407 1970.63,235.215 1971.2,233.168 1971.77,234.327 1972.34,234.422 1972.9,235.271 1973.47,236.199 1974.04,235.878 1974.61,234.695 1975.18,234.702 1975.75,233.589 1976.31,233.413 1976.88,232.392 1977.45,230.367 1978.02,230.592 1978.59,231.806 1979.16,232.886 1979.72,232.785 1980.29,233.883 1980.86,236.16 1981.43,235.896 1982,234.714 1982.57,236.741 1983.13,236.404 1983.7,236.1 1984.27,235.933 1984.84,236.882 1985.41,236.573 1985.98,237.181 1986.54,235.883 1987.11,235.812 1987.68,235.671 1988.25,233.335 1988.82,234.334 1989.39,234.205 1989.95,233.883 1990.52,233.825 1991.09,234.996 1991.66,236.007 1992.23,235.609 1992.8,234.481 1993.36,232.406 1993.93,231.409 1994.5,231.543 1995.07,230.539 1995.64,231.677 1996.21,231.843 1996.77,232.808 1997.34,232.898 1997.91,232.752 1998.48,235.676 1999.05,235.27 1999.62,234.165 2000.18,233.095 2000.75,231.904 2001.32,229.504 2001.89,228.834 2002.46,232.094 2003.03,232.182 2003.59,232.238 2004.16,231.385 2004.73,231.308 2005.3,234.426 2005.87,233.379 2006.44,234.061 2007,232.974 2007.57,230.971 2008.14,233.106 2008.71,231.998 2009.28,232.228 2009.85,231.939 2010.41,234.13 2010.98,235.269 2011.55,236.156 2012.12,237.043 2012.69,237.844 2013.26,238.363 2013.82,236.957 2014.39,239.729 2014.96,239.155 2015.53,239.451 2016.1,239.099 2016.67,236.356 2017.23,236.235 2017.8,237.045 2018.37,237.742 2018.94,236.301 2019.51,236.904 2020.08,236.601 2020.64,237.332 2021.21,235.828 2021.78,234.659 2022.35,234.3 2022.92,233.126 2023.49,232.971 2024.05,233.22 2024.62,234.222 2025.19,233.054 2025.76,233.852 2026.33,230.338 2026.9,230.485 2027.46,230.453 2028.03,231.733 2028.6,230.648 2029.17,230.846 2029.74,231.074 2030.31,232.179 2030.87,230.771 2031.44,232.939 2032.01,233.125 2032.58,232.006 2033.15,230.997 2033.72,231 2034.28,231.076 2034.85,228.124 2035.42,230.445 2035.99,229.524 2036.56,230.803 2037.13,232.818 2037.69,231.718 2038.26,231.712 2038.83,229.972 2039.4,230.253 2039.97,231.341 2040.54,231.341 2041.11,232.568 2041.67,232.794 2042.24,231.682 2042.81,232.706 2043.38,233.78 2043.95,234.478 2044.52,233.179 2045.08,233.02 2045.65,235.077 2046.22,234.839 2046.79,235.723 2047.36,237.462 2047.93,234.832 2048.49,234.524 2049.06,233.329 2049.63,232.141 2050.2,231.999 2050.77,231.982 2051.34,231.192 2051.9,230.235 2052.47,229.494 2053.04,229.697 2053.61,230.059 2054.18,229.115 2054.75,229.377 2055.31,228.372 2055.88,226.731 2056.45,225.211 2057.02,226.794 2057.59,228.253 2058.16,230.531 2058.72,230.759 2059.29,231.538 2059.86,230.517 2060.43,229.837 2061,230.058 2061.57,232.147 2062.13,233.285 2062.7,232.098 2063.27,231.003 2063.84,230.117 2064.41,229.21 2064.98,231.382 2065.54,230.556 2066.11,230.772 2066.68,231.878 2067.25,230.776 2067.82,231.02 2068.39,230.16 2068.95,231.606 2069.52,230.501 2070.09,229.728 2070.66,230.966 2071.23,231.221 2071.8,231.57 2072.36,230.618 2072.93,230.848 2073.5,229.942 2074.07,229.161 2074.64,229.609 2075.21,230.005 2075.77,230.296 2076.34,231.368 2076.91,229.546 2077.48,232.123 2078.05,231.415 2078.62,231.555 2079.18,231.708 2079.75,231.857 2080.32,232.958 2080.89,232.006 2081.46,232.144 2082.03,230.288 2082.59,231.752 2083.16,235.103 2083.73,233.07 2084.3,232.24 2084.87,232.565 2085.44,232.558 2086,230.645 2086.57,231.017 2087.14,232.144 2087.71,231.042 2088.28,232.216 2088.85,232.351 2089.41,234.625 2089.98,235.456 2090.55,235.234 2091.12,235.04 2091.69,235.001 2092.26,234.728 2092.82,237.673 2093.39,238.676 2093.96,239.421 2094.53,238.144 2095.1,235.889 2095.67,234.839 2096.23,235.747 2096.8,233.656 2097.37,235.585 2097.94,236.662 2098.51,235.484 2099.08,236.326 2099.64,236.12 2100.21,234.847 2100.78,235.741 2101.35,234.692 2101.92,234.549 2102.49,235.55 2103.05,235.269 2103.62,237.116 2104.19,238.777 2104.76,236.188 2105.33,233.899 2105.9,236.973 2106.46,236.836 2107.03,235.551 2107.6,235.456 2108.17,235.032 2108.74,233.853 2109.31,233.684 2109.87,234.47 2110.44,235.385 2111.01,233.264 2111.58,231.15 2112.15,230.229 2112.72,230.408 2113.29,228.454 2113.85,228.608 2114.42,230.803 2114.99,230.881 2115.56,231.979 2116.13,230.988 2116.7,232.262 2117.26,233.155 2117.83,231.972 2118.4,231.392 2118.97,231.364 2119.54,233.663 2120.11,234.529 2120.67,233.431 2121.24,231.503 2121.81,231.612 2122.38,230.84 2122.95,230.958 2123.52,231.139 2124.08,232.209 2124.65,232.26 2125.22,232.253 2125.79,232.296 2126.36,233.47 2126.93,233.77 2127.49,233.651 2128.06,233.799 2128.63,229.482 2129.2,231.696 2129.77,231.81 2130.34,233.898 2130.9,237.053 2131.47,236.877 2132.04,237.827 2132.61,236.542 2133.18,238.159 2133.75,238.032 2134.31,239.89 2134.88,239.339 2135.45,239.018 2136.02,237.555 2136.59,238.049 2137.16,236.591 2137.72,235.169 2138.29,233.795 2138.86,231.603 2139.43,226.867 2140,225.443 2140.57,225.857 2141.13,226.155 2141.7,227.455 2142.27,228.782 2142.84,229.886 2143.41,231.117 2143.98,231.195 2144.54,231.532 2145.11,231.502 2145.68,230.566 2146.25,231.998 2146.82,230.935 2147.39,233.283 2147.95,234.25 2148.52,234.068 2149.09,234.007 2149.66,234.007 2150.23,234.04 2150.8,232.038 2151.36,233.162 2151.93,234.036 2152.5,234.951 2153.07,232.927 2153.64,231.785 2154.21,231.787 2154.77,231.997 2155.34,232.046 2155.91,233.214 2156.48,231.052 2157.05,231.215 2157.62,230.478 2158.18,230.537 2158.75,230.871 2159.32,230.014 2159.89,228.148 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ¬± 0.025\n  with uncertainty of ¬± 0.0022652781895503384\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01898 ¬± (0.00317286, 0.00322434) (MC)\n  95% confidence interval: [-4.02513, -4.0126]) (MC)\n  linear error propagation: -4.01964 ¬± 0.00330754\n  |Œ¥_y| = |0.00245526| (‚â§ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018984342166345, val_l = 0.0061431812730647906, val_u = 0.006381273586537617)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip780\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip781\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip782\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.31 2211.02,1143.31 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,967.854 2211.02,967.854 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,792.395 2211.02,792.395 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,616.936 2211.02,616.936 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,441.477 2211.02,441.477 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,266.018 2211.02,266.018 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.31 365.751,1143.31 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,967.854 365.751,967.854 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,792.395 365.751,792.395 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,616.936 365.751,616.936 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,441.477 365.751,441.477 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,266.018 365.751,266.018 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M298.909 1129.11 Q295.298 1129.11 293.469 1132.68 Q291.664 1136.22 291.664 1143.35 Q291.664 1150.45 293.469 1154.02 Q295.298 1157.56 298.909 1157.56 Q302.543 1157.56 304.349 1154.02 Q306.177 1150.45 306.177 1143.35 Q306.177 1136.22 304.349 1132.68 Q302.543 1129.11 298.909 1129.11 M298.909 1125.41 Q304.719 1125.41 307.775 1130.01 Q310.853 1134.6 310.853 1143.35 Q310.853 1152.07 307.775 1156.68 Q304.719 1161.26 298.909 1161.26 Q293.099 1161.26 290.02 1156.68 Q286.964 1152.07 286.964 1143.35 Q286.964 1134.6 290.02 1130.01 Q293.099 1125.41 298.909 1125.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M259.557 981.199 L267.196 981.199 L267.196 954.833 L258.886 956.5 L258.886 952.24 L267.15 950.574 L271.826 950.574 L271.826 981.199 L279.465 981.199 L279.465 985.134 L259.557 985.134 L259.557 981.199 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 953.652 Q295.298 953.652 293.469 957.217 Q291.664 960.759 291.664 967.888 Q291.664 974.995 293.469 978.56 Q295.298 982.101 298.909 982.101 Q302.543 982.101 304.349 978.56 Q306.177 974.995 306.177 967.888 Q306.177 960.759 304.349 957.217 Q302.543 953.652 298.909 953.652 M298.909 949.949 Q304.719 949.949 307.775 954.555 Q310.853 959.139 310.853 967.888 Q310.853 976.615 307.775 981.222 Q304.719 985.805 298.909 985.805 Q293.099 985.805 290.02 981.222 Q286.964 976.615 286.964 967.888 Q286.964 959.139 290.02 954.555 Q293.099 949.949 298.909 949.949 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M262.775 805.74 L279.094 805.74 L279.094 809.675 L257.15 809.675 L257.15 805.74 Q259.812 802.985 264.395 798.355 Q269.002 793.703 270.182 792.36 Q272.428 789.837 273.307 788.101 Q274.21 786.342 274.21 784.652 Q274.21 781.897 272.266 780.161 Q270.344 778.425 267.242 778.425 Q265.043 778.425 262.59 779.189 Q260.159 779.953 257.381 781.504 L257.381 776.781 Q260.205 775.647 262.659 775.069 Q265.113 774.49 267.15 774.49 Q272.52 774.49 275.715 777.175 Q278.909 779.86 278.909 784.351 Q278.909 786.48 278.099 788.402 Q277.312 790.3 275.205 792.892 Q274.627 793.564 271.525 796.781 Q268.423 799.976 262.775 805.74 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 778.194 Q295.298 778.194 293.469 781.758 Q291.664 785.3 291.664 792.43 Q291.664 799.536 293.469 803.101 Q295.298 806.642 298.909 806.642 Q302.543 806.642 304.349 803.101 Q306.177 799.536 306.177 792.43 Q306.177 785.3 304.349 781.758 Q302.543 778.194 298.909 778.194 M298.909 774.49 Q304.719 774.49 307.775 779.096 Q310.853 783.68 310.853 792.43 Q310.853 801.156 307.775 805.763 Q304.719 810.346 298.909 810.346 Q293.099 810.346 290.02 805.763 Q286.964 801.156 286.964 792.43 Q286.964 783.68 290.02 779.096 Q293.099 774.49 298.909 774.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M272.914 615.582 Q276.27 616.299 278.145 618.568 Q280.043 620.836 280.043 624.17 Q280.043 629.285 276.525 632.086 Q273.006 634.887 266.525 634.887 Q264.349 634.887 262.034 634.447 Q259.742 634.031 257.289 633.174 L257.289 628.66 Q259.233 629.795 261.548 630.373 Q263.863 630.952 266.386 630.952 Q270.784 630.952 273.076 629.216 Q275.39 627.48 275.39 624.17 Q275.39 621.114 273.238 619.401 Q271.108 617.665 267.289 617.665 L263.261 617.665 L263.261 613.822 L267.474 613.822 Q270.923 613.822 272.752 612.457 Q274.58 611.068 274.58 608.475 Q274.58 605.813 272.682 604.401 Q270.807 602.966 267.289 602.966 Q265.367 602.966 263.168 603.383 Q260.969 603.799 258.33 604.679 L258.33 600.512 Q260.992 599.772 263.307 599.401 Q265.645 599.031 267.705 599.031 Q273.029 599.031 276.131 601.461 Q279.233 603.869 279.233 607.989 Q279.233 610.86 277.59 612.85 Q275.946 614.818 272.914 615.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 602.735 Q295.298 602.735 293.469 606.299 Q291.664 609.841 291.664 616.971 Q291.664 624.077 293.469 627.642 Q295.298 631.183 298.909 631.183 Q302.543 631.183 304.349 627.642 Q306.177 624.077 306.177 616.971 Q306.177 609.841 304.349 606.299 Q302.543 602.735 298.909 602.735 M298.909 599.031 Q304.719 599.031 307.775 603.637 Q310.853 608.221 310.853 616.971 Q310.853 625.697 307.775 630.304 Q304.719 634.887 298.909 634.887 Q293.099 634.887 290.02 630.304 Q286.964 625.697 286.964 616.971 Q286.964 608.221 290.02 603.637 Q293.099 599.031 298.909 599.031 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M271.594 428.271 L259.789 446.72 L271.594 446.72 L271.594 428.271 M270.367 424.197 L276.247 424.197 L276.247 446.72 L281.177 446.72 L281.177 450.609 L276.247 450.609 L276.247 458.757 L271.594 458.757 L271.594 450.609 L255.992 450.609 L255.992 446.095 L270.367 424.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 427.276 Q295.298 427.276 293.469 430.84 Q291.664 434.382 291.664 441.512 Q291.664 448.618 293.469 452.183 Q295.298 455.725 298.909 455.725 Q302.543 455.725 304.349 452.183 Q306.177 448.618 306.177 441.512 Q306.177 434.382 304.349 430.84 Q302.543 427.276 298.909 427.276 M298.909 423.572 Q304.719 423.572 307.775 428.178 Q310.853 432.762 310.853 441.512 Q310.853 450.238 307.775 454.845 Q304.719 459.428 298.909 459.428 Q293.099 459.428 290.02 454.845 Q286.964 450.238 286.964 441.512 Q286.964 432.762 290.02 428.178 Q293.099 423.572 298.909 423.572 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M258.793 248.738 L277.15 248.738 L277.15 252.673 L263.076 252.673 L263.076 261.145 Q264.094 260.798 265.113 260.636 Q266.131 260.451 267.15 260.451 Q272.937 260.451 276.316 263.622 Q279.696 266.793 279.696 272.21 Q279.696 277.789 276.224 280.891 Q272.752 283.969 266.432 283.969 Q264.256 283.969 261.988 283.599 Q259.742 283.229 257.335 282.488 L257.335 277.789 Q259.418 278.923 261.641 279.479 Q263.863 280.034 266.34 280.034 Q270.344 280.034 272.682 277.928 Q275.02 275.821 275.02 272.21 Q275.02 268.599 272.682 266.492 Q270.344 264.386 266.34 264.386 Q264.465 264.386 262.59 264.803 Q260.738 265.219 258.793 266.099 L258.793 248.738 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 251.817 Q295.298 251.817 293.469 255.381 Q291.664 258.923 291.664 266.053 Q291.664 273.159 293.469 276.724 Q295.298 280.266 298.909 280.266 Q302.543 280.266 304.349 276.724 Q306.177 273.159 306.177 266.053 Q306.177 258.923 304.349 255.381 Q302.543 251.817 298.909 251.817 M298.909 248.113 Q304.719 248.113 307.775 252.719 Q310.853 257.303 310.853 266.053 Q310.853 274.779 307.775 279.386 Q304.719 283.969 298.909 283.969 Q293.099 283.969 290.02 279.386 Q286.964 274.779 286.964 266.053 Q286.964 257.303 290.02 252.719 Q293.099 248.113 298.909 248.113 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1014.03 400.199,1030.77 400.786,914.546 401.372,929.604 401.958,824.097 402.545,729.406 403.131,646.752 403.718,565.49 404.304,489.497 404.891,423.926 405.477,366.305 406.063,312.317 406.65,427.585 407.236,446.468 407.823,462.3 408.409,412.755 408.995,369.546 409.582,387.926 410.168,351.473 410.755,318.118 411.341,288.678 411.927,263.007 412.514,239.841 413.1,219.895 413.687,241.636 414.273,227.385 414.86,279.513 415.446,326.658 416.032,312.439 416.619,300.536 417.205,316.532 417.792,331.506 418.378,324.073 418.964,319.373 419.551,355.062 420.137,351.81 420.724,347.899 421.31,381.995 421.896,381.721 422.483,381.948 423.069,383.562 423.656,399.106 424.242,415.659 424.829,431.169 425.415,457.881 426.001,461.747 426.588,498.113 427.174,502.436 427.761,506.391 428.347,511.881 428.933,526.324 429.52,541.281 430.106,554.494 430.693,583.614 431.279,604.491 431.865,610.153 432.452,623.006 433.038,642.185 433.625,648.326 434.211,672.437 434.798,694.3 435.384,699.726 435.97,711.206 436.557,722.74 437.143,728.841 437.73,740.393 438.316,747.206 438.902,757.847 439.489,764.524 440.075,775.823 440.662,790.812 441.248,805.536 441.835,816.13 442.421,826.346 443.007,844.301 443.594,854.175 444.18,866.82 444.767,879.451 445.353,885.261 445.939,906.875 446.526,911.834 447.112,922.956 447.699,931.154 448.285,941.991 448.871,946.871 449.458,951.922 450.044,961.787 450.631,969.226 451.217,979.186 451.804,986.469 452.39,990.994 452.976,998.056 453.563,1005.2 454.149,1014.09 454.736,1020.44 455.322,1029.06 455.908,1035.64 456.495,1041.47 457.081,1046.85 457.668,1052.91 458.254,1060.89 458.84,1069.04 459.427,1079.11 460.013,1082.3 460.6,1084.98 461.186,1092.41 461.773,1099.39 462.359,1104.26 462.945,1106.53 463.532,1110.8 464.118,1113.07 464.705,1115.6 465.291,1118.26 465.877,1127.83 466.464,1135.48 467.05,1141.46 467.637,1144.96 468.223,1150.24 468.809,1153.73 469.396,1159.09 469.982,1164 470.569,1168.98 471.155,1175.27 471.742,1176.12 472.328,1176.73 472.914,1177.29 473.501,1180.07 474.087,1184.27 474.674,1184.97 475.26,1187.53 475.846,1186.52 476.433,1188.82 477.019,1188.09 477.606,1187.38 478.192,1188.24 478.778,1192.2 479.365,1191.58 479.951,1192.91 480.538,1193.63 481.124,1194.35 481.711,1195.39 482.297,1198.08 482.883,1202.18 483.47,1206.07 484.056,1208.23 484.643,1211.61 485.229,1214.77 485.815,1216.57 486.402,1216.89 486.988,1217.1 487.575,1221.98 488.161,1223.54 488.748,1223.14 489.334,1224.71 489.92,1222.84 490.507,1222.73 491.093,1227.33 491.68,1228.66 492.266,1230.17 492.852,1229.74 493.439,1229.59 494.025,1229.26 494.612,1228.95 495.198,1230.33 495.784,1231.82 496.371,1231.3 496.957,1230.96 497.544,1233.54 498.13,1232.66 498.717,1232.5 499.303,1236.77 499.889,1238.01 500.476,1237.53 501.062,1243.08 501.649,1243.62 502.235,1236.7 502.821,1236.03 503.408,1234.2 503.994,1236.9 504.581,1238.04 505.167,1237.72 505.753,1241.84 506.34,1239.44 506.926,1238.88 507.513,1238.38 508.099,1239.48 508.686,1240.34 509.272,1240.9 509.858,1244.65 510.445,1245.38 511.031,1244.7 511.618,1246.6 512.204,1245.23 512.79,1246.09 513.377,1243.7 513.963,1241.61 514.55,1242.71 515.136,1240.77 515.722,1241.63 516.309,1240.93 516.895,1243.2 517.482,1243.81 518.068,1246.05 518.655,1245.28 519.241,1244.59 519.827,1243.7 520.414,1244.7 521,1243.88 521.587,1241.59 522.173,1241.03 522.759,1243.36 523.346,1244.54 523.932,1241.13 524.519,1243.55 525.105,1243.33 525.691,1242.87 526.278,1242.33 526.864,1240.57 527.451,1240.19 528.037,1242.71 528.624,1242.26 529.21,1241.58 529.796,1241.43 530.383,1240.97 530.969,1241.78 531.556,1246.93 532.142,1247.55 532.728,1246.68 533.315,1246.17 533.901,1242.45 534.488,1244.93 535.074,1247.36 535.661,1246.86 536.247,1246.12 536.833,1245.44 537.42,1245.29 538.006,1247.4 538.593,1246.49 539.179,1247.26 539.765,1248.14 540.352,1248.78 540.938,1248.04 541.525,1248.77 542.111,1250.53 542.697,1248.02 543.284,1247.25 543.87,1244.81 544.457,1244.45 545.043,1242.58 545.63,1240.33 546.216,1244.27 546.802,1241.86 547.389,1244.37 547.975,1243.77 548.562,1246.08 549.148,1243.8 549.734,1244.43 550.321,1243.65 550.907,1244.23 551.494,1246.28 552.08,1246.82 552.666,1247.49 553.253,1246.59 553.839,1244.36 554.426,1243.78 555.012,1244.56 555.599,1243.91 556.185,1244.75 556.771,1240.99 557.358,1241.84 557.944,1244.02 558.531,1243.16 559.117,1240.87 559.703,1242.25 560.29,1243.01 560.876,1243.75 561.463,1241.73 562.049,1241.22 562.635,1240.78 563.222,1241.63 563.808,1239.79 564.395,1237.9 564.981,1236.25 565.568,1235.73 566.154,1236.6 566.74,1234.91 567.327,1234.69 567.913,1232.95 568.5,1232.69 569.086,1232.11 569.672,1234.8 570.259,1233.31 570.845,1231.73 571.432,1233.23 572.018,1233.02 572.605,1229.6 573.191,1227.94 573.777,1227.79 574.364,1230.71 574.95,1232.13 575.537,1231.88 576.123,1231.45 576.709,1231 577.296,1231.19 577.882,1235.45 578.469,1235.07 579.055,1234.44 579.641,1234.11 580.228,1230.89 580.814,1232.36 581.401,1233.29 581.987,1234.37 582.574,1232.54 583.16,1233.65 583.746,1236.26 584.333,1235.76 584.919,1233.75 585.506,1234.79 586.092,1235.97 586.678,1232.79 587.265,1233.89 587.851,1233.54 588.438,1233.31 589.024,1234.12 589.61,1232.26 590.197,1233.72 590.783,1230.42 591.37,1228.75 591.956,1229.89 592.543,1234.11 593.129,1230.71 593.715,1231.83 594.302,1233.14 594.888,1232.81 595.475,1233.77 596.061,1233.46 596.647,1233.34 597.234,1230.13 597.82,1232.73 598.407,1233.32 598.993,1234.47 599.579,1235.38 600.166,1236.37 600.752,1235.81 601.339,1235.37 601.925,1234.86 602.512,1234.48 603.098,1230.92 603.684,1229.36 604.271,1230.46 604.857,1230.39 605.444,1231.53 606.03,1233.94 606.616,1233.81 607.203,1231.97 607.789,1231.33 608.376,1234.03 608.962,1232.07 609.548,1234.58 610.135,1235.53 610.721,1236.21 611.308,1235.65 611.894,1236.44 612.481,1235.51 613.067,1235.01 613.653,1234.29 614.24,1233.76 614.826,1234.69 615.413,1235.17 615.999,1234.43 616.585,1233.63 617.172,1231.7 617.758,1234.24 618.345,1232.22 618.931,1232.98 619.518,1231.27 620.104,1230.89 620.69,1229.15 621.277,1228.77 621.863,1232.72 622.45,1231.94 623.036,1235.45 623.622,1234.73 624.209,1234.32 624.795,1233.76 625.382,1234.56 625.968,1231.44 626.554,1230.97 627.141,1229.14 627.727,1224.79 628.314,1223.22 628.9,1225.87 629.487,1227.15 630.073,1231.21 630.659,1226.13 631.246,1230.17 631.832,1229.63 632.419,1230.71 633.005,1230.24 633.591,1229.8 634.178,1232.14 634.764,1228.76 635.351,1229.75 635.937,1230.65 636.523,1230.07 637.11,1228.34 637.696,1226.91 638.283,1225.23 638.869,1227.76 639.456,1227.76 640.042,1227.41 640.628,1226.96 641.215,1228.36 641.801,1228.11 642.388,1227.69 642.974,1226.04 643.56,1227.44 644.147,1224.17 644.733,1222.9 645.32,1218.64 645.906,1215.81 646.492,1217.77 647.079,1219.58 647.665,1219.53 648.252,1219.7 648.838,1222.62 649.425,1225.44 650.011,1228 650.597,1226.26 651.184,1227.51 651.77,1227.53 652.357,1227.25 652.943,1227.04 653.529,1226.78 654.116,1225.13 654.702,1223.54 655.289,1222.24 655.875,1223.99 656.462,1221.17 657.048,1222.43 657.634,1222.43 658.221,1223.6 658.807,1222.23 659.394,1222.31 659.98,1223.94 660.566,1220.78 661.153,1222.21 661.739,1221.94 662.326,1223.28 662.912,1222.97 663.498,1222.84 664.085,1221.45 664.671,1221.39 665.258,1218.64 665.844,1217.54 666.431,1217.62 667.017,1217.75 667.603,1220.78 668.19,1219.21 668.776,1218.05 669.363,1218.43 669.949,1221.55 670.535,1221.16 671.122,1220.79 671.708,1220.91 672.295,1222.37 672.881,1223.75 673.467,1223.86 674.054,1225.33 674.64,1226.44 675.227,1224.75 675.813,1219.9 676.4,1218.14 676.986,1218.47 677.572,1215.82 678.159,1217.72 678.745,1218.12 679.332,1218.55 679.918,1220.1 680.504,1220.21 681.091,1220.3 681.677,1225.76 682.264,1225.41 682.85,1228.1 683.436,1229.47 684.023,1229.07 684.609,1228.73 685.196,1229.7 685.782,1229.25 686.369,1231.65 686.955,1229.79 687.541,1227.99 688.128,1227.57 688.714,1228.57 689.301,1228.08 689.887,1230.31 690.473,1227.89 691.06,1230.47 691.646,1229.84 692.233,1229.2 692.819,1228.55 693.405,1228.01 693.992,1232.04 694.578,1227.36 695.165,1229.7 695.751,1230.7 696.338,1228.4 696.924,1226.51 697.51,1223.04 698.097,1226.27 698.683,1225.82 699.27,1221.24 699.856,1219.62 700.442,1221.16 701.029,1220.89 701.615,1220.81 702.202,1217.75 702.788,1218.1 703.375,1219.5 703.961,1218.15 704.547,1218.19 705.134,1218.08 705.72,1216.67 706.307,1219.62 706.893,1219.39 707.479,1220.68 708.066,1222.17 708.652,1220.63 709.239,1220.62 709.825,1223.1 710.411,1227.26 710.998,1226.77 711.584,1227.98 712.171,1226.22 712.757,1225.9 713.344,1225.4 713.93,1226.23 714.516,1226.03 715.103,1225.87 715.689,1226.93 716.276,1225.22 716.862,1226.14 717.448,1224.47 718.035,1222.9 718.621,1222.4 719.208,1219.11 719.794,1220.71 720.38,1217.99 720.967,1218.14 721.553,1221.02 722.14,1219.58 722.726,1218.28 723.313,1217.11 723.899,1218.44 724.485,1219.59 725.072,1221.06 725.658,1219.48 726.245,1217.86 726.831,1217.98 727.417,1216.45 728.004,1213.69 728.59,1215.38 729.177,1215.74 729.763,1220.13 730.349,1218.57 730.936,1215.69 731.522,1214.33 732.109,1215.65 732.695,1217.13 733.282,1218.81 733.868,1214.51 734.454,1214.58 735.041,1219.05 735.627,1211.63 736.214,1212.04 736.8,1215.33 737.386,1217.09 737.973,1217 738.559,1215.45 739.146,1217.1 739.732,1218.77 740.318,1218.54 740.905,1217.26 741.491,1217.46 742.078,1216.12 742.664,1220.73 743.251,1220.43 743.837,1224.87 744.423,1218.89 745.01,1220.4 745.596,1218.47 746.183,1215.19 746.769,1213.96 747.355,1214.35 747.942,1215.92 748.528,1216.02 749.115,1216.02 749.701,1216.13 750.288,1217.78 750.874,1219.46 751.46,1219.29 752.047,1217.57 752.633,1217.63 753.22,1217.13 753.806,1215.96 754.392,1214.78 754.979,1216.2 755.565,1216.26 756.152,1216.31 756.738,1217.53 757.324,1217.56 757.911,1216.47 758.497,1220.71 759.084,1220.62 759.67,1220.65 760.257,1223.12 760.843,1221.59 761.429,1219.89 762.016,1221.16 762.602,1223.53 763.189,1223.34 763.775,1221.71 764.361,1220.13 764.948,1217.3 765.534,1216.01 766.121,1216.13 766.707,1217.77 767.293,1217.85 767.88,1219.17 768.466,1223.37 769.053,1227.37 769.639,1222.37 770.226,1220.83 770.812,1221.91 771.398,1217.37 771.985,1215.81 772.571,1214.39 773.158,1211.47 773.744,1208.88 774.33,1210.68 774.917,1211.15 775.503,1211.39 776.09,1209.86 776.676,1213.33 777.262,1213.48 777.849,1213.8 778.435,1214 779.022,1215.69 779.608,1216.92 780.195,1215.72 780.781,1215.98 781.367,1216.09 781.954,1215.98 782.54,1216.2 783.127,1216.58 783.713,1218.18 784.299,1216.77 784.886,1217.93 785.472,1217.75 786.059,1216.19 786.645,1216.3 787.232,1216.41 787.818,1216.31 788.404,1216.42 788.991,1216.59 789.577,1215.35 790.164,1213.87 790.75,1215.14 791.336,1215.43 791.923,1215.58 792.509,1216.82 793.096,1213.72 793.682,1213.96 794.268,1216.98 794.855,1217.16 795.441,1218.32 796.028,1216.81 796.614,1216.68 797.201,1216.58 797.787,1216.48 798.373,1216.98 798.96,1216.98 799.546,1217.22 800.133,1218.53 800.719,1218.62 801.305,1217.25 801.892,1216.22 802.478,1217.5 803.065,1216.09 803.651,1219.29 804.237,1220.68 804.824,1220.37 805.41,1220.17 805.997,1222.87 806.583,1222.13 807.17,1220.25 807.756,1220.39 808.342,1214.19 808.929,1217.27 809.515,1217.13 810.102,1220.18 810.688,1218.75 811.274,1218.35 811.861,1216.7 812.447,1216.7 813.034,1215.28 813.62,1212.52 814.206,1213.11 814.793,1210.5 815.379,1212.27 815.966,1212.37 816.552,1214.11 817.139,1214.43 817.725,1218.8 818.311,1220.34 818.898,1220.09 819.484,1218.19 820.071,1216.58 820.657,1214.97 821.243,1214.99 821.83,1215.18 822.416,1213.82 823.003,1213.97 823.589,1215.74 824.175,1215.84 824.762,1216.93 825.348,1218.69 825.935,1218.9 826.521,1221.57 827.108,1219.53 827.694,1221.99 828.28,1223.61 828.867,1221.5 829.453,1219.93 830.04,1220.79 830.626,1217.53 831.212,1218.47 831.799,1219.88 832.385,1219.76 832.972,1216.49 833.558,1217.79 834.145,1221.7 834.731,1218.67 835.317,1219.77 835.904,1222.49 836.49,1224.93 837.077,1220.25 837.663,1220.11 838.249,1223.88 838.836,1224.95 839.422,1223.11 840.009,1219.75 840.595,1216.74 841.181,1218.05 841.768,1220.96 842.354,1222.11 842.941,1220.34 843.527,1217.19 844.114,1214.26 844.7,1210.03 845.286,1211.48 845.873,1217.42 846.459,1218.52 847.046,1215.81 847.632,1215.7 848.218,1215.25 848.805,1216.91 849.391,1218.19 849.978,1216.44 850.564,1213.49 851.15,1214.88 851.737,1216.27 852.323,1214.57 852.91,1214.88 853.496,1216.08 854.083,1213.33 854.669,1216.16 855.255,1214.64 855.842,1214.94 856.428,1213.42 857.015,1217.78 857.601,1219.11 858.187,1218.82 858.774,1221.38 859.36,1219.6 859.947,1219.22 860.533,1219.15 861.119,1220.41 861.706,1223 862.292,1222.61 862.879,1222.02 863.465,1226.26 864.052,1228.7 864.638,1226.39 865.224,1228.58 865.811,1227.63 866.397,1226.71 866.984,1226 867.57,1226.61 868.156,1225.74 868.743,1223.99 869.329,1222.09 869.916,1220.26 870.502,1220.04 871.089,1219.65 871.675,1220.88 872.261,1220.37 872.848,1218.45 873.434,1217.97 874.021,1215.04 874.607,1213.49 875.193,1210.82 875.78,1209.49 876.366,1209.97 876.953,1213.1 877.539,1213.04 878.125,1212.96 878.712,1213.39 879.298,1212.37 879.885,1209.82 880.471,1214.27 881.058,1214.32 881.644,1215.84 882.23,1218.64 882.817,1218.23 883.403,1218.01 883.99,1217.91 884.576,1216.35 885.162,1214.89 885.749,1216.4 886.335,1216.08 886.922,1215.98 887.508,1216.06 888.094,1215.75 888.681,1216.03 889.267,1215.87 889.854,1217.48 890.44,1218.61 891.027,1217.04 891.613,1216.59 892.199,1214.92 892.786,1215.06 893.372,1212.13 893.959,1212.39 894.545,1212.38 895.131,1214.12 895.718,1217.28 896.304,1216.94 896.891,1215.71 897.477,1212.68 898.063,1215.76 898.65,1215.7 899.236,1217.14 899.823,1221.34 900.409,1219.5 900.996,1221.2 901.582,1219.73 902.168,1218.07 902.755,1217.8 903.341,1213.33 903.928,1211.88 904.514,1210.2 905.1,1206.37 905.687,1206.89 906.273,1207.76 906.86,1206.53 907.446,1202.84 908.032,1204.98 908.619,1202.43 909.205,1201.82 909.792,1206.74 910.378,1204.34 910.965,1204.79 911.551,1205.56 912.137,1204.5 912.724,1205.53 913.31,1202.81 913.897,1203.51 914.483,1203.8 915.069,1202.92 915.656,1203.92 916.242,1206.01 916.829,1206.47 917.415,1208.45 918.002,1207.32 918.588,1207.83 919.174,1208.05 919.761,1205.57 920.347,1207.42 920.934,1207.85 921.52,1207.92 922.106,1208.57 922.693,1208.83 923.279,1208.9 923.866,1212.17 924.452,1209.93 925.038,1213.13 925.625,1216.36 926.211,1215.27 926.798,1216.7 927.384,1215.18 927.971,1212.3 928.557,1212.48 929.143,1209.82 929.73,1210.19 930.316,1207.54 930.903,1206.54 931.489,1207.11 932.075,1206.41 932.662,1206.82 933.248,1204.36 933.835,1208.04 934.421,1205.98 935.007,1205.61 935.594,1206.23 936.18,1207.83 936.767,1208.11 937.353,1208.49 937.94,1212.13 938.526,1212.52 939.112,1212.86 939.699,1213.13 940.285,1212 940.872,1213.69 941.458,1219.33 942.044,1218.1 942.631,1219.28 943.217,1219.21 943.804,1219.16 944.39,1220.16 944.976,1218.49 945.563,1219.94 946.149,1218.25 946.736,1216.56 947.322,1218.22 947.909,1219.55 948.495,1222.24 949.081,1220.4 949.668,1224.23 950.254,1223.74 950.841,1225.02 951.427,1222.96 952.013,1222.55 952.6,1226.15 953.186,1222.44 953.773,1220.41 954.359,1221.49 954.945,1229.85 955.532,1227.71 956.118,1224.27 956.705,1225.09 957.291,1225.77 957.878,1228.14 958.464,1230.18 959.05,1226.55 959.637,1223.02 960.223,1225.36 960.81,1227.9 961.396,1225.43 961.982,1224.96 962.569,1222.99 963.155,1225.31 963.742,1223.1 964.328,1220.96 964.915,1217.93 965.501,1219.24 966.087,1218.8 966.674,1213.97 967.26,1215.51 967.847,1215.54 968.433,1215.63 969.019,1218.55 969.606,1216.8 970.192,1215.04 970.779,1215.15 971.365,1216.55 971.951,1219.21 972.538,1215.97 973.124,1215.92 973.711,1215.68 974.297,1215.47 974.884,1218.13 975.47,1219.49 976.056,1214.97 976.643,1213.8 977.229,1213.88 977.816,1212.36 978.402,1209.88 978.988,1208.86 979.575,1209.34 980.161,1206.77 980.748,1205.77 981.334,1206.23 981.92,1206.6 982.507,1207.24 983.093,1207.46 983.68,1206.4 984.266,1208.37 984.853,1205.76 985.439,1206.21 986.025,1206.48 986.612,1205.47 987.198,1208.74 987.785,1210.33 988.371,1210.4 988.957,1208.87 989.544,1209.02 990.13,1214.84 990.717,1214.75 991.303,1216.15 991.889,1214.58 992.476,1216.01 993.062,1214.38 993.649,1212.9 994.235,1214.76 994.822,1213.16 995.408,1212.01 995.994,1211.25 996.581,1211.29 997.167,1211.1 997.754,1212.79 998.34,1213.04 998.926,1213.28 999.513,1213.74 1000.1,1215.17 1000.69,1213.84 1001.27,1215.3 1001.86,1219.31 1002.44,1217.55 1003.03,1217.77 1003.62,1216.32 1004.2,1216.43 1004.79,1216.23 1005.38,1214.73 1005.96,1216.22 1006.55,1217.28 1007.14,1218.8 1007.72,1218.64 1008.31,1215.67 1008.9,1215.57 1009.48,1217.12 1010.07,1216.86 1010.65,1217.96 1011.24,1220.44 1011.83,1218.63 1012.41,1222.8 1013,1220.93 1013.59,1220.43 1014.17,1220.05 1014.76,1217.07 1015.35,1217.02 1015.93,1217.27 1016.52,1219.81 1017.11,1220.98 1017.69,1219.19 1018.28,1219.2 1018.86,1215.68 1019.45,1215.74 1020.04,1215.63 1020.62,1212.67 1021.21,1214.15 1021.8,1215.62 1022.38,1215.52 1022.97,1216.75 1023.56,1215.54 1024.14,1216.94 1024.73,1219.6 1025.32,1216.21 1025.9,1217.61 1026.49,1218.66 1027.07,1218.47 1027.66,1219.46 1028.25,1216.11 1028.83,1219.08 1029.42,1220.13 1030.01,1221.1 1030.59,1219.34 1031.18,1217.57 1031.77,1216.01 1032.35,1215.85 1032.94,1212.85 1033.52,1209.94 1034.11,1208.85 1034.7,1207.84 1035.28,1208.25 1035.87,1211.21 1036.46,1211.27 1037.04,1213.12 1037.63,1210.48 1038.22,1214.92 1038.8,1214.72 1039.39,1215.99 1039.98,1218.71 1040.56,1218.67 1041.15,1218.91 1041.73,1218.72 1042.32,1219.87 1042.91,1219.46 1043.49,1220.69 1044.08,1220.33 1044.67,1219.78 1045.25,1217.92 1045.84,1213.15 1046.43,1214.53 1047.01,1212.85 1047.6,1212.92 1048.19,1214.3 1048.77,1212.68 1049.36,1212.76 1049.94,1212.68 1050.53,1212.76 1051.12,1211.43 1051.7,1210.11 1052.29,1214.66 1052.88,1213.31 1053.46,1213.71 1054.05,1213.9 1054.64,1214.14 1055.22,1215.71 1055.81,1218.54 1056.39,1216.81 1056.98,1213.73 1057.57,1212.29 1058.15,1211.1 1058.74,1209.93 1059.33,1207.38 1059.91,1207.78 1060.5,1206.89 1061.09,1208.34 1061.67,1208.42 1062.26,1208.74 1062.85,1207.66 1063.43,1210.56 1064.02,1210.74 1064.6,1209.75 1065.19,1207.03 1065.78,1206.04 1066.36,1209.43 1066.95,1208.51 1067.54,1207.34 1068.12,1206.58 1068.71,1207.21 1069.3,1204.73 1069.88,1202.43 1070.47,1204.38 1071.06,1204.88 1071.64,1208.36 1072.23,1210.17 1072.81,1209.34 1073.4,1209.63 1073.99,1209.98 1074.57,1210.24 1075.16,1207.59 1075.75,1208.01 1076.33,1210.11 1076.92,1210.45 1077.51,1209.28 1078.09,1210.96 1078.68,1210.02 1079.26,1213.18 1079.85,1214.86 1080.44,1216.33 1081.02,1217.91 1081.61,1220.34 1082.2,1218.93 1082.78,1217.47 1083.37,1215.93 1083.96,1215.81 1084.54,1217.26 1085.13,1214.19 1085.72,1215.89 1086.3,1214.54 1086.89,1214.41 1087.47,1215.86 1088.06,1215.71 1088.65,1215.74 1089.23,1220.06 1089.82,1217.21 1090.41,1217.14 1090.99,1216.74 1091.58,1219.74 1092.17,1219.32 1092.75,1219.27 1093.34,1226.15 1093.93,1225.5 1094.51,1224.95 1095.1,1224.13 1095.68,1225.03 1096.27,1224.39 1096.86,1223.86 1097.44,1223.61 1098.03,1221.73 1098.62,1221.33 1099.2,1217.81 1099.79,1211.98 1100.38,1212.32 1100.96,1212.19 1101.55,1213.65 1102.14,1210.74 1102.72,1213.67 1103.31,1216.46 1103.89,1219.23 1104.48,1218.95 1105.07,1218.67 1105.65,1216.83 1106.24,1216.43 1106.83,1217.86 1107.41,1219.41 1108,1220.23 1108.59,1219.68 1109.17,1217.79 1109.76,1219.25 1110.34,1219.11 1110.93,1217.13 1111.52,1218.37 1112.1,1216.71 1112.69,1215.07 1113.28,1215.19 1113.86,1210.77 1114.45,1209.58 1115.04,1210.03 1115.62,1211.38 1116.21,1210.01 1116.8,1205.74 1117.38,1206.54 1117.97,1207 1118.55,1208.42 1119.14,1210.21 1119.73,1210.4 1120.31,1207.75 1120.9,1209.77 1121.49,1208.66 1122.07,1207.44 1122.66,1206.45 1123.25,1205.32 1123.83,1205.6 1124.42,1205.71 1125.01,1204.96 1125.59,1208.25 1126.18,1208.42 1126.76,1210.08 1127.35,1210.52 1127.94,1210.7 1128.52,1209.38 1129.11,1209.8 1129.7,1208.95 1130.28,1207.87 1130.87,1208.32 1131.46,1211.18 1132.04,1211.08 1132.63,1211.38 1133.21,1211.94 1133.8,1211.99 1134.39,1210.5 1134.97,1210.66 1135.56,1215.36 1136.15,1216.78 1136.73,1216.81 1137.32,1215.49 1137.91,1214.17 1138.49,1216.93 1139.08,1221.2 1139.67,1220.76 1140.25,1220.42 1140.84,1219.92 1141.42,1219.69 1142.01,1219.03 1142.6,1218.79 1143.18,1213.02 1143.77,1217.48 1144.36,1218.78 1144.94,1218.57 1145.53,1215.64 1146.12,1213.91 1146.7,1211.31 1147.29,1210.14 1147.88,1211.76 1148.46,1210.31 1149.05,1209.09 1149.63,1209.2 1150.22,1209.56 1150.81,1212.95 1151.39,1211.52 1151.98,1210.3 1152.57,1209.1 1153.15,1209.32 1153.74,1209.65 1154.33,1208.18 1154.91,1207.05 1155.5,1206.6 1156.09,1208.2 1156.67,1208.61 1157.26,1210.29 1157.84,1209.13 1158.43,1212.27 1159.02,1211 1159.6,1211.12 1160.19,1212.78 1160.78,1212.7 1161.36,1211.17 1161.95,1208.25 1162.54,1209.95 1163.12,1208.56 1163.71,1208.78 1164.29,1209 1164.88,1212.38 1165.47,1211 1166.05,1209.56 1166.64,1211.4 1167.23,1210.31 1167.81,1208.87 1168.4,1210.34 1168.99,1210.52 1169.57,1210.9 1170.16,1212.53 1170.75,1210.04 1171.33,1208.71 1171.92,1210.2 1172.5,1211.8 1173.09,1209.39 1173.68,1209.63 1174.26,1211.39 1174.85,1211.27 1175.44,1210.56 1176.02,1213.67 1176.61,1213.5 1177.2,1212.25 1177.78,1212.01 1178.37,1210.78 1178.96,1209.62 1179.54,1209.95 1180.13,1208.94 1180.71,1211.98 1181.3,1213.29 1181.89,1213.68 1182.47,1213.84 1183.06,1216.69 1183.65,1216.65 1184.23,1217.99 1184.82,1219.11 1185.41,1218.87 1185.99,1219.91 1186.58,1215.16 1187.16,1215 1187.75,1214.91 1188.34,1214.94 1188.92,1219.12 1189.51,1218.6 1190.1,1218.2 1190.68,1219.36 1191.27,1217.83 1191.86,1220.57 1192.44,1218.71 1193.03,1219.87 1193.62,1219.44 1194.2,1219.11 1194.79,1217.63 1195.37,1219 1195.96,1215.94 1196.55,1216.19 1197.13,1215.98 1197.72,1217.22 1198.31,1215.41 1198.89,1214.01 1199.48,1210.9 1200.07,1214.26 1200.65,1214.27 1201.24,1212.43 1201.83,1214.16 1202.41,1216.92 1203,1209.72 1203.58,1209.85 1204.17,1210.14 1204.76,1210.46 1205.34,1209.19 1205.93,1210.89 1206.52,1209.5 1207.1,1211.18 1207.69,1209.85 1208.28,1212.85 1208.86,1211.46 1209.45,1214.56 1210.03,1213.04 1210.62,1214.67 1211.21,1216 1211.79,1218.55 1212.38,1215.52 1212.97,1213.83 1213.55,1212.29 1214.14,1213.88 1214.73,1213.77 1215.31,1213.65 1215.9,1213.53 1216.49,1213.53 1217.07,1213.66 1217.66,1213.4 1218.24,1216.11 1218.83,1214.35 1219.42,1214.17 1220,1214.04 1220.59,1214.31 1221.18,1212.7 1221.76,1212.71 1222.35,1215.71 1222.94,1217.24 1223.52,1217.26 1224.11,1215.74 1224.7,1215.69 1225.28,1216.88 1225.87,1216.67 1226.45,1216.64 1227.04,1214.59 1227.63,1213.2 1228.21,1215.92 1228.8,1215.82 1229.39,1215.79 1229.97,1214.35 1230.56,1213.47 1231.15,1212.06 1231.73,1213.65 1232.32,1215.18 1232.91,1215.15 1233.49,1213.54 1234.08,1216.46 1234.66,1216.43 1235.25,1216.13 1235.84,1219.06 1236.42,1218.76 1237.01,1221.5 1237.6,1225.27 1238.18,1225.95 1238.77,1226.97 1239.36,1226.12 1239.94,1224.25 1240.53,1220.97 1241.11,1219.32 1241.7,1218.8 1242.29,1218.9 1242.87,1221.27 1243.46,1216.59 1244.05,1214.87 1244.63,1216.03 1245.22,1214.34 1245.81,1213.01 1246.39,1211.79 1246.98,1213.3 1247.57,1211.75 1248.15,1211.72 1248.74,1211.9 1249.32,1215.25 1249.91,1215.18 1250.5,1215.3 1251.08,1216.64 1251.67,1219.01 1252.26,1217.05 1252.84,1219.48 1253.43,1219 1254.02,1218.48 1254.6,1218.38 1255.19,1213.78 1255.78,1210.92 1256.36,1211.03 1256.95,1211.03 1257.53,1210.89 1258.12,1212.47 1258.71,1209.63 1259.29,1210.23 1259.88,1208.96 1260.47,1210.53 1261.05,1213.62 1261.64,1211.1 1262.23,1208.33 1262.81,1210.17 1263.4,1211.73 1263.98,1211.58 1264.57,1211.97 1265.16,1212.01 1265.74,1212.07 1266.33,1212.16 1266.92,1216.4 1267.5,1216.32 1268.09,1216.24 1268.68,1213.16 1269.26,1214.57 1269.85,1213.02 1270.44,1211.64 1271.02,1214.48 1271.61,1212.9 1272.19,1215.89 1272.78,1210.36 1273.37,1208.96 1273.95,1204.98 1274.54,1206.66 1275.13,1208.57 1275.71,1210.3 1276.3,1210.43 1276.89,1209.47 1277.47,1209.92 1278.06,1210.42 1278.65,1207.72 1279.23,1212.27 1279.82,1210.84 1280.4,1209.74 1280.99,1208.53 1281.58,1209.05 1282.16,1205.12 1282.75,1204.2 1283.34,1204.88 1283.92,1205.08 1284.51,1205.49 1285.1,1205.88 1285.68,1206.4 1286.27,1208.41 1286.86,1207.27 1287.44,1209.31 1288.03,1209.51 1288.61,1209.81 1289.2,1210.32 1289.79,1209.31 1290.37,1208.32 1290.96,1210.22 1291.55,1213.61 1292.13,1212.21 1292.72,1212.11 1293.31,1212.39 1293.89,1212.73 1294.48,1211.33 1295.06,1214.27 1295.65,1215.61 1296.24,1215.34 1296.82,1215.04 1297.41,1215.02 1298,1214.8 1298.58,1216.29 1299.17,1214.62 1299.76,1217.37 1300.34,1218.23 1300.93,1220.71 1301.52,1220.72 1302.1,1221.93 1302.69,1221.31 1303.27,1220.89 1303.86,1219.37 1304.45,1218.92 1305.03,1218.71 1305.62,1218.61 1306.21,1216.92 1306.79,1217.12 1307.38,1218.41 1307.97,1219.51 1308.55,1219.18 1309.14,1217.4 1309.73,1217.13 1310.31,1216.64 1310.9,1216.48 1311.48,1219.27 1312.07,1219.06 1312.66,1220.23 1313.24,1221.46 1313.83,1219.75 1314.42,1223.79 1315,1220.46 1315.59,1217.22 1316.18,1218.61 1316.76,1218.11 1317.35,1218.89 1317.93,1218.85 1318.52,1215.67 1319.11,1213.94 1319.69,1213.94 1320.28,1213.85 1320.87,1212.3 1321.45,1213.74 1322.04,1215.04 1322.63,1212.41 1323.21,1210.98 1323.8,1209.7 1324.39,1211.33 1324.97,1211.46 1325.56,1211.72 1326.14,1210.42 1326.73,1210.57 1327.32,1209.05 1327.9,1210.74 1328.49,1209.52 1329.08,1211.1 1329.66,1209.63 1330.25,1208.42 1330.84,1208.6 1331.42,1208.61 1332.01,1207.72 1332.6,1211.08 1333.18,1211.07 1333.77,1211.21 1334.35,1211.59 1334.94,1210.02 1335.53,1211.91 1336.11,1208.95 1336.7,1210.82 1337.29,1209.5 1337.87,1212.83 1338.46,1212.95 1339.05,1210.22 1339.63,1210.35 1340.22,1211.82 1340.8,1212.26 1341.39,1216.55 1341.98,1216.52 1342.56,1216.3 1343.15,1216.12 1343.74,1216.28 1344.32,1216.41 1344.91,1216.4 1345.5,1216.42 1346.08,1216.08 1346.67,1215.4 1347.26,1215.26 1347.84,1215.33 1348.43,1216.67 1349.01,1219.2 1349.6,1215.98 1350.19,1215.59 1350.77,1216.93 1351.36,1219.9 1351.95,1220.76 1352.53,1220.64 1353.12,1223.12 1353.71,1222.92 1354.29,1222.52 1354.88,1222.31 1355.47,1220.49 1356.05,1221.79 1356.64,1221.62 1357.22,1220.07 1357.81,1220.04 1358.4,1222.83 1358.98,1221.02 1359.57,1220.25 1360.16,1219.61 1360.74,1217.84 1361.33,1215.97 1361.92,1217.36 1362.5,1221.45 1363.09,1223.56 1363.68,1224.37 1364.26,1222.26 1364.85,1220.72 1365.43,1218.73 1366.02,1218.41 1366.61,1218.02 1367.19,1216.53 1367.78,1216.33 1368.37,1217.55 1368.95,1217.49 1369.54,1215.82 1370.13,1215.77 1370.71,1215.78 1371.3,1215.83 1371.88,1216.91 1372.47,1215.25 1373.06,1216.04 1373.64,1215.96 1374.23,1214.69 1374.82,1216.17 1375.4,1214.46 1375.99,1214.38 1376.58,1215.76 1377.16,1212.76 1377.75,1212.64 1378.34,1215.51 1378.92,1218.47 1379.51,1216.77 1380.09,1218.13 1380.68,1217.8 1381.27,1217.88 1381.85,1219.14 1382.44,1217.66 1383.03,1216.1 1383.61,1215.6 1384.2,1215.62 1384.79,1215.47 1385.37,1216.76 1385.96,1216.81 1386.55,1216.5 1387.13,1215.24 1387.72,1216.64 1388.3,1217.99 1388.89,1220.79 1389.48,1221.64 1390.06,1221.19 1390.65,1220.89 1391.24,1224.67 1391.82,1223.7 1392.41,1218.66 1393,1220.73 1393.58,1221.95 1394.17,1224.2 1394.75,1225.07 1395.34,1223.39 1395.93,1224.16 1396.51,1222.17 1397.1,1226.1 1397.69,1222.66 1398.27,1220.58 1398.86,1220.2 1399.45,1215.91 1400.03,1214.3 1400.62,1215.94 1401.21,1215.8 1401.79,1213.91 1402.38,1215.56 1402.96,1211.29 1403.55,1209.94 1404.14,1213.27 1404.72,1213.03 1405.31,1212.99 1405.9,1211.67 1406.48,1210.45 1407.07,1209.21 1407.66,1211.03 1408.24,1209.85 1408.83,1212.87 1409.42,1213.22 1410,1214.81 1410.59,1213.11 1411.17,1214.37 1411.76,1216.83 1412.35,1212.64 1412.93,1212.88 1413.52,1208.56 1414.11,1208.74 1414.69,1210.48 1415.28,1212.24 1415.87,1213.64 1416.45,1218.1 1417.04,1216.5 1417.63,1217.98 1418.21,1217.47 1418.8,1217.5 1419.38,1219.01 1419.97,1218.88 1420.56,1217.26 1421.14,1217.28 1421.73,1218.29 1422.32,1216.44 1422.9,1214.57 1423.49,1217.35 1424.08,1218.91 1424.66,1217.38 1425.25,1218.55 1425.83,1216.78 1426.42,1221.13 1427.01,1215.25 1427.59,1213.55 1428.18,1212.16 1428.77,1212.51 1429.35,1213.84 1429.94,1212.6 1430.53,1211.24 1431.11,1210.13 1431.7,1210.15 1432.29,1211.9 1432.87,1213.56 1433.46,1213.62 1434.04,1212.17 1434.63,1213.71 1435.22,1213.67 1435.8,1212.13 1436.39,1216.48 1436.98,1217.45 1437.56,1217.1 1438.15,1218.2 1438.74,1216.59 1439.32,1213.51 1439.91,1212.42 1440.5,1215.3 1441.08,1210.87 1441.67,1209.7 1442.25,1208.5 1442.84,1207.6 1443.43,1204.92 1444.01,1202.36 1444.6,1202.94 1445.19,1204.88 1445.77,1206.51 1446.36,1210.03 1446.95,1211.7 1447.53,1210.23 1448.12,1210.25 1448.7,1210.36 1449.29,1213.44 1449.88,1216.28 1450.46,1217.77 1451.05,1216.24 1451.64,1213.01 1452.22,1214.41 1452.81,1215.67 1453.4,1217 1453.98,1219.77 1454.57,1219.49 1455.16,1219.15 1455.74,1216.02 1456.33,1214.24 1456.91,1214.47 1457.5,1215.8 1458.09,1215.62 1458.67,1211.39 1459.26,1214.54 1459.85,1214.69 1460.43,1214.72 1461.02,1214.56 1461.61,1214.76 1462.19,1212.11 1462.78,1210.65 1463.37,1212.23 1463.95,1212.25 1464.54,1212.4 1465.12,1210.86 1465.71,1212.15 1466.3,1212.29 1466.88,1209.2 1467.47,1210.67 1468.06,1211.99 1468.64,1214.52 1469.23,1214.39 1469.82,1213.16 1470.4,1211.65 1470.99,1211.95 1471.57,1210.59 1472.16,1209.32 1472.75,1209.57 1473.33,1207.42 1473.92,1209.24 1474.51,1209.5 1475.09,1206.97 1475.68,1205.93 1476.27,1204.8 1476.85,1203.63 1477.44,1202.81 1478.03,1202.17 1478.61,1200.17 1479.2,1199.21 1479.78,1199.99 1480.37,1202.16 1480.96,1201.5 1481.54,1200.93 1482.13,1199.98 1482.72,1202.26 1483.3,1201.51 1483.89,1203.57 1484.48,1204.16 1485.06,1204.75 1485.65,1202.54 1486.24,1201.79 1486.82,1202.72 1487.41,1201.97 1487.99,1203.93 1488.58,1204.43 1489.17,1204.95 1489.75,1207.07 1490.34,1211.61 1490.93,1212.88 1491.51,1213.06 1492.1,1213.31 1492.69,1212.07 1493.27,1213.56 1493.86,1215.11 1494.45,1212.04 1495.03,1210.69 1495.62,1210.89 1496.2,1212.49 1496.79,1214.07 1497.38,1214.24 1497.96,1215.67 1498.55,1212.42 1499.14,1208.12 1499.72,1208.24 1500.31,1206.81 1500.9,1208.52 1501.48,1210.35 1502.07,1211.61 1502.65,1210.26 1503.24,1213.18 1503.83,1213.35 1504.41,1213.42 1505,1213.44 1505.59,1216 1506.17,1217.14 1506.76,1218.39 1507.35,1217.86 1507.93,1216.39 1508.52,1216.23 1509.11,1216.29 1509.69,1214.59 1510.28,1212.9 1510.86,1215.93 1511.45,1215.86 1512.04,1218.8 1512.62,1221.28 1513.21,1220.71 1513.8,1221.78 1514.38,1219.94 1514.97,1224.04 1515.56,1230.49 1516.14,1229.7 1516.73,1227.2 1517.32,1227.73 1517.9,1227.2 1518.49,1223.95 1519.07,1223.56 1519.66,1224.48 1520.25,1222.28 1520.83,1221.88 1521.42,1222.84 1522.01,1220.84 1522.59,1220.68 1523.18,1218.9 1523.77,1219.93 1524.35,1219.69 1524.94,1219.09 1525.52,1220.51 1526.11,1218.55 1526.7,1216.93 1527.28,1214.66 1527.87,1213.13 1528.46,1215.71 1529.04,1216.98 1529.63,1216.8 1530.22,1215.05 1530.8,1216.15 1531.39,1217.26 1531.98,1218.46 1532.56,1219.58 1533.15,1217.71 1533.73,1211.9 1534.32,1215.04 1534.91,1216.64 1535.49,1216.55 1536.08,1217.51 1536.67,1218.63 1537.25,1217 1537.84,1212.46 1538.43,1211.05 1539.01,1211.32 1539.6,1212.79 1540.19,1213.08 1540.77,1214.52 1541.36,1215.8 1541.94,1215.75 1542.53,1215.76 1543.12,1216.97 1543.7,1215.18 1544.29,1215.1 1544.88,1210.55 1545.46,1209.36 1546.05,1209.71 1546.64,1207.26 1547.22,1209.22 1547.81,1212.37 1548.4,1208.25 1548.98,1208.68 1549.57,1210.43 1550.15,1213.54 1550.74,1213.62 1551.33,1214.86 1551.91,1214.71 1552.5,1216.29 1553.09,1214.64 1553.67,1216.04 1554.26,1215.91 1554.85,1218.52 1555.43,1216.83 1556.02,1216.78 1556.6,1216.61 1557.19,1217.58 1557.78,1216.18 1558.36,1212.1 1558.95,1212.14 1559.54,1214.17 1560.12,1217.15 1560.71,1216.9 1561.3,1216.69 1561.88,1215.25 1562.47,1213.87 1563.06,1211.17 1563.64,1208.51 1564.23,1208.63 1564.81,1206.03 1565.4,1207.88 1565.99,1208.59 1566.57,1207.34 1567.16,1207.96 1567.75,1209.51 1568.33,1212.86 1568.92,1214.37 1569.51,1214.24 1570.09,1214.2 1570.68,1212.73 1571.27,1211.44 1571.85,1215.02 1572.44,1218.38 1573.02,1218.24 1573.61,1218.01 1574.2,1217.98 1574.78,1217.79 1575.37,1215.09 1575.96,1211.98 1576.54,1212.03 1577.13,1210.89 1577.72,1209.49 1578.3,1209.63 1578.89,1209.86 1579.47,1207.35 1580.06,1206.34 1580.65,1207.94 1581.23,1212.57 1581.82,1212.52 1582.41,1212.77 1582.99,1210.12 1583.58,1210.28 1584.17,1210.45 1584.75,1212.26 1585.34,1212.5 1585.93,1211.19 1586.51,1211.43 1587.1,1210.09 1587.68,1211.95 1588.27,1212.18 1588.86,1210.88 1589.44,1214 1590.03,1215.44 1590.62,1215.3 1591.2,1219.31 1591.79,1217.22 1592.38,1215.94 1592.96,1217.5 1593.55,1220.27 1594.14,1220.03 1594.72,1222.51 1595.31,1221.92 1595.89,1221.41 1596.48,1220.83 1597.07,1220.39 1597.65,1218.66 1598.24,1219.47 1598.83,1217.48 1599.41,1217.13 1600,1212.7 1600.59,1212.98 1601.17,1211.55 1601.76,1210.36 1602.34,1206.5 1602.93,1205.65 1603.52,1204.57 1604.1,1206.52 1604.69,1210.02 1605.28,1208.93 1605.86,1208.86 1606.45,1207.72 1607.04,1209.24 1607.62,1206.61 1608.21,1206.87 1608.8,1207.13 1609.38,1207.66 1609.97,1208.07 1610.55,1209.63 1611.14,1208.51 1611.73,1204.38 1612.31,1204.8 1612.9,1205.38 1613.49,1205.7 1614.07,1206.17 1614.66,1210.96 1615.25,1214.13 1615.83,1215.52 1616.42,1214.27 1617.01,1213.22 1617.59,1210.69 1618.18,1210.72 1618.76,1216.21 1619.35,1214.53 1619.94,1213.06 1620.52,1212.97 1621.11,1208.72 1621.7,1209.09 1622.28,1215.23 1622.87,1215.03 1623.46,1216.19 1624.04,1215.91 1624.63,1215.85 1625.22,1214.5 1625.8,1217.14 1626.39,1216.9 1626.97,1213.92 1627.56,1210.89 1628.15,1212.3 1628.73,1212.62 1629.32,1212.48 1629.91,1213.58 1630.49,1216.11 1631.08,1217.45 1631.67,1218.43 1632.25,1218.12 1632.84,1218.04 1633.42,1217.67 1634.01,1217.34 1634.6,1218.63 1635.18,1215.77 1635.77,1215.77 1636.36,1215.81 1636.94,1216.97 1637.53,1217 1638.12,1215.57 1638.7,1215.37 1639.29,1216.97 1639.88,1216.77 1640.46,1218.19 1641.05,1214.79 1641.63,1216.33 1642.22,1213.67 1642.81,1215.34 1643.39,1214.06 1643.98,1214.15 1644.57,1214.46 1645.15,1214.38 1645.74,1217.24 1646.33,1216.79 1646.91,1216.9 1647.5,1216.48 1648.09,1216.4 1648.67,1215.17 1649.26,1215.09 1649.84,1219.07 1650.43,1218.78 1651.02,1215.83 1651.6,1217.04 1652.19,1219.53 1652.78,1219.18 1653.36,1220.56 1653.95,1220.28 1654.54,1222.72 1655.12,1221.97 1655.71,1221.42 1656.29,1221.17 1656.88,1220.53 1657.47,1221.55 1658.05,1218.09 1658.64,1217.84 1659.23,1218.98 1659.81,1219.97 1660.4,1220.88 1660.99,1216.16 1661.57,1216.07 1662.16,1215.76 1662.75,1215.69 1663.33,1215.59 1663.92,1214.28 1664.5,1214.31 1665.09,1213.03 1665.68,1209.97 1666.26,1207.36 1666.85,1209.25 1667.44,1208.1 1668.02,1207.19 1668.61,1209.15 1669.2,1208.14 1669.78,1207.09 1670.37,1207.68 1670.96,1209.6 1671.54,1205.43 1672.13,1205.9 1672.71,1207.85 1673.3,1208.08 1673.89,1209.87 1674.47,1205.88 1675.06,1207.95 1675.65,1208.22 1676.23,1207.31 1676.82,1206.1 1677.41,1207.73 1677.99,1208.26 1678.58,1208.37 1679.17,1208.81 1679.75,1210.23 1680.34,1212 1680.92,1210.57 1681.51,1212.42 1682.1,1212.62 1682.68,1215.69 1683.27,1214.29 1683.86,1212.82 1684.44,1215.77 1685.03,1217.08 1685.62,1215.41 1686.2,1215.28 1686.79,1212.3 1687.37,1211.08 1687.96,1211.43 1688.55,1212.79 1689.13,1213.24 1689.72,1213.34 1690.31,1213.67 1690.89,1213.89 1691.48,1212.62 1692.07,1212.47 1692.65,1212.8 1693.24,1214.41 1693.83,1210.06 1694.41,1210.3 1695,1210.9 1695.58,1213.82 1696.17,1218.12 1696.76,1213.64 1697.34,1213.66 1697.93,1215.25 1698.52,1215.2 1699.1,1210.95 1699.69,1210.87 1700.28,1209.59 1700.86,1209.84 1701.45,1211.29 1702.04,1214.39 1702.62,1217.4 1703.21,1217.17 1703.79,1216.97 1704.38,1216.75 1704.97,1215.29 1705.55,1212.6 1706.14,1214.17 1706.73,1212.31 1707.31,1213.75 1707.9,1216.76 1708.49,1217.83 1709.07,1216.42 1709.66,1216.24 1710.24,1215.95 1710.83,1217.44 1711.42,1217.3 1712,1221.3 1712.59,1222.27 1713.18,1220.37 1713.76,1221.46 1714.35,1222.61 1714.94,1220.55 1715.52,1220 1716.11,1223.8 1716.7,1221.91 1717.28,1221.43 1717.87,1221.07 1718.45,1217.73 1719.04,1216.07 1719.63,1215.95 1720.21,1211.6 1720.8,1208.87 1721.39,1206.44 1721.97,1206.8 1722.56,1207.22 1723.15,1206.15 1723.73,1206.42 1724.32,1205.43 1724.91,1204.25 1725.49,1204.89 1726.08,1202.34 1726.66,1207.27 1727.25,1210.65 1727.84,1209.34 1728.42,1211.11 1729.01,1208.44 1729.6,1206.33 1730.18,1206.83 1730.77,1206.04 1731.36,1206.23 1731.94,1208.18 1732.53,1208.65 1733.11,1209.06 1733.7,1209.38 1734.29,1208.27 1734.87,1208.37 1735.46,1208.44 1736.05,1207.32 1736.63,1207.53 1737.22,1206.56 1737.81,1208.24 1738.39,1210.09 1738.98,1211.61 1739.57,1211.68 1740.15,1210.45 1740.74,1211.92 1741.32,1214.54 1741.91,1217.3 1742.5,1214.54 1743.08,1215.57 1743.67,1215.3 1744.26,1216.57 1744.84,1219.13 1745.43,1217.54 1746.02,1217.33 1746.6,1218.86 1747.19,1220.14 1747.78,1219.63 1748.36,1219.5 1748.95,1219.14 1749.53,1220.39 1750.12,1217.01 1750.71,1218.31 1751.29,1217.87 1751.88,1217.95 1752.47,1217.96 1753.05,1217.56 1753.64,1217.57 1754.23,1214.42 1754.81,1212.87 1755.4,1211.32 1755.99,1211.31 1756.57,1211.66 1757.16,1213.12 1757.74,1214.37 1758.33,1218.72 1758.92,1218.31 1759.5,1218.36 1760.09,1216.84 1760.68,1219.55 1761.26,1219.21 1761.85,1218.88 1762.44,1220.1 1763.02,1218.61 1763.61,1214.32 1764.19,1215.61 1764.78,1213.96 1765.37,1214.23 1765.95,1215.49 1766.54,1215.45 1767.13,1217.93 1767.71,1217.64 1768.3,1217.28 1768.89,1217.08 1769.47,1216.94 1770.06,1217.14 1770.65,1217.26 1771.23,1215.43 1771.82,1214.27 1772.4,1215.38 1772.99,1216.78 1773.58,1218.45 1774.16,1219.46 1774.75,1220.22 1775.34,1219.62 1775.92,1216.58 1776.51,1216.25 1777.1,1217.59 1777.68,1221.68 1778.27,1222.77 1778.86,1225.38 1779.44,1223.2 1780.03,1221.4 1780.61,1221.17 1781.2,1219.22 1781.79,1219.12 1782.37,1218.75 1782.96,1217.06 1783.55,1218.27 1784.13,1216.74 1784.72,1213.93 1785.31,1215.58 1785.89,1214.2 1786.48,1214.36 1787.06,1214.15 1787.65,1214.19 1788.24,1215.89 1788.82,1215.93 1789.41,1215.83 1790,1218.6 1790.58,1219.65 1791.17,1219.35 1791.76,1217.69 1792.34,1216.22 1792.93,1216.31 1793.52,1216 1794.1,1220.3 1794.69,1222.83 1795.27,1225.01 1795.86,1224.26 1796.45,1223.49 1797.03,1222.94 1797.62,1223.93 1798.21,1222.2 1798.79,1222.95 1799.38,1224.97 1799.97,1224.41 1800.55,1222.21 1801.14,1221.61 1801.73,1221.33 1802.31,1219.63 1802.9,1217.89 1803.48,1216.18 1804.07,1214.33 1804.66,1215.53 1805.24,1212.78 1805.83,1211.67 1806.42,1210.44 1807,1210.55 1807.59,1207.5 1808.18,1210.85 1808.76,1210.95 1809.35,1215.52 1809.94,1218.32 1810.52,1219.32 1811.11,1221.92 1811.69,1222.79 1812.28,1216.64 1812.87,1212.3 1813.45,1209.32 1814.04,1206.72 1814.63,1211.52 1815.21,1211.64 1815.8,1211.9 1816.39,1213.37 1816.97,1210.85 1817.56,1207.96 1818.14,1207.2 1818.73,1207.67 1819.32,1207.82 1819.9,1209.27 1820.49,1208.29 1821.08,1210.03 1821.66,1211.35 1822.25,1210.18 1822.84,1209.98 1823.42,1210.29 1824.01,1209.12 1824.6,1209.51 1825.18,1209.52 1825.77,1208.6 1826.35,1207.37 1826.94,1206.16 1827.53,1203.84 1828.11,1202.79 1828.7,1204.45 1829.29,1205.01 1829.87,1208.3 1830.46,1210.11 1831.05,1211.89 1831.63,1210.71 1832.22,1211.12 1832.81,1214.27 1833.39,1215.54 1833.98,1218.13 1834.56,1218.8 1835.15,1219.81 1835.74,1219.31 1836.32,1220.07 1836.91,1221.12 1837.5,1222.11 1838.08,1224.57 1838.67,1222.32 1839.26,1223.17 1839.84,1221.11 1840.43,1223.49 1841.01,1220.26 1841.6,1220 1842.19,1219.86 1842.77,1219.72 1843.36,1218.04 1843.95,1216.2 1844.53,1217.29 1845.12,1214.31 1845.71,1215.91 1846.29,1215.93 1846.88,1220.21 1847.47,1219.83 1848.05,1221.07 1848.64,1222.27 1849.22,1221.75 1849.81,1224.25 1850.4,1223.4 1850.98,1224.59 1851.57,1226.83 1852.16,1224.7 1852.74,1224.25 1853.33,1222.39 1853.92,1222.05 1854.5,1218.94 1855.09,1215.69 1855.68,1214.41 1856.26,1214.54 1856.85,1214.53 1857.43,1215.8 1858.02,1212.95 1858.61,1211.43 1859.19,1211.33 1859.78,1209.94 1860.37,1208.74 1860.95,1210.13 1861.54,1210.36 1862.13,1211.98 1862.71,1207.93 1863.3,1208.23 1863.88,1210.1 1864.47,1208.8 1865.06,1210.41 1865.64,1210.82 1866.23,1209.5 1866.82,1205.31 1867.4,1205.96 1867.99,1205.05 1868.58,1205.71 1869.16,1206 1869.75,1203.33 1870.34,1205.04 1870.92,1205.63 1871.51,1207.56 1872.09,1207.85 1872.68,1209.54 1873.27,1208.32 1873.85,1208.43 1874.44,1208.83 1875.03,1208.95 1875.61,1213.88 1876.2,1213.91 1876.79,1210.98 1877.37,1212.66 1877.96,1215.38 1878.55,1215.22 1879.13,1220.99 1879.72,1217.95 1880.3,1220.47 1880.89,1218.74 1881.48,1216.93 1882.06,1216.85 1882.65,1217.04 1883.24,1213.91 1883.82,1215.49 1884.41,1216.85 1885,1216.81 1885.58,1215.42 1886.17,1214 1886.76,1211.38 1887.34,1208.57 1887.93,1207.47 1888.51,1210.53 1889.1,1210.88 1889.69,1211.05 1890.27,1212.47 1890.86,1214.13 1891.45,1214.16 1892.03,1215.72 1892.62,1211.41 1893.21,1212.86 1893.79,1217.36 1894.38,1214.19 1894.96,1215.23 1895.55,1215.36 1896.14,1213.8 1896.72,1209.54 1897.31,1208.21 1897.9,1208.27 1898.48,1207.43 1899.07,1205.96 1899.66,1207.88 1900.24,1208.43 1900.83,1208.83 1901.42,1208.79 1902,1207.82 1902.59,1209.65 1903.17,1207.1 1903.76,1206.05 1904.35,1209.04 1904.93,1207.7 1905.52,1205.55 1906.11,1204.5 1906.69,1205.04 1907.28,1202.58 1907.87,1201.92 1908.45,1201.31 1909.04,1202.3 1909.63,1205.69 1910.21,1204.81 1910.8,1202.51 1911.38,1204.5 1911.97,1206.29 1912.56,1209.52 1913.14,1209.54 1913.73,1211.29 1914.32,1205.62 1914.9,1203.52 1915.49,1204.14 1916.08,1200.48 1916.66,1199.66 1917.25,1200.48 1917.83,1202.85 1918.42,1202.26 1919.01,1201.47 1919.59,1202.34 1920.18,1205.86 1920.77,1207.86 1921.35,1211.36 1921.94,1214.47 1922.53,1214.12 1923.11,1214.16 1923.7,1217.27 1924.29,1220.29 1924.87,1221.47 1925.46,1222.62 1926.04,1220.88 1926.63,1220.71 1927.22,1218.81 1927.8,1221.28 1928.39,1222.35 1928.98,1220.57 1929.56,1223.07 1930.15,1222.51 1930.74,1220.4 1931.32,1221.64 1931.91,1222.66 1932.5,1223.42 1933.08,1225.55 1933.67,1224.95 1934.25,1222.85 1934.84,1220.85 1935.43,1217.61 1936.01,1217.34 1936.6,1215.64 1937.19,1216.72 1937.77,1219.21 1938.36,1220.31 1938.95,1216.81 1939.53,1213.8 1940.12,1214.1 1940.71,1212.83 1941.29,1211.21 1941.88,1211.36 1942.46,1212.94 1943.05,1214.19 1943.64,1215.59 1944.22,1218.11 1944.81,1214.95 1945.4,1212.17 1945.98,1215.12 1946.57,1216.42 1947.16,1216.31 1947.74,1216.4 1948.33,1217.92 1948.91,1218.99 1949.5,1218.61 1950.09,1216.88 1950.67,1220.97 1951.26,1223.29 1951.85,1221.16 1952.43,1219.38 1953.02,1216.32 1953.61,1218.93 1954.19,1221.07 1954.78,1223.41 1955.37,1224.12 1955.95,1222.31 1956.54,1220.61 1957.12,1220.56 1957.71,1220.27 1958.3,1218.44 1958.88,1219.7 1959.47,1219.35 1960.06,1214.51 1960.64,1215.85 1961.23,1212.43 1961.82,1212.56 1962.4,1211.02 1962.99,1212.59 1963.58,1215.38 1964.16,1213.76 1964.75,1213.59 1965.33,1212.36 1965.92,1211 1966.51,1211.36 1967.09,1212.93 1967.68,1212.87 1968.27,1214.38 1968.85,1214.6 1969.44,1216.01 1970.03,1218.84 1970.61,1218.6 1971.2,1216.97 1971.78,1215.5 1972.37,1215.64 1972.96,1214.12 1973.54,1210.91 1974.13,1211.19 1974.72,1212.76 1975.3,1209.88 1975.89,1210.25 1976.48,1210.58 1977.06,1210.72 1977.65,1209.31 1978.24,1209.64 1978.82,1208.69 1979.41,1210.38 1979.99,1210.4 1980.58,1210.52 1981.17,1213.7 1981.75,1212.3 1982.34,1212.44 1982.93,1212.86 1983.51,1212.91 1984.1,1211.25 1984.69,1209.78 1985.27,1210.25 1985.86,1211.76 1986.45,1214.6 1987.03,1216.01 1987.62,1215.86 1988.2,1217.29 1988.79,1215.78 1989.38,1215.58 1989.96,1214.26 1990.55,1214.14 1991.14,1214.35 1991.72,1210.27 1992.31,1210.76 1992.9,1212.24 1993.48,1213.7 1994.07,1215.35 1994.65,1218.72 1995.24,1219.74 1995.83,1215.32 1996.41,1215.22 1997,1215.16 1997.59,1216.37 1998.17,1216.52 1998.76,1212.22 1999.35,1213.64 1999.93,1212.67 2000.52,1214.16 2001.11,1216.94 2001.69,1214.02 2002.28,1215.56 2002.86,1215.27 2003.45,1215.69 2004.04,1212.66 2004.62,1211.04 2005.21,1209.74 2005.8,1208.41 2006.38,1207.18 2006.97,1206.31 2007.56,1208.13 2008.14,1204.14 2008.73,1204.76 2009.32,1204.17 2009.9,1204.49 2010.49,1208.16 2011.07,1208.23 2011.66,1207.01 2012.25,1205.92 2012.83,1207.8 2013.42,1206.87 2014.01,1207.18 2014.59,1206.06 2015.18,1208.04 2015.77,1209.59 2016.35,1210.05 2016.94,1211.65 2017.53,1211.86 2018.11,1211.51 2018.7,1210.1 2019.28,1211.69 2019.87,1210.58 2020.46,1215.44 2021.04,1215.31 2021.63,1215.42 2022.22,1213.71 2022.8,1215.25 2023.39,1215.04 2023.98,1214.78 2024.56,1213.29 2025.15,1215.27 2025.73,1212.31 2026.32,1212.05 2026.91,1213.6 2027.49,1215.03 2028.08,1215.08 2028.67,1215.03 2029.25,1219.17 2029.84,1216.08 2030.43,1217.43 2031.01,1215.75 2031.6,1213 2032.19,1214.53 2032.77,1214.57 2033.36,1217.03 2033.94,1216.72 2034.53,1215.28 2035.12,1215.32 2035.7,1213.66 2036.29,1213.35 2036.88,1214.9 2037.46,1213.51 2038.05,1212.02 2038.64,1211.02 2039.22,1212.79 2039.81,1213.01 2040.4,1210.13 2040.98,1210.41 2041.57,1209.12 2042.15,1206.61 2042.74,1210.16 2043.33,1210.54 2043.91,1212.16 2044.5,1213.81 2045.09,1214.03 2045.67,1214.07 2046.26,1215.2 2046.85,1216.58 2047.43,1217.68 2048.02,1217.49 2048.6,1217.07 2049.19,1218.46 2049.78,1218.2 2050.36,1219.69 2050.95,1222.09 2051.54,1224.36 2052.12,1222.38 2052.71,1220.53 2053.3,1217.49 2053.88,1217.24 2054.47,1216.22 2055.06,1217.67 2055.64,1218.68 2056.23,1218.46 2056.81,1215.63 2057.4,1214.07 2057.99,1215.71 2058.57,1217.26 2059.16,1218.54 2059.75,1219.88 2060.33,1216.96 2060.92,1218.15 2061.51,1217.92 2062.09,1216.44 2062.68,1218 2063.27,1217.72 2063.85,1218.96 2064.44,1217.03 2065.02,1218.6 2065.61,1219.74 2066.2,1218.11 2066.78,1217.81 2067.37,1217.37 2067.96,1218.73 2068.54,1218.47 2069.13,1219.79 2069.72,1220.95 2070.3,1220.43 2070.89,1219.97 2071.48,1219.65 2072.06,1218.23 2072.65,1220.8 2073.23,1217.31 2073.82,1218.32 2074.41,1218.17 2074.99,1217.99 2075.58,1217.82 2076.17,1216.31 2076.75,1217.64 2077.34,1217.47 2077.93,1220.07 2078.51,1218.11 2079.1,1213.47 2079.68,1216.25 2080.27,1217.4 2080.86,1216.96 2081.44,1216.98 2082.03,1219.65 2082.62,1219.2 2083.2,1217.68 2083.79,1219.24 2084.38,1217.65 2084.96,1217.49 2085.55,1214.33 2086.14,1213.12 2086.72,1213.37 2087.31,1213.57 2087.89,1213.57 2088.48,1213.89 2089.07,1209.73 2089.65,1208.19 2090.24,1206.99 2090.83,1208.6 2091.41,1211.61 2092,1213 2092.59,1211.68 2093.17,1214.52 2093.76,1211.81 2094.35,1210.23 2094.93,1211.77 2095.52,1210.53 2096.1,1210.72 2096.69,1212.41 2097.28,1211.11 2097.86,1212.5 2098.45,1212.65 2099.04,1211.21 2099.62,1211.53 2100.21,1208.88 2100.8,1206.44 2101.38,1209.9 2101.97,1213.01 2102.55,1208.69 2103.14,1208.77 2103.73,1210.46 2104.31,1210.52 2104.9,1211.04 2105.49,1212.63 2106.07,1212.84 2106.66,1211.72 2107.25,1210.4 2107.83,1213.29 2108.42,1216.23 2109.01,1217.56 2109.59,1217.38 2110.18,1220.16 2110.76,1220.07 2111.35,1217.14 2111.94,1217.09 2112.52,1215.62 2113.11,1217.02 2113.7,1215.3 2114.28,1214.07 2114.87,1215.72 2115.46,1216.55 2116.04,1216.63 2116.63,1213.47 2117.22,1212.24 2117.8,1213.73 2118.39,1216.4 2118.97,1216.29 2119.56,1217.4 2120.15,1217.29 2120.73,1217.09 2121.32,1215.65 2121.91,1215.6 2122.49,1215.63 2123.08,1215.58 2123.67,1213.97 2124.25,1213.53 2124.84,1213.68 2125.42,1213.45 2126.01,1219.43 2126.6,1216.45 2127.18,1216.32 2127.77,1213.44 2128.36,1209.01 2128.94,1209.15 2129.53,1207.71 2130.12,1209.37 2130.7,1207.01 2131.29,1207.04 2131.88,1204.3 2132.46,1204.88 2133.05,1205.16 2133.63,1207.04 2134.22,1206.22 2134.81,1208.12 2135.39,1210 2135.98,1211.86 2136.57,1214.89 2137.15,1221.5 2137.74,1223.63 2138.33,1223.26 2138.91,1223.04 2139.5,1221.43 2140.09,1219.74 2140.67,1218.32 2141.26,1216.69 2141.84,1216.63 2142.43,1216.21 2143.02,1216.29 2143.6,1217.63 2144.19,1215.7 2144.78,1217.2 2145.36,1213.99 2145.95,1212.63 2146.54,1212.85 2147.12,1212.9 2147.71,1212.87 2148.3,1212.8 2148.88,1215.55 2149.47,1214.01 2150.05,1212.79 2150.64,1211.48 2151.23,1214.25 2151.81,1215.84 2152.4,1215.87 2152.99,1215.6 2153.57,1215.56 2154.16,1213.96 2154.75,1216.96 2155.33,1216.78 2155.92,1217.85 2156.5,1217.84 2157.09,1217.44 2157.68,1218.69 2158.26,1221.36 \"/>\n<path clip-path=\"url(#clip782)\" d=\"M986.025 1214.6 L986.612 1214.6 L987.198 1214.6 L987.785 1214.6 L988.371 1214.6 L988.957 1214.6 L989.544 1214.6 L990.13 1214.6 L990.717 1214.6 L991.303 1214.6 L991.889 1214.6 L992.476 1214.6 L993.062 1214.6 L993.649 1214.6 L994.235 1214.6 L994.822 1214.6 L995.408 1214.6 L995.994 1214.6 L996.581 1214.6 L997.167 1214.6 L997.754 1214.6 L998.34 1214.6 L998.926 1214.6 L999.513 1214.6 L1000.1 1214.6 L1000.69 1214.6 L1001.27 1214.6 L1001.86 1214.6 L1002.44 1214.6 L1003.03 1214.6 L1003.62 1214.6 L1004.2 1214.6 L1004.79 1214.6 L1005.38 1214.6 L1005.96 1214.6 L1006.55 1214.6 L1007.14 1214.6 L1007.72 1214.6 L1008.31 1214.6 L1008.9 1214.6 L1009.48 1214.6 L1010.07 1214.6 L1010.65 1214.6 L1011.24 1214.6 L1011.83 1214.6 L1012.41 1214.6 L1013 1214.6 L1013.59 1214.6 L1014.17 1214.6 L1014.76 1214.6 L1015.35 1214.6 L1015.93 1214.6 L1016.52 1214.6 L1017.11 1214.6 L1017.69 1214.6 L1018.28 1214.6 L1018.86 1214.6 L1019.45 1214.6 L1020.04 1214.6 L1020.62 1214.6 L1021.21 1214.6 L1021.8 1214.6 L1022.38 1214.6 L1022.97 1214.6 L1023.56 1214.6 L1024.14 1214.6 L1024.73 1214.6 L1025.32 1214.6 L1025.9 1214.6 L1026.49 1214.6 L1027.07 1214.6 L1027.66 1214.6 L1028.25 1214.6 L1028.83 1214.6 L1029.42 1214.6 L1030.01 1214.6 L1030.59 1214.6 L1031.18 1214.6 L1031.77 1214.6 L1032.35 1214.6 L1032.94 1214.6 L1033.52 1214.6 L1034.11 1214.6 L1034.7 1214.6 L1035.28 1214.6 L1035.87 1214.6 L1036.46 1214.6 L1037.04 1214.6 L1037.63 1214.6 L1038.22 1214.6 L1038.8 1214.6 L1039.39 1214.6 L1039.98 1214.6 L1040.56 1214.6 L1041.15 1214.6 L1041.73 1214.6 L1042.32 1214.6 L1042.91 1214.6 L1043.49 1214.6 L1044.08 1214.6 L1044.67 1214.6 L1045.25 1214.6 L1045.84 1214.6 L1046.43 1214.6 L1047.01 1214.6 L1047.6 1214.6 L1048.19 1214.6 L1048.77 1214.6 L1049.36 1214.6 L1049.94 1214.6 L1050.53 1214.6 L1051.12 1214.6 L1051.7 1214.6 L1052.29 1214.6 L1052.88 1214.6 L1053.46 1214.6 L1054.05 1214.6 L1054.64 1214.6 L1055.22 1214.6 L1055.81 1214.6 L1056.39 1214.6 L1056.98 1214.6 L1057.57 1214.6 L1058.15 1214.6 L1058.74 1214.6 L1059.33 1214.6 L1059.91 1214.6 L1060.5 1214.6 L1061.09 1214.6 L1061.67 1214.6 L1062.26 1214.6 L1062.85 1214.6 L1063.43 1214.6 L1064.02 1214.6 L1064.6 1214.6 L1065.19 1214.6 L1065.78 1214.6 L1066.36 1214.6 L1066.95 1214.6 L1067.54 1214.6 L1068.12 1214.6 L1068.71 1214.6 L1069.3 1214.6 L1069.88 1214.6 L1070.47 1214.6 L1071.06 1214.6 L1071.64 1214.6 L1072.23 1214.6 L1072.81 1214.6 L1073.4 1214.6 L1073.99 1214.6 L1074.57 1214.6 L1075.16 1214.6 L1075.75 1214.6 L1076.33 1214.6 L1076.92 1214.6 L1077.51 1214.6 L1078.09 1214.6 L1078.68 1214.6 L1079.26 1214.6 L1079.85 1214.6 L1080.44 1214.6 L1081.02 1214.6 L1081.61 1214.6 L1082.2 1214.6 L1082.78 1214.6 L1083.37 1214.6 L1083.96 1214.6 L1084.54 1214.6 L1085.13 1214.6 L1085.72 1214.6 L1086.3 1214.6 L1086.89 1214.6 L1087.47 1214.6 L1088.06 1214.6 L1088.65 1214.6 L1089.23 1214.6 L1089.82 1214.6 L1090.41 1214.6 L1090.99 1214.6 L1091.58 1214.6 L1092.17 1214.6 L1092.75 1214.6 L1093.34 1214.6 L1093.93 1214.6 L1094.51 1214.6 L1095.1 1214.6 L1095.68 1214.6 L1096.27 1214.6 L1096.86 1214.6 L1097.44 1214.6 L1098.03 1214.6 L1098.62 1214.6 L1099.2 1214.6 L1099.79 1214.6 L1100.38 1214.6 L1100.96 1214.6 L1101.55 1214.6 L1102.14 1214.6 L1102.72 1214.6 L1103.31 1214.6 L1103.89 1214.6 L1104.48 1214.6 L1105.07 1214.6 L1105.65 1214.6 L1106.24 1214.6 L1106.83 1214.6 L1107.41 1214.6 L1108 1214.6 L1108.59 1214.6 L1109.17 1214.6 L1109.76 1214.6 L1110.34 1214.6 L1110.93 1214.6 L1111.52 1214.6 L1112.1 1214.6 L1112.69 1214.6 L1113.28 1214.6 L1113.86 1214.6 L1114.45 1214.6 L1115.04 1214.6 L1115.62 1214.6 L1116.21 1214.6 L1116.8 1214.6 L1117.38 1214.6 L1117.97 1214.6 L1118.55 1214.6 L1119.14 1214.6 L1119.73 1214.6 L1120.31 1214.6 L1120.9 1214.6 L1121.49 1214.6 L1122.07 1214.6 L1122.66 1214.6 L1123.25 1214.6 L1123.83 1214.6 L1124.42 1214.6 L1125.01 1214.6 L1125.59 1214.6 L1126.18 1214.6 L1126.76 1214.6 L1127.35 1214.6 L1127.94 1214.6 L1128.52 1214.6 L1129.11 1214.6 L1129.7 1214.6 L1130.28 1214.6 L1130.87 1214.6 L1131.46 1214.6 L1132.04 1214.6 L1132.63 1214.6 L1133.21 1214.6 L1133.8 1214.6 L1134.39 1214.6 L1134.97 1214.6 L1135.56 1214.6 L1136.15 1214.6 L1136.73 1214.6 L1137.32 1214.6 L1137.91 1214.6 L1138.49 1214.6 L1139.08 1214.6 L1139.67 1214.6 L1140.25 1214.6 L1140.84 1214.6 L1141.42 1214.6 L1142.01 1214.6 L1142.6 1214.6 L1143.18 1214.6 L1143.77 1214.6 L1144.36 1214.6 L1144.94 1214.6 L1145.53 1214.6 L1146.12 1214.6 L1146.7 1214.6 L1147.29 1214.6 L1147.88 1214.6 L1148.46 1214.6 L1149.05 1214.6 L1149.63 1214.6 L1150.22 1214.6 L1150.81 1214.6 L1151.39 1214.6 L1151.98 1214.6 L1152.57 1214.6 L1153.15 1214.6 L1153.74 1214.6 L1154.33 1214.6 L1154.91 1214.6 L1155.5 1214.6 L1156.09 1214.6 L1156.67 1214.6 L1157.26 1214.6 L1157.84 1214.6 L1158.43 1214.6 L1159.02 1214.6 L1159.6 1214.6 L1160.19 1214.6 L1160.78 1214.6 L1161.36 1214.6 L1161.95 1214.6 L1162.54 1214.6 L1163.12 1214.6 L1163.71 1214.6 L1164.29 1214.6 L1164.88 1214.6 L1165.47 1214.6 L1166.05 1214.6 L1166.64 1214.6 L1167.23 1214.6 L1167.81 1214.6 L1168.4 1214.6 L1168.99 1214.6 L1169.57 1214.6 L1170.16 1214.6 L1170.75 1214.6 L1171.33 1214.6 L1171.92 1214.6 L1172.5 1214.6 L1173.09 1214.6 L1173.68 1214.6 L1174.26 1214.6 L1174.85 1214.6 L1175.44 1214.6 L1176.02 1214.6 L1176.61 1214.6 L1177.2 1214.6 L1177.78 1214.6 L1178.37 1214.6 L1178.96 1214.6 L1179.54 1214.6 L1180.13 1214.6 L1180.71 1214.6 L1181.3 1214.6 L1181.89 1214.6 L1182.47 1214.6 L1183.06 1214.6 L1183.65 1214.6 L1184.23 1214.6 L1184.82 1214.6 L1185.41 1214.6 L1185.99 1214.6 L1186.58 1214.6 L1187.16 1214.6 L1187.75 1214.6 L1188.34 1214.6 L1188.92 1214.6 L1189.51 1214.6 L1190.1 1214.6 L1190.68 1214.6 L1191.27 1214.6 L1191.86 1214.6 L1192.44 1214.6 L1193.03 1214.6 L1193.62 1214.6 L1194.2 1214.6 L1194.79 1214.6 L1195.37 1214.6 L1195.96 1214.6 L1196.55 1214.6 L1197.13 1214.6 L1197.72 1214.6 L1198.31 1214.6 L1198.89 1214.6 L1199.48 1214.6 L1200.07 1214.6 L1200.65 1214.6 L1201.24 1214.6 L1201.83 1214.6 L1202.41 1214.6 L1203 1214.6 L1203.58 1214.6 L1204.17 1214.6 L1204.76 1214.6 L1205.34 1214.6 L1205.93 1214.6 L1206.52 1214.6 L1207.1 1214.6 L1207.69 1214.6 L1208.28 1214.6 L1208.86 1214.6 L1209.45 1214.6 L1210.03 1214.6 L1210.62 1214.6 L1211.21 1214.6 L1211.79 1214.6 L1212.38 1214.6 L1212.97 1214.6 L1213.55 1214.6 L1214.14 1214.6 L1214.73 1214.6 L1215.31 1214.6 L1215.9 1214.6 L1216.49 1214.6 L1217.07 1214.6 L1217.66 1214.6 L1218.24 1214.6 L1218.83 1214.6 L1219.42 1214.6 L1220 1214.6 L1220.59 1214.6 L1221.18 1214.6 L1221.76 1214.6 L1222.35 1214.6 L1222.94 1214.6 L1223.52 1214.6 L1224.11 1214.6 L1224.7 1214.6 L1225.28 1214.6 L1225.87 1214.6 L1226.45 1214.6 L1227.04 1214.6 L1227.63 1214.6 L1228.21 1214.6 L1228.8 1214.6 L1229.39 1214.6 L1229.97 1214.6 L1230.56 1214.6 L1231.15 1214.6 L1231.73 1214.6 L1232.32 1214.6 L1232.91 1214.6 L1233.49 1214.6 L1234.08 1214.6 L1234.66 1214.6 L1235.25 1214.6 L1235.84 1214.6 L1236.42 1214.6 L1237.01 1214.6 L1237.6 1214.6 L1238.18 1214.6 L1238.77 1214.6 L1239.36 1214.6 L1239.94 1214.6 L1240.53 1214.6 L1241.11 1214.6 L1241.7 1214.6 L1242.29 1214.6 L1242.87 1214.6 L1243.46 1214.6 L1244.05 1214.6 L1244.63 1214.6 L1245.22 1214.6 L1245.81 1214.6 L1246.39 1214.6 L1246.98 1214.6 L1247.57 1214.6 L1248.15 1214.6 L1248.74 1214.6 L1249.32 1214.6 L1249.91 1214.6 L1250.5 1214.6 L1251.08 1214.6 L1251.67 1214.6 L1252.26 1214.6 L1252.84 1214.6 L1253.43 1214.6 L1254.02 1214.6 L1254.6 1214.6 L1255.19 1214.6 L1255.78 1214.6 L1256.36 1214.6 L1256.95 1214.6 L1257.53 1214.6 L1258.12 1214.6 L1258.71 1214.6 L1259.29 1214.6 L1259.88 1214.6 L1260.47 1214.6 L1261.05 1214.6 L1261.64 1214.6 L1262.23 1214.6 L1262.81 1214.6 L1263.4 1214.6 L1263.98 1214.6 L1264.57 1214.6 L1265.16 1214.6 L1265.74 1214.6 L1266.33 1214.6 L1266.92 1214.6 L1267.5 1214.6 L1268.09 1214.6 L1268.68 1214.6 L1269.26 1214.6 L1269.85 1214.6 L1270.44 1214.6 L1271.02 1214.6 L1271.61 1214.6 L1272.19 1214.6 L1272.78 1214.6 L1273.37 1214.6 L1273.95 1214.6 L1274.54 1214.6 L1275.13 1214.6 L1275.71 1214.6 L1276.3 1214.6 L1276.89 1214.6 L1277.47 1214.6 L1278.06 1214.6 L1278.65 1214.6 L1279.23 1214.6 L1279.82 1214.6 L1280.4 1214.6 L1280.99 1214.6 L1281.58 1214.6 L1282.16 1214.6 L1282.75 1214.6 L1283.34 1214.6 L1283.92 1214.6 L1284.51 1214.6 L1285.1 1214.6 L1285.68 1214.6 L1286.27 1214.6 L1286.86 1214.6 L1287.44 1214.6 L1288.03 1214.6 L1288.61 1214.6 L1289.2 1214.6 L1289.79 1214.6 L1290.37 1214.6 L1290.96 1214.6 L1291.55 1214.6 L1292.13 1214.6 L1292.72 1214.6 L1293.31 1214.6 L1293.89 1214.6 L1294.48 1214.6 L1295.06 1214.6 L1295.65 1214.6 L1296.24 1214.6 L1296.82 1214.6 L1297.41 1214.6 L1298 1214.6 L1298.58 1214.6 L1299.17 1214.6 L1299.76 1214.6 L1300.34 1214.6 L1300.93 1214.6 L1301.52 1214.6 L1302.1 1214.6 L1302.69 1214.6 L1303.27 1214.6 L1303.86 1214.6 L1304.45 1214.6 L1305.03 1214.6 L1305.62 1214.6 L1306.21 1214.6 L1306.79 1214.6 L1307.38 1214.6 L1307.97 1214.6 L1308.55 1214.6 L1309.14 1214.6 L1309.73 1214.6 L1310.31 1214.6 L1310.9 1214.6 L1311.48 1214.6 L1312.07 1214.6 L1312.66 1214.6 L1313.24 1214.6 L1313.83 1214.6 L1314.42 1214.6 L1315 1214.6 L1315.59 1214.6 L1316.18 1214.6 L1316.76 1214.6 L1317.35 1214.6 L1317.93 1214.6 L1318.52 1214.6 L1319.11 1214.6 L1319.69 1214.6 L1320.28 1214.6 L1320.87 1214.6 L1321.45 1214.6 L1322.04 1214.6 L1322.63 1214.6 L1323.21 1214.6 L1323.8 1214.6 L1324.39 1214.6 L1324.97 1214.6 L1325.56 1214.6 L1326.14 1214.6 L1326.73 1214.6 L1327.32 1214.6 L1327.9 1214.6 L1328.49 1214.6 L1329.08 1214.6 L1329.66 1214.6 L1330.25 1214.6 L1330.84 1214.6 L1331.42 1214.6 L1332.01 1214.6 L1332.6 1214.6 L1333.18 1214.6 L1333.77 1214.6 L1334.35 1214.6 L1334.94 1214.6 L1335.53 1214.6 L1336.11 1214.6 L1336.7 1214.6 L1337.29 1214.6 L1337.87 1214.6 L1338.46 1214.6 L1339.05 1214.6 L1339.63 1214.6 L1340.22 1214.6 L1340.8 1214.6 L1341.39 1214.6 L1341.98 1214.6 L1342.56 1214.6 L1343.15 1214.6 L1343.74 1214.6 L1344.32 1214.6 L1344.91 1214.6 L1345.5 1214.6 L1346.08 1214.6 L1346.67 1214.6 L1347.26 1214.6 L1347.84 1214.6 L1348.43 1214.6 L1349.01 1214.6 L1349.6 1214.6 L1350.19 1214.6 L1350.77 1214.6 L1351.36 1214.6 L1351.95 1214.6 L1352.53 1214.6 L1353.12 1214.6 L1353.71 1214.6 L1354.29 1214.6 L1354.88 1214.6 L1355.47 1214.6 L1356.05 1214.6 L1356.64 1214.6 L1357.22 1214.6 L1357.81 1214.6 L1358.4 1214.6 L1358.98 1214.6 L1359.57 1214.6 L1360.16 1214.6 L1360.74 1214.6 L1361.33 1214.6 L1361.92 1214.6 L1362.5 1214.6 L1363.09 1214.6 L1363.68 1214.6 L1364.26 1214.6 L1364.85 1214.6 L1365.43 1214.6 L1366.02 1214.6 L1366.61 1214.6 L1367.19 1214.6 L1367.78 1214.6 L1368.37 1214.6 L1368.95 1214.6 L1369.54 1214.6 L1370.13 1214.6 L1370.71 1214.6 L1371.3 1214.6 L1371.88 1214.6 L1372.47 1214.6 L1373.06 1214.6 L1373.64 1214.6 L1374.23 1214.6 L1374.82 1214.6 L1375.4 1214.6 L1375.99 1214.6 L1376.58 1214.6 L1377.16 1214.6 L1377.75 1214.6 L1378.34 1214.6 L1378.92 1214.6 L1379.51 1214.6 L1380.09 1214.6 L1380.68 1214.6 L1381.27 1214.6 L1381.85 1214.6 L1382.44 1214.6 L1383.03 1214.6 L1383.61 1214.6 L1384.2 1214.6 L1384.79 1214.6 L1385.37 1214.6 L1385.96 1214.6 L1386.55 1214.6 L1387.13 1214.6 L1387.72 1214.6 L1388.3 1214.6 L1388.89 1214.6 L1389.48 1214.6 L1390.06 1214.6 L1390.65 1214.6 L1391.24 1214.6 L1391.82 1214.6 L1392.41 1214.6 L1393 1214.6 L1393.58 1214.6 L1394.17 1214.6 L1394.75 1214.6 L1395.34 1214.6 L1395.93 1214.6 L1396.51 1214.6 L1397.1 1214.6 L1397.69 1214.6 L1398.27 1214.6 L1398.86 1214.6 L1399.45 1214.6 L1400.03 1214.6 L1400.62 1214.6 L1401.21 1214.6 L1401.79 1214.6 L1402.38 1214.6 L1402.96 1214.6 L1403.55 1214.6 L1404.14 1214.6 L1404.72 1214.6 L1405.31 1214.6 L1405.9 1214.6 L1406.48 1214.6 L1407.07 1214.6 L1407.66 1214.6 L1408.24 1214.6 L1408.83 1214.6 L1409.42 1214.6 L1410 1214.6 L1410.59 1214.6 L1411.17 1214.6 L1411.76 1214.6 L1412.35 1214.6 L1412.93 1214.6 L1413.52 1214.6 L1414.11 1214.6 L1414.69 1214.6 L1415.28 1214.6 L1415.87 1214.6 L1416.45 1214.6 L1417.04 1214.6 L1417.63 1214.6 L1418.21 1214.6 L1418.8 1214.6 L1419.38 1214.6 L1419.97 1214.6 L1420.56 1214.6 L1421.14 1214.6 L1421.73 1214.6 L1422.32 1214.6 L1422.9 1214.6 L1423.49 1214.6 L1424.08 1214.6 L1424.66 1214.6 L1425.25 1214.6 L1425.83 1214.6 L1426.42 1214.6 L1427.01 1214.6 L1427.59 1214.6 L1428.18 1214.6 L1428.77 1214.6 L1429.35 1214.6 L1429.94 1214.6 L1430.53 1214.6 L1431.11 1214.6 L1431.7 1214.6 L1432.29 1214.6 L1432.87 1214.6 L1433.46 1214.6 L1434.04 1214.6 L1434.63 1214.6 L1435.22 1214.6 L1435.8 1214.6 L1436.39 1214.6 L1436.98 1214.6 L1437.56 1214.6 L1438.15 1214.6 L1438.74 1214.6 L1439.32 1214.6 L1439.91 1214.6 L1440.5 1214.6 L1441.08 1214.6 L1441.67 1214.6 L1442.25 1214.6 L1442.84 1214.6 L1443.43 1214.6 L1444.01 1214.6 L1444.6 1214.6 L1445.19 1214.6 L1445.77 1214.6 L1446.36 1214.6 L1446.95 1214.6 L1447.53 1214.6 L1448.12 1214.6 L1448.7 1214.6 L1449.29 1214.6 L1449.88 1214.6 L1450.46 1214.6 L1451.05 1214.6 L1451.64 1214.6 L1452.22 1214.6 L1452.81 1214.6 L1453.4 1214.6 L1453.98 1214.6 L1454.57 1214.6 L1455.16 1214.6 L1455.74 1214.6 L1456.33 1214.6 L1456.91 1214.6 L1457.5 1214.6 L1458.09 1214.6 L1458.67 1214.6 L1459.26 1214.6 L1459.85 1214.6 L1460.43 1214.6 L1461.02 1214.6 L1461.61 1214.6 L1462.19 1214.6 L1462.78 1214.6 L1463.37 1214.6 L1463.95 1214.6 L1464.54 1214.6 L1465.12 1214.6 L1465.71 1214.6 L1466.3 1214.6 L1466.88 1214.6 L1467.47 1214.6 L1468.06 1214.6 L1468.64 1214.6 L1469.23 1214.6 L1469.82 1214.6 L1470.4 1214.6 L1470.99 1214.6 L1471.57 1214.6 L1472.16 1214.6 L1472.75 1214.6 L1473.33 1214.6 L1473.92 1214.6 L1474.51 1214.6 L1475.09 1214.6 L1475.68 1214.6 L1476.27 1214.6 L1476.85 1214.6 L1477.44 1214.6 L1478.03 1214.6 L1478.61 1214.6 L1479.2 1214.6 L1479.78 1214.6 L1480.37 1214.6 L1480.96 1214.6 L1481.54 1214.6 L1482.13 1214.6 L1482.72 1214.6 L1483.3 1214.6 L1483.89 1214.6 L1484.48 1214.6 L1485.06 1214.6 L1485.65 1214.6 L1486.24 1214.6 L1486.82 1214.6 L1487.41 1214.6 L1487.99 1214.6 L1488.58 1214.6 L1489.17 1214.6 L1489.75 1214.6 L1490.34 1214.6 L1490.93 1214.6 L1491.51 1214.6 L1492.1 1214.6 L1492.69 1214.6 L1493.27 1214.6 L1493.86 1214.6 L1494.45 1214.6 L1495.03 1214.6 L1495.62 1214.6 L1496.2 1214.6 L1496.79 1214.6 L1497.38 1214.6 L1497.96 1214.6 L1498.55 1214.6 L1499.14 1214.6 L1499.72 1214.6 L1500.31 1214.6 L1500.9 1214.6 L1501.48 1214.6 L1502.07 1214.6 L1502.65 1214.6 L1503.24 1214.6 L1503.83 1214.6 L1504.41 1214.6 L1505 1214.6 L1505.59 1214.6 L1506.17 1214.6 L1506.76 1214.6 L1507.35 1214.6 L1507.93 1214.6 L1508.52 1214.6 L1509.11 1214.6 L1509.69 1214.6 L1510.28 1214.6 L1510.86 1214.6 L1511.45 1214.6 L1512.04 1214.6 L1512.62 1214.6 L1513.21 1214.6 L1513.8 1214.6 L1514.38 1214.6 L1514.97 1214.6 L1515.56 1214.6 L1516.14 1214.6 L1516.73 1214.6 L1517.32 1214.6 L1517.9 1214.6 L1518.49 1214.6 L1519.07 1214.6 L1519.66 1214.6 L1520.25 1214.6 L1520.83 1214.6 L1521.42 1214.6 L1522.01 1214.6 L1522.59 1214.6 L1523.18 1214.6 L1523.77 1214.6 L1524.35 1214.6 L1524.94 1214.6 L1525.52 1214.6 L1526.11 1214.6 L1526.7 1214.6 L1527.28 1214.6 L1527.87 1214.6 L1528.46 1214.6 L1529.04 1214.6 L1529.63 1214.6 L1530.22 1214.6 L1530.8 1214.6 L1531.39 1214.6 L1531.98 1214.6 L1532.56 1214.6 L1533.15 1214.6 L1533.73 1214.6 L1534.32 1214.6 L1534.91 1214.6 L1535.49 1214.6 L1536.08 1214.6 L1536.67 1214.6 L1537.25 1214.6 L1537.84 1214.6 L1538.43 1214.6 L1539.01 1214.6 L1539.6 1214.6 L1540.19 1214.6 L1540.77 1214.6 L1541.36 1214.6 L1541.94 1214.6 L1542.53 1214.6 L1543.12 1214.6 L1543.7 1214.6 L1544.29 1214.6 L1544.88 1214.6 L1545.46 1214.6 L1546.05 1214.6 L1546.64 1214.6 L1547.22 1214.6 L1547.81 1214.6 L1548.4 1214.6 L1548.98 1214.6 L1549.57 1214.6 L1550.15 1214.6 L1550.74 1214.6 L1551.33 1214.6 L1551.91 1214.6 L1552.5 1214.6 L1553.09 1214.6 L1553.67 1214.6 L1554.26 1214.6 L1554.85 1214.6 L1555.43 1214.6 L1556.02 1214.6 L1556.6 1214.6 L1557.19 1214.6 L1557.78 1214.6 L1558.36 1214.6 L1558.95 1214.6 L1559.54 1214.6 L1560.12 1214.6 L1560.71 1214.6 L1561.3 1214.6 L1561.88 1214.6 L1562.47 1214.6 L1563.06 1214.6 L1563.64 1214.6 L1564.23 1214.6 L1564.81 1214.6 L1565.4 1214.6 L1565.99 1214.6 L1566.57 1214.6 L1567.16 1214.6 L1567.75 1214.6 L1568.33 1214.6 L1568.92 1214.6 L1569.51 1214.6 L1570.09 1214.6 L1570.68 1214.6 L1571.27 1214.6 L1571.85 1214.6 L1572.44 1214.6 L1573.02 1214.6 L1573.61 1214.6 L1574.2 1214.6 L1574.78 1214.6 L1575.37 1214.6 L1575.96 1214.6 L1576.54 1214.6 L1577.13 1214.6 L1577.72 1214.6 L1578.3 1214.6 L1578.89 1214.6 L1579.47 1214.6 L1580.06 1214.6 L1580.65 1214.6 L1581.23 1214.6 L1581.82 1214.6 L1582.41 1214.6 L1582.99 1214.6 L1583.58 1214.6 L1584.17 1214.6 L1584.75 1214.6 L1585.34 1214.6 L1585.93 1214.6 L1586.51 1214.6 L1587.1 1214.6 L1587.68 1214.6 L1588.27 1214.6 L1588.86 1214.6 L1589.44 1214.6 L1590.03 1214.6 L1590.62 1214.6 L1591.2 1214.6 L1591.79 1214.6 L1592.38 1214.6 L1592.96 1214.6 L1593.55 1214.6 L1594.14 1214.6 L1594.72 1214.6 L1595.31 1214.6 L1595.89 1214.6 L1596.48 1214.6 L1597.07 1214.6 L1597.65 1214.6 L1598.24 1214.6 L1598.83 1214.6 L1599.41 1214.6 L1600 1214.6 L1600.59 1214.6 L1601.17 1214.6 L1601.76 1214.6 L1602.34 1214.6 L1602.93 1214.6 L1603.52 1214.6 L1604.1 1214.6 L1604.69 1214.6 L1605.28 1214.6 L1605.86 1214.6 L1606.45 1214.6 L1607.04 1214.6 L1607.62 1214.6 L1608.21 1214.6 L1608.8 1214.6 L1609.38 1214.6 L1609.97 1214.6 L1610.55 1214.6 L1611.14 1214.6 L1611.73 1214.6 L1612.31 1214.6 L1612.9 1214.6 L1613.49 1214.6 L1614.07 1214.6 L1614.66 1214.6 L1615.25 1214.6 L1615.83 1214.6 L1616.42 1214.6 L1617.01 1214.6 L1617.59 1214.6 L1618.18 1214.6 L1618.76 1214.6 L1619.35 1214.6 L1619.94 1214.6 L1620.52 1214.6 L1621.11 1214.6 L1621.7 1214.6 L1622.28 1214.6 L1622.87 1214.6 L1623.46 1214.6 L1624.04 1214.6 L1624.63 1214.6 L1625.22 1214.6 L1625.8 1214.6 L1626.39 1214.6 L1626.97 1214.6 L1627.56 1214.6 L1628.15 1214.6 L1628.73 1214.6 L1629.32 1214.6 L1629.91 1214.6 L1630.49 1214.6 L1631.08 1214.6 L1631.67 1214.6 L1632.25 1214.6 L1632.84 1214.6 L1633.42 1214.6 L1634.01 1214.6 L1634.6 1214.6 L1635.18 1214.6 L1635.77 1214.6 L1636.36 1214.6 L1636.94 1214.6 L1637.53 1214.6 L1638.12 1214.6 L1638.7 1214.6 L1639.29 1214.6 L1639.88 1214.6 L1640.46 1214.6 L1641.05 1214.6 L1641.63 1214.6 L1642.22 1214.6 L1642.81 1214.6 L1643.39 1214.6 L1643.98 1214.6 L1644.57 1214.6 L1645.15 1214.6 L1645.74 1214.6 L1646.33 1214.6 L1646.91 1214.6 L1647.5 1214.6 L1648.09 1214.6 L1648.67 1214.6 L1649.26 1214.6 L1649.84 1214.6 L1650.43 1214.6 L1651.02 1214.6 L1651.6 1214.6 L1652.19 1214.6 L1652.78 1214.6 L1653.36 1214.6 L1653.95 1214.6 L1654.54 1214.6 L1655.12 1214.6 L1655.71 1214.6 L1656.29 1214.6 L1656.88 1214.6 L1657.47 1214.6 L1658.05 1214.6 L1658.64 1214.6 L1659.23 1214.6 L1659.81 1214.6 L1660.4 1214.6 L1660.99 1214.6 L1661.57 1214.6 L1662.16 1214.6 L1662.75 1214.6 L1663.33 1214.6 L1663.92 1214.6 L1664.5 1214.6 L1665.09 1214.6 L1665.68 1214.6 L1666.26 1214.6 L1666.85 1214.6 L1667.44 1214.6 L1668.02 1214.6 L1668.61 1214.6 L1669.2 1214.6 L1669.78 1214.6 L1670.37 1214.6 L1670.96 1214.6 L1671.54 1214.6 L1672.13 1214.6 L1672.71 1214.6 L1673.3 1214.6 L1673.89 1214.6 L1674.47 1214.6 L1675.06 1214.6 L1675.65 1214.6 L1676.23 1214.6 L1676.82 1214.6 L1677.41 1214.6 L1677.99 1214.6 L1678.58 1214.6 L1679.17 1214.6 L1679.75 1214.6 L1680.34 1214.6 L1680.92 1214.6 L1681.51 1214.6 L1682.1 1214.6 L1682.68 1214.6 L1683.27 1214.6 L1683.86 1214.6 L1684.44 1214.6 L1685.03 1214.6 L1685.62 1214.6 L1686.2 1214.6 L1686.79 1214.6 L1687.37 1214.6 L1687.96 1214.6 L1688.55 1214.6 L1689.13 1214.6 L1689.72 1214.6 L1690.31 1214.6 L1690.89 1214.6 L1691.48 1214.6 L1692.07 1214.6 L1692.65 1214.6 L1693.24 1214.6 L1693.83 1214.6 L1694.41 1214.6 L1695 1214.6 L1695.58 1214.6 L1696.17 1214.6 L1696.76 1214.6 L1697.34 1214.6 L1697.93 1214.6 L1698.52 1214.6 L1699.1 1214.6 L1699.69 1214.6 L1700.28 1214.6 L1700.86 1214.6 L1701.45 1214.6 L1702.04 1214.6 L1702.62 1214.6 L1703.21 1214.6 L1703.79 1214.6 L1704.38 1214.6 L1704.97 1214.6 L1705.55 1214.6 L1706.14 1214.6 L1706.73 1214.6 L1707.31 1214.6 L1707.9 1214.6 L1708.49 1214.6 L1709.07 1214.6 L1709.66 1214.6 L1710.24 1214.6 L1710.83 1214.6 L1711.42 1214.6 L1712 1214.6 L1712.59 1214.6 L1713.18 1214.6 L1713.76 1214.6 L1714.35 1214.6 L1714.94 1214.6 L1715.52 1214.6 L1716.11 1214.6 L1716.7 1214.6 L1717.28 1214.6 L1717.87 1214.6 L1718.45 1214.6 L1719.04 1214.6 L1719.63 1214.6 L1720.21 1214.6 L1720.8 1214.6 L1721.39 1214.6 L1721.97 1214.6 L1722.56 1214.6 L1723.15 1214.6 L1723.73 1214.6 L1724.32 1214.6 L1724.91 1214.6 L1725.49 1214.6 L1726.08 1214.6 L1726.66 1214.6 L1727.25 1214.6 L1727.84 1214.6 L1728.42 1214.6 L1729.01 1214.6 L1729.6 1214.6 L1730.18 1214.6 L1730.77 1214.6 L1731.36 1214.6 L1731.94 1214.6 L1732.53 1214.6 L1733.11 1214.6 L1733.7 1214.6 L1734.29 1214.6 L1734.87 1214.6 L1735.46 1214.6 L1736.05 1214.6 L1736.63 1214.6 L1737.22 1214.6 L1737.81 1214.6 L1738.39 1214.6 L1738.98 1214.6 L1739.57 1214.6 L1740.15 1214.6 L1740.74 1214.6 L1741.32 1214.6 L1741.91 1214.6 L1742.5 1214.6 L1743.08 1214.6 L1743.67 1214.6 L1744.26 1214.6 L1744.84 1214.6 L1745.43 1214.6 L1746.02 1214.6 L1746.6 1214.6 L1747.19 1214.6 L1747.78 1214.6 L1748.36 1214.6 L1748.95 1214.6 L1749.53 1214.6 L1750.12 1214.6 L1750.71 1214.6 L1751.29 1214.6 L1751.88 1214.6 L1752.47 1214.6 L1753.05 1214.6 L1753.64 1214.6 L1754.23 1214.6 L1754.81 1214.6 L1755.4 1214.6 L1755.99 1214.6 L1756.57 1214.6 L1757.16 1214.6 L1757.74 1214.6 L1758.33 1214.6 L1758.92 1214.6 L1759.5 1214.6 L1760.09 1214.6 L1760.68 1214.6 L1761.26 1214.6 L1761.85 1214.6 L1762.44 1214.6 L1763.02 1214.6 L1763.61 1214.6 L1764.19 1214.6 L1764.78 1214.6 L1765.37 1214.6 L1765.95 1214.6 L1766.54 1214.6 L1767.13 1214.6 L1767.71 1214.6 L1768.3 1214.6 L1768.89 1214.6 L1769.47 1214.6 L1770.06 1214.6 L1770.65 1214.6 L1771.23 1214.6 L1771.82 1214.6 L1772.4 1214.6 L1772.99 1214.6 L1773.58 1214.6 L1774.16 1214.6 L1774.75 1214.6 L1775.34 1214.6 L1775.92 1214.6 L1776.51 1214.6 L1777.1 1214.6 L1777.68 1214.6 L1778.27 1214.6 L1778.86 1214.6 L1779.44 1214.6 L1780.03 1214.6 L1780.61 1214.6 L1781.2 1214.6 L1781.79 1214.6 L1782.37 1214.6 L1782.96 1214.6 L1783.55 1214.6 L1784.13 1214.6 L1784.72 1214.6 L1785.31 1214.6 L1785.89 1214.6 L1786.48 1214.6 L1787.06 1214.6 L1787.65 1214.6 L1788.24 1214.6 L1788.82 1214.6 L1789.41 1214.6 L1790 1214.6 L1790.58 1214.6 L1791.17 1214.6 L1791.76 1214.6 L1792.34 1214.6 L1792.93 1214.6 L1793.52 1214.6 L1794.1 1214.6 L1794.69 1214.6 L1795.27 1214.6 L1795.86 1214.6 L1796.45 1214.6 L1797.03 1214.6 L1797.62 1214.6 L1798.21 1214.6 L1798.79 1214.6 L1799.38 1214.6 L1799.97 1214.6 L1800.55 1214.6 L1801.14 1214.6 L1801.73 1214.6 L1802.31 1214.6 L1802.9 1214.6 L1803.48 1214.6 L1804.07 1214.6 L1804.66 1214.6 L1805.24 1214.6 L1805.83 1214.6 L1806.42 1214.6 L1807 1214.6 L1807.59 1214.6 L1808.18 1214.6 L1808.76 1214.6 L1809.35 1214.6 L1809.94 1214.6 L1810.52 1214.6 L1811.11 1214.6 L1811.69 1214.6 L1812.28 1214.6 L1812.87 1214.6 L1813.45 1214.6 L1814.04 1214.6 L1814.63 1214.6 L1815.21 1214.6 L1815.8 1214.6 L1816.39 1214.6 L1816.97 1214.6 L1817.56 1214.6 L1818.14 1214.6 L1818.73 1214.6 L1819.32 1214.6 L1819.9 1214.6 L1820.49 1214.6 L1821.08 1214.6 L1821.66 1214.6 L1822.25 1214.6 L1822.84 1214.6 L1823.42 1214.6 L1824.01 1214.6 L1824.6 1214.6 L1825.18 1214.6 L1825.77 1214.6 L1826.35 1214.6 L1826.94 1214.6 L1827.53 1214.6 L1828.11 1214.6 L1828.7 1214.6 L1829.29 1214.6 L1829.87 1214.6 L1830.46 1214.6 L1831.05 1214.6 L1831.63 1214.6 L1832.22 1214.6 L1832.81 1214.6 L1833.39 1214.6 L1833.98 1214.6 L1834.56 1214.6 L1835.15 1214.6 L1835.74 1214.6 L1836.32 1214.6 L1836.91 1214.6 L1837.5 1214.6 L1838.08 1214.6 L1838.67 1214.6 L1839.26 1214.6 L1839.84 1214.6 L1840.43 1214.6 L1841.01 1214.6 L1841.6 1214.6 L1842.19 1214.6 L1842.77 1214.6 L1843.36 1214.6 L1843.95 1214.6 L1844.53 1214.6 L1845.12 1214.6 L1845.71 1214.6 L1846.29 1214.6 L1846.88 1214.6 L1847.47 1214.6 L1848.05 1214.6 L1848.64 1214.6 L1849.22 1214.6 L1849.81 1214.6 L1850.4 1214.6 L1850.98 1214.6 L1851.57 1214.6 L1852.16 1214.6 L1852.74 1214.6 L1853.33 1214.6 L1853.92 1214.6 L1854.5 1214.6 L1855.09 1214.6 L1855.68 1214.6 L1856.26 1214.6 L1856.85 1214.6 L1857.43 1214.6 L1858.02 1214.6 L1858.61 1214.6 L1859.19 1214.6 L1859.78 1214.6 L1860.37 1214.6 L1860.95 1214.6 L1861.54 1214.6 L1862.13 1214.6 L1862.71 1214.6 L1863.3 1214.6 L1863.88 1214.6 L1864.47 1214.6 L1865.06 1214.6 L1865.64 1214.6 L1866.23 1214.6 L1866.82 1214.6 L1867.4 1214.6 L1867.99 1214.6 L1868.58 1214.6 L1869.16 1214.6 L1869.75 1214.6 L1870.34 1214.6 L1870.92 1214.6 L1871.51 1214.6 L1872.09 1214.6 L1872.68 1214.6 L1873.27 1214.6 L1873.85 1214.6 L1874.44 1214.6 L1875.03 1214.6 L1875.61 1214.6 L1876.2 1214.6 L1876.79 1214.6 L1877.37 1214.6 L1877.96 1214.6 L1878.55 1214.6 L1879.13 1214.6 L1879.72 1214.6 L1880.3 1214.6 L1880.89 1214.6 L1881.48 1214.6 L1882.06 1214.6 L1882.65 1214.6 L1883.24 1214.6 L1883.82 1214.6 L1884.41 1214.6 L1885 1214.6 L1885.58 1214.6 L1886.17 1214.6 L1886.76 1214.6 L1887.34 1214.6 L1887.93 1214.6 L1888.51 1214.6 L1889.1 1214.6 L1889.69 1214.6 L1890.27 1214.6 L1890.86 1214.6 L1891.45 1214.6 L1892.03 1214.6 L1892.62 1214.6 L1893.21 1214.6 L1893.79 1214.6 L1894.38 1214.6 L1894.96 1214.6 L1895.55 1214.6 L1896.14 1214.6 L1896.72 1214.6 L1897.31 1214.6 L1897.9 1214.6 L1898.48 1214.6 L1899.07 1214.6 L1899.66 1214.6 L1900.24 1214.6 L1900.83 1214.6 L1901.42 1214.6 L1902 1214.6 L1902.59 1214.6 L1903.17 1214.6 L1903.76 1214.6 L1904.35 1214.6 L1904.93 1214.6 L1905.52 1214.6 L1906.11 1214.6 L1906.69 1214.6 L1907.28 1214.6 L1907.87 1214.6 L1908.45 1214.6 L1909.04 1214.6 L1909.63 1214.6 L1910.21 1214.6 L1910.8 1214.6 L1911.38 1214.6 L1911.97 1214.6 L1912.56 1214.6 L1913.14 1214.6 L1913.73 1214.6 L1914.32 1214.6 L1914.9 1214.6 L1915.49 1214.6 L1916.08 1214.6 L1916.66 1214.6 L1917.25 1214.6 L1917.83 1214.6 L1918.42 1214.6 L1919.01 1214.6 L1919.59 1214.6 L1920.18 1214.6 L1920.77 1214.6 L1921.35 1214.6 L1921.94 1214.6 L1922.53 1214.6 L1923.11 1214.6 L1923.7 1214.6 L1924.29 1214.6 L1924.87 1214.6 L1925.46 1214.6 L1926.04 1214.6 L1926.63 1214.6 L1927.22 1214.6 L1927.8 1214.6 L1928.39 1214.6 L1928.98 1214.6 L1929.56 1214.6 L1930.15 1214.6 L1930.74 1214.6 L1931.32 1214.6 L1931.91 1214.6 L1932.5 1214.6 L1933.08 1214.6 L1933.67 1214.6 L1934.25 1214.6 L1934.84 1214.6 L1935.43 1214.6 L1936.01 1214.6 L1936.6 1214.6 L1937.19 1214.6 L1937.77 1214.6 L1938.36 1214.6 L1938.95 1214.6 L1939.53 1214.6 L1940.12 1214.6 L1940.71 1214.6 L1941.29 1214.6 L1941.88 1214.6 L1942.46 1214.6 L1943.05 1214.6 L1943.64 1214.6 L1944.22 1214.6 L1944.81 1214.6 L1945.4 1214.6 L1945.98 1214.6 L1946.57 1214.6 L1947.16 1214.6 L1947.74 1214.6 L1948.33 1214.6 L1948.91 1214.6 L1949.5 1214.6 L1950.09 1214.6 L1950.67 1214.6 L1951.26 1214.6 L1951.85 1214.6 L1952.43 1214.6 L1953.02 1214.6 L1953.61 1214.6 L1954.19 1214.6 L1954.78 1214.6 L1955.37 1214.6 L1955.95 1214.6 L1956.54 1214.6 L1957.12 1214.6 L1957.71 1214.6 L1958.3 1214.6 L1958.88 1214.6 L1959.47 1214.6 L1960.06 1214.6 L1960.64 1214.6 L1961.23 1214.6 L1961.82 1214.6 L1962.4 1214.6 L1962.99 1214.6 L1963.58 1214.6 L1964.16 1214.6 L1964.75 1214.6 L1965.33 1214.6 L1965.92 1214.6 L1966.51 1214.6 L1967.09 1214.6 L1967.68 1214.6 L1968.27 1214.6 L1968.85 1214.6 L1969.44 1214.6 L1970.03 1214.6 L1970.61 1214.6 L1971.2 1214.6 L1971.78 1214.6 L1972.37 1214.6 L1972.96 1214.6 L1973.54 1214.6 L1974.13 1214.6 L1974.72 1214.6 L1975.3 1214.6 L1975.89 1214.6 L1976.48 1214.6 L1977.06 1214.6 L1977.65 1214.6 L1978.24 1214.6 L1978.82 1214.6 L1979.41 1214.6 L1979.99 1214.6 L1980.58 1214.6 L1981.17 1214.6 L1981.75 1214.6 L1982.34 1214.6 L1982.93 1214.6 L1983.51 1214.6 L1984.1 1214.6 L1984.69 1214.6 L1985.27 1214.6 L1985.86 1214.6 L1986.45 1214.6 L1987.03 1214.6 L1987.62 1214.6 L1988.2 1214.6 L1988.79 1214.6 L1989.38 1214.6 L1989.96 1214.6 L1990.55 1214.6 L1991.14 1214.6 L1991.72 1214.6 L1992.31 1214.6 L1992.9 1214.6 L1993.48 1214.6 L1994.07 1214.6 L1994.65 1214.6 L1995.24 1214.6 L1995.83 1214.6 L1996.41 1214.6 L1997 1214.6 L1997.59 1214.6 L1998.17 1214.6 L1998.76 1214.6 L1999.35 1214.6 L1999.93 1214.6 L2000.52 1214.6 L2001.11 1214.6 L2001.69 1214.6 L2002.28 1214.6 L2002.86 1214.6 L2003.45 1214.6 L2004.04 1214.6 L2004.62 1214.6 L2005.21 1214.6 L2005.8 1214.6 L2006.38 1214.6 L2006.97 1214.6 L2007.56 1214.6 L2008.14 1214.6 L2008.73 1214.6 L2009.32 1214.6 L2009.9 1214.6 L2010.49 1214.6 L2011.07 1214.6 L2011.66 1214.6 L2012.25 1214.6 L2012.83 1214.6 L2013.42 1214.6 L2014.01 1214.6 L2014.59 1214.6 L2015.18 1214.6 L2015.77 1214.6 L2016.35 1214.6 L2016.94 1214.6 L2017.53 1214.6 L2018.11 1214.6 L2018.7 1214.6 L2019.28 1214.6 L2019.87 1214.6 L2020.46 1214.6 L2021.04 1214.6 L2021.63 1214.6 L2022.22 1214.6 L2022.8 1214.6 L2023.39 1214.6 L2023.98 1214.6 L2024.56 1214.6 L2025.15 1214.6 L2025.73 1214.6 L2026.32 1214.6 L2026.91 1214.6 L2027.49 1214.6 L2028.08 1214.6 L2028.67 1214.6 L2029.25 1214.6 L2029.84 1214.6 L2030.43 1214.6 L2031.01 1214.6 L2031.6 1214.6 L2032.19 1214.6 L2032.77 1214.6 L2033.36 1214.6 L2033.94 1214.6 L2034.53 1214.6 L2035.12 1214.6 L2035.7 1214.6 L2036.29 1214.6 L2036.88 1214.6 L2037.46 1214.6 L2038.05 1214.6 L2038.64 1214.6 L2039.22 1214.6 L2039.81 1214.6 L2040.4 1214.6 L2040.98 1214.6 L2041.57 1214.6 L2042.15 1214.6 L2042.74 1214.6 L2043.33 1214.6 L2043.91 1214.6 L2044.5 1214.6 L2045.09 1214.6 L2045.67 1214.6 L2046.26 1214.6 L2046.85 1214.6 L2047.43 1214.6 L2048.02 1214.6 L2048.6 1214.6 L2049.19 1214.6 L2049.78 1214.6 L2050.36 1214.6 L2050.95 1214.6 L2051.54 1214.6 L2052.12 1214.6 L2052.71 1214.6 L2053.3 1214.6 L2053.88 1214.6 L2054.47 1214.6 L2055.06 1214.6 L2055.64 1214.6 L2056.23 1214.6 L2056.81 1214.6 L2057.4 1214.6 L2057.99 1214.6 L2058.57 1214.6 L2059.16 1214.6 L2059.75 1214.6 L2060.33 1214.6 L2060.92 1214.6 L2061.51 1214.6 L2062.09 1214.6 L2062.68 1214.6 L2063.27 1214.6 L2063.85 1214.6 L2064.44 1214.6 L2065.02 1214.6 L2065.61 1214.6 L2066.2 1214.6 L2066.78 1214.6 L2067.37 1214.6 L2067.96 1214.6 L2068.54 1214.6 L2069.13 1214.6 L2069.72 1214.6 L2070.3 1214.6 L2070.89 1214.6 L2071.48 1214.6 L2072.06 1214.6 L2072.65 1214.6 L2073.23 1214.6 L2073.82 1214.6 L2074.41 1214.6 L2074.99 1214.6 L2075.58 1214.6 L2076.17 1214.6 L2076.75 1214.6 L2077.34 1214.6 L2077.93 1214.6 L2078.51 1214.6 L2079.1 1214.6 L2079.68 1214.6 L2080.27 1214.6 L2080.86 1214.6 L2081.44 1214.6 L2082.03 1214.6 L2082.62 1214.6 L2083.2 1214.6 L2083.79 1214.6 L2084.38 1214.6 L2084.96 1214.6 L2085.55 1214.6 L2086.14 1214.6 L2086.72 1214.6 L2087.31 1214.6 L2087.89 1214.6 L2088.48 1214.6 L2089.07 1214.6 L2089.65 1214.6 L2090.24 1214.6 L2090.83 1214.6 L2091.41 1214.6 L2092 1214.6 L2092.59 1214.6 L2093.17 1214.6 L2093.76 1214.6 L2094.35 1214.6 L2094.93 1214.6 L2095.52 1214.6 L2096.1 1214.6 L2096.69 1214.6 L2097.28 1214.6 L2097.86 1214.6 L2098.45 1214.6 L2099.04 1214.6 L2099.62 1214.6 L2100.21 1214.6 L2100.8 1214.6 L2101.38 1214.6 L2101.97 1214.6 L2102.55 1214.6 L2103.14 1214.6 L2103.73 1214.6 L2104.31 1214.6 L2104.9 1214.6 L2105.49 1214.6 L2106.07 1214.6 L2106.66 1214.6 L2107.25 1214.6 L2107.83 1214.6 L2108.42 1214.6 L2109.01 1214.6 L2109.59 1214.6 L2110.18 1214.6 L2110.76 1214.6 L2111.35 1214.6 L2111.94 1214.6 L2112.52 1214.6 L2113.11 1214.6 L2113.7 1214.6 L2114.28 1214.6 L2114.87 1214.6 L2115.46 1214.6 L2116.04 1214.6 L2116.63 1214.6 L2117.22 1214.6 L2117.8 1214.6 L2118.39 1214.6 L2118.97 1214.6 L2119.56 1214.6 L2120.15 1214.6 L2120.73 1214.6 L2121.32 1214.6 L2121.91 1214.6 L2122.49 1214.6 L2123.08 1214.6 L2123.67 1214.6 L2124.25 1214.6 L2124.84 1214.6 L2125.42 1214.6 L2126.01 1214.6 L2126.6 1214.6 L2127.18 1214.6 L2127.77 1214.6 L2128.36 1214.6 L2128.94 1214.6 L2129.53 1214.6 L2130.12 1214.6 L2130.7 1214.6 L2131.29 1214.6 L2131.88 1214.6 L2132.46 1214.6 L2133.05 1214.6 L2133.63 1214.6 L2134.22 1214.6 L2134.81 1214.6 L2135.39 1214.6 L2135.98 1214.6 L2136.57 1214.6 L2137.15 1214.6 L2137.74 1214.6 L2138.33 1214.6 L2138.91 1214.6 L2139.5 1214.6 L2140.09 1214.6 L2140.67 1214.6 L2141.26 1214.6 L2141.84 1214.6 L2142.43 1214.6 L2143.02 1214.6 L2143.6 1214.6 L2144.19 1214.6 L2144.78 1214.6 L2145.36 1214.6 L2145.95 1214.6 L2146.54 1214.6 L2147.12 1214.6 L2147.71 1214.6 L2148.3 1214.6 L2148.88 1214.6 L2149.47 1214.6 L2150.05 1214.6 L2150.64 1214.6 L2151.23 1214.6 L2151.81 1214.6 L2152.4 1214.6 L2152.99 1214.6 L2153.57 1214.6 L2154.16 1214.6 L2154.75 1214.6 L2155.33 1214.6 L2155.92 1214.6 L2156.5 1214.6 L2157.09 1214.6 L2157.68 1214.6 L2158.26 1214.6 L2158.26 1213.72 L2157.68 1213.72 L2157.09 1213.72 L2156.5 1213.72 L2155.92 1213.72 L2155.33 1213.72 L2154.75 1213.72 L2154.16 1213.72 L2153.57 1213.72 L2152.99 1213.72 L2152.4 1213.72 L2151.81 1213.72 L2151.23 1213.72 L2150.64 1213.72 L2150.05 1213.72 L2149.47 1213.72 L2148.88 1213.72 L2148.3 1213.72 L2147.71 1213.72 L2147.12 1213.72 L2146.54 1213.72 L2145.95 1213.72 L2145.36 1213.72 L2144.78 1213.72 L2144.19 1213.72 L2143.6 1213.72 L2143.02 1213.72 L2142.43 1213.72 L2141.84 1213.72 L2141.26 1213.72 L2140.67 1213.72 L2140.09 1213.72 L2139.5 1213.72 L2138.91 1213.72 L2138.33 1213.72 L2137.74 1213.72 L2137.15 1213.72 L2136.57 1213.72 L2135.98 1213.72 L2135.39 1213.72 L2134.81 1213.72 L2134.22 1213.72 L2133.63 1213.72 L2133.05 1213.72 L2132.46 1213.72 L2131.88 1213.72 L2131.29 1213.72 L2130.7 1213.72 L2130.12 1213.72 L2129.53 1213.72 L2128.94 1213.72 L2128.36 1213.72 L2127.77 1213.72 L2127.18 1213.72 L2126.6 1213.72 L2126.01 1213.72 L2125.42 1213.72 L2124.84 1213.72 L2124.25 1213.72 L2123.67 1213.72 L2123.08 1213.72 L2122.49 1213.72 L2121.91 1213.72 L2121.32 1213.72 L2120.73 1213.72 L2120.15 1213.72 L2119.56 1213.72 L2118.97 1213.72 L2118.39 1213.72 L2117.8 1213.72 L2117.22 1213.72 L2116.63 1213.72 L2116.04 1213.72 L2115.46 1213.72 L2114.87 1213.72 L2114.28 1213.72 L2113.7 1213.72 L2113.11 1213.72 L2112.52 1213.72 L2111.94 1213.72 L2111.35 1213.72 L2110.76 1213.72 L2110.18 1213.72 L2109.59 1213.72 L2109.01 1213.72 L2108.42 1213.72 L2107.83 1213.72 L2107.25 1213.72 L2106.66 1213.72 L2106.07 1213.72 L2105.49 1213.72 L2104.9 1213.72 L2104.31 1213.72 L2103.73 1213.72 L2103.14 1213.72 L2102.55 1213.72 L2101.97 1213.72 L2101.38 1213.72 L2100.8 1213.72 L2100.21 1213.72 L2099.62 1213.72 L2099.04 1213.72 L2098.45 1213.72 L2097.86 1213.72 L2097.28 1213.72 L2096.69 1213.72 L2096.1 1213.72 L2095.52 1213.72 L2094.93 1213.72 L2094.35 1213.72 L2093.76 1213.72 L2093.17 1213.72 L2092.59 1213.72 L2092 1213.72 L2091.41 1213.72 L2090.83 1213.72 L2090.24 1213.72 L2089.65 1213.72 L2089.07 1213.72 L2088.48 1213.72 L2087.89 1213.72 L2087.31 1213.72 L2086.72 1213.72 L2086.14 1213.72 L2085.55 1213.72 L2084.96 1213.72 L2084.38 1213.72 L2083.79 1213.72 L2083.2 1213.72 L2082.62 1213.72 L2082.03 1213.72 L2081.44 1213.72 L2080.86 1213.72 L2080.27 1213.72 L2079.68 1213.72 L2079.1 1213.72 L2078.51 1213.72 L2077.93 1213.72 L2077.34 1213.72 L2076.75 1213.72 L2076.17 1213.72 L2075.58 1213.72 L2074.99 1213.72 L2074.41 1213.72 L2073.82 1213.72 L2073.23 1213.72 L2072.65 1213.72 L2072.06 1213.72 L2071.48 1213.72 L2070.89 1213.72 L2070.3 1213.72 L2069.72 1213.72 L2069.13 1213.72 L2068.54 1213.72 L2067.96 1213.72 L2067.37 1213.72 L2066.78 1213.72 L2066.2 1213.72 L2065.61 1213.72 L2065.02 1213.72 L2064.44 1213.72 L2063.85 1213.72 L2063.27 1213.72 L2062.68 1213.72 L2062.09 1213.72 L2061.51 1213.72 L2060.92 1213.72 L2060.33 1213.72 L2059.75 1213.72 L2059.16 1213.72 L2058.57 1213.72 L2057.99 1213.72 L2057.4 1213.72 L2056.81 1213.72 L2056.23 1213.72 L2055.64 1213.72 L2055.06 1213.72 L2054.47 1213.72 L2053.88 1213.72 L2053.3 1213.72 L2052.71 1213.72 L2052.12 1213.72 L2051.54 1213.72 L2050.95 1213.72 L2050.36 1213.72 L2049.78 1213.72 L2049.19 1213.72 L2048.6 1213.72 L2048.02 1213.72 L2047.43 1213.72 L2046.85 1213.72 L2046.26 1213.72 L2045.67 1213.72 L2045.09 1213.72 L2044.5 1213.72 L2043.91 1213.72 L2043.33 1213.72 L2042.74 1213.72 L2042.15 1213.72 L2041.57 1213.72 L2040.98 1213.72 L2040.4 1213.72 L2039.81 1213.72 L2039.22 1213.72 L2038.64 1213.72 L2038.05 1213.72 L2037.46 1213.72 L2036.88 1213.72 L2036.29 1213.72 L2035.7 1213.72 L2035.12 1213.72 L2034.53 1213.72 L2033.94 1213.72 L2033.36 1213.72 L2032.77 1213.72 L2032.19 1213.72 L2031.6 1213.72 L2031.01 1213.72 L2030.43 1213.72 L2029.84 1213.72 L2029.25 1213.72 L2028.67 1213.72 L2028.08 1213.72 L2027.49 1213.72 L2026.91 1213.72 L2026.32 1213.72 L2025.73 1213.72 L2025.15 1213.72 L2024.56 1213.72 L2023.98 1213.72 L2023.39 1213.72 L2022.8 1213.72 L2022.22 1213.72 L2021.63 1213.72 L2021.04 1213.72 L2020.46 1213.72 L2019.87 1213.72 L2019.28 1213.72 L2018.7 1213.72 L2018.11 1213.72 L2017.53 1213.72 L2016.94 1213.72 L2016.35 1213.72 L2015.77 1213.72 L2015.18 1213.72 L2014.59 1213.72 L2014.01 1213.72 L2013.42 1213.72 L2012.83 1213.72 L2012.25 1213.72 L2011.66 1213.72 L2011.07 1213.72 L2010.49 1213.72 L2009.9 1213.72 L2009.32 1213.72 L2008.73 1213.72 L2008.14 1213.72 L2007.56 1213.72 L2006.97 1213.72 L2006.38 1213.72 L2005.8 1213.72 L2005.21 1213.72 L2004.62 1213.72 L2004.04 1213.72 L2003.45 1213.72 L2002.86 1213.72 L2002.28 1213.72 L2001.69 1213.72 L2001.11 1213.72 L2000.52 1213.72 L1999.93 1213.72 L1999.35 1213.72 L1998.76 1213.72 L1998.17 1213.72 L1997.59 1213.72 L1997 1213.72 L1996.41 1213.72 L1995.83 1213.72 L1995.24 1213.72 L1994.65 1213.72 L1994.07 1213.72 L1993.48 1213.72 L1992.9 1213.72 L1992.31 1213.72 L1991.72 1213.72 L1991.14 1213.72 L1990.55 1213.72 L1989.96 1213.72 L1989.38 1213.72 L1988.79 1213.72 L1988.2 1213.72 L1987.62 1213.72 L1987.03 1213.72 L1986.45 1213.72 L1985.86 1213.72 L1985.27 1213.72 L1984.69 1213.72 L1984.1 1213.72 L1983.51 1213.72 L1982.93 1213.72 L1982.34 1213.72 L1981.75 1213.72 L1981.17 1213.72 L1980.58 1213.72 L1979.99 1213.72 L1979.41 1213.72 L1978.82 1213.72 L1978.24 1213.72 L1977.65 1213.72 L1977.06 1213.72 L1976.48 1213.72 L1975.89 1213.72 L1975.3 1213.72 L1974.72 1213.72 L1974.13 1213.72 L1973.54 1213.72 L1972.96 1213.72 L1972.37 1213.72 L1971.78 1213.72 L1971.2 1213.72 L1970.61 1213.72 L1970.03 1213.72 L1969.44 1213.72 L1968.85 1213.72 L1968.27 1213.72 L1967.68 1213.72 L1967.09 1213.72 L1966.51 1213.72 L1965.92 1213.72 L1965.33 1213.72 L1964.75 1213.72 L1964.16 1213.72 L1963.58 1213.72 L1962.99 1213.72 L1962.4 1213.72 L1961.82 1213.72 L1961.23 1213.72 L1960.64 1213.72 L1960.06 1213.72 L1959.47 1213.72 L1958.88 1213.72 L1958.3 1213.72 L1957.71 1213.72 L1957.12 1213.72 L1956.54 1213.72 L1955.95 1213.72 L1955.37 1213.72 L1954.78 1213.72 L1954.19 1213.72 L1953.61 1213.72 L1953.02 1213.72 L1952.43 1213.72 L1951.85 1213.72 L1951.26 1213.72 L1950.67 1213.72 L1950.09 1213.72 L1949.5 1213.72 L1948.91 1213.72 L1948.33 1213.72 L1947.74 1213.72 L1947.16 1213.72 L1946.57 1213.72 L1945.98 1213.72 L1945.4 1213.72 L1944.81 1213.72 L1944.22 1213.72 L1943.64 1213.72 L1943.05 1213.72 L1942.46 1213.72 L1941.88 1213.72 L1941.29 1213.72 L1940.71 1213.72 L1940.12 1213.72 L1939.53 1213.72 L1938.95 1213.72 L1938.36 1213.72 L1937.77 1213.72 L1937.19 1213.72 L1936.6 1213.72 L1936.01 1213.72 L1935.43 1213.72 L1934.84 1213.72 L1934.25 1213.72 L1933.67 1213.72 L1933.08 1213.72 L1932.5 1213.72 L1931.91 1213.72 L1931.32 1213.72 L1930.74 1213.72 L1930.15 1213.72 L1929.56 1213.72 L1928.98 1213.72 L1928.39 1213.72 L1927.8 1213.72 L1927.22 1213.72 L1926.63 1213.72 L1926.04 1213.72 L1925.46 1213.72 L1924.87 1213.72 L1924.29 1213.72 L1923.7 1213.72 L1923.11 1213.72 L1922.53 1213.72 L1921.94 1213.72 L1921.35 1213.72 L1920.77 1213.72 L1920.18 1213.72 L1919.59 1213.72 L1919.01 1213.72 L1918.42 1213.72 L1917.83 1213.72 L1917.25 1213.72 L1916.66 1213.72 L1916.08 1213.72 L1915.49 1213.72 L1914.9 1213.72 L1914.32 1213.72 L1913.73 1213.72 L1913.14 1213.72 L1912.56 1213.72 L1911.97 1213.72 L1911.38 1213.72 L1910.8 1213.72 L1910.21 1213.72 L1909.63 1213.72 L1909.04 1213.72 L1908.45 1213.72 L1907.87 1213.72 L1907.28 1213.72 L1906.69 1213.72 L1906.11 1213.72 L1905.52 1213.72 L1904.93 1213.72 L1904.35 1213.72 L1903.76 1213.72 L1903.17 1213.72 L1902.59 1213.72 L1902 1213.72 L1901.42 1213.72 L1900.83 1213.72 L1900.24 1213.72 L1899.66 1213.72 L1899.07 1213.72 L1898.48 1213.72 L1897.9 1213.72 L1897.31 1213.72 L1896.72 1213.72 L1896.14 1213.72 L1895.55 1213.72 L1894.96 1213.72 L1894.38 1213.72 L1893.79 1213.72 L1893.21 1213.72 L1892.62 1213.72 L1892.03 1213.72 L1891.45 1213.72 L1890.86 1213.72 L1890.27 1213.72 L1889.69 1213.72 L1889.1 1213.72 L1888.51 1213.72 L1887.93 1213.72 L1887.34 1213.72 L1886.76 1213.72 L1886.17 1213.72 L1885.58 1213.72 L1885 1213.72 L1884.41 1213.72 L1883.82 1213.72 L1883.24 1213.72 L1882.65 1213.72 L1882.06 1213.72 L1881.48 1213.72 L1880.89 1213.72 L1880.3 1213.72 L1879.72 1213.72 L1879.13 1213.72 L1878.55 1213.72 L1877.96 1213.72 L1877.37 1213.72 L1876.79 1213.72 L1876.2 1213.72 L1875.61 1213.72 L1875.03 1213.72 L1874.44 1213.72 L1873.85 1213.72 L1873.27 1213.72 L1872.68 1213.72 L1872.09 1213.72 L1871.51 1213.72 L1870.92 1213.72 L1870.34 1213.72 L1869.75 1213.72 L1869.16 1213.72 L1868.58 1213.72 L1867.99 1213.72 L1867.4 1213.72 L1866.82 1213.72 L1866.23 1213.72 L1865.64 1213.72 L1865.06 1213.72 L1864.47 1213.72 L1863.88 1213.72 L1863.3 1213.72 L1862.71 1213.72 L1862.13 1213.72 L1861.54 1213.72 L1860.95 1213.72 L1860.37 1213.72 L1859.78 1213.72 L1859.19 1213.72 L1858.61 1213.72 L1858.02 1213.72 L1857.43 1213.72 L1856.85 1213.72 L1856.26 1213.72 L1855.68 1213.72 L1855.09 1213.72 L1854.5 1213.72 L1853.92 1213.72 L1853.33 1213.72 L1852.74 1213.72 L1852.16 1213.72 L1851.57 1213.72 L1850.98 1213.72 L1850.4 1213.72 L1849.81 1213.72 L1849.22 1213.72 L1848.64 1213.72 L1848.05 1213.72 L1847.47 1213.72 L1846.88 1213.72 L1846.29 1213.72 L1845.71 1213.72 L1845.12 1213.72 L1844.53 1213.72 L1843.95 1213.72 L1843.36 1213.72 L1842.77 1213.72 L1842.19 1213.72 L1841.6 1213.72 L1841.01 1213.72 L1840.43 1213.72 L1839.84 1213.72 L1839.26 1213.72 L1838.67 1213.72 L1838.08 1213.72 L1837.5 1213.72 L1836.91 1213.72 L1836.32 1213.72 L1835.74 1213.72 L1835.15 1213.72 L1834.56 1213.72 L1833.98 1213.72 L1833.39 1213.72 L1832.81 1213.72 L1832.22 1213.72 L1831.63 1213.72 L1831.05 1213.72 L1830.46 1213.72 L1829.87 1213.72 L1829.29 1213.72 L1828.7 1213.72 L1828.11 1213.72 L1827.53 1213.72 L1826.94 1213.72 L1826.35 1213.72 L1825.77 1213.72 L1825.18 1213.72 L1824.6 1213.72 L1824.01 1213.72 L1823.42 1213.72 L1822.84 1213.72 L1822.25 1213.72 L1821.66 1213.72 L1821.08 1213.72 L1820.49 1213.72 L1819.9 1213.72 L1819.32 1213.72 L1818.73 1213.72 L1818.14 1213.72 L1817.56 1213.72 L1816.97 1213.72 L1816.39 1213.72 L1815.8 1213.72 L1815.21 1213.72 L1814.63 1213.72 L1814.04 1213.72 L1813.45 1213.72 L1812.87 1213.72 L1812.28 1213.72 L1811.69 1213.72 L1811.11 1213.72 L1810.52 1213.72 L1809.94 1213.72 L1809.35 1213.72 L1808.76 1213.72 L1808.18 1213.72 L1807.59 1213.72 L1807 1213.72 L1806.42 1213.72 L1805.83 1213.72 L1805.24 1213.72 L1804.66 1213.72 L1804.07 1213.72 L1803.48 1213.72 L1802.9 1213.72 L1802.31 1213.72 L1801.73 1213.72 L1801.14 1213.72 L1800.55 1213.72 L1799.97 1213.72 L1799.38 1213.72 L1798.79 1213.72 L1798.21 1213.72 L1797.62 1213.72 L1797.03 1213.72 L1796.45 1213.72 L1795.86 1213.72 L1795.27 1213.72 L1794.69 1213.72 L1794.1 1213.72 L1793.52 1213.72 L1792.93 1213.72 L1792.34 1213.72 L1791.76 1213.72 L1791.17 1213.72 L1790.58 1213.72 L1790 1213.72 L1789.41 1213.72 L1788.82 1213.72 L1788.24 1213.72 L1787.65 1213.72 L1787.06 1213.72 L1786.48 1213.72 L1785.89 1213.72 L1785.31 1213.72 L1784.72 1213.72 L1784.13 1213.72 L1783.55 1213.72 L1782.96 1213.72 L1782.37 1213.72 L1781.79 1213.72 L1781.2 1213.72 L1780.61 1213.72 L1780.03 1213.72 L1779.44 1213.72 L1778.86 1213.72 L1778.27 1213.72 L1777.68 1213.72 L1777.1 1213.72 L1776.51 1213.72 L1775.92 1213.72 L1775.34 1213.72 L1774.75 1213.72 L1774.16 1213.72 L1773.58 1213.72 L1772.99 1213.72 L1772.4 1213.72 L1771.82 1213.72 L1771.23 1213.72 L1770.65 1213.72 L1770.06 1213.72 L1769.47 1213.72 L1768.89 1213.72 L1768.3 1213.72 L1767.71 1213.72 L1767.13 1213.72 L1766.54 1213.72 L1765.95 1213.72 L1765.37 1213.72 L1764.78 1213.72 L1764.19 1213.72 L1763.61 1213.72 L1763.02 1213.72 L1762.44 1213.72 L1761.85 1213.72 L1761.26 1213.72 L1760.68 1213.72 L1760.09 1213.72 L1759.5 1213.72 L1758.92 1213.72 L1758.33 1213.72 L1757.74 1213.72 L1757.16 1213.72 L1756.57 1213.72 L1755.99 1213.72 L1755.4 1213.72 L1754.81 1213.72 L1754.23 1213.72 L1753.64 1213.72 L1753.05 1213.72 L1752.47 1213.72 L1751.88 1213.72 L1751.29 1213.72 L1750.71 1213.72 L1750.12 1213.72 L1749.53 1213.72 L1748.95 1213.72 L1748.36 1213.72 L1747.78 1213.72 L1747.19 1213.72 L1746.6 1213.72 L1746.02 1213.72 L1745.43 1213.72 L1744.84 1213.72 L1744.26 1213.72 L1743.67 1213.72 L1743.08 1213.72 L1742.5 1213.72 L1741.91 1213.72 L1741.32 1213.72 L1740.74 1213.72 L1740.15 1213.72 L1739.57 1213.72 L1738.98 1213.72 L1738.39 1213.72 L1737.81 1213.72 L1737.22 1213.72 L1736.63 1213.72 L1736.05 1213.72 L1735.46 1213.72 L1734.87 1213.72 L1734.29 1213.72 L1733.7 1213.72 L1733.11 1213.72 L1732.53 1213.72 L1731.94 1213.72 L1731.36 1213.72 L1730.77 1213.72 L1730.18 1213.72 L1729.6 1213.72 L1729.01 1213.72 L1728.42 1213.72 L1727.84 1213.72 L1727.25 1213.72 L1726.66 1213.72 L1726.08 1213.72 L1725.49 1213.72 L1724.91 1213.72 L1724.32 1213.72 L1723.73 1213.72 L1723.15 1213.72 L1722.56 1213.72 L1721.97 1213.72 L1721.39 1213.72 L1720.8 1213.72 L1720.21 1213.72 L1719.63 1213.72 L1719.04 1213.72 L1718.45 1213.72 L1717.87 1213.72 L1717.28 1213.72 L1716.7 1213.72 L1716.11 1213.72 L1715.52 1213.72 L1714.94 1213.72 L1714.35 1213.72 L1713.76 1213.72 L1713.18 1213.72 L1712.59 1213.72 L1712 1213.72 L1711.42 1213.72 L1710.83 1213.72 L1710.24 1213.72 L1709.66 1213.72 L1709.07 1213.72 L1708.49 1213.72 L1707.9 1213.72 L1707.31 1213.72 L1706.73 1213.72 L1706.14 1213.72 L1705.55 1213.72 L1704.97 1213.72 L1704.38 1213.72 L1703.79 1213.72 L1703.21 1213.72 L1702.62 1213.72 L1702.04 1213.72 L1701.45 1213.72 L1700.86 1213.72 L1700.28 1213.72 L1699.69 1213.72 L1699.1 1213.72 L1698.52 1213.72 L1697.93 1213.72 L1697.34 1213.72 L1696.76 1213.72 L1696.17 1213.72 L1695.58 1213.72 L1695 1213.72 L1694.41 1213.72 L1693.83 1213.72 L1693.24 1213.72 L1692.65 1213.72 L1692.07 1213.72 L1691.48 1213.72 L1690.89 1213.72 L1690.31 1213.72 L1689.72 1213.72 L1689.13 1213.72 L1688.55 1213.72 L1687.96 1213.72 L1687.37 1213.72 L1686.79 1213.72 L1686.2 1213.72 L1685.62 1213.72 L1685.03 1213.72 L1684.44 1213.72 L1683.86 1213.72 L1683.27 1213.72 L1682.68 1213.72 L1682.1 1213.72 L1681.51 1213.72 L1680.92 1213.72 L1680.34 1213.72 L1679.75 1213.72 L1679.17 1213.72 L1678.58 1213.72 L1677.99 1213.72 L1677.41 1213.72 L1676.82 1213.72 L1676.23 1213.72 L1675.65 1213.72 L1675.06 1213.72 L1674.47 1213.72 L1673.89 1213.72 L1673.3 1213.72 L1672.71 1213.72 L1672.13 1213.72 L1671.54 1213.72 L1670.96 1213.72 L1670.37 1213.72 L1669.78 1213.72 L1669.2 1213.72 L1668.61 1213.72 L1668.02 1213.72 L1667.44 1213.72 L1666.85 1213.72 L1666.26 1213.72 L1665.68 1213.72 L1665.09 1213.72 L1664.5 1213.72 L1663.92 1213.72 L1663.33 1213.72 L1662.75 1213.72 L1662.16 1213.72 L1661.57 1213.72 L1660.99 1213.72 L1660.4 1213.72 L1659.81 1213.72 L1659.23 1213.72 L1658.64 1213.72 L1658.05 1213.72 L1657.47 1213.72 L1656.88 1213.72 L1656.29 1213.72 L1655.71 1213.72 L1655.12 1213.72 L1654.54 1213.72 L1653.95 1213.72 L1653.36 1213.72 L1652.78 1213.72 L1652.19 1213.72 L1651.6 1213.72 L1651.02 1213.72 L1650.43 1213.72 L1649.84 1213.72 L1649.26 1213.72 L1648.67 1213.72 L1648.09 1213.72 L1647.5 1213.72 L1646.91 1213.72 L1646.33 1213.72 L1645.74 1213.72 L1645.15 1213.72 L1644.57 1213.72 L1643.98 1213.72 L1643.39 1213.72 L1642.81 1213.72 L1642.22 1213.72 L1641.63 1213.72 L1641.05 1213.72 L1640.46 1213.72 L1639.88 1213.72 L1639.29 1213.72 L1638.7 1213.72 L1638.12 1213.72 L1637.53 1213.72 L1636.94 1213.72 L1636.36 1213.72 L1635.77 1213.72 L1635.18 1213.72 L1634.6 1213.72 L1634.01 1213.72 L1633.42 1213.72 L1632.84 1213.72 L1632.25 1213.72 L1631.67 1213.72 L1631.08 1213.72 L1630.49 1213.72 L1629.91 1213.72 L1629.32 1213.72 L1628.73 1213.72 L1628.15 1213.72 L1627.56 1213.72 L1626.97 1213.72 L1626.39 1213.72 L1625.8 1213.72 L1625.22 1213.72 L1624.63 1213.72 L1624.04 1213.72 L1623.46 1213.72 L1622.87 1213.72 L1622.28 1213.72 L1621.7 1213.72 L1621.11 1213.72 L1620.52 1213.72 L1619.94 1213.72 L1619.35 1213.72 L1618.76 1213.72 L1618.18 1213.72 L1617.59 1213.72 L1617.01 1213.72 L1616.42 1213.72 L1615.83 1213.72 L1615.25 1213.72 L1614.66 1213.72 L1614.07 1213.72 L1613.49 1213.72 L1612.9 1213.72 L1612.31 1213.72 L1611.73 1213.72 L1611.14 1213.72 L1610.55 1213.72 L1609.97 1213.72 L1609.38 1213.72 L1608.8 1213.72 L1608.21 1213.72 L1607.62 1213.72 L1607.04 1213.72 L1606.45 1213.72 L1605.86 1213.72 L1605.28 1213.72 L1604.69 1213.72 L1604.1 1213.72 L1603.52 1213.72 L1602.93 1213.72 L1602.34 1213.72 L1601.76 1213.72 L1601.17 1213.72 L1600.59 1213.72 L1600 1213.72 L1599.41 1213.72 L1598.83 1213.72 L1598.24 1213.72 L1597.65 1213.72 L1597.07 1213.72 L1596.48 1213.72 L1595.89 1213.72 L1595.31 1213.72 L1594.72 1213.72 L1594.14 1213.72 L1593.55 1213.72 L1592.96 1213.72 L1592.38 1213.72 L1591.79 1213.72 L1591.2 1213.72 L1590.62 1213.72 L1590.03 1213.72 L1589.44 1213.72 L1588.86 1213.72 L1588.27 1213.72 L1587.68 1213.72 L1587.1 1213.72 L1586.51 1213.72 L1585.93 1213.72 L1585.34 1213.72 L1584.75 1213.72 L1584.17 1213.72 L1583.58 1213.72 L1582.99 1213.72 L1582.41 1213.72 L1581.82 1213.72 L1581.23 1213.72 L1580.65 1213.72 L1580.06 1213.72 L1579.47 1213.72 L1578.89 1213.72 L1578.3 1213.72 L1577.72 1213.72 L1577.13 1213.72 L1576.54 1213.72 L1575.96 1213.72 L1575.37 1213.72 L1574.78 1213.72 L1574.2 1213.72 L1573.61 1213.72 L1573.02 1213.72 L1572.44 1213.72 L1571.85 1213.72 L1571.27 1213.72 L1570.68 1213.72 L1570.09 1213.72 L1569.51 1213.72 L1568.92 1213.72 L1568.33 1213.72 L1567.75 1213.72 L1567.16 1213.72 L1566.57 1213.72 L1565.99 1213.72 L1565.4 1213.72 L1564.81 1213.72 L1564.23 1213.72 L1563.64 1213.72 L1563.06 1213.72 L1562.47 1213.72 L1561.88 1213.72 L1561.3 1213.72 L1560.71 1213.72 L1560.12 1213.72 L1559.54 1213.72 L1558.95 1213.72 L1558.36 1213.72 L1557.78 1213.72 L1557.19 1213.72 L1556.6 1213.72 L1556.02 1213.72 L1555.43 1213.72 L1554.85 1213.72 L1554.26 1213.72 L1553.67 1213.72 L1553.09 1213.72 L1552.5 1213.72 L1551.91 1213.72 L1551.33 1213.72 L1550.74 1213.72 L1550.15 1213.72 L1549.57 1213.72 L1548.98 1213.72 L1548.4 1213.72 L1547.81 1213.72 L1547.22 1213.72 L1546.64 1213.72 L1546.05 1213.72 L1545.46 1213.72 L1544.88 1213.72 L1544.29 1213.72 L1543.7 1213.72 L1543.12 1213.72 L1542.53 1213.72 L1541.94 1213.72 L1541.36 1213.72 L1540.77 1213.72 L1540.19 1213.72 L1539.6 1213.72 L1539.01 1213.72 L1538.43 1213.72 L1537.84 1213.72 L1537.25 1213.72 L1536.67 1213.72 L1536.08 1213.72 L1535.49 1213.72 L1534.91 1213.72 L1534.32 1213.72 L1533.73 1213.72 L1533.15 1213.72 L1532.56 1213.72 L1531.98 1213.72 L1531.39 1213.72 L1530.8 1213.72 L1530.22 1213.72 L1529.63 1213.72 L1529.04 1213.72 L1528.46 1213.72 L1527.87 1213.72 L1527.28 1213.72 L1526.7 1213.72 L1526.11 1213.72 L1525.52 1213.72 L1524.94 1213.72 L1524.35 1213.72 L1523.77 1213.72 L1523.18 1213.72 L1522.59 1213.72 L1522.01 1213.72 L1521.42 1213.72 L1520.83 1213.72 L1520.25 1213.72 L1519.66 1213.72 L1519.07 1213.72 L1518.49 1213.72 L1517.9 1213.72 L1517.32 1213.72 L1516.73 1213.72 L1516.14 1213.72 L1515.56 1213.72 L1514.97 1213.72 L1514.38 1213.72 L1513.8 1213.72 L1513.21 1213.72 L1512.62 1213.72 L1512.04 1213.72 L1511.45 1213.72 L1510.86 1213.72 L1510.28 1213.72 L1509.69 1213.72 L1509.11 1213.72 L1508.52 1213.72 L1507.93 1213.72 L1507.35 1213.72 L1506.76 1213.72 L1506.17 1213.72 L1505.59 1213.72 L1505 1213.72 L1504.41 1213.72 L1503.83 1213.72 L1503.24 1213.72 L1502.65 1213.72 L1502.07 1213.72 L1501.48 1213.72 L1500.9 1213.72 L1500.31 1213.72 L1499.72 1213.72 L1499.14 1213.72 L1498.55 1213.72 L1497.96 1213.72 L1497.38 1213.72 L1496.79 1213.72 L1496.2 1213.72 L1495.62 1213.72 L1495.03 1213.72 L1494.45 1213.72 L1493.86 1213.72 L1493.27 1213.72 L1492.69 1213.72 L1492.1 1213.72 L1491.51 1213.72 L1490.93 1213.72 L1490.34 1213.72 L1489.75 1213.72 L1489.17 1213.72 L1488.58 1213.72 L1487.99 1213.72 L1487.41 1213.72 L1486.82 1213.72 L1486.24 1213.72 L1485.65 1213.72 L1485.06 1213.72 L1484.48 1213.72 L1483.89 1213.72 L1483.3 1213.72 L1482.72 1213.72 L1482.13 1213.72 L1481.54 1213.72 L1480.96 1213.72 L1480.37 1213.72 L1479.78 1213.72 L1479.2 1213.72 L1478.61 1213.72 L1478.03 1213.72 L1477.44 1213.72 L1476.85 1213.72 L1476.27 1213.72 L1475.68 1213.72 L1475.09 1213.72 L1474.51 1213.72 L1473.92 1213.72 L1473.33 1213.72 L1472.75 1213.72 L1472.16 1213.72 L1471.57 1213.72 L1470.99 1213.72 L1470.4 1213.72 L1469.82 1213.72 L1469.23 1213.72 L1468.64 1213.72 L1468.06 1213.72 L1467.47 1213.72 L1466.88 1213.72 L1466.3 1213.72 L1465.71 1213.72 L1465.12 1213.72 L1464.54 1213.72 L1463.95 1213.72 L1463.37 1213.72 L1462.78 1213.72 L1462.19 1213.72 L1461.61 1213.72 L1461.02 1213.72 L1460.43 1213.72 L1459.85 1213.72 L1459.26 1213.72 L1458.67 1213.72 L1458.09 1213.72 L1457.5 1213.72 L1456.91 1213.72 L1456.33 1213.72 L1455.74 1213.72 L1455.16 1213.72 L1454.57 1213.72 L1453.98 1213.72 L1453.4 1213.72 L1452.81 1213.72 L1452.22 1213.72 L1451.64 1213.72 L1451.05 1213.72 L1450.46 1213.72 L1449.88 1213.72 L1449.29 1213.72 L1448.7 1213.72 L1448.12 1213.72 L1447.53 1213.72 L1446.95 1213.72 L1446.36 1213.72 L1445.77 1213.72 L1445.19 1213.72 L1444.6 1213.72 L1444.01 1213.72 L1443.43 1213.72 L1442.84 1213.72 L1442.25 1213.72 L1441.67 1213.72 L1441.08 1213.72 L1440.5 1213.72 L1439.91 1213.72 L1439.32 1213.72 L1438.74 1213.72 L1438.15 1213.72 L1437.56 1213.72 L1436.98 1213.72 L1436.39 1213.72 L1435.8 1213.72 L1435.22 1213.72 L1434.63 1213.72 L1434.04 1213.72 L1433.46 1213.72 L1432.87 1213.72 L1432.29 1213.72 L1431.7 1213.72 L1431.11 1213.72 L1430.53 1213.72 L1429.94 1213.72 L1429.35 1213.72 L1428.77 1213.72 L1428.18 1213.72 L1427.59 1213.72 L1427.01 1213.72 L1426.42 1213.72 L1425.83 1213.72 L1425.25 1213.72 L1424.66 1213.72 L1424.08 1213.72 L1423.49 1213.72 L1422.9 1213.72 L1422.32 1213.72 L1421.73 1213.72 L1421.14 1213.72 L1420.56 1213.72 L1419.97 1213.72 L1419.38 1213.72 L1418.8 1213.72 L1418.21 1213.72 L1417.63 1213.72 L1417.04 1213.72 L1416.45 1213.72 L1415.87 1213.72 L1415.28 1213.72 L1414.69 1213.72 L1414.11 1213.72 L1413.52 1213.72 L1412.93 1213.72 L1412.35 1213.72 L1411.76 1213.72 L1411.17 1213.72 L1410.59 1213.72 L1410 1213.72 L1409.42 1213.72 L1408.83 1213.72 L1408.24 1213.72 L1407.66 1213.72 L1407.07 1213.72 L1406.48 1213.72 L1405.9 1213.72 L1405.31 1213.72 L1404.72 1213.72 L1404.14 1213.72 L1403.55 1213.72 L1402.96 1213.72 L1402.38 1213.72 L1401.79 1213.72 L1401.21 1213.72 L1400.62 1213.72 L1400.03 1213.72 L1399.45 1213.72 L1398.86 1213.72 L1398.27 1213.72 L1397.69 1213.72 L1397.1 1213.72 L1396.51 1213.72 L1395.93 1213.72 L1395.34 1213.72 L1394.75 1213.72 L1394.17 1213.72 L1393.58 1213.72 L1393 1213.72 L1392.41 1213.72 L1391.82 1213.72 L1391.24 1213.72 L1390.65 1213.72 L1390.06 1213.72 L1389.48 1213.72 L1388.89 1213.72 L1388.3 1213.72 L1387.72 1213.72 L1387.13 1213.72 L1386.55 1213.72 L1385.96 1213.72 L1385.37 1213.72 L1384.79 1213.72 L1384.2 1213.72 L1383.61 1213.72 L1383.03 1213.72 L1382.44 1213.72 L1381.85 1213.72 L1381.27 1213.72 L1380.68 1213.72 L1380.09 1213.72 L1379.51 1213.72 L1378.92 1213.72 L1378.34 1213.72 L1377.75 1213.72 L1377.16 1213.72 L1376.58 1213.72 L1375.99 1213.72 L1375.4 1213.72 L1374.82 1213.72 L1374.23 1213.72 L1373.64 1213.72 L1373.06 1213.72 L1372.47 1213.72 L1371.88 1213.72 L1371.3 1213.72 L1370.71 1213.72 L1370.13 1213.72 L1369.54 1213.72 L1368.95 1213.72 L1368.37 1213.72 L1367.78 1213.72 L1367.19 1213.72 L1366.61 1213.72 L1366.02 1213.72 L1365.43 1213.72 L1364.85 1213.72 L1364.26 1213.72 L1363.68 1213.72 L1363.09 1213.72 L1362.5 1213.72 L1361.92 1213.72 L1361.33 1213.72 L1360.74 1213.72 L1360.16 1213.72 L1359.57 1213.72 L1358.98 1213.72 L1358.4 1213.72 L1357.81 1213.72 L1357.22 1213.72 L1356.64 1213.72 L1356.05 1213.72 L1355.47 1213.72 L1354.88 1213.72 L1354.29 1213.72 L1353.71 1213.72 L1353.12 1213.72 L1352.53 1213.72 L1351.95 1213.72 L1351.36 1213.72 L1350.77 1213.72 L1350.19 1213.72 L1349.6 1213.72 L1349.01 1213.72 L1348.43 1213.72 L1347.84 1213.72 L1347.26 1213.72 L1346.67 1213.72 L1346.08 1213.72 L1345.5 1213.72 L1344.91 1213.72 L1344.32 1213.72 L1343.74 1213.72 L1343.15 1213.72 L1342.56 1213.72 L1341.98 1213.72 L1341.39 1213.72 L1340.8 1213.72 L1340.22 1213.72 L1339.63 1213.72 L1339.05 1213.72 L1338.46 1213.72 L1337.87 1213.72 L1337.29 1213.72 L1336.7 1213.72 L1336.11 1213.72 L1335.53 1213.72 L1334.94 1213.72 L1334.35 1213.72 L1333.77 1213.72 L1333.18 1213.72 L1332.6 1213.72 L1332.01 1213.72 L1331.42 1213.72 L1330.84 1213.72 L1330.25 1213.72 L1329.66 1213.72 L1329.08 1213.72 L1328.49 1213.72 L1327.9 1213.72 L1327.32 1213.72 L1326.73 1213.72 L1326.14 1213.72 L1325.56 1213.72 L1324.97 1213.72 L1324.39 1213.72 L1323.8 1213.72 L1323.21 1213.72 L1322.63 1213.72 L1322.04 1213.72 L1321.45 1213.72 L1320.87 1213.72 L1320.28 1213.72 L1319.69 1213.72 L1319.11 1213.72 L1318.52 1213.72 L1317.93 1213.72 L1317.35 1213.72 L1316.76 1213.72 L1316.18 1213.72 L1315.59 1213.72 L1315 1213.72 L1314.42 1213.72 L1313.83 1213.72 L1313.24 1213.72 L1312.66 1213.72 L1312.07 1213.72 L1311.48 1213.72 L1310.9 1213.72 L1310.31 1213.72 L1309.73 1213.72 L1309.14 1213.72 L1308.55 1213.72 L1307.97 1213.72 L1307.38 1213.72 L1306.79 1213.72 L1306.21 1213.72 L1305.62 1213.72 L1305.03 1213.72 L1304.45 1213.72 L1303.86 1213.72 L1303.27 1213.72 L1302.69 1213.72 L1302.1 1213.72 L1301.52 1213.72 L1300.93 1213.72 L1300.34 1213.72 L1299.76 1213.72 L1299.17 1213.72 L1298.58 1213.72 L1298 1213.72 L1297.41 1213.72 L1296.82 1213.72 L1296.24 1213.72 L1295.65 1213.72 L1295.06 1213.72 L1294.48 1213.72 L1293.89 1213.72 L1293.31 1213.72 L1292.72 1213.72 L1292.13 1213.72 L1291.55 1213.72 L1290.96 1213.72 L1290.37 1213.72 L1289.79 1213.72 L1289.2 1213.72 L1288.61 1213.72 L1288.03 1213.72 L1287.44 1213.72 L1286.86 1213.72 L1286.27 1213.72 L1285.68 1213.72 L1285.1 1213.72 L1284.51 1213.72 L1283.92 1213.72 L1283.34 1213.72 L1282.75 1213.72 L1282.16 1213.72 L1281.58 1213.72 L1280.99 1213.72 L1280.4 1213.72 L1279.82 1213.72 L1279.23 1213.72 L1278.65 1213.72 L1278.06 1213.72 L1277.47 1213.72 L1276.89 1213.72 L1276.3 1213.72 L1275.71 1213.72 L1275.13 1213.72 L1274.54 1213.72 L1273.95 1213.72 L1273.37 1213.72 L1272.78 1213.72 L1272.19 1213.72 L1271.61 1213.72 L1271.02 1213.72 L1270.44 1213.72 L1269.85 1213.72 L1269.26 1213.72 L1268.68 1213.72 L1268.09 1213.72 L1267.5 1213.72 L1266.92 1213.72 L1266.33 1213.72 L1265.74 1213.72 L1265.16 1213.72 L1264.57 1213.72 L1263.98 1213.72 L1263.4 1213.72 L1262.81 1213.72 L1262.23 1213.72 L1261.64 1213.72 L1261.05 1213.72 L1260.47 1213.72 L1259.88 1213.72 L1259.29 1213.72 L1258.71 1213.72 L1258.12 1213.72 L1257.53 1213.72 L1256.95 1213.72 L1256.36 1213.72 L1255.78 1213.72 L1255.19 1213.72 L1254.6 1213.72 L1254.02 1213.72 L1253.43 1213.72 L1252.84 1213.72 L1252.26 1213.72 L1251.67 1213.72 L1251.08 1213.72 L1250.5 1213.72 L1249.91 1213.72 L1249.32 1213.72 L1248.74 1213.72 L1248.15 1213.72 L1247.57 1213.72 L1246.98 1213.72 L1246.39 1213.72 L1245.81 1213.72 L1245.22 1213.72 L1244.63 1213.72 L1244.05 1213.72 L1243.46 1213.72 L1242.87 1213.72 L1242.29 1213.72 L1241.7 1213.72 L1241.11 1213.72 L1240.53 1213.72 L1239.94 1213.72 L1239.36 1213.72 L1238.77 1213.72 L1238.18 1213.72 L1237.6 1213.72 L1237.01 1213.72 L1236.42 1213.72 L1235.84 1213.72 L1235.25 1213.72 L1234.66 1213.72 L1234.08 1213.72 L1233.49 1213.72 L1232.91 1213.72 L1232.32 1213.72 L1231.73 1213.72 L1231.15 1213.72 L1230.56 1213.72 L1229.97 1213.72 L1229.39 1213.72 L1228.8 1213.72 L1228.21 1213.72 L1227.63 1213.72 L1227.04 1213.72 L1226.45 1213.72 L1225.87 1213.72 L1225.28 1213.72 L1224.7 1213.72 L1224.11 1213.72 L1223.52 1213.72 L1222.94 1213.72 L1222.35 1213.72 L1221.76 1213.72 L1221.18 1213.72 L1220.59 1213.72 L1220 1213.72 L1219.42 1213.72 L1218.83 1213.72 L1218.24 1213.72 L1217.66 1213.72 L1217.07 1213.72 L1216.49 1213.72 L1215.9 1213.72 L1215.31 1213.72 L1214.73 1213.72 L1214.14 1213.72 L1213.55 1213.72 L1212.97 1213.72 L1212.38 1213.72 L1211.79 1213.72 L1211.21 1213.72 L1210.62 1213.72 L1210.03 1213.72 L1209.45 1213.72 L1208.86 1213.72 L1208.28 1213.72 L1207.69 1213.72 L1207.1 1213.72 L1206.52 1213.72 L1205.93 1213.72 L1205.34 1213.72 L1204.76 1213.72 L1204.17 1213.72 L1203.58 1213.72 L1203 1213.72 L1202.41 1213.72 L1201.83 1213.72 L1201.24 1213.72 L1200.65 1213.72 L1200.07 1213.72 L1199.48 1213.72 L1198.89 1213.72 L1198.31 1213.72 L1197.72 1213.72 L1197.13 1213.72 L1196.55 1213.72 L1195.96 1213.72 L1195.37 1213.72 L1194.79 1213.72 L1194.2 1213.72 L1193.62 1213.72 L1193.03 1213.72 L1192.44 1213.72 L1191.86 1213.72 L1191.27 1213.72 L1190.68 1213.72 L1190.1 1213.72 L1189.51 1213.72 L1188.92 1213.72 L1188.34 1213.72 L1187.75 1213.72 L1187.16 1213.72 L1186.58 1213.72 L1185.99 1213.72 L1185.41 1213.72 L1184.82 1213.72 L1184.23 1213.72 L1183.65 1213.72 L1183.06 1213.72 L1182.47 1213.72 L1181.89 1213.72 L1181.3 1213.72 L1180.71 1213.72 L1180.13 1213.72 L1179.54 1213.72 L1178.96 1213.72 L1178.37 1213.72 L1177.78 1213.72 L1177.2 1213.72 L1176.61 1213.72 L1176.02 1213.72 L1175.44 1213.72 L1174.85 1213.72 L1174.26 1213.72 L1173.68 1213.72 L1173.09 1213.72 L1172.5 1213.72 L1171.92 1213.72 L1171.33 1213.72 L1170.75 1213.72 L1170.16 1213.72 L1169.57 1213.72 L1168.99 1213.72 L1168.4 1213.72 L1167.81 1213.72 L1167.23 1213.72 L1166.64 1213.72 L1166.05 1213.72 L1165.47 1213.72 L1164.88 1213.72 L1164.29 1213.72 L1163.71 1213.72 L1163.12 1213.72 L1162.54 1213.72 L1161.95 1213.72 L1161.36 1213.72 L1160.78 1213.72 L1160.19 1213.72 L1159.6 1213.72 L1159.02 1213.72 L1158.43 1213.72 L1157.84 1213.72 L1157.26 1213.72 L1156.67 1213.72 L1156.09 1213.72 L1155.5 1213.72 L1154.91 1213.72 L1154.33 1213.72 L1153.74 1213.72 L1153.15 1213.72 L1152.57 1213.72 L1151.98 1213.72 L1151.39 1213.72 L1150.81 1213.72 L1150.22 1213.72 L1149.63 1213.72 L1149.05 1213.72 L1148.46 1213.72 L1147.88 1213.72 L1147.29 1213.72 L1146.7 1213.72 L1146.12 1213.72 L1145.53 1213.72 L1144.94 1213.72 L1144.36 1213.72 L1143.77 1213.72 L1143.18 1213.72 L1142.6 1213.72 L1142.01 1213.72 L1141.42 1213.72 L1140.84 1213.72 L1140.25 1213.72 L1139.67 1213.72 L1139.08 1213.72 L1138.49 1213.72 L1137.91 1213.72 L1137.32 1213.72 L1136.73 1213.72 L1136.15 1213.72 L1135.56 1213.72 L1134.97 1213.72 L1134.39 1213.72 L1133.8 1213.72 L1133.21 1213.72 L1132.63 1213.72 L1132.04 1213.72 L1131.46 1213.72 L1130.87 1213.72 L1130.28 1213.72 L1129.7 1213.72 L1129.11 1213.72 L1128.52 1213.72 L1127.94 1213.72 L1127.35 1213.72 L1126.76 1213.72 L1126.18 1213.72 L1125.59 1213.72 L1125.01 1213.72 L1124.42 1213.72 L1123.83 1213.72 L1123.25 1213.72 L1122.66 1213.72 L1122.07 1213.72 L1121.49 1213.72 L1120.9 1213.72 L1120.31 1213.72 L1119.73 1213.72 L1119.14 1213.72 L1118.55 1213.72 L1117.97 1213.72 L1117.38 1213.72 L1116.8 1213.72 L1116.21 1213.72 L1115.62 1213.72 L1115.04 1213.72 L1114.45 1213.72 L1113.86 1213.72 L1113.28 1213.72 L1112.69 1213.72 L1112.1 1213.72 L1111.52 1213.72 L1110.93 1213.72 L1110.34 1213.72 L1109.76 1213.72 L1109.17 1213.72 L1108.59 1213.72 L1108 1213.72 L1107.41 1213.72 L1106.83 1213.72 L1106.24 1213.72 L1105.65 1213.72 L1105.07 1213.72 L1104.48 1213.72 L1103.89 1213.72 L1103.31 1213.72 L1102.72 1213.72 L1102.14 1213.72 L1101.55 1213.72 L1100.96 1213.72 L1100.38 1213.72 L1099.79 1213.72 L1099.2 1213.72 L1098.62 1213.72 L1098.03 1213.72 L1097.44 1213.72 L1096.86 1213.72 L1096.27 1213.72 L1095.68 1213.72 L1095.1 1213.72 L1094.51 1213.72 L1093.93 1213.72 L1093.34 1213.72 L1092.75 1213.72 L1092.17 1213.72 L1091.58 1213.72 L1090.99 1213.72 L1090.41 1213.72 L1089.82 1213.72 L1089.23 1213.72 L1088.65 1213.72 L1088.06 1213.72 L1087.47 1213.72 L1086.89 1213.72 L1086.3 1213.72 L1085.72 1213.72 L1085.13 1213.72 L1084.54 1213.72 L1083.96 1213.72 L1083.37 1213.72 L1082.78 1213.72 L1082.2 1213.72 L1081.61 1213.72 L1081.02 1213.72 L1080.44 1213.72 L1079.85 1213.72 L1079.26 1213.72 L1078.68 1213.72 L1078.09 1213.72 L1077.51 1213.72 L1076.92 1213.72 L1076.33 1213.72 L1075.75 1213.72 L1075.16 1213.72 L1074.57 1213.72 L1073.99 1213.72 L1073.4 1213.72 L1072.81 1213.72 L1072.23 1213.72 L1071.64 1213.72 L1071.06 1213.72 L1070.47 1213.72 L1069.88 1213.72 L1069.3 1213.72 L1068.71 1213.72 L1068.12 1213.72 L1067.54 1213.72 L1066.95 1213.72 L1066.36 1213.72 L1065.78 1213.72 L1065.19 1213.72 L1064.6 1213.72 L1064.02 1213.72 L1063.43 1213.72 L1062.85 1213.72 L1062.26 1213.72 L1061.67 1213.72 L1061.09 1213.72 L1060.5 1213.72 L1059.91 1213.72 L1059.33 1213.72 L1058.74 1213.72 L1058.15 1213.72 L1057.57 1213.72 L1056.98 1213.72 L1056.39 1213.72 L1055.81 1213.72 L1055.22 1213.72 L1054.64 1213.72 L1054.05 1213.72 L1053.46 1213.72 L1052.88 1213.72 L1052.29 1213.72 L1051.7 1213.72 L1051.12 1213.72 L1050.53 1213.72 L1049.94 1213.72 L1049.36 1213.72 L1048.77 1213.72 L1048.19 1213.72 L1047.6 1213.72 L1047.01 1213.72 L1046.43 1213.72 L1045.84 1213.72 L1045.25 1213.72 L1044.67 1213.72 L1044.08 1213.72 L1043.49 1213.72 L1042.91 1213.72 L1042.32 1213.72 L1041.73 1213.72 L1041.15 1213.72 L1040.56 1213.72 L1039.98 1213.72 L1039.39 1213.72 L1038.8 1213.72 L1038.22 1213.72 L1037.63 1213.72 L1037.04 1213.72 L1036.46 1213.72 L1035.87 1213.72 L1035.28 1213.72 L1034.7 1213.72 L1034.11 1213.72 L1033.52 1213.72 L1032.94 1213.72 L1032.35 1213.72 L1031.77 1213.72 L1031.18 1213.72 L1030.59 1213.72 L1030.01 1213.72 L1029.42 1213.72 L1028.83 1213.72 L1028.25 1213.72 L1027.66 1213.72 L1027.07 1213.72 L1026.49 1213.72 L1025.9 1213.72 L1025.32 1213.72 L1024.73 1213.72 L1024.14 1213.72 L1023.56 1213.72 L1022.97 1213.72 L1022.38 1213.72 L1021.8 1213.72 L1021.21 1213.72 L1020.62 1213.72 L1020.04 1213.72 L1019.45 1213.72 L1018.86 1213.72 L1018.28 1213.72 L1017.69 1213.72 L1017.11 1213.72 L1016.52 1213.72 L1015.93 1213.72 L1015.35 1213.72 L1014.76 1213.72 L1014.17 1213.72 L1013.59 1213.72 L1013 1213.72 L1012.41 1213.72 L1011.83 1213.72 L1011.24 1213.72 L1010.65 1213.72 L1010.07 1213.72 L1009.48 1213.72 L1008.9 1213.72 L1008.31 1213.72 L1007.72 1213.72 L1007.14 1213.72 L1006.55 1213.72 L1005.96 1213.72 L1005.38 1213.72 L1004.79 1213.72 L1004.2 1213.72 L1003.62 1213.72 L1003.03 1213.72 L1002.44 1213.72 L1001.86 1213.72 L1001.27 1213.72 L1000.69 1213.72 L1000.1 1213.72 L999.513 1213.72 L998.926 1213.72 L998.34 1213.72 L997.754 1213.72 L997.167 1213.72 L996.581 1213.72 L995.994 1213.72 L995.408 1213.72 L994.822 1213.72 L994.235 1213.72 L993.649 1213.72 L993.062 1213.72 L992.476 1213.72 L991.889 1213.72 L991.303 1213.72 L990.717 1213.72 L990.13 1213.72 L989.544 1213.72 L988.957 1213.72 L988.371 1213.72 L987.785 1213.72 L987.198 1213.72 L986.612 1213.72 L986.025 1213.72  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.16 986.612,1214.16 987.198,1214.16 987.785,1214.16 988.371,1214.16 988.957,1214.16 989.544,1214.16 990.13,1214.16 990.717,1214.16 991.303,1214.16 991.889,1214.16 992.476,1214.16 993.062,1214.16 993.649,1214.16 994.235,1214.16 994.822,1214.16 995.408,1214.16 995.994,1214.16 996.581,1214.16 997.167,1214.16 997.754,1214.16 998.34,1214.16 998.926,1214.16 999.513,1214.16 1000.1,1214.16 1000.69,1214.16 1001.27,1214.16 1001.86,1214.16 1002.44,1214.16 1003.03,1214.16 1003.62,1214.16 1004.2,1214.16 1004.79,1214.16 1005.38,1214.16 1005.96,1214.16 1006.55,1214.16 1007.14,1214.16 1007.72,1214.16 1008.31,1214.16 1008.9,1214.16 1009.48,1214.16 1010.07,1214.16 1010.65,1214.16 1011.24,1214.16 1011.83,1214.16 1012.41,1214.16 1013,1214.16 1013.59,1214.16 1014.17,1214.16 1014.76,1214.16 1015.35,1214.16 1015.93,1214.16 1016.52,1214.16 1017.11,1214.16 1017.69,1214.16 1018.28,1214.16 1018.86,1214.16 1019.45,1214.16 1020.04,1214.16 1020.62,1214.16 1021.21,1214.16 1021.8,1214.16 1022.38,1214.16 1022.97,1214.16 1023.56,1214.16 1024.14,1214.16 1024.73,1214.16 1025.32,1214.16 1025.9,1214.16 1026.49,1214.16 1027.07,1214.16 1027.66,1214.16 1028.25,1214.16 1028.83,1214.16 1029.42,1214.16 1030.01,1214.16 1030.59,1214.16 1031.18,1214.16 1031.77,1214.16 1032.35,1214.16 1032.94,1214.16 1033.52,1214.16 1034.11,1214.16 1034.7,1214.16 1035.28,1214.16 1035.87,1214.16 1036.46,1214.16 1037.04,1214.16 1037.63,1214.16 1038.22,1214.16 1038.8,1214.16 1039.39,1214.16 1039.98,1214.16 1040.56,1214.16 1041.15,1214.16 1041.73,1214.16 1042.32,1214.16 1042.91,1214.16 1043.49,1214.16 1044.08,1214.16 1044.67,1214.16 1045.25,1214.16 1045.84,1214.16 1046.43,1214.16 1047.01,1214.16 1047.6,1214.16 1048.19,1214.16 1048.77,1214.16 1049.36,1214.16 1049.94,1214.16 1050.53,1214.16 1051.12,1214.16 1051.7,1214.16 1052.29,1214.16 1052.88,1214.16 1053.46,1214.16 1054.05,1214.16 1054.64,1214.16 1055.22,1214.16 1055.81,1214.16 1056.39,1214.16 1056.98,1214.16 1057.57,1214.16 1058.15,1214.16 1058.74,1214.16 1059.33,1214.16 1059.91,1214.16 1060.5,1214.16 1061.09,1214.16 1061.67,1214.16 1062.26,1214.16 1062.85,1214.16 1063.43,1214.16 1064.02,1214.16 1064.6,1214.16 1065.19,1214.16 1065.78,1214.16 1066.36,1214.16 1066.95,1214.16 1067.54,1214.16 1068.12,1214.16 1068.71,1214.16 1069.3,1214.16 1069.88,1214.16 1070.47,1214.16 1071.06,1214.16 1071.64,1214.16 1072.23,1214.16 1072.81,1214.16 1073.4,1214.16 1073.99,1214.16 1074.57,1214.16 1075.16,1214.16 1075.75,1214.16 1076.33,1214.16 1076.92,1214.16 1077.51,1214.16 1078.09,1214.16 1078.68,1214.16 1079.26,1214.16 1079.85,1214.16 1080.44,1214.16 1081.02,1214.16 1081.61,1214.16 1082.2,1214.16 1082.78,1214.16 1083.37,1214.16 1083.96,1214.16 1084.54,1214.16 1085.13,1214.16 1085.72,1214.16 1086.3,1214.16 1086.89,1214.16 1087.47,1214.16 1088.06,1214.16 1088.65,1214.16 1089.23,1214.16 1089.82,1214.16 1090.41,1214.16 1090.99,1214.16 1091.58,1214.16 1092.17,1214.16 1092.75,1214.16 1093.34,1214.16 1093.93,1214.16 1094.51,1214.16 1095.1,1214.16 1095.68,1214.16 1096.27,1214.16 1096.86,1214.16 1097.44,1214.16 1098.03,1214.16 1098.62,1214.16 1099.2,1214.16 1099.79,1214.16 1100.38,1214.16 1100.96,1214.16 1101.55,1214.16 1102.14,1214.16 1102.72,1214.16 1103.31,1214.16 1103.89,1214.16 1104.48,1214.16 1105.07,1214.16 1105.65,1214.16 1106.24,1214.16 1106.83,1214.16 1107.41,1214.16 1108,1214.16 1108.59,1214.16 1109.17,1214.16 1109.76,1214.16 1110.34,1214.16 1110.93,1214.16 1111.52,1214.16 1112.1,1214.16 1112.69,1214.16 1113.28,1214.16 1113.86,1214.16 1114.45,1214.16 1115.04,1214.16 1115.62,1214.16 1116.21,1214.16 1116.8,1214.16 1117.38,1214.16 1117.97,1214.16 1118.55,1214.16 1119.14,1214.16 1119.73,1214.16 1120.31,1214.16 1120.9,1214.16 1121.49,1214.16 1122.07,1214.16 1122.66,1214.16 1123.25,1214.16 1123.83,1214.16 1124.42,1214.16 1125.01,1214.16 1125.59,1214.16 1126.18,1214.16 1126.76,1214.16 1127.35,1214.16 1127.94,1214.16 1128.52,1214.16 1129.11,1214.16 1129.7,1214.16 1130.28,1214.16 1130.87,1214.16 1131.46,1214.16 1132.04,1214.16 1132.63,1214.16 1133.21,1214.16 1133.8,1214.16 1134.39,1214.16 1134.97,1214.16 1135.56,1214.16 1136.15,1214.16 1136.73,1214.16 1137.32,1214.16 1137.91,1214.16 1138.49,1214.16 1139.08,1214.16 1139.67,1214.16 1140.25,1214.16 1140.84,1214.16 1141.42,1214.16 1142.01,1214.16 1142.6,1214.16 1143.18,1214.16 1143.77,1214.16 1144.36,1214.16 1144.94,1214.16 1145.53,1214.16 1146.12,1214.16 1146.7,1214.16 1147.29,1214.16 1147.88,1214.16 1148.46,1214.16 1149.05,1214.16 1149.63,1214.16 1150.22,1214.16 1150.81,1214.16 1151.39,1214.16 1151.98,1214.16 1152.57,1214.16 1153.15,1214.16 1153.74,1214.16 1154.33,1214.16 1154.91,1214.16 1155.5,1214.16 1156.09,1214.16 1156.67,1214.16 1157.26,1214.16 1157.84,1214.16 1158.43,1214.16 1159.02,1214.16 1159.6,1214.16 1160.19,1214.16 1160.78,1214.16 1161.36,1214.16 1161.95,1214.16 1162.54,1214.16 1163.12,1214.16 1163.71,1214.16 1164.29,1214.16 1164.88,1214.16 1165.47,1214.16 1166.05,1214.16 1166.64,1214.16 1167.23,1214.16 1167.81,1214.16 1168.4,1214.16 1168.99,1214.16 1169.57,1214.16 1170.16,1214.16 1170.75,1214.16 1171.33,1214.16 1171.92,1214.16 1172.5,1214.16 1173.09,1214.16 1173.68,1214.16 1174.26,1214.16 1174.85,1214.16 1175.44,1214.16 1176.02,1214.16 1176.61,1214.16 1177.2,1214.16 1177.78,1214.16 1178.37,1214.16 1178.96,1214.16 1179.54,1214.16 1180.13,1214.16 1180.71,1214.16 1181.3,1214.16 1181.89,1214.16 1182.47,1214.16 1183.06,1214.16 1183.65,1214.16 1184.23,1214.16 1184.82,1214.16 1185.41,1214.16 1185.99,1214.16 1186.58,1214.16 1187.16,1214.16 1187.75,1214.16 1188.34,1214.16 1188.92,1214.16 1189.51,1214.16 1190.1,1214.16 1190.68,1214.16 1191.27,1214.16 1191.86,1214.16 1192.44,1214.16 1193.03,1214.16 1193.62,1214.16 1194.2,1214.16 1194.79,1214.16 1195.37,1214.16 1195.96,1214.16 1196.55,1214.16 1197.13,1214.16 1197.72,1214.16 1198.31,1214.16 1198.89,1214.16 1199.48,1214.16 1200.07,1214.16 1200.65,1214.16 1201.24,1214.16 1201.83,1214.16 1202.41,1214.16 1203,1214.16 1203.58,1214.16 1204.17,1214.16 1204.76,1214.16 1205.34,1214.16 1205.93,1214.16 1206.52,1214.16 1207.1,1214.16 1207.69,1214.16 1208.28,1214.16 1208.86,1214.16 1209.45,1214.16 1210.03,1214.16 1210.62,1214.16 1211.21,1214.16 1211.79,1214.16 1212.38,1214.16 1212.97,1214.16 1213.55,1214.16 1214.14,1214.16 1214.73,1214.16 1215.31,1214.16 1215.9,1214.16 1216.49,1214.16 1217.07,1214.16 1217.66,1214.16 1218.24,1214.16 1218.83,1214.16 1219.42,1214.16 1220,1214.16 1220.59,1214.16 1221.18,1214.16 1221.76,1214.16 1222.35,1214.16 1222.94,1214.16 1223.52,1214.16 1224.11,1214.16 1224.7,1214.16 1225.28,1214.16 1225.87,1214.16 1226.45,1214.16 1227.04,1214.16 1227.63,1214.16 1228.21,1214.16 1228.8,1214.16 1229.39,1214.16 1229.97,1214.16 1230.56,1214.16 1231.15,1214.16 1231.73,1214.16 1232.32,1214.16 1232.91,1214.16 1233.49,1214.16 1234.08,1214.16 1234.66,1214.16 1235.25,1214.16 1235.84,1214.16 1236.42,1214.16 1237.01,1214.16 1237.6,1214.16 1238.18,1214.16 1238.77,1214.16 1239.36,1214.16 1239.94,1214.16 1240.53,1214.16 1241.11,1214.16 1241.7,1214.16 1242.29,1214.16 1242.87,1214.16 1243.46,1214.16 1244.05,1214.16 1244.63,1214.16 1245.22,1214.16 1245.81,1214.16 1246.39,1214.16 1246.98,1214.16 1247.57,1214.16 1248.15,1214.16 1248.74,1214.16 1249.32,1214.16 1249.91,1214.16 1250.5,1214.16 1251.08,1214.16 1251.67,1214.16 1252.26,1214.16 1252.84,1214.16 1253.43,1214.16 1254.02,1214.16 1254.6,1214.16 1255.19,1214.16 1255.78,1214.16 1256.36,1214.16 1256.95,1214.16 1257.53,1214.16 1258.12,1214.16 1258.71,1214.16 1259.29,1214.16 1259.88,1214.16 1260.47,1214.16 1261.05,1214.16 1261.64,1214.16 1262.23,1214.16 1262.81,1214.16 1263.4,1214.16 1263.98,1214.16 1264.57,1214.16 1265.16,1214.16 1265.74,1214.16 1266.33,1214.16 1266.92,1214.16 1267.5,1214.16 1268.09,1214.16 1268.68,1214.16 1269.26,1214.16 1269.85,1214.16 1270.44,1214.16 1271.02,1214.16 1271.61,1214.16 1272.19,1214.16 1272.78,1214.16 1273.37,1214.16 1273.95,1214.16 1274.54,1214.16 1275.13,1214.16 1275.71,1214.16 1276.3,1214.16 1276.89,1214.16 1277.47,1214.16 1278.06,1214.16 1278.65,1214.16 1279.23,1214.16 1279.82,1214.16 1280.4,1214.16 1280.99,1214.16 1281.58,1214.16 1282.16,1214.16 1282.75,1214.16 1283.34,1214.16 1283.92,1214.16 1284.51,1214.16 1285.1,1214.16 1285.68,1214.16 1286.27,1214.16 1286.86,1214.16 1287.44,1214.16 1288.03,1214.16 1288.61,1214.16 1289.2,1214.16 1289.79,1214.16 1290.37,1214.16 1290.96,1214.16 1291.55,1214.16 1292.13,1214.16 1292.72,1214.16 1293.31,1214.16 1293.89,1214.16 1294.48,1214.16 1295.06,1214.16 1295.65,1214.16 1296.24,1214.16 1296.82,1214.16 1297.41,1214.16 1298,1214.16 1298.58,1214.16 1299.17,1214.16 1299.76,1214.16 1300.34,1214.16 1300.93,1214.16 1301.52,1214.16 1302.1,1214.16 1302.69,1214.16 1303.27,1214.16 1303.86,1214.16 1304.45,1214.16 1305.03,1214.16 1305.62,1214.16 1306.21,1214.16 1306.79,1214.16 1307.38,1214.16 1307.97,1214.16 1308.55,1214.16 1309.14,1214.16 1309.73,1214.16 1310.31,1214.16 1310.9,1214.16 1311.48,1214.16 1312.07,1214.16 1312.66,1214.16 1313.24,1214.16 1313.83,1214.16 1314.42,1214.16 1315,1214.16 1315.59,1214.16 1316.18,1214.16 1316.76,1214.16 1317.35,1214.16 1317.93,1214.16 1318.52,1214.16 1319.11,1214.16 1319.69,1214.16 1320.28,1214.16 1320.87,1214.16 1321.45,1214.16 1322.04,1214.16 1322.63,1214.16 1323.21,1214.16 1323.8,1214.16 1324.39,1214.16 1324.97,1214.16 1325.56,1214.16 1326.14,1214.16 1326.73,1214.16 1327.32,1214.16 1327.9,1214.16 1328.49,1214.16 1329.08,1214.16 1329.66,1214.16 1330.25,1214.16 1330.84,1214.16 1331.42,1214.16 1332.01,1214.16 1332.6,1214.16 1333.18,1214.16 1333.77,1214.16 1334.35,1214.16 1334.94,1214.16 1335.53,1214.16 1336.11,1214.16 1336.7,1214.16 1337.29,1214.16 1337.87,1214.16 1338.46,1214.16 1339.05,1214.16 1339.63,1214.16 1340.22,1214.16 1340.8,1214.16 1341.39,1214.16 1341.98,1214.16 1342.56,1214.16 1343.15,1214.16 1343.74,1214.16 1344.32,1214.16 1344.91,1214.16 1345.5,1214.16 1346.08,1214.16 1346.67,1214.16 1347.26,1214.16 1347.84,1214.16 1348.43,1214.16 1349.01,1214.16 1349.6,1214.16 1350.19,1214.16 1350.77,1214.16 1351.36,1214.16 1351.95,1214.16 1352.53,1214.16 1353.12,1214.16 1353.71,1214.16 1354.29,1214.16 1354.88,1214.16 1355.47,1214.16 1356.05,1214.16 1356.64,1214.16 1357.22,1214.16 1357.81,1214.16 1358.4,1214.16 1358.98,1214.16 1359.57,1214.16 1360.16,1214.16 1360.74,1214.16 1361.33,1214.16 1361.92,1214.16 1362.5,1214.16 1363.09,1214.16 1363.68,1214.16 1364.26,1214.16 1364.85,1214.16 1365.43,1214.16 1366.02,1214.16 1366.61,1214.16 1367.19,1214.16 1367.78,1214.16 1368.37,1214.16 1368.95,1214.16 1369.54,1214.16 1370.13,1214.16 1370.71,1214.16 1371.3,1214.16 1371.88,1214.16 1372.47,1214.16 1373.06,1214.16 1373.64,1214.16 1374.23,1214.16 1374.82,1214.16 1375.4,1214.16 1375.99,1214.16 1376.58,1214.16 1377.16,1214.16 1377.75,1214.16 1378.34,1214.16 1378.92,1214.16 1379.51,1214.16 1380.09,1214.16 1380.68,1214.16 1381.27,1214.16 1381.85,1214.16 1382.44,1214.16 1383.03,1214.16 1383.61,1214.16 1384.2,1214.16 1384.79,1214.16 1385.37,1214.16 1385.96,1214.16 1386.55,1214.16 1387.13,1214.16 1387.72,1214.16 1388.3,1214.16 1388.89,1214.16 1389.48,1214.16 1390.06,1214.16 1390.65,1214.16 1391.24,1214.16 1391.82,1214.16 1392.41,1214.16 1393,1214.16 1393.58,1214.16 1394.17,1214.16 1394.75,1214.16 1395.34,1214.16 1395.93,1214.16 1396.51,1214.16 1397.1,1214.16 1397.69,1214.16 1398.27,1214.16 1398.86,1214.16 1399.45,1214.16 1400.03,1214.16 1400.62,1214.16 1401.21,1214.16 1401.79,1214.16 1402.38,1214.16 1402.96,1214.16 1403.55,1214.16 1404.14,1214.16 1404.72,1214.16 1405.31,1214.16 1405.9,1214.16 1406.48,1214.16 1407.07,1214.16 1407.66,1214.16 1408.24,1214.16 1408.83,1214.16 1409.42,1214.16 1410,1214.16 1410.59,1214.16 1411.17,1214.16 1411.76,1214.16 1412.35,1214.16 1412.93,1214.16 1413.52,1214.16 1414.11,1214.16 1414.69,1214.16 1415.28,1214.16 1415.87,1214.16 1416.45,1214.16 1417.04,1214.16 1417.63,1214.16 1418.21,1214.16 1418.8,1214.16 1419.38,1214.16 1419.97,1214.16 1420.56,1214.16 1421.14,1214.16 1421.73,1214.16 1422.32,1214.16 1422.9,1214.16 1423.49,1214.16 1424.08,1214.16 1424.66,1214.16 1425.25,1214.16 1425.83,1214.16 1426.42,1214.16 1427.01,1214.16 1427.59,1214.16 1428.18,1214.16 1428.77,1214.16 1429.35,1214.16 1429.94,1214.16 1430.53,1214.16 1431.11,1214.16 1431.7,1214.16 1432.29,1214.16 1432.87,1214.16 1433.46,1214.16 1434.04,1214.16 1434.63,1214.16 1435.22,1214.16 1435.8,1214.16 1436.39,1214.16 1436.98,1214.16 1437.56,1214.16 1438.15,1214.16 1438.74,1214.16 1439.32,1214.16 1439.91,1214.16 1440.5,1214.16 1441.08,1214.16 1441.67,1214.16 1442.25,1214.16 1442.84,1214.16 1443.43,1214.16 1444.01,1214.16 1444.6,1214.16 1445.19,1214.16 1445.77,1214.16 1446.36,1214.16 1446.95,1214.16 1447.53,1214.16 1448.12,1214.16 1448.7,1214.16 1449.29,1214.16 1449.88,1214.16 1450.46,1214.16 1451.05,1214.16 1451.64,1214.16 1452.22,1214.16 1452.81,1214.16 1453.4,1214.16 1453.98,1214.16 1454.57,1214.16 1455.16,1214.16 1455.74,1214.16 1456.33,1214.16 1456.91,1214.16 1457.5,1214.16 1458.09,1214.16 1458.67,1214.16 1459.26,1214.16 1459.85,1214.16 1460.43,1214.16 1461.02,1214.16 1461.61,1214.16 1462.19,1214.16 1462.78,1214.16 1463.37,1214.16 1463.95,1214.16 1464.54,1214.16 1465.12,1214.16 1465.71,1214.16 1466.3,1214.16 1466.88,1214.16 1467.47,1214.16 1468.06,1214.16 1468.64,1214.16 1469.23,1214.16 1469.82,1214.16 1470.4,1214.16 1470.99,1214.16 1471.57,1214.16 1472.16,1214.16 1472.75,1214.16 1473.33,1214.16 1473.92,1214.16 1474.51,1214.16 1475.09,1214.16 1475.68,1214.16 1476.27,1214.16 1476.85,1214.16 1477.44,1214.16 1478.03,1214.16 1478.61,1214.16 1479.2,1214.16 1479.78,1214.16 1480.37,1214.16 1480.96,1214.16 1481.54,1214.16 1482.13,1214.16 1482.72,1214.16 1483.3,1214.16 1483.89,1214.16 1484.48,1214.16 1485.06,1214.16 1485.65,1214.16 1486.24,1214.16 1486.82,1214.16 1487.41,1214.16 1487.99,1214.16 1488.58,1214.16 1489.17,1214.16 1489.75,1214.16 1490.34,1214.16 1490.93,1214.16 1491.51,1214.16 1492.1,1214.16 1492.69,1214.16 1493.27,1214.16 1493.86,1214.16 1494.45,1214.16 1495.03,1214.16 1495.62,1214.16 1496.2,1214.16 1496.79,1214.16 1497.38,1214.16 1497.96,1214.16 1498.55,1214.16 1499.14,1214.16 1499.72,1214.16 1500.31,1214.16 1500.9,1214.16 1501.48,1214.16 1502.07,1214.16 1502.65,1214.16 1503.24,1214.16 1503.83,1214.16 1504.41,1214.16 1505,1214.16 1505.59,1214.16 1506.17,1214.16 1506.76,1214.16 1507.35,1214.16 1507.93,1214.16 1508.52,1214.16 1509.11,1214.16 1509.69,1214.16 1510.28,1214.16 1510.86,1214.16 1511.45,1214.16 1512.04,1214.16 1512.62,1214.16 1513.21,1214.16 1513.8,1214.16 1514.38,1214.16 1514.97,1214.16 1515.56,1214.16 1516.14,1214.16 1516.73,1214.16 1517.32,1214.16 1517.9,1214.16 1518.49,1214.16 1519.07,1214.16 1519.66,1214.16 1520.25,1214.16 1520.83,1214.16 1521.42,1214.16 1522.01,1214.16 1522.59,1214.16 1523.18,1214.16 1523.77,1214.16 1524.35,1214.16 1524.94,1214.16 1525.52,1214.16 1526.11,1214.16 1526.7,1214.16 1527.28,1214.16 1527.87,1214.16 1528.46,1214.16 1529.04,1214.16 1529.63,1214.16 1530.22,1214.16 1530.8,1214.16 1531.39,1214.16 1531.98,1214.16 1532.56,1214.16 1533.15,1214.16 1533.73,1214.16 1534.32,1214.16 1534.91,1214.16 1535.49,1214.16 1536.08,1214.16 1536.67,1214.16 1537.25,1214.16 1537.84,1214.16 1538.43,1214.16 1539.01,1214.16 1539.6,1214.16 1540.19,1214.16 1540.77,1214.16 1541.36,1214.16 1541.94,1214.16 1542.53,1214.16 1543.12,1214.16 1543.7,1214.16 1544.29,1214.16 1544.88,1214.16 1545.46,1214.16 1546.05,1214.16 1546.64,1214.16 1547.22,1214.16 1547.81,1214.16 1548.4,1214.16 1548.98,1214.16 1549.57,1214.16 1550.15,1214.16 1550.74,1214.16 1551.33,1214.16 1551.91,1214.16 1552.5,1214.16 1553.09,1214.16 1553.67,1214.16 1554.26,1214.16 1554.85,1214.16 1555.43,1214.16 1556.02,1214.16 1556.6,1214.16 1557.19,1214.16 1557.78,1214.16 1558.36,1214.16 1558.95,1214.16 1559.54,1214.16 1560.12,1214.16 1560.71,1214.16 1561.3,1214.16 1561.88,1214.16 1562.47,1214.16 1563.06,1214.16 1563.64,1214.16 1564.23,1214.16 1564.81,1214.16 1565.4,1214.16 1565.99,1214.16 1566.57,1214.16 1567.16,1214.16 1567.75,1214.16 1568.33,1214.16 1568.92,1214.16 1569.51,1214.16 1570.09,1214.16 1570.68,1214.16 1571.27,1214.16 1571.85,1214.16 1572.44,1214.16 1573.02,1214.16 1573.61,1214.16 1574.2,1214.16 1574.78,1214.16 1575.37,1214.16 1575.96,1214.16 1576.54,1214.16 1577.13,1214.16 1577.72,1214.16 1578.3,1214.16 1578.89,1214.16 1579.47,1214.16 1580.06,1214.16 1580.65,1214.16 1581.23,1214.16 1581.82,1214.16 1582.41,1214.16 1582.99,1214.16 1583.58,1214.16 1584.17,1214.16 1584.75,1214.16 1585.34,1214.16 1585.93,1214.16 1586.51,1214.16 1587.1,1214.16 1587.68,1214.16 1588.27,1214.16 1588.86,1214.16 1589.44,1214.16 1590.03,1214.16 1590.62,1214.16 1591.2,1214.16 1591.79,1214.16 1592.38,1214.16 1592.96,1214.16 1593.55,1214.16 1594.14,1214.16 1594.72,1214.16 1595.31,1214.16 1595.89,1214.16 1596.48,1214.16 1597.07,1214.16 1597.65,1214.16 1598.24,1214.16 1598.83,1214.16 1599.41,1214.16 1600,1214.16 1600.59,1214.16 1601.17,1214.16 1601.76,1214.16 1602.34,1214.16 1602.93,1214.16 1603.52,1214.16 1604.1,1214.16 1604.69,1214.16 1605.28,1214.16 1605.86,1214.16 1606.45,1214.16 1607.04,1214.16 1607.62,1214.16 1608.21,1214.16 1608.8,1214.16 1609.38,1214.16 1609.97,1214.16 1610.55,1214.16 1611.14,1214.16 1611.73,1214.16 1612.31,1214.16 1612.9,1214.16 1613.49,1214.16 1614.07,1214.16 1614.66,1214.16 1615.25,1214.16 1615.83,1214.16 1616.42,1214.16 1617.01,1214.16 1617.59,1214.16 1618.18,1214.16 1618.76,1214.16 1619.35,1214.16 1619.94,1214.16 1620.52,1214.16 1621.11,1214.16 1621.7,1214.16 1622.28,1214.16 1622.87,1214.16 1623.46,1214.16 1624.04,1214.16 1624.63,1214.16 1625.22,1214.16 1625.8,1214.16 1626.39,1214.16 1626.97,1214.16 1627.56,1214.16 1628.15,1214.16 1628.73,1214.16 1629.32,1214.16 1629.91,1214.16 1630.49,1214.16 1631.08,1214.16 1631.67,1214.16 1632.25,1214.16 1632.84,1214.16 1633.42,1214.16 1634.01,1214.16 1634.6,1214.16 1635.18,1214.16 1635.77,1214.16 1636.36,1214.16 1636.94,1214.16 1637.53,1214.16 1638.12,1214.16 1638.7,1214.16 1639.29,1214.16 1639.88,1214.16 1640.46,1214.16 1641.05,1214.16 1641.63,1214.16 1642.22,1214.16 1642.81,1214.16 1643.39,1214.16 1643.98,1214.16 1644.57,1214.16 1645.15,1214.16 1645.74,1214.16 1646.33,1214.16 1646.91,1214.16 1647.5,1214.16 1648.09,1214.16 1648.67,1214.16 1649.26,1214.16 1649.84,1214.16 1650.43,1214.16 1651.02,1214.16 1651.6,1214.16 1652.19,1214.16 1652.78,1214.16 1653.36,1214.16 1653.95,1214.16 1654.54,1214.16 1655.12,1214.16 1655.71,1214.16 1656.29,1214.16 1656.88,1214.16 1657.47,1214.16 1658.05,1214.16 1658.64,1214.16 1659.23,1214.16 1659.81,1214.16 1660.4,1214.16 1660.99,1214.16 1661.57,1214.16 1662.16,1214.16 1662.75,1214.16 1663.33,1214.16 1663.92,1214.16 1664.5,1214.16 1665.09,1214.16 1665.68,1214.16 1666.26,1214.16 1666.85,1214.16 1667.44,1214.16 1668.02,1214.16 1668.61,1214.16 1669.2,1214.16 1669.78,1214.16 1670.37,1214.16 1670.96,1214.16 1671.54,1214.16 1672.13,1214.16 1672.71,1214.16 1673.3,1214.16 1673.89,1214.16 1674.47,1214.16 1675.06,1214.16 1675.65,1214.16 1676.23,1214.16 1676.82,1214.16 1677.41,1214.16 1677.99,1214.16 1678.58,1214.16 1679.17,1214.16 1679.75,1214.16 1680.34,1214.16 1680.92,1214.16 1681.51,1214.16 1682.1,1214.16 1682.68,1214.16 1683.27,1214.16 1683.86,1214.16 1684.44,1214.16 1685.03,1214.16 1685.62,1214.16 1686.2,1214.16 1686.79,1214.16 1687.37,1214.16 1687.96,1214.16 1688.55,1214.16 1689.13,1214.16 1689.72,1214.16 1690.31,1214.16 1690.89,1214.16 1691.48,1214.16 1692.07,1214.16 1692.65,1214.16 1693.24,1214.16 1693.83,1214.16 1694.41,1214.16 1695,1214.16 1695.58,1214.16 1696.17,1214.16 1696.76,1214.16 1697.34,1214.16 1697.93,1214.16 1698.52,1214.16 1699.1,1214.16 1699.69,1214.16 1700.28,1214.16 1700.86,1214.16 1701.45,1214.16 1702.04,1214.16 1702.62,1214.16 1703.21,1214.16 1703.79,1214.16 1704.38,1214.16 1704.97,1214.16 1705.55,1214.16 1706.14,1214.16 1706.73,1214.16 1707.31,1214.16 1707.9,1214.16 1708.49,1214.16 1709.07,1214.16 1709.66,1214.16 1710.24,1214.16 1710.83,1214.16 1711.42,1214.16 1712,1214.16 1712.59,1214.16 1713.18,1214.16 1713.76,1214.16 1714.35,1214.16 1714.94,1214.16 1715.52,1214.16 1716.11,1214.16 1716.7,1214.16 1717.28,1214.16 1717.87,1214.16 1718.45,1214.16 1719.04,1214.16 1719.63,1214.16 1720.21,1214.16 1720.8,1214.16 1721.39,1214.16 1721.97,1214.16 1722.56,1214.16 1723.15,1214.16 1723.73,1214.16 1724.32,1214.16 1724.91,1214.16 1725.49,1214.16 1726.08,1214.16 1726.66,1214.16 1727.25,1214.16 1727.84,1214.16 1728.42,1214.16 1729.01,1214.16 1729.6,1214.16 1730.18,1214.16 1730.77,1214.16 1731.36,1214.16 1731.94,1214.16 1732.53,1214.16 1733.11,1214.16 1733.7,1214.16 1734.29,1214.16 1734.87,1214.16 1735.46,1214.16 1736.05,1214.16 1736.63,1214.16 1737.22,1214.16 1737.81,1214.16 1738.39,1214.16 1738.98,1214.16 1739.57,1214.16 1740.15,1214.16 1740.74,1214.16 1741.32,1214.16 1741.91,1214.16 1742.5,1214.16 1743.08,1214.16 1743.67,1214.16 1744.26,1214.16 1744.84,1214.16 1745.43,1214.16 1746.02,1214.16 1746.6,1214.16 1747.19,1214.16 1747.78,1214.16 1748.36,1214.16 1748.95,1214.16 1749.53,1214.16 1750.12,1214.16 1750.71,1214.16 1751.29,1214.16 1751.88,1214.16 1752.47,1214.16 1753.05,1214.16 1753.64,1214.16 1754.23,1214.16 1754.81,1214.16 1755.4,1214.16 1755.99,1214.16 1756.57,1214.16 1757.16,1214.16 1757.74,1214.16 1758.33,1214.16 1758.92,1214.16 1759.5,1214.16 1760.09,1214.16 1760.68,1214.16 1761.26,1214.16 1761.85,1214.16 1762.44,1214.16 1763.02,1214.16 1763.61,1214.16 1764.19,1214.16 1764.78,1214.16 1765.37,1214.16 1765.95,1214.16 1766.54,1214.16 1767.13,1214.16 1767.71,1214.16 1768.3,1214.16 1768.89,1214.16 1769.47,1214.16 1770.06,1214.16 1770.65,1214.16 1771.23,1214.16 1771.82,1214.16 1772.4,1214.16 1772.99,1214.16 1773.58,1214.16 1774.16,1214.16 1774.75,1214.16 1775.34,1214.16 1775.92,1214.16 1776.51,1214.16 1777.1,1214.16 1777.68,1214.16 1778.27,1214.16 1778.86,1214.16 1779.44,1214.16 1780.03,1214.16 1780.61,1214.16 1781.2,1214.16 1781.79,1214.16 1782.37,1214.16 1782.96,1214.16 1783.55,1214.16 1784.13,1214.16 1784.72,1214.16 1785.31,1214.16 1785.89,1214.16 1786.48,1214.16 1787.06,1214.16 1787.65,1214.16 1788.24,1214.16 1788.82,1214.16 1789.41,1214.16 1790,1214.16 1790.58,1214.16 1791.17,1214.16 1791.76,1214.16 1792.34,1214.16 1792.93,1214.16 1793.52,1214.16 1794.1,1214.16 1794.69,1214.16 1795.27,1214.16 1795.86,1214.16 1796.45,1214.16 1797.03,1214.16 1797.62,1214.16 1798.21,1214.16 1798.79,1214.16 1799.38,1214.16 1799.97,1214.16 1800.55,1214.16 1801.14,1214.16 1801.73,1214.16 1802.31,1214.16 1802.9,1214.16 1803.48,1214.16 1804.07,1214.16 1804.66,1214.16 1805.24,1214.16 1805.83,1214.16 1806.42,1214.16 1807,1214.16 1807.59,1214.16 1808.18,1214.16 1808.76,1214.16 1809.35,1214.16 1809.94,1214.16 1810.52,1214.16 1811.11,1214.16 1811.69,1214.16 1812.28,1214.16 1812.87,1214.16 1813.45,1214.16 1814.04,1214.16 1814.63,1214.16 1815.21,1214.16 1815.8,1214.16 1816.39,1214.16 1816.97,1214.16 1817.56,1214.16 1818.14,1214.16 1818.73,1214.16 1819.32,1214.16 1819.9,1214.16 1820.49,1214.16 1821.08,1214.16 1821.66,1214.16 1822.25,1214.16 1822.84,1214.16 1823.42,1214.16 1824.01,1214.16 1824.6,1214.16 1825.18,1214.16 1825.77,1214.16 1826.35,1214.16 1826.94,1214.16 1827.53,1214.16 1828.11,1214.16 1828.7,1214.16 1829.29,1214.16 1829.87,1214.16 1830.46,1214.16 1831.05,1214.16 1831.63,1214.16 1832.22,1214.16 1832.81,1214.16 1833.39,1214.16 1833.98,1214.16 1834.56,1214.16 1835.15,1214.16 1835.74,1214.16 1836.32,1214.16 1836.91,1214.16 1837.5,1214.16 1838.08,1214.16 1838.67,1214.16 1839.26,1214.16 1839.84,1214.16 1840.43,1214.16 1841.01,1214.16 1841.6,1214.16 1842.19,1214.16 1842.77,1214.16 1843.36,1214.16 1843.95,1214.16 1844.53,1214.16 1845.12,1214.16 1845.71,1214.16 1846.29,1214.16 1846.88,1214.16 1847.47,1214.16 1848.05,1214.16 1848.64,1214.16 1849.22,1214.16 1849.81,1214.16 1850.4,1214.16 1850.98,1214.16 1851.57,1214.16 1852.16,1214.16 1852.74,1214.16 1853.33,1214.16 1853.92,1214.16 1854.5,1214.16 1855.09,1214.16 1855.68,1214.16 1856.26,1214.16 1856.85,1214.16 1857.43,1214.16 1858.02,1214.16 1858.61,1214.16 1859.19,1214.16 1859.78,1214.16 1860.37,1214.16 1860.95,1214.16 1861.54,1214.16 1862.13,1214.16 1862.71,1214.16 1863.3,1214.16 1863.88,1214.16 1864.47,1214.16 1865.06,1214.16 1865.64,1214.16 1866.23,1214.16 1866.82,1214.16 1867.4,1214.16 1867.99,1214.16 1868.58,1214.16 1869.16,1214.16 1869.75,1214.16 1870.34,1214.16 1870.92,1214.16 1871.51,1214.16 1872.09,1214.16 1872.68,1214.16 1873.27,1214.16 1873.85,1214.16 1874.44,1214.16 1875.03,1214.16 1875.61,1214.16 1876.2,1214.16 1876.79,1214.16 1877.37,1214.16 1877.96,1214.16 1878.55,1214.16 1879.13,1214.16 1879.72,1214.16 1880.3,1214.16 1880.89,1214.16 1881.48,1214.16 1882.06,1214.16 1882.65,1214.16 1883.24,1214.16 1883.82,1214.16 1884.41,1214.16 1885,1214.16 1885.58,1214.16 1886.17,1214.16 1886.76,1214.16 1887.34,1214.16 1887.93,1214.16 1888.51,1214.16 1889.1,1214.16 1889.69,1214.16 1890.27,1214.16 1890.86,1214.16 1891.45,1214.16 1892.03,1214.16 1892.62,1214.16 1893.21,1214.16 1893.79,1214.16 1894.38,1214.16 1894.96,1214.16 1895.55,1214.16 1896.14,1214.16 1896.72,1214.16 1897.31,1214.16 1897.9,1214.16 1898.48,1214.16 1899.07,1214.16 1899.66,1214.16 1900.24,1214.16 1900.83,1214.16 1901.42,1214.16 1902,1214.16 1902.59,1214.16 1903.17,1214.16 1903.76,1214.16 1904.35,1214.16 1904.93,1214.16 1905.52,1214.16 1906.11,1214.16 1906.69,1214.16 1907.28,1214.16 1907.87,1214.16 1908.45,1214.16 1909.04,1214.16 1909.63,1214.16 1910.21,1214.16 1910.8,1214.16 1911.38,1214.16 1911.97,1214.16 1912.56,1214.16 1913.14,1214.16 1913.73,1214.16 1914.32,1214.16 1914.9,1214.16 1915.49,1214.16 1916.08,1214.16 1916.66,1214.16 1917.25,1214.16 1917.83,1214.16 1918.42,1214.16 1919.01,1214.16 1919.59,1214.16 1920.18,1214.16 1920.77,1214.16 1921.35,1214.16 1921.94,1214.16 1922.53,1214.16 1923.11,1214.16 1923.7,1214.16 1924.29,1214.16 1924.87,1214.16 1925.46,1214.16 1926.04,1214.16 1926.63,1214.16 1927.22,1214.16 1927.8,1214.16 1928.39,1214.16 1928.98,1214.16 1929.56,1214.16 1930.15,1214.16 1930.74,1214.16 1931.32,1214.16 1931.91,1214.16 1932.5,1214.16 1933.08,1214.16 1933.67,1214.16 1934.25,1214.16 1934.84,1214.16 1935.43,1214.16 1936.01,1214.16 1936.6,1214.16 1937.19,1214.16 1937.77,1214.16 1938.36,1214.16 1938.95,1214.16 1939.53,1214.16 1940.12,1214.16 1940.71,1214.16 1941.29,1214.16 1941.88,1214.16 1942.46,1214.16 1943.05,1214.16 1943.64,1214.16 1944.22,1214.16 1944.81,1214.16 1945.4,1214.16 1945.98,1214.16 1946.57,1214.16 1947.16,1214.16 1947.74,1214.16 1948.33,1214.16 1948.91,1214.16 1949.5,1214.16 1950.09,1214.16 1950.67,1214.16 1951.26,1214.16 1951.85,1214.16 1952.43,1214.16 1953.02,1214.16 1953.61,1214.16 1954.19,1214.16 1954.78,1214.16 1955.37,1214.16 1955.95,1214.16 1956.54,1214.16 1957.12,1214.16 1957.71,1214.16 1958.3,1214.16 1958.88,1214.16 1959.47,1214.16 1960.06,1214.16 1960.64,1214.16 1961.23,1214.16 1961.82,1214.16 1962.4,1214.16 1962.99,1214.16 1963.58,1214.16 1964.16,1214.16 1964.75,1214.16 1965.33,1214.16 1965.92,1214.16 1966.51,1214.16 1967.09,1214.16 1967.68,1214.16 1968.27,1214.16 1968.85,1214.16 1969.44,1214.16 1970.03,1214.16 1970.61,1214.16 1971.2,1214.16 1971.78,1214.16 1972.37,1214.16 1972.96,1214.16 1973.54,1214.16 1974.13,1214.16 1974.72,1214.16 1975.3,1214.16 1975.89,1214.16 1976.48,1214.16 1977.06,1214.16 1977.65,1214.16 1978.24,1214.16 1978.82,1214.16 1979.41,1214.16 1979.99,1214.16 1980.58,1214.16 1981.17,1214.16 1981.75,1214.16 1982.34,1214.16 1982.93,1214.16 1983.51,1214.16 1984.1,1214.16 1984.69,1214.16 1985.27,1214.16 1985.86,1214.16 1986.45,1214.16 1987.03,1214.16 1987.62,1214.16 1988.2,1214.16 1988.79,1214.16 1989.38,1214.16 1989.96,1214.16 1990.55,1214.16 1991.14,1214.16 1991.72,1214.16 1992.31,1214.16 1992.9,1214.16 1993.48,1214.16 1994.07,1214.16 1994.65,1214.16 1995.24,1214.16 1995.83,1214.16 1996.41,1214.16 1997,1214.16 1997.59,1214.16 1998.17,1214.16 1998.76,1214.16 1999.35,1214.16 1999.93,1214.16 2000.52,1214.16 2001.11,1214.16 2001.69,1214.16 2002.28,1214.16 2002.86,1214.16 2003.45,1214.16 2004.04,1214.16 2004.62,1214.16 2005.21,1214.16 2005.8,1214.16 2006.38,1214.16 2006.97,1214.16 2007.56,1214.16 2008.14,1214.16 2008.73,1214.16 2009.32,1214.16 2009.9,1214.16 2010.49,1214.16 2011.07,1214.16 2011.66,1214.16 2012.25,1214.16 2012.83,1214.16 2013.42,1214.16 2014.01,1214.16 2014.59,1214.16 2015.18,1214.16 2015.77,1214.16 2016.35,1214.16 2016.94,1214.16 2017.53,1214.16 2018.11,1214.16 2018.7,1214.16 2019.28,1214.16 2019.87,1214.16 2020.46,1214.16 2021.04,1214.16 2021.63,1214.16 2022.22,1214.16 2022.8,1214.16 2023.39,1214.16 2023.98,1214.16 2024.56,1214.16 2025.15,1214.16 2025.73,1214.16 2026.32,1214.16 2026.91,1214.16 2027.49,1214.16 2028.08,1214.16 2028.67,1214.16 2029.25,1214.16 2029.84,1214.16 2030.43,1214.16 2031.01,1214.16 2031.6,1214.16 2032.19,1214.16 2032.77,1214.16 2033.36,1214.16 2033.94,1214.16 2034.53,1214.16 2035.12,1214.16 2035.7,1214.16 2036.29,1214.16 2036.88,1214.16 2037.46,1214.16 2038.05,1214.16 2038.64,1214.16 2039.22,1214.16 2039.81,1214.16 2040.4,1214.16 2040.98,1214.16 2041.57,1214.16 2042.15,1214.16 2042.74,1214.16 2043.33,1214.16 2043.91,1214.16 2044.5,1214.16 2045.09,1214.16 2045.67,1214.16 2046.26,1214.16 2046.85,1214.16 2047.43,1214.16 2048.02,1214.16 2048.6,1214.16 2049.19,1214.16 2049.78,1214.16 2050.36,1214.16 2050.95,1214.16 2051.54,1214.16 2052.12,1214.16 2052.71,1214.16 2053.3,1214.16 2053.88,1214.16 2054.47,1214.16 2055.06,1214.16 2055.64,1214.16 2056.23,1214.16 2056.81,1214.16 2057.4,1214.16 2057.99,1214.16 2058.57,1214.16 2059.16,1214.16 2059.75,1214.16 2060.33,1214.16 2060.92,1214.16 2061.51,1214.16 2062.09,1214.16 2062.68,1214.16 2063.27,1214.16 2063.85,1214.16 2064.44,1214.16 2065.02,1214.16 2065.61,1214.16 2066.2,1214.16 2066.78,1214.16 2067.37,1214.16 2067.96,1214.16 2068.54,1214.16 2069.13,1214.16 2069.72,1214.16 2070.3,1214.16 2070.89,1214.16 2071.48,1214.16 2072.06,1214.16 2072.65,1214.16 2073.23,1214.16 2073.82,1214.16 2074.41,1214.16 2074.99,1214.16 2075.58,1214.16 2076.17,1214.16 2076.75,1214.16 2077.34,1214.16 2077.93,1214.16 2078.51,1214.16 2079.1,1214.16 2079.68,1214.16 2080.27,1214.16 2080.86,1214.16 2081.44,1214.16 2082.03,1214.16 2082.62,1214.16 2083.2,1214.16 2083.79,1214.16 2084.38,1214.16 2084.96,1214.16 2085.55,1214.16 2086.14,1214.16 2086.72,1214.16 2087.31,1214.16 2087.89,1214.16 2088.48,1214.16 2089.07,1214.16 2089.65,1214.16 2090.24,1214.16 2090.83,1214.16 2091.41,1214.16 2092,1214.16 2092.59,1214.16 2093.17,1214.16 2093.76,1214.16 2094.35,1214.16 2094.93,1214.16 2095.52,1214.16 2096.1,1214.16 2096.69,1214.16 2097.28,1214.16 2097.86,1214.16 2098.45,1214.16 2099.04,1214.16 2099.62,1214.16 2100.21,1214.16 2100.8,1214.16 2101.38,1214.16 2101.97,1214.16 2102.55,1214.16 2103.14,1214.16 2103.73,1214.16 2104.31,1214.16 2104.9,1214.16 2105.49,1214.16 2106.07,1214.16 2106.66,1214.16 2107.25,1214.16 2107.83,1214.16 2108.42,1214.16 2109.01,1214.16 2109.59,1214.16 2110.18,1214.16 2110.76,1214.16 2111.35,1214.16 2111.94,1214.16 2112.52,1214.16 2113.11,1214.16 2113.7,1214.16 2114.28,1214.16 2114.87,1214.16 2115.46,1214.16 2116.04,1214.16 2116.63,1214.16 2117.22,1214.16 2117.8,1214.16 2118.39,1214.16 2118.97,1214.16 2119.56,1214.16 2120.15,1214.16 2120.73,1214.16 2121.32,1214.16 2121.91,1214.16 2122.49,1214.16 2123.08,1214.16 2123.67,1214.16 2124.25,1214.16 2124.84,1214.16 2125.42,1214.16 2126.01,1214.16 2126.6,1214.16 2127.18,1214.16 2127.77,1214.16 2128.36,1214.16 2128.94,1214.16 2129.53,1214.16 2130.12,1214.16 2130.7,1214.16 2131.29,1214.16 2131.88,1214.16 2132.46,1214.16 2133.05,1214.16 2133.63,1214.16 2134.22,1214.16 2134.81,1214.16 2135.39,1214.16 2135.98,1214.16 2136.57,1214.16 2137.15,1214.16 2137.74,1214.16 2138.33,1214.16 2138.91,1214.16 2139.5,1214.16 2140.09,1214.16 2140.67,1214.16 2141.26,1214.16 2141.84,1214.16 2142.43,1214.16 2143.02,1214.16 2143.6,1214.16 2144.19,1214.16 2144.78,1214.16 2145.36,1214.16 2145.95,1214.16 2146.54,1214.16 2147.12,1214.16 2147.71,1214.16 2148.3,1214.16 2148.88,1214.16 2149.47,1214.16 2150.05,1214.16 2150.64,1214.16 2151.23,1214.16 2151.81,1214.16 2152.4,1214.16 2152.99,1214.16 2153.57,1214.16 2154.16,1214.16 2154.75,1214.16 2155.33,1214.16 2155.92,1214.16 2156.5,1214.16 2157.09,1214.16 2157.68,1214.16 2158.26,1214.16 \"/>\n<path clip-path=\"url(#clip782)\" d=\"M986.025 1213.94 L986.612 1213.94 L987.198 1213.94 L987.785 1213.94 L988.371 1213.94 L988.957 1213.94 L989.544 1213.94 L990.13 1213.94 L990.717 1213.94 L991.303 1213.94 L991.889 1213.94 L992.476 1213.94 L993.062 1213.94 L993.649 1213.94 L994.235 1213.94 L994.822 1213.94 L995.408 1213.94 L995.994 1213.94 L996.581 1213.94 L997.167 1213.94 L997.754 1213.94 L998.34 1213.94 L998.926 1213.94 L999.513 1213.94 L1000.1 1213.94 L1000.69 1213.94 L1001.27 1213.94 L1001.86 1213.94 L1002.44 1213.94 L1003.03 1213.94 L1003.62 1213.94 L1004.2 1213.94 L1004.79 1213.94 L1005.38 1213.94 L1005.96 1213.94 L1006.55 1213.94 L1007.14 1213.94 L1007.72 1213.94 L1008.31 1213.94 L1008.9 1213.94 L1009.48 1213.94 L1010.07 1213.94 L1010.65 1213.94 L1011.24 1213.94 L1011.83 1213.94 L1012.41 1213.94 L1013 1213.94 L1013.59 1213.94 L1014.17 1213.94 L1014.76 1213.94 L1015.35 1213.94 L1015.93 1213.94 L1016.52 1213.94 L1017.11 1213.94 L1017.69 1213.94 L1018.28 1213.94 L1018.86 1213.94 L1019.45 1213.94 L1020.04 1213.94 L1020.62 1213.94 L1021.21 1213.94 L1021.8 1213.94 L1022.38 1213.94 L1022.97 1213.94 L1023.56 1213.94 L1024.14 1213.94 L1024.73 1213.94 L1025.32 1213.94 L1025.9 1213.94 L1026.49 1213.94 L1027.07 1213.94 L1027.66 1213.94 L1028.25 1213.94 L1028.83 1213.94 L1029.42 1213.94 L1030.01 1213.94 L1030.59 1213.94 L1031.18 1213.94 L1031.77 1213.94 L1032.35 1213.94 L1032.94 1213.94 L1033.52 1213.94 L1034.11 1213.94 L1034.7 1213.94 L1035.28 1213.94 L1035.87 1213.94 L1036.46 1213.94 L1037.04 1213.94 L1037.63 1213.94 L1038.22 1213.94 L1038.8 1213.94 L1039.39 1213.94 L1039.98 1213.94 L1040.56 1213.94 L1041.15 1213.94 L1041.73 1213.94 L1042.32 1213.94 L1042.91 1213.94 L1043.49 1213.94 L1044.08 1213.94 L1044.67 1213.94 L1045.25 1213.94 L1045.84 1213.94 L1046.43 1213.94 L1047.01 1213.94 L1047.6 1213.94 L1048.19 1213.94 L1048.77 1213.94 L1049.36 1213.94 L1049.94 1213.94 L1050.53 1213.94 L1051.12 1213.94 L1051.7 1213.94 L1052.29 1213.94 L1052.88 1213.94 L1053.46 1213.94 L1054.05 1213.94 L1054.64 1213.94 L1055.22 1213.94 L1055.81 1213.94 L1056.39 1213.94 L1056.98 1213.94 L1057.57 1213.94 L1058.15 1213.94 L1058.74 1213.94 L1059.33 1213.94 L1059.91 1213.94 L1060.5 1213.94 L1061.09 1213.94 L1061.67 1213.94 L1062.26 1213.94 L1062.85 1213.94 L1063.43 1213.94 L1064.02 1213.94 L1064.6 1213.94 L1065.19 1213.94 L1065.78 1213.94 L1066.36 1213.94 L1066.95 1213.94 L1067.54 1213.94 L1068.12 1213.94 L1068.71 1213.94 L1069.3 1213.94 L1069.88 1213.94 L1070.47 1213.94 L1071.06 1213.94 L1071.64 1213.94 L1072.23 1213.94 L1072.81 1213.94 L1073.4 1213.94 L1073.99 1213.94 L1074.57 1213.94 L1075.16 1213.94 L1075.75 1213.94 L1076.33 1213.94 L1076.92 1213.94 L1077.51 1213.94 L1078.09 1213.94 L1078.68 1213.94 L1079.26 1213.94 L1079.85 1213.94 L1080.44 1213.94 L1081.02 1213.94 L1081.61 1213.94 L1082.2 1213.94 L1082.78 1213.94 L1083.37 1213.94 L1083.96 1213.94 L1084.54 1213.94 L1085.13 1213.94 L1085.72 1213.94 L1086.3 1213.94 L1086.89 1213.94 L1087.47 1213.94 L1088.06 1213.94 L1088.65 1213.94 L1089.23 1213.94 L1089.82 1213.94 L1090.41 1213.94 L1090.99 1213.94 L1091.58 1213.94 L1092.17 1213.94 L1092.75 1213.94 L1093.34 1213.94 L1093.93 1213.94 L1094.51 1213.94 L1095.1 1213.94 L1095.68 1213.94 L1096.27 1213.94 L1096.86 1213.94 L1097.44 1213.94 L1098.03 1213.94 L1098.62 1213.94 L1099.2 1213.94 L1099.79 1213.94 L1100.38 1213.94 L1100.96 1213.94 L1101.55 1213.94 L1102.14 1213.94 L1102.72 1213.94 L1103.31 1213.94 L1103.89 1213.94 L1104.48 1213.94 L1105.07 1213.94 L1105.65 1213.94 L1106.24 1213.94 L1106.83 1213.94 L1107.41 1213.94 L1108 1213.94 L1108.59 1213.94 L1109.17 1213.94 L1109.76 1213.94 L1110.34 1213.94 L1110.93 1213.94 L1111.52 1213.94 L1112.1 1213.94 L1112.69 1213.94 L1113.28 1213.94 L1113.86 1213.94 L1114.45 1213.94 L1115.04 1213.94 L1115.62 1213.94 L1116.21 1213.94 L1116.8 1213.94 L1117.38 1213.94 L1117.97 1213.94 L1118.55 1213.94 L1119.14 1213.94 L1119.73 1213.94 L1120.31 1213.94 L1120.9 1213.94 L1121.49 1213.94 L1122.07 1213.94 L1122.66 1213.94 L1123.25 1213.94 L1123.83 1213.94 L1124.42 1213.94 L1125.01 1213.94 L1125.59 1213.94 L1126.18 1213.94 L1126.76 1213.94 L1127.35 1213.94 L1127.94 1213.94 L1128.52 1213.94 L1129.11 1213.94 L1129.7 1213.94 L1130.28 1213.94 L1130.87 1213.94 L1131.46 1213.94 L1132.04 1213.94 L1132.63 1213.94 L1133.21 1213.94 L1133.8 1213.94 L1134.39 1213.94 L1134.97 1213.94 L1135.56 1213.94 L1136.15 1213.94 L1136.73 1213.94 L1137.32 1213.94 L1137.91 1213.94 L1138.49 1213.94 L1139.08 1213.94 L1139.67 1213.94 L1140.25 1213.94 L1140.84 1213.94 L1141.42 1213.94 L1142.01 1213.94 L1142.6 1213.94 L1143.18 1213.94 L1143.77 1213.94 L1144.36 1213.94 L1144.94 1213.94 L1145.53 1213.94 L1146.12 1213.94 L1146.7 1213.94 L1147.29 1213.94 L1147.88 1213.94 L1148.46 1213.94 L1149.05 1213.94 L1149.63 1213.94 L1150.22 1213.94 L1150.81 1213.94 L1151.39 1213.94 L1151.98 1213.94 L1152.57 1213.94 L1153.15 1213.94 L1153.74 1213.94 L1154.33 1213.94 L1154.91 1213.94 L1155.5 1213.94 L1156.09 1213.94 L1156.67 1213.94 L1157.26 1213.94 L1157.84 1213.94 L1158.43 1213.94 L1159.02 1213.94 L1159.6 1213.94 L1160.19 1213.94 L1160.78 1213.94 L1161.36 1213.94 L1161.95 1213.94 L1162.54 1213.94 L1163.12 1213.94 L1163.71 1213.94 L1164.29 1213.94 L1164.88 1213.94 L1165.47 1213.94 L1166.05 1213.94 L1166.64 1213.94 L1167.23 1213.94 L1167.81 1213.94 L1168.4 1213.94 L1168.99 1213.94 L1169.57 1213.94 L1170.16 1213.94 L1170.75 1213.94 L1171.33 1213.94 L1171.92 1213.94 L1172.5 1213.94 L1173.09 1213.94 L1173.68 1213.94 L1174.26 1213.94 L1174.85 1213.94 L1175.44 1213.94 L1176.02 1213.94 L1176.61 1213.94 L1177.2 1213.94 L1177.78 1213.94 L1178.37 1213.94 L1178.96 1213.94 L1179.54 1213.94 L1180.13 1213.94 L1180.71 1213.94 L1181.3 1213.94 L1181.89 1213.94 L1182.47 1213.94 L1183.06 1213.94 L1183.65 1213.94 L1184.23 1213.94 L1184.82 1213.94 L1185.41 1213.94 L1185.99 1213.94 L1186.58 1213.94 L1187.16 1213.94 L1187.75 1213.94 L1188.34 1213.94 L1188.92 1213.94 L1189.51 1213.94 L1190.1 1213.94 L1190.68 1213.94 L1191.27 1213.94 L1191.86 1213.94 L1192.44 1213.94 L1193.03 1213.94 L1193.62 1213.94 L1194.2 1213.94 L1194.79 1213.94 L1195.37 1213.94 L1195.96 1213.94 L1196.55 1213.94 L1197.13 1213.94 L1197.72 1213.94 L1198.31 1213.94 L1198.89 1213.94 L1199.48 1213.94 L1200.07 1213.94 L1200.65 1213.94 L1201.24 1213.94 L1201.83 1213.94 L1202.41 1213.94 L1203 1213.94 L1203.58 1213.94 L1204.17 1213.94 L1204.76 1213.94 L1205.34 1213.94 L1205.93 1213.94 L1206.52 1213.94 L1207.1 1213.94 L1207.69 1213.94 L1208.28 1213.94 L1208.86 1213.94 L1209.45 1213.94 L1210.03 1213.94 L1210.62 1213.94 L1211.21 1213.94 L1211.79 1213.94 L1212.38 1213.94 L1212.97 1213.94 L1213.55 1213.94 L1214.14 1213.94 L1214.73 1213.94 L1215.31 1213.94 L1215.9 1213.94 L1216.49 1213.94 L1217.07 1213.94 L1217.66 1213.94 L1218.24 1213.94 L1218.83 1213.94 L1219.42 1213.94 L1220 1213.94 L1220.59 1213.94 L1221.18 1213.94 L1221.76 1213.94 L1222.35 1213.94 L1222.94 1213.94 L1223.52 1213.94 L1224.11 1213.94 L1224.7 1213.94 L1225.28 1213.94 L1225.87 1213.94 L1226.45 1213.94 L1227.04 1213.94 L1227.63 1213.94 L1228.21 1213.94 L1228.8 1213.94 L1229.39 1213.94 L1229.97 1213.94 L1230.56 1213.94 L1231.15 1213.94 L1231.73 1213.94 L1232.32 1213.94 L1232.91 1213.94 L1233.49 1213.94 L1234.08 1213.94 L1234.66 1213.94 L1235.25 1213.94 L1235.84 1213.94 L1236.42 1213.94 L1237.01 1213.94 L1237.6 1213.94 L1238.18 1213.94 L1238.77 1213.94 L1239.36 1213.94 L1239.94 1213.94 L1240.53 1213.94 L1241.11 1213.94 L1241.7 1213.94 L1242.29 1213.94 L1242.87 1213.94 L1243.46 1213.94 L1244.05 1213.94 L1244.63 1213.94 L1245.22 1213.94 L1245.81 1213.94 L1246.39 1213.94 L1246.98 1213.94 L1247.57 1213.94 L1248.15 1213.94 L1248.74 1213.94 L1249.32 1213.94 L1249.91 1213.94 L1250.5 1213.94 L1251.08 1213.94 L1251.67 1213.94 L1252.26 1213.94 L1252.84 1213.94 L1253.43 1213.94 L1254.02 1213.94 L1254.6 1213.94 L1255.19 1213.94 L1255.78 1213.94 L1256.36 1213.94 L1256.95 1213.94 L1257.53 1213.94 L1258.12 1213.94 L1258.71 1213.94 L1259.29 1213.94 L1259.88 1213.94 L1260.47 1213.94 L1261.05 1213.94 L1261.64 1213.94 L1262.23 1213.94 L1262.81 1213.94 L1263.4 1213.94 L1263.98 1213.94 L1264.57 1213.94 L1265.16 1213.94 L1265.74 1213.94 L1266.33 1213.94 L1266.92 1213.94 L1267.5 1213.94 L1268.09 1213.94 L1268.68 1213.94 L1269.26 1213.94 L1269.85 1213.94 L1270.44 1213.94 L1271.02 1213.94 L1271.61 1213.94 L1272.19 1213.94 L1272.78 1213.94 L1273.37 1213.94 L1273.95 1213.94 L1274.54 1213.94 L1275.13 1213.94 L1275.71 1213.94 L1276.3 1213.94 L1276.89 1213.94 L1277.47 1213.94 L1278.06 1213.94 L1278.65 1213.94 L1279.23 1213.94 L1279.82 1213.94 L1280.4 1213.94 L1280.99 1213.94 L1281.58 1213.94 L1282.16 1213.94 L1282.75 1213.94 L1283.34 1213.94 L1283.92 1213.94 L1284.51 1213.94 L1285.1 1213.94 L1285.68 1213.94 L1286.27 1213.94 L1286.86 1213.94 L1287.44 1213.94 L1288.03 1213.94 L1288.61 1213.94 L1289.2 1213.94 L1289.79 1213.94 L1290.37 1213.94 L1290.96 1213.94 L1291.55 1213.94 L1292.13 1213.94 L1292.72 1213.94 L1293.31 1213.94 L1293.89 1213.94 L1294.48 1213.94 L1295.06 1213.94 L1295.65 1213.94 L1296.24 1213.94 L1296.82 1213.94 L1297.41 1213.94 L1298 1213.94 L1298.58 1213.94 L1299.17 1213.94 L1299.76 1213.94 L1300.34 1213.94 L1300.93 1213.94 L1301.52 1213.94 L1302.1 1213.94 L1302.69 1213.94 L1303.27 1213.94 L1303.86 1213.94 L1304.45 1213.94 L1305.03 1213.94 L1305.62 1213.94 L1306.21 1213.94 L1306.79 1213.94 L1307.38 1213.94 L1307.97 1213.94 L1308.55 1213.94 L1309.14 1213.94 L1309.73 1213.94 L1310.31 1213.94 L1310.9 1213.94 L1311.48 1213.94 L1312.07 1213.94 L1312.66 1213.94 L1313.24 1213.94 L1313.83 1213.94 L1314.42 1213.94 L1315 1213.94 L1315.59 1213.94 L1316.18 1213.94 L1316.76 1213.94 L1317.35 1213.94 L1317.93 1213.94 L1318.52 1213.94 L1319.11 1213.94 L1319.69 1213.94 L1320.28 1213.94 L1320.87 1213.94 L1321.45 1213.94 L1322.04 1213.94 L1322.63 1213.94 L1323.21 1213.94 L1323.8 1213.94 L1324.39 1213.94 L1324.97 1213.94 L1325.56 1213.94 L1326.14 1213.94 L1326.73 1213.94 L1327.32 1213.94 L1327.9 1213.94 L1328.49 1213.94 L1329.08 1213.94 L1329.66 1213.94 L1330.25 1213.94 L1330.84 1213.94 L1331.42 1213.94 L1332.01 1213.94 L1332.6 1213.94 L1333.18 1213.94 L1333.77 1213.94 L1334.35 1213.94 L1334.94 1213.94 L1335.53 1213.94 L1336.11 1213.94 L1336.7 1213.94 L1337.29 1213.94 L1337.87 1213.94 L1338.46 1213.94 L1339.05 1213.94 L1339.63 1213.94 L1340.22 1213.94 L1340.8 1213.94 L1341.39 1213.94 L1341.98 1213.94 L1342.56 1213.94 L1343.15 1213.94 L1343.74 1213.94 L1344.32 1213.94 L1344.91 1213.94 L1345.5 1213.94 L1346.08 1213.94 L1346.67 1213.94 L1347.26 1213.94 L1347.84 1213.94 L1348.43 1213.94 L1349.01 1213.94 L1349.6 1213.94 L1350.19 1213.94 L1350.77 1213.94 L1351.36 1213.94 L1351.95 1213.94 L1352.53 1213.94 L1353.12 1213.94 L1353.71 1213.94 L1354.29 1213.94 L1354.88 1213.94 L1355.47 1213.94 L1356.05 1213.94 L1356.64 1213.94 L1357.22 1213.94 L1357.81 1213.94 L1358.4 1213.94 L1358.98 1213.94 L1359.57 1213.94 L1360.16 1213.94 L1360.74 1213.94 L1361.33 1213.94 L1361.92 1213.94 L1362.5 1213.94 L1363.09 1213.94 L1363.68 1213.94 L1364.26 1213.94 L1364.85 1213.94 L1365.43 1213.94 L1366.02 1213.94 L1366.61 1213.94 L1367.19 1213.94 L1367.78 1213.94 L1368.37 1213.94 L1368.95 1213.94 L1369.54 1213.94 L1370.13 1213.94 L1370.71 1213.94 L1371.3 1213.94 L1371.88 1213.94 L1372.47 1213.94 L1373.06 1213.94 L1373.64 1213.94 L1374.23 1213.94 L1374.82 1213.94 L1375.4 1213.94 L1375.99 1213.94 L1376.58 1213.94 L1377.16 1213.94 L1377.75 1213.94 L1378.34 1213.94 L1378.92 1213.94 L1379.51 1213.94 L1380.09 1213.94 L1380.68 1213.94 L1381.27 1213.94 L1381.85 1213.94 L1382.44 1213.94 L1383.03 1213.94 L1383.61 1213.94 L1384.2 1213.94 L1384.79 1213.94 L1385.37 1213.94 L1385.96 1213.94 L1386.55 1213.94 L1387.13 1213.94 L1387.72 1213.94 L1388.3 1213.94 L1388.89 1213.94 L1389.48 1213.94 L1390.06 1213.94 L1390.65 1213.94 L1391.24 1213.94 L1391.82 1213.94 L1392.41 1213.94 L1393 1213.94 L1393.58 1213.94 L1394.17 1213.94 L1394.75 1213.94 L1395.34 1213.94 L1395.93 1213.94 L1396.51 1213.94 L1397.1 1213.94 L1397.69 1213.94 L1398.27 1213.94 L1398.86 1213.94 L1399.45 1213.94 L1400.03 1213.94 L1400.62 1213.94 L1401.21 1213.94 L1401.79 1213.94 L1402.38 1213.94 L1402.96 1213.94 L1403.55 1213.94 L1404.14 1213.94 L1404.72 1213.94 L1405.31 1213.94 L1405.9 1213.94 L1406.48 1213.94 L1407.07 1213.94 L1407.66 1213.94 L1408.24 1213.94 L1408.83 1213.94 L1409.42 1213.94 L1410 1213.94 L1410.59 1213.94 L1411.17 1213.94 L1411.76 1213.94 L1412.35 1213.94 L1412.93 1213.94 L1413.52 1213.94 L1414.11 1213.94 L1414.69 1213.94 L1415.28 1213.94 L1415.87 1213.94 L1416.45 1213.94 L1417.04 1213.94 L1417.63 1213.94 L1418.21 1213.94 L1418.8 1213.94 L1419.38 1213.94 L1419.97 1213.94 L1420.56 1213.94 L1421.14 1213.94 L1421.73 1213.94 L1422.32 1213.94 L1422.9 1213.94 L1423.49 1213.94 L1424.08 1213.94 L1424.66 1213.94 L1425.25 1213.94 L1425.83 1213.94 L1426.42 1213.94 L1427.01 1213.94 L1427.59 1213.94 L1428.18 1213.94 L1428.77 1213.94 L1429.35 1213.94 L1429.94 1213.94 L1430.53 1213.94 L1431.11 1213.94 L1431.7 1213.94 L1432.29 1213.94 L1432.87 1213.94 L1433.46 1213.94 L1434.04 1213.94 L1434.63 1213.94 L1435.22 1213.94 L1435.8 1213.94 L1436.39 1213.94 L1436.98 1213.94 L1437.56 1213.94 L1438.15 1213.94 L1438.74 1213.94 L1439.32 1213.94 L1439.91 1213.94 L1440.5 1213.94 L1441.08 1213.94 L1441.67 1213.94 L1442.25 1213.94 L1442.84 1213.94 L1443.43 1213.94 L1444.01 1213.94 L1444.6 1213.94 L1445.19 1213.94 L1445.77 1213.94 L1446.36 1213.94 L1446.95 1213.94 L1447.53 1213.94 L1448.12 1213.94 L1448.7 1213.94 L1449.29 1213.94 L1449.88 1213.94 L1450.46 1213.94 L1451.05 1213.94 L1451.64 1213.94 L1452.22 1213.94 L1452.81 1213.94 L1453.4 1213.94 L1453.98 1213.94 L1454.57 1213.94 L1455.16 1213.94 L1455.74 1213.94 L1456.33 1213.94 L1456.91 1213.94 L1457.5 1213.94 L1458.09 1213.94 L1458.67 1213.94 L1459.26 1213.94 L1459.85 1213.94 L1460.43 1213.94 L1461.02 1213.94 L1461.61 1213.94 L1462.19 1213.94 L1462.78 1213.94 L1463.37 1213.94 L1463.95 1213.94 L1464.54 1213.94 L1465.12 1213.94 L1465.71 1213.94 L1466.3 1213.94 L1466.88 1213.94 L1467.47 1213.94 L1468.06 1213.94 L1468.64 1213.94 L1469.23 1213.94 L1469.82 1213.94 L1470.4 1213.94 L1470.99 1213.94 L1471.57 1213.94 L1472.16 1213.94 L1472.75 1213.94 L1473.33 1213.94 L1473.92 1213.94 L1474.51 1213.94 L1475.09 1213.94 L1475.68 1213.94 L1476.27 1213.94 L1476.85 1213.94 L1477.44 1213.94 L1478.03 1213.94 L1478.61 1213.94 L1479.2 1213.94 L1479.78 1213.94 L1480.37 1213.94 L1480.96 1213.94 L1481.54 1213.94 L1482.13 1213.94 L1482.72 1213.94 L1483.3 1213.94 L1483.89 1213.94 L1484.48 1213.94 L1485.06 1213.94 L1485.65 1213.94 L1486.24 1213.94 L1486.82 1213.94 L1487.41 1213.94 L1487.99 1213.94 L1488.58 1213.94 L1489.17 1213.94 L1489.75 1213.94 L1490.34 1213.94 L1490.93 1213.94 L1491.51 1213.94 L1492.1 1213.94 L1492.69 1213.94 L1493.27 1213.94 L1493.86 1213.94 L1494.45 1213.94 L1495.03 1213.94 L1495.62 1213.94 L1496.2 1213.94 L1496.79 1213.94 L1497.38 1213.94 L1497.96 1213.94 L1498.55 1213.94 L1499.14 1213.94 L1499.72 1213.94 L1500.31 1213.94 L1500.9 1213.94 L1501.48 1213.94 L1502.07 1213.94 L1502.65 1213.94 L1503.24 1213.94 L1503.83 1213.94 L1504.41 1213.94 L1505 1213.94 L1505.59 1213.94 L1506.17 1213.94 L1506.76 1213.94 L1507.35 1213.94 L1507.93 1213.94 L1508.52 1213.94 L1509.11 1213.94 L1509.69 1213.94 L1510.28 1213.94 L1510.86 1213.94 L1511.45 1213.94 L1512.04 1213.94 L1512.62 1213.94 L1513.21 1213.94 L1513.8 1213.94 L1514.38 1213.94 L1514.97 1213.94 L1515.56 1213.94 L1516.14 1213.94 L1516.73 1213.94 L1517.32 1213.94 L1517.9 1213.94 L1518.49 1213.94 L1519.07 1213.94 L1519.66 1213.94 L1520.25 1213.94 L1520.83 1213.94 L1521.42 1213.94 L1522.01 1213.94 L1522.59 1213.94 L1523.18 1213.94 L1523.77 1213.94 L1524.35 1213.94 L1524.94 1213.94 L1525.52 1213.94 L1526.11 1213.94 L1526.7 1213.94 L1527.28 1213.94 L1527.87 1213.94 L1528.46 1213.94 L1529.04 1213.94 L1529.63 1213.94 L1530.22 1213.94 L1530.8 1213.94 L1531.39 1213.94 L1531.98 1213.94 L1532.56 1213.94 L1533.15 1213.94 L1533.73 1213.94 L1534.32 1213.94 L1534.91 1213.94 L1535.49 1213.94 L1536.08 1213.94 L1536.67 1213.94 L1537.25 1213.94 L1537.84 1213.94 L1538.43 1213.94 L1539.01 1213.94 L1539.6 1213.94 L1540.19 1213.94 L1540.77 1213.94 L1541.36 1213.94 L1541.94 1213.94 L1542.53 1213.94 L1543.12 1213.94 L1543.7 1213.94 L1544.29 1213.94 L1544.88 1213.94 L1545.46 1213.94 L1546.05 1213.94 L1546.64 1213.94 L1547.22 1213.94 L1547.81 1213.94 L1548.4 1213.94 L1548.98 1213.94 L1549.57 1213.94 L1550.15 1213.94 L1550.74 1213.94 L1551.33 1213.94 L1551.91 1213.94 L1552.5 1213.94 L1553.09 1213.94 L1553.67 1213.94 L1554.26 1213.94 L1554.85 1213.94 L1555.43 1213.94 L1556.02 1213.94 L1556.6 1213.94 L1557.19 1213.94 L1557.78 1213.94 L1558.36 1213.94 L1558.95 1213.94 L1559.54 1213.94 L1560.12 1213.94 L1560.71 1213.94 L1561.3 1213.94 L1561.88 1213.94 L1562.47 1213.94 L1563.06 1213.94 L1563.64 1213.94 L1564.23 1213.94 L1564.81 1213.94 L1565.4 1213.94 L1565.99 1213.94 L1566.57 1213.94 L1567.16 1213.94 L1567.75 1213.94 L1568.33 1213.94 L1568.92 1213.94 L1569.51 1213.94 L1570.09 1213.94 L1570.68 1213.94 L1571.27 1213.94 L1571.85 1213.94 L1572.44 1213.94 L1573.02 1213.94 L1573.61 1213.94 L1574.2 1213.94 L1574.78 1213.94 L1575.37 1213.94 L1575.96 1213.94 L1576.54 1213.94 L1577.13 1213.94 L1577.72 1213.94 L1578.3 1213.94 L1578.89 1213.94 L1579.47 1213.94 L1580.06 1213.94 L1580.65 1213.94 L1581.23 1213.94 L1581.82 1213.94 L1582.41 1213.94 L1582.99 1213.94 L1583.58 1213.94 L1584.17 1213.94 L1584.75 1213.94 L1585.34 1213.94 L1585.93 1213.94 L1586.51 1213.94 L1587.1 1213.94 L1587.68 1213.94 L1588.27 1213.94 L1588.86 1213.94 L1589.44 1213.94 L1590.03 1213.94 L1590.62 1213.94 L1591.2 1213.94 L1591.79 1213.94 L1592.38 1213.94 L1592.96 1213.94 L1593.55 1213.94 L1594.14 1213.94 L1594.72 1213.94 L1595.31 1213.94 L1595.89 1213.94 L1596.48 1213.94 L1597.07 1213.94 L1597.65 1213.94 L1598.24 1213.94 L1598.83 1213.94 L1599.41 1213.94 L1600 1213.94 L1600.59 1213.94 L1601.17 1213.94 L1601.76 1213.94 L1602.34 1213.94 L1602.93 1213.94 L1603.52 1213.94 L1604.1 1213.94 L1604.69 1213.94 L1605.28 1213.94 L1605.86 1213.94 L1606.45 1213.94 L1607.04 1213.94 L1607.62 1213.94 L1608.21 1213.94 L1608.8 1213.94 L1609.38 1213.94 L1609.97 1213.94 L1610.55 1213.94 L1611.14 1213.94 L1611.73 1213.94 L1612.31 1213.94 L1612.9 1213.94 L1613.49 1213.94 L1614.07 1213.94 L1614.66 1213.94 L1615.25 1213.94 L1615.83 1213.94 L1616.42 1213.94 L1617.01 1213.94 L1617.59 1213.94 L1618.18 1213.94 L1618.76 1213.94 L1619.35 1213.94 L1619.94 1213.94 L1620.52 1213.94 L1621.11 1213.94 L1621.7 1213.94 L1622.28 1213.94 L1622.87 1213.94 L1623.46 1213.94 L1624.04 1213.94 L1624.63 1213.94 L1625.22 1213.94 L1625.8 1213.94 L1626.39 1213.94 L1626.97 1213.94 L1627.56 1213.94 L1628.15 1213.94 L1628.73 1213.94 L1629.32 1213.94 L1629.91 1213.94 L1630.49 1213.94 L1631.08 1213.94 L1631.67 1213.94 L1632.25 1213.94 L1632.84 1213.94 L1633.42 1213.94 L1634.01 1213.94 L1634.6 1213.94 L1635.18 1213.94 L1635.77 1213.94 L1636.36 1213.94 L1636.94 1213.94 L1637.53 1213.94 L1638.12 1213.94 L1638.7 1213.94 L1639.29 1213.94 L1639.88 1213.94 L1640.46 1213.94 L1641.05 1213.94 L1641.63 1213.94 L1642.22 1213.94 L1642.81 1213.94 L1643.39 1213.94 L1643.98 1213.94 L1644.57 1213.94 L1645.15 1213.94 L1645.74 1213.94 L1646.33 1213.94 L1646.91 1213.94 L1647.5 1213.94 L1648.09 1213.94 L1648.67 1213.94 L1649.26 1213.94 L1649.84 1213.94 L1650.43 1213.94 L1651.02 1213.94 L1651.6 1213.94 L1652.19 1213.94 L1652.78 1213.94 L1653.36 1213.94 L1653.95 1213.94 L1654.54 1213.94 L1655.12 1213.94 L1655.71 1213.94 L1656.29 1213.94 L1656.88 1213.94 L1657.47 1213.94 L1658.05 1213.94 L1658.64 1213.94 L1659.23 1213.94 L1659.81 1213.94 L1660.4 1213.94 L1660.99 1213.94 L1661.57 1213.94 L1662.16 1213.94 L1662.75 1213.94 L1663.33 1213.94 L1663.92 1213.94 L1664.5 1213.94 L1665.09 1213.94 L1665.68 1213.94 L1666.26 1213.94 L1666.85 1213.94 L1667.44 1213.94 L1668.02 1213.94 L1668.61 1213.94 L1669.2 1213.94 L1669.78 1213.94 L1670.37 1213.94 L1670.96 1213.94 L1671.54 1213.94 L1672.13 1213.94 L1672.71 1213.94 L1673.3 1213.94 L1673.89 1213.94 L1674.47 1213.94 L1675.06 1213.94 L1675.65 1213.94 L1676.23 1213.94 L1676.82 1213.94 L1677.41 1213.94 L1677.99 1213.94 L1678.58 1213.94 L1679.17 1213.94 L1679.75 1213.94 L1680.34 1213.94 L1680.92 1213.94 L1681.51 1213.94 L1682.1 1213.94 L1682.68 1213.94 L1683.27 1213.94 L1683.86 1213.94 L1684.44 1213.94 L1685.03 1213.94 L1685.62 1213.94 L1686.2 1213.94 L1686.79 1213.94 L1687.37 1213.94 L1687.96 1213.94 L1688.55 1213.94 L1689.13 1213.94 L1689.72 1213.94 L1690.31 1213.94 L1690.89 1213.94 L1691.48 1213.94 L1692.07 1213.94 L1692.65 1213.94 L1693.24 1213.94 L1693.83 1213.94 L1694.41 1213.94 L1695 1213.94 L1695.58 1213.94 L1696.17 1213.94 L1696.76 1213.94 L1697.34 1213.94 L1697.93 1213.94 L1698.52 1213.94 L1699.1 1213.94 L1699.69 1213.94 L1700.28 1213.94 L1700.86 1213.94 L1701.45 1213.94 L1702.04 1213.94 L1702.62 1213.94 L1703.21 1213.94 L1703.79 1213.94 L1704.38 1213.94 L1704.97 1213.94 L1705.55 1213.94 L1706.14 1213.94 L1706.73 1213.94 L1707.31 1213.94 L1707.9 1213.94 L1708.49 1213.94 L1709.07 1213.94 L1709.66 1213.94 L1710.24 1213.94 L1710.83 1213.94 L1711.42 1213.94 L1712 1213.94 L1712.59 1213.94 L1713.18 1213.94 L1713.76 1213.94 L1714.35 1213.94 L1714.94 1213.94 L1715.52 1213.94 L1716.11 1213.94 L1716.7 1213.94 L1717.28 1213.94 L1717.87 1213.94 L1718.45 1213.94 L1719.04 1213.94 L1719.63 1213.94 L1720.21 1213.94 L1720.8 1213.94 L1721.39 1213.94 L1721.97 1213.94 L1722.56 1213.94 L1723.15 1213.94 L1723.73 1213.94 L1724.32 1213.94 L1724.91 1213.94 L1725.49 1213.94 L1726.08 1213.94 L1726.66 1213.94 L1727.25 1213.94 L1727.84 1213.94 L1728.42 1213.94 L1729.01 1213.94 L1729.6 1213.94 L1730.18 1213.94 L1730.77 1213.94 L1731.36 1213.94 L1731.94 1213.94 L1732.53 1213.94 L1733.11 1213.94 L1733.7 1213.94 L1734.29 1213.94 L1734.87 1213.94 L1735.46 1213.94 L1736.05 1213.94 L1736.63 1213.94 L1737.22 1213.94 L1737.81 1213.94 L1738.39 1213.94 L1738.98 1213.94 L1739.57 1213.94 L1740.15 1213.94 L1740.74 1213.94 L1741.32 1213.94 L1741.91 1213.94 L1742.5 1213.94 L1743.08 1213.94 L1743.67 1213.94 L1744.26 1213.94 L1744.84 1213.94 L1745.43 1213.94 L1746.02 1213.94 L1746.6 1213.94 L1747.19 1213.94 L1747.78 1213.94 L1748.36 1213.94 L1748.95 1213.94 L1749.53 1213.94 L1750.12 1213.94 L1750.71 1213.94 L1751.29 1213.94 L1751.88 1213.94 L1752.47 1213.94 L1753.05 1213.94 L1753.64 1213.94 L1754.23 1213.94 L1754.81 1213.94 L1755.4 1213.94 L1755.99 1213.94 L1756.57 1213.94 L1757.16 1213.94 L1757.74 1213.94 L1758.33 1213.94 L1758.92 1213.94 L1759.5 1213.94 L1760.09 1213.94 L1760.68 1213.94 L1761.26 1213.94 L1761.85 1213.94 L1762.44 1213.94 L1763.02 1213.94 L1763.61 1213.94 L1764.19 1213.94 L1764.78 1213.94 L1765.37 1213.94 L1765.95 1213.94 L1766.54 1213.94 L1767.13 1213.94 L1767.71 1213.94 L1768.3 1213.94 L1768.89 1213.94 L1769.47 1213.94 L1770.06 1213.94 L1770.65 1213.94 L1771.23 1213.94 L1771.82 1213.94 L1772.4 1213.94 L1772.99 1213.94 L1773.58 1213.94 L1774.16 1213.94 L1774.75 1213.94 L1775.34 1213.94 L1775.92 1213.94 L1776.51 1213.94 L1777.1 1213.94 L1777.68 1213.94 L1778.27 1213.94 L1778.86 1213.94 L1779.44 1213.94 L1780.03 1213.94 L1780.61 1213.94 L1781.2 1213.94 L1781.79 1213.94 L1782.37 1213.94 L1782.96 1213.94 L1783.55 1213.94 L1784.13 1213.94 L1784.72 1213.94 L1785.31 1213.94 L1785.89 1213.94 L1786.48 1213.94 L1787.06 1213.94 L1787.65 1213.94 L1788.24 1213.94 L1788.82 1213.94 L1789.41 1213.94 L1790 1213.94 L1790.58 1213.94 L1791.17 1213.94 L1791.76 1213.94 L1792.34 1213.94 L1792.93 1213.94 L1793.52 1213.94 L1794.1 1213.94 L1794.69 1213.94 L1795.27 1213.94 L1795.86 1213.94 L1796.45 1213.94 L1797.03 1213.94 L1797.62 1213.94 L1798.21 1213.94 L1798.79 1213.94 L1799.38 1213.94 L1799.97 1213.94 L1800.55 1213.94 L1801.14 1213.94 L1801.73 1213.94 L1802.31 1213.94 L1802.9 1213.94 L1803.48 1213.94 L1804.07 1213.94 L1804.66 1213.94 L1805.24 1213.94 L1805.83 1213.94 L1806.42 1213.94 L1807 1213.94 L1807.59 1213.94 L1808.18 1213.94 L1808.76 1213.94 L1809.35 1213.94 L1809.94 1213.94 L1810.52 1213.94 L1811.11 1213.94 L1811.69 1213.94 L1812.28 1213.94 L1812.87 1213.94 L1813.45 1213.94 L1814.04 1213.94 L1814.63 1213.94 L1815.21 1213.94 L1815.8 1213.94 L1816.39 1213.94 L1816.97 1213.94 L1817.56 1213.94 L1818.14 1213.94 L1818.73 1213.94 L1819.32 1213.94 L1819.9 1213.94 L1820.49 1213.94 L1821.08 1213.94 L1821.66 1213.94 L1822.25 1213.94 L1822.84 1213.94 L1823.42 1213.94 L1824.01 1213.94 L1824.6 1213.94 L1825.18 1213.94 L1825.77 1213.94 L1826.35 1213.94 L1826.94 1213.94 L1827.53 1213.94 L1828.11 1213.94 L1828.7 1213.94 L1829.29 1213.94 L1829.87 1213.94 L1830.46 1213.94 L1831.05 1213.94 L1831.63 1213.94 L1832.22 1213.94 L1832.81 1213.94 L1833.39 1213.94 L1833.98 1213.94 L1834.56 1213.94 L1835.15 1213.94 L1835.74 1213.94 L1836.32 1213.94 L1836.91 1213.94 L1837.5 1213.94 L1838.08 1213.94 L1838.67 1213.94 L1839.26 1213.94 L1839.84 1213.94 L1840.43 1213.94 L1841.01 1213.94 L1841.6 1213.94 L1842.19 1213.94 L1842.77 1213.94 L1843.36 1213.94 L1843.95 1213.94 L1844.53 1213.94 L1845.12 1213.94 L1845.71 1213.94 L1846.29 1213.94 L1846.88 1213.94 L1847.47 1213.94 L1848.05 1213.94 L1848.64 1213.94 L1849.22 1213.94 L1849.81 1213.94 L1850.4 1213.94 L1850.98 1213.94 L1851.57 1213.94 L1852.16 1213.94 L1852.74 1213.94 L1853.33 1213.94 L1853.92 1213.94 L1854.5 1213.94 L1855.09 1213.94 L1855.68 1213.94 L1856.26 1213.94 L1856.85 1213.94 L1857.43 1213.94 L1858.02 1213.94 L1858.61 1213.94 L1859.19 1213.94 L1859.78 1213.94 L1860.37 1213.94 L1860.95 1213.94 L1861.54 1213.94 L1862.13 1213.94 L1862.71 1213.94 L1863.3 1213.94 L1863.88 1213.94 L1864.47 1213.94 L1865.06 1213.94 L1865.64 1213.94 L1866.23 1213.94 L1866.82 1213.94 L1867.4 1213.94 L1867.99 1213.94 L1868.58 1213.94 L1869.16 1213.94 L1869.75 1213.94 L1870.34 1213.94 L1870.92 1213.94 L1871.51 1213.94 L1872.09 1213.94 L1872.68 1213.94 L1873.27 1213.94 L1873.85 1213.94 L1874.44 1213.94 L1875.03 1213.94 L1875.61 1213.94 L1876.2 1213.94 L1876.79 1213.94 L1877.37 1213.94 L1877.96 1213.94 L1878.55 1213.94 L1879.13 1213.94 L1879.72 1213.94 L1880.3 1213.94 L1880.89 1213.94 L1881.48 1213.94 L1882.06 1213.94 L1882.65 1213.94 L1883.24 1213.94 L1883.82 1213.94 L1884.41 1213.94 L1885 1213.94 L1885.58 1213.94 L1886.17 1213.94 L1886.76 1213.94 L1887.34 1213.94 L1887.93 1213.94 L1888.51 1213.94 L1889.1 1213.94 L1889.69 1213.94 L1890.27 1213.94 L1890.86 1213.94 L1891.45 1213.94 L1892.03 1213.94 L1892.62 1213.94 L1893.21 1213.94 L1893.79 1213.94 L1894.38 1213.94 L1894.96 1213.94 L1895.55 1213.94 L1896.14 1213.94 L1896.72 1213.94 L1897.31 1213.94 L1897.9 1213.94 L1898.48 1213.94 L1899.07 1213.94 L1899.66 1213.94 L1900.24 1213.94 L1900.83 1213.94 L1901.42 1213.94 L1902 1213.94 L1902.59 1213.94 L1903.17 1213.94 L1903.76 1213.94 L1904.35 1213.94 L1904.93 1213.94 L1905.52 1213.94 L1906.11 1213.94 L1906.69 1213.94 L1907.28 1213.94 L1907.87 1213.94 L1908.45 1213.94 L1909.04 1213.94 L1909.63 1213.94 L1910.21 1213.94 L1910.8 1213.94 L1911.38 1213.94 L1911.97 1213.94 L1912.56 1213.94 L1913.14 1213.94 L1913.73 1213.94 L1914.32 1213.94 L1914.9 1213.94 L1915.49 1213.94 L1916.08 1213.94 L1916.66 1213.94 L1917.25 1213.94 L1917.83 1213.94 L1918.42 1213.94 L1919.01 1213.94 L1919.59 1213.94 L1920.18 1213.94 L1920.77 1213.94 L1921.35 1213.94 L1921.94 1213.94 L1922.53 1213.94 L1923.11 1213.94 L1923.7 1213.94 L1924.29 1213.94 L1924.87 1213.94 L1925.46 1213.94 L1926.04 1213.94 L1926.63 1213.94 L1927.22 1213.94 L1927.8 1213.94 L1928.39 1213.94 L1928.98 1213.94 L1929.56 1213.94 L1930.15 1213.94 L1930.74 1213.94 L1931.32 1213.94 L1931.91 1213.94 L1932.5 1213.94 L1933.08 1213.94 L1933.67 1213.94 L1934.25 1213.94 L1934.84 1213.94 L1935.43 1213.94 L1936.01 1213.94 L1936.6 1213.94 L1937.19 1213.94 L1937.77 1213.94 L1938.36 1213.94 L1938.95 1213.94 L1939.53 1213.94 L1940.12 1213.94 L1940.71 1213.94 L1941.29 1213.94 L1941.88 1213.94 L1942.46 1213.94 L1943.05 1213.94 L1943.64 1213.94 L1944.22 1213.94 L1944.81 1213.94 L1945.4 1213.94 L1945.98 1213.94 L1946.57 1213.94 L1947.16 1213.94 L1947.74 1213.94 L1948.33 1213.94 L1948.91 1213.94 L1949.5 1213.94 L1950.09 1213.94 L1950.67 1213.94 L1951.26 1213.94 L1951.85 1213.94 L1952.43 1213.94 L1953.02 1213.94 L1953.61 1213.94 L1954.19 1213.94 L1954.78 1213.94 L1955.37 1213.94 L1955.95 1213.94 L1956.54 1213.94 L1957.12 1213.94 L1957.71 1213.94 L1958.3 1213.94 L1958.88 1213.94 L1959.47 1213.94 L1960.06 1213.94 L1960.64 1213.94 L1961.23 1213.94 L1961.82 1213.94 L1962.4 1213.94 L1962.99 1213.94 L1963.58 1213.94 L1964.16 1213.94 L1964.75 1213.94 L1965.33 1213.94 L1965.92 1213.94 L1966.51 1213.94 L1967.09 1213.94 L1967.68 1213.94 L1968.27 1213.94 L1968.85 1213.94 L1969.44 1213.94 L1970.03 1213.94 L1970.61 1213.94 L1971.2 1213.94 L1971.78 1213.94 L1972.37 1213.94 L1972.96 1213.94 L1973.54 1213.94 L1974.13 1213.94 L1974.72 1213.94 L1975.3 1213.94 L1975.89 1213.94 L1976.48 1213.94 L1977.06 1213.94 L1977.65 1213.94 L1978.24 1213.94 L1978.82 1213.94 L1979.41 1213.94 L1979.99 1213.94 L1980.58 1213.94 L1981.17 1213.94 L1981.75 1213.94 L1982.34 1213.94 L1982.93 1213.94 L1983.51 1213.94 L1984.1 1213.94 L1984.69 1213.94 L1985.27 1213.94 L1985.86 1213.94 L1986.45 1213.94 L1987.03 1213.94 L1987.62 1213.94 L1988.2 1213.94 L1988.79 1213.94 L1989.38 1213.94 L1989.96 1213.94 L1990.55 1213.94 L1991.14 1213.94 L1991.72 1213.94 L1992.31 1213.94 L1992.9 1213.94 L1993.48 1213.94 L1994.07 1213.94 L1994.65 1213.94 L1995.24 1213.94 L1995.83 1213.94 L1996.41 1213.94 L1997 1213.94 L1997.59 1213.94 L1998.17 1213.94 L1998.76 1213.94 L1999.35 1213.94 L1999.93 1213.94 L2000.52 1213.94 L2001.11 1213.94 L2001.69 1213.94 L2002.28 1213.94 L2002.86 1213.94 L2003.45 1213.94 L2004.04 1213.94 L2004.62 1213.94 L2005.21 1213.94 L2005.8 1213.94 L2006.38 1213.94 L2006.97 1213.94 L2007.56 1213.94 L2008.14 1213.94 L2008.73 1213.94 L2009.32 1213.94 L2009.9 1213.94 L2010.49 1213.94 L2011.07 1213.94 L2011.66 1213.94 L2012.25 1213.94 L2012.83 1213.94 L2013.42 1213.94 L2014.01 1213.94 L2014.59 1213.94 L2015.18 1213.94 L2015.77 1213.94 L2016.35 1213.94 L2016.94 1213.94 L2017.53 1213.94 L2018.11 1213.94 L2018.7 1213.94 L2019.28 1213.94 L2019.87 1213.94 L2020.46 1213.94 L2021.04 1213.94 L2021.63 1213.94 L2022.22 1213.94 L2022.8 1213.94 L2023.39 1213.94 L2023.98 1213.94 L2024.56 1213.94 L2025.15 1213.94 L2025.73 1213.94 L2026.32 1213.94 L2026.91 1213.94 L2027.49 1213.94 L2028.08 1213.94 L2028.67 1213.94 L2029.25 1213.94 L2029.84 1213.94 L2030.43 1213.94 L2031.01 1213.94 L2031.6 1213.94 L2032.19 1213.94 L2032.77 1213.94 L2033.36 1213.94 L2033.94 1213.94 L2034.53 1213.94 L2035.12 1213.94 L2035.7 1213.94 L2036.29 1213.94 L2036.88 1213.94 L2037.46 1213.94 L2038.05 1213.94 L2038.64 1213.94 L2039.22 1213.94 L2039.81 1213.94 L2040.4 1213.94 L2040.98 1213.94 L2041.57 1213.94 L2042.15 1213.94 L2042.74 1213.94 L2043.33 1213.94 L2043.91 1213.94 L2044.5 1213.94 L2045.09 1213.94 L2045.67 1213.94 L2046.26 1213.94 L2046.85 1213.94 L2047.43 1213.94 L2048.02 1213.94 L2048.6 1213.94 L2049.19 1213.94 L2049.78 1213.94 L2050.36 1213.94 L2050.95 1213.94 L2051.54 1213.94 L2052.12 1213.94 L2052.71 1213.94 L2053.3 1213.94 L2053.88 1213.94 L2054.47 1213.94 L2055.06 1213.94 L2055.64 1213.94 L2056.23 1213.94 L2056.81 1213.94 L2057.4 1213.94 L2057.99 1213.94 L2058.57 1213.94 L2059.16 1213.94 L2059.75 1213.94 L2060.33 1213.94 L2060.92 1213.94 L2061.51 1213.94 L2062.09 1213.94 L2062.68 1213.94 L2063.27 1213.94 L2063.85 1213.94 L2064.44 1213.94 L2065.02 1213.94 L2065.61 1213.94 L2066.2 1213.94 L2066.78 1213.94 L2067.37 1213.94 L2067.96 1213.94 L2068.54 1213.94 L2069.13 1213.94 L2069.72 1213.94 L2070.3 1213.94 L2070.89 1213.94 L2071.48 1213.94 L2072.06 1213.94 L2072.65 1213.94 L2073.23 1213.94 L2073.82 1213.94 L2074.41 1213.94 L2074.99 1213.94 L2075.58 1213.94 L2076.17 1213.94 L2076.75 1213.94 L2077.34 1213.94 L2077.93 1213.94 L2078.51 1213.94 L2079.1 1213.94 L2079.68 1213.94 L2080.27 1213.94 L2080.86 1213.94 L2081.44 1213.94 L2082.03 1213.94 L2082.62 1213.94 L2083.2 1213.94 L2083.79 1213.94 L2084.38 1213.94 L2084.96 1213.94 L2085.55 1213.94 L2086.14 1213.94 L2086.72 1213.94 L2087.31 1213.94 L2087.89 1213.94 L2088.48 1213.94 L2089.07 1213.94 L2089.65 1213.94 L2090.24 1213.94 L2090.83 1213.94 L2091.41 1213.94 L2092 1213.94 L2092.59 1213.94 L2093.17 1213.94 L2093.76 1213.94 L2094.35 1213.94 L2094.93 1213.94 L2095.52 1213.94 L2096.1 1213.94 L2096.69 1213.94 L2097.28 1213.94 L2097.86 1213.94 L2098.45 1213.94 L2099.04 1213.94 L2099.62 1213.94 L2100.21 1213.94 L2100.8 1213.94 L2101.38 1213.94 L2101.97 1213.94 L2102.55 1213.94 L2103.14 1213.94 L2103.73 1213.94 L2104.31 1213.94 L2104.9 1213.94 L2105.49 1213.94 L2106.07 1213.94 L2106.66 1213.94 L2107.25 1213.94 L2107.83 1213.94 L2108.42 1213.94 L2109.01 1213.94 L2109.59 1213.94 L2110.18 1213.94 L2110.76 1213.94 L2111.35 1213.94 L2111.94 1213.94 L2112.52 1213.94 L2113.11 1213.94 L2113.7 1213.94 L2114.28 1213.94 L2114.87 1213.94 L2115.46 1213.94 L2116.04 1213.94 L2116.63 1213.94 L2117.22 1213.94 L2117.8 1213.94 L2118.39 1213.94 L2118.97 1213.94 L2119.56 1213.94 L2120.15 1213.94 L2120.73 1213.94 L2121.32 1213.94 L2121.91 1213.94 L2122.49 1213.94 L2123.08 1213.94 L2123.67 1213.94 L2124.25 1213.94 L2124.84 1213.94 L2125.42 1213.94 L2126.01 1213.94 L2126.6 1213.94 L2127.18 1213.94 L2127.77 1213.94 L2128.36 1213.94 L2128.94 1213.94 L2129.53 1213.94 L2130.12 1213.94 L2130.7 1213.94 L2131.29 1213.94 L2131.88 1213.94 L2132.46 1213.94 L2133.05 1213.94 L2133.63 1213.94 L2134.22 1213.94 L2134.81 1213.94 L2135.39 1213.94 L2135.98 1213.94 L2136.57 1213.94 L2137.15 1213.94 L2137.74 1213.94 L2138.33 1213.94 L2138.91 1213.94 L2139.5 1213.94 L2140.09 1213.94 L2140.67 1213.94 L2141.26 1213.94 L2141.84 1213.94 L2142.43 1213.94 L2143.02 1213.94 L2143.6 1213.94 L2144.19 1213.94 L2144.78 1213.94 L2145.36 1213.94 L2145.95 1213.94 L2146.54 1213.94 L2147.12 1213.94 L2147.71 1213.94 L2148.3 1213.94 L2148.88 1213.94 L2149.47 1213.94 L2150.05 1213.94 L2150.64 1213.94 L2151.23 1213.94 L2151.81 1213.94 L2152.4 1213.94 L2152.99 1213.94 L2153.57 1213.94 L2154.16 1213.94 L2154.75 1213.94 L2155.33 1213.94 L2155.92 1213.94 L2156.5 1213.94 L2157.09 1213.94 L2157.68 1213.94 L2158.26 1213.94 L2158.26 1213.72 L2157.68 1213.72 L2157.09 1213.72 L2156.5 1213.72 L2155.92 1213.72 L2155.33 1213.72 L2154.75 1213.72 L2154.16 1213.72 L2153.57 1213.72 L2152.99 1213.72 L2152.4 1213.72 L2151.81 1213.72 L2151.23 1213.72 L2150.64 1213.72 L2150.05 1213.72 L2149.47 1213.72 L2148.88 1213.72 L2148.3 1213.72 L2147.71 1213.72 L2147.12 1213.72 L2146.54 1213.72 L2145.95 1213.72 L2145.36 1213.72 L2144.78 1213.72 L2144.19 1213.72 L2143.6 1213.72 L2143.02 1213.72 L2142.43 1213.72 L2141.84 1213.72 L2141.26 1213.72 L2140.67 1213.72 L2140.09 1213.72 L2139.5 1213.72 L2138.91 1213.72 L2138.33 1213.72 L2137.74 1213.72 L2137.15 1213.72 L2136.57 1213.72 L2135.98 1213.72 L2135.39 1213.72 L2134.81 1213.72 L2134.22 1213.72 L2133.63 1213.72 L2133.05 1213.72 L2132.46 1213.72 L2131.88 1213.72 L2131.29 1213.72 L2130.7 1213.72 L2130.12 1213.72 L2129.53 1213.72 L2128.94 1213.72 L2128.36 1213.72 L2127.77 1213.72 L2127.18 1213.72 L2126.6 1213.72 L2126.01 1213.72 L2125.42 1213.72 L2124.84 1213.72 L2124.25 1213.72 L2123.67 1213.72 L2123.08 1213.72 L2122.49 1213.72 L2121.91 1213.72 L2121.32 1213.72 L2120.73 1213.72 L2120.15 1213.72 L2119.56 1213.72 L2118.97 1213.72 L2118.39 1213.72 L2117.8 1213.72 L2117.22 1213.72 L2116.63 1213.72 L2116.04 1213.72 L2115.46 1213.72 L2114.87 1213.72 L2114.28 1213.72 L2113.7 1213.72 L2113.11 1213.72 L2112.52 1213.72 L2111.94 1213.72 L2111.35 1213.72 L2110.76 1213.72 L2110.18 1213.72 L2109.59 1213.72 L2109.01 1213.72 L2108.42 1213.72 L2107.83 1213.72 L2107.25 1213.72 L2106.66 1213.72 L2106.07 1213.72 L2105.49 1213.72 L2104.9 1213.72 L2104.31 1213.72 L2103.73 1213.72 L2103.14 1213.72 L2102.55 1213.72 L2101.97 1213.72 L2101.38 1213.72 L2100.8 1213.72 L2100.21 1213.72 L2099.62 1213.72 L2099.04 1213.72 L2098.45 1213.72 L2097.86 1213.72 L2097.28 1213.72 L2096.69 1213.72 L2096.1 1213.72 L2095.52 1213.72 L2094.93 1213.72 L2094.35 1213.72 L2093.76 1213.72 L2093.17 1213.72 L2092.59 1213.72 L2092 1213.72 L2091.41 1213.72 L2090.83 1213.72 L2090.24 1213.72 L2089.65 1213.72 L2089.07 1213.72 L2088.48 1213.72 L2087.89 1213.72 L2087.31 1213.72 L2086.72 1213.72 L2086.14 1213.72 L2085.55 1213.72 L2084.96 1213.72 L2084.38 1213.72 L2083.79 1213.72 L2083.2 1213.72 L2082.62 1213.72 L2082.03 1213.72 L2081.44 1213.72 L2080.86 1213.72 L2080.27 1213.72 L2079.68 1213.72 L2079.1 1213.72 L2078.51 1213.72 L2077.93 1213.72 L2077.34 1213.72 L2076.75 1213.72 L2076.17 1213.72 L2075.58 1213.72 L2074.99 1213.72 L2074.41 1213.72 L2073.82 1213.72 L2073.23 1213.72 L2072.65 1213.72 L2072.06 1213.72 L2071.48 1213.72 L2070.89 1213.72 L2070.3 1213.72 L2069.72 1213.72 L2069.13 1213.72 L2068.54 1213.72 L2067.96 1213.72 L2067.37 1213.72 L2066.78 1213.72 L2066.2 1213.72 L2065.61 1213.72 L2065.02 1213.72 L2064.44 1213.72 L2063.85 1213.72 L2063.27 1213.72 L2062.68 1213.72 L2062.09 1213.72 L2061.51 1213.72 L2060.92 1213.72 L2060.33 1213.72 L2059.75 1213.72 L2059.16 1213.72 L2058.57 1213.72 L2057.99 1213.72 L2057.4 1213.72 L2056.81 1213.72 L2056.23 1213.72 L2055.64 1213.72 L2055.06 1213.72 L2054.47 1213.72 L2053.88 1213.72 L2053.3 1213.72 L2052.71 1213.72 L2052.12 1213.72 L2051.54 1213.72 L2050.95 1213.72 L2050.36 1213.72 L2049.78 1213.72 L2049.19 1213.72 L2048.6 1213.72 L2048.02 1213.72 L2047.43 1213.72 L2046.85 1213.72 L2046.26 1213.72 L2045.67 1213.72 L2045.09 1213.72 L2044.5 1213.72 L2043.91 1213.72 L2043.33 1213.72 L2042.74 1213.72 L2042.15 1213.72 L2041.57 1213.72 L2040.98 1213.72 L2040.4 1213.72 L2039.81 1213.72 L2039.22 1213.72 L2038.64 1213.72 L2038.05 1213.72 L2037.46 1213.72 L2036.88 1213.72 L2036.29 1213.72 L2035.7 1213.72 L2035.12 1213.72 L2034.53 1213.72 L2033.94 1213.72 L2033.36 1213.72 L2032.77 1213.72 L2032.19 1213.72 L2031.6 1213.72 L2031.01 1213.72 L2030.43 1213.72 L2029.84 1213.72 L2029.25 1213.72 L2028.67 1213.72 L2028.08 1213.72 L2027.49 1213.72 L2026.91 1213.72 L2026.32 1213.72 L2025.73 1213.72 L2025.15 1213.72 L2024.56 1213.72 L2023.98 1213.72 L2023.39 1213.72 L2022.8 1213.72 L2022.22 1213.72 L2021.63 1213.72 L2021.04 1213.72 L2020.46 1213.72 L2019.87 1213.72 L2019.28 1213.72 L2018.7 1213.72 L2018.11 1213.72 L2017.53 1213.72 L2016.94 1213.72 L2016.35 1213.72 L2015.77 1213.72 L2015.18 1213.72 L2014.59 1213.72 L2014.01 1213.72 L2013.42 1213.72 L2012.83 1213.72 L2012.25 1213.72 L2011.66 1213.72 L2011.07 1213.72 L2010.49 1213.72 L2009.9 1213.72 L2009.32 1213.72 L2008.73 1213.72 L2008.14 1213.72 L2007.56 1213.72 L2006.97 1213.72 L2006.38 1213.72 L2005.8 1213.72 L2005.21 1213.72 L2004.62 1213.72 L2004.04 1213.72 L2003.45 1213.72 L2002.86 1213.72 L2002.28 1213.72 L2001.69 1213.72 L2001.11 1213.72 L2000.52 1213.72 L1999.93 1213.72 L1999.35 1213.72 L1998.76 1213.72 L1998.17 1213.72 L1997.59 1213.72 L1997 1213.72 L1996.41 1213.72 L1995.83 1213.72 L1995.24 1213.72 L1994.65 1213.72 L1994.07 1213.72 L1993.48 1213.72 L1992.9 1213.72 L1992.31 1213.72 L1991.72 1213.72 L1991.14 1213.72 L1990.55 1213.72 L1989.96 1213.72 L1989.38 1213.72 L1988.79 1213.72 L1988.2 1213.72 L1987.62 1213.72 L1987.03 1213.72 L1986.45 1213.72 L1985.86 1213.72 L1985.27 1213.72 L1984.69 1213.72 L1984.1 1213.72 L1983.51 1213.72 L1982.93 1213.72 L1982.34 1213.72 L1981.75 1213.72 L1981.17 1213.72 L1980.58 1213.72 L1979.99 1213.72 L1979.41 1213.72 L1978.82 1213.72 L1978.24 1213.72 L1977.65 1213.72 L1977.06 1213.72 L1976.48 1213.72 L1975.89 1213.72 L1975.3 1213.72 L1974.72 1213.72 L1974.13 1213.72 L1973.54 1213.72 L1972.96 1213.72 L1972.37 1213.72 L1971.78 1213.72 L1971.2 1213.72 L1970.61 1213.72 L1970.03 1213.72 L1969.44 1213.72 L1968.85 1213.72 L1968.27 1213.72 L1967.68 1213.72 L1967.09 1213.72 L1966.51 1213.72 L1965.92 1213.72 L1965.33 1213.72 L1964.75 1213.72 L1964.16 1213.72 L1963.58 1213.72 L1962.99 1213.72 L1962.4 1213.72 L1961.82 1213.72 L1961.23 1213.72 L1960.64 1213.72 L1960.06 1213.72 L1959.47 1213.72 L1958.88 1213.72 L1958.3 1213.72 L1957.71 1213.72 L1957.12 1213.72 L1956.54 1213.72 L1955.95 1213.72 L1955.37 1213.72 L1954.78 1213.72 L1954.19 1213.72 L1953.61 1213.72 L1953.02 1213.72 L1952.43 1213.72 L1951.85 1213.72 L1951.26 1213.72 L1950.67 1213.72 L1950.09 1213.72 L1949.5 1213.72 L1948.91 1213.72 L1948.33 1213.72 L1947.74 1213.72 L1947.16 1213.72 L1946.57 1213.72 L1945.98 1213.72 L1945.4 1213.72 L1944.81 1213.72 L1944.22 1213.72 L1943.64 1213.72 L1943.05 1213.72 L1942.46 1213.72 L1941.88 1213.72 L1941.29 1213.72 L1940.71 1213.72 L1940.12 1213.72 L1939.53 1213.72 L1938.95 1213.72 L1938.36 1213.72 L1937.77 1213.72 L1937.19 1213.72 L1936.6 1213.72 L1936.01 1213.72 L1935.43 1213.72 L1934.84 1213.72 L1934.25 1213.72 L1933.67 1213.72 L1933.08 1213.72 L1932.5 1213.72 L1931.91 1213.72 L1931.32 1213.72 L1930.74 1213.72 L1930.15 1213.72 L1929.56 1213.72 L1928.98 1213.72 L1928.39 1213.72 L1927.8 1213.72 L1927.22 1213.72 L1926.63 1213.72 L1926.04 1213.72 L1925.46 1213.72 L1924.87 1213.72 L1924.29 1213.72 L1923.7 1213.72 L1923.11 1213.72 L1922.53 1213.72 L1921.94 1213.72 L1921.35 1213.72 L1920.77 1213.72 L1920.18 1213.72 L1919.59 1213.72 L1919.01 1213.72 L1918.42 1213.72 L1917.83 1213.72 L1917.25 1213.72 L1916.66 1213.72 L1916.08 1213.72 L1915.49 1213.72 L1914.9 1213.72 L1914.32 1213.72 L1913.73 1213.72 L1913.14 1213.72 L1912.56 1213.72 L1911.97 1213.72 L1911.38 1213.72 L1910.8 1213.72 L1910.21 1213.72 L1909.63 1213.72 L1909.04 1213.72 L1908.45 1213.72 L1907.87 1213.72 L1907.28 1213.72 L1906.69 1213.72 L1906.11 1213.72 L1905.52 1213.72 L1904.93 1213.72 L1904.35 1213.72 L1903.76 1213.72 L1903.17 1213.72 L1902.59 1213.72 L1902 1213.72 L1901.42 1213.72 L1900.83 1213.72 L1900.24 1213.72 L1899.66 1213.72 L1899.07 1213.72 L1898.48 1213.72 L1897.9 1213.72 L1897.31 1213.72 L1896.72 1213.72 L1896.14 1213.72 L1895.55 1213.72 L1894.96 1213.72 L1894.38 1213.72 L1893.79 1213.72 L1893.21 1213.72 L1892.62 1213.72 L1892.03 1213.72 L1891.45 1213.72 L1890.86 1213.72 L1890.27 1213.72 L1889.69 1213.72 L1889.1 1213.72 L1888.51 1213.72 L1887.93 1213.72 L1887.34 1213.72 L1886.76 1213.72 L1886.17 1213.72 L1885.58 1213.72 L1885 1213.72 L1884.41 1213.72 L1883.82 1213.72 L1883.24 1213.72 L1882.65 1213.72 L1882.06 1213.72 L1881.48 1213.72 L1880.89 1213.72 L1880.3 1213.72 L1879.72 1213.72 L1879.13 1213.72 L1878.55 1213.72 L1877.96 1213.72 L1877.37 1213.72 L1876.79 1213.72 L1876.2 1213.72 L1875.61 1213.72 L1875.03 1213.72 L1874.44 1213.72 L1873.85 1213.72 L1873.27 1213.72 L1872.68 1213.72 L1872.09 1213.72 L1871.51 1213.72 L1870.92 1213.72 L1870.34 1213.72 L1869.75 1213.72 L1869.16 1213.72 L1868.58 1213.72 L1867.99 1213.72 L1867.4 1213.72 L1866.82 1213.72 L1866.23 1213.72 L1865.64 1213.72 L1865.06 1213.72 L1864.47 1213.72 L1863.88 1213.72 L1863.3 1213.72 L1862.71 1213.72 L1862.13 1213.72 L1861.54 1213.72 L1860.95 1213.72 L1860.37 1213.72 L1859.78 1213.72 L1859.19 1213.72 L1858.61 1213.72 L1858.02 1213.72 L1857.43 1213.72 L1856.85 1213.72 L1856.26 1213.72 L1855.68 1213.72 L1855.09 1213.72 L1854.5 1213.72 L1853.92 1213.72 L1853.33 1213.72 L1852.74 1213.72 L1852.16 1213.72 L1851.57 1213.72 L1850.98 1213.72 L1850.4 1213.72 L1849.81 1213.72 L1849.22 1213.72 L1848.64 1213.72 L1848.05 1213.72 L1847.47 1213.72 L1846.88 1213.72 L1846.29 1213.72 L1845.71 1213.72 L1845.12 1213.72 L1844.53 1213.72 L1843.95 1213.72 L1843.36 1213.72 L1842.77 1213.72 L1842.19 1213.72 L1841.6 1213.72 L1841.01 1213.72 L1840.43 1213.72 L1839.84 1213.72 L1839.26 1213.72 L1838.67 1213.72 L1838.08 1213.72 L1837.5 1213.72 L1836.91 1213.72 L1836.32 1213.72 L1835.74 1213.72 L1835.15 1213.72 L1834.56 1213.72 L1833.98 1213.72 L1833.39 1213.72 L1832.81 1213.72 L1832.22 1213.72 L1831.63 1213.72 L1831.05 1213.72 L1830.46 1213.72 L1829.87 1213.72 L1829.29 1213.72 L1828.7 1213.72 L1828.11 1213.72 L1827.53 1213.72 L1826.94 1213.72 L1826.35 1213.72 L1825.77 1213.72 L1825.18 1213.72 L1824.6 1213.72 L1824.01 1213.72 L1823.42 1213.72 L1822.84 1213.72 L1822.25 1213.72 L1821.66 1213.72 L1821.08 1213.72 L1820.49 1213.72 L1819.9 1213.72 L1819.32 1213.72 L1818.73 1213.72 L1818.14 1213.72 L1817.56 1213.72 L1816.97 1213.72 L1816.39 1213.72 L1815.8 1213.72 L1815.21 1213.72 L1814.63 1213.72 L1814.04 1213.72 L1813.45 1213.72 L1812.87 1213.72 L1812.28 1213.72 L1811.69 1213.72 L1811.11 1213.72 L1810.52 1213.72 L1809.94 1213.72 L1809.35 1213.72 L1808.76 1213.72 L1808.18 1213.72 L1807.59 1213.72 L1807 1213.72 L1806.42 1213.72 L1805.83 1213.72 L1805.24 1213.72 L1804.66 1213.72 L1804.07 1213.72 L1803.48 1213.72 L1802.9 1213.72 L1802.31 1213.72 L1801.73 1213.72 L1801.14 1213.72 L1800.55 1213.72 L1799.97 1213.72 L1799.38 1213.72 L1798.79 1213.72 L1798.21 1213.72 L1797.62 1213.72 L1797.03 1213.72 L1796.45 1213.72 L1795.86 1213.72 L1795.27 1213.72 L1794.69 1213.72 L1794.1 1213.72 L1793.52 1213.72 L1792.93 1213.72 L1792.34 1213.72 L1791.76 1213.72 L1791.17 1213.72 L1790.58 1213.72 L1790 1213.72 L1789.41 1213.72 L1788.82 1213.72 L1788.24 1213.72 L1787.65 1213.72 L1787.06 1213.72 L1786.48 1213.72 L1785.89 1213.72 L1785.31 1213.72 L1784.72 1213.72 L1784.13 1213.72 L1783.55 1213.72 L1782.96 1213.72 L1782.37 1213.72 L1781.79 1213.72 L1781.2 1213.72 L1780.61 1213.72 L1780.03 1213.72 L1779.44 1213.72 L1778.86 1213.72 L1778.27 1213.72 L1777.68 1213.72 L1777.1 1213.72 L1776.51 1213.72 L1775.92 1213.72 L1775.34 1213.72 L1774.75 1213.72 L1774.16 1213.72 L1773.58 1213.72 L1772.99 1213.72 L1772.4 1213.72 L1771.82 1213.72 L1771.23 1213.72 L1770.65 1213.72 L1770.06 1213.72 L1769.47 1213.72 L1768.89 1213.72 L1768.3 1213.72 L1767.71 1213.72 L1767.13 1213.72 L1766.54 1213.72 L1765.95 1213.72 L1765.37 1213.72 L1764.78 1213.72 L1764.19 1213.72 L1763.61 1213.72 L1763.02 1213.72 L1762.44 1213.72 L1761.85 1213.72 L1761.26 1213.72 L1760.68 1213.72 L1760.09 1213.72 L1759.5 1213.72 L1758.92 1213.72 L1758.33 1213.72 L1757.74 1213.72 L1757.16 1213.72 L1756.57 1213.72 L1755.99 1213.72 L1755.4 1213.72 L1754.81 1213.72 L1754.23 1213.72 L1753.64 1213.72 L1753.05 1213.72 L1752.47 1213.72 L1751.88 1213.72 L1751.29 1213.72 L1750.71 1213.72 L1750.12 1213.72 L1749.53 1213.72 L1748.95 1213.72 L1748.36 1213.72 L1747.78 1213.72 L1747.19 1213.72 L1746.6 1213.72 L1746.02 1213.72 L1745.43 1213.72 L1744.84 1213.72 L1744.26 1213.72 L1743.67 1213.72 L1743.08 1213.72 L1742.5 1213.72 L1741.91 1213.72 L1741.32 1213.72 L1740.74 1213.72 L1740.15 1213.72 L1739.57 1213.72 L1738.98 1213.72 L1738.39 1213.72 L1737.81 1213.72 L1737.22 1213.72 L1736.63 1213.72 L1736.05 1213.72 L1735.46 1213.72 L1734.87 1213.72 L1734.29 1213.72 L1733.7 1213.72 L1733.11 1213.72 L1732.53 1213.72 L1731.94 1213.72 L1731.36 1213.72 L1730.77 1213.72 L1730.18 1213.72 L1729.6 1213.72 L1729.01 1213.72 L1728.42 1213.72 L1727.84 1213.72 L1727.25 1213.72 L1726.66 1213.72 L1726.08 1213.72 L1725.49 1213.72 L1724.91 1213.72 L1724.32 1213.72 L1723.73 1213.72 L1723.15 1213.72 L1722.56 1213.72 L1721.97 1213.72 L1721.39 1213.72 L1720.8 1213.72 L1720.21 1213.72 L1719.63 1213.72 L1719.04 1213.72 L1718.45 1213.72 L1717.87 1213.72 L1717.28 1213.72 L1716.7 1213.72 L1716.11 1213.72 L1715.52 1213.72 L1714.94 1213.72 L1714.35 1213.72 L1713.76 1213.72 L1713.18 1213.72 L1712.59 1213.72 L1712 1213.72 L1711.42 1213.72 L1710.83 1213.72 L1710.24 1213.72 L1709.66 1213.72 L1709.07 1213.72 L1708.49 1213.72 L1707.9 1213.72 L1707.31 1213.72 L1706.73 1213.72 L1706.14 1213.72 L1705.55 1213.72 L1704.97 1213.72 L1704.38 1213.72 L1703.79 1213.72 L1703.21 1213.72 L1702.62 1213.72 L1702.04 1213.72 L1701.45 1213.72 L1700.86 1213.72 L1700.28 1213.72 L1699.69 1213.72 L1699.1 1213.72 L1698.52 1213.72 L1697.93 1213.72 L1697.34 1213.72 L1696.76 1213.72 L1696.17 1213.72 L1695.58 1213.72 L1695 1213.72 L1694.41 1213.72 L1693.83 1213.72 L1693.24 1213.72 L1692.65 1213.72 L1692.07 1213.72 L1691.48 1213.72 L1690.89 1213.72 L1690.31 1213.72 L1689.72 1213.72 L1689.13 1213.72 L1688.55 1213.72 L1687.96 1213.72 L1687.37 1213.72 L1686.79 1213.72 L1686.2 1213.72 L1685.62 1213.72 L1685.03 1213.72 L1684.44 1213.72 L1683.86 1213.72 L1683.27 1213.72 L1682.68 1213.72 L1682.1 1213.72 L1681.51 1213.72 L1680.92 1213.72 L1680.34 1213.72 L1679.75 1213.72 L1679.17 1213.72 L1678.58 1213.72 L1677.99 1213.72 L1677.41 1213.72 L1676.82 1213.72 L1676.23 1213.72 L1675.65 1213.72 L1675.06 1213.72 L1674.47 1213.72 L1673.89 1213.72 L1673.3 1213.72 L1672.71 1213.72 L1672.13 1213.72 L1671.54 1213.72 L1670.96 1213.72 L1670.37 1213.72 L1669.78 1213.72 L1669.2 1213.72 L1668.61 1213.72 L1668.02 1213.72 L1667.44 1213.72 L1666.85 1213.72 L1666.26 1213.72 L1665.68 1213.72 L1665.09 1213.72 L1664.5 1213.72 L1663.92 1213.72 L1663.33 1213.72 L1662.75 1213.72 L1662.16 1213.72 L1661.57 1213.72 L1660.99 1213.72 L1660.4 1213.72 L1659.81 1213.72 L1659.23 1213.72 L1658.64 1213.72 L1658.05 1213.72 L1657.47 1213.72 L1656.88 1213.72 L1656.29 1213.72 L1655.71 1213.72 L1655.12 1213.72 L1654.54 1213.72 L1653.95 1213.72 L1653.36 1213.72 L1652.78 1213.72 L1652.19 1213.72 L1651.6 1213.72 L1651.02 1213.72 L1650.43 1213.72 L1649.84 1213.72 L1649.26 1213.72 L1648.67 1213.72 L1648.09 1213.72 L1647.5 1213.72 L1646.91 1213.72 L1646.33 1213.72 L1645.74 1213.72 L1645.15 1213.72 L1644.57 1213.72 L1643.98 1213.72 L1643.39 1213.72 L1642.81 1213.72 L1642.22 1213.72 L1641.63 1213.72 L1641.05 1213.72 L1640.46 1213.72 L1639.88 1213.72 L1639.29 1213.72 L1638.7 1213.72 L1638.12 1213.72 L1637.53 1213.72 L1636.94 1213.72 L1636.36 1213.72 L1635.77 1213.72 L1635.18 1213.72 L1634.6 1213.72 L1634.01 1213.72 L1633.42 1213.72 L1632.84 1213.72 L1632.25 1213.72 L1631.67 1213.72 L1631.08 1213.72 L1630.49 1213.72 L1629.91 1213.72 L1629.32 1213.72 L1628.73 1213.72 L1628.15 1213.72 L1627.56 1213.72 L1626.97 1213.72 L1626.39 1213.72 L1625.8 1213.72 L1625.22 1213.72 L1624.63 1213.72 L1624.04 1213.72 L1623.46 1213.72 L1622.87 1213.72 L1622.28 1213.72 L1621.7 1213.72 L1621.11 1213.72 L1620.52 1213.72 L1619.94 1213.72 L1619.35 1213.72 L1618.76 1213.72 L1618.18 1213.72 L1617.59 1213.72 L1617.01 1213.72 L1616.42 1213.72 L1615.83 1213.72 L1615.25 1213.72 L1614.66 1213.72 L1614.07 1213.72 L1613.49 1213.72 L1612.9 1213.72 L1612.31 1213.72 L1611.73 1213.72 L1611.14 1213.72 L1610.55 1213.72 L1609.97 1213.72 L1609.38 1213.72 L1608.8 1213.72 L1608.21 1213.72 L1607.62 1213.72 L1607.04 1213.72 L1606.45 1213.72 L1605.86 1213.72 L1605.28 1213.72 L1604.69 1213.72 L1604.1 1213.72 L1603.52 1213.72 L1602.93 1213.72 L1602.34 1213.72 L1601.76 1213.72 L1601.17 1213.72 L1600.59 1213.72 L1600 1213.72 L1599.41 1213.72 L1598.83 1213.72 L1598.24 1213.72 L1597.65 1213.72 L1597.07 1213.72 L1596.48 1213.72 L1595.89 1213.72 L1595.31 1213.72 L1594.72 1213.72 L1594.14 1213.72 L1593.55 1213.72 L1592.96 1213.72 L1592.38 1213.72 L1591.79 1213.72 L1591.2 1213.72 L1590.62 1213.72 L1590.03 1213.72 L1589.44 1213.72 L1588.86 1213.72 L1588.27 1213.72 L1587.68 1213.72 L1587.1 1213.72 L1586.51 1213.72 L1585.93 1213.72 L1585.34 1213.72 L1584.75 1213.72 L1584.17 1213.72 L1583.58 1213.72 L1582.99 1213.72 L1582.41 1213.72 L1581.82 1213.72 L1581.23 1213.72 L1580.65 1213.72 L1580.06 1213.72 L1579.47 1213.72 L1578.89 1213.72 L1578.3 1213.72 L1577.72 1213.72 L1577.13 1213.72 L1576.54 1213.72 L1575.96 1213.72 L1575.37 1213.72 L1574.78 1213.72 L1574.2 1213.72 L1573.61 1213.72 L1573.02 1213.72 L1572.44 1213.72 L1571.85 1213.72 L1571.27 1213.72 L1570.68 1213.72 L1570.09 1213.72 L1569.51 1213.72 L1568.92 1213.72 L1568.33 1213.72 L1567.75 1213.72 L1567.16 1213.72 L1566.57 1213.72 L1565.99 1213.72 L1565.4 1213.72 L1564.81 1213.72 L1564.23 1213.72 L1563.64 1213.72 L1563.06 1213.72 L1562.47 1213.72 L1561.88 1213.72 L1561.3 1213.72 L1560.71 1213.72 L1560.12 1213.72 L1559.54 1213.72 L1558.95 1213.72 L1558.36 1213.72 L1557.78 1213.72 L1557.19 1213.72 L1556.6 1213.72 L1556.02 1213.72 L1555.43 1213.72 L1554.85 1213.72 L1554.26 1213.72 L1553.67 1213.72 L1553.09 1213.72 L1552.5 1213.72 L1551.91 1213.72 L1551.33 1213.72 L1550.74 1213.72 L1550.15 1213.72 L1549.57 1213.72 L1548.98 1213.72 L1548.4 1213.72 L1547.81 1213.72 L1547.22 1213.72 L1546.64 1213.72 L1546.05 1213.72 L1545.46 1213.72 L1544.88 1213.72 L1544.29 1213.72 L1543.7 1213.72 L1543.12 1213.72 L1542.53 1213.72 L1541.94 1213.72 L1541.36 1213.72 L1540.77 1213.72 L1540.19 1213.72 L1539.6 1213.72 L1539.01 1213.72 L1538.43 1213.72 L1537.84 1213.72 L1537.25 1213.72 L1536.67 1213.72 L1536.08 1213.72 L1535.49 1213.72 L1534.91 1213.72 L1534.32 1213.72 L1533.73 1213.72 L1533.15 1213.72 L1532.56 1213.72 L1531.98 1213.72 L1531.39 1213.72 L1530.8 1213.72 L1530.22 1213.72 L1529.63 1213.72 L1529.04 1213.72 L1528.46 1213.72 L1527.87 1213.72 L1527.28 1213.72 L1526.7 1213.72 L1526.11 1213.72 L1525.52 1213.72 L1524.94 1213.72 L1524.35 1213.72 L1523.77 1213.72 L1523.18 1213.72 L1522.59 1213.72 L1522.01 1213.72 L1521.42 1213.72 L1520.83 1213.72 L1520.25 1213.72 L1519.66 1213.72 L1519.07 1213.72 L1518.49 1213.72 L1517.9 1213.72 L1517.32 1213.72 L1516.73 1213.72 L1516.14 1213.72 L1515.56 1213.72 L1514.97 1213.72 L1514.38 1213.72 L1513.8 1213.72 L1513.21 1213.72 L1512.62 1213.72 L1512.04 1213.72 L1511.45 1213.72 L1510.86 1213.72 L1510.28 1213.72 L1509.69 1213.72 L1509.11 1213.72 L1508.52 1213.72 L1507.93 1213.72 L1507.35 1213.72 L1506.76 1213.72 L1506.17 1213.72 L1505.59 1213.72 L1505 1213.72 L1504.41 1213.72 L1503.83 1213.72 L1503.24 1213.72 L1502.65 1213.72 L1502.07 1213.72 L1501.48 1213.72 L1500.9 1213.72 L1500.31 1213.72 L1499.72 1213.72 L1499.14 1213.72 L1498.55 1213.72 L1497.96 1213.72 L1497.38 1213.72 L1496.79 1213.72 L1496.2 1213.72 L1495.62 1213.72 L1495.03 1213.72 L1494.45 1213.72 L1493.86 1213.72 L1493.27 1213.72 L1492.69 1213.72 L1492.1 1213.72 L1491.51 1213.72 L1490.93 1213.72 L1490.34 1213.72 L1489.75 1213.72 L1489.17 1213.72 L1488.58 1213.72 L1487.99 1213.72 L1487.41 1213.72 L1486.82 1213.72 L1486.24 1213.72 L1485.65 1213.72 L1485.06 1213.72 L1484.48 1213.72 L1483.89 1213.72 L1483.3 1213.72 L1482.72 1213.72 L1482.13 1213.72 L1481.54 1213.72 L1480.96 1213.72 L1480.37 1213.72 L1479.78 1213.72 L1479.2 1213.72 L1478.61 1213.72 L1478.03 1213.72 L1477.44 1213.72 L1476.85 1213.72 L1476.27 1213.72 L1475.68 1213.72 L1475.09 1213.72 L1474.51 1213.72 L1473.92 1213.72 L1473.33 1213.72 L1472.75 1213.72 L1472.16 1213.72 L1471.57 1213.72 L1470.99 1213.72 L1470.4 1213.72 L1469.82 1213.72 L1469.23 1213.72 L1468.64 1213.72 L1468.06 1213.72 L1467.47 1213.72 L1466.88 1213.72 L1466.3 1213.72 L1465.71 1213.72 L1465.12 1213.72 L1464.54 1213.72 L1463.95 1213.72 L1463.37 1213.72 L1462.78 1213.72 L1462.19 1213.72 L1461.61 1213.72 L1461.02 1213.72 L1460.43 1213.72 L1459.85 1213.72 L1459.26 1213.72 L1458.67 1213.72 L1458.09 1213.72 L1457.5 1213.72 L1456.91 1213.72 L1456.33 1213.72 L1455.74 1213.72 L1455.16 1213.72 L1454.57 1213.72 L1453.98 1213.72 L1453.4 1213.72 L1452.81 1213.72 L1452.22 1213.72 L1451.64 1213.72 L1451.05 1213.72 L1450.46 1213.72 L1449.88 1213.72 L1449.29 1213.72 L1448.7 1213.72 L1448.12 1213.72 L1447.53 1213.72 L1446.95 1213.72 L1446.36 1213.72 L1445.77 1213.72 L1445.19 1213.72 L1444.6 1213.72 L1444.01 1213.72 L1443.43 1213.72 L1442.84 1213.72 L1442.25 1213.72 L1441.67 1213.72 L1441.08 1213.72 L1440.5 1213.72 L1439.91 1213.72 L1439.32 1213.72 L1438.74 1213.72 L1438.15 1213.72 L1437.56 1213.72 L1436.98 1213.72 L1436.39 1213.72 L1435.8 1213.72 L1435.22 1213.72 L1434.63 1213.72 L1434.04 1213.72 L1433.46 1213.72 L1432.87 1213.72 L1432.29 1213.72 L1431.7 1213.72 L1431.11 1213.72 L1430.53 1213.72 L1429.94 1213.72 L1429.35 1213.72 L1428.77 1213.72 L1428.18 1213.72 L1427.59 1213.72 L1427.01 1213.72 L1426.42 1213.72 L1425.83 1213.72 L1425.25 1213.72 L1424.66 1213.72 L1424.08 1213.72 L1423.49 1213.72 L1422.9 1213.72 L1422.32 1213.72 L1421.73 1213.72 L1421.14 1213.72 L1420.56 1213.72 L1419.97 1213.72 L1419.38 1213.72 L1418.8 1213.72 L1418.21 1213.72 L1417.63 1213.72 L1417.04 1213.72 L1416.45 1213.72 L1415.87 1213.72 L1415.28 1213.72 L1414.69 1213.72 L1414.11 1213.72 L1413.52 1213.72 L1412.93 1213.72 L1412.35 1213.72 L1411.76 1213.72 L1411.17 1213.72 L1410.59 1213.72 L1410 1213.72 L1409.42 1213.72 L1408.83 1213.72 L1408.24 1213.72 L1407.66 1213.72 L1407.07 1213.72 L1406.48 1213.72 L1405.9 1213.72 L1405.31 1213.72 L1404.72 1213.72 L1404.14 1213.72 L1403.55 1213.72 L1402.96 1213.72 L1402.38 1213.72 L1401.79 1213.72 L1401.21 1213.72 L1400.62 1213.72 L1400.03 1213.72 L1399.45 1213.72 L1398.86 1213.72 L1398.27 1213.72 L1397.69 1213.72 L1397.1 1213.72 L1396.51 1213.72 L1395.93 1213.72 L1395.34 1213.72 L1394.75 1213.72 L1394.17 1213.72 L1393.58 1213.72 L1393 1213.72 L1392.41 1213.72 L1391.82 1213.72 L1391.24 1213.72 L1390.65 1213.72 L1390.06 1213.72 L1389.48 1213.72 L1388.89 1213.72 L1388.3 1213.72 L1387.72 1213.72 L1387.13 1213.72 L1386.55 1213.72 L1385.96 1213.72 L1385.37 1213.72 L1384.79 1213.72 L1384.2 1213.72 L1383.61 1213.72 L1383.03 1213.72 L1382.44 1213.72 L1381.85 1213.72 L1381.27 1213.72 L1380.68 1213.72 L1380.09 1213.72 L1379.51 1213.72 L1378.92 1213.72 L1378.34 1213.72 L1377.75 1213.72 L1377.16 1213.72 L1376.58 1213.72 L1375.99 1213.72 L1375.4 1213.72 L1374.82 1213.72 L1374.23 1213.72 L1373.64 1213.72 L1373.06 1213.72 L1372.47 1213.72 L1371.88 1213.72 L1371.3 1213.72 L1370.71 1213.72 L1370.13 1213.72 L1369.54 1213.72 L1368.95 1213.72 L1368.37 1213.72 L1367.78 1213.72 L1367.19 1213.72 L1366.61 1213.72 L1366.02 1213.72 L1365.43 1213.72 L1364.85 1213.72 L1364.26 1213.72 L1363.68 1213.72 L1363.09 1213.72 L1362.5 1213.72 L1361.92 1213.72 L1361.33 1213.72 L1360.74 1213.72 L1360.16 1213.72 L1359.57 1213.72 L1358.98 1213.72 L1358.4 1213.72 L1357.81 1213.72 L1357.22 1213.72 L1356.64 1213.72 L1356.05 1213.72 L1355.47 1213.72 L1354.88 1213.72 L1354.29 1213.72 L1353.71 1213.72 L1353.12 1213.72 L1352.53 1213.72 L1351.95 1213.72 L1351.36 1213.72 L1350.77 1213.72 L1350.19 1213.72 L1349.6 1213.72 L1349.01 1213.72 L1348.43 1213.72 L1347.84 1213.72 L1347.26 1213.72 L1346.67 1213.72 L1346.08 1213.72 L1345.5 1213.72 L1344.91 1213.72 L1344.32 1213.72 L1343.74 1213.72 L1343.15 1213.72 L1342.56 1213.72 L1341.98 1213.72 L1341.39 1213.72 L1340.8 1213.72 L1340.22 1213.72 L1339.63 1213.72 L1339.05 1213.72 L1338.46 1213.72 L1337.87 1213.72 L1337.29 1213.72 L1336.7 1213.72 L1336.11 1213.72 L1335.53 1213.72 L1334.94 1213.72 L1334.35 1213.72 L1333.77 1213.72 L1333.18 1213.72 L1332.6 1213.72 L1332.01 1213.72 L1331.42 1213.72 L1330.84 1213.72 L1330.25 1213.72 L1329.66 1213.72 L1329.08 1213.72 L1328.49 1213.72 L1327.9 1213.72 L1327.32 1213.72 L1326.73 1213.72 L1326.14 1213.72 L1325.56 1213.72 L1324.97 1213.72 L1324.39 1213.72 L1323.8 1213.72 L1323.21 1213.72 L1322.63 1213.72 L1322.04 1213.72 L1321.45 1213.72 L1320.87 1213.72 L1320.28 1213.72 L1319.69 1213.72 L1319.11 1213.72 L1318.52 1213.72 L1317.93 1213.72 L1317.35 1213.72 L1316.76 1213.72 L1316.18 1213.72 L1315.59 1213.72 L1315 1213.72 L1314.42 1213.72 L1313.83 1213.72 L1313.24 1213.72 L1312.66 1213.72 L1312.07 1213.72 L1311.48 1213.72 L1310.9 1213.72 L1310.31 1213.72 L1309.73 1213.72 L1309.14 1213.72 L1308.55 1213.72 L1307.97 1213.72 L1307.38 1213.72 L1306.79 1213.72 L1306.21 1213.72 L1305.62 1213.72 L1305.03 1213.72 L1304.45 1213.72 L1303.86 1213.72 L1303.27 1213.72 L1302.69 1213.72 L1302.1 1213.72 L1301.52 1213.72 L1300.93 1213.72 L1300.34 1213.72 L1299.76 1213.72 L1299.17 1213.72 L1298.58 1213.72 L1298 1213.72 L1297.41 1213.72 L1296.82 1213.72 L1296.24 1213.72 L1295.65 1213.72 L1295.06 1213.72 L1294.48 1213.72 L1293.89 1213.72 L1293.31 1213.72 L1292.72 1213.72 L1292.13 1213.72 L1291.55 1213.72 L1290.96 1213.72 L1290.37 1213.72 L1289.79 1213.72 L1289.2 1213.72 L1288.61 1213.72 L1288.03 1213.72 L1287.44 1213.72 L1286.86 1213.72 L1286.27 1213.72 L1285.68 1213.72 L1285.1 1213.72 L1284.51 1213.72 L1283.92 1213.72 L1283.34 1213.72 L1282.75 1213.72 L1282.16 1213.72 L1281.58 1213.72 L1280.99 1213.72 L1280.4 1213.72 L1279.82 1213.72 L1279.23 1213.72 L1278.65 1213.72 L1278.06 1213.72 L1277.47 1213.72 L1276.89 1213.72 L1276.3 1213.72 L1275.71 1213.72 L1275.13 1213.72 L1274.54 1213.72 L1273.95 1213.72 L1273.37 1213.72 L1272.78 1213.72 L1272.19 1213.72 L1271.61 1213.72 L1271.02 1213.72 L1270.44 1213.72 L1269.85 1213.72 L1269.26 1213.72 L1268.68 1213.72 L1268.09 1213.72 L1267.5 1213.72 L1266.92 1213.72 L1266.33 1213.72 L1265.74 1213.72 L1265.16 1213.72 L1264.57 1213.72 L1263.98 1213.72 L1263.4 1213.72 L1262.81 1213.72 L1262.23 1213.72 L1261.64 1213.72 L1261.05 1213.72 L1260.47 1213.72 L1259.88 1213.72 L1259.29 1213.72 L1258.71 1213.72 L1258.12 1213.72 L1257.53 1213.72 L1256.95 1213.72 L1256.36 1213.72 L1255.78 1213.72 L1255.19 1213.72 L1254.6 1213.72 L1254.02 1213.72 L1253.43 1213.72 L1252.84 1213.72 L1252.26 1213.72 L1251.67 1213.72 L1251.08 1213.72 L1250.5 1213.72 L1249.91 1213.72 L1249.32 1213.72 L1248.74 1213.72 L1248.15 1213.72 L1247.57 1213.72 L1246.98 1213.72 L1246.39 1213.72 L1245.81 1213.72 L1245.22 1213.72 L1244.63 1213.72 L1244.05 1213.72 L1243.46 1213.72 L1242.87 1213.72 L1242.29 1213.72 L1241.7 1213.72 L1241.11 1213.72 L1240.53 1213.72 L1239.94 1213.72 L1239.36 1213.72 L1238.77 1213.72 L1238.18 1213.72 L1237.6 1213.72 L1237.01 1213.72 L1236.42 1213.72 L1235.84 1213.72 L1235.25 1213.72 L1234.66 1213.72 L1234.08 1213.72 L1233.49 1213.72 L1232.91 1213.72 L1232.32 1213.72 L1231.73 1213.72 L1231.15 1213.72 L1230.56 1213.72 L1229.97 1213.72 L1229.39 1213.72 L1228.8 1213.72 L1228.21 1213.72 L1227.63 1213.72 L1227.04 1213.72 L1226.45 1213.72 L1225.87 1213.72 L1225.28 1213.72 L1224.7 1213.72 L1224.11 1213.72 L1223.52 1213.72 L1222.94 1213.72 L1222.35 1213.72 L1221.76 1213.72 L1221.18 1213.72 L1220.59 1213.72 L1220 1213.72 L1219.42 1213.72 L1218.83 1213.72 L1218.24 1213.72 L1217.66 1213.72 L1217.07 1213.72 L1216.49 1213.72 L1215.9 1213.72 L1215.31 1213.72 L1214.73 1213.72 L1214.14 1213.72 L1213.55 1213.72 L1212.97 1213.72 L1212.38 1213.72 L1211.79 1213.72 L1211.21 1213.72 L1210.62 1213.72 L1210.03 1213.72 L1209.45 1213.72 L1208.86 1213.72 L1208.28 1213.72 L1207.69 1213.72 L1207.1 1213.72 L1206.52 1213.72 L1205.93 1213.72 L1205.34 1213.72 L1204.76 1213.72 L1204.17 1213.72 L1203.58 1213.72 L1203 1213.72 L1202.41 1213.72 L1201.83 1213.72 L1201.24 1213.72 L1200.65 1213.72 L1200.07 1213.72 L1199.48 1213.72 L1198.89 1213.72 L1198.31 1213.72 L1197.72 1213.72 L1197.13 1213.72 L1196.55 1213.72 L1195.96 1213.72 L1195.37 1213.72 L1194.79 1213.72 L1194.2 1213.72 L1193.62 1213.72 L1193.03 1213.72 L1192.44 1213.72 L1191.86 1213.72 L1191.27 1213.72 L1190.68 1213.72 L1190.1 1213.72 L1189.51 1213.72 L1188.92 1213.72 L1188.34 1213.72 L1187.75 1213.72 L1187.16 1213.72 L1186.58 1213.72 L1185.99 1213.72 L1185.41 1213.72 L1184.82 1213.72 L1184.23 1213.72 L1183.65 1213.72 L1183.06 1213.72 L1182.47 1213.72 L1181.89 1213.72 L1181.3 1213.72 L1180.71 1213.72 L1180.13 1213.72 L1179.54 1213.72 L1178.96 1213.72 L1178.37 1213.72 L1177.78 1213.72 L1177.2 1213.72 L1176.61 1213.72 L1176.02 1213.72 L1175.44 1213.72 L1174.85 1213.72 L1174.26 1213.72 L1173.68 1213.72 L1173.09 1213.72 L1172.5 1213.72 L1171.92 1213.72 L1171.33 1213.72 L1170.75 1213.72 L1170.16 1213.72 L1169.57 1213.72 L1168.99 1213.72 L1168.4 1213.72 L1167.81 1213.72 L1167.23 1213.72 L1166.64 1213.72 L1166.05 1213.72 L1165.47 1213.72 L1164.88 1213.72 L1164.29 1213.72 L1163.71 1213.72 L1163.12 1213.72 L1162.54 1213.72 L1161.95 1213.72 L1161.36 1213.72 L1160.78 1213.72 L1160.19 1213.72 L1159.6 1213.72 L1159.02 1213.72 L1158.43 1213.72 L1157.84 1213.72 L1157.26 1213.72 L1156.67 1213.72 L1156.09 1213.72 L1155.5 1213.72 L1154.91 1213.72 L1154.33 1213.72 L1153.74 1213.72 L1153.15 1213.72 L1152.57 1213.72 L1151.98 1213.72 L1151.39 1213.72 L1150.81 1213.72 L1150.22 1213.72 L1149.63 1213.72 L1149.05 1213.72 L1148.46 1213.72 L1147.88 1213.72 L1147.29 1213.72 L1146.7 1213.72 L1146.12 1213.72 L1145.53 1213.72 L1144.94 1213.72 L1144.36 1213.72 L1143.77 1213.72 L1143.18 1213.72 L1142.6 1213.72 L1142.01 1213.72 L1141.42 1213.72 L1140.84 1213.72 L1140.25 1213.72 L1139.67 1213.72 L1139.08 1213.72 L1138.49 1213.72 L1137.91 1213.72 L1137.32 1213.72 L1136.73 1213.72 L1136.15 1213.72 L1135.56 1213.72 L1134.97 1213.72 L1134.39 1213.72 L1133.8 1213.72 L1133.21 1213.72 L1132.63 1213.72 L1132.04 1213.72 L1131.46 1213.72 L1130.87 1213.72 L1130.28 1213.72 L1129.7 1213.72 L1129.11 1213.72 L1128.52 1213.72 L1127.94 1213.72 L1127.35 1213.72 L1126.76 1213.72 L1126.18 1213.72 L1125.59 1213.72 L1125.01 1213.72 L1124.42 1213.72 L1123.83 1213.72 L1123.25 1213.72 L1122.66 1213.72 L1122.07 1213.72 L1121.49 1213.72 L1120.9 1213.72 L1120.31 1213.72 L1119.73 1213.72 L1119.14 1213.72 L1118.55 1213.72 L1117.97 1213.72 L1117.38 1213.72 L1116.8 1213.72 L1116.21 1213.72 L1115.62 1213.72 L1115.04 1213.72 L1114.45 1213.72 L1113.86 1213.72 L1113.28 1213.72 L1112.69 1213.72 L1112.1 1213.72 L1111.52 1213.72 L1110.93 1213.72 L1110.34 1213.72 L1109.76 1213.72 L1109.17 1213.72 L1108.59 1213.72 L1108 1213.72 L1107.41 1213.72 L1106.83 1213.72 L1106.24 1213.72 L1105.65 1213.72 L1105.07 1213.72 L1104.48 1213.72 L1103.89 1213.72 L1103.31 1213.72 L1102.72 1213.72 L1102.14 1213.72 L1101.55 1213.72 L1100.96 1213.72 L1100.38 1213.72 L1099.79 1213.72 L1099.2 1213.72 L1098.62 1213.72 L1098.03 1213.72 L1097.44 1213.72 L1096.86 1213.72 L1096.27 1213.72 L1095.68 1213.72 L1095.1 1213.72 L1094.51 1213.72 L1093.93 1213.72 L1093.34 1213.72 L1092.75 1213.72 L1092.17 1213.72 L1091.58 1213.72 L1090.99 1213.72 L1090.41 1213.72 L1089.82 1213.72 L1089.23 1213.72 L1088.65 1213.72 L1088.06 1213.72 L1087.47 1213.72 L1086.89 1213.72 L1086.3 1213.72 L1085.72 1213.72 L1085.13 1213.72 L1084.54 1213.72 L1083.96 1213.72 L1083.37 1213.72 L1082.78 1213.72 L1082.2 1213.72 L1081.61 1213.72 L1081.02 1213.72 L1080.44 1213.72 L1079.85 1213.72 L1079.26 1213.72 L1078.68 1213.72 L1078.09 1213.72 L1077.51 1213.72 L1076.92 1213.72 L1076.33 1213.72 L1075.75 1213.72 L1075.16 1213.72 L1074.57 1213.72 L1073.99 1213.72 L1073.4 1213.72 L1072.81 1213.72 L1072.23 1213.72 L1071.64 1213.72 L1071.06 1213.72 L1070.47 1213.72 L1069.88 1213.72 L1069.3 1213.72 L1068.71 1213.72 L1068.12 1213.72 L1067.54 1213.72 L1066.95 1213.72 L1066.36 1213.72 L1065.78 1213.72 L1065.19 1213.72 L1064.6 1213.72 L1064.02 1213.72 L1063.43 1213.72 L1062.85 1213.72 L1062.26 1213.72 L1061.67 1213.72 L1061.09 1213.72 L1060.5 1213.72 L1059.91 1213.72 L1059.33 1213.72 L1058.74 1213.72 L1058.15 1213.72 L1057.57 1213.72 L1056.98 1213.72 L1056.39 1213.72 L1055.81 1213.72 L1055.22 1213.72 L1054.64 1213.72 L1054.05 1213.72 L1053.46 1213.72 L1052.88 1213.72 L1052.29 1213.72 L1051.7 1213.72 L1051.12 1213.72 L1050.53 1213.72 L1049.94 1213.72 L1049.36 1213.72 L1048.77 1213.72 L1048.19 1213.72 L1047.6 1213.72 L1047.01 1213.72 L1046.43 1213.72 L1045.84 1213.72 L1045.25 1213.72 L1044.67 1213.72 L1044.08 1213.72 L1043.49 1213.72 L1042.91 1213.72 L1042.32 1213.72 L1041.73 1213.72 L1041.15 1213.72 L1040.56 1213.72 L1039.98 1213.72 L1039.39 1213.72 L1038.8 1213.72 L1038.22 1213.72 L1037.63 1213.72 L1037.04 1213.72 L1036.46 1213.72 L1035.87 1213.72 L1035.28 1213.72 L1034.7 1213.72 L1034.11 1213.72 L1033.52 1213.72 L1032.94 1213.72 L1032.35 1213.72 L1031.77 1213.72 L1031.18 1213.72 L1030.59 1213.72 L1030.01 1213.72 L1029.42 1213.72 L1028.83 1213.72 L1028.25 1213.72 L1027.66 1213.72 L1027.07 1213.72 L1026.49 1213.72 L1025.9 1213.72 L1025.32 1213.72 L1024.73 1213.72 L1024.14 1213.72 L1023.56 1213.72 L1022.97 1213.72 L1022.38 1213.72 L1021.8 1213.72 L1021.21 1213.72 L1020.62 1213.72 L1020.04 1213.72 L1019.45 1213.72 L1018.86 1213.72 L1018.28 1213.72 L1017.69 1213.72 L1017.11 1213.72 L1016.52 1213.72 L1015.93 1213.72 L1015.35 1213.72 L1014.76 1213.72 L1014.17 1213.72 L1013.59 1213.72 L1013 1213.72 L1012.41 1213.72 L1011.83 1213.72 L1011.24 1213.72 L1010.65 1213.72 L1010.07 1213.72 L1009.48 1213.72 L1008.9 1213.72 L1008.31 1213.72 L1007.72 1213.72 L1007.14 1213.72 L1006.55 1213.72 L1005.96 1213.72 L1005.38 1213.72 L1004.79 1213.72 L1004.2 1213.72 L1003.62 1213.72 L1003.03 1213.72 L1002.44 1213.72 L1001.86 1213.72 L1001.27 1213.72 L1000.69 1213.72 L1000.1 1213.72 L999.513 1213.72 L998.926 1213.72 L998.34 1213.72 L997.754 1213.72 L997.167 1213.72 L996.581 1213.72 L995.994 1213.72 L995.408 1213.72 L994.822 1213.72 L994.235 1213.72 L993.649 1213.72 L993.062 1213.72 L992.476 1213.72 L991.889 1213.72 L991.303 1213.72 L990.717 1213.72 L990.13 1213.72 L989.544 1213.72 L988.957 1213.72 L988.371 1213.72 L987.785 1213.72 L987.198 1213.72 L986.612 1213.72 L986.025 1213.72  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.83 986.612,1213.83 987.198,1213.83 987.785,1213.83 988.371,1213.83 988.957,1213.83 989.544,1213.83 990.13,1213.83 990.717,1213.83 991.303,1213.83 991.889,1213.83 992.476,1213.83 993.062,1213.83 993.649,1213.83 994.235,1213.83 994.822,1213.83 995.408,1213.83 995.994,1213.83 996.581,1213.83 997.167,1213.83 997.754,1213.83 998.34,1213.83 998.926,1213.83 999.513,1213.83 1000.1,1213.83 1000.69,1213.83 1001.27,1213.83 1001.86,1213.83 1002.44,1213.83 1003.03,1213.83 1003.62,1213.83 1004.2,1213.83 1004.79,1213.83 1005.38,1213.83 1005.96,1213.83 1006.55,1213.83 1007.14,1213.83 1007.72,1213.83 1008.31,1213.83 1008.9,1213.83 1009.48,1213.83 1010.07,1213.83 1010.65,1213.83 1011.24,1213.83 1011.83,1213.83 1012.41,1213.83 1013,1213.83 1013.59,1213.83 1014.17,1213.83 1014.76,1213.83 1015.35,1213.83 1015.93,1213.83 1016.52,1213.83 1017.11,1213.83 1017.69,1213.83 1018.28,1213.83 1018.86,1213.83 1019.45,1213.83 1020.04,1213.83 1020.62,1213.83 1021.21,1213.83 1021.8,1213.83 1022.38,1213.83 1022.97,1213.83 1023.56,1213.83 1024.14,1213.83 1024.73,1213.83 1025.32,1213.83 1025.9,1213.83 1026.49,1213.83 1027.07,1213.83 1027.66,1213.83 1028.25,1213.83 1028.83,1213.83 1029.42,1213.83 1030.01,1213.83 1030.59,1213.83 1031.18,1213.83 1031.77,1213.83 1032.35,1213.83 1032.94,1213.83 1033.52,1213.83 1034.11,1213.83 1034.7,1213.83 1035.28,1213.83 1035.87,1213.83 1036.46,1213.83 1037.04,1213.83 1037.63,1213.83 1038.22,1213.83 1038.8,1213.83 1039.39,1213.83 1039.98,1213.83 1040.56,1213.83 1041.15,1213.83 1041.73,1213.83 1042.32,1213.83 1042.91,1213.83 1043.49,1213.83 1044.08,1213.83 1044.67,1213.83 1045.25,1213.83 1045.84,1213.83 1046.43,1213.83 1047.01,1213.83 1047.6,1213.83 1048.19,1213.83 1048.77,1213.83 1049.36,1213.83 1049.94,1213.83 1050.53,1213.83 1051.12,1213.83 1051.7,1213.83 1052.29,1213.83 1052.88,1213.83 1053.46,1213.83 1054.05,1213.83 1054.64,1213.83 1055.22,1213.83 1055.81,1213.83 1056.39,1213.83 1056.98,1213.83 1057.57,1213.83 1058.15,1213.83 1058.74,1213.83 1059.33,1213.83 1059.91,1213.83 1060.5,1213.83 1061.09,1213.83 1061.67,1213.83 1062.26,1213.83 1062.85,1213.83 1063.43,1213.83 1064.02,1213.83 1064.6,1213.83 1065.19,1213.83 1065.78,1213.83 1066.36,1213.83 1066.95,1213.83 1067.54,1213.83 1068.12,1213.83 1068.71,1213.83 1069.3,1213.83 1069.88,1213.83 1070.47,1213.83 1071.06,1213.83 1071.64,1213.83 1072.23,1213.83 1072.81,1213.83 1073.4,1213.83 1073.99,1213.83 1074.57,1213.83 1075.16,1213.83 1075.75,1213.83 1076.33,1213.83 1076.92,1213.83 1077.51,1213.83 1078.09,1213.83 1078.68,1213.83 1079.26,1213.83 1079.85,1213.83 1080.44,1213.83 1081.02,1213.83 1081.61,1213.83 1082.2,1213.83 1082.78,1213.83 1083.37,1213.83 1083.96,1213.83 1084.54,1213.83 1085.13,1213.83 1085.72,1213.83 1086.3,1213.83 1086.89,1213.83 1087.47,1213.83 1088.06,1213.83 1088.65,1213.83 1089.23,1213.83 1089.82,1213.83 1090.41,1213.83 1090.99,1213.83 1091.58,1213.83 1092.17,1213.83 1092.75,1213.83 1093.34,1213.83 1093.93,1213.83 1094.51,1213.83 1095.1,1213.83 1095.68,1213.83 1096.27,1213.83 1096.86,1213.83 1097.44,1213.83 1098.03,1213.83 1098.62,1213.83 1099.2,1213.83 1099.79,1213.83 1100.38,1213.83 1100.96,1213.83 1101.55,1213.83 1102.14,1213.83 1102.72,1213.83 1103.31,1213.83 1103.89,1213.83 1104.48,1213.83 1105.07,1213.83 1105.65,1213.83 1106.24,1213.83 1106.83,1213.83 1107.41,1213.83 1108,1213.83 1108.59,1213.83 1109.17,1213.83 1109.76,1213.83 1110.34,1213.83 1110.93,1213.83 1111.52,1213.83 1112.1,1213.83 1112.69,1213.83 1113.28,1213.83 1113.86,1213.83 1114.45,1213.83 1115.04,1213.83 1115.62,1213.83 1116.21,1213.83 1116.8,1213.83 1117.38,1213.83 1117.97,1213.83 1118.55,1213.83 1119.14,1213.83 1119.73,1213.83 1120.31,1213.83 1120.9,1213.83 1121.49,1213.83 1122.07,1213.83 1122.66,1213.83 1123.25,1213.83 1123.83,1213.83 1124.42,1213.83 1125.01,1213.83 1125.59,1213.83 1126.18,1213.83 1126.76,1213.83 1127.35,1213.83 1127.94,1213.83 1128.52,1213.83 1129.11,1213.83 1129.7,1213.83 1130.28,1213.83 1130.87,1213.83 1131.46,1213.83 1132.04,1213.83 1132.63,1213.83 1133.21,1213.83 1133.8,1213.83 1134.39,1213.83 1134.97,1213.83 1135.56,1213.83 1136.15,1213.83 1136.73,1213.83 1137.32,1213.83 1137.91,1213.83 1138.49,1213.83 1139.08,1213.83 1139.67,1213.83 1140.25,1213.83 1140.84,1213.83 1141.42,1213.83 1142.01,1213.83 1142.6,1213.83 1143.18,1213.83 1143.77,1213.83 1144.36,1213.83 1144.94,1213.83 1145.53,1213.83 1146.12,1213.83 1146.7,1213.83 1147.29,1213.83 1147.88,1213.83 1148.46,1213.83 1149.05,1213.83 1149.63,1213.83 1150.22,1213.83 1150.81,1213.83 1151.39,1213.83 1151.98,1213.83 1152.57,1213.83 1153.15,1213.83 1153.74,1213.83 1154.33,1213.83 1154.91,1213.83 1155.5,1213.83 1156.09,1213.83 1156.67,1213.83 1157.26,1213.83 1157.84,1213.83 1158.43,1213.83 1159.02,1213.83 1159.6,1213.83 1160.19,1213.83 1160.78,1213.83 1161.36,1213.83 1161.95,1213.83 1162.54,1213.83 1163.12,1213.83 1163.71,1213.83 1164.29,1213.83 1164.88,1213.83 1165.47,1213.83 1166.05,1213.83 1166.64,1213.83 1167.23,1213.83 1167.81,1213.83 1168.4,1213.83 1168.99,1213.83 1169.57,1213.83 1170.16,1213.83 1170.75,1213.83 1171.33,1213.83 1171.92,1213.83 1172.5,1213.83 1173.09,1213.83 1173.68,1213.83 1174.26,1213.83 1174.85,1213.83 1175.44,1213.83 1176.02,1213.83 1176.61,1213.83 1177.2,1213.83 1177.78,1213.83 1178.37,1213.83 1178.96,1213.83 1179.54,1213.83 1180.13,1213.83 1180.71,1213.83 1181.3,1213.83 1181.89,1213.83 1182.47,1213.83 1183.06,1213.83 1183.65,1213.83 1184.23,1213.83 1184.82,1213.83 1185.41,1213.83 1185.99,1213.83 1186.58,1213.83 1187.16,1213.83 1187.75,1213.83 1188.34,1213.83 1188.92,1213.83 1189.51,1213.83 1190.1,1213.83 1190.68,1213.83 1191.27,1213.83 1191.86,1213.83 1192.44,1213.83 1193.03,1213.83 1193.62,1213.83 1194.2,1213.83 1194.79,1213.83 1195.37,1213.83 1195.96,1213.83 1196.55,1213.83 1197.13,1213.83 1197.72,1213.83 1198.31,1213.83 1198.89,1213.83 1199.48,1213.83 1200.07,1213.83 1200.65,1213.83 1201.24,1213.83 1201.83,1213.83 1202.41,1213.83 1203,1213.83 1203.58,1213.83 1204.17,1213.83 1204.76,1213.83 1205.34,1213.83 1205.93,1213.83 1206.52,1213.83 1207.1,1213.83 1207.69,1213.83 1208.28,1213.83 1208.86,1213.83 1209.45,1213.83 1210.03,1213.83 1210.62,1213.83 1211.21,1213.83 1211.79,1213.83 1212.38,1213.83 1212.97,1213.83 1213.55,1213.83 1214.14,1213.83 1214.73,1213.83 1215.31,1213.83 1215.9,1213.83 1216.49,1213.83 1217.07,1213.83 1217.66,1213.83 1218.24,1213.83 1218.83,1213.83 1219.42,1213.83 1220,1213.83 1220.59,1213.83 1221.18,1213.83 1221.76,1213.83 1222.35,1213.83 1222.94,1213.83 1223.52,1213.83 1224.11,1213.83 1224.7,1213.83 1225.28,1213.83 1225.87,1213.83 1226.45,1213.83 1227.04,1213.83 1227.63,1213.83 1228.21,1213.83 1228.8,1213.83 1229.39,1213.83 1229.97,1213.83 1230.56,1213.83 1231.15,1213.83 1231.73,1213.83 1232.32,1213.83 1232.91,1213.83 1233.49,1213.83 1234.08,1213.83 1234.66,1213.83 1235.25,1213.83 1235.84,1213.83 1236.42,1213.83 1237.01,1213.83 1237.6,1213.83 1238.18,1213.83 1238.77,1213.83 1239.36,1213.83 1239.94,1213.83 1240.53,1213.83 1241.11,1213.83 1241.7,1213.83 1242.29,1213.83 1242.87,1213.83 1243.46,1213.83 1244.05,1213.83 1244.63,1213.83 1245.22,1213.83 1245.81,1213.83 1246.39,1213.83 1246.98,1213.83 1247.57,1213.83 1248.15,1213.83 1248.74,1213.83 1249.32,1213.83 1249.91,1213.83 1250.5,1213.83 1251.08,1213.83 1251.67,1213.83 1252.26,1213.83 1252.84,1213.83 1253.43,1213.83 1254.02,1213.83 1254.6,1213.83 1255.19,1213.83 1255.78,1213.83 1256.36,1213.83 1256.95,1213.83 1257.53,1213.83 1258.12,1213.83 1258.71,1213.83 1259.29,1213.83 1259.88,1213.83 1260.47,1213.83 1261.05,1213.83 1261.64,1213.83 1262.23,1213.83 1262.81,1213.83 1263.4,1213.83 1263.98,1213.83 1264.57,1213.83 1265.16,1213.83 1265.74,1213.83 1266.33,1213.83 1266.92,1213.83 1267.5,1213.83 1268.09,1213.83 1268.68,1213.83 1269.26,1213.83 1269.85,1213.83 1270.44,1213.83 1271.02,1213.83 1271.61,1213.83 1272.19,1213.83 1272.78,1213.83 1273.37,1213.83 1273.95,1213.83 1274.54,1213.83 1275.13,1213.83 1275.71,1213.83 1276.3,1213.83 1276.89,1213.83 1277.47,1213.83 1278.06,1213.83 1278.65,1213.83 1279.23,1213.83 1279.82,1213.83 1280.4,1213.83 1280.99,1213.83 1281.58,1213.83 1282.16,1213.83 1282.75,1213.83 1283.34,1213.83 1283.92,1213.83 1284.51,1213.83 1285.1,1213.83 1285.68,1213.83 1286.27,1213.83 1286.86,1213.83 1287.44,1213.83 1288.03,1213.83 1288.61,1213.83 1289.2,1213.83 1289.79,1213.83 1290.37,1213.83 1290.96,1213.83 1291.55,1213.83 1292.13,1213.83 1292.72,1213.83 1293.31,1213.83 1293.89,1213.83 1294.48,1213.83 1295.06,1213.83 1295.65,1213.83 1296.24,1213.83 1296.82,1213.83 1297.41,1213.83 1298,1213.83 1298.58,1213.83 1299.17,1213.83 1299.76,1213.83 1300.34,1213.83 1300.93,1213.83 1301.52,1213.83 1302.1,1213.83 1302.69,1213.83 1303.27,1213.83 1303.86,1213.83 1304.45,1213.83 1305.03,1213.83 1305.62,1213.83 1306.21,1213.83 1306.79,1213.83 1307.38,1213.83 1307.97,1213.83 1308.55,1213.83 1309.14,1213.83 1309.73,1213.83 1310.31,1213.83 1310.9,1213.83 1311.48,1213.83 1312.07,1213.83 1312.66,1213.83 1313.24,1213.83 1313.83,1213.83 1314.42,1213.83 1315,1213.83 1315.59,1213.83 1316.18,1213.83 1316.76,1213.83 1317.35,1213.83 1317.93,1213.83 1318.52,1213.83 1319.11,1213.83 1319.69,1213.83 1320.28,1213.83 1320.87,1213.83 1321.45,1213.83 1322.04,1213.83 1322.63,1213.83 1323.21,1213.83 1323.8,1213.83 1324.39,1213.83 1324.97,1213.83 1325.56,1213.83 1326.14,1213.83 1326.73,1213.83 1327.32,1213.83 1327.9,1213.83 1328.49,1213.83 1329.08,1213.83 1329.66,1213.83 1330.25,1213.83 1330.84,1213.83 1331.42,1213.83 1332.01,1213.83 1332.6,1213.83 1333.18,1213.83 1333.77,1213.83 1334.35,1213.83 1334.94,1213.83 1335.53,1213.83 1336.11,1213.83 1336.7,1213.83 1337.29,1213.83 1337.87,1213.83 1338.46,1213.83 1339.05,1213.83 1339.63,1213.83 1340.22,1213.83 1340.8,1213.83 1341.39,1213.83 1341.98,1213.83 1342.56,1213.83 1343.15,1213.83 1343.74,1213.83 1344.32,1213.83 1344.91,1213.83 1345.5,1213.83 1346.08,1213.83 1346.67,1213.83 1347.26,1213.83 1347.84,1213.83 1348.43,1213.83 1349.01,1213.83 1349.6,1213.83 1350.19,1213.83 1350.77,1213.83 1351.36,1213.83 1351.95,1213.83 1352.53,1213.83 1353.12,1213.83 1353.71,1213.83 1354.29,1213.83 1354.88,1213.83 1355.47,1213.83 1356.05,1213.83 1356.64,1213.83 1357.22,1213.83 1357.81,1213.83 1358.4,1213.83 1358.98,1213.83 1359.57,1213.83 1360.16,1213.83 1360.74,1213.83 1361.33,1213.83 1361.92,1213.83 1362.5,1213.83 1363.09,1213.83 1363.68,1213.83 1364.26,1213.83 1364.85,1213.83 1365.43,1213.83 1366.02,1213.83 1366.61,1213.83 1367.19,1213.83 1367.78,1213.83 1368.37,1213.83 1368.95,1213.83 1369.54,1213.83 1370.13,1213.83 1370.71,1213.83 1371.3,1213.83 1371.88,1213.83 1372.47,1213.83 1373.06,1213.83 1373.64,1213.83 1374.23,1213.83 1374.82,1213.83 1375.4,1213.83 1375.99,1213.83 1376.58,1213.83 1377.16,1213.83 1377.75,1213.83 1378.34,1213.83 1378.92,1213.83 1379.51,1213.83 1380.09,1213.83 1380.68,1213.83 1381.27,1213.83 1381.85,1213.83 1382.44,1213.83 1383.03,1213.83 1383.61,1213.83 1384.2,1213.83 1384.79,1213.83 1385.37,1213.83 1385.96,1213.83 1386.55,1213.83 1387.13,1213.83 1387.72,1213.83 1388.3,1213.83 1388.89,1213.83 1389.48,1213.83 1390.06,1213.83 1390.65,1213.83 1391.24,1213.83 1391.82,1213.83 1392.41,1213.83 1393,1213.83 1393.58,1213.83 1394.17,1213.83 1394.75,1213.83 1395.34,1213.83 1395.93,1213.83 1396.51,1213.83 1397.1,1213.83 1397.69,1213.83 1398.27,1213.83 1398.86,1213.83 1399.45,1213.83 1400.03,1213.83 1400.62,1213.83 1401.21,1213.83 1401.79,1213.83 1402.38,1213.83 1402.96,1213.83 1403.55,1213.83 1404.14,1213.83 1404.72,1213.83 1405.31,1213.83 1405.9,1213.83 1406.48,1213.83 1407.07,1213.83 1407.66,1213.83 1408.24,1213.83 1408.83,1213.83 1409.42,1213.83 1410,1213.83 1410.59,1213.83 1411.17,1213.83 1411.76,1213.83 1412.35,1213.83 1412.93,1213.83 1413.52,1213.83 1414.11,1213.83 1414.69,1213.83 1415.28,1213.83 1415.87,1213.83 1416.45,1213.83 1417.04,1213.83 1417.63,1213.83 1418.21,1213.83 1418.8,1213.83 1419.38,1213.83 1419.97,1213.83 1420.56,1213.83 1421.14,1213.83 1421.73,1213.83 1422.32,1213.83 1422.9,1213.83 1423.49,1213.83 1424.08,1213.83 1424.66,1213.83 1425.25,1213.83 1425.83,1213.83 1426.42,1213.83 1427.01,1213.83 1427.59,1213.83 1428.18,1213.83 1428.77,1213.83 1429.35,1213.83 1429.94,1213.83 1430.53,1213.83 1431.11,1213.83 1431.7,1213.83 1432.29,1213.83 1432.87,1213.83 1433.46,1213.83 1434.04,1213.83 1434.63,1213.83 1435.22,1213.83 1435.8,1213.83 1436.39,1213.83 1436.98,1213.83 1437.56,1213.83 1438.15,1213.83 1438.74,1213.83 1439.32,1213.83 1439.91,1213.83 1440.5,1213.83 1441.08,1213.83 1441.67,1213.83 1442.25,1213.83 1442.84,1213.83 1443.43,1213.83 1444.01,1213.83 1444.6,1213.83 1445.19,1213.83 1445.77,1213.83 1446.36,1213.83 1446.95,1213.83 1447.53,1213.83 1448.12,1213.83 1448.7,1213.83 1449.29,1213.83 1449.88,1213.83 1450.46,1213.83 1451.05,1213.83 1451.64,1213.83 1452.22,1213.83 1452.81,1213.83 1453.4,1213.83 1453.98,1213.83 1454.57,1213.83 1455.16,1213.83 1455.74,1213.83 1456.33,1213.83 1456.91,1213.83 1457.5,1213.83 1458.09,1213.83 1458.67,1213.83 1459.26,1213.83 1459.85,1213.83 1460.43,1213.83 1461.02,1213.83 1461.61,1213.83 1462.19,1213.83 1462.78,1213.83 1463.37,1213.83 1463.95,1213.83 1464.54,1213.83 1465.12,1213.83 1465.71,1213.83 1466.3,1213.83 1466.88,1213.83 1467.47,1213.83 1468.06,1213.83 1468.64,1213.83 1469.23,1213.83 1469.82,1213.83 1470.4,1213.83 1470.99,1213.83 1471.57,1213.83 1472.16,1213.83 1472.75,1213.83 1473.33,1213.83 1473.92,1213.83 1474.51,1213.83 1475.09,1213.83 1475.68,1213.83 1476.27,1213.83 1476.85,1213.83 1477.44,1213.83 1478.03,1213.83 1478.61,1213.83 1479.2,1213.83 1479.78,1213.83 1480.37,1213.83 1480.96,1213.83 1481.54,1213.83 1482.13,1213.83 1482.72,1213.83 1483.3,1213.83 1483.89,1213.83 1484.48,1213.83 1485.06,1213.83 1485.65,1213.83 1486.24,1213.83 1486.82,1213.83 1487.41,1213.83 1487.99,1213.83 1488.58,1213.83 1489.17,1213.83 1489.75,1213.83 1490.34,1213.83 1490.93,1213.83 1491.51,1213.83 1492.1,1213.83 1492.69,1213.83 1493.27,1213.83 1493.86,1213.83 1494.45,1213.83 1495.03,1213.83 1495.62,1213.83 1496.2,1213.83 1496.79,1213.83 1497.38,1213.83 1497.96,1213.83 1498.55,1213.83 1499.14,1213.83 1499.72,1213.83 1500.31,1213.83 1500.9,1213.83 1501.48,1213.83 1502.07,1213.83 1502.65,1213.83 1503.24,1213.83 1503.83,1213.83 1504.41,1213.83 1505,1213.83 1505.59,1213.83 1506.17,1213.83 1506.76,1213.83 1507.35,1213.83 1507.93,1213.83 1508.52,1213.83 1509.11,1213.83 1509.69,1213.83 1510.28,1213.83 1510.86,1213.83 1511.45,1213.83 1512.04,1213.83 1512.62,1213.83 1513.21,1213.83 1513.8,1213.83 1514.38,1213.83 1514.97,1213.83 1515.56,1213.83 1516.14,1213.83 1516.73,1213.83 1517.32,1213.83 1517.9,1213.83 1518.49,1213.83 1519.07,1213.83 1519.66,1213.83 1520.25,1213.83 1520.83,1213.83 1521.42,1213.83 1522.01,1213.83 1522.59,1213.83 1523.18,1213.83 1523.77,1213.83 1524.35,1213.83 1524.94,1213.83 1525.52,1213.83 1526.11,1213.83 1526.7,1213.83 1527.28,1213.83 1527.87,1213.83 1528.46,1213.83 1529.04,1213.83 1529.63,1213.83 1530.22,1213.83 1530.8,1213.83 1531.39,1213.83 1531.98,1213.83 1532.56,1213.83 1533.15,1213.83 1533.73,1213.83 1534.32,1213.83 1534.91,1213.83 1535.49,1213.83 1536.08,1213.83 1536.67,1213.83 1537.25,1213.83 1537.84,1213.83 1538.43,1213.83 1539.01,1213.83 1539.6,1213.83 1540.19,1213.83 1540.77,1213.83 1541.36,1213.83 1541.94,1213.83 1542.53,1213.83 1543.12,1213.83 1543.7,1213.83 1544.29,1213.83 1544.88,1213.83 1545.46,1213.83 1546.05,1213.83 1546.64,1213.83 1547.22,1213.83 1547.81,1213.83 1548.4,1213.83 1548.98,1213.83 1549.57,1213.83 1550.15,1213.83 1550.74,1213.83 1551.33,1213.83 1551.91,1213.83 1552.5,1213.83 1553.09,1213.83 1553.67,1213.83 1554.26,1213.83 1554.85,1213.83 1555.43,1213.83 1556.02,1213.83 1556.6,1213.83 1557.19,1213.83 1557.78,1213.83 1558.36,1213.83 1558.95,1213.83 1559.54,1213.83 1560.12,1213.83 1560.71,1213.83 1561.3,1213.83 1561.88,1213.83 1562.47,1213.83 1563.06,1213.83 1563.64,1213.83 1564.23,1213.83 1564.81,1213.83 1565.4,1213.83 1565.99,1213.83 1566.57,1213.83 1567.16,1213.83 1567.75,1213.83 1568.33,1213.83 1568.92,1213.83 1569.51,1213.83 1570.09,1213.83 1570.68,1213.83 1571.27,1213.83 1571.85,1213.83 1572.44,1213.83 1573.02,1213.83 1573.61,1213.83 1574.2,1213.83 1574.78,1213.83 1575.37,1213.83 1575.96,1213.83 1576.54,1213.83 1577.13,1213.83 1577.72,1213.83 1578.3,1213.83 1578.89,1213.83 1579.47,1213.83 1580.06,1213.83 1580.65,1213.83 1581.23,1213.83 1581.82,1213.83 1582.41,1213.83 1582.99,1213.83 1583.58,1213.83 1584.17,1213.83 1584.75,1213.83 1585.34,1213.83 1585.93,1213.83 1586.51,1213.83 1587.1,1213.83 1587.68,1213.83 1588.27,1213.83 1588.86,1213.83 1589.44,1213.83 1590.03,1213.83 1590.62,1213.83 1591.2,1213.83 1591.79,1213.83 1592.38,1213.83 1592.96,1213.83 1593.55,1213.83 1594.14,1213.83 1594.72,1213.83 1595.31,1213.83 1595.89,1213.83 1596.48,1213.83 1597.07,1213.83 1597.65,1213.83 1598.24,1213.83 1598.83,1213.83 1599.41,1213.83 1600,1213.83 1600.59,1213.83 1601.17,1213.83 1601.76,1213.83 1602.34,1213.83 1602.93,1213.83 1603.52,1213.83 1604.1,1213.83 1604.69,1213.83 1605.28,1213.83 1605.86,1213.83 1606.45,1213.83 1607.04,1213.83 1607.62,1213.83 1608.21,1213.83 1608.8,1213.83 1609.38,1213.83 1609.97,1213.83 1610.55,1213.83 1611.14,1213.83 1611.73,1213.83 1612.31,1213.83 1612.9,1213.83 1613.49,1213.83 1614.07,1213.83 1614.66,1213.83 1615.25,1213.83 1615.83,1213.83 1616.42,1213.83 1617.01,1213.83 1617.59,1213.83 1618.18,1213.83 1618.76,1213.83 1619.35,1213.83 1619.94,1213.83 1620.52,1213.83 1621.11,1213.83 1621.7,1213.83 1622.28,1213.83 1622.87,1213.83 1623.46,1213.83 1624.04,1213.83 1624.63,1213.83 1625.22,1213.83 1625.8,1213.83 1626.39,1213.83 1626.97,1213.83 1627.56,1213.83 1628.15,1213.83 1628.73,1213.83 1629.32,1213.83 1629.91,1213.83 1630.49,1213.83 1631.08,1213.83 1631.67,1213.83 1632.25,1213.83 1632.84,1213.83 1633.42,1213.83 1634.01,1213.83 1634.6,1213.83 1635.18,1213.83 1635.77,1213.83 1636.36,1213.83 1636.94,1213.83 1637.53,1213.83 1638.12,1213.83 1638.7,1213.83 1639.29,1213.83 1639.88,1213.83 1640.46,1213.83 1641.05,1213.83 1641.63,1213.83 1642.22,1213.83 1642.81,1213.83 1643.39,1213.83 1643.98,1213.83 1644.57,1213.83 1645.15,1213.83 1645.74,1213.83 1646.33,1213.83 1646.91,1213.83 1647.5,1213.83 1648.09,1213.83 1648.67,1213.83 1649.26,1213.83 1649.84,1213.83 1650.43,1213.83 1651.02,1213.83 1651.6,1213.83 1652.19,1213.83 1652.78,1213.83 1653.36,1213.83 1653.95,1213.83 1654.54,1213.83 1655.12,1213.83 1655.71,1213.83 1656.29,1213.83 1656.88,1213.83 1657.47,1213.83 1658.05,1213.83 1658.64,1213.83 1659.23,1213.83 1659.81,1213.83 1660.4,1213.83 1660.99,1213.83 1661.57,1213.83 1662.16,1213.83 1662.75,1213.83 1663.33,1213.83 1663.92,1213.83 1664.5,1213.83 1665.09,1213.83 1665.68,1213.83 1666.26,1213.83 1666.85,1213.83 1667.44,1213.83 1668.02,1213.83 1668.61,1213.83 1669.2,1213.83 1669.78,1213.83 1670.37,1213.83 1670.96,1213.83 1671.54,1213.83 1672.13,1213.83 1672.71,1213.83 1673.3,1213.83 1673.89,1213.83 1674.47,1213.83 1675.06,1213.83 1675.65,1213.83 1676.23,1213.83 1676.82,1213.83 1677.41,1213.83 1677.99,1213.83 1678.58,1213.83 1679.17,1213.83 1679.75,1213.83 1680.34,1213.83 1680.92,1213.83 1681.51,1213.83 1682.1,1213.83 1682.68,1213.83 1683.27,1213.83 1683.86,1213.83 1684.44,1213.83 1685.03,1213.83 1685.62,1213.83 1686.2,1213.83 1686.79,1213.83 1687.37,1213.83 1687.96,1213.83 1688.55,1213.83 1689.13,1213.83 1689.72,1213.83 1690.31,1213.83 1690.89,1213.83 1691.48,1213.83 1692.07,1213.83 1692.65,1213.83 1693.24,1213.83 1693.83,1213.83 1694.41,1213.83 1695,1213.83 1695.58,1213.83 1696.17,1213.83 1696.76,1213.83 1697.34,1213.83 1697.93,1213.83 1698.52,1213.83 1699.1,1213.83 1699.69,1213.83 1700.28,1213.83 1700.86,1213.83 1701.45,1213.83 1702.04,1213.83 1702.62,1213.83 1703.21,1213.83 1703.79,1213.83 1704.38,1213.83 1704.97,1213.83 1705.55,1213.83 1706.14,1213.83 1706.73,1213.83 1707.31,1213.83 1707.9,1213.83 1708.49,1213.83 1709.07,1213.83 1709.66,1213.83 1710.24,1213.83 1710.83,1213.83 1711.42,1213.83 1712,1213.83 1712.59,1213.83 1713.18,1213.83 1713.76,1213.83 1714.35,1213.83 1714.94,1213.83 1715.52,1213.83 1716.11,1213.83 1716.7,1213.83 1717.28,1213.83 1717.87,1213.83 1718.45,1213.83 1719.04,1213.83 1719.63,1213.83 1720.21,1213.83 1720.8,1213.83 1721.39,1213.83 1721.97,1213.83 1722.56,1213.83 1723.15,1213.83 1723.73,1213.83 1724.32,1213.83 1724.91,1213.83 1725.49,1213.83 1726.08,1213.83 1726.66,1213.83 1727.25,1213.83 1727.84,1213.83 1728.42,1213.83 1729.01,1213.83 1729.6,1213.83 1730.18,1213.83 1730.77,1213.83 1731.36,1213.83 1731.94,1213.83 1732.53,1213.83 1733.11,1213.83 1733.7,1213.83 1734.29,1213.83 1734.87,1213.83 1735.46,1213.83 1736.05,1213.83 1736.63,1213.83 1737.22,1213.83 1737.81,1213.83 1738.39,1213.83 1738.98,1213.83 1739.57,1213.83 1740.15,1213.83 1740.74,1213.83 1741.32,1213.83 1741.91,1213.83 1742.5,1213.83 1743.08,1213.83 1743.67,1213.83 1744.26,1213.83 1744.84,1213.83 1745.43,1213.83 1746.02,1213.83 1746.6,1213.83 1747.19,1213.83 1747.78,1213.83 1748.36,1213.83 1748.95,1213.83 1749.53,1213.83 1750.12,1213.83 1750.71,1213.83 1751.29,1213.83 1751.88,1213.83 1752.47,1213.83 1753.05,1213.83 1753.64,1213.83 1754.23,1213.83 1754.81,1213.83 1755.4,1213.83 1755.99,1213.83 1756.57,1213.83 1757.16,1213.83 1757.74,1213.83 1758.33,1213.83 1758.92,1213.83 1759.5,1213.83 1760.09,1213.83 1760.68,1213.83 1761.26,1213.83 1761.85,1213.83 1762.44,1213.83 1763.02,1213.83 1763.61,1213.83 1764.19,1213.83 1764.78,1213.83 1765.37,1213.83 1765.95,1213.83 1766.54,1213.83 1767.13,1213.83 1767.71,1213.83 1768.3,1213.83 1768.89,1213.83 1769.47,1213.83 1770.06,1213.83 1770.65,1213.83 1771.23,1213.83 1771.82,1213.83 1772.4,1213.83 1772.99,1213.83 1773.58,1213.83 1774.16,1213.83 1774.75,1213.83 1775.34,1213.83 1775.92,1213.83 1776.51,1213.83 1777.1,1213.83 1777.68,1213.83 1778.27,1213.83 1778.86,1213.83 1779.44,1213.83 1780.03,1213.83 1780.61,1213.83 1781.2,1213.83 1781.79,1213.83 1782.37,1213.83 1782.96,1213.83 1783.55,1213.83 1784.13,1213.83 1784.72,1213.83 1785.31,1213.83 1785.89,1213.83 1786.48,1213.83 1787.06,1213.83 1787.65,1213.83 1788.24,1213.83 1788.82,1213.83 1789.41,1213.83 1790,1213.83 1790.58,1213.83 1791.17,1213.83 1791.76,1213.83 1792.34,1213.83 1792.93,1213.83 1793.52,1213.83 1794.1,1213.83 1794.69,1213.83 1795.27,1213.83 1795.86,1213.83 1796.45,1213.83 1797.03,1213.83 1797.62,1213.83 1798.21,1213.83 1798.79,1213.83 1799.38,1213.83 1799.97,1213.83 1800.55,1213.83 1801.14,1213.83 1801.73,1213.83 1802.31,1213.83 1802.9,1213.83 1803.48,1213.83 1804.07,1213.83 1804.66,1213.83 1805.24,1213.83 1805.83,1213.83 1806.42,1213.83 1807,1213.83 1807.59,1213.83 1808.18,1213.83 1808.76,1213.83 1809.35,1213.83 1809.94,1213.83 1810.52,1213.83 1811.11,1213.83 1811.69,1213.83 1812.28,1213.83 1812.87,1213.83 1813.45,1213.83 1814.04,1213.83 1814.63,1213.83 1815.21,1213.83 1815.8,1213.83 1816.39,1213.83 1816.97,1213.83 1817.56,1213.83 1818.14,1213.83 1818.73,1213.83 1819.32,1213.83 1819.9,1213.83 1820.49,1213.83 1821.08,1213.83 1821.66,1213.83 1822.25,1213.83 1822.84,1213.83 1823.42,1213.83 1824.01,1213.83 1824.6,1213.83 1825.18,1213.83 1825.77,1213.83 1826.35,1213.83 1826.94,1213.83 1827.53,1213.83 1828.11,1213.83 1828.7,1213.83 1829.29,1213.83 1829.87,1213.83 1830.46,1213.83 1831.05,1213.83 1831.63,1213.83 1832.22,1213.83 1832.81,1213.83 1833.39,1213.83 1833.98,1213.83 1834.56,1213.83 1835.15,1213.83 1835.74,1213.83 1836.32,1213.83 1836.91,1213.83 1837.5,1213.83 1838.08,1213.83 1838.67,1213.83 1839.26,1213.83 1839.84,1213.83 1840.43,1213.83 1841.01,1213.83 1841.6,1213.83 1842.19,1213.83 1842.77,1213.83 1843.36,1213.83 1843.95,1213.83 1844.53,1213.83 1845.12,1213.83 1845.71,1213.83 1846.29,1213.83 1846.88,1213.83 1847.47,1213.83 1848.05,1213.83 1848.64,1213.83 1849.22,1213.83 1849.81,1213.83 1850.4,1213.83 1850.98,1213.83 1851.57,1213.83 1852.16,1213.83 1852.74,1213.83 1853.33,1213.83 1853.92,1213.83 1854.5,1213.83 1855.09,1213.83 1855.68,1213.83 1856.26,1213.83 1856.85,1213.83 1857.43,1213.83 1858.02,1213.83 1858.61,1213.83 1859.19,1213.83 1859.78,1213.83 1860.37,1213.83 1860.95,1213.83 1861.54,1213.83 1862.13,1213.83 1862.71,1213.83 1863.3,1213.83 1863.88,1213.83 1864.47,1213.83 1865.06,1213.83 1865.64,1213.83 1866.23,1213.83 1866.82,1213.83 1867.4,1213.83 1867.99,1213.83 1868.58,1213.83 1869.16,1213.83 1869.75,1213.83 1870.34,1213.83 1870.92,1213.83 1871.51,1213.83 1872.09,1213.83 1872.68,1213.83 1873.27,1213.83 1873.85,1213.83 1874.44,1213.83 1875.03,1213.83 1875.61,1213.83 1876.2,1213.83 1876.79,1213.83 1877.37,1213.83 1877.96,1213.83 1878.55,1213.83 1879.13,1213.83 1879.72,1213.83 1880.3,1213.83 1880.89,1213.83 1881.48,1213.83 1882.06,1213.83 1882.65,1213.83 1883.24,1213.83 1883.82,1213.83 1884.41,1213.83 1885,1213.83 1885.58,1213.83 1886.17,1213.83 1886.76,1213.83 1887.34,1213.83 1887.93,1213.83 1888.51,1213.83 1889.1,1213.83 1889.69,1213.83 1890.27,1213.83 1890.86,1213.83 1891.45,1213.83 1892.03,1213.83 1892.62,1213.83 1893.21,1213.83 1893.79,1213.83 1894.38,1213.83 1894.96,1213.83 1895.55,1213.83 1896.14,1213.83 1896.72,1213.83 1897.31,1213.83 1897.9,1213.83 1898.48,1213.83 1899.07,1213.83 1899.66,1213.83 1900.24,1213.83 1900.83,1213.83 1901.42,1213.83 1902,1213.83 1902.59,1213.83 1903.17,1213.83 1903.76,1213.83 1904.35,1213.83 1904.93,1213.83 1905.52,1213.83 1906.11,1213.83 1906.69,1213.83 1907.28,1213.83 1907.87,1213.83 1908.45,1213.83 1909.04,1213.83 1909.63,1213.83 1910.21,1213.83 1910.8,1213.83 1911.38,1213.83 1911.97,1213.83 1912.56,1213.83 1913.14,1213.83 1913.73,1213.83 1914.32,1213.83 1914.9,1213.83 1915.49,1213.83 1916.08,1213.83 1916.66,1213.83 1917.25,1213.83 1917.83,1213.83 1918.42,1213.83 1919.01,1213.83 1919.59,1213.83 1920.18,1213.83 1920.77,1213.83 1921.35,1213.83 1921.94,1213.83 1922.53,1213.83 1923.11,1213.83 1923.7,1213.83 1924.29,1213.83 1924.87,1213.83 1925.46,1213.83 1926.04,1213.83 1926.63,1213.83 1927.22,1213.83 1927.8,1213.83 1928.39,1213.83 1928.98,1213.83 1929.56,1213.83 1930.15,1213.83 1930.74,1213.83 1931.32,1213.83 1931.91,1213.83 1932.5,1213.83 1933.08,1213.83 1933.67,1213.83 1934.25,1213.83 1934.84,1213.83 1935.43,1213.83 1936.01,1213.83 1936.6,1213.83 1937.19,1213.83 1937.77,1213.83 1938.36,1213.83 1938.95,1213.83 1939.53,1213.83 1940.12,1213.83 1940.71,1213.83 1941.29,1213.83 1941.88,1213.83 1942.46,1213.83 1943.05,1213.83 1943.64,1213.83 1944.22,1213.83 1944.81,1213.83 1945.4,1213.83 1945.98,1213.83 1946.57,1213.83 1947.16,1213.83 1947.74,1213.83 1948.33,1213.83 1948.91,1213.83 1949.5,1213.83 1950.09,1213.83 1950.67,1213.83 1951.26,1213.83 1951.85,1213.83 1952.43,1213.83 1953.02,1213.83 1953.61,1213.83 1954.19,1213.83 1954.78,1213.83 1955.37,1213.83 1955.95,1213.83 1956.54,1213.83 1957.12,1213.83 1957.71,1213.83 1958.3,1213.83 1958.88,1213.83 1959.47,1213.83 1960.06,1213.83 1960.64,1213.83 1961.23,1213.83 1961.82,1213.83 1962.4,1213.83 1962.99,1213.83 1963.58,1213.83 1964.16,1213.83 1964.75,1213.83 1965.33,1213.83 1965.92,1213.83 1966.51,1213.83 1967.09,1213.83 1967.68,1213.83 1968.27,1213.83 1968.85,1213.83 1969.44,1213.83 1970.03,1213.83 1970.61,1213.83 1971.2,1213.83 1971.78,1213.83 1972.37,1213.83 1972.96,1213.83 1973.54,1213.83 1974.13,1213.83 1974.72,1213.83 1975.3,1213.83 1975.89,1213.83 1976.48,1213.83 1977.06,1213.83 1977.65,1213.83 1978.24,1213.83 1978.82,1213.83 1979.41,1213.83 1979.99,1213.83 1980.58,1213.83 1981.17,1213.83 1981.75,1213.83 1982.34,1213.83 1982.93,1213.83 1983.51,1213.83 1984.1,1213.83 1984.69,1213.83 1985.27,1213.83 1985.86,1213.83 1986.45,1213.83 1987.03,1213.83 1987.62,1213.83 1988.2,1213.83 1988.79,1213.83 1989.38,1213.83 1989.96,1213.83 1990.55,1213.83 1991.14,1213.83 1991.72,1213.83 1992.31,1213.83 1992.9,1213.83 1993.48,1213.83 1994.07,1213.83 1994.65,1213.83 1995.24,1213.83 1995.83,1213.83 1996.41,1213.83 1997,1213.83 1997.59,1213.83 1998.17,1213.83 1998.76,1213.83 1999.35,1213.83 1999.93,1213.83 2000.52,1213.83 2001.11,1213.83 2001.69,1213.83 2002.28,1213.83 2002.86,1213.83 2003.45,1213.83 2004.04,1213.83 2004.62,1213.83 2005.21,1213.83 2005.8,1213.83 2006.38,1213.83 2006.97,1213.83 2007.56,1213.83 2008.14,1213.83 2008.73,1213.83 2009.32,1213.83 2009.9,1213.83 2010.49,1213.83 2011.07,1213.83 2011.66,1213.83 2012.25,1213.83 2012.83,1213.83 2013.42,1213.83 2014.01,1213.83 2014.59,1213.83 2015.18,1213.83 2015.77,1213.83 2016.35,1213.83 2016.94,1213.83 2017.53,1213.83 2018.11,1213.83 2018.7,1213.83 2019.28,1213.83 2019.87,1213.83 2020.46,1213.83 2021.04,1213.83 2021.63,1213.83 2022.22,1213.83 2022.8,1213.83 2023.39,1213.83 2023.98,1213.83 2024.56,1213.83 2025.15,1213.83 2025.73,1213.83 2026.32,1213.83 2026.91,1213.83 2027.49,1213.83 2028.08,1213.83 2028.67,1213.83 2029.25,1213.83 2029.84,1213.83 2030.43,1213.83 2031.01,1213.83 2031.6,1213.83 2032.19,1213.83 2032.77,1213.83 2033.36,1213.83 2033.94,1213.83 2034.53,1213.83 2035.12,1213.83 2035.7,1213.83 2036.29,1213.83 2036.88,1213.83 2037.46,1213.83 2038.05,1213.83 2038.64,1213.83 2039.22,1213.83 2039.81,1213.83 2040.4,1213.83 2040.98,1213.83 2041.57,1213.83 2042.15,1213.83 2042.74,1213.83 2043.33,1213.83 2043.91,1213.83 2044.5,1213.83 2045.09,1213.83 2045.67,1213.83 2046.26,1213.83 2046.85,1213.83 2047.43,1213.83 2048.02,1213.83 2048.6,1213.83 2049.19,1213.83 2049.78,1213.83 2050.36,1213.83 2050.95,1213.83 2051.54,1213.83 2052.12,1213.83 2052.71,1213.83 2053.3,1213.83 2053.88,1213.83 2054.47,1213.83 2055.06,1213.83 2055.64,1213.83 2056.23,1213.83 2056.81,1213.83 2057.4,1213.83 2057.99,1213.83 2058.57,1213.83 2059.16,1213.83 2059.75,1213.83 2060.33,1213.83 2060.92,1213.83 2061.51,1213.83 2062.09,1213.83 2062.68,1213.83 2063.27,1213.83 2063.85,1213.83 2064.44,1213.83 2065.02,1213.83 2065.61,1213.83 2066.2,1213.83 2066.78,1213.83 2067.37,1213.83 2067.96,1213.83 2068.54,1213.83 2069.13,1213.83 2069.72,1213.83 2070.3,1213.83 2070.89,1213.83 2071.48,1213.83 2072.06,1213.83 2072.65,1213.83 2073.23,1213.83 2073.82,1213.83 2074.41,1213.83 2074.99,1213.83 2075.58,1213.83 2076.17,1213.83 2076.75,1213.83 2077.34,1213.83 2077.93,1213.83 2078.51,1213.83 2079.1,1213.83 2079.68,1213.83 2080.27,1213.83 2080.86,1213.83 2081.44,1213.83 2082.03,1213.83 2082.62,1213.83 2083.2,1213.83 2083.79,1213.83 2084.38,1213.83 2084.96,1213.83 2085.55,1213.83 2086.14,1213.83 2086.72,1213.83 2087.31,1213.83 2087.89,1213.83 2088.48,1213.83 2089.07,1213.83 2089.65,1213.83 2090.24,1213.83 2090.83,1213.83 2091.41,1213.83 2092,1213.83 2092.59,1213.83 2093.17,1213.83 2093.76,1213.83 2094.35,1213.83 2094.93,1213.83 2095.52,1213.83 2096.1,1213.83 2096.69,1213.83 2097.28,1213.83 2097.86,1213.83 2098.45,1213.83 2099.04,1213.83 2099.62,1213.83 2100.21,1213.83 2100.8,1213.83 2101.38,1213.83 2101.97,1213.83 2102.55,1213.83 2103.14,1213.83 2103.73,1213.83 2104.31,1213.83 2104.9,1213.83 2105.49,1213.83 2106.07,1213.83 2106.66,1213.83 2107.25,1213.83 2107.83,1213.83 2108.42,1213.83 2109.01,1213.83 2109.59,1213.83 2110.18,1213.83 2110.76,1213.83 2111.35,1213.83 2111.94,1213.83 2112.52,1213.83 2113.11,1213.83 2113.7,1213.83 2114.28,1213.83 2114.87,1213.83 2115.46,1213.83 2116.04,1213.83 2116.63,1213.83 2117.22,1213.83 2117.8,1213.83 2118.39,1213.83 2118.97,1213.83 2119.56,1213.83 2120.15,1213.83 2120.73,1213.83 2121.32,1213.83 2121.91,1213.83 2122.49,1213.83 2123.08,1213.83 2123.67,1213.83 2124.25,1213.83 2124.84,1213.83 2125.42,1213.83 2126.01,1213.83 2126.6,1213.83 2127.18,1213.83 2127.77,1213.83 2128.36,1213.83 2128.94,1213.83 2129.53,1213.83 2130.12,1213.83 2130.7,1213.83 2131.29,1213.83 2131.88,1213.83 2132.46,1213.83 2133.05,1213.83 2133.63,1213.83 2134.22,1213.83 2134.81,1213.83 2135.39,1213.83 2135.98,1213.83 2136.57,1213.83 2137.15,1213.83 2137.74,1213.83 2138.33,1213.83 2138.91,1213.83 2139.5,1213.83 2140.09,1213.83 2140.67,1213.83 2141.26,1213.83 2141.84,1213.83 2142.43,1213.83 2143.02,1213.83 2143.6,1213.83 2144.19,1213.83 2144.78,1213.83 2145.36,1213.83 2145.95,1213.83 2146.54,1213.83 2147.12,1213.83 2147.71,1213.83 2148.3,1213.83 2148.88,1213.83 2149.47,1213.83 2150.05,1213.83 2150.64,1213.83 2151.23,1213.83 2151.81,1213.83 2152.4,1213.83 2152.99,1213.83 2153.57,1213.83 2154.16,1213.83 2154.75,1213.83 2155.33,1213.83 2155.92,1213.83 2156.5,1213.83 2157.09,1213.83 2157.68,1213.83 2158.26,1213.83 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.24,1194.2 1399.03,899.083 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.8 985.439,1194.2 2158.26,1194.2 2158.26,1232.8 985.439,1232.8 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip783\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip783)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2703.73 162.673,-2533.26 163.232,-3727.67 163.792,-4799.64 164.351,-5735.33 164.91,-6655.28 165.469,-7515.56 166.029,-8257.87 166.588,-8910.17 167.147,-9521.36 167.706,-8216.45 168.266,-8002.68 168.825,-7823.45 169.384,-8384.33 169.943,-8873.48 170.503,-8665.41 171.062,-9078.09 171.621,-9455.69 172.18,-9788.97 172.74,-10079.6 173.299,-10341.8 173.858,-10567.6 174.417,-10321.5 174.977,-10482.8 175.536,-9892.72 176.095,-9359.01 176.655,-9519.98 177.214,-9654.72 177.773,-9473.64 178.332,-9304.12 178.892,-9388.27 179.451,-9441.48 180.01,-9037.45 180.569,-9074.27 181.129,-9118.55 181.688,-8732.55 182.247,-8735.66 182.806,-8733.09 183.366,-8714.82 183.925,-8538.85 184.484,-8351.46 185.043,-8175.88 185.603,-7873.48 186.162,-7829.71 186.721,-7418.03 187.28,-7369.09 187.84,-7324.31 188.399,-7262.16 188.958,-7098.65 189.517,-6929.34 190.077,-6779.75 190.636,-6450.1 191.195,-6213.76 191.754,-6149.65 192.314,-6004.15 192.873,-5787.03 193.432,-5717.52 193.991,-5444.56 194.551,-5197.06 195.11,-5135.63 195.669,-5005.67 196.228,-4875.1 196.788,-4806.03 197.347,-4675.25 197.906,-4598.12 198.465,-4477.66 199.025,-4402.08 199.584,-4274.16 200.143,-4104.48 200.702,-3937.79 201.262,-3817.86 201.821,-3702.21 202.38,-3498.95 202.939,-3387.16 203.499,-3244.01 204.058,-3101.03 204.617,-3035.25 205.176,-2790.57 205.736,-2734.43 206.295,-2608.52 206.854,-2515.71 207.413,-2393.04 207.973,-2337.78 208.532,-2280.61 209.091,-2168.93 209.65,-2084.72 210.21,-1971.96 210.769,-1889.52 211.328,-1838.28 211.887,-1758.33 212.447,-1677.49 213.006,-1576.86 213.565,-1504.95 214.124,-1407.37 214.684,-1332.85 215.243,-1266.85 215.802,-1206 216.361,-1137.33 216.921,-1047.02 217.48,-954.714 218.039,-840.735 218.598,-804.634 219.158,-774.322 219.717,-690.223 220.276,-611.142 220.835,-556.066 221.395,-530.297 221.954,-481.99 222.513,-456.253 223.072,-427.64 223.632,-397.512 224.191,-289.211 224.75,-202.556 225.309,-134.92 225.869,-95.3228 226.428,-35.5666 226.987,4.01389 227.546,64.623 228.106,120.292 228.665,176.578 229.224,247.887 229.783,257.423 230.343,264.315 230.902,270.684 231.461,302.223 232.02,349.751 232.58,357.655 233.139,386.635 233.698,375.241 234.257,401.201 234.817,392.927 235.376,384.947 235.935,394.711 236.494,439.547 237.054,432.51 237.613,447.517 238.172,455.668 238.731,463.869 239.291,475.585 239.85,506.082 240.409,552.437 240.968,596.558 241.528,620.936 242.087,659.187 242.646,695.043 243.205,715.405 243.765,718.975 244.324,721.425 244.883,776.618 245.442,794.32 246.002,789.801 246.561,807.545 247.12,786.404 247.679,785.124 248.239,837.194 248.798,852.268 249.357,869.36 249.916,864.454 250.476,862.776 251.035,859.025 251.594,855.565 252.153,871.178 252.713,888.078 253.272,882.11 253.831,878.332 254.39,907.44 254.95,897.553 255.509,895.687 256.068,944.041 256.627,958.15 257.187,952.611 257.746,1015.51 258.305,1021.62 258.864,943.242 259.424,935.69 259.983,914.934 260.542,945.565 261.101,958.483 261.661,954.863 262.22,1001.5 262.779,974.242 263.338,967.896 263.898,962.268 264.457,974.726 265.016,984.466 265.575,990.843 266.135,1033.32 266.694,1041.52 267.253,1033.89 267.812,1055.33 268.372,1039.87 268.931,1049.6 269.49,1022.49 270.049,998.843 270.609,1011.36 271.168,989.386 271.727,999.056 272.286,991.156 272.846,1016.88 273.405,1023.72 273.964,1049.16 274.523,1040.37 275.083,1032.56 275.642,1022.48 276.201,1033.86 276.76,1024.54 277.32,998.602 277.879,992.26 278.438,1018.63 278.997,1032 279.557,993.468 280.116,1020.87 280.675,1018.36 281.234,1013.07 281.794,1007.03 282.353,987.111 282.912,982.727 283.471,1011.32 284.031,1006.26 284.59,998.55 285.149,996.798 285.708,991.613 286.268,1000.77 286.827,1059.07 287.386,1066.07 287.945,1056.26 288.505,1050.48 289.064,1008.32 289.623,1036.42 290.182,1063.98 290.742,1058.34 291.301,1049.91 291.86,1042.25 292.419,1040.48 292.979,1064.44 293.538,1054.14 294.097,1062.81 294.656,1072.81 295.216,1079.97 295.775,1071.66 296.334,1079.9 296.893,1099.82 297.453,1071.36 298.012,1062.71 298.571,1035.05 299.13,1030.99 299.69,1009.88 300.249,984.329 300.808,1028.92 301.368,1001.67 301.927,1030.05 302.486,1023.31 303.045,1049.42 303.605,1023.61 304.164,1030.82 304.723,1021.99 305.282,1028.5 305.842,1051.69 306.401,1057.88 306.96,1065.39 307.519,1055.26 308.079,1030 308.638,1023.37 309.197,1032.2 309.756,1024.89 310.316,1034.36 310.875,991.868 311.434,1001.4 311.993,1026.09 312.553,1016.4 313.112,990.509 313.671,1006.15 314.23,1014.71 314.79,1023.12 315.349,1000.22 315.908,994.456 316.467,989.452 317.027,999.111 317.586,978.233 318.145,956.863 318.704,938.13 319.264,932.311 319.823,942.124 320.382,922.951 320.941,920.548 321.501,900.842 322.06,897.835 322.619,891.263 323.178,921.758 323.738,904.909 324.297,887.062 324.856,903.953 325.415,901.651 325.975,862.926 326.534,844.152 327.093,842.363 327.652,875.467 328.212,891.577 328.771,888.747 329.33,883.852 329.889,878.718 330.449,880.883 331.008,929.077 331.567,924.861 332.126,917.628 332.686,913.943 333.245,877.454 333.804,894.094 334.363,904.68 334.923,916.875 335.482,896.131 336.041,908.792 336.6,938.304 337.16,932.667 337.719,909.82 338.278,921.601 338.837,935.038 339.397,898.972 339.956,911.448 340.515,907.507 341.074,904.848 341.634,914.066 342.193,893.02 342.752,909.559 343.311,872.186 343.871,853.299 344.43,866.22 344.989,913.972 345.548,875.458 346.108,888.142 346.667,903.023 347.226,899.257 347.785,910.084 348.345,906.555 348.904,905.26 349.463,868.861 350.022,898.369 350.582,905.016 351.141,918.017 351.7,928.306 352.259,939.526 352.819,933.238 353.378,928.16 353.937,922.457 354.496,918.085 355.056,877.823 355.615,860.171 356.174,872.589 356.733,871.855 357.293,884.791 357.852,912.043 358.411,910.499 358.97,889.671 359.53,882.518 360.089,913.051 360.648,890.836 361.207,919.274 361.767,930.011 362.326,937.778 362.885,931.408 363.444,940.328 364.004,929.813 364.563,924.106 365.122,916.042 365.681,909.941 366.241,920.523 366.8,925.993 367.359,917.529 367.918,908.552 368.478,886.626 369.037,915.378 369.596,892.553 370.155,901.117 370.715,881.812 371.274,877.449 371.833,857.807 372.392,853.545 372.952,898.163 373.511,889.33 374.07,929.161 374.629,921.02 375.189,916.293 375.748,910.043 376.307,919.066 376.866,883.695 377.426,878.377 377.985,857.696 378.544,808.449 379.103,790.707 379.663,820.705 380.222,835.194 380.781,881.101 381.34,823.565 381.9,869.398 382.459,863.228 383.018,875.419 383.577,870.141 384.137,865.146 384.696,891.644 385.255,853.425 385.814,864.641 386.374,874.73 386.933,868.169 387.492,848.611 388.051,832.466 388.611,813.445 389.17,842.034 389.729,842.031 390.288,838.144 390.848,832.998 391.407,848.893 391.966,845.979 392.525,841.302 393.085,822.627 393.644,838.479 394.203,801.476 394.762,786.989 395.322,738.851 395.881,706.803 396.44,728.961 396.999,749.46 397.559,748.926 398.118,750.846 398.677,783.872 399.236,815.84 399.796,844.821 400.355,825.039 400.914,839.266 401.473,839.5 402.033,836.254 402.592,833.89 403.151,830.945 403.71,812.241 404.27,794.267 404.829,779.62 405.388,799.418 405.947,767.456 406.507,781.78 407.066,781.693 407.625,795.005 408.184,779.463 408.744,780.351 409.303,798.844 409.862,762.997 410.421,779.28 410.981,776.202 411.54,791.342 412.099,787.794 412.658,786.344 413.218,770.646 413.777,769.963 414.336,738.868 414.895,726.408 415.455,727.244 416.014,728.794 416.573,763.03 417.132,745.31 417.692,732.169 418.251,736.439 418.81,771.769 419.369,767.317 419.929,763.17 420.488,764.532 421.047,780.994 421.606,796.721 422.166,797.921 422.725,814.605 423.284,827.065 423.843,807.983 424.403,753.084 424.962,733.175 425.521,736.847 426.08,706.904 426.64,728.428 427.199,732.915 427.758,737.809 428.318,755.399 428.877,756.626 429.436,757.582 429.995,819.422 430.555,815.418 431.114,845.954 431.673,861.376 432.232,856.906 432.792,853.028 433.351,863.983 433.91,858.88 434.469,886.125 435.029,864.994 435.588,844.676 436.147,839.864 436.706,851.248 437.266,845.667 437.825,870.885 438.384,843.586 438.943,872.752 439.503,865.641 440.062,858.418 440.621,851.029 441.18,844.849 441.74,890.53 442.299,837.518 442.858,864.046 443.417,875.329 443.977,849.332 444.536,827.928 445.095,788.583 445.654,825.147 446.214,820.113 446.773,768.288 447.332,749.966 447.891,767.377 448.451,764.247 449.01,763.401 449.569,728.789 450.128,732.694 450.688,748.55 451.247,733.251 451.806,733.695 452.365,732.446 452.925,716.484 453.484,749.89 454.043,747.362 454.602,761.925 455.162,778.732 455.721,761.326 456.28,761.192 456.839,789.325 457.399,836.447 457.958,830.839 458.517,844.598 459.076,824.675 459.636,820.96 460.195,815.321 460.754,824.793 461.313,822.438 461.873,820.634 462.432,832.717 462.991,813.281 463.55,823.673 464.11,804.8 464.669,787.029 465.228,781.375 465.787,744.153 466.347,762.211 466.906,731.459 467.465,733.213 468.024,765.727 468.584,749.421 469.143,734.729 469.702,721.531 470.261,736.593 470.821,749.612 471.38,766.202 471.939,748.336 472.498,729.988 473.058,731.362 473.617,714.048 474.176,682.805 474.735,701.91 475.295,706.017 475.854,755.73 476.413,738.069 476.972,705.37 477.532,690.072 478.091,705.024 478.65,721.696 479.209,740.788 479.769,692.053 480.328,692.816 480.887,743.512 481.446,659.482 482.006,664.114 482.565,701.371 483.124,721.239 483.683,720.281 484.243,702.672 484.802,721.409 485.361,740.3 485.92,737.691 486.48,723.246 487.039,725.441 487.598,710.321 488.157,762.47 488.717,759.091 489.276,809.356 489.835,741.651 490.394,758.72 490.954,736.91 491.513,699.795 492.072,685.892 492.631,690.199 493.191,708.057 493.75,709.21 494.309,709.19 494.868,710.375 495.428,729.064 495.987,748.107 496.546,746.133 497.105,726.717 497.665,727.418 498.224,721.714 498.783,708.446 499.342,695.077 499.902,711.24 500.461,711.829 501.02,712.461 501.579,726.25 502.139,726.57 502.698,714.219 503.257,762.265 503.816,761.206 504.376,761.527 504.935,789.513 505.494,772.187 506.053,753.009 506.613,767.348 507.172,794.227 507.731,792.039 508.29,773.608 508.85,755.708 509.409,723.605 509.968,709.01 510.527,710.443 511.087,728.977 511.646,729.834 512.205,744.798 512.764,792.397 513.324,837.667 513.883,781.018 514.442,763.6 515.001,775.834 515.561,724.448 516.12,706.833 516.679,690.733 517.238,657.683 517.798,628.328 518.357,648.735 518.916,653.988 519.475,656.715 520.035,639.387 520.594,678.762 521.153,680.355 521.712,684.002 522.272,686.339 522.831,705.43 523.39,719.388 523.949,705.819 524.509,708.762 525.068,709.925 525.627,708.717 526.186,711.199 526.746,715.515 527.305,733.619 527.864,717.61 528.423,730.768 528.983,728.76 529.542,711.078 530.101,712.287 530.66,713.562 531.22,712.408 531.779,713.695 532.338,715.641 532.897,701.559 533.457,684.799 534.016,699.175 534.575,702.477 535.134,704.224 535.694,718.261 536.253,683.085 536.812,685.802 537.371,720.024 537.931,722.013 538.49,735.226 539.049,718.102 539.608,716.645 540.168,715.474 540.727,714.347 541.286,719.999 541.845,719.971 542.405,722.754 542.964,737.603 543.523,738.646 544.082,723.062 544.642,711.461 545.201,725.944 545.76,709.975 546.319,746.123 546.879,761.915 547.438,758.383 547.997,756.142 548.556,786.716 549.116,778.377 549.675,757.048 550.234,758.672 550.793,688.403 551.353,723.285 551.912,721.69 552.471,756.251 553.031,740.12 553.59,735.547 554.149,716.848 554.708,716.861 555.268,700.826 555.827,669.508 556.386,676.211 556.945,646.619 557.505,666.65 558.064,667.846 558.623,687.491 559.182,691.143 559.742,740.586 560.301,758.108 560.86,755.251 561.419,733.745 561.979,715.532 562.538,697.229 563.097,697.476 563.656,699.697 564.216,684.296 564.775,685.942 565.334,705.983 565.893,707.131 566.453,719.407 567.012,739.359 567.571,741.792 568.13,772.022 568.69,748.927 569.249,776.721 569.808,795.121 570.367,771.203 570.927,753.384 571.486,763.166 572.045,726.288 572.604,736.845 573.164,752.895 573.723,751.491 574.282,714.53 574.841,729.209 575.401,773.49 575.96,739.157 576.519,751.653 577.078,782.387 577.638,810.053 578.197,757.1 578.756,755.422 579.315,798.084 579.875,810.207 580.434,789.416 580.993,751.42 581.552,717.304 582.112,732.108 582.671,765.067 583.23,778.077 583.789,758.103 584.349,722.409 584.908,689.286 585.467,641.367 586.026,657.724 586.586,724.974 587.145,737.5 587.704,706.766 588.263,705.545 588.823,700.48 589.382,719.19 589.941,733.687 590.5,713.916 591.06,680.522 591.619,696.303 592.178,711.998 592.737,692.734 593.297,696.266 593.856,709.798 594.415,678.717 594.974,710.74 595.534,693.578 596.093,696.88 596.652,679.755 597.211,729.055 597.771,744.164 598.33,740.874 598.889,769.892 599.448,749.739 600.008,745.397 600.567,744.572 601.126,758.801 601.685,788.212 602.245,783.795 602.804,777.074 603.363,825.116 603.922,852.648 604.482,826.559 605.041,851.363 605.6,840.6 606.159,830.141 606.719,822.148 607.278,829.07 607.837,819.207 608.396,799.393 608.956,777.837 609.515,757.158 610.074,754.689 610.633,750.284 611.193,764.225 611.752,758.417 612.311,736.675 612.87,731.283 613.43,698.115 613.989,680.534 614.548,650.241 615.107,635.275 615.667,640.687 616.226,676.101 616.785,675.421 617.344,674.463 617.904,679.399 618.463,667.837 619.022,638.994 619.581,689.392 620.141,689.933 620.7,707.111 621.259,738.83 621.818,734.215 622.378,731.697 622.937,730.59 623.496,712.928 624.055,696.358 624.615,713.476 625.174,709.814 625.733,708.675 626.292,709.599 626.852,706.104 627.411,709.233 627.97,707.435 628.529,725.727 629.089,738.463 629.648,720.722 630.207,715.585 630.766,696.706 631.326,698.334 631.885,665.134 632.444,668.025 633.003,667.99 633.563,687.594 634.122,723.413 634.681,719.545 635.24,705.634 635.8,671.351 636.359,706.264 636.918,705.556 637.477,721.823 638.037,769.409 638.596,748.576 639.155,767.8 639.714,751.214 640.274,732.392 640.833,729.363 641.392,678.696 641.951,662.333 642.511,643.244 643.07,599.961 643.629,605.783 644.188,615.604 644.748,601.737 645.307,559.997 645.866,584.154 646.425,555.355 646.985,548.427 647.544,604.08 648.103,576.972 648.662,581.981 649.222,590.712 649.781,578.79 650.34,590.354 650.899,559.609 651.459,567.558 652.018,570.803 652.577,560.854 653.136,572.126 653.696,595.794 654.255,600.995 654.814,623.44 655.373,610.656 655.933,616.422 656.492,618.898 657.051,590.81 657.61,611.798 658.17,616.67 658.729,617.422 659.288,624.872 659.847,627.786 660.407,628.567 660.966,665.543 661.525,640.195 662.084,676.392 662.644,712.976 663.203,700.646 663.762,716.878 664.321,699.68 664.881,667.036 665.44,669.063 665.999,638.991 666.558,643.178 667.118,613.145 667.677,601.806 668.236,608.303 668.795,600.34 669.355,605.002 669.914,577.179 670.473,618.837 671.032,595.487 671.592,591.26 672.151,598.317 672.71,616.424 673.269,619.594 673.829,623.858 674.388,665.1 674.947,669.585 675.506,673.367 676.066,676.395 676.625,663.593 677.184,682.732 677.743,746.585 678.303,732.752 678.862,746.011 679.421,745.244 679.981,744.72 680.54,756.018 681.099,737.143 681.658,753.554 682.218,734.4 682.777,715.227 683.336,734.083 683.895,749.167 684.455,779.619 685.014,758.716 685.573,802.088 686.132,796.578 686.692,811.053 687.251,787.72 687.81,783.122 688.369,823.81 688.929,781.791 689.488,758.855 690.047,771.109 690.606,865.67 691.166,841.44 691.725,802.549 692.284,811.79 692.843,819.547 693.403,846.388 693.962,869.477 694.521,828.364 695.08,788.386 695.64,814.88 696.199,843.669 696.758,815.668 697.317,810.399 697.877,788.014 698.436,814.345 698.995,789.325 699.554,765.113 700.114,730.83 700.673,745.655 701.232,740.673 701.791,685.987 702.351,703.41 702.91,703.703 703.469,704.77 704.028,737.846 704.588,718.042 705.147,698.118 705.706,699.349 706.265,715.155 706.825,745.292 707.384,708.564 707.943,707.98 708.502,705.325 709.062,702.933 709.621,733.083 710.18,748.412 710.739,697.217 711.299,684.064 711.858,684.98 712.417,667.739 712.976,639.696 713.536,628.126 714.095,633.496 714.654,604.414 715.213,593.093 715.773,598.331 716.332,602.562 716.891,609.736 717.45,612.205 718.01,600.252 718.569,622.512 719.128,593.003 719.687,598.063 720.247,601.19 720.806,589.761 721.365,626.798 721.924,644.782 722.484,645.503 723.043,628.187 723.602,629.915 724.161,695.78 724.721,694.789 725.28,710.625 725.839,692.806 726.398,709.047 726.958,690.6 727.517,673.834 728.076,694.896 728.635,676.747 729.195,663.793 729.754,655.172 730.313,655.646 730.872,653.413 731.432,672.599 731.991,675.418 732.55,678.174 733.109,683.397 733.669,699.575 734.228,684.431 734.787,700.983 735.346,746.37 735.906,726.492 736.465,728.979 737.024,712.513 737.583,713.774 738.143,711.528 738.702,694.571 739.261,711.45 739.82,723.394 740.38,740.676 740.939,738.823 741.498,705.202 742.057,704.011 742.617,721.604 743.176,718.68 743.735,731.064 744.294,759.176 744.854,738.747 745.413,785.957 745.972,764.716 746.531,759.039 747.091,754.786 747.65,721.079 748.209,720.485 748.768,723.287 749.328,752.047 749.887,765.314 750.446,744.993 751.005,745.162 751.565,705.253 752.124,706.039 752.683,704.792 753.242,671.209 753.802,687.935 754.361,704.675 754.92,703.49 755.479,717.421 756.039,703.723 756.598,719.553 757.157,749.727 757.716,711.335 758.276,727.181 758.835,739.1 759.394,736.93 759.953,748.061 760.513,710.157 761.072,743.785 761.631,755.633 762.19,766.71 762.75,746.779 763.309,726.686 763.868,709.023 764.427,707.251 764.987,673.309 765.546,640.354 766.105,627.982 766.664,616.585 767.224,621.239 767.783,654.679 768.342,655.399 768.901,676.314 769.461,646.49 770.02,696.68 770.579,694.469 771.138,708.803 771.698,739.616 772.257,739.109 772.816,741.86 773.375,739.761 773.935,752.762 774.494,748.155 775.053,762.057 775.612,757.923 776.172,751.697 776.731,730.682 777.29,676.712 777.849,692.34 778.409,673.267 778.968,674.072 779.527,689.724 780.086,671.36 780.646,672.259 781.205,671.306 781.764,672.28 782.323,657.243 782.883,642.296 783.442,693.778 784.001,678.536 784.56,682.967 785.12,685.164 785.679,687.838 786.238,705.614 786.797,737.636 787.357,718.074 787.916,683.242 788.475,666.964 789.034,653.429 789.594,640.236 790.153,611.323 790.712,615.861 791.271,605.785 791.831,622.197 792.39,623.124 792.949,626.709 793.508,614.497 794.068,647.37 794.627,649.333 795.186,638.165 795.745,607.373 796.305,596.212 796.864,634.571 797.423,624.097 797.982,610.86 798.542,602.272 799.101,609.444 799.66,581.367 800.219,555.306 800.779,577.396 801.338,583.036 801.897,622.471 802.456,642.983 803.016,633.49 803.575,636.821 804.134,640.776 804.693,643.745 805.253,613.695 805.812,618.534 806.371,642.242 806.931,646.108 807.49,632.845 808.049,651.924 808.608,641.228 809.168,677.027 809.727,696.052 810.286,712.648 810.845,730.572 811.405,758.112 811.964,742.113 812.523,725.62 813.082,708.096 813.642,706.789 814.201,723.184 814.76,688.462 815.319,707.678 815.879,692.393 816.438,690.948 816.997,707.374 817.556,705.694 818.116,705.96 818.675,754.915 819.234,722.68 819.793,721.812 820.353,717.334 820.912,751.298 821.471,746.557 822.03,745.924 822.59,823.88 823.149,816.466 823.708,810.228 824.267,800.951 824.827,811.143 825.386,803.903 825.945,797.91 826.504,795.124 827.064,773.784 827.623,769.258 828.182,729.381 828.741,663.427 829.301,667.272 829.86,665.827 830.419,682.296 830.978,649.358 831.538,682.536 832.097,714.122 832.656,745.538 833.215,742.377 833.775,739.171 834.334,718.368 834.893,713.835 835.452,729.953 836.012,747.485 836.571,756.797 837.13,750.552 837.689,729.159 838.249,745.715 838.808,744.151 839.367,721.737 839.926,735.714 840.486,716.942 841.045,698.412 841.604,699.814 842.163,649.687 842.723,636.203 843.282,641.333 843.841,656.579 844.4,641.124 844.96,592.775 845.519,601.809 846.078,606.994 846.637,623.095 847.197,643.388 847.756,645.534 848.315,615.586 848.874,638.458 849.434,625.871 849.993,612.072 850.552,600.769 851.111,588.067 851.671,591.165 852.23,592.416 852.789,584.008 853.348,621.209 853.908,623.121 854.467,641.899 855.026,646.933 855.585,648.948 856.145,633.95 856.704,638.778 857.263,629.124 857.822,616.903 858.382,621.969 858.941,654.41 859.5,653.236 860.059,656.66 860.619,662.957 861.178,663.491 861.737,646.695 862.296,648.502 862.856,701.716 863.415,717.785 863.974,718.067 864.533,703.214 865.093,688.187 865.652,719.501 866.211,767.77 866.77,762.804 867.33,759.023 867.889,753.358 868.448,750.757 869.007,743.192 869.567,740.508 870.126,675.175 870.685,725.633 871.244,740.381 871.804,737.996 872.363,704.875 872.922,685.256 873.481,655.827 874.041,642.59 874.6,660.905 875.159,644.539 875.718,630.692 876.278,631.937 876.837,636.042 877.396,674.444 877.955,658.211 878.515,644.447 879.074,630.823 879.633,633.291 880.192,637.032 880.752,620.448 881.311,607.562 881.87,602.565 882.429,620.651 882.989,625.308 883.548,644.315 884.107,631.143 884.666,666.715 885.226,652.33 885.785,653.635 886.344,672.498 886.903,671.561 887.463,654.253 888.022,621.193 888.581,640.456 889.14,624.751 889.7,627.228 890.259,629.74 890.818,667.958 891.377,652.329 891.937,635.995 892.496,656.863 893.055,644.536 893.614,628.165 894.174,644.888 894.733,646.935 895.292,651.178 895.851,669.631 896.411,641.419 896.97,626.419 897.529,643.297 898.088,661.356 898.648,634.083 899.207,636.841 899.766,656.778 900.325,655.439 900.885,647.348 901.444,682.504 902.003,680.611 902.562,666.463 903.122,663.814 903.681,649.891 904.24,636.683 904.799,640.426 905.359,629.059 905.918,663.391 906.477,678.242 907.036,682.719 907.596,684.465 908.155,716.79 908.714,716.238 909.273,731.494 909.833,744.109 910.392,741.458 910.951,753.233 911.51,699.396 912.07,697.599 912.629,696.536 913.188,696.897 913.747,744.293 914.307,738.369 914.866,733.816 915.425,746.95 915.984,729.638 916.544,760.683 917.103,739.557 917.662,752.775 918.221,747.897 918.781,744.117 919.34,727.38 919.899,742.912 920.458,708.276 921.018,711.084 921.577,708.706 922.136,722.731 922.695,702.305 923.255,686.402 923.814,651.159 924.373,689.272 924.932,689.343 925.492,668.482 926.051,688.138 926.61,719.34 927.169,637.869 927.729,639.331 928.288,642.576 928.847,646.18 929.406,631.855 929.966,651.047 930.525,635.384 931.084,654.37 931.644,639.311 932.203,673.268 932.762,657.582 933.321,692.596 933.881,675.386 934.44,693.894 934.999,708.896 935.558,737.814 936.118,703.504 936.677,684.34 937.236,666.917 937.795,684.886 938.355,683.645 938.914,682.372 939.473,680.943 940.032,680.955 940.592,682.471 941.151,679.46 941.71,710.175 942.269,690.29 942.829,688.173 943.388,686.743 943.947,689.809 944.506,671.576 945.066,671.684 945.625,705.705 946.184,722.954 946.743,723.175 947.303,705.992 947.862,705.393 948.421,718.91 948.98,716.522 949.54,716.224 950.099,692.968 950.658,677.212 951.217,708.008 951.777,706.914 952.336,706.542 952.895,690.283 953.454,680.239 954.014,664.278 954.573,682.359 955.132,699.61 955.691,699.347 956.251,681.1 956.81,714.14 957.369,713.797 957.928,710.455 958.488,743.611 959.047,740.149 959.606,771.173 960.165,813.85 960.725,821.518 961.284,833.094 961.843,823.487 962.402,802.304 962.962,765.173 963.521,746.552 964.08,740.655 964.639,741.726 965.199,768.61 965.758,715.57 966.317,696.17 966.876,709.294 967.436,690.112 967.995,675.076 968.554,661.293 969.113,678.338 969.673,660.788 970.232,660.493 970.791,662.549 971.35,700.492 971.91,699.705 972.469,701.064 973.028,716.23 973.587,743.028 974.147,720.819 974.706,748.32 975.265,742.855 975.824,736.963 976.384,735.827 976.943,683.822 977.502,651.463 978.061,652.711 978.621,652.662 979.18,651.07 979.739,668.958 980.298,636.85 980.858,643.564 981.417,629.226 981.976,646.963 982.535,681.948 983.095,653.441 983.654,622.084 984.213,642.954 984.772,660.604 985.332,658.917 985.891,663.322 986.45,663.711 987.009,664.458 987.569,665.448 988.128,713.5 988.687,712.509 989.246,711.699 989.806,676.736 990.365,692.793 990.924,675.148 991.483,659.526 992.043,691.771 992.602,673.836 993.161,707.642 993.72,645.034 994.28,629.241 994.839,584.142 995.398,603.198 995.957,624.842 996.517,644.416 997.076,645.836 997.635,635.002 998.194,640.159 998.754,645.738 999.313,615.146 999.872,666.668 1000.43,650.492 1000.99,638.053 1001.55,624.403 1002.11,630.274 1002.67,585.744 1003.23,575.35 1003.79,583.092 1004.35,585.264 1004.91,589.947 1005.46,594.355 1006.02,600.211 1006.58,623.038 1007.14,610.082 1007.7,633.215 1008.26,635.416 1008.82,638.819 1009.38,644.599 1009.94,633.169 1010.5,621.996 1011.06,643.445 1011.62,681.893 1012.18,666.005 1012.73,664.867 1013.29,668.044 1013.85,671.877 1014.41,656.109 1014.97,689.31 1015.53,704.467 1016.09,701.504 1016.65,698.043 1017.21,697.788 1017.77,695.35 1018.33,712.192 1018.89,693.261 1019.45,724.456 1020.01,734.183 1020.56,762.293 1021.12,762.333 1021.68,776.109 1022.24,769.078 1022.8,764.338 1023.36,747.133 1023.92,742.021 1024.48,739.662 1025.04,738.477 1025.6,719.401 1026.16,721.665 1026.72,736.205 1027.28,748.657 1027.83,744.901 1028.39,724.763 1028.95,721.759 1029.51,716.152 1030.07,714.381 1030.63,745.937 1031.19,743.542 1031.75,756.77 1032.31,770.762 1032.87,751.352 1033.43,797.113 1033.99,759.442 1034.55,722.718 1035.1,738.534 1035.66,732.813 1036.22,741.68 1036.78,741.159 1037.34,705.245 1037.9,685.66 1038.46,685.631 1039.02,684.563 1039.58,666.99 1040.14,683.32 1040.7,698.088 1041.26,668.24 1041.82,652.056 1042.38,637.569 1042.93,656.079 1043.49,657.539 1044.05,660.507 1044.61,645.774 1045.17,647.405 1045.73,630.278 1046.29,649.395 1046.85,635.597 1047.41,653.405 1047.97,636.852 1048.53,623.167 1049.09,625.168 1049.65,625.319 1050.2,615.168 1050.76,653.227 1051.32,653.08 1051.88,654.671 1052.44,659.056 1053,641.197 1053.56,662.631 1054.12,629.074 1054.68,650.309 1055.24,635.31 1055.8,672.996 1056.36,674.407 1056.92,643.452 1057.48,645.008 1058.03,661.61 1058.59,666.608 1059.15,715.12 1059.71,714.852 1060.27,712.308 1060.83,710.238 1061.39,712.084 1061.95,713.537 1062.51,713.452 1063.07,713.666 1063.63,709.79 1064.19,702.138 1064.75,700.604 1065.3,701.298 1065.86,716.487 1066.42,745.144 1066.98,708.757 1067.54,704.323 1068.1,719.444 1068.66,753.07 1069.22,762.846 1069.78,761.485 1070.34,789.484 1070.9,787.218 1071.46,782.777 1072.02,780.333 1072.57,759.737 1073.13,774.498 1073.69,772.55 1074.25,754.993 1074.81,754.719 1075.37,786.216 1075.93,765.719 1076.49,757.101 1077.05,749.832 1077.61,729.775 1078.17,708.597 1078.73,724.358 1079.29,770.619 1079.85,794.518 1080.4,803.68 1080.96,779.796 1081.52,762.414 1082.08,739.801 1082.64,736.237 1083.2,731.856 1083.76,714.986 1084.32,712.696 1084.88,726.43 1085.44,725.796 1086,706.884 1086.56,706.348 1087.12,706.426 1087.67,706.996 1088.23,719.231 1088.79,700.45 1089.35,709.4 1089.91,708.441 1090.47,694.158 1091.03,710.86 1091.59,691.458 1092.15,690.625 1092.71,706.246 1093.27,672.293 1093.83,670.913 1094.39,703.367 1094.94,736.92 1095.5,717.643 1096.06,733.006 1096.62,729.364 1097.18,730.263 1097.74,744.426 1098.3,727.673 1098.86,710.071 1099.42,704.408 1099.98,704.586 1100.54,702.957 1101.1,717.519 1101.66,718.136 1102.22,714.645 1102.77,700.281 1103.33,716.206 1103.89,731.451 1104.45,763.131 1105.01,772.833 1105.57,767.649 1106.13,764.3 1106.69,807.034 1107.25,796.126 1107.81,739.056 1108.37,762.485 1108.93,776.285 1109.49,801.786 1110.04,811.633 1110.6,792.555 1111.16,801.286 1111.72,778.732 1112.28,823.229 1112.84,784.293 1113.4,760.755 1113.96,756.513 1114.52,707.967 1115.08,689.719 1115.64,708.277 1116.2,706.687 1116.76,685.245 1117.31,703.986 1117.87,655.587 1118.43,640.382 1118.99,678.015 1119.55,675.259 1120.11,674.872 1120.67,659.909 1121.23,646.093 1121.79,632.083 1122.35,652.671 1122.91,639.331 1123.47,673.443 1124.03,677.516 1124.59,695.477 1125.14,676.215 1125.7,690.482 1126.26,718.32 1126.82,670.951 1127.38,673.577 1127.94,624.756 1128.5,626.728 1129.06,646.495 1129.62,666.354 1130.18,682.159 1130.74,732.693 1131.3,714.582 1131.86,731.353 1132.41,725.591 1132.97,725.914 1133.53,743.035 1134.09,741.583 1134.65,723.155 1135.21,723.441 1135.77,734.842 1136.33,713.889 1136.89,692.748 1137.45,724.191 1138.01,741.829 1138.57,724.582 1139.13,737.752 1139.68,717.743 1140.24,767.004 1140.8,700.49 1141.36,681.176 1141.92,665.414 1142.48,669.403 1143.04,684.452 1143.6,670.467 1144.16,655.065 1144.72,642.521 1145.28,642.686 1145.84,662.513 1146.4,681.358 1146.96,681.949 1147.51,665.575 1148.07,682.973 1148.63,682.553 1149.19,665.071 1149.75,714.421 1150.31,725.335 1150.87,721.418 1151.43,733.892 1151.99,715.568 1152.55,680.725 1153.11,668.452 1153.67,700.957 1154.23,650.836 1154.78,637.619 1155.34,624.066 1155.9,613.802 1156.46,583.487 1157.02,554.558 1157.58,561.113 1158.14,583.043 1158.7,601.501 1159.26,641.336 1159.82,660.307 1160.38,643.638 1160.94,643.783 1161.5,645.133 1162.05,679.905 1162.61,712.088 1163.17,728.951 1163.73,711.651 1164.29,675.082 1164.85,690.959 1165.41,705.154 1165.97,720.221 1166.53,751.625 1167.09,748.469 1167.65,744.594 1168.21,709.185 1168.77,689.005 1169.33,691.635 1169.88,706.631 1170.44,704.635 1171,656.693 1171.56,692.369 1172.12,694.114 1172.68,694.395 1173.24,692.596 1173.8,694.904 1174.36,664.842 1174.92,648.33 1175.48,666.212 1176.04,666.441 1176.6,668.161 1177.15,650.713 1177.71,665.316 1178.27,666.942 1178.83,632 1179.39,648.565 1179.95,663.573 1180.51,692.179 1181.07,690.658 1181.63,676.773 1182.19,659.691 1182.75,663.138 1183.31,647.703 1183.87,633.301 1184.43,636.14 1184.98,611.808 1185.54,632.403 1186.1,635.386 1186.66,606.691 1187.22,594.948 1187.78,582.179 1188.34,568.904 1188.9,559.611 1189.46,552.397 1190.02,529.73 1190.58,518.896 1191.14,527.718 1191.7,552.304 1192.25,544.744 1192.81,538.344 1193.37,527.612 1193.93,553.434 1194.49,544.941 1195.05,568.169 1195.61,574.918 1196.17,581.617 1196.73,556.502 1197.29,548.034 1197.85,558.537 1198.41,550.058 1198.97,572.244 1199.52,577.96 1200.08,583.871 1200.64,607.788 1201.2,659.205 1201.76,673.668 1202.32,675.635 1202.88,678.45 1203.44,664.401 1204,681.302 1204.56,698.883 1205.12,664.115 1205.68,648.828 1206.24,651.085 1206.8,669.155 1207.35,687.134 1207.91,689.015 1208.47,705.164 1209.03,668.457 1209.59,619.741 1210.15,621.096 1210.71,604.878 1211.27,624.303 1211.83,644.963 1212.39,659.228 1212.95,643.911 1213.51,677.019 1214.07,678.881 1214.62,679.739 1215.18,679.905 1215.74,708.896 1216.3,721.797 1216.86,736.032 1217.42,729.946 1217.98,713.318 1218.54,711.515 1219.1,712.183 1219.66,692.932 1220.22,673.861 1220.78,708.154 1221.34,707.345 1221.89,740.631 1222.45,768.718 1223.01,762.238 1223.57,774.362 1224.13,753.502 1224.69,799.955 1225.25,872.947 1225.81,864.066 1226.37,835.706 1226.93,841.754 1227.49,835.689 1228.05,798.893 1228.61,794.572 1229.17,804.944 1229.72,779.995 1230.28,775.484 1230.84,786.34 1231.4,763.714 1231.96,761.863 1232.52,741.734 1233.08,753.42 1233.64,750.712 1234.2,743.937 1234.76,759.993 1235.32,737.835 1235.88,719.457 1236.44,693.746 1236.99,676.436 1237.55,705.64 1238.11,719.992 1238.67,717.934 1239.23,698.128 1239.79,710.643 1240.35,723.2 1240.91,736.81 1241.47,749.404 1242.03,728.249 1242.59,662.478 1243.15,698.031 1243.71,716.137 1244.26,715.115 1244.82,725.999 1245.38,738.718 1245.94,720.292 1246.5,668.805 1247.06,652.916 1247.62,655.928 1248.18,672.547 1248.74,675.888 1249.3,692.207 1249.86,706.649 1250.42,706.137 1250.98,706.257 1251.54,719.873 1252.09,699.67 1252.65,698.704 1253.21,647.266 1253.77,633.754 1254.33,637.722 1254.89,610.029 1255.45,632.123 1256.01,667.846 1256.57,621.142 1257.13,626.119 1257.69,645.821 1258.25,681.06 1258.81,681.942 1259.36,696.067 1259.92,694.355 1260.48,712.192 1261.04,693.493 1261.6,709.427 1262.16,707.922 1262.72,737.436 1263.28,718.299 1263.84,717.753 1264.4,715.789 1264.96,726.841 1265.52,710.921 1266.08,664.809 1266.63,665.199 1267.19,688.203 1267.75,721.928 1268.31,719.119 1268.87,716.699 1269.43,700.411 1269.99,684.781 1270.55,654.247 1271.11,624.161 1271.67,625.495 1272.23,596.024 1272.79,616.982 1273.35,625.008 1273.91,610.943 1274.46,617.878 1275.02,635.497 1275.58,673.408 1276.14,690.522 1276.7,688.955 1277.26,688.57 1277.82,671.942 1278.38,657.334 1278.94,697.868 1279.5,735.914 1280.06,734.266 1280.62,731.638 1281.18,731.354 1281.73,729.185 1282.29,698.574 1282.85,663.448 1283.41,663.958 1283.97,651.114 1284.53,635.223 1285.09,636.836 1285.65,639.411 1286.21,610.994 1286.77,599.581 1287.33,617.739 1287.89,670.083 1288.45,669.528 1289,672.356 1289.56,642.333 1290.12,644.171 1290.68,646.096 1291.24,666.621 1291.8,669.309 1292.36,654.436 1292.92,657.187 1293.48,641.981 1294.04,663.041 1294.6,665.679 1295.16,650.918 1295.72,686.246 1296.28,702.642 1296.83,700.956 1297.39,746.447 1297.95,722.691 1298.51,708.292 1299.07,725.864 1299.63,757.298 1300.19,754.594 1300.75,782.672 1301.31,776.006 1301.87,770.151 1302.43,763.589 1302.99,758.683 1303.55,738.998 1304.1,748.163 1304.66,725.726 1305.22,721.776 1305.78,671.547 1306.34,674.782 1306.9,658.601 1307.46,645.092 1308.02,601.434 1308.58,591.715 1309.14,579.488 1309.7,601.662 1310.26,641.224 1310.82,628.884 1311.38,628.088 1311.93,615.201 1312.49,632.419 1313.05,602.623 1313.61,605.59 1314.17,608.491 1314.73,614.522 1315.29,619.129 1315.85,636.763 1316.41,624.122 1316.97,577.384 1317.53,582.157 1318.09,588.739 1318.65,592.304 1319.2,597.671 1319.76,651.862 1320.32,687.81 1320.88,703.495 1321.44,689.386 1322,677.483 1322.56,648.874 1323.12,649.149 1323.68,711.291 1324.24,692.274 1324.8,675.692 1325.36,674.602 1325.92,626.57 1326.47,630.699 1327.03,700.249 1327.59,697.914 1328.15,711.13 1328.71,707.892 1329.27,707.288 1329.83,691.906 1330.39,721.883 1330.95,719.102 1331.51,685.378 1332.07,651.055 1332.63,667.033 1333.19,670.664 1333.75,669.045 1334.3,681.515 1334.86,710.153 1335.42,725.315 1335.98,736.401 1336.54,732.941 1337.1,732.007 1337.66,727.846 1338.22,724.151 1338.78,738.728 1339.34,706.275 1339.9,706.346 1340.46,706.785 1341.02,719.93 1341.57,720.292 1342.13,704.05 1342.69,701.829 1343.25,719.858 1343.81,717.689 1344.37,733.683 1344.93,695.237 1345.49,712.679 1346.05,682.547 1346.61,701.434 1347.17,686.981 1347.73,688.005 1348.29,691.464 1348.84,690.625 1349.4,722.969 1349.96,717.922 1350.52,719.161 1351.08,714.341 1351.64,713.46 1352.2,699.549 1352.76,698.602 1353.32,743.728 1353.88,740.384 1354.44,706.983 1355,720.695 1355.56,748.937 1356.12,744.923 1356.67,760.524 1357.23,757.368 1357.79,785.054 1358.35,776.552 1358.91,770.341 1359.47,767.45 1360.03,760.257 1360.59,771.773 1361.15,732.597 1361.71,729.76 1362.27,742.692 1362.83,753.909 1363.39,764.201 1363.94,710.78 1364.5,709.74 1365.06,706.225 1365.62,705.391 1366.18,704.273 1366.74,689.432 1367.3,689.746 1367.86,675.344 1368.42,640.677 1368.98,611.15 1369.54,632.532 1370.1,619.494 1370.66,609.157 1371.21,631.441 1371.77,619.976 1372.33,608.121 1372.89,614.739 1373.45,636.464 1374.01,589.327 1374.57,594.628 1375.13,616.62 1375.69,619.269 1376.25,639.591 1376.81,594.361 1377.37,617.761 1377.93,620.887 1378.49,610.572 1379.04,596.824 1379.6,615.364 1380.16,621.306 1380.72,622.597 1381.28,627.557 1381.84,643.556 1382.4,663.615 1382.96,647.464 1383.52,668.403 1384.08,670.646 1384.64,705.438 1385.2,689.537 1385.76,672.955 1386.31,706.357 1386.87,721.168 1387.43,702.262 1387.99,700.761 1388.55,667.088 1389.11,653.271 1389.67,657.182 1390.23,672.618 1390.79,677.647 1391.35,678.813 1391.91,682.598 1392.47,685.07 1393.03,670.632 1393.58,668.926 1394.14,672.748 1394.7,690.939 1395.26,641.72 1395.82,644.369 1396.38,651.244 1396.94,684.297 1397.5,732.976 1398.06,682.202 1398.62,682.445 1399.18,700.466 1399.74,699.902 1400.3,651.719 1400.86,650.864 1401.41,636.423 1401.97,639.17 1402.53,655.648 1403.09,690.689 1403.65,724.725 1404.21,722.194 1404.77,719.862 1405.33,717.422 1405.89,700.893 1406.45,670.474 1407.01,688.215 1407.57,667.188 1408.13,683.437 1408.68,717.514 1409.24,729.679 1409.8,713.701 1410.36,711.688 1410.92,708.419 1411.48,725.286 1412.04,723.691 1412.6,768.929 1413.16,779.889 1413.72,758.348 1414.28,770.712 1414.84,783.761 1415.4,760.418 1415.95,754.173 1416.51,797.222 1417.07,775.835 1417.63,770.351 1418.19,766.353 1418.75,728.553 1419.31,709.744 1419.87,708.346 1420.43,659.098 1420.99,628.27 1421.55,600.74 1422.11,604.754 1422.67,609.591 1423.23,597.443 1423.78,600.451 1424.34,589.286 1424.9,575.928 1425.46,583.177 1426.02,554.339 1426.58,610.14 1427.14,648.42 1427.7,633.583 1428.26,653.54 1428.82,623.313 1429.38,599.458 1429.94,605.12 1430.5,596.217 1431.05,598.374 1431.61,620.413 1432.17,625.772 1432.73,630.354 1433.29,633.948 1433.85,621.44 1434.41,622.507 1434.97,623.399 1435.53,610.623 1436.09,613.083 1436.65,602.112 1437.21,621.131 1437.77,642.063 1438.33,659.182 1438.88,659.979 1439.44,646.095 1440,662.766 1440.56,692.459 1441.12,723.647 1441.68,692.409 1442.24,704.023 1442.8,701.059 1443.36,715.35 1443.92,744.408 1444.48,726.422 1445.04,723.999 1445.6,741.272 1446.15,755.758 1446.71,750.045 1447.27,748.523 1447.83,744.442 1448.39,758.683 1448.95,720.406 1449.51,735.06 1450.07,730.158 1450.63,730.978 1451.19,731.084 1451.75,726.634 1452.31,726.756 1452.87,691.075 1453.42,673.519 1453.98,655.92 1454.54,655.833 1455.1,659.768 1455.66,676.355 1456.22,690.424 1456.78,739.683 1457.34,735.13 1457.9,735.665 1458.46,718.422 1459.02,749.139 1459.58,745.262 1460.14,741.592 1460.7,755.32 1461.25,738.481 1461.81,689.931 1462.37,704.468 1462.93,685.791 1463.49,688.926 1464.05,703.136 1464.61,702.662 1465.17,730.785 1465.73,727.532 1466.29,723.462 1466.85,721.162 1467.41,719.526 1467.97,721.825 1468.52,723.167 1469.08,702.429 1469.64,689.309 1470.2,701.966 1470.76,717.757 1471.32,736.66 1471.88,748.116 1472.44,756.718 1473,749.889 1473.56,715.497 1474.12,711.743 1474.68,726.945 1475.24,773.276 1475.79,785.612 1476.35,815.089 1476.91,790.393 1477.47,770.043 1478.03,767.403 1478.59,745.339 1479.15,744.262 1479.71,740.036 1480.27,720.879 1480.83,734.63 1481.39,717.259 1481.95,685.478 1482.51,704.214 1483.07,688.524 1483.62,690.412 1484.18,687.97 1484.74,688.467 1485.3,707.678 1485.86,708.186 1486.42,707.016 1486.98,738.38 1487.54,750.262 1488.1,746.875 1488.66,728.104 1489.22,711.451 1489.78,712.474 1490.34,708.958 1490.89,757.597 1491.45,786.242 1492.01,810.944 1492.57,802.417 1493.13,793.677 1493.69,787.522 1494.25,798.756 1494.81,779.095 1495.37,787.654 1495.93,810.455 1496.49,804.085 1497.05,779.252 1497.61,772.391 1498.16,769.293 1498.72,750.08 1499.28,730.38 1499.84,711.001 1500.4,689.997 1500.96,703.616 1501.52,672.43 1502.08,659.968 1502.64,646.011 1503.2,647.208 1503.76,612.677 1504.32,650.613 1504.88,651.71 1505.44,703.532 1505.99,735.17 1506.55,746.474 1507.11,775.909 1507.67,785.825 1508.23,716.218 1508.79,666.991 1509.35,633.339 1509.91,603.933 1510.47,658.194 1511.03,659.599 1511.59,662.568 1512.15,679.139 1512.71,650.578 1513.26,617.933 1513.82,609.302 1514.38,614.624 1514.94,616.359 1515.5,632.693 1516.06,621.61 1516.62,641.295 1517.18,656.319 1517.74,643.028 1518.3,640.742 1518.86,644.325 1519.42,630.995 1519.98,635.422 1520.53,635.556 1521.09,625.138 1521.65,611.234 1522.21,597.518 1522.77,571.239 1523.33,559.372 1523.89,578.202 1524.45,584.57 1525.01,621.738 1525.57,642.29 1526.13,662.388 1526.69,649.006 1527.25,653.64 1527.81,689.388 1528.36,703.723 1528.92,733.074 1529.48,740.599 1530.04,752.047 1530.6,746.458 1531.16,755.058 1531.72,766.947 1532.28,778.058 1532.84,805.911 1533.4,780.527 1533.96,790.079 1534.52,766.744 1535.08,793.731 1535.63,757.156 1536.19,754.209 1536.75,752.573 1537.31,751.099 1537.87,732.053 1538.43,711.233 1538.99,723.575 1539.55,689.802 1540.11,707.954 1540.67,708.093 1541.23,756.629 1541.79,752.309 1542.35,766.372 1542.9,779.962 1543.46,774.024 1544.02,802.29 1544.58,792.71 1545.14,806.187 1545.7,831.519 1546.26,807.414 1546.82,802.361 1547.38,781.22 1547.94,777.419 1548.5,742.261 1549.06,705.387 1549.62,690.905 1550.18,692.439 1550.73,692.292 1551.29,706.644 1551.85,674.443 1552.41,657.161 1552.97,656.041 1553.53,640.278 1554.09,626.73 1554.65,642.494 1555.21,645.059 1555.77,663.442 1556.33,617.607 1556.89,620.965 1557.45,642.09 1558,627.448 1558.56,645.647 1559.12,650.301 1559.68,635.294 1560.24,587.91 1560.8,595.242 1561.36,584.987 1561.92,592.463 1562.48,595.759 1563.04,565.474 1563.6,584.837 1564.16,591.52 1564.72,613.353 1565.28,616.712 1565.83,635.811 1566.39,621.967 1566.95,623.219 1567.51,627.792 1568.07,629.074 1568.63,684.909 1569.19,685.243 1569.75,652.068 1570.31,671.07 1570.87,701.859 1571.43,700.064 1571.99,765.406 1572.55,731.052 1573.1,759.569 1573.66,739.981 1574.22,719.426 1574.78,718.527 1575.34,720.706 1575.9,685.285 1576.46,703.126 1577.02,718.55 1577.58,718.085 1578.14,702.331 1578.7,686.266 1579.26,656.684 1579.82,624.837 1580.37,612.313 1580.93,647.045 1581.49,650.923 1582.05,652.861 1582.61,668.959 1583.17,687.762 1583.73,688.152 1584.29,705.78 1584.85,656.942 1585.41,673.434 1585.97,724.299 1586.53,688.469 1587.09,700.212 1587.65,701.711 1588.2,684.043 1588.76,635.852 1589.32,620.793 1589.88,621.432 1590.44,611.956 1591,595.295 1591.56,616.976 1592.12,623.218 1592.68,627.783 1593.24,627.365 1593.8,616.352 1594.36,637.007 1594.92,608.207 1595.47,596.334 1596.03,630.194 1596.59,614.958 1597.15,590.607 1597.71,578.798 1598.27,584.893 1598.83,557.031 1599.39,549.589 1599.95,542.681 1600.51,553.874 1601.07,592.203 1601.63,582.296 1602.19,556.188 1602.74,578.71 1603.3,599.018 1603.86,635.538 1604.42,635.783 1604.98,655.61 1605.54,591.458 1606.1,567.611 1606.66,574.655 1607.22,533.259 1607.78,523.921 1608.34,533.18 1608.9,560.086 1609.46,553.423 1610.02,544.459 1610.57,554.263 1611.13,594.137 1611.69,616.757 1612.25,656.372 1612.81,691.623 1613.37,687.602 1613.93,688.127 1614.49,723.36 1615.05,757.474 1615.61,770.87 1616.17,783.842 1616.73,764.122 1617.29,762.224 1617.84,740.778 1618.4,768.654 1618.96,780.806 1619.52,760.719 1620.08,789.024 1620.64,782.649 1621.2,758.769 1621.76,772.818 1622.32,784.335 1622.88,792.878 1623.44,817.068 1624,810.257 1624.56,786.503 1625.11,763.822 1625.67,727.176 1626.23,724.093 1626.79,704.82 1627.35,717.103 1627.91,745.288 1628.47,757.73 1629.03,718.102 1629.59,684.027 1630.15,687.419 1630.71,672.998 1631.27,654.695 1631.83,656.397 1632.39,674.283 1632.94,688.436 1633.5,704.277 1634.06,732.778 1634.62,697.067 1635.18,665.572 1635.74,698.997 1636.3,713.717 1636.86,712.414 1637.42,713.517 1637.98,730.709 1638.54,742.807 1639.1,738.466 1639.66,718.879 1640.21,765.185 1640.77,791.478 1641.33,767.398 1641.89,747.149 1642.45,712.499 1643.01,742.049 1643.57,766.336 1644.13,792.863 1644.69,800.851 1645.25,780.309 1645.81,761.149 1646.37,760.558 1646.93,757.271 1647.48,736.499 1648.04,750.832 1648.6,746.909 1649.16,692.075 1649.72,707.266 1650.28,668.488 1650.84,669.935 1651.4,652.552 1651.96,670.316 1652.52,701.926 1653.08,683.554 1653.64,681.627 1654.2,667.753 1654.76,652.345 1655.31,656.41 1655.87,674.192 1656.43,673.523 1656.99,690.55 1657.55,693.116 1658.11,709.063 1658.67,741.1 1659.23,738.361 1659.79,719.963 1660.35,703.285 1660.91,704.887 1661.47,687.607 1662.03,651.328 1662.58,654.501 1663.14,672.259 1663.7,639.661 1664.26,643.801 1664.82,647.534 1665.38,649.195 1665.94,633.234 1666.5,636.904 1667.06,626.152 1667.62,645.361 1668.18,645.573 1668.74,646.907 1669.3,682.948 1669.85,667.041 1670.41,668.64 1670.97,673.332 1671.53,673.947 1672.09,655.17 1672.65,638.545 1673.21,643.89 1673.77,660.882 1674.33,693.125 1674.89,708.999 1675.45,707.349 1676.01,723.582 1676.57,706.394 1677.13,704.169 1677.68,689.288 1678.24,687.901 1678.8,690.212 1679.36,644.105 1679.92,649.659 1680.48,666.397 1681.04,682.895 1681.6,701.61 1682.16,739.679 1682.72,751.258 1683.28,701.245 1683.84,700.117 1684.4,699.452 1684.95,713.102 1685.51,714.781 1686.07,666.114 1686.63,682.185 1687.19,671.27 1687.75,688.075 1688.31,719.602 1688.87,686.572 1689.43,703.987 1689.99,700.638 1690.55,705.409 1691.11,671.161 1691.67,652.789 1692.23,638.035 1692.78,622.994 1693.34,609.028 1693.9,599.283 1694.46,619.868 1695.02,574.671 1695.58,581.669 1696.14,575.045 1696.7,578.598 1697.26,620.143 1697.82,620.985 1698.38,607.143 1698.94,594.824 1699.5,616.135 1700.05,605.557 1700.61,609.114 1701.17,596.397 1701.73,618.833 1702.29,636.403 1702.85,641.53 1703.41,659.64 1703.97,662.019 1704.53,658.064 1705.09,642.161 1705.65,660.195 1706.21,647.561 1706.77,702.634 1707.32,701.128 1707.88,702.373 1708.44,682.998 1709,700.442 1709.56,698.024 1710.12,695.078 1710.68,678.239 1711.24,700.643 1711.8,667.149 1712.36,664.215 1712.92,681.783 1713.48,697.963 1714.04,698.509 1714.6,697.898 1715.15,744.86 1715.71,709.879 1716.27,725.128 1716.83,706.049 1717.39,674.962 1717.95,692.335 1718.51,692.792 1719.07,720.549 1719.63,717.038 1720.19,700.746 1720.75,701.235 1721.31,682.387 1721.87,678.944 1722.42,696.5 1722.98,680.749 1723.54,663.869 1724.1,652.576 1724.66,672.593 1725.22,675.028 1725.78,642.52 1726.34,645.615 1726.9,631.05 1727.46,602.66 1728.02,642.863 1728.58,647.133 1729.14,665.497 1729.69,684.1 1730.25,686.577 1730.81,687.121 1731.37,699.862 1731.93,715.451 1732.49,727.93 1733.05,725.794 1733.61,721.09 1734.17,736.821 1734.73,733.877 1735.29,750.744 1735.85,777.897 1736.41,803.607 1736.97,781.186 1737.52,760.184 1738.08,725.822 1738.64,722.978 1739.2,711.386 1739.76,727.879 1740.32,739.321 1740.88,736.789 1741.44,704.79 1742,687.088 1742.56,705.695 1743.12,723.18 1743.68,737.724 1744.24,752.832 1744.79,719.829 1745.35,733.296 1745.91,730.631 1746.47,713.881 1747.03,731.555 1747.59,728.372 1748.15,742.488 1748.71,720.576 1749.27,738.374 1749.83,751.285 1750.39,732.787 1750.95,729.39 1751.51,724.413 1752.06,739.81 1752.62,736.911 1753.18,751.795 1753.74,764.982 1754.3,759.109 1754.86,753.9 1755.42,750.233 1755.98,734.165 1756.54,763.312 1757.1,723.803 1757.66,735.194 1758.22,733.454 1758.78,731.47 1759.34,729.495 1759.89,712.465 1760.45,727.464 1761.01,725.574 1761.57,755.027 1762.13,732.787 1762.69,680.292 1763.25,711.711 1763.81,724.738 1764.37,719.828 1764.93,720.047 1765.49,750.288 1766.05,745.128 1766.61,727.98 1767.16,745.562 1767.72,727.657 1768.28,725.747 1768.84,690.04 1769.4,676.378 1769.96,679.11 1770.52,681.463 1771.08,681.421 1771.64,685.088 1772.2,637.94 1772.76,620.569 1773.32,606.959 1773.88,625.206 1774.43,659.285 1774.99,674.953 1775.55,660.009 1776.11,692.165 1776.67,661.475 1777.23,643.608 1777.79,661.081 1778.35,646.965 1778.91,649.165 1779.47,668.297 1780.03,653.578 1780.59,669.274 1781.15,670.988 1781.71,654.67 1782.26,658.301 1782.82,628.345 1783.38,600.736 1783.94,639.926 1784.5,675.082 1785.06,626.175 1785.62,627.101 1786.18,646.203 1786.74,646.89 1787.3,652.808 1787.86,670.769 1788.42,673.149 1788.98,660.502 1789.53,645.564 1790.09,678.298 1790.65,711.501 1791.21,726.538 1791.77,724.557 1792.33,756.042 1792.89,754.992 1793.45,721.82 1794.01,721.249 1794.57,704.586 1795.13,720.476 1795.69,701.014 1796.25,687.134 1796.8,705.712 1797.36,715.139 1797.92,716.058 1798.48,680.301 1799.04,666.393 1799.6,683.232 1800.16,713.453 1800.72,712.169 1801.28,724.738 1801.84,723.521 1802.4,721.279 1802.96,704.979 1803.52,704.389 1804.08,704.703 1804.63,704.222 1805.19,685.908 1805.75,681.009 1806.31,682.614 1806.87,680.058 1807.43,747.77 1807.99,713.993 1808.55,712.584 1809.11,679.999 1809.67,629.821 1810.23,631.332 1810.79,615.054 1811.35,633.877 1811.9,607.159 1812.46,607.548 1813.02,576.486 1813.58,583.073 1814.14,586.173 1814.7,607.469 1815.26,598.201 1815.82,619.707 1816.38,641.048 1816.94,662.061 1817.5,696.333 1818.06,771.16 1818.62,795.335 1819.18,791.147 1819.73,788.656 1820.29,770.372 1820.85,751.229 1821.41,735.156 1821.97,716.718 1822.53,716.057 1823.09,711.276 1823.65,712.176 1824.21,727.349 1824.77,705.531 1825.33,722.552 1825.89,686.168 1826.45,670.8 1827,673.256 1827.56,673.862 1828.12,673.524 1828.68,672.662 1829.24,703.887 1829.8,686.452 1830.36,672.586 1830.92,657.789 1831.48,689.106 1832.04,707.093 1832.6,707.411 1833.16,704.454 1833.72,703.973 1834.27,685.826 1834.83,719.808 1835.39,717.81 1835.95,729.929 1836.51,729.767 1837.07,725.241 1837.63,739.353 1838.19,769.561 \"/>\n<path clip-path=\"url(#clip783)\" d=\"M720.247 693.037 L720.806 693.037 L721.365 693.037 L721.924 693.037 L722.484 693.037 L723.043 693.037 L723.602 693.037 L724.161 693.037 L724.721 693.037 L725.28 693.037 L725.839 693.037 L726.398 693.037 L726.958 693.037 L727.517 693.037 L728.076 693.037 L728.635 693.037 L729.195 693.037 L729.754 693.037 L730.313 693.037 L730.872 693.037 L731.432 693.037 L731.991 693.037 L732.55 693.037 L733.109 693.037 L733.669 693.037 L734.228 693.037 L734.787 693.037 L735.346 693.037 L735.906 693.037 L736.465 693.037 L737.024 693.037 L737.583 693.037 L738.143 693.037 L738.702 693.037 L739.261 693.037 L739.82 693.037 L740.38 693.037 L740.939 693.037 L741.498 693.037 L742.057 693.037 L742.617 693.037 L743.176 693.037 L743.735 693.037 L744.294 693.037 L744.854 693.037 L745.413 693.037 L745.972 693.037 L746.531 693.037 L747.091 693.037 L747.65 693.037 L748.209 693.037 L748.768 693.037 L749.328 693.037 L749.887 693.037 L750.446 693.037 L751.005 693.037 L751.565 693.037 L752.124 693.037 L752.683 693.037 L753.242 693.037 L753.802 693.037 L754.361 693.037 L754.92 693.037 L755.479 693.037 L756.039 693.037 L756.598 693.037 L757.157 693.037 L757.716 693.037 L758.276 693.037 L758.835 693.037 L759.394 693.037 L759.953 693.037 L760.513 693.037 L761.072 693.037 L761.631 693.037 L762.19 693.037 L762.75 693.037 L763.309 693.037 L763.868 693.037 L764.427 693.037 L764.987 693.037 L765.546 693.037 L766.105 693.037 L766.664 693.037 L767.224 693.037 L767.783 693.037 L768.342 693.037 L768.901 693.037 L769.461 693.037 L770.02 693.037 L770.579 693.037 L771.138 693.037 L771.698 693.037 L772.257 693.037 L772.816 693.037 L773.375 693.037 L773.935 693.037 L774.494 693.037 L775.053 693.037 L775.612 693.037 L776.172 693.037 L776.731 693.037 L777.29 693.037 L777.849 693.037 L778.409 693.037 L778.968 693.037 L779.527 693.037 L780.086 693.037 L780.646 693.037 L781.205 693.037 L781.764 693.037 L782.323 693.037 L782.883 693.037 L783.442 693.037 L784.001 693.037 L784.56 693.037 L785.12 693.037 L785.679 693.037 L786.238 693.037 L786.797 693.037 L787.357 693.037 L787.916 693.037 L788.475 693.037 L789.034 693.037 L789.594 693.037 L790.153 693.037 L790.712 693.037 L791.271 693.037 L791.831 693.037 L792.39 693.037 L792.949 693.037 L793.508 693.037 L794.068 693.037 L794.627 693.037 L795.186 693.037 L795.745 693.037 L796.305 693.037 L796.864 693.037 L797.423 693.037 L797.982 693.037 L798.542 693.037 L799.101 693.037 L799.66 693.037 L800.219 693.037 L800.779 693.037 L801.338 693.037 L801.897 693.037 L802.456 693.037 L803.016 693.037 L803.575 693.037 L804.134 693.037 L804.693 693.037 L805.253 693.037 L805.812 693.037 L806.371 693.037 L806.931 693.037 L807.49 693.037 L808.049 693.037 L808.608 693.037 L809.168 693.037 L809.727 693.037 L810.286 693.037 L810.845 693.037 L811.405 693.037 L811.964 693.037 L812.523 693.037 L813.082 693.037 L813.642 693.037 L814.201 693.037 L814.76 693.037 L815.319 693.037 L815.879 693.037 L816.438 693.037 L816.997 693.037 L817.556 693.037 L818.116 693.037 L818.675 693.037 L819.234 693.037 L819.793 693.037 L820.353 693.037 L820.912 693.037 L821.471 693.037 L822.03 693.037 L822.59 693.037 L823.149 693.037 L823.708 693.037 L824.267 693.037 L824.827 693.037 L825.386 693.037 L825.945 693.037 L826.504 693.037 L827.064 693.037 L827.623 693.037 L828.182 693.037 L828.741 693.037 L829.301 693.037 L829.86 693.037 L830.419 693.037 L830.978 693.037 L831.538 693.037 L832.097 693.037 L832.656 693.037 L833.215 693.037 L833.775 693.037 L834.334 693.037 L834.893 693.037 L835.452 693.037 L836.012 693.037 L836.571 693.037 L837.13 693.037 L837.689 693.037 L838.249 693.037 L838.808 693.037 L839.367 693.037 L839.926 693.037 L840.486 693.037 L841.045 693.037 L841.604 693.037 L842.163 693.037 L842.723 693.037 L843.282 693.037 L843.841 693.037 L844.4 693.037 L844.96 693.037 L845.519 693.037 L846.078 693.037 L846.637 693.037 L847.197 693.037 L847.756 693.037 L848.315 693.037 L848.874 693.037 L849.434 693.037 L849.993 693.037 L850.552 693.037 L851.111 693.037 L851.671 693.037 L852.23 693.037 L852.789 693.037 L853.348 693.037 L853.908 693.037 L854.467 693.037 L855.026 693.037 L855.585 693.037 L856.145 693.037 L856.704 693.037 L857.263 693.037 L857.822 693.037 L858.382 693.037 L858.941 693.037 L859.5 693.037 L860.059 693.037 L860.619 693.037 L861.178 693.037 L861.737 693.037 L862.296 693.037 L862.856 693.037 L863.415 693.037 L863.974 693.037 L864.533 693.037 L865.093 693.037 L865.652 693.037 L866.211 693.037 L866.77 693.037 L867.33 693.037 L867.889 693.037 L868.448 693.037 L869.007 693.037 L869.567 693.037 L870.126 693.037 L870.685 693.037 L871.244 693.037 L871.804 693.037 L872.363 693.037 L872.922 693.037 L873.481 693.037 L874.041 693.037 L874.6 693.037 L875.159 693.037 L875.718 693.037 L876.278 693.037 L876.837 693.037 L877.396 693.037 L877.955 693.037 L878.515 693.037 L879.074 693.037 L879.633 693.037 L880.192 693.037 L880.752 693.037 L881.311 693.037 L881.87 693.037 L882.429 693.037 L882.989 693.037 L883.548 693.037 L884.107 693.037 L884.666 693.037 L885.226 693.037 L885.785 693.037 L886.344 693.037 L886.903 693.037 L887.463 693.037 L888.022 693.037 L888.581 693.037 L889.14 693.037 L889.7 693.037 L890.259 693.037 L890.818 693.037 L891.377 693.037 L891.937 693.037 L892.496 693.037 L893.055 693.037 L893.614 693.037 L894.174 693.037 L894.733 693.037 L895.292 693.037 L895.851 693.037 L896.411 693.037 L896.97 693.037 L897.529 693.037 L898.088 693.037 L898.648 693.037 L899.207 693.037 L899.766 693.037 L900.325 693.037 L900.885 693.037 L901.444 693.037 L902.003 693.037 L902.562 693.037 L903.122 693.037 L903.681 693.037 L904.24 693.037 L904.799 693.037 L905.359 693.037 L905.918 693.037 L906.477 693.037 L907.036 693.037 L907.596 693.037 L908.155 693.037 L908.714 693.037 L909.273 693.037 L909.833 693.037 L910.392 693.037 L910.951 693.037 L911.51 693.037 L912.07 693.037 L912.629 693.037 L913.188 693.037 L913.747 693.037 L914.307 693.037 L914.866 693.037 L915.425 693.037 L915.984 693.037 L916.544 693.037 L917.103 693.037 L917.662 693.037 L918.221 693.037 L918.781 693.037 L919.34 693.037 L919.899 693.037 L920.458 693.037 L921.018 693.037 L921.577 693.037 L922.136 693.037 L922.695 693.037 L923.255 693.037 L923.814 693.037 L924.373 693.037 L924.932 693.037 L925.492 693.037 L926.051 693.037 L926.61 693.037 L927.169 693.037 L927.729 693.037 L928.288 693.037 L928.847 693.037 L929.406 693.037 L929.966 693.037 L930.525 693.037 L931.084 693.037 L931.644 693.037 L932.203 693.037 L932.762 693.037 L933.321 693.037 L933.881 693.037 L934.44 693.037 L934.999 693.037 L935.558 693.037 L936.118 693.037 L936.677 693.037 L937.236 693.037 L937.795 693.037 L938.355 693.037 L938.914 693.037 L939.473 693.037 L940.032 693.037 L940.592 693.037 L941.151 693.037 L941.71 693.037 L942.269 693.037 L942.829 693.037 L943.388 693.037 L943.947 693.037 L944.506 693.037 L945.066 693.037 L945.625 693.037 L946.184 693.037 L946.743 693.037 L947.303 693.037 L947.862 693.037 L948.421 693.037 L948.98 693.037 L949.54 693.037 L950.099 693.037 L950.658 693.037 L951.217 693.037 L951.777 693.037 L952.336 693.037 L952.895 693.037 L953.454 693.037 L954.014 693.037 L954.573 693.037 L955.132 693.037 L955.691 693.037 L956.251 693.037 L956.81 693.037 L957.369 693.037 L957.928 693.037 L958.488 693.037 L959.047 693.037 L959.606 693.037 L960.165 693.037 L960.725 693.037 L961.284 693.037 L961.843 693.037 L962.402 693.037 L962.962 693.037 L963.521 693.037 L964.08 693.037 L964.639 693.037 L965.199 693.037 L965.758 693.037 L966.317 693.037 L966.876 693.037 L967.436 693.037 L967.995 693.037 L968.554 693.037 L969.113 693.037 L969.673 693.037 L970.232 693.037 L970.791 693.037 L971.35 693.037 L971.91 693.037 L972.469 693.037 L973.028 693.037 L973.587 693.037 L974.147 693.037 L974.706 693.037 L975.265 693.037 L975.824 693.037 L976.384 693.037 L976.943 693.037 L977.502 693.037 L978.061 693.037 L978.621 693.037 L979.18 693.037 L979.739 693.037 L980.298 693.037 L980.858 693.037 L981.417 693.037 L981.976 693.037 L982.535 693.037 L983.095 693.037 L983.654 693.037 L984.213 693.037 L984.772 693.037 L985.332 693.037 L985.891 693.037 L986.45 693.037 L987.009 693.037 L987.569 693.037 L988.128 693.037 L988.687 693.037 L989.246 693.037 L989.806 693.037 L990.365 693.037 L990.924 693.037 L991.483 693.037 L992.043 693.037 L992.602 693.037 L993.161 693.037 L993.72 693.037 L994.28 693.037 L994.839 693.037 L995.398 693.037 L995.957 693.037 L996.517 693.037 L997.076 693.037 L997.635 693.037 L998.194 693.037 L998.754 693.037 L999.313 693.037 L999.872 693.037 L1000.43 693.037 L1000.99 693.037 L1001.55 693.037 L1002.11 693.037 L1002.67 693.037 L1003.23 693.037 L1003.79 693.037 L1004.35 693.037 L1004.91 693.037 L1005.46 693.037 L1006.02 693.037 L1006.58 693.037 L1007.14 693.037 L1007.7 693.037 L1008.26 693.037 L1008.82 693.037 L1009.38 693.037 L1009.94 693.037 L1010.5 693.037 L1011.06 693.037 L1011.62 693.037 L1012.18 693.037 L1012.73 693.037 L1013.29 693.037 L1013.85 693.037 L1014.41 693.037 L1014.97 693.037 L1015.53 693.037 L1016.09 693.037 L1016.65 693.037 L1017.21 693.037 L1017.77 693.037 L1018.33 693.037 L1018.89 693.037 L1019.45 693.037 L1020.01 693.037 L1020.56 693.037 L1021.12 693.037 L1021.68 693.037 L1022.24 693.037 L1022.8 693.037 L1023.36 693.037 L1023.92 693.037 L1024.48 693.037 L1025.04 693.037 L1025.6 693.037 L1026.16 693.037 L1026.72 693.037 L1027.28 693.037 L1027.83 693.037 L1028.39 693.037 L1028.95 693.037 L1029.51 693.037 L1030.07 693.037 L1030.63 693.037 L1031.19 693.037 L1031.75 693.037 L1032.31 693.037 L1032.87 693.037 L1033.43 693.037 L1033.99 693.037 L1034.55 693.037 L1035.1 693.037 L1035.66 693.037 L1036.22 693.037 L1036.78 693.037 L1037.34 693.037 L1037.9 693.037 L1038.46 693.037 L1039.02 693.037 L1039.58 693.037 L1040.14 693.037 L1040.7 693.037 L1041.26 693.037 L1041.82 693.037 L1042.38 693.037 L1042.93 693.037 L1043.49 693.037 L1044.05 693.037 L1044.61 693.037 L1045.17 693.037 L1045.73 693.037 L1046.29 693.037 L1046.85 693.037 L1047.41 693.037 L1047.97 693.037 L1048.53 693.037 L1049.09 693.037 L1049.65 693.037 L1050.2 693.037 L1050.76 693.037 L1051.32 693.037 L1051.88 693.037 L1052.44 693.037 L1053 693.037 L1053.56 693.037 L1054.12 693.037 L1054.68 693.037 L1055.24 693.037 L1055.8 693.037 L1056.36 693.037 L1056.92 693.037 L1057.48 693.037 L1058.03 693.037 L1058.59 693.037 L1059.15 693.037 L1059.71 693.037 L1060.27 693.037 L1060.83 693.037 L1061.39 693.037 L1061.95 693.037 L1062.51 693.037 L1063.07 693.037 L1063.63 693.037 L1064.19 693.037 L1064.75 693.037 L1065.3 693.037 L1065.86 693.037 L1066.42 693.037 L1066.98 693.037 L1067.54 693.037 L1068.1 693.037 L1068.66 693.037 L1069.22 693.037 L1069.78 693.037 L1070.34 693.037 L1070.9 693.037 L1071.46 693.037 L1072.02 693.037 L1072.57 693.037 L1073.13 693.037 L1073.69 693.037 L1074.25 693.037 L1074.81 693.037 L1075.37 693.037 L1075.93 693.037 L1076.49 693.037 L1077.05 693.037 L1077.61 693.037 L1078.17 693.037 L1078.73 693.037 L1079.29 693.037 L1079.85 693.037 L1080.4 693.037 L1080.96 693.037 L1081.52 693.037 L1082.08 693.037 L1082.64 693.037 L1083.2 693.037 L1083.76 693.037 L1084.32 693.037 L1084.88 693.037 L1085.44 693.037 L1086 693.037 L1086.56 693.037 L1087.12 693.037 L1087.67 693.037 L1088.23 693.037 L1088.79 693.037 L1089.35 693.037 L1089.91 693.037 L1090.47 693.037 L1091.03 693.037 L1091.59 693.037 L1092.15 693.037 L1092.71 693.037 L1093.27 693.037 L1093.83 693.037 L1094.39 693.037 L1094.94 693.037 L1095.5 693.037 L1096.06 693.037 L1096.62 693.037 L1097.18 693.037 L1097.74 693.037 L1098.3 693.037 L1098.86 693.037 L1099.42 693.037 L1099.98 693.037 L1100.54 693.037 L1101.1 693.037 L1101.66 693.037 L1102.22 693.037 L1102.77 693.037 L1103.33 693.037 L1103.89 693.037 L1104.45 693.037 L1105.01 693.037 L1105.57 693.037 L1106.13 693.037 L1106.69 693.037 L1107.25 693.037 L1107.81 693.037 L1108.37 693.037 L1108.93 693.037 L1109.49 693.037 L1110.04 693.037 L1110.6 693.037 L1111.16 693.037 L1111.72 693.037 L1112.28 693.037 L1112.84 693.037 L1113.4 693.037 L1113.96 693.037 L1114.52 693.037 L1115.08 693.037 L1115.64 693.037 L1116.2 693.037 L1116.76 693.037 L1117.31 693.037 L1117.87 693.037 L1118.43 693.037 L1118.99 693.037 L1119.55 693.037 L1120.11 693.037 L1120.67 693.037 L1121.23 693.037 L1121.79 693.037 L1122.35 693.037 L1122.91 693.037 L1123.47 693.037 L1124.03 693.037 L1124.59 693.037 L1125.14 693.037 L1125.7 693.037 L1126.26 693.037 L1126.82 693.037 L1127.38 693.037 L1127.94 693.037 L1128.5 693.037 L1129.06 693.037 L1129.62 693.037 L1130.18 693.037 L1130.74 693.037 L1131.3 693.037 L1131.86 693.037 L1132.41 693.037 L1132.97 693.037 L1133.53 693.037 L1134.09 693.037 L1134.65 693.037 L1135.21 693.037 L1135.77 693.037 L1136.33 693.037 L1136.89 693.037 L1137.45 693.037 L1138.01 693.037 L1138.57 693.037 L1139.13 693.037 L1139.68 693.037 L1140.24 693.037 L1140.8 693.037 L1141.36 693.037 L1141.92 693.037 L1142.48 693.037 L1143.04 693.037 L1143.6 693.037 L1144.16 693.037 L1144.72 693.037 L1145.28 693.037 L1145.84 693.037 L1146.4 693.037 L1146.96 693.037 L1147.51 693.037 L1148.07 693.037 L1148.63 693.037 L1149.19 693.037 L1149.75 693.037 L1150.31 693.037 L1150.87 693.037 L1151.43 693.037 L1151.99 693.037 L1152.55 693.037 L1153.11 693.037 L1153.67 693.037 L1154.23 693.037 L1154.78 693.037 L1155.34 693.037 L1155.9 693.037 L1156.46 693.037 L1157.02 693.037 L1157.58 693.037 L1158.14 693.037 L1158.7 693.037 L1159.26 693.037 L1159.82 693.037 L1160.38 693.037 L1160.94 693.037 L1161.5 693.037 L1162.05 693.037 L1162.61 693.037 L1163.17 693.037 L1163.73 693.037 L1164.29 693.037 L1164.85 693.037 L1165.41 693.037 L1165.97 693.037 L1166.53 693.037 L1167.09 693.037 L1167.65 693.037 L1168.21 693.037 L1168.77 693.037 L1169.33 693.037 L1169.88 693.037 L1170.44 693.037 L1171 693.037 L1171.56 693.037 L1172.12 693.037 L1172.68 693.037 L1173.24 693.037 L1173.8 693.037 L1174.36 693.037 L1174.92 693.037 L1175.48 693.037 L1176.04 693.037 L1176.6 693.037 L1177.15 693.037 L1177.71 693.037 L1178.27 693.037 L1178.83 693.037 L1179.39 693.037 L1179.95 693.037 L1180.51 693.037 L1181.07 693.037 L1181.63 693.037 L1182.19 693.037 L1182.75 693.037 L1183.31 693.037 L1183.87 693.037 L1184.43 693.037 L1184.98 693.037 L1185.54 693.037 L1186.1 693.037 L1186.66 693.037 L1187.22 693.037 L1187.78 693.037 L1188.34 693.037 L1188.9 693.037 L1189.46 693.037 L1190.02 693.037 L1190.58 693.037 L1191.14 693.037 L1191.7 693.037 L1192.25 693.037 L1192.81 693.037 L1193.37 693.037 L1193.93 693.037 L1194.49 693.037 L1195.05 693.037 L1195.61 693.037 L1196.17 693.037 L1196.73 693.037 L1197.29 693.037 L1197.85 693.037 L1198.41 693.037 L1198.97 693.037 L1199.52 693.037 L1200.08 693.037 L1200.64 693.037 L1201.2 693.037 L1201.76 693.037 L1202.32 693.037 L1202.88 693.037 L1203.44 693.037 L1204 693.037 L1204.56 693.037 L1205.12 693.037 L1205.68 693.037 L1206.24 693.037 L1206.8 693.037 L1207.35 693.037 L1207.91 693.037 L1208.47 693.037 L1209.03 693.037 L1209.59 693.037 L1210.15 693.037 L1210.71 693.037 L1211.27 693.037 L1211.83 693.037 L1212.39 693.037 L1212.95 693.037 L1213.51 693.037 L1214.07 693.037 L1214.62 693.037 L1215.18 693.037 L1215.74 693.037 L1216.3 693.037 L1216.86 693.037 L1217.42 693.037 L1217.98 693.037 L1218.54 693.037 L1219.1 693.037 L1219.66 693.037 L1220.22 693.037 L1220.78 693.037 L1221.34 693.037 L1221.89 693.037 L1222.45 693.037 L1223.01 693.037 L1223.57 693.037 L1224.13 693.037 L1224.69 693.037 L1225.25 693.037 L1225.81 693.037 L1226.37 693.037 L1226.93 693.037 L1227.49 693.037 L1228.05 693.037 L1228.61 693.037 L1229.17 693.037 L1229.72 693.037 L1230.28 693.037 L1230.84 693.037 L1231.4 693.037 L1231.96 693.037 L1232.52 693.037 L1233.08 693.037 L1233.64 693.037 L1234.2 693.037 L1234.76 693.037 L1235.32 693.037 L1235.88 693.037 L1236.44 693.037 L1236.99 693.037 L1237.55 693.037 L1238.11 693.037 L1238.67 693.037 L1239.23 693.037 L1239.79 693.037 L1240.35 693.037 L1240.91 693.037 L1241.47 693.037 L1242.03 693.037 L1242.59 693.037 L1243.15 693.037 L1243.71 693.037 L1244.26 693.037 L1244.82 693.037 L1245.38 693.037 L1245.94 693.037 L1246.5 693.037 L1247.06 693.037 L1247.62 693.037 L1248.18 693.037 L1248.74 693.037 L1249.3 693.037 L1249.86 693.037 L1250.42 693.037 L1250.98 693.037 L1251.54 693.037 L1252.09 693.037 L1252.65 693.037 L1253.21 693.037 L1253.77 693.037 L1254.33 693.037 L1254.89 693.037 L1255.45 693.037 L1256.01 693.037 L1256.57 693.037 L1257.13 693.037 L1257.69 693.037 L1258.25 693.037 L1258.81 693.037 L1259.36 693.037 L1259.92 693.037 L1260.48 693.037 L1261.04 693.037 L1261.6 693.037 L1262.16 693.037 L1262.72 693.037 L1263.28 693.037 L1263.84 693.037 L1264.4 693.037 L1264.96 693.037 L1265.52 693.037 L1266.08 693.037 L1266.63 693.037 L1267.19 693.037 L1267.75 693.037 L1268.31 693.037 L1268.87 693.037 L1269.43 693.037 L1269.99 693.037 L1270.55 693.037 L1271.11 693.037 L1271.67 693.037 L1272.23 693.037 L1272.79 693.037 L1273.35 693.037 L1273.91 693.037 L1274.46 693.037 L1275.02 693.037 L1275.58 693.037 L1276.14 693.037 L1276.7 693.037 L1277.26 693.037 L1277.82 693.037 L1278.38 693.037 L1278.94 693.037 L1279.5 693.037 L1280.06 693.037 L1280.62 693.037 L1281.18 693.037 L1281.73 693.037 L1282.29 693.037 L1282.85 693.037 L1283.41 693.037 L1283.97 693.037 L1284.53 693.037 L1285.09 693.037 L1285.65 693.037 L1286.21 693.037 L1286.77 693.037 L1287.33 693.037 L1287.89 693.037 L1288.45 693.037 L1289 693.037 L1289.56 693.037 L1290.12 693.037 L1290.68 693.037 L1291.24 693.037 L1291.8 693.037 L1292.36 693.037 L1292.92 693.037 L1293.48 693.037 L1294.04 693.037 L1294.6 693.037 L1295.16 693.037 L1295.72 693.037 L1296.28 693.037 L1296.83 693.037 L1297.39 693.037 L1297.95 693.037 L1298.51 693.037 L1299.07 693.037 L1299.63 693.037 L1300.19 693.037 L1300.75 693.037 L1301.31 693.037 L1301.87 693.037 L1302.43 693.037 L1302.99 693.037 L1303.55 693.037 L1304.1 693.037 L1304.66 693.037 L1305.22 693.037 L1305.78 693.037 L1306.34 693.037 L1306.9 693.037 L1307.46 693.037 L1308.02 693.037 L1308.58 693.037 L1309.14 693.037 L1309.7 693.037 L1310.26 693.037 L1310.82 693.037 L1311.38 693.037 L1311.93 693.037 L1312.49 693.037 L1313.05 693.037 L1313.61 693.037 L1314.17 693.037 L1314.73 693.037 L1315.29 693.037 L1315.85 693.037 L1316.41 693.037 L1316.97 693.037 L1317.53 693.037 L1318.09 693.037 L1318.65 693.037 L1319.2 693.037 L1319.76 693.037 L1320.32 693.037 L1320.88 693.037 L1321.44 693.037 L1322 693.037 L1322.56 693.037 L1323.12 693.037 L1323.68 693.037 L1324.24 693.037 L1324.8 693.037 L1325.36 693.037 L1325.92 693.037 L1326.47 693.037 L1327.03 693.037 L1327.59 693.037 L1328.15 693.037 L1328.71 693.037 L1329.27 693.037 L1329.83 693.037 L1330.39 693.037 L1330.95 693.037 L1331.51 693.037 L1332.07 693.037 L1332.63 693.037 L1333.19 693.037 L1333.75 693.037 L1334.3 693.037 L1334.86 693.037 L1335.42 693.037 L1335.98 693.037 L1336.54 693.037 L1337.1 693.037 L1337.66 693.037 L1338.22 693.037 L1338.78 693.037 L1339.34 693.037 L1339.9 693.037 L1340.46 693.037 L1341.02 693.037 L1341.57 693.037 L1342.13 693.037 L1342.69 693.037 L1343.25 693.037 L1343.81 693.037 L1344.37 693.037 L1344.93 693.037 L1345.49 693.037 L1346.05 693.037 L1346.61 693.037 L1347.17 693.037 L1347.73 693.037 L1348.29 693.037 L1348.84 693.037 L1349.4 693.037 L1349.96 693.037 L1350.52 693.037 L1351.08 693.037 L1351.64 693.037 L1352.2 693.037 L1352.76 693.037 L1353.32 693.037 L1353.88 693.037 L1354.44 693.037 L1355 693.037 L1355.56 693.037 L1356.12 693.037 L1356.67 693.037 L1357.23 693.037 L1357.79 693.037 L1358.35 693.037 L1358.91 693.037 L1359.47 693.037 L1360.03 693.037 L1360.59 693.037 L1361.15 693.037 L1361.71 693.037 L1362.27 693.037 L1362.83 693.037 L1363.39 693.037 L1363.94 693.037 L1364.5 693.037 L1365.06 693.037 L1365.62 693.037 L1366.18 693.037 L1366.74 693.037 L1367.3 693.037 L1367.86 693.037 L1368.42 693.037 L1368.98 693.037 L1369.54 693.037 L1370.1 693.037 L1370.66 693.037 L1371.21 693.037 L1371.77 693.037 L1372.33 693.037 L1372.89 693.037 L1373.45 693.037 L1374.01 693.037 L1374.57 693.037 L1375.13 693.037 L1375.69 693.037 L1376.25 693.037 L1376.81 693.037 L1377.37 693.037 L1377.93 693.037 L1378.49 693.037 L1379.04 693.037 L1379.6 693.037 L1380.16 693.037 L1380.72 693.037 L1381.28 693.037 L1381.84 693.037 L1382.4 693.037 L1382.96 693.037 L1383.52 693.037 L1384.08 693.037 L1384.64 693.037 L1385.2 693.037 L1385.76 693.037 L1386.31 693.037 L1386.87 693.037 L1387.43 693.037 L1387.99 693.037 L1388.55 693.037 L1389.11 693.037 L1389.67 693.037 L1390.23 693.037 L1390.79 693.037 L1391.35 693.037 L1391.91 693.037 L1392.47 693.037 L1393.03 693.037 L1393.58 693.037 L1394.14 693.037 L1394.7 693.037 L1395.26 693.037 L1395.82 693.037 L1396.38 693.037 L1396.94 693.037 L1397.5 693.037 L1398.06 693.037 L1398.62 693.037 L1399.18 693.037 L1399.74 693.037 L1400.3 693.037 L1400.86 693.037 L1401.41 693.037 L1401.97 693.037 L1402.53 693.037 L1403.09 693.037 L1403.65 693.037 L1404.21 693.037 L1404.77 693.037 L1405.33 693.037 L1405.89 693.037 L1406.45 693.037 L1407.01 693.037 L1407.57 693.037 L1408.13 693.037 L1408.68 693.037 L1409.24 693.037 L1409.8 693.037 L1410.36 693.037 L1410.92 693.037 L1411.48 693.037 L1412.04 693.037 L1412.6 693.037 L1413.16 693.037 L1413.72 693.037 L1414.28 693.037 L1414.84 693.037 L1415.4 693.037 L1415.95 693.037 L1416.51 693.037 L1417.07 693.037 L1417.63 693.037 L1418.19 693.037 L1418.75 693.037 L1419.31 693.037 L1419.87 693.037 L1420.43 693.037 L1420.99 693.037 L1421.55 693.037 L1422.11 693.037 L1422.67 693.037 L1423.23 693.037 L1423.78 693.037 L1424.34 693.037 L1424.9 693.037 L1425.46 693.037 L1426.02 693.037 L1426.58 693.037 L1427.14 693.037 L1427.7 693.037 L1428.26 693.037 L1428.82 693.037 L1429.38 693.037 L1429.94 693.037 L1430.5 693.037 L1431.05 693.037 L1431.61 693.037 L1432.17 693.037 L1432.73 693.037 L1433.29 693.037 L1433.85 693.037 L1434.41 693.037 L1434.97 693.037 L1435.53 693.037 L1436.09 693.037 L1436.65 693.037 L1437.21 693.037 L1437.77 693.037 L1438.33 693.037 L1438.88 693.037 L1439.44 693.037 L1440 693.037 L1440.56 693.037 L1441.12 693.037 L1441.68 693.037 L1442.24 693.037 L1442.8 693.037 L1443.36 693.037 L1443.92 693.037 L1444.48 693.037 L1445.04 693.037 L1445.6 693.037 L1446.15 693.037 L1446.71 693.037 L1447.27 693.037 L1447.83 693.037 L1448.39 693.037 L1448.95 693.037 L1449.51 693.037 L1450.07 693.037 L1450.63 693.037 L1451.19 693.037 L1451.75 693.037 L1452.31 693.037 L1452.87 693.037 L1453.42 693.037 L1453.98 693.037 L1454.54 693.037 L1455.1 693.037 L1455.66 693.037 L1456.22 693.037 L1456.78 693.037 L1457.34 693.037 L1457.9 693.037 L1458.46 693.037 L1459.02 693.037 L1459.58 693.037 L1460.14 693.037 L1460.7 693.037 L1461.25 693.037 L1461.81 693.037 L1462.37 693.037 L1462.93 693.037 L1463.49 693.037 L1464.05 693.037 L1464.61 693.037 L1465.17 693.037 L1465.73 693.037 L1466.29 693.037 L1466.85 693.037 L1467.41 693.037 L1467.97 693.037 L1468.52 693.037 L1469.08 693.037 L1469.64 693.037 L1470.2 693.037 L1470.76 693.037 L1471.32 693.037 L1471.88 693.037 L1472.44 693.037 L1473 693.037 L1473.56 693.037 L1474.12 693.037 L1474.68 693.037 L1475.24 693.037 L1475.79 693.037 L1476.35 693.037 L1476.91 693.037 L1477.47 693.037 L1478.03 693.037 L1478.59 693.037 L1479.15 693.037 L1479.71 693.037 L1480.27 693.037 L1480.83 693.037 L1481.39 693.037 L1481.95 693.037 L1482.51 693.037 L1483.07 693.037 L1483.62 693.037 L1484.18 693.037 L1484.74 693.037 L1485.3 693.037 L1485.86 693.037 L1486.42 693.037 L1486.98 693.037 L1487.54 693.037 L1488.1 693.037 L1488.66 693.037 L1489.22 693.037 L1489.78 693.037 L1490.34 693.037 L1490.89 693.037 L1491.45 693.037 L1492.01 693.037 L1492.57 693.037 L1493.13 693.037 L1493.69 693.037 L1494.25 693.037 L1494.81 693.037 L1495.37 693.037 L1495.93 693.037 L1496.49 693.037 L1497.05 693.037 L1497.61 693.037 L1498.16 693.037 L1498.72 693.037 L1499.28 693.037 L1499.84 693.037 L1500.4 693.037 L1500.96 693.037 L1501.52 693.037 L1502.08 693.037 L1502.64 693.037 L1503.2 693.037 L1503.76 693.037 L1504.32 693.037 L1504.88 693.037 L1505.44 693.037 L1505.99 693.037 L1506.55 693.037 L1507.11 693.037 L1507.67 693.037 L1508.23 693.037 L1508.79 693.037 L1509.35 693.037 L1509.91 693.037 L1510.47 693.037 L1511.03 693.037 L1511.59 693.037 L1512.15 693.037 L1512.71 693.037 L1513.26 693.037 L1513.82 693.037 L1514.38 693.037 L1514.94 693.037 L1515.5 693.037 L1516.06 693.037 L1516.62 693.037 L1517.18 693.037 L1517.74 693.037 L1518.3 693.037 L1518.86 693.037 L1519.42 693.037 L1519.98 693.037 L1520.53 693.037 L1521.09 693.037 L1521.65 693.037 L1522.21 693.037 L1522.77 693.037 L1523.33 693.037 L1523.89 693.037 L1524.45 693.037 L1525.01 693.037 L1525.57 693.037 L1526.13 693.037 L1526.69 693.037 L1527.25 693.037 L1527.81 693.037 L1528.36 693.037 L1528.92 693.037 L1529.48 693.037 L1530.04 693.037 L1530.6 693.037 L1531.16 693.037 L1531.72 693.037 L1532.28 693.037 L1532.84 693.037 L1533.4 693.037 L1533.96 693.037 L1534.52 693.037 L1535.08 693.037 L1535.63 693.037 L1536.19 693.037 L1536.75 693.037 L1537.31 693.037 L1537.87 693.037 L1538.43 693.037 L1538.99 693.037 L1539.55 693.037 L1540.11 693.037 L1540.67 693.037 L1541.23 693.037 L1541.79 693.037 L1542.35 693.037 L1542.9 693.037 L1543.46 693.037 L1544.02 693.037 L1544.58 693.037 L1545.14 693.037 L1545.7 693.037 L1546.26 693.037 L1546.82 693.037 L1547.38 693.037 L1547.94 693.037 L1548.5 693.037 L1549.06 693.037 L1549.62 693.037 L1550.18 693.037 L1550.73 693.037 L1551.29 693.037 L1551.85 693.037 L1552.41 693.037 L1552.97 693.037 L1553.53 693.037 L1554.09 693.037 L1554.65 693.037 L1555.21 693.037 L1555.77 693.037 L1556.33 693.037 L1556.89 693.037 L1557.45 693.037 L1558 693.037 L1558.56 693.037 L1559.12 693.037 L1559.68 693.037 L1560.24 693.037 L1560.8 693.037 L1561.36 693.037 L1561.92 693.037 L1562.48 693.037 L1563.04 693.037 L1563.6 693.037 L1564.16 693.037 L1564.72 693.037 L1565.28 693.037 L1565.83 693.037 L1566.39 693.037 L1566.95 693.037 L1567.51 693.037 L1568.07 693.037 L1568.63 693.037 L1569.19 693.037 L1569.75 693.037 L1570.31 693.037 L1570.87 693.037 L1571.43 693.037 L1571.99 693.037 L1572.55 693.037 L1573.1 693.037 L1573.66 693.037 L1574.22 693.037 L1574.78 693.037 L1575.34 693.037 L1575.9 693.037 L1576.46 693.037 L1577.02 693.037 L1577.58 693.037 L1578.14 693.037 L1578.7 693.037 L1579.26 693.037 L1579.82 693.037 L1580.37 693.037 L1580.93 693.037 L1581.49 693.037 L1582.05 693.037 L1582.61 693.037 L1583.17 693.037 L1583.73 693.037 L1584.29 693.037 L1584.85 693.037 L1585.41 693.037 L1585.97 693.037 L1586.53 693.037 L1587.09 693.037 L1587.65 693.037 L1588.2 693.037 L1588.76 693.037 L1589.32 693.037 L1589.88 693.037 L1590.44 693.037 L1591 693.037 L1591.56 693.037 L1592.12 693.037 L1592.68 693.037 L1593.24 693.037 L1593.8 693.037 L1594.36 693.037 L1594.92 693.037 L1595.47 693.037 L1596.03 693.037 L1596.59 693.037 L1597.15 693.037 L1597.71 693.037 L1598.27 693.037 L1598.83 693.037 L1599.39 693.037 L1599.95 693.037 L1600.51 693.037 L1601.07 693.037 L1601.63 693.037 L1602.19 693.037 L1602.74 693.037 L1603.3 693.037 L1603.86 693.037 L1604.42 693.037 L1604.98 693.037 L1605.54 693.037 L1606.1 693.037 L1606.66 693.037 L1607.22 693.037 L1607.78 693.037 L1608.34 693.037 L1608.9 693.037 L1609.46 693.037 L1610.02 693.037 L1610.57 693.037 L1611.13 693.037 L1611.69 693.037 L1612.25 693.037 L1612.81 693.037 L1613.37 693.037 L1613.93 693.037 L1614.49 693.037 L1615.05 693.037 L1615.61 693.037 L1616.17 693.037 L1616.73 693.037 L1617.29 693.037 L1617.84 693.037 L1618.4 693.037 L1618.96 693.037 L1619.52 693.037 L1620.08 693.037 L1620.64 693.037 L1621.2 693.037 L1621.76 693.037 L1622.32 693.037 L1622.88 693.037 L1623.44 693.037 L1624 693.037 L1624.56 693.037 L1625.11 693.037 L1625.67 693.037 L1626.23 693.037 L1626.79 693.037 L1627.35 693.037 L1627.91 693.037 L1628.47 693.037 L1629.03 693.037 L1629.59 693.037 L1630.15 693.037 L1630.71 693.037 L1631.27 693.037 L1631.83 693.037 L1632.39 693.037 L1632.94 693.037 L1633.5 693.037 L1634.06 693.037 L1634.62 693.037 L1635.18 693.037 L1635.74 693.037 L1636.3 693.037 L1636.86 693.037 L1637.42 693.037 L1637.98 693.037 L1638.54 693.037 L1639.1 693.037 L1639.66 693.037 L1640.21 693.037 L1640.77 693.037 L1641.33 693.037 L1641.89 693.037 L1642.45 693.037 L1643.01 693.037 L1643.57 693.037 L1644.13 693.037 L1644.69 693.037 L1645.25 693.037 L1645.81 693.037 L1646.37 693.037 L1646.93 693.037 L1647.48 693.037 L1648.04 693.037 L1648.6 693.037 L1649.16 693.037 L1649.72 693.037 L1650.28 693.037 L1650.84 693.037 L1651.4 693.037 L1651.96 693.037 L1652.52 693.037 L1653.08 693.037 L1653.64 693.037 L1654.2 693.037 L1654.76 693.037 L1655.31 693.037 L1655.87 693.037 L1656.43 693.037 L1656.99 693.037 L1657.55 693.037 L1658.11 693.037 L1658.67 693.037 L1659.23 693.037 L1659.79 693.037 L1660.35 693.037 L1660.91 693.037 L1661.47 693.037 L1662.03 693.037 L1662.58 693.037 L1663.14 693.037 L1663.7 693.037 L1664.26 693.037 L1664.82 693.037 L1665.38 693.037 L1665.94 693.037 L1666.5 693.037 L1667.06 693.037 L1667.62 693.037 L1668.18 693.037 L1668.74 693.037 L1669.3 693.037 L1669.85 693.037 L1670.41 693.037 L1670.97 693.037 L1671.53 693.037 L1672.09 693.037 L1672.65 693.037 L1673.21 693.037 L1673.77 693.037 L1674.33 693.037 L1674.89 693.037 L1675.45 693.037 L1676.01 693.037 L1676.57 693.037 L1677.13 693.037 L1677.68 693.037 L1678.24 693.037 L1678.8 693.037 L1679.36 693.037 L1679.92 693.037 L1680.48 693.037 L1681.04 693.037 L1681.6 693.037 L1682.16 693.037 L1682.72 693.037 L1683.28 693.037 L1683.84 693.037 L1684.4 693.037 L1684.95 693.037 L1685.51 693.037 L1686.07 693.037 L1686.63 693.037 L1687.19 693.037 L1687.75 693.037 L1688.31 693.037 L1688.87 693.037 L1689.43 693.037 L1689.99 693.037 L1690.55 693.037 L1691.11 693.037 L1691.67 693.037 L1692.23 693.037 L1692.78 693.037 L1693.34 693.037 L1693.9 693.037 L1694.46 693.037 L1695.02 693.037 L1695.58 693.037 L1696.14 693.037 L1696.7 693.037 L1697.26 693.037 L1697.82 693.037 L1698.38 693.037 L1698.94 693.037 L1699.5 693.037 L1700.05 693.037 L1700.61 693.037 L1701.17 693.037 L1701.73 693.037 L1702.29 693.037 L1702.85 693.037 L1703.41 693.037 L1703.97 693.037 L1704.53 693.037 L1705.09 693.037 L1705.65 693.037 L1706.21 693.037 L1706.77 693.037 L1707.32 693.037 L1707.88 693.037 L1708.44 693.037 L1709 693.037 L1709.56 693.037 L1710.12 693.037 L1710.68 693.037 L1711.24 693.037 L1711.8 693.037 L1712.36 693.037 L1712.92 693.037 L1713.48 693.037 L1714.04 693.037 L1714.6 693.037 L1715.15 693.037 L1715.71 693.037 L1716.27 693.037 L1716.83 693.037 L1717.39 693.037 L1717.95 693.037 L1718.51 693.037 L1719.07 693.037 L1719.63 693.037 L1720.19 693.037 L1720.75 693.037 L1721.31 693.037 L1721.87 693.037 L1722.42 693.037 L1722.98 693.037 L1723.54 693.037 L1724.1 693.037 L1724.66 693.037 L1725.22 693.037 L1725.78 693.037 L1726.34 693.037 L1726.9 693.037 L1727.46 693.037 L1728.02 693.037 L1728.58 693.037 L1729.14 693.037 L1729.69 693.037 L1730.25 693.037 L1730.81 693.037 L1731.37 693.037 L1731.93 693.037 L1732.49 693.037 L1733.05 693.037 L1733.61 693.037 L1734.17 693.037 L1734.73 693.037 L1735.29 693.037 L1735.85 693.037 L1736.41 693.037 L1736.97 693.037 L1737.52 693.037 L1738.08 693.037 L1738.64 693.037 L1739.2 693.037 L1739.76 693.037 L1740.32 693.037 L1740.88 693.037 L1741.44 693.037 L1742 693.037 L1742.56 693.037 L1743.12 693.037 L1743.68 693.037 L1744.24 693.037 L1744.79 693.037 L1745.35 693.037 L1745.91 693.037 L1746.47 693.037 L1747.03 693.037 L1747.59 693.037 L1748.15 693.037 L1748.71 693.037 L1749.27 693.037 L1749.83 693.037 L1750.39 693.037 L1750.95 693.037 L1751.51 693.037 L1752.06 693.037 L1752.62 693.037 L1753.18 693.037 L1753.74 693.037 L1754.3 693.037 L1754.86 693.037 L1755.42 693.037 L1755.98 693.037 L1756.54 693.037 L1757.1 693.037 L1757.66 693.037 L1758.22 693.037 L1758.78 693.037 L1759.34 693.037 L1759.89 693.037 L1760.45 693.037 L1761.01 693.037 L1761.57 693.037 L1762.13 693.037 L1762.69 693.037 L1763.25 693.037 L1763.81 693.037 L1764.37 693.037 L1764.93 693.037 L1765.49 693.037 L1766.05 693.037 L1766.61 693.037 L1767.16 693.037 L1767.72 693.037 L1768.28 693.037 L1768.84 693.037 L1769.4 693.037 L1769.96 693.037 L1770.52 693.037 L1771.08 693.037 L1771.64 693.037 L1772.2 693.037 L1772.76 693.037 L1773.32 693.037 L1773.88 693.037 L1774.43 693.037 L1774.99 693.037 L1775.55 693.037 L1776.11 693.037 L1776.67 693.037 L1777.23 693.037 L1777.79 693.037 L1778.35 693.037 L1778.91 693.037 L1779.47 693.037 L1780.03 693.037 L1780.59 693.037 L1781.15 693.037 L1781.71 693.037 L1782.26 693.037 L1782.82 693.037 L1783.38 693.037 L1783.94 693.037 L1784.5 693.037 L1785.06 693.037 L1785.62 693.037 L1786.18 693.037 L1786.74 693.037 L1787.3 693.037 L1787.86 693.037 L1788.42 693.037 L1788.98 693.037 L1789.53 693.037 L1790.09 693.037 L1790.65 693.037 L1791.21 693.037 L1791.77 693.037 L1792.33 693.037 L1792.89 693.037 L1793.45 693.037 L1794.01 693.037 L1794.57 693.037 L1795.13 693.037 L1795.69 693.037 L1796.25 693.037 L1796.8 693.037 L1797.36 693.037 L1797.92 693.037 L1798.48 693.037 L1799.04 693.037 L1799.6 693.037 L1800.16 693.037 L1800.72 693.037 L1801.28 693.037 L1801.84 693.037 L1802.4 693.037 L1802.96 693.037 L1803.52 693.037 L1804.08 693.037 L1804.63 693.037 L1805.19 693.037 L1805.75 693.037 L1806.31 693.037 L1806.87 693.037 L1807.43 693.037 L1807.99 693.037 L1808.55 693.037 L1809.11 693.037 L1809.67 693.037 L1810.23 693.037 L1810.79 693.037 L1811.35 693.037 L1811.9 693.037 L1812.46 693.037 L1813.02 693.037 L1813.58 693.037 L1814.14 693.037 L1814.7 693.037 L1815.26 693.037 L1815.82 693.037 L1816.38 693.037 L1816.94 693.037 L1817.5 693.037 L1818.06 693.037 L1818.62 693.037 L1819.18 693.037 L1819.73 693.037 L1820.29 693.037 L1820.85 693.037 L1821.41 693.037 L1821.97 693.037 L1822.53 693.037 L1823.09 693.037 L1823.65 693.037 L1824.21 693.037 L1824.77 693.037 L1825.33 693.037 L1825.89 693.037 L1826.45 693.037 L1827 693.037 L1827.56 693.037 L1828.12 693.037 L1828.68 693.037 L1829.24 693.037 L1829.8 693.037 L1830.36 693.037 L1830.92 693.037 L1831.48 693.037 L1832.04 693.037 L1832.6 693.037 L1833.16 693.037 L1833.72 693.037 L1834.27 693.037 L1834.83 693.037 L1835.39 693.037 L1835.95 693.037 L1836.51 693.037 L1837.07 693.037 L1837.63 693.037 L1838.19 693.037 L1838.19 683.098 L1837.63 683.098 L1837.07 683.098 L1836.51 683.098 L1835.95 683.098 L1835.39 683.098 L1834.83 683.098 L1834.27 683.098 L1833.72 683.098 L1833.16 683.098 L1832.6 683.098 L1832.04 683.098 L1831.48 683.098 L1830.92 683.098 L1830.36 683.098 L1829.8 683.098 L1829.24 683.098 L1828.68 683.098 L1828.12 683.098 L1827.56 683.098 L1827 683.098 L1826.45 683.098 L1825.89 683.098 L1825.33 683.098 L1824.77 683.098 L1824.21 683.098 L1823.65 683.098 L1823.09 683.098 L1822.53 683.098 L1821.97 683.098 L1821.41 683.098 L1820.85 683.098 L1820.29 683.098 L1819.73 683.098 L1819.18 683.098 L1818.62 683.098 L1818.06 683.098 L1817.5 683.098 L1816.94 683.098 L1816.38 683.098 L1815.82 683.098 L1815.26 683.098 L1814.7 683.098 L1814.14 683.098 L1813.58 683.098 L1813.02 683.098 L1812.46 683.098 L1811.9 683.098 L1811.35 683.098 L1810.79 683.098 L1810.23 683.098 L1809.67 683.098 L1809.11 683.098 L1808.55 683.098 L1807.99 683.098 L1807.43 683.098 L1806.87 683.098 L1806.31 683.098 L1805.75 683.098 L1805.19 683.098 L1804.63 683.098 L1804.08 683.098 L1803.52 683.098 L1802.96 683.098 L1802.4 683.098 L1801.84 683.098 L1801.28 683.098 L1800.72 683.098 L1800.16 683.098 L1799.6 683.098 L1799.04 683.098 L1798.48 683.098 L1797.92 683.098 L1797.36 683.098 L1796.8 683.098 L1796.25 683.098 L1795.69 683.098 L1795.13 683.098 L1794.57 683.098 L1794.01 683.098 L1793.45 683.098 L1792.89 683.098 L1792.33 683.098 L1791.77 683.098 L1791.21 683.098 L1790.65 683.098 L1790.09 683.098 L1789.53 683.098 L1788.98 683.098 L1788.42 683.098 L1787.86 683.098 L1787.3 683.098 L1786.74 683.098 L1786.18 683.098 L1785.62 683.098 L1785.06 683.098 L1784.5 683.098 L1783.94 683.098 L1783.38 683.098 L1782.82 683.098 L1782.26 683.098 L1781.71 683.098 L1781.15 683.098 L1780.59 683.098 L1780.03 683.098 L1779.47 683.098 L1778.91 683.098 L1778.35 683.098 L1777.79 683.098 L1777.23 683.098 L1776.67 683.098 L1776.11 683.098 L1775.55 683.098 L1774.99 683.098 L1774.43 683.098 L1773.88 683.098 L1773.32 683.098 L1772.76 683.098 L1772.2 683.098 L1771.64 683.098 L1771.08 683.098 L1770.52 683.098 L1769.96 683.098 L1769.4 683.098 L1768.84 683.098 L1768.28 683.098 L1767.72 683.098 L1767.16 683.098 L1766.61 683.098 L1766.05 683.098 L1765.49 683.098 L1764.93 683.098 L1764.37 683.098 L1763.81 683.098 L1763.25 683.098 L1762.69 683.098 L1762.13 683.098 L1761.57 683.098 L1761.01 683.098 L1760.45 683.098 L1759.89 683.098 L1759.34 683.098 L1758.78 683.098 L1758.22 683.098 L1757.66 683.098 L1757.1 683.098 L1756.54 683.098 L1755.98 683.098 L1755.42 683.098 L1754.86 683.098 L1754.3 683.098 L1753.74 683.098 L1753.18 683.098 L1752.62 683.098 L1752.06 683.098 L1751.51 683.098 L1750.95 683.098 L1750.39 683.098 L1749.83 683.098 L1749.27 683.098 L1748.71 683.098 L1748.15 683.098 L1747.59 683.098 L1747.03 683.098 L1746.47 683.098 L1745.91 683.098 L1745.35 683.098 L1744.79 683.098 L1744.24 683.098 L1743.68 683.098 L1743.12 683.098 L1742.56 683.098 L1742 683.098 L1741.44 683.098 L1740.88 683.098 L1740.32 683.098 L1739.76 683.098 L1739.2 683.098 L1738.64 683.098 L1738.08 683.098 L1737.52 683.098 L1736.97 683.098 L1736.41 683.098 L1735.85 683.098 L1735.29 683.098 L1734.73 683.098 L1734.17 683.098 L1733.61 683.098 L1733.05 683.098 L1732.49 683.098 L1731.93 683.098 L1731.37 683.098 L1730.81 683.098 L1730.25 683.098 L1729.69 683.098 L1729.14 683.098 L1728.58 683.098 L1728.02 683.098 L1727.46 683.098 L1726.9 683.098 L1726.34 683.098 L1725.78 683.098 L1725.22 683.098 L1724.66 683.098 L1724.1 683.098 L1723.54 683.098 L1722.98 683.098 L1722.42 683.098 L1721.87 683.098 L1721.31 683.098 L1720.75 683.098 L1720.19 683.098 L1719.63 683.098 L1719.07 683.098 L1718.51 683.098 L1717.95 683.098 L1717.39 683.098 L1716.83 683.098 L1716.27 683.098 L1715.71 683.098 L1715.15 683.098 L1714.6 683.098 L1714.04 683.098 L1713.48 683.098 L1712.92 683.098 L1712.36 683.098 L1711.8 683.098 L1711.24 683.098 L1710.68 683.098 L1710.12 683.098 L1709.56 683.098 L1709 683.098 L1708.44 683.098 L1707.88 683.098 L1707.32 683.098 L1706.77 683.098 L1706.21 683.098 L1705.65 683.098 L1705.09 683.098 L1704.53 683.098 L1703.97 683.098 L1703.41 683.098 L1702.85 683.098 L1702.29 683.098 L1701.73 683.098 L1701.17 683.098 L1700.61 683.098 L1700.05 683.098 L1699.5 683.098 L1698.94 683.098 L1698.38 683.098 L1697.82 683.098 L1697.26 683.098 L1696.7 683.098 L1696.14 683.098 L1695.58 683.098 L1695.02 683.098 L1694.46 683.098 L1693.9 683.098 L1693.34 683.098 L1692.78 683.098 L1692.23 683.098 L1691.67 683.098 L1691.11 683.098 L1690.55 683.098 L1689.99 683.098 L1689.43 683.098 L1688.87 683.098 L1688.31 683.098 L1687.75 683.098 L1687.19 683.098 L1686.63 683.098 L1686.07 683.098 L1685.51 683.098 L1684.95 683.098 L1684.4 683.098 L1683.84 683.098 L1683.28 683.098 L1682.72 683.098 L1682.16 683.098 L1681.6 683.098 L1681.04 683.098 L1680.48 683.098 L1679.92 683.098 L1679.36 683.098 L1678.8 683.098 L1678.24 683.098 L1677.68 683.098 L1677.13 683.098 L1676.57 683.098 L1676.01 683.098 L1675.45 683.098 L1674.89 683.098 L1674.33 683.098 L1673.77 683.098 L1673.21 683.098 L1672.65 683.098 L1672.09 683.098 L1671.53 683.098 L1670.97 683.098 L1670.41 683.098 L1669.85 683.098 L1669.3 683.098 L1668.74 683.098 L1668.18 683.098 L1667.62 683.098 L1667.06 683.098 L1666.5 683.098 L1665.94 683.098 L1665.38 683.098 L1664.82 683.098 L1664.26 683.098 L1663.7 683.098 L1663.14 683.098 L1662.58 683.098 L1662.03 683.098 L1661.47 683.098 L1660.91 683.098 L1660.35 683.098 L1659.79 683.098 L1659.23 683.098 L1658.67 683.098 L1658.11 683.098 L1657.55 683.098 L1656.99 683.098 L1656.43 683.098 L1655.87 683.098 L1655.31 683.098 L1654.76 683.098 L1654.2 683.098 L1653.64 683.098 L1653.08 683.098 L1652.52 683.098 L1651.96 683.098 L1651.4 683.098 L1650.84 683.098 L1650.28 683.098 L1649.72 683.098 L1649.16 683.098 L1648.6 683.098 L1648.04 683.098 L1647.48 683.098 L1646.93 683.098 L1646.37 683.098 L1645.81 683.098 L1645.25 683.098 L1644.69 683.098 L1644.13 683.098 L1643.57 683.098 L1643.01 683.098 L1642.45 683.098 L1641.89 683.098 L1641.33 683.098 L1640.77 683.098 L1640.21 683.098 L1639.66 683.098 L1639.1 683.098 L1638.54 683.098 L1637.98 683.098 L1637.42 683.098 L1636.86 683.098 L1636.3 683.098 L1635.74 683.098 L1635.18 683.098 L1634.62 683.098 L1634.06 683.098 L1633.5 683.098 L1632.94 683.098 L1632.39 683.098 L1631.83 683.098 L1631.27 683.098 L1630.71 683.098 L1630.15 683.098 L1629.59 683.098 L1629.03 683.098 L1628.47 683.098 L1627.91 683.098 L1627.35 683.098 L1626.79 683.098 L1626.23 683.098 L1625.67 683.098 L1625.11 683.098 L1624.56 683.098 L1624 683.098 L1623.44 683.098 L1622.88 683.098 L1622.32 683.098 L1621.76 683.098 L1621.2 683.098 L1620.64 683.098 L1620.08 683.098 L1619.52 683.098 L1618.96 683.098 L1618.4 683.098 L1617.84 683.098 L1617.29 683.098 L1616.73 683.098 L1616.17 683.098 L1615.61 683.098 L1615.05 683.098 L1614.49 683.098 L1613.93 683.098 L1613.37 683.098 L1612.81 683.098 L1612.25 683.098 L1611.69 683.098 L1611.13 683.098 L1610.57 683.098 L1610.02 683.098 L1609.46 683.098 L1608.9 683.098 L1608.34 683.098 L1607.78 683.098 L1607.22 683.098 L1606.66 683.098 L1606.1 683.098 L1605.54 683.098 L1604.98 683.098 L1604.42 683.098 L1603.86 683.098 L1603.3 683.098 L1602.74 683.098 L1602.19 683.098 L1601.63 683.098 L1601.07 683.098 L1600.51 683.098 L1599.95 683.098 L1599.39 683.098 L1598.83 683.098 L1598.27 683.098 L1597.71 683.098 L1597.15 683.098 L1596.59 683.098 L1596.03 683.098 L1595.47 683.098 L1594.92 683.098 L1594.36 683.098 L1593.8 683.098 L1593.24 683.098 L1592.68 683.098 L1592.12 683.098 L1591.56 683.098 L1591 683.098 L1590.44 683.098 L1589.88 683.098 L1589.32 683.098 L1588.76 683.098 L1588.2 683.098 L1587.65 683.098 L1587.09 683.098 L1586.53 683.098 L1585.97 683.098 L1585.41 683.098 L1584.85 683.098 L1584.29 683.098 L1583.73 683.098 L1583.17 683.098 L1582.61 683.098 L1582.05 683.098 L1581.49 683.098 L1580.93 683.098 L1580.37 683.098 L1579.82 683.098 L1579.26 683.098 L1578.7 683.098 L1578.14 683.098 L1577.58 683.098 L1577.02 683.098 L1576.46 683.098 L1575.9 683.098 L1575.34 683.098 L1574.78 683.098 L1574.22 683.098 L1573.66 683.098 L1573.1 683.098 L1572.55 683.098 L1571.99 683.098 L1571.43 683.098 L1570.87 683.098 L1570.31 683.098 L1569.75 683.098 L1569.19 683.098 L1568.63 683.098 L1568.07 683.098 L1567.51 683.098 L1566.95 683.098 L1566.39 683.098 L1565.83 683.098 L1565.28 683.098 L1564.72 683.098 L1564.16 683.098 L1563.6 683.098 L1563.04 683.098 L1562.48 683.098 L1561.92 683.098 L1561.36 683.098 L1560.8 683.098 L1560.24 683.098 L1559.68 683.098 L1559.12 683.098 L1558.56 683.098 L1558 683.098 L1557.45 683.098 L1556.89 683.098 L1556.33 683.098 L1555.77 683.098 L1555.21 683.098 L1554.65 683.098 L1554.09 683.098 L1553.53 683.098 L1552.97 683.098 L1552.41 683.098 L1551.85 683.098 L1551.29 683.098 L1550.73 683.098 L1550.18 683.098 L1549.62 683.098 L1549.06 683.098 L1548.5 683.098 L1547.94 683.098 L1547.38 683.098 L1546.82 683.098 L1546.26 683.098 L1545.7 683.098 L1545.14 683.098 L1544.58 683.098 L1544.02 683.098 L1543.46 683.098 L1542.9 683.098 L1542.35 683.098 L1541.79 683.098 L1541.23 683.098 L1540.67 683.098 L1540.11 683.098 L1539.55 683.098 L1538.99 683.098 L1538.43 683.098 L1537.87 683.098 L1537.31 683.098 L1536.75 683.098 L1536.19 683.098 L1535.63 683.098 L1535.08 683.098 L1534.52 683.098 L1533.96 683.098 L1533.4 683.098 L1532.84 683.098 L1532.28 683.098 L1531.72 683.098 L1531.16 683.098 L1530.6 683.098 L1530.04 683.098 L1529.48 683.098 L1528.92 683.098 L1528.36 683.098 L1527.81 683.098 L1527.25 683.098 L1526.69 683.098 L1526.13 683.098 L1525.57 683.098 L1525.01 683.098 L1524.45 683.098 L1523.89 683.098 L1523.33 683.098 L1522.77 683.098 L1522.21 683.098 L1521.65 683.098 L1521.09 683.098 L1520.53 683.098 L1519.98 683.098 L1519.42 683.098 L1518.86 683.098 L1518.3 683.098 L1517.74 683.098 L1517.18 683.098 L1516.62 683.098 L1516.06 683.098 L1515.5 683.098 L1514.94 683.098 L1514.38 683.098 L1513.82 683.098 L1513.26 683.098 L1512.71 683.098 L1512.15 683.098 L1511.59 683.098 L1511.03 683.098 L1510.47 683.098 L1509.91 683.098 L1509.35 683.098 L1508.79 683.098 L1508.23 683.098 L1507.67 683.098 L1507.11 683.098 L1506.55 683.098 L1505.99 683.098 L1505.44 683.098 L1504.88 683.098 L1504.32 683.098 L1503.76 683.098 L1503.2 683.098 L1502.64 683.098 L1502.08 683.098 L1501.52 683.098 L1500.96 683.098 L1500.4 683.098 L1499.84 683.098 L1499.28 683.098 L1498.72 683.098 L1498.16 683.098 L1497.61 683.098 L1497.05 683.098 L1496.49 683.098 L1495.93 683.098 L1495.37 683.098 L1494.81 683.098 L1494.25 683.098 L1493.69 683.098 L1493.13 683.098 L1492.57 683.098 L1492.01 683.098 L1491.45 683.098 L1490.89 683.098 L1490.34 683.098 L1489.78 683.098 L1489.22 683.098 L1488.66 683.098 L1488.1 683.098 L1487.54 683.098 L1486.98 683.098 L1486.42 683.098 L1485.86 683.098 L1485.3 683.098 L1484.74 683.098 L1484.18 683.098 L1483.62 683.098 L1483.07 683.098 L1482.51 683.098 L1481.95 683.098 L1481.39 683.098 L1480.83 683.098 L1480.27 683.098 L1479.71 683.098 L1479.15 683.098 L1478.59 683.098 L1478.03 683.098 L1477.47 683.098 L1476.91 683.098 L1476.35 683.098 L1475.79 683.098 L1475.24 683.098 L1474.68 683.098 L1474.12 683.098 L1473.56 683.098 L1473 683.098 L1472.44 683.098 L1471.88 683.098 L1471.32 683.098 L1470.76 683.098 L1470.2 683.098 L1469.64 683.098 L1469.08 683.098 L1468.52 683.098 L1467.97 683.098 L1467.41 683.098 L1466.85 683.098 L1466.29 683.098 L1465.73 683.098 L1465.17 683.098 L1464.61 683.098 L1464.05 683.098 L1463.49 683.098 L1462.93 683.098 L1462.37 683.098 L1461.81 683.098 L1461.25 683.098 L1460.7 683.098 L1460.14 683.098 L1459.58 683.098 L1459.02 683.098 L1458.46 683.098 L1457.9 683.098 L1457.34 683.098 L1456.78 683.098 L1456.22 683.098 L1455.66 683.098 L1455.1 683.098 L1454.54 683.098 L1453.98 683.098 L1453.42 683.098 L1452.87 683.098 L1452.31 683.098 L1451.75 683.098 L1451.19 683.098 L1450.63 683.098 L1450.07 683.098 L1449.51 683.098 L1448.95 683.098 L1448.39 683.098 L1447.83 683.098 L1447.27 683.098 L1446.71 683.098 L1446.15 683.098 L1445.6 683.098 L1445.04 683.098 L1444.48 683.098 L1443.92 683.098 L1443.36 683.098 L1442.8 683.098 L1442.24 683.098 L1441.68 683.098 L1441.12 683.098 L1440.56 683.098 L1440 683.098 L1439.44 683.098 L1438.88 683.098 L1438.33 683.098 L1437.77 683.098 L1437.21 683.098 L1436.65 683.098 L1436.09 683.098 L1435.53 683.098 L1434.97 683.098 L1434.41 683.098 L1433.85 683.098 L1433.29 683.098 L1432.73 683.098 L1432.17 683.098 L1431.61 683.098 L1431.05 683.098 L1430.5 683.098 L1429.94 683.098 L1429.38 683.098 L1428.82 683.098 L1428.26 683.098 L1427.7 683.098 L1427.14 683.098 L1426.58 683.098 L1426.02 683.098 L1425.46 683.098 L1424.9 683.098 L1424.34 683.098 L1423.78 683.098 L1423.23 683.098 L1422.67 683.098 L1422.11 683.098 L1421.55 683.098 L1420.99 683.098 L1420.43 683.098 L1419.87 683.098 L1419.31 683.098 L1418.75 683.098 L1418.19 683.098 L1417.63 683.098 L1417.07 683.098 L1416.51 683.098 L1415.95 683.098 L1415.4 683.098 L1414.84 683.098 L1414.28 683.098 L1413.72 683.098 L1413.16 683.098 L1412.6 683.098 L1412.04 683.098 L1411.48 683.098 L1410.92 683.098 L1410.36 683.098 L1409.8 683.098 L1409.24 683.098 L1408.68 683.098 L1408.13 683.098 L1407.57 683.098 L1407.01 683.098 L1406.45 683.098 L1405.89 683.098 L1405.33 683.098 L1404.77 683.098 L1404.21 683.098 L1403.65 683.098 L1403.09 683.098 L1402.53 683.098 L1401.97 683.098 L1401.41 683.098 L1400.86 683.098 L1400.3 683.098 L1399.74 683.098 L1399.18 683.098 L1398.62 683.098 L1398.06 683.098 L1397.5 683.098 L1396.94 683.098 L1396.38 683.098 L1395.82 683.098 L1395.26 683.098 L1394.7 683.098 L1394.14 683.098 L1393.58 683.098 L1393.03 683.098 L1392.47 683.098 L1391.91 683.098 L1391.35 683.098 L1390.79 683.098 L1390.23 683.098 L1389.67 683.098 L1389.11 683.098 L1388.55 683.098 L1387.99 683.098 L1387.43 683.098 L1386.87 683.098 L1386.31 683.098 L1385.76 683.098 L1385.2 683.098 L1384.64 683.098 L1384.08 683.098 L1383.52 683.098 L1382.96 683.098 L1382.4 683.098 L1381.84 683.098 L1381.28 683.098 L1380.72 683.098 L1380.16 683.098 L1379.6 683.098 L1379.04 683.098 L1378.49 683.098 L1377.93 683.098 L1377.37 683.098 L1376.81 683.098 L1376.25 683.098 L1375.69 683.098 L1375.13 683.098 L1374.57 683.098 L1374.01 683.098 L1373.45 683.098 L1372.89 683.098 L1372.33 683.098 L1371.77 683.098 L1371.21 683.098 L1370.66 683.098 L1370.1 683.098 L1369.54 683.098 L1368.98 683.098 L1368.42 683.098 L1367.86 683.098 L1367.3 683.098 L1366.74 683.098 L1366.18 683.098 L1365.62 683.098 L1365.06 683.098 L1364.5 683.098 L1363.94 683.098 L1363.39 683.098 L1362.83 683.098 L1362.27 683.098 L1361.71 683.098 L1361.15 683.098 L1360.59 683.098 L1360.03 683.098 L1359.47 683.098 L1358.91 683.098 L1358.35 683.098 L1357.79 683.098 L1357.23 683.098 L1356.67 683.098 L1356.12 683.098 L1355.56 683.098 L1355 683.098 L1354.44 683.098 L1353.88 683.098 L1353.32 683.098 L1352.76 683.098 L1352.2 683.098 L1351.64 683.098 L1351.08 683.098 L1350.52 683.098 L1349.96 683.098 L1349.4 683.098 L1348.84 683.098 L1348.29 683.098 L1347.73 683.098 L1347.17 683.098 L1346.61 683.098 L1346.05 683.098 L1345.49 683.098 L1344.93 683.098 L1344.37 683.098 L1343.81 683.098 L1343.25 683.098 L1342.69 683.098 L1342.13 683.098 L1341.57 683.098 L1341.02 683.098 L1340.46 683.098 L1339.9 683.098 L1339.34 683.098 L1338.78 683.098 L1338.22 683.098 L1337.66 683.098 L1337.1 683.098 L1336.54 683.098 L1335.98 683.098 L1335.42 683.098 L1334.86 683.098 L1334.3 683.098 L1333.75 683.098 L1333.19 683.098 L1332.63 683.098 L1332.07 683.098 L1331.51 683.098 L1330.95 683.098 L1330.39 683.098 L1329.83 683.098 L1329.27 683.098 L1328.71 683.098 L1328.15 683.098 L1327.59 683.098 L1327.03 683.098 L1326.47 683.098 L1325.92 683.098 L1325.36 683.098 L1324.8 683.098 L1324.24 683.098 L1323.68 683.098 L1323.12 683.098 L1322.56 683.098 L1322 683.098 L1321.44 683.098 L1320.88 683.098 L1320.32 683.098 L1319.76 683.098 L1319.2 683.098 L1318.65 683.098 L1318.09 683.098 L1317.53 683.098 L1316.97 683.098 L1316.41 683.098 L1315.85 683.098 L1315.29 683.098 L1314.73 683.098 L1314.17 683.098 L1313.61 683.098 L1313.05 683.098 L1312.49 683.098 L1311.93 683.098 L1311.38 683.098 L1310.82 683.098 L1310.26 683.098 L1309.7 683.098 L1309.14 683.098 L1308.58 683.098 L1308.02 683.098 L1307.46 683.098 L1306.9 683.098 L1306.34 683.098 L1305.78 683.098 L1305.22 683.098 L1304.66 683.098 L1304.1 683.098 L1303.55 683.098 L1302.99 683.098 L1302.43 683.098 L1301.87 683.098 L1301.31 683.098 L1300.75 683.098 L1300.19 683.098 L1299.63 683.098 L1299.07 683.098 L1298.51 683.098 L1297.95 683.098 L1297.39 683.098 L1296.83 683.098 L1296.28 683.098 L1295.72 683.098 L1295.16 683.098 L1294.6 683.098 L1294.04 683.098 L1293.48 683.098 L1292.92 683.098 L1292.36 683.098 L1291.8 683.098 L1291.24 683.098 L1290.68 683.098 L1290.12 683.098 L1289.56 683.098 L1289 683.098 L1288.45 683.098 L1287.89 683.098 L1287.33 683.098 L1286.77 683.098 L1286.21 683.098 L1285.65 683.098 L1285.09 683.098 L1284.53 683.098 L1283.97 683.098 L1283.41 683.098 L1282.85 683.098 L1282.29 683.098 L1281.73 683.098 L1281.18 683.098 L1280.62 683.098 L1280.06 683.098 L1279.5 683.098 L1278.94 683.098 L1278.38 683.098 L1277.82 683.098 L1277.26 683.098 L1276.7 683.098 L1276.14 683.098 L1275.58 683.098 L1275.02 683.098 L1274.46 683.098 L1273.91 683.098 L1273.35 683.098 L1272.79 683.098 L1272.23 683.098 L1271.67 683.098 L1271.11 683.098 L1270.55 683.098 L1269.99 683.098 L1269.43 683.098 L1268.87 683.098 L1268.31 683.098 L1267.75 683.098 L1267.19 683.098 L1266.63 683.098 L1266.08 683.098 L1265.52 683.098 L1264.96 683.098 L1264.4 683.098 L1263.84 683.098 L1263.28 683.098 L1262.72 683.098 L1262.16 683.098 L1261.6 683.098 L1261.04 683.098 L1260.48 683.098 L1259.92 683.098 L1259.36 683.098 L1258.81 683.098 L1258.25 683.098 L1257.69 683.098 L1257.13 683.098 L1256.57 683.098 L1256.01 683.098 L1255.45 683.098 L1254.89 683.098 L1254.33 683.098 L1253.77 683.098 L1253.21 683.098 L1252.65 683.098 L1252.09 683.098 L1251.54 683.098 L1250.98 683.098 L1250.42 683.098 L1249.86 683.098 L1249.3 683.098 L1248.74 683.098 L1248.18 683.098 L1247.62 683.098 L1247.06 683.098 L1246.5 683.098 L1245.94 683.098 L1245.38 683.098 L1244.82 683.098 L1244.26 683.098 L1243.71 683.098 L1243.15 683.098 L1242.59 683.098 L1242.03 683.098 L1241.47 683.098 L1240.91 683.098 L1240.35 683.098 L1239.79 683.098 L1239.23 683.098 L1238.67 683.098 L1238.11 683.098 L1237.55 683.098 L1236.99 683.098 L1236.44 683.098 L1235.88 683.098 L1235.32 683.098 L1234.76 683.098 L1234.2 683.098 L1233.64 683.098 L1233.08 683.098 L1232.52 683.098 L1231.96 683.098 L1231.4 683.098 L1230.84 683.098 L1230.28 683.098 L1229.72 683.098 L1229.17 683.098 L1228.61 683.098 L1228.05 683.098 L1227.49 683.098 L1226.93 683.098 L1226.37 683.098 L1225.81 683.098 L1225.25 683.098 L1224.69 683.098 L1224.13 683.098 L1223.57 683.098 L1223.01 683.098 L1222.45 683.098 L1221.89 683.098 L1221.34 683.098 L1220.78 683.098 L1220.22 683.098 L1219.66 683.098 L1219.1 683.098 L1218.54 683.098 L1217.98 683.098 L1217.42 683.098 L1216.86 683.098 L1216.3 683.098 L1215.74 683.098 L1215.18 683.098 L1214.62 683.098 L1214.07 683.098 L1213.51 683.098 L1212.95 683.098 L1212.39 683.098 L1211.83 683.098 L1211.27 683.098 L1210.71 683.098 L1210.15 683.098 L1209.59 683.098 L1209.03 683.098 L1208.47 683.098 L1207.91 683.098 L1207.35 683.098 L1206.8 683.098 L1206.24 683.098 L1205.68 683.098 L1205.12 683.098 L1204.56 683.098 L1204 683.098 L1203.44 683.098 L1202.88 683.098 L1202.32 683.098 L1201.76 683.098 L1201.2 683.098 L1200.64 683.098 L1200.08 683.098 L1199.52 683.098 L1198.97 683.098 L1198.41 683.098 L1197.85 683.098 L1197.29 683.098 L1196.73 683.098 L1196.17 683.098 L1195.61 683.098 L1195.05 683.098 L1194.49 683.098 L1193.93 683.098 L1193.37 683.098 L1192.81 683.098 L1192.25 683.098 L1191.7 683.098 L1191.14 683.098 L1190.58 683.098 L1190.02 683.098 L1189.46 683.098 L1188.9 683.098 L1188.34 683.098 L1187.78 683.098 L1187.22 683.098 L1186.66 683.098 L1186.1 683.098 L1185.54 683.098 L1184.98 683.098 L1184.43 683.098 L1183.87 683.098 L1183.31 683.098 L1182.75 683.098 L1182.19 683.098 L1181.63 683.098 L1181.07 683.098 L1180.51 683.098 L1179.95 683.098 L1179.39 683.098 L1178.83 683.098 L1178.27 683.098 L1177.71 683.098 L1177.15 683.098 L1176.6 683.098 L1176.04 683.098 L1175.48 683.098 L1174.92 683.098 L1174.36 683.098 L1173.8 683.098 L1173.24 683.098 L1172.68 683.098 L1172.12 683.098 L1171.56 683.098 L1171 683.098 L1170.44 683.098 L1169.88 683.098 L1169.33 683.098 L1168.77 683.098 L1168.21 683.098 L1167.65 683.098 L1167.09 683.098 L1166.53 683.098 L1165.97 683.098 L1165.41 683.098 L1164.85 683.098 L1164.29 683.098 L1163.73 683.098 L1163.17 683.098 L1162.61 683.098 L1162.05 683.098 L1161.5 683.098 L1160.94 683.098 L1160.38 683.098 L1159.82 683.098 L1159.26 683.098 L1158.7 683.098 L1158.14 683.098 L1157.58 683.098 L1157.02 683.098 L1156.46 683.098 L1155.9 683.098 L1155.34 683.098 L1154.78 683.098 L1154.23 683.098 L1153.67 683.098 L1153.11 683.098 L1152.55 683.098 L1151.99 683.098 L1151.43 683.098 L1150.87 683.098 L1150.31 683.098 L1149.75 683.098 L1149.19 683.098 L1148.63 683.098 L1148.07 683.098 L1147.51 683.098 L1146.96 683.098 L1146.4 683.098 L1145.84 683.098 L1145.28 683.098 L1144.72 683.098 L1144.16 683.098 L1143.6 683.098 L1143.04 683.098 L1142.48 683.098 L1141.92 683.098 L1141.36 683.098 L1140.8 683.098 L1140.24 683.098 L1139.68 683.098 L1139.13 683.098 L1138.57 683.098 L1138.01 683.098 L1137.45 683.098 L1136.89 683.098 L1136.33 683.098 L1135.77 683.098 L1135.21 683.098 L1134.65 683.098 L1134.09 683.098 L1133.53 683.098 L1132.97 683.098 L1132.41 683.098 L1131.86 683.098 L1131.3 683.098 L1130.74 683.098 L1130.18 683.098 L1129.62 683.098 L1129.06 683.098 L1128.5 683.098 L1127.94 683.098 L1127.38 683.098 L1126.82 683.098 L1126.26 683.098 L1125.7 683.098 L1125.14 683.098 L1124.59 683.098 L1124.03 683.098 L1123.47 683.098 L1122.91 683.098 L1122.35 683.098 L1121.79 683.098 L1121.23 683.098 L1120.67 683.098 L1120.11 683.098 L1119.55 683.098 L1118.99 683.098 L1118.43 683.098 L1117.87 683.098 L1117.31 683.098 L1116.76 683.098 L1116.2 683.098 L1115.64 683.098 L1115.08 683.098 L1114.52 683.098 L1113.96 683.098 L1113.4 683.098 L1112.84 683.098 L1112.28 683.098 L1111.72 683.098 L1111.16 683.098 L1110.6 683.098 L1110.04 683.098 L1109.49 683.098 L1108.93 683.098 L1108.37 683.098 L1107.81 683.098 L1107.25 683.098 L1106.69 683.098 L1106.13 683.098 L1105.57 683.098 L1105.01 683.098 L1104.45 683.098 L1103.89 683.098 L1103.33 683.098 L1102.77 683.098 L1102.22 683.098 L1101.66 683.098 L1101.1 683.098 L1100.54 683.098 L1099.98 683.098 L1099.42 683.098 L1098.86 683.098 L1098.3 683.098 L1097.74 683.098 L1097.18 683.098 L1096.62 683.098 L1096.06 683.098 L1095.5 683.098 L1094.94 683.098 L1094.39 683.098 L1093.83 683.098 L1093.27 683.098 L1092.71 683.098 L1092.15 683.098 L1091.59 683.098 L1091.03 683.098 L1090.47 683.098 L1089.91 683.098 L1089.35 683.098 L1088.79 683.098 L1088.23 683.098 L1087.67 683.098 L1087.12 683.098 L1086.56 683.098 L1086 683.098 L1085.44 683.098 L1084.88 683.098 L1084.32 683.098 L1083.76 683.098 L1083.2 683.098 L1082.64 683.098 L1082.08 683.098 L1081.52 683.098 L1080.96 683.098 L1080.4 683.098 L1079.85 683.098 L1079.29 683.098 L1078.73 683.098 L1078.17 683.098 L1077.61 683.098 L1077.05 683.098 L1076.49 683.098 L1075.93 683.098 L1075.37 683.098 L1074.81 683.098 L1074.25 683.098 L1073.69 683.098 L1073.13 683.098 L1072.57 683.098 L1072.02 683.098 L1071.46 683.098 L1070.9 683.098 L1070.34 683.098 L1069.78 683.098 L1069.22 683.098 L1068.66 683.098 L1068.1 683.098 L1067.54 683.098 L1066.98 683.098 L1066.42 683.098 L1065.86 683.098 L1065.3 683.098 L1064.75 683.098 L1064.19 683.098 L1063.63 683.098 L1063.07 683.098 L1062.51 683.098 L1061.95 683.098 L1061.39 683.098 L1060.83 683.098 L1060.27 683.098 L1059.71 683.098 L1059.15 683.098 L1058.59 683.098 L1058.03 683.098 L1057.48 683.098 L1056.92 683.098 L1056.36 683.098 L1055.8 683.098 L1055.24 683.098 L1054.68 683.098 L1054.12 683.098 L1053.56 683.098 L1053 683.098 L1052.44 683.098 L1051.88 683.098 L1051.32 683.098 L1050.76 683.098 L1050.2 683.098 L1049.65 683.098 L1049.09 683.098 L1048.53 683.098 L1047.97 683.098 L1047.41 683.098 L1046.85 683.098 L1046.29 683.098 L1045.73 683.098 L1045.17 683.098 L1044.61 683.098 L1044.05 683.098 L1043.49 683.098 L1042.93 683.098 L1042.38 683.098 L1041.82 683.098 L1041.26 683.098 L1040.7 683.098 L1040.14 683.098 L1039.58 683.098 L1039.02 683.098 L1038.46 683.098 L1037.9 683.098 L1037.34 683.098 L1036.78 683.098 L1036.22 683.098 L1035.66 683.098 L1035.1 683.098 L1034.55 683.098 L1033.99 683.098 L1033.43 683.098 L1032.87 683.098 L1032.31 683.098 L1031.75 683.098 L1031.19 683.098 L1030.63 683.098 L1030.07 683.098 L1029.51 683.098 L1028.95 683.098 L1028.39 683.098 L1027.83 683.098 L1027.28 683.098 L1026.72 683.098 L1026.16 683.098 L1025.6 683.098 L1025.04 683.098 L1024.48 683.098 L1023.92 683.098 L1023.36 683.098 L1022.8 683.098 L1022.24 683.098 L1021.68 683.098 L1021.12 683.098 L1020.56 683.098 L1020.01 683.098 L1019.45 683.098 L1018.89 683.098 L1018.33 683.098 L1017.77 683.098 L1017.21 683.098 L1016.65 683.098 L1016.09 683.098 L1015.53 683.098 L1014.97 683.098 L1014.41 683.098 L1013.85 683.098 L1013.29 683.098 L1012.73 683.098 L1012.18 683.098 L1011.62 683.098 L1011.06 683.098 L1010.5 683.098 L1009.94 683.098 L1009.38 683.098 L1008.82 683.098 L1008.26 683.098 L1007.7 683.098 L1007.14 683.098 L1006.58 683.098 L1006.02 683.098 L1005.46 683.098 L1004.91 683.098 L1004.35 683.098 L1003.79 683.098 L1003.23 683.098 L1002.67 683.098 L1002.11 683.098 L1001.55 683.098 L1000.99 683.098 L1000.43 683.098 L999.872 683.098 L999.313 683.098 L998.754 683.098 L998.194 683.098 L997.635 683.098 L997.076 683.098 L996.517 683.098 L995.957 683.098 L995.398 683.098 L994.839 683.098 L994.28 683.098 L993.72 683.098 L993.161 683.098 L992.602 683.098 L992.043 683.098 L991.483 683.098 L990.924 683.098 L990.365 683.098 L989.806 683.098 L989.246 683.098 L988.687 683.098 L988.128 683.098 L987.569 683.098 L987.009 683.098 L986.45 683.098 L985.891 683.098 L985.332 683.098 L984.772 683.098 L984.213 683.098 L983.654 683.098 L983.095 683.098 L982.535 683.098 L981.976 683.098 L981.417 683.098 L980.858 683.098 L980.298 683.098 L979.739 683.098 L979.18 683.098 L978.621 683.098 L978.061 683.098 L977.502 683.098 L976.943 683.098 L976.384 683.098 L975.824 683.098 L975.265 683.098 L974.706 683.098 L974.147 683.098 L973.587 683.098 L973.028 683.098 L972.469 683.098 L971.91 683.098 L971.35 683.098 L970.791 683.098 L970.232 683.098 L969.673 683.098 L969.113 683.098 L968.554 683.098 L967.995 683.098 L967.436 683.098 L966.876 683.098 L966.317 683.098 L965.758 683.098 L965.199 683.098 L964.639 683.098 L964.08 683.098 L963.521 683.098 L962.962 683.098 L962.402 683.098 L961.843 683.098 L961.284 683.098 L960.725 683.098 L960.165 683.098 L959.606 683.098 L959.047 683.098 L958.488 683.098 L957.928 683.098 L957.369 683.098 L956.81 683.098 L956.251 683.098 L955.691 683.098 L955.132 683.098 L954.573 683.098 L954.014 683.098 L953.454 683.098 L952.895 683.098 L952.336 683.098 L951.777 683.098 L951.217 683.098 L950.658 683.098 L950.099 683.098 L949.54 683.098 L948.98 683.098 L948.421 683.098 L947.862 683.098 L947.303 683.098 L946.743 683.098 L946.184 683.098 L945.625 683.098 L945.066 683.098 L944.506 683.098 L943.947 683.098 L943.388 683.098 L942.829 683.098 L942.269 683.098 L941.71 683.098 L941.151 683.098 L940.592 683.098 L940.032 683.098 L939.473 683.098 L938.914 683.098 L938.355 683.098 L937.795 683.098 L937.236 683.098 L936.677 683.098 L936.118 683.098 L935.558 683.098 L934.999 683.098 L934.44 683.098 L933.881 683.098 L933.321 683.098 L932.762 683.098 L932.203 683.098 L931.644 683.098 L931.084 683.098 L930.525 683.098 L929.966 683.098 L929.406 683.098 L928.847 683.098 L928.288 683.098 L927.729 683.098 L927.169 683.098 L926.61 683.098 L926.051 683.098 L925.492 683.098 L924.932 683.098 L924.373 683.098 L923.814 683.098 L923.255 683.098 L922.695 683.098 L922.136 683.098 L921.577 683.098 L921.018 683.098 L920.458 683.098 L919.899 683.098 L919.34 683.098 L918.781 683.098 L918.221 683.098 L917.662 683.098 L917.103 683.098 L916.544 683.098 L915.984 683.098 L915.425 683.098 L914.866 683.098 L914.307 683.098 L913.747 683.098 L913.188 683.098 L912.629 683.098 L912.07 683.098 L911.51 683.098 L910.951 683.098 L910.392 683.098 L909.833 683.098 L909.273 683.098 L908.714 683.098 L908.155 683.098 L907.596 683.098 L907.036 683.098 L906.477 683.098 L905.918 683.098 L905.359 683.098 L904.799 683.098 L904.24 683.098 L903.681 683.098 L903.122 683.098 L902.562 683.098 L902.003 683.098 L901.444 683.098 L900.885 683.098 L900.325 683.098 L899.766 683.098 L899.207 683.098 L898.648 683.098 L898.088 683.098 L897.529 683.098 L896.97 683.098 L896.411 683.098 L895.851 683.098 L895.292 683.098 L894.733 683.098 L894.174 683.098 L893.614 683.098 L893.055 683.098 L892.496 683.098 L891.937 683.098 L891.377 683.098 L890.818 683.098 L890.259 683.098 L889.7 683.098 L889.14 683.098 L888.581 683.098 L888.022 683.098 L887.463 683.098 L886.903 683.098 L886.344 683.098 L885.785 683.098 L885.226 683.098 L884.666 683.098 L884.107 683.098 L883.548 683.098 L882.989 683.098 L882.429 683.098 L881.87 683.098 L881.311 683.098 L880.752 683.098 L880.192 683.098 L879.633 683.098 L879.074 683.098 L878.515 683.098 L877.955 683.098 L877.396 683.098 L876.837 683.098 L876.278 683.098 L875.718 683.098 L875.159 683.098 L874.6 683.098 L874.041 683.098 L873.481 683.098 L872.922 683.098 L872.363 683.098 L871.804 683.098 L871.244 683.098 L870.685 683.098 L870.126 683.098 L869.567 683.098 L869.007 683.098 L868.448 683.098 L867.889 683.098 L867.33 683.098 L866.77 683.098 L866.211 683.098 L865.652 683.098 L865.093 683.098 L864.533 683.098 L863.974 683.098 L863.415 683.098 L862.856 683.098 L862.296 683.098 L861.737 683.098 L861.178 683.098 L860.619 683.098 L860.059 683.098 L859.5 683.098 L858.941 683.098 L858.382 683.098 L857.822 683.098 L857.263 683.098 L856.704 683.098 L856.145 683.098 L855.585 683.098 L855.026 683.098 L854.467 683.098 L853.908 683.098 L853.348 683.098 L852.789 683.098 L852.23 683.098 L851.671 683.098 L851.111 683.098 L850.552 683.098 L849.993 683.098 L849.434 683.098 L848.874 683.098 L848.315 683.098 L847.756 683.098 L847.197 683.098 L846.637 683.098 L846.078 683.098 L845.519 683.098 L844.96 683.098 L844.4 683.098 L843.841 683.098 L843.282 683.098 L842.723 683.098 L842.163 683.098 L841.604 683.098 L841.045 683.098 L840.486 683.098 L839.926 683.098 L839.367 683.098 L838.808 683.098 L838.249 683.098 L837.689 683.098 L837.13 683.098 L836.571 683.098 L836.012 683.098 L835.452 683.098 L834.893 683.098 L834.334 683.098 L833.775 683.098 L833.215 683.098 L832.656 683.098 L832.097 683.098 L831.538 683.098 L830.978 683.098 L830.419 683.098 L829.86 683.098 L829.301 683.098 L828.741 683.098 L828.182 683.098 L827.623 683.098 L827.064 683.098 L826.504 683.098 L825.945 683.098 L825.386 683.098 L824.827 683.098 L824.267 683.098 L823.708 683.098 L823.149 683.098 L822.59 683.098 L822.03 683.098 L821.471 683.098 L820.912 683.098 L820.353 683.098 L819.793 683.098 L819.234 683.098 L818.675 683.098 L818.116 683.098 L817.556 683.098 L816.997 683.098 L816.438 683.098 L815.879 683.098 L815.319 683.098 L814.76 683.098 L814.201 683.098 L813.642 683.098 L813.082 683.098 L812.523 683.098 L811.964 683.098 L811.405 683.098 L810.845 683.098 L810.286 683.098 L809.727 683.098 L809.168 683.098 L808.608 683.098 L808.049 683.098 L807.49 683.098 L806.931 683.098 L806.371 683.098 L805.812 683.098 L805.253 683.098 L804.693 683.098 L804.134 683.098 L803.575 683.098 L803.016 683.098 L802.456 683.098 L801.897 683.098 L801.338 683.098 L800.779 683.098 L800.219 683.098 L799.66 683.098 L799.101 683.098 L798.542 683.098 L797.982 683.098 L797.423 683.098 L796.864 683.098 L796.305 683.098 L795.745 683.098 L795.186 683.098 L794.627 683.098 L794.068 683.098 L793.508 683.098 L792.949 683.098 L792.39 683.098 L791.831 683.098 L791.271 683.098 L790.712 683.098 L790.153 683.098 L789.594 683.098 L789.034 683.098 L788.475 683.098 L787.916 683.098 L787.357 683.098 L786.797 683.098 L786.238 683.098 L785.679 683.098 L785.12 683.098 L784.56 683.098 L784.001 683.098 L783.442 683.098 L782.883 683.098 L782.323 683.098 L781.764 683.098 L781.205 683.098 L780.646 683.098 L780.086 683.098 L779.527 683.098 L778.968 683.098 L778.409 683.098 L777.849 683.098 L777.29 683.098 L776.731 683.098 L776.172 683.098 L775.612 683.098 L775.053 683.098 L774.494 683.098 L773.935 683.098 L773.375 683.098 L772.816 683.098 L772.257 683.098 L771.698 683.098 L771.138 683.098 L770.579 683.098 L770.02 683.098 L769.461 683.098 L768.901 683.098 L768.342 683.098 L767.783 683.098 L767.224 683.098 L766.664 683.098 L766.105 683.098 L765.546 683.098 L764.987 683.098 L764.427 683.098 L763.868 683.098 L763.309 683.098 L762.75 683.098 L762.19 683.098 L761.631 683.098 L761.072 683.098 L760.513 683.098 L759.953 683.098 L759.394 683.098 L758.835 683.098 L758.276 683.098 L757.716 683.098 L757.157 683.098 L756.598 683.098 L756.039 683.098 L755.479 683.098 L754.92 683.098 L754.361 683.098 L753.802 683.098 L753.242 683.098 L752.683 683.098 L752.124 683.098 L751.565 683.098 L751.005 683.098 L750.446 683.098 L749.887 683.098 L749.328 683.098 L748.768 683.098 L748.209 683.098 L747.65 683.098 L747.091 683.098 L746.531 683.098 L745.972 683.098 L745.413 683.098 L744.854 683.098 L744.294 683.098 L743.735 683.098 L743.176 683.098 L742.617 683.098 L742.057 683.098 L741.498 683.098 L740.939 683.098 L740.38 683.098 L739.82 683.098 L739.261 683.098 L738.702 683.098 L738.143 683.098 L737.583 683.098 L737.024 683.098 L736.465 683.098 L735.906 683.098 L735.346 683.098 L734.787 683.098 L734.228 683.098 L733.669 683.098 L733.109 683.098 L732.55 683.098 L731.991 683.098 L731.432 683.098 L730.872 683.098 L730.313 683.098 L729.754 683.098 L729.195 683.098 L728.635 683.098 L728.076 683.098 L727.517 683.098 L726.958 683.098 L726.398 683.098 L725.839 683.098 L725.28 683.098 L724.721 683.098 L724.161 683.098 L723.602 683.098 L723.043 683.098 L722.484 683.098 L721.924 683.098 L721.365 683.098 L720.806 683.098 L720.247 683.098  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.067 720.806,688.067 721.365,688.067 721.924,688.067 722.484,688.067 723.043,688.067 723.602,688.067 724.161,688.067 724.721,688.067 725.28,688.067 725.839,688.067 726.398,688.067 726.958,688.067 727.517,688.067 728.076,688.067 728.635,688.067 729.195,688.067 729.754,688.067 730.313,688.067 730.872,688.067 731.432,688.067 731.991,688.067 732.55,688.067 733.109,688.067 733.669,688.067 734.228,688.067 734.787,688.067 735.346,688.067 735.906,688.067 736.465,688.067 737.024,688.067 737.583,688.067 738.143,688.067 738.702,688.067 739.261,688.067 739.82,688.067 740.38,688.067 740.939,688.067 741.498,688.067 742.057,688.067 742.617,688.067 743.176,688.067 743.735,688.067 744.294,688.067 744.854,688.067 745.413,688.067 745.972,688.067 746.531,688.067 747.091,688.067 747.65,688.067 748.209,688.067 748.768,688.067 749.328,688.067 749.887,688.067 750.446,688.067 751.005,688.067 751.565,688.067 752.124,688.067 752.683,688.067 753.242,688.067 753.802,688.067 754.361,688.067 754.92,688.067 755.479,688.067 756.039,688.067 756.598,688.067 757.157,688.067 757.716,688.067 758.276,688.067 758.835,688.067 759.394,688.067 759.953,688.067 760.513,688.067 761.072,688.067 761.631,688.067 762.19,688.067 762.75,688.067 763.309,688.067 763.868,688.067 764.427,688.067 764.987,688.067 765.546,688.067 766.105,688.067 766.664,688.067 767.224,688.067 767.783,688.067 768.342,688.067 768.901,688.067 769.461,688.067 770.02,688.067 770.579,688.067 771.138,688.067 771.698,688.067 772.257,688.067 772.816,688.067 773.375,688.067 773.935,688.067 774.494,688.067 775.053,688.067 775.612,688.067 776.172,688.067 776.731,688.067 777.29,688.067 777.849,688.067 778.409,688.067 778.968,688.067 779.527,688.067 780.086,688.067 780.646,688.067 781.205,688.067 781.764,688.067 782.323,688.067 782.883,688.067 783.442,688.067 784.001,688.067 784.56,688.067 785.12,688.067 785.679,688.067 786.238,688.067 786.797,688.067 787.357,688.067 787.916,688.067 788.475,688.067 789.034,688.067 789.594,688.067 790.153,688.067 790.712,688.067 791.271,688.067 791.831,688.067 792.39,688.067 792.949,688.067 793.508,688.067 794.068,688.067 794.627,688.067 795.186,688.067 795.745,688.067 796.305,688.067 796.864,688.067 797.423,688.067 797.982,688.067 798.542,688.067 799.101,688.067 799.66,688.067 800.219,688.067 800.779,688.067 801.338,688.067 801.897,688.067 802.456,688.067 803.016,688.067 803.575,688.067 804.134,688.067 804.693,688.067 805.253,688.067 805.812,688.067 806.371,688.067 806.931,688.067 807.49,688.067 808.049,688.067 808.608,688.067 809.168,688.067 809.727,688.067 810.286,688.067 810.845,688.067 811.405,688.067 811.964,688.067 812.523,688.067 813.082,688.067 813.642,688.067 814.201,688.067 814.76,688.067 815.319,688.067 815.879,688.067 816.438,688.067 816.997,688.067 817.556,688.067 818.116,688.067 818.675,688.067 819.234,688.067 819.793,688.067 820.353,688.067 820.912,688.067 821.471,688.067 822.03,688.067 822.59,688.067 823.149,688.067 823.708,688.067 824.267,688.067 824.827,688.067 825.386,688.067 825.945,688.067 826.504,688.067 827.064,688.067 827.623,688.067 828.182,688.067 828.741,688.067 829.301,688.067 829.86,688.067 830.419,688.067 830.978,688.067 831.538,688.067 832.097,688.067 832.656,688.067 833.215,688.067 833.775,688.067 834.334,688.067 834.893,688.067 835.452,688.067 836.012,688.067 836.571,688.067 837.13,688.067 837.689,688.067 838.249,688.067 838.808,688.067 839.367,688.067 839.926,688.067 840.486,688.067 841.045,688.067 841.604,688.067 842.163,688.067 842.723,688.067 843.282,688.067 843.841,688.067 844.4,688.067 844.96,688.067 845.519,688.067 846.078,688.067 846.637,688.067 847.197,688.067 847.756,688.067 848.315,688.067 848.874,688.067 849.434,688.067 849.993,688.067 850.552,688.067 851.111,688.067 851.671,688.067 852.23,688.067 852.789,688.067 853.348,688.067 853.908,688.067 854.467,688.067 855.026,688.067 855.585,688.067 856.145,688.067 856.704,688.067 857.263,688.067 857.822,688.067 858.382,688.067 858.941,688.067 859.5,688.067 860.059,688.067 860.619,688.067 861.178,688.067 861.737,688.067 862.296,688.067 862.856,688.067 863.415,688.067 863.974,688.067 864.533,688.067 865.093,688.067 865.652,688.067 866.211,688.067 866.77,688.067 867.33,688.067 867.889,688.067 868.448,688.067 869.007,688.067 869.567,688.067 870.126,688.067 870.685,688.067 871.244,688.067 871.804,688.067 872.363,688.067 872.922,688.067 873.481,688.067 874.041,688.067 874.6,688.067 875.159,688.067 875.718,688.067 876.278,688.067 876.837,688.067 877.396,688.067 877.955,688.067 878.515,688.067 879.074,688.067 879.633,688.067 880.192,688.067 880.752,688.067 881.311,688.067 881.87,688.067 882.429,688.067 882.989,688.067 883.548,688.067 884.107,688.067 884.666,688.067 885.226,688.067 885.785,688.067 886.344,688.067 886.903,688.067 887.463,688.067 888.022,688.067 888.581,688.067 889.14,688.067 889.7,688.067 890.259,688.067 890.818,688.067 891.377,688.067 891.937,688.067 892.496,688.067 893.055,688.067 893.614,688.067 894.174,688.067 894.733,688.067 895.292,688.067 895.851,688.067 896.411,688.067 896.97,688.067 897.529,688.067 898.088,688.067 898.648,688.067 899.207,688.067 899.766,688.067 900.325,688.067 900.885,688.067 901.444,688.067 902.003,688.067 902.562,688.067 903.122,688.067 903.681,688.067 904.24,688.067 904.799,688.067 905.359,688.067 905.918,688.067 906.477,688.067 907.036,688.067 907.596,688.067 908.155,688.067 908.714,688.067 909.273,688.067 909.833,688.067 910.392,688.067 910.951,688.067 911.51,688.067 912.07,688.067 912.629,688.067 913.188,688.067 913.747,688.067 914.307,688.067 914.866,688.067 915.425,688.067 915.984,688.067 916.544,688.067 917.103,688.067 917.662,688.067 918.221,688.067 918.781,688.067 919.34,688.067 919.899,688.067 920.458,688.067 921.018,688.067 921.577,688.067 922.136,688.067 922.695,688.067 923.255,688.067 923.814,688.067 924.373,688.067 924.932,688.067 925.492,688.067 926.051,688.067 926.61,688.067 927.169,688.067 927.729,688.067 928.288,688.067 928.847,688.067 929.406,688.067 929.966,688.067 930.525,688.067 931.084,688.067 931.644,688.067 932.203,688.067 932.762,688.067 933.321,688.067 933.881,688.067 934.44,688.067 934.999,688.067 935.558,688.067 936.118,688.067 936.677,688.067 937.236,688.067 937.795,688.067 938.355,688.067 938.914,688.067 939.473,688.067 940.032,688.067 940.592,688.067 941.151,688.067 941.71,688.067 942.269,688.067 942.829,688.067 943.388,688.067 943.947,688.067 944.506,688.067 945.066,688.067 945.625,688.067 946.184,688.067 946.743,688.067 947.303,688.067 947.862,688.067 948.421,688.067 948.98,688.067 949.54,688.067 950.099,688.067 950.658,688.067 951.217,688.067 951.777,688.067 952.336,688.067 952.895,688.067 953.454,688.067 954.014,688.067 954.573,688.067 955.132,688.067 955.691,688.067 956.251,688.067 956.81,688.067 957.369,688.067 957.928,688.067 958.488,688.067 959.047,688.067 959.606,688.067 960.165,688.067 960.725,688.067 961.284,688.067 961.843,688.067 962.402,688.067 962.962,688.067 963.521,688.067 964.08,688.067 964.639,688.067 965.199,688.067 965.758,688.067 966.317,688.067 966.876,688.067 967.436,688.067 967.995,688.067 968.554,688.067 969.113,688.067 969.673,688.067 970.232,688.067 970.791,688.067 971.35,688.067 971.91,688.067 972.469,688.067 973.028,688.067 973.587,688.067 974.147,688.067 974.706,688.067 975.265,688.067 975.824,688.067 976.384,688.067 976.943,688.067 977.502,688.067 978.061,688.067 978.621,688.067 979.18,688.067 979.739,688.067 980.298,688.067 980.858,688.067 981.417,688.067 981.976,688.067 982.535,688.067 983.095,688.067 983.654,688.067 984.213,688.067 984.772,688.067 985.332,688.067 985.891,688.067 986.45,688.067 987.009,688.067 987.569,688.067 988.128,688.067 988.687,688.067 989.246,688.067 989.806,688.067 990.365,688.067 990.924,688.067 991.483,688.067 992.043,688.067 992.602,688.067 993.161,688.067 993.72,688.067 994.28,688.067 994.839,688.067 995.398,688.067 995.957,688.067 996.517,688.067 997.076,688.067 997.635,688.067 998.194,688.067 998.754,688.067 999.313,688.067 999.872,688.067 1000.43,688.067 1000.99,688.067 1001.55,688.067 1002.11,688.067 1002.67,688.067 1003.23,688.067 1003.79,688.067 1004.35,688.067 1004.91,688.067 1005.46,688.067 1006.02,688.067 1006.58,688.067 1007.14,688.067 1007.7,688.067 1008.26,688.067 1008.82,688.067 1009.38,688.067 1009.94,688.067 1010.5,688.067 1011.06,688.067 1011.62,688.067 1012.18,688.067 1012.73,688.067 1013.29,688.067 1013.85,688.067 1014.41,688.067 1014.97,688.067 1015.53,688.067 1016.09,688.067 1016.65,688.067 1017.21,688.067 1017.77,688.067 1018.33,688.067 1018.89,688.067 1019.45,688.067 1020.01,688.067 1020.56,688.067 1021.12,688.067 1021.68,688.067 1022.24,688.067 1022.8,688.067 1023.36,688.067 1023.92,688.067 1024.48,688.067 1025.04,688.067 1025.6,688.067 1026.16,688.067 1026.72,688.067 1027.28,688.067 1027.83,688.067 1028.39,688.067 1028.95,688.067 1029.51,688.067 1030.07,688.067 1030.63,688.067 1031.19,688.067 1031.75,688.067 1032.31,688.067 1032.87,688.067 1033.43,688.067 1033.99,688.067 1034.55,688.067 1035.1,688.067 1035.66,688.067 1036.22,688.067 1036.78,688.067 1037.34,688.067 1037.9,688.067 1038.46,688.067 1039.02,688.067 1039.58,688.067 1040.14,688.067 1040.7,688.067 1041.26,688.067 1041.82,688.067 1042.38,688.067 1042.93,688.067 1043.49,688.067 1044.05,688.067 1044.61,688.067 1045.17,688.067 1045.73,688.067 1046.29,688.067 1046.85,688.067 1047.41,688.067 1047.97,688.067 1048.53,688.067 1049.09,688.067 1049.65,688.067 1050.2,688.067 1050.76,688.067 1051.32,688.067 1051.88,688.067 1052.44,688.067 1053,688.067 1053.56,688.067 1054.12,688.067 1054.68,688.067 1055.24,688.067 1055.8,688.067 1056.36,688.067 1056.92,688.067 1057.48,688.067 1058.03,688.067 1058.59,688.067 1059.15,688.067 1059.71,688.067 1060.27,688.067 1060.83,688.067 1061.39,688.067 1061.95,688.067 1062.51,688.067 1063.07,688.067 1063.63,688.067 1064.19,688.067 1064.75,688.067 1065.3,688.067 1065.86,688.067 1066.42,688.067 1066.98,688.067 1067.54,688.067 1068.1,688.067 1068.66,688.067 1069.22,688.067 1069.78,688.067 1070.34,688.067 1070.9,688.067 1071.46,688.067 1072.02,688.067 1072.57,688.067 1073.13,688.067 1073.69,688.067 1074.25,688.067 1074.81,688.067 1075.37,688.067 1075.93,688.067 1076.49,688.067 1077.05,688.067 1077.61,688.067 1078.17,688.067 1078.73,688.067 1079.29,688.067 1079.85,688.067 1080.4,688.067 1080.96,688.067 1081.52,688.067 1082.08,688.067 1082.64,688.067 1083.2,688.067 1083.76,688.067 1084.32,688.067 1084.88,688.067 1085.44,688.067 1086,688.067 1086.56,688.067 1087.12,688.067 1087.67,688.067 1088.23,688.067 1088.79,688.067 1089.35,688.067 1089.91,688.067 1090.47,688.067 1091.03,688.067 1091.59,688.067 1092.15,688.067 1092.71,688.067 1093.27,688.067 1093.83,688.067 1094.39,688.067 1094.94,688.067 1095.5,688.067 1096.06,688.067 1096.62,688.067 1097.18,688.067 1097.74,688.067 1098.3,688.067 1098.86,688.067 1099.42,688.067 1099.98,688.067 1100.54,688.067 1101.1,688.067 1101.66,688.067 1102.22,688.067 1102.77,688.067 1103.33,688.067 1103.89,688.067 1104.45,688.067 1105.01,688.067 1105.57,688.067 1106.13,688.067 1106.69,688.067 1107.25,688.067 1107.81,688.067 1108.37,688.067 1108.93,688.067 1109.49,688.067 1110.04,688.067 1110.6,688.067 1111.16,688.067 1111.72,688.067 1112.28,688.067 1112.84,688.067 1113.4,688.067 1113.96,688.067 1114.52,688.067 1115.08,688.067 1115.64,688.067 1116.2,688.067 1116.76,688.067 1117.31,688.067 1117.87,688.067 1118.43,688.067 1118.99,688.067 1119.55,688.067 1120.11,688.067 1120.67,688.067 1121.23,688.067 1121.79,688.067 1122.35,688.067 1122.91,688.067 1123.47,688.067 1124.03,688.067 1124.59,688.067 1125.14,688.067 1125.7,688.067 1126.26,688.067 1126.82,688.067 1127.38,688.067 1127.94,688.067 1128.5,688.067 1129.06,688.067 1129.62,688.067 1130.18,688.067 1130.74,688.067 1131.3,688.067 1131.86,688.067 1132.41,688.067 1132.97,688.067 1133.53,688.067 1134.09,688.067 1134.65,688.067 1135.21,688.067 1135.77,688.067 1136.33,688.067 1136.89,688.067 1137.45,688.067 1138.01,688.067 1138.57,688.067 1139.13,688.067 1139.68,688.067 1140.24,688.067 1140.8,688.067 1141.36,688.067 1141.92,688.067 1142.48,688.067 1143.04,688.067 1143.6,688.067 1144.16,688.067 1144.72,688.067 1145.28,688.067 1145.84,688.067 1146.4,688.067 1146.96,688.067 1147.51,688.067 1148.07,688.067 1148.63,688.067 1149.19,688.067 1149.75,688.067 1150.31,688.067 1150.87,688.067 1151.43,688.067 1151.99,688.067 1152.55,688.067 1153.11,688.067 1153.67,688.067 1154.23,688.067 1154.78,688.067 1155.34,688.067 1155.9,688.067 1156.46,688.067 1157.02,688.067 1157.58,688.067 1158.14,688.067 1158.7,688.067 1159.26,688.067 1159.82,688.067 1160.38,688.067 1160.94,688.067 1161.5,688.067 1162.05,688.067 1162.61,688.067 1163.17,688.067 1163.73,688.067 1164.29,688.067 1164.85,688.067 1165.41,688.067 1165.97,688.067 1166.53,688.067 1167.09,688.067 1167.65,688.067 1168.21,688.067 1168.77,688.067 1169.33,688.067 1169.88,688.067 1170.44,688.067 1171,688.067 1171.56,688.067 1172.12,688.067 1172.68,688.067 1173.24,688.067 1173.8,688.067 1174.36,688.067 1174.92,688.067 1175.48,688.067 1176.04,688.067 1176.6,688.067 1177.15,688.067 1177.71,688.067 1178.27,688.067 1178.83,688.067 1179.39,688.067 1179.95,688.067 1180.51,688.067 1181.07,688.067 1181.63,688.067 1182.19,688.067 1182.75,688.067 1183.31,688.067 1183.87,688.067 1184.43,688.067 1184.98,688.067 1185.54,688.067 1186.1,688.067 1186.66,688.067 1187.22,688.067 1187.78,688.067 1188.34,688.067 1188.9,688.067 1189.46,688.067 1190.02,688.067 1190.58,688.067 1191.14,688.067 1191.7,688.067 1192.25,688.067 1192.81,688.067 1193.37,688.067 1193.93,688.067 1194.49,688.067 1195.05,688.067 1195.61,688.067 1196.17,688.067 1196.73,688.067 1197.29,688.067 1197.85,688.067 1198.41,688.067 1198.97,688.067 1199.52,688.067 1200.08,688.067 1200.64,688.067 1201.2,688.067 1201.76,688.067 1202.32,688.067 1202.88,688.067 1203.44,688.067 1204,688.067 1204.56,688.067 1205.12,688.067 1205.68,688.067 1206.24,688.067 1206.8,688.067 1207.35,688.067 1207.91,688.067 1208.47,688.067 1209.03,688.067 1209.59,688.067 1210.15,688.067 1210.71,688.067 1211.27,688.067 1211.83,688.067 1212.39,688.067 1212.95,688.067 1213.51,688.067 1214.07,688.067 1214.62,688.067 1215.18,688.067 1215.74,688.067 1216.3,688.067 1216.86,688.067 1217.42,688.067 1217.98,688.067 1218.54,688.067 1219.1,688.067 1219.66,688.067 1220.22,688.067 1220.78,688.067 1221.34,688.067 1221.89,688.067 1222.45,688.067 1223.01,688.067 1223.57,688.067 1224.13,688.067 1224.69,688.067 1225.25,688.067 1225.81,688.067 1226.37,688.067 1226.93,688.067 1227.49,688.067 1228.05,688.067 1228.61,688.067 1229.17,688.067 1229.72,688.067 1230.28,688.067 1230.84,688.067 1231.4,688.067 1231.96,688.067 1232.52,688.067 1233.08,688.067 1233.64,688.067 1234.2,688.067 1234.76,688.067 1235.32,688.067 1235.88,688.067 1236.44,688.067 1236.99,688.067 1237.55,688.067 1238.11,688.067 1238.67,688.067 1239.23,688.067 1239.79,688.067 1240.35,688.067 1240.91,688.067 1241.47,688.067 1242.03,688.067 1242.59,688.067 1243.15,688.067 1243.71,688.067 1244.26,688.067 1244.82,688.067 1245.38,688.067 1245.94,688.067 1246.5,688.067 1247.06,688.067 1247.62,688.067 1248.18,688.067 1248.74,688.067 1249.3,688.067 1249.86,688.067 1250.42,688.067 1250.98,688.067 1251.54,688.067 1252.09,688.067 1252.65,688.067 1253.21,688.067 1253.77,688.067 1254.33,688.067 1254.89,688.067 1255.45,688.067 1256.01,688.067 1256.57,688.067 1257.13,688.067 1257.69,688.067 1258.25,688.067 1258.81,688.067 1259.36,688.067 1259.92,688.067 1260.48,688.067 1261.04,688.067 1261.6,688.067 1262.16,688.067 1262.72,688.067 1263.28,688.067 1263.84,688.067 1264.4,688.067 1264.96,688.067 1265.52,688.067 1266.08,688.067 1266.63,688.067 1267.19,688.067 1267.75,688.067 1268.31,688.067 1268.87,688.067 1269.43,688.067 1269.99,688.067 1270.55,688.067 1271.11,688.067 1271.67,688.067 1272.23,688.067 1272.79,688.067 1273.35,688.067 1273.91,688.067 1274.46,688.067 1275.02,688.067 1275.58,688.067 1276.14,688.067 1276.7,688.067 1277.26,688.067 1277.82,688.067 1278.38,688.067 1278.94,688.067 1279.5,688.067 1280.06,688.067 1280.62,688.067 1281.18,688.067 1281.73,688.067 1282.29,688.067 1282.85,688.067 1283.41,688.067 1283.97,688.067 1284.53,688.067 1285.09,688.067 1285.65,688.067 1286.21,688.067 1286.77,688.067 1287.33,688.067 1287.89,688.067 1288.45,688.067 1289,688.067 1289.56,688.067 1290.12,688.067 1290.68,688.067 1291.24,688.067 1291.8,688.067 1292.36,688.067 1292.92,688.067 1293.48,688.067 1294.04,688.067 1294.6,688.067 1295.16,688.067 1295.72,688.067 1296.28,688.067 1296.83,688.067 1297.39,688.067 1297.95,688.067 1298.51,688.067 1299.07,688.067 1299.63,688.067 1300.19,688.067 1300.75,688.067 1301.31,688.067 1301.87,688.067 1302.43,688.067 1302.99,688.067 1303.55,688.067 1304.1,688.067 1304.66,688.067 1305.22,688.067 1305.78,688.067 1306.34,688.067 1306.9,688.067 1307.46,688.067 1308.02,688.067 1308.58,688.067 1309.14,688.067 1309.7,688.067 1310.26,688.067 1310.82,688.067 1311.38,688.067 1311.93,688.067 1312.49,688.067 1313.05,688.067 1313.61,688.067 1314.17,688.067 1314.73,688.067 1315.29,688.067 1315.85,688.067 1316.41,688.067 1316.97,688.067 1317.53,688.067 1318.09,688.067 1318.65,688.067 1319.2,688.067 1319.76,688.067 1320.32,688.067 1320.88,688.067 1321.44,688.067 1322,688.067 1322.56,688.067 1323.12,688.067 1323.68,688.067 1324.24,688.067 1324.8,688.067 1325.36,688.067 1325.92,688.067 1326.47,688.067 1327.03,688.067 1327.59,688.067 1328.15,688.067 1328.71,688.067 1329.27,688.067 1329.83,688.067 1330.39,688.067 1330.95,688.067 1331.51,688.067 1332.07,688.067 1332.63,688.067 1333.19,688.067 1333.75,688.067 1334.3,688.067 1334.86,688.067 1335.42,688.067 1335.98,688.067 1336.54,688.067 1337.1,688.067 1337.66,688.067 1338.22,688.067 1338.78,688.067 1339.34,688.067 1339.9,688.067 1340.46,688.067 1341.02,688.067 1341.57,688.067 1342.13,688.067 1342.69,688.067 1343.25,688.067 1343.81,688.067 1344.37,688.067 1344.93,688.067 1345.49,688.067 1346.05,688.067 1346.61,688.067 1347.17,688.067 1347.73,688.067 1348.29,688.067 1348.84,688.067 1349.4,688.067 1349.96,688.067 1350.52,688.067 1351.08,688.067 1351.64,688.067 1352.2,688.067 1352.76,688.067 1353.32,688.067 1353.88,688.067 1354.44,688.067 1355,688.067 1355.56,688.067 1356.12,688.067 1356.67,688.067 1357.23,688.067 1357.79,688.067 1358.35,688.067 1358.91,688.067 1359.47,688.067 1360.03,688.067 1360.59,688.067 1361.15,688.067 1361.71,688.067 1362.27,688.067 1362.83,688.067 1363.39,688.067 1363.94,688.067 1364.5,688.067 1365.06,688.067 1365.62,688.067 1366.18,688.067 1366.74,688.067 1367.3,688.067 1367.86,688.067 1368.42,688.067 1368.98,688.067 1369.54,688.067 1370.1,688.067 1370.66,688.067 1371.21,688.067 1371.77,688.067 1372.33,688.067 1372.89,688.067 1373.45,688.067 1374.01,688.067 1374.57,688.067 1375.13,688.067 1375.69,688.067 1376.25,688.067 1376.81,688.067 1377.37,688.067 1377.93,688.067 1378.49,688.067 1379.04,688.067 1379.6,688.067 1380.16,688.067 1380.72,688.067 1381.28,688.067 1381.84,688.067 1382.4,688.067 1382.96,688.067 1383.52,688.067 1384.08,688.067 1384.64,688.067 1385.2,688.067 1385.76,688.067 1386.31,688.067 1386.87,688.067 1387.43,688.067 1387.99,688.067 1388.55,688.067 1389.11,688.067 1389.67,688.067 1390.23,688.067 1390.79,688.067 1391.35,688.067 1391.91,688.067 1392.47,688.067 1393.03,688.067 1393.58,688.067 1394.14,688.067 1394.7,688.067 1395.26,688.067 1395.82,688.067 1396.38,688.067 1396.94,688.067 1397.5,688.067 1398.06,688.067 1398.62,688.067 1399.18,688.067 1399.74,688.067 1400.3,688.067 1400.86,688.067 1401.41,688.067 1401.97,688.067 1402.53,688.067 1403.09,688.067 1403.65,688.067 1404.21,688.067 1404.77,688.067 1405.33,688.067 1405.89,688.067 1406.45,688.067 1407.01,688.067 1407.57,688.067 1408.13,688.067 1408.68,688.067 1409.24,688.067 1409.8,688.067 1410.36,688.067 1410.92,688.067 1411.48,688.067 1412.04,688.067 1412.6,688.067 1413.16,688.067 1413.72,688.067 1414.28,688.067 1414.84,688.067 1415.4,688.067 1415.95,688.067 1416.51,688.067 1417.07,688.067 1417.63,688.067 1418.19,688.067 1418.75,688.067 1419.31,688.067 1419.87,688.067 1420.43,688.067 1420.99,688.067 1421.55,688.067 1422.11,688.067 1422.67,688.067 1423.23,688.067 1423.78,688.067 1424.34,688.067 1424.9,688.067 1425.46,688.067 1426.02,688.067 1426.58,688.067 1427.14,688.067 1427.7,688.067 1428.26,688.067 1428.82,688.067 1429.38,688.067 1429.94,688.067 1430.5,688.067 1431.05,688.067 1431.61,688.067 1432.17,688.067 1432.73,688.067 1433.29,688.067 1433.85,688.067 1434.41,688.067 1434.97,688.067 1435.53,688.067 1436.09,688.067 1436.65,688.067 1437.21,688.067 1437.77,688.067 1438.33,688.067 1438.88,688.067 1439.44,688.067 1440,688.067 1440.56,688.067 1441.12,688.067 1441.68,688.067 1442.24,688.067 1442.8,688.067 1443.36,688.067 1443.92,688.067 1444.48,688.067 1445.04,688.067 1445.6,688.067 1446.15,688.067 1446.71,688.067 1447.27,688.067 1447.83,688.067 1448.39,688.067 1448.95,688.067 1449.51,688.067 1450.07,688.067 1450.63,688.067 1451.19,688.067 1451.75,688.067 1452.31,688.067 1452.87,688.067 1453.42,688.067 1453.98,688.067 1454.54,688.067 1455.1,688.067 1455.66,688.067 1456.22,688.067 1456.78,688.067 1457.34,688.067 1457.9,688.067 1458.46,688.067 1459.02,688.067 1459.58,688.067 1460.14,688.067 1460.7,688.067 1461.25,688.067 1461.81,688.067 1462.37,688.067 1462.93,688.067 1463.49,688.067 1464.05,688.067 1464.61,688.067 1465.17,688.067 1465.73,688.067 1466.29,688.067 1466.85,688.067 1467.41,688.067 1467.97,688.067 1468.52,688.067 1469.08,688.067 1469.64,688.067 1470.2,688.067 1470.76,688.067 1471.32,688.067 1471.88,688.067 1472.44,688.067 1473,688.067 1473.56,688.067 1474.12,688.067 1474.68,688.067 1475.24,688.067 1475.79,688.067 1476.35,688.067 1476.91,688.067 1477.47,688.067 1478.03,688.067 1478.59,688.067 1479.15,688.067 1479.71,688.067 1480.27,688.067 1480.83,688.067 1481.39,688.067 1481.95,688.067 1482.51,688.067 1483.07,688.067 1483.62,688.067 1484.18,688.067 1484.74,688.067 1485.3,688.067 1485.86,688.067 1486.42,688.067 1486.98,688.067 1487.54,688.067 1488.1,688.067 1488.66,688.067 1489.22,688.067 1489.78,688.067 1490.34,688.067 1490.89,688.067 1491.45,688.067 1492.01,688.067 1492.57,688.067 1493.13,688.067 1493.69,688.067 1494.25,688.067 1494.81,688.067 1495.37,688.067 1495.93,688.067 1496.49,688.067 1497.05,688.067 1497.61,688.067 1498.16,688.067 1498.72,688.067 1499.28,688.067 1499.84,688.067 1500.4,688.067 1500.96,688.067 1501.52,688.067 1502.08,688.067 1502.64,688.067 1503.2,688.067 1503.76,688.067 1504.32,688.067 1504.88,688.067 1505.44,688.067 1505.99,688.067 1506.55,688.067 1507.11,688.067 1507.67,688.067 1508.23,688.067 1508.79,688.067 1509.35,688.067 1509.91,688.067 1510.47,688.067 1511.03,688.067 1511.59,688.067 1512.15,688.067 1512.71,688.067 1513.26,688.067 1513.82,688.067 1514.38,688.067 1514.94,688.067 1515.5,688.067 1516.06,688.067 1516.62,688.067 1517.18,688.067 1517.74,688.067 1518.3,688.067 1518.86,688.067 1519.42,688.067 1519.98,688.067 1520.53,688.067 1521.09,688.067 1521.65,688.067 1522.21,688.067 1522.77,688.067 1523.33,688.067 1523.89,688.067 1524.45,688.067 1525.01,688.067 1525.57,688.067 1526.13,688.067 1526.69,688.067 1527.25,688.067 1527.81,688.067 1528.36,688.067 1528.92,688.067 1529.48,688.067 1530.04,688.067 1530.6,688.067 1531.16,688.067 1531.72,688.067 1532.28,688.067 1532.84,688.067 1533.4,688.067 1533.96,688.067 1534.52,688.067 1535.08,688.067 1535.63,688.067 1536.19,688.067 1536.75,688.067 1537.31,688.067 1537.87,688.067 1538.43,688.067 1538.99,688.067 1539.55,688.067 1540.11,688.067 1540.67,688.067 1541.23,688.067 1541.79,688.067 1542.35,688.067 1542.9,688.067 1543.46,688.067 1544.02,688.067 1544.58,688.067 1545.14,688.067 1545.7,688.067 1546.26,688.067 1546.82,688.067 1547.38,688.067 1547.94,688.067 1548.5,688.067 1549.06,688.067 1549.62,688.067 1550.18,688.067 1550.73,688.067 1551.29,688.067 1551.85,688.067 1552.41,688.067 1552.97,688.067 1553.53,688.067 1554.09,688.067 1554.65,688.067 1555.21,688.067 1555.77,688.067 1556.33,688.067 1556.89,688.067 1557.45,688.067 1558,688.067 1558.56,688.067 1559.12,688.067 1559.68,688.067 1560.24,688.067 1560.8,688.067 1561.36,688.067 1561.92,688.067 1562.48,688.067 1563.04,688.067 1563.6,688.067 1564.16,688.067 1564.72,688.067 1565.28,688.067 1565.83,688.067 1566.39,688.067 1566.95,688.067 1567.51,688.067 1568.07,688.067 1568.63,688.067 1569.19,688.067 1569.75,688.067 1570.31,688.067 1570.87,688.067 1571.43,688.067 1571.99,688.067 1572.55,688.067 1573.1,688.067 1573.66,688.067 1574.22,688.067 1574.78,688.067 1575.34,688.067 1575.9,688.067 1576.46,688.067 1577.02,688.067 1577.58,688.067 1578.14,688.067 1578.7,688.067 1579.26,688.067 1579.82,688.067 1580.37,688.067 1580.93,688.067 1581.49,688.067 1582.05,688.067 1582.61,688.067 1583.17,688.067 1583.73,688.067 1584.29,688.067 1584.85,688.067 1585.41,688.067 1585.97,688.067 1586.53,688.067 1587.09,688.067 1587.65,688.067 1588.2,688.067 1588.76,688.067 1589.32,688.067 1589.88,688.067 1590.44,688.067 1591,688.067 1591.56,688.067 1592.12,688.067 1592.68,688.067 1593.24,688.067 1593.8,688.067 1594.36,688.067 1594.92,688.067 1595.47,688.067 1596.03,688.067 1596.59,688.067 1597.15,688.067 1597.71,688.067 1598.27,688.067 1598.83,688.067 1599.39,688.067 1599.95,688.067 1600.51,688.067 1601.07,688.067 1601.63,688.067 1602.19,688.067 1602.74,688.067 1603.3,688.067 1603.86,688.067 1604.42,688.067 1604.98,688.067 1605.54,688.067 1606.1,688.067 1606.66,688.067 1607.22,688.067 1607.78,688.067 1608.34,688.067 1608.9,688.067 1609.46,688.067 1610.02,688.067 1610.57,688.067 1611.13,688.067 1611.69,688.067 1612.25,688.067 1612.81,688.067 1613.37,688.067 1613.93,688.067 1614.49,688.067 1615.05,688.067 1615.61,688.067 1616.17,688.067 1616.73,688.067 1617.29,688.067 1617.84,688.067 1618.4,688.067 1618.96,688.067 1619.52,688.067 1620.08,688.067 1620.64,688.067 1621.2,688.067 1621.76,688.067 1622.32,688.067 1622.88,688.067 1623.44,688.067 1624,688.067 1624.56,688.067 1625.11,688.067 1625.67,688.067 1626.23,688.067 1626.79,688.067 1627.35,688.067 1627.91,688.067 1628.47,688.067 1629.03,688.067 1629.59,688.067 1630.15,688.067 1630.71,688.067 1631.27,688.067 1631.83,688.067 1632.39,688.067 1632.94,688.067 1633.5,688.067 1634.06,688.067 1634.62,688.067 1635.18,688.067 1635.74,688.067 1636.3,688.067 1636.86,688.067 1637.42,688.067 1637.98,688.067 1638.54,688.067 1639.1,688.067 1639.66,688.067 1640.21,688.067 1640.77,688.067 1641.33,688.067 1641.89,688.067 1642.45,688.067 1643.01,688.067 1643.57,688.067 1644.13,688.067 1644.69,688.067 1645.25,688.067 1645.81,688.067 1646.37,688.067 1646.93,688.067 1647.48,688.067 1648.04,688.067 1648.6,688.067 1649.16,688.067 1649.72,688.067 1650.28,688.067 1650.84,688.067 1651.4,688.067 1651.96,688.067 1652.52,688.067 1653.08,688.067 1653.64,688.067 1654.2,688.067 1654.76,688.067 1655.31,688.067 1655.87,688.067 1656.43,688.067 1656.99,688.067 1657.55,688.067 1658.11,688.067 1658.67,688.067 1659.23,688.067 1659.79,688.067 1660.35,688.067 1660.91,688.067 1661.47,688.067 1662.03,688.067 1662.58,688.067 1663.14,688.067 1663.7,688.067 1664.26,688.067 1664.82,688.067 1665.38,688.067 1665.94,688.067 1666.5,688.067 1667.06,688.067 1667.62,688.067 1668.18,688.067 1668.74,688.067 1669.3,688.067 1669.85,688.067 1670.41,688.067 1670.97,688.067 1671.53,688.067 1672.09,688.067 1672.65,688.067 1673.21,688.067 1673.77,688.067 1674.33,688.067 1674.89,688.067 1675.45,688.067 1676.01,688.067 1676.57,688.067 1677.13,688.067 1677.68,688.067 1678.24,688.067 1678.8,688.067 1679.36,688.067 1679.92,688.067 1680.48,688.067 1681.04,688.067 1681.6,688.067 1682.16,688.067 1682.72,688.067 1683.28,688.067 1683.84,688.067 1684.4,688.067 1684.95,688.067 1685.51,688.067 1686.07,688.067 1686.63,688.067 1687.19,688.067 1687.75,688.067 1688.31,688.067 1688.87,688.067 1689.43,688.067 1689.99,688.067 1690.55,688.067 1691.11,688.067 1691.67,688.067 1692.23,688.067 1692.78,688.067 1693.34,688.067 1693.9,688.067 1694.46,688.067 1695.02,688.067 1695.58,688.067 1696.14,688.067 1696.7,688.067 1697.26,688.067 1697.82,688.067 1698.38,688.067 1698.94,688.067 1699.5,688.067 1700.05,688.067 1700.61,688.067 1701.17,688.067 1701.73,688.067 1702.29,688.067 1702.85,688.067 1703.41,688.067 1703.97,688.067 1704.53,688.067 1705.09,688.067 1705.65,688.067 1706.21,688.067 1706.77,688.067 1707.32,688.067 1707.88,688.067 1708.44,688.067 1709,688.067 1709.56,688.067 1710.12,688.067 1710.68,688.067 1711.24,688.067 1711.8,688.067 1712.36,688.067 1712.92,688.067 1713.48,688.067 1714.04,688.067 1714.6,688.067 1715.15,688.067 1715.71,688.067 1716.27,688.067 1716.83,688.067 1717.39,688.067 1717.95,688.067 1718.51,688.067 1719.07,688.067 1719.63,688.067 1720.19,688.067 1720.75,688.067 1721.31,688.067 1721.87,688.067 1722.42,688.067 1722.98,688.067 1723.54,688.067 1724.1,688.067 1724.66,688.067 1725.22,688.067 1725.78,688.067 1726.34,688.067 1726.9,688.067 1727.46,688.067 1728.02,688.067 1728.58,688.067 1729.14,688.067 1729.69,688.067 1730.25,688.067 1730.81,688.067 1731.37,688.067 1731.93,688.067 1732.49,688.067 1733.05,688.067 1733.61,688.067 1734.17,688.067 1734.73,688.067 1735.29,688.067 1735.85,688.067 1736.41,688.067 1736.97,688.067 1737.52,688.067 1738.08,688.067 1738.64,688.067 1739.2,688.067 1739.76,688.067 1740.32,688.067 1740.88,688.067 1741.44,688.067 1742,688.067 1742.56,688.067 1743.12,688.067 1743.68,688.067 1744.24,688.067 1744.79,688.067 1745.35,688.067 1745.91,688.067 1746.47,688.067 1747.03,688.067 1747.59,688.067 1748.15,688.067 1748.71,688.067 1749.27,688.067 1749.83,688.067 1750.39,688.067 1750.95,688.067 1751.51,688.067 1752.06,688.067 1752.62,688.067 1753.18,688.067 1753.74,688.067 1754.3,688.067 1754.86,688.067 1755.42,688.067 1755.98,688.067 1756.54,688.067 1757.1,688.067 1757.66,688.067 1758.22,688.067 1758.78,688.067 1759.34,688.067 1759.89,688.067 1760.45,688.067 1761.01,688.067 1761.57,688.067 1762.13,688.067 1762.69,688.067 1763.25,688.067 1763.81,688.067 1764.37,688.067 1764.93,688.067 1765.49,688.067 1766.05,688.067 1766.61,688.067 1767.16,688.067 1767.72,688.067 1768.28,688.067 1768.84,688.067 1769.4,688.067 1769.96,688.067 1770.52,688.067 1771.08,688.067 1771.64,688.067 1772.2,688.067 1772.76,688.067 1773.32,688.067 1773.88,688.067 1774.43,688.067 1774.99,688.067 1775.55,688.067 1776.11,688.067 1776.67,688.067 1777.23,688.067 1777.79,688.067 1778.35,688.067 1778.91,688.067 1779.47,688.067 1780.03,688.067 1780.59,688.067 1781.15,688.067 1781.71,688.067 1782.26,688.067 1782.82,688.067 1783.38,688.067 1783.94,688.067 1784.5,688.067 1785.06,688.067 1785.62,688.067 1786.18,688.067 1786.74,688.067 1787.3,688.067 1787.86,688.067 1788.42,688.067 1788.98,688.067 1789.53,688.067 1790.09,688.067 1790.65,688.067 1791.21,688.067 1791.77,688.067 1792.33,688.067 1792.89,688.067 1793.45,688.067 1794.01,688.067 1794.57,688.067 1795.13,688.067 1795.69,688.067 1796.25,688.067 1796.8,688.067 1797.36,688.067 1797.92,688.067 1798.48,688.067 1799.04,688.067 1799.6,688.067 1800.16,688.067 1800.72,688.067 1801.28,688.067 1801.84,688.067 1802.4,688.067 1802.96,688.067 1803.52,688.067 1804.08,688.067 1804.63,688.067 1805.19,688.067 1805.75,688.067 1806.31,688.067 1806.87,688.067 1807.43,688.067 1807.99,688.067 1808.55,688.067 1809.11,688.067 1809.67,688.067 1810.23,688.067 1810.79,688.067 1811.35,688.067 1811.9,688.067 1812.46,688.067 1813.02,688.067 1813.58,688.067 1814.14,688.067 1814.7,688.067 1815.26,688.067 1815.82,688.067 1816.38,688.067 1816.94,688.067 1817.5,688.067 1818.06,688.067 1818.62,688.067 1819.18,688.067 1819.73,688.067 1820.29,688.067 1820.85,688.067 1821.41,688.067 1821.97,688.067 1822.53,688.067 1823.09,688.067 1823.65,688.067 1824.21,688.067 1824.77,688.067 1825.33,688.067 1825.89,688.067 1826.45,688.067 1827,688.067 1827.56,688.067 1828.12,688.067 1828.68,688.067 1829.24,688.067 1829.8,688.067 1830.36,688.067 1830.92,688.067 1831.48,688.067 1832.04,688.067 1832.6,688.067 1833.16,688.067 1833.72,688.067 1834.27,688.067 1834.83,688.067 1835.39,688.067 1835.95,688.067 1836.51,688.067 1837.07,688.067 1837.63,688.067 1838.19,688.067 \"/>\n<path clip-path=\"url(#clip783)\" d=\"M720.247 685.58 L720.806 685.58 L721.365 685.58 L721.924 685.58 L722.484 685.58 L723.043 685.58 L723.602 685.58 L724.161 685.58 L724.721 685.58 L725.28 685.58 L725.839 685.58 L726.398 685.58 L726.958 685.58 L727.517 685.58 L728.076 685.58 L728.635 685.58 L729.195 685.58 L729.754 685.58 L730.313 685.58 L730.872 685.58 L731.432 685.58 L731.991 685.58 L732.55 685.58 L733.109 685.58 L733.669 685.58 L734.228 685.58 L734.787 685.58 L735.346 685.58 L735.906 685.58 L736.465 685.58 L737.024 685.58 L737.583 685.58 L738.143 685.58 L738.702 685.58 L739.261 685.58 L739.82 685.58 L740.38 685.58 L740.939 685.58 L741.498 685.58 L742.057 685.58 L742.617 685.58 L743.176 685.58 L743.735 685.58 L744.294 685.58 L744.854 685.58 L745.413 685.58 L745.972 685.58 L746.531 685.58 L747.091 685.58 L747.65 685.58 L748.209 685.58 L748.768 685.58 L749.328 685.58 L749.887 685.58 L750.446 685.58 L751.005 685.58 L751.565 685.58 L752.124 685.58 L752.683 685.58 L753.242 685.58 L753.802 685.58 L754.361 685.58 L754.92 685.58 L755.479 685.58 L756.039 685.58 L756.598 685.58 L757.157 685.58 L757.716 685.58 L758.276 685.58 L758.835 685.58 L759.394 685.58 L759.953 685.58 L760.513 685.58 L761.072 685.58 L761.631 685.58 L762.19 685.58 L762.75 685.58 L763.309 685.58 L763.868 685.58 L764.427 685.58 L764.987 685.58 L765.546 685.58 L766.105 685.58 L766.664 685.58 L767.224 685.58 L767.783 685.58 L768.342 685.58 L768.901 685.58 L769.461 685.58 L770.02 685.58 L770.579 685.58 L771.138 685.58 L771.698 685.58 L772.257 685.58 L772.816 685.58 L773.375 685.58 L773.935 685.58 L774.494 685.58 L775.053 685.58 L775.612 685.58 L776.172 685.58 L776.731 685.58 L777.29 685.58 L777.849 685.58 L778.409 685.58 L778.968 685.58 L779.527 685.58 L780.086 685.58 L780.646 685.58 L781.205 685.58 L781.764 685.58 L782.323 685.58 L782.883 685.58 L783.442 685.58 L784.001 685.58 L784.56 685.58 L785.12 685.58 L785.679 685.58 L786.238 685.58 L786.797 685.58 L787.357 685.58 L787.916 685.58 L788.475 685.58 L789.034 685.58 L789.594 685.58 L790.153 685.58 L790.712 685.58 L791.271 685.58 L791.831 685.58 L792.39 685.58 L792.949 685.58 L793.508 685.58 L794.068 685.58 L794.627 685.58 L795.186 685.58 L795.745 685.58 L796.305 685.58 L796.864 685.58 L797.423 685.58 L797.982 685.58 L798.542 685.58 L799.101 685.58 L799.66 685.58 L800.219 685.58 L800.779 685.58 L801.338 685.58 L801.897 685.58 L802.456 685.58 L803.016 685.58 L803.575 685.58 L804.134 685.58 L804.693 685.58 L805.253 685.58 L805.812 685.58 L806.371 685.58 L806.931 685.58 L807.49 685.58 L808.049 685.58 L808.608 685.58 L809.168 685.58 L809.727 685.58 L810.286 685.58 L810.845 685.58 L811.405 685.58 L811.964 685.58 L812.523 685.58 L813.082 685.58 L813.642 685.58 L814.201 685.58 L814.76 685.58 L815.319 685.58 L815.879 685.58 L816.438 685.58 L816.997 685.58 L817.556 685.58 L818.116 685.58 L818.675 685.58 L819.234 685.58 L819.793 685.58 L820.353 685.58 L820.912 685.58 L821.471 685.58 L822.03 685.58 L822.59 685.58 L823.149 685.58 L823.708 685.58 L824.267 685.58 L824.827 685.58 L825.386 685.58 L825.945 685.58 L826.504 685.58 L827.064 685.58 L827.623 685.58 L828.182 685.58 L828.741 685.58 L829.301 685.58 L829.86 685.58 L830.419 685.58 L830.978 685.58 L831.538 685.58 L832.097 685.58 L832.656 685.58 L833.215 685.58 L833.775 685.58 L834.334 685.58 L834.893 685.58 L835.452 685.58 L836.012 685.58 L836.571 685.58 L837.13 685.58 L837.689 685.58 L838.249 685.58 L838.808 685.58 L839.367 685.58 L839.926 685.58 L840.486 685.58 L841.045 685.58 L841.604 685.58 L842.163 685.58 L842.723 685.58 L843.282 685.58 L843.841 685.58 L844.4 685.58 L844.96 685.58 L845.519 685.58 L846.078 685.58 L846.637 685.58 L847.197 685.58 L847.756 685.58 L848.315 685.58 L848.874 685.58 L849.434 685.58 L849.993 685.58 L850.552 685.58 L851.111 685.58 L851.671 685.58 L852.23 685.58 L852.789 685.58 L853.348 685.58 L853.908 685.58 L854.467 685.58 L855.026 685.58 L855.585 685.58 L856.145 685.58 L856.704 685.58 L857.263 685.58 L857.822 685.58 L858.382 685.58 L858.941 685.58 L859.5 685.58 L860.059 685.58 L860.619 685.58 L861.178 685.58 L861.737 685.58 L862.296 685.58 L862.856 685.58 L863.415 685.58 L863.974 685.58 L864.533 685.58 L865.093 685.58 L865.652 685.58 L866.211 685.58 L866.77 685.58 L867.33 685.58 L867.889 685.58 L868.448 685.58 L869.007 685.58 L869.567 685.58 L870.126 685.58 L870.685 685.58 L871.244 685.58 L871.804 685.58 L872.363 685.58 L872.922 685.58 L873.481 685.58 L874.041 685.58 L874.6 685.58 L875.159 685.58 L875.718 685.58 L876.278 685.58 L876.837 685.58 L877.396 685.58 L877.955 685.58 L878.515 685.58 L879.074 685.58 L879.633 685.58 L880.192 685.58 L880.752 685.58 L881.311 685.58 L881.87 685.58 L882.429 685.58 L882.989 685.58 L883.548 685.58 L884.107 685.58 L884.666 685.58 L885.226 685.58 L885.785 685.58 L886.344 685.58 L886.903 685.58 L887.463 685.58 L888.022 685.58 L888.581 685.58 L889.14 685.58 L889.7 685.58 L890.259 685.58 L890.818 685.58 L891.377 685.58 L891.937 685.58 L892.496 685.58 L893.055 685.58 L893.614 685.58 L894.174 685.58 L894.733 685.58 L895.292 685.58 L895.851 685.58 L896.411 685.58 L896.97 685.58 L897.529 685.58 L898.088 685.58 L898.648 685.58 L899.207 685.58 L899.766 685.58 L900.325 685.58 L900.885 685.58 L901.444 685.58 L902.003 685.58 L902.562 685.58 L903.122 685.58 L903.681 685.58 L904.24 685.58 L904.799 685.58 L905.359 685.58 L905.918 685.58 L906.477 685.58 L907.036 685.58 L907.596 685.58 L908.155 685.58 L908.714 685.58 L909.273 685.58 L909.833 685.58 L910.392 685.58 L910.951 685.58 L911.51 685.58 L912.07 685.58 L912.629 685.58 L913.188 685.58 L913.747 685.58 L914.307 685.58 L914.866 685.58 L915.425 685.58 L915.984 685.58 L916.544 685.58 L917.103 685.58 L917.662 685.58 L918.221 685.58 L918.781 685.58 L919.34 685.58 L919.899 685.58 L920.458 685.58 L921.018 685.58 L921.577 685.58 L922.136 685.58 L922.695 685.58 L923.255 685.58 L923.814 685.58 L924.373 685.58 L924.932 685.58 L925.492 685.58 L926.051 685.58 L926.61 685.58 L927.169 685.58 L927.729 685.58 L928.288 685.58 L928.847 685.58 L929.406 685.58 L929.966 685.58 L930.525 685.58 L931.084 685.58 L931.644 685.58 L932.203 685.58 L932.762 685.58 L933.321 685.58 L933.881 685.58 L934.44 685.58 L934.999 685.58 L935.558 685.58 L936.118 685.58 L936.677 685.58 L937.236 685.58 L937.795 685.58 L938.355 685.58 L938.914 685.58 L939.473 685.58 L940.032 685.58 L940.592 685.58 L941.151 685.58 L941.71 685.58 L942.269 685.58 L942.829 685.58 L943.388 685.58 L943.947 685.58 L944.506 685.58 L945.066 685.58 L945.625 685.58 L946.184 685.58 L946.743 685.58 L947.303 685.58 L947.862 685.58 L948.421 685.58 L948.98 685.58 L949.54 685.58 L950.099 685.58 L950.658 685.58 L951.217 685.58 L951.777 685.58 L952.336 685.58 L952.895 685.58 L953.454 685.58 L954.014 685.58 L954.573 685.58 L955.132 685.58 L955.691 685.58 L956.251 685.58 L956.81 685.58 L957.369 685.58 L957.928 685.58 L958.488 685.58 L959.047 685.58 L959.606 685.58 L960.165 685.58 L960.725 685.58 L961.284 685.58 L961.843 685.58 L962.402 685.58 L962.962 685.58 L963.521 685.58 L964.08 685.58 L964.639 685.58 L965.199 685.58 L965.758 685.58 L966.317 685.58 L966.876 685.58 L967.436 685.58 L967.995 685.58 L968.554 685.58 L969.113 685.58 L969.673 685.58 L970.232 685.58 L970.791 685.58 L971.35 685.58 L971.91 685.58 L972.469 685.58 L973.028 685.58 L973.587 685.58 L974.147 685.58 L974.706 685.58 L975.265 685.58 L975.824 685.58 L976.384 685.58 L976.943 685.58 L977.502 685.58 L978.061 685.58 L978.621 685.58 L979.18 685.58 L979.739 685.58 L980.298 685.58 L980.858 685.58 L981.417 685.58 L981.976 685.58 L982.535 685.58 L983.095 685.58 L983.654 685.58 L984.213 685.58 L984.772 685.58 L985.332 685.58 L985.891 685.58 L986.45 685.58 L987.009 685.58 L987.569 685.58 L988.128 685.58 L988.687 685.58 L989.246 685.58 L989.806 685.58 L990.365 685.58 L990.924 685.58 L991.483 685.58 L992.043 685.58 L992.602 685.58 L993.161 685.58 L993.72 685.58 L994.28 685.58 L994.839 685.58 L995.398 685.58 L995.957 685.58 L996.517 685.58 L997.076 685.58 L997.635 685.58 L998.194 685.58 L998.754 685.58 L999.313 685.58 L999.872 685.58 L1000.43 685.58 L1000.99 685.58 L1001.55 685.58 L1002.11 685.58 L1002.67 685.58 L1003.23 685.58 L1003.79 685.58 L1004.35 685.58 L1004.91 685.58 L1005.46 685.58 L1006.02 685.58 L1006.58 685.58 L1007.14 685.58 L1007.7 685.58 L1008.26 685.58 L1008.82 685.58 L1009.38 685.58 L1009.94 685.58 L1010.5 685.58 L1011.06 685.58 L1011.62 685.58 L1012.18 685.58 L1012.73 685.58 L1013.29 685.58 L1013.85 685.58 L1014.41 685.58 L1014.97 685.58 L1015.53 685.58 L1016.09 685.58 L1016.65 685.58 L1017.21 685.58 L1017.77 685.58 L1018.33 685.58 L1018.89 685.58 L1019.45 685.58 L1020.01 685.58 L1020.56 685.58 L1021.12 685.58 L1021.68 685.58 L1022.24 685.58 L1022.8 685.58 L1023.36 685.58 L1023.92 685.58 L1024.48 685.58 L1025.04 685.58 L1025.6 685.58 L1026.16 685.58 L1026.72 685.58 L1027.28 685.58 L1027.83 685.58 L1028.39 685.58 L1028.95 685.58 L1029.51 685.58 L1030.07 685.58 L1030.63 685.58 L1031.19 685.58 L1031.75 685.58 L1032.31 685.58 L1032.87 685.58 L1033.43 685.58 L1033.99 685.58 L1034.55 685.58 L1035.1 685.58 L1035.66 685.58 L1036.22 685.58 L1036.78 685.58 L1037.34 685.58 L1037.9 685.58 L1038.46 685.58 L1039.02 685.58 L1039.58 685.58 L1040.14 685.58 L1040.7 685.58 L1041.26 685.58 L1041.82 685.58 L1042.38 685.58 L1042.93 685.58 L1043.49 685.58 L1044.05 685.58 L1044.61 685.58 L1045.17 685.58 L1045.73 685.58 L1046.29 685.58 L1046.85 685.58 L1047.41 685.58 L1047.97 685.58 L1048.53 685.58 L1049.09 685.58 L1049.65 685.58 L1050.2 685.58 L1050.76 685.58 L1051.32 685.58 L1051.88 685.58 L1052.44 685.58 L1053 685.58 L1053.56 685.58 L1054.12 685.58 L1054.68 685.58 L1055.24 685.58 L1055.8 685.58 L1056.36 685.58 L1056.92 685.58 L1057.48 685.58 L1058.03 685.58 L1058.59 685.58 L1059.15 685.58 L1059.71 685.58 L1060.27 685.58 L1060.83 685.58 L1061.39 685.58 L1061.95 685.58 L1062.51 685.58 L1063.07 685.58 L1063.63 685.58 L1064.19 685.58 L1064.75 685.58 L1065.3 685.58 L1065.86 685.58 L1066.42 685.58 L1066.98 685.58 L1067.54 685.58 L1068.1 685.58 L1068.66 685.58 L1069.22 685.58 L1069.78 685.58 L1070.34 685.58 L1070.9 685.58 L1071.46 685.58 L1072.02 685.58 L1072.57 685.58 L1073.13 685.58 L1073.69 685.58 L1074.25 685.58 L1074.81 685.58 L1075.37 685.58 L1075.93 685.58 L1076.49 685.58 L1077.05 685.58 L1077.61 685.58 L1078.17 685.58 L1078.73 685.58 L1079.29 685.58 L1079.85 685.58 L1080.4 685.58 L1080.96 685.58 L1081.52 685.58 L1082.08 685.58 L1082.64 685.58 L1083.2 685.58 L1083.76 685.58 L1084.32 685.58 L1084.88 685.58 L1085.44 685.58 L1086 685.58 L1086.56 685.58 L1087.12 685.58 L1087.67 685.58 L1088.23 685.58 L1088.79 685.58 L1089.35 685.58 L1089.91 685.58 L1090.47 685.58 L1091.03 685.58 L1091.59 685.58 L1092.15 685.58 L1092.71 685.58 L1093.27 685.58 L1093.83 685.58 L1094.39 685.58 L1094.94 685.58 L1095.5 685.58 L1096.06 685.58 L1096.62 685.58 L1097.18 685.58 L1097.74 685.58 L1098.3 685.58 L1098.86 685.58 L1099.42 685.58 L1099.98 685.58 L1100.54 685.58 L1101.1 685.58 L1101.66 685.58 L1102.22 685.58 L1102.77 685.58 L1103.33 685.58 L1103.89 685.58 L1104.45 685.58 L1105.01 685.58 L1105.57 685.58 L1106.13 685.58 L1106.69 685.58 L1107.25 685.58 L1107.81 685.58 L1108.37 685.58 L1108.93 685.58 L1109.49 685.58 L1110.04 685.58 L1110.6 685.58 L1111.16 685.58 L1111.72 685.58 L1112.28 685.58 L1112.84 685.58 L1113.4 685.58 L1113.96 685.58 L1114.52 685.58 L1115.08 685.58 L1115.64 685.58 L1116.2 685.58 L1116.76 685.58 L1117.31 685.58 L1117.87 685.58 L1118.43 685.58 L1118.99 685.58 L1119.55 685.58 L1120.11 685.58 L1120.67 685.58 L1121.23 685.58 L1121.79 685.58 L1122.35 685.58 L1122.91 685.58 L1123.47 685.58 L1124.03 685.58 L1124.59 685.58 L1125.14 685.58 L1125.7 685.58 L1126.26 685.58 L1126.82 685.58 L1127.38 685.58 L1127.94 685.58 L1128.5 685.58 L1129.06 685.58 L1129.62 685.58 L1130.18 685.58 L1130.74 685.58 L1131.3 685.58 L1131.86 685.58 L1132.41 685.58 L1132.97 685.58 L1133.53 685.58 L1134.09 685.58 L1134.65 685.58 L1135.21 685.58 L1135.77 685.58 L1136.33 685.58 L1136.89 685.58 L1137.45 685.58 L1138.01 685.58 L1138.57 685.58 L1139.13 685.58 L1139.68 685.58 L1140.24 685.58 L1140.8 685.58 L1141.36 685.58 L1141.92 685.58 L1142.48 685.58 L1143.04 685.58 L1143.6 685.58 L1144.16 685.58 L1144.72 685.58 L1145.28 685.58 L1145.84 685.58 L1146.4 685.58 L1146.96 685.58 L1147.51 685.58 L1148.07 685.58 L1148.63 685.58 L1149.19 685.58 L1149.75 685.58 L1150.31 685.58 L1150.87 685.58 L1151.43 685.58 L1151.99 685.58 L1152.55 685.58 L1153.11 685.58 L1153.67 685.58 L1154.23 685.58 L1154.78 685.58 L1155.34 685.58 L1155.9 685.58 L1156.46 685.58 L1157.02 685.58 L1157.58 685.58 L1158.14 685.58 L1158.7 685.58 L1159.26 685.58 L1159.82 685.58 L1160.38 685.58 L1160.94 685.58 L1161.5 685.58 L1162.05 685.58 L1162.61 685.58 L1163.17 685.58 L1163.73 685.58 L1164.29 685.58 L1164.85 685.58 L1165.41 685.58 L1165.97 685.58 L1166.53 685.58 L1167.09 685.58 L1167.65 685.58 L1168.21 685.58 L1168.77 685.58 L1169.33 685.58 L1169.88 685.58 L1170.44 685.58 L1171 685.58 L1171.56 685.58 L1172.12 685.58 L1172.68 685.58 L1173.24 685.58 L1173.8 685.58 L1174.36 685.58 L1174.92 685.58 L1175.48 685.58 L1176.04 685.58 L1176.6 685.58 L1177.15 685.58 L1177.71 685.58 L1178.27 685.58 L1178.83 685.58 L1179.39 685.58 L1179.95 685.58 L1180.51 685.58 L1181.07 685.58 L1181.63 685.58 L1182.19 685.58 L1182.75 685.58 L1183.31 685.58 L1183.87 685.58 L1184.43 685.58 L1184.98 685.58 L1185.54 685.58 L1186.1 685.58 L1186.66 685.58 L1187.22 685.58 L1187.78 685.58 L1188.34 685.58 L1188.9 685.58 L1189.46 685.58 L1190.02 685.58 L1190.58 685.58 L1191.14 685.58 L1191.7 685.58 L1192.25 685.58 L1192.81 685.58 L1193.37 685.58 L1193.93 685.58 L1194.49 685.58 L1195.05 685.58 L1195.61 685.58 L1196.17 685.58 L1196.73 685.58 L1197.29 685.58 L1197.85 685.58 L1198.41 685.58 L1198.97 685.58 L1199.52 685.58 L1200.08 685.58 L1200.64 685.58 L1201.2 685.58 L1201.76 685.58 L1202.32 685.58 L1202.88 685.58 L1203.44 685.58 L1204 685.58 L1204.56 685.58 L1205.12 685.58 L1205.68 685.58 L1206.24 685.58 L1206.8 685.58 L1207.35 685.58 L1207.91 685.58 L1208.47 685.58 L1209.03 685.58 L1209.59 685.58 L1210.15 685.58 L1210.71 685.58 L1211.27 685.58 L1211.83 685.58 L1212.39 685.58 L1212.95 685.58 L1213.51 685.58 L1214.07 685.58 L1214.62 685.58 L1215.18 685.58 L1215.74 685.58 L1216.3 685.58 L1216.86 685.58 L1217.42 685.58 L1217.98 685.58 L1218.54 685.58 L1219.1 685.58 L1219.66 685.58 L1220.22 685.58 L1220.78 685.58 L1221.34 685.58 L1221.89 685.58 L1222.45 685.58 L1223.01 685.58 L1223.57 685.58 L1224.13 685.58 L1224.69 685.58 L1225.25 685.58 L1225.81 685.58 L1226.37 685.58 L1226.93 685.58 L1227.49 685.58 L1228.05 685.58 L1228.61 685.58 L1229.17 685.58 L1229.72 685.58 L1230.28 685.58 L1230.84 685.58 L1231.4 685.58 L1231.96 685.58 L1232.52 685.58 L1233.08 685.58 L1233.64 685.58 L1234.2 685.58 L1234.76 685.58 L1235.32 685.58 L1235.88 685.58 L1236.44 685.58 L1236.99 685.58 L1237.55 685.58 L1238.11 685.58 L1238.67 685.58 L1239.23 685.58 L1239.79 685.58 L1240.35 685.58 L1240.91 685.58 L1241.47 685.58 L1242.03 685.58 L1242.59 685.58 L1243.15 685.58 L1243.71 685.58 L1244.26 685.58 L1244.82 685.58 L1245.38 685.58 L1245.94 685.58 L1246.5 685.58 L1247.06 685.58 L1247.62 685.58 L1248.18 685.58 L1248.74 685.58 L1249.3 685.58 L1249.86 685.58 L1250.42 685.58 L1250.98 685.58 L1251.54 685.58 L1252.09 685.58 L1252.65 685.58 L1253.21 685.58 L1253.77 685.58 L1254.33 685.58 L1254.89 685.58 L1255.45 685.58 L1256.01 685.58 L1256.57 685.58 L1257.13 685.58 L1257.69 685.58 L1258.25 685.58 L1258.81 685.58 L1259.36 685.58 L1259.92 685.58 L1260.48 685.58 L1261.04 685.58 L1261.6 685.58 L1262.16 685.58 L1262.72 685.58 L1263.28 685.58 L1263.84 685.58 L1264.4 685.58 L1264.96 685.58 L1265.52 685.58 L1266.08 685.58 L1266.63 685.58 L1267.19 685.58 L1267.75 685.58 L1268.31 685.58 L1268.87 685.58 L1269.43 685.58 L1269.99 685.58 L1270.55 685.58 L1271.11 685.58 L1271.67 685.58 L1272.23 685.58 L1272.79 685.58 L1273.35 685.58 L1273.91 685.58 L1274.46 685.58 L1275.02 685.58 L1275.58 685.58 L1276.14 685.58 L1276.7 685.58 L1277.26 685.58 L1277.82 685.58 L1278.38 685.58 L1278.94 685.58 L1279.5 685.58 L1280.06 685.58 L1280.62 685.58 L1281.18 685.58 L1281.73 685.58 L1282.29 685.58 L1282.85 685.58 L1283.41 685.58 L1283.97 685.58 L1284.53 685.58 L1285.09 685.58 L1285.65 685.58 L1286.21 685.58 L1286.77 685.58 L1287.33 685.58 L1287.89 685.58 L1288.45 685.58 L1289 685.58 L1289.56 685.58 L1290.12 685.58 L1290.68 685.58 L1291.24 685.58 L1291.8 685.58 L1292.36 685.58 L1292.92 685.58 L1293.48 685.58 L1294.04 685.58 L1294.6 685.58 L1295.16 685.58 L1295.72 685.58 L1296.28 685.58 L1296.83 685.58 L1297.39 685.58 L1297.95 685.58 L1298.51 685.58 L1299.07 685.58 L1299.63 685.58 L1300.19 685.58 L1300.75 685.58 L1301.31 685.58 L1301.87 685.58 L1302.43 685.58 L1302.99 685.58 L1303.55 685.58 L1304.1 685.58 L1304.66 685.58 L1305.22 685.58 L1305.78 685.58 L1306.34 685.58 L1306.9 685.58 L1307.46 685.58 L1308.02 685.58 L1308.58 685.58 L1309.14 685.58 L1309.7 685.58 L1310.26 685.58 L1310.82 685.58 L1311.38 685.58 L1311.93 685.58 L1312.49 685.58 L1313.05 685.58 L1313.61 685.58 L1314.17 685.58 L1314.73 685.58 L1315.29 685.58 L1315.85 685.58 L1316.41 685.58 L1316.97 685.58 L1317.53 685.58 L1318.09 685.58 L1318.65 685.58 L1319.2 685.58 L1319.76 685.58 L1320.32 685.58 L1320.88 685.58 L1321.44 685.58 L1322 685.58 L1322.56 685.58 L1323.12 685.58 L1323.68 685.58 L1324.24 685.58 L1324.8 685.58 L1325.36 685.58 L1325.92 685.58 L1326.47 685.58 L1327.03 685.58 L1327.59 685.58 L1328.15 685.58 L1328.71 685.58 L1329.27 685.58 L1329.83 685.58 L1330.39 685.58 L1330.95 685.58 L1331.51 685.58 L1332.07 685.58 L1332.63 685.58 L1333.19 685.58 L1333.75 685.58 L1334.3 685.58 L1334.86 685.58 L1335.42 685.58 L1335.98 685.58 L1336.54 685.58 L1337.1 685.58 L1337.66 685.58 L1338.22 685.58 L1338.78 685.58 L1339.34 685.58 L1339.9 685.58 L1340.46 685.58 L1341.02 685.58 L1341.57 685.58 L1342.13 685.58 L1342.69 685.58 L1343.25 685.58 L1343.81 685.58 L1344.37 685.58 L1344.93 685.58 L1345.49 685.58 L1346.05 685.58 L1346.61 685.58 L1347.17 685.58 L1347.73 685.58 L1348.29 685.58 L1348.84 685.58 L1349.4 685.58 L1349.96 685.58 L1350.52 685.58 L1351.08 685.58 L1351.64 685.58 L1352.2 685.58 L1352.76 685.58 L1353.32 685.58 L1353.88 685.58 L1354.44 685.58 L1355 685.58 L1355.56 685.58 L1356.12 685.58 L1356.67 685.58 L1357.23 685.58 L1357.79 685.58 L1358.35 685.58 L1358.91 685.58 L1359.47 685.58 L1360.03 685.58 L1360.59 685.58 L1361.15 685.58 L1361.71 685.58 L1362.27 685.58 L1362.83 685.58 L1363.39 685.58 L1363.94 685.58 L1364.5 685.58 L1365.06 685.58 L1365.62 685.58 L1366.18 685.58 L1366.74 685.58 L1367.3 685.58 L1367.86 685.58 L1368.42 685.58 L1368.98 685.58 L1369.54 685.58 L1370.1 685.58 L1370.66 685.58 L1371.21 685.58 L1371.77 685.58 L1372.33 685.58 L1372.89 685.58 L1373.45 685.58 L1374.01 685.58 L1374.57 685.58 L1375.13 685.58 L1375.69 685.58 L1376.25 685.58 L1376.81 685.58 L1377.37 685.58 L1377.93 685.58 L1378.49 685.58 L1379.04 685.58 L1379.6 685.58 L1380.16 685.58 L1380.72 685.58 L1381.28 685.58 L1381.84 685.58 L1382.4 685.58 L1382.96 685.58 L1383.52 685.58 L1384.08 685.58 L1384.64 685.58 L1385.2 685.58 L1385.76 685.58 L1386.31 685.58 L1386.87 685.58 L1387.43 685.58 L1387.99 685.58 L1388.55 685.58 L1389.11 685.58 L1389.67 685.58 L1390.23 685.58 L1390.79 685.58 L1391.35 685.58 L1391.91 685.58 L1392.47 685.58 L1393.03 685.58 L1393.58 685.58 L1394.14 685.58 L1394.7 685.58 L1395.26 685.58 L1395.82 685.58 L1396.38 685.58 L1396.94 685.58 L1397.5 685.58 L1398.06 685.58 L1398.62 685.58 L1399.18 685.58 L1399.74 685.58 L1400.3 685.58 L1400.86 685.58 L1401.41 685.58 L1401.97 685.58 L1402.53 685.58 L1403.09 685.58 L1403.65 685.58 L1404.21 685.58 L1404.77 685.58 L1405.33 685.58 L1405.89 685.58 L1406.45 685.58 L1407.01 685.58 L1407.57 685.58 L1408.13 685.58 L1408.68 685.58 L1409.24 685.58 L1409.8 685.58 L1410.36 685.58 L1410.92 685.58 L1411.48 685.58 L1412.04 685.58 L1412.6 685.58 L1413.16 685.58 L1413.72 685.58 L1414.28 685.58 L1414.84 685.58 L1415.4 685.58 L1415.95 685.58 L1416.51 685.58 L1417.07 685.58 L1417.63 685.58 L1418.19 685.58 L1418.75 685.58 L1419.31 685.58 L1419.87 685.58 L1420.43 685.58 L1420.99 685.58 L1421.55 685.58 L1422.11 685.58 L1422.67 685.58 L1423.23 685.58 L1423.78 685.58 L1424.34 685.58 L1424.9 685.58 L1425.46 685.58 L1426.02 685.58 L1426.58 685.58 L1427.14 685.58 L1427.7 685.58 L1428.26 685.58 L1428.82 685.58 L1429.38 685.58 L1429.94 685.58 L1430.5 685.58 L1431.05 685.58 L1431.61 685.58 L1432.17 685.58 L1432.73 685.58 L1433.29 685.58 L1433.85 685.58 L1434.41 685.58 L1434.97 685.58 L1435.53 685.58 L1436.09 685.58 L1436.65 685.58 L1437.21 685.58 L1437.77 685.58 L1438.33 685.58 L1438.88 685.58 L1439.44 685.58 L1440 685.58 L1440.56 685.58 L1441.12 685.58 L1441.68 685.58 L1442.24 685.58 L1442.8 685.58 L1443.36 685.58 L1443.92 685.58 L1444.48 685.58 L1445.04 685.58 L1445.6 685.58 L1446.15 685.58 L1446.71 685.58 L1447.27 685.58 L1447.83 685.58 L1448.39 685.58 L1448.95 685.58 L1449.51 685.58 L1450.07 685.58 L1450.63 685.58 L1451.19 685.58 L1451.75 685.58 L1452.31 685.58 L1452.87 685.58 L1453.42 685.58 L1453.98 685.58 L1454.54 685.58 L1455.1 685.58 L1455.66 685.58 L1456.22 685.58 L1456.78 685.58 L1457.34 685.58 L1457.9 685.58 L1458.46 685.58 L1459.02 685.58 L1459.58 685.58 L1460.14 685.58 L1460.7 685.58 L1461.25 685.58 L1461.81 685.58 L1462.37 685.58 L1462.93 685.58 L1463.49 685.58 L1464.05 685.58 L1464.61 685.58 L1465.17 685.58 L1465.73 685.58 L1466.29 685.58 L1466.85 685.58 L1467.41 685.58 L1467.97 685.58 L1468.52 685.58 L1469.08 685.58 L1469.64 685.58 L1470.2 685.58 L1470.76 685.58 L1471.32 685.58 L1471.88 685.58 L1472.44 685.58 L1473 685.58 L1473.56 685.58 L1474.12 685.58 L1474.68 685.58 L1475.24 685.58 L1475.79 685.58 L1476.35 685.58 L1476.91 685.58 L1477.47 685.58 L1478.03 685.58 L1478.59 685.58 L1479.15 685.58 L1479.71 685.58 L1480.27 685.58 L1480.83 685.58 L1481.39 685.58 L1481.95 685.58 L1482.51 685.58 L1483.07 685.58 L1483.62 685.58 L1484.18 685.58 L1484.74 685.58 L1485.3 685.58 L1485.86 685.58 L1486.42 685.58 L1486.98 685.58 L1487.54 685.58 L1488.1 685.58 L1488.66 685.58 L1489.22 685.58 L1489.78 685.58 L1490.34 685.58 L1490.89 685.58 L1491.45 685.58 L1492.01 685.58 L1492.57 685.58 L1493.13 685.58 L1493.69 685.58 L1494.25 685.58 L1494.81 685.58 L1495.37 685.58 L1495.93 685.58 L1496.49 685.58 L1497.05 685.58 L1497.61 685.58 L1498.16 685.58 L1498.72 685.58 L1499.28 685.58 L1499.84 685.58 L1500.4 685.58 L1500.96 685.58 L1501.52 685.58 L1502.08 685.58 L1502.64 685.58 L1503.2 685.58 L1503.76 685.58 L1504.32 685.58 L1504.88 685.58 L1505.44 685.58 L1505.99 685.58 L1506.55 685.58 L1507.11 685.58 L1507.67 685.58 L1508.23 685.58 L1508.79 685.58 L1509.35 685.58 L1509.91 685.58 L1510.47 685.58 L1511.03 685.58 L1511.59 685.58 L1512.15 685.58 L1512.71 685.58 L1513.26 685.58 L1513.82 685.58 L1514.38 685.58 L1514.94 685.58 L1515.5 685.58 L1516.06 685.58 L1516.62 685.58 L1517.18 685.58 L1517.74 685.58 L1518.3 685.58 L1518.86 685.58 L1519.42 685.58 L1519.98 685.58 L1520.53 685.58 L1521.09 685.58 L1521.65 685.58 L1522.21 685.58 L1522.77 685.58 L1523.33 685.58 L1523.89 685.58 L1524.45 685.58 L1525.01 685.58 L1525.57 685.58 L1526.13 685.58 L1526.69 685.58 L1527.25 685.58 L1527.81 685.58 L1528.36 685.58 L1528.92 685.58 L1529.48 685.58 L1530.04 685.58 L1530.6 685.58 L1531.16 685.58 L1531.72 685.58 L1532.28 685.58 L1532.84 685.58 L1533.4 685.58 L1533.96 685.58 L1534.52 685.58 L1535.08 685.58 L1535.63 685.58 L1536.19 685.58 L1536.75 685.58 L1537.31 685.58 L1537.87 685.58 L1538.43 685.58 L1538.99 685.58 L1539.55 685.58 L1540.11 685.58 L1540.67 685.58 L1541.23 685.58 L1541.79 685.58 L1542.35 685.58 L1542.9 685.58 L1543.46 685.58 L1544.02 685.58 L1544.58 685.58 L1545.14 685.58 L1545.7 685.58 L1546.26 685.58 L1546.82 685.58 L1547.38 685.58 L1547.94 685.58 L1548.5 685.58 L1549.06 685.58 L1549.62 685.58 L1550.18 685.58 L1550.73 685.58 L1551.29 685.58 L1551.85 685.58 L1552.41 685.58 L1552.97 685.58 L1553.53 685.58 L1554.09 685.58 L1554.65 685.58 L1555.21 685.58 L1555.77 685.58 L1556.33 685.58 L1556.89 685.58 L1557.45 685.58 L1558 685.58 L1558.56 685.58 L1559.12 685.58 L1559.68 685.58 L1560.24 685.58 L1560.8 685.58 L1561.36 685.58 L1561.92 685.58 L1562.48 685.58 L1563.04 685.58 L1563.6 685.58 L1564.16 685.58 L1564.72 685.58 L1565.28 685.58 L1565.83 685.58 L1566.39 685.58 L1566.95 685.58 L1567.51 685.58 L1568.07 685.58 L1568.63 685.58 L1569.19 685.58 L1569.75 685.58 L1570.31 685.58 L1570.87 685.58 L1571.43 685.58 L1571.99 685.58 L1572.55 685.58 L1573.1 685.58 L1573.66 685.58 L1574.22 685.58 L1574.78 685.58 L1575.34 685.58 L1575.9 685.58 L1576.46 685.58 L1577.02 685.58 L1577.58 685.58 L1578.14 685.58 L1578.7 685.58 L1579.26 685.58 L1579.82 685.58 L1580.37 685.58 L1580.93 685.58 L1581.49 685.58 L1582.05 685.58 L1582.61 685.58 L1583.17 685.58 L1583.73 685.58 L1584.29 685.58 L1584.85 685.58 L1585.41 685.58 L1585.97 685.58 L1586.53 685.58 L1587.09 685.58 L1587.65 685.58 L1588.2 685.58 L1588.76 685.58 L1589.32 685.58 L1589.88 685.58 L1590.44 685.58 L1591 685.58 L1591.56 685.58 L1592.12 685.58 L1592.68 685.58 L1593.24 685.58 L1593.8 685.58 L1594.36 685.58 L1594.92 685.58 L1595.47 685.58 L1596.03 685.58 L1596.59 685.58 L1597.15 685.58 L1597.71 685.58 L1598.27 685.58 L1598.83 685.58 L1599.39 685.58 L1599.95 685.58 L1600.51 685.58 L1601.07 685.58 L1601.63 685.58 L1602.19 685.58 L1602.74 685.58 L1603.3 685.58 L1603.86 685.58 L1604.42 685.58 L1604.98 685.58 L1605.54 685.58 L1606.1 685.58 L1606.66 685.58 L1607.22 685.58 L1607.78 685.58 L1608.34 685.58 L1608.9 685.58 L1609.46 685.58 L1610.02 685.58 L1610.57 685.58 L1611.13 685.58 L1611.69 685.58 L1612.25 685.58 L1612.81 685.58 L1613.37 685.58 L1613.93 685.58 L1614.49 685.58 L1615.05 685.58 L1615.61 685.58 L1616.17 685.58 L1616.73 685.58 L1617.29 685.58 L1617.84 685.58 L1618.4 685.58 L1618.96 685.58 L1619.52 685.58 L1620.08 685.58 L1620.64 685.58 L1621.2 685.58 L1621.76 685.58 L1622.32 685.58 L1622.88 685.58 L1623.44 685.58 L1624 685.58 L1624.56 685.58 L1625.11 685.58 L1625.67 685.58 L1626.23 685.58 L1626.79 685.58 L1627.35 685.58 L1627.91 685.58 L1628.47 685.58 L1629.03 685.58 L1629.59 685.58 L1630.15 685.58 L1630.71 685.58 L1631.27 685.58 L1631.83 685.58 L1632.39 685.58 L1632.94 685.58 L1633.5 685.58 L1634.06 685.58 L1634.62 685.58 L1635.18 685.58 L1635.74 685.58 L1636.3 685.58 L1636.86 685.58 L1637.42 685.58 L1637.98 685.58 L1638.54 685.58 L1639.1 685.58 L1639.66 685.58 L1640.21 685.58 L1640.77 685.58 L1641.33 685.58 L1641.89 685.58 L1642.45 685.58 L1643.01 685.58 L1643.57 685.58 L1644.13 685.58 L1644.69 685.58 L1645.25 685.58 L1645.81 685.58 L1646.37 685.58 L1646.93 685.58 L1647.48 685.58 L1648.04 685.58 L1648.6 685.58 L1649.16 685.58 L1649.72 685.58 L1650.28 685.58 L1650.84 685.58 L1651.4 685.58 L1651.96 685.58 L1652.52 685.58 L1653.08 685.58 L1653.64 685.58 L1654.2 685.58 L1654.76 685.58 L1655.31 685.58 L1655.87 685.58 L1656.43 685.58 L1656.99 685.58 L1657.55 685.58 L1658.11 685.58 L1658.67 685.58 L1659.23 685.58 L1659.79 685.58 L1660.35 685.58 L1660.91 685.58 L1661.47 685.58 L1662.03 685.58 L1662.58 685.58 L1663.14 685.58 L1663.7 685.58 L1664.26 685.58 L1664.82 685.58 L1665.38 685.58 L1665.94 685.58 L1666.5 685.58 L1667.06 685.58 L1667.62 685.58 L1668.18 685.58 L1668.74 685.58 L1669.3 685.58 L1669.85 685.58 L1670.41 685.58 L1670.97 685.58 L1671.53 685.58 L1672.09 685.58 L1672.65 685.58 L1673.21 685.58 L1673.77 685.58 L1674.33 685.58 L1674.89 685.58 L1675.45 685.58 L1676.01 685.58 L1676.57 685.58 L1677.13 685.58 L1677.68 685.58 L1678.24 685.58 L1678.8 685.58 L1679.36 685.58 L1679.92 685.58 L1680.48 685.58 L1681.04 685.58 L1681.6 685.58 L1682.16 685.58 L1682.72 685.58 L1683.28 685.58 L1683.84 685.58 L1684.4 685.58 L1684.95 685.58 L1685.51 685.58 L1686.07 685.58 L1686.63 685.58 L1687.19 685.58 L1687.75 685.58 L1688.31 685.58 L1688.87 685.58 L1689.43 685.58 L1689.99 685.58 L1690.55 685.58 L1691.11 685.58 L1691.67 685.58 L1692.23 685.58 L1692.78 685.58 L1693.34 685.58 L1693.9 685.58 L1694.46 685.58 L1695.02 685.58 L1695.58 685.58 L1696.14 685.58 L1696.7 685.58 L1697.26 685.58 L1697.82 685.58 L1698.38 685.58 L1698.94 685.58 L1699.5 685.58 L1700.05 685.58 L1700.61 685.58 L1701.17 685.58 L1701.73 685.58 L1702.29 685.58 L1702.85 685.58 L1703.41 685.58 L1703.97 685.58 L1704.53 685.58 L1705.09 685.58 L1705.65 685.58 L1706.21 685.58 L1706.77 685.58 L1707.32 685.58 L1707.88 685.58 L1708.44 685.58 L1709 685.58 L1709.56 685.58 L1710.12 685.58 L1710.68 685.58 L1711.24 685.58 L1711.8 685.58 L1712.36 685.58 L1712.92 685.58 L1713.48 685.58 L1714.04 685.58 L1714.6 685.58 L1715.15 685.58 L1715.71 685.58 L1716.27 685.58 L1716.83 685.58 L1717.39 685.58 L1717.95 685.58 L1718.51 685.58 L1719.07 685.58 L1719.63 685.58 L1720.19 685.58 L1720.75 685.58 L1721.31 685.58 L1721.87 685.58 L1722.42 685.58 L1722.98 685.58 L1723.54 685.58 L1724.1 685.58 L1724.66 685.58 L1725.22 685.58 L1725.78 685.58 L1726.34 685.58 L1726.9 685.58 L1727.46 685.58 L1728.02 685.58 L1728.58 685.58 L1729.14 685.58 L1729.69 685.58 L1730.25 685.58 L1730.81 685.58 L1731.37 685.58 L1731.93 685.58 L1732.49 685.58 L1733.05 685.58 L1733.61 685.58 L1734.17 685.58 L1734.73 685.58 L1735.29 685.58 L1735.85 685.58 L1736.41 685.58 L1736.97 685.58 L1737.52 685.58 L1738.08 685.58 L1738.64 685.58 L1739.2 685.58 L1739.76 685.58 L1740.32 685.58 L1740.88 685.58 L1741.44 685.58 L1742 685.58 L1742.56 685.58 L1743.12 685.58 L1743.68 685.58 L1744.24 685.58 L1744.79 685.58 L1745.35 685.58 L1745.91 685.58 L1746.47 685.58 L1747.03 685.58 L1747.59 685.58 L1748.15 685.58 L1748.71 685.58 L1749.27 685.58 L1749.83 685.58 L1750.39 685.58 L1750.95 685.58 L1751.51 685.58 L1752.06 685.58 L1752.62 685.58 L1753.18 685.58 L1753.74 685.58 L1754.3 685.58 L1754.86 685.58 L1755.42 685.58 L1755.98 685.58 L1756.54 685.58 L1757.1 685.58 L1757.66 685.58 L1758.22 685.58 L1758.78 685.58 L1759.34 685.58 L1759.89 685.58 L1760.45 685.58 L1761.01 685.58 L1761.57 685.58 L1762.13 685.58 L1762.69 685.58 L1763.25 685.58 L1763.81 685.58 L1764.37 685.58 L1764.93 685.58 L1765.49 685.58 L1766.05 685.58 L1766.61 685.58 L1767.16 685.58 L1767.72 685.58 L1768.28 685.58 L1768.84 685.58 L1769.4 685.58 L1769.96 685.58 L1770.52 685.58 L1771.08 685.58 L1771.64 685.58 L1772.2 685.58 L1772.76 685.58 L1773.32 685.58 L1773.88 685.58 L1774.43 685.58 L1774.99 685.58 L1775.55 685.58 L1776.11 685.58 L1776.67 685.58 L1777.23 685.58 L1777.79 685.58 L1778.35 685.58 L1778.91 685.58 L1779.47 685.58 L1780.03 685.58 L1780.59 685.58 L1781.15 685.58 L1781.71 685.58 L1782.26 685.58 L1782.82 685.58 L1783.38 685.58 L1783.94 685.58 L1784.5 685.58 L1785.06 685.58 L1785.62 685.58 L1786.18 685.58 L1786.74 685.58 L1787.3 685.58 L1787.86 685.58 L1788.42 685.58 L1788.98 685.58 L1789.53 685.58 L1790.09 685.58 L1790.65 685.58 L1791.21 685.58 L1791.77 685.58 L1792.33 685.58 L1792.89 685.58 L1793.45 685.58 L1794.01 685.58 L1794.57 685.58 L1795.13 685.58 L1795.69 685.58 L1796.25 685.58 L1796.8 685.58 L1797.36 685.58 L1797.92 685.58 L1798.48 685.58 L1799.04 685.58 L1799.6 685.58 L1800.16 685.58 L1800.72 685.58 L1801.28 685.58 L1801.84 685.58 L1802.4 685.58 L1802.96 685.58 L1803.52 685.58 L1804.08 685.58 L1804.63 685.58 L1805.19 685.58 L1805.75 685.58 L1806.31 685.58 L1806.87 685.58 L1807.43 685.58 L1807.99 685.58 L1808.55 685.58 L1809.11 685.58 L1809.67 685.58 L1810.23 685.58 L1810.79 685.58 L1811.35 685.58 L1811.9 685.58 L1812.46 685.58 L1813.02 685.58 L1813.58 685.58 L1814.14 685.58 L1814.7 685.58 L1815.26 685.58 L1815.82 685.58 L1816.38 685.58 L1816.94 685.58 L1817.5 685.58 L1818.06 685.58 L1818.62 685.58 L1819.18 685.58 L1819.73 685.58 L1820.29 685.58 L1820.85 685.58 L1821.41 685.58 L1821.97 685.58 L1822.53 685.58 L1823.09 685.58 L1823.65 685.58 L1824.21 685.58 L1824.77 685.58 L1825.33 685.58 L1825.89 685.58 L1826.45 685.58 L1827 685.58 L1827.56 685.58 L1828.12 685.58 L1828.68 685.58 L1829.24 685.58 L1829.8 685.58 L1830.36 685.58 L1830.92 685.58 L1831.48 685.58 L1832.04 685.58 L1832.6 685.58 L1833.16 685.58 L1833.72 685.58 L1834.27 685.58 L1834.83 685.58 L1835.39 685.58 L1835.95 685.58 L1836.51 685.58 L1837.07 685.58 L1837.63 685.58 L1838.19 685.58 L1838.19 683.092 L1837.63 683.092 L1837.07 683.092 L1836.51 683.092 L1835.95 683.092 L1835.39 683.092 L1834.83 683.092 L1834.27 683.092 L1833.72 683.092 L1833.16 683.092 L1832.6 683.092 L1832.04 683.092 L1831.48 683.092 L1830.92 683.092 L1830.36 683.092 L1829.8 683.092 L1829.24 683.092 L1828.68 683.092 L1828.12 683.092 L1827.56 683.092 L1827 683.092 L1826.45 683.092 L1825.89 683.092 L1825.33 683.092 L1824.77 683.092 L1824.21 683.092 L1823.65 683.092 L1823.09 683.092 L1822.53 683.092 L1821.97 683.092 L1821.41 683.092 L1820.85 683.092 L1820.29 683.092 L1819.73 683.092 L1819.18 683.092 L1818.62 683.092 L1818.06 683.092 L1817.5 683.092 L1816.94 683.092 L1816.38 683.092 L1815.82 683.092 L1815.26 683.092 L1814.7 683.092 L1814.14 683.092 L1813.58 683.092 L1813.02 683.092 L1812.46 683.092 L1811.9 683.092 L1811.35 683.092 L1810.79 683.092 L1810.23 683.092 L1809.67 683.092 L1809.11 683.092 L1808.55 683.092 L1807.99 683.092 L1807.43 683.092 L1806.87 683.092 L1806.31 683.092 L1805.75 683.092 L1805.19 683.092 L1804.63 683.092 L1804.08 683.092 L1803.52 683.092 L1802.96 683.092 L1802.4 683.092 L1801.84 683.092 L1801.28 683.092 L1800.72 683.092 L1800.16 683.092 L1799.6 683.092 L1799.04 683.092 L1798.48 683.092 L1797.92 683.092 L1797.36 683.092 L1796.8 683.092 L1796.25 683.092 L1795.69 683.092 L1795.13 683.092 L1794.57 683.092 L1794.01 683.092 L1793.45 683.092 L1792.89 683.092 L1792.33 683.092 L1791.77 683.092 L1791.21 683.092 L1790.65 683.092 L1790.09 683.092 L1789.53 683.092 L1788.98 683.092 L1788.42 683.092 L1787.86 683.092 L1787.3 683.092 L1786.74 683.092 L1786.18 683.092 L1785.62 683.092 L1785.06 683.092 L1784.5 683.092 L1783.94 683.092 L1783.38 683.092 L1782.82 683.092 L1782.26 683.092 L1781.71 683.092 L1781.15 683.092 L1780.59 683.092 L1780.03 683.092 L1779.47 683.092 L1778.91 683.092 L1778.35 683.092 L1777.79 683.092 L1777.23 683.092 L1776.67 683.092 L1776.11 683.092 L1775.55 683.092 L1774.99 683.092 L1774.43 683.092 L1773.88 683.092 L1773.32 683.092 L1772.76 683.092 L1772.2 683.092 L1771.64 683.092 L1771.08 683.092 L1770.52 683.092 L1769.96 683.092 L1769.4 683.092 L1768.84 683.092 L1768.28 683.092 L1767.72 683.092 L1767.16 683.092 L1766.61 683.092 L1766.05 683.092 L1765.49 683.092 L1764.93 683.092 L1764.37 683.092 L1763.81 683.092 L1763.25 683.092 L1762.69 683.092 L1762.13 683.092 L1761.57 683.092 L1761.01 683.092 L1760.45 683.092 L1759.89 683.092 L1759.34 683.092 L1758.78 683.092 L1758.22 683.092 L1757.66 683.092 L1757.1 683.092 L1756.54 683.092 L1755.98 683.092 L1755.42 683.092 L1754.86 683.092 L1754.3 683.092 L1753.74 683.092 L1753.18 683.092 L1752.62 683.092 L1752.06 683.092 L1751.51 683.092 L1750.95 683.092 L1750.39 683.092 L1749.83 683.092 L1749.27 683.092 L1748.71 683.092 L1748.15 683.092 L1747.59 683.092 L1747.03 683.092 L1746.47 683.092 L1745.91 683.092 L1745.35 683.092 L1744.79 683.092 L1744.24 683.092 L1743.68 683.092 L1743.12 683.092 L1742.56 683.092 L1742 683.092 L1741.44 683.092 L1740.88 683.092 L1740.32 683.092 L1739.76 683.092 L1739.2 683.092 L1738.64 683.092 L1738.08 683.092 L1737.52 683.092 L1736.97 683.092 L1736.41 683.092 L1735.85 683.092 L1735.29 683.092 L1734.73 683.092 L1734.17 683.092 L1733.61 683.092 L1733.05 683.092 L1732.49 683.092 L1731.93 683.092 L1731.37 683.092 L1730.81 683.092 L1730.25 683.092 L1729.69 683.092 L1729.14 683.092 L1728.58 683.092 L1728.02 683.092 L1727.46 683.092 L1726.9 683.092 L1726.34 683.092 L1725.78 683.092 L1725.22 683.092 L1724.66 683.092 L1724.1 683.092 L1723.54 683.092 L1722.98 683.092 L1722.42 683.092 L1721.87 683.092 L1721.31 683.092 L1720.75 683.092 L1720.19 683.092 L1719.63 683.092 L1719.07 683.092 L1718.51 683.092 L1717.95 683.092 L1717.39 683.092 L1716.83 683.092 L1716.27 683.092 L1715.71 683.092 L1715.15 683.092 L1714.6 683.092 L1714.04 683.092 L1713.48 683.092 L1712.92 683.092 L1712.36 683.092 L1711.8 683.092 L1711.24 683.092 L1710.68 683.092 L1710.12 683.092 L1709.56 683.092 L1709 683.092 L1708.44 683.092 L1707.88 683.092 L1707.32 683.092 L1706.77 683.092 L1706.21 683.092 L1705.65 683.092 L1705.09 683.092 L1704.53 683.092 L1703.97 683.092 L1703.41 683.092 L1702.85 683.092 L1702.29 683.092 L1701.73 683.092 L1701.17 683.092 L1700.61 683.092 L1700.05 683.092 L1699.5 683.092 L1698.94 683.092 L1698.38 683.092 L1697.82 683.092 L1697.26 683.092 L1696.7 683.092 L1696.14 683.092 L1695.58 683.092 L1695.02 683.092 L1694.46 683.092 L1693.9 683.092 L1693.34 683.092 L1692.78 683.092 L1692.23 683.092 L1691.67 683.092 L1691.11 683.092 L1690.55 683.092 L1689.99 683.092 L1689.43 683.092 L1688.87 683.092 L1688.31 683.092 L1687.75 683.092 L1687.19 683.092 L1686.63 683.092 L1686.07 683.092 L1685.51 683.092 L1684.95 683.092 L1684.4 683.092 L1683.84 683.092 L1683.28 683.092 L1682.72 683.092 L1682.16 683.092 L1681.6 683.092 L1681.04 683.092 L1680.48 683.092 L1679.92 683.092 L1679.36 683.092 L1678.8 683.092 L1678.24 683.092 L1677.68 683.092 L1677.13 683.092 L1676.57 683.092 L1676.01 683.092 L1675.45 683.092 L1674.89 683.092 L1674.33 683.092 L1673.77 683.092 L1673.21 683.092 L1672.65 683.092 L1672.09 683.092 L1671.53 683.092 L1670.97 683.092 L1670.41 683.092 L1669.85 683.092 L1669.3 683.092 L1668.74 683.092 L1668.18 683.092 L1667.62 683.092 L1667.06 683.092 L1666.5 683.092 L1665.94 683.092 L1665.38 683.092 L1664.82 683.092 L1664.26 683.092 L1663.7 683.092 L1663.14 683.092 L1662.58 683.092 L1662.03 683.092 L1661.47 683.092 L1660.91 683.092 L1660.35 683.092 L1659.79 683.092 L1659.23 683.092 L1658.67 683.092 L1658.11 683.092 L1657.55 683.092 L1656.99 683.092 L1656.43 683.092 L1655.87 683.092 L1655.31 683.092 L1654.76 683.092 L1654.2 683.092 L1653.64 683.092 L1653.08 683.092 L1652.52 683.092 L1651.96 683.092 L1651.4 683.092 L1650.84 683.092 L1650.28 683.092 L1649.72 683.092 L1649.16 683.092 L1648.6 683.092 L1648.04 683.092 L1647.48 683.092 L1646.93 683.092 L1646.37 683.092 L1645.81 683.092 L1645.25 683.092 L1644.69 683.092 L1644.13 683.092 L1643.57 683.092 L1643.01 683.092 L1642.45 683.092 L1641.89 683.092 L1641.33 683.092 L1640.77 683.092 L1640.21 683.092 L1639.66 683.092 L1639.1 683.092 L1638.54 683.092 L1637.98 683.092 L1637.42 683.092 L1636.86 683.092 L1636.3 683.092 L1635.74 683.092 L1635.18 683.092 L1634.62 683.092 L1634.06 683.092 L1633.5 683.092 L1632.94 683.092 L1632.39 683.092 L1631.83 683.092 L1631.27 683.092 L1630.71 683.092 L1630.15 683.092 L1629.59 683.092 L1629.03 683.092 L1628.47 683.092 L1627.91 683.092 L1627.35 683.092 L1626.79 683.092 L1626.23 683.092 L1625.67 683.092 L1625.11 683.092 L1624.56 683.092 L1624 683.092 L1623.44 683.092 L1622.88 683.092 L1622.32 683.092 L1621.76 683.092 L1621.2 683.092 L1620.64 683.092 L1620.08 683.092 L1619.52 683.092 L1618.96 683.092 L1618.4 683.092 L1617.84 683.092 L1617.29 683.092 L1616.73 683.092 L1616.17 683.092 L1615.61 683.092 L1615.05 683.092 L1614.49 683.092 L1613.93 683.092 L1613.37 683.092 L1612.81 683.092 L1612.25 683.092 L1611.69 683.092 L1611.13 683.092 L1610.57 683.092 L1610.02 683.092 L1609.46 683.092 L1608.9 683.092 L1608.34 683.092 L1607.78 683.092 L1607.22 683.092 L1606.66 683.092 L1606.1 683.092 L1605.54 683.092 L1604.98 683.092 L1604.42 683.092 L1603.86 683.092 L1603.3 683.092 L1602.74 683.092 L1602.19 683.092 L1601.63 683.092 L1601.07 683.092 L1600.51 683.092 L1599.95 683.092 L1599.39 683.092 L1598.83 683.092 L1598.27 683.092 L1597.71 683.092 L1597.15 683.092 L1596.59 683.092 L1596.03 683.092 L1595.47 683.092 L1594.92 683.092 L1594.36 683.092 L1593.8 683.092 L1593.24 683.092 L1592.68 683.092 L1592.12 683.092 L1591.56 683.092 L1591 683.092 L1590.44 683.092 L1589.88 683.092 L1589.32 683.092 L1588.76 683.092 L1588.2 683.092 L1587.65 683.092 L1587.09 683.092 L1586.53 683.092 L1585.97 683.092 L1585.41 683.092 L1584.85 683.092 L1584.29 683.092 L1583.73 683.092 L1583.17 683.092 L1582.61 683.092 L1582.05 683.092 L1581.49 683.092 L1580.93 683.092 L1580.37 683.092 L1579.82 683.092 L1579.26 683.092 L1578.7 683.092 L1578.14 683.092 L1577.58 683.092 L1577.02 683.092 L1576.46 683.092 L1575.9 683.092 L1575.34 683.092 L1574.78 683.092 L1574.22 683.092 L1573.66 683.092 L1573.1 683.092 L1572.55 683.092 L1571.99 683.092 L1571.43 683.092 L1570.87 683.092 L1570.31 683.092 L1569.75 683.092 L1569.19 683.092 L1568.63 683.092 L1568.07 683.092 L1567.51 683.092 L1566.95 683.092 L1566.39 683.092 L1565.83 683.092 L1565.28 683.092 L1564.72 683.092 L1564.16 683.092 L1563.6 683.092 L1563.04 683.092 L1562.48 683.092 L1561.92 683.092 L1561.36 683.092 L1560.8 683.092 L1560.24 683.092 L1559.68 683.092 L1559.12 683.092 L1558.56 683.092 L1558 683.092 L1557.45 683.092 L1556.89 683.092 L1556.33 683.092 L1555.77 683.092 L1555.21 683.092 L1554.65 683.092 L1554.09 683.092 L1553.53 683.092 L1552.97 683.092 L1552.41 683.092 L1551.85 683.092 L1551.29 683.092 L1550.73 683.092 L1550.18 683.092 L1549.62 683.092 L1549.06 683.092 L1548.5 683.092 L1547.94 683.092 L1547.38 683.092 L1546.82 683.092 L1546.26 683.092 L1545.7 683.092 L1545.14 683.092 L1544.58 683.092 L1544.02 683.092 L1543.46 683.092 L1542.9 683.092 L1542.35 683.092 L1541.79 683.092 L1541.23 683.092 L1540.67 683.092 L1540.11 683.092 L1539.55 683.092 L1538.99 683.092 L1538.43 683.092 L1537.87 683.092 L1537.31 683.092 L1536.75 683.092 L1536.19 683.092 L1535.63 683.092 L1535.08 683.092 L1534.52 683.092 L1533.96 683.092 L1533.4 683.092 L1532.84 683.092 L1532.28 683.092 L1531.72 683.092 L1531.16 683.092 L1530.6 683.092 L1530.04 683.092 L1529.48 683.092 L1528.92 683.092 L1528.36 683.092 L1527.81 683.092 L1527.25 683.092 L1526.69 683.092 L1526.13 683.092 L1525.57 683.092 L1525.01 683.092 L1524.45 683.092 L1523.89 683.092 L1523.33 683.092 L1522.77 683.092 L1522.21 683.092 L1521.65 683.092 L1521.09 683.092 L1520.53 683.092 L1519.98 683.092 L1519.42 683.092 L1518.86 683.092 L1518.3 683.092 L1517.74 683.092 L1517.18 683.092 L1516.62 683.092 L1516.06 683.092 L1515.5 683.092 L1514.94 683.092 L1514.38 683.092 L1513.82 683.092 L1513.26 683.092 L1512.71 683.092 L1512.15 683.092 L1511.59 683.092 L1511.03 683.092 L1510.47 683.092 L1509.91 683.092 L1509.35 683.092 L1508.79 683.092 L1508.23 683.092 L1507.67 683.092 L1507.11 683.092 L1506.55 683.092 L1505.99 683.092 L1505.44 683.092 L1504.88 683.092 L1504.32 683.092 L1503.76 683.092 L1503.2 683.092 L1502.64 683.092 L1502.08 683.092 L1501.52 683.092 L1500.96 683.092 L1500.4 683.092 L1499.84 683.092 L1499.28 683.092 L1498.72 683.092 L1498.16 683.092 L1497.61 683.092 L1497.05 683.092 L1496.49 683.092 L1495.93 683.092 L1495.37 683.092 L1494.81 683.092 L1494.25 683.092 L1493.69 683.092 L1493.13 683.092 L1492.57 683.092 L1492.01 683.092 L1491.45 683.092 L1490.89 683.092 L1490.34 683.092 L1489.78 683.092 L1489.22 683.092 L1488.66 683.092 L1488.1 683.092 L1487.54 683.092 L1486.98 683.092 L1486.42 683.092 L1485.86 683.092 L1485.3 683.092 L1484.74 683.092 L1484.18 683.092 L1483.62 683.092 L1483.07 683.092 L1482.51 683.092 L1481.95 683.092 L1481.39 683.092 L1480.83 683.092 L1480.27 683.092 L1479.71 683.092 L1479.15 683.092 L1478.59 683.092 L1478.03 683.092 L1477.47 683.092 L1476.91 683.092 L1476.35 683.092 L1475.79 683.092 L1475.24 683.092 L1474.68 683.092 L1474.12 683.092 L1473.56 683.092 L1473 683.092 L1472.44 683.092 L1471.88 683.092 L1471.32 683.092 L1470.76 683.092 L1470.2 683.092 L1469.64 683.092 L1469.08 683.092 L1468.52 683.092 L1467.97 683.092 L1467.41 683.092 L1466.85 683.092 L1466.29 683.092 L1465.73 683.092 L1465.17 683.092 L1464.61 683.092 L1464.05 683.092 L1463.49 683.092 L1462.93 683.092 L1462.37 683.092 L1461.81 683.092 L1461.25 683.092 L1460.7 683.092 L1460.14 683.092 L1459.58 683.092 L1459.02 683.092 L1458.46 683.092 L1457.9 683.092 L1457.34 683.092 L1456.78 683.092 L1456.22 683.092 L1455.66 683.092 L1455.1 683.092 L1454.54 683.092 L1453.98 683.092 L1453.42 683.092 L1452.87 683.092 L1452.31 683.092 L1451.75 683.092 L1451.19 683.092 L1450.63 683.092 L1450.07 683.092 L1449.51 683.092 L1448.95 683.092 L1448.39 683.092 L1447.83 683.092 L1447.27 683.092 L1446.71 683.092 L1446.15 683.092 L1445.6 683.092 L1445.04 683.092 L1444.48 683.092 L1443.92 683.092 L1443.36 683.092 L1442.8 683.092 L1442.24 683.092 L1441.68 683.092 L1441.12 683.092 L1440.56 683.092 L1440 683.092 L1439.44 683.092 L1438.88 683.092 L1438.33 683.092 L1437.77 683.092 L1437.21 683.092 L1436.65 683.092 L1436.09 683.092 L1435.53 683.092 L1434.97 683.092 L1434.41 683.092 L1433.85 683.092 L1433.29 683.092 L1432.73 683.092 L1432.17 683.092 L1431.61 683.092 L1431.05 683.092 L1430.5 683.092 L1429.94 683.092 L1429.38 683.092 L1428.82 683.092 L1428.26 683.092 L1427.7 683.092 L1427.14 683.092 L1426.58 683.092 L1426.02 683.092 L1425.46 683.092 L1424.9 683.092 L1424.34 683.092 L1423.78 683.092 L1423.23 683.092 L1422.67 683.092 L1422.11 683.092 L1421.55 683.092 L1420.99 683.092 L1420.43 683.092 L1419.87 683.092 L1419.31 683.092 L1418.75 683.092 L1418.19 683.092 L1417.63 683.092 L1417.07 683.092 L1416.51 683.092 L1415.95 683.092 L1415.4 683.092 L1414.84 683.092 L1414.28 683.092 L1413.72 683.092 L1413.16 683.092 L1412.6 683.092 L1412.04 683.092 L1411.48 683.092 L1410.92 683.092 L1410.36 683.092 L1409.8 683.092 L1409.24 683.092 L1408.68 683.092 L1408.13 683.092 L1407.57 683.092 L1407.01 683.092 L1406.45 683.092 L1405.89 683.092 L1405.33 683.092 L1404.77 683.092 L1404.21 683.092 L1403.65 683.092 L1403.09 683.092 L1402.53 683.092 L1401.97 683.092 L1401.41 683.092 L1400.86 683.092 L1400.3 683.092 L1399.74 683.092 L1399.18 683.092 L1398.62 683.092 L1398.06 683.092 L1397.5 683.092 L1396.94 683.092 L1396.38 683.092 L1395.82 683.092 L1395.26 683.092 L1394.7 683.092 L1394.14 683.092 L1393.58 683.092 L1393.03 683.092 L1392.47 683.092 L1391.91 683.092 L1391.35 683.092 L1390.79 683.092 L1390.23 683.092 L1389.67 683.092 L1389.11 683.092 L1388.55 683.092 L1387.99 683.092 L1387.43 683.092 L1386.87 683.092 L1386.31 683.092 L1385.76 683.092 L1385.2 683.092 L1384.64 683.092 L1384.08 683.092 L1383.52 683.092 L1382.96 683.092 L1382.4 683.092 L1381.84 683.092 L1381.28 683.092 L1380.72 683.092 L1380.16 683.092 L1379.6 683.092 L1379.04 683.092 L1378.49 683.092 L1377.93 683.092 L1377.37 683.092 L1376.81 683.092 L1376.25 683.092 L1375.69 683.092 L1375.13 683.092 L1374.57 683.092 L1374.01 683.092 L1373.45 683.092 L1372.89 683.092 L1372.33 683.092 L1371.77 683.092 L1371.21 683.092 L1370.66 683.092 L1370.1 683.092 L1369.54 683.092 L1368.98 683.092 L1368.42 683.092 L1367.86 683.092 L1367.3 683.092 L1366.74 683.092 L1366.18 683.092 L1365.62 683.092 L1365.06 683.092 L1364.5 683.092 L1363.94 683.092 L1363.39 683.092 L1362.83 683.092 L1362.27 683.092 L1361.71 683.092 L1361.15 683.092 L1360.59 683.092 L1360.03 683.092 L1359.47 683.092 L1358.91 683.092 L1358.35 683.092 L1357.79 683.092 L1357.23 683.092 L1356.67 683.092 L1356.12 683.092 L1355.56 683.092 L1355 683.092 L1354.44 683.092 L1353.88 683.092 L1353.32 683.092 L1352.76 683.092 L1352.2 683.092 L1351.64 683.092 L1351.08 683.092 L1350.52 683.092 L1349.96 683.092 L1349.4 683.092 L1348.84 683.092 L1348.29 683.092 L1347.73 683.092 L1347.17 683.092 L1346.61 683.092 L1346.05 683.092 L1345.49 683.092 L1344.93 683.092 L1344.37 683.092 L1343.81 683.092 L1343.25 683.092 L1342.69 683.092 L1342.13 683.092 L1341.57 683.092 L1341.02 683.092 L1340.46 683.092 L1339.9 683.092 L1339.34 683.092 L1338.78 683.092 L1338.22 683.092 L1337.66 683.092 L1337.1 683.092 L1336.54 683.092 L1335.98 683.092 L1335.42 683.092 L1334.86 683.092 L1334.3 683.092 L1333.75 683.092 L1333.19 683.092 L1332.63 683.092 L1332.07 683.092 L1331.51 683.092 L1330.95 683.092 L1330.39 683.092 L1329.83 683.092 L1329.27 683.092 L1328.71 683.092 L1328.15 683.092 L1327.59 683.092 L1327.03 683.092 L1326.47 683.092 L1325.92 683.092 L1325.36 683.092 L1324.8 683.092 L1324.24 683.092 L1323.68 683.092 L1323.12 683.092 L1322.56 683.092 L1322 683.092 L1321.44 683.092 L1320.88 683.092 L1320.32 683.092 L1319.76 683.092 L1319.2 683.092 L1318.65 683.092 L1318.09 683.092 L1317.53 683.092 L1316.97 683.092 L1316.41 683.092 L1315.85 683.092 L1315.29 683.092 L1314.73 683.092 L1314.17 683.092 L1313.61 683.092 L1313.05 683.092 L1312.49 683.092 L1311.93 683.092 L1311.38 683.092 L1310.82 683.092 L1310.26 683.092 L1309.7 683.092 L1309.14 683.092 L1308.58 683.092 L1308.02 683.092 L1307.46 683.092 L1306.9 683.092 L1306.34 683.092 L1305.78 683.092 L1305.22 683.092 L1304.66 683.092 L1304.1 683.092 L1303.55 683.092 L1302.99 683.092 L1302.43 683.092 L1301.87 683.092 L1301.31 683.092 L1300.75 683.092 L1300.19 683.092 L1299.63 683.092 L1299.07 683.092 L1298.51 683.092 L1297.95 683.092 L1297.39 683.092 L1296.83 683.092 L1296.28 683.092 L1295.72 683.092 L1295.16 683.092 L1294.6 683.092 L1294.04 683.092 L1293.48 683.092 L1292.92 683.092 L1292.36 683.092 L1291.8 683.092 L1291.24 683.092 L1290.68 683.092 L1290.12 683.092 L1289.56 683.092 L1289 683.092 L1288.45 683.092 L1287.89 683.092 L1287.33 683.092 L1286.77 683.092 L1286.21 683.092 L1285.65 683.092 L1285.09 683.092 L1284.53 683.092 L1283.97 683.092 L1283.41 683.092 L1282.85 683.092 L1282.29 683.092 L1281.73 683.092 L1281.18 683.092 L1280.62 683.092 L1280.06 683.092 L1279.5 683.092 L1278.94 683.092 L1278.38 683.092 L1277.82 683.092 L1277.26 683.092 L1276.7 683.092 L1276.14 683.092 L1275.58 683.092 L1275.02 683.092 L1274.46 683.092 L1273.91 683.092 L1273.35 683.092 L1272.79 683.092 L1272.23 683.092 L1271.67 683.092 L1271.11 683.092 L1270.55 683.092 L1269.99 683.092 L1269.43 683.092 L1268.87 683.092 L1268.31 683.092 L1267.75 683.092 L1267.19 683.092 L1266.63 683.092 L1266.08 683.092 L1265.52 683.092 L1264.96 683.092 L1264.4 683.092 L1263.84 683.092 L1263.28 683.092 L1262.72 683.092 L1262.16 683.092 L1261.6 683.092 L1261.04 683.092 L1260.48 683.092 L1259.92 683.092 L1259.36 683.092 L1258.81 683.092 L1258.25 683.092 L1257.69 683.092 L1257.13 683.092 L1256.57 683.092 L1256.01 683.092 L1255.45 683.092 L1254.89 683.092 L1254.33 683.092 L1253.77 683.092 L1253.21 683.092 L1252.65 683.092 L1252.09 683.092 L1251.54 683.092 L1250.98 683.092 L1250.42 683.092 L1249.86 683.092 L1249.3 683.092 L1248.74 683.092 L1248.18 683.092 L1247.62 683.092 L1247.06 683.092 L1246.5 683.092 L1245.94 683.092 L1245.38 683.092 L1244.82 683.092 L1244.26 683.092 L1243.71 683.092 L1243.15 683.092 L1242.59 683.092 L1242.03 683.092 L1241.47 683.092 L1240.91 683.092 L1240.35 683.092 L1239.79 683.092 L1239.23 683.092 L1238.67 683.092 L1238.11 683.092 L1237.55 683.092 L1236.99 683.092 L1236.44 683.092 L1235.88 683.092 L1235.32 683.092 L1234.76 683.092 L1234.2 683.092 L1233.64 683.092 L1233.08 683.092 L1232.52 683.092 L1231.96 683.092 L1231.4 683.092 L1230.84 683.092 L1230.28 683.092 L1229.72 683.092 L1229.17 683.092 L1228.61 683.092 L1228.05 683.092 L1227.49 683.092 L1226.93 683.092 L1226.37 683.092 L1225.81 683.092 L1225.25 683.092 L1224.69 683.092 L1224.13 683.092 L1223.57 683.092 L1223.01 683.092 L1222.45 683.092 L1221.89 683.092 L1221.34 683.092 L1220.78 683.092 L1220.22 683.092 L1219.66 683.092 L1219.1 683.092 L1218.54 683.092 L1217.98 683.092 L1217.42 683.092 L1216.86 683.092 L1216.3 683.092 L1215.74 683.092 L1215.18 683.092 L1214.62 683.092 L1214.07 683.092 L1213.51 683.092 L1212.95 683.092 L1212.39 683.092 L1211.83 683.092 L1211.27 683.092 L1210.71 683.092 L1210.15 683.092 L1209.59 683.092 L1209.03 683.092 L1208.47 683.092 L1207.91 683.092 L1207.35 683.092 L1206.8 683.092 L1206.24 683.092 L1205.68 683.092 L1205.12 683.092 L1204.56 683.092 L1204 683.092 L1203.44 683.092 L1202.88 683.092 L1202.32 683.092 L1201.76 683.092 L1201.2 683.092 L1200.64 683.092 L1200.08 683.092 L1199.52 683.092 L1198.97 683.092 L1198.41 683.092 L1197.85 683.092 L1197.29 683.092 L1196.73 683.092 L1196.17 683.092 L1195.61 683.092 L1195.05 683.092 L1194.49 683.092 L1193.93 683.092 L1193.37 683.092 L1192.81 683.092 L1192.25 683.092 L1191.7 683.092 L1191.14 683.092 L1190.58 683.092 L1190.02 683.092 L1189.46 683.092 L1188.9 683.092 L1188.34 683.092 L1187.78 683.092 L1187.22 683.092 L1186.66 683.092 L1186.1 683.092 L1185.54 683.092 L1184.98 683.092 L1184.43 683.092 L1183.87 683.092 L1183.31 683.092 L1182.75 683.092 L1182.19 683.092 L1181.63 683.092 L1181.07 683.092 L1180.51 683.092 L1179.95 683.092 L1179.39 683.092 L1178.83 683.092 L1178.27 683.092 L1177.71 683.092 L1177.15 683.092 L1176.6 683.092 L1176.04 683.092 L1175.48 683.092 L1174.92 683.092 L1174.36 683.092 L1173.8 683.092 L1173.24 683.092 L1172.68 683.092 L1172.12 683.092 L1171.56 683.092 L1171 683.092 L1170.44 683.092 L1169.88 683.092 L1169.33 683.092 L1168.77 683.092 L1168.21 683.092 L1167.65 683.092 L1167.09 683.092 L1166.53 683.092 L1165.97 683.092 L1165.41 683.092 L1164.85 683.092 L1164.29 683.092 L1163.73 683.092 L1163.17 683.092 L1162.61 683.092 L1162.05 683.092 L1161.5 683.092 L1160.94 683.092 L1160.38 683.092 L1159.82 683.092 L1159.26 683.092 L1158.7 683.092 L1158.14 683.092 L1157.58 683.092 L1157.02 683.092 L1156.46 683.092 L1155.9 683.092 L1155.34 683.092 L1154.78 683.092 L1154.23 683.092 L1153.67 683.092 L1153.11 683.092 L1152.55 683.092 L1151.99 683.092 L1151.43 683.092 L1150.87 683.092 L1150.31 683.092 L1149.75 683.092 L1149.19 683.092 L1148.63 683.092 L1148.07 683.092 L1147.51 683.092 L1146.96 683.092 L1146.4 683.092 L1145.84 683.092 L1145.28 683.092 L1144.72 683.092 L1144.16 683.092 L1143.6 683.092 L1143.04 683.092 L1142.48 683.092 L1141.92 683.092 L1141.36 683.092 L1140.8 683.092 L1140.24 683.092 L1139.68 683.092 L1139.13 683.092 L1138.57 683.092 L1138.01 683.092 L1137.45 683.092 L1136.89 683.092 L1136.33 683.092 L1135.77 683.092 L1135.21 683.092 L1134.65 683.092 L1134.09 683.092 L1133.53 683.092 L1132.97 683.092 L1132.41 683.092 L1131.86 683.092 L1131.3 683.092 L1130.74 683.092 L1130.18 683.092 L1129.62 683.092 L1129.06 683.092 L1128.5 683.092 L1127.94 683.092 L1127.38 683.092 L1126.82 683.092 L1126.26 683.092 L1125.7 683.092 L1125.14 683.092 L1124.59 683.092 L1124.03 683.092 L1123.47 683.092 L1122.91 683.092 L1122.35 683.092 L1121.79 683.092 L1121.23 683.092 L1120.67 683.092 L1120.11 683.092 L1119.55 683.092 L1118.99 683.092 L1118.43 683.092 L1117.87 683.092 L1117.31 683.092 L1116.76 683.092 L1116.2 683.092 L1115.64 683.092 L1115.08 683.092 L1114.52 683.092 L1113.96 683.092 L1113.4 683.092 L1112.84 683.092 L1112.28 683.092 L1111.72 683.092 L1111.16 683.092 L1110.6 683.092 L1110.04 683.092 L1109.49 683.092 L1108.93 683.092 L1108.37 683.092 L1107.81 683.092 L1107.25 683.092 L1106.69 683.092 L1106.13 683.092 L1105.57 683.092 L1105.01 683.092 L1104.45 683.092 L1103.89 683.092 L1103.33 683.092 L1102.77 683.092 L1102.22 683.092 L1101.66 683.092 L1101.1 683.092 L1100.54 683.092 L1099.98 683.092 L1099.42 683.092 L1098.86 683.092 L1098.3 683.092 L1097.74 683.092 L1097.18 683.092 L1096.62 683.092 L1096.06 683.092 L1095.5 683.092 L1094.94 683.092 L1094.39 683.092 L1093.83 683.092 L1093.27 683.092 L1092.71 683.092 L1092.15 683.092 L1091.59 683.092 L1091.03 683.092 L1090.47 683.092 L1089.91 683.092 L1089.35 683.092 L1088.79 683.092 L1088.23 683.092 L1087.67 683.092 L1087.12 683.092 L1086.56 683.092 L1086 683.092 L1085.44 683.092 L1084.88 683.092 L1084.32 683.092 L1083.76 683.092 L1083.2 683.092 L1082.64 683.092 L1082.08 683.092 L1081.52 683.092 L1080.96 683.092 L1080.4 683.092 L1079.85 683.092 L1079.29 683.092 L1078.73 683.092 L1078.17 683.092 L1077.61 683.092 L1077.05 683.092 L1076.49 683.092 L1075.93 683.092 L1075.37 683.092 L1074.81 683.092 L1074.25 683.092 L1073.69 683.092 L1073.13 683.092 L1072.57 683.092 L1072.02 683.092 L1071.46 683.092 L1070.9 683.092 L1070.34 683.092 L1069.78 683.092 L1069.22 683.092 L1068.66 683.092 L1068.1 683.092 L1067.54 683.092 L1066.98 683.092 L1066.42 683.092 L1065.86 683.092 L1065.3 683.092 L1064.75 683.092 L1064.19 683.092 L1063.63 683.092 L1063.07 683.092 L1062.51 683.092 L1061.95 683.092 L1061.39 683.092 L1060.83 683.092 L1060.27 683.092 L1059.71 683.092 L1059.15 683.092 L1058.59 683.092 L1058.03 683.092 L1057.48 683.092 L1056.92 683.092 L1056.36 683.092 L1055.8 683.092 L1055.24 683.092 L1054.68 683.092 L1054.12 683.092 L1053.56 683.092 L1053 683.092 L1052.44 683.092 L1051.88 683.092 L1051.32 683.092 L1050.76 683.092 L1050.2 683.092 L1049.65 683.092 L1049.09 683.092 L1048.53 683.092 L1047.97 683.092 L1047.41 683.092 L1046.85 683.092 L1046.29 683.092 L1045.73 683.092 L1045.17 683.092 L1044.61 683.092 L1044.05 683.092 L1043.49 683.092 L1042.93 683.092 L1042.38 683.092 L1041.82 683.092 L1041.26 683.092 L1040.7 683.092 L1040.14 683.092 L1039.58 683.092 L1039.02 683.092 L1038.46 683.092 L1037.9 683.092 L1037.34 683.092 L1036.78 683.092 L1036.22 683.092 L1035.66 683.092 L1035.1 683.092 L1034.55 683.092 L1033.99 683.092 L1033.43 683.092 L1032.87 683.092 L1032.31 683.092 L1031.75 683.092 L1031.19 683.092 L1030.63 683.092 L1030.07 683.092 L1029.51 683.092 L1028.95 683.092 L1028.39 683.092 L1027.83 683.092 L1027.28 683.092 L1026.72 683.092 L1026.16 683.092 L1025.6 683.092 L1025.04 683.092 L1024.48 683.092 L1023.92 683.092 L1023.36 683.092 L1022.8 683.092 L1022.24 683.092 L1021.68 683.092 L1021.12 683.092 L1020.56 683.092 L1020.01 683.092 L1019.45 683.092 L1018.89 683.092 L1018.33 683.092 L1017.77 683.092 L1017.21 683.092 L1016.65 683.092 L1016.09 683.092 L1015.53 683.092 L1014.97 683.092 L1014.41 683.092 L1013.85 683.092 L1013.29 683.092 L1012.73 683.092 L1012.18 683.092 L1011.62 683.092 L1011.06 683.092 L1010.5 683.092 L1009.94 683.092 L1009.38 683.092 L1008.82 683.092 L1008.26 683.092 L1007.7 683.092 L1007.14 683.092 L1006.58 683.092 L1006.02 683.092 L1005.46 683.092 L1004.91 683.092 L1004.35 683.092 L1003.79 683.092 L1003.23 683.092 L1002.67 683.092 L1002.11 683.092 L1001.55 683.092 L1000.99 683.092 L1000.43 683.092 L999.872 683.092 L999.313 683.092 L998.754 683.092 L998.194 683.092 L997.635 683.092 L997.076 683.092 L996.517 683.092 L995.957 683.092 L995.398 683.092 L994.839 683.092 L994.28 683.092 L993.72 683.092 L993.161 683.092 L992.602 683.092 L992.043 683.092 L991.483 683.092 L990.924 683.092 L990.365 683.092 L989.806 683.092 L989.246 683.092 L988.687 683.092 L988.128 683.092 L987.569 683.092 L987.009 683.092 L986.45 683.092 L985.891 683.092 L985.332 683.092 L984.772 683.092 L984.213 683.092 L983.654 683.092 L983.095 683.092 L982.535 683.092 L981.976 683.092 L981.417 683.092 L980.858 683.092 L980.298 683.092 L979.739 683.092 L979.18 683.092 L978.621 683.092 L978.061 683.092 L977.502 683.092 L976.943 683.092 L976.384 683.092 L975.824 683.092 L975.265 683.092 L974.706 683.092 L974.147 683.092 L973.587 683.092 L973.028 683.092 L972.469 683.092 L971.91 683.092 L971.35 683.092 L970.791 683.092 L970.232 683.092 L969.673 683.092 L969.113 683.092 L968.554 683.092 L967.995 683.092 L967.436 683.092 L966.876 683.092 L966.317 683.092 L965.758 683.092 L965.199 683.092 L964.639 683.092 L964.08 683.092 L963.521 683.092 L962.962 683.092 L962.402 683.092 L961.843 683.092 L961.284 683.092 L960.725 683.092 L960.165 683.092 L959.606 683.092 L959.047 683.092 L958.488 683.092 L957.928 683.092 L957.369 683.092 L956.81 683.092 L956.251 683.092 L955.691 683.092 L955.132 683.092 L954.573 683.092 L954.014 683.092 L953.454 683.092 L952.895 683.092 L952.336 683.092 L951.777 683.092 L951.217 683.092 L950.658 683.092 L950.099 683.092 L949.54 683.092 L948.98 683.092 L948.421 683.092 L947.862 683.092 L947.303 683.092 L946.743 683.092 L946.184 683.092 L945.625 683.092 L945.066 683.092 L944.506 683.092 L943.947 683.092 L943.388 683.092 L942.829 683.092 L942.269 683.092 L941.71 683.092 L941.151 683.092 L940.592 683.092 L940.032 683.092 L939.473 683.092 L938.914 683.092 L938.355 683.092 L937.795 683.092 L937.236 683.092 L936.677 683.092 L936.118 683.092 L935.558 683.092 L934.999 683.092 L934.44 683.092 L933.881 683.092 L933.321 683.092 L932.762 683.092 L932.203 683.092 L931.644 683.092 L931.084 683.092 L930.525 683.092 L929.966 683.092 L929.406 683.092 L928.847 683.092 L928.288 683.092 L927.729 683.092 L927.169 683.092 L926.61 683.092 L926.051 683.092 L925.492 683.092 L924.932 683.092 L924.373 683.092 L923.814 683.092 L923.255 683.092 L922.695 683.092 L922.136 683.092 L921.577 683.092 L921.018 683.092 L920.458 683.092 L919.899 683.092 L919.34 683.092 L918.781 683.092 L918.221 683.092 L917.662 683.092 L917.103 683.092 L916.544 683.092 L915.984 683.092 L915.425 683.092 L914.866 683.092 L914.307 683.092 L913.747 683.092 L913.188 683.092 L912.629 683.092 L912.07 683.092 L911.51 683.092 L910.951 683.092 L910.392 683.092 L909.833 683.092 L909.273 683.092 L908.714 683.092 L908.155 683.092 L907.596 683.092 L907.036 683.092 L906.477 683.092 L905.918 683.092 L905.359 683.092 L904.799 683.092 L904.24 683.092 L903.681 683.092 L903.122 683.092 L902.562 683.092 L902.003 683.092 L901.444 683.092 L900.885 683.092 L900.325 683.092 L899.766 683.092 L899.207 683.092 L898.648 683.092 L898.088 683.092 L897.529 683.092 L896.97 683.092 L896.411 683.092 L895.851 683.092 L895.292 683.092 L894.733 683.092 L894.174 683.092 L893.614 683.092 L893.055 683.092 L892.496 683.092 L891.937 683.092 L891.377 683.092 L890.818 683.092 L890.259 683.092 L889.7 683.092 L889.14 683.092 L888.581 683.092 L888.022 683.092 L887.463 683.092 L886.903 683.092 L886.344 683.092 L885.785 683.092 L885.226 683.092 L884.666 683.092 L884.107 683.092 L883.548 683.092 L882.989 683.092 L882.429 683.092 L881.87 683.092 L881.311 683.092 L880.752 683.092 L880.192 683.092 L879.633 683.092 L879.074 683.092 L878.515 683.092 L877.955 683.092 L877.396 683.092 L876.837 683.092 L876.278 683.092 L875.718 683.092 L875.159 683.092 L874.6 683.092 L874.041 683.092 L873.481 683.092 L872.922 683.092 L872.363 683.092 L871.804 683.092 L871.244 683.092 L870.685 683.092 L870.126 683.092 L869.567 683.092 L869.007 683.092 L868.448 683.092 L867.889 683.092 L867.33 683.092 L866.77 683.092 L866.211 683.092 L865.652 683.092 L865.093 683.092 L864.533 683.092 L863.974 683.092 L863.415 683.092 L862.856 683.092 L862.296 683.092 L861.737 683.092 L861.178 683.092 L860.619 683.092 L860.059 683.092 L859.5 683.092 L858.941 683.092 L858.382 683.092 L857.822 683.092 L857.263 683.092 L856.704 683.092 L856.145 683.092 L855.585 683.092 L855.026 683.092 L854.467 683.092 L853.908 683.092 L853.348 683.092 L852.789 683.092 L852.23 683.092 L851.671 683.092 L851.111 683.092 L850.552 683.092 L849.993 683.092 L849.434 683.092 L848.874 683.092 L848.315 683.092 L847.756 683.092 L847.197 683.092 L846.637 683.092 L846.078 683.092 L845.519 683.092 L844.96 683.092 L844.4 683.092 L843.841 683.092 L843.282 683.092 L842.723 683.092 L842.163 683.092 L841.604 683.092 L841.045 683.092 L840.486 683.092 L839.926 683.092 L839.367 683.092 L838.808 683.092 L838.249 683.092 L837.689 683.092 L837.13 683.092 L836.571 683.092 L836.012 683.092 L835.452 683.092 L834.893 683.092 L834.334 683.092 L833.775 683.092 L833.215 683.092 L832.656 683.092 L832.097 683.092 L831.538 683.092 L830.978 683.092 L830.419 683.092 L829.86 683.092 L829.301 683.092 L828.741 683.092 L828.182 683.092 L827.623 683.092 L827.064 683.092 L826.504 683.092 L825.945 683.092 L825.386 683.092 L824.827 683.092 L824.267 683.092 L823.708 683.092 L823.149 683.092 L822.59 683.092 L822.03 683.092 L821.471 683.092 L820.912 683.092 L820.353 683.092 L819.793 683.092 L819.234 683.092 L818.675 683.092 L818.116 683.092 L817.556 683.092 L816.997 683.092 L816.438 683.092 L815.879 683.092 L815.319 683.092 L814.76 683.092 L814.201 683.092 L813.642 683.092 L813.082 683.092 L812.523 683.092 L811.964 683.092 L811.405 683.092 L810.845 683.092 L810.286 683.092 L809.727 683.092 L809.168 683.092 L808.608 683.092 L808.049 683.092 L807.49 683.092 L806.931 683.092 L806.371 683.092 L805.812 683.092 L805.253 683.092 L804.693 683.092 L804.134 683.092 L803.575 683.092 L803.016 683.092 L802.456 683.092 L801.897 683.092 L801.338 683.092 L800.779 683.092 L800.219 683.092 L799.66 683.092 L799.101 683.092 L798.542 683.092 L797.982 683.092 L797.423 683.092 L796.864 683.092 L796.305 683.092 L795.745 683.092 L795.186 683.092 L794.627 683.092 L794.068 683.092 L793.508 683.092 L792.949 683.092 L792.39 683.092 L791.831 683.092 L791.271 683.092 L790.712 683.092 L790.153 683.092 L789.594 683.092 L789.034 683.092 L788.475 683.092 L787.916 683.092 L787.357 683.092 L786.797 683.092 L786.238 683.092 L785.679 683.092 L785.12 683.092 L784.56 683.092 L784.001 683.092 L783.442 683.092 L782.883 683.092 L782.323 683.092 L781.764 683.092 L781.205 683.092 L780.646 683.092 L780.086 683.092 L779.527 683.092 L778.968 683.092 L778.409 683.092 L777.849 683.092 L777.29 683.092 L776.731 683.092 L776.172 683.092 L775.612 683.092 L775.053 683.092 L774.494 683.092 L773.935 683.092 L773.375 683.092 L772.816 683.092 L772.257 683.092 L771.698 683.092 L771.138 683.092 L770.579 683.092 L770.02 683.092 L769.461 683.092 L768.901 683.092 L768.342 683.092 L767.783 683.092 L767.224 683.092 L766.664 683.092 L766.105 683.092 L765.546 683.092 L764.987 683.092 L764.427 683.092 L763.868 683.092 L763.309 683.092 L762.75 683.092 L762.19 683.092 L761.631 683.092 L761.072 683.092 L760.513 683.092 L759.953 683.092 L759.394 683.092 L758.835 683.092 L758.276 683.092 L757.716 683.092 L757.157 683.092 L756.598 683.092 L756.039 683.092 L755.479 683.092 L754.92 683.092 L754.361 683.092 L753.802 683.092 L753.242 683.092 L752.683 683.092 L752.124 683.092 L751.565 683.092 L751.005 683.092 L750.446 683.092 L749.887 683.092 L749.328 683.092 L748.768 683.092 L748.209 683.092 L747.65 683.092 L747.091 683.092 L746.531 683.092 L745.972 683.092 L745.413 683.092 L744.854 683.092 L744.294 683.092 L743.735 683.092 L743.176 683.092 L742.617 683.092 L742.057 683.092 L741.498 683.092 L740.939 683.092 L740.38 683.092 L739.82 683.092 L739.261 683.092 L738.702 683.092 L738.143 683.092 L737.583 683.092 L737.024 683.092 L736.465 683.092 L735.906 683.092 L735.346 683.092 L734.787 683.092 L734.228 683.092 L733.669 683.092 L733.109 683.092 L732.55 683.092 L731.991 683.092 L731.432 683.092 L730.872 683.092 L730.313 683.092 L729.754 683.092 L729.195 683.092 L728.635 683.092 L728.076 683.092 L727.517 683.092 L726.958 683.092 L726.398 683.092 L725.839 683.092 L725.28 683.092 L724.721 683.092 L724.161 683.092 L723.602 683.092 L723.043 683.092 L722.484 683.092 L721.924 683.092 L721.365 683.092 L720.806 683.092 L720.247 683.092  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.359 720.806,684.359 721.365,684.359 721.924,684.359 722.484,684.359 723.043,684.359 723.602,684.359 724.161,684.359 724.721,684.359 725.28,684.359 725.839,684.359 726.398,684.359 726.958,684.359 727.517,684.359 728.076,684.359 728.635,684.359 729.195,684.359 729.754,684.359 730.313,684.359 730.872,684.359 731.432,684.359 731.991,684.359 732.55,684.359 733.109,684.359 733.669,684.359 734.228,684.359 734.787,684.359 735.346,684.359 735.906,684.359 736.465,684.359 737.024,684.359 737.583,684.359 738.143,684.359 738.702,684.359 739.261,684.359 739.82,684.359 740.38,684.359 740.939,684.359 741.498,684.359 742.057,684.359 742.617,684.359 743.176,684.359 743.735,684.359 744.294,684.359 744.854,684.359 745.413,684.359 745.972,684.359 746.531,684.359 747.091,684.359 747.65,684.359 748.209,684.359 748.768,684.359 749.328,684.359 749.887,684.359 750.446,684.359 751.005,684.359 751.565,684.359 752.124,684.359 752.683,684.359 753.242,684.359 753.802,684.359 754.361,684.359 754.92,684.359 755.479,684.359 756.039,684.359 756.598,684.359 757.157,684.359 757.716,684.359 758.276,684.359 758.835,684.359 759.394,684.359 759.953,684.359 760.513,684.359 761.072,684.359 761.631,684.359 762.19,684.359 762.75,684.359 763.309,684.359 763.868,684.359 764.427,684.359 764.987,684.359 765.546,684.359 766.105,684.359 766.664,684.359 767.224,684.359 767.783,684.359 768.342,684.359 768.901,684.359 769.461,684.359 770.02,684.359 770.579,684.359 771.138,684.359 771.698,684.359 772.257,684.359 772.816,684.359 773.375,684.359 773.935,684.359 774.494,684.359 775.053,684.359 775.612,684.359 776.172,684.359 776.731,684.359 777.29,684.359 777.849,684.359 778.409,684.359 778.968,684.359 779.527,684.359 780.086,684.359 780.646,684.359 781.205,684.359 781.764,684.359 782.323,684.359 782.883,684.359 783.442,684.359 784.001,684.359 784.56,684.359 785.12,684.359 785.679,684.359 786.238,684.359 786.797,684.359 787.357,684.359 787.916,684.359 788.475,684.359 789.034,684.359 789.594,684.359 790.153,684.359 790.712,684.359 791.271,684.359 791.831,684.359 792.39,684.359 792.949,684.359 793.508,684.359 794.068,684.359 794.627,684.359 795.186,684.359 795.745,684.359 796.305,684.359 796.864,684.359 797.423,684.359 797.982,684.359 798.542,684.359 799.101,684.359 799.66,684.359 800.219,684.359 800.779,684.359 801.338,684.359 801.897,684.359 802.456,684.359 803.016,684.359 803.575,684.359 804.134,684.359 804.693,684.359 805.253,684.359 805.812,684.359 806.371,684.359 806.931,684.359 807.49,684.359 808.049,684.359 808.608,684.359 809.168,684.359 809.727,684.359 810.286,684.359 810.845,684.359 811.405,684.359 811.964,684.359 812.523,684.359 813.082,684.359 813.642,684.359 814.201,684.359 814.76,684.359 815.319,684.359 815.879,684.359 816.438,684.359 816.997,684.359 817.556,684.359 818.116,684.359 818.675,684.359 819.234,684.359 819.793,684.359 820.353,684.359 820.912,684.359 821.471,684.359 822.03,684.359 822.59,684.359 823.149,684.359 823.708,684.359 824.267,684.359 824.827,684.359 825.386,684.359 825.945,684.359 826.504,684.359 827.064,684.359 827.623,684.359 828.182,684.359 828.741,684.359 829.301,684.359 829.86,684.359 830.419,684.359 830.978,684.359 831.538,684.359 832.097,684.359 832.656,684.359 833.215,684.359 833.775,684.359 834.334,684.359 834.893,684.359 835.452,684.359 836.012,684.359 836.571,684.359 837.13,684.359 837.689,684.359 838.249,684.359 838.808,684.359 839.367,684.359 839.926,684.359 840.486,684.359 841.045,684.359 841.604,684.359 842.163,684.359 842.723,684.359 843.282,684.359 843.841,684.359 844.4,684.359 844.96,684.359 845.519,684.359 846.078,684.359 846.637,684.359 847.197,684.359 847.756,684.359 848.315,684.359 848.874,684.359 849.434,684.359 849.993,684.359 850.552,684.359 851.111,684.359 851.671,684.359 852.23,684.359 852.789,684.359 853.348,684.359 853.908,684.359 854.467,684.359 855.026,684.359 855.585,684.359 856.145,684.359 856.704,684.359 857.263,684.359 857.822,684.359 858.382,684.359 858.941,684.359 859.5,684.359 860.059,684.359 860.619,684.359 861.178,684.359 861.737,684.359 862.296,684.359 862.856,684.359 863.415,684.359 863.974,684.359 864.533,684.359 865.093,684.359 865.652,684.359 866.211,684.359 866.77,684.359 867.33,684.359 867.889,684.359 868.448,684.359 869.007,684.359 869.567,684.359 870.126,684.359 870.685,684.359 871.244,684.359 871.804,684.359 872.363,684.359 872.922,684.359 873.481,684.359 874.041,684.359 874.6,684.359 875.159,684.359 875.718,684.359 876.278,684.359 876.837,684.359 877.396,684.359 877.955,684.359 878.515,684.359 879.074,684.359 879.633,684.359 880.192,684.359 880.752,684.359 881.311,684.359 881.87,684.359 882.429,684.359 882.989,684.359 883.548,684.359 884.107,684.359 884.666,684.359 885.226,684.359 885.785,684.359 886.344,684.359 886.903,684.359 887.463,684.359 888.022,684.359 888.581,684.359 889.14,684.359 889.7,684.359 890.259,684.359 890.818,684.359 891.377,684.359 891.937,684.359 892.496,684.359 893.055,684.359 893.614,684.359 894.174,684.359 894.733,684.359 895.292,684.359 895.851,684.359 896.411,684.359 896.97,684.359 897.529,684.359 898.088,684.359 898.648,684.359 899.207,684.359 899.766,684.359 900.325,684.359 900.885,684.359 901.444,684.359 902.003,684.359 902.562,684.359 903.122,684.359 903.681,684.359 904.24,684.359 904.799,684.359 905.359,684.359 905.918,684.359 906.477,684.359 907.036,684.359 907.596,684.359 908.155,684.359 908.714,684.359 909.273,684.359 909.833,684.359 910.392,684.359 910.951,684.359 911.51,684.359 912.07,684.359 912.629,684.359 913.188,684.359 913.747,684.359 914.307,684.359 914.866,684.359 915.425,684.359 915.984,684.359 916.544,684.359 917.103,684.359 917.662,684.359 918.221,684.359 918.781,684.359 919.34,684.359 919.899,684.359 920.458,684.359 921.018,684.359 921.577,684.359 922.136,684.359 922.695,684.359 923.255,684.359 923.814,684.359 924.373,684.359 924.932,684.359 925.492,684.359 926.051,684.359 926.61,684.359 927.169,684.359 927.729,684.359 928.288,684.359 928.847,684.359 929.406,684.359 929.966,684.359 930.525,684.359 931.084,684.359 931.644,684.359 932.203,684.359 932.762,684.359 933.321,684.359 933.881,684.359 934.44,684.359 934.999,684.359 935.558,684.359 936.118,684.359 936.677,684.359 937.236,684.359 937.795,684.359 938.355,684.359 938.914,684.359 939.473,684.359 940.032,684.359 940.592,684.359 941.151,684.359 941.71,684.359 942.269,684.359 942.829,684.359 943.388,684.359 943.947,684.359 944.506,684.359 945.066,684.359 945.625,684.359 946.184,684.359 946.743,684.359 947.303,684.359 947.862,684.359 948.421,684.359 948.98,684.359 949.54,684.359 950.099,684.359 950.658,684.359 951.217,684.359 951.777,684.359 952.336,684.359 952.895,684.359 953.454,684.359 954.014,684.359 954.573,684.359 955.132,684.359 955.691,684.359 956.251,684.359 956.81,684.359 957.369,684.359 957.928,684.359 958.488,684.359 959.047,684.359 959.606,684.359 960.165,684.359 960.725,684.359 961.284,684.359 961.843,684.359 962.402,684.359 962.962,684.359 963.521,684.359 964.08,684.359 964.639,684.359 965.199,684.359 965.758,684.359 966.317,684.359 966.876,684.359 967.436,684.359 967.995,684.359 968.554,684.359 969.113,684.359 969.673,684.359 970.232,684.359 970.791,684.359 971.35,684.359 971.91,684.359 972.469,684.359 973.028,684.359 973.587,684.359 974.147,684.359 974.706,684.359 975.265,684.359 975.824,684.359 976.384,684.359 976.943,684.359 977.502,684.359 978.061,684.359 978.621,684.359 979.18,684.359 979.739,684.359 980.298,684.359 980.858,684.359 981.417,684.359 981.976,684.359 982.535,684.359 983.095,684.359 983.654,684.359 984.213,684.359 984.772,684.359 985.332,684.359 985.891,684.359 986.45,684.359 987.009,684.359 987.569,684.359 988.128,684.359 988.687,684.359 989.246,684.359 989.806,684.359 990.365,684.359 990.924,684.359 991.483,684.359 992.043,684.359 992.602,684.359 993.161,684.359 993.72,684.359 994.28,684.359 994.839,684.359 995.398,684.359 995.957,684.359 996.517,684.359 997.076,684.359 997.635,684.359 998.194,684.359 998.754,684.359 999.313,684.359 999.872,684.359 1000.43,684.359 1000.99,684.359 1001.55,684.359 1002.11,684.359 1002.67,684.359 1003.23,684.359 1003.79,684.359 1004.35,684.359 1004.91,684.359 1005.46,684.359 1006.02,684.359 1006.58,684.359 1007.14,684.359 1007.7,684.359 1008.26,684.359 1008.82,684.359 1009.38,684.359 1009.94,684.359 1010.5,684.359 1011.06,684.359 1011.62,684.359 1012.18,684.359 1012.73,684.359 1013.29,684.359 1013.85,684.359 1014.41,684.359 1014.97,684.359 1015.53,684.359 1016.09,684.359 1016.65,684.359 1017.21,684.359 1017.77,684.359 1018.33,684.359 1018.89,684.359 1019.45,684.359 1020.01,684.359 1020.56,684.359 1021.12,684.359 1021.68,684.359 1022.24,684.359 1022.8,684.359 1023.36,684.359 1023.92,684.359 1024.48,684.359 1025.04,684.359 1025.6,684.359 1026.16,684.359 1026.72,684.359 1027.28,684.359 1027.83,684.359 1028.39,684.359 1028.95,684.359 1029.51,684.359 1030.07,684.359 1030.63,684.359 1031.19,684.359 1031.75,684.359 1032.31,684.359 1032.87,684.359 1033.43,684.359 1033.99,684.359 1034.55,684.359 1035.1,684.359 1035.66,684.359 1036.22,684.359 1036.78,684.359 1037.34,684.359 1037.9,684.359 1038.46,684.359 1039.02,684.359 1039.58,684.359 1040.14,684.359 1040.7,684.359 1041.26,684.359 1041.82,684.359 1042.38,684.359 1042.93,684.359 1043.49,684.359 1044.05,684.359 1044.61,684.359 1045.17,684.359 1045.73,684.359 1046.29,684.359 1046.85,684.359 1047.41,684.359 1047.97,684.359 1048.53,684.359 1049.09,684.359 1049.65,684.359 1050.2,684.359 1050.76,684.359 1051.32,684.359 1051.88,684.359 1052.44,684.359 1053,684.359 1053.56,684.359 1054.12,684.359 1054.68,684.359 1055.24,684.359 1055.8,684.359 1056.36,684.359 1056.92,684.359 1057.48,684.359 1058.03,684.359 1058.59,684.359 1059.15,684.359 1059.71,684.359 1060.27,684.359 1060.83,684.359 1061.39,684.359 1061.95,684.359 1062.51,684.359 1063.07,684.359 1063.63,684.359 1064.19,684.359 1064.75,684.359 1065.3,684.359 1065.86,684.359 1066.42,684.359 1066.98,684.359 1067.54,684.359 1068.1,684.359 1068.66,684.359 1069.22,684.359 1069.78,684.359 1070.34,684.359 1070.9,684.359 1071.46,684.359 1072.02,684.359 1072.57,684.359 1073.13,684.359 1073.69,684.359 1074.25,684.359 1074.81,684.359 1075.37,684.359 1075.93,684.359 1076.49,684.359 1077.05,684.359 1077.61,684.359 1078.17,684.359 1078.73,684.359 1079.29,684.359 1079.85,684.359 1080.4,684.359 1080.96,684.359 1081.52,684.359 1082.08,684.359 1082.64,684.359 1083.2,684.359 1083.76,684.359 1084.32,684.359 1084.88,684.359 1085.44,684.359 1086,684.359 1086.56,684.359 1087.12,684.359 1087.67,684.359 1088.23,684.359 1088.79,684.359 1089.35,684.359 1089.91,684.359 1090.47,684.359 1091.03,684.359 1091.59,684.359 1092.15,684.359 1092.71,684.359 1093.27,684.359 1093.83,684.359 1094.39,684.359 1094.94,684.359 1095.5,684.359 1096.06,684.359 1096.62,684.359 1097.18,684.359 1097.74,684.359 1098.3,684.359 1098.86,684.359 1099.42,684.359 1099.98,684.359 1100.54,684.359 1101.1,684.359 1101.66,684.359 1102.22,684.359 1102.77,684.359 1103.33,684.359 1103.89,684.359 1104.45,684.359 1105.01,684.359 1105.57,684.359 1106.13,684.359 1106.69,684.359 1107.25,684.359 1107.81,684.359 1108.37,684.359 1108.93,684.359 1109.49,684.359 1110.04,684.359 1110.6,684.359 1111.16,684.359 1111.72,684.359 1112.28,684.359 1112.84,684.359 1113.4,684.359 1113.96,684.359 1114.52,684.359 1115.08,684.359 1115.64,684.359 1116.2,684.359 1116.76,684.359 1117.31,684.359 1117.87,684.359 1118.43,684.359 1118.99,684.359 1119.55,684.359 1120.11,684.359 1120.67,684.359 1121.23,684.359 1121.79,684.359 1122.35,684.359 1122.91,684.359 1123.47,684.359 1124.03,684.359 1124.59,684.359 1125.14,684.359 1125.7,684.359 1126.26,684.359 1126.82,684.359 1127.38,684.359 1127.94,684.359 1128.5,684.359 1129.06,684.359 1129.62,684.359 1130.18,684.359 1130.74,684.359 1131.3,684.359 1131.86,684.359 1132.41,684.359 1132.97,684.359 1133.53,684.359 1134.09,684.359 1134.65,684.359 1135.21,684.359 1135.77,684.359 1136.33,684.359 1136.89,684.359 1137.45,684.359 1138.01,684.359 1138.57,684.359 1139.13,684.359 1139.68,684.359 1140.24,684.359 1140.8,684.359 1141.36,684.359 1141.92,684.359 1142.48,684.359 1143.04,684.359 1143.6,684.359 1144.16,684.359 1144.72,684.359 1145.28,684.359 1145.84,684.359 1146.4,684.359 1146.96,684.359 1147.51,684.359 1148.07,684.359 1148.63,684.359 1149.19,684.359 1149.75,684.359 1150.31,684.359 1150.87,684.359 1151.43,684.359 1151.99,684.359 1152.55,684.359 1153.11,684.359 1153.67,684.359 1154.23,684.359 1154.78,684.359 1155.34,684.359 1155.9,684.359 1156.46,684.359 1157.02,684.359 1157.58,684.359 1158.14,684.359 1158.7,684.359 1159.26,684.359 1159.82,684.359 1160.38,684.359 1160.94,684.359 1161.5,684.359 1162.05,684.359 1162.61,684.359 1163.17,684.359 1163.73,684.359 1164.29,684.359 1164.85,684.359 1165.41,684.359 1165.97,684.359 1166.53,684.359 1167.09,684.359 1167.65,684.359 1168.21,684.359 1168.77,684.359 1169.33,684.359 1169.88,684.359 1170.44,684.359 1171,684.359 1171.56,684.359 1172.12,684.359 1172.68,684.359 1173.24,684.359 1173.8,684.359 1174.36,684.359 1174.92,684.359 1175.48,684.359 1176.04,684.359 1176.6,684.359 1177.15,684.359 1177.71,684.359 1178.27,684.359 1178.83,684.359 1179.39,684.359 1179.95,684.359 1180.51,684.359 1181.07,684.359 1181.63,684.359 1182.19,684.359 1182.75,684.359 1183.31,684.359 1183.87,684.359 1184.43,684.359 1184.98,684.359 1185.54,684.359 1186.1,684.359 1186.66,684.359 1187.22,684.359 1187.78,684.359 1188.34,684.359 1188.9,684.359 1189.46,684.359 1190.02,684.359 1190.58,684.359 1191.14,684.359 1191.7,684.359 1192.25,684.359 1192.81,684.359 1193.37,684.359 1193.93,684.359 1194.49,684.359 1195.05,684.359 1195.61,684.359 1196.17,684.359 1196.73,684.359 1197.29,684.359 1197.85,684.359 1198.41,684.359 1198.97,684.359 1199.52,684.359 1200.08,684.359 1200.64,684.359 1201.2,684.359 1201.76,684.359 1202.32,684.359 1202.88,684.359 1203.44,684.359 1204,684.359 1204.56,684.359 1205.12,684.359 1205.68,684.359 1206.24,684.359 1206.8,684.359 1207.35,684.359 1207.91,684.359 1208.47,684.359 1209.03,684.359 1209.59,684.359 1210.15,684.359 1210.71,684.359 1211.27,684.359 1211.83,684.359 1212.39,684.359 1212.95,684.359 1213.51,684.359 1214.07,684.359 1214.62,684.359 1215.18,684.359 1215.74,684.359 1216.3,684.359 1216.86,684.359 1217.42,684.359 1217.98,684.359 1218.54,684.359 1219.1,684.359 1219.66,684.359 1220.22,684.359 1220.78,684.359 1221.34,684.359 1221.89,684.359 1222.45,684.359 1223.01,684.359 1223.57,684.359 1224.13,684.359 1224.69,684.359 1225.25,684.359 1225.81,684.359 1226.37,684.359 1226.93,684.359 1227.49,684.359 1228.05,684.359 1228.61,684.359 1229.17,684.359 1229.72,684.359 1230.28,684.359 1230.84,684.359 1231.4,684.359 1231.96,684.359 1232.52,684.359 1233.08,684.359 1233.64,684.359 1234.2,684.359 1234.76,684.359 1235.32,684.359 1235.88,684.359 1236.44,684.359 1236.99,684.359 1237.55,684.359 1238.11,684.359 1238.67,684.359 1239.23,684.359 1239.79,684.359 1240.35,684.359 1240.91,684.359 1241.47,684.359 1242.03,684.359 1242.59,684.359 1243.15,684.359 1243.71,684.359 1244.26,684.359 1244.82,684.359 1245.38,684.359 1245.94,684.359 1246.5,684.359 1247.06,684.359 1247.62,684.359 1248.18,684.359 1248.74,684.359 1249.3,684.359 1249.86,684.359 1250.42,684.359 1250.98,684.359 1251.54,684.359 1252.09,684.359 1252.65,684.359 1253.21,684.359 1253.77,684.359 1254.33,684.359 1254.89,684.359 1255.45,684.359 1256.01,684.359 1256.57,684.359 1257.13,684.359 1257.69,684.359 1258.25,684.359 1258.81,684.359 1259.36,684.359 1259.92,684.359 1260.48,684.359 1261.04,684.359 1261.6,684.359 1262.16,684.359 1262.72,684.359 1263.28,684.359 1263.84,684.359 1264.4,684.359 1264.96,684.359 1265.52,684.359 1266.08,684.359 1266.63,684.359 1267.19,684.359 1267.75,684.359 1268.31,684.359 1268.87,684.359 1269.43,684.359 1269.99,684.359 1270.55,684.359 1271.11,684.359 1271.67,684.359 1272.23,684.359 1272.79,684.359 1273.35,684.359 1273.91,684.359 1274.46,684.359 1275.02,684.359 1275.58,684.359 1276.14,684.359 1276.7,684.359 1277.26,684.359 1277.82,684.359 1278.38,684.359 1278.94,684.359 1279.5,684.359 1280.06,684.359 1280.62,684.359 1281.18,684.359 1281.73,684.359 1282.29,684.359 1282.85,684.359 1283.41,684.359 1283.97,684.359 1284.53,684.359 1285.09,684.359 1285.65,684.359 1286.21,684.359 1286.77,684.359 1287.33,684.359 1287.89,684.359 1288.45,684.359 1289,684.359 1289.56,684.359 1290.12,684.359 1290.68,684.359 1291.24,684.359 1291.8,684.359 1292.36,684.359 1292.92,684.359 1293.48,684.359 1294.04,684.359 1294.6,684.359 1295.16,684.359 1295.72,684.359 1296.28,684.359 1296.83,684.359 1297.39,684.359 1297.95,684.359 1298.51,684.359 1299.07,684.359 1299.63,684.359 1300.19,684.359 1300.75,684.359 1301.31,684.359 1301.87,684.359 1302.43,684.359 1302.99,684.359 1303.55,684.359 1304.1,684.359 1304.66,684.359 1305.22,684.359 1305.78,684.359 1306.34,684.359 1306.9,684.359 1307.46,684.359 1308.02,684.359 1308.58,684.359 1309.14,684.359 1309.7,684.359 1310.26,684.359 1310.82,684.359 1311.38,684.359 1311.93,684.359 1312.49,684.359 1313.05,684.359 1313.61,684.359 1314.17,684.359 1314.73,684.359 1315.29,684.359 1315.85,684.359 1316.41,684.359 1316.97,684.359 1317.53,684.359 1318.09,684.359 1318.65,684.359 1319.2,684.359 1319.76,684.359 1320.32,684.359 1320.88,684.359 1321.44,684.359 1322,684.359 1322.56,684.359 1323.12,684.359 1323.68,684.359 1324.24,684.359 1324.8,684.359 1325.36,684.359 1325.92,684.359 1326.47,684.359 1327.03,684.359 1327.59,684.359 1328.15,684.359 1328.71,684.359 1329.27,684.359 1329.83,684.359 1330.39,684.359 1330.95,684.359 1331.51,684.359 1332.07,684.359 1332.63,684.359 1333.19,684.359 1333.75,684.359 1334.3,684.359 1334.86,684.359 1335.42,684.359 1335.98,684.359 1336.54,684.359 1337.1,684.359 1337.66,684.359 1338.22,684.359 1338.78,684.359 1339.34,684.359 1339.9,684.359 1340.46,684.359 1341.02,684.359 1341.57,684.359 1342.13,684.359 1342.69,684.359 1343.25,684.359 1343.81,684.359 1344.37,684.359 1344.93,684.359 1345.49,684.359 1346.05,684.359 1346.61,684.359 1347.17,684.359 1347.73,684.359 1348.29,684.359 1348.84,684.359 1349.4,684.359 1349.96,684.359 1350.52,684.359 1351.08,684.359 1351.64,684.359 1352.2,684.359 1352.76,684.359 1353.32,684.359 1353.88,684.359 1354.44,684.359 1355,684.359 1355.56,684.359 1356.12,684.359 1356.67,684.359 1357.23,684.359 1357.79,684.359 1358.35,684.359 1358.91,684.359 1359.47,684.359 1360.03,684.359 1360.59,684.359 1361.15,684.359 1361.71,684.359 1362.27,684.359 1362.83,684.359 1363.39,684.359 1363.94,684.359 1364.5,684.359 1365.06,684.359 1365.62,684.359 1366.18,684.359 1366.74,684.359 1367.3,684.359 1367.86,684.359 1368.42,684.359 1368.98,684.359 1369.54,684.359 1370.1,684.359 1370.66,684.359 1371.21,684.359 1371.77,684.359 1372.33,684.359 1372.89,684.359 1373.45,684.359 1374.01,684.359 1374.57,684.359 1375.13,684.359 1375.69,684.359 1376.25,684.359 1376.81,684.359 1377.37,684.359 1377.93,684.359 1378.49,684.359 1379.04,684.359 1379.6,684.359 1380.16,684.359 1380.72,684.359 1381.28,684.359 1381.84,684.359 1382.4,684.359 1382.96,684.359 1383.52,684.359 1384.08,684.359 1384.64,684.359 1385.2,684.359 1385.76,684.359 1386.31,684.359 1386.87,684.359 1387.43,684.359 1387.99,684.359 1388.55,684.359 1389.11,684.359 1389.67,684.359 1390.23,684.359 1390.79,684.359 1391.35,684.359 1391.91,684.359 1392.47,684.359 1393.03,684.359 1393.58,684.359 1394.14,684.359 1394.7,684.359 1395.26,684.359 1395.82,684.359 1396.38,684.359 1396.94,684.359 1397.5,684.359 1398.06,684.359 1398.62,684.359 1399.18,684.359 1399.74,684.359 1400.3,684.359 1400.86,684.359 1401.41,684.359 1401.97,684.359 1402.53,684.359 1403.09,684.359 1403.65,684.359 1404.21,684.359 1404.77,684.359 1405.33,684.359 1405.89,684.359 1406.45,684.359 1407.01,684.359 1407.57,684.359 1408.13,684.359 1408.68,684.359 1409.24,684.359 1409.8,684.359 1410.36,684.359 1410.92,684.359 1411.48,684.359 1412.04,684.359 1412.6,684.359 1413.16,684.359 1413.72,684.359 1414.28,684.359 1414.84,684.359 1415.4,684.359 1415.95,684.359 1416.51,684.359 1417.07,684.359 1417.63,684.359 1418.19,684.359 1418.75,684.359 1419.31,684.359 1419.87,684.359 1420.43,684.359 1420.99,684.359 1421.55,684.359 1422.11,684.359 1422.67,684.359 1423.23,684.359 1423.78,684.359 1424.34,684.359 1424.9,684.359 1425.46,684.359 1426.02,684.359 1426.58,684.359 1427.14,684.359 1427.7,684.359 1428.26,684.359 1428.82,684.359 1429.38,684.359 1429.94,684.359 1430.5,684.359 1431.05,684.359 1431.61,684.359 1432.17,684.359 1432.73,684.359 1433.29,684.359 1433.85,684.359 1434.41,684.359 1434.97,684.359 1435.53,684.359 1436.09,684.359 1436.65,684.359 1437.21,684.359 1437.77,684.359 1438.33,684.359 1438.88,684.359 1439.44,684.359 1440,684.359 1440.56,684.359 1441.12,684.359 1441.68,684.359 1442.24,684.359 1442.8,684.359 1443.36,684.359 1443.92,684.359 1444.48,684.359 1445.04,684.359 1445.6,684.359 1446.15,684.359 1446.71,684.359 1447.27,684.359 1447.83,684.359 1448.39,684.359 1448.95,684.359 1449.51,684.359 1450.07,684.359 1450.63,684.359 1451.19,684.359 1451.75,684.359 1452.31,684.359 1452.87,684.359 1453.42,684.359 1453.98,684.359 1454.54,684.359 1455.1,684.359 1455.66,684.359 1456.22,684.359 1456.78,684.359 1457.34,684.359 1457.9,684.359 1458.46,684.359 1459.02,684.359 1459.58,684.359 1460.14,684.359 1460.7,684.359 1461.25,684.359 1461.81,684.359 1462.37,684.359 1462.93,684.359 1463.49,684.359 1464.05,684.359 1464.61,684.359 1465.17,684.359 1465.73,684.359 1466.29,684.359 1466.85,684.359 1467.41,684.359 1467.97,684.359 1468.52,684.359 1469.08,684.359 1469.64,684.359 1470.2,684.359 1470.76,684.359 1471.32,684.359 1471.88,684.359 1472.44,684.359 1473,684.359 1473.56,684.359 1474.12,684.359 1474.68,684.359 1475.24,684.359 1475.79,684.359 1476.35,684.359 1476.91,684.359 1477.47,684.359 1478.03,684.359 1478.59,684.359 1479.15,684.359 1479.71,684.359 1480.27,684.359 1480.83,684.359 1481.39,684.359 1481.95,684.359 1482.51,684.359 1483.07,684.359 1483.62,684.359 1484.18,684.359 1484.74,684.359 1485.3,684.359 1485.86,684.359 1486.42,684.359 1486.98,684.359 1487.54,684.359 1488.1,684.359 1488.66,684.359 1489.22,684.359 1489.78,684.359 1490.34,684.359 1490.89,684.359 1491.45,684.359 1492.01,684.359 1492.57,684.359 1493.13,684.359 1493.69,684.359 1494.25,684.359 1494.81,684.359 1495.37,684.359 1495.93,684.359 1496.49,684.359 1497.05,684.359 1497.61,684.359 1498.16,684.359 1498.72,684.359 1499.28,684.359 1499.84,684.359 1500.4,684.359 1500.96,684.359 1501.52,684.359 1502.08,684.359 1502.64,684.359 1503.2,684.359 1503.76,684.359 1504.32,684.359 1504.88,684.359 1505.44,684.359 1505.99,684.359 1506.55,684.359 1507.11,684.359 1507.67,684.359 1508.23,684.359 1508.79,684.359 1509.35,684.359 1509.91,684.359 1510.47,684.359 1511.03,684.359 1511.59,684.359 1512.15,684.359 1512.71,684.359 1513.26,684.359 1513.82,684.359 1514.38,684.359 1514.94,684.359 1515.5,684.359 1516.06,684.359 1516.62,684.359 1517.18,684.359 1517.74,684.359 1518.3,684.359 1518.86,684.359 1519.42,684.359 1519.98,684.359 1520.53,684.359 1521.09,684.359 1521.65,684.359 1522.21,684.359 1522.77,684.359 1523.33,684.359 1523.89,684.359 1524.45,684.359 1525.01,684.359 1525.57,684.359 1526.13,684.359 1526.69,684.359 1527.25,684.359 1527.81,684.359 1528.36,684.359 1528.92,684.359 1529.48,684.359 1530.04,684.359 1530.6,684.359 1531.16,684.359 1531.72,684.359 1532.28,684.359 1532.84,684.359 1533.4,684.359 1533.96,684.359 1534.52,684.359 1535.08,684.359 1535.63,684.359 1536.19,684.359 1536.75,684.359 1537.31,684.359 1537.87,684.359 1538.43,684.359 1538.99,684.359 1539.55,684.359 1540.11,684.359 1540.67,684.359 1541.23,684.359 1541.79,684.359 1542.35,684.359 1542.9,684.359 1543.46,684.359 1544.02,684.359 1544.58,684.359 1545.14,684.359 1545.7,684.359 1546.26,684.359 1546.82,684.359 1547.38,684.359 1547.94,684.359 1548.5,684.359 1549.06,684.359 1549.62,684.359 1550.18,684.359 1550.73,684.359 1551.29,684.359 1551.85,684.359 1552.41,684.359 1552.97,684.359 1553.53,684.359 1554.09,684.359 1554.65,684.359 1555.21,684.359 1555.77,684.359 1556.33,684.359 1556.89,684.359 1557.45,684.359 1558,684.359 1558.56,684.359 1559.12,684.359 1559.68,684.359 1560.24,684.359 1560.8,684.359 1561.36,684.359 1561.92,684.359 1562.48,684.359 1563.04,684.359 1563.6,684.359 1564.16,684.359 1564.72,684.359 1565.28,684.359 1565.83,684.359 1566.39,684.359 1566.95,684.359 1567.51,684.359 1568.07,684.359 1568.63,684.359 1569.19,684.359 1569.75,684.359 1570.31,684.359 1570.87,684.359 1571.43,684.359 1571.99,684.359 1572.55,684.359 1573.1,684.359 1573.66,684.359 1574.22,684.359 1574.78,684.359 1575.34,684.359 1575.9,684.359 1576.46,684.359 1577.02,684.359 1577.58,684.359 1578.14,684.359 1578.7,684.359 1579.26,684.359 1579.82,684.359 1580.37,684.359 1580.93,684.359 1581.49,684.359 1582.05,684.359 1582.61,684.359 1583.17,684.359 1583.73,684.359 1584.29,684.359 1584.85,684.359 1585.41,684.359 1585.97,684.359 1586.53,684.359 1587.09,684.359 1587.65,684.359 1588.2,684.359 1588.76,684.359 1589.32,684.359 1589.88,684.359 1590.44,684.359 1591,684.359 1591.56,684.359 1592.12,684.359 1592.68,684.359 1593.24,684.359 1593.8,684.359 1594.36,684.359 1594.92,684.359 1595.47,684.359 1596.03,684.359 1596.59,684.359 1597.15,684.359 1597.71,684.359 1598.27,684.359 1598.83,684.359 1599.39,684.359 1599.95,684.359 1600.51,684.359 1601.07,684.359 1601.63,684.359 1602.19,684.359 1602.74,684.359 1603.3,684.359 1603.86,684.359 1604.42,684.359 1604.98,684.359 1605.54,684.359 1606.1,684.359 1606.66,684.359 1607.22,684.359 1607.78,684.359 1608.34,684.359 1608.9,684.359 1609.46,684.359 1610.02,684.359 1610.57,684.359 1611.13,684.359 1611.69,684.359 1612.25,684.359 1612.81,684.359 1613.37,684.359 1613.93,684.359 1614.49,684.359 1615.05,684.359 1615.61,684.359 1616.17,684.359 1616.73,684.359 1617.29,684.359 1617.84,684.359 1618.4,684.359 1618.96,684.359 1619.52,684.359 1620.08,684.359 1620.64,684.359 1621.2,684.359 1621.76,684.359 1622.32,684.359 1622.88,684.359 1623.44,684.359 1624,684.359 1624.56,684.359 1625.11,684.359 1625.67,684.359 1626.23,684.359 1626.79,684.359 1627.35,684.359 1627.91,684.359 1628.47,684.359 1629.03,684.359 1629.59,684.359 1630.15,684.359 1630.71,684.359 1631.27,684.359 1631.83,684.359 1632.39,684.359 1632.94,684.359 1633.5,684.359 1634.06,684.359 1634.62,684.359 1635.18,684.359 1635.74,684.359 1636.3,684.359 1636.86,684.359 1637.42,684.359 1637.98,684.359 1638.54,684.359 1639.1,684.359 1639.66,684.359 1640.21,684.359 1640.77,684.359 1641.33,684.359 1641.89,684.359 1642.45,684.359 1643.01,684.359 1643.57,684.359 1644.13,684.359 1644.69,684.359 1645.25,684.359 1645.81,684.359 1646.37,684.359 1646.93,684.359 1647.48,684.359 1648.04,684.359 1648.6,684.359 1649.16,684.359 1649.72,684.359 1650.28,684.359 1650.84,684.359 1651.4,684.359 1651.96,684.359 1652.52,684.359 1653.08,684.359 1653.64,684.359 1654.2,684.359 1654.76,684.359 1655.31,684.359 1655.87,684.359 1656.43,684.359 1656.99,684.359 1657.55,684.359 1658.11,684.359 1658.67,684.359 1659.23,684.359 1659.79,684.359 1660.35,684.359 1660.91,684.359 1661.47,684.359 1662.03,684.359 1662.58,684.359 1663.14,684.359 1663.7,684.359 1664.26,684.359 1664.82,684.359 1665.38,684.359 1665.94,684.359 1666.5,684.359 1667.06,684.359 1667.62,684.359 1668.18,684.359 1668.74,684.359 1669.3,684.359 1669.85,684.359 1670.41,684.359 1670.97,684.359 1671.53,684.359 1672.09,684.359 1672.65,684.359 1673.21,684.359 1673.77,684.359 1674.33,684.359 1674.89,684.359 1675.45,684.359 1676.01,684.359 1676.57,684.359 1677.13,684.359 1677.68,684.359 1678.24,684.359 1678.8,684.359 1679.36,684.359 1679.92,684.359 1680.48,684.359 1681.04,684.359 1681.6,684.359 1682.16,684.359 1682.72,684.359 1683.28,684.359 1683.84,684.359 1684.4,684.359 1684.95,684.359 1685.51,684.359 1686.07,684.359 1686.63,684.359 1687.19,684.359 1687.75,684.359 1688.31,684.359 1688.87,684.359 1689.43,684.359 1689.99,684.359 1690.55,684.359 1691.11,684.359 1691.67,684.359 1692.23,684.359 1692.78,684.359 1693.34,684.359 1693.9,684.359 1694.46,684.359 1695.02,684.359 1695.58,684.359 1696.14,684.359 1696.7,684.359 1697.26,684.359 1697.82,684.359 1698.38,684.359 1698.94,684.359 1699.5,684.359 1700.05,684.359 1700.61,684.359 1701.17,684.359 1701.73,684.359 1702.29,684.359 1702.85,684.359 1703.41,684.359 1703.97,684.359 1704.53,684.359 1705.09,684.359 1705.65,684.359 1706.21,684.359 1706.77,684.359 1707.32,684.359 1707.88,684.359 1708.44,684.359 1709,684.359 1709.56,684.359 1710.12,684.359 1710.68,684.359 1711.24,684.359 1711.8,684.359 1712.36,684.359 1712.92,684.359 1713.48,684.359 1714.04,684.359 1714.6,684.359 1715.15,684.359 1715.71,684.359 1716.27,684.359 1716.83,684.359 1717.39,684.359 1717.95,684.359 1718.51,684.359 1719.07,684.359 1719.63,684.359 1720.19,684.359 1720.75,684.359 1721.31,684.359 1721.87,684.359 1722.42,684.359 1722.98,684.359 1723.54,684.359 1724.1,684.359 1724.66,684.359 1725.22,684.359 1725.78,684.359 1726.34,684.359 1726.9,684.359 1727.46,684.359 1728.02,684.359 1728.58,684.359 1729.14,684.359 1729.69,684.359 1730.25,684.359 1730.81,684.359 1731.37,684.359 1731.93,684.359 1732.49,684.359 1733.05,684.359 1733.61,684.359 1734.17,684.359 1734.73,684.359 1735.29,684.359 1735.85,684.359 1736.41,684.359 1736.97,684.359 1737.52,684.359 1738.08,684.359 1738.64,684.359 1739.2,684.359 1739.76,684.359 1740.32,684.359 1740.88,684.359 1741.44,684.359 1742,684.359 1742.56,684.359 1743.12,684.359 1743.68,684.359 1744.24,684.359 1744.79,684.359 1745.35,684.359 1745.91,684.359 1746.47,684.359 1747.03,684.359 1747.59,684.359 1748.15,684.359 1748.71,684.359 1749.27,684.359 1749.83,684.359 1750.39,684.359 1750.95,684.359 1751.51,684.359 1752.06,684.359 1752.62,684.359 1753.18,684.359 1753.74,684.359 1754.3,684.359 1754.86,684.359 1755.42,684.359 1755.98,684.359 1756.54,684.359 1757.1,684.359 1757.66,684.359 1758.22,684.359 1758.78,684.359 1759.34,684.359 1759.89,684.359 1760.45,684.359 1761.01,684.359 1761.57,684.359 1762.13,684.359 1762.69,684.359 1763.25,684.359 1763.81,684.359 1764.37,684.359 1764.93,684.359 1765.49,684.359 1766.05,684.359 1766.61,684.359 1767.16,684.359 1767.72,684.359 1768.28,684.359 1768.84,684.359 1769.4,684.359 1769.96,684.359 1770.52,684.359 1771.08,684.359 1771.64,684.359 1772.2,684.359 1772.76,684.359 1773.32,684.359 1773.88,684.359 1774.43,684.359 1774.99,684.359 1775.55,684.359 1776.11,684.359 1776.67,684.359 1777.23,684.359 1777.79,684.359 1778.35,684.359 1778.91,684.359 1779.47,684.359 1780.03,684.359 1780.59,684.359 1781.15,684.359 1781.71,684.359 1782.26,684.359 1782.82,684.359 1783.38,684.359 1783.94,684.359 1784.5,684.359 1785.06,684.359 1785.62,684.359 1786.18,684.359 1786.74,684.359 1787.3,684.359 1787.86,684.359 1788.42,684.359 1788.98,684.359 1789.53,684.359 1790.09,684.359 1790.65,684.359 1791.21,684.359 1791.77,684.359 1792.33,684.359 1792.89,684.359 1793.45,684.359 1794.01,684.359 1794.57,684.359 1795.13,684.359 1795.69,684.359 1796.25,684.359 1796.8,684.359 1797.36,684.359 1797.92,684.359 1798.48,684.359 1799.04,684.359 1799.6,684.359 1800.16,684.359 1800.72,684.359 1801.28,684.359 1801.84,684.359 1802.4,684.359 1802.96,684.359 1803.52,684.359 1804.08,684.359 1804.63,684.359 1805.19,684.359 1805.75,684.359 1806.31,684.359 1806.87,684.359 1807.43,684.359 1807.99,684.359 1808.55,684.359 1809.11,684.359 1809.67,684.359 1810.23,684.359 1810.79,684.359 1811.35,684.359 1811.9,684.359 1812.46,684.359 1813.02,684.359 1813.58,684.359 1814.14,684.359 1814.7,684.359 1815.26,684.359 1815.82,684.359 1816.38,684.359 1816.94,684.359 1817.5,684.359 1818.06,684.359 1818.62,684.359 1819.18,684.359 1819.73,684.359 1820.29,684.359 1820.85,684.359 1821.41,684.359 1821.97,684.359 1822.53,684.359 1823.09,684.359 1823.65,684.359 1824.21,684.359 1824.77,684.359 1825.33,684.359 1825.89,684.359 1826.45,684.359 1827,684.359 1827.56,684.359 1828.12,684.359 1828.68,684.359 1829.24,684.359 1829.8,684.359 1830.36,684.359 1830.92,684.359 1831.48,684.359 1832.04,684.359 1832.6,684.359 1833.16,684.359 1833.72,684.359 1834.27,684.359 1834.83,684.359 1835.39,684.359 1835.95,684.359 1836.51,684.359 1837.07,684.359 1837.63,684.359 1838.19,684.359 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ¬± $(se.err)\n    Projected Energy: $(v.val) ¬± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0376531412580245 ¬± 0.025020815407943844\nProjected Energy: -4.018984342166345 ¬± (0.0061431812730647906, 0.006381273586537617)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; Œ± = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-Œ±.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ¬± 0.0029\n  with uncertainty of ¬± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13√ó6 DataFrame\n Row ‚îÇ blocks  mean      std_err      std_err_err  p_cov       mj\n     ‚îÇ Int64   Float64   Float64      Float64      Float64     Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 ‚îÇ   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 ‚îÇ   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 ‚îÇ   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 ‚îÇ    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 ‚îÇ    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 ‚îÇ    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 ‚îÇ     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 ‚îÇ     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 ‚îÇ     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 ‚îÇ      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 ‚îÇ      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 ‚îÇ      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ästd err vs blocking steps‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n               ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n    0.00423501 ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ m test\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ std err\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°†‚¢∫‚†í‚†í‚¢∫‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚°Ü‚£Ä‚†§‚°ó‚†â‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ß‚†§‚†î‚°ó‚†ä‚†â‚°è‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚¢£‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚°á‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†¥‚†Å‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚°á‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£¶‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†î‚†í‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†§‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†í‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n   -0.00012335 ‚îÇ‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†ß‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚îÇ\n               ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n               ‚†Ä0.64‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Äk‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä13.36‚†Ä\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; Œ± = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; Œ±=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.œÉ_f using x_by_y_linear. The standard error estimate r.œÉ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.Œ¥_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ¬± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*œÉ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3√ó3 DataFrame\n Row ‚îÇ res      res_l    res_u\n     ‚îÇ Float64  Float64  Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282\n   2 ‚îÇ    13.0  1.7282   1.7282\n   3 ‚îÇ    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dœÑ=df.dœÑ[end], skip=0)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ‚â• 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dœÑ=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dœÑln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dœÑ=df.dœÑ[end],\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |œà‚ü© and |œï‚ü© is defined as\n\nF(œàœï) = fracœàœï^2œàœàœïœï \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v‚ãÖv == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ‚â• 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:¬±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ¬± 0.029\n  with uncertainty of ¬± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; Œ± = 0.01) -> k\nmtest(table::NamedTuple; Œ± = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-Œ± after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, œÉ_f, Œ¥_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nœÉ_f::T: std from linear propagation\nŒ¥_y::T: coefficient of variation for denominator (‚â§ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, Œº, œÉ)\nparticles(samples, Œº::AbstractVector, Œ£::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, œÉ_f, Œ¥_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nœÉ_f standard deviation of f from linear error propagation (normal approximation)\nŒ¥_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(Œº_x,Œº_y,œÉ_x,œÉ_y,œÅ) -> f, œÉ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013).\n\nœÉ_f = sqrtfracœÉ_xŒº_y^2 + fracŒº_x œÉ_yŒº_y^2^2 - frac2 œÅ Œº_xŒº_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3√ó7 DataFrame\n Row ‚îÇ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     ‚îÇ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 ‚îÇ    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 ‚îÇ    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1√ó9 DataFrame\n Row ‚îÇ val       val_l      val_u      val_f     val_œÉ_f    val_Œ¥_y    val_k  val_blocks  val_success\n     ‚îÇ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dœÑ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7√ó6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS‚Ä¶</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple‚Ä¶</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.451355</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4417e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0199e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.596e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.413e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.665e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.855e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ‚â† basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10√ó10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10√ó10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nŒîE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ŒîE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0‚ü©\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0‚ü©\"\n fs\"|0 1 2 1 0‚ü©\"\n fs\"|1 0 2 0 1‚ü©\"\n fs\"|1 0 1 2 0‚ü©\"\n fs\"|0 0 1 1 2‚ü©\"\n fs\"|0 2 1 0 1‚ü©\"\n fs\"|2 1 1 0 0‚ü©\"\n fs\"|0 2 0 2 0‚ü©\"\n fs\"|1 1 0 1 1‚ü©\"\n fs\"|2 0 0 0 2‚ü©\"\n fs\"|0 0 0 3 1‚ü©\"\n fs\"|3 0 0 1 0‚ü©\"\n fs\"|0 1 0 0 3‚ü©\"\n fs\"|1 3 0 0 0‚ü©\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ‚âà all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0‚ü©\" => -0.0214153\n  fs\"|2 0 0 0 2‚ü©\" => -0.00237613\n  fs\"|0 0 4 0 0‚ü©\" => -0.980348\n  fs\"|0 0 0 3 1‚ü©\" => 0.00363555\n  fs\"|2 1 1 0 0‚ü©\" => -0.0119687\n  fs\"|1 0 2 0 1‚ü©\" => 0.0768085\n  fs\"|1 3 0 0 0‚ü©\" => 0.00363555\n  fs\"|0 1 2 1 0‚ü©\" => 0.177701\n  fs\"|0 0 1 1 2‚ü©\" => -0.0119687\n  fs\"|3 0 0 1 0‚ü©\" => 0.00195478\n  fs\"|0 2 0 2 0‚ü©\" => -0.0138439\n  fs\"|1 1 0 1 1‚ü©\" => -0.00234782\n  fs\"|0 1 0 0 3‚ü©\" => 0.00195478\n  fs\"|0 2 1 0 1‚ü©\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i œµ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential œµ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleœÉ t_œÉ a^_iœÉ a_jœÉ +\n  frac12sum_iœÉ u_œÉœÉ n_iœÉ (n_iœÉ - 1) +\n  sum_iœÉœÑu_œÉœÑ n_iœÉ n_iœÑ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iœÉd v_œÉd x_di^2 n_iœÉ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C √ó D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, Œ∑, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, Œ∑, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i œµ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi œµ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nŒ∑s = (): a tuple of aspect ratios for the remaining dimensions (Œ∑_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/Œ∑_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kœÉk^2 n_kœÉ \n    quad + sum_pqkœÉœÉ T_pqk a^_p-kœÉ a^_q+kœÉ a_qœÉ a_pœÉ \n    quad + sum_pqskkœÉœÉ Q_kka^_p-kœÉ a^_q+kœÉ a^_s+k-kœÉ\n                                       a_sœÉ a_qœÉ a_pœÉ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + œâN - v Œ£‚Çñ(a‚Çñ^ + a‚Çñ)\n\nwhere p is the total momentum, p_f = Œ£_k k a‚Çñ^ a‚Çñ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2œÄl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons œâ.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0‚ü©{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M√∑2, M√∑2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M√∑2, M√∑2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address Œ± is replaced by frac12(Œ±  Œ±) for even and odd parity, respectively, where Œ±ÃÑ == reverse(Œ±).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1‚ü©\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ‚âà eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ‚âà eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ‚â§ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0‚ü©{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ‚â§ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, œÉ=1, œÑ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_œÉœÑ(d) = frac1M _i n_œÉi (n_œÑi+d - Œ¥_0dŒ¥_œÉœÑ)\n\nFor multicomponent addresses, œÉ and œÑ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s b^_p  b_q a_r Œ¥_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s a^_p  a_q a_r Œ¥_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ‚â§ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ‚â§ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iœÉ = hat a^_iœÉ hat a_iœÉ\n\nwhere i is the mode and œÉ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0‚ü©\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0‚ü©\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x‚ãÖ(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1‚ü©\", -3.0)\n (fs\"|2 2 2‚ü©\", -2.449489742783178)\n (fs\"|3 1 2‚ü©\", -2.0)\n (fs\"|4 1 1‚ü©\", -2.8284271247461903)\n (fs\"|4 2 0‚ü©\", -2.0)\n (fs\"|3 3 0‚ü©\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ‚Ä¶.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb‚ãÖ(1:7) == onr(b)‚ãÖ(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w‚ãÖop(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ‚ãÖ A ‚ãÖ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1‚ü©\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ‚âà values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3√ó3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2√ó2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1‚ü©\" => -0.57735   fs\"|0 1 0‚ü©\" => -0.57735   fs\"|1 0 0‚ü©\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nŒ±mathrmnaddrrangle\n\nReturns the new address naddr and the factor Œ±. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0‚ü©\" => 1\n\njulia> fs\"|0 1 2 0‚ü©\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3‚ü©‚äó|0 1 0‚ü©\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üë‚ü©\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0‚ü©{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0‚ü©{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ‚â§ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Œ£_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) √∑ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ‚â§ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|‚ãÖ‚Üë‚Üë‚Üë‚ãÖ‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üì‚ü©\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3‚ü©{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n‚Üí (nadd, Œ±)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3‚ü©{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, Œ± = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dœÑ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ after projecting onto projector.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracPŒ®^(n+1)PŒ®^(n)right)-fracŒædœÑlnleft(fracPŒ®^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4, Œ± = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracŒædœÑlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-Œ±)*walkernumber() + Œ±*UniformProjector()‚ãÖœà computed with walkernumber() and UniformProjector(). When Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)-fracŒædœÑlnleft(fracŒ®_1^n+1Œ®_1^texttargetright)\n\nWhen Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08, Œæ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, Œ∂ = 0.08,   Œæ = Œ∂^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dœÑ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\nùêì = 1 + dœÑ(S - ùêá)\n\nwhere ùêá is the hamiltonian and S is the shift.\n\nùêì represents the first order expansion of the exponential evolution operator of the imaginary-time Schr√∂dinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nŒ∂ = 0.08: Damping parameter for the shift update.\nŒæ = Œ∂^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, Œ∂, Œæ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dœÑ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(‚ãÖ,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dœÑ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndœÑ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3‚ü©\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nœÑ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, Œ∂ = 0.08, Œæ = Œ∂^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ‚âà num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0, fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5\n  fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dœÑ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dœÑ","text":"update_dœÑ(s<:TimeStepStrategy, dœÑ, tnorm) -> new dœÑ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    targetwalkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schr√∂dinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Bl√∂te PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schr√∂dinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija ƒåufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. ƒåufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelm√ºller, D. Huber, M. ƒåufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/œÄ^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => -1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -2.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 3.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 3.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()‚ãÖv == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
