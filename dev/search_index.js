var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2110606603290292 ± 0.0021547066829488183\n   G2(1) = 0.9168106648376422 ± 0.0006599308749397746\n   G2(2) = 0.9817644865338494 ± 0.0007233508470438623\n   G2(3) = 0.9917890369279878 ± 0.0013989452184916566\n   G2(4) = 0.9817644865338494 ± 0.0007233508470438623\n   G2(5) = 0.9168106648376422 ± 0.0006599308749397746\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.036716236123969 ± 0.11086871937649131\n   Replica 2: -3.938772028766774 ± 0.13330487587157813\n   Replica 3: -4.056682105159703 ± 0.1496958703851271\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip880\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip880)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip881\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip880)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip882\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.15 2211.02,1003.15 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.461 2211.02,745.461 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.773 2211.02,487.773 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.085 2211.02,230.085 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.15 423.181,1003.15 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.461 423.181,745.461 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.773 423.181,487.773 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.085 423.181,230.085 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M290.043 1016.49 L306.363 1016.49 L306.363 1020.43 L284.418 1020.43 L284.418 1016.49 Q287.08 1013.74 291.664 1009.11 Q296.27 1004.46 297.451 1003.11 Q299.696 1000.59 300.576 998.854 Q301.478 997.095 301.478 995.405 Q301.478 992.651 299.534 990.915 Q297.613 989.179 294.511 989.179 Q292.312 989.179 289.858 989.942 Q287.427 990.706 284.65 992.257 L284.65 987.535 Q287.474 986.401 289.927 985.822 Q292.381 985.243 294.418 985.243 Q299.789 985.243 302.983 987.929 Q306.177 990.614 306.177 995.104 Q306.177 997.234 305.367 999.155 Q304.58 1001.05 302.474 1003.65 Q301.895 1004.32 298.793 1007.53 Q295.691 1010.73 290.043 1016.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M316.224 985.868 L334.58 985.868 L334.58 989.804 L320.506 989.804 L320.506 998.276 Q321.524 997.928 322.543 997.766 Q323.562 997.581 324.58 997.581 Q330.367 997.581 333.747 1000.75 Q337.126 1003.92 337.126 1009.34 Q337.126 1014.92 333.654 1018.02 Q330.182 1021.1 323.862 1021.1 Q321.687 1021.1 319.418 1020.73 Q317.173 1020.36 314.765 1019.62 L314.765 1014.92 Q316.849 1016.05 319.071 1016.61 Q321.293 1017.16 323.77 1017.16 Q327.774 1017.16 330.112 1015.06 Q332.45 1012.95 332.45 1009.34 Q332.45 1005.73 330.112 1003.62 Q327.774 1001.52 323.77 1001.52 Q321.895 1001.52 320.02 1001.93 Q318.168 1002.35 316.224 1003.23 L316.224 985.868 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M356.339 988.947 Q352.728 988.947 350.899 992.512 Q349.094 996.053 349.094 1003.18 Q349.094 1010.29 350.899 1013.85 Q352.728 1017.4 356.339 1017.4 Q359.973 1017.4 361.779 1013.85 Q363.608 1010.29 363.608 1003.18 Q363.608 996.053 361.779 992.512 Q359.973 988.947 356.339 988.947 M356.339 985.243 Q362.149 985.243 365.205 989.85 Q368.284 994.433 368.284 1003.18 Q368.284 1011.91 365.205 1016.52 Q362.149 1021.1 356.339 1021.1 Q350.529 1021.1 347.45 1016.52 Q344.395 1011.91 344.395 1003.18 Q344.395 994.433 347.45 989.85 Q350.529 985.243 356.339 985.243 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M286.062 728.181 L304.418 728.181 L304.418 732.116 L290.344 732.116 L290.344 740.588 Q291.363 740.241 292.381 740.079 Q293.4 739.894 294.418 739.894 Q300.205 739.894 303.585 743.065 Q306.964 746.236 306.964 751.653 Q306.964 757.231 303.492 760.333 Q300.02 763.412 293.701 763.412 Q291.525 763.412 289.256 763.042 Q287.011 762.671 284.603 761.93 L284.603 757.231 Q286.687 758.366 288.909 758.921 Q291.131 759.477 293.608 759.477 Q297.613 759.477 299.951 757.37 Q302.288 755.264 302.288 751.653 Q302.288 748.042 299.951 745.935 Q297.613 743.829 293.608 743.829 Q291.733 743.829 289.858 744.245 Q288.006 744.662 286.062 745.542 L286.062 728.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M326.177 731.259 Q322.566 731.259 320.737 734.824 Q318.932 738.366 318.932 745.495 Q318.932 752.602 320.737 756.167 Q322.566 759.708 326.177 759.708 Q329.811 759.708 331.617 756.167 Q333.446 752.602 333.446 745.495 Q333.446 738.366 331.617 734.824 Q329.811 731.259 326.177 731.259 M326.177 727.556 Q331.987 727.556 335.043 732.162 Q338.122 736.745 338.122 745.495 Q338.122 754.222 335.043 758.829 Q331.987 763.412 326.177 763.412 Q320.367 763.412 317.288 758.829 Q314.233 754.222 314.233 745.495 Q314.233 736.745 317.288 732.162 Q320.367 727.556 326.177 727.556 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M356.339 731.259 Q352.728 731.259 350.899 734.824 Q349.094 738.366 349.094 745.495 Q349.094 752.602 350.899 756.167 Q352.728 759.708 356.339 759.708 Q359.973 759.708 361.779 756.167 Q363.608 752.602 363.608 745.495 Q363.608 738.366 361.779 734.824 Q359.973 731.259 356.339 731.259 M356.339 727.556 Q362.149 727.556 365.205 732.162 Q368.284 736.745 368.284 745.495 Q368.284 754.222 365.205 758.829 Q362.149 763.412 356.339 763.412 Q350.529 763.412 347.45 758.829 Q344.395 754.222 344.395 745.495 Q344.395 736.745 347.45 732.162 Q350.529 727.556 356.339 727.556 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M284.835 470.493 L307.057 470.493 L307.057 472.484 L294.511 505.053 L289.627 505.053 L301.432 474.428 L284.835 474.428 L284.835 470.493 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M316.224 470.493 L334.58 470.493 L334.58 474.428 L320.506 474.428 L320.506 482.9 Q321.524 482.553 322.543 482.391 Q323.562 482.206 324.58 482.206 Q330.367 482.206 333.747 485.377 Q337.126 488.548 337.126 493.965 Q337.126 499.544 333.654 502.646 Q330.182 505.724 323.862 505.724 Q321.687 505.724 319.418 505.354 Q317.173 504.983 314.765 504.243 L314.765 499.544 Q316.849 500.678 319.071 501.233 Q321.293 501.789 323.77 501.789 Q327.774 501.789 330.112 499.683 Q332.45 497.576 332.45 493.965 Q332.45 490.354 330.112 488.247 Q327.774 486.141 323.77 486.141 Q321.895 486.141 320.02 486.558 Q318.168 486.974 316.224 487.854 L316.224 470.493 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M356.339 473.572 Q352.728 473.572 350.899 477.136 Q349.094 480.678 349.094 487.808 Q349.094 494.914 350.899 498.479 Q352.728 502.021 356.339 502.021 Q359.973 502.021 361.779 498.479 Q363.608 494.914 363.608 487.808 Q363.608 480.678 361.779 477.136 Q359.973 473.572 356.339 473.572 M356.339 469.868 Q362.149 469.868 365.205 474.474 Q368.284 479.058 368.284 487.808 Q368.284 496.534 365.205 501.141 Q362.149 505.724 356.339 505.724 Q350.529 505.724 347.45 501.141 Q344.395 496.534 344.395 487.808 Q344.395 479.058 347.45 474.474 Q350.529 469.868 356.339 469.868 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M256.664 243.43 L264.303 243.43 L264.303 217.064 L255.992 218.731 L255.992 214.472 L264.256 212.805 L268.932 212.805 L268.932 243.43 L276.571 243.43 L276.571 247.365 L256.664 247.365 L256.664 243.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M296.015 215.884 Q292.404 215.884 290.576 219.449 Q288.77 222.99 288.77 230.12 Q288.77 237.226 290.576 240.791 Q292.404 244.333 296.015 244.333 Q299.65 244.333 301.455 240.791 Q303.284 237.226 303.284 230.12 Q303.284 222.99 301.455 219.449 Q299.65 215.884 296.015 215.884 M296.015 212.18 Q301.826 212.18 304.881 216.787 Q307.96 221.37 307.96 230.12 Q307.96 238.847 304.881 243.453 Q301.826 248.036 296.015 248.036 Q290.205 248.036 287.127 243.453 Q284.071 238.847 284.071 230.12 Q284.071 221.37 287.127 216.787 Q290.205 212.18 296.015 212.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M326.177 215.884 Q322.566 215.884 320.737 219.449 Q318.932 222.99 318.932 230.12 Q318.932 237.226 320.737 240.791 Q322.566 244.333 326.177 244.333 Q329.811 244.333 331.617 240.791 Q333.446 237.226 333.446 230.12 Q333.446 222.99 331.617 219.449 Q329.811 215.884 326.177 215.884 M326.177 212.18 Q331.987 212.18 335.043 216.787 Q338.122 221.37 338.122 230.12 Q338.122 238.847 335.043 243.453 Q331.987 248.036 326.177 248.036 Q320.367 248.036 317.288 243.453 Q314.233 238.847 314.233 230.12 Q314.233 221.37 317.288 216.787 Q320.367 212.18 326.177 212.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M356.339 215.884 Q352.728 215.884 350.899 219.449 Q349.094 222.99 349.094 230.12 Q349.094 237.226 350.899 240.791 Q352.728 244.333 356.339 244.333 Q359.973 244.333 361.779 240.791 Q363.608 237.226 363.608 230.12 Q363.608 222.99 361.779 219.449 Q359.973 215.884 356.339 215.884 M356.339 212.18 Q362.149 212.18 365.205 216.787 Q368.284 221.37 368.284 230.12 Q368.284 238.847 365.205 243.453 Q362.149 248.036 356.339 248.036 Q350.529 248.036 347.45 243.453 Q344.395 238.847 344.395 230.12 Q344.395 221.37 347.45 216.787 Q350.529 212.18 356.339 212.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip882)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.085 4017.76,230.085 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.55 458.828,1248.18 459.396,1247.74 459.964,1247.21 460.533,1246.62 461.101,1245.97 461.669,1244.2 462.238,1243.4 462.806,1242.52 463.375,1241.55 463.943,1240.46 464.511,1239.3 465.08,1237 465.648,1235.62 466.216,1234.12 466.785,1232.51 467.353,1229.74 467.921,1226.88 468.49,1224.91 469.058,1222.8 469.626,1220.51 470.195,1218.09 470.763,1214.52 471.331,1210.72 471.9,1207.8 472.468,1204.69 473.036,1201.42 473.605,1195.9 474.173,1191.17 474.741,1184.1 475.31,1179.95 475.878,1174.52 476.446,1168.96 477.015,1163.18 477.583,1158.19 478.152,1152.92 478.72,1146.36 479.288,1139.7 479.857,1132.77 480.425,1126.69 480.993,1120.4 481.562,1112.92 482.13,1106.21 482.698,1098.09 483.267,1091.06 483.835,1080.73 484.403,1071.08 484.972,1063.49 485.54,1055.62 486.108,1046.68 486.677,1036.46 487.245,1027.24 487.813,1018.78 488.382,1007.05 488.95,998.588 489.518,989.843 490.087,979.96 490.655,968.966 491.224,957.957 491.792,948.886 492.36,938.675 492.929,927.236 493.497,916.83 494.065,906.452 494.634,896.124 495.202,884.608 495.77,870.143 496.339,859.95 496.907,850.878 497.475,839.463 498.044,828.086 498.612,815.526 499.18,805.429 499.749,793.392 500.317,784.579 500.885,772.762 501.454,763.939 502.022,753.068 502.59,742.564 503.159,733.015 503.727,724.73 504.295,716.303 504.864,707.775 505.432,696.201 506.001,685.877 506.569,677.752 507.137,667.702 507.706,655.635 508.274,646.808 508.842,638.088 509.411,629.623 509.979,622.155 510.547,609.701 511.116,599.51 511.684,590.496 512.252,582.572 512.821,573.809 513.389,567.361 513.957,559.9 514.526,551.646 515.094,545.532 515.662,539.576 516.231,529.302 516.799,521.391 517.367,513.737 517.936,506.363 518.504,502.291 519.072,495.875 519.641,486.568 520.209,479.548 520.778,472.717 521.346,466.131 521.914,460.792 522.483,455.451 523.051,449.124 523.619,445.212 524.188,441.062 524.756,435.962 525.324,429.853 525.893,425.039 526.461,420.273 527.029,413.656 527.598,409.431 528.166,405.209 528.734,400.937 529.303,399.003 529.871,394.953 530.439,391.974 531.008,387.733 531.576,383.826 532.144,379.809 532.713,378.214 533.281,375.445 533.85,372.566 534.418,370.62 534.986,367.708 535.555,363.786 536.123,360.07 536.691,354.577 537.26,350.261 537.828,346.884 538.396,342.796 538.965,343.126 539.533,338.922 540.101,336.996 540.67,335.278 541.238,331.188 541.806,328.323 542.375,323.558 542.943,322.182 543.511,320.642 544.08,319.098 544.648,316.689 545.216,314.222 545.785,312.805 546.353,311.508 546.921,307.244 547.49,303.889 548.058,304.999 548.627,303.834 549.195,299.678 549.763,298.965 550.332,299.037 550.9,297.942 551.468,295.848 552.037,293.944 552.605,293.017 553.173,292.244 553.742,291.471 554.31,290.616 554.878,288.704 555.447,284.698 556.015,283.122 556.583,280.413 557.152,281.077 557.72,279.433 558.288,278.911 558.857,279.29 559.425,277.333 559.993,275.87 560.562,274.352 561.13,274.091 561.698,272.653 562.267,273.121 562.835,273.481 563.404,271.884 563.972,271.429 564.54,268.828 565.109,268.424 565.677,269.127 566.245,266.735 566.814,266.631 567.382,265.266 567.95,262.896 568.519,259.562 569.087,258.825 569.655,258.802 570.224,258.933 570.792,260.271 571.36,256.994 571.929,257.007 572.497,256.691 573.065,254.636 573.634,253.882 574.202,254.166 574.77,253.363 575.339,253.752 575.907,254.935 576.476,254.769 577.044,253.861 577.612,254.745 578.181,252.655 578.749,251.767 579.317,253.876 579.886,253.872 580.454,252.796 581.022,251.672 581.591,252.758 582.159,251.723 582.727,252.605 583.296,253.474 583.864,249.224 584.432,247.255 585.001,246.367 585.569,247.506 586.137,246.936 586.706,248.183 587.274,248.363 587.842,249.619 588.411,248.667 588.979,251.662 589.547,249.467 590.116,248.403 590.684,248.362 591.253,248.219 591.821,247.94 592.389,246.987 592.958,249.206 593.526,250.012 594.094,249.88 594.663,250.5 595.231,249.144 595.799,249.087 596.368,245.923 596.936,246.98 597.504,245.763 598.073,245.812 598.641,245.647 599.209,245.86 599.778,247.796 600.346,246.406 600.914,246.188 601.483,246.044 602.051,244.978 602.619,241.025 603.188,241.148 603.756,240.168 604.325,239.458 604.893,238.722 605.461,238.153 606.03,238.683 606.598,239.02 607.166,235.248 607.735,237.859 608.303,239.08 608.871,239.395 609.44,239.748 610.008,238.957 610.576,239.18 611.145,238.474 611.713,238.705 612.281,240.061 612.85,241.365 613.418,240.4 613.986,240.403 614.555,237.39 615.123,237.748 615.691,239.055 616.26,239.361 616.828,240.605 617.396,240.687 617.965,240.774 618.533,239.669 619.102,242.722 619.67,242.721 620.238,239.612 620.807,239.51 621.375,240.571 621.943,242.595 622.512,241.665 623.08,241.591 623.648,240.684 624.217,240.632 624.785,239.702 625.353,238.945 625.922,238.904 626.49,238.953 627.058,237.147 627.627,236.373 628.195,236.55 628.763,234.782 629.332,235.547 629.9,232.695 630.468,235.316 631.037,233.643 631.605,235.205 632.173,234.645 632.742,234.016 633.31,237.82 633.879,234.965 634.447,236.33 635.015,235.45 635.584,236.912 636.152,234.972 636.72,235.019 637.289,237.522 637.857,237.609 638.425,240.72 638.994,242.513 639.562,242.245 640.13,240.861 640.699,237.383 641.267,237.357 641.835,237.431 642.404,237.47 642.972,240.648 643.54,239.271 644.109,236.269 644.677,233.19 645.245,233.535 645.814,233.886 646.382,233.191 646.951,237.827 647.519,234.85 648.087,235.055 648.656,235.404 649.224,231.796 649.792,234.22 650.361,234.685 650.929,234.908 651.497,237.026 652.066,237.309 652.634,236.27 653.202,235.236 653.771,236.526 654.339,236.481 654.907,236.463 655.476,239.757 656.044,241.779 656.612,241.575 657.181,239.432 657.749,239.086 658.317,238.953 658.886,239.748 659.454,238.583 660.022,235.299 660.591,237.601 661.159,236.478 661.728,237.681 662.296,236.454 662.864,236.403 663.433,237.489 664.001,237.419 664.569,237.186 665.138,237.992 665.706,238.829 666.274,238.858 666.843,239.832 667.411,237.579 667.979,235.386 668.548,235.459 669.116,235.482 669.684,236.435 670.253,238.182 670.821,237.875 671.389,237.641 671.958,237.374 672.526,238.021 673.094,238.715 673.663,237.374 674.231,235.057 674.799,235.057 675.368,234.965 675.936,232.813 676.505,232.969 677.073,233.149 677.641,234.437 678.21,233.47 678.778,234.692 679.346,234.748 679.915,234.599 680.483,234.721 681.051,236.692 681.62,237.734 682.188,237.497 682.756,237.403 683.325,238.191 683.893,239.134 684.461,238.73 685.03,237.127 685.598,237.85 686.166,236.571 686.735,236.251 687.303,234.821 687.871,233.657 688.44,232.767 689.008,234.001 689.577,231.902 690.145,232.076 690.713,232.235 691.282,231.316 691.85,230.267 692.418,230.293 692.987,228.307 693.555,228.502 694.123,228.763 694.692,229.024 695.26,230.449 695.828,230.518 696.397,231.665 696.965,228.683 697.533,228.849 698.102,229.25 698.67,225.492 699.238,223.134 699.807,222.657 700.375,222.315 700.943,223.256 701.512,227.043 702.08,226.676 702.648,227.117 703.217,229.714 703.785,231.265 704.354,232.43 704.922,233.787 705.49,234.951 706.059,234.866 706.627,235.948 707.195,235.713 707.764,235.672 708.332,234.442 708.9,235.743 709.469,236.542 710.037,234.41 710.605,235.228 711.174,236.156 711.742,234.995 712.31,233.913 712.879,231.856 713.447,231.947 714.015,231.94 714.584,233.128 715.152,231.205 715.72,228.238 716.289,228.818 716.857,229.022 717.425,227.365 717.994,225.804 718.562,227.263 719.131,227.955 719.699,228.312 720.267,225.733 720.836,228.137 721.404,226.526 721.972,226.998 722.541,229.525 723.109,230.908 723.677,230.925 724.246,231.091 724.814,230.093 725.382,229.377 725.951,229.788 726.519,230.968 727.087,233.325 727.656,235.583 728.224,235.445 728.792,235.321 729.361,234.232 729.929,234.063 730.497,231.91 731.066,229.914 731.634,231.381 732.203,231.66 732.771,230.918 733.339,231.144 733.908,232.458 734.476,232.582 735.044,230.554 735.613,229.801 736.181,231.16 736.749,231.31 737.318,230.576 737.886,230.539 738.454,231.989 739.023,232.822 739.591,230.648 740.159,230.075 740.728,229.438 741.296,231.751 741.864,231.961 742.433,232.036 743.001,231.057 743.569,232.427 744.138,231.516 744.706,230.7 745.274,229.798 745.843,230.207 746.411,233.608 746.98,235.629 747.548,235.315 748.116,234.26 748.685,234.336 749.253,234.236 749.821,233.308 750.39,231.45 750.958,230.516 751.526,231.793 752.095,230.934 752.663,230.06 753.231,230.277 753.8,234.79 754.368,233.571 754.936,230.19 755.505,229.291 756.073,228.642 756.641,227.871 757.21,226.27 757.778,227.868 758.346,228.248 758.915,227.873 759.483,225.24 760.052,226.99 760.62,227.588 761.188,227.999 761.757,229.465 762.325,231.677 762.893,232.97 763.462,233.081 764.03,232.303 764.598,234.555 765.167,235.638 765.735,234.162 766.303,235.124 766.872,236.943 767.44,238.952 768.008,237.226 768.577,238.015 769.145,235.514 769.713,234.408 770.282,235.424 770.85,234.295 771.418,235.253 771.987,235.082 772.555,234.813 773.123,234.585 773.692,234.341 774.26,234.426 774.829,233.374 775.397,233.21 775.965,232.234 776.534,234.477 777.102,235.26 777.67,234.225 778.239,235.112 778.807,234.76 779.375,235.523 779.944,237.472 780.512,236.046 781.08,236.692 781.649,237.422 782.217,235.956 782.785,237.896 783.354,237.63 783.922,236.21 784.49,234.725 785.059,238.607 785.627,237.86 786.195,238.374 786.764,236.981 787.332,236.611 787.9,236.222 788.469,236.786 789.037,237.498 789.606,235.92 790.174,233.416 790.742,233.392 791.311,234.186 791.879,232.551 792.447,232.289 793.016,232.016 793.584,231.908 794.152,230.631 794.721,230.495 795.289,230.688 795.857,229.718 796.426,227.954 796.994,228.364 797.562,227.543 798.131,227.739 798.699,228.891 799.267,227.928 799.836,228.041 800.404,229.177 800.972,229.281 801.541,229.36 802.109,229.547 802.678,228.62 803.246,228.77 803.814,228.859 804.383,226.979 804.951,229.355 805.519,230.448 806.088,231.451 806.656,231.354 807.224,232.342 807.793,230.333 808.361,231.493 808.929,228.543 809.498,230.912 810.066,230.698 810.634,230.763 811.203,228.663 811.771,227.887 812.339,227.854 812.908,229.163 813.476,227.267 814.044,228.542 814.613,229.946 815.181,227.921 815.749,229.247 816.318,228.389 816.886,228.653 817.455,228.764 818.023,227.863 818.591,231.167 819.16,233.177 819.728,231.764 820.296,231.438 820.865,233.489 821.433,235.412 822.001,235.87 822.57,236.592 823.138,234.975 823.706,235.618 824.275,235.202 824.843,234.919 825.411,233.37 825.98,229.95 826.548,231.058 827.116,231.321 827.685,231.284 828.253,229.162 828.821,232.36 829.39,233.116 829.958,231.944 830.526,232.068 831.095,231.778 831.663,229.641 832.232,229.84 832.8,227.979 833.368,228.091 833.937,228.853 834.505,229.006 835.073,227.899 835.642,227.082 836.21,228.27 836.778,231.657 837.347,230.637 837.915,232.739 838.483,231.536 839.052,231.57 839.62,228.379 840.188,228.654 840.757,229.793 841.325,228.882 841.893,229.134 842.462,231.042 843.03,230.974 843.598,232.99 844.167,232.716 844.735,234.644 845.304,234.45 845.872,234.993 846.44,234.593 847.009,234.412 847.577,234.193 848.145,234.961 848.714,233.54 849.282,231.512 849.85,230.478 850.419,232.698 850.987,232.571 851.555,232.626 852.124,232.374 852.692,232.102 853.26,230.959 853.829,230.759 854.397,229.766 854.965,229.768 855.534,229.813 856.102,227.526 856.67,227.776 857.239,228.88 857.807,230.109 858.375,230.975 858.944,230.918 859.512,233.963 860.081,232.408 860.649,230.372 861.217,230.46 861.786,231.58 862.354,230.43 862.922,231.494 863.491,229.161 864.059,229.213 864.627,226.971 865.196,226.173 865.764,226.379 866.332,225.675 866.901,224.782 867.469,223.904 868.037,225.353 868.606,225.707 869.174,228.264 869.742,227.598 870.311,227.76 870.879,227.306 871.447,227.595 872.016,227.588 872.584,226.988 873.152,228.466 873.721,227.948 874.289,227.153 874.858,226.444 875.426,228.041 875.994,230.603 876.563,229.657 877.131,229.684 877.699,231.983 878.268,230.086 878.836,228.009 879.404,227.113 879.973,226.391 880.541,226.954 881.109,225.177 881.678,225.573 882.246,225.905 882.814,224.25 883.383,224.706 883.951,222.984 884.519,223.769 885.088,224.397 885.656,227.929 886.224,228.301 886.793,232.643 887.361,231.805 887.93,231.979 888.498,233.052 889.066,233.138 889.635,235.307 890.203,234.163 890.771,231.906 891.34,235.093 891.908,232.821 892.476,233.819 893.045,233.953 893.613,232.607 894.181,232.575 894.75,232.481 895.318,230.52 895.886,232.639 896.455,233.532 897.023,232.386 897.591,233.364 898.16,233.066 898.728,234.081 899.296,231.753 899.865,233.773 900.433,232.507 901.001,233.626 901.57,232.38 902.138,231.299 902.707,230.337 903.275,229.339 903.843,230.527 904.412,230.567 904.98,231.526 905.548,231.432 906.117,232.435 906.685,232.151 907.253,233.037 907.822,231.941 908.39,234.113 908.958,234.002 909.527,234.602 910.095,235.226 910.663,233.722 911.232,232.488 911.8,233.375 912.368,235.251 912.937,234.909 913.505,232.488 914.073,232.27 914.642,231.128 915.21,230.85 915.779,230.93 916.347,232.898 916.915,232.638 917.484,232.434 918.052,232.258 918.62,233.249 919.189,231.093 919.757,231.968 920.325,230.62 920.894,230.606 921.462,231.663 922.03,232.574 922.599,232.398 923.167,233.214 923.735,237.084 924.304,234.688 924.872,234.574 925.44,234.374 926.009,234.061 926.577,232.891 927.145,232.702 927.714,231.432 928.282,232.051 928.85,230.897 929.419,227.81 929.987,227.954 930.556,224.947 931.124,223.039 931.692,224.624 932.261,224.899 932.829,223.287 933.397,222.94 933.966,224.316 934.534,223.863 935.102,225.526 935.671,228.654 936.239,228.905 936.807,229.044 937.376,228.188 937.944,227.286 938.512,227.541 939.081,226.666 939.649,225.952 940.217,226.158 940.786,226.603 941.354,226.958 941.922,227.32 942.491,225.737 943.059,226.214 943.627,227.775 944.196,229.095 944.764,230.31 945.333,231.331 945.901,233.501 946.469,235.381 947.038,235.085 947.606,233.693 948.174,232.377 948.743,231.274 949.311,231.222 949.879,232.372 950.448,234.578 951.016,234.385 951.584,235.105 952.153,237.07 952.721,236.638 953.289,237.198 953.858,236.784 954.426,234.179 954.994,232.865 955.563,232.697 956.131,234.596 956.699,234.141 957.268,235.87 957.836,233.433 958.405,231.274 958.973,232.396 959.541,232.283 960.11,232.976 960.678,230.534 961.246,230.237 961.815,226.002 962.383,228.326 962.951,227.238 963.52,226.355 964.088,226.456 964.656,226.576 965.225,224.659 965.793,223.718 966.361,227.271 966.93,228.287 967.498,227.399 968.066,225.619 968.635,228.25 969.203,226.361 969.771,225.616 970.34,226.053 970.908,225.363 971.476,225.82 972.045,224.151 972.613,223.552 973.182,222.239 973.75,223.042 974.318,222.598 974.887,225.353 975.455,225.711 976.023,226.139 976.592,223.74 977.16,223.218 977.728,224.911 978.297,226.538 978.865,227.771 979.433,227.979 980.002,229.225 980.57,227.311 981.138,226.694 981.707,225.801 982.275,225.204 982.843,226.766 983.412,228.323 983.98,229.623 984.548,231.815 985.117,233.946 985.685,233.888 986.253,232.621 986.822,232.73 987.39,230.537 987.959,230.763 988.527,230.567 989.095,231.781 989.664,231.852 990.232,231.989 990.8,234.19 991.369,233.06 991.937,232.965 992.505,234.044 993.074,236.21 993.642,234.774 994.21,235.762 994.779,235.389 995.347,236.073 995.915,234.645 996.484,234.485 997.052,235.607 997.62,233.17 998.189,232.206 998.757,230.157 999.325,225.99 999.894,227.365 1000.46,228.77 1001.03,229.069 1001.6,228.944 1002.17,228.164 1002.74,226.315 1003.3,227.634 1003.87,225.93 1004.44,225.072 1005.01,227.633 1005.58,228.849 1006.15,228.921 1006.71,229.134 1007.28,229.297 1007.85,228.413 1008.42,228.84 1008.99,231.17 1009.56,232.259 1010.12,232.053 1010.69,231.009 1011.26,232.274 1011.83,232.105 1012.4,231.724 1012.97,231.692 1013.53,231.803 1014.1,233.952 1014.67,234.719 1015.24,235.635 1015.81,235.638 1016.38,233.287 1016.94,236.338 1017.51,237.014 1018.08,234.436 1018.65,235.126 1019.22,233.761 1019.79,232.739 1020.35,234.572 1020.92,233.316 1021.49,232.109 1022.06,232.937 1022.63,232.8 1023.2,233.826 1023.76,232.485 1024.33,233.196 1024.9,232.685 1025.47,231.454 1026.04,231.16 1026.61,228.935 1027.17,230.01 1027.74,229.979 1028.31,229.886 1028.88,227.892 1029.45,227.264 1030.02,226.694 1030.58,228.043 1031.15,230.192 1031.72,228.244 1032.29,228.358 1032.86,229.607 1033.43,227.873 1033.99,227.036 1034.56,228.319 1035.13,229.397 1035.7,230.8 1036.27,228.802 1036.84,228.94 1037.4,226.885 1037.97,227.181 1038.54,228.683 1039.11,230.797 1039.68,232.901 1040.25,235.368 1040.81,237.9 1041.38,238.358 1041.95,235.677 1042.52,236.428 1043.09,238.095 1043.66,237.7 1044.22,237.3 1044.79,236.744 1045.36,234.35 1045.93,236.048 1046.5,235.711 1047.07,235.214 1047.63,232.512 1048.2,234.265 1048.77,233.761 1049.34,234.458 1049.91,234.199 1050.48,234.735 1051.05,233.09 1051.61,233.833 1052.18,232.482 1052.75,230.075 1053.32,229.883 1053.89,229.807 1054.46,228.786 1055.02,228.526 1055.59,227.362 1056.16,230.576 1056.73,228.173 1057.3,226.144 1057.87,228.246 1058.43,228.471 1059,228.363 1059.57,229.371 1060.14,229.526 1060.71,228.69 1061.28,229.714 1061.84,231.881 1062.41,231.781 1062.98,229.561 1063.55,229.417 1064.12,230.675 1064.69,232.582 1065.25,234.414 1065.82,234.872 1066.39,235.487 1066.96,235.004 1067.53,233.681 1068.1,229.335 1068.66,228.118 1069.23,229.268 1069.8,228.452 1070.37,228.421 1070.94,229.538 1071.51,228.402 1072.07,228.405 1072.64,224.441 1073.21,224.441 1073.78,223.037 1074.35,224.4 1074.92,225.826 1075.48,227.011 1076.05,226.331 1076.62,226.853 1077.19,227.831 1077.76,227.931 1078.33,232.113 1078.89,230.219 1079.46,231.271 1080.03,229.154 1080.6,227.296 1081.17,227.369 1081.74,226.508 1082.3,228.733 1082.87,229.798 1083.44,229.943 1084.01,228.797 1084.58,228.824 1085.15,228.948 1085.71,228.064 1086.28,226.142 1086.85,226.441 1087.42,226.821 1087.99,225.047 1088.56,226.841 1089.12,227.308 1089.69,227.565 1090.26,228.806 1090.83,229.86 1091.4,230.967 1091.97,232.084 1092.53,230.773 1093.1,228.649 1093.67,228.947 1094.24,226.842 1094.81,227.946 1095.38,230.23 1095.94,229.341 1096.51,228.397 1097.08,227.687 1097.65,227.829 1098.22,226.215 1098.79,227.65 1099.35,227.004 1099.92,225.349 1100.49,225.848 1101.06,228.231 1101.63,228.484 1102.2,227.585 1102.76,228.923 1103.33,230.995 1103.9,231.098 1104.47,230.041 1105.04,229.047 1105.61,231.448 1106.17,231.457 1106.74,231.385 1107.31,234.506 1107.88,233.093 1108.45,232.74 1109.02,233.771 1109.58,232.347 1110.15,231.212 1110.72,230.2 1111.29,229.445 1111.86,231.506 1112.43,230.475 1112.99,229.304 1113.56,227.572 1114.13,225.682 1114.7,227.18 1115.27,226.504 1115.84,229.976 1116.4,230.278 1116.97,228.365 1117.54,229.6 1118.11,229.631 1118.68,229.594 1119.25,230.84 1119.81,228.766 1120.38,230.978 1120.95,230.849 1121.52,230.906 1122.09,232.067 1122.66,231.809 1123.23,229.972 1123.79,230.931 1124.36,230.895 1124.93,234.864 1125.5,234.582 1126.07,235.45 1126.64,234.926 1127.2,234.323 1127.77,232.838 1128.34,232.76 1128.91,231.411 1129.48,230.113 1130.05,230.442 1130.61,233.435 1131.18,233.419 1131.75,233.311 1132.32,232.094 1132.89,232.797 1133.46,233.549 1134.02,233.022 1134.59,232.811 1135.16,232.628 1135.73,233.326 1136.3,235.042 1136.87,235.642 1137.43,235.383 1138,232.895 1138.57,231.284 1139.14,231.156 1139.71,232.296 1140.28,233.19 1140.84,234.108 1141.41,233.916 1141.98,231.635 1142.55,229.421 1143.12,230.757 1143.69,229.547 1144.25,228.462 1144.82,229.384 1145.39,229.412 1145.96,228.295 1146.53,229.285 1147.1,230.169 1147.66,228.162 1148.23,225.197 1148.8,224.48 1149.37,223.739 1149.94,224.25 1150.51,224.586 1151.07,226.207 1151.64,226.453 1152.21,228.532 1152.78,230.789 1153.35,228.846 1153.92,228.887 1154.48,229.08 1155.05,228.177 1155.62,227.311 1156.19,228.613 1156.76,230.879 1157.33,229.851 1157.89,228.92 1158.46,231.115 1159.03,232.086 1159.6,232.864 1160.17,233.663 1160.74,233.406 1161.3,233.373 1161.87,233.221 1162.44,235.985 1163.01,236.6 1163.58,236.343 1164.15,233.855 1164.71,234.517 1165.28,234.119 1165.85,233.557 1166.42,232.214 1166.99,234.037 1167.56,234.675 1168.12,235.338 1168.69,233.922 1169.26,233.671 1169.83,231.142 1170.4,232.104 1170.97,228.929 1171.53,228.986 1172.1,229.98 1172.67,228.916 1173.24,226.84 1173.81,225.795 1174.38,223.963 1174.94,223.316 1175.51,227.74 1176.08,229.202 1176.65,231.259 1177.22,232.015 1177.79,233.029 1178.35,231.781 1178.92,231.767 1179.49,232.598 1180.06,233.202 1180.63,233.83 1181.2,232.505 1181.76,233.045 1182.33,232.756 1182.9,232.567 1183.47,231.173 1184.04,231.015 1184.61,232.862 1185.17,233.591 1185.74,233.199 1186.31,231.871 1186.88,231.784 1187.45,233.645 1188.02,231.375 1188.58,233.207 1189.15,230.826 1189.72,231.56 1190.29,229.176 1190.86,227.999 1191.43,228.428 1192,229.594 1192.56,230.379 1193.13,232.495 1193.7,233.296 1194.27,234.013 1194.84,234.641 1195.41,234.255 1195.97,233.679 1196.54,232.155 1197.11,231.857 1197.68,229.477 1198.25,228.31 1198.82,228.019 1199.38,227.971 1199.95,228.935 1200.52,228.933 1201.09,228.903 1201.66,227.619 1202.23,227.819 1202.79,227.945 1203.36,227.875 1203.93,227.749 1204.5,226.726 1205.07,226.65 1205.64,226.002 1206.2,226.308 1206.77,226.479 1207.34,226.657 1207.91,228.845 1208.48,229.766 1209.05,230.735 1209.61,229.683 1210.18,229.771 1210.75,229.813 1211.32,230.935 1211.89,230.796 1212.46,229.538 1213.02,229.285 1213.59,229.266 1214.16,227.284 1214.73,226.414 1215.3,226.572 1215.87,224.802 1216.43,225.347 1217,225.78 1217.57,225.234 1218.14,226.701 1218.71,225.851 1219.28,225.326 1219.84,224.728 1220.41,224.975 1220.98,225.189 1221.55,225.628 1222.12,223.887 1222.69,224.193 1223.25,224.662 1223.82,225.921 1224.39,230.241 1224.96,230.386 1225.53,231.544 1226.1,231.527 1226.66,231.627 1227.23,233.848 1227.8,234.378 1228.37,233.752 1228.94,232.335 1229.51,233.202 1230.07,231.806 1230.64,232.816 1231.21,232.669 1231.78,234.524 1232.35,235.286 1232.92,233.958 1233.48,233.436 1234.05,233.276 1234.62,233.824 1235.19,234.727 1235.76,232.993 1236.33,234.747 1236.89,233.408 1237.46,232.392 1238.03,231.946 1238.6,230.531 1239.17,230.659 1239.74,228.613 1240.3,227.67 1240.87,227.666 1241.44,225.754 1242.01,225.052 1242.58,225.532 1243.15,223.533 1243.71,223.936 1244.28,223.309 1244.85,223.796 1245.42,226.642 1245.99,226.899 1246.56,228.406 1247.12,228.686 1247.69,227.625 1248.26,228.729 1248.83,227.84 1249.4,228.096 1249.97,228.624 1250.53,228.85 1251.1,229.044 1251.67,230.131 1252.24,232.227 1252.81,229.892 1253.38,232.282 1253.94,229.034 1254.51,230.132 1255.08,231.296 1255.65,233.381 1256.22,234.138 1256.79,232.851 1257.35,230.6 1257.92,230.428 1258.49,231.175 1259.06,232.092 1259.63,232.995 1260.2,232.641 1260.76,231.573 1261.33,231.386 1261.9,228.185 1262.47,230.522 1263.04,229.482 1263.61,228.704 1264.18,229.778 1264.74,229.471 1265.31,228.593 1265.88,228.637 1266.45,227.477 1267.02,223.426 1267.59,223.826 1268.15,223.252 1268.72,225.91 1269.29,228.329 1269.86,229.632 1270.43,228.786 1271,228.971 1271.56,229.099 1272.13,229.333 1272.7,231.268 1273.27,229.262 1273.84,230.474 1274.41,231.663 1274.97,230.801 1275.54,231.602 1276.11,231.656 1276.68,231.773 1277.25,232.72 1277.82,232.792 1278.38,232.456 1278.95,231.243 1279.52,230.182 1280.09,229.928 1280.66,228.98 1281.23,225.978 1281.79,226.4 1282.36,225.842 1282.93,225.039 1283.5,225.493 1284.07,225.857 1284.64,225.251 1285.2,226.648 1285.77,224.675 1286.34,224.289 1286.91,225.005 1287.48,226.53 1288.05,226.7 1288.61,228.064 1289.18,228.357 1289.75,229.594 1290.32,229.746 1290.89,233.95 1291.46,236.58 1292.02,235.177 1292.59,235.017 1293.16,234.675 1293.73,235.556 1294.3,234.355 1294.87,233.968 1295.43,232.783 1296,233.667 1296.57,232.367 1297.14,233.252 1297.71,232.028 1298.28,234.852 1298.84,236.755 1299.41,236.333 1299.98,235.851 1300.55,234.419 1301.12,235.156 1301.69,234.863 1302.25,236.441 1302.82,236.742 1303.39,236.331 1303.96,235.767 1304.53,233.391 1305.1,232.129 1305.66,232.006 1306.23,232.94 1306.8,233.755 1307.37,232.648 1307.94,233.456 1308.51,232.099 1309.07,231.794 1309.64,231.719 1310.21,232.487 1310.78,232.28 1311.35,230.997 1311.92,228.675 1312.48,228.663 1313.05,227.753 1313.62,226.961 1314.19,228.211 1314.76,228.281 1315.33,228.548 1315.89,229.703 1316.46,229.728 1317.03,228.667 1317.6,227.638 1318.17,227.676 1318.74,226.803 1319.3,225.706 1319.87,224.831 1320.44,226.392 1321.01,226.402 1321.58,226.644 1322.15,224.858 1322.71,227.29 1323.28,229.708 1323.85,229.725 1324.42,231.603 1324.99,232.512 1325.56,232.51 1326.12,233.202 1326.69,234.042 1327.26,233.627 1327.83,233.316 1328.4,233.243 1328.97,231.253 1329.53,229.173 1330.1,228.255 1330.67,227.343 1331.24,226.595 1331.81,226.927 1332.38,228.135 1332.94,225.235 1333.51,226.52 1334.08,225.784 1334.65,227.109 1335.22,228.096 1335.79,227.047 1336.36,228.23 1336.92,228.182 1337.49,228.105 1338.06,227.061 1338.63,226.169 1339.2,226.57 1339.77,226.601 1340.33,226.95 1340.9,227.99 1341.47,227.296 1342.04,226.39 1342.61,227.693 1343.18,227.68 1343.74,227.797 1344.31,229.052 1344.88,228.989 1345.45,230.004 1346.02,230.096 1346.59,231.13 1347.15,231.021 1347.72,228.886 1348.29,228.83 1348.86,230.088 1349.43,229.073 1350,230.25 1350.56,227.058 1351.13,228.257 1351.7,227.485 1352.27,227.954 1352.84,226.945 1353.41,228.242 1353.97,229.544 1354.54,228.553 1355.11,230.516 1355.68,229.644 1356.25,227.897 1356.82,230.351 1357.38,230.565 1357.95,231.588 1358.52,232.704 1359.09,231.567 1359.66,231.614 1360.23,231.462 1360.79,233.693 1361.36,233.448 1361.93,233.147 1362.5,233.917 1363.07,233.71 1363.64,235.67 1364.2,233.205 1364.77,234.931 1365.34,231.604 1365.91,231.646 1366.48,231.529 1367.05,236.607 1367.61,237.436 1368.18,238.09 1368.75,237.729 1369.32,236.184 1369.89,238.777 1370.46,238.195 1371.02,236.492 1371.59,237.103 1372.16,237.61 1372.73,238.086 1373.3,238.765 1373.87,238.042 1374.43,237.293 1375,238.544 1375.57,238.863 1376.14,238.038 1376.71,236.321 1377.28,234.685 1377.84,233.181 1378.41,232.83 1378.98,231.319 1379.55,231.044 1380.12,230.661 1380.69,228.433 1381.25,226.278 1381.82,225.444 1382.39,225.339 1382.96,225.638 1383.53,226.532 1384.1,225.591 1384.66,225.682 1385.23,224.686 1385.8,224.094 1386.37,224.461 1386.94,225.706 1387.51,226.819 1388.07,227.905 1388.64,227.79 1389.21,230.03 1389.78,229.076 1390.35,228.194 1390.92,229.217 1391.48,229.337 1392.05,228 1392.62,226.879 1393.19,229.125 1393.76,227.929 1394.33,229.242 1394.89,229.253 1395.46,230.294 1396.03,229.336 1396.6,227.059 1397.17,227.293 1397.74,229.281 1398.3,229.157 1398.87,230.286 1399.44,230.182 1400.01,231.18 1400.58,231.058 1401.15,231.086 1401.71,231.03 1402.28,232.027 1402.85,232.9 1403.42,232.612 1403.99,230.185 1404.56,231.415 1405.13,230.225 1405.69,229.242 1406.26,229.246 1406.83,228.988 1407.4,228.066 1407.97,227.334 1408.54,225.594 1409.1,226.851 1409.67,229.093 1410.24,229.266 1410.81,230.292 1411.38,232.15 1411.95,230.955 1412.51,229.803 1413.08,229.952 1413.65,231.055 1414.22,229.98 1414.79,230.908 1415.36,229.67 1415.92,229.532 1416.49,230.489 1417.06,228.207 1417.63,230.132 1418.2,229.926 1418.77,228.867 1419.33,227.947 1419.9,228.872 1420.47,225.795 1421.04,227.084 1421.61,227.438 1422.18,229.795 1422.74,230.656 1423.31,230.66 1423.88,232.746 1424.45,232.771 1425.02,232.69 1425.59,231.759 1426.15,231.763 1426.72,231.884 1427.29,231.722 1427.86,231.616 1428.43,231.646 1429,232.482 1429.56,231.222 1430.13,229.143 1430.7,229.079 1431.27,229.385 1431.84,230.37 1432.41,230.424 1432.97,231.368 1433.54,230.341 1434.11,231.113 1434.68,231.872 1435.25,231.777 1435.82,230.81 1436.38,231.733 1436.95,231.277 1437.52,230.076 1438.09,230.908 1438.66,231.507 1439.23,229.288 1439.79,227.48 1440.36,226.4 1440.93,225.514 1441.5,224.073 1442.07,223.426 1442.64,222.779 1443.2,225.151 1443.77,225.404 1444.34,226.904 1444.91,228.202 1445.48,229.444 1446.05,229.403 1446.61,227.461 1447.18,229.889 1447.75,230.928 1448.32,231.799 1448.89,231.71 1449.46,231.77 1450.02,230.802 1450.59,230.719 1451.16,230.653 1451.73,229.682 1452.3,231.715 1452.87,230.329 1453.43,230.53 1454,230.414 1454.57,228.1 1455.14,229.17 1455.71,227.269 1456.28,228.4 1456.84,228.46 1457.41,230.57 1457.98,231.65 1458.55,229.644 1459.12,229.794 1459.69,227.756 1460.25,228.883 1460.82,227.856 1461.39,227.95 1461.96,230.308 1462.53,231.528 1463.1,232.335 1463.66,234.196 1464.23,233.866 1464.8,233.482 1465.37,232.255 1465.94,233.159 1466.51,231.862 1467.07,232.779 1467.64,234.523 1468.21,233.039 1468.78,232.844 1469.35,234.878 1469.92,234.484 1470.48,233.141 1471.05,232.737 1471.62,231.596 1472.19,231.522 1472.76,229.234 1473.33,229.125 1473.89,229.266 1474.46,226.341 1475.03,226.669 1475.6,226.699 1476.17,225.888 1476.74,225.048 1477.31,227.441 1477.87,227.746 1478.44,225.874 1479.01,226.131 1479.58,225.461 1480.15,226.837 1480.72,228.905 1481.28,228.793 1481.85,228.685 1482.42,230.087 1482.99,228.868 1483.56,229.161 1484.13,228.254 1484.69,230.489 1485.26,229.368 1485.83,230.294 1486.4,232.333 1486.97,232.183 1487.54,232.102 1488.1,230.789 1488.67,230.671 1489.24,228.588 1489.81,228.741 1490.38,226.989 1490.95,228.292 1491.51,228.556 1492.08,228.481 1492.65,227.746 1493.22,226.86 1493.79,226.966 1494.36,228.351 1494.92,228.577 1495.49,227.562 1496.06,227.626 1496.63,229.859 1497.2,230.827 1497.77,229.751 1498.33,229.715 1498.9,230.676 1499.47,228.514 1500.04,228.875 1500.61,229.116 1501.18,229.162 1501.74,229.454 1502.31,228.511 1502.88,229.854 1503.45,228.812 1504.02,228.033 1504.59,229.246 1505.15,229.398 1505.72,229.445 1506.29,228.825 1506.86,225.985 1507.43,228.359 1508,229.729 1508.56,229.973 1509.13,230.931 1509.7,226.728 1510.27,225.988 1510.84,226.449 1511.41,226.655 1511.97,226.691 1512.54,228.088 1513.11,226.294 1513.68,227.54 1514.25,228.709 1514.82,228.217 1515.38,228.383 1515.95,227.405 1516.52,230.676 1517.09,230.775 1517.66,230.854 1518.23,233.01 1518.79,232.733 1519.36,230.637 1519.93,229.629 1520.5,227.662 1521.07,227.915 1521.64,228.074 1522.2,230.126 1522.77,231.232 1523.34,229.119 1523.91,227.204 1524.48,228.489 1525.05,228.659 1525.61,229.807 1526.18,231.18 1526.75,229.185 1527.32,229.334 1527.89,229.574 1528.46,228.694 1529.02,225.978 1529.59,223.502 1530.16,224.159 1530.73,224.822 1531.3,224.172 1531.87,225.868 1532.43,226.261 1533,228.628 1533.57,230.97 1534.14,230.997 1534.71,230.142 1535.28,230.137 1535.84,230.057 1536.41,231.27 1536.98,229.267 1537.55,229.334 1538.12,231.496 1538.69,232.305 1539.25,229.056 1539.82,227.141 1540.39,228.562 1540.96,230.752 1541.53,231.782 1542.1,230.747 1542.66,231.904 1543.23,231.972 1543.8,233.835 1544.37,236.771 1544.94,236.458 1545.51,235.035 1546.08,233.909 1546.64,235.801 1547.21,235.357 1547.78,235.189 1548.35,234.904 1548.92,235.538 1549.49,234.135 1550.05,232.723 1550.62,233.739 1551.19,233.16 1551.76,232.976 1552.33,234.771 1552.9,236.612 1553.46,233.138 1554.03,230.836 1554.6,230.904 1555.17,230.629 1555.74,231.629 1556.31,229.316 1556.87,228.208 1557.44,226.194 1558.01,225.443 1558.58,227.009 1559.15,226.253 1559.72,228.566 1560.28,226.529 1560.85,227.019 1561.42,227.311 1561.99,225.366 1562.56,223.715 1563.13,225.151 1563.69,226.665 1564.26,225.763 1564.83,224.3 1565.4,224.62 1565.97,225.992 1566.54,227.389 1567.1,228.79 1567.67,232.01 1568.24,231.878 1568.81,230.958 1569.38,230.012 1569.95,230.332 1570.51,233.445 1571.08,234.967 1571.65,236.594 1572.22,238.351 1572.79,238.834 1573.36,239.241 1573.92,237.585 1574.49,237.033 1575.06,236.458 1575.63,234.923 1576.2,235.54 1576.77,238.307 1577.33,237.649 1577.9,235.063 1578.47,234.682 1579.04,234.213 1579.61,232.01 1580.18,233.032 1580.74,232.974 1581.31,231.67 1581.88,228.361 1582.45,227.255 1583.02,229.486 1583.59,230.727 1584.15,230.687 1584.72,232.564 1585.29,231.498 1585.86,230.466 1586.43,230.196 1587,227.954 1587.56,226.955 1588.13,227.058 1588.7,227.057 1589.27,226.124 1589.84,226.601 1590.41,228.752 1590.97,228.648 1591.54,230.769 1592.11,228.663 1592.68,227.805 1593.25,227.74 1593.82,224.945 1594.38,225.42 1594.95,224.607 1595.52,224.191 1596.09,223.628 1596.66,223.057 1597.23,225.568 1597.79,227.04 1598.36,225.388 1598.93,224.666 1599.5,225.052 1600.07,225.739 1600.64,227.255 1601.2,224.309 1601.77,224.794 1602.34,222.289 1602.91,222.771 1603.48,224.41 1604.05,224.823 1604.61,224.059 1605.18,226.625 1605.75,228.175 1606.32,231.33 1606.89,231.317 1607.46,228.131 1608.02,228.255 1608.59,229.551 1609.16,230.6 1609.73,230.572 1610.3,231.48 1610.87,232.358 1611.43,230.188 1612,228.25 1612.57,227.358 1613.14,224.582 1613.71,225.882 1614.28,227.475 1614.84,227.864 1615.41,225.235 1615.98,226.746 1616.55,226.209 1617.12,222.494 1617.69,226.178 1618.26,227.614 1618.82,228.212 1619.39,230.434 1619.96,230.455 1620.53,231.744 1621.1,230.92 1621.67,227.934 1622.23,228.529 1622.8,227.661 1623.37,228.824 1623.94,230.131 1624.51,231.359 1625.08,232.3 1625.64,231.025 1626.21,231.076 1626.78,231.119 1627.35,231.014 1627.92,233.029 1628.49,230.977 1629.05,227.987 1629.62,229.515 1630.19,230.592 1630.76,231.739 1631.33,232.769 1631.9,235.452 1632.46,234.187 1633.03,231.927 1633.6,230.844 1634.17,230.109 1634.74,231.331 1635.31,230.161 1635.87,230.132 1636.44,231.382 1637.01,231.491 1637.58,228.495 1638.15,231.033 1638.72,232.048 1639.28,233.139 1639.85,233.827 1640.42,233.317 1640.99,233.267 1641.56,233.941 1642.13,232.502 1642.69,231.571 1643.26,232.753 1643.83,234.939 1644.4,235.74 1644.97,235.544 1645.54,235.149 1646.1,234.655 1646.67,234.289 1647.24,233.966 1647.81,233.661 1648.38,234.479 1648.95,236.196 1649.51,236.846 1650.08,235.258 1650.65,231.746 1651.22,230.634 1651.79,230.412 1652.36,230.381 1652.92,229.301 1653.49,230.424 1654.06,231.395 1654.63,231.109 1655.2,232.278 1655.77,233.338 1656.33,234.276 1656.9,232.776 1657.47,232.644 1658.04,232.575 1658.61,228.341 1659.18,228.474 1659.74,229.459 1660.31,228.509 1660.88,225.763 1661.45,225.081 1662.02,226.374 1662.59,226.64 1663.15,225.775 1663.72,226.249 1664.29,226.583 1664.86,228.9 1665.43,231.889 1666,231.796 1666.56,230.747 1667.13,229.875 1667.7,233.043 1668.27,231.81 1668.84,232.779 1669.41,230.444 1669.97,228.374 1670.54,229.607 1671.11,229.764 1671.68,229.777 1672.25,229.74 1672.82,231.955 1673.38,232.678 1673.95,233.706 1674.52,232.321 1675.09,234.47 1675.66,232.972 1676.23,232.843 1676.79,232.83 1677.36,232.842 1677.93,233.723 1678.5,234.468 1679.07,233.862 1679.64,236.639 1680.2,237.296 1680.77,234.599 1681.34,232.448 1681.91,230.11 1682.48,230.125 1683.05,228.992 1683.61,231.309 1684.18,232.022 1684.75,231.981 1685.32,232.726 1685.89,231.424 1686.46,230.219 1687.02,229.954 1687.59,229.009 1688.16,227.058 1688.73,228.127 1689.3,228.323 1689.87,229.284 1690.44,229.362 1691,228.167 1691.57,230.252 1692.14,231.044 1692.71,228.805 1693.28,229.067 1693.85,228.105 1694.41,227.389 1694.98,226.548 1695.55,227.731 1696.12,227.853 1696.69,230.137 1697.26,230.163 1697.82,230.243 1698.39,231.256 1698.96,231.086 1699.53,231.113 1700.1,231.063 1700.67,231.088 1701.23,231.972 1701.8,235.021 1702.37,235.674 1702.94,234.124 1703.51,233.732 1704.08,232.443 1704.64,232.339 1705.21,229.909 1705.78,228.771 1706.35,229.877 1706.92,228.791 1707.49,229.819 1708.05,228.561 1708.62,230.565 1709.19,230.598 1709.76,231.646 1710.33,232.552 1710.9,231.264 1711.46,230.206 1712.03,230.27 1712.6,231.06 1713.17,233.003 1713.74,235.863 1714.31,235.497 1714.87,235.086 1715.44,235.761 1716.01,236.481 1716.58,236.057 1717.15,233.518 1717.72,233.507 1718.28,232.232 1718.85,230.951 1719.42,234.94 1719.99,234.718 1720.56,232.258 1721.13,230.849 1721.69,231.813 1722.26,229.584 1722.83,229.708 1723.4,226.555 1723.97,228.744 1724.54,228.762 1725.1,229.675 1725.67,229.72 1726.24,230.695 1726.81,230.335 1727.38,229.23 1727.95,229.306 1728.51,229.407 1729.08,230.472 1729.65,230.036 1730.22,228.861 1730.79,229.808 1731.36,226.675 1731.92,226.964 1732.49,228.06 1733.06,228.23 1733.63,228.317 1734.2,229.234 1734.77,232.324 1735.33,230.943 1735.9,229.673 1736.47,229.346 1737.04,229.349 1737.61,228.341 1738.18,228.424 1738.74,225.58 1739.31,225.696 1739.88,226.229 1740.45,225.396 1741.02,227.794 1741.59,224.869 1742.15,223.154 1742.72,223.735 1743.29,227.033 1743.86,226.108 1744.43,227.359 1745,226.431 1745.56,226.703 1746.13,225.975 1746.7,226.23 1747.27,223.404 1747.84,222.959 1748.41,220.316 1748.97,221.139 1749.54,221.81 1750.11,222.468 1750.68,223.988 1751.25,224.492 1751.82,225.816 1752.38,226.234 1752.95,224.315 1753.52,224.873 1754.09,226.257 1754.66,226.509 1755.23,225.955 1755.79,226.407 1756.36,227.736 1756.93,229.033 1757.5,229.224 1758.07,230.572 1758.64,232.693 1759.21,235.693 1759.77,237.433 1760.34,237.078 1760.91,236.659 1761.48,236.051 1762.05,236.485 1762.62,237.168 1763.18,236.766 1763.75,236.728 1764.32,234.304 1764.89,232.952 1765.46,231.931 1766.03,229.827 1766.59,229.891 1767.16,229.692 1767.73,232.006 1768.3,231.893 1768.87,233.849 1769.44,232.579 1770,232.476 1770.57,232.392 1771.14,231.179 1771.71,232.176 1772.28,230.946 1772.85,231.551 1773.41,232.48 1773.98,232.115 1774.55,232.959 1775.12,233.693 1775.69,235.429 1776.26,234.91 1776.82,232.306 1777.39,233.048 1777.96,230.632 1778.53,229.649 1779.1,230.632 1779.67,231.278 1780.23,232.08 1780.8,234.093 1781.37,234.885 1781.94,236.553 1782.51,236.042 1783.08,239.588 1783.64,241.01 1784.21,239.207 1784.78,239.507 1785.35,239.752 1785.92,238.806 1786.49,238.023 1787.05,235.004 1787.62,233.465 1788.19,232.974 1788.76,232.556 1789.33,232.317 1789.9,232.947 1790.46,233.488 1791.03,232.996 1791.6,232.579 1792.17,232.211 1792.74,230.838 1793.31,230.568 1793.87,229.355 1794.44,229.481 1795.01,231.476 1795.58,231.492 1796.15,231.342 1796.72,231.225 1797.28,229.91 1797.85,228.882 1798.42,225.631 1798.99,226.697 1799.56,226.784 1800.13,226.81 1800.69,229.918 1801.26,228.924 1801.83,228.6 1802.4,224.431 1802.97,224.743 1803.54,225.183 1804.1,225.606 1804.67,225.769 1805.24,225.034 1805.81,228.261 1806.38,227.24 1806.95,226.191 1807.51,226.611 1808.08,227.241 1808.65,229.458 1809.22,229.572 1809.79,229.587 1810.36,227.167 1810.92,226.331 1811.49,226.497 1812.06,226.632 1812.63,228.882 1813.2,228.805 1813.77,227.858 1814.33,227.746 1814.9,223.529 1815.47,221.847 1816.04,222.321 1816.61,221.85 1817.18,220.322 1817.74,220.913 1818.31,220.421 1818.88,219.895 1819.45,220.457 1820.02,224.011 1820.59,226.715 1821.15,226.168 1821.72,225.431 1822.29,225.834 1822.86,226.086 1823.43,225.257 1824,225.568 1824.56,225.958 1825.13,227.542 1825.7,226.765 1826.27,227.201 1826.84,227.485 1827.41,227.65 1827.97,228.805 1828.54,229.98 1829.11,230.058 1829.68,229.965 1830.25,229.974 1830.82,230.044 1831.39,229.027 1831.95,229.042 1832.52,227.307 1833.09,228.617 1833.66,228.775 1834.23,228.899 1834.8,229.032 1835.36,228.302 1835.93,228.334 1836.5,226.314 1837.07,227.783 1837.64,228.028 1838.21,229.245 1838.77,228.287 1839.34,230.672 1839.91,230.887 1840.48,229.99 1841.05,229.087 1841.62,231.475 1842.18,231.537 1842.75,231.674 1843.32,230.927 1843.89,232.105 1844.46,232.193 1845.03,232.275 1845.59,233.218 1846.16,233.156 1846.73,233.173 1847.3,232.183 1847.87,233.135 1848.44,234.042 1849,232.984 1849.57,234.142 1850.14,233.671 1850.71,233.531 1851.28,232.315 1851.85,232.377 1852.41,232.283 1852.98,231.084 1853.55,231.101 1854.12,228.139 1854.69,227.525 1855.26,225.639 1855.82,225.18 1856.39,224.578 1856.96,225.972 1857.53,228.359 1858.1,229.56 1858.67,230.574 1859.23,231.579 1859.8,231.364 1860.37,231.289 1860.94,230.083 1861.51,232.328 1862.08,233.232 1862.64,234.082 1863.21,233.931 1863.78,234.901 1864.35,233.362 1864.92,232.321 1865.49,231.879 1866.05,233.925 1866.62,231.936 1867.19,232.806 1867.76,232.751 1868.33,234.647 1868.9,233.378 1869.46,234.361 1870.03,235.164 1870.6,234.963 1871.17,234.746 1871.74,233.458 1872.31,232.298 1872.87,234.183 1873.44,231.769 1874.01,232.683 1874.58,232.409 1875.15,231.157 1875.72,229.059 1876.28,230.023 1876.85,230.045 1877.42,232.18 1877.99,233.98 1878.56,233.787 1879.13,231.594 1879.69,231.227 1880.26,231.209 1880.83,233.107 1881.4,232.886 1881.97,233.703 1882.54,232.582 1883.1,230.252 1883.67,228.132 1884.24,227.305 1884.81,227.406 1885.38,226.387 1885.95,223.535 1886.51,221.69 1887.08,223.069 1887.65,224.334 1888.22,224.835 1888.79,224.175 1889.36,223.524 1889.92,224.232 1890.49,224.585 1891.06,225.16 1891.63,227.377 1892.2,227.724 1892.77,227.017 1893.33,227.3 1893.9,228.733 1894.47,231.195 1895.04,230.234 1895.61,228.274 1896.18,228.419 1896.74,227.564 1897.31,225.681 1897.88,226.268 1898.45,226.559 1899.02,225.831 1899.59,226.333 1900.16,228.694 1900.72,226.808 1901.29,228.024 1901.86,228.254 1902.43,228.45 1903,227.678 1903.57,230.232 1904.13,231.254 1904.7,231.244 1905.27,232.528 1905.84,230.221 1906.41,230.397 1906.98,231.507 1907.54,231.675 1908.11,233.757 1908.68,234.77 1909.25,233.584 1909.82,233.45 1910.39,236.257 1910.95,234.926 1911.52,233.459 1912.09,234.501 1912.66,234.101 1913.23,234.004 1913.8,233.567 1914.36,235.268 1914.93,236.991 1915.5,236.499 1916.07,237.143 1916.64,239.694 1917.21,238.859 1917.77,239.164 1918.34,235.084 1918.91,235.639 1919.48,234.108 1920.05,233.745 1920.62,232.55 1921.18,232.545 1921.75,232.41 1922.32,232.124 1922.89,230.703 1923.46,230.536 1924.03,229.245 1924.59,227.353 1925.16,227.446 1925.73,228.47 1926.3,230.62 1926.87,231.589 1927.44,231.435 1928,233.228 1928.57,233.041 1929.14,233.984 1929.71,231.443 1930.28,231.417 1930.85,228.194 1931.41,230.438 1931.98,229.193 1932.55,229.119 1933.12,229.968 1933.69,231.064 1934.26,231.986 1934.82,234.83 1935.39,234.296 1935.96,230.882 1936.53,231.714 1937.1,231.415 1937.67,231.438 1938.23,233.533 1938.8,233.053 1939.37,230.72 1939.94,229.763 1940.51,229.721 1941.08,230.725 1941.64,229.642 1942.21,230.375 1942.78,227.279 1943.35,225.499 1943.92,229.049 1944.49,229.889 1945.05,229.837 1945.62,230.915 1946.19,229.86 1946.76,228.668 1947.33,227.958 1947.9,228.07 1948.46,228.066 1949.03,230.147 1949.6,231.064 1950.17,233.956 1950.74,232.485 1951.31,232.297 1951.87,232.994 1952.44,231.695 1953.01,231.407 1953.58,230.494 1954.15,229.263 1954.72,228.374 1955.28,230.46 1955.85,230.385 1956.42,231.14 1956.99,231.745 1957.56,231.553 1958.13,230.203 1958.69,229.082 1959.26,229.97 1959.83,229.956 1960.4,230.921 1960.97,229.702 1961.54,228.585 1962.1,227.658 1962.67,227.691 1963.24,227.953 1963.81,228.163 1964.38,228.034 1964.95,226.072 1965.51,225.22 1966.08,226.459 1966.65,226.604 1967.22,227.951 1967.79,228.968 1968.36,229.876 1968.92,227.861 1969.49,227.999 1970.06,228.286 1970.63,227.425 1971.2,228.784 1971.77,230.951 1972.34,228.797 1972.9,227.955 1973.47,229.125 1974.04,229.056 1974.61,228.334 1975.18,230.456 1975.75,230.431 1976.31,229.249 1976.88,230.36 1977.45,228.152 1978.02,228.171 1978.59,227.251 1979.16,227.532 1979.72,227.691 1980.29,229.012 1980.86,228.079 1981.43,229.172 1982,228.131 1982.57,229.258 1983.13,229.246 1983.7,230.311 1984.27,231.402 1984.84,230.379 1985.41,228.486 1985.98,230.505 1986.54,228.421 1987.11,229.659 1987.68,230.81 1988.25,228.78 1988.82,228.722 1989.39,226.668 1989.95,230 1990.52,231.013 1991.09,232.691 1991.66,233.502 1992.23,232.292 1992.8,233.11 1993.36,232.821 1993.93,233.666 1994.5,234.434 1995.07,233.077 1995.64,231.818 1996.21,231.685 1996.77,230.494 1997.34,230.435 1997.91,227.996 1998.48,226.217 1999.05,227.581 1999.62,227.701 2000.18,227.927 2000.75,230.231 2001.32,231.365 2001.89,231.141 2002.46,232.035 2003.03,232.908 2003.59,231.957 2004.16,231.448 2004.73,230.114 2005.3,233.139 2005.87,231.509 2006.44,232.422 2007,231.152 2007.57,231.941 2008.14,231.76 2008.71,229.705 2009.28,229.694 2009.85,229.557 2010.41,230.623 2010.98,230.78 2011.55,230.803 2012.12,230.454 2012.69,230.445 2013.26,228.169 2013.82,229.299 2014.39,229.438 2014.96,228.628 2015.53,227.98 2016.1,228.138 2016.67,227.185 2017.23,227.241 2017.8,226.385 2018.37,226.586 2018.94,223.653 2019.51,227.176 2020.08,231.405 2020.64,232.273 2021.21,233.331 2021.78,233.11 2022.35,231.766 2022.92,228.512 2023.49,227.589 2024.05,226.899 2024.62,227.233 2025.19,227.44 2025.76,226.694 2026.33,229.27 2026.9,230.261 2027.46,229.108 2028.03,228.343 2028.6,227.463 2029.17,229.647 2029.74,231.567 2030.31,232.363 2030.87,229.124 2031.44,230.265 2032.01,231.166 2032.58,233.018 2033.15,232.703 2033.72,234.436 2034.28,234.217 2034.85,232.774 2035.42,232.756 2035.99,234.595 2036.56,234.198 2037.13,233.87 2037.69,232.7 2038.26,231.483 2038.83,232.19 2039.4,230.869 2039.97,228.76 2040.54,227.709 2041.11,226.834 2041.67,228.792 2042.24,227.901 2042.81,227.928 2043.38,227.214 2043.95,226.463 2044.52,225.8 2045.08,224.874 2045.65,225.225 2046.22,222.652 2046.79,224.52 2047.36,223.832 2047.93,222.137 2048.49,222.757 2049.06,223.159 2049.63,225.672 2050.2,226.08 2050.77,229.444 2051.34,227.713 2051.9,229.098 2052.47,230.398 2053.04,230.588 2053.61,230.736 2054.18,230.689 2054.75,230.972 2055.31,229.879 2055.88,230.927 2056.45,229.956 2057.02,229.055 2057.59,230.411 2058.16,229.196 2058.72,230.279 2059.29,227.575 2059.86,226.935 2060.43,226.162 2061,228.532 2061.57,229.516 2062.13,228.603 2062.7,227.573 2063.27,228.746 2063.84,227.908 2064.41,228.157 2064.98,229.287 2065.54,229.426 2066.11,230.562 2066.68,229.503 2067.25,231.754 2067.82,232.55 2068.39,233.277 2068.95,232.954 2069.52,231.925 2070.09,231.718 2070.66,229.463 2071.23,228.541 2071.8,227.826 2072.36,225.902 2072.93,225.402 2073.5,224.516 2074.07,225.196 2074.64,223.666 2075.21,225.239 2075.77,224.676 2076.34,226.117 2076.91,223.364 2077.48,227.014 2078.05,228.452 2078.62,227.823 2079.18,229.188 2079.75,230.449 2080.32,229.363 2080.89,229.562 2081.46,232.945 2082.03,233.866 2082.59,233.836 2083.16,232.831 2083.73,233.747 2084.3,234.675 2084.87,233.592 2085.44,233.289 2086,233.298 2086.57,234.138 2087.14,235.094 2087.71,231.73 2088.28,232.703 2088.85,231.652 2089.41,230.403 2089.98,231.568 2090.55,231.806 2091.12,230.856 2091.69,231.82 2092.26,233.697 2092.82,233.578 2093.39,233.318 2093.96,235.178 2094.53,234.79 2095.1,235.397 2095.67,234.021 2096.23,233.879 2096.8,233.88 2097.37,233.902 2097.94,234.707 2098.51,235.424 2099.08,235.168 2099.64,235.952 2100.21,235.363 2100.78,235.037 2101.35,232.568 2101.92,231.563 2102.49,232.606 2103.05,232.419 2103.62,232.516 2104.19,233.391 2104.76,233.998 2105.33,234.652 2105.9,234.486 2106.46,235.222 2107.03,235.849 2107.6,234.326 2108.17,234.086 2108.74,233.883 2109.31,233.551 2109.87,233.275 2110.44,232.93 2111.01,231.549 2111.58,231.46 2112.15,231.944 2112.72,230.655 2113.29,230.373 2113.85,230.282 2114.42,229.226 2114.99,229.034 2115.56,229.085 2116.13,227.803 2116.7,228.869 2117.26,228.837 2117.83,229.065 2118.4,228.845 2118.97,231.798 2119.54,228.566 2120.11,227.396 2120.67,228.692 2121.24,228.654 2121.81,229.634 2122.38,230.671 2122.95,230.522 2123.52,231.318 2124.08,231.17 2124.65,229.733 2125.22,229.95 2125.79,228.76 2126.36,228.747 2126.93,228.785 2127.49,227.763 2128.06,227.915 2128.63,230.153 2129.2,228.086 2129.77,228.079 2130.34,228.078 2130.9,226.887 2131.47,223.981 2132.04,225.406 2132.61,225.675 2133.18,227.077 2133.75,225.973 2134.31,228.203 2134.88,227.324 2135.45,226.52 2136.02,226.52 2136.59,228.07 2137.16,229.301 2137.72,229.665 2138.29,230.828 2138.86,231.018 2139.43,230.708 2140,231.775 2140.57,229.651 2141.13,230.801 2141.7,229.607 2142.27,231.548 2142.84,233.35 2143.41,233.061 2143.98,231.7 2144.54,229.637 2145.11,228.602 2145.68,228.871 2146.25,229.784 2146.82,230.014 2147.39,229.102 2147.95,229.944 2148.52,229.846 2149.09,229.648 2149.66,228.633 2150.23,229.759 2150.8,230.712 2151.36,229.625 2151.93,229.551 2152.5,228.588 2153.07,226.683 2153.64,226.959 2154.21,225.905 2154.77,225.149 2155.34,223.553 2155.91,223.015 2156.48,225.399 2157.05,227.779 2157.62,227.075 2158.18,226.459 2158.75,226.865 2159.32,228.059 2159.89,227.296 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip880)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.019\n  with uncertainty of ± 0.0012368967594154838\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01585 ± (0.00404527, 0.00380886) (MC)\n  95% confidence interval: [-4.02341, -4.00791]) (MC)\n  linear error propagation: -4.01576 ± 0.0039513\n  |δ_y| = |0.00238467| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015849461033268, val_l = 0.007559825748883142, val_u = 0.007934686930513912)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip910\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip911\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip912\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.9 2211.02,1150.9 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,993.37 2211.02,993.37 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,835.837 2211.02,835.837 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,678.304 2211.02,678.304 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,520.771 2211.02,520.771 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,363.238 2211.02,363.238 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,205.705 2211.02,205.705 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.9 365.751,1150.9 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,993.37 365.751,993.37 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,835.837 365.751,835.837 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,678.304 365.751,678.304 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,520.771 365.751,520.771 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,363.238 365.751,363.238 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,205.705 365.751,205.705 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M298.909 1136.7 Q295.298 1136.7 293.469 1140.27 Q291.664 1143.81 291.664 1150.94 Q291.664 1158.04 293.469 1161.61 Q295.298 1165.15 298.909 1165.15 Q302.543 1165.15 304.349 1161.61 Q306.177 1158.04 306.177 1150.94 Q306.177 1143.81 304.349 1140.27 Q302.543 1136.7 298.909 1136.7 M298.909 1133 Q304.719 1133 307.775 1137.6 Q310.853 1142.19 310.853 1150.94 Q310.853 1159.66 307.775 1164.27 Q304.719 1168.85 298.909 1168.85 Q293.099 1168.85 290.02 1164.27 Q286.964 1159.66 286.964 1150.94 Q286.964 1142.19 290.02 1137.6 Q293.099 1133 298.909 1133 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M259.557 1006.71 L267.196 1006.71 L267.196 980.349 L258.886 982.015 L258.886 977.756 L267.15 976.09 L271.826 976.09 L271.826 1006.71 L279.465 1006.71 L279.465 1010.65 L259.557 1010.65 L259.557 1006.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M298.909 979.168 Q295.298 979.168 293.469 982.733 Q291.664 986.275 291.664 993.404 Q291.664 1000.51 293.469 1004.08 Q295.298 1007.62 298.909 1007.62 Q302.543 1007.62 304.349 1004.08 Q306.177 1000.51 306.177 993.404 Q306.177 986.275 304.349 982.733 Q302.543 979.168 298.909 979.168 M298.909 975.465 Q304.719 975.465 307.775 980.071 Q310.853 984.654 310.853 993.404 Q310.853 1002.13 307.775 1006.74 Q304.719 1011.32 298.909 1011.32 Q293.099 1011.32 290.02 1006.74 Q286.964 1002.13 286.964 993.404 Q286.964 984.654 290.02 980.071 Q293.099 975.465 298.909 975.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M262.775 849.181 L279.094 849.181 L279.094 853.117 L257.15 853.117 L257.15 849.181 Q259.812 846.427 264.395 841.797 Q269.002 837.145 270.182 835.802 Q272.428 833.279 273.307 831.543 Q274.21 829.783 274.21 828.094 Q274.21 825.339 272.266 823.603 Q270.344 821.867 267.242 821.867 Q265.043 821.867 262.59 822.631 Q260.159 823.395 257.381 824.945 L257.381 820.223 Q260.205 819.089 262.659 818.51 Q265.113 817.932 267.15 817.932 Q272.52 817.932 275.715 820.617 Q278.909 823.302 278.909 827.793 Q278.909 829.922 278.099 831.844 Q277.312 833.742 275.205 836.334 Q274.627 837.006 271.525 840.223 Q268.423 843.418 262.775 849.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M298.909 821.635 Q295.298 821.635 293.469 825.2 Q291.664 828.742 291.664 835.871 Q291.664 842.978 293.469 846.543 Q295.298 850.084 298.909 850.084 Q302.543 850.084 304.349 846.543 Q306.177 842.978 306.177 835.871 Q306.177 828.742 304.349 825.2 Q302.543 821.635 298.909 821.635 M298.909 817.932 Q304.719 817.932 307.775 822.538 Q310.853 827.121 310.853 835.871 Q310.853 844.598 307.775 849.205 Q304.719 853.788 298.909 853.788 Q293.099 853.788 290.02 849.205 Q286.964 844.598 286.964 835.871 Q286.964 827.121 290.02 822.538 Q293.099 817.932 298.909 817.932 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M272.914 676.95 Q276.27 677.667 278.145 679.936 Q280.043 682.204 280.043 685.538 Q280.043 690.653 276.525 693.454 Q273.006 696.255 266.525 696.255 Q264.349 696.255 262.034 695.815 Q259.742 695.399 257.289 694.542 L257.289 690.028 Q259.233 691.162 261.548 691.741 Q263.863 692.32 266.386 692.32 Q270.784 692.32 273.076 690.584 Q275.39 688.848 275.39 685.538 Q275.39 682.482 273.238 680.769 Q271.108 679.033 267.289 679.033 L263.261 679.033 L263.261 675.19 L267.474 675.19 Q270.923 675.19 272.752 673.825 Q274.58 672.436 274.58 669.843 Q274.58 667.181 272.682 665.769 Q270.807 664.334 267.289 664.334 Q265.367 664.334 263.168 664.751 Q260.969 665.167 258.33 666.047 L258.33 661.88 Q260.992 661.14 263.307 660.769 Q265.645 660.399 267.705 660.399 Q273.029 660.399 276.131 662.829 Q279.233 665.237 279.233 669.357 Q279.233 672.227 277.59 674.218 Q275.946 676.186 272.914 676.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M298.909 664.102 Q295.298 664.102 293.469 667.667 Q291.664 671.209 291.664 678.338 Q291.664 685.445 293.469 689.01 Q295.298 692.551 298.909 692.551 Q302.543 692.551 304.349 689.01 Q306.177 685.445 306.177 678.338 Q306.177 671.209 304.349 667.667 Q302.543 664.102 298.909 664.102 M298.909 660.399 Q304.719 660.399 307.775 665.005 Q310.853 669.589 310.853 678.338 Q310.853 687.065 307.775 691.672 Q304.719 696.255 298.909 696.255 Q293.099 696.255 290.02 691.672 Q286.964 687.065 286.964 678.338 Q286.964 669.589 290.02 665.005 Q293.099 660.399 298.909 660.399 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M271.594 507.565 L259.789 526.014 L271.594 526.014 L271.594 507.565 M270.367 503.491 L276.247 503.491 L276.247 526.014 L281.177 526.014 L281.177 529.903 L276.247 529.903 L276.247 538.051 L271.594 538.051 L271.594 529.903 L255.992 529.903 L255.992 525.389 L270.367 503.491 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M298.909 506.57 Q295.298 506.57 293.469 510.134 Q291.664 513.676 291.664 520.806 Q291.664 527.912 293.469 531.477 Q295.298 535.018 298.909 535.018 Q302.543 535.018 304.349 531.477 Q306.177 527.912 306.177 520.806 Q306.177 513.676 304.349 510.134 Q302.543 506.57 298.909 506.57 M298.909 502.866 Q304.719 502.866 307.775 507.472 Q310.853 512.056 310.853 520.806 Q310.853 529.532 307.775 534.139 Q304.719 538.722 298.909 538.722 Q293.099 538.722 290.02 534.139 Q286.964 529.532 286.964 520.806 Q286.964 512.056 290.02 507.472 Q293.099 502.866 298.909 502.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M258.793 345.958 L277.15 345.958 L277.15 349.893 L263.076 349.893 L263.076 358.365 Q264.094 358.018 265.113 357.856 Q266.131 357.671 267.15 357.671 Q272.937 357.671 276.316 360.842 Q279.696 364.013 279.696 369.43 Q279.696 375.009 276.224 378.111 Q272.752 381.189 266.432 381.189 Q264.256 381.189 261.988 380.819 Q259.742 380.449 257.335 379.708 L257.335 375.009 Q259.418 376.143 261.641 376.699 Q263.863 377.254 266.34 377.254 Q270.344 377.254 272.682 375.148 Q275.02 373.041 275.02 369.43 Q275.02 365.819 272.682 363.713 Q270.344 361.606 266.34 361.606 Q264.465 361.606 262.59 362.023 Q260.738 362.439 258.793 363.319 L258.793 345.958 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M298.909 349.037 Q295.298 349.037 293.469 352.601 Q291.664 356.143 291.664 363.273 Q291.664 370.379 293.469 373.944 Q295.298 377.486 298.909 377.486 Q302.543 377.486 304.349 373.944 Q306.177 370.379 306.177 363.273 Q306.177 356.143 304.349 352.601 Q302.543 349.037 298.909 349.037 M298.909 345.333 Q304.719 345.333 307.775 349.939 Q310.853 354.523 310.853 363.273 Q310.853 372 307.775 376.606 Q304.719 381.189 298.909 381.189 Q293.099 381.189 290.02 376.606 Q286.964 372 286.964 363.273 Q286.964 354.523 290.02 349.939 Q293.099 345.333 298.909 345.333 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M269.326 203.842 Q266.178 203.842 264.326 205.994 Q262.497 208.147 262.497 211.897 Q262.497 215.624 264.326 217.8 Q266.178 219.953 269.326 219.953 Q272.474 219.953 274.303 217.8 Q276.154 215.624 276.154 211.897 Q276.154 208.147 274.303 205.994 Q272.474 203.842 269.326 203.842 M278.608 189.189 L278.608 193.448 Q276.849 192.615 275.043 192.175 Q273.261 191.735 271.502 191.735 Q266.872 191.735 264.418 194.86 Q261.988 197.985 261.641 204.305 Q263.006 202.291 265.066 201.226 Q267.127 200.138 269.603 200.138 Q274.812 200.138 277.821 203.309 Q280.853 206.457 280.853 211.897 Q280.853 217.221 277.705 220.439 Q274.557 223.656 269.326 223.656 Q263.33 223.656 260.159 219.073 Q256.988 214.467 256.988 205.74 Q256.988 197.545 260.877 192.684 Q264.766 187.8 271.316 187.8 Q273.076 187.8 274.858 188.147 Q276.664 188.495 278.608 189.189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M298.909 191.504 Q295.298 191.504 293.469 195.069 Q291.664 198.61 291.664 205.74 Q291.664 212.846 293.469 216.411 Q295.298 219.953 298.909 219.953 Q302.543 219.953 304.349 216.411 Q306.177 212.846 306.177 205.74 Q306.177 198.61 304.349 195.069 Q302.543 191.504 298.909 191.504 M298.909 187.8 Q304.719 187.8 307.775 192.407 Q310.853 196.99 310.853 205.74 Q310.853 214.467 307.775 219.073 Q304.719 223.656 298.909 223.656 Q293.099 223.656 290.02 219.073 Q286.964 214.467 286.964 205.74 Q286.964 196.99 290.02 192.407 Q293.099 187.8 298.909 187.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1034.83 400.199,928.19 400.786,830.347 401.372,858.462 401.958,770.678 402.545,688.44 403.131,614.886 403.718,547.886 404.304,488.98 404.891,433.788 405.477,383.958 406.063,421.361 406.65,377.423 407.236,338.068 407.823,302.997 408.409,273.034 408.995,245.651 409.582,278.59 410.168,255.711 410.755,236.715 411.341,219.895 411.927,249.155 412.514,273.974 413.1,260.421 413.687,249.092 414.273,241.21 414.86,234.57 415.446,257.284 416.032,280.376 416.619,277.195 417.205,275.442 417.792,275.02 418.378,317.28 418.964,337.944 419.551,394.3 420.137,396.585 420.724,415.903 421.31,433.673 421.896,451.084 422.483,455.766 423.069,462.006 423.656,481.005 424.242,498.271 424.829,515.809 425.415,522.876 426.001,530.359 426.588,546.852 427.174,554.982 427.761,572.951 428.347,580.777 428.933,611.252 429.52,634.379 430.106,642.122 430.693,650.701 431.279,664.849 431.865,685.183 432.452,698.473 433.038,706.803 433.625,731.106 434.211,737.962 434.798,745.628 435.384,758.002 435.97,774.588 436.557,790.379 437.143,797.444 437.73,808.721 438.316,824.262 438.902,835.31 439.489,845.859 440.075,855.874 440.662,869.65 441.248,892.745 441.835,901.399 442.421,906.361 443.007,918.427 443.594,930.128 444.18,945.029 444.767,952.696 445.353,965.643 445.939,969.721 446.526,981.767 447.112,985.954 447.699,995.382 448.285,1003.86 448.871,1010 449.458,1013.15 450.044,1016.72 450.631,1020.61 451.217,1031.54 451.804,1039.67 452.39,1042.99 452.976,1050.6 453.563,1062.56 454.149,1067.75 454.736,1072.82 455.322,1077.48 455.908,1080.24 456.495,1093 457.081,1101.38 457.668,1107.6 458.254,1111.86 458.84,1117.81 459.427,1119.6 460.013,1123.36 460.6,1128.69 461.186,1130.3 461.773,1131.75 462.359,1140.94 462.945,1146.12 463.532,1150.98 464.118,1155.5 464.705,1154.55 465.291,1157.65 465.877,1165.68 466.464,1170.07 467.05,1174.28 467.637,1178.21 468.223,1180.26 468.809,1182.43 469.396,1186.27 469.982,1186.43 470.569,1187.05 471.155,1189.25 471.742,1193.12 472.328,1195.11 472.914,1197.14 473.501,1202.08 474.087,1203.53 474.674,1205.07 475.26,1206.78 475.846,1205.1 476.433,1206.61 477.019,1206.64 477.606,1208.59 478.192,1210.15 478.778,1211.95 479.365,1210.32 479.951,1210.43 480.538,1210.77 481.124,1209.84 481.711,1210.34 482.297,1212.36 482.883,1214.17 483.47,1218.59 484.056,1221.45 484.643,1223.09 485.229,1225.79 485.815,1222.41 486.402,1225.36 486.988,1225.23 487.575,1224.86 488.161,1227.81 488.748,1229.17 489.334,1233.19 489.92,1232.68 490.507,1232.43 491.093,1232.22 491.68,1233.23 492.266,1234.37 492.852,1234.15 493.439,1233.8 494.025,1237.49 494.612,1240.04 495.198,1236.67 495.784,1236.34 496.371,1240.04 496.957,1239.23 497.544,1237.39 498.13,1237.11 498.717,1238.18 499.303,1239.06 499.889,1238.67 500.476,1238.11 501.062,1237.57 501.649,1237.16 502.235,1238.16 502.821,1241.97 503.408,1242.67 503.994,1244.9 504.581,1242.77 505.167,1243.64 505.753,1243.09 506.34,1241.37 506.926,1242.7 507.513,1243.43 508.099,1244.26 508.686,1243.49 509.272,1244.27 509.858,1242.6 510.445,1241.05 511.031,1242.04 511.618,1241.59 512.204,1243.93 512.79,1243.49 513.377,1241.63 513.963,1243.75 514.55,1242.97 515.136,1243.83 515.722,1246.01 516.309,1249.48 516.895,1249.69 517.482,1249.01 518.068,1248.13 518.655,1245.7 519.241,1249.15 519.827,1248.47 520.414,1248.21 521,1250.17 521.587,1250.53 522.173,1249.58 522.759,1250.01 523.346,1248.93 523.932,1246.84 524.519,1246.44 525.105,1246.98 525.691,1245.27 526.278,1247.32 526.864,1247.9 527.451,1244.67 528.037,1244.09 528.624,1244.87 529.21,1245.74 529.796,1243.83 530.383,1244.59 530.969,1242.93 531.556,1241.26 532.142,1246.09 532.728,1248.12 533.315,1248.82 533.901,1246.98 534.488,1247.27 535.074,1245.27 535.661,1244.6 536.247,1242.55 536.833,1243.28 537.42,1239.01 538.006,1241.27 538.593,1242.14 539.179,1241.75 539.765,1241.48 540.352,1241.38 540.938,1242.15 541.525,1238.92 542.111,1237.42 542.697,1237.1 543.284,1235.82 543.87,1237.04 544.457,1236.64 545.043,1240.19 545.63,1238.46 546.216,1239.58 546.802,1239.13 547.389,1238.96 547.975,1238.3 548.562,1235.46 549.148,1236.78 549.734,1236.66 550.321,1236.44 550.907,1237.4 551.494,1242.03 552.08,1241.6 552.666,1242.56 553.253,1243.21 553.839,1243.91 554.426,1244.41 555.012,1243.55 555.599,1242.91 556.185,1247.43 556.771,1244.02 557.358,1242.3 557.944,1241.68 558.531,1241.01 559.117,1241.77 559.703,1241.27 560.29,1241.93 560.876,1241.44 561.463,1239.52 562.049,1237.63 562.635,1238.57 563.222,1238.31 563.808,1241.85 564.395,1241.22 564.981,1239.39 565.568,1238.78 566.154,1236.99 566.74,1236.63 567.327,1236.26 567.913,1237.38 568.5,1233.3 569.086,1232.99 569.672,1236.6 570.259,1236.49 570.845,1234.93 571.432,1232.12 572.018,1232.98 572.605,1232.79 573.191,1233.65 573.777,1233.46 574.364,1234.37 574.95,1235.08 575.537,1234.92 576.123,1234.64 576.709,1236.69 577.296,1237.49 577.882,1237.11 578.469,1239.17 579.055,1238.1 579.641,1241.53 580.228,1238.19 580.814,1240.16 581.401,1238.11 581.987,1238.69 582.574,1239.37 583.16,1234.5 583.746,1237.89 584.333,1236.06 584.919,1237.01 585.506,1235.04 586.092,1237.31 586.678,1237.13 587.265,1233.87 587.851,1233.58 588.438,1229.48 589.024,1226.96 589.61,1226.99 590.197,1228.44 590.783,1232.55 591.37,1232.4 591.956,1232.13 592.543,1231.9 593.129,1227.72 593.715,1229.19 594.302,1232.74 594.888,1236.45 595.475,1235.94 596.061,1235.41 596.647,1236.19 597.234,1230.3 597.82,1233.85 598.407,1233.47 598.993,1232.91 599.579,1237.3 600.166,1234.23 600.752,1233.54 601.339,1233.15 601.925,1230.38 602.512,1229.85 603.098,1230.98 603.684,1232.12 604.271,1230.38 604.857,1230.28 605.444,1230.14 606.03,1225.84 606.616,1223.06 607.203,1223.03 607.789,1225.45 608.376,1225.65 608.962,1225.6 609.548,1224.38 610.135,1225.61 610.721,1229.52 611.308,1226.51 611.894,1227.73 612.481,1226.07 613.067,1227.42 613.653,1227.33 614.24,1225.81 614.826,1225.71 615.413,1225.83 615.999,1224.64 616.585,1223.39 617.172,1223.14 617.758,1221.7 618.345,1224.3 618.931,1226.86 619.518,1226.64 620.104,1226.48 620.69,1225.15 621.277,1222.8 621.863,1222.99 622.45,1223.09 623.036,1223.24 623.622,1222.25 624.209,1221.19 624.795,1222.66 625.382,1225.39 625.968,1225.26 626.554,1225.26 627.141,1227.83 627.727,1227.57 628.314,1227.27 628.9,1225.59 629.487,1226.69 630.073,1225.08 630.659,1224.9 631.246,1224.97 631.832,1224.7 632.419,1222.12 633.005,1220.65 633.591,1220.76 634.178,1220.69 634.764,1219.52 635.351,1218.14 635.937,1218.43 636.523,1220.23 637.11,1219.15 637.696,1220.56 638.283,1220.8 638.869,1222.45 639.456,1223.79 640.042,1224.81 640.628,1223.2 641.215,1225.73 641.801,1225.47 642.388,1225.22 642.974,1226.32 643.56,1227.6 644.147,1227.56 644.733,1230.03 645.32,1229.83 645.906,1229.55 646.492,1229.25 647.079,1227.5 647.665,1227.41 648.252,1225.96 648.838,1229.65 649.425,1229.47 650.011,1229 650.597,1233.7 651.184,1236.73 651.77,1237.49 652.357,1238.1 652.943,1237.12 653.529,1232.59 654.116,1233.12 654.702,1232.66 655.289,1229.49 655.875,1227.57 656.462,1226.08 657.048,1224.33 657.634,1222.78 658.221,1222.77 658.807,1221.29 659.394,1221.44 659.98,1221.36 660.566,1222.76 661.153,1221.03 661.739,1219.88 662.326,1222.4 662.912,1221.27 663.498,1219.98 664.085,1221.29 664.671,1222.52 665.258,1225 665.844,1224.84 666.431,1224.8 667.017,1223.27 667.603,1225.6 668.19,1229.27 668.776,1228.6 669.363,1228.37 669.949,1230.46 670.535,1232.47 671.122,1230.76 671.708,1229.97 672.295,1229.58 672.881,1232.83 673.467,1229.94 674.054,1232 674.64,1231.49 675.227,1228.42 675.813,1226.71 676.4,1226.67 676.986,1226.44 677.572,1227.67 678.159,1228.56 678.745,1228.06 679.332,1226.6 679.918,1223.63 680.504,1220.72 681.091,1220.76 681.677,1220.79 682.264,1222.02 682.85,1222.13 683.436,1224.73 684.023,1227.17 684.609,1225.35 685.196,1224.97 685.782,1225.85 686.369,1225.55 686.955,1223.89 687.541,1223.67 688.128,1226.14 688.714,1227.07 689.301,1225.38 689.887,1225.17 690.473,1226.06 691.06,1226.09 691.646,1224.27 692.233,1223.18 692.819,1225.83 693.405,1226.53 693.992,1227.32 694.578,1224.45 695.165,1224.15 695.751,1224.01 696.338,1225.19 696.924,1223.45 697.51,1224.53 698.097,1225.52 698.683,1226.63 699.27,1226.12 699.856,1221.87 700.442,1219.25 701.029,1219.51 701.615,1220.7 702.202,1220.51 702.788,1220.53 703.375,1221.59 703.961,1223.83 704.547,1224.96 705.134,1223.36 705.72,1224.39 706.307,1225.46 706.893,1225.19 707.479,1219.54 708.066,1220.95 708.652,1225.09 709.239,1226.21 709.825,1227.04 710.411,1228.03 710.998,1230.08 711.584,1228.18 712.171,1227.77 712.757,1228.28 713.344,1231.6 713.93,1229.55 714.516,1228.88 715.103,1228.43 715.689,1226.65 716.276,1223.91 716.862,1222.25 717.448,1222.05 718.035,1222.94 718.621,1220.07 719.208,1218.61 719.794,1220.32 720.38,1219.01 720.967,1216.61 721.553,1213.92 722.14,1215.87 722.726,1214.7 723.313,1217.65 723.899,1218.9 724.485,1217.52 725.072,1218.8 725.658,1217.5 726.245,1217.59 726.831,1217.8 727.417,1217.97 728.004,1218.17 728.59,1217.96 729.177,1219.17 729.763,1219.29 730.349,1220.44 730.936,1217.58 731.522,1216.49 732.109,1217.66 732.695,1216.44 733.282,1216.76 733.868,1215.69 734.454,1213.11 735.041,1214.72 735.627,1213.76 736.214,1212.69 736.8,1214.35 737.386,1211.77 737.973,1211.91 738.559,1213.51 739.146,1215.22 739.732,1210.23 740.318,1210.96 740.905,1210.13 741.491,1211.67 742.078,1211.97 742.664,1212.29 743.251,1211.44 743.837,1210.38 744.423,1212.18 745.01,1215.17 745.596,1215.12 746.183,1214.04 746.769,1215.99 747.355,1216.26 747.942,1216.54 748.528,1216.63 749.115,1218.18 749.701,1218.34 750.288,1218.09 750.874,1219.28 751.46,1221.49 752.047,1221.03 752.633,1222.09 753.22,1221.91 753.806,1220.53 754.392,1221.76 754.979,1221.67 755.565,1220.31 756.152,1220.2 756.738,1220.12 757.324,1219.91 757.911,1221.08 758.497,1220.93 759.084,1220.85 759.67,1223.22 760.257,1220.33 760.843,1218.99 761.429,1217.73 762.016,1217.82 762.602,1216.55 763.189,1219 763.775,1217.55 764.361,1221.19 764.948,1218.28 765.534,1218.53 766.121,1218.43 766.707,1221.03 767.293,1222.03 767.88,1222.13 768.466,1220.55 769.053,1222.93 769.639,1221.42 770.226,1219.7 770.812,1222.23 771.398,1220.63 771.985,1221.72 772.571,1221.43 773.158,1221.33 773.744,1222.48 774.33,1218.42 774.917,1215.88 775.503,1217.57 776.09,1217.94 776.676,1215.34 777.262,1212.85 777.849,1212.15 778.435,1211.1 779.022,1212.97 779.608,1212.04 780.195,1212.43 780.781,1212.66 781.367,1214.48 781.954,1218.67 782.54,1217.29 783.127,1216.94 783.713,1216.95 784.299,1219.57 784.886,1215.6 785.472,1214.6 786.059,1215.99 786.645,1215.79 787.232,1216.1 787.818,1218.73 788.404,1218.49 788.991,1220.82 789.577,1220.73 790.164,1219.83 790.75,1219.67 791.336,1221.07 791.923,1222.14 792.509,1220.74 793.096,1216.56 793.682,1217.79 794.268,1215.16 794.855,1216.59 795.441,1216.52 796.028,1220.46 796.614,1220.16 797.201,1218.77 797.787,1219.92 798.373,1219.63 798.96,1217.28 799.546,1217.34 800.133,1214.8 800.719,1215.07 801.305,1212.59 801.892,1212.72 802.478,1211.93 803.065,1212.31 803.651,1212.43 804.237,1212.6 804.824,1211.54 805.41,1213.2 805.997,1215.65 806.583,1216.9 807.17,1214.12 807.756,1214.22 808.342,1214.08 808.929,1214.34 809.515,1214.62 810.102,1216 810.688,1216.23 811.274,1217.45 811.861,1217.46 812.447,1217.41 813.034,1220.26 813.62,1220.01 814.206,1218.7 814.793,1217.19 815.379,1216.11 815.966,1216.16 816.552,1212.34 817.139,1214.19 817.725,1216.67 818.311,1216.55 818.898,1215.15 819.484,1216.55 820.071,1215.21 820.657,1218.08 821.243,1218.04 821.83,1220.85 822.416,1221.92 823.003,1221.76 823.589,1222.73 824.175,1223.94 824.762,1225.16 825.348,1223.51 825.935,1223.19 826.521,1220.12 827.108,1220.99 827.694,1220.85 828.28,1221.47 828.867,1221.18 829.453,1221.25 830.04,1222.06 830.626,1220.29 831.212,1220.98 831.799,1222.02 832.385,1222.97 832.972,1221.08 833.558,1217.93 834.145,1219.1 834.731,1219.08 835.317,1216.22 835.904,1218.54 836.49,1221.13 837.077,1222.29 837.663,1223.26 838.249,1222.65 838.836,1224.94 839.422,1224.56 840.009,1224.26 840.595,1226.42 841.181,1225.99 841.768,1228.26 842.354,1227.46 842.941,1226.84 843.527,1222.59 844.114,1222.18 844.7,1216.8 845.286,1217.79 845.873,1217.53 846.459,1216.14 847.046,1215.96 847.632,1213.17 848.218,1214.47 848.805,1217.2 849.391,1213.16 849.978,1215.89 850.564,1214.57 851.15,1214.31 851.737,1215.9 852.323,1215.88 852.91,1215.94 853.496,1218.33 854.083,1215.67 854.669,1214.49 855.255,1215.84 855.842,1214.56 856.428,1214.85 857.015,1213.51 857.601,1216.32 858.187,1213.76 858.774,1215.25 859.36,1213.79 859.947,1215.26 860.533,1216.56 861.119,1217.73 861.706,1218.96 862.292,1217.5 862.879,1217.44 863.465,1216.23 864.052,1216.31 864.638,1215.03 865.224,1215.33 865.811,1214.17 866.397,1215.46 866.984,1212.7 867.57,1212.74 868.156,1211.9 868.743,1211 869.329,1212.76 869.916,1214.22 870.502,1213.05 871.089,1210.62 871.675,1210.92 872.261,1213.83 872.848,1214.04 873.434,1215.42 874.021,1215.74 874.607,1215.62 875.193,1213.14 875.78,1213.4 876.366,1213.59 876.953,1213.75 877.539,1212.46 878.125,1215.08 878.712,1213.96 879.298,1215.6 879.885,1215.6 880.471,1214.27 881.058,1213.09 881.644,1213.25 882.23,1212.17 882.817,1207.25 883.403,1210.08 883.99,1210.11 884.576,1210.25 885.162,1210.54 885.749,1211.9 886.335,1212.07 886.922,1213.59 887.508,1212.79 888.094,1214.18 888.681,1218.01 889.267,1217.88 889.854,1221.67 890.44,1224.16 891.027,1222.37 891.613,1222.16 892.199,1224.29 892.786,1224.88 893.372,1223.35 893.959,1224.06 894.545,1222.14 895.131,1218.37 895.718,1218.09 896.304,1217.94 896.891,1219.03 897.477,1220.2 898.063,1219.96 898.65,1221.1 899.236,1222.08 899.823,1221.92 900.409,1221.46 900.996,1221.11 901.582,1220.73 902.168,1222.77 902.755,1222.28 903.341,1220.44 903.928,1218.85 904.514,1217.36 905.1,1216.08 905.687,1213.33 906.273,1210.9 906.86,1211.14 907.446,1212.76 908.032,1214.32 908.619,1215.64 909.205,1215.67 909.792,1214.21 910.378,1211.39 910.965,1211.53 911.551,1210.52 912.137,1207.93 912.724,1208.3 913.31,1207.44 913.897,1207.78 914.483,1210.88 915.069,1212.43 915.656,1212.57 916.242,1210.13 916.829,1210.59 917.415,1208.32 918.002,1211.23 918.588,1213.85 919.174,1212.42 919.761,1212.5 920.347,1211.58 920.934,1214.56 921.52,1214.92 922.106,1220.19 922.693,1217.4 923.279,1218.8 923.866,1219.96 924.452,1219.93 925.038,1219.87 925.625,1222.34 926.211,1223.63 926.798,1219.38 927.384,1218.18 927.971,1219.33 928.557,1221.61 929.143,1218.45 929.73,1220.84 930.316,1221.86 930.903,1221.42 931.489,1222.38 932.075,1221.93 932.662,1224.1 933.248,1224.99 933.835,1226.78 934.421,1225.97 935.007,1226.69 935.594,1223.46 936.18,1223.13 936.767,1222.71 937.353,1225.78 937.94,1226.58 938.526,1224.65 939.112,1222.76 939.699,1221.31 940.285,1221.11 940.872,1219.61 941.458,1222.01 942.044,1222.85 942.631,1224.04 943.217,1224.88 943.804,1223.06 944.39,1221.21 944.976,1219.63 945.563,1216.9 946.149,1214.2 946.736,1214.18 947.322,1215.67 947.909,1215.47 948.495,1218.14 949.081,1217.85 949.668,1218.08 950.254,1216.55 950.841,1216.42 951.427,1216.21 952.013,1213.41 952.6,1214.72 953.186,1214.77 953.773,1213.35 954.359,1210.53 954.945,1212.18 955.532,1210.83 956.118,1211.16 956.705,1210.17 957.291,1211.82 957.878,1211.9 958.464,1210.39 959.05,1213.31 959.637,1214.44 960.223,1216.94 960.81,1222.13 961.396,1220.52 961.982,1218.84 962.569,1218.49 963.155,1218.68 963.742,1219.68 964.328,1222.02 964.915,1220.47 965.501,1222.65 966.087,1223.82 966.674,1220.76 967.26,1219.3 967.847,1219.24 968.433,1219.01 969.019,1218.83 969.606,1219.95 970.192,1219.46 970.779,1216.58 971.365,1215.2 971.951,1215.4 972.538,1216.66 973.124,1215.05 973.711,1215.21 974.297,1215.64 974.884,1215.64 975.47,1215.46 976.056,1212.73 976.643,1211.67 977.229,1210.41 977.816,1210.27 978.402,1213.08 978.988,1209.18 979.575,1208.18 980.161,1211.24 980.748,1210.27 981.334,1211.86 981.92,1213.04 982.507,1210.69 983.093,1212.15 983.68,1213.58 984.266,1212.49 984.853,1212.59 985.439,1211.25 986.025,1212.83 986.612,1211.88 987.198,1212.45 987.785,1213.92 988.371,1214.25 988.957,1217 989.544,1215.69 990.13,1215.73 990.717,1215.85 991.303,1218.34 991.889,1219.17 992.476,1219.95 993.062,1218.36 993.649,1215.73 994.235,1218.15 994.822,1218.06 995.408,1216.54 995.994,1218.71 996.581,1219.81 997.167,1218.29 997.754,1216.99 998.34,1215.25 998.926,1217.73 999.513,1217.59 1000.1,1220.17 1000.69,1219.88 1001.27,1218.08 1001.86,1215.48 1002.44,1212.84 1003.03,1209.68 1003.62,1206.37 1004.2,1205.6 1004.79,1208.77 1005.38,1207.69 1005.96,1205.44 1006.55,1205.74 1007.14,1206.06 1007.72,1206.58 1008.31,1209.41 1008.9,1207.18 1009.48,1207.46 1010.07,1207.94 1010.65,1211.2 1011.24,1208.95 1011.83,1209.48 1012.41,1208.51 1013,1208.73 1013.59,1207.96 1014.17,1209.9 1014.76,1208.9 1015.35,1210.5 1015.93,1213.44 1016.52,1213.68 1017.11,1213.78 1017.69,1215.06 1018.28,1215.42 1018.86,1216.91 1019.45,1212.97 1020.04,1215.95 1020.62,1218.52 1021.21,1216 1021.8,1215.77 1022.38,1215.94 1022.97,1214.73 1023.56,1214.55 1024.14,1215.61 1024.73,1214.36 1025.32,1211.67 1025.9,1211.75 1026.49,1214.48 1027.07,1214.67 1027.66,1213.12 1028.25,1210.72 1028.83,1208.37 1029.42,1207.69 1030.01,1206.8 1030.59,1207.28 1031.18,1208.81 1031.77,1214.15 1032.35,1215.68 1032.94,1214.3 1033.52,1215.34 1034.11,1215.41 1034.7,1214.06 1035.28,1215.49 1035.87,1215.53 1036.46,1220.5 1037.04,1220.64 1037.63,1222.51 1038.22,1220.99 1038.8,1219.36 1039.39,1217.99 1039.98,1218.92 1040.56,1218.36 1041.15,1217.22 1041.73,1217.15 1042.32,1211.99 1042.91,1214.3 1043.49,1212.99 1044.08,1215.6 1044.67,1217.93 1045.25,1217.91 1045.84,1219.05 1046.43,1216.37 1047.01,1215.07 1047.6,1214.9 1048.19,1216.33 1048.77,1216.33 1049.36,1216.21 1049.94,1217.33 1050.53,1219.77 1051.12,1219.5 1051.7,1219.12 1052.29,1221.4 1052.88,1219.29 1053.46,1218.79 1054.05,1218.54 1054.64,1217.06 1055.22,1215.77 1055.81,1214.4 1056.39,1212.98 1056.98,1214.57 1057.57,1217.2 1058.15,1216.87 1058.74,1219.51 1059.33,1218.22 1059.91,1215.43 1060.5,1216.53 1061.09,1217.72 1061.67,1218.65 1062.26,1218.53 1062.85,1220.59 1063.43,1218.9 1064.02,1219.77 1064.6,1221.9 1065.19,1221.39 1065.78,1218.53 1066.36,1218.26 1066.95,1219.42 1067.54,1217.82 1068.12,1215.26 1068.71,1215.11 1069.3,1216.41 1069.88,1217.65 1070.47,1214.68 1071.06,1214.63 1071.64,1214.69 1072.23,1210.75 1072.81,1212.41 1073.4,1212.78 1073.99,1211.43 1074.57,1213.12 1075.16,1214.48 1075.75,1215.71 1076.33,1216.65 1076.92,1214.1 1077.51,1215.35 1078.09,1216.8 1078.68,1218.98 1079.26,1221.39 1079.85,1219.63 1080.44,1220.54 1081.02,1216.31 1081.61,1215.94 1082.2,1218.31 1082.78,1216.82 1083.37,1216.79 1083.96,1216.85 1084.54,1215.31 1085.13,1217.87 1085.72,1215.15 1086.3,1215.29 1086.89,1215.2 1087.47,1213.73 1088.06,1214 1088.65,1216.25 1089.23,1215.06 1089.82,1215.08 1090.41,1210.1 1090.99,1210.34 1091.58,1209.14 1092.17,1209.66 1092.75,1210.3 1093.34,1212.05 1093.93,1212.08 1094.51,1213.7 1095.1,1215.29 1095.68,1214.88 1096.27,1211.13 1096.86,1211.07 1097.44,1211.12 1098.03,1212.57 1098.62,1211.64 1099.2,1210.63 1099.79,1211.21 1100.38,1211.4 1100.96,1211.56 1101.55,1210.62 1102.14,1208.4 1102.72,1207.52 1103.31,1207.71 1103.89,1210.7 1104.48,1212.64 1105.07,1212.77 1105.65,1211.32 1106.24,1210.15 1106.83,1208.92 1107.41,1209.07 1108,1211.82 1108.59,1214.55 1109.17,1212.9 1109.76,1214.39 1110.34,1215.76 1110.93,1214.65 1111.52,1214.63 1112.1,1216.04 1112.69,1214.85 1113.28,1213.77 1113.86,1216.26 1114.45,1220 1115.04,1221.01 1115.62,1222.06 1116.21,1221.58 1116.8,1221.31 1117.38,1219.43 1117.97,1219.22 1118.55,1216.72 1119.14,1213.94 1119.73,1216.35 1120.31,1216.33 1120.9,1216.12 1121.49,1217.27 1122.07,1218.39 1122.66,1216.84 1123.25,1214.05 1123.83,1215.31 1124.42,1216.48 1125.01,1213.77 1125.59,1212.53 1126.18,1211.51 1126.76,1210.44 1127.35,1210.68 1127.94,1210.64 1128.52,1210.75 1129.11,1207.21 1129.7,1206.29 1130.28,1206.45 1130.87,1209.42 1131.46,1208.5 1132.04,1208.89 1132.63,1209.49 1133.21,1211.09 1133.8,1208.75 1134.39,1207.86 1134.97,1206.91 1135.56,1208.56 1136.15,1208.78 1136.73,1211.85 1137.32,1210.63 1137.91,1214.54 1138.49,1214.5 1139.08,1213.28 1139.67,1214.61 1140.25,1217.22 1140.84,1218.6 1141.42,1220.98 1142.01,1221.93 1142.6,1216.6 1143.18,1214.84 1143.77,1212.29 1144.36,1211.32 1144.94,1210.01 1145.53,1211.5 1146.12,1211.47 1146.7,1210.39 1147.29,1209.57 1147.88,1208.71 1148.46,1210.28 1149.05,1209.54 1149.63,1209.83 1150.22,1210 1150.81,1211.68 1151.39,1211.86 1151.98,1209.53 1152.57,1208.54 1153.15,1208.95 1153.74,1210.53 1154.33,1210.6 1154.91,1208.23 1155.5,1210.98 1156.09,1208.66 1156.67,1211.56 1157.26,1210.62 1157.84,1213.56 1158.43,1215.05 1159.02,1214.57 1159.6,1213.15 1160.19,1212.19 1160.78,1209.54 1161.36,1208.48 1161.95,1207.5 1162.54,1206.62 1163.12,1206.99 1163.71,1207.61 1164.29,1209.43 1164.88,1209.75 1165.47,1212.68 1166.05,1214.14 1166.64,1214.55 1167.23,1214.66 1167.81,1213.51 1168.4,1213.54 1168.99,1213.61 1169.57,1215.23 1170.16,1215.04 1170.75,1214.94 1171.33,1215.08 1171.92,1215.29 1172.5,1216.62 1173.09,1216.8 1173.68,1217.69 1174.26,1217.41 1174.85,1217.29 1175.44,1217.15 1176.02,1214.52 1176.61,1213.4 1177.2,1212.2 1177.78,1213.49 1178.37,1213.39 1178.96,1213.35 1179.54,1211.96 1180.13,1212.11 1180.71,1213.66 1181.3,1213.99 1181.89,1214.03 1182.47,1216.52 1183.06,1217.67 1183.65,1217.56 1184.23,1219.85 1184.82,1219.3 1185.41,1218.88 1185.99,1219.66 1186.58,1217.96 1187.16,1219.1 1187.75,1219.85 1188.34,1220.71 1188.92,1220.53 1189.51,1220.39 1190.1,1219.97 1190.68,1222.24 1191.27,1222.01 1191.86,1221.57 1192.44,1220.14 1193.03,1214.86 1193.62,1214.68 1194.2,1213.23 1194.79,1213.21 1195.37,1213.05 1195.96,1210.24 1196.55,1209.48 1197.13,1210.16 1197.72,1211.84 1198.31,1210.7 1198.89,1212.37 1199.48,1211.07 1200.07,1211.18 1200.65,1208.8 1201.24,1207.74 1201.83,1209.27 1202.41,1209.83 1203,1209.95 1203.58,1209.18 1204.17,1207.96 1204.76,1210.02 1205.34,1207.75 1205.93,1209.31 1206.52,1210.5 1207.1,1211 1207.69,1212.72 1208.28,1212.55 1208.86,1215.09 1209.45,1216.3 1210.03,1216.37 1210.62,1218.8 1211.21,1219.78 1211.79,1219.3 1212.38,1221.89 1212.97,1221.56 1213.55,1222.48 1214.14,1222.04 1214.73,1218.66 1215.31,1218.43 1215.9,1216.63 1216.49,1216.32 1217.07,1217.68 1217.66,1216.37 1218.24,1217.51 1218.83,1217.24 1219.42,1216.63 1220,1216.39 1220.59,1216.18 1221.18,1214.85 1221.76,1212.23 1222.35,1215.09 1222.94,1212.11 1223.52,1216.11 1224.11,1214.77 1224.7,1213.31 1225.28,1210.68 1225.87,1209.65 1226.45,1211.16 1227.04,1213.91 1227.63,1214.11 1228.21,1213.17 1228.8,1211.99 1229.39,1210.82 1229.97,1211.19 1230.56,1212.46 1231.15,1212.66 1231.73,1216.62 1232.32,1213.75 1232.91,1215.04 1233.49,1216.02 1234.08,1214.72 1234.66,1215.11 1235.25,1216.21 1235.84,1216.2 1236.42,1217.68 1237.01,1222.77 1237.6,1222.44 1238.18,1223.3 1238.77,1220.17 1239.36,1217.26 1239.94,1215.68 1240.53,1216.75 1241.11,1216.55 1241.7,1216.42 1242.29,1216.15 1242.87,1213.75 1243.46,1216.23 1244.05,1214.74 1244.63,1213.24 1245.22,1214.28 1245.81,1213.26 1246.39,1213.16 1246.98,1212.97 1247.57,1211.75 1248.15,1211.59 1248.74,1211.95 1249.32,1213.4 1249.91,1214.7 1250.5,1215.02 1251.08,1216.2 1251.67,1219.96 1252.26,1219.54 1252.84,1220.32 1253.43,1221.42 1254.02,1220.98 1254.6,1220.64 1255.19,1221.5 1255.78,1219.88 1256.36,1222.41 1256.95,1223.02 1257.53,1222.28 1258.12,1220.51 1258.71,1220.38 1259.29,1218.77 1259.88,1218.45 1260.47,1216.95 1261.05,1216.78 1261.64,1211.53 1262.23,1208.14 1262.81,1209.74 1263.4,1209.82 1263.98,1210.13 1264.57,1208.91 1265.16,1210.28 1265.74,1210.66 1266.33,1212.05 1266.92,1210.87 1267.5,1212.41 1268.09,1211.25 1268.68,1212.7 1269.26,1209.12 1269.85,1206.62 1270.44,1206.99 1271.02,1207.44 1271.61,1209.09 1272.19,1208.06 1272.78,1208.3 1273.37,1206.21 1273.95,1205.67 1274.54,1206.03 1275.13,1206.58 1275.71,1209.42 1276.3,1210.91 1276.89,1211.02 1277.47,1209.8 1278.06,1208.71 1278.65,1210.01 1279.23,1208.94 1279.82,1210.55 1280.4,1210.88 1280.99,1210.93 1281.58,1209.93 1282.16,1210.13 1282.75,1211.68 1283.34,1214.56 1283.92,1214.6 1284.51,1215.77 1285.1,1216.81 1285.68,1215.34 1286.27,1215.29 1286.86,1215.01 1287.44,1213.6 1288.03,1213.58 1288.61,1214.91 1289.2,1216.23 1289.79,1216.24 1290.37,1217.39 1290.96,1218.83 1291.55,1220.02 1292.13,1218.21 1292.72,1218.29 1293.31,1218.08 1293.89,1220.38 1294.48,1217.49 1295.06,1214.54 1295.65,1214.53 1296.24,1212.2 1296.82,1211.03 1297.41,1210.97 1298,1210.04 1298.58,1208.92 1299.17,1209.34 1299.76,1209.64 1300.34,1209.65 1300.93,1212.06 1301.52,1214.63 1302.1,1215.79 1302.69,1216.97 1303.27,1217.97 1303.86,1217.64 1304.45,1216.22 1305.03,1219.87 1305.62,1218.39 1306.21,1219.39 1306.79,1217.85 1307.38,1216.7 1307.97,1218.05 1308.55,1216.65 1309.14,1216.76 1309.73,1216.9 1310.31,1218.25 1310.9,1219.43 1311.48,1219.03 1312.07,1219.07 1312.66,1218.73 1313.24,1217.51 1313.83,1218.42 1314.42,1219.62 1315,1218.09 1315.59,1218.16 1316.18,1218.08 1316.76,1216.57 1317.35,1216.67 1317.93,1215.43 1318.52,1215.32 1319.11,1214.03 1319.69,1214.14 1320.28,1216.78 1320.87,1216.88 1321.45,1215.34 1322.04,1216.61 1322.63,1215.16 1323.21,1219.14 1323.8,1217.72 1324.39,1218.72 1324.97,1218.2 1325.56,1219.51 1326.14,1217.97 1326.73,1216.4 1327.32,1217.65 1327.9,1215.24 1328.49,1216.31 1329.08,1218.5 1329.66,1215.5 1330.25,1215.22 1330.84,1213.93 1331.42,1212.5 1332.01,1213.86 1332.6,1213.76 1333.18,1213.92 1333.77,1211.09 1334.35,1211.31 1334.94,1211.61 1335.53,1210.57 1336.11,1210.73 1336.7,1208.19 1337.29,1211.14 1337.87,1208.9 1338.46,1212.94 1339.05,1212.85 1339.63,1212.96 1340.22,1206.57 1340.8,1205.37 1341.39,1204.37 1341.98,1204.62 1342.56,1206.38 1343.15,1202.97 1343.74,1203.49 1344.32,1205.43 1344.91,1204.5 1345.5,1203.69 1346.08,1202.91 1346.67,1201.86 1347.26,1202.56 1347.84,1203.3 1348.43,1201.55 1349.01,1200.95 1349.6,1201.77 1350.19,1203.73 1350.77,1205.63 1351.36,1207.4 1351.95,1207.76 1352.53,1209.58 1353.12,1209.89 1353.71,1210.35 1354.29,1213.11 1354.88,1215.83 1355.47,1216.96 1356.05,1217.2 1356.64,1216.95 1357.22,1215.95 1357.81,1217.2 1358.4,1217.2 1358.98,1218.54 1359.57,1219.41 1360.16,1219.1 1360.74,1217.69 1361.33,1216.41 1361.92,1215.14 1362.5,1215.34 1363.09,1212.61 1363.68,1213.8 1364.26,1214.92 1364.85,1213.69 1365.43,1213.56 1366.02,1215.25 1366.61,1216.69 1367.19,1213.97 1367.78,1215.49 1368.37,1213.91 1368.95,1213.91 1369.54,1212.63 1370.13,1213.82 1370.71,1216.68 1371.3,1216.46 1371.88,1214.05 1372.47,1214.23 1373.06,1212.84 1373.64,1212.97 1374.23,1211.72 1374.82,1211.84 1375.4,1211.79 1375.99,1211.83 1376.58,1210.56 1377.16,1209.42 1377.75,1209.72 1378.34,1212.68 1378.92,1211.15 1379.51,1212.6 1380.09,1213.82 1380.68,1213.84 1381.27,1214.18 1381.85,1215.35 1382.44,1216.31 1383.03,1218.54 1383.61,1217.09 1384.2,1214.38 1384.79,1214.19 1385.37,1212.93 1385.96,1210.61 1386.55,1212.05 1387.13,1213.46 1387.72,1213.28 1388.3,1211.91 1388.89,1213.23 1389.48,1212.07 1390.06,1213.6 1390.65,1213.78 1391.24,1212.6 1391.82,1215.43 1392.41,1213.08 1393,1213.34 1393.58,1214.66 1394.17,1215.84 1394.75,1214.74 1395.34,1218.59 1395.93,1217.1 1396.51,1216.73 1397.1,1213.86 1397.69,1212.79 1398.27,1212.77 1398.86,1210.15 1399.45,1210.06 1400.03,1210.09 1400.62,1211.19 1401.21,1211.15 1401.79,1210.95 1402.38,1211.11 1402.96,1211.2 1403.55,1211.13 1404.14,1210.05 1404.72,1211.56 1405.31,1214.13 1405.9,1214.23 1406.48,1213.87 1407.07,1212.66 1407.66,1212.59 1408.24,1211.4 1408.83,1212.65 1409.42,1211.68 1410,1210.71 1410.59,1210.78 1411.17,1211.95 1411.76,1210.78 1412.35,1211.31 1412.93,1212.78 1413.52,1211.74 1414.11,1210.97 1414.69,1213.71 1415.28,1215.98 1415.87,1217.38 1416.45,1218.57 1417.04,1220.47 1417.63,1221.42 1418.21,1222.39 1418.8,1219.62 1419.38,1219.43 1419.97,1217.68 1420.56,1216.14 1421.14,1214.64 1421.73,1214.71 1422.32,1217.14 1422.9,1214.18 1423.49,1212.89 1424.08,1211.78 1424.66,1211.85 1425.25,1211.74 1425.83,1212.91 1426.42,1212.99 1427.01,1213.06 1427.59,1214.26 1428.18,1211.73 1428.77,1213.42 1429.35,1213.16 1429.94,1213.3 1430.53,1216.17 1431.11,1214.89 1431.7,1217.28 1432.29,1215.94 1432.87,1215.9 1433.46,1213.31 1434.04,1211.95 1434.63,1214.42 1435.22,1214.24 1435.8,1216.79 1436.39,1215.44 1436.98,1216.75 1437.56,1216.69 1438.15,1213.8 1438.74,1212.27 1439.32,1211.23 1439.91,1208.85 1440.5,1209.16 1441.08,1209.55 1441.67,1211 1442.25,1209.81 1442.84,1211.36 1443.43,1210.17 1444.01,1207.92 1444.6,1209.67 1445.19,1209.84 1445.77,1207.23 1446.36,1207.6 1446.95,1209.18 1447.53,1209.61 1448.12,1210.97 1448.7,1211.03 1449.29,1213.84 1449.88,1214 1450.46,1213.85 1451.05,1217.51 1451.64,1217.19 1452.22,1217.24 1452.81,1218.33 1453.4,1219.47 1453.98,1216.62 1454.57,1216.31 1455.16,1218.69 1455.74,1218.48 1456.33,1219.41 1456.91,1217.81 1457.5,1215.31 1458.09,1215.48 1458.67,1215.65 1459.26,1213.94 1459.85,1215.46 1460.43,1215.12 1461.02,1216.27 1461.61,1213.53 1462.19,1214.92 1462.78,1213.78 1463.37,1211.23 1463.95,1211.36 1464.54,1211.41 1465.12,1213 1465.71,1213.13 1466.3,1215.72 1466.88,1215.56 1467.47,1217.77 1468.06,1216.23 1468.64,1215.94 1469.23,1216.08 1469.82,1217.03 1470.4,1218.19 1470.99,1218.14 1471.57,1216.49 1472.16,1216.25 1472.75,1217.55 1473.33,1217.53 1473.92,1214.81 1474.51,1213.61 1475.09,1214.93 1475.68,1214.99 1476.27,1213.8 1476.85,1216.48 1477.44,1216.07 1478.03,1215.8 1478.61,1215.76 1479.2,1215.42 1479.78,1216.61 1480.37,1214.97 1480.96,1216.28 1481.54,1217.28 1482.13,1215.82 1482.72,1215.65 1483.3,1215.61 1483.89,1216.4 1484.48,1219.96 1485.06,1217.11 1485.65,1215.44 1486.24,1215.15 1486.82,1213.96 1487.41,1219.17 1487.99,1220.17 1488.58,1219.7 1489.17,1219.53 1489.75,1219.57 1490.34,1217.92 1490.93,1220.2 1491.51,1218.74 1492.1,1217.35 1492.69,1217.99 1493.27,1217.83 1493.86,1219.09 1494.45,1215.08 1495.03,1214.94 1495.62,1214.83 1496.2,1212.11 1496.79,1212.39 1497.38,1214.94 1497.96,1216.19 1498.55,1218.65 1499.14,1218.39 1499.72,1218.25 1500.31,1215.74 1500.9,1214.36 1501.48,1216.96 1502.07,1219.37 1502.65,1217.84 1503.24,1217.67 1503.83,1216.28 1504.41,1214.57 1505,1217.03 1505.59,1216.87 1506.17,1216.59 1506.76,1217.69 1507.35,1221.11 1507.93,1224.28 1508.52,1223.63 1509.11,1222.95 1509.69,1223.88 1510.28,1221.92 1510.86,1221.54 1511.45,1218.69 1512.04,1215.8 1512.62,1215.75 1513.21,1216.79 1513.8,1216.8 1514.38,1216.89 1514.97,1215.38 1515.56,1217.85 1516.14,1217.79 1516.73,1215.11 1517.32,1214.06 1517.9,1218.06 1518.49,1220.47 1519.07,1218.78 1519.66,1216.08 1520.25,1214.78 1520.83,1216.03 1521.42,1214.57 1522.01,1214.44 1522.59,1212.06 1523.18,1208.29 1523.77,1208.52 1524.35,1210.15 1524.94,1211.44 1525.52,1208.97 1526.11,1209.39 1526.7,1209.47 1527.28,1209.7 1527.87,1208.79 1528.46,1210.42 1529.04,1212.08 1529.63,1210.75 1530.22,1211.38 1530.8,1211.54 1531.39,1209.22 1531.98,1206.8 1532.56,1210.99 1533.15,1213.79 1533.73,1213.69 1534.32,1214.01 1534.91,1212.75 1535.49,1215.6 1536.08,1217 1536.67,1219.55 1537.25,1220.57 1537.84,1218.74 1538.43,1219.76 1539.01,1216.97 1539.6,1219.54 1540.19,1219.02 1540.77,1218.73 1541.36,1221.22 1541.94,1223.38 1542.53,1221.75 1543.12,1219.99 1543.7,1221.2 1544.29,1223.12 1544.88,1222.86 1545.46,1221.29 1546.05,1219.66 1546.64,1217.98 1547.22,1213.99 1547.81,1214.11 1548.4,1215.22 1548.98,1216.38 1549.57,1215.98 1550.15,1212.08 1550.74,1210.09 1551.33,1207.94 1551.91,1205.57 1552.5,1204.76 1553.09,1204.03 1553.67,1205.89 1554.26,1206.4 1554.85,1206.95 1555.43,1208.72 1556.02,1207.83 1556.6,1204.22 1557.19,1204.84 1557.78,1207.9 1558.36,1208.26 1558.95,1208.73 1559.54,1211.39 1560.12,1210.06 1560.71,1210.06 1561.3,1211.62 1561.88,1215.71 1562.47,1217.13 1563.06,1214.42 1563.64,1212.89 1564.23,1212.92 1564.81,1210.56 1565.4,1211.83 1565.99,1213.09 1566.57,1213.41 1567.16,1216.2 1567.75,1217.5 1568.33,1217.45 1568.92,1217.52 1569.51,1218.76 1570.09,1218.26 1570.68,1215.67 1571.27,1215.83 1571.85,1213.22 1572.44,1215.83 1573.02,1216.93 1573.61,1217.07 1574.2,1220.6 1574.78,1220.14 1575.37,1221.26 1575.96,1221.91 1576.54,1222.75 1577.13,1223.62 1577.72,1220.67 1578.3,1218.95 1578.89,1221.08 1579.47,1222.09 1580.06,1221.74 1580.65,1221.01 1581.23,1219.24 1581.82,1222.96 1582.41,1222.5 1582.99,1225.74 1583.58,1225.33 1584.17,1223.48 1584.75,1223.1 1585.34,1224.18 1585.93,1221.14 1586.51,1219.3 1587.1,1215.41 1587.68,1215.4 1588.27,1219.34 1588.86,1219.23 1589.44,1217.66 1590.03,1216.37 1590.62,1216.39 1591.2,1215.24 1591.79,1214.11 1592.38,1216.77 1592.96,1219.18 1593.55,1220.33 1594.14,1223.85 1594.72,1222.37 1595.31,1220.49 1595.89,1220.07 1596.48,1223.39 1597.07,1221.63 1597.65,1222.38 1598.24,1227.08 1598.83,1222.7 1599.41,1221.01 1600,1220.33 1600.59,1217.6 1601.17,1217.57 1601.76,1215.95 1602.34,1216.94 1602.93,1220.64 1603.52,1219.95 1604.1,1221.07 1604.69,1219.68 1605.28,1218.08 1605.86,1216.55 1606.45,1215.34 1607.04,1216.88 1607.62,1216.79 1608.21,1216.72 1608.8,1216.82 1609.38,1214.28 1609.97,1216.77 1610.55,1220.48 1611.14,1218.63 1611.73,1217.3 1612.31,1215.85 1612.9,1214.53 1613.49,1211.1 1614.07,1212.55 1614.66,1215.28 1615.25,1216.59 1615.83,1217.49 1616.42,1215.96 1617.01,1217.39 1617.59,1217.42 1618.18,1215.86 1618.76,1215.7 1619.35,1219.4 1619.94,1216.27 1620.52,1214.98 1621.11,1213.57 1621.7,1212.63 1622.28,1213.18 1622.87,1213.16 1623.46,1212.24 1624.04,1213.95 1624.63,1215.05 1625.22,1213.54 1625.8,1210.74 1626.39,1209.61 1626.97,1209.72 1627.56,1210.08 1628.15,1210.58 1628.73,1210.92 1629.32,1211.22 1629.91,1211.51 1630.49,1210.4 1631.08,1208.14 1631.67,1207.17 1632.25,1209 1632.84,1213.27 1633.42,1214.62 1634.01,1214.88 1634.6,1214.91 1635.18,1216.25 1635.77,1214.87 1636.36,1213.65 1636.94,1213.97 1637.53,1212.49 1638.12,1211.11 1638.7,1209.85 1639.29,1211.63 1639.88,1211.73 1640.46,1211.75 1641.05,1216.97 1641.63,1216.85 1642.22,1215.66 1642.81,1216.86 1643.39,1220.31 1643.98,1221.27 1644.57,1219.78 1645.15,1219.54 1645.74,1220.7 1646.33,1220.22 1646.91,1219.9 1647.5,1217.1 1648.09,1213.4 1648.67,1213.47 1649.26,1214.74 1649.84,1215.81 1650.43,1211.86 1651.02,1213.33 1651.6,1212.08 1652.19,1214.93 1652.78,1217.5 1653.36,1216 1653.95,1215.82 1654.54,1215.81 1655.12,1215.86 1655.71,1213.11 1656.29,1212.16 1656.88,1210.81 1657.47,1212.45 1658.05,1209.71 1658.64,1211.48 1659.23,1211.57 1659.81,1211.52 1660.4,1211.43 1660.99,1210.26 1661.57,1209.24 1662.16,1209.89 1662.75,1206.32 1663.33,1205.33 1663.92,1208.54 1664.5,1211.12 1665.09,1213.98 1665.68,1213.96 1666.26,1215.37 1666.85,1212.51 1667.44,1211.59 1668.02,1211.59 1668.61,1210.62 1669.2,1212.18 1669.78,1213.65 1670.37,1213.98 1670.96,1215.16 1671.54,1217.61 1672.13,1216.36 1672.71,1216.16 1673.3,1215.01 1673.89,1214.93 1674.47,1216.44 1675.06,1213.88 1675.65,1212.89 1676.23,1215.66 1676.82,1215.37 1677.41,1216.59 1677.99,1217.53 1678.58,1218.64 1679.17,1217.25 1679.75,1217.16 1680.34,1214.37 1680.92,1214.34 1681.51,1214.23 1682.1,1212.97 1682.68,1213.15 1683.27,1213.09 1683.86,1213.13 1684.44,1213.07 1685.03,1211.94 1685.62,1208.08 1686.2,1207.14 1686.79,1208.95 1687.37,1209.34 1687.96,1210.86 1688.55,1210.94 1689.13,1213.91 1689.72,1215.34 1690.31,1213.99 1690.89,1215.35 1691.48,1214.1 1692.07,1215.67 1692.65,1213.21 1693.24,1213.16 1693.83,1211.84 1694.41,1210.67 1695,1212.22 1695.58,1213.51 1696.17,1213.43 1696.76,1212.44 1697.34,1209.98 1697.93,1206.33 1698.52,1206.65 1699.1,1207.03 1699.69,1206.06 1700.28,1205.02 1700.86,1205.4 1701.45,1208.43 1702.04,1208.36 1702.62,1209.87 1703.21,1211.42 1703.79,1206.41 1704.38,1206.57 1704.97,1209.53 1705.55,1211.24 1706.14,1210.01 1706.73,1212.75 1707.31,1212.61 1707.9,1216.55 1708.49,1213.91 1709.07,1213.92 1709.66,1212.81 1710.24,1212.77 1710.83,1211.56 1711.42,1211.99 1712,1213.37 1712.59,1213.29 1713.18,1213.19 1713.76,1211.87 1714.35,1212.41 1714.94,1213.87 1715.52,1212.72 1716.11,1216.63 1716.7,1216.35 1717.28,1215.07 1717.87,1214.91 1718.45,1214.84 1719.04,1213.74 1719.63,1209.91 1720.21,1211.58 1720.8,1213.14 1721.39,1213.56 1721.97,1213.57 1722.56,1214.85 1723.15,1214.79 1723.73,1218.36 1724.32,1218.33 1724.91,1217.77 1725.49,1218.9 1726.08,1216.04 1726.66,1219.73 1727.25,1221.98 1727.84,1221.43 1728.42,1217.49 1729.01,1218.71 1729.6,1217.26 1730.18,1218.48 1730.77,1218.23 1731.36,1219.21 1731.94,1219 1732.53,1222.6 1733.11,1223.31 1733.7,1226.76 1734.29,1225.98 1734.87,1225.36 1735.46,1224.75 1736.05,1223.05 1736.63,1222.58 1737.22,1221.07 1737.81,1220.66 1738.39,1223.13 1738.98,1222.58 1739.57,1220.99 1740.15,1220.77 1740.74,1221.55 1741.32,1221.08 1741.91,1219.52 1742.5,1217.96 1743.08,1217.75 1743.67,1216.09 1744.26,1213.43 1744.84,1209.61 1745.43,1207.29 1746.02,1207.55 1746.6,1207.91 1747.19,1208.51 1747.78,1207.82 1748.36,1206.81 1748.95,1207.14 1749.53,1207.02 1750.12,1209.9 1750.71,1211.48 1751.29,1212.69 1751.88,1215.27 1752.47,1215.2 1753.05,1215.45 1753.64,1212.57 1754.23,1212.67 1754.81,1210.18 1755.4,1211.67 1755.99,1211.74 1756.57,1211.79 1757.16,1213.25 1757.74,1211.97 1758.33,1213.46 1758.92,1212.68 1759.5,1211.49 1760.09,1211.88 1760.68,1210.78 1761.26,1209.79 1761.85,1207.53 1762.44,1208.05 1763.02,1211.19 1763.61,1210.21 1764.19,1213.15 1764.78,1214.36 1765.37,1213.15 1765.95,1212.33 1766.54,1211.3 1767.13,1208.73 1767.71,1207.64 1768.3,1205.43 1768.89,1205.91 1769.47,1201.31 1770.06,1199.29 1770.65,1201.29 1771.23,1200.69 1771.82,1200.15 1772.4,1201.1 1772.99,1201.87 1773.58,1205.46 1774.16,1207.27 1774.75,1207.8 1775.34,1208.26 1775.92,1208.49 1776.51,1207.65 1777.1,1206.9 1777.68,1207.44 1778.27,1207.89 1778.86,1208.29 1779.44,1209.95 1780.03,1210.27 1780.61,1211.77 1781.2,1211.63 1781.79,1209.15 1782.37,1209.1 1782.96,1209.25 1783.55,1209.37 1784.13,1210.98 1784.72,1212.27 1785.31,1216.34 1785.89,1215.12 1786.48,1215.1 1787.06,1215.15 1787.65,1211.36 1788.24,1212.6 1788.82,1213.03 1789.41,1218.25 1790,1218 1790.58,1217.58 1791.17,1217.18 1791.76,1217.09 1792.34,1218.1 1792.93,1214.22 1793.52,1215.53 1794.1,1216.9 1794.69,1216.48 1795.27,1215.78 1795.86,1213.09 1796.45,1212.96 1797.03,1212.96 1797.62,1215.98 1798.21,1217.09 1798.79,1216.98 1799.38,1216.9 1799.97,1214.18 1800.55,1214.31 1801.14,1215.52 1801.73,1215.71 1802.31,1221 1802.9,1223.25 1803.48,1222.86 1804.07,1223.63 1804.66,1225.72 1805.24,1225.23 1805.83,1226.06 1806.42,1226.94 1807,1226.5 1807.59,1222.33 1808.18,1219.13 1808.76,1219.89 1809.35,1220.9 1809.94,1220.51 1810.52,1220.3 1811.11,1221.43 1811.69,1221.16 1812.28,1220.79 1812.87,1218.92 1813.45,1219.95 1814.04,1219.49 1814.63,1219.2 1815.21,1219.06 1815.8,1217.68 1816.39,1216.25 1816.97,1216.16 1817.56,1216.27 1818.14,1216.26 1818.73,1216.18 1819.32,1217.45 1819.9,1217.45 1820.49,1219.64 1821.08,1218.08 1821.66,1217.92 1822.25,1217.79 1822.84,1217.66 1823.42,1218.59 1824.01,1218.6 1824.6,1221.15 1825.18,1219.42 1825.77,1219.17 1826.35,1217.7 1826.94,1218.92 1827.53,1215.99 1828.11,1215.71 1828.7,1216.8 1829.29,1217.93 1829.87,1214.98 1830.46,1214.87 1831.05,1214.66 1831.63,1215.55 1832.22,1214.06 1832.81,1213.9 1833.39,1213.75 1833.98,1212.52 1834.56,1212.52 1835.15,1212.42 1835.74,1213.58 1836.32,1212.34 1836.91,1211.13 1837.5,1212.36 1838.08,1210.84 1838.67,1211.33 1839.26,1211.42 1839.84,1212.85 1840.43,1212.72 1841.01,1212.78 1841.6,1214.23 1842.19,1214.18 1842.77,1217.85 1843.36,1218.66 1843.95,1221.07 1844.53,1221.74 1845.12,1222.61 1845.71,1221.01 1846.29,1218.15 1846.88,1216.69 1847.47,1215.44 1848.05,1214.17 1848.64,1214.41 1849.22,1214.47 1849.81,1215.94 1850.4,1213.14 1850.98,1211.96 1851.57,1210.82 1852.16,1210.91 1852.74,1209.6 1853.33,1211.41 1853.92,1212.63 1854.5,1213.13 1855.09,1210.52 1855.68,1212.92 1856.26,1211.78 1856.85,1211.79 1857.43,1209.35 1858.02,1210.82 1858.61,1209.51 1859.19,1208.4 1859.78,1208.53 1860.37,1208.68 1860.95,1210.18 1861.54,1211.55 1862.13,1209.14 1862.71,1212.06 1863.3,1210.87 1863.88,1211.15 1864.47,1212.66 1865.06,1215.25 1865.64,1214.07 1866.23,1214.04 1866.82,1211.38 1867.4,1209.08 1867.99,1209.22 1868.58,1211.88 1869.16,1212.3 1869.75,1212.29 1870.34,1209.89 1870.92,1210.09 1871.51,1209 1872.09,1210.32 1872.68,1213.17 1873.27,1215.8 1873.85,1216.88 1874.44,1216.82 1875.03,1218.15 1875.61,1221.78 1876.2,1224.23 1876.79,1222.73 1877.37,1221.33 1877.96,1220.85 1878.55,1221.79 1879.13,1222.75 1879.72,1222.03 1880.3,1221.73 1880.89,1221.15 1881.48,1218.52 1882.06,1218.15 1882.65,1219.09 1883.24,1218.81 1883.82,1217.1 1884.41,1214.06 1885,1215.23 1885.58,1217.67 1886.17,1217.54 1886.76,1218.64 1887.34,1221.04 1887.93,1220.42 1888.51,1220.15 1889.1,1221.14 1889.69,1220.62 1890.27,1217.78 1890.86,1220.16 1891.45,1218.73 1892.03,1218.49 1892.62,1218.29 1893.21,1219.29 1893.79,1216.17 1894.38,1214.89 1894.96,1214.87 1895.55,1213.24 1896.14,1216.06 1896.72,1215.84 1897.31,1214.44 1897.9,1214.2 1898.48,1211.56 1899.07,1210.2 1899.66,1211.57 1900.24,1211.65 1900.83,1208.05 1901.42,1209.57 1902,1211.29 1902.59,1209.9 1903.17,1210.29 1903.76,1210.32 1904.35,1210.77 1904.93,1208.55 1905.52,1206.26 1906.11,1206.71 1906.69,1205.75 1907.28,1202.37 1907.87,1203.18 1908.45,1202.58 1909.04,1207.48 1909.63,1206.66 1910.21,1208.45 1910.8,1208.8 1911.38,1210.21 1911.97,1210.15 1912.56,1210.26 1913.14,1210.56 1913.73,1212.29 1914.32,1212.48 1914.9,1214.08 1915.49,1216.45 1916.08,1216.4 1916.66,1215.2 1917.25,1212.55 1917.83,1211.33 1918.42,1211.49 1919.01,1209.21 1919.59,1209.37 1920.18,1208.12 1920.77,1211.2 1921.35,1211.2 1921.94,1215.18 1922.53,1212.43 1923.11,1213.98 1923.7,1214.09 1924.29,1213.06 1924.87,1211.69 1925.46,1210.52 1926.04,1206.91 1926.63,1207.47 1927.22,1211.63 1927.8,1210.57 1928.39,1210.91 1928.98,1210.84 1929.56,1208.19 1930.15,1208.71 1930.74,1211.55 1931.32,1212.73 1931.91,1212.79 1932.5,1211.54 1933.08,1212.88 1933.67,1211.98 1934.25,1215.83 1934.84,1218.11 1935.43,1213.8 1936.01,1212.78 1936.6,1212.85 1937.19,1211.51 1937.77,1212.81 1938.36,1214.3 1938.95,1215.22 1939.53,1215.13 1940.12,1215.18 1940.71,1212.64 1941.29,1211.49 1941.88,1207.86 1942.46,1209.6 1943.05,1209.78 1943.64,1208.85 1944.22,1210.4 1944.81,1210.72 1945.4,1211.83 1945.98,1213.36 1946.57,1214.48 1947.16,1211.93 1947.74,1212.01 1948.33,1211.06 1948.91,1210.28 1949.5,1210.48 1950.09,1212.13 1950.67,1213.52 1951.26,1212.44 1951.85,1212.46 1952.43,1211.26 1953.02,1212.76 1953.61,1214.16 1954.19,1215.35 1954.78,1215.37 1955.37,1215.1 1955.95,1214.89 1956.54,1215.1 1957.12,1217.59 1957.71,1218.75 1958.3,1217.33 1958.88,1217.23 1959.47,1215.64 1960.06,1214.43 1960.64,1213.33 1961.23,1215.84 1961.82,1215.72 1962.4,1215.42 1962.99,1216.53 1963.58,1214.91 1964.16,1212.24 1964.75,1214.9 1965.33,1215.98 1965.92,1214.58 1966.51,1214.68 1967.09,1215.61 1967.68,1213.01 1968.27,1213.03 1968.85,1214.49 1969.44,1213.13 1970.03,1215.87 1970.61,1215.9 1971.2,1217.09 1971.78,1216.81 1972.37,1216.67 1972.96,1215.09 1973.54,1216.28 1974.13,1214.96 1974.72,1216.28 1975.3,1214.93 1975.89,1214.96 1976.48,1213.65 1977.06,1212.29 1977.65,1213.53 1978.24,1215.88 1978.82,1213.41 1979.41,1215.99 1979.99,1214.49 1980.58,1213.07 1981.17,1215.58 1981.75,1215.68 1982.34,1218.27 1982.93,1214.21 1983.51,1212.95 1984.1,1210.83 1984.69,1209.75 1985.27,1211.18 1985.86,1210.1 1986.45,1210.39 1987.03,1209.27 1987.62,1208.22 1988.2,1209.81 1988.79,1211.31 1989.38,1211.43 1989.96,1212.88 1990.55,1212.94 1991.14,1215.97 1991.72,1218.24 1992.31,1216.64 1992.9,1216.55 1993.48,1216.32 1994.07,1213.51 1994.65,1212.09 1995.24,1212.34 1995.83,1211.19 1996.41,1210.05 1997,1211.17 1997.59,1211.76 1998.17,1213.4 1998.76,1209.62 1999.35,1211.58 1999.93,1210.4 2000.52,1211.93 2001.11,1210.92 2001.69,1211.1 2002.28,1213.63 2002.86,1213.65 2003.45,1213.83 2004.04,1212.51 2004.62,1212.3 2005.21,1212.26 2005.8,1212.68 2006.38,1212.68 2006.97,1215.51 2007.56,1214.15 2008.14,1213.99 2008.73,1215.02 2009.32,1215.86 2009.9,1215.71 2010.49,1216.95 2011.07,1216.95 2011.66,1218.08 2012.25,1217.92 2012.83,1221.65 2013.42,1217.43 2014.01,1212.23 2014.59,1211.11 2015.18,1209.74 2015.77,1209.94 2016.35,1211.54 2016.94,1215.56 2017.53,1216.75 2018.11,1217.66 2018.7,1217.33 2019.28,1217.14 2019.87,1218.13 2020.46,1215.01 2021.04,1213.79 2021.63,1215.23 2022.22,1216.2 2022.8,1217.34 2023.39,1214.68 2023.98,1212.3 2024.56,1211.27 2025.15,1215.26 2025.73,1213.86 2026.32,1212.73 2026.91,1210.39 2027.49,1210.71 2028.08,1208.48 2028.67,1208.64 2029.25,1210.35 2029.84,1210.31 2030.43,1207.94 2031.01,1208.32 2031.6,1208.63 2032.19,1210.01 2032.77,1211.46 2033.36,1210.55 2033.94,1212.14 2034.53,1214.75 2035.12,1216.09 2035.7,1217.24 2036.29,1214.88 2036.88,1216.02 2037.46,1216.04 2038.05,1216.98 2038.64,1217.99 2039.22,1218.9 2039.81,1220.16 2040.4,1219.85 2040.98,1223.15 2041.57,1221.02 2042.15,1222.01 2042.74,1224.26 2043.33,1223.69 2043.91,1223.37 2044.5,1220.42 2045.09,1220.02 2045.67,1215.93 2046.26,1218.1 2046.85,1216.44 2047.43,1214.84 2048.02,1214.6 2048.6,1214.4 2049.19,1214.44 2049.78,1214.07 2050.36,1215.42 2050.95,1214.11 2051.54,1215.3 2052.12,1216.43 2052.71,1214.77 2053.3,1216.27 2053.88,1214.94 2054.47,1218.31 2055.06,1219.16 2055.64,1220.2 2056.23,1217.35 2056.81,1216.16 2057.4,1217.31 2057.99,1218.63 2058.57,1217.23 2059.16,1218.31 2059.75,1218.05 2060.33,1216.69 2060.92,1216.54 2061.51,1215.14 2062.09,1216.45 2062.68,1213.65 2063.27,1212.62 2063.85,1211.65 2064.44,1211.97 2065.02,1213.19 2065.61,1213.4 2066.2,1216.18 2066.78,1217.34 2067.37,1218.27 2067.96,1220.72 2068.54,1221.44 2069.13,1222.65 2069.72,1221.94 2070.3,1223.96 2070.89,1222.17 2071.48,1222.98 2072.06,1221.33 2072.65,1224.84 2073.23,1220.47 2073.82,1218.76 2074.41,1219.58 2074.99,1217.94 2075.58,1216.39 2076.17,1217.73 2076.75,1217.5 2077.34,1213.29 2077.93,1212.07 2078.51,1212.01 2079.1,1213.18 2079.68,1211.96 2080.27,1210.71 2080.86,1211.96 2081.44,1212.25 2082.03,1212.16 2082.62,1211.03 2083.2,1209.73 2083.79,1213.82 2084.38,1212.56 2084.96,1213.81 2085.55,1215.33 2086.14,1213.87 2086.72,1213.54 2087.31,1214.68 2087.89,1213.46 2088.48,1211.07 2089.07,1211.13 2089.65,1211.37 2090.24,1208.96 2090.83,1209.32 2091.41,1208.45 2092,1210.04 2092.59,1210.12 2093.17,1210.03 2093.76,1209.91 2094.35,1208.81 2094.93,1207.79 2095.52,1207.98 2096.1,1206.88 2096.69,1207.47 2097.28,1207.75 2097.86,1210.72 2098.45,1211.91 2099.04,1210.57 2099.62,1210.75 2100.21,1210.57 2100.8,1209.41 2101.38,1208.57 2101.97,1207.66 2102.55,1207.75 2103.14,1206.72 2103.73,1205.81 2104.31,1207.58 2104.9,1207.78 2105.49,1207.93 2106.07,1208.26 2106.66,1208.52 2107.25,1208.87 2107.83,1210.52 2108.42,1210.6 2109.01,1209.96 2109.59,1211.53 2110.18,1211.86 2110.76,1211.97 2111.35,1213.28 2111.94,1213.54 2112.52,1213.51 2113.11,1215.13 2113.7,1213.85 2114.28,1213.92 2114.87,1213.67 2115.46,1213.97 2116.04,1210.32 2116.63,1214.31 2117.22,1215.8 2117.8,1214.25 2118.39,1214.33 2118.97,1213.15 2119.56,1211.86 2120.15,1212.04 2120.73,1211.03 2121.32,1211.19 2121.91,1212.95 2122.49,1212.69 2123.08,1214.18 2123.67,1214.22 2124.25,1214.21 2124.84,1215.52 2125.42,1215.38 2126.01,1212.65 2126.6,1215.22 2127.18,1215.28 2127.77,1215.33 2128.36,1216.86 2128.94,1220.55 2129.53,1218.93 2130.12,1218.71 2130.7,1217.07 2131.29,1218.52 2131.88,1215.84 2132.46,1216.98 2133.05,1218.05 2133.63,1218.14 2134.22,1216.3 2134.81,1214.81 2135.39,1214.38 2135.98,1212.94 2136.57,1212.68 2137.15,1213.05 2137.74,1211.7 2138.33,1214.31 2138.91,1212.89 2139.5,1214.36 2140.09,1211.95 2140.67,1209.66 2141.26,1209.94 2141.84,1211.57 2142.43,1214.1 2143.02,1215.4 2143.6,1215.11 2144.19,1214 2144.78,1213.72 2145.36,1214.86 2145.95,1213.83 2146.54,1213.96 2147.12,1214.21 2147.71,1215.48 2148.3,1214.12 2148.88,1212.94 2149.47,1214.28 2150.05,1214.38 2150.64,1215.59 2151.23,1218 2151.81,1217.74 2152.4,1219.13 2152.99,1220.17 2153.57,1222.27 2154.16,1223.09 2154.75,1220.31 2155.33,1217.46 2155.92,1218.4 2156.5,1219.24 2157.09,1218.82 2157.68,1217.41 2158.26,1218.41 \"/>\n<path clip-path=\"url(#clip912)\" d=\"M986.025 1214.63 L986.612 1214.63 L987.198 1214.63 L987.785 1214.63 L988.371 1214.63 L988.957 1214.63 L989.544 1214.63 L990.13 1214.63 L990.717 1214.63 L991.303 1214.63 L991.889 1214.63 L992.476 1214.63 L993.062 1214.63 L993.649 1214.63 L994.235 1214.63 L994.822 1214.63 L995.408 1214.63 L995.994 1214.63 L996.581 1214.63 L997.167 1214.63 L997.754 1214.63 L998.34 1214.63 L998.926 1214.63 L999.513 1214.63 L1000.1 1214.63 L1000.69 1214.63 L1001.27 1214.63 L1001.86 1214.63 L1002.44 1214.63 L1003.03 1214.63 L1003.62 1214.63 L1004.2 1214.63 L1004.79 1214.63 L1005.38 1214.63 L1005.96 1214.63 L1006.55 1214.63 L1007.14 1214.63 L1007.72 1214.63 L1008.31 1214.63 L1008.9 1214.63 L1009.48 1214.63 L1010.07 1214.63 L1010.65 1214.63 L1011.24 1214.63 L1011.83 1214.63 L1012.41 1214.63 L1013 1214.63 L1013.59 1214.63 L1014.17 1214.63 L1014.76 1214.63 L1015.35 1214.63 L1015.93 1214.63 L1016.52 1214.63 L1017.11 1214.63 L1017.69 1214.63 L1018.28 1214.63 L1018.86 1214.63 L1019.45 1214.63 L1020.04 1214.63 L1020.62 1214.63 L1021.21 1214.63 L1021.8 1214.63 L1022.38 1214.63 L1022.97 1214.63 L1023.56 1214.63 L1024.14 1214.63 L1024.73 1214.63 L1025.32 1214.63 L1025.9 1214.63 L1026.49 1214.63 L1027.07 1214.63 L1027.66 1214.63 L1028.25 1214.63 L1028.83 1214.63 L1029.42 1214.63 L1030.01 1214.63 L1030.59 1214.63 L1031.18 1214.63 L1031.77 1214.63 L1032.35 1214.63 L1032.94 1214.63 L1033.52 1214.63 L1034.11 1214.63 L1034.7 1214.63 L1035.28 1214.63 L1035.87 1214.63 L1036.46 1214.63 L1037.04 1214.63 L1037.63 1214.63 L1038.22 1214.63 L1038.8 1214.63 L1039.39 1214.63 L1039.98 1214.63 L1040.56 1214.63 L1041.15 1214.63 L1041.73 1214.63 L1042.32 1214.63 L1042.91 1214.63 L1043.49 1214.63 L1044.08 1214.63 L1044.67 1214.63 L1045.25 1214.63 L1045.84 1214.63 L1046.43 1214.63 L1047.01 1214.63 L1047.6 1214.63 L1048.19 1214.63 L1048.77 1214.63 L1049.36 1214.63 L1049.94 1214.63 L1050.53 1214.63 L1051.12 1214.63 L1051.7 1214.63 L1052.29 1214.63 L1052.88 1214.63 L1053.46 1214.63 L1054.05 1214.63 L1054.64 1214.63 L1055.22 1214.63 L1055.81 1214.63 L1056.39 1214.63 L1056.98 1214.63 L1057.57 1214.63 L1058.15 1214.63 L1058.74 1214.63 L1059.33 1214.63 L1059.91 1214.63 L1060.5 1214.63 L1061.09 1214.63 L1061.67 1214.63 L1062.26 1214.63 L1062.85 1214.63 L1063.43 1214.63 L1064.02 1214.63 L1064.6 1214.63 L1065.19 1214.63 L1065.78 1214.63 L1066.36 1214.63 L1066.95 1214.63 L1067.54 1214.63 L1068.12 1214.63 L1068.71 1214.63 L1069.3 1214.63 L1069.88 1214.63 L1070.47 1214.63 L1071.06 1214.63 L1071.64 1214.63 L1072.23 1214.63 L1072.81 1214.63 L1073.4 1214.63 L1073.99 1214.63 L1074.57 1214.63 L1075.16 1214.63 L1075.75 1214.63 L1076.33 1214.63 L1076.92 1214.63 L1077.51 1214.63 L1078.09 1214.63 L1078.68 1214.63 L1079.26 1214.63 L1079.85 1214.63 L1080.44 1214.63 L1081.02 1214.63 L1081.61 1214.63 L1082.2 1214.63 L1082.78 1214.63 L1083.37 1214.63 L1083.96 1214.63 L1084.54 1214.63 L1085.13 1214.63 L1085.72 1214.63 L1086.3 1214.63 L1086.89 1214.63 L1087.47 1214.63 L1088.06 1214.63 L1088.65 1214.63 L1089.23 1214.63 L1089.82 1214.63 L1090.41 1214.63 L1090.99 1214.63 L1091.58 1214.63 L1092.17 1214.63 L1092.75 1214.63 L1093.34 1214.63 L1093.93 1214.63 L1094.51 1214.63 L1095.1 1214.63 L1095.68 1214.63 L1096.27 1214.63 L1096.86 1214.63 L1097.44 1214.63 L1098.03 1214.63 L1098.62 1214.63 L1099.2 1214.63 L1099.79 1214.63 L1100.38 1214.63 L1100.96 1214.63 L1101.55 1214.63 L1102.14 1214.63 L1102.72 1214.63 L1103.31 1214.63 L1103.89 1214.63 L1104.48 1214.63 L1105.07 1214.63 L1105.65 1214.63 L1106.24 1214.63 L1106.83 1214.63 L1107.41 1214.63 L1108 1214.63 L1108.59 1214.63 L1109.17 1214.63 L1109.76 1214.63 L1110.34 1214.63 L1110.93 1214.63 L1111.52 1214.63 L1112.1 1214.63 L1112.69 1214.63 L1113.28 1214.63 L1113.86 1214.63 L1114.45 1214.63 L1115.04 1214.63 L1115.62 1214.63 L1116.21 1214.63 L1116.8 1214.63 L1117.38 1214.63 L1117.97 1214.63 L1118.55 1214.63 L1119.14 1214.63 L1119.73 1214.63 L1120.31 1214.63 L1120.9 1214.63 L1121.49 1214.63 L1122.07 1214.63 L1122.66 1214.63 L1123.25 1214.63 L1123.83 1214.63 L1124.42 1214.63 L1125.01 1214.63 L1125.59 1214.63 L1126.18 1214.63 L1126.76 1214.63 L1127.35 1214.63 L1127.94 1214.63 L1128.52 1214.63 L1129.11 1214.63 L1129.7 1214.63 L1130.28 1214.63 L1130.87 1214.63 L1131.46 1214.63 L1132.04 1214.63 L1132.63 1214.63 L1133.21 1214.63 L1133.8 1214.63 L1134.39 1214.63 L1134.97 1214.63 L1135.56 1214.63 L1136.15 1214.63 L1136.73 1214.63 L1137.32 1214.63 L1137.91 1214.63 L1138.49 1214.63 L1139.08 1214.63 L1139.67 1214.63 L1140.25 1214.63 L1140.84 1214.63 L1141.42 1214.63 L1142.01 1214.63 L1142.6 1214.63 L1143.18 1214.63 L1143.77 1214.63 L1144.36 1214.63 L1144.94 1214.63 L1145.53 1214.63 L1146.12 1214.63 L1146.7 1214.63 L1147.29 1214.63 L1147.88 1214.63 L1148.46 1214.63 L1149.05 1214.63 L1149.63 1214.63 L1150.22 1214.63 L1150.81 1214.63 L1151.39 1214.63 L1151.98 1214.63 L1152.57 1214.63 L1153.15 1214.63 L1153.74 1214.63 L1154.33 1214.63 L1154.91 1214.63 L1155.5 1214.63 L1156.09 1214.63 L1156.67 1214.63 L1157.26 1214.63 L1157.84 1214.63 L1158.43 1214.63 L1159.02 1214.63 L1159.6 1214.63 L1160.19 1214.63 L1160.78 1214.63 L1161.36 1214.63 L1161.95 1214.63 L1162.54 1214.63 L1163.12 1214.63 L1163.71 1214.63 L1164.29 1214.63 L1164.88 1214.63 L1165.47 1214.63 L1166.05 1214.63 L1166.64 1214.63 L1167.23 1214.63 L1167.81 1214.63 L1168.4 1214.63 L1168.99 1214.63 L1169.57 1214.63 L1170.16 1214.63 L1170.75 1214.63 L1171.33 1214.63 L1171.92 1214.63 L1172.5 1214.63 L1173.09 1214.63 L1173.68 1214.63 L1174.26 1214.63 L1174.85 1214.63 L1175.44 1214.63 L1176.02 1214.63 L1176.61 1214.63 L1177.2 1214.63 L1177.78 1214.63 L1178.37 1214.63 L1178.96 1214.63 L1179.54 1214.63 L1180.13 1214.63 L1180.71 1214.63 L1181.3 1214.63 L1181.89 1214.63 L1182.47 1214.63 L1183.06 1214.63 L1183.65 1214.63 L1184.23 1214.63 L1184.82 1214.63 L1185.41 1214.63 L1185.99 1214.63 L1186.58 1214.63 L1187.16 1214.63 L1187.75 1214.63 L1188.34 1214.63 L1188.92 1214.63 L1189.51 1214.63 L1190.1 1214.63 L1190.68 1214.63 L1191.27 1214.63 L1191.86 1214.63 L1192.44 1214.63 L1193.03 1214.63 L1193.62 1214.63 L1194.2 1214.63 L1194.79 1214.63 L1195.37 1214.63 L1195.96 1214.63 L1196.55 1214.63 L1197.13 1214.63 L1197.72 1214.63 L1198.31 1214.63 L1198.89 1214.63 L1199.48 1214.63 L1200.07 1214.63 L1200.65 1214.63 L1201.24 1214.63 L1201.83 1214.63 L1202.41 1214.63 L1203 1214.63 L1203.58 1214.63 L1204.17 1214.63 L1204.76 1214.63 L1205.34 1214.63 L1205.93 1214.63 L1206.52 1214.63 L1207.1 1214.63 L1207.69 1214.63 L1208.28 1214.63 L1208.86 1214.63 L1209.45 1214.63 L1210.03 1214.63 L1210.62 1214.63 L1211.21 1214.63 L1211.79 1214.63 L1212.38 1214.63 L1212.97 1214.63 L1213.55 1214.63 L1214.14 1214.63 L1214.73 1214.63 L1215.31 1214.63 L1215.9 1214.63 L1216.49 1214.63 L1217.07 1214.63 L1217.66 1214.63 L1218.24 1214.63 L1218.83 1214.63 L1219.42 1214.63 L1220 1214.63 L1220.59 1214.63 L1221.18 1214.63 L1221.76 1214.63 L1222.35 1214.63 L1222.94 1214.63 L1223.52 1214.63 L1224.11 1214.63 L1224.7 1214.63 L1225.28 1214.63 L1225.87 1214.63 L1226.45 1214.63 L1227.04 1214.63 L1227.63 1214.63 L1228.21 1214.63 L1228.8 1214.63 L1229.39 1214.63 L1229.97 1214.63 L1230.56 1214.63 L1231.15 1214.63 L1231.73 1214.63 L1232.32 1214.63 L1232.91 1214.63 L1233.49 1214.63 L1234.08 1214.63 L1234.66 1214.63 L1235.25 1214.63 L1235.84 1214.63 L1236.42 1214.63 L1237.01 1214.63 L1237.6 1214.63 L1238.18 1214.63 L1238.77 1214.63 L1239.36 1214.63 L1239.94 1214.63 L1240.53 1214.63 L1241.11 1214.63 L1241.7 1214.63 L1242.29 1214.63 L1242.87 1214.63 L1243.46 1214.63 L1244.05 1214.63 L1244.63 1214.63 L1245.22 1214.63 L1245.81 1214.63 L1246.39 1214.63 L1246.98 1214.63 L1247.57 1214.63 L1248.15 1214.63 L1248.74 1214.63 L1249.32 1214.63 L1249.91 1214.63 L1250.5 1214.63 L1251.08 1214.63 L1251.67 1214.63 L1252.26 1214.63 L1252.84 1214.63 L1253.43 1214.63 L1254.02 1214.63 L1254.6 1214.63 L1255.19 1214.63 L1255.78 1214.63 L1256.36 1214.63 L1256.95 1214.63 L1257.53 1214.63 L1258.12 1214.63 L1258.71 1214.63 L1259.29 1214.63 L1259.88 1214.63 L1260.47 1214.63 L1261.05 1214.63 L1261.64 1214.63 L1262.23 1214.63 L1262.81 1214.63 L1263.4 1214.63 L1263.98 1214.63 L1264.57 1214.63 L1265.16 1214.63 L1265.74 1214.63 L1266.33 1214.63 L1266.92 1214.63 L1267.5 1214.63 L1268.09 1214.63 L1268.68 1214.63 L1269.26 1214.63 L1269.85 1214.63 L1270.44 1214.63 L1271.02 1214.63 L1271.61 1214.63 L1272.19 1214.63 L1272.78 1214.63 L1273.37 1214.63 L1273.95 1214.63 L1274.54 1214.63 L1275.13 1214.63 L1275.71 1214.63 L1276.3 1214.63 L1276.89 1214.63 L1277.47 1214.63 L1278.06 1214.63 L1278.65 1214.63 L1279.23 1214.63 L1279.82 1214.63 L1280.4 1214.63 L1280.99 1214.63 L1281.58 1214.63 L1282.16 1214.63 L1282.75 1214.63 L1283.34 1214.63 L1283.92 1214.63 L1284.51 1214.63 L1285.1 1214.63 L1285.68 1214.63 L1286.27 1214.63 L1286.86 1214.63 L1287.44 1214.63 L1288.03 1214.63 L1288.61 1214.63 L1289.2 1214.63 L1289.79 1214.63 L1290.37 1214.63 L1290.96 1214.63 L1291.55 1214.63 L1292.13 1214.63 L1292.72 1214.63 L1293.31 1214.63 L1293.89 1214.63 L1294.48 1214.63 L1295.06 1214.63 L1295.65 1214.63 L1296.24 1214.63 L1296.82 1214.63 L1297.41 1214.63 L1298 1214.63 L1298.58 1214.63 L1299.17 1214.63 L1299.76 1214.63 L1300.34 1214.63 L1300.93 1214.63 L1301.52 1214.63 L1302.1 1214.63 L1302.69 1214.63 L1303.27 1214.63 L1303.86 1214.63 L1304.45 1214.63 L1305.03 1214.63 L1305.62 1214.63 L1306.21 1214.63 L1306.79 1214.63 L1307.38 1214.63 L1307.97 1214.63 L1308.55 1214.63 L1309.14 1214.63 L1309.73 1214.63 L1310.31 1214.63 L1310.9 1214.63 L1311.48 1214.63 L1312.07 1214.63 L1312.66 1214.63 L1313.24 1214.63 L1313.83 1214.63 L1314.42 1214.63 L1315 1214.63 L1315.59 1214.63 L1316.18 1214.63 L1316.76 1214.63 L1317.35 1214.63 L1317.93 1214.63 L1318.52 1214.63 L1319.11 1214.63 L1319.69 1214.63 L1320.28 1214.63 L1320.87 1214.63 L1321.45 1214.63 L1322.04 1214.63 L1322.63 1214.63 L1323.21 1214.63 L1323.8 1214.63 L1324.39 1214.63 L1324.97 1214.63 L1325.56 1214.63 L1326.14 1214.63 L1326.73 1214.63 L1327.32 1214.63 L1327.9 1214.63 L1328.49 1214.63 L1329.08 1214.63 L1329.66 1214.63 L1330.25 1214.63 L1330.84 1214.63 L1331.42 1214.63 L1332.01 1214.63 L1332.6 1214.63 L1333.18 1214.63 L1333.77 1214.63 L1334.35 1214.63 L1334.94 1214.63 L1335.53 1214.63 L1336.11 1214.63 L1336.7 1214.63 L1337.29 1214.63 L1337.87 1214.63 L1338.46 1214.63 L1339.05 1214.63 L1339.63 1214.63 L1340.22 1214.63 L1340.8 1214.63 L1341.39 1214.63 L1341.98 1214.63 L1342.56 1214.63 L1343.15 1214.63 L1343.74 1214.63 L1344.32 1214.63 L1344.91 1214.63 L1345.5 1214.63 L1346.08 1214.63 L1346.67 1214.63 L1347.26 1214.63 L1347.84 1214.63 L1348.43 1214.63 L1349.01 1214.63 L1349.6 1214.63 L1350.19 1214.63 L1350.77 1214.63 L1351.36 1214.63 L1351.95 1214.63 L1352.53 1214.63 L1353.12 1214.63 L1353.71 1214.63 L1354.29 1214.63 L1354.88 1214.63 L1355.47 1214.63 L1356.05 1214.63 L1356.64 1214.63 L1357.22 1214.63 L1357.81 1214.63 L1358.4 1214.63 L1358.98 1214.63 L1359.57 1214.63 L1360.16 1214.63 L1360.74 1214.63 L1361.33 1214.63 L1361.92 1214.63 L1362.5 1214.63 L1363.09 1214.63 L1363.68 1214.63 L1364.26 1214.63 L1364.85 1214.63 L1365.43 1214.63 L1366.02 1214.63 L1366.61 1214.63 L1367.19 1214.63 L1367.78 1214.63 L1368.37 1214.63 L1368.95 1214.63 L1369.54 1214.63 L1370.13 1214.63 L1370.71 1214.63 L1371.3 1214.63 L1371.88 1214.63 L1372.47 1214.63 L1373.06 1214.63 L1373.64 1214.63 L1374.23 1214.63 L1374.82 1214.63 L1375.4 1214.63 L1375.99 1214.63 L1376.58 1214.63 L1377.16 1214.63 L1377.75 1214.63 L1378.34 1214.63 L1378.92 1214.63 L1379.51 1214.63 L1380.09 1214.63 L1380.68 1214.63 L1381.27 1214.63 L1381.85 1214.63 L1382.44 1214.63 L1383.03 1214.63 L1383.61 1214.63 L1384.2 1214.63 L1384.79 1214.63 L1385.37 1214.63 L1385.96 1214.63 L1386.55 1214.63 L1387.13 1214.63 L1387.72 1214.63 L1388.3 1214.63 L1388.89 1214.63 L1389.48 1214.63 L1390.06 1214.63 L1390.65 1214.63 L1391.24 1214.63 L1391.82 1214.63 L1392.41 1214.63 L1393 1214.63 L1393.58 1214.63 L1394.17 1214.63 L1394.75 1214.63 L1395.34 1214.63 L1395.93 1214.63 L1396.51 1214.63 L1397.1 1214.63 L1397.69 1214.63 L1398.27 1214.63 L1398.86 1214.63 L1399.45 1214.63 L1400.03 1214.63 L1400.62 1214.63 L1401.21 1214.63 L1401.79 1214.63 L1402.38 1214.63 L1402.96 1214.63 L1403.55 1214.63 L1404.14 1214.63 L1404.72 1214.63 L1405.31 1214.63 L1405.9 1214.63 L1406.48 1214.63 L1407.07 1214.63 L1407.66 1214.63 L1408.24 1214.63 L1408.83 1214.63 L1409.42 1214.63 L1410 1214.63 L1410.59 1214.63 L1411.17 1214.63 L1411.76 1214.63 L1412.35 1214.63 L1412.93 1214.63 L1413.52 1214.63 L1414.11 1214.63 L1414.69 1214.63 L1415.28 1214.63 L1415.87 1214.63 L1416.45 1214.63 L1417.04 1214.63 L1417.63 1214.63 L1418.21 1214.63 L1418.8 1214.63 L1419.38 1214.63 L1419.97 1214.63 L1420.56 1214.63 L1421.14 1214.63 L1421.73 1214.63 L1422.32 1214.63 L1422.9 1214.63 L1423.49 1214.63 L1424.08 1214.63 L1424.66 1214.63 L1425.25 1214.63 L1425.83 1214.63 L1426.42 1214.63 L1427.01 1214.63 L1427.59 1214.63 L1428.18 1214.63 L1428.77 1214.63 L1429.35 1214.63 L1429.94 1214.63 L1430.53 1214.63 L1431.11 1214.63 L1431.7 1214.63 L1432.29 1214.63 L1432.87 1214.63 L1433.46 1214.63 L1434.04 1214.63 L1434.63 1214.63 L1435.22 1214.63 L1435.8 1214.63 L1436.39 1214.63 L1436.98 1214.63 L1437.56 1214.63 L1438.15 1214.63 L1438.74 1214.63 L1439.32 1214.63 L1439.91 1214.63 L1440.5 1214.63 L1441.08 1214.63 L1441.67 1214.63 L1442.25 1214.63 L1442.84 1214.63 L1443.43 1214.63 L1444.01 1214.63 L1444.6 1214.63 L1445.19 1214.63 L1445.77 1214.63 L1446.36 1214.63 L1446.95 1214.63 L1447.53 1214.63 L1448.12 1214.63 L1448.7 1214.63 L1449.29 1214.63 L1449.88 1214.63 L1450.46 1214.63 L1451.05 1214.63 L1451.64 1214.63 L1452.22 1214.63 L1452.81 1214.63 L1453.4 1214.63 L1453.98 1214.63 L1454.57 1214.63 L1455.16 1214.63 L1455.74 1214.63 L1456.33 1214.63 L1456.91 1214.63 L1457.5 1214.63 L1458.09 1214.63 L1458.67 1214.63 L1459.26 1214.63 L1459.85 1214.63 L1460.43 1214.63 L1461.02 1214.63 L1461.61 1214.63 L1462.19 1214.63 L1462.78 1214.63 L1463.37 1214.63 L1463.95 1214.63 L1464.54 1214.63 L1465.12 1214.63 L1465.71 1214.63 L1466.3 1214.63 L1466.88 1214.63 L1467.47 1214.63 L1468.06 1214.63 L1468.64 1214.63 L1469.23 1214.63 L1469.82 1214.63 L1470.4 1214.63 L1470.99 1214.63 L1471.57 1214.63 L1472.16 1214.63 L1472.75 1214.63 L1473.33 1214.63 L1473.92 1214.63 L1474.51 1214.63 L1475.09 1214.63 L1475.68 1214.63 L1476.27 1214.63 L1476.85 1214.63 L1477.44 1214.63 L1478.03 1214.63 L1478.61 1214.63 L1479.2 1214.63 L1479.78 1214.63 L1480.37 1214.63 L1480.96 1214.63 L1481.54 1214.63 L1482.13 1214.63 L1482.72 1214.63 L1483.3 1214.63 L1483.89 1214.63 L1484.48 1214.63 L1485.06 1214.63 L1485.65 1214.63 L1486.24 1214.63 L1486.82 1214.63 L1487.41 1214.63 L1487.99 1214.63 L1488.58 1214.63 L1489.17 1214.63 L1489.75 1214.63 L1490.34 1214.63 L1490.93 1214.63 L1491.51 1214.63 L1492.1 1214.63 L1492.69 1214.63 L1493.27 1214.63 L1493.86 1214.63 L1494.45 1214.63 L1495.03 1214.63 L1495.62 1214.63 L1496.2 1214.63 L1496.79 1214.63 L1497.38 1214.63 L1497.96 1214.63 L1498.55 1214.63 L1499.14 1214.63 L1499.72 1214.63 L1500.31 1214.63 L1500.9 1214.63 L1501.48 1214.63 L1502.07 1214.63 L1502.65 1214.63 L1503.24 1214.63 L1503.83 1214.63 L1504.41 1214.63 L1505 1214.63 L1505.59 1214.63 L1506.17 1214.63 L1506.76 1214.63 L1507.35 1214.63 L1507.93 1214.63 L1508.52 1214.63 L1509.11 1214.63 L1509.69 1214.63 L1510.28 1214.63 L1510.86 1214.63 L1511.45 1214.63 L1512.04 1214.63 L1512.62 1214.63 L1513.21 1214.63 L1513.8 1214.63 L1514.38 1214.63 L1514.97 1214.63 L1515.56 1214.63 L1516.14 1214.63 L1516.73 1214.63 L1517.32 1214.63 L1517.9 1214.63 L1518.49 1214.63 L1519.07 1214.63 L1519.66 1214.63 L1520.25 1214.63 L1520.83 1214.63 L1521.42 1214.63 L1522.01 1214.63 L1522.59 1214.63 L1523.18 1214.63 L1523.77 1214.63 L1524.35 1214.63 L1524.94 1214.63 L1525.52 1214.63 L1526.11 1214.63 L1526.7 1214.63 L1527.28 1214.63 L1527.87 1214.63 L1528.46 1214.63 L1529.04 1214.63 L1529.63 1214.63 L1530.22 1214.63 L1530.8 1214.63 L1531.39 1214.63 L1531.98 1214.63 L1532.56 1214.63 L1533.15 1214.63 L1533.73 1214.63 L1534.32 1214.63 L1534.91 1214.63 L1535.49 1214.63 L1536.08 1214.63 L1536.67 1214.63 L1537.25 1214.63 L1537.84 1214.63 L1538.43 1214.63 L1539.01 1214.63 L1539.6 1214.63 L1540.19 1214.63 L1540.77 1214.63 L1541.36 1214.63 L1541.94 1214.63 L1542.53 1214.63 L1543.12 1214.63 L1543.7 1214.63 L1544.29 1214.63 L1544.88 1214.63 L1545.46 1214.63 L1546.05 1214.63 L1546.64 1214.63 L1547.22 1214.63 L1547.81 1214.63 L1548.4 1214.63 L1548.98 1214.63 L1549.57 1214.63 L1550.15 1214.63 L1550.74 1214.63 L1551.33 1214.63 L1551.91 1214.63 L1552.5 1214.63 L1553.09 1214.63 L1553.67 1214.63 L1554.26 1214.63 L1554.85 1214.63 L1555.43 1214.63 L1556.02 1214.63 L1556.6 1214.63 L1557.19 1214.63 L1557.78 1214.63 L1558.36 1214.63 L1558.95 1214.63 L1559.54 1214.63 L1560.12 1214.63 L1560.71 1214.63 L1561.3 1214.63 L1561.88 1214.63 L1562.47 1214.63 L1563.06 1214.63 L1563.64 1214.63 L1564.23 1214.63 L1564.81 1214.63 L1565.4 1214.63 L1565.99 1214.63 L1566.57 1214.63 L1567.16 1214.63 L1567.75 1214.63 L1568.33 1214.63 L1568.92 1214.63 L1569.51 1214.63 L1570.09 1214.63 L1570.68 1214.63 L1571.27 1214.63 L1571.85 1214.63 L1572.44 1214.63 L1573.02 1214.63 L1573.61 1214.63 L1574.2 1214.63 L1574.78 1214.63 L1575.37 1214.63 L1575.96 1214.63 L1576.54 1214.63 L1577.13 1214.63 L1577.72 1214.63 L1578.3 1214.63 L1578.89 1214.63 L1579.47 1214.63 L1580.06 1214.63 L1580.65 1214.63 L1581.23 1214.63 L1581.82 1214.63 L1582.41 1214.63 L1582.99 1214.63 L1583.58 1214.63 L1584.17 1214.63 L1584.75 1214.63 L1585.34 1214.63 L1585.93 1214.63 L1586.51 1214.63 L1587.1 1214.63 L1587.68 1214.63 L1588.27 1214.63 L1588.86 1214.63 L1589.44 1214.63 L1590.03 1214.63 L1590.62 1214.63 L1591.2 1214.63 L1591.79 1214.63 L1592.38 1214.63 L1592.96 1214.63 L1593.55 1214.63 L1594.14 1214.63 L1594.72 1214.63 L1595.31 1214.63 L1595.89 1214.63 L1596.48 1214.63 L1597.07 1214.63 L1597.65 1214.63 L1598.24 1214.63 L1598.83 1214.63 L1599.41 1214.63 L1600 1214.63 L1600.59 1214.63 L1601.17 1214.63 L1601.76 1214.63 L1602.34 1214.63 L1602.93 1214.63 L1603.52 1214.63 L1604.1 1214.63 L1604.69 1214.63 L1605.28 1214.63 L1605.86 1214.63 L1606.45 1214.63 L1607.04 1214.63 L1607.62 1214.63 L1608.21 1214.63 L1608.8 1214.63 L1609.38 1214.63 L1609.97 1214.63 L1610.55 1214.63 L1611.14 1214.63 L1611.73 1214.63 L1612.31 1214.63 L1612.9 1214.63 L1613.49 1214.63 L1614.07 1214.63 L1614.66 1214.63 L1615.25 1214.63 L1615.83 1214.63 L1616.42 1214.63 L1617.01 1214.63 L1617.59 1214.63 L1618.18 1214.63 L1618.76 1214.63 L1619.35 1214.63 L1619.94 1214.63 L1620.52 1214.63 L1621.11 1214.63 L1621.7 1214.63 L1622.28 1214.63 L1622.87 1214.63 L1623.46 1214.63 L1624.04 1214.63 L1624.63 1214.63 L1625.22 1214.63 L1625.8 1214.63 L1626.39 1214.63 L1626.97 1214.63 L1627.56 1214.63 L1628.15 1214.63 L1628.73 1214.63 L1629.32 1214.63 L1629.91 1214.63 L1630.49 1214.63 L1631.08 1214.63 L1631.67 1214.63 L1632.25 1214.63 L1632.84 1214.63 L1633.42 1214.63 L1634.01 1214.63 L1634.6 1214.63 L1635.18 1214.63 L1635.77 1214.63 L1636.36 1214.63 L1636.94 1214.63 L1637.53 1214.63 L1638.12 1214.63 L1638.7 1214.63 L1639.29 1214.63 L1639.88 1214.63 L1640.46 1214.63 L1641.05 1214.63 L1641.63 1214.63 L1642.22 1214.63 L1642.81 1214.63 L1643.39 1214.63 L1643.98 1214.63 L1644.57 1214.63 L1645.15 1214.63 L1645.74 1214.63 L1646.33 1214.63 L1646.91 1214.63 L1647.5 1214.63 L1648.09 1214.63 L1648.67 1214.63 L1649.26 1214.63 L1649.84 1214.63 L1650.43 1214.63 L1651.02 1214.63 L1651.6 1214.63 L1652.19 1214.63 L1652.78 1214.63 L1653.36 1214.63 L1653.95 1214.63 L1654.54 1214.63 L1655.12 1214.63 L1655.71 1214.63 L1656.29 1214.63 L1656.88 1214.63 L1657.47 1214.63 L1658.05 1214.63 L1658.64 1214.63 L1659.23 1214.63 L1659.81 1214.63 L1660.4 1214.63 L1660.99 1214.63 L1661.57 1214.63 L1662.16 1214.63 L1662.75 1214.63 L1663.33 1214.63 L1663.92 1214.63 L1664.5 1214.63 L1665.09 1214.63 L1665.68 1214.63 L1666.26 1214.63 L1666.85 1214.63 L1667.44 1214.63 L1668.02 1214.63 L1668.61 1214.63 L1669.2 1214.63 L1669.78 1214.63 L1670.37 1214.63 L1670.96 1214.63 L1671.54 1214.63 L1672.13 1214.63 L1672.71 1214.63 L1673.3 1214.63 L1673.89 1214.63 L1674.47 1214.63 L1675.06 1214.63 L1675.65 1214.63 L1676.23 1214.63 L1676.82 1214.63 L1677.41 1214.63 L1677.99 1214.63 L1678.58 1214.63 L1679.17 1214.63 L1679.75 1214.63 L1680.34 1214.63 L1680.92 1214.63 L1681.51 1214.63 L1682.1 1214.63 L1682.68 1214.63 L1683.27 1214.63 L1683.86 1214.63 L1684.44 1214.63 L1685.03 1214.63 L1685.62 1214.63 L1686.2 1214.63 L1686.79 1214.63 L1687.37 1214.63 L1687.96 1214.63 L1688.55 1214.63 L1689.13 1214.63 L1689.72 1214.63 L1690.31 1214.63 L1690.89 1214.63 L1691.48 1214.63 L1692.07 1214.63 L1692.65 1214.63 L1693.24 1214.63 L1693.83 1214.63 L1694.41 1214.63 L1695 1214.63 L1695.58 1214.63 L1696.17 1214.63 L1696.76 1214.63 L1697.34 1214.63 L1697.93 1214.63 L1698.52 1214.63 L1699.1 1214.63 L1699.69 1214.63 L1700.28 1214.63 L1700.86 1214.63 L1701.45 1214.63 L1702.04 1214.63 L1702.62 1214.63 L1703.21 1214.63 L1703.79 1214.63 L1704.38 1214.63 L1704.97 1214.63 L1705.55 1214.63 L1706.14 1214.63 L1706.73 1214.63 L1707.31 1214.63 L1707.9 1214.63 L1708.49 1214.63 L1709.07 1214.63 L1709.66 1214.63 L1710.24 1214.63 L1710.83 1214.63 L1711.42 1214.63 L1712 1214.63 L1712.59 1214.63 L1713.18 1214.63 L1713.76 1214.63 L1714.35 1214.63 L1714.94 1214.63 L1715.52 1214.63 L1716.11 1214.63 L1716.7 1214.63 L1717.28 1214.63 L1717.87 1214.63 L1718.45 1214.63 L1719.04 1214.63 L1719.63 1214.63 L1720.21 1214.63 L1720.8 1214.63 L1721.39 1214.63 L1721.97 1214.63 L1722.56 1214.63 L1723.15 1214.63 L1723.73 1214.63 L1724.32 1214.63 L1724.91 1214.63 L1725.49 1214.63 L1726.08 1214.63 L1726.66 1214.63 L1727.25 1214.63 L1727.84 1214.63 L1728.42 1214.63 L1729.01 1214.63 L1729.6 1214.63 L1730.18 1214.63 L1730.77 1214.63 L1731.36 1214.63 L1731.94 1214.63 L1732.53 1214.63 L1733.11 1214.63 L1733.7 1214.63 L1734.29 1214.63 L1734.87 1214.63 L1735.46 1214.63 L1736.05 1214.63 L1736.63 1214.63 L1737.22 1214.63 L1737.81 1214.63 L1738.39 1214.63 L1738.98 1214.63 L1739.57 1214.63 L1740.15 1214.63 L1740.74 1214.63 L1741.32 1214.63 L1741.91 1214.63 L1742.5 1214.63 L1743.08 1214.63 L1743.67 1214.63 L1744.26 1214.63 L1744.84 1214.63 L1745.43 1214.63 L1746.02 1214.63 L1746.6 1214.63 L1747.19 1214.63 L1747.78 1214.63 L1748.36 1214.63 L1748.95 1214.63 L1749.53 1214.63 L1750.12 1214.63 L1750.71 1214.63 L1751.29 1214.63 L1751.88 1214.63 L1752.47 1214.63 L1753.05 1214.63 L1753.64 1214.63 L1754.23 1214.63 L1754.81 1214.63 L1755.4 1214.63 L1755.99 1214.63 L1756.57 1214.63 L1757.16 1214.63 L1757.74 1214.63 L1758.33 1214.63 L1758.92 1214.63 L1759.5 1214.63 L1760.09 1214.63 L1760.68 1214.63 L1761.26 1214.63 L1761.85 1214.63 L1762.44 1214.63 L1763.02 1214.63 L1763.61 1214.63 L1764.19 1214.63 L1764.78 1214.63 L1765.37 1214.63 L1765.95 1214.63 L1766.54 1214.63 L1767.13 1214.63 L1767.71 1214.63 L1768.3 1214.63 L1768.89 1214.63 L1769.47 1214.63 L1770.06 1214.63 L1770.65 1214.63 L1771.23 1214.63 L1771.82 1214.63 L1772.4 1214.63 L1772.99 1214.63 L1773.58 1214.63 L1774.16 1214.63 L1774.75 1214.63 L1775.34 1214.63 L1775.92 1214.63 L1776.51 1214.63 L1777.1 1214.63 L1777.68 1214.63 L1778.27 1214.63 L1778.86 1214.63 L1779.44 1214.63 L1780.03 1214.63 L1780.61 1214.63 L1781.2 1214.63 L1781.79 1214.63 L1782.37 1214.63 L1782.96 1214.63 L1783.55 1214.63 L1784.13 1214.63 L1784.72 1214.63 L1785.31 1214.63 L1785.89 1214.63 L1786.48 1214.63 L1787.06 1214.63 L1787.65 1214.63 L1788.24 1214.63 L1788.82 1214.63 L1789.41 1214.63 L1790 1214.63 L1790.58 1214.63 L1791.17 1214.63 L1791.76 1214.63 L1792.34 1214.63 L1792.93 1214.63 L1793.52 1214.63 L1794.1 1214.63 L1794.69 1214.63 L1795.27 1214.63 L1795.86 1214.63 L1796.45 1214.63 L1797.03 1214.63 L1797.62 1214.63 L1798.21 1214.63 L1798.79 1214.63 L1799.38 1214.63 L1799.97 1214.63 L1800.55 1214.63 L1801.14 1214.63 L1801.73 1214.63 L1802.31 1214.63 L1802.9 1214.63 L1803.48 1214.63 L1804.07 1214.63 L1804.66 1214.63 L1805.24 1214.63 L1805.83 1214.63 L1806.42 1214.63 L1807 1214.63 L1807.59 1214.63 L1808.18 1214.63 L1808.76 1214.63 L1809.35 1214.63 L1809.94 1214.63 L1810.52 1214.63 L1811.11 1214.63 L1811.69 1214.63 L1812.28 1214.63 L1812.87 1214.63 L1813.45 1214.63 L1814.04 1214.63 L1814.63 1214.63 L1815.21 1214.63 L1815.8 1214.63 L1816.39 1214.63 L1816.97 1214.63 L1817.56 1214.63 L1818.14 1214.63 L1818.73 1214.63 L1819.32 1214.63 L1819.9 1214.63 L1820.49 1214.63 L1821.08 1214.63 L1821.66 1214.63 L1822.25 1214.63 L1822.84 1214.63 L1823.42 1214.63 L1824.01 1214.63 L1824.6 1214.63 L1825.18 1214.63 L1825.77 1214.63 L1826.35 1214.63 L1826.94 1214.63 L1827.53 1214.63 L1828.11 1214.63 L1828.7 1214.63 L1829.29 1214.63 L1829.87 1214.63 L1830.46 1214.63 L1831.05 1214.63 L1831.63 1214.63 L1832.22 1214.63 L1832.81 1214.63 L1833.39 1214.63 L1833.98 1214.63 L1834.56 1214.63 L1835.15 1214.63 L1835.74 1214.63 L1836.32 1214.63 L1836.91 1214.63 L1837.5 1214.63 L1838.08 1214.63 L1838.67 1214.63 L1839.26 1214.63 L1839.84 1214.63 L1840.43 1214.63 L1841.01 1214.63 L1841.6 1214.63 L1842.19 1214.63 L1842.77 1214.63 L1843.36 1214.63 L1843.95 1214.63 L1844.53 1214.63 L1845.12 1214.63 L1845.71 1214.63 L1846.29 1214.63 L1846.88 1214.63 L1847.47 1214.63 L1848.05 1214.63 L1848.64 1214.63 L1849.22 1214.63 L1849.81 1214.63 L1850.4 1214.63 L1850.98 1214.63 L1851.57 1214.63 L1852.16 1214.63 L1852.74 1214.63 L1853.33 1214.63 L1853.92 1214.63 L1854.5 1214.63 L1855.09 1214.63 L1855.68 1214.63 L1856.26 1214.63 L1856.85 1214.63 L1857.43 1214.63 L1858.02 1214.63 L1858.61 1214.63 L1859.19 1214.63 L1859.78 1214.63 L1860.37 1214.63 L1860.95 1214.63 L1861.54 1214.63 L1862.13 1214.63 L1862.71 1214.63 L1863.3 1214.63 L1863.88 1214.63 L1864.47 1214.63 L1865.06 1214.63 L1865.64 1214.63 L1866.23 1214.63 L1866.82 1214.63 L1867.4 1214.63 L1867.99 1214.63 L1868.58 1214.63 L1869.16 1214.63 L1869.75 1214.63 L1870.34 1214.63 L1870.92 1214.63 L1871.51 1214.63 L1872.09 1214.63 L1872.68 1214.63 L1873.27 1214.63 L1873.85 1214.63 L1874.44 1214.63 L1875.03 1214.63 L1875.61 1214.63 L1876.2 1214.63 L1876.79 1214.63 L1877.37 1214.63 L1877.96 1214.63 L1878.55 1214.63 L1879.13 1214.63 L1879.72 1214.63 L1880.3 1214.63 L1880.89 1214.63 L1881.48 1214.63 L1882.06 1214.63 L1882.65 1214.63 L1883.24 1214.63 L1883.82 1214.63 L1884.41 1214.63 L1885 1214.63 L1885.58 1214.63 L1886.17 1214.63 L1886.76 1214.63 L1887.34 1214.63 L1887.93 1214.63 L1888.51 1214.63 L1889.1 1214.63 L1889.69 1214.63 L1890.27 1214.63 L1890.86 1214.63 L1891.45 1214.63 L1892.03 1214.63 L1892.62 1214.63 L1893.21 1214.63 L1893.79 1214.63 L1894.38 1214.63 L1894.96 1214.63 L1895.55 1214.63 L1896.14 1214.63 L1896.72 1214.63 L1897.31 1214.63 L1897.9 1214.63 L1898.48 1214.63 L1899.07 1214.63 L1899.66 1214.63 L1900.24 1214.63 L1900.83 1214.63 L1901.42 1214.63 L1902 1214.63 L1902.59 1214.63 L1903.17 1214.63 L1903.76 1214.63 L1904.35 1214.63 L1904.93 1214.63 L1905.52 1214.63 L1906.11 1214.63 L1906.69 1214.63 L1907.28 1214.63 L1907.87 1214.63 L1908.45 1214.63 L1909.04 1214.63 L1909.63 1214.63 L1910.21 1214.63 L1910.8 1214.63 L1911.38 1214.63 L1911.97 1214.63 L1912.56 1214.63 L1913.14 1214.63 L1913.73 1214.63 L1914.32 1214.63 L1914.9 1214.63 L1915.49 1214.63 L1916.08 1214.63 L1916.66 1214.63 L1917.25 1214.63 L1917.83 1214.63 L1918.42 1214.63 L1919.01 1214.63 L1919.59 1214.63 L1920.18 1214.63 L1920.77 1214.63 L1921.35 1214.63 L1921.94 1214.63 L1922.53 1214.63 L1923.11 1214.63 L1923.7 1214.63 L1924.29 1214.63 L1924.87 1214.63 L1925.46 1214.63 L1926.04 1214.63 L1926.63 1214.63 L1927.22 1214.63 L1927.8 1214.63 L1928.39 1214.63 L1928.98 1214.63 L1929.56 1214.63 L1930.15 1214.63 L1930.74 1214.63 L1931.32 1214.63 L1931.91 1214.63 L1932.5 1214.63 L1933.08 1214.63 L1933.67 1214.63 L1934.25 1214.63 L1934.84 1214.63 L1935.43 1214.63 L1936.01 1214.63 L1936.6 1214.63 L1937.19 1214.63 L1937.77 1214.63 L1938.36 1214.63 L1938.95 1214.63 L1939.53 1214.63 L1940.12 1214.63 L1940.71 1214.63 L1941.29 1214.63 L1941.88 1214.63 L1942.46 1214.63 L1943.05 1214.63 L1943.64 1214.63 L1944.22 1214.63 L1944.81 1214.63 L1945.4 1214.63 L1945.98 1214.63 L1946.57 1214.63 L1947.16 1214.63 L1947.74 1214.63 L1948.33 1214.63 L1948.91 1214.63 L1949.5 1214.63 L1950.09 1214.63 L1950.67 1214.63 L1951.26 1214.63 L1951.85 1214.63 L1952.43 1214.63 L1953.02 1214.63 L1953.61 1214.63 L1954.19 1214.63 L1954.78 1214.63 L1955.37 1214.63 L1955.95 1214.63 L1956.54 1214.63 L1957.12 1214.63 L1957.71 1214.63 L1958.3 1214.63 L1958.88 1214.63 L1959.47 1214.63 L1960.06 1214.63 L1960.64 1214.63 L1961.23 1214.63 L1961.82 1214.63 L1962.4 1214.63 L1962.99 1214.63 L1963.58 1214.63 L1964.16 1214.63 L1964.75 1214.63 L1965.33 1214.63 L1965.92 1214.63 L1966.51 1214.63 L1967.09 1214.63 L1967.68 1214.63 L1968.27 1214.63 L1968.85 1214.63 L1969.44 1214.63 L1970.03 1214.63 L1970.61 1214.63 L1971.2 1214.63 L1971.78 1214.63 L1972.37 1214.63 L1972.96 1214.63 L1973.54 1214.63 L1974.13 1214.63 L1974.72 1214.63 L1975.3 1214.63 L1975.89 1214.63 L1976.48 1214.63 L1977.06 1214.63 L1977.65 1214.63 L1978.24 1214.63 L1978.82 1214.63 L1979.41 1214.63 L1979.99 1214.63 L1980.58 1214.63 L1981.17 1214.63 L1981.75 1214.63 L1982.34 1214.63 L1982.93 1214.63 L1983.51 1214.63 L1984.1 1214.63 L1984.69 1214.63 L1985.27 1214.63 L1985.86 1214.63 L1986.45 1214.63 L1987.03 1214.63 L1987.62 1214.63 L1988.2 1214.63 L1988.79 1214.63 L1989.38 1214.63 L1989.96 1214.63 L1990.55 1214.63 L1991.14 1214.63 L1991.72 1214.63 L1992.31 1214.63 L1992.9 1214.63 L1993.48 1214.63 L1994.07 1214.63 L1994.65 1214.63 L1995.24 1214.63 L1995.83 1214.63 L1996.41 1214.63 L1997 1214.63 L1997.59 1214.63 L1998.17 1214.63 L1998.76 1214.63 L1999.35 1214.63 L1999.93 1214.63 L2000.52 1214.63 L2001.11 1214.63 L2001.69 1214.63 L2002.28 1214.63 L2002.86 1214.63 L2003.45 1214.63 L2004.04 1214.63 L2004.62 1214.63 L2005.21 1214.63 L2005.8 1214.63 L2006.38 1214.63 L2006.97 1214.63 L2007.56 1214.63 L2008.14 1214.63 L2008.73 1214.63 L2009.32 1214.63 L2009.9 1214.63 L2010.49 1214.63 L2011.07 1214.63 L2011.66 1214.63 L2012.25 1214.63 L2012.83 1214.63 L2013.42 1214.63 L2014.01 1214.63 L2014.59 1214.63 L2015.18 1214.63 L2015.77 1214.63 L2016.35 1214.63 L2016.94 1214.63 L2017.53 1214.63 L2018.11 1214.63 L2018.7 1214.63 L2019.28 1214.63 L2019.87 1214.63 L2020.46 1214.63 L2021.04 1214.63 L2021.63 1214.63 L2022.22 1214.63 L2022.8 1214.63 L2023.39 1214.63 L2023.98 1214.63 L2024.56 1214.63 L2025.15 1214.63 L2025.73 1214.63 L2026.32 1214.63 L2026.91 1214.63 L2027.49 1214.63 L2028.08 1214.63 L2028.67 1214.63 L2029.25 1214.63 L2029.84 1214.63 L2030.43 1214.63 L2031.01 1214.63 L2031.6 1214.63 L2032.19 1214.63 L2032.77 1214.63 L2033.36 1214.63 L2033.94 1214.63 L2034.53 1214.63 L2035.12 1214.63 L2035.7 1214.63 L2036.29 1214.63 L2036.88 1214.63 L2037.46 1214.63 L2038.05 1214.63 L2038.64 1214.63 L2039.22 1214.63 L2039.81 1214.63 L2040.4 1214.63 L2040.98 1214.63 L2041.57 1214.63 L2042.15 1214.63 L2042.74 1214.63 L2043.33 1214.63 L2043.91 1214.63 L2044.5 1214.63 L2045.09 1214.63 L2045.67 1214.63 L2046.26 1214.63 L2046.85 1214.63 L2047.43 1214.63 L2048.02 1214.63 L2048.6 1214.63 L2049.19 1214.63 L2049.78 1214.63 L2050.36 1214.63 L2050.95 1214.63 L2051.54 1214.63 L2052.12 1214.63 L2052.71 1214.63 L2053.3 1214.63 L2053.88 1214.63 L2054.47 1214.63 L2055.06 1214.63 L2055.64 1214.63 L2056.23 1214.63 L2056.81 1214.63 L2057.4 1214.63 L2057.99 1214.63 L2058.57 1214.63 L2059.16 1214.63 L2059.75 1214.63 L2060.33 1214.63 L2060.92 1214.63 L2061.51 1214.63 L2062.09 1214.63 L2062.68 1214.63 L2063.27 1214.63 L2063.85 1214.63 L2064.44 1214.63 L2065.02 1214.63 L2065.61 1214.63 L2066.2 1214.63 L2066.78 1214.63 L2067.37 1214.63 L2067.96 1214.63 L2068.54 1214.63 L2069.13 1214.63 L2069.72 1214.63 L2070.3 1214.63 L2070.89 1214.63 L2071.48 1214.63 L2072.06 1214.63 L2072.65 1214.63 L2073.23 1214.63 L2073.82 1214.63 L2074.41 1214.63 L2074.99 1214.63 L2075.58 1214.63 L2076.17 1214.63 L2076.75 1214.63 L2077.34 1214.63 L2077.93 1214.63 L2078.51 1214.63 L2079.1 1214.63 L2079.68 1214.63 L2080.27 1214.63 L2080.86 1214.63 L2081.44 1214.63 L2082.03 1214.63 L2082.62 1214.63 L2083.2 1214.63 L2083.79 1214.63 L2084.38 1214.63 L2084.96 1214.63 L2085.55 1214.63 L2086.14 1214.63 L2086.72 1214.63 L2087.31 1214.63 L2087.89 1214.63 L2088.48 1214.63 L2089.07 1214.63 L2089.65 1214.63 L2090.24 1214.63 L2090.83 1214.63 L2091.41 1214.63 L2092 1214.63 L2092.59 1214.63 L2093.17 1214.63 L2093.76 1214.63 L2094.35 1214.63 L2094.93 1214.63 L2095.52 1214.63 L2096.1 1214.63 L2096.69 1214.63 L2097.28 1214.63 L2097.86 1214.63 L2098.45 1214.63 L2099.04 1214.63 L2099.62 1214.63 L2100.21 1214.63 L2100.8 1214.63 L2101.38 1214.63 L2101.97 1214.63 L2102.55 1214.63 L2103.14 1214.63 L2103.73 1214.63 L2104.31 1214.63 L2104.9 1214.63 L2105.49 1214.63 L2106.07 1214.63 L2106.66 1214.63 L2107.25 1214.63 L2107.83 1214.63 L2108.42 1214.63 L2109.01 1214.63 L2109.59 1214.63 L2110.18 1214.63 L2110.76 1214.63 L2111.35 1214.63 L2111.94 1214.63 L2112.52 1214.63 L2113.11 1214.63 L2113.7 1214.63 L2114.28 1214.63 L2114.87 1214.63 L2115.46 1214.63 L2116.04 1214.63 L2116.63 1214.63 L2117.22 1214.63 L2117.8 1214.63 L2118.39 1214.63 L2118.97 1214.63 L2119.56 1214.63 L2120.15 1214.63 L2120.73 1214.63 L2121.32 1214.63 L2121.91 1214.63 L2122.49 1214.63 L2123.08 1214.63 L2123.67 1214.63 L2124.25 1214.63 L2124.84 1214.63 L2125.42 1214.63 L2126.01 1214.63 L2126.6 1214.63 L2127.18 1214.63 L2127.77 1214.63 L2128.36 1214.63 L2128.94 1214.63 L2129.53 1214.63 L2130.12 1214.63 L2130.7 1214.63 L2131.29 1214.63 L2131.88 1214.63 L2132.46 1214.63 L2133.05 1214.63 L2133.63 1214.63 L2134.22 1214.63 L2134.81 1214.63 L2135.39 1214.63 L2135.98 1214.63 L2136.57 1214.63 L2137.15 1214.63 L2137.74 1214.63 L2138.33 1214.63 L2138.91 1214.63 L2139.5 1214.63 L2140.09 1214.63 L2140.67 1214.63 L2141.26 1214.63 L2141.84 1214.63 L2142.43 1214.63 L2143.02 1214.63 L2143.6 1214.63 L2144.19 1214.63 L2144.78 1214.63 L2145.36 1214.63 L2145.95 1214.63 L2146.54 1214.63 L2147.12 1214.63 L2147.71 1214.63 L2148.3 1214.63 L2148.88 1214.63 L2149.47 1214.63 L2150.05 1214.63 L2150.64 1214.63 L2151.23 1214.63 L2151.81 1214.63 L2152.4 1214.63 L2152.99 1214.63 L2153.57 1214.63 L2154.16 1214.63 L2154.75 1214.63 L2155.33 1214.63 L2155.92 1214.63 L2156.5 1214.63 L2157.09 1214.63 L2157.68 1214.63 L2158.26 1214.63 L2158.26 1214.02 L2157.68 1214.02 L2157.09 1214.02 L2156.5 1214.02 L2155.92 1214.02 L2155.33 1214.02 L2154.75 1214.02 L2154.16 1214.02 L2153.57 1214.02 L2152.99 1214.02 L2152.4 1214.02 L2151.81 1214.02 L2151.23 1214.02 L2150.64 1214.02 L2150.05 1214.02 L2149.47 1214.02 L2148.88 1214.02 L2148.3 1214.02 L2147.71 1214.02 L2147.12 1214.02 L2146.54 1214.02 L2145.95 1214.02 L2145.36 1214.02 L2144.78 1214.02 L2144.19 1214.02 L2143.6 1214.02 L2143.02 1214.02 L2142.43 1214.02 L2141.84 1214.02 L2141.26 1214.02 L2140.67 1214.02 L2140.09 1214.02 L2139.5 1214.02 L2138.91 1214.02 L2138.33 1214.02 L2137.74 1214.02 L2137.15 1214.02 L2136.57 1214.02 L2135.98 1214.02 L2135.39 1214.02 L2134.81 1214.02 L2134.22 1214.02 L2133.63 1214.02 L2133.05 1214.02 L2132.46 1214.02 L2131.88 1214.02 L2131.29 1214.02 L2130.7 1214.02 L2130.12 1214.02 L2129.53 1214.02 L2128.94 1214.02 L2128.36 1214.02 L2127.77 1214.02 L2127.18 1214.02 L2126.6 1214.02 L2126.01 1214.02 L2125.42 1214.02 L2124.84 1214.02 L2124.25 1214.02 L2123.67 1214.02 L2123.08 1214.02 L2122.49 1214.02 L2121.91 1214.02 L2121.32 1214.02 L2120.73 1214.02 L2120.15 1214.02 L2119.56 1214.02 L2118.97 1214.02 L2118.39 1214.02 L2117.8 1214.02 L2117.22 1214.02 L2116.63 1214.02 L2116.04 1214.02 L2115.46 1214.02 L2114.87 1214.02 L2114.28 1214.02 L2113.7 1214.02 L2113.11 1214.02 L2112.52 1214.02 L2111.94 1214.02 L2111.35 1214.02 L2110.76 1214.02 L2110.18 1214.02 L2109.59 1214.02 L2109.01 1214.02 L2108.42 1214.02 L2107.83 1214.02 L2107.25 1214.02 L2106.66 1214.02 L2106.07 1214.02 L2105.49 1214.02 L2104.9 1214.02 L2104.31 1214.02 L2103.73 1214.02 L2103.14 1214.02 L2102.55 1214.02 L2101.97 1214.02 L2101.38 1214.02 L2100.8 1214.02 L2100.21 1214.02 L2099.62 1214.02 L2099.04 1214.02 L2098.45 1214.02 L2097.86 1214.02 L2097.28 1214.02 L2096.69 1214.02 L2096.1 1214.02 L2095.52 1214.02 L2094.93 1214.02 L2094.35 1214.02 L2093.76 1214.02 L2093.17 1214.02 L2092.59 1214.02 L2092 1214.02 L2091.41 1214.02 L2090.83 1214.02 L2090.24 1214.02 L2089.65 1214.02 L2089.07 1214.02 L2088.48 1214.02 L2087.89 1214.02 L2087.31 1214.02 L2086.72 1214.02 L2086.14 1214.02 L2085.55 1214.02 L2084.96 1214.02 L2084.38 1214.02 L2083.79 1214.02 L2083.2 1214.02 L2082.62 1214.02 L2082.03 1214.02 L2081.44 1214.02 L2080.86 1214.02 L2080.27 1214.02 L2079.68 1214.02 L2079.1 1214.02 L2078.51 1214.02 L2077.93 1214.02 L2077.34 1214.02 L2076.75 1214.02 L2076.17 1214.02 L2075.58 1214.02 L2074.99 1214.02 L2074.41 1214.02 L2073.82 1214.02 L2073.23 1214.02 L2072.65 1214.02 L2072.06 1214.02 L2071.48 1214.02 L2070.89 1214.02 L2070.3 1214.02 L2069.72 1214.02 L2069.13 1214.02 L2068.54 1214.02 L2067.96 1214.02 L2067.37 1214.02 L2066.78 1214.02 L2066.2 1214.02 L2065.61 1214.02 L2065.02 1214.02 L2064.44 1214.02 L2063.85 1214.02 L2063.27 1214.02 L2062.68 1214.02 L2062.09 1214.02 L2061.51 1214.02 L2060.92 1214.02 L2060.33 1214.02 L2059.75 1214.02 L2059.16 1214.02 L2058.57 1214.02 L2057.99 1214.02 L2057.4 1214.02 L2056.81 1214.02 L2056.23 1214.02 L2055.64 1214.02 L2055.06 1214.02 L2054.47 1214.02 L2053.88 1214.02 L2053.3 1214.02 L2052.71 1214.02 L2052.12 1214.02 L2051.54 1214.02 L2050.95 1214.02 L2050.36 1214.02 L2049.78 1214.02 L2049.19 1214.02 L2048.6 1214.02 L2048.02 1214.02 L2047.43 1214.02 L2046.85 1214.02 L2046.26 1214.02 L2045.67 1214.02 L2045.09 1214.02 L2044.5 1214.02 L2043.91 1214.02 L2043.33 1214.02 L2042.74 1214.02 L2042.15 1214.02 L2041.57 1214.02 L2040.98 1214.02 L2040.4 1214.02 L2039.81 1214.02 L2039.22 1214.02 L2038.64 1214.02 L2038.05 1214.02 L2037.46 1214.02 L2036.88 1214.02 L2036.29 1214.02 L2035.7 1214.02 L2035.12 1214.02 L2034.53 1214.02 L2033.94 1214.02 L2033.36 1214.02 L2032.77 1214.02 L2032.19 1214.02 L2031.6 1214.02 L2031.01 1214.02 L2030.43 1214.02 L2029.84 1214.02 L2029.25 1214.02 L2028.67 1214.02 L2028.08 1214.02 L2027.49 1214.02 L2026.91 1214.02 L2026.32 1214.02 L2025.73 1214.02 L2025.15 1214.02 L2024.56 1214.02 L2023.98 1214.02 L2023.39 1214.02 L2022.8 1214.02 L2022.22 1214.02 L2021.63 1214.02 L2021.04 1214.02 L2020.46 1214.02 L2019.87 1214.02 L2019.28 1214.02 L2018.7 1214.02 L2018.11 1214.02 L2017.53 1214.02 L2016.94 1214.02 L2016.35 1214.02 L2015.77 1214.02 L2015.18 1214.02 L2014.59 1214.02 L2014.01 1214.02 L2013.42 1214.02 L2012.83 1214.02 L2012.25 1214.02 L2011.66 1214.02 L2011.07 1214.02 L2010.49 1214.02 L2009.9 1214.02 L2009.32 1214.02 L2008.73 1214.02 L2008.14 1214.02 L2007.56 1214.02 L2006.97 1214.02 L2006.38 1214.02 L2005.8 1214.02 L2005.21 1214.02 L2004.62 1214.02 L2004.04 1214.02 L2003.45 1214.02 L2002.86 1214.02 L2002.28 1214.02 L2001.69 1214.02 L2001.11 1214.02 L2000.52 1214.02 L1999.93 1214.02 L1999.35 1214.02 L1998.76 1214.02 L1998.17 1214.02 L1997.59 1214.02 L1997 1214.02 L1996.41 1214.02 L1995.83 1214.02 L1995.24 1214.02 L1994.65 1214.02 L1994.07 1214.02 L1993.48 1214.02 L1992.9 1214.02 L1992.31 1214.02 L1991.72 1214.02 L1991.14 1214.02 L1990.55 1214.02 L1989.96 1214.02 L1989.38 1214.02 L1988.79 1214.02 L1988.2 1214.02 L1987.62 1214.02 L1987.03 1214.02 L1986.45 1214.02 L1985.86 1214.02 L1985.27 1214.02 L1984.69 1214.02 L1984.1 1214.02 L1983.51 1214.02 L1982.93 1214.02 L1982.34 1214.02 L1981.75 1214.02 L1981.17 1214.02 L1980.58 1214.02 L1979.99 1214.02 L1979.41 1214.02 L1978.82 1214.02 L1978.24 1214.02 L1977.65 1214.02 L1977.06 1214.02 L1976.48 1214.02 L1975.89 1214.02 L1975.3 1214.02 L1974.72 1214.02 L1974.13 1214.02 L1973.54 1214.02 L1972.96 1214.02 L1972.37 1214.02 L1971.78 1214.02 L1971.2 1214.02 L1970.61 1214.02 L1970.03 1214.02 L1969.44 1214.02 L1968.85 1214.02 L1968.27 1214.02 L1967.68 1214.02 L1967.09 1214.02 L1966.51 1214.02 L1965.92 1214.02 L1965.33 1214.02 L1964.75 1214.02 L1964.16 1214.02 L1963.58 1214.02 L1962.99 1214.02 L1962.4 1214.02 L1961.82 1214.02 L1961.23 1214.02 L1960.64 1214.02 L1960.06 1214.02 L1959.47 1214.02 L1958.88 1214.02 L1958.3 1214.02 L1957.71 1214.02 L1957.12 1214.02 L1956.54 1214.02 L1955.95 1214.02 L1955.37 1214.02 L1954.78 1214.02 L1954.19 1214.02 L1953.61 1214.02 L1953.02 1214.02 L1952.43 1214.02 L1951.85 1214.02 L1951.26 1214.02 L1950.67 1214.02 L1950.09 1214.02 L1949.5 1214.02 L1948.91 1214.02 L1948.33 1214.02 L1947.74 1214.02 L1947.16 1214.02 L1946.57 1214.02 L1945.98 1214.02 L1945.4 1214.02 L1944.81 1214.02 L1944.22 1214.02 L1943.64 1214.02 L1943.05 1214.02 L1942.46 1214.02 L1941.88 1214.02 L1941.29 1214.02 L1940.71 1214.02 L1940.12 1214.02 L1939.53 1214.02 L1938.95 1214.02 L1938.36 1214.02 L1937.77 1214.02 L1937.19 1214.02 L1936.6 1214.02 L1936.01 1214.02 L1935.43 1214.02 L1934.84 1214.02 L1934.25 1214.02 L1933.67 1214.02 L1933.08 1214.02 L1932.5 1214.02 L1931.91 1214.02 L1931.32 1214.02 L1930.74 1214.02 L1930.15 1214.02 L1929.56 1214.02 L1928.98 1214.02 L1928.39 1214.02 L1927.8 1214.02 L1927.22 1214.02 L1926.63 1214.02 L1926.04 1214.02 L1925.46 1214.02 L1924.87 1214.02 L1924.29 1214.02 L1923.7 1214.02 L1923.11 1214.02 L1922.53 1214.02 L1921.94 1214.02 L1921.35 1214.02 L1920.77 1214.02 L1920.18 1214.02 L1919.59 1214.02 L1919.01 1214.02 L1918.42 1214.02 L1917.83 1214.02 L1917.25 1214.02 L1916.66 1214.02 L1916.08 1214.02 L1915.49 1214.02 L1914.9 1214.02 L1914.32 1214.02 L1913.73 1214.02 L1913.14 1214.02 L1912.56 1214.02 L1911.97 1214.02 L1911.38 1214.02 L1910.8 1214.02 L1910.21 1214.02 L1909.63 1214.02 L1909.04 1214.02 L1908.45 1214.02 L1907.87 1214.02 L1907.28 1214.02 L1906.69 1214.02 L1906.11 1214.02 L1905.52 1214.02 L1904.93 1214.02 L1904.35 1214.02 L1903.76 1214.02 L1903.17 1214.02 L1902.59 1214.02 L1902 1214.02 L1901.42 1214.02 L1900.83 1214.02 L1900.24 1214.02 L1899.66 1214.02 L1899.07 1214.02 L1898.48 1214.02 L1897.9 1214.02 L1897.31 1214.02 L1896.72 1214.02 L1896.14 1214.02 L1895.55 1214.02 L1894.96 1214.02 L1894.38 1214.02 L1893.79 1214.02 L1893.21 1214.02 L1892.62 1214.02 L1892.03 1214.02 L1891.45 1214.02 L1890.86 1214.02 L1890.27 1214.02 L1889.69 1214.02 L1889.1 1214.02 L1888.51 1214.02 L1887.93 1214.02 L1887.34 1214.02 L1886.76 1214.02 L1886.17 1214.02 L1885.58 1214.02 L1885 1214.02 L1884.41 1214.02 L1883.82 1214.02 L1883.24 1214.02 L1882.65 1214.02 L1882.06 1214.02 L1881.48 1214.02 L1880.89 1214.02 L1880.3 1214.02 L1879.72 1214.02 L1879.13 1214.02 L1878.55 1214.02 L1877.96 1214.02 L1877.37 1214.02 L1876.79 1214.02 L1876.2 1214.02 L1875.61 1214.02 L1875.03 1214.02 L1874.44 1214.02 L1873.85 1214.02 L1873.27 1214.02 L1872.68 1214.02 L1872.09 1214.02 L1871.51 1214.02 L1870.92 1214.02 L1870.34 1214.02 L1869.75 1214.02 L1869.16 1214.02 L1868.58 1214.02 L1867.99 1214.02 L1867.4 1214.02 L1866.82 1214.02 L1866.23 1214.02 L1865.64 1214.02 L1865.06 1214.02 L1864.47 1214.02 L1863.88 1214.02 L1863.3 1214.02 L1862.71 1214.02 L1862.13 1214.02 L1861.54 1214.02 L1860.95 1214.02 L1860.37 1214.02 L1859.78 1214.02 L1859.19 1214.02 L1858.61 1214.02 L1858.02 1214.02 L1857.43 1214.02 L1856.85 1214.02 L1856.26 1214.02 L1855.68 1214.02 L1855.09 1214.02 L1854.5 1214.02 L1853.92 1214.02 L1853.33 1214.02 L1852.74 1214.02 L1852.16 1214.02 L1851.57 1214.02 L1850.98 1214.02 L1850.4 1214.02 L1849.81 1214.02 L1849.22 1214.02 L1848.64 1214.02 L1848.05 1214.02 L1847.47 1214.02 L1846.88 1214.02 L1846.29 1214.02 L1845.71 1214.02 L1845.12 1214.02 L1844.53 1214.02 L1843.95 1214.02 L1843.36 1214.02 L1842.77 1214.02 L1842.19 1214.02 L1841.6 1214.02 L1841.01 1214.02 L1840.43 1214.02 L1839.84 1214.02 L1839.26 1214.02 L1838.67 1214.02 L1838.08 1214.02 L1837.5 1214.02 L1836.91 1214.02 L1836.32 1214.02 L1835.74 1214.02 L1835.15 1214.02 L1834.56 1214.02 L1833.98 1214.02 L1833.39 1214.02 L1832.81 1214.02 L1832.22 1214.02 L1831.63 1214.02 L1831.05 1214.02 L1830.46 1214.02 L1829.87 1214.02 L1829.29 1214.02 L1828.7 1214.02 L1828.11 1214.02 L1827.53 1214.02 L1826.94 1214.02 L1826.35 1214.02 L1825.77 1214.02 L1825.18 1214.02 L1824.6 1214.02 L1824.01 1214.02 L1823.42 1214.02 L1822.84 1214.02 L1822.25 1214.02 L1821.66 1214.02 L1821.08 1214.02 L1820.49 1214.02 L1819.9 1214.02 L1819.32 1214.02 L1818.73 1214.02 L1818.14 1214.02 L1817.56 1214.02 L1816.97 1214.02 L1816.39 1214.02 L1815.8 1214.02 L1815.21 1214.02 L1814.63 1214.02 L1814.04 1214.02 L1813.45 1214.02 L1812.87 1214.02 L1812.28 1214.02 L1811.69 1214.02 L1811.11 1214.02 L1810.52 1214.02 L1809.94 1214.02 L1809.35 1214.02 L1808.76 1214.02 L1808.18 1214.02 L1807.59 1214.02 L1807 1214.02 L1806.42 1214.02 L1805.83 1214.02 L1805.24 1214.02 L1804.66 1214.02 L1804.07 1214.02 L1803.48 1214.02 L1802.9 1214.02 L1802.31 1214.02 L1801.73 1214.02 L1801.14 1214.02 L1800.55 1214.02 L1799.97 1214.02 L1799.38 1214.02 L1798.79 1214.02 L1798.21 1214.02 L1797.62 1214.02 L1797.03 1214.02 L1796.45 1214.02 L1795.86 1214.02 L1795.27 1214.02 L1794.69 1214.02 L1794.1 1214.02 L1793.52 1214.02 L1792.93 1214.02 L1792.34 1214.02 L1791.76 1214.02 L1791.17 1214.02 L1790.58 1214.02 L1790 1214.02 L1789.41 1214.02 L1788.82 1214.02 L1788.24 1214.02 L1787.65 1214.02 L1787.06 1214.02 L1786.48 1214.02 L1785.89 1214.02 L1785.31 1214.02 L1784.72 1214.02 L1784.13 1214.02 L1783.55 1214.02 L1782.96 1214.02 L1782.37 1214.02 L1781.79 1214.02 L1781.2 1214.02 L1780.61 1214.02 L1780.03 1214.02 L1779.44 1214.02 L1778.86 1214.02 L1778.27 1214.02 L1777.68 1214.02 L1777.1 1214.02 L1776.51 1214.02 L1775.92 1214.02 L1775.34 1214.02 L1774.75 1214.02 L1774.16 1214.02 L1773.58 1214.02 L1772.99 1214.02 L1772.4 1214.02 L1771.82 1214.02 L1771.23 1214.02 L1770.65 1214.02 L1770.06 1214.02 L1769.47 1214.02 L1768.89 1214.02 L1768.3 1214.02 L1767.71 1214.02 L1767.13 1214.02 L1766.54 1214.02 L1765.95 1214.02 L1765.37 1214.02 L1764.78 1214.02 L1764.19 1214.02 L1763.61 1214.02 L1763.02 1214.02 L1762.44 1214.02 L1761.85 1214.02 L1761.26 1214.02 L1760.68 1214.02 L1760.09 1214.02 L1759.5 1214.02 L1758.92 1214.02 L1758.33 1214.02 L1757.74 1214.02 L1757.16 1214.02 L1756.57 1214.02 L1755.99 1214.02 L1755.4 1214.02 L1754.81 1214.02 L1754.23 1214.02 L1753.64 1214.02 L1753.05 1214.02 L1752.47 1214.02 L1751.88 1214.02 L1751.29 1214.02 L1750.71 1214.02 L1750.12 1214.02 L1749.53 1214.02 L1748.95 1214.02 L1748.36 1214.02 L1747.78 1214.02 L1747.19 1214.02 L1746.6 1214.02 L1746.02 1214.02 L1745.43 1214.02 L1744.84 1214.02 L1744.26 1214.02 L1743.67 1214.02 L1743.08 1214.02 L1742.5 1214.02 L1741.91 1214.02 L1741.32 1214.02 L1740.74 1214.02 L1740.15 1214.02 L1739.57 1214.02 L1738.98 1214.02 L1738.39 1214.02 L1737.81 1214.02 L1737.22 1214.02 L1736.63 1214.02 L1736.05 1214.02 L1735.46 1214.02 L1734.87 1214.02 L1734.29 1214.02 L1733.7 1214.02 L1733.11 1214.02 L1732.53 1214.02 L1731.94 1214.02 L1731.36 1214.02 L1730.77 1214.02 L1730.18 1214.02 L1729.6 1214.02 L1729.01 1214.02 L1728.42 1214.02 L1727.84 1214.02 L1727.25 1214.02 L1726.66 1214.02 L1726.08 1214.02 L1725.49 1214.02 L1724.91 1214.02 L1724.32 1214.02 L1723.73 1214.02 L1723.15 1214.02 L1722.56 1214.02 L1721.97 1214.02 L1721.39 1214.02 L1720.8 1214.02 L1720.21 1214.02 L1719.63 1214.02 L1719.04 1214.02 L1718.45 1214.02 L1717.87 1214.02 L1717.28 1214.02 L1716.7 1214.02 L1716.11 1214.02 L1715.52 1214.02 L1714.94 1214.02 L1714.35 1214.02 L1713.76 1214.02 L1713.18 1214.02 L1712.59 1214.02 L1712 1214.02 L1711.42 1214.02 L1710.83 1214.02 L1710.24 1214.02 L1709.66 1214.02 L1709.07 1214.02 L1708.49 1214.02 L1707.9 1214.02 L1707.31 1214.02 L1706.73 1214.02 L1706.14 1214.02 L1705.55 1214.02 L1704.97 1214.02 L1704.38 1214.02 L1703.79 1214.02 L1703.21 1214.02 L1702.62 1214.02 L1702.04 1214.02 L1701.45 1214.02 L1700.86 1214.02 L1700.28 1214.02 L1699.69 1214.02 L1699.1 1214.02 L1698.52 1214.02 L1697.93 1214.02 L1697.34 1214.02 L1696.76 1214.02 L1696.17 1214.02 L1695.58 1214.02 L1695 1214.02 L1694.41 1214.02 L1693.83 1214.02 L1693.24 1214.02 L1692.65 1214.02 L1692.07 1214.02 L1691.48 1214.02 L1690.89 1214.02 L1690.31 1214.02 L1689.72 1214.02 L1689.13 1214.02 L1688.55 1214.02 L1687.96 1214.02 L1687.37 1214.02 L1686.79 1214.02 L1686.2 1214.02 L1685.62 1214.02 L1685.03 1214.02 L1684.44 1214.02 L1683.86 1214.02 L1683.27 1214.02 L1682.68 1214.02 L1682.1 1214.02 L1681.51 1214.02 L1680.92 1214.02 L1680.34 1214.02 L1679.75 1214.02 L1679.17 1214.02 L1678.58 1214.02 L1677.99 1214.02 L1677.41 1214.02 L1676.82 1214.02 L1676.23 1214.02 L1675.65 1214.02 L1675.06 1214.02 L1674.47 1214.02 L1673.89 1214.02 L1673.3 1214.02 L1672.71 1214.02 L1672.13 1214.02 L1671.54 1214.02 L1670.96 1214.02 L1670.37 1214.02 L1669.78 1214.02 L1669.2 1214.02 L1668.61 1214.02 L1668.02 1214.02 L1667.44 1214.02 L1666.85 1214.02 L1666.26 1214.02 L1665.68 1214.02 L1665.09 1214.02 L1664.5 1214.02 L1663.92 1214.02 L1663.33 1214.02 L1662.75 1214.02 L1662.16 1214.02 L1661.57 1214.02 L1660.99 1214.02 L1660.4 1214.02 L1659.81 1214.02 L1659.23 1214.02 L1658.64 1214.02 L1658.05 1214.02 L1657.47 1214.02 L1656.88 1214.02 L1656.29 1214.02 L1655.71 1214.02 L1655.12 1214.02 L1654.54 1214.02 L1653.95 1214.02 L1653.36 1214.02 L1652.78 1214.02 L1652.19 1214.02 L1651.6 1214.02 L1651.02 1214.02 L1650.43 1214.02 L1649.84 1214.02 L1649.26 1214.02 L1648.67 1214.02 L1648.09 1214.02 L1647.5 1214.02 L1646.91 1214.02 L1646.33 1214.02 L1645.74 1214.02 L1645.15 1214.02 L1644.57 1214.02 L1643.98 1214.02 L1643.39 1214.02 L1642.81 1214.02 L1642.22 1214.02 L1641.63 1214.02 L1641.05 1214.02 L1640.46 1214.02 L1639.88 1214.02 L1639.29 1214.02 L1638.7 1214.02 L1638.12 1214.02 L1637.53 1214.02 L1636.94 1214.02 L1636.36 1214.02 L1635.77 1214.02 L1635.18 1214.02 L1634.6 1214.02 L1634.01 1214.02 L1633.42 1214.02 L1632.84 1214.02 L1632.25 1214.02 L1631.67 1214.02 L1631.08 1214.02 L1630.49 1214.02 L1629.91 1214.02 L1629.32 1214.02 L1628.73 1214.02 L1628.15 1214.02 L1627.56 1214.02 L1626.97 1214.02 L1626.39 1214.02 L1625.8 1214.02 L1625.22 1214.02 L1624.63 1214.02 L1624.04 1214.02 L1623.46 1214.02 L1622.87 1214.02 L1622.28 1214.02 L1621.7 1214.02 L1621.11 1214.02 L1620.52 1214.02 L1619.94 1214.02 L1619.35 1214.02 L1618.76 1214.02 L1618.18 1214.02 L1617.59 1214.02 L1617.01 1214.02 L1616.42 1214.02 L1615.83 1214.02 L1615.25 1214.02 L1614.66 1214.02 L1614.07 1214.02 L1613.49 1214.02 L1612.9 1214.02 L1612.31 1214.02 L1611.73 1214.02 L1611.14 1214.02 L1610.55 1214.02 L1609.97 1214.02 L1609.38 1214.02 L1608.8 1214.02 L1608.21 1214.02 L1607.62 1214.02 L1607.04 1214.02 L1606.45 1214.02 L1605.86 1214.02 L1605.28 1214.02 L1604.69 1214.02 L1604.1 1214.02 L1603.52 1214.02 L1602.93 1214.02 L1602.34 1214.02 L1601.76 1214.02 L1601.17 1214.02 L1600.59 1214.02 L1600 1214.02 L1599.41 1214.02 L1598.83 1214.02 L1598.24 1214.02 L1597.65 1214.02 L1597.07 1214.02 L1596.48 1214.02 L1595.89 1214.02 L1595.31 1214.02 L1594.72 1214.02 L1594.14 1214.02 L1593.55 1214.02 L1592.96 1214.02 L1592.38 1214.02 L1591.79 1214.02 L1591.2 1214.02 L1590.62 1214.02 L1590.03 1214.02 L1589.44 1214.02 L1588.86 1214.02 L1588.27 1214.02 L1587.68 1214.02 L1587.1 1214.02 L1586.51 1214.02 L1585.93 1214.02 L1585.34 1214.02 L1584.75 1214.02 L1584.17 1214.02 L1583.58 1214.02 L1582.99 1214.02 L1582.41 1214.02 L1581.82 1214.02 L1581.23 1214.02 L1580.65 1214.02 L1580.06 1214.02 L1579.47 1214.02 L1578.89 1214.02 L1578.3 1214.02 L1577.72 1214.02 L1577.13 1214.02 L1576.54 1214.02 L1575.96 1214.02 L1575.37 1214.02 L1574.78 1214.02 L1574.2 1214.02 L1573.61 1214.02 L1573.02 1214.02 L1572.44 1214.02 L1571.85 1214.02 L1571.27 1214.02 L1570.68 1214.02 L1570.09 1214.02 L1569.51 1214.02 L1568.92 1214.02 L1568.33 1214.02 L1567.75 1214.02 L1567.16 1214.02 L1566.57 1214.02 L1565.99 1214.02 L1565.4 1214.02 L1564.81 1214.02 L1564.23 1214.02 L1563.64 1214.02 L1563.06 1214.02 L1562.47 1214.02 L1561.88 1214.02 L1561.3 1214.02 L1560.71 1214.02 L1560.12 1214.02 L1559.54 1214.02 L1558.95 1214.02 L1558.36 1214.02 L1557.78 1214.02 L1557.19 1214.02 L1556.6 1214.02 L1556.02 1214.02 L1555.43 1214.02 L1554.85 1214.02 L1554.26 1214.02 L1553.67 1214.02 L1553.09 1214.02 L1552.5 1214.02 L1551.91 1214.02 L1551.33 1214.02 L1550.74 1214.02 L1550.15 1214.02 L1549.57 1214.02 L1548.98 1214.02 L1548.4 1214.02 L1547.81 1214.02 L1547.22 1214.02 L1546.64 1214.02 L1546.05 1214.02 L1545.46 1214.02 L1544.88 1214.02 L1544.29 1214.02 L1543.7 1214.02 L1543.12 1214.02 L1542.53 1214.02 L1541.94 1214.02 L1541.36 1214.02 L1540.77 1214.02 L1540.19 1214.02 L1539.6 1214.02 L1539.01 1214.02 L1538.43 1214.02 L1537.84 1214.02 L1537.25 1214.02 L1536.67 1214.02 L1536.08 1214.02 L1535.49 1214.02 L1534.91 1214.02 L1534.32 1214.02 L1533.73 1214.02 L1533.15 1214.02 L1532.56 1214.02 L1531.98 1214.02 L1531.39 1214.02 L1530.8 1214.02 L1530.22 1214.02 L1529.63 1214.02 L1529.04 1214.02 L1528.46 1214.02 L1527.87 1214.02 L1527.28 1214.02 L1526.7 1214.02 L1526.11 1214.02 L1525.52 1214.02 L1524.94 1214.02 L1524.35 1214.02 L1523.77 1214.02 L1523.18 1214.02 L1522.59 1214.02 L1522.01 1214.02 L1521.42 1214.02 L1520.83 1214.02 L1520.25 1214.02 L1519.66 1214.02 L1519.07 1214.02 L1518.49 1214.02 L1517.9 1214.02 L1517.32 1214.02 L1516.73 1214.02 L1516.14 1214.02 L1515.56 1214.02 L1514.97 1214.02 L1514.38 1214.02 L1513.8 1214.02 L1513.21 1214.02 L1512.62 1214.02 L1512.04 1214.02 L1511.45 1214.02 L1510.86 1214.02 L1510.28 1214.02 L1509.69 1214.02 L1509.11 1214.02 L1508.52 1214.02 L1507.93 1214.02 L1507.35 1214.02 L1506.76 1214.02 L1506.17 1214.02 L1505.59 1214.02 L1505 1214.02 L1504.41 1214.02 L1503.83 1214.02 L1503.24 1214.02 L1502.65 1214.02 L1502.07 1214.02 L1501.48 1214.02 L1500.9 1214.02 L1500.31 1214.02 L1499.72 1214.02 L1499.14 1214.02 L1498.55 1214.02 L1497.96 1214.02 L1497.38 1214.02 L1496.79 1214.02 L1496.2 1214.02 L1495.62 1214.02 L1495.03 1214.02 L1494.45 1214.02 L1493.86 1214.02 L1493.27 1214.02 L1492.69 1214.02 L1492.1 1214.02 L1491.51 1214.02 L1490.93 1214.02 L1490.34 1214.02 L1489.75 1214.02 L1489.17 1214.02 L1488.58 1214.02 L1487.99 1214.02 L1487.41 1214.02 L1486.82 1214.02 L1486.24 1214.02 L1485.65 1214.02 L1485.06 1214.02 L1484.48 1214.02 L1483.89 1214.02 L1483.3 1214.02 L1482.72 1214.02 L1482.13 1214.02 L1481.54 1214.02 L1480.96 1214.02 L1480.37 1214.02 L1479.78 1214.02 L1479.2 1214.02 L1478.61 1214.02 L1478.03 1214.02 L1477.44 1214.02 L1476.85 1214.02 L1476.27 1214.02 L1475.68 1214.02 L1475.09 1214.02 L1474.51 1214.02 L1473.92 1214.02 L1473.33 1214.02 L1472.75 1214.02 L1472.16 1214.02 L1471.57 1214.02 L1470.99 1214.02 L1470.4 1214.02 L1469.82 1214.02 L1469.23 1214.02 L1468.64 1214.02 L1468.06 1214.02 L1467.47 1214.02 L1466.88 1214.02 L1466.3 1214.02 L1465.71 1214.02 L1465.12 1214.02 L1464.54 1214.02 L1463.95 1214.02 L1463.37 1214.02 L1462.78 1214.02 L1462.19 1214.02 L1461.61 1214.02 L1461.02 1214.02 L1460.43 1214.02 L1459.85 1214.02 L1459.26 1214.02 L1458.67 1214.02 L1458.09 1214.02 L1457.5 1214.02 L1456.91 1214.02 L1456.33 1214.02 L1455.74 1214.02 L1455.16 1214.02 L1454.57 1214.02 L1453.98 1214.02 L1453.4 1214.02 L1452.81 1214.02 L1452.22 1214.02 L1451.64 1214.02 L1451.05 1214.02 L1450.46 1214.02 L1449.88 1214.02 L1449.29 1214.02 L1448.7 1214.02 L1448.12 1214.02 L1447.53 1214.02 L1446.95 1214.02 L1446.36 1214.02 L1445.77 1214.02 L1445.19 1214.02 L1444.6 1214.02 L1444.01 1214.02 L1443.43 1214.02 L1442.84 1214.02 L1442.25 1214.02 L1441.67 1214.02 L1441.08 1214.02 L1440.5 1214.02 L1439.91 1214.02 L1439.32 1214.02 L1438.74 1214.02 L1438.15 1214.02 L1437.56 1214.02 L1436.98 1214.02 L1436.39 1214.02 L1435.8 1214.02 L1435.22 1214.02 L1434.63 1214.02 L1434.04 1214.02 L1433.46 1214.02 L1432.87 1214.02 L1432.29 1214.02 L1431.7 1214.02 L1431.11 1214.02 L1430.53 1214.02 L1429.94 1214.02 L1429.35 1214.02 L1428.77 1214.02 L1428.18 1214.02 L1427.59 1214.02 L1427.01 1214.02 L1426.42 1214.02 L1425.83 1214.02 L1425.25 1214.02 L1424.66 1214.02 L1424.08 1214.02 L1423.49 1214.02 L1422.9 1214.02 L1422.32 1214.02 L1421.73 1214.02 L1421.14 1214.02 L1420.56 1214.02 L1419.97 1214.02 L1419.38 1214.02 L1418.8 1214.02 L1418.21 1214.02 L1417.63 1214.02 L1417.04 1214.02 L1416.45 1214.02 L1415.87 1214.02 L1415.28 1214.02 L1414.69 1214.02 L1414.11 1214.02 L1413.52 1214.02 L1412.93 1214.02 L1412.35 1214.02 L1411.76 1214.02 L1411.17 1214.02 L1410.59 1214.02 L1410 1214.02 L1409.42 1214.02 L1408.83 1214.02 L1408.24 1214.02 L1407.66 1214.02 L1407.07 1214.02 L1406.48 1214.02 L1405.9 1214.02 L1405.31 1214.02 L1404.72 1214.02 L1404.14 1214.02 L1403.55 1214.02 L1402.96 1214.02 L1402.38 1214.02 L1401.79 1214.02 L1401.21 1214.02 L1400.62 1214.02 L1400.03 1214.02 L1399.45 1214.02 L1398.86 1214.02 L1398.27 1214.02 L1397.69 1214.02 L1397.1 1214.02 L1396.51 1214.02 L1395.93 1214.02 L1395.34 1214.02 L1394.75 1214.02 L1394.17 1214.02 L1393.58 1214.02 L1393 1214.02 L1392.41 1214.02 L1391.82 1214.02 L1391.24 1214.02 L1390.65 1214.02 L1390.06 1214.02 L1389.48 1214.02 L1388.89 1214.02 L1388.3 1214.02 L1387.72 1214.02 L1387.13 1214.02 L1386.55 1214.02 L1385.96 1214.02 L1385.37 1214.02 L1384.79 1214.02 L1384.2 1214.02 L1383.61 1214.02 L1383.03 1214.02 L1382.44 1214.02 L1381.85 1214.02 L1381.27 1214.02 L1380.68 1214.02 L1380.09 1214.02 L1379.51 1214.02 L1378.92 1214.02 L1378.34 1214.02 L1377.75 1214.02 L1377.16 1214.02 L1376.58 1214.02 L1375.99 1214.02 L1375.4 1214.02 L1374.82 1214.02 L1374.23 1214.02 L1373.64 1214.02 L1373.06 1214.02 L1372.47 1214.02 L1371.88 1214.02 L1371.3 1214.02 L1370.71 1214.02 L1370.13 1214.02 L1369.54 1214.02 L1368.95 1214.02 L1368.37 1214.02 L1367.78 1214.02 L1367.19 1214.02 L1366.61 1214.02 L1366.02 1214.02 L1365.43 1214.02 L1364.85 1214.02 L1364.26 1214.02 L1363.68 1214.02 L1363.09 1214.02 L1362.5 1214.02 L1361.92 1214.02 L1361.33 1214.02 L1360.74 1214.02 L1360.16 1214.02 L1359.57 1214.02 L1358.98 1214.02 L1358.4 1214.02 L1357.81 1214.02 L1357.22 1214.02 L1356.64 1214.02 L1356.05 1214.02 L1355.47 1214.02 L1354.88 1214.02 L1354.29 1214.02 L1353.71 1214.02 L1353.12 1214.02 L1352.53 1214.02 L1351.95 1214.02 L1351.36 1214.02 L1350.77 1214.02 L1350.19 1214.02 L1349.6 1214.02 L1349.01 1214.02 L1348.43 1214.02 L1347.84 1214.02 L1347.26 1214.02 L1346.67 1214.02 L1346.08 1214.02 L1345.5 1214.02 L1344.91 1214.02 L1344.32 1214.02 L1343.74 1214.02 L1343.15 1214.02 L1342.56 1214.02 L1341.98 1214.02 L1341.39 1214.02 L1340.8 1214.02 L1340.22 1214.02 L1339.63 1214.02 L1339.05 1214.02 L1338.46 1214.02 L1337.87 1214.02 L1337.29 1214.02 L1336.7 1214.02 L1336.11 1214.02 L1335.53 1214.02 L1334.94 1214.02 L1334.35 1214.02 L1333.77 1214.02 L1333.18 1214.02 L1332.6 1214.02 L1332.01 1214.02 L1331.42 1214.02 L1330.84 1214.02 L1330.25 1214.02 L1329.66 1214.02 L1329.08 1214.02 L1328.49 1214.02 L1327.9 1214.02 L1327.32 1214.02 L1326.73 1214.02 L1326.14 1214.02 L1325.56 1214.02 L1324.97 1214.02 L1324.39 1214.02 L1323.8 1214.02 L1323.21 1214.02 L1322.63 1214.02 L1322.04 1214.02 L1321.45 1214.02 L1320.87 1214.02 L1320.28 1214.02 L1319.69 1214.02 L1319.11 1214.02 L1318.52 1214.02 L1317.93 1214.02 L1317.35 1214.02 L1316.76 1214.02 L1316.18 1214.02 L1315.59 1214.02 L1315 1214.02 L1314.42 1214.02 L1313.83 1214.02 L1313.24 1214.02 L1312.66 1214.02 L1312.07 1214.02 L1311.48 1214.02 L1310.9 1214.02 L1310.31 1214.02 L1309.73 1214.02 L1309.14 1214.02 L1308.55 1214.02 L1307.97 1214.02 L1307.38 1214.02 L1306.79 1214.02 L1306.21 1214.02 L1305.62 1214.02 L1305.03 1214.02 L1304.45 1214.02 L1303.86 1214.02 L1303.27 1214.02 L1302.69 1214.02 L1302.1 1214.02 L1301.52 1214.02 L1300.93 1214.02 L1300.34 1214.02 L1299.76 1214.02 L1299.17 1214.02 L1298.58 1214.02 L1298 1214.02 L1297.41 1214.02 L1296.82 1214.02 L1296.24 1214.02 L1295.65 1214.02 L1295.06 1214.02 L1294.48 1214.02 L1293.89 1214.02 L1293.31 1214.02 L1292.72 1214.02 L1292.13 1214.02 L1291.55 1214.02 L1290.96 1214.02 L1290.37 1214.02 L1289.79 1214.02 L1289.2 1214.02 L1288.61 1214.02 L1288.03 1214.02 L1287.44 1214.02 L1286.86 1214.02 L1286.27 1214.02 L1285.68 1214.02 L1285.1 1214.02 L1284.51 1214.02 L1283.92 1214.02 L1283.34 1214.02 L1282.75 1214.02 L1282.16 1214.02 L1281.58 1214.02 L1280.99 1214.02 L1280.4 1214.02 L1279.82 1214.02 L1279.23 1214.02 L1278.65 1214.02 L1278.06 1214.02 L1277.47 1214.02 L1276.89 1214.02 L1276.3 1214.02 L1275.71 1214.02 L1275.13 1214.02 L1274.54 1214.02 L1273.95 1214.02 L1273.37 1214.02 L1272.78 1214.02 L1272.19 1214.02 L1271.61 1214.02 L1271.02 1214.02 L1270.44 1214.02 L1269.85 1214.02 L1269.26 1214.02 L1268.68 1214.02 L1268.09 1214.02 L1267.5 1214.02 L1266.92 1214.02 L1266.33 1214.02 L1265.74 1214.02 L1265.16 1214.02 L1264.57 1214.02 L1263.98 1214.02 L1263.4 1214.02 L1262.81 1214.02 L1262.23 1214.02 L1261.64 1214.02 L1261.05 1214.02 L1260.47 1214.02 L1259.88 1214.02 L1259.29 1214.02 L1258.71 1214.02 L1258.12 1214.02 L1257.53 1214.02 L1256.95 1214.02 L1256.36 1214.02 L1255.78 1214.02 L1255.19 1214.02 L1254.6 1214.02 L1254.02 1214.02 L1253.43 1214.02 L1252.84 1214.02 L1252.26 1214.02 L1251.67 1214.02 L1251.08 1214.02 L1250.5 1214.02 L1249.91 1214.02 L1249.32 1214.02 L1248.74 1214.02 L1248.15 1214.02 L1247.57 1214.02 L1246.98 1214.02 L1246.39 1214.02 L1245.81 1214.02 L1245.22 1214.02 L1244.63 1214.02 L1244.05 1214.02 L1243.46 1214.02 L1242.87 1214.02 L1242.29 1214.02 L1241.7 1214.02 L1241.11 1214.02 L1240.53 1214.02 L1239.94 1214.02 L1239.36 1214.02 L1238.77 1214.02 L1238.18 1214.02 L1237.6 1214.02 L1237.01 1214.02 L1236.42 1214.02 L1235.84 1214.02 L1235.25 1214.02 L1234.66 1214.02 L1234.08 1214.02 L1233.49 1214.02 L1232.91 1214.02 L1232.32 1214.02 L1231.73 1214.02 L1231.15 1214.02 L1230.56 1214.02 L1229.97 1214.02 L1229.39 1214.02 L1228.8 1214.02 L1228.21 1214.02 L1227.63 1214.02 L1227.04 1214.02 L1226.45 1214.02 L1225.87 1214.02 L1225.28 1214.02 L1224.7 1214.02 L1224.11 1214.02 L1223.52 1214.02 L1222.94 1214.02 L1222.35 1214.02 L1221.76 1214.02 L1221.18 1214.02 L1220.59 1214.02 L1220 1214.02 L1219.42 1214.02 L1218.83 1214.02 L1218.24 1214.02 L1217.66 1214.02 L1217.07 1214.02 L1216.49 1214.02 L1215.9 1214.02 L1215.31 1214.02 L1214.73 1214.02 L1214.14 1214.02 L1213.55 1214.02 L1212.97 1214.02 L1212.38 1214.02 L1211.79 1214.02 L1211.21 1214.02 L1210.62 1214.02 L1210.03 1214.02 L1209.45 1214.02 L1208.86 1214.02 L1208.28 1214.02 L1207.69 1214.02 L1207.1 1214.02 L1206.52 1214.02 L1205.93 1214.02 L1205.34 1214.02 L1204.76 1214.02 L1204.17 1214.02 L1203.58 1214.02 L1203 1214.02 L1202.41 1214.02 L1201.83 1214.02 L1201.24 1214.02 L1200.65 1214.02 L1200.07 1214.02 L1199.48 1214.02 L1198.89 1214.02 L1198.31 1214.02 L1197.72 1214.02 L1197.13 1214.02 L1196.55 1214.02 L1195.96 1214.02 L1195.37 1214.02 L1194.79 1214.02 L1194.2 1214.02 L1193.62 1214.02 L1193.03 1214.02 L1192.44 1214.02 L1191.86 1214.02 L1191.27 1214.02 L1190.68 1214.02 L1190.1 1214.02 L1189.51 1214.02 L1188.92 1214.02 L1188.34 1214.02 L1187.75 1214.02 L1187.16 1214.02 L1186.58 1214.02 L1185.99 1214.02 L1185.41 1214.02 L1184.82 1214.02 L1184.23 1214.02 L1183.65 1214.02 L1183.06 1214.02 L1182.47 1214.02 L1181.89 1214.02 L1181.3 1214.02 L1180.71 1214.02 L1180.13 1214.02 L1179.54 1214.02 L1178.96 1214.02 L1178.37 1214.02 L1177.78 1214.02 L1177.2 1214.02 L1176.61 1214.02 L1176.02 1214.02 L1175.44 1214.02 L1174.85 1214.02 L1174.26 1214.02 L1173.68 1214.02 L1173.09 1214.02 L1172.5 1214.02 L1171.92 1214.02 L1171.33 1214.02 L1170.75 1214.02 L1170.16 1214.02 L1169.57 1214.02 L1168.99 1214.02 L1168.4 1214.02 L1167.81 1214.02 L1167.23 1214.02 L1166.64 1214.02 L1166.05 1214.02 L1165.47 1214.02 L1164.88 1214.02 L1164.29 1214.02 L1163.71 1214.02 L1163.12 1214.02 L1162.54 1214.02 L1161.95 1214.02 L1161.36 1214.02 L1160.78 1214.02 L1160.19 1214.02 L1159.6 1214.02 L1159.02 1214.02 L1158.43 1214.02 L1157.84 1214.02 L1157.26 1214.02 L1156.67 1214.02 L1156.09 1214.02 L1155.5 1214.02 L1154.91 1214.02 L1154.33 1214.02 L1153.74 1214.02 L1153.15 1214.02 L1152.57 1214.02 L1151.98 1214.02 L1151.39 1214.02 L1150.81 1214.02 L1150.22 1214.02 L1149.63 1214.02 L1149.05 1214.02 L1148.46 1214.02 L1147.88 1214.02 L1147.29 1214.02 L1146.7 1214.02 L1146.12 1214.02 L1145.53 1214.02 L1144.94 1214.02 L1144.36 1214.02 L1143.77 1214.02 L1143.18 1214.02 L1142.6 1214.02 L1142.01 1214.02 L1141.42 1214.02 L1140.84 1214.02 L1140.25 1214.02 L1139.67 1214.02 L1139.08 1214.02 L1138.49 1214.02 L1137.91 1214.02 L1137.32 1214.02 L1136.73 1214.02 L1136.15 1214.02 L1135.56 1214.02 L1134.97 1214.02 L1134.39 1214.02 L1133.8 1214.02 L1133.21 1214.02 L1132.63 1214.02 L1132.04 1214.02 L1131.46 1214.02 L1130.87 1214.02 L1130.28 1214.02 L1129.7 1214.02 L1129.11 1214.02 L1128.52 1214.02 L1127.94 1214.02 L1127.35 1214.02 L1126.76 1214.02 L1126.18 1214.02 L1125.59 1214.02 L1125.01 1214.02 L1124.42 1214.02 L1123.83 1214.02 L1123.25 1214.02 L1122.66 1214.02 L1122.07 1214.02 L1121.49 1214.02 L1120.9 1214.02 L1120.31 1214.02 L1119.73 1214.02 L1119.14 1214.02 L1118.55 1214.02 L1117.97 1214.02 L1117.38 1214.02 L1116.8 1214.02 L1116.21 1214.02 L1115.62 1214.02 L1115.04 1214.02 L1114.45 1214.02 L1113.86 1214.02 L1113.28 1214.02 L1112.69 1214.02 L1112.1 1214.02 L1111.52 1214.02 L1110.93 1214.02 L1110.34 1214.02 L1109.76 1214.02 L1109.17 1214.02 L1108.59 1214.02 L1108 1214.02 L1107.41 1214.02 L1106.83 1214.02 L1106.24 1214.02 L1105.65 1214.02 L1105.07 1214.02 L1104.48 1214.02 L1103.89 1214.02 L1103.31 1214.02 L1102.72 1214.02 L1102.14 1214.02 L1101.55 1214.02 L1100.96 1214.02 L1100.38 1214.02 L1099.79 1214.02 L1099.2 1214.02 L1098.62 1214.02 L1098.03 1214.02 L1097.44 1214.02 L1096.86 1214.02 L1096.27 1214.02 L1095.68 1214.02 L1095.1 1214.02 L1094.51 1214.02 L1093.93 1214.02 L1093.34 1214.02 L1092.75 1214.02 L1092.17 1214.02 L1091.58 1214.02 L1090.99 1214.02 L1090.41 1214.02 L1089.82 1214.02 L1089.23 1214.02 L1088.65 1214.02 L1088.06 1214.02 L1087.47 1214.02 L1086.89 1214.02 L1086.3 1214.02 L1085.72 1214.02 L1085.13 1214.02 L1084.54 1214.02 L1083.96 1214.02 L1083.37 1214.02 L1082.78 1214.02 L1082.2 1214.02 L1081.61 1214.02 L1081.02 1214.02 L1080.44 1214.02 L1079.85 1214.02 L1079.26 1214.02 L1078.68 1214.02 L1078.09 1214.02 L1077.51 1214.02 L1076.92 1214.02 L1076.33 1214.02 L1075.75 1214.02 L1075.16 1214.02 L1074.57 1214.02 L1073.99 1214.02 L1073.4 1214.02 L1072.81 1214.02 L1072.23 1214.02 L1071.64 1214.02 L1071.06 1214.02 L1070.47 1214.02 L1069.88 1214.02 L1069.3 1214.02 L1068.71 1214.02 L1068.12 1214.02 L1067.54 1214.02 L1066.95 1214.02 L1066.36 1214.02 L1065.78 1214.02 L1065.19 1214.02 L1064.6 1214.02 L1064.02 1214.02 L1063.43 1214.02 L1062.85 1214.02 L1062.26 1214.02 L1061.67 1214.02 L1061.09 1214.02 L1060.5 1214.02 L1059.91 1214.02 L1059.33 1214.02 L1058.74 1214.02 L1058.15 1214.02 L1057.57 1214.02 L1056.98 1214.02 L1056.39 1214.02 L1055.81 1214.02 L1055.22 1214.02 L1054.64 1214.02 L1054.05 1214.02 L1053.46 1214.02 L1052.88 1214.02 L1052.29 1214.02 L1051.7 1214.02 L1051.12 1214.02 L1050.53 1214.02 L1049.94 1214.02 L1049.36 1214.02 L1048.77 1214.02 L1048.19 1214.02 L1047.6 1214.02 L1047.01 1214.02 L1046.43 1214.02 L1045.84 1214.02 L1045.25 1214.02 L1044.67 1214.02 L1044.08 1214.02 L1043.49 1214.02 L1042.91 1214.02 L1042.32 1214.02 L1041.73 1214.02 L1041.15 1214.02 L1040.56 1214.02 L1039.98 1214.02 L1039.39 1214.02 L1038.8 1214.02 L1038.22 1214.02 L1037.63 1214.02 L1037.04 1214.02 L1036.46 1214.02 L1035.87 1214.02 L1035.28 1214.02 L1034.7 1214.02 L1034.11 1214.02 L1033.52 1214.02 L1032.94 1214.02 L1032.35 1214.02 L1031.77 1214.02 L1031.18 1214.02 L1030.59 1214.02 L1030.01 1214.02 L1029.42 1214.02 L1028.83 1214.02 L1028.25 1214.02 L1027.66 1214.02 L1027.07 1214.02 L1026.49 1214.02 L1025.9 1214.02 L1025.32 1214.02 L1024.73 1214.02 L1024.14 1214.02 L1023.56 1214.02 L1022.97 1214.02 L1022.38 1214.02 L1021.8 1214.02 L1021.21 1214.02 L1020.62 1214.02 L1020.04 1214.02 L1019.45 1214.02 L1018.86 1214.02 L1018.28 1214.02 L1017.69 1214.02 L1017.11 1214.02 L1016.52 1214.02 L1015.93 1214.02 L1015.35 1214.02 L1014.76 1214.02 L1014.17 1214.02 L1013.59 1214.02 L1013 1214.02 L1012.41 1214.02 L1011.83 1214.02 L1011.24 1214.02 L1010.65 1214.02 L1010.07 1214.02 L1009.48 1214.02 L1008.9 1214.02 L1008.31 1214.02 L1007.72 1214.02 L1007.14 1214.02 L1006.55 1214.02 L1005.96 1214.02 L1005.38 1214.02 L1004.79 1214.02 L1004.2 1214.02 L1003.62 1214.02 L1003.03 1214.02 L1002.44 1214.02 L1001.86 1214.02 L1001.27 1214.02 L1000.69 1214.02 L1000.1 1214.02 L999.513 1214.02 L998.926 1214.02 L998.34 1214.02 L997.754 1214.02 L997.167 1214.02 L996.581 1214.02 L995.994 1214.02 L995.408 1214.02 L994.822 1214.02 L994.235 1214.02 L993.649 1214.02 L993.062 1214.02 L992.476 1214.02 L991.889 1214.02 L991.303 1214.02 L990.717 1214.02 L990.13 1214.02 L989.544 1214.02 L988.957 1214.02 L988.371 1214.02 L987.785 1214.02 L987.198 1214.02 L986.612 1214.02 L986.025 1214.02  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.33 986.612,1214.33 987.198,1214.33 987.785,1214.33 988.371,1214.33 988.957,1214.33 989.544,1214.33 990.13,1214.33 990.717,1214.33 991.303,1214.33 991.889,1214.33 992.476,1214.33 993.062,1214.33 993.649,1214.33 994.235,1214.33 994.822,1214.33 995.408,1214.33 995.994,1214.33 996.581,1214.33 997.167,1214.33 997.754,1214.33 998.34,1214.33 998.926,1214.33 999.513,1214.33 1000.1,1214.33 1000.69,1214.33 1001.27,1214.33 1001.86,1214.33 1002.44,1214.33 1003.03,1214.33 1003.62,1214.33 1004.2,1214.33 1004.79,1214.33 1005.38,1214.33 1005.96,1214.33 1006.55,1214.33 1007.14,1214.33 1007.72,1214.33 1008.31,1214.33 1008.9,1214.33 1009.48,1214.33 1010.07,1214.33 1010.65,1214.33 1011.24,1214.33 1011.83,1214.33 1012.41,1214.33 1013,1214.33 1013.59,1214.33 1014.17,1214.33 1014.76,1214.33 1015.35,1214.33 1015.93,1214.33 1016.52,1214.33 1017.11,1214.33 1017.69,1214.33 1018.28,1214.33 1018.86,1214.33 1019.45,1214.33 1020.04,1214.33 1020.62,1214.33 1021.21,1214.33 1021.8,1214.33 1022.38,1214.33 1022.97,1214.33 1023.56,1214.33 1024.14,1214.33 1024.73,1214.33 1025.32,1214.33 1025.9,1214.33 1026.49,1214.33 1027.07,1214.33 1027.66,1214.33 1028.25,1214.33 1028.83,1214.33 1029.42,1214.33 1030.01,1214.33 1030.59,1214.33 1031.18,1214.33 1031.77,1214.33 1032.35,1214.33 1032.94,1214.33 1033.52,1214.33 1034.11,1214.33 1034.7,1214.33 1035.28,1214.33 1035.87,1214.33 1036.46,1214.33 1037.04,1214.33 1037.63,1214.33 1038.22,1214.33 1038.8,1214.33 1039.39,1214.33 1039.98,1214.33 1040.56,1214.33 1041.15,1214.33 1041.73,1214.33 1042.32,1214.33 1042.91,1214.33 1043.49,1214.33 1044.08,1214.33 1044.67,1214.33 1045.25,1214.33 1045.84,1214.33 1046.43,1214.33 1047.01,1214.33 1047.6,1214.33 1048.19,1214.33 1048.77,1214.33 1049.36,1214.33 1049.94,1214.33 1050.53,1214.33 1051.12,1214.33 1051.7,1214.33 1052.29,1214.33 1052.88,1214.33 1053.46,1214.33 1054.05,1214.33 1054.64,1214.33 1055.22,1214.33 1055.81,1214.33 1056.39,1214.33 1056.98,1214.33 1057.57,1214.33 1058.15,1214.33 1058.74,1214.33 1059.33,1214.33 1059.91,1214.33 1060.5,1214.33 1061.09,1214.33 1061.67,1214.33 1062.26,1214.33 1062.85,1214.33 1063.43,1214.33 1064.02,1214.33 1064.6,1214.33 1065.19,1214.33 1065.78,1214.33 1066.36,1214.33 1066.95,1214.33 1067.54,1214.33 1068.12,1214.33 1068.71,1214.33 1069.3,1214.33 1069.88,1214.33 1070.47,1214.33 1071.06,1214.33 1071.64,1214.33 1072.23,1214.33 1072.81,1214.33 1073.4,1214.33 1073.99,1214.33 1074.57,1214.33 1075.16,1214.33 1075.75,1214.33 1076.33,1214.33 1076.92,1214.33 1077.51,1214.33 1078.09,1214.33 1078.68,1214.33 1079.26,1214.33 1079.85,1214.33 1080.44,1214.33 1081.02,1214.33 1081.61,1214.33 1082.2,1214.33 1082.78,1214.33 1083.37,1214.33 1083.96,1214.33 1084.54,1214.33 1085.13,1214.33 1085.72,1214.33 1086.3,1214.33 1086.89,1214.33 1087.47,1214.33 1088.06,1214.33 1088.65,1214.33 1089.23,1214.33 1089.82,1214.33 1090.41,1214.33 1090.99,1214.33 1091.58,1214.33 1092.17,1214.33 1092.75,1214.33 1093.34,1214.33 1093.93,1214.33 1094.51,1214.33 1095.1,1214.33 1095.68,1214.33 1096.27,1214.33 1096.86,1214.33 1097.44,1214.33 1098.03,1214.33 1098.62,1214.33 1099.2,1214.33 1099.79,1214.33 1100.38,1214.33 1100.96,1214.33 1101.55,1214.33 1102.14,1214.33 1102.72,1214.33 1103.31,1214.33 1103.89,1214.33 1104.48,1214.33 1105.07,1214.33 1105.65,1214.33 1106.24,1214.33 1106.83,1214.33 1107.41,1214.33 1108,1214.33 1108.59,1214.33 1109.17,1214.33 1109.76,1214.33 1110.34,1214.33 1110.93,1214.33 1111.52,1214.33 1112.1,1214.33 1112.69,1214.33 1113.28,1214.33 1113.86,1214.33 1114.45,1214.33 1115.04,1214.33 1115.62,1214.33 1116.21,1214.33 1116.8,1214.33 1117.38,1214.33 1117.97,1214.33 1118.55,1214.33 1119.14,1214.33 1119.73,1214.33 1120.31,1214.33 1120.9,1214.33 1121.49,1214.33 1122.07,1214.33 1122.66,1214.33 1123.25,1214.33 1123.83,1214.33 1124.42,1214.33 1125.01,1214.33 1125.59,1214.33 1126.18,1214.33 1126.76,1214.33 1127.35,1214.33 1127.94,1214.33 1128.52,1214.33 1129.11,1214.33 1129.7,1214.33 1130.28,1214.33 1130.87,1214.33 1131.46,1214.33 1132.04,1214.33 1132.63,1214.33 1133.21,1214.33 1133.8,1214.33 1134.39,1214.33 1134.97,1214.33 1135.56,1214.33 1136.15,1214.33 1136.73,1214.33 1137.32,1214.33 1137.91,1214.33 1138.49,1214.33 1139.08,1214.33 1139.67,1214.33 1140.25,1214.33 1140.84,1214.33 1141.42,1214.33 1142.01,1214.33 1142.6,1214.33 1143.18,1214.33 1143.77,1214.33 1144.36,1214.33 1144.94,1214.33 1145.53,1214.33 1146.12,1214.33 1146.7,1214.33 1147.29,1214.33 1147.88,1214.33 1148.46,1214.33 1149.05,1214.33 1149.63,1214.33 1150.22,1214.33 1150.81,1214.33 1151.39,1214.33 1151.98,1214.33 1152.57,1214.33 1153.15,1214.33 1153.74,1214.33 1154.33,1214.33 1154.91,1214.33 1155.5,1214.33 1156.09,1214.33 1156.67,1214.33 1157.26,1214.33 1157.84,1214.33 1158.43,1214.33 1159.02,1214.33 1159.6,1214.33 1160.19,1214.33 1160.78,1214.33 1161.36,1214.33 1161.95,1214.33 1162.54,1214.33 1163.12,1214.33 1163.71,1214.33 1164.29,1214.33 1164.88,1214.33 1165.47,1214.33 1166.05,1214.33 1166.64,1214.33 1167.23,1214.33 1167.81,1214.33 1168.4,1214.33 1168.99,1214.33 1169.57,1214.33 1170.16,1214.33 1170.75,1214.33 1171.33,1214.33 1171.92,1214.33 1172.5,1214.33 1173.09,1214.33 1173.68,1214.33 1174.26,1214.33 1174.85,1214.33 1175.44,1214.33 1176.02,1214.33 1176.61,1214.33 1177.2,1214.33 1177.78,1214.33 1178.37,1214.33 1178.96,1214.33 1179.54,1214.33 1180.13,1214.33 1180.71,1214.33 1181.3,1214.33 1181.89,1214.33 1182.47,1214.33 1183.06,1214.33 1183.65,1214.33 1184.23,1214.33 1184.82,1214.33 1185.41,1214.33 1185.99,1214.33 1186.58,1214.33 1187.16,1214.33 1187.75,1214.33 1188.34,1214.33 1188.92,1214.33 1189.51,1214.33 1190.1,1214.33 1190.68,1214.33 1191.27,1214.33 1191.86,1214.33 1192.44,1214.33 1193.03,1214.33 1193.62,1214.33 1194.2,1214.33 1194.79,1214.33 1195.37,1214.33 1195.96,1214.33 1196.55,1214.33 1197.13,1214.33 1197.72,1214.33 1198.31,1214.33 1198.89,1214.33 1199.48,1214.33 1200.07,1214.33 1200.65,1214.33 1201.24,1214.33 1201.83,1214.33 1202.41,1214.33 1203,1214.33 1203.58,1214.33 1204.17,1214.33 1204.76,1214.33 1205.34,1214.33 1205.93,1214.33 1206.52,1214.33 1207.1,1214.33 1207.69,1214.33 1208.28,1214.33 1208.86,1214.33 1209.45,1214.33 1210.03,1214.33 1210.62,1214.33 1211.21,1214.33 1211.79,1214.33 1212.38,1214.33 1212.97,1214.33 1213.55,1214.33 1214.14,1214.33 1214.73,1214.33 1215.31,1214.33 1215.9,1214.33 1216.49,1214.33 1217.07,1214.33 1217.66,1214.33 1218.24,1214.33 1218.83,1214.33 1219.42,1214.33 1220,1214.33 1220.59,1214.33 1221.18,1214.33 1221.76,1214.33 1222.35,1214.33 1222.94,1214.33 1223.52,1214.33 1224.11,1214.33 1224.7,1214.33 1225.28,1214.33 1225.87,1214.33 1226.45,1214.33 1227.04,1214.33 1227.63,1214.33 1228.21,1214.33 1228.8,1214.33 1229.39,1214.33 1229.97,1214.33 1230.56,1214.33 1231.15,1214.33 1231.73,1214.33 1232.32,1214.33 1232.91,1214.33 1233.49,1214.33 1234.08,1214.33 1234.66,1214.33 1235.25,1214.33 1235.84,1214.33 1236.42,1214.33 1237.01,1214.33 1237.6,1214.33 1238.18,1214.33 1238.77,1214.33 1239.36,1214.33 1239.94,1214.33 1240.53,1214.33 1241.11,1214.33 1241.7,1214.33 1242.29,1214.33 1242.87,1214.33 1243.46,1214.33 1244.05,1214.33 1244.63,1214.33 1245.22,1214.33 1245.81,1214.33 1246.39,1214.33 1246.98,1214.33 1247.57,1214.33 1248.15,1214.33 1248.74,1214.33 1249.32,1214.33 1249.91,1214.33 1250.5,1214.33 1251.08,1214.33 1251.67,1214.33 1252.26,1214.33 1252.84,1214.33 1253.43,1214.33 1254.02,1214.33 1254.6,1214.33 1255.19,1214.33 1255.78,1214.33 1256.36,1214.33 1256.95,1214.33 1257.53,1214.33 1258.12,1214.33 1258.71,1214.33 1259.29,1214.33 1259.88,1214.33 1260.47,1214.33 1261.05,1214.33 1261.64,1214.33 1262.23,1214.33 1262.81,1214.33 1263.4,1214.33 1263.98,1214.33 1264.57,1214.33 1265.16,1214.33 1265.74,1214.33 1266.33,1214.33 1266.92,1214.33 1267.5,1214.33 1268.09,1214.33 1268.68,1214.33 1269.26,1214.33 1269.85,1214.33 1270.44,1214.33 1271.02,1214.33 1271.61,1214.33 1272.19,1214.33 1272.78,1214.33 1273.37,1214.33 1273.95,1214.33 1274.54,1214.33 1275.13,1214.33 1275.71,1214.33 1276.3,1214.33 1276.89,1214.33 1277.47,1214.33 1278.06,1214.33 1278.65,1214.33 1279.23,1214.33 1279.82,1214.33 1280.4,1214.33 1280.99,1214.33 1281.58,1214.33 1282.16,1214.33 1282.75,1214.33 1283.34,1214.33 1283.92,1214.33 1284.51,1214.33 1285.1,1214.33 1285.68,1214.33 1286.27,1214.33 1286.86,1214.33 1287.44,1214.33 1288.03,1214.33 1288.61,1214.33 1289.2,1214.33 1289.79,1214.33 1290.37,1214.33 1290.96,1214.33 1291.55,1214.33 1292.13,1214.33 1292.72,1214.33 1293.31,1214.33 1293.89,1214.33 1294.48,1214.33 1295.06,1214.33 1295.65,1214.33 1296.24,1214.33 1296.82,1214.33 1297.41,1214.33 1298,1214.33 1298.58,1214.33 1299.17,1214.33 1299.76,1214.33 1300.34,1214.33 1300.93,1214.33 1301.52,1214.33 1302.1,1214.33 1302.69,1214.33 1303.27,1214.33 1303.86,1214.33 1304.45,1214.33 1305.03,1214.33 1305.62,1214.33 1306.21,1214.33 1306.79,1214.33 1307.38,1214.33 1307.97,1214.33 1308.55,1214.33 1309.14,1214.33 1309.73,1214.33 1310.31,1214.33 1310.9,1214.33 1311.48,1214.33 1312.07,1214.33 1312.66,1214.33 1313.24,1214.33 1313.83,1214.33 1314.42,1214.33 1315,1214.33 1315.59,1214.33 1316.18,1214.33 1316.76,1214.33 1317.35,1214.33 1317.93,1214.33 1318.52,1214.33 1319.11,1214.33 1319.69,1214.33 1320.28,1214.33 1320.87,1214.33 1321.45,1214.33 1322.04,1214.33 1322.63,1214.33 1323.21,1214.33 1323.8,1214.33 1324.39,1214.33 1324.97,1214.33 1325.56,1214.33 1326.14,1214.33 1326.73,1214.33 1327.32,1214.33 1327.9,1214.33 1328.49,1214.33 1329.08,1214.33 1329.66,1214.33 1330.25,1214.33 1330.84,1214.33 1331.42,1214.33 1332.01,1214.33 1332.6,1214.33 1333.18,1214.33 1333.77,1214.33 1334.35,1214.33 1334.94,1214.33 1335.53,1214.33 1336.11,1214.33 1336.7,1214.33 1337.29,1214.33 1337.87,1214.33 1338.46,1214.33 1339.05,1214.33 1339.63,1214.33 1340.22,1214.33 1340.8,1214.33 1341.39,1214.33 1341.98,1214.33 1342.56,1214.33 1343.15,1214.33 1343.74,1214.33 1344.32,1214.33 1344.91,1214.33 1345.5,1214.33 1346.08,1214.33 1346.67,1214.33 1347.26,1214.33 1347.84,1214.33 1348.43,1214.33 1349.01,1214.33 1349.6,1214.33 1350.19,1214.33 1350.77,1214.33 1351.36,1214.33 1351.95,1214.33 1352.53,1214.33 1353.12,1214.33 1353.71,1214.33 1354.29,1214.33 1354.88,1214.33 1355.47,1214.33 1356.05,1214.33 1356.64,1214.33 1357.22,1214.33 1357.81,1214.33 1358.4,1214.33 1358.98,1214.33 1359.57,1214.33 1360.16,1214.33 1360.74,1214.33 1361.33,1214.33 1361.92,1214.33 1362.5,1214.33 1363.09,1214.33 1363.68,1214.33 1364.26,1214.33 1364.85,1214.33 1365.43,1214.33 1366.02,1214.33 1366.61,1214.33 1367.19,1214.33 1367.78,1214.33 1368.37,1214.33 1368.95,1214.33 1369.54,1214.33 1370.13,1214.33 1370.71,1214.33 1371.3,1214.33 1371.88,1214.33 1372.47,1214.33 1373.06,1214.33 1373.64,1214.33 1374.23,1214.33 1374.82,1214.33 1375.4,1214.33 1375.99,1214.33 1376.58,1214.33 1377.16,1214.33 1377.75,1214.33 1378.34,1214.33 1378.92,1214.33 1379.51,1214.33 1380.09,1214.33 1380.68,1214.33 1381.27,1214.33 1381.85,1214.33 1382.44,1214.33 1383.03,1214.33 1383.61,1214.33 1384.2,1214.33 1384.79,1214.33 1385.37,1214.33 1385.96,1214.33 1386.55,1214.33 1387.13,1214.33 1387.72,1214.33 1388.3,1214.33 1388.89,1214.33 1389.48,1214.33 1390.06,1214.33 1390.65,1214.33 1391.24,1214.33 1391.82,1214.33 1392.41,1214.33 1393,1214.33 1393.58,1214.33 1394.17,1214.33 1394.75,1214.33 1395.34,1214.33 1395.93,1214.33 1396.51,1214.33 1397.1,1214.33 1397.69,1214.33 1398.27,1214.33 1398.86,1214.33 1399.45,1214.33 1400.03,1214.33 1400.62,1214.33 1401.21,1214.33 1401.79,1214.33 1402.38,1214.33 1402.96,1214.33 1403.55,1214.33 1404.14,1214.33 1404.72,1214.33 1405.31,1214.33 1405.9,1214.33 1406.48,1214.33 1407.07,1214.33 1407.66,1214.33 1408.24,1214.33 1408.83,1214.33 1409.42,1214.33 1410,1214.33 1410.59,1214.33 1411.17,1214.33 1411.76,1214.33 1412.35,1214.33 1412.93,1214.33 1413.52,1214.33 1414.11,1214.33 1414.69,1214.33 1415.28,1214.33 1415.87,1214.33 1416.45,1214.33 1417.04,1214.33 1417.63,1214.33 1418.21,1214.33 1418.8,1214.33 1419.38,1214.33 1419.97,1214.33 1420.56,1214.33 1421.14,1214.33 1421.73,1214.33 1422.32,1214.33 1422.9,1214.33 1423.49,1214.33 1424.08,1214.33 1424.66,1214.33 1425.25,1214.33 1425.83,1214.33 1426.42,1214.33 1427.01,1214.33 1427.59,1214.33 1428.18,1214.33 1428.77,1214.33 1429.35,1214.33 1429.94,1214.33 1430.53,1214.33 1431.11,1214.33 1431.7,1214.33 1432.29,1214.33 1432.87,1214.33 1433.46,1214.33 1434.04,1214.33 1434.63,1214.33 1435.22,1214.33 1435.8,1214.33 1436.39,1214.33 1436.98,1214.33 1437.56,1214.33 1438.15,1214.33 1438.74,1214.33 1439.32,1214.33 1439.91,1214.33 1440.5,1214.33 1441.08,1214.33 1441.67,1214.33 1442.25,1214.33 1442.84,1214.33 1443.43,1214.33 1444.01,1214.33 1444.6,1214.33 1445.19,1214.33 1445.77,1214.33 1446.36,1214.33 1446.95,1214.33 1447.53,1214.33 1448.12,1214.33 1448.7,1214.33 1449.29,1214.33 1449.88,1214.33 1450.46,1214.33 1451.05,1214.33 1451.64,1214.33 1452.22,1214.33 1452.81,1214.33 1453.4,1214.33 1453.98,1214.33 1454.57,1214.33 1455.16,1214.33 1455.74,1214.33 1456.33,1214.33 1456.91,1214.33 1457.5,1214.33 1458.09,1214.33 1458.67,1214.33 1459.26,1214.33 1459.85,1214.33 1460.43,1214.33 1461.02,1214.33 1461.61,1214.33 1462.19,1214.33 1462.78,1214.33 1463.37,1214.33 1463.95,1214.33 1464.54,1214.33 1465.12,1214.33 1465.71,1214.33 1466.3,1214.33 1466.88,1214.33 1467.47,1214.33 1468.06,1214.33 1468.64,1214.33 1469.23,1214.33 1469.82,1214.33 1470.4,1214.33 1470.99,1214.33 1471.57,1214.33 1472.16,1214.33 1472.75,1214.33 1473.33,1214.33 1473.92,1214.33 1474.51,1214.33 1475.09,1214.33 1475.68,1214.33 1476.27,1214.33 1476.85,1214.33 1477.44,1214.33 1478.03,1214.33 1478.61,1214.33 1479.2,1214.33 1479.78,1214.33 1480.37,1214.33 1480.96,1214.33 1481.54,1214.33 1482.13,1214.33 1482.72,1214.33 1483.3,1214.33 1483.89,1214.33 1484.48,1214.33 1485.06,1214.33 1485.65,1214.33 1486.24,1214.33 1486.82,1214.33 1487.41,1214.33 1487.99,1214.33 1488.58,1214.33 1489.17,1214.33 1489.75,1214.33 1490.34,1214.33 1490.93,1214.33 1491.51,1214.33 1492.1,1214.33 1492.69,1214.33 1493.27,1214.33 1493.86,1214.33 1494.45,1214.33 1495.03,1214.33 1495.62,1214.33 1496.2,1214.33 1496.79,1214.33 1497.38,1214.33 1497.96,1214.33 1498.55,1214.33 1499.14,1214.33 1499.72,1214.33 1500.31,1214.33 1500.9,1214.33 1501.48,1214.33 1502.07,1214.33 1502.65,1214.33 1503.24,1214.33 1503.83,1214.33 1504.41,1214.33 1505,1214.33 1505.59,1214.33 1506.17,1214.33 1506.76,1214.33 1507.35,1214.33 1507.93,1214.33 1508.52,1214.33 1509.11,1214.33 1509.69,1214.33 1510.28,1214.33 1510.86,1214.33 1511.45,1214.33 1512.04,1214.33 1512.62,1214.33 1513.21,1214.33 1513.8,1214.33 1514.38,1214.33 1514.97,1214.33 1515.56,1214.33 1516.14,1214.33 1516.73,1214.33 1517.32,1214.33 1517.9,1214.33 1518.49,1214.33 1519.07,1214.33 1519.66,1214.33 1520.25,1214.33 1520.83,1214.33 1521.42,1214.33 1522.01,1214.33 1522.59,1214.33 1523.18,1214.33 1523.77,1214.33 1524.35,1214.33 1524.94,1214.33 1525.52,1214.33 1526.11,1214.33 1526.7,1214.33 1527.28,1214.33 1527.87,1214.33 1528.46,1214.33 1529.04,1214.33 1529.63,1214.33 1530.22,1214.33 1530.8,1214.33 1531.39,1214.33 1531.98,1214.33 1532.56,1214.33 1533.15,1214.33 1533.73,1214.33 1534.32,1214.33 1534.91,1214.33 1535.49,1214.33 1536.08,1214.33 1536.67,1214.33 1537.25,1214.33 1537.84,1214.33 1538.43,1214.33 1539.01,1214.33 1539.6,1214.33 1540.19,1214.33 1540.77,1214.33 1541.36,1214.33 1541.94,1214.33 1542.53,1214.33 1543.12,1214.33 1543.7,1214.33 1544.29,1214.33 1544.88,1214.33 1545.46,1214.33 1546.05,1214.33 1546.64,1214.33 1547.22,1214.33 1547.81,1214.33 1548.4,1214.33 1548.98,1214.33 1549.57,1214.33 1550.15,1214.33 1550.74,1214.33 1551.33,1214.33 1551.91,1214.33 1552.5,1214.33 1553.09,1214.33 1553.67,1214.33 1554.26,1214.33 1554.85,1214.33 1555.43,1214.33 1556.02,1214.33 1556.6,1214.33 1557.19,1214.33 1557.78,1214.33 1558.36,1214.33 1558.95,1214.33 1559.54,1214.33 1560.12,1214.33 1560.71,1214.33 1561.3,1214.33 1561.88,1214.33 1562.47,1214.33 1563.06,1214.33 1563.64,1214.33 1564.23,1214.33 1564.81,1214.33 1565.4,1214.33 1565.99,1214.33 1566.57,1214.33 1567.16,1214.33 1567.75,1214.33 1568.33,1214.33 1568.92,1214.33 1569.51,1214.33 1570.09,1214.33 1570.68,1214.33 1571.27,1214.33 1571.85,1214.33 1572.44,1214.33 1573.02,1214.33 1573.61,1214.33 1574.2,1214.33 1574.78,1214.33 1575.37,1214.33 1575.96,1214.33 1576.54,1214.33 1577.13,1214.33 1577.72,1214.33 1578.3,1214.33 1578.89,1214.33 1579.47,1214.33 1580.06,1214.33 1580.65,1214.33 1581.23,1214.33 1581.82,1214.33 1582.41,1214.33 1582.99,1214.33 1583.58,1214.33 1584.17,1214.33 1584.75,1214.33 1585.34,1214.33 1585.93,1214.33 1586.51,1214.33 1587.1,1214.33 1587.68,1214.33 1588.27,1214.33 1588.86,1214.33 1589.44,1214.33 1590.03,1214.33 1590.62,1214.33 1591.2,1214.33 1591.79,1214.33 1592.38,1214.33 1592.96,1214.33 1593.55,1214.33 1594.14,1214.33 1594.72,1214.33 1595.31,1214.33 1595.89,1214.33 1596.48,1214.33 1597.07,1214.33 1597.65,1214.33 1598.24,1214.33 1598.83,1214.33 1599.41,1214.33 1600,1214.33 1600.59,1214.33 1601.17,1214.33 1601.76,1214.33 1602.34,1214.33 1602.93,1214.33 1603.52,1214.33 1604.1,1214.33 1604.69,1214.33 1605.28,1214.33 1605.86,1214.33 1606.45,1214.33 1607.04,1214.33 1607.62,1214.33 1608.21,1214.33 1608.8,1214.33 1609.38,1214.33 1609.97,1214.33 1610.55,1214.33 1611.14,1214.33 1611.73,1214.33 1612.31,1214.33 1612.9,1214.33 1613.49,1214.33 1614.07,1214.33 1614.66,1214.33 1615.25,1214.33 1615.83,1214.33 1616.42,1214.33 1617.01,1214.33 1617.59,1214.33 1618.18,1214.33 1618.76,1214.33 1619.35,1214.33 1619.94,1214.33 1620.52,1214.33 1621.11,1214.33 1621.7,1214.33 1622.28,1214.33 1622.87,1214.33 1623.46,1214.33 1624.04,1214.33 1624.63,1214.33 1625.22,1214.33 1625.8,1214.33 1626.39,1214.33 1626.97,1214.33 1627.56,1214.33 1628.15,1214.33 1628.73,1214.33 1629.32,1214.33 1629.91,1214.33 1630.49,1214.33 1631.08,1214.33 1631.67,1214.33 1632.25,1214.33 1632.84,1214.33 1633.42,1214.33 1634.01,1214.33 1634.6,1214.33 1635.18,1214.33 1635.77,1214.33 1636.36,1214.33 1636.94,1214.33 1637.53,1214.33 1638.12,1214.33 1638.7,1214.33 1639.29,1214.33 1639.88,1214.33 1640.46,1214.33 1641.05,1214.33 1641.63,1214.33 1642.22,1214.33 1642.81,1214.33 1643.39,1214.33 1643.98,1214.33 1644.57,1214.33 1645.15,1214.33 1645.74,1214.33 1646.33,1214.33 1646.91,1214.33 1647.5,1214.33 1648.09,1214.33 1648.67,1214.33 1649.26,1214.33 1649.84,1214.33 1650.43,1214.33 1651.02,1214.33 1651.6,1214.33 1652.19,1214.33 1652.78,1214.33 1653.36,1214.33 1653.95,1214.33 1654.54,1214.33 1655.12,1214.33 1655.71,1214.33 1656.29,1214.33 1656.88,1214.33 1657.47,1214.33 1658.05,1214.33 1658.64,1214.33 1659.23,1214.33 1659.81,1214.33 1660.4,1214.33 1660.99,1214.33 1661.57,1214.33 1662.16,1214.33 1662.75,1214.33 1663.33,1214.33 1663.92,1214.33 1664.5,1214.33 1665.09,1214.33 1665.68,1214.33 1666.26,1214.33 1666.85,1214.33 1667.44,1214.33 1668.02,1214.33 1668.61,1214.33 1669.2,1214.33 1669.78,1214.33 1670.37,1214.33 1670.96,1214.33 1671.54,1214.33 1672.13,1214.33 1672.71,1214.33 1673.3,1214.33 1673.89,1214.33 1674.47,1214.33 1675.06,1214.33 1675.65,1214.33 1676.23,1214.33 1676.82,1214.33 1677.41,1214.33 1677.99,1214.33 1678.58,1214.33 1679.17,1214.33 1679.75,1214.33 1680.34,1214.33 1680.92,1214.33 1681.51,1214.33 1682.1,1214.33 1682.68,1214.33 1683.27,1214.33 1683.86,1214.33 1684.44,1214.33 1685.03,1214.33 1685.62,1214.33 1686.2,1214.33 1686.79,1214.33 1687.37,1214.33 1687.96,1214.33 1688.55,1214.33 1689.13,1214.33 1689.72,1214.33 1690.31,1214.33 1690.89,1214.33 1691.48,1214.33 1692.07,1214.33 1692.65,1214.33 1693.24,1214.33 1693.83,1214.33 1694.41,1214.33 1695,1214.33 1695.58,1214.33 1696.17,1214.33 1696.76,1214.33 1697.34,1214.33 1697.93,1214.33 1698.52,1214.33 1699.1,1214.33 1699.69,1214.33 1700.28,1214.33 1700.86,1214.33 1701.45,1214.33 1702.04,1214.33 1702.62,1214.33 1703.21,1214.33 1703.79,1214.33 1704.38,1214.33 1704.97,1214.33 1705.55,1214.33 1706.14,1214.33 1706.73,1214.33 1707.31,1214.33 1707.9,1214.33 1708.49,1214.33 1709.07,1214.33 1709.66,1214.33 1710.24,1214.33 1710.83,1214.33 1711.42,1214.33 1712,1214.33 1712.59,1214.33 1713.18,1214.33 1713.76,1214.33 1714.35,1214.33 1714.94,1214.33 1715.52,1214.33 1716.11,1214.33 1716.7,1214.33 1717.28,1214.33 1717.87,1214.33 1718.45,1214.33 1719.04,1214.33 1719.63,1214.33 1720.21,1214.33 1720.8,1214.33 1721.39,1214.33 1721.97,1214.33 1722.56,1214.33 1723.15,1214.33 1723.73,1214.33 1724.32,1214.33 1724.91,1214.33 1725.49,1214.33 1726.08,1214.33 1726.66,1214.33 1727.25,1214.33 1727.84,1214.33 1728.42,1214.33 1729.01,1214.33 1729.6,1214.33 1730.18,1214.33 1730.77,1214.33 1731.36,1214.33 1731.94,1214.33 1732.53,1214.33 1733.11,1214.33 1733.7,1214.33 1734.29,1214.33 1734.87,1214.33 1735.46,1214.33 1736.05,1214.33 1736.63,1214.33 1737.22,1214.33 1737.81,1214.33 1738.39,1214.33 1738.98,1214.33 1739.57,1214.33 1740.15,1214.33 1740.74,1214.33 1741.32,1214.33 1741.91,1214.33 1742.5,1214.33 1743.08,1214.33 1743.67,1214.33 1744.26,1214.33 1744.84,1214.33 1745.43,1214.33 1746.02,1214.33 1746.6,1214.33 1747.19,1214.33 1747.78,1214.33 1748.36,1214.33 1748.95,1214.33 1749.53,1214.33 1750.12,1214.33 1750.71,1214.33 1751.29,1214.33 1751.88,1214.33 1752.47,1214.33 1753.05,1214.33 1753.64,1214.33 1754.23,1214.33 1754.81,1214.33 1755.4,1214.33 1755.99,1214.33 1756.57,1214.33 1757.16,1214.33 1757.74,1214.33 1758.33,1214.33 1758.92,1214.33 1759.5,1214.33 1760.09,1214.33 1760.68,1214.33 1761.26,1214.33 1761.85,1214.33 1762.44,1214.33 1763.02,1214.33 1763.61,1214.33 1764.19,1214.33 1764.78,1214.33 1765.37,1214.33 1765.95,1214.33 1766.54,1214.33 1767.13,1214.33 1767.71,1214.33 1768.3,1214.33 1768.89,1214.33 1769.47,1214.33 1770.06,1214.33 1770.65,1214.33 1771.23,1214.33 1771.82,1214.33 1772.4,1214.33 1772.99,1214.33 1773.58,1214.33 1774.16,1214.33 1774.75,1214.33 1775.34,1214.33 1775.92,1214.33 1776.51,1214.33 1777.1,1214.33 1777.68,1214.33 1778.27,1214.33 1778.86,1214.33 1779.44,1214.33 1780.03,1214.33 1780.61,1214.33 1781.2,1214.33 1781.79,1214.33 1782.37,1214.33 1782.96,1214.33 1783.55,1214.33 1784.13,1214.33 1784.72,1214.33 1785.31,1214.33 1785.89,1214.33 1786.48,1214.33 1787.06,1214.33 1787.65,1214.33 1788.24,1214.33 1788.82,1214.33 1789.41,1214.33 1790,1214.33 1790.58,1214.33 1791.17,1214.33 1791.76,1214.33 1792.34,1214.33 1792.93,1214.33 1793.52,1214.33 1794.1,1214.33 1794.69,1214.33 1795.27,1214.33 1795.86,1214.33 1796.45,1214.33 1797.03,1214.33 1797.62,1214.33 1798.21,1214.33 1798.79,1214.33 1799.38,1214.33 1799.97,1214.33 1800.55,1214.33 1801.14,1214.33 1801.73,1214.33 1802.31,1214.33 1802.9,1214.33 1803.48,1214.33 1804.07,1214.33 1804.66,1214.33 1805.24,1214.33 1805.83,1214.33 1806.42,1214.33 1807,1214.33 1807.59,1214.33 1808.18,1214.33 1808.76,1214.33 1809.35,1214.33 1809.94,1214.33 1810.52,1214.33 1811.11,1214.33 1811.69,1214.33 1812.28,1214.33 1812.87,1214.33 1813.45,1214.33 1814.04,1214.33 1814.63,1214.33 1815.21,1214.33 1815.8,1214.33 1816.39,1214.33 1816.97,1214.33 1817.56,1214.33 1818.14,1214.33 1818.73,1214.33 1819.32,1214.33 1819.9,1214.33 1820.49,1214.33 1821.08,1214.33 1821.66,1214.33 1822.25,1214.33 1822.84,1214.33 1823.42,1214.33 1824.01,1214.33 1824.6,1214.33 1825.18,1214.33 1825.77,1214.33 1826.35,1214.33 1826.94,1214.33 1827.53,1214.33 1828.11,1214.33 1828.7,1214.33 1829.29,1214.33 1829.87,1214.33 1830.46,1214.33 1831.05,1214.33 1831.63,1214.33 1832.22,1214.33 1832.81,1214.33 1833.39,1214.33 1833.98,1214.33 1834.56,1214.33 1835.15,1214.33 1835.74,1214.33 1836.32,1214.33 1836.91,1214.33 1837.5,1214.33 1838.08,1214.33 1838.67,1214.33 1839.26,1214.33 1839.84,1214.33 1840.43,1214.33 1841.01,1214.33 1841.6,1214.33 1842.19,1214.33 1842.77,1214.33 1843.36,1214.33 1843.95,1214.33 1844.53,1214.33 1845.12,1214.33 1845.71,1214.33 1846.29,1214.33 1846.88,1214.33 1847.47,1214.33 1848.05,1214.33 1848.64,1214.33 1849.22,1214.33 1849.81,1214.33 1850.4,1214.33 1850.98,1214.33 1851.57,1214.33 1852.16,1214.33 1852.74,1214.33 1853.33,1214.33 1853.92,1214.33 1854.5,1214.33 1855.09,1214.33 1855.68,1214.33 1856.26,1214.33 1856.85,1214.33 1857.43,1214.33 1858.02,1214.33 1858.61,1214.33 1859.19,1214.33 1859.78,1214.33 1860.37,1214.33 1860.95,1214.33 1861.54,1214.33 1862.13,1214.33 1862.71,1214.33 1863.3,1214.33 1863.88,1214.33 1864.47,1214.33 1865.06,1214.33 1865.64,1214.33 1866.23,1214.33 1866.82,1214.33 1867.4,1214.33 1867.99,1214.33 1868.58,1214.33 1869.16,1214.33 1869.75,1214.33 1870.34,1214.33 1870.92,1214.33 1871.51,1214.33 1872.09,1214.33 1872.68,1214.33 1873.27,1214.33 1873.85,1214.33 1874.44,1214.33 1875.03,1214.33 1875.61,1214.33 1876.2,1214.33 1876.79,1214.33 1877.37,1214.33 1877.96,1214.33 1878.55,1214.33 1879.13,1214.33 1879.72,1214.33 1880.3,1214.33 1880.89,1214.33 1881.48,1214.33 1882.06,1214.33 1882.65,1214.33 1883.24,1214.33 1883.82,1214.33 1884.41,1214.33 1885,1214.33 1885.58,1214.33 1886.17,1214.33 1886.76,1214.33 1887.34,1214.33 1887.93,1214.33 1888.51,1214.33 1889.1,1214.33 1889.69,1214.33 1890.27,1214.33 1890.86,1214.33 1891.45,1214.33 1892.03,1214.33 1892.62,1214.33 1893.21,1214.33 1893.79,1214.33 1894.38,1214.33 1894.96,1214.33 1895.55,1214.33 1896.14,1214.33 1896.72,1214.33 1897.31,1214.33 1897.9,1214.33 1898.48,1214.33 1899.07,1214.33 1899.66,1214.33 1900.24,1214.33 1900.83,1214.33 1901.42,1214.33 1902,1214.33 1902.59,1214.33 1903.17,1214.33 1903.76,1214.33 1904.35,1214.33 1904.93,1214.33 1905.52,1214.33 1906.11,1214.33 1906.69,1214.33 1907.28,1214.33 1907.87,1214.33 1908.45,1214.33 1909.04,1214.33 1909.63,1214.33 1910.21,1214.33 1910.8,1214.33 1911.38,1214.33 1911.97,1214.33 1912.56,1214.33 1913.14,1214.33 1913.73,1214.33 1914.32,1214.33 1914.9,1214.33 1915.49,1214.33 1916.08,1214.33 1916.66,1214.33 1917.25,1214.33 1917.83,1214.33 1918.42,1214.33 1919.01,1214.33 1919.59,1214.33 1920.18,1214.33 1920.77,1214.33 1921.35,1214.33 1921.94,1214.33 1922.53,1214.33 1923.11,1214.33 1923.7,1214.33 1924.29,1214.33 1924.87,1214.33 1925.46,1214.33 1926.04,1214.33 1926.63,1214.33 1927.22,1214.33 1927.8,1214.33 1928.39,1214.33 1928.98,1214.33 1929.56,1214.33 1930.15,1214.33 1930.74,1214.33 1931.32,1214.33 1931.91,1214.33 1932.5,1214.33 1933.08,1214.33 1933.67,1214.33 1934.25,1214.33 1934.84,1214.33 1935.43,1214.33 1936.01,1214.33 1936.6,1214.33 1937.19,1214.33 1937.77,1214.33 1938.36,1214.33 1938.95,1214.33 1939.53,1214.33 1940.12,1214.33 1940.71,1214.33 1941.29,1214.33 1941.88,1214.33 1942.46,1214.33 1943.05,1214.33 1943.64,1214.33 1944.22,1214.33 1944.81,1214.33 1945.4,1214.33 1945.98,1214.33 1946.57,1214.33 1947.16,1214.33 1947.74,1214.33 1948.33,1214.33 1948.91,1214.33 1949.5,1214.33 1950.09,1214.33 1950.67,1214.33 1951.26,1214.33 1951.85,1214.33 1952.43,1214.33 1953.02,1214.33 1953.61,1214.33 1954.19,1214.33 1954.78,1214.33 1955.37,1214.33 1955.95,1214.33 1956.54,1214.33 1957.12,1214.33 1957.71,1214.33 1958.3,1214.33 1958.88,1214.33 1959.47,1214.33 1960.06,1214.33 1960.64,1214.33 1961.23,1214.33 1961.82,1214.33 1962.4,1214.33 1962.99,1214.33 1963.58,1214.33 1964.16,1214.33 1964.75,1214.33 1965.33,1214.33 1965.92,1214.33 1966.51,1214.33 1967.09,1214.33 1967.68,1214.33 1968.27,1214.33 1968.85,1214.33 1969.44,1214.33 1970.03,1214.33 1970.61,1214.33 1971.2,1214.33 1971.78,1214.33 1972.37,1214.33 1972.96,1214.33 1973.54,1214.33 1974.13,1214.33 1974.72,1214.33 1975.3,1214.33 1975.89,1214.33 1976.48,1214.33 1977.06,1214.33 1977.65,1214.33 1978.24,1214.33 1978.82,1214.33 1979.41,1214.33 1979.99,1214.33 1980.58,1214.33 1981.17,1214.33 1981.75,1214.33 1982.34,1214.33 1982.93,1214.33 1983.51,1214.33 1984.1,1214.33 1984.69,1214.33 1985.27,1214.33 1985.86,1214.33 1986.45,1214.33 1987.03,1214.33 1987.62,1214.33 1988.2,1214.33 1988.79,1214.33 1989.38,1214.33 1989.96,1214.33 1990.55,1214.33 1991.14,1214.33 1991.72,1214.33 1992.31,1214.33 1992.9,1214.33 1993.48,1214.33 1994.07,1214.33 1994.65,1214.33 1995.24,1214.33 1995.83,1214.33 1996.41,1214.33 1997,1214.33 1997.59,1214.33 1998.17,1214.33 1998.76,1214.33 1999.35,1214.33 1999.93,1214.33 2000.52,1214.33 2001.11,1214.33 2001.69,1214.33 2002.28,1214.33 2002.86,1214.33 2003.45,1214.33 2004.04,1214.33 2004.62,1214.33 2005.21,1214.33 2005.8,1214.33 2006.38,1214.33 2006.97,1214.33 2007.56,1214.33 2008.14,1214.33 2008.73,1214.33 2009.32,1214.33 2009.9,1214.33 2010.49,1214.33 2011.07,1214.33 2011.66,1214.33 2012.25,1214.33 2012.83,1214.33 2013.42,1214.33 2014.01,1214.33 2014.59,1214.33 2015.18,1214.33 2015.77,1214.33 2016.35,1214.33 2016.94,1214.33 2017.53,1214.33 2018.11,1214.33 2018.7,1214.33 2019.28,1214.33 2019.87,1214.33 2020.46,1214.33 2021.04,1214.33 2021.63,1214.33 2022.22,1214.33 2022.8,1214.33 2023.39,1214.33 2023.98,1214.33 2024.56,1214.33 2025.15,1214.33 2025.73,1214.33 2026.32,1214.33 2026.91,1214.33 2027.49,1214.33 2028.08,1214.33 2028.67,1214.33 2029.25,1214.33 2029.84,1214.33 2030.43,1214.33 2031.01,1214.33 2031.6,1214.33 2032.19,1214.33 2032.77,1214.33 2033.36,1214.33 2033.94,1214.33 2034.53,1214.33 2035.12,1214.33 2035.7,1214.33 2036.29,1214.33 2036.88,1214.33 2037.46,1214.33 2038.05,1214.33 2038.64,1214.33 2039.22,1214.33 2039.81,1214.33 2040.4,1214.33 2040.98,1214.33 2041.57,1214.33 2042.15,1214.33 2042.74,1214.33 2043.33,1214.33 2043.91,1214.33 2044.5,1214.33 2045.09,1214.33 2045.67,1214.33 2046.26,1214.33 2046.85,1214.33 2047.43,1214.33 2048.02,1214.33 2048.6,1214.33 2049.19,1214.33 2049.78,1214.33 2050.36,1214.33 2050.95,1214.33 2051.54,1214.33 2052.12,1214.33 2052.71,1214.33 2053.3,1214.33 2053.88,1214.33 2054.47,1214.33 2055.06,1214.33 2055.64,1214.33 2056.23,1214.33 2056.81,1214.33 2057.4,1214.33 2057.99,1214.33 2058.57,1214.33 2059.16,1214.33 2059.75,1214.33 2060.33,1214.33 2060.92,1214.33 2061.51,1214.33 2062.09,1214.33 2062.68,1214.33 2063.27,1214.33 2063.85,1214.33 2064.44,1214.33 2065.02,1214.33 2065.61,1214.33 2066.2,1214.33 2066.78,1214.33 2067.37,1214.33 2067.96,1214.33 2068.54,1214.33 2069.13,1214.33 2069.72,1214.33 2070.3,1214.33 2070.89,1214.33 2071.48,1214.33 2072.06,1214.33 2072.65,1214.33 2073.23,1214.33 2073.82,1214.33 2074.41,1214.33 2074.99,1214.33 2075.58,1214.33 2076.17,1214.33 2076.75,1214.33 2077.34,1214.33 2077.93,1214.33 2078.51,1214.33 2079.1,1214.33 2079.68,1214.33 2080.27,1214.33 2080.86,1214.33 2081.44,1214.33 2082.03,1214.33 2082.62,1214.33 2083.2,1214.33 2083.79,1214.33 2084.38,1214.33 2084.96,1214.33 2085.55,1214.33 2086.14,1214.33 2086.72,1214.33 2087.31,1214.33 2087.89,1214.33 2088.48,1214.33 2089.07,1214.33 2089.65,1214.33 2090.24,1214.33 2090.83,1214.33 2091.41,1214.33 2092,1214.33 2092.59,1214.33 2093.17,1214.33 2093.76,1214.33 2094.35,1214.33 2094.93,1214.33 2095.52,1214.33 2096.1,1214.33 2096.69,1214.33 2097.28,1214.33 2097.86,1214.33 2098.45,1214.33 2099.04,1214.33 2099.62,1214.33 2100.21,1214.33 2100.8,1214.33 2101.38,1214.33 2101.97,1214.33 2102.55,1214.33 2103.14,1214.33 2103.73,1214.33 2104.31,1214.33 2104.9,1214.33 2105.49,1214.33 2106.07,1214.33 2106.66,1214.33 2107.25,1214.33 2107.83,1214.33 2108.42,1214.33 2109.01,1214.33 2109.59,1214.33 2110.18,1214.33 2110.76,1214.33 2111.35,1214.33 2111.94,1214.33 2112.52,1214.33 2113.11,1214.33 2113.7,1214.33 2114.28,1214.33 2114.87,1214.33 2115.46,1214.33 2116.04,1214.33 2116.63,1214.33 2117.22,1214.33 2117.8,1214.33 2118.39,1214.33 2118.97,1214.33 2119.56,1214.33 2120.15,1214.33 2120.73,1214.33 2121.32,1214.33 2121.91,1214.33 2122.49,1214.33 2123.08,1214.33 2123.67,1214.33 2124.25,1214.33 2124.84,1214.33 2125.42,1214.33 2126.01,1214.33 2126.6,1214.33 2127.18,1214.33 2127.77,1214.33 2128.36,1214.33 2128.94,1214.33 2129.53,1214.33 2130.12,1214.33 2130.7,1214.33 2131.29,1214.33 2131.88,1214.33 2132.46,1214.33 2133.05,1214.33 2133.63,1214.33 2134.22,1214.33 2134.81,1214.33 2135.39,1214.33 2135.98,1214.33 2136.57,1214.33 2137.15,1214.33 2137.74,1214.33 2138.33,1214.33 2138.91,1214.33 2139.5,1214.33 2140.09,1214.33 2140.67,1214.33 2141.26,1214.33 2141.84,1214.33 2142.43,1214.33 2143.02,1214.33 2143.6,1214.33 2144.19,1214.33 2144.78,1214.33 2145.36,1214.33 2145.95,1214.33 2146.54,1214.33 2147.12,1214.33 2147.71,1214.33 2148.3,1214.33 2148.88,1214.33 2149.47,1214.33 2150.05,1214.33 2150.64,1214.33 2151.23,1214.33 2151.81,1214.33 2152.4,1214.33 2152.99,1214.33 2153.57,1214.33 2154.16,1214.33 2154.75,1214.33 2155.33,1214.33 2155.92,1214.33 2156.5,1214.33 2157.09,1214.33 2157.68,1214.33 2158.26,1214.33 \"/>\n<path clip-path=\"url(#clip912)\" d=\"M986.025 1214.28 L986.612 1214.28 L987.198 1214.28 L987.785 1214.28 L988.371 1214.28 L988.957 1214.28 L989.544 1214.28 L990.13 1214.28 L990.717 1214.28 L991.303 1214.28 L991.889 1214.28 L992.476 1214.28 L993.062 1214.28 L993.649 1214.28 L994.235 1214.28 L994.822 1214.28 L995.408 1214.28 L995.994 1214.28 L996.581 1214.28 L997.167 1214.28 L997.754 1214.28 L998.34 1214.28 L998.926 1214.28 L999.513 1214.28 L1000.1 1214.28 L1000.69 1214.28 L1001.27 1214.28 L1001.86 1214.28 L1002.44 1214.28 L1003.03 1214.28 L1003.62 1214.28 L1004.2 1214.28 L1004.79 1214.28 L1005.38 1214.28 L1005.96 1214.28 L1006.55 1214.28 L1007.14 1214.28 L1007.72 1214.28 L1008.31 1214.28 L1008.9 1214.28 L1009.48 1214.28 L1010.07 1214.28 L1010.65 1214.28 L1011.24 1214.28 L1011.83 1214.28 L1012.41 1214.28 L1013 1214.28 L1013.59 1214.28 L1014.17 1214.28 L1014.76 1214.28 L1015.35 1214.28 L1015.93 1214.28 L1016.52 1214.28 L1017.11 1214.28 L1017.69 1214.28 L1018.28 1214.28 L1018.86 1214.28 L1019.45 1214.28 L1020.04 1214.28 L1020.62 1214.28 L1021.21 1214.28 L1021.8 1214.28 L1022.38 1214.28 L1022.97 1214.28 L1023.56 1214.28 L1024.14 1214.28 L1024.73 1214.28 L1025.32 1214.28 L1025.9 1214.28 L1026.49 1214.28 L1027.07 1214.28 L1027.66 1214.28 L1028.25 1214.28 L1028.83 1214.28 L1029.42 1214.28 L1030.01 1214.28 L1030.59 1214.28 L1031.18 1214.28 L1031.77 1214.28 L1032.35 1214.28 L1032.94 1214.28 L1033.52 1214.28 L1034.11 1214.28 L1034.7 1214.28 L1035.28 1214.28 L1035.87 1214.28 L1036.46 1214.28 L1037.04 1214.28 L1037.63 1214.28 L1038.22 1214.28 L1038.8 1214.28 L1039.39 1214.28 L1039.98 1214.28 L1040.56 1214.28 L1041.15 1214.28 L1041.73 1214.28 L1042.32 1214.28 L1042.91 1214.28 L1043.49 1214.28 L1044.08 1214.28 L1044.67 1214.28 L1045.25 1214.28 L1045.84 1214.28 L1046.43 1214.28 L1047.01 1214.28 L1047.6 1214.28 L1048.19 1214.28 L1048.77 1214.28 L1049.36 1214.28 L1049.94 1214.28 L1050.53 1214.28 L1051.12 1214.28 L1051.7 1214.28 L1052.29 1214.28 L1052.88 1214.28 L1053.46 1214.28 L1054.05 1214.28 L1054.64 1214.28 L1055.22 1214.28 L1055.81 1214.28 L1056.39 1214.28 L1056.98 1214.28 L1057.57 1214.28 L1058.15 1214.28 L1058.74 1214.28 L1059.33 1214.28 L1059.91 1214.28 L1060.5 1214.28 L1061.09 1214.28 L1061.67 1214.28 L1062.26 1214.28 L1062.85 1214.28 L1063.43 1214.28 L1064.02 1214.28 L1064.6 1214.28 L1065.19 1214.28 L1065.78 1214.28 L1066.36 1214.28 L1066.95 1214.28 L1067.54 1214.28 L1068.12 1214.28 L1068.71 1214.28 L1069.3 1214.28 L1069.88 1214.28 L1070.47 1214.28 L1071.06 1214.28 L1071.64 1214.28 L1072.23 1214.28 L1072.81 1214.28 L1073.4 1214.28 L1073.99 1214.28 L1074.57 1214.28 L1075.16 1214.28 L1075.75 1214.28 L1076.33 1214.28 L1076.92 1214.28 L1077.51 1214.28 L1078.09 1214.28 L1078.68 1214.28 L1079.26 1214.28 L1079.85 1214.28 L1080.44 1214.28 L1081.02 1214.28 L1081.61 1214.28 L1082.2 1214.28 L1082.78 1214.28 L1083.37 1214.28 L1083.96 1214.28 L1084.54 1214.28 L1085.13 1214.28 L1085.72 1214.28 L1086.3 1214.28 L1086.89 1214.28 L1087.47 1214.28 L1088.06 1214.28 L1088.65 1214.28 L1089.23 1214.28 L1089.82 1214.28 L1090.41 1214.28 L1090.99 1214.28 L1091.58 1214.28 L1092.17 1214.28 L1092.75 1214.28 L1093.34 1214.28 L1093.93 1214.28 L1094.51 1214.28 L1095.1 1214.28 L1095.68 1214.28 L1096.27 1214.28 L1096.86 1214.28 L1097.44 1214.28 L1098.03 1214.28 L1098.62 1214.28 L1099.2 1214.28 L1099.79 1214.28 L1100.38 1214.28 L1100.96 1214.28 L1101.55 1214.28 L1102.14 1214.28 L1102.72 1214.28 L1103.31 1214.28 L1103.89 1214.28 L1104.48 1214.28 L1105.07 1214.28 L1105.65 1214.28 L1106.24 1214.28 L1106.83 1214.28 L1107.41 1214.28 L1108 1214.28 L1108.59 1214.28 L1109.17 1214.28 L1109.76 1214.28 L1110.34 1214.28 L1110.93 1214.28 L1111.52 1214.28 L1112.1 1214.28 L1112.69 1214.28 L1113.28 1214.28 L1113.86 1214.28 L1114.45 1214.28 L1115.04 1214.28 L1115.62 1214.28 L1116.21 1214.28 L1116.8 1214.28 L1117.38 1214.28 L1117.97 1214.28 L1118.55 1214.28 L1119.14 1214.28 L1119.73 1214.28 L1120.31 1214.28 L1120.9 1214.28 L1121.49 1214.28 L1122.07 1214.28 L1122.66 1214.28 L1123.25 1214.28 L1123.83 1214.28 L1124.42 1214.28 L1125.01 1214.28 L1125.59 1214.28 L1126.18 1214.28 L1126.76 1214.28 L1127.35 1214.28 L1127.94 1214.28 L1128.52 1214.28 L1129.11 1214.28 L1129.7 1214.28 L1130.28 1214.28 L1130.87 1214.28 L1131.46 1214.28 L1132.04 1214.28 L1132.63 1214.28 L1133.21 1214.28 L1133.8 1214.28 L1134.39 1214.28 L1134.97 1214.28 L1135.56 1214.28 L1136.15 1214.28 L1136.73 1214.28 L1137.32 1214.28 L1137.91 1214.28 L1138.49 1214.28 L1139.08 1214.28 L1139.67 1214.28 L1140.25 1214.28 L1140.84 1214.28 L1141.42 1214.28 L1142.01 1214.28 L1142.6 1214.28 L1143.18 1214.28 L1143.77 1214.28 L1144.36 1214.28 L1144.94 1214.28 L1145.53 1214.28 L1146.12 1214.28 L1146.7 1214.28 L1147.29 1214.28 L1147.88 1214.28 L1148.46 1214.28 L1149.05 1214.28 L1149.63 1214.28 L1150.22 1214.28 L1150.81 1214.28 L1151.39 1214.28 L1151.98 1214.28 L1152.57 1214.28 L1153.15 1214.28 L1153.74 1214.28 L1154.33 1214.28 L1154.91 1214.28 L1155.5 1214.28 L1156.09 1214.28 L1156.67 1214.28 L1157.26 1214.28 L1157.84 1214.28 L1158.43 1214.28 L1159.02 1214.28 L1159.6 1214.28 L1160.19 1214.28 L1160.78 1214.28 L1161.36 1214.28 L1161.95 1214.28 L1162.54 1214.28 L1163.12 1214.28 L1163.71 1214.28 L1164.29 1214.28 L1164.88 1214.28 L1165.47 1214.28 L1166.05 1214.28 L1166.64 1214.28 L1167.23 1214.28 L1167.81 1214.28 L1168.4 1214.28 L1168.99 1214.28 L1169.57 1214.28 L1170.16 1214.28 L1170.75 1214.28 L1171.33 1214.28 L1171.92 1214.28 L1172.5 1214.28 L1173.09 1214.28 L1173.68 1214.28 L1174.26 1214.28 L1174.85 1214.28 L1175.44 1214.28 L1176.02 1214.28 L1176.61 1214.28 L1177.2 1214.28 L1177.78 1214.28 L1178.37 1214.28 L1178.96 1214.28 L1179.54 1214.28 L1180.13 1214.28 L1180.71 1214.28 L1181.3 1214.28 L1181.89 1214.28 L1182.47 1214.28 L1183.06 1214.28 L1183.65 1214.28 L1184.23 1214.28 L1184.82 1214.28 L1185.41 1214.28 L1185.99 1214.28 L1186.58 1214.28 L1187.16 1214.28 L1187.75 1214.28 L1188.34 1214.28 L1188.92 1214.28 L1189.51 1214.28 L1190.1 1214.28 L1190.68 1214.28 L1191.27 1214.28 L1191.86 1214.28 L1192.44 1214.28 L1193.03 1214.28 L1193.62 1214.28 L1194.2 1214.28 L1194.79 1214.28 L1195.37 1214.28 L1195.96 1214.28 L1196.55 1214.28 L1197.13 1214.28 L1197.72 1214.28 L1198.31 1214.28 L1198.89 1214.28 L1199.48 1214.28 L1200.07 1214.28 L1200.65 1214.28 L1201.24 1214.28 L1201.83 1214.28 L1202.41 1214.28 L1203 1214.28 L1203.58 1214.28 L1204.17 1214.28 L1204.76 1214.28 L1205.34 1214.28 L1205.93 1214.28 L1206.52 1214.28 L1207.1 1214.28 L1207.69 1214.28 L1208.28 1214.28 L1208.86 1214.28 L1209.45 1214.28 L1210.03 1214.28 L1210.62 1214.28 L1211.21 1214.28 L1211.79 1214.28 L1212.38 1214.28 L1212.97 1214.28 L1213.55 1214.28 L1214.14 1214.28 L1214.73 1214.28 L1215.31 1214.28 L1215.9 1214.28 L1216.49 1214.28 L1217.07 1214.28 L1217.66 1214.28 L1218.24 1214.28 L1218.83 1214.28 L1219.42 1214.28 L1220 1214.28 L1220.59 1214.28 L1221.18 1214.28 L1221.76 1214.28 L1222.35 1214.28 L1222.94 1214.28 L1223.52 1214.28 L1224.11 1214.28 L1224.7 1214.28 L1225.28 1214.28 L1225.87 1214.28 L1226.45 1214.28 L1227.04 1214.28 L1227.63 1214.28 L1228.21 1214.28 L1228.8 1214.28 L1229.39 1214.28 L1229.97 1214.28 L1230.56 1214.28 L1231.15 1214.28 L1231.73 1214.28 L1232.32 1214.28 L1232.91 1214.28 L1233.49 1214.28 L1234.08 1214.28 L1234.66 1214.28 L1235.25 1214.28 L1235.84 1214.28 L1236.42 1214.28 L1237.01 1214.28 L1237.6 1214.28 L1238.18 1214.28 L1238.77 1214.28 L1239.36 1214.28 L1239.94 1214.28 L1240.53 1214.28 L1241.11 1214.28 L1241.7 1214.28 L1242.29 1214.28 L1242.87 1214.28 L1243.46 1214.28 L1244.05 1214.28 L1244.63 1214.28 L1245.22 1214.28 L1245.81 1214.28 L1246.39 1214.28 L1246.98 1214.28 L1247.57 1214.28 L1248.15 1214.28 L1248.74 1214.28 L1249.32 1214.28 L1249.91 1214.28 L1250.5 1214.28 L1251.08 1214.28 L1251.67 1214.28 L1252.26 1214.28 L1252.84 1214.28 L1253.43 1214.28 L1254.02 1214.28 L1254.6 1214.28 L1255.19 1214.28 L1255.78 1214.28 L1256.36 1214.28 L1256.95 1214.28 L1257.53 1214.28 L1258.12 1214.28 L1258.71 1214.28 L1259.29 1214.28 L1259.88 1214.28 L1260.47 1214.28 L1261.05 1214.28 L1261.64 1214.28 L1262.23 1214.28 L1262.81 1214.28 L1263.4 1214.28 L1263.98 1214.28 L1264.57 1214.28 L1265.16 1214.28 L1265.74 1214.28 L1266.33 1214.28 L1266.92 1214.28 L1267.5 1214.28 L1268.09 1214.28 L1268.68 1214.28 L1269.26 1214.28 L1269.85 1214.28 L1270.44 1214.28 L1271.02 1214.28 L1271.61 1214.28 L1272.19 1214.28 L1272.78 1214.28 L1273.37 1214.28 L1273.95 1214.28 L1274.54 1214.28 L1275.13 1214.28 L1275.71 1214.28 L1276.3 1214.28 L1276.89 1214.28 L1277.47 1214.28 L1278.06 1214.28 L1278.65 1214.28 L1279.23 1214.28 L1279.82 1214.28 L1280.4 1214.28 L1280.99 1214.28 L1281.58 1214.28 L1282.16 1214.28 L1282.75 1214.28 L1283.34 1214.28 L1283.92 1214.28 L1284.51 1214.28 L1285.1 1214.28 L1285.68 1214.28 L1286.27 1214.28 L1286.86 1214.28 L1287.44 1214.28 L1288.03 1214.28 L1288.61 1214.28 L1289.2 1214.28 L1289.79 1214.28 L1290.37 1214.28 L1290.96 1214.28 L1291.55 1214.28 L1292.13 1214.28 L1292.72 1214.28 L1293.31 1214.28 L1293.89 1214.28 L1294.48 1214.28 L1295.06 1214.28 L1295.65 1214.28 L1296.24 1214.28 L1296.82 1214.28 L1297.41 1214.28 L1298 1214.28 L1298.58 1214.28 L1299.17 1214.28 L1299.76 1214.28 L1300.34 1214.28 L1300.93 1214.28 L1301.52 1214.28 L1302.1 1214.28 L1302.69 1214.28 L1303.27 1214.28 L1303.86 1214.28 L1304.45 1214.28 L1305.03 1214.28 L1305.62 1214.28 L1306.21 1214.28 L1306.79 1214.28 L1307.38 1214.28 L1307.97 1214.28 L1308.55 1214.28 L1309.14 1214.28 L1309.73 1214.28 L1310.31 1214.28 L1310.9 1214.28 L1311.48 1214.28 L1312.07 1214.28 L1312.66 1214.28 L1313.24 1214.28 L1313.83 1214.28 L1314.42 1214.28 L1315 1214.28 L1315.59 1214.28 L1316.18 1214.28 L1316.76 1214.28 L1317.35 1214.28 L1317.93 1214.28 L1318.52 1214.28 L1319.11 1214.28 L1319.69 1214.28 L1320.28 1214.28 L1320.87 1214.28 L1321.45 1214.28 L1322.04 1214.28 L1322.63 1214.28 L1323.21 1214.28 L1323.8 1214.28 L1324.39 1214.28 L1324.97 1214.28 L1325.56 1214.28 L1326.14 1214.28 L1326.73 1214.28 L1327.32 1214.28 L1327.9 1214.28 L1328.49 1214.28 L1329.08 1214.28 L1329.66 1214.28 L1330.25 1214.28 L1330.84 1214.28 L1331.42 1214.28 L1332.01 1214.28 L1332.6 1214.28 L1333.18 1214.28 L1333.77 1214.28 L1334.35 1214.28 L1334.94 1214.28 L1335.53 1214.28 L1336.11 1214.28 L1336.7 1214.28 L1337.29 1214.28 L1337.87 1214.28 L1338.46 1214.28 L1339.05 1214.28 L1339.63 1214.28 L1340.22 1214.28 L1340.8 1214.28 L1341.39 1214.28 L1341.98 1214.28 L1342.56 1214.28 L1343.15 1214.28 L1343.74 1214.28 L1344.32 1214.28 L1344.91 1214.28 L1345.5 1214.28 L1346.08 1214.28 L1346.67 1214.28 L1347.26 1214.28 L1347.84 1214.28 L1348.43 1214.28 L1349.01 1214.28 L1349.6 1214.28 L1350.19 1214.28 L1350.77 1214.28 L1351.36 1214.28 L1351.95 1214.28 L1352.53 1214.28 L1353.12 1214.28 L1353.71 1214.28 L1354.29 1214.28 L1354.88 1214.28 L1355.47 1214.28 L1356.05 1214.28 L1356.64 1214.28 L1357.22 1214.28 L1357.81 1214.28 L1358.4 1214.28 L1358.98 1214.28 L1359.57 1214.28 L1360.16 1214.28 L1360.74 1214.28 L1361.33 1214.28 L1361.92 1214.28 L1362.5 1214.28 L1363.09 1214.28 L1363.68 1214.28 L1364.26 1214.28 L1364.85 1214.28 L1365.43 1214.28 L1366.02 1214.28 L1366.61 1214.28 L1367.19 1214.28 L1367.78 1214.28 L1368.37 1214.28 L1368.95 1214.28 L1369.54 1214.28 L1370.13 1214.28 L1370.71 1214.28 L1371.3 1214.28 L1371.88 1214.28 L1372.47 1214.28 L1373.06 1214.28 L1373.64 1214.28 L1374.23 1214.28 L1374.82 1214.28 L1375.4 1214.28 L1375.99 1214.28 L1376.58 1214.28 L1377.16 1214.28 L1377.75 1214.28 L1378.34 1214.28 L1378.92 1214.28 L1379.51 1214.28 L1380.09 1214.28 L1380.68 1214.28 L1381.27 1214.28 L1381.85 1214.28 L1382.44 1214.28 L1383.03 1214.28 L1383.61 1214.28 L1384.2 1214.28 L1384.79 1214.28 L1385.37 1214.28 L1385.96 1214.28 L1386.55 1214.28 L1387.13 1214.28 L1387.72 1214.28 L1388.3 1214.28 L1388.89 1214.28 L1389.48 1214.28 L1390.06 1214.28 L1390.65 1214.28 L1391.24 1214.28 L1391.82 1214.28 L1392.41 1214.28 L1393 1214.28 L1393.58 1214.28 L1394.17 1214.28 L1394.75 1214.28 L1395.34 1214.28 L1395.93 1214.28 L1396.51 1214.28 L1397.1 1214.28 L1397.69 1214.28 L1398.27 1214.28 L1398.86 1214.28 L1399.45 1214.28 L1400.03 1214.28 L1400.62 1214.28 L1401.21 1214.28 L1401.79 1214.28 L1402.38 1214.28 L1402.96 1214.28 L1403.55 1214.28 L1404.14 1214.28 L1404.72 1214.28 L1405.31 1214.28 L1405.9 1214.28 L1406.48 1214.28 L1407.07 1214.28 L1407.66 1214.28 L1408.24 1214.28 L1408.83 1214.28 L1409.42 1214.28 L1410 1214.28 L1410.59 1214.28 L1411.17 1214.28 L1411.76 1214.28 L1412.35 1214.28 L1412.93 1214.28 L1413.52 1214.28 L1414.11 1214.28 L1414.69 1214.28 L1415.28 1214.28 L1415.87 1214.28 L1416.45 1214.28 L1417.04 1214.28 L1417.63 1214.28 L1418.21 1214.28 L1418.8 1214.28 L1419.38 1214.28 L1419.97 1214.28 L1420.56 1214.28 L1421.14 1214.28 L1421.73 1214.28 L1422.32 1214.28 L1422.9 1214.28 L1423.49 1214.28 L1424.08 1214.28 L1424.66 1214.28 L1425.25 1214.28 L1425.83 1214.28 L1426.42 1214.28 L1427.01 1214.28 L1427.59 1214.28 L1428.18 1214.28 L1428.77 1214.28 L1429.35 1214.28 L1429.94 1214.28 L1430.53 1214.28 L1431.11 1214.28 L1431.7 1214.28 L1432.29 1214.28 L1432.87 1214.28 L1433.46 1214.28 L1434.04 1214.28 L1434.63 1214.28 L1435.22 1214.28 L1435.8 1214.28 L1436.39 1214.28 L1436.98 1214.28 L1437.56 1214.28 L1438.15 1214.28 L1438.74 1214.28 L1439.32 1214.28 L1439.91 1214.28 L1440.5 1214.28 L1441.08 1214.28 L1441.67 1214.28 L1442.25 1214.28 L1442.84 1214.28 L1443.43 1214.28 L1444.01 1214.28 L1444.6 1214.28 L1445.19 1214.28 L1445.77 1214.28 L1446.36 1214.28 L1446.95 1214.28 L1447.53 1214.28 L1448.12 1214.28 L1448.7 1214.28 L1449.29 1214.28 L1449.88 1214.28 L1450.46 1214.28 L1451.05 1214.28 L1451.64 1214.28 L1452.22 1214.28 L1452.81 1214.28 L1453.4 1214.28 L1453.98 1214.28 L1454.57 1214.28 L1455.16 1214.28 L1455.74 1214.28 L1456.33 1214.28 L1456.91 1214.28 L1457.5 1214.28 L1458.09 1214.28 L1458.67 1214.28 L1459.26 1214.28 L1459.85 1214.28 L1460.43 1214.28 L1461.02 1214.28 L1461.61 1214.28 L1462.19 1214.28 L1462.78 1214.28 L1463.37 1214.28 L1463.95 1214.28 L1464.54 1214.28 L1465.12 1214.28 L1465.71 1214.28 L1466.3 1214.28 L1466.88 1214.28 L1467.47 1214.28 L1468.06 1214.28 L1468.64 1214.28 L1469.23 1214.28 L1469.82 1214.28 L1470.4 1214.28 L1470.99 1214.28 L1471.57 1214.28 L1472.16 1214.28 L1472.75 1214.28 L1473.33 1214.28 L1473.92 1214.28 L1474.51 1214.28 L1475.09 1214.28 L1475.68 1214.28 L1476.27 1214.28 L1476.85 1214.28 L1477.44 1214.28 L1478.03 1214.28 L1478.61 1214.28 L1479.2 1214.28 L1479.78 1214.28 L1480.37 1214.28 L1480.96 1214.28 L1481.54 1214.28 L1482.13 1214.28 L1482.72 1214.28 L1483.3 1214.28 L1483.89 1214.28 L1484.48 1214.28 L1485.06 1214.28 L1485.65 1214.28 L1486.24 1214.28 L1486.82 1214.28 L1487.41 1214.28 L1487.99 1214.28 L1488.58 1214.28 L1489.17 1214.28 L1489.75 1214.28 L1490.34 1214.28 L1490.93 1214.28 L1491.51 1214.28 L1492.1 1214.28 L1492.69 1214.28 L1493.27 1214.28 L1493.86 1214.28 L1494.45 1214.28 L1495.03 1214.28 L1495.62 1214.28 L1496.2 1214.28 L1496.79 1214.28 L1497.38 1214.28 L1497.96 1214.28 L1498.55 1214.28 L1499.14 1214.28 L1499.72 1214.28 L1500.31 1214.28 L1500.9 1214.28 L1501.48 1214.28 L1502.07 1214.28 L1502.65 1214.28 L1503.24 1214.28 L1503.83 1214.28 L1504.41 1214.28 L1505 1214.28 L1505.59 1214.28 L1506.17 1214.28 L1506.76 1214.28 L1507.35 1214.28 L1507.93 1214.28 L1508.52 1214.28 L1509.11 1214.28 L1509.69 1214.28 L1510.28 1214.28 L1510.86 1214.28 L1511.45 1214.28 L1512.04 1214.28 L1512.62 1214.28 L1513.21 1214.28 L1513.8 1214.28 L1514.38 1214.28 L1514.97 1214.28 L1515.56 1214.28 L1516.14 1214.28 L1516.73 1214.28 L1517.32 1214.28 L1517.9 1214.28 L1518.49 1214.28 L1519.07 1214.28 L1519.66 1214.28 L1520.25 1214.28 L1520.83 1214.28 L1521.42 1214.28 L1522.01 1214.28 L1522.59 1214.28 L1523.18 1214.28 L1523.77 1214.28 L1524.35 1214.28 L1524.94 1214.28 L1525.52 1214.28 L1526.11 1214.28 L1526.7 1214.28 L1527.28 1214.28 L1527.87 1214.28 L1528.46 1214.28 L1529.04 1214.28 L1529.63 1214.28 L1530.22 1214.28 L1530.8 1214.28 L1531.39 1214.28 L1531.98 1214.28 L1532.56 1214.28 L1533.15 1214.28 L1533.73 1214.28 L1534.32 1214.28 L1534.91 1214.28 L1535.49 1214.28 L1536.08 1214.28 L1536.67 1214.28 L1537.25 1214.28 L1537.84 1214.28 L1538.43 1214.28 L1539.01 1214.28 L1539.6 1214.28 L1540.19 1214.28 L1540.77 1214.28 L1541.36 1214.28 L1541.94 1214.28 L1542.53 1214.28 L1543.12 1214.28 L1543.7 1214.28 L1544.29 1214.28 L1544.88 1214.28 L1545.46 1214.28 L1546.05 1214.28 L1546.64 1214.28 L1547.22 1214.28 L1547.81 1214.28 L1548.4 1214.28 L1548.98 1214.28 L1549.57 1214.28 L1550.15 1214.28 L1550.74 1214.28 L1551.33 1214.28 L1551.91 1214.28 L1552.5 1214.28 L1553.09 1214.28 L1553.67 1214.28 L1554.26 1214.28 L1554.85 1214.28 L1555.43 1214.28 L1556.02 1214.28 L1556.6 1214.28 L1557.19 1214.28 L1557.78 1214.28 L1558.36 1214.28 L1558.95 1214.28 L1559.54 1214.28 L1560.12 1214.28 L1560.71 1214.28 L1561.3 1214.28 L1561.88 1214.28 L1562.47 1214.28 L1563.06 1214.28 L1563.64 1214.28 L1564.23 1214.28 L1564.81 1214.28 L1565.4 1214.28 L1565.99 1214.28 L1566.57 1214.28 L1567.16 1214.28 L1567.75 1214.28 L1568.33 1214.28 L1568.92 1214.28 L1569.51 1214.28 L1570.09 1214.28 L1570.68 1214.28 L1571.27 1214.28 L1571.85 1214.28 L1572.44 1214.28 L1573.02 1214.28 L1573.61 1214.28 L1574.2 1214.28 L1574.78 1214.28 L1575.37 1214.28 L1575.96 1214.28 L1576.54 1214.28 L1577.13 1214.28 L1577.72 1214.28 L1578.3 1214.28 L1578.89 1214.28 L1579.47 1214.28 L1580.06 1214.28 L1580.65 1214.28 L1581.23 1214.28 L1581.82 1214.28 L1582.41 1214.28 L1582.99 1214.28 L1583.58 1214.28 L1584.17 1214.28 L1584.75 1214.28 L1585.34 1214.28 L1585.93 1214.28 L1586.51 1214.28 L1587.1 1214.28 L1587.68 1214.28 L1588.27 1214.28 L1588.86 1214.28 L1589.44 1214.28 L1590.03 1214.28 L1590.62 1214.28 L1591.2 1214.28 L1591.79 1214.28 L1592.38 1214.28 L1592.96 1214.28 L1593.55 1214.28 L1594.14 1214.28 L1594.72 1214.28 L1595.31 1214.28 L1595.89 1214.28 L1596.48 1214.28 L1597.07 1214.28 L1597.65 1214.28 L1598.24 1214.28 L1598.83 1214.28 L1599.41 1214.28 L1600 1214.28 L1600.59 1214.28 L1601.17 1214.28 L1601.76 1214.28 L1602.34 1214.28 L1602.93 1214.28 L1603.52 1214.28 L1604.1 1214.28 L1604.69 1214.28 L1605.28 1214.28 L1605.86 1214.28 L1606.45 1214.28 L1607.04 1214.28 L1607.62 1214.28 L1608.21 1214.28 L1608.8 1214.28 L1609.38 1214.28 L1609.97 1214.28 L1610.55 1214.28 L1611.14 1214.28 L1611.73 1214.28 L1612.31 1214.28 L1612.9 1214.28 L1613.49 1214.28 L1614.07 1214.28 L1614.66 1214.28 L1615.25 1214.28 L1615.83 1214.28 L1616.42 1214.28 L1617.01 1214.28 L1617.59 1214.28 L1618.18 1214.28 L1618.76 1214.28 L1619.35 1214.28 L1619.94 1214.28 L1620.52 1214.28 L1621.11 1214.28 L1621.7 1214.28 L1622.28 1214.28 L1622.87 1214.28 L1623.46 1214.28 L1624.04 1214.28 L1624.63 1214.28 L1625.22 1214.28 L1625.8 1214.28 L1626.39 1214.28 L1626.97 1214.28 L1627.56 1214.28 L1628.15 1214.28 L1628.73 1214.28 L1629.32 1214.28 L1629.91 1214.28 L1630.49 1214.28 L1631.08 1214.28 L1631.67 1214.28 L1632.25 1214.28 L1632.84 1214.28 L1633.42 1214.28 L1634.01 1214.28 L1634.6 1214.28 L1635.18 1214.28 L1635.77 1214.28 L1636.36 1214.28 L1636.94 1214.28 L1637.53 1214.28 L1638.12 1214.28 L1638.7 1214.28 L1639.29 1214.28 L1639.88 1214.28 L1640.46 1214.28 L1641.05 1214.28 L1641.63 1214.28 L1642.22 1214.28 L1642.81 1214.28 L1643.39 1214.28 L1643.98 1214.28 L1644.57 1214.28 L1645.15 1214.28 L1645.74 1214.28 L1646.33 1214.28 L1646.91 1214.28 L1647.5 1214.28 L1648.09 1214.28 L1648.67 1214.28 L1649.26 1214.28 L1649.84 1214.28 L1650.43 1214.28 L1651.02 1214.28 L1651.6 1214.28 L1652.19 1214.28 L1652.78 1214.28 L1653.36 1214.28 L1653.95 1214.28 L1654.54 1214.28 L1655.12 1214.28 L1655.71 1214.28 L1656.29 1214.28 L1656.88 1214.28 L1657.47 1214.28 L1658.05 1214.28 L1658.64 1214.28 L1659.23 1214.28 L1659.81 1214.28 L1660.4 1214.28 L1660.99 1214.28 L1661.57 1214.28 L1662.16 1214.28 L1662.75 1214.28 L1663.33 1214.28 L1663.92 1214.28 L1664.5 1214.28 L1665.09 1214.28 L1665.68 1214.28 L1666.26 1214.28 L1666.85 1214.28 L1667.44 1214.28 L1668.02 1214.28 L1668.61 1214.28 L1669.2 1214.28 L1669.78 1214.28 L1670.37 1214.28 L1670.96 1214.28 L1671.54 1214.28 L1672.13 1214.28 L1672.71 1214.28 L1673.3 1214.28 L1673.89 1214.28 L1674.47 1214.28 L1675.06 1214.28 L1675.65 1214.28 L1676.23 1214.28 L1676.82 1214.28 L1677.41 1214.28 L1677.99 1214.28 L1678.58 1214.28 L1679.17 1214.28 L1679.75 1214.28 L1680.34 1214.28 L1680.92 1214.28 L1681.51 1214.28 L1682.1 1214.28 L1682.68 1214.28 L1683.27 1214.28 L1683.86 1214.28 L1684.44 1214.28 L1685.03 1214.28 L1685.62 1214.28 L1686.2 1214.28 L1686.79 1214.28 L1687.37 1214.28 L1687.96 1214.28 L1688.55 1214.28 L1689.13 1214.28 L1689.72 1214.28 L1690.31 1214.28 L1690.89 1214.28 L1691.48 1214.28 L1692.07 1214.28 L1692.65 1214.28 L1693.24 1214.28 L1693.83 1214.28 L1694.41 1214.28 L1695 1214.28 L1695.58 1214.28 L1696.17 1214.28 L1696.76 1214.28 L1697.34 1214.28 L1697.93 1214.28 L1698.52 1214.28 L1699.1 1214.28 L1699.69 1214.28 L1700.28 1214.28 L1700.86 1214.28 L1701.45 1214.28 L1702.04 1214.28 L1702.62 1214.28 L1703.21 1214.28 L1703.79 1214.28 L1704.38 1214.28 L1704.97 1214.28 L1705.55 1214.28 L1706.14 1214.28 L1706.73 1214.28 L1707.31 1214.28 L1707.9 1214.28 L1708.49 1214.28 L1709.07 1214.28 L1709.66 1214.28 L1710.24 1214.28 L1710.83 1214.28 L1711.42 1214.28 L1712 1214.28 L1712.59 1214.28 L1713.18 1214.28 L1713.76 1214.28 L1714.35 1214.28 L1714.94 1214.28 L1715.52 1214.28 L1716.11 1214.28 L1716.7 1214.28 L1717.28 1214.28 L1717.87 1214.28 L1718.45 1214.28 L1719.04 1214.28 L1719.63 1214.28 L1720.21 1214.28 L1720.8 1214.28 L1721.39 1214.28 L1721.97 1214.28 L1722.56 1214.28 L1723.15 1214.28 L1723.73 1214.28 L1724.32 1214.28 L1724.91 1214.28 L1725.49 1214.28 L1726.08 1214.28 L1726.66 1214.28 L1727.25 1214.28 L1727.84 1214.28 L1728.42 1214.28 L1729.01 1214.28 L1729.6 1214.28 L1730.18 1214.28 L1730.77 1214.28 L1731.36 1214.28 L1731.94 1214.28 L1732.53 1214.28 L1733.11 1214.28 L1733.7 1214.28 L1734.29 1214.28 L1734.87 1214.28 L1735.46 1214.28 L1736.05 1214.28 L1736.63 1214.28 L1737.22 1214.28 L1737.81 1214.28 L1738.39 1214.28 L1738.98 1214.28 L1739.57 1214.28 L1740.15 1214.28 L1740.74 1214.28 L1741.32 1214.28 L1741.91 1214.28 L1742.5 1214.28 L1743.08 1214.28 L1743.67 1214.28 L1744.26 1214.28 L1744.84 1214.28 L1745.43 1214.28 L1746.02 1214.28 L1746.6 1214.28 L1747.19 1214.28 L1747.78 1214.28 L1748.36 1214.28 L1748.95 1214.28 L1749.53 1214.28 L1750.12 1214.28 L1750.71 1214.28 L1751.29 1214.28 L1751.88 1214.28 L1752.47 1214.28 L1753.05 1214.28 L1753.64 1214.28 L1754.23 1214.28 L1754.81 1214.28 L1755.4 1214.28 L1755.99 1214.28 L1756.57 1214.28 L1757.16 1214.28 L1757.74 1214.28 L1758.33 1214.28 L1758.92 1214.28 L1759.5 1214.28 L1760.09 1214.28 L1760.68 1214.28 L1761.26 1214.28 L1761.85 1214.28 L1762.44 1214.28 L1763.02 1214.28 L1763.61 1214.28 L1764.19 1214.28 L1764.78 1214.28 L1765.37 1214.28 L1765.95 1214.28 L1766.54 1214.28 L1767.13 1214.28 L1767.71 1214.28 L1768.3 1214.28 L1768.89 1214.28 L1769.47 1214.28 L1770.06 1214.28 L1770.65 1214.28 L1771.23 1214.28 L1771.82 1214.28 L1772.4 1214.28 L1772.99 1214.28 L1773.58 1214.28 L1774.16 1214.28 L1774.75 1214.28 L1775.34 1214.28 L1775.92 1214.28 L1776.51 1214.28 L1777.1 1214.28 L1777.68 1214.28 L1778.27 1214.28 L1778.86 1214.28 L1779.44 1214.28 L1780.03 1214.28 L1780.61 1214.28 L1781.2 1214.28 L1781.79 1214.28 L1782.37 1214.28 L1782.96 1214.28 L1783.55 1214.28 L1784.13 1214.28 L1784.72 1214.28 L1785.31 1214.28 L1785.89 1214.28 L1786.48 1214.28 L1787.06 1214.28 L1787.65 1214.28 L1788.24 1214.28 L1788.82 1214.28 L1789.41 1214.28 L1790 1214.28 L1790.58 1214.28 L1791.17 1214.28 L1791.76 1214.28 L1792.34 1214.28 L1792.93 1214.28 L1793.52 1214.28 L1794.1 1214.28 L1794.69 1214.28 L1795.27 1214.28 L1795.86 1214.28 L1796.45 1214.28 L1797.03 1214.28 L1797.62 1214.28 L1798.21 1214.28 L1798.79 1214.28 L1799.38 1214.28 L1799.97 1214.28 L1800.55 1214.28 L1801.14 1214.28 L1801.73 1214.28 L1802.31 1214.28 L1802.9 1214.28 L1803.48 1214.28 L1804.07 1214.28 L1804.66 1214.28 L1805.24 1214.28 L1805.83 1214.28 L1806.42 1214.28 L1807 1214.28 L1807.59 1214.28 L1808.18 1214.28 L1808.76 1214.28 L1809.35 1214.28 L1809.94 1214.28 L1810.52 1214.28 L1811.11 1214.28 L1811.69 1214.28 L1812.28 1214.28 L1812.87 1214.28 L1813.45 1214.28 L1814.04 1214.28 L1814.63 1214.28 L1815.21 1214.28 L1815.8 1214.28 L1816.39 1214.28 L1816.97 1214.28 L1817.56 1214.28 L1818.14 1214.28 L1818.73 1214.28 L1819.32 1214.28 L1819.9 1214.28 L1820.49 1214.28 L1821.08 1214.28 L1821.66 1214.28 L1822.25 1214.28 L1822.84 1214.28 L1823.42 1214.28 L1824.01 1214.28 L1824.6 1214.28 L1825.18 1214.28 L1825.77 1214.28 L1826.35 1214.28 L1826.94 1214.28 L1827.53 1214.28 L1828.11 1214.28 L1828.7 1214.28 L1829.29 1214.28 L1829.87 1214.28 L1830.46 1214.28 L1831.05 1214.28 L1831.63 1214.28 L1832.22 1214.28 L1832.81 1214.28 L1833.39 1214.28 L1833.98 1214.28 L1834.56 1214.28 L1835.15 1214.28 L1835.74 1214.28 L1836.32 1214.28 L1836.91 1214.28 L1837.5 1214.28 L1838.08 1214.28 L1838.67 1214.28 L1839.26 1214.28 L1839.84 1214.28 L1840.43 1214.28 L1841.01 1214.28 L1841.6 1214.28 L1842.19 1214.28 L1842.77 1214.28 L1843.36 1214.28 L1843.95 1214.28 L1844.53 1214.28 L1845.12 1214.28 L1845.71 1214.28 L1846.29 1214.28 L1846.88 1214.28 L1847.47 1214.28 L1848.05 1214.28 L1848.64 1214.28 L1849.22 1214.28 L1849.81 1214.28 L1850.4 1214.28 L1850.98 1214.28 L1851.57 1214.28 L1852.16 1214.28 L1852.74 1214.28 L1853.33 1214.28 L1853.92 1214.28 L1854.5 1214.28 L1855.09 1214.28 L1855.68 1214.28 L1856.26 1214.28 L1856.85 1214.28 L1857.43 1214.28 L1858.02 1214.28 L1858.61 1214.28 L1859.19 1214.28 L1859.78 1214.28 L1860.37 1214.28 L1860.95 1214.28 L1861.54 1214.28 L1862.13 1214.28 L1862.71 1214.28 L1863.3 1214.28 L1863.88 1214.28 L1864.47 1214.28 L1865.06 1214.28 L1865.64 1214.28 L1866.23 1214.28 L1866.82 1214.28 L1867.4 1214.28 L1867.99 1214.28 L1868.58 1214.28 L1869.16 1214.28 L1869.75 1214.28 L1870.34 1214.28 L1870.92 1214.28 L1871.51 1214.28 L1872.09 1214.28 L1872.68 1214.28 L1873.27 1214.28 L1873.85 1214.28 L1874.44 1214.28 L1875.03 1214.28 L1875.61 1214.28 L1876.2 1214.28 L1876.79 1214.28 L1877.37 1214.28 L1877.96 1214.28 L1878.55 1214.28 L1879.13 1214.28 L1879.72 1214.28 L1880.3 1214.28 L1880.89 1214.28 L1881.48 1214.28 L1882.06 1214.28 L1882.65 1214.28 L1883.24 1214.28 L1883.82 1214.28 L1884.41 1214.28 L1885 1214.28 L1885.58 1214.28 L1886.17 1214.28 L1886.76 1214.28 L1887.34 1214.28 L1887.93 1214.28 L1888.51 1214.28 L1889.1 1214.28 L1889.69 1214.28 L1890.27 1214.28 L1890.86 1214.28 L1891.45 1214.28 L1892.03 1214.28 L1892.62 1214.28 L1893.21 1214.28 L1893.79 1214.28 L1894.38 1214.28 L1894.96 1214.28 L1895.55 1214.28 L1896.14 1214.28 L1896.72 1214.28 L1897.31 1214.28 L1897.9 1214.28 L1898.48 1214.28 L1899.07 1214.28 L1899.66 1214.28 L1900.24 1214.28 L1900.83 1214.28 L1901.42 1214.28 L1902 1214.28 L1902.59 1214.28 L1903.17 1214.28 L1903.76 1214.28 L1904.35 1214.28 L1904.93 1214.28 L1905.52 1214.28 L1906.11 1214.28 L1906.69 1214.28 L1907.28 1214.28 L1907.87 1214.28 L1908.45 1214.28 L1909.04 1214.28 L1909.63 1214.28 L1910.21 1214.28 L1910.8 1214.28 L1911.38 1214.28 L1911.97 1214.28 L1912.56 1214.28 L1913.14 1214.28 L1913.73 1214.28 L1914.32 1214.28 L1914.9 1214.28 L1915.49 1214.28 L1916.08 1214.28 L1916.66 1214.28 L1917.25 1214.28 L1917.83 1214.28 L1918.42 1214.28 L1919.01 1214.28 L1919.59 1214.28 L1920.18 1214.28 L1920.77 1214.28 L1921.35 1214.28 L1921.94 1214.28 L1922.53 1214.28 L1923.11 1214.28 L1923.7 1214.28 L1924.29 1214.28 L1924.87 1214.28 L1925.46 1214.28 L1926.04 1214.28 L1926.63 1214.28 L1927.22 1214.28 L1927.8 1214.28 L1928.39 1214.28 L1928.98 1214.28 L1929.56 1214.28 L1930.15 1214.28 L1930.74 1214.28 L1931.32 1214.28 L1931.91 1214.28 L1932.5 1214.28 L1933.08 1214.28 L1933.67 1214.28 L1934.25 1214.28 L1934.84 1214.28 L1935.43 1214.28 L1936.01 1214.28 L1936.6 1214.28 L1937.19 1214.28 L1937.77 1214.28 L1938.36 1214.28 L1938.95 1214.28 L1939.53 1214.28 L1940.12 1214.28 L1940.71 1214.28 L1941.29 1214.28 L1941.88 1214.28 L1942.46 1214.28 L1943.05 1214.28 L1943.64 1214.28 L1944.22 1214.28 L1944.81 1214.28 L1945.4 1214.28 L1945.98 1214.28 L1946.57 1214.28 L1947.16 1214.28 L1947.74 1214.28 L1948.33 1214.28 L1948.91 1214.28 L1949.5 1214.28 L1950.09 1214.28 L1950.67 1214.28 L1951.26 1214.28 L1951.85 1214.28 L1952.43 1214.28 L1953.02 1214.28 L1953.61 1214.28 L1954.19 1214.28 L1954.78 1214.28 L1955.37 1214.28 L1955.95 1214.28 L1956.54 1214.28 L1957.12 1214.28 L1957.71 1214.28 L1958.3 1214.28 L1958.88 1214.28 L1959.47 1214.28 L1960.06 1214.28 L1960.64 1214.28 L1961.23 1214.28 L1961.82 1214.28 L1962.4 1214.28 L1962.99 1214.28 L1963.58 1214.28 L1964.16 1214.28 L1964.75 1214.28 L1965.33 1214.28 L1965.92 1214.28 L1966.51 1214.28 L1967.09 1214.28 L1967.68 1214.28 L1968.27 1214.28 L1968.85 1214.28 L1969.44 1214.28 L1970.03 1214.28 L1970.61 1214.28 L1971.2 1214.28 L1971.78 1214.28 L1972.37 1214.28 L1972.96 1214.28 L1973.54 1214.28 L1974.13 1214.28 L1974.72 1214.28 L1975.3 1214.28 L1975.89 1214.28 L1976.48 1214.28 L1977.06 1214.28 L1977.65 1214.28 L1978.24 1214.28 L1978.82 1214.28 L1979.41 1214.28 L1979.99 1214.28 L1980.58 1214.28 L1981.17 1214.28 L1981.75 1214.28 L1982.34 1214.28 L1982.93 1214.28 L1983.51 1214.28 L1984.1 1214.28 L1984.69 1214.28 L1985.27 1214.28 L1985.86 1214.28 L1986.45 1214.28 L1987.03 1214.28 L1987.62 1214.28 L1988.2 1214.28 L1988.79 1214.28 L1989.38 1214.28 L1989.96 1214.28 L1990.55 1214.28 L1991.14 1214.28 L1991.72 1214.28 L1992.31 1214.28 L1992.9 1214.28 L1993.48 1214.28 L1994.07 1214.28 L1994.65 1214.28 L1995.24 1214.28 L1995.83 1214.28 L1996.41 1214.28 L1997 1214.28 L1997.59 1214.28 L1998.17 1214.28 L1998.76 1214.28 L1999.35 1214.28 L1999.93 1214.28 L2000.52 1214.28 L2001.11 1214.28 L2001.69 1214.28 L2002.28 1214.28 L2002.86 1214.28 L2003.45 1214.28 L2004.04 1214.28 L2004.62 1214.28 L2005.21 1214.28 L2005.8 1214.28 L2006.38 1214.28 L2006.97 1214.28 L2007.56 1214.28 L2008.14 1214.28 L2008.73 1214.28 L2009.32 1214.28 L2009.9 1214.28 L2010.49 1214.28 L2011.07 1214.28 L2011.66 1214.28 L2012.25 1214.28 L2012.83 1214.28 L2013.42 1214.28 L2014.01 1214.28 L2014.59 1214.28 L2015.18 1214.28 L2015.77 1214.28 L2016.35 1214.28 L2016.94 1214.28 L2017.53 1214.28 L2018.11 1214.28 L2018.7 1214.28 L2019.28 1214.28 L2019.87 1214.28 L2020.46 1214.28 L2021.04 1214.28 L2021.63 1214.28 L2022.22 1214.28 L2022.8 1214.28 L2023.39 1214.28 L2023.98 1214.28 L2024.56 1214.28 L2025.15 1214.28 L2025.73 1214.28 L2026.32 1214.28 L2026.91 1214.28 L2027.49 1214.28 L2028.08 1214.28 L2028.67 1214.28 L2029.25 1214.28 L2029.84 1214.28 L2030.43 1214.28 L2031.01 1214.28 L2031.6 1214.28 L2032.19 1214.28 L2032.77 1214.28 L2033.36 1214.28 L2033.94 1214.28 L2034.53 1214.28 L2035.12 1214.28 L2035.7 1214.28 L2036.29 1214.28 L2036.88 1214.28 L2037.46 1214.28 L2038.05 1214.28 L2038.64 1214.28 L2039.22 1214.28 L2039.81 1214.28 L2040.4 1214.28 L2040.98 1214.28 L2041.57 1214.28 L2042.15 1214.28 L2042.74 1214.28 L2043.33 1214.28 L2043.91 1214.28 L2044.5 1214.28 L2045.09 1214.28 L2045.67 1214.28 L2046.26 1214.28 L2046.85 1214.28 L2047.43 1214.28 L2048.02 1214.28 L2048.6 1214.28 L2049.19 1214.28 L2049.78 1214.28 L2050.36 1214.28 L2050.95 1214.28 L2051.54 1214.28 L2052.12 1214.28 L2052.71 1214.28 L2053.3 1214.28 L2053.88 1214.28 L2054.47 1214.28 L2055.06 1214.28 L2055.64 1214.28 L2056.23 1214.28 L2056.81 1214.28 L2057.4 1214.28 L2057.99 1214.28 L2058.57 1214.28 L2059.16 1214.28 L2059.75 1214.28 L2060.33 1214.28 L2060.92 1214.28 L2061.51 1214.28 L2062.09 1214.28 L2062.68 1214.28 L2063.27 1214.28 L2063.85 1214.28 L2064.44 1214.28 L2065.02 1214.28 L2065.61 1214.28 L2066.2 1214.28 L2066.78 1214.28 L2067.37 1214.28 L2067.96 1214.28 L2068.54 1214.28 L2069.13 1214.28 L2069.72 1214.28 L2070.3 1214.28 L2070.89 1214.28 L2071.48 1214.28 L2072.06 1214.28 L2072.65 1214.28 L2073.23 1214.28 L2073.82 1214.28 L2074.41 1214.28 L2074.99 1214.28 L2075.58 1214.28 L2076.17 1214.28 L2076.75 1214.28 L2077.34 1214.28 L2077.93 1214.28 L2078.51 1214.28 L2079.1 1214.28 L2079.68 1214.28 L2080.27 1214.28 L2080.86 1214.28 L2081.44 1214.28 L2082.03 1214.28 L2082.62 1214.28 L2083.2 1214.28 L2083.79 1214.28 L2084.38 1214.28 L2084.96 1214.28 L2085.55 1214.28 L2086.14 1214.28 L2086.72 1214.28 L2087.31 1214.28 L2087.89 1214.28 L2088.48 1214.28 L2089.07 1214.28 L2089.65 1214.28 L2090.24 1214.28 L2090.83 1214.28 L2091.41 1214.28 L2092 1214.28 L2092.59 1214.28 L2093.17 1214.28 L2093.76 1214.28 L2094.35 1214.28 L2094.93 1214.28 L2095.52 1214.28 L2096.1 1214.28 L2096.69 1214.28 L2097.28 1214.28 L2097.86 1214.28 L2098.45 1214.28 L2099.04 1214.28 L2099.62 1214.28 L2100.21 1214.28 L2100.8 1214.28 L2101.38 1214.28 L2101.97 1214.28 L2102.55 1214.28 L2103.14 1214.28 L2103.73 1214.28 L2104.31 1214.28 L2104.9 1214.28 L2105.49 1214.28 L2106.07 1214.28 L2106.66 1214.28 L2107.25 1214.28 L2107.83 1214.28 L2108.42 1214.28 L2109.01 1214.28 L2109.59 1214.28 L2110.18 1214.28 L2110.76 1214.28 L2111.35 1214.28 L2111.94 1214.28 L2112.52 1214.28 L2113.11 1214.28 L2113.7 1214.28 L2114.28 1214.28 L2114.87 1214.28 L2115.46 1214.28 L2116.04 1214.28 L2116.63 1214.28 L2117.22 1214.28 L2117.8 1214.28 L2118.39 1214.28 L2118.97 1214.28 L2119.56 1214.28 L2120.15 1214.28 L2120.73 1214.28 L2121.32 1214.28 L2121.91 1214.28 L2122.49 1214.28 L2123.08 1214.28 L2123.67 1214.28 L2124.25 1214.28 L2124.84 1214.28 L2125.42 1214.28 L2126.01 1214.28 L2126.6 1214.28 L2127.18 1214.28 L2127.77 1214.28 L2128.36 1214.28 L2128.94 1214.28 L2129.53 1214.28 L2130.12 1214.28 L2130.7 1214.28 L2131.29 1214.28 L2131.88 1214.28 L2132.46 1214.28 L2133.05 1214.28 L2133.63 1214.28 L2134.22 1214.28 L2134.81 1214.28 L2135.39 1214.28 L2135.98 1214.28 L2136.57 1214.28 L2137.15 1214.28 L2137.74 1214.28 L2138.33 1214.28 L2138.91 1214.28 L2139.5 1214.28 L2140.09 1214.28 L2140.67 1214.28 L2141.26 1214.28 L2141.84 1214.28 L2142.43 1214.28 L2143.02 1214.28 L2143.6 1214.28 L2144.19 1214.28 L2144.78 1214.28 L2145.36 1214.28 L2145.95 1214.28 L2146.54 1214.28 L2147.12 1214.28 L2147.71 1214.28 L2148.3 1214.28 L2148.88 1214.28 L2149.47 1214.28 L2150.05 1214.28 L2150.64 1214.28 L2151.23 1214.28 L2151.81 1214.28 L2152.4 1214.28 L2152.99 1214.28 L2153.57 1214.28 L2154.16 1214.28 L2154.75 1214.28 L2155.33 1214.28 L2155.92 1214.28 L2156.5 1214.28 L2157.09 1214.28 L2157.68 1214.28 L2158.26 1214.28 L2158.26 1214.04 L2157.68 1214.04 L2157.09 1214.04 L2156.5 1214.04 L2155.92 1214.04 L2155.33 1214.04 L2154.75 1214.04 L2154.16 1214.04 L2153.57 1214.04 L2152.99 1214.04 L2152.4 1214.04 L2151.81 1214.04 L2151.23 1214.04 L2150.64 1214.04 L2150.05 1214.04 L2149.47 1214.04 L2148.88 1214.04 L2148.3 1214.04 L2147.71 1214.04 L2147.12 1214.04 L2146.54 1214.04 L2145.95 1214.04 L2145.36 1214.04 L2144.78 1214.04 L2144.19 1214.04 L2143.6 1214.04 L2143.02 1214.04 L2142.43 1214.04 L2141.84 1214.04 L2141.26 1214.04 L2140.67 1214.04 L2140.09 1214.04 L2139.5 1214.04 L2138.91 1214.04 L2138.33 1214.04 L2137.74 1214.04 L2137.15 1214.04 L2136.57 1214.04 L2135.98 1214.04 L2135.39 1214.04 L2134.81 1214.04 L2134.22 1214.04 L2133.63 1214.04 L2133.05 1214.04 L2132.46 1214.04 L2131.88 1214.04 L2131.29 1214.04 L2130.7 1214.04 L2130.12 1214.04 L2129.53 1214.04 L2128.94 1214.04 L2128.36 1214.04 L2127.77 1214.04 L2127.18 1214.04 L2126.6 1214.04 L2126.01 1214.04 L2125.42 1214.04 L2124.84 1214.04 L2124.25 1214.04 L2123.67 1214.04 L2123.08 1214.04 L2122.49 1214.04 L2121.91 1214.04 L2121.32 1214.04 L2120.73 1214.04 L2120.15 1214.04 L2119.56 1214.04 L2118.97 1214.04 L2118.39 1214.04 L2117.8 1214.04 L2117.22 1214.04 L2116.63 1214.04 L2116.04 1214.04 L2115.46 1214.04 L2114.87 1214.04 L2114.28 1214.04 L2113.7 1214.04 L2113.11 1214.04 L2112.52 1214.04 L2111.94 1214.04 L2111.35 1214.04 L2110.76 1214.04 L2110.18 1214.04 L2109.59 1214.04 L2109.01 1214.04 L2108.42 1214.04 L2107.83 1214.04 L2107.25 1214.04 L2106.66 1214.04 L2106.07 1214.04 L2105.49 1214.04 L2104.9 1214.04 L2104.31 1214.04 L2103.73 1214.04 L2103.14 1214.04 L2102.55 1214.04 L2101.97 1214.04 L2101.38 1214.04 L2100.8 1214.04 L2100.21 1214.04 L2099.62 1214.04 L2099.04 1214.04 L2098.45 1214.04 L2097.86 1214.04 L2097.28 1214.04 L2096.69 1214.04 L2096.1 1214.04 L2095.52 1214.04 L2094.93 1214.04 L2094.35 1214.04 L2093.76 1214.04 L2093.17 1214.04 L2092.59 1214.04 L2092 1214.04 L2091.41 1214.04 L2090.83 1214.04 L2090.24 1214.04 L2089.65 1214.04 L2089.07 1214.04 L2088.48 1214.04 L2087.89 1214.04 L2087.31 1214.04 L2086.72 1214.04 L2086.14 1214.04 L2085.55 1214.04 L2084.96 1214.04 L2084.38 1214.04 L2083.79 1214.04 L2083.2 1214.04 L2082.62 1214.04 L2082.03 1214.04 L2081.44 1214.04 L2080.86 1214.04 L2080.27 1214.04 L2079.68 1214.04 L2079.1 1214.04 L2078.51 1214.04 L2077.93 1214.04 L2077.34 1214.04 L2076.75 1214.04 L2076.17 1214.04 L2075.58 1214.04 L2074.99 1214.04 L2074.41 1214.04 L2073.82 1214.04 L2073.23 1214.04 L2072.65 1214.04 L2072.06 1214.04 L2071.48 1214.04 L2070.89 1214.04 L2070.3 1214.04 L2069.72 1214.04 L2069.13 1214.04 L2068.54 1214.04 L2067.96 1214.04 L2067.37 1214.04 L2066.78 1214.04 L2066.2 1214.04 L2065.61 1214.04 L2065.02 1214.04 L2064.44 1214.04 L2063.85 1214.04 L2063.27 1214.04 L2062.68 1214.04 L2062.09 1214.04 L2061.51 1214.04 L2060.92 1214.04 L2060.33 1214.04 L2059.75 1214.04 L2059.16 1214.04 L2058.57 1214.04 L2057.99 1214.04 L2057.4 1214.04 L2056.81 1214.04 L2056.23 1214.04 L2055.64 1214.04 L2055.06 1214.04 L2054.47 1214.04 L2053.88 1214.04 L2053.3 1214.04 L2052.71 1214.04 L2052.12 1214.04 L2051.54 1214.04 L2050.95 1214.04 L2050.36 1214.04 L2049.78 1214.04 L2049.19 1214.04 L2048.6 1214.04 L2048.02 1214.04 L2047.43 1214.04 L2046.85 1214.04 L2046.26 1214.04 L2045.67 1214.04 L2045.09 1214.04 L2044.5 1214.04 L2043.91 1214.04 L2043.33 1214.04 L2042.74 1214.04 L2042.15 1214.04 L2041.57 1214.04 L2040.98 1214.04 L2040.4 1214.04 L2039.81 1214.04 L2039.22 1214.04 L2038.64 1214.04 L2038.05 1214.04 L2037.46 1214.04 L2036.88 1214.04 L2036.29 1214.04 L2035.7 1214.04 L2035.12 1214.04 L2034.53 1214.04 L2033.94 1214.04 L2033.36 1214.04 L2032.77 1214.04 L2032.19 1214.04 L2031.6 1214.04 L2031.01 1214.04 L2030.43 1214.04 L2029.84 1214.04 L2029.25 1214.04 L2028.67 1214.04 L2028.08 1214.04 L2027.49 1214.04 L2026.91 1214.04 L2026.32 1214.04 L2025.73 1214.04 L2025.15 1214.04 L2024.56 1214.04 L2023.98 1214.04 L2023.39 1214.04 L2022.8 1214.04 L2022.22 1214.04 L2021.63 1214.04 L2021.04 1214.04 L2020.46 1214.04 L2019.87 1214.04 L2019.28 1214.04 L2018.7 1214.04 L2018.11 1214.04 L2017.53 1214.04 L2016.94 1214.04 L2016.35 1214.04 L2015.77 1214.04 L2015.18 1214.04 L2014.59 1214.04 L2014.01 1214.04 L2013.42 1214.04 L2012.83 1214.04 L2012.25 1214.04 L2011.66 1214.04 L2011.07 1214.04 L2010.49 1214.04 L2009.9 1214.04 L2009.32 1214.04 L2008.73 1214.04 L2008.14 1214.04 L2007.56 1214.04 L2006.97 1214.04 L2006.38 1214.04 L2005.8 1214.04 L2005.21 1214.04 L2004.62 1214.04 L2004.04 1214.04 L2003.45 1214.04 L2002.86 1214.04 L2002.28 1214.04 L2001.69 1214.04 L2001.11 1214.04 L2000.52 1214.04 L1999.93 1214.04 L1999.35 1214.04 L1998.76 1214.04 L1998.17 1214.04 L1997.59 1214.04 L1997 1214.04 L1996.41 1214.04 L1995.83 1214.04 L1995.24 1214.04 L1994.65 1214.04 L1994.07 1214.04 L1993.48 1214.04 L1992.9 1214.04 L1992.31 1214.04 L1991.72 1214.04 L1991.14 1214.04 L1990.55 1214.04 L1989.96 1214.04 L1989.38 1214.04 L1988.79 1214.04 L1988.2 1214.04 L1987.62 1214.04 L1987.03 1214.04 L1986.45 1214.04 L1985.86 1214.04 L1985.27 1214.04 L1984.69 1214.04 L1984.1 1214.04 L1983.51 1214.04 L1982.93 1214.04 L1982.34 1214.04 L1981.75 1214.04 L1981.17 1214.04 L1980.58 1214.04 L1979.99 1214.04 L1979.41 1214.04 L1978.82 1214.04 L1978.24 1214.04 L1977.65 1214.04 L1977.06 1214.04 L1976.48 1214.04 L1975.89 1214.04 L1975.3 1214.04 L1974.72 1214.04 L1974.13 1214.04 L1973.54 1214.04 L1972.96 1214.04 L1972.37 1214.04 L1971.78 1214.04 L1971.2 1214.04 L1970.61 1214.04 L1970.03 1214.04 L1969.44 1214.04 L1968.85 1214.04 L1968.27 1214.04 L1967.68 1214.04 L1967.09 1214.04 L1966.51 1214.04 L1965.92 1214.04 L1965.33 1214.04 L1964.75 1214.04 L1964.16 1214.04 L1963.58 1214.04 L1962.99 1214.04 L1962.4 1214.04 L1961.82 1214.04 L1961.23 1214.04 L1960.64 1214.04 L1960.06 1214.04 L1959.47 1214.04 L1958.88 1214.04 L1958.3 1214.04 L1957.71 1214.04 L1957.12 1214.04 L1956.54 1214.04 L1955.95 1214.04 L1955.37 1214.04 L1954.78 1214.04 L1954.19 1214.04 L1953.61 1214.04 L1953.02 1214.04 L1952.43 1214.04 L1951.85 1214.04 L1951.26 1214.04 L1950.67 1214.04 L1950.09 1214.04 L1949.5 1214.04 L1948.91 1214.04 L1948.33 1214.04 L1947.74 1214.04 L1947.16 1214.04 L1946.57 1214.04 L1945.98 1214.04 L1945.4 1214.04 L1944.81 1214.04 L1944.22 1214.04 L1943.64 1214.04 L1943.05 1214.04 L1942.46 1214.04 L1941.88 1214.04 L1941.29 1214.04 L1940.71 1214.04 L1940.12 1214.04 L1939.53 1214.04 L1938.95 1214.04 L1938.36 1214.04 L1937.77 1214.04 L1937.19 1214.04 L1936.6 1214.04 L1936.01 1214.04 L1935.43 1214.04 L1934.84 1214.04 L1934.25 1214.04 L1933.67 1214.04 L1933.08 1214.04 L1932.5 1214.04 L1931.91 1214.04 L1931.32 1214.04 L1930.74 1214.04 L1930.15 1214.04 L1929.56 1214.04 L1928.98 1214.04 L1928.39 1214.04 L1927.8 1214.04 L1927.22 1214.04 L1926.63 1214.04 L1926.04 1214.04 L1925.46 1214.04 L1924.87 1214.04 L1924.29 1214.04 L1923.7 1214.04 L1923.11 1214.04 L1922.53 1214.04 L1921.94 1214.04 L1921.35 1214.04 L1920.77 1214.04 L1920.18 1214.04 L1919.59 1214.04 L1919.01 1214.04 L1918.42 1214.04 L1917.83 1214.04 L1917.25 1214.04 L1916.66 1214.04 L1916.08 1214.04 L1915.49 1214.04 L1914.9 1214.04 L1914.32 1214.04 L1913.73 1214.04 L1913.14 1214.04 L1912.56 1214.04 L1911.97 1214.04 L1911.38 1214.04 L1910.8 1214.04 L1910.21 1214.04 L1909.63 1214.04 L1909.04 1214.04 L1908.45 1214.04 L1907.87 1214.04 L1907.28 1214.04 L1906.69 1214.04 L1906.11 1214.04 L1905.52 1214.04 L1904.93 1214.04 L1904.35 1214.04 L1903.76 1214.04 L1903.17 1214.04 L1902.59 1214.04 L1902 1214.04 L1901.42 1214.04 L1900.83 1214.04 L1900.24 1214.04 L1899.66 1214.04 L1899.07 1214.04 L1898.48 1214.04 L1897.9 1214.04 L1897.31 1214.04 L1896.72 1214.04 L1896.14 1214.04 L1895.55 1214.04 L1894.96 1214.04 L1894.38 1214.04 L1893.79 1214.04 L1893.21 1214.04 L1892.62 1214.04 L1892.03 1214.04 L1891.45 1214.04 L1890.86 1214.04 L1890.27 1214.04 L1889.69 1214.04 L1889.1 1214.04 L1888.51 1214.04 L1887.93 1214.04 L1887.34 1214.04 L1886.76 1214.04 L1886.17 1214.04 L1885.58 1214.04 L1885 1214.04 L1884.41 1214.04 L1883.82 1214.04 L1883.24 1214.04 L1882.65 1214.04 L1882.06 1214.04 L1881.48 1214.04 L1880.89 1214.04 L1880.3 1214.04 L1879.72 1214.04 L1879.13 1214.04 L1878.55 1214.04 L1877.96 1214.04 L1877.37 1214.04 L1876.79 1214.04 L1876.2 1214.04 L1875.61 1214.04 L1875.03 1214.04 L1874.44 1214.04 L1873.85 1214.04 L1873.27 1214.04 L1872.68 1214.04 L1872.09 1214.04 L1871.51 1214.04 L1870.92 1214.04 L1870.34 1214.04 L1869.75 1214.04 L1869.16 1214.04 L1868.58 1214.04 L1867.99 1214.04 L1867.4 1214.04 L1866.82 1214.04 L1866.23 1214.04 L1865.64 1214.04 L1865.06 1214.04 L1864.47 1214.04 L1863.88 1214.04 L1863.3 1214.04 L1862.71 1214.04 L1862.13 1214.04 L1861.54 1214.04 L1860.95 1214.04 L1860.37 1214.04 L1859.78 1214.04 L1859.19 1214.04 L1858.61 1214.04 L1858.02 1214.04 L1857.43 1214.04 L1856.85 1214.04 L1856.26 1214.04 L1855.68 1214.04 L1855.09 1214.04 L1854.5 1214.04 L1853.92 1214.04 L1853.33 1214.04 L1852.74 1214.04 L1852.16 1214.04 L1851.57 1214.04 L1850.98 1214.04 L1850.4 1214.04 L1849.81 1214.04 L1849.22 1214.04 L1848.64 1214.04 L1848.05 1214.04 L1847.47 1214.04 L1846.88 1214.04 L1846.29 1214.04 L1845.71 1214.04 L1845.12 1214.04 L1844.53 1214.04 L1843.95 1214.04 L1843.36 1214.04 L1842.77 1214.04 L1842.19 1214.04 L1841.6 1214.04 L1841.01 1214.04 L1840.43 1214.04 L1839.84 1214.04 L1839.26 1214.04 L1838.67 1214.04 L1838.08 1214.04 L1837.5 1214.04 L1836.91 1214.04 L1836.32 1214.04 L1835.74 1214.04 L1835.15 1214.04 L1834.56 1214.04 L1833.98 1214.04 L1833.39 1214.04 L1832.81 1214.04 L1832.22 1214.04 L1831.63 1214.04 L1831.05 1214.04 L1830.46 1214.04 L1829.87 1214.04 L1829.29 1214.04 L1828.7 1214.04 L1828.11 1214.04 L1827.53 1214.04 L1826.94 1214.04 L1826.35 1214.04 L1825.77 1214.04 L1825.18 1214.04 L1824.6 1214.04 L1824.01 1214.04 L1823.42 1214.04 L1822.84 1214.04 L1822.25 1214.04 L1821.66 1214.04 L1821.08 1214.04 L1820.49 1214.04 L1819.9 1214.04 L1819.32 1214.04 L1818.73 1214.04 L1818.14 1214.04 L1817.56 1214.04 L1816.97 1214.04 L1816.39 1214.04 L1815.8 1214.04 L1815.21 1214.04 L1814.63 1214.04 L1814.04 1214.04 L1813.45 1214.04 L1812.87 1214.04 L1812.28 1214.04 L1811.69 1214.04 L1811.11 1214.04 L1810.52 1214.04 L1809.94 1214.04 L1809.35 1214.04 L1808.76 1214.04 L1808.18 1214.04 L1807.59 1214.04 L1807 1214.04 L1806.42 1214.04 L1805.83 1214.04 L1805.24 1214.04 L1804.66 1214.04 L1804.07 1214.04 L1803.48 1214.04 L1802.9 1214.04 L1802.31 1214.04 L1801.73 1214.04 L1801.14 1214.04 L1800.55 1214.04 L1799.97 1214.04 L1799.38 1214.04 L1798.79 1214.04 L1798.21 1214.04 L1797.62 1214.04 L1797.03 1214.04 L1796.45 1214.04 L1795.86 1214.04 L1795.27 1214.04 L1794.69 1214.04 L1794.1 1214.04 L1793.52 1214.04 L1792.93 1214.04 L1792.34 1214.04 L1791.76 1214.04 L1791.17 1214.04 L1790.58 1214.04 L1790 1214.04 L1789.41 1214.04 L1788.82 1214.04 L1788.24 1214.04 L1787.65 1214.04 L1787.06 1214.04 L1786.48 1214.04 L1785.89 1214.04 L1785.31 1214.04 L1784.72 1214.04 L1784.13 1214.04 L1783.55 1214.04 L1782.96 1214.04 L1782.37 1214.04 L1781.79 1214.04 L1781.2 1214.04 L1780.61 1214.04 L1780.03 1214.04 L1779.44 1214.04 L1778.86 1214.04 L1778.27 1214.04 L1777.68 1214.04 L1777.1 1214.04 L1776.51 1214.04 L1775.92 1214.04 L1775.34 1214.04 L1774.75 1214.04 L1774.16 1214.04 L1773.58 1214.04 L1772.99 1214.04 L1772.4 1214.04 L1771.82 1214.04 L1771.23 1214.04 L1770.65 1214.04 L1770.06 1214.04 L1769.47 1214.04 L1768.89 1214.04 L1768.3 1214.04 L1767.71 1214.04 L1767.13 1214.04 L1766.54 1214.04 L1765.95 1214.04 L1765.37 1214.04 L1764.78 1214.04 L1764.19 1214.04 L1763.61 1214.04 L1763.02 1214.04 L1762.44 1214.04 L1761.85 1214.04 L1761.26 1214.04 L1760.68 1214.04 L1760.09 1214.04 L1759.5 1214.04 L1758.92 1214.04 L1758.33 1214.04 L1757.74 1214.04 L1757.16 1214.04 L1756.57 1214.04 L1755.99 1214.04 L1755.4 1214.04 L1754.81 1214.04 L1754.23 1214.04 L1753.64 1214.04 L1753.05 1214.04 L1752.47 1214.04 L1751.88 1214.04 L1751.29 1214.04 L1750.71 1214.04 L1750.12 1214.04 L1749.53 1214.04 L1748.95 1214.04 L1748.36 1214.04 L1747.78 1214.04 L1747.19 1214.04 L1746.6 1214.04 L1746.02 1214.04 L1745.43 1214.04 L1744.84 1214.04 L1744.26 1214.04 L1743.67 1214.04 L1743.08 1214.04 L1742.5 1214.04 L1741.91 1214.04 L1741.32 1214.04 L1740.74 1214.04 L1740.15 1214.04 L1739.57 1214.04 L1738.98 1214.04 L1738.39 1214.04 L1737.81 1214.04 L1737.22 1214.04 L1736.63 1214.04 L1736.05 1214.04 L1735.46 1214.04 L1734.87 1214.04 L1734.29 1214.04 L1733.7 1214.04 L1733.11 1214.04 L1732.53 1214.04 L1731.94 1214.04 L1731.36 1214.04 L1730.77 1214.04 L1730.18 1214.04 L1729.6 1214.04 L1729.01 1214.04 L1728.42 1214.04 L1727.84 1214.04 L1727.25 1214.04 L1726.66 1214.04 L1726.08 1214.04 L1725.49 1214.04 L1724.91 1214.04 L1724.32 1214.04 L1723.73 1214.04 L1723.15 1214.04 L1722.56 1214.04 L1721.97 1214.04 L1721.39 1214.04 L1720.8 1214.04 L1720.21 1214.04 L1719.63 1214.04 L1719.04 1214.04 L1718.45 1214.04 L1717.87 1214.04 L1717.28 1214.04 L1716.7 1214.04 L1716.11 1214.04 L1715.52 1214.04 L1714.94 1214.04 L1714.35 1214.04 L1713.76 1214.04 L1713.18 1214.04 L1712.59 1214.04 L1712 1214.04 L1711.42 1214.04 L1710.83 1214.04 L1710.24 1214.04 L1709.66 1214.04 L1709.07 1214.04 L1708.49 1214.04 L1707.9 1214.04 L1707.31 1214.04 L1706.73 1214.04 L1706.14 1214.04 L1705.55 1214.04 L1704.97 1214.04 L1704.38 1214.04 L1703.79 1214.04 L1703.21 1214.04 L1702.62 1214.04 L1702.04 1214.04 L1701.45 1214.04 L1700.86 1214.04 L1700.28 1214.04 L1699.69 1214.04 L1699.1 1214.04 L1698.52 1214.04 L1697.93 1214.04 L1697.34 1214.04 L1696.76 1214.04 L1696.17 1214.04 L1695.58 1214.04 L1695 1214.04 L1694.41 1214.04 L1693.83 1214.04 L1693.24 1214.04 L1692.65 1214.04 L1692.07 1214.04 L1691.48 1214.04 L1690.89 1214.04 L1690.31 1214.04 L1689.72 1214.04 L1689.13 1214.04 L1688.55 1214.04 L1687.96 1214.04 L1687.37 1214.04 L1686.79 1214.04 L1686.2 1214.04 L1685.62 1214.04 L1685.03 1214.04 L1684.44 1214.04 L1683.86 1214.04 L1683.27 1214.04 L1682.68 1214.04 L1682.1 1214.04 L1681.51 1214.04 L1680.92 1214.04 L1680.34 1214.04 L1679.75 1214.04 L1679.17 1214.04 L1678.58 1214.04 L1677.99 1214.04 L1677.41 1214.04 L1676.82 1214.04 L1676.23 1214.04 L1675.65 1214.04 L1675.06 1214.04 L1674.47 1214.04 L1673.89 1214.04 L1673.3 1214.04 L1672.71 1214.04 L1672.13 1214.04 L1671.54 1214.04 L1670.96 1214.04 L1670.37 1214.04 L1669.78 1214.04 L1669.2 1214.04 L1668.61 1214.04 L1668.02 1214.04 L1667.44 1214.04 L1666.85 1214.04 L1666.26 1214.04 L1665.68 1214.04 L1665.09 1214.04 L1664.5 1214.04 L1663.92 1214.04 L1663.33 1214.04 L1662.75 1214.04 L1662.16 1214.04 L1661.57 1214.04 L1660.99 1214.04 L1660.4 1214.04 L1659.81 1214.04 L1659.23 1214.04 L1658.64 1214.04 L1658.05 1214.04 L1657.47 1214.04 L1656.88 1214.04 L1656.29 1214.04 L1655.71 1214.04 L1655.12 1214.04 L1654.54 1214.04 L1653.95 1214.04 L1653.36 1214.04 L1652.78 1214.04 L1652.19 1214.04 L1651.6 1214.04 L1651.02 1214.04 L1650.43 1214.04 L1649.84 1214.04 L1649.26 1214.04 L1648.67 1214.04 L1648.09 1214.04 L1647.5 1214.04 L1646.91 1214.04 L1646.33 1214.04 L1645.74 1214.04 L1645.15 1214.04 L1644.57 1214.04 L1643.98 1214.04 L1643.39 1214.04 L1642.81 1214.04 L1642.22 1214.04 L1641.63 1214.04 L1641.05 1214.04 L1640.46 1214.04 L1639.88 1214.04 L1639.29 1214.04 L1638.7 1214.04 L1638.12 1214.04 L1637.53 1214.04 L1636.94 1214.04 L1636.36 1214.04 L1635.77 1214.04 L1635.18 1214.04 L1634.6 1214.04 L1634.01 1214.04 L1633.42 1214.04 L1632.84 1214.04 L1632.25 1214.04 L1631.67 1214.04 L1631.08 1214.04 L1630.49 1214.04 L1629.91 1214.04 L1629.32 1214.04 L1628.73 1214.04 L1628.15 1214.04 L1627.56 1214.04 L1626.97 1214.04 L1626.39 1214.04 L1625.8 1214.04 L1625.22 1214.04 L1624.63 1214.04 L1624.04 1214.04 L1623.46 1214.04 L1622.87 1214.04 L1622.28 1214.04 L1621.7 1214.04 L1621.11 1214.04 L1620.52 1214.04 L1619.94 1214.04 L1619.35 1214.04 L1618.76 1214.04 L1618.18 1214.04 L1617.59 1214.04 L1617.01 1214.04 L1616.42 1214.04 L1615.83 1214.04 L1615.25 1214.04 L1614.66 1214.04 L1614.07 1214.04 L1613.49 1214.04 L1612.9 1214.04 L1612.31 1214.04 L1611.73 1214.04 L1611.14 1214.04 L1610.55 1214.04 L1609.97 1214.04 L1609.38 1214.04 L1608.8 1214.04 L1608.21 1214.04 L1607.62 1214.04 L1607.04 1214.04 L1606.45 1214.04 L1605.86 1214.04 L1605.28 1214.04 L1604.69 1214.04 L1604.1 1214.04 L1603.52 1214.04 L1602.93 1214.04 L1602.34 1214.04 L1601.76 1214.04 L1601.17 1214.04 L1600.59 1214.04 L1600 1214.04 L1599.41 1214.04 L1598.83 1214.04 L1598.24 1214.04 L1597.65 1214.04 L1597.07 1214.04 L1596.48 1214.04 L1595.89 1214.04 L1595.31 1214.04 L1594.72 1214.04 L1594.14 1214.04 L1593.55 1214.04 L1592.96 1214.04 L1592.38 1214.04 L1591.79 1214.04 L1591.2 1214.04 L1590.62 1214.04 L1590.03 1214.04 L1589.44 1214.04 L1588.86 1214.04 L1588.27 1214.04 L1587.68 1214.04 L1587.1 1214.04 L1586.51 1214.04 L1585.93 1214.04 L1585.34 1214.04 L1584.75 1214.04 L1584.17 1214.04 L1583.58 1214.04 L1582.99 1214.04 L1582.41 1214.04 L1581.82 1214.04 L1581.23 1214.04 L1580.65 1214.04 L1580.06 1214.04 L1579.47 1214.04 L1578.89 1214.04 L1578.3 1214.04 L1577.72 1214.04 L1577.13 1214.04 L1576.54 1214.04 L1575.96 1214.04 L1575.37 1214.04 L1574.78 1214.04 L1574.2 1214.04 L1573.61 1214.04 L1573.02 1214.04 L1572.44 1214.04 L1571.85 1214.04 L1571.27 1214.04 L1570.68 1214.04 L1570.09 1214.04 L1569.51 1214.04 L1568.92 1214.04 L1568.33 1214.04 L1567.75 1214.04 L1567.16 1214.04 L1566.57 1214.04 L1565.99 1214.04 L1565.4 1214.04 L1564.81 1214.04 L1564.23 1214.04 L1563.64 1214.04 L1563.06 1214.04 L1562.47 1214.04 L1561.88 1214.04 L1561.3 1214.04 L1560.71 1214.04 L1560.12 1214.04 L1559.54 1214.04 L1558.95 1214.04 L1558.36 1214.04 L1557.78 1214.04 L1557.19 1214.04 L1556.6 1214.04 L1556.02 1214.04 L1555.43 1214.04 L1554.85 1214.04 L1554.26 1214.04 L1553.67 1214.04 L1553.09 1214.04 L1552.5 1214.04 L1551.91 1214.04 L1551.33 1214.04 L1550.74 1214.04 L1550.15 1214.04 L1549.57 1214.04 L1548.98 1214.04 L1548.4 1214.04 L1547.81 1214.04 L1547.22 1214.04 L1546.64 1214.04 L1546.05 1214.04 L1545.46 1214.04 L1544.88 1214.04 L1544.29 1214.04 L1543.7 1214.04 L1543.12 1214.04 L1542.53 1214.04 L1541.94 1214.04 L1541.36 1214.04 L1540.77 1214.04 L1540.19 1214.04 L1539.6 1214.04 L1539.01 1214.04 L1538.43 1214.04 L1537.84 1214.04 L1537.25 1214.04 L1536.67 1214.04 L1536.08 1214.04 L1535.49 1214.04 L1534.91 1214.04 L1534.32 1214.04 L1533.73 1214.04 L1533.15 1214.04 L1532.56 1214.04 L1531.98 1214.04 L1531.39 1214.04 L1530.8 1214.04 L1530.22 1214.04 L1529.63 1214.04 L1529.04 1214.04 L1528.46 1214.04 L1527.87 1214.04 L1527.28 1214.04 L1526.7 1214.04 L1526.11 1214.04 L1525.52 1214.04 L1524.94 1214.04 L1524.35 1214.04 L1523.77 1214.04 L1523.18 1214.04 L1522.59 1214.04 L1522.01 1214.04 L1521.42 1214.04 L1520.83 1214.04 L1520.25 1214.04 L1519.66 1214.04 L1519.07 1214.04 L1518.49 1214.04 L1517.9 1214.04 L1517.32 1214.04 L1516.73 1214.04 L1516.14 1214.04 L1515.56 1214.04 L1514.97 1214.04 L1514.38 1214.04 L1513.8 1214.04 L1513.21 1214.04 L1512.62 1214.04 L1512.04 1214.04 L1511.45 1214.04 L1510.86 1214.04 L1510.28 1214.04 L1509.69 1214.04 L1509.11 1214.04 L1508.52 1214.04 L1507.93 1214.04 L1507.35 1214.04 L1506.76 1214.04 L1506.17 1214.04 L1505.59 1214.04 L1505 1214.04 L1504.41 1214.04 L1503.83 1214.04 L1503.24 1214.04 L1502.65 1214.04 L1502.07 1214.04 L1501.48 1214.04 L1500.9 1214.04 L1500.31 1214.04 L1499.72 1214.04 L1499.14 1214.04 L1498.55 1214.04 L1497.96 1214.04 L1497.38 1214.04 L1496.79 1214.04 L1496.2 1214.04 L1495.62 1214.04 L1495.03 1214.04 L1494.45 1214.04 L1493.86 1214.04 L1493.27 1214.04 L1492.69 1214.04 L1492.1 1214.04 L1491.51 1214.04 L1490.93 1214.04 L1490.34 1214.04 L1489.75 1214.04 L1489.17 1214.04 L1488.58 1214.04 L1487.99 1214.04 L1487.41 1214.04 L1486.82 1214.04 L1486.24 1214.04 L1485.65 1214.04 L1485.06 1214.04 L1484.48 1214.04 L1483.89 1214.04 L1483.3 1214.04 L1482.72 1214.04 L1482.13 1214.04 L1481.54 1214.04 L1480.96 1214.04 L1480.37 1214.04 L1479.78 1214.04 L1479.2 1214.04 L1478.61 1214.04 L1478.03 1214.04 L1477.44 1214.04 L1476.85 1214.04 L1476.27 1214.04 L1475.68 1214.04 L1475.09 1214.04 L1474.51 1214.04 L1473.92 1214.04 L1473.33 1214.04 L1472.75 1214.04 L1472.16 1214.04 L1471.57 1214.04 L1470.99 1214.04 L1470.4 1214.04 L1469.82 1214.04 L1469.23 1214.04 L1468.64 1214.04 L1468.06 1214.04 L1467.47 1214.04 L1466.88 1214.04 L1466.3 1214.04 L1465.71 1214.04 L1465.12 1214.04 L1464.54 1214.04 L1463.95 1214.04 L1463.37 1214.04 L1462.78 1214.04 L1462.19 1214.04 L1461.61 1214.04 L1461.02 1214.04 L1460.43 1214.04 L1459.85 1214.04 L1459.26 1214.04 L1458.67 1214.04 L1458.09 1214.04 L1457.5 1214.04 L1456.91 1214.04 L1456.33 1214.04 L1455.74 1214.04 L1455.16 1214.04 L1454.57 1214.04 L1453.98 1214.04 L1453.4 1214.04 L1452.81 1214.04 L1452.22 1214.04 L1451.64 1214.04 L1451.05 1214.04 L1450.46 1214.04 L1449.88 1214.04 L1449.29 1214.04 L1448.7 1214.04 L1448.12 1214.04 L1447.53 1214.04 L1446.95 1214.04 L1446.36 1214.04 L1445.77 1214.04 L1445.19 1214.04 L1444.6 1214.04 L1444.01 1214.04 L1443.43 1214.04 L1442.84 1214.04 L1442.25 1214.04 L1441.67 1214.04 L1441.08 1214.04 L1440.5 1214.04 L1439.91 1214.04 L1439.32 1214.04 L1438.74 1214.04 L1438.15 1214.04 L1437.56 1214.04 L1436.98 1214.04 L1436.39 1214.04 L1435.8 1214.04 L1435.22 1214.04 L1434.63 1214.04 L1434.04 1214.04 L1433.46 1214.04 L1432.87 1214.04 L1432.29 1214.04 L1431.7 1214.04 L1431.11 1214.04 L1430.53 1214.04 L1429.94 1214.04 L1429.35 1214.04 L1428.77 1214.04 L1428.18 1214.04 L1427.59 1214.04 L1427.01 1214.04 L1426.42 1214.04 L1425.83 1214.04 L1425.25 1214.04 L1424.66 1214.04 L1424.08 1214.04 L1423.49 1214.04 L1422.9 1214.04 L1422.32 1214.04 L1421.73 1214.04 L1421.14 1214.04 L1420.56 1214.04 L1419.97 1214.04 L1419.38 1214.04 L1418.8 1214.04 L1418.21 1214.04 L1417.63 1214.04 L1417.04 1214.04 L1416.45 1214.04 L1415.87 1214.04 L1415.28 1214.04 L1414.69 1214.04 L1414.11 1214.04 L1413.52 1214.04 L1412.93 1214.04 L1412.35 1214.04 L1411.76 1214.04 L1411.17 1214.04 L1410.59 1214.04 L1410 1214.04 L1409.42 1214.04 L1408.83 1214.04 L1408.24 1214.04 L1407.66 1214.04 L1407.07 1214.04 L1406.48 1214.04 L1405.9 1214.04 L1405.31 1214.04 L1404.72 1214.04 L1404.14 1214.04 L1403.55 1214.04 L1402.96 1214.04 L1402.38 1214.04 L1401.79 1214.04 L1401.21 1214.04 L1400.62 1214.04 L1400.03 1214.04 L1399.45 1214.04 L1398.86 1214.04 L1398.27 1214.04 L1397.69 1214.04 L1397.1 1214.04 L1396.51 1214.04 L1395.93 1214.04 L1395.34 1214.04 L1394.75 1214.04 L1394.17 1214.04 L1393.58 1214.04 L1393 1214.04 L1392.41 1214.04 L1391.82 1214.04 L1391.24 1214.04 L1390.65 1214.04 L1390.06 1214.04 L1389.48 1214.04 L1388.89 1214.04 L1388.3 1214.04 L1387.72 1214.04 L1387.13 1214.04 L1386.55 1214.04 L1385.96 1214.04 L1385.37 1214.04 L1384.79 1214.04 L1384.2 1214.04 L1383.61 1214.04 L1383.03 1214.04 L1382.44 1214.04 L1381.85 1214.04 L1381.27 1214.04 L1380.68 1214.04 L1380.09 1214.04 L1379.51 1214.04 L1378.92 1214.04 L1378.34 1214.04 L1377.75 1214.04 L1377.16 1214.04 L1376.58 1214.04 L1375.99 1214.04 L1375.4 1214.04 L1374.82 1214.04 L1374.23 1214.04 L1373.64 1214.04 L1373.06 1214.04 L1372.47 1214.04 L1371.88 1214.04 L1371.3 1214.04 L1370.71 1214.04 L1370.13 1214.04 L1369.54 1214.04 L1368.95 1214.04 L1368.37 1214.04 L1367.78 1214.04 L1367.19 1214.04 L1366.61 1214.04 L1366.02 1214.04 L1365.43 1214.04 L1364.85 1214.04 L1364.26 1214.04 L1363.68 1214.04 L1363.09 1214.04 L1362.5 1214.04 L1361.92 1214.04 L1361.33 1214.04 L1360.74 1214.04 L1360.16 1214.04 L1359.57 1214.04 L1358.98 1214.04 L1358.4 1214.04 L1357.81 1214.04 L1357.22 1214.04 L1356.64 1214.04 L1356.05 1214.04 L1355.47 1214.04 L1354.88 1214.04 L1354.29 1214.04 L1353.71 1214.04 L1353.12 1214.04 L1352.53 1214.04 L1351.95 1214.04 L1351.36 1214.04 L1350.77 1214.04 L1350.19 1214.04 L1349.6 1214.04 L1349.01 1214.04 L1348.43 1214.04 L1347.84 1214.04 L1347.26 1214.04 L1346.67 1214.04 L1346.08 1214.04 L1345.5 1214.04 L1344.91 1214.04 L1344.32 1214.04 L1343.74 1214.04 L1343.15 1214.04 L1342.56 1214.04 L1341.98 1214.04 L1341.39 1214.04 L1340.8 1214.04 L1340.22 1214.04 L1339.63 1214.04 L1339.05 1214.04 L1338.46 1214.04 L1337.87 1214.04 L1337.29 1214.04 L1336.7 1214.04 L1336.11 1214.04 L1335.53 1214.04 L1334.94 1214.04 L1334.35 1214.04 L1333.77 1214.04 L1333.18 1214.04 L1332.6 1214.04 L1332.01 1214.04 L1331.42 1214.04 L1330.84 1214.04 L1330.25 1214.04 L1329.66 1214.04 L1329.08 1214.04 L1328.49 1214.04 L1327.9 1214.04 L1327.32 1214.04 L1326.73 1214.04 L1326.14 1214.04 L1325.56 1214.04 L1324.97 1214.04 L1324.39 1214.04 L1323.8 1214.04 L1323.21 1214.04 L1322.63 1214.04 L1322.04 1214.04 L1321.45 1214.04 L1320.87 1214.04 L1320.28 1214.04 L1319.69 1214.04 L1319.11 1214.04 L1318.52 1214.04 L1317.93 1214.04 L1317.35 1214.04 L1316.76 1214.04 L1316.18 1214.04 L1315.59 1214.04 L1315 1214.04 L1314.42 1214.04 L1313.83 1214.04 L1313.24 1214.04 L1312.66 1214.04 L1312.07 1214.04 L1311.48 1214.04 L1310.9 1214.04 L1310.31 1214.04 L1309.73 1214.04 L1309.14 1214.04 L1308.55 1214.04 L1307.97 1214.04 L1307.38 1214.04 L1306.79 1214.04 L1306.21 1214.04 L1305.62 1214.04 L1305.03 1214.04 L1304.45 1214.04 L1303.86 1214.04 L1303.27 1214.04 L1302.69 1214.04 L1302.1 1214.04 L1301.52 1214.04 L1300.93 1214.04 L1300.34 1214.04 L1299.76 1214.04 L1299.17 1214.04 L1298.58 1214.04 L1298 1214.04 L1297.41 1214.04 L1296.82 1214.04 L1296.24 1214.04 L1295.65 1214.04 L1295.06 1214.04 L1294.48 1214.04 L1293.89 1214.04 L1293.31 1214.04 L1292.72 1214.04 L1292.13 1214.04 L1291.55 1214.04 L1290.96 1214.04 L1290.37 1214.04 L1289.79 1214.04 L1289.2 1214.04 L1288.61 1214.04 L1288.03 1214.04 L1287.44 1214.04 L1286.86 1214.04 L1286.27 1214.04 L1285.68 1214.04 L1285.1 1214.04 L1284.51 1214.04 L1283.92 1214.04 L1283.34 1214.04 L1282.75 1214.04 L1282.16 1214.04 L1281.58 1214.04 L1280.99 1214.04 L1280.4 1214.04 L1279.82 1214.04 L1279.23 1214.04 L1278.65 1214.04 L1278.06 1214.04 L1277.47 1214.04 L1276.89 1214.04 L1276.3 1214.04 L1275.71 1214.04 L1275.13 1214.04 L1274.54 1214.04 L1273.95 1214.04 L1273.37 1214.04 L1272.78 1214.04 L1272.19 1214.04 L1271.61 1214.04 L1271.02 1214.04 L1270.44 1214.04 L1269.85 1214.04 L1269.26 1214.04 L1268.68 1214.04 L1268.09 1214.04 L1267.5 1214.04 L1266.92 1214.04 L1266.33 1214.04 L1265.74 1214.04 L1265.16 1214.04 L1264.57 1214.04 L1263.98 1214.04 L1263.4 1214.04 L1262.81 1214.04 L1262.23 1214.04 L1261.64 1214.04 L1261.05 1214.04 L1260.47 1214.04 L1259.88 1214.04 L1259.29 1214.04 L1258.71 1214.04 L1258.12 1214.04 L1257.53 1214.04 L1256.95 1214.04 L1256.36 1214.04 L1255.78 1214.04 L1255.19 1214.04 L1254.6 1214.04 L1254.02 1214.04 L1253.43 1214.04 L1252.84 1214.04 L1252.26 1214.04 L1251.67 1214.04 L1251.08 1214.04 L1250.5 1214.04 L1249.91 1214.04 L1249.32 1214.04 L1248.74 1214.04 L1248.15 1214.04 L1247.57 1214.04 L1246.98 1214.04 L1246.39 1214.04 L1245.81 1214.04 L1245.22 1214.04 L1244.63 1214.04 L1244.05 1214.04 L1243.46 1214.04 L1242.87 1214.04 L1242.29 1214.04 L1241.7 1214.04 L1241.11 1214.04 L1240.53 1214.04 L1239.94 1214.04 L1239.36 1214.04 L1238.77 1214.04 L1238.18 1214.04 L1237.6 1214.04 L1237.01 1214.04 L1236.42 1214.04 L1235.84 1214.04 L1235.25 1214.04 L1234.66 1214.04 L1234.08 1214.04 L1233.49 1214.04 L1232.91 1214.04 L1232.32 1214.04 L1231.73 1214.04 L1231.15 1214.04 L1230.56 1214.04 L1229.97 1214.04 L1229.39 1214.04 L1228.8 1214.04 L1228.21 1214.04 L1227.63 1214.04 L1227.04 1214.04 L1226.45 1214.04 L1225.87 1214.04 L1225.28 1214.04 L1224.7 1214.04 L1224.11 1214.04 L1223.52 1214.04 L1222.94 1214.04 L1222.35 1214.04 L1221.76 1214.04 L1221.18 1214.04 L1220.59 1214.04 L1220 1214.04 L1219.42 1214.04 L1218.83 1214.04 L1218.24 1214.04 L1217.66 1214.04 L1217.07 1214.04 L1216.49 1214.04 L1215.9 1214.04 L1215.31 1214.04 L1214.73 1214.04 L1214.14 1214.04 L1213.55 1214.04 L1212.97 1214.04 L1212.38 1214.04 L1211.79 1214.04 L1211.21 1214.04 L1210.62 1214.04 L1210.03 1214.04 L1209.45 1214.04 L1208.86 1214.04 L1208.28 1214.04 L1207.69 1214.04 L1207.1 1214.04 L1206.52 1214.04 L1205.93 1214.04 L1205.34 1214.04 L1204.76 1214.04 L1204.17 1214.04 L1203.58 1214.04 L1203 1214.04 L1202.41 1214.04 L1201.83 1214.04 L1201.24 1214.04 L1200.65 1214.04 L1200.07 1214.04 L1199.48 1214.04 L1198.89 1214.04 L1198.31 1214.04 L1197.72 1214.04 L1197.13 1214.04 L1196.55 1214.04 L1195.96 1214.04 L1195.37 1214.04 L1194.79 1214.04 L1194.2 1214.04 L1193.62 1214.04 L1193.03 1214.04 L1192.44 1214.04 L1191.86 1214.04 L1191.27 1214.04 L1190.68 1214.04 L1190.1 1214.04 L1189.51 1214.04 L1188.92 1214.04 L1188.34 1214.04 L1187.75 1214.04 L1187.16 1214.04 L1186.58 1214.04 L1185.99 1214.04 L1185.41 1214.04 L1184.82 1214.04 L1184.23 1214.04 L1183.65 1214.04 L1183.06 1214.04 L1182.47 1214.04 L1181.89 1214.04 L1181.3 1214.04 L1180.71 1214.04 L1180.13 1214.04 L1179.54 1214.04 L1178.96 1214.04 L1178.37 1214.04 L1177.78 1214.04 L1177.2 1214.04 L1176.61 1214.04 L1176.02 1214.04 L1175.44 1214.04 L1174.85 1214.04 L1174.26 1214.04 L1173.68 1214.04 L1173.09 1214.04 L1172.5 1214.04 L1171.92 1214.04 L1171.33 1214.04 L1170.75 1214.04 L1170.16 1214.04 L1169.57 1214.04 L1168.99 1214.04 L1168.4 1214.04 L1167.81 1214.04 L1167.23 1214.04 L1166.64 1214.04 L1166.05 1214.04 L1165.47 1214.04 L1164.88 1214.04 L1164.29 1214.04 L1163.71 1214.04 L1163.12 1214.04 L1162.54 1214.04 L1161.95 1214.04 L1161.36 1214.04 L1160.78 1214.04 L1160.19 1214.04 L1159.6 1214.04 L1159.02 1214.04 L1158.43 1214.04 L1157.84 1214.04 L1157.26 1214.04 L1156.67 1214.04 L1156.09 1214.04 L1155.5 1214.04 L1154.91 1214.04 L1154.33 1214.04 L1153.74 1214.04 L1153.15 1214.04 L1152.57 1214.04 L1151.98 1214.04 L1151.39 1214.04 L1150.81 1214.04 L1150.22 1214.04 L1149.63 1214.04 L1149.05 1214.04 L1148.46 1214.04 L1147.88 1214.04 L1147.29 1214.04 L1146.7 1214.04 L1146.12 1214.04 L1145.53 1214.04 L1144.94 1214.04 L1144.36 1214.04 L1143.77 1214.04 L1143.18 1214.04 L1142.6 1214.04 L1142.01 1214.04 L1141.42 1214.04 L1140.84 1214.04 L1140.25 1214.04 L1139.67 1214.04 L1139.08 1214.04 L1138.49 1214.04 L1137.91 1214.04 L1137.32 1214.04 L1136.73 1214.04 L1136.15 1214.04 L1135.56 1214.04 L1134.97 1214.04 L1134.39 1214.04 L1133.8 1214.04 L1133.21 1214.04 L1132.63 1214.04 L1132.04 1214.04 L1131.46 1214.04 L1130.87 1214.04 L1130.28 1214.04 L1129.7 1214.04 L1129.11 1214.04 L1128.52 1214.04 L1127.94 1214.04 L1127.35 1214.04 L1126.76 1214.04 L1126.18 1214.04 L1125.59 1214.04 L1125.01 1214.04 L1124.42 1214.04 L1123.83 1214.04 L1123.25 1214.04 L1122.66 1214.04 L1122.07 1214.04 L1121.49 1214.04 L1120.9 1214.04 L1120.31 1214.04 L1119.73 1214.04 L1119.14 1214.04 L1118.55 1214.04 L1117.97 1214.04 L1117.38 1214.04 L1116.8 1214.04 L1116.21 1214.04 L1115.62 1214.04 L1115.04 1214.04 L1114.45 1214.04 L1113.86 1214.04 L1113.28 1214.04 L1112.69 1214.04 L1112.1 1214.04 L1111.52 1214.04 L1110.93 1214.04 L1110.34 1214.04 L1109.76 1214.04 L1109.17 1214.04 L1108.59 1214.04 L1108 1214.04 L1107.41 1214.04 L1106.83 1214.04 L1106.24 1214.04 L1105.65 1214.04 L1105.07 1214.04 L1104.48 1214.04 L1103.89 1214.04 L1103.31 1214.04 L1102.72 1214.04 L1102.14 1214.04 L1101.55 1214.04 L1100.96 1214.04 L1100.38 1214.04 L1099.79 1214.04 L1099.2 1214.04 L1098.62 1214.04 L1098.03 1214.04 L1097.44 1214.04 L1096.86 1214.04 L1096.27 1214.04 L1095.68 1214.04 L1095.1 1214.04 L1094.51 1214.04 L1093.93 1214.04 L1093.34 1214.04 L1092.75 1214.04 L1092.17 1214.04 L1091.58 1214.04 L1090.99 1214.04 L1090.41 1214.04 L1089.82 1214.04 L1089.23 1214.04 L1088.65 1214.04 L1088.06 1214.04 L1087.47 1214.04 L1086.89 1214.04 L1086.3 1214.04 L1085.72 1214.04 L1085.13 1214.04 L1084.54 1214.04 L1083.96 1214.04 L1083.37 1214.04 L1082.78 1214.04 L1082.2 1214.04 L1081.61 1214.04 L1081.02 1214.04 L1080.44 1214.04 L1079.85 1214.04 L1079.26 1214.04 L1078.68 1214.04 L1078.09 1214.04 L1077.51 1214.04 L1076.92 1214.04 L1076.33 1214.04 L1075.75 1214.04 L1075.16 1214.04 L1074.57 1214.04 L1073.99 1214.04 L1073.4 1214.04 L1072.81 1214.04 L1072.23 1214.04 L1071.64 1214.04 L1071.06 1214.04 L1070.47 1214.04 L1069.88 1214.04 L1069.3 1214.04 L1068.71 1214.04 L1068.12 1214.04 L1067.54 1214.04 L1066.95 1214.04 L1066.36 1214.04 L1065.78 1214.04 L1065.19 1214.04 L1064.6 1214.04 L1064.02 1214.04 L1063.43 1214.04 L1062.85 1214.04 L1062.26 1214.04 L1061.67 1214.04 L1061.09 1214.04 L1060.5 1214.04 L1059.91 1214.04 L1059.33 1214.04 L1058.74 1214.04 L1058.15 1214.04 L1057.57 1214.04 L1056.98 1214.04 L1056.39 1214.04 L1055.81 1214.04 L1055.22 1214.04 L1054.64 1214.04 L1054.05 1214.04 L1053.46 1214.04 L1052.88 1214.04 L1052.29 1214.04 L1051.7 1214.04 L1051.12 1214.04 L1050.53 1214.04 L1049.94 1214.04 L1049.36 1214.04 L1048.77 1214.04 L1048.19 1214.04 L1047.6 1214.04 L1047.01 1214.04 L1046.43 1214.04 L1045.84 1214.04 L1045.25 1214.04 L1044.67 1214.04 L1044.08 1214.04 L1043.49 1214.04 L1042.91 1214.04 L1042.32 1214.04 L1041.73 1214.04 L1041.15 1214.04 L1040.56 1214.04 L1039.98 1214.04 L1039.39 1214.04 L1038.8 1214.04 L1038.22 1214.04 L1037.63 1214.04 L1037.04 1214.04 L1036.46 1214.04 L1035.87 1214.04 L1035.28 1214.04 L1034.7 1214.04 L1034.11 1214.04 L1033.52 1214.04 L1032.94 1214.04 L1032.35 1214.04 L1031.77 1214.04 L1031.18 1214.04 L1030.59 1214.04 L1030.01 1214.04 L1029.42 1214.04 L1028.83 1214.04 L1028.25 1214.04 L1027.66 1214.04 L1027.07 1214.04 L1026.49 1214.04 L1025.9 1214.04 L1025.32 1214.04 L1024.73 1214.04 L1024.14 1214.04 L1023.56 1214.04 L1022.97 1214.04 L1022.38 1214.04 L1021.8 1214.04 L1021.21 1214.04 L1020.62 1214.04 L1020.04 1214.04 L1019.45 1214.04 L1018.86 1214.04 L1018.28 1214.04 L1017.69 1214.04 L1017.11 1214.04 L1016.52 1214.04 L1015.93 1214.04 L1015.35 1214.04 L1014.76 1214.04 L1014.17 1214.04 L1013.59 1214.04 L1013 1214.04 L1012.41 1214.04 L1011.83 1214.04 L1011.24 1214.04 L1010.65 1214.04 L1010.07 1214.04 L1009.48 1214.04 L1008.9 1214.04 L1008.31 1214.04 L1007.72 1214.04 L1007.14 1214.04 L1006.55 1214.04 L1005.96 1214.04 L1005.38 1214.04 L1004.79 1214.04 L1004.2 1214.04 L1003.62 1214.04 L1003.03 1214.04 L1002.44 1214.04 L1001.86 1214.04 L1001.27 1214.04 L1000.69 1214.04 L1000.1 1214.04 L999.513 1214.04 L998.926 1214.04 L998.34 1214.04 L997.754 1214.04 L997.167 1214.04 L996.581 1214.04 L995.994 1214.04 L995.408 1214.04 L994.822 1214.04 L994.235 1214.04 L993.649 1214.04 L993.062 1214.04 L992.476 1214.04 L991.889 1214.04 L991.303 1214.04 L990.717 1214.04 L990.13 1214.04 L989.544 1214.04 L988.957 1214.04 L988.371 1214.04 L987.785 1214.04 L987.198 1214.04 L986.612 1214.04 L986.025 1214.04  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.17 986.612,1214.17 987.198,1214.17 987.785,1214.17 988.371,1214.17 988.957,1214.17 989.544,1214.17 990.13,1214.17 990.717,1214.17 991.303,1214.17 991.889,1214.17 992.476,1214.17 993.062,1214.17 993.649,1214.17 994.235,1214.17 994.822,1214.17 995.408,1214.17 995.994,1214.17 996.581,1214.17 997.167,1214.17 997.754,1214.17 998.34,1214.17 998.926,1214.17 999.513,1214.17 1000.1,1214.17 1000.69,1214.17 1001.27,1214.17 1001.86,1214.17 1002.44,1214.17 1003.03,1214.17 1003.62,1214.17 1004.2,1214.17 1004.79,1214.17 1005.38,1214.17 1005.96,1214.17 1006.55,1214.17 1007.14,1214.17 1007.72,1214.17 1008.31,1214.17 1008.9,1214.17 1009.48,1214.17 1010.07,1214.17 1010.65,1214.17 1011.24,1214.17 1011.83,1214.17 1012.41,1214.17 1013,1214.17 1013.59,1214.17 1014.17,1214.17 1014.76,1214.17 1015.35,1214.17 1015.93,1214.17 1016.52,1214.17 1017.11,1214.17 1017.69,1214.17 1018.28,1214.17 1018.86,1214.17 1019.45,1214.17 1020.04,1214.17 1020.62,1214.17 1021.21,1214.17 1021.8,1214.17 1022.38,1214.17 1022.97,1214.17 1023.56,1214.17 1024.14,1214.17 1024.73,1214.17 1025.32,1214.17 1025.9,1214.17 1026.49,1214.17 1027.07,1214.17 1027.66,1214.17 1028.25,1214.17 1028.83,1214.17 1029.42,1214.17 1030.01,1214.17 1030.59,1214.17 1031.18,1214.17 1031.77,1214.17 1032.35,1214.17 1032.94,1214.17 1033.52,1214.17 1034.11,1214.17 1034.7,1214.17 1035.28,1214.17 1035.87,1214.17 1036.46,1214.17 1037.04,1214.17 1037.63,1214.17 1038.22,1214.17 1038.8,1214.17 1039.39,1214.17 1039.98,1214.17 1040.56,1214.17 1041.15,1214.17 1041.73,1214.17 1042.32,1214.17 1042.91,1214.17 1043.49,1214.17 1044.08,1214.17 1044.67,1214.17 1045.25,1214.17 1045.84,1214.17 1046.43,1214.17 1047.01,1214.17 1047.6,1214.17 1048.19,1214.17 1048.77,1214.17 1049.36,1214.17 1049.94,1214.17 1050.53,1214.17 1051.12,1214.17 1051.7,1214.17 1052.29,1214.17 1052.88,1214.17 1053.46,1214.17 1054.05,1214.17 1054.64,1214.17 1055.22,1214.17 1055.81,1214.17 1056.39,1214.17 1056.98,1214.17 1057.57,1214.17 1058.15,1214.17 1058.74,1214.17 1059.33,1214.17 1059.91,1214.17 1060.5,1214.17 1061.09,1214.17 1061.67,1214.17 1062.26,1214.17 1062.85,1214.17 1063.43,1214.17 1064.02,1214.17 1064.6,1214.17 1065.19,1214.17 1065.78,1214.17 1066.36,1214.17 1066.95,1214.17 1067.54,1214.17 1068.12,1214.17 1068.71,1214.17 1069.3,1214.17 1069.88,1214.17 1070.47,1214.17 1071.06,1214.17 1071.64,1214.17 1072.23,1214.17 1072.81,1214.17 1073.4,1214.17 1073.99,1214.17 1074.57,1214.17 1075.16,1214.17 1075.75,1214.17 1076.33,1214.17 1076.92,1214.17 1077.51,1214.17 1078.09,1214.17 1078.68,1214.17 1079.26,1214.17 1079.85,1214.17 1080.44,1214.17 1081.02,1214.17 1081.61,1214.17 1082.2,1214.17 1082.78,1214.17 1083.37,1214.17 1083.96,1214.17 1084.54,1214.17 1085.13,1214.17 1085.72,1214.17 1086.3,1214.17 1086.89,1214.17 1087.47,1214.17 1088.06,1214.17 1088.65,1214.17 1089.23,1214.17 1089.82,1214.17 1090.41,1214.17 1090.99,1214.17 1091.58,1214.17 1092.17,1214.17 1092.75,1214.17 1093.34,1214.17 1093.93,1214.17 1094.51,1214.17 1095.1,1214.17 1095.68,1214.17 1096.27,1214.17 1096.86,1214.17 1097.44,1214.17 1098.03,1214.17 1098.62,1214.17 1099.2,1214.17 1099.79,1214.17 1100.38,1214.17 1100.96,1214.17 1101.55,1214.17 1102.14,1214.17 1102.72,1214.17 1103.31,1214.17 1103.89,1214.17 1104.48,1214.17 1105.07,1214.17 1105.65,1214.17 1106.24,1214.17 1106.83,1214.17 1107.41,1214.17 1108,1214.17 1108.59,1214.17 1109.17,1214.17 1109.76,1214.17 1110.34,1214.17 1110.93,1214.17 1111.52,1214.17 1112.1,1214.17 1112.69,1214.17 1113.28,1214.17 1113.86,1214.17 1114.45,1214.17 1115.04,1214.17 1115.62,1214.17 1116.21,1214.17 1116.8,1214.17 1117.38,1214.17 1117.97,1214.17 1118.55,1214.17 1119.14,1214.17 1119.73,1214.17 1120.31,1214.17 1120.9,1214.17 1121.49,1214.17 1122.07,1214.17 1122.66,1214.17 1123.25,1214.17 1123.83,1214.17 1124.42,1214.17 1125.01,1214.17 1125.59,1214.17 1126.18,1214.17 1126.76,1214.17 1127.35,1214.17 1127.94,1214.17 1128.52,1214.17 1129.11,1214.17 1129.7,1214.17 1130.28,1214.17 1130.87,1214.17 1131.46,1214.17 1132.04,1214.17 1132.63,1214.17 1133.21,1214.17 1133.8,1214.17 1134.39,1214.17 1134.97,1214.17 1135.56,1214.17 1136.15,1214.17 1136.73,1214.17 1137.32,1214.17 1137.91,1214.17 1138.49,1214.17 1139.08,1214.17 1139.67,1214.17 1140.25,1214.17 1140.84,1214.17 1141.42,1214.17 1142.01,1214.17 1142.6,1214.17 1143.18,1214.17 1143.77,1214.17 1144.36,1214.17 1144.94,1214.17 1145.53,1214.17 1146.12,1214.17 1146.7,1214.17 1147.29,1214.17 1147.88,1214.17 1148.46,1214.17 1149.05,1214.17 1149.63,1214.17 1150.22,1214.17 1150.81,1214.17 1151.39,1214.17 1151.98,1214.17 1152.57,1214.17 1153.15,1214.17 1153.74,1214.17 1154.33,1214.17 1154.91,1214.17 1155.5,1214.17 1156.09,1214.17 1156.67,1214.17 1157.26,1214.17 1157.84,1214.17 1158.43,1214.17 1159.02,1214.17 1159.6,1214.17 1160.19,1214.17 1160.78,1214.17 1161.36,1214.17 1161.95,1214.17 1162.54,1214.17 1163.12,1214.17 1163.71,1214.17 1164.29,1214.17 1164.88,1214.17 1165.47,1214.17 1166.05,1214.17 1166.64,1214.17 1167.23,1214.17 1167.81,1214.17 1168.4,1214.17 1168.99,1214.17 1169.57,1214.17 1170.16,1214.17 1170.75,1214.17 1171.33,1214.17 1171.92,1214.17 1172.5,1214.17 1173.09,1214.17 1173.68,1214.17 1174.26,1214.17 1174.85,1214.17 1175.44,1214.17 1176.02,1214.17 1176.61,1214.17 1177.2,1214.17 1177.78,1214.17 1178.37,1214.17 1178.96,1214.17 1179.54,1214.17 1180.13,1214.17 1180.71,1214.17 1181.3,1214.17 1181.89,1214.17 1182.47,1214.17 1183.06,1214.17 1183.65,1214.17 1184.23,1214.17 1184.82,1214.17 1185.41,1214.17 1185.99,1214.17 1186.58,1214.17 1187.16,1214.17 1187.75,1214.17 1188.34,1214.17 1188.92,1214.17 1189.51,1214.17 1190.1,1214.17 1190.68,1214.17 1191.27,1214.17 1191.86,1214.17 1192.44,1214.17 1193.03,1214.17 1193.62,1214.17 1194.2,1214.17 1194.79,1214.17 1195.37,1214.17 1195.96,1214.17 1196.55,1214.17 1197.13,1214.17 1197.72,1214.17 1198.31,1214.17 1198.89,1214.17 1199.48,1214.17 1200.07,1214.17 1200.65,1214.17 1201.24,1214.17 1201.83,1214.17 1202.41,1214.17 1203,1214.17 1203.58,1214.17 1204.17,1214.17 1204.76,1214.17 1205.34,1214.17 1205.93,1214.17 1206.52,1214.17 1207.1,1214.17 1207.69,1214.17 1208.28,1214.17 1208.86,1214.17 1209.45,1214.17 1210.03,1214.17 1210.62,1214.17 1211.21,1214.17 1211.79,1214.17 1212.38,1214.17 1212.97,1214.17 1213.55,1214.17 1214.14,1214.17 1214.73,1214.17 1215.31,1214.17 1215.9,1214.17 1216.49,1214.17 1217.07,1214.17 1217.66,1214.17 1218.24,1214.17 1218.83,1214.17 1219.42,1214.17 1220,1214.17 1220.59,1214.17 1221.18,1214.17 1221.76,1214.17 1222.35,1214.17 1222.94,1214.17 1223.52,1214.17 1224.11,1214.17 1224.7,1214.17 1225.28,1214.17 1225.87,1214.17 1226.45,1214.17 1227.04,1214.17 1227.63,1214.17 1228.21,1214.17 1228.8,1214.17 1229.39,1214.17 1229.97,1214.17 1230.56,1214.17 1231.15,1214.17 1231.73,1214.17 1232.32,1214.17 1232.91,1214.17 1233.49,1214.17 1234.08,1214.17 1234.66,1214.17 1235.25,1214.17 1235.84,1214.17 1236.42,1214.17 1237.01,1214.17 1237.6,1214.17 1238.18,1214.17 1238.77,1214.17 1239.36,1214.17 1239.94,1214.17 1240.53,1214.17 1241.11,1214.17 1241.7,1214.17 1242.29,1214.17 1242.87,1214.17 1243.46,1214.17 1244.05,1214.17 1244.63,1214.17 1245.22,1214.17 1245.81,1214.17 1246.39,1214.17 1246.98,1214.17 1247.57,1214.17 1248.15,1214.17 1248.74,1214.17 1249.32,1214.17 1249.91,1214.17 1250.5,1214.17 1251.08,1214.17 1251.67,1214.17 1252.26,1214.17 1252.84,1214.17 1253.43,1214.17 1254.02,1214.17 1254.6,1214.17 1255.19,1214.17 1255.78,1214.17 1256.36,1214.17 1256.95,1214.17 1257.53,1214.17 1258.12,1214.17 1258.71,1214.17 1259.29,1214.17 1259.88,1214.17 1260.47,1214.17 1261.05,1214.17 1261.64,1214.17 1262.23,1214.17 1262.81,1214.17 1263.4,1214.17 1263.98,1214.17 1264.57,1214.17 1265.16,1214.17 1265.74,1214.17 1266.33,1214.17 1266.92,1214.17 1267.5,1214.17 1268.09,1214.17 1268.68,1214.17 1269.26,1214.17 1269.85,1214.17 1270.44,1214.17 1271.02,1214.17 1271.61,1214.17 1272.19,1214.17 1272.78,1214.17 1273.37,1214.17 1273.95,1214.17 1274.54,1214.17 1275.13,1214.17 1275.71,1214.17 1276.3,1214.17 1276.89,1214.17 1277.47,1214.17 1278.06,1214.17 1278.65,1214.17 1279.23,1214.17 1279.82,1214.17 1280.4,1214.17 1280.99,1214.17 1281.58,1214.17 1282.16,1214.17 1282.75,1214.17 1283.34,1214.17 1283.92,1214.17 1284.51,1214.17 1285.1,1214.17 1285.68,1214.17 1286.27,1214.17 1286.86,1214.17 1287.44,1214.17 1288.03,1214.17 1288.61,1214.17 1289.2,1214.17 1289.79,1214.17 1290.37,1214.17 1290.96,1214.17 1291.55,1214.17 1292.13,1214.17 1292.72,1214.17 1293.31,1214.17 1293.89,1214.17 1294.48,1214.17 1295.06,1214.17 1295.65,1214.17 1296.24,1214.17 1296.82,1214.17 1297.41,1214.17 1298,1214.17 1298.58,1214.17 1299.17,1214.17 1299.76,1214.17 1300.34,1214.17 1300.93,1214.17 1301.52,1214.17 1302.1,1214.17 1302.69,1214.17 1303.27,1214.17 1303.86,1214.17 1304.45,1214.17 1305.03,1214.17 1305.62,1214.17 1306.21,1214.17 1306.79,1214.17 1307.38,1214.17 1307.97,1214.17 1308.55,1214.17 1309.14,1214.17 1309.73,1214.17 1310.31,1214.17 1310.9,1214.17 1311.48,1214.17 1312.07,1214.17 1312.66,1214.17 1313.24,1214.17 1313.83,1214.17 1314.42,1214.17 1315,1214.17 1315.59,1214.17 1316.18,1214.17 1316.76,1214.17 1317.35,1214.17 1317.93,1214.17 1318.52,1214.17 1319.11,1214.17 1319.69,1214.17 1320.28,1214.17 1320.87,1214.17 1321.45,1214.17 1322.04,1214.17 1322.63,1214.17 1323.21,1214.17 1323.8,1214.17 1324.39,1214.17 1324.97,1214.17 1325.56,1214.17 1326.14,1214.17 1326.73,1214.17 1327.32,1214.17 1327.9,1214.17 1328.49,1214.17 1329.08,1214.17 1329.66,1214.17 1330.25,1214.17 1330.84,1214.17 1331.42,1214.17 1332.01,1214.17 1332.6,1214.17 1333.18,1214.17 1333.77,1214.17 1334.35,1214.17 1334.94,1214.17 1335.53,1214.17 1336.11,1214.17 1336.7,1214.17 1337.29,1214.17 1337.87,1214.17 1338.46,1214.17 1339.05,1214.17 1339.63,1214.17 1340.22,1214.17 1340.8,1214.17 1341.39,1214.17 1341.98,1214.17 1342.56,1214.17 1343.15,1214.17 1343.74,1214.17 1344.32,1214.17 1344.91,1214.17 1345.5,1214.17 1346.08,1214.17 1346.67,1214.17 1347.26,1214.17 1347.84,1214.17 1348.43,1214.17 1349.01,1214.17 1349.6,1214.17 1350.19,1214.17 1350.77,1214.17 1351.36,1214.17 1351.95,1214.17 1352.53,1214.17 1353.12,1214.17 1353.71,1214.17 1354.29,1214.17 1354.88,1214.17 1355.47,1214.17 1356.05,1214.17 1356.64,1214.17 1357.22,1214.17 1357.81,1214.17 1358.4,1214.17 1358.98,1214.17 1359.57,1214.17 1360.16,1214.17 1360.74,1214.17 1361.33,1214.17 1361.92,1214.17 1362.5,1214.17 1363.09,1214.17 1363.68,1214.17 1364.26,1214.17 1364.85,1214.17 1365.43,1214.17 1366.02,1214.17 1366.61,1214.17 1367.19,1214.17 1367.78,1214.17 1368.37,1214.17 1368.95,1214.17 1369.54,1214.17 1370.13,1214.17 1370.71,1214.17 1371.3,1214.17 1371.88,1214.17 1372.47,1214.17 1373.06,1214.17 1373.64,1214.17 1374.23,1214.17 1374.82,1214.17 1375.4,1214.17 1375.99,1214.17 1376.58,1214.17 1377.16,1214.17 1377.75,1214.17 1378.34,1214.17 1378.92,1214.17 1379.51,1214.17 1380.09,1214.17 1380.68,1214.17 1381.27,1214.17 1381.85,1214.17 1382.44,1214.17 1383.03,1214.17 1383.61,1214.17 1384.2,1214.17 1384.79,1214.17 1385.37,1214.17 1385.96,1214.17 1386.55,1214.17 1387.13,1214.17 1387.72,1214.17 1388.3,1214.17 1388.89,1214.17 1389.48,1214.17 1390.06,1214.17 1390.65,1214.17 1391.24,1214.17 1391.82,1214.17 1392.41,1214.17 1393,1214.17 1393.58,1214.17 1394.17,1214.17 1394.75,1214.17 1395.34,1214.17 1395.93,1214.17 1396.51,1214.17 1397.1,1214.17 1397.69,1214.17 1398.27,1214.17 1398.86,1214.17 1399.45,1214.17 1400.03,1214.17 1400.62,1214.17 1401.21,1214.17 1401.79,1214.17 1402.38,1214.17 1402.96,1214.17 1403.55,1214.17 1404.14,1214.17 1404.72,1214.17 1405.31,1214.17 1405.9,1214.17 1406.48,1214.17 1407.07,1214.17 1407.66,1214.17 1408.24,1214.17 1408.83,1214.17 1409.42,1214.17 1410,1214.17 1410.59,1214.17 1411.17,1214.17 1411.76,1214.17 1412.35,1214.17 1412.93,1214.17 1413.52,1214.17 1414.11,1214.17 1414.69,1214.17 1415.28,1214.17 1415.87,1214.17 1416.45,1214.17 1417.04,1214.17 1417.63,1214.17 1418.21,1214.17 1418.8,1214.17 1419.38,1214.17 1419.97,1214.17 1420.56,1214.17 1421.14,1214.17 1421.73,1214.17 1422.32,1214.17 1422.9,1214.17 1423.49,1214.17 1424.08,1214.17 1424.66,1214.17 1425.25,1214.17 1425.83,1214.17 1426.42,1214.17 1427.01,1214.17 1427.59,1214.17 1428.18,1214.17 1428.77,1214.17 1429.35,1214.17 1429.94,1214.17 1430.53,1214.17 1431.11,1214.17 1431.7,1214.17 1432.29,1214.17 1432.87,1214.17 1433.46,1214.17 1434.04,1214.17 1434.63,1214.17 1435.22,1214.17 1435.8,1214.17 1436.39,1214.17 1436.98,1214.17 1437.56,1214.17 1438.15,1214.17 1438.74,1214.17 1439.32,1214.17 1439.91,1214.17 1440.5,1214.17 1441.08,1214.17 1441.67,1214.17 1442.25,1214.17 1442.84,1214.17 1443.43,1214.17 1444.01,1214.17 1444.6,1214.17 1445.19,1214.17 1445.77,1214.17 1446.36,1214.17 1446.95,1214.17 1447.53,1214.17 1448.12,1214.17 1448.7,1214.17 1449.29,1214.17 1449.88,1214.17 1450.46,1214.17 1451.05,1214.17 1451.64,1214.17 1452.22,1214.17 1452.81,1214.17 1453.4,1214.17 1453.98,1214.17 1454.57,1214.17 1455.16,1214.17 1455.74,1214.17 1456.33,1214.17 1456.91,1214.17 1457.5,1214.17 1458.09,1214.17 1458.67,1214.17 1459.26,1214.17 1459.85,1214.17 1460.43,1214.17 1461.02,1214.17 1461.61,1214.17 1462.19,1214.17 1462.78,1214.17 1463.37,1214.17 1463.95,1214.17 1464.54,1214.17 1465.12,1214.17 1465.71,1214.17 1466.3,1214.17 1466.88,1214.17 1467.47,1214.17 1468.06,1214.17 1468.64,1214.17 1469.23,1214.17 1469.82,1214.17 1470.4,1214.17 1470.99,1214.17 1471.57,1214.17 1472.16,1214.17 1472.75,1214.17 1473.33,1214.17 1473.92,1214.17 1474.51,1214.17 1475.09,1214.17 1475.68,1214.17 1476.27,1214.17 1476.85,1214.17 1477.44,1214.17 1478.03,1214.17 1478.61,1214.17 1479.2,1214.17 1479.78,1214.17 1480.37,1214.17 1480.96,1214.17 1481.54,1214.17 1482.13,1214.17 1482.72,1214.17 1483.3,1214.17 1483.89,1214.17 1484.48,1214.17 1485.06,1214.17 1485.65,1214.17 1486.24,1214.17 1486.82,1214.17 1487.41,1214.17 1487.99,1214.17 1488.58,1214.17 1489.17,1214.17 1489.75,1214.17 1490.34,1214.17 1490.93,1214.17 1491.51,1214.17 1492.1,1214.17 1492.69,1214.17 1493.27,1214.17 1493.86,1214.17 1494.45,1214.17 1495.03,1214.17 1495.62,1214.17 1496.2,1214.17 1496.79,1214.17 1497.38,1214.17 1497.96,1214.17 1498.55,1214.17 1499.14,1214.17 1499.72,1214.17 1500.31,1214.17 1500.9,1214.17 1501.48,1214.17 1502.07,1214.17 1502.65,1214.17 1503.24,1214.17 1503.83,1214.17 1504.41,1214.17 1505,1214.17 1505.59,1214.17 1506.17,1214.17 1506.76,1214.17 1507.35,1214.17 1507.93,1214.17 1508.52,1214.17 1509.11,1214.17 1509.69,1214.17 1510.28,1214.17 1510.86,1214.17 1511.45,1214.17 1512.04,1214.17 1512.62,1214.17 1513.21,1214.17 1513.8,1214.17 1514.38,1214.17 1514.97,1214.17 1515.56,1214.17 1516.14,1214.17 1516.73,1214.17 1517.32,1214.17 1517.9,1214.17 1518.49,1214.17 1519.07,1214.17 1519.66,1214.17 1520.25,1214.17 1520.83,1214.17 1521.42,1214.17 1522.01,1214.17 1522.59,1214.17 1523.18,1214.17 1523.77,1214.17 1524.35,1214.17 1524.94,1214.17 1525.52,1214.17 1526.11,1214.17 1526.7,1214.17 1527.28,1214.17 1527.87,1214.17 1528.46,1214.17 1529.04,1214.17 1529.63,1214.17 1530.22,1214.17 1530.8,1214.17 1531.39,1214.17 1531.98,1214.17 1532.56,1214.17 1533.15,1214.17 1533.73,1214.17 1534.32,1214.17 1534.91,1214.17 1535.49,1214.17 1536.08,1214.17 1536.67,1214.17 1537.25,1214.17 1537.84,1214.17 1538.43,1214.17 1539.01,1214.17 1539.6,1214.17 1540.19,1214.17 1540.77,1214.17 1541.36,1214.17 1541.94,1214.17 1542.53,1214.17 1543.12,1214.17 1543.7,1214.17 1544.29,1214.17 1544.88,1214.17 1545.46,1214.17 1546.05,1214.17 1546.64,1214.17 1547.22,1214.17 1547.81,1214.17 1548.4,1214.17 1548.98,1214.17 1549.57,1214.17 1550.15,1214.17 1550.74,1214.17 1551.33,1214.17 1551.91,1214.17 1552.5,1214.17 1553.09,1214.17 1553.67,1214.17 1554.26,1214.17 1554.85,1214.17 1555.43,1214.17 1556.02,1214.17 1556.6,1214.17 1557.19,1214.17 1557.78,1214.17 1558.36,1214.17 1558.95,1214.17 1559.54,1214.17 1560.12,1214.17 1560.71,1214.17 1561.3,1214.17 1561.88,1214.17 1562.47,1214.17 1563.06,1214.17 1563.64,1214.17 1564.23,1214.17 1564.81,1214.17 1565.4,1214.17 1565.99,1214.17 1566.57,1214.17 1567.16,1214.17 1567.75,1214.17 1568.33,1214.17 1568.92,1214.17 1569.51,1214.17 1570.09,1214.17 1570.68,1214.17 1571.27,1214.17 1571.85,1214.17 1572.44,1214.17 1573.02,1214.17 1573.61,1214.17 1574.2,1214.17 1574.78,1214.17 1575.37,1214.17 1575.96,1214.17 1576.54,1214.17 1577.13,1214.17 1577.72,1214.17 1578.3,1214.17 1578.89,1214.17 1579.47,1214.17 1580.06,1214.17 1580.65,1214.17 1581.23,1214.17 1581.82,1214.17 1582.41,1214.17 1582.99,1214.17 1583.58,1214.17 1584.17,1214.17 1584.75,1214.17 1585.34,1214.17 1585.93,1214.17 1586.51,1214.17 1587.1,1214.17 1587.68,1214.17 1588.27,1214.17 1588.86,1214.17 1589.44,1214.17 1590.03,1214.17 1590.62,1214.17 1591.2,1214.17 1591.79,1214.17 1592.38,1214.17 1592.96,1214.17 1593.55,1214.17 1594.14,1214.17 1594.72,1214.17 1595.31,1214.17 1595.89,1214.17 1596.48,1214.17 1597.07,1214.17 1597.65,1214.17 1598.24,1214.17 1598.83,1214.17 1599.41,1214.17 1600,1214.17 1600.59,1214.17 1601.17,1214.17 1601.76,1214.17 1602.34,1214.17 1602.93,1214.17 1603.52,1214.17 1604.1,1214.17 1604.69,1214.17 1605.28,1214.17 1605.86,1214.17 1606.45,1214.17 1607.04,1214.17 1607.62,1214.17 1608.21,1214.17 1608.8,1214.17 1609.38,1214.17 1609.97,1214.17 1610.55,1214.17 1611.14,1214.17 1611.73,1214.17 1612.31,1214.17 1612.9,1214.17 1613.49,1214.17 1614.07,1214.17 1614.66,1214.17 1615.25,1214.17 1615.83,1214.17 1616.42,1214.17 1617.01,1214.17 1617.59,1214.17 1618.18,1214.17 1618.76,1214.17 1619.35,1214.17 1619.94,1214.17 1620.52,1214.17 1621.11,1214.17 1621.7,1214.17 1622.28,1214.17 1622.87,1214.17 1623.46,1214.17 1624.04,1214.17 1624.63,1214.17 1625.22,1214.17 1625.8,1214.17 1626.39,1214.17 1626.97,1214.17 1627.56,1214.17 1628.15,1214.17 1628.73,1214.17 1629.32,1214.17 1629.91,1214.17 1630.49,1214.17 1631.08,1214.17 1631.67,1214.17 1632.25,1214.17 1632.84,1214.17 1633.42,1214.17 1634.01,1214.17 1634.6,1214.17 1635.18,1214.17 1635.77,1214.17 1636.36,1214.17 1636.94,1214.17 1637.53,1214.17 1638.12,1214.17 1638.7,1214.17 1639.29,1214.17 1639.88,1214.17 1640.46,1214.17 1641.05,1214.17 1641.63,1214.17 1642.22,1214.17 1642.81,1214.17 1643.39,1214.17 1643.98,1214.17 1644.57,1214.17 1645.15,1214.17 1645.74,1214.17 1646.33,1214.17 1646.91,1214.17 1647.5,1214.17 1648.09,1214.17 1648.67,1214.17 1649.26,1214.17 1649.84,1214.17 1650.43,1214.17 1651.02,1214.17 1651.6,1214.17 1652.19,1214.17 1652.78,1214.17 1653.36,1214.17 1653.95,1214.17 1654.54,1214.17 1655.12,1214.17 1655.71,1214.17 1656.29,1214.17 1656.88,1214.17 1657.47,1214.17 1658.05,1214.17 1658.64,1214.17 1659.23,1214.17 1659.81,1214.17 1660.4,1214.17 1660.99,1214.17 1661.57,1214.17 1662.16,1214.17 1662.75,1214.17 1663.33,1214.17 1663.92,1214.17 1664.5,1214.17 1665.09,1214.17 1665.68,1214.17 1666.26,1214.17 1666.85,1214.17 1667.44,1214.17 1668.02,1214.17 1668.61,1214.17 1669.2,1214.17 1669.78,1214.17 1670.37,1214.17 1670.96,1214.17 1671.54,1214.17 1672.13,1214.17 1672.71,1214.17 1673.3,1214.17 1673.89,1214.17 1674.47,1214.17 1675.06,1214.17 1675.65,1214.17 1676.23,1214.17 1676.82,1214.17 1677.41,1214.17 1677.99,1214.17 1678.58,1214.17 1679.17,1214.17 1679.75,1214.17 1680.34,1214.17 1680.92,1214.17 1681.51,1214.17 1682.1,1214.17 1682.68,1214.17 1683.27,1214.17 1683.86,1214.17 1684.44,1214.17 1685.03,1214.17 1685.62,1214.17 1686.2,1214.17 1686.79,1214.17 1687.37,1214.17 1687.96,1214.17 1688.55,1214.17 1689.13,1214.17 1689.72,1214.17 1690.31,1214.17 1690.89,1214.17 1691.48,1214.17 1692.07,1214.17 1692.65,1214.17 1693.24,1214.17 1693.83,1214.17 1694.41,1214.17 1695,1214.17 1695.58,1214.17 1696.17,1214.17 1696.76,1214.17 1697.34,1214.17 1697.93,1214.17 1698.52,1214.17 1699.1,1214.17 1699.69,1214.17 1700.28,1214.17 1700.86,1214.17 1701.45,1214.17 1702.04,1214.17 1702.62,1214.17 1703.21,1214.17 1703.79,1214.17 1704.38,1214.17 1704.97,1214.17 1705.55,1214.17 1706.14,1214.17 1706.73,1214.17 1707.31,1214.17 1707.9,1214.17 1708.49,1214.17 1709.07,1214.17 1709.66,1214.17 1710.24,1214.17 1710.83,1214.17 1711.42,1214.17 1712,1214.17 1712.59,1214.17 1713.18,1214.17 1713.76,1214.17 1714.35,1214.17 1714.94,1214.17 1715.52,1214.17 1716.11,1214.17 1716.7,1214.17 1717.28,1214.17 1717.87,1214.17 1718.45,1214.17 1719.04,1214.17 1719.63,1214.17 1720.21,1214.17 1720.8,1214.17 1721.39,1214.17 1721.97,1214.17 1722.56,1214.17 1723.15,1214.17 1723.73,1214.17 1724.32,1214.17 1724.91,1214.17 1725.49,1214.17 1726.08,1214.17 1726.66,1214.17 1727.25,1214.17 1727.84,1214.17 1728.42,1214.17 1729.01,1214.17 1729.6,1214.17 1730.18,1214.17 1730.77,1214.17 1731.36,1214.17 1731.94,1214.17 1732.53,1214.17 1733.11,1214.17 1733.7,1214.17 1734.29,1214.17 1734.87,1214.17 1735.46,1214.17 1736.05,1214.17 1736.63,1214.17 1737.22,1214.17 1737.81,1214.17 1738.39,1214.17 1738.98,1214.17 1739.57,1214.17 1740.15,1214.17 1740.74,1214.17 1741.32,1214.17 1741.91,1214.17 1742.5,1214.17 1743.08,1214.17 1743.67,1214.17 1744.26,1214.17 1744.84,1214.17 1745.43,1214.17 1746.02,1214.17 1746.6,1214.17 1747.19,1214.17 1747.78,1214.17 1748.36,1214.17 1748.95,1214.17 1749.53,1214.17 1750.12,1214.17 1750.71,1214.17 1751.29,1214.17 1751.88,1214.17 1752.47,1214.17 1753.05,1214.17 1753.64,1214.17 1754.23,1214.17 1754.81,1214.17 1755.4,1214.17 1755.99,1214.17 1756.57,1214.17 1757.16,1214.17 1757.74,1214.17 1758.33,1214.17 1758.92,1214.17 1759.5,1214.17 1760.09,1214.17 1760.68,1214.17 1761.26,1214.17 1761.85,1214.17 1762.44,1214.17 1763.02,1214.17 1763.61,1214.17 1764.19,1214.17 1764.78,1214.17 1765.37,1214.17 1765.95,1214.17 1766.54,1214.17 1767.13,1214.17 1767.71,1214.17 1768.3,1214.17 1768.89,1214.17 1769.47,1214.17 1770.06,1214.17 1770.65,1214.17 1771.23,1214.17 1771.82,1214.17 1772.4,1214.17 1772.99,1214.17 1773.58,1214.17 1774.16,1214.17 1774.75,1214.17 1775.34,1214.17 1775.92,1214.17 1776.51,1214.17 1777.1,1214.17 1777.68,1214.17 1778.27,1214.17 1778.86,1214.17 1779.44,1214.17 1780.03,1214.17 1780.61,1214.17 1781.2,1214.17 1781.79,1214.17 1782.37,1214.17 1782.96,1214.17 1783.55,1214.17 1784.13,1214.17 1784.72,1214.17 1785.31,1214.17 1785.89,1214.17 1786.48,1214.17 1787.06,1214.17 1787.65,1214.17 1788.24,1214.17 1788.82,1214.17 1789.41,1214.17 1790,1214.17 1790.58,1214.17 1791.17,1214.17 1791.76,1214.17 1792.34,1214.17 1792.93,1214.17 1793.52,1214.17 1794.1,1214.17 1794.69,1214.17 1795.27,1214.17 1795.86,1214.17 1796.45,1214.17 1797.03,1214.17 1797.62,1214.17 1798.21,1214.17 1798.79,1214.17 1799.38,1214.17 1799.97,1214.17 1800.55,1214.17 1801.14,1214.17 1801.73,1214.17 1802.31,1214.17 1802.9,1214.17 1803.48,1214.17 1804.07,1214.17 1804.66,1214.17 1805.24,1214.17 1805.83,1214.17 1806.42,1214.17 1807,1214.17 1807.59,1214.17 1808.18,1214.17 1808.76,1214.17 1809.35,1214.17 1809.94,1214.17 1810.52,1214.17 1811.11,1214.17 1811.69,1214.17 1812.28,1214.17 1812.87,1214.17 1813.45,1214.17 1814.04,1214.17 1814.63,1214.17 1815.21,1214.17 1815.8,1214.17 1816.39,1214.17 1816.97,1214.17 1817.56,1214.17 1818.14,1214.17 1818.73,1214.17 1819.32,1214.17 1819.9,1214.17 1820.49,1214.17 1821.08,1214.17 1821.66,1214.17 1822.25,1214.17 1822.84,1214.17 1823.42,1214.17 1824.01,1214.17 1824.6,1214.17 1825.18,1214.17 1825.77,1214.17 1826.35,1214.17 1826.94,1214.17 1827.53,1214.17 1828.11,1214.17 1828.7,1214.17 1829.29,1214.17 1829.87,1214.17 1830.46,1214.17 1831.05,1214.17 1831.63,1214.17 1832.22,1214.17 1832.81,1214.17 1833.39,1214.17 1833.98,1214.17 1834.56,1214.17 1835.15,1214.17 1835.74,1214.17 1836.32,1214.17 1836.91,1214.17 1837.5,1214.17 1838.08,1214.17 1838.67,1214.17 1839.26,1214.17 1839.84,1214.17 1840.43,1214.17 1841.01,1214.17 1841.6,1214.17 1842.19,1214.17 1842.77,1214.17 1843.36,1214.17 1843.95,1214.17 1844.53,1214.17 1845.12,1214.17 1845.71,1214.17 1846.29,1214.17 1846.88,1214.17 1847.47,1214.17 1848.05,1214.17 1848.64,1214.17 1849.22,1214.17 1849.81,1214.17 1850.4,1214.17 1850.98,1214.17 1851.57,1214.17 1852.16,1214.17 1852.74,1214.17 1853.33,1214.17 1853.92,1214.17 1854.5,1214.17 1855.09,1214.17 1855.68,1214.17 1856.26,1214.17 1856.85,1214.17 1857.43,1214.17 1858.02,1214.17 1858.61,1214.17 1859.19,1214.17 1859.78,1214.17 1860.37,1214.17 1860.95,1214.17 1861.54,1214.17 1862.13,1214.17 1862.71,1214.17 1863.3,1214.17 1863.88,1214.17 1864.47,1214.17 1865.06,1214.17 1865.64,1214.17 1866.23,1214.17 1866.82,1214.17 1867.4,1214.17 1867.99,1214.17 1868.58,1214.17 1869.16,1214.17 1869.75,1214.17 1870.34,1214.17 1870.92,1214.17 1871.51,1214.17 1872.09,1214.17 1872.68,1214.17 1873.27,1214.17 1873.85,1214.17 1874.44,1214.17 1875.03,1214.17 1875.61,1214.17 1876.2,1214.17 1876.79,1214.17 1877.37,1214.17 1877.96,1214.17 1878.55,1214.17 1879.13,1214.17 1879.72,1214.17 1880.3,1214.17 1880.89,1214.17 1881.48,1214.17 1882.06,1214.17 1882.65,1214.17 1883.24,1214.17 1883.82,1214.17 1884.41,1214.17 1885,1214.17 1885.58,1214.17 1886.17,1214.17 1886.76,1214.17 1887.34,1214.17 1887.93,1214.17 1888.51,1214.17 1889.1,1214.17 1889.69,1214.17 1890.27,1214.17 1890.86,1214.17 1891.45,1214.17 1892.03,1214.17 1892.62,1214.17 1893.21,1214.17 1893.79,1214.17 1894.38,1214.17 1894.96,1214.17 1895.55,1214.17 1896.14,1214.17 1896.72,1214.17 1897.31,1214.17 1897.9,1214.17 1898.48,1214.17 1899.07,1214.17 1899.66,1214.17 1900.24,1214.17 1900.83,1214.17 1901.42,1214.17 1902,1214.17 1902.59,1214.17 1903.17,1214.17 1903.76,1214.17 1904.35,1214.17 1904.93,1214.17 1905.52,1214.17 1906.11,1214.17 1906.69,1214.17 1907.28,1214.17 1907.87,1214.17 1908.45,1214.17 1909.04,1214.17 1909.63,1214.17 1910.21,1214.17 1910.8,1214.17 1911.38,1214.17 1911.97,1214.17 1912.56,1214.17 1913.14,1214.17 1913.73,1214.17 1914.32,1214.17 1914.9,1214.17 1915.49,1214.17 1916.08,1214.17 1916.66,1214.17 1917.25,1214.17 1917.83,1214.17 1918.42,1214.17 1919.01,1214.17 1919.59,1214.17 1920.18,1214.17 1920.77,1214.17 1921.35,1214.17 1921.94,1214.17 1922.53,1214.17 1923.11,1214.17 1923.7,1214.17 1924.29,1214.17 1924.87,1214.17 1925.46,1214.17 1926.04,1214.17 1926.63,1214.17 1927.22,1214.17 1927.8,1214.17 1928.39,1214.17 1928.98,1214.17 1929.56,1214.17 1930.15,1214.17 1930.74,1214.17 1931.32,1214.17 1931.91,1214.17 1932.5,1214.17 1933.08,1214.17 1933.67,1214.17 1934.25,1214.17 1934.84,1214.17 1935.43,1214.17 1936.01,1214.17 1936.6,1214.17 1937.19,1214.17 1937.77,1214.17 1938.36,1214.17 1938.95,1214.17 1939.53,1214.17 1940.12,1214.17 1940.71,1214.17 1941.29,1214.17 1941.88,1214.17 1942.46,1214.17 1943.05,1214.17 1943.64,1214.17 1944.22,1214.17 1944.81,1214.17 1945.4,1214.17 1945.98,1214.17 1946.57,1214.17 1947.16,1214.17 1947.74,1214.17 1948.33,1214.17 1948.91,1214.17 1949.5,1214.17 1950.09,1214.17 1950.67,1214.17 1951.26,1214.17 1951.85,1214.17 1952.43,1214.17 1953.02,1214.17 1953.61,1214.17 1954.19,1214.17 1954.78,1214.17 1955.37,1214.17 1955.95,1214.17 1956.54,1214.17 1957.12,1214.17 1957.71,1214.17 1958.3,1214.17 1958.88,1214.17 1959.47,1214.17 1960.06,1214.17 1960.64,1214.17 1961.23,1214.17 1961.82,1214.17 1962.4,1214.17 1962.99,1214.17 1963.58,1214.17 1964.16,1214.17 1964.75,1214.17 1965.33,1214.17 1965.92,1214.17 1966.51,1214.17 1967.09,1214.17 1967.68,1214.17 1968.27,1214.17 1968.85,1214.17 1969.44,1214.17 1970.03,1214.17 1970.61,1214.17 1971.2,1214.17 1971.78,1214.17 1972.37,1214.17 1972.96,1214.17 1973.54,1214.17 1974.13,1214.17 1974.72,1214.17 1975.3,1214.17 1975.89,1214.17 1976.48,1214.17 1977.06,1214.17 1977.65,1214.17 1978.24,1214.17 1978.82,1214.17 1979.41,1214.17 1979.99,1214.17 1980.58,1214.17 1981.17,1214.17 1981.75,1214.17 1982.34,1214.17 1982.93,1214.17 1983.51,1214.17 1984.1,1214.17 1984.69,1214.17 1985.27,1214.17 1985.86,1214.17 1986.45,1214.17 1987.03,1214.17 1987.62,1214.17 1988.2,1214.17 1988.79,1214.17 1989.38,1214.17 1989.96,1214.17 1990.55,1214.17 1991.14,1214.17 1991.72,1214.17 1992.31,1214.17 1992.9,1214.17 1993.48,1214.17 1994.07,1214.17 1994.65,1214.17 1995.24,1214.17 1995.83,1214.17 1996.41,1214.17 1997,1214.17 1997.59,1214.17 1998.17,1214.17 1998.76,1214.17 1999.35,1214.17 1999.93,1214.17 2000.52,1214.17 2001.11,1214.17 2001.69,1214.17 2002.28,1214.17 2002.86,1214.17 2003.45,1214.17 2004.04,1214.17 2004.62,1214.17 2005.21,1214.17 2005.8,1214.17 2006.38,1214.17 2006.97,1214.17 2007.56,1214.17 2008.14,1214.17 2008.73,1214.17 2009.32,1214.17 2009.9,1214.17 2010.49,1214.17 2011.07,1214.17 2011.66,1214.17 2012.25,1214.17 2012.83,1214.17 2013.42,1214.17 2014.01,1214.17 2014.59,1214.17 2015.18,1214.17 2015.77,1214.17 2016.35,1214.17 2016.94,1214.17 2017.53,1214.17 2018.11,1214.17 2018.7,1214.17 2019.28,1214.17 2019.87,1214.17 2020.46,1214.17 2021.04,1214.17 2021.63,1214.17 2022.22,1214.17 2022.8,1214.17 2023.39,1214.17 2023.98,1214.17 2024.56,1214.17 2025.15,1214.17 2025.73,1214.17 2026.32,1214.17 2026.91,1214.17 2027.49,1214.17 2028.08,1214.17 2028.67,1214.17 2029.25,1214.17 2029.84,1214.17 2030.43,1214.17 2031.01,1214.17 2031.6,1214.17 2032.19,1214.17 2032.77,1214.17 2033.36,1214.17 2033.94,1214.17 2034.53,1214.17 2035.12,1214.17 2035.7,1214.17 2036.29,1214.17 2036.88,1214.17 2037.46,1214.17 2038.05,1214.17 2038.64,1214.17 2039.22,1214.17 2039.81,1214.17 2040.4,1214.17 2040.98,1214.17 2041.57,1214.17 2042.15,1214.17 2042.74,1214.17 2043.33,1214.17 2043.91,1214.17 2044.5,1214.17 2045.09,1214.17 2045.67,1214.17 2046.26,1214.17 2046.85,1214.17 2047.43,1214.17 2048.02,1214.17 2048.6,1214.17 2049.19,1214.17 2049.78,1214.17 2050.36,1214.17 2050.95,1214.17 2051.54,1214.17 2052.12,1214.17 2052.71,1214.17 2053.3,1214.17 2053.88,1214.17 2054.47,1214.17 2055.06,1214.17 2055.64,1214.17 2056.23,1214.17 2056.81,1214.17 2057.4,1214.17 2057.99,1214.17 2058.57,1214.17 2059.16,1214.17 2059.75,1214.17 2060.33,1214.17 2060.92,1214.17 2061.51,1214.17 2062.09,1214.17 2062.68,1214.17 2063.27,1214.17 2063.85,1214.17 2064.44,1214.17 2065.02,1214.17 2065.61,1214.17 2066.2,1214.17 2066.78,1214.17 2067.37,1214.17 2067.96,1214.17 2068.54,1214.17 2069.13,1214.17 2069.72,1214.17 2070.3,1214.17 2070.89,1214.17 2071.48,1214.17 2072.06,1214.17 2072.65,1214.17 2073.23,1214.17 2073.82,1214.17 2074.41,1214.17 2074.99,1214.17 2075.58,1214.17 2076.17,1214.17 2076.75,1214.17 2077.34,1214.17 2077.93,1214.17 2078.51,1214.17 2079.1,1214.17 2079.68,1214.17 2080.27,1214.17 2080.86,1214.17 2081.44,1214.17 2082.03,1214.17 2082.62,1214.17 2083.2,1214.17 2083.79,1214.17 2084.38,1214.17 2084.96,1214.17 2085.55,1214.17 2086.14,1214.17 2086.72,1214.17 2087.31,1214.17 2087.89,1214.17 2088.48,1214.17 2089.07,1214.17 2089.65,1214.17 2090.24,1214.17 2090.83,1214.17 2091.41,1214.17 2092,1214.17 2092.59,1214.17 2093.17,1214.17 2093.76,1214.17 2094.35,1214.17 2094.93,1214.17 2095.52,1214.17 2096.1,1214.17 2096.69,1214.17 2097.28,1214.17 2097.86,1214.17 2098.45,1214.17 2099.04,1214.17 2099.62,1214.17 2100.21,1214.17 2100.8,1214.17 2101.38,1214.17 2101.97,1214.17 2102.55,1214.17 2103.14,1214.17 2103.73,1214.17 2104.31,1214.17 2104.9,1214.17 2105.49,1214.17 2106.07,1214.17 2106.66,1214.17 2107.25,1214.17 2107.83,1214.17 2108.42,1214.17 2109.01,1214.17 2109.59,1214.17 2110.18,1214.17 2110.76,1214.17 2111.35,1214.17 2111.94,1214.17 2112.52,1214.17 2113.11,1214.17 2113.7,1214.17 2114.28,1214.17 2114.87,1214.17 2115.46,1214.17 2116.04,1214.17 2116.63,1214.17 2117.22,1214.17 2117.8,1214.17 2118.39,1214.17 2118.97,1214.17 2119.56,1214.17 2120.15,1214.17 2120.73,1214.17 2121.32,1214.17 2121.91,1214.17 2122.49,1214.17 2123.08,1214.17 2123.67,1214.17 2124.25,1214.17 2124.84,1214.17 2125.42,1214.17 2126.01,1214.17 2126.6,1214.17 2127.18,1214.17 2127.77,1214.17 2128.36,1214.17 2128.94,1214.17 2129.53,1214.17 2130.12,1214.17 2130.7,1214.17 2131.29,1214.17 2131.88,1214.17 2132.46,1214.17 2133.05,1214.17 2133.63,1214.17 2134.22,1214.17 2134.81,1214.17 2135.39,1214.17 2135.98,1214.17 2136.57,1214.17 2137.15,1214.17 2137.74,1214.17 2138.33,1214.17 2138.91,1214.17 2139.5,1214.17 2140.09,1214.17 2140.67,1214.17 2141.26,1214.17 2141.84,1214.17 2142.43,1214.17 2143.02,1214.17 2143.6,1214.17 2144.19,1214.17 2144.78,1214.17 2145.36,1214.17 2145.95,1214.17 2146.54,1214.17 2147.12,1214.17 2147.71,1214.17 2148.3,1214.17 2148.88,1214.17 2149.47,1214.17 2150.05,1214.17 2150.64,1214.17 2151.23,1214.17 2151.81,1214.17 2152.4,1214.17 2152.99,1214.17 2153.57,1214.17 2154.16,1214.17 2154.75,1214.17 2155.33,1214.17 2155.92,1214.17 2156.5,1214.17 2157.09,1214.17 2157.68,1214.17 2158.26,1214.17 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.33,1196.59 1398.94,899.083 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.24 985.439,1196.59 2158.26,1196.59 2158.26,1231.24 985.439,1231.24 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip913\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip913)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4908.13 163.792,-5945.06 164.351,-6872.5 164.91,-7717.29 165.469,-8460.03 166.029,-9155.93 166.588,-9784.23 167.147,-9312.63 167.706,-9866.63 168.266,-10362.9 168.825,-10805.1 169.384,-11182.9 169.943,-11528.1 170.503,-11112.8 171.062,-11401.3 171.621,-11640.8 172.18,-11852.9 172.74,-11483.9 173.299,-11171 173.858,-11341.9 174.417,-11484.7 174.977,-11584.1 175.536,-11667.9 176.095,-11381.5 176.655,-11090.3 177.214,-11130.4 177.773,-11152.5 178.332,-11157.8 178.892,-10625 179.451,-10364.4 180.01,-9653.84 180.569,-9625.02 181.129,-9381.45 181.688,-9157.39 182.247,-8937.85 182.806,-8878.81 183.366,-8800.14 183.925,-8560.58 184.484,-8342.88 185.043,-8121.74 185.603,-8032.63 186.162,-7938.29 186.721,-7730.33 187.28,-7627.81 187.84,-7401.24 188.399,-7302.58 188.958,-6918.31 189.517,-6626.71 190.077,-6529.08 190.636,-6420.91 191.195,-6242.52 191.754,-5986.13 192.314,-5818.55 192.873,-5713.53 193.432,-5407.1 193.991,-5320.65 194.551,-5223.98 195.11,-5067.96 195.669,-4858.83 196.228,-4659.73 196.788,-4570.64 197.347,-4428.46 197.906,-4232.5 198.465,-4093.2 199.025,-3960.19 199.584,-3833.91 200.143,-3660.2 200.702,-3369 201.262,-3259.89 201.821,-3197.32 202.38,-3045.18 202.939,-2897.65 203.499,-2709.77 204.058,-2613.09 204.617,-2449.85 205.176,-2398.43 205.736,-2246.54 206.295,-2193.75 206.854,-2074.87 207.413,-1967.99 207.973,-1890.59 208.532,-1850.85 209.091,-1805.82 209.65,-1756.75 210.21,-1618.91 210.769,-1516.5 211.328,-1474.58 211.887,-1378.66 212.447,-1227.84 213.006,-1162.39 213.565,-1098.44 214.124,-1039.77 214.684,-1004.96 215.243,-844.077 215.802,-738.334 216.361,-659.95 216.921,-606.22 217.48,-531.165 218.039,-508.662 218.598,-461.178 219.158,-393.979 219.717,-373.686 220.276,-355.395 220.835,-239.604 221.395,-174.243 221.954,-112.91 222.513,-56.0002 223.072,-67.9081 223.632,-28.847 224.191,72.3771 224.75,127.742 225.309,180.784 225.869,230.356 226.428,256.234 226.987,283.547 227.546,331.97 228.106,333.975 228.665,341.842 229.224,369.59 229.783,418.363 230.343,443.525 230.902,469.053 231.461,531.334 232.02,549.627 232.58,569.058 233.139,590.594 233.698,569.424 234.257,588.523 234.817,588.799 235.376,613.427 235.935,633.046 236.494,655.777 237.054,635.204 237.613,636.667 238.172,640.982 238.731,629.176 239.291,635.527 239.85,660.992 240.409,683.839 240.968,739.537 241.528,775.64 242.087,796.244 242.646,830.35 243.205,787.724 243.765,824.892 244.324,823.259 244.883,818.573 245.442,855.819 246.002,872.876 246.561,923.671 247.12,917.236 247.679,914.054 248.239,911.425 248.798,924.124 249.357,938.542 249.916,935.715 250.476,931.291 251.035,977.778 251.594,1009.97 252.153,967.552 252.713,963.313 253.272,1009.96 253.831,999.764 254.39,976.557 254.95,972.996 255.509,986.564 256.068,997.569 256.627,992.768 257.187,985.686 257.746,978.849 258.305,973.63 258.864,986.305 259.424,1034.35 259.983,1043.2 260.542,1071.26 261.101,1044.36 261.661,1055.43 262.22,1048.45 262.779,1026.77 263.338,1043.51 263.898,1052.68 264.457,1063.2 265.016,1053.54 265.575,1063.27 266.135,1042.2 266.694,1022.73 267.253,1035.25 267.812,1029.56 268.372,1059.1 268.931,1053.52 269.49,1029.99 270.049,1056.76 270.609,1046.96 271.168,1057.73 271.727,1085.23 272.286,1129.01 272.846,1131.71 273.405,1123.09 273.964,1112 274.523,1081.31 275.083,1124.86 275.642,1116.26 276.201,1112.94 276.76,1137.76 277.32,1142.24 277.879,1130.25 278.438,1135.67 278.997,1122.14 279.557,1095.71 280.116,1090.63 280.675,1097.55 281.234,1075.89 281.794,1101.84 282.353,1109.06 282.912,1068.4 283.471,1061.04 284.031,1070.93 284.59,1081.91 285.149,1057.73 285.708,1067.3 286.268,1046.39 286.827,1025.38 287.386,1086.33 287.945,1111.89 288.505,1120.75 289.064,1097.48 289.623,1101.18 290.182,1075.99 290.742,1067.48 291.301,1041.67 291.86,1050.84 292.419,997.026 292.979,1025.52 293.538,1036.53 294.097,1031.5 294.656,1028.09 295.216,1026.93 295.775,1036.61 296.334,995.848 296.893,976.964 297.453,972.886 298.012,956.781 298.571,972.151 299.13,967.142 299.69,1011.83 300.249,990.031 300.808,1004.21 301.368,998.568 301.927,996.319 302.486,988.077 303.045,952.222 303.605,968.941 304.164,967.352 304.723,964.654 305.282,976.71 305.842,1035.04 306.401,1029.68 306.96,1041.82 307.519,1049.97 308.079,1058.75 308.638,1065.1 309.197,1054.2 309.756,1046.19 310.316,1103.14 310.875,1060.23 311.434,1038.46 311.993,1030.68 312.553,1022.2 313.112,1031.75 313.671,1025.48 314.23,1033.85 314.79,1027.59 315.349,1003.4 315.908,979.587 316.467,991.434 317.027,988.196 317.586,1032.77 318.145,1024.85 318.704,1001.76 319.264,994.132 319.823,971.507 320.382,966.944 320.941,962.267 321.501,976.501 322.06,925.002 322.619,921.104 323.178,966.596 323.738,965.273 324.297,945.502 324.856,910.067 325.415,920.977 325.975,918.563 326.534,929.424 327.093,926.963 327.652,938.466 328.212,947.495 328.771,945.407 329.33,941.885 329.889,967.765 330.449,977.824 331.008,973.08 331.567,999.037 332.126,985.493 332.686,1028.83 333.245,986.65 333.804,1011.46 334.363,985.699 334.923,992.95 335.482,1001.48 336.041,940.106 336.6,982.891 337.16,959.802 337.719,971.788 338.278,946.992 338.837,975.566 339.397,973.306 339.956,932.186 340.515,928.516 341.074,876.833 341.634,845.022 342.193,845.429 342.752,863.665 343.311,915.501 343.871,913.649 344.43,910.237 344.989,907.336 345.548,854.638 346.108,873.225 346.667,917.942 347.226,964.668 347.785,958.274 348.345,951.665 348.904,961.455 349.463,887.21 350.022,931.921 350.582,927.196 351.141,920.146 351.7,975.43 352.259,936.688 352.819,928.069 353.378,923.113 353.937,888.133 354.496,881.501 355.056,895.718 355.615,910.153 356.174,888.152 356.733,886.872 357.293,885.184 357.852,831 358.411,795.885 358.97,795.495 359.53,825.975 360.089,828.576 360.648,827.893 361.207,812.54 361.767,828.021 362.326,877.375 362.885,839.352 363.444,854.806 364.004,833.779 364.563,850.85 365.122,849.683 365.681,830.542 366.241,829.362 366.8,830.782 367.359,815.82 367.918,800.105 368.478,796.93 369.037,778.76 369.596,811.465 370.155,843.853 370.715,841.061 371.274,839.036 371.833,822.297 372.392,792.656 372.952,795.029 373.511,796.314 374.07,798.209 374.629,785.705 375.189,772.251 375.748,790.821 376.307,825.221 376.866,823.686 377.426,823.608 377.985,856.066 378.544,852.758 379.103,849.023 379.663,827.757 380.222,841.668 380.781,821.332 381.34,819.035 381.9,819.935 382.459,816.627 383.018,784.028 383.577,765.484 384.137,766.873 384.696,766.069 385.255,751.312 385.814,733.852 386.374,737.46 386.933,760.181 387.492,746.551 388.051,764.398 388.611,767.454 389.17,788.164 389.729,805.076 390.288,818.002 390.848,797.718 391.407,829.599 391.966,826.306 392.525,823.176 393.085,836.989 393.644,853.116 394.203,852.654 394.762,883.799 395.322,881.277 395.881,877.667 396.44,873.972 396.999,851.902 397.559,850.7 398.118,832.517 398.677,878.934 399.236,876.755 399.796,870.829 400.355,930.022 400.914,968.315 401.473,977.896 402.033,985.52 402.592,973.221 403.151,916.053 403.71,922.73 404.27,916.878 404.829,877.01 405.388,852.725 405.947,834.016 406.507,811.898 407.066,792.373 407.625,792.211 408.184,773.63 408.744,775.523 409.303,774.443 409.862,792.142 410.421,770.239 410.981,755.851 411.54,787.564 412.099,773.297 412.658,757.039 413.218,773.518 413.777,789.087 414.336,820.34 414.895,818.36 415.455,817.888 416.014,798.593 416.573,827.956 417.132,874.25 417.692,865.718 418.251,862.902 418.81,889.234 419.369,914.535 419.929,892.994 420.488,883.006 421.047,878.053 421.606,919.041 422.166,882.68 422.725,908.553 423.284,902.244 423.843,863.527 424.403,841.959 424.962,841.438 425.521,838.565 426.08,853.961 426.64,865.206 427.199,858.968 427.758,840.496 428.318,803.085 428.877,766.42 429.436,766.903 429.995,767.216 430.555,782.802 431.114,784.186 431.673,816.908 432.232,847.751 432.792,824.725 433.351,819.925 433.91,831.125 434.469,827.319 435.029,806.296 435.588,803.6 436.147,834.768 436.706,846.461 437.266,825.183 437.825,822.479 438.384,833.657 438.943,834.086 439.503,811.113 440.062,797.404 440.621,830.798 441.18,839.643 441.74,849.656 442.299,813.466 442.858,809.643 443.417,807.877 443.977,822.693 444.536,800.817 445.095,814.455 445.654,826.854 446.214,840.855 446.773,834.512 447.332,780.888 447.891,747.884 448.451,751.136 449.01,766.186 449.569,763.691 450.128,763.955 450.688,777.314 451.247,805.613 451.806,819.887 452.365,799.658 452.925,812.647 453.484,826.131 454.043,822.731 454.602,751.541 455.162,769.327 455.721,821.517 456.28,835.604 456.839,846.053 457.399,858.592 457.958,884.388 458.517,860.495 459.076,855.221 459.636,861.676 460.195,903.61 460.754,877.694 461.313,869.263 461.873,863.582 462.432,841.214 462.991,806.593 463.55,785.73 464.11,783.094 464.669,794.436 465.228,758.215 465.787,739.728 466.347,761.325 466.906,744.87 467.465,714.541 468.024,680.589 468.584,705.196 469.143,690.486 469.702,727.613 470.261,743.407 470.821,726.031 471.38,742.209 471.939,725.782 472.498,726.879 473.058,729.588 473.617,731.732 474.176,734.19 474.735,731.534 475.295,746.8 475.854,748.375 476.413,762.798 476.972,726.743 477.532,713.017 478.091,727.76 478.65,712.476 479.209,716.49 479.769,702.983 480.328,670.462 480.887,690.746 481.446,678.681 482.006,665.085 482.565,686.014 483.124,653.484 483.683,655.288 484.243,675.431 484.802,697.008 485.361,634.142 485.92,643.344 486.48,632.794 487.039,652.294 487.598,656.008 488.157,660.142 488.717,649.33 489.276,635.987 489.835,658.655 490.394,696.405 490.954,695.763 491.513,682.2 492.072,706.727 492.631,710.104 493.191,713.724 493.75,714.829 494.309,734.373 494.868,736.344 495.428,733.178 495.987,748.25 496.546,776.066 497.105,770.289 497.665,783.699 498.224,781.398 498.783,764.045 499.342,779.537 499.902,778.425 500.461,761.221 501.02,759.859 501.579,758.861 502.139,756.151 502.698,770.882 503.257,768.97 503.816,767.982 504.376,797.863 504.935,761.53 505.494,744.57 506.053,728.675 506.613,729.782 507.172,713.82 507.731,744.748 508.29,726.416 508.85,772.37 509.409,735.609 509.968,738.724 510.527,737.505 511.087,770.303 511.646,782.927 512.205,784.122 512.764,764.252 513.324,794.297 513.883,775.166 514.442,753.577 515.001,785.427 515.561,765.27 516.12,779.017 516.679,775.393 517.238,774.086 517.798,788.633 518.357,737.395 518.916,705.387 519.475,726.701 520.035,731.329 520.594,698.583 521.153,667.153 521.712,658.274 522.272,645.061 522.831,668.616 523.39,656.947 523.949,661.815 524.509,664.701 525.068,687.657 525.627,740.501 526.186,723.123 526.746,718.68 527.305,718.885 527.864,751.882 528.423,701.852 528.983,689.226 529.542,706.758 530.101,704.233 530.66,708.184 531.22,741.295 531.779,738.298 532.338,767.612 532.897,766.491 533.457,755.149 534.016,753.121 534.575,770.832 535.134,784.328 535.694,766.607 536.253,713.914 536.812,729.483 537.371,696.22 537.931,714.348 538.49,713.374 539.049,763.074 539.608,759.296 540.168,741.834 540.727,756.239 541.286,752.654 541.845,722.948 542.405,723.724 542.964,691.686 543.523,695.108 544.082,663.87 544.642,665.524 545.201,655.6 545.76,660.405 546.319,661.875 546.879,663.992 547.438,650.596 547.997,671.517 548.556,702.424 549.116,718.256 549.675,683.176 550.234,684.37 550.793,682.725 551.353,685.912 551.912,689.499 552.471,706.872 553.031,709.749 553.59,725.168 554.149,725.231 554.708,724.624 555.268,760.614 555.827,757.482 556.386,740.856 556.945,721.927 557.505,708.281 558.064,708.908 558.623,660.668 559.182,683.998 559.742,715.322 560.301,713.855 560.86,696.116 561.419,713.749 561.979,696.9 562.538,733.159 563.097,732.627 563.656,768.087 564.216,781.547 564.775,779.522 565.334,791.686 565.893,807.031 566.453,822.385 567.012,801.618 567.571,797.531 568.13,758.793 568.69,769.8 569.249,768.031 569.808,775.868 570.367,772.195 570.927,773.064 571.486,783.245 572.045,761.013 572.604,769.645 573.164,782.771 573.723,794.786 574.282,770.87 574.841,731.243 575.401,745.951 575.96,745.663 576.519,709.607 577.078,738.876 577.638,771.511 578.197,786.201 578.756,798.437 579.315,790.748 579.875,819.549 580.434,814.858 580.993,811.044 581.552,838.232 582.112,832.892 582.671,861.467 583.23,851.377 583.789,843.51 584.349,789.928 584.908,784.75 585.467,716.988 586.026,729.404 586.586,726.141 587.145,708.642 587.704,706.376 588.263,671.18 588.823,687.636 589.382,721.967 589.941,671.122 590.5,705.448 591.06,688.852 591.619,685.589 592.178,705.625 592.737,705.353 593.297,706.064 593.856,736.197 594.415,702.694 594.974,687.828 595.534,704.838 596.093,688.694 596.652,692.391 597.211,675.457 597.771,710.931 598.33,678.572 598.889,697.39 599.448,678.998 600.008,697.547 600.567,713.881 601.126,728.63 601.685,744.249 602.245,725.799 602.804,725.042 603.363,709.799 603.922,710.823 604.482,694.615 605.041,698.367 605.6,683.765 606.159,700.118 606.719,665.298 607.278,665.804 607.837,655.116 608.396,643.875 608.956,666.028 609.515,684.372 610.074,669.646 610.633,639.006 611.193,642.817 611.752,679.521 612.311,682.214 612.87,699.533 613.43,703.589 613.989,702.08 614.548,670.827 615.107,674.048 615.667,676.476 616.226,678.539 616.785,662.242 617.344,695.227 617.904,681.137 618.463,701.777 619.022,701.84 619.581,685.035 620.141,670.196 620.7,672.208 621.259,658.624 621.818,596.498 622.378,632.222 622.937,632.609 623.496,634.383 624.055,637.991 624.615,655.218 625.174,657.342 625.733,676.539 626.292,666.376 626.852,683.939 627.411,732.195 627.97,730.634 628.529,778.412 629.089,809.821 629.648,787.218 630.207,784.584 630.766,811.379 631.326,818.899 631.885,799.579 632.444,808.437 633.003,784.343 633.563,736.697 634.122,733.196 634.681,731.375 635.24,745.133 635.8,759.88 636.359,756.74 636.918,771.237 637.477,783.486 638.037,781.531 638.596,775.762 639.155,771.274 639.714,766.555 640.274,792.213 640.833,786.077 641.392,762.795 641.951,742.781 642.511,724 643.07,707.851 643.629,673.268 644.188,642.524 644.748,645.574 645.307,666.009 645.866,685.645 646.425,702.312 646.985,702.771 647.544,684.301 648.103,648.794 648.662,650.451 649.222,637.756 649.781,605.112 650.34,609.791 650.899,598.895 651.459,603.255 652.018,642.362 652.577,661.821 653.136,663.619 653.696,632.843 654.255,638.636 654.814,610.064 655.373,646.772 655.933,679.758 656.492,661.715 657.051,662.794 657.61,651.182 658.17,688.763 658.729,693.289 659.288,759.709 659.847,724.53 660.407,742.13 660.966,756.856 661.525,756.417 662.084,755.66 662.644,786.751 663.203,803.129 663.762,749.472 664.321,734.392 664.881,748.884 665.44,777.597 665.999,737.726 666.558,767.918 667.118,780.736 667.677,775.268 668.236,787.305 668.795,781.606 669.355,809.04 669.914,820.226 670.473,842.732 671.032,832.601 671.592,841.71 672.151,800.935 672.71,796.796 673.269,791.429 673.829,830.177 674.388,840.289 674.947,815.925 675.506,792.053 676.066,773.81 676.625,771.246 677.184,752.342 677.743,782.653 678.303,793.18 678.862,808.215 679.421,818.874 679.981,795.904 680.54,772.507 681.099,752.635 681.658,718.282 682.218,684.146 682.777,683.867 683.336,702.685 683.895,700.181 684.455,733.907 685.014,730.209 685.573,733.078 686.132,713.816 686.692,712.172 687.251,709.476 687.81,674.182 688.369,690.743 688.929,691.315 689.488,673.41 690.047,637.961 690.606,658.764 691.166,641.694 691.725,645.833 692.284,633.384 692.843,654.109 693.403,655.224 693.962,636.127 694.521,672.912 695.08,687.159 695.64,718.747 696.199,784.122 696.758,763.832 697.317,742.624 697.877,738.328 698.436,740.608 698.995,753.211 699.554,782.795 700.114,763.283 700.673,790.735 701.232,805.449 701.791,766.866 702.351,748.536 702.91,747.782 703.469,744.801 704.028,742.532 704.588,756.657 705.147,750.467 705.706,714.219 706.265,696.729 706.825,699.304 707.384,715.136 707.943,694.928 708.502,696.919 709.062,702.299 709.621,702.302 710.18,700.048 710.739,665.64 711.299,652.325 711.858,636.426 712.417,634.657 712.976,670.071 713.536,620.88 714.095,608.256 714.654,646.875 715.213,634.631 715.773,654.618 716.332,669.601 716.891,639.863 717.45,658.299 718.01,676.342 718.569,662.658 719.128,663.931 719.687,646.916 720.247,666.915 720.806,654.958 721.365,662.053 721.924,680.646 722.484,684.849 723.043,719.503 723.602,702.964 724.161,703.474 724.721,704.977 725.28,736.359 725.839,746.877 726.398,756.681 726.958,736.58 727.517,703.446 728.076,734.019 728.635,732.791 729.195,713.713 729.754,741.087 730.313,754.892 730.872,735.698 731.432,719.323 731.991,697.471 732.55,728.663 733.109,726.879 733.669,759.478 734.228,755.829 734.787,733.16 735.346,700.349 735.906,666.985 736.465,627.171 737.024,585.481 737.583,575.801 738.143,615.686 738.702,602.07 739.261,573.711 739.82,577.488 740.38,581.479 740.939,588.035 741.498,623.826 742.057,595.677 742.617,599.155 743.176,605.281 743.735,646.332 744.294,617.931 744.854,624.601 745.413,612.456 745.972,615.205 746.531,605.456 747.091,629.99 747.65,617.336 748.209,637.497 748.768,674.644 749.328,677.665 749.887,678.922 750.446,695.053 751.005,699.531 751.565,718.287 752.124,668.641 752.683,706.239 753.242,738.641 753.802,706.895 754.361,703.929 754.92,706.13 755.479,690.833 756.039,688.611 756.598,701.917 757.157,686.254 757.716,652.267 758.276,653.298 758.835,687.706 759.394,690.13 759.953,670.546 760.513,640.329 761.072,610.66 761.631,602.083 762.19,590.884 762.75,596.86 763.309,616.228 763.868,683.547 764.427,702.894 764.987,685.44 765.546,698.512 766.105,699.491 766.664,682.455 767.224,700.482 767.783,700.954 768.342,763.569 768.901,765.319 769.461,788.987 770.02,769.849 770.579,749.288 771.138,732.022 771.698,743.633 772.257,736.614 772.816,722.262 773.375,721.394 773.935,656.3 774.494,685.48 775.053,668.889 775.612,701.821 776.172,731.265 776.731,730.982 777.29,745.325 777.849,711.518 778.409,695.201 778.968,693.003 779.527,711.061 780.086,711.024 780.646,709.467 781.205,723.698 781.764,754.464 782.323,750.986 782.883,746.156 783.442,774.937 784.001,748.398 784.56,742.076 785.12,738.903 785.679,720.19 786.238,704.022 786.797,686.685 787.357,668.825 787.916,688.845 788.475,722.02 789.034,717.787 789.594,751.162 790.153,734.846 790.712,699.626 791.271,713.563 791.831,728.615 792.39,740.283 792.949,738.783 793.508,764.783 794.068,743.483 794.627,754.369 795.186,781.239 795.745,774.884 796.305,738.818 796.864,735.423 797.423,750.023 797.982,729.789 798.542,697.566 799.101,695.671 799.66,711.984 800.219,727.619 800.779,690.177 801.338,689.617 801.897,690.326 802.456,640.71 803.016,661.645 803.575,666.279 804.134,649.206 804.693,670.517 805.253,687.707 805.812,703.274 806.371,715.118 806.931,682.89 807.49,698.671 808.049,716.97 808.608,744.402 809.168,774.788 809.727,752.667 810.286,764.163 810.845,710.765 811.405,706.052 811.964,736.059 812.523,717.19 813.082,716.854 813.642,717.563 814.201,698.116 814.76,730.491 815.319,696.12 815.879,697.885 816.438,696.741 816.997,678.206 817.556,681.666 818.116,710.036 818.675,694.994 819.234,695.303 819.793,632.461 820.353,635.443 820.912,620.338 821.471,626.955 822.03,634.992 822.59,657.107 823.149,657.485 823.708,677.924 824.267,697.935 824.827,692.745 825.386,645.49 825.945,644.714 826.504,645.386 827.064,663.572 827.623,651.87 828.182,639.183 828.741,646.416 829.301,648.833 829.86,650.89 830.419,639.087 830.978,610.996 831.538,599.982 832.097,602.357 832.656,640.007 833.215,664.512 833.775,666.158 834.334,647.88 834.893,633.102 835.452,617.649 836.012,619.449 836.571,654.221 837.13,688.574 837.689,667.765 838.249,686.589 838.808,703.796 839.367,689.822 839.926,689.597 840.486,707.351 841.045,692.349 841.604,678.706 842.163,710.198 842.723,757.267 843.282,769.982 843.841,783.297 844.4,777.264 844.96,773.792 845.519,750.113 846.078,747.449 846.637,715.968 847.197,680.959 847.756,711.292 848.315,711.03 848.874,708.368 849.434,722.865 849.993,737.037 850.552,717.457 851.111,682.289 851.671,698.205 852.23,712.913 852.789,678.764 853.348,663.146 853.908,650.27 854.467,636.804 855.026,639.76 855.585,639.253 856.145,640.64 856.704,596.012 857.263,584.464 857.822,586.511 858.382,623.895 858.941,612.275 859.5,617.195 860.059,624.812 860.619,644.911 861.178,615.503 861.737,604.221 862.296,592.313 862.856,613.063 863.415,615.84 863.974,654.589 864.533,639.105 865.093,688.443 865.652,687.897 866.211,672.62 866.77,689.369 867.33,722.304 867.889,739.669 868.448,769.664 869.007,781.657 869.567,714.476 870.126,692.241 870.685,660.155 871.244,647.886 871.804,631.315 872.363,650.079 872.922,649.768 873.481,636.155 874.041,625.854 874.6,614.983 875.159,634.723 875.718,625.473 876.278,629.115 876.837,631.268 877.396,652.46 877.955,654.613 878.515,625.233 879.074,612.864 879.633,617.968 880.192,637.94 880.752,638.764 881.311,608.905 881.87,643.574 882.429,614.313 882.989,650.858 883.548,639.077 884.107,676.112 884.666,694.887 885.226,688.794 885.785,670.992 886.344,658.788 886.903,625.384 887.463,612.015 888.022,599.709 888.581,588.583 889.14,593.258 889.7,601.072 890.259,623.981 890.818,628.046 891.377,664.948 891.937,683.454 892.496,688.568 893.055,689.958 893.614,675.485 894.174,675.87 894.733,676.69 895.292,697.217 895.851,694.827 896.411,693.547 896.97,695.316 897.529,697.965 898.088,714.736 898.648,716.953 899.207,728.163 899.766,724.628 900.325,723.109 900.885,721.433 901.444,688.153 902.003,674.067 902.562,658.927 903.122,675.269 903.681,674.009 904.24,673.457 904.799,655.88 905.359,657.806 905.918,677.37 906.477,681.514 907.036,682.064 907.596,713.433 908.155,727.937 908.714,726.578 909.273,755.378 909.833,748.478 910.392,743.161 910.951,753.03 911.51,731.548 912.07,745.908 912.629,755.424 913.188,766.246 913.747,764.027 914.307,762.253 914.866,756.878 915.425,785.494 915.984,782.612 916.544,777.085 917.103,759.049 917.662,692.538 918.221,690.212 918.781,671.893 919.34,671.706 919.899,669.69 920.458,634.194 921.018,624.666 921.577,633.219 922.136,654.442 922.695,640.075 923.255,661.118 923.814,644.665 924.373,646.138 924.932,616.078 925.492,602.671 926.051,622.034 926.61,629.073 927.169,630.558 927.729,620.933 928.288,605.52 928.847,631.451 929.406,602.875 929.966,622.567 930.525,637.564 931.084,643.874 931.644,665.576 932.203,663.43 932.762,695.414 933.321,710.661 933.881,711.474 934.44,742.175 934.999,754.497 935.558,748.543 936.118,781.198 936.677,776.922 937.236,788.608 937.795,783.082 938.355,740.464 938.914,737.497 939.473,714.836 940.032,710.969 940.592,728.04 941.151,711.48 941.71,725.848 942.269,722.529 942.829,714.854 943.388,711.743 943.947,709.081 944.506,692.311 945.066,659.309 945.625,695.401 946.184,657.842 946.743,708.266 947.303,691.332 947.862,673.005 948.421,639.767 948.98,626.812 949.54,645.856 950.099,680.455 950.658,683.006 951.217,671.149 951.777,656.368 952.336,641.52 952.895,646.193 953.454,662.231 954.014,664.722 954.573,714.648 955.132,678.502 955.691,694.727 956.251,707.131 956.81,690.679 957.369,695.604 957.928,709.579 958.488,709.352 959.047,727.998 959.606,792.229 960.165,788.024 960.725,798.915 961.284,759.438 961.843,722.786 962.402,702.869 962.962,716.292 963.521,713.798 964.08,712.123 964.639,708.755 965.199,678.545 965.758,709.741 966.317,690.938 966.876,672.104 967.436,685.184 967.995,672.351 968.554,671.034 969.113,668.701 969.673,653.266 970.232,651.316 970.791,655.782 971.35,674.15 971.91,690.49 972.469,694.453 973.028,709.403 973.587,756.823 974.147,751.479 974.706,761.35 975.265,775.233 975.824,769.68 976.384,765.391 976.943,776.183 977.502,755.782 978.061,787.731 978.621,795.435 979.18,786.017 979.739,763.701 980.298,762.137 980.858,741.786 981.417,737.806 981.976,718.904 982.535,716.666 983.095,650.548 983.654,607.801 984.213,627.964 984.772,628.923 985.332,632.808 985.891,617.466 986.45,634.743 987.009,639.535 987.569,657.029 988.128,642.248 988.687,661.643 989.246,647 989.806,665.308 990.365,620.157 990.924,588.589 991.483,593.216 992.043,598.899 992.602,619.74 993.161,606.76 993.72,609.831 994.28,583.408 994.839,576.671 995.398,581.122 995.957,588.11 996.517,623.879 997.076,642.744 997.635,644.064 998.194,628.751 998.754,615.009 999.313,631.337 999.872,617.798 1000.43,638.157 1000.99,642.33 1001.55,642.995 1002.11,630.391 1002.67,632.906 1003.23,652.429 1003.79,688.661 1004.35,689.281 1004.91,704.004 1005.46,717.143 1006.02,698.498 1006.58,697.976 1007.14,694.338 1007.7,676.672 1008.26,676.394 1008.82,693.166 1009.38,709.764 1009.94,709.917 1010.5,724.342 1011.06,742.544 1011.62,757.593 1012.18,734.757 1012.73,735.738 1013.29,733.083 1013.85,762.11 1014.41,725.619 1014.97,688.521 1015.53,688.368 1016.09,658.934 1016.65,644.142 1017.21,643.424 1017.77,631.766 1018.33,617.555 1018.89,622.877 1019.45,626.682 1020.01,626.84 1020.56,657.232 1021.12,689.572 1021.68,704.278 1022.24,719.145 1022.8,731.716 1023.36,727.583 1023.92,709.611 1024.48,755.664 1025.04,737.025 1025.6,749.658 1026.16,730.216 1026.72,715.651 1027.28,732.727 1027.83,715.096 1028.39,716.43 1028.95,718.219 1029.51,735.21 1030.07,750.11 1030.63,745.033 1031.19,745.641 1031.75,741.232 1032.31,725.886 1032.87,737.421 1033.43,752.486 1033.99,733.195 1034.55,734.13 1035.1,733.038 1035.66,714.033 1036.22,715.344 1036.78,699.726 1037.34,698.313 1037.9,682.041 1038.46,683.43 1039.02,716.711 1039.58,717.962 1040.14,698.583 1040.7,714.535 1041.26,696.336 1041.82,746.416 1042.38,728.545 1042.93,741.219 1043.49,734.663 1044.05,751.141 1044.61,731.755 1045.17,711.876 1045.73,727.615 1046.29,697.235 1046.85,710.81 1047.41,738.38 1047.97,700.51 1048.53,697.053 1049.09,680.8 1049.65,662.762 1050.2,679.868 1050.76,678.665 1051.32,680.597 1051.88,645.001 1052.44,647.756 1053,651.466 1053.56,638.373 1054.12,640.456 1054.68,608.368 1055.24,645.57 1055.8,617.363 1056.36,668.342 1056.92,667.206 1057.48,668.578 1058.03,587.974 1058.59,572.83 1059.15,560.188 1059.71,563.427 1060.27,585.52 1060.83,542.573 1061.39,549.098 1061.95,573.559 1062.51,561.916 1063.07,551.708 1063.63,541.834 1064.19,528.592 1064.75,537.374 1065.3,546.78 1065.86,524.718 1066.42,517.048 1066.98,527.404 1067.54,552.131 1068.1,576.062 1068.66,598.382 1069.22,602.955 1069.78,625.915 1070.34,629.873 1070.9,635.595 1071.46,670.439 1072.02,704.744 1072.57,718.975 1073.13,722.055 1073.69,718.825 1074.25,706.19 1074.81,722.022 1075.37,721.984 1075.93,738.921 1076.49,749.849 1077.05,745.94 1077.61,728.194 1078.17,712.103 1078.73,696.076 1079.29,698.55 1079.85,664.084 1080.4,679.083 1080.96,693.246 1081.52,677.766 1082.08,676.141 1082.64,697.38 1083.2,715.599 1083.76,681.333 1084.32,700.413 1084.88,680.458 1085.44,680.541 1086,664.438 1086.56,679.438 1087.12,715.404 1087.67,712.675 1088.23,682.321 1088.79,684.522 1089.35,667.059 1089.91,668.629 1090.47,652.9 1091.03,654.477 1091.59,653.733 1092.15,654.318 1092.71,638.322 1093.27,623.958 1093.83,627.633 1094.39,665.069 1094.94,645.687 1095.5,663.994 1096.06,679.401 1096.62,679.603 1097.18,683.914 1097.74,698.729 1098.3,710.833 1098.86,738.946 1099.42,720.635 1099.98,686.45 1100.54,684.038 1101.1,668.164 1101.66,638.852 1102.22,657.027 1102.77,674.886 1103.33,672.632 1103.89,655.313 1104.45,671.923 1105.01,657.37 1105.57,676.578 1106.13,678.879 1106.69,664.005 1107.25,699.741 1107.81,670.072 1108.37,673.3 1108.93,689.979 1109.49,704.8 1110.04,690.941 1110.6,739.571 1111.16,720.699 1111.72,716.062 1112.28,679.862 1112.84,666.417 1113.4,666.178 1113.96,633.143 1114.52,631.929 1115.08,632.373 1115.64,646.252 1116.2,645.659 1116.76,643.239 1117.31,645.24 1117.87,646.402 1118.43,645.451 1118.99,631.804 1119.55,650.919 1120.11,683.264 1120.67,684.549 1121.23,680.06 1121.79,664.792 1122.35,663.841 1122.91,648.88 1123.47,664.648 1124.03,652.432 1124.59,640.162 1125.14,641.106 1125.7,655.808 1126.26,641.058 1126.82,647.716 1127.38,666.247 1127.94,653.162 1128.5,643.486 1129.06,677.945 1129.62,706.571 1130.18,724.313 1130.74,739.319 1131.3,763.274 1131.86,775.226 1132.41,787.379 1132.97,752.548 1133.53,750.109 1134.09,728.049 1134.65,708.663 1135.21,689.738 1135.77,690.583 1136.33,721.286 1136.89,683.969 1137.45,667.682 1138.01,653.715 1138.57,654.583 1139.13,653.128 1139.68,667.85 1140.24,668.945 1140.8,669.783 1141.36,684.884 1141.92,653.015 1142.48,674.323 1143.04,671.088 1143.6,672.779 1144.16,709.03 1144.72,692.839 1145.28,722.968 1145.84,706.081 1146.4,705.655 1146.96,673.002 1147.51,655.856 1148.07,686.929 1148.63,684.707 1149.19,716.802 1149.75,699.824 1150.31,716.316 1150.87,715.537 1151.43,679.153 1151.99,659.873 1152.55,646.718 1153.11,616.676 1153.67,620.61 1154.23,625.506 1154.78,643.799 1155.34,628.876 1155.9,648.369 1156.46,633.372 1157.02,605.016 1157.58,627.071 1158.14,629.233 1158.7,596.277 1159.26,601.014 1159.82,620.856 1160.38,626.282 1160.94,643.447 1161.5,644.142 1162.05,679.692 1162.61,681.663 1163.17,679.749 1163.73,725.89 1164.29,721.905 1164.85,722.491 1165.41,736.231 1165.97,750.679 1166.53,714.737 1167.09,710.764 1167.65,740.827 1168.21,738.097 1168.77,749.81 1169.33,729.669 1169.88,698.225 1170.44,700.341 1171,702.439 1171.56,680.834 1172.12,699.999 1172.68,695.763 1173.24,710.301 1173.8,675.75 1174.36,693.24 1174.92,678.905 1175.48,646.745 1176.04,648.413 1176.6,649.038 1177.15,669.091 1177.71,670.734 1178.27,703.286 1178.83,701.342 1179.39,729.249 1179.95,709.767 1180.51,706.168 1181.07,707.819 1181.63,719.845 1182.19,734.472 1182.75,733.805 1183.31,713.036 1183.87,710.021 1184.43,726.418 1184.98,726.191 1185.54,691.873 1186.1,676.721 1186.66,693.415 1187.22,694.076 1187.78,679.079 1188.34,712.887 1188.9,707.7 1189.46,704.287 1190.02,703.863 1190.58,699.549 1191.14,714.569 1191.7,693.942 1192.25,710.39 1192.81,723.019 1193.37,704.606 1193.93,702.476 1194.49,701.937 1195.05,711.874 1195.61,756.807 1196.17,720.854 1196.73,699.854 1197.29,696.128 1197.85,681.102 1198.41,746.846 1198.97,759.476 1199.52,753.512 1200.08,751.401 1200.64,751.898 1201.2,731.031 1201.76,759.777 1202.32,741.41 1202.88,723.849 1203.44,731.994 1204,729.967 1204.56,745.837 1205.12,695.271 1205.68,693.532 1206.24,692.085 1206.8,657.88 1207.35,661.341 1207.91,693.536 1208.47,709.221 1209.03,740.244 1209.59,737.024 1210.15,735.2 1210.71,703.582 1211.27,686.173 1211.83,719.035 1212.39,749.394 1212.95,730.125 1213.51,727.948 1214.07,710.351 1214.62,688.834 1215.18,719.864 1215.74,717.8 1216.3,714.27 1216.86,728.241 1217.42,771.268 1217.98,811.276 1218.54,803.028 1219.1,794.474 1219.66,806.259 1220.22,781.538 1220.78,776.676 1221.34,740.74 1221.89,704.36 1222.45,703.666 1223.01,716.844 1223.57,716.896 1224.13,718.133 1224.69,699.06 1225.25,730.195 1225.81,729.401 1226.37,695.624 1226.93,682.438 1227.49,732.882 1228.05,763.243 1228.61,741.865 1229.17,707.9 1229.72,691.491 1230.28,707.252 1230.84,688.836 1231.4,687.207 1231.96,657.239 1232.52,609.679 1233.08,612.574 1233.64,633.105 1234.2,649.357 1234.76,618.284 1235.32,623.539 1235.88,624.555 1236.44,627.491 1236.99,615.97 1237.55,636.453 1238.11,657.48 1238.67,640.642 1239.23,648.642 1239.79,650.596 1240.35,621.376 1240.91,590.821 1241.47,643.678 1242.03,679.001 1242.59,677.698 1243.15,681.773 1243.71,665.874 1244.26,701.782 1244.82,719.423 1245.38,751.576 1245.94,764.526 1246.5,741.436 1247.06,754.219 1247.62,719.133 1248.18,751.551 1248.74,744.956 1249.3,741.325 1249.86,772.657 1250.42,799.929 1250.98,779.429 1251.54,757.234 1252.09,772.421 1252.65,796.64 1253.21,793.417 1253.77,773.618 1254.33,752.992 1254.89,731.821 1255.45,681.586 1256.01,683.062 1256.57,696.998 1257.13,711.61 1257.69,706.606 1258.25,657.49 1258.81,632.412 1259.36,605.188 1259.92,575.338 1260.48,565.126 1261.04,555.958 1261.6,579.381 1262.16,585.803 1262.72,592.747 1263.28,615.049 1263.84,603.803 1264.4,558.317 1264.96,566.197 1265.52,604.774 1266.08,609.252 1266.63,615.229 1267.19,648.709 1267.75,632.006 1268.31,632 1268.87,651.668 1269.43,703.199 1269.99,721.087 1270.55,686.929 1271.11,667.606 1271.67,668.032 1272.23,638.294 1272.79,654.323 1273.35,670.13 1273.91,674.254 1274.46,709.45 1275.02,725.776 1275.58,725.112 1276.14,726.057 1276.7,741.612 1277.26,735.362 1277.82,702.694 1278.38,704.732 1278.94,671.843 1279.5,704.734 1280.06,718.639 1280.62,720.363 1281.18,764.874 1281.73,759.013 1282.29,773.184 1282.85,781.371 1283.41,791.982 1283.97,802.888 1284.53,765.788 1285.09,744.102 1285.65,770.919 1286.21,783.661 1286.77,779.299 1287.33,770.091 1287.89,747.675 1288.45,794.681 1289,788.864 1289.56,829.637 1290.12,824.499 1290.68,801.143 1291.24,796.427 1291.8,809.986 1292.36,771.68 1292.92,748.442 1293.48,699.429 1294.04,699.256 1294.6,748.945 1295.16,747.605 1295.72,727.806 1296.28,711.482 1296.83,711.767 1297.39,697.322 1297.95,683.064 1298.51,716.517 1299.07,746.943 1299.63,761.503 1300.19,805.819 1300.75,787.167 1301.31,763.497 1301.87,758.199 1302.43,800.079 1302.99,777.901 1303.55,787.347 1304.1,846.639 1304.66,791.362 1305.22,770.051 1305.78,761.425 1306.34,727.079 1306.9,726.651 1307.46,706.248 1308.02,718.701 1308.58,765.373 1309.14,756.69 1309.7,770.795 1310.26,753.288 1310.82,733.142 1311.38,713.809 1311.93,698.579 1312.49,717.98 1313.05,716.889 1313.61,715.903 1314.17,717.235 1314.73,685.202 1315.29,716.63 1315.85,763.349 1316.41,739.984 1316.97,723.228 1317.53,705.018 1318.09,688.287 1318.65,645.091 1319.2,663.42 1319.76,697.801 1320.32,714.283 1320.88,725.601 1321.44,706.368 1322,724.399 1322.56,724.832 1323.12,705.148 1323.68,703.026 1324.24,749.698 1324.8,710.291 1325.36,694.021 1325.92,676.211 1326.47,664.425 1327.03,671.306 1327.59,671.1 1328.15,659.487 1328.71,680.993 1329.27,694.909 1329.83,675.822 1330.39,640.503 1330.95,626.35 1331.51,627.687 1332.07,632.257 1332.63,638.487 1333.19,642.85 1333.75,646.655 1334.3,650.265 1334.86,636.251 1335.42,607.752 1335.98,595.578 1336.54,618.602 1337.1,672.415 1337.66,689.409 1338.22,692.729 1338.78,693.12 1339.34,710.003 1339.9,692.596 1340.46,677.204 1341.02,681.315 1341.57,662.579 1342.13,645.195 1342.69,629.38 1343.25,651.755 1343.81,653 1344.37,653.309 1344.93,719.142 1345.49,717.58 1346.05,702.615 1346.61,717.73 1347.17,761.276 1347.73,773.275 1348.29,754.565 1348.84,751.545 1349.4,766.157 1349.96,760.048 1350.52,756.005 1351.08,720.734 1351.64,674.083 1352.2,674.984 1352.76,690.97 1353.32,704.479 1353.88,654.671 1354.44,673.185 1355,657.385 1355.56,693.326 1356.12,725.737 1356.67,706.907 1357.23,704.579 1357.79,704.469 1358.35,705.158 1358.91,670.395 1359.47,658.425 1360.03,641.416 1360.59,662.141 1361.15,627.556 1361.71,649.827 1362.27,650.982 1362.83,650.325 1363.39,649.288 1363.94,634.54 1364.5,621.652 1365.06,629.876 1365.62,584.823 1366.18,572.384 1366.74,612.806 1367.3,645.352 1367.86,681.437 1368.42,681.188 1368.98,698.985 1369.54,662.887 1370.1,651.271 1370.66,651.323 1371.21,639 1371.77,658.694 1372.33,677.252 1372.89,681.365 1373.45,696.268 1374.01,727.214 1374.57,711.383 1375.13,708.9 1375.69,694.345 1376.25,693.369 1376.81,712.364 1377.37,680.192 1377.93,667.682 1378.49,702.586 1379.04,698.873 1379.6,714.291 1380.16,726.132 1380.72,740.145 1381.28,722.68 1381.84,721.489 1382.4,686.314 1382.96,685.884 1383.52,684.601 1384.08,668.618 1384.64,670.933 1385.2,670.194 1385.76,670.667 1386.31,669.962 1386.87,655.736 1387.43,607.046 1387.99,595.204 1388.55,617.967 1389.11,622.909 1389.67,642.1 1390.23,643.015 1390.79,680.569 1391.35,698.502 1391.91,681.533 1392.47,698.67 1393.03,682.913 1393.58,702.757 1394.14,671.73 1394.7,671.066 1395.26,654.406 1395.82,639.655 1396.38,659.177 1396.94,675.46 1397.5,674.414 1398.06,661.94 1398.62,631.028 1399.18,584.96 1399.74,588.965 1400.3,593.781 1400.86,581.567 1401.41,568.417 1401.97,573.156 1402.53,611.413 1403.09,610.532 1403.65,629.574 1404.21,649.081 1404.77,585.912 1405.33,587.919 1405.89,625.299 1406.45,646.819 1407.01,631.404 1407.57,665.948 1408.13,664.147 1408.68,713.753 1409.24,680.493 1409.8,680.625 1410.36,666.687 1410.92,666.112 1411.48,650.891 1412.04,656.37 1412.6,673.663 1413.16,672.72 1413.72,671.385 1414.28,654.85 1414.84,661.579 1415.4,680.061 1415.95,665.554 1416.51,714.824 1417.07,711.346 1417.63,695.108 1418.19,693.073 1418.75,692.271 1419.31,678.415 1419.87,630.053 1420.43,651.108 1420.99,670.827 1421.55,676.097 1422.11,676.265 1422.67,692.333 1423.23,691.561 1423.78,736.668 1424.34,736.228 1424.9,729.231 1425.46,743.468 1426.02,707.332 1426.58,753.857 1427.14,782.279 1427.7,775.332 1428.26,725.652 1428.82,741.085 1429.38,722.709 1429.94,738.094 1430.5,734.956 1431.05,747.405 1431.61,744.681 1432.17,790.082 1432.73,799.083 1433.29,842.487 1433.85,832.659 1434.41,824.951 1434.97,817.22 1435.53,795.815 1436.09,789.808 1436.65,770.807 1437.21,765.578 1437.77,796.801 1438.33,789.846 1438.88,769.771 1439.44,767.002 1440,776.791 1440.56,770.98 1441.12,751.267 1441.68,731.636 1442.24,728.953 1442.8,708.024 1443.36,674.484 1443.92,626.307 1444.48,597.042 1445.04,600.385 1445.6,604.863 1446.15,612.446 1446.71,603.731 1447.27,590.937 1447.83,595.12 1448.39,593.658 1448.95,629.91 1449.51,649.938 1450.07,665.147 1450.63,697.697 1451.19,696.766 1451.75,699.956 1452.31,663.661 1452.87,664.847 1453.42,633.447 1453.98,652.314 1454.54,653.174 1455.1,653.758 1455.66,672.15 1456.22,656.117 1456.78,674.833 1457.34,665.04 1457.9,649.964 1458.46,654.974 1459.02,641.047 1459.58,628.569 1460.14,600.046 1460.7,606.587 1461.25,646.183 1461.81,633.804 1462.37,670.946 1462.93,686.239 1463.49,670.912 1464.05,660.581 1464.61,647.584 1465.17,615.211 1465.73,601.477 1466.29,573.623 1466.85,579.697 1467.41,521.669 1467.97,496.145 1468.52,521.396 1469.08,513.806 1469.64,507.001 1470.2,519.02 1470.76,528.727 1471.32,574.035 1471.88,596.814 1472.44,603.526 1473,609.217 1473.56,612.219 1474.12,601.608 1474.68,592.191 1475.24,598.893 1475.79,604.576 1476.35,609.597 1476.91,630.568 1477.47,634.581 1478.03,653.499 1478.59,651.755 1479.15,620.552 1479.71,619.864 1480.27,621.799 1480.83,623.256 1481.39,643.593 1481.95,659.791 1482.51,711.147 1483.07,695.824 1483.62,695.502 1484.18,696.1 1484.74,648.319 1485.3,664.002 1485.86,669.442 1486.42,735.231 1486.98,732.089 1487.54,726.855 1488.1,721.733 1488.66,720.566 1489.22,733.392 1489.78,684.368 1490.34,700.951 1490.89,718.27 1491.45,712.887 1492.01,704.085 1492.57,670.159 1493.13,668.55 1493.69,668.484 1494.25,706.619 1494.81,720.621 1495.37,719.183 1495.93,718.173 1496.49,683.924 1497.05,685.515 1497.61,700.773 1498.16,703.218 1498.72,769.958 1499.28,798.239 1499.84,793.373 1500.4,803.102 1500.96,829.457 1501.52,823.243 1502.08,833.725 1502.64,844.875 1503.2,839.247 1503.76,786.744 1504.32,746.283 1504.88,755.898 1505.44,768.642 1505.99,763.767 1506.55,761.124 1507.11,775.341 1507.67,771.951 1508.23,767.228 1508.79,743.683 1509.35,756.643 1509.91,750.829 1510.47,747.273 1511.03,745.479 1511.59,728.099 1512.15,710.033 1512.71,708.835 1513.26,710.3 1513.82,710.199 1514.38,709.135 1514.94,725.138 1515.5,725.215 1516.06,752.777 1516.62,733.065 1517.18,731.044 1517.74,729.502 1518.3,727.773 1518.86,739.56 1519.42,739.618 1519.98,771.828 1520.53,749.953 1521.09,746.823 1521.65,728.339 1522.21,743.654 1522.77,706.716 1523.33,703.164 1523.89,717.017 1524.45,731.236 1525.01,694 1525.57,692.582 1526.13,689.988 1526.69,701.256 1527.25,682.443 1527.81,680.425 1528.36,678.486 1528.92,662.946 1529.48,662.955 1530.04,661.745 1530.6,676.395 1531.16,660.735 1531.72,645.488 1532.28,660.953 1532.84,641.798 1533.4,647.969 1533.96,649.075 1534.52,667.18 1535.08,665.518 1535.63,666.296 1536.19,684.491 1536.75,683.914 1537.31,730.17 1537.87,740.399 1538.43,770.749 1538.99,779.287 1539.55,790.224 1540.11,770.091 1540.67,733.937 1541.23,715.597 1541.79,699.822 1542.35,683.842 1542.9,686.766 1543.46,687.565 1544.02,706.169 1544.58,670.83 1545.14,655.879 1545.7,641.499 1546.26,642.646 1546.82,626.132 1547.38,648.95 1547.94,664.349 1548.5,670.623 1549.06,637.806 1549.62,667.989 1550.18,653.698 1550.73,653.728 1551.29,622.98 1551.85,641.604 1552.41,625.078 1552.97,611.076 1553.53,612.679 1554.09,614.591 1554.65,633.493 1555.21,650.738 1555.77,620.316 1556.33,657.129 1556.89,642.197 1557.45,645.719 1558,664.714 1558.56,697.386 1559.12,682.554 1559.68,682.216 1560.24,648.626 1560.8,619.595 1561.36,621.433 1561.92,654.869 1562.48,660.184 1563.04,660.111 1563.6,629.853 1564.16,632.411 1564.72,618.656 1565.28,635.225 1565.83,671.14 1566.39,704.392 1566.95,717.971 1567.51,717.237 1568.07,734.032 1568.63,779.803 1569.19,810.617 1569.75,791.674 1570.31,774.06 1570.87,767.988 1571.43,779.92 1571.99,791.925 1572.55,782.87 1573.1,779.152 1573.66,771.837 1574.22,738.629 1574.78,734.01 1575.34,745.832 1575.9,742.346 1576.46,720.712 1577.02,682.409 1577.58,697.197 1578.14,727.951 1578.7,726.231 1579.26,740.156 1579.82,770.438 1580.37,762.603 1580.93,759.224 1581.49,771.715 1582.05,765.156 1582.61,729.272 1583.17,759.301 1583.73,741.238 1584.29,738.253 1584.85,735.745 1585.41,748.357 1585.97,708.994 1586.53,692.865 1587.09,692.656 1587.65,672.083 1588.2,707.644 1588.76,704.84 1589.32,687.262 1589.88,684.183 1590.44,650.871 1591,633.75 1591.56,651.011 1592.12,652.048 1592.68,606.661 1593.24,625.809 1593.8,647.459 1594.36,629.976 1594.92,634.93 1595.47,635.218 1596.03,640.91 1596.59,612.963 1597.15,584.118 1597.71,589.761 1598.27,577.592 1598.83,534.96 1599.39,545.24 1599.95,537.683 1600.51,599.459 1601.07,589.148 1601.63,611.611 1602.19,616.102 1602.74,633.817 1603.3,633.14 1603.86,634.505 1604.42,638.298 1604.98,660.042 1605.54,662.476 1606.1,682.633 1606.66,712.594 1607.22,711.977 1607.78,696.724 1608.34,663.423 1608.9,648.018 1609.46,649.977 1610.02,621.301 1610.57,623.282 1611.13,607.487 1611.69,646.335 1612.25,646.334 1612.81,696.586 1613.37,661.918 1613.93,681.367 1614.49,682.809 1615.05,669.762 1615.61,652.564 1616.17,637.738 1616.73,592.295 1617.29,599.262 1617.84,651.772 1618.4,638.431 1618.96,642.634 1619.52,641.858 1620.08,608.416 1620.64,614.929 1621.2,650.765 1621.76,665.613 1622.32,666.372 1622.88,650.693 1623.44,667.527 1624,656.145 1624.56,704.683 1625.11,733.434 1625.67,679.178 1626.23,666.293 1626.79,667.173 1627.35,650.291 1627.91,666.624 1628.47,685.425 1629.03,697.014 1629.59,695.907 1630.15,696.583 1630.71,664.52 1631.27,650.066 1631.83,604.187 1632.39,626.199 1632.94,628.415 1633.5,616.752 1634.06,636.32 1634.62,640.352 1635.18,654.323 1635.74,673.548 1636.3,687.764 1636.86,655.511 1637.42,656.576 1637.98,644.595 1638.54,634.745 1639.1,637.257 1639.66,658.059 1640.21,675.639 1640.77,661.982 1641.33,662.249 1641.89,647.099 1642.45,666.019 1643.01,683.694 1643.57,698.702 1644.13,698.92 1644.69,695.557 1645.25,692.917 1645.81,695.535 1646.37,726.927 1646.93,741.501 1647.48,723.59 1648.04,722.438 1648.6,702.389 1649.16,687.081 1649.72,673.149 1650.28,704.869 1650.84,703.376 1651.4,699.528 1651.96,713.579 1652.52,693.082 1653.08,659.403 1653.64,693.013 1654.2,706.62 1654.76,688.903 1655.31,690.28 1655.87,701.934 1656.43,669.134 1656.99,669.416 1657.55,687.886 1658.11,670.678 1658.67,705.292 1659.23,705.582 1659.79,720.609 1660.35,717.074 1660.91,715.372 1661.47,695.36 1662.03,710.349 1662.58,693.802 1663.14,710.428 1663.7,693.332 1664.26,693.783 1664.82,677.292 1665.38,660.05 1665.94,675.754 1666.5,705.401 1667.06,674.164 1667.62,706.788 1668.18,687.862 1668.74,669.887 1669.3,701.576 1669.85,702.888 1670.41,735.535 1670.97,684.28 1671.53,668.367 1672.09,641.652 1672.65,628.054 1673.21,646.075 1673.77,632.495 1674.33,636.122 1674.89,621.954 1675.45,608.726 1676.01,628.787 1676.57,647.716 1677.13,649.27 1677.68,667.524 1678.24,668.331 1678.8,706.546 1679.36,735.073 1679.92,714.889 1680.48,713.776 1681.04,710.969 1681.6,675.439 1682.16,657.539 1682.72,660.673 1683.28,646.269 1683.84,631.903 1684.4,646.02 1684.95,653.468 1685.51,674.028 1686.07,626.388 1686.63,651.131 1687.19,636.316 1687.75,655.599 1688.31,642.839 1688.87,645.12 1689.43,676.929 1689.99,677.218 1690.55,679.499 1691.11,662.893 1691.67,660.257 1692.23,659.689 1692.78,664.958 1693.34,664.989 1693.9,700.638 1694.46,683.486 1695.02,681.535 1695.58,694.464 1696.14,705.087 1696.7,703.245 1697.26,718.802 1697.82,718.81 1698.38,733.116 1698.94,731.106 1699.5,778.078 1700.05,724.898 1700.61,659.358 1701.17,645.267 1701.73,627.913 1702.29,630.399 1702.85,650.653 1703.41,701.298 1703.97,716.266 1704.53,727.854 1705.09,723.611 1705.65,721.237 1706.21,733.742 1706.77,694.366 1707.32,679.037 1707.88,697.103 1708.44,709.426 1709,723.772 1709.56,690.285 1710.12,660.213 1710.68,647.208 1711.24,697.484 1711.8,679.837 1712.36,665.608 1712.92,636.097 1713.48,640.155 1714.04,612.007 1714.6,614.12 1715.15,635.606 1715.71,635.066 1716.27,605.222 1716.83,610.095 1717.39,614.004 1717.95,631.281 1718.51,649.649 1719.07,638.092 1719.63,658.244 1720.19,691.151 1720.75,708.054 1721.31,722.501 1721.87,692.787 1722.42,707.172 1722.98,707.427 1723.54,719.281 1724.1,731.951 1724.66,743.444 1725.22,759.262 1725.78,755.372 1726.34,797.084 1726.9,770.176 1727.46,782.641 1728.02,811.035 1728.58,803.8 1729.14,799.77 1729.69,762.598 1730.25,757.576 1730.81,706.027 1731.37,733.404 1731.93,712.396 1732.49,692.258 1733.05,689.17 1733.61,686.695 1734.17,687.232 1734.73,682.593 1735.29,699.511 1735.85,683.087 1736.41,698.105 1736.97,712.307 1737.52,691.301 1738.08,710.301 1738.64,693.547 1739.2,735.968 1739.76,746.769 1740.32,759.853 1740.88,723.891 1741.44,708.913 1742,723.435 1742.56,740.052 1743.12,722.428 1743.68,735.983 1744.24,732.752 1744.79,715.595 1745.35,713.657 1745.91,696.001 1746.47,712.502 1747.03,677.263 1747.59,664.207 1748.15,651.994 1748.71,656.091 1749.27,671.432 1749.83,674.121 1750.39,709.102 1750.95,723.767 1751.51,735.474 1752.06,766.325 1752.62,775.437 1753.18,790.749 1753.74,781.817 1754.3,807.242 1754.86,784.627 1755.42,794.914 1755.98,774.031 1756.54,818.312 1757.1,763.258 1757.66,741.636 1758.22,752.018 1758.78,731.285 1759.34,711.731 1759.89,728.703 1760.45,725.797 1761.01,672.697 1761.57,657.288 1762.13,656.597 1762.69,671.281 1763.25,655.994 1763.81,640.211 1764.37,655.892 1764.93,659.59 1765.49,658.454 1766.05,644.196 1766.61,627.85 1767.16,679.376 1767.72,663.536 1768.28,679.286 1768.84,698.462 1769.4,680.021 1769.96,675.827 1770.52,690.241 1771.08,674.84 1771.64,644.699 1772.2,645.46 1772.76,648.487 1773.32,618.123 1773.88,622.677 1774.43,611.637 1774.99,631.729 1775.55,632.747 1776.11,631.569 1776.67,630.049 1777.23,616.155 1777.79,603.393 1778.35,605.794 1778.91,591.831 1779.47,599.324 1780.03,602.85 1780.59,640.278 1781.15,655.347 1781.71,638.461 1782.26,640.634 1782.82,638.377 1783.38,623.838 1783.94,613.232 1784.5,601.694 1785.06,602.907 1785.62,589.917 1786.18,578.421 1786.74,600.712 1787.3,603.187 1787.86,605.147 1788.42,609.224 1788.98,612.505 1789.53,616.965 1790.09,637.837 1790.65,638.798 1791.21,630.737 1791.77,650.467 1792.33,654.718 1792.89,656.071 1793.45,672.603 1794.01,675.892 1794.57,675.418 1795.13,695.843 1795.69,679.821 1796.25,680.685 1796.8,677.502 1797.36,681.27 1797.92,635.205 1798.48,685.501 1799.04,704.327 1799.6,684.817 1800.16,685.838 1800.72,670.887 1801.28,654.725 1801.84,656.881 1802.4,644.225 1802.96,646.174 1803.52,668.443 1804.08,665.139 1804.63,683.878 1805.19,684.488 1805.75,684.314 1806.31,700.757 1806.87,699.076 1807.43,664.601 1807.99,697.05 1808.55,697.772 1809.11,698.409 1809.67,717.708 1810.23,764.185 1810.79,743.768 1811.35,740.992 1811.9,720.376 1812.46,738.604 1813.02,704.912 1813.58,719.276 1814.14,732.738 1814.7,733.83 1815.26,710.629 1815.82,691.917 1816.38,686.427 1816.94,668.277 1817.5,665.05 1818.06,669.643 1818.62,652.66 1819.18,685.552 1819.73,667.598 1820.29,686.154 1820.85,655.774 1821.41,626.908 1821.97,630.459 1822.53,650.991 1823.09,682.95 1823.65,699.357 1824.21,695.589 1824.77,681.611 1825.33,678.087 1825.89,692.444 1826.45,679.513 1827,681.102 1827.56,684.288 1828.12,700.368 1828.68,683.132 1829.24,668.229 1829.8,685.13 1830.36,686.442 1830.92,701.734 1831.48,732.074 1832.04,728.798 1832.6,746.28 1833.16,759.408 1833.72,785.871 1834.27,796.291 1834.83,761.191 1835.39,725.325 1835.95,737.082 1836.51,747.661 1837.07,742.425 1837.63,724.682 1838.19,737.27 \"/>\n<path clip-path=\"url(#clip913)\" d=\"M720.247 689.629 L720.806 689.629 L721.365 689.629 L721.924 689.629 L722.484 689.629 L723.043 689.629 L723.602 689.629 L724.161 689.629 L724.721 689.629 L725.28 689.629 L725.839 689.629 L726.398 689.629 L726.958 689.629 L727.517 689.629 L728.076 689.629 L728.635 689.629 L729.195 689.629 L729.754 689.629 L730.313 689.629 L730.872 689.629 L731.432 689.629 L731.991 689.629 L732.55 689.629 L733.109 689.629 L733.669 689.629 L734.228 689.629 L734.787 689.629 L735.346 689.629 L735.906 689.629 L736.465 689.629 L737.024 689.629 L737.583 689.629 L738.143 689.629 L738.702 689.629 L739.261 689.629 L739.82 689.629 L740.38 689.629 L740.939 689.629 L741.498 689.629 L742.057 689.629 L742.617 689.629 L743.176 689.629 L743.735 689.629 L744.294 689.629 L744.854 689.629 L745.413 689.629 L745.972 689.629 L746.531 689.629 L747.091 689.629 L747.65 689.629 L748.209 689.629 L748.768 689.629 L749.328 689.629 L749.887 689.629 L750.446 689.629 L751.005 689.629 L751.565 689.629 L752.124 689.629 L752.683 689.629 L753.242 689.629 L753.802 689.629 L754.361 689.629 L754.92 689.629 L755.479 689.629 L756.039 689.629 L756.598 689.629 L757.157 689.629 L757.716 689.629 L758.276 689.629 L758.835 689.629 L759.394 689.629 L759.953 689.629 L760.513 689.629 L761.072 689.629 L761.631 689.629 L762.19 689.629 L762.75 689.629 L763.309 689.629 L763.868 689.629 L764.427 689.629 L764.987 689.629 L765.546 689.629 L766.105 689.629 L766.664 689.629 L767.224 689.629 L767.783 689.629 L768.342 689.629 L768.901 689.629 L769.461 689.629 L770.02 689.629 L770.579 689.629 L771.138 689.629 L771.698 689.629 L772.257 689.629 L772.816 689.629 L773.375 689.629 L773.935 689.629 L774.494 689.629 L775.053 689.629 L775.612 689.629 L776.172 689.629 L776.731 689.629 L777.29 689.629 L777.849 689.629 L778.409 689.629 L778.968 689.629 L779.527 689.629 L780.086 689.629 L780.646 689.629 L781.205 689.629 L781.764 689.629 L782.323 689.629 L782.883 689.629 L783.442 689.629 L784.001 689.629 L784.56 689.629 L785.12 689.629 L785.679 689.629 L786.238 689.629 L786.797 689.629 L787.357 689.629 L787.916 689.629 L788.475 689.629 L789.034 689.629 L789.594 689.629 L790.153 689.629 L790.712 689.629 L791.271 689.629 L791.831 689.629 L792.39 689.629 L792.949 689.629 L793.508 689.629 L794.068 689.629 L794.627 689.629 L795.186 689.629 L795.745 689.629 L796.305 689.629 L796.864 689.629 L797.423 689.629 L797.982 689.629 L798.542 689.629 L799.101 689.629 L799.66 689.629 L800.219 689.629 L800.779 689.629 L801.338 689.629 L801.897 689.629 L802.456 689.629 L803.016 689.629 L803.575 689.629 L804.134 689.629 L804.693 689.629 L805.253 689.629 L805.812 689.629 L806.371 689.629 L806.931 689.629 L807.49 689.629 L808.049 689.629 L808.608 689.629 L809.168 689.629 L809.727 689.629 L810.286 689.629 L810.845 689.629 L811.405 689.629 L811.964 689.629 L812.523 689.629 L813.082 689.629 L813.642 689.629 L814.201 689.629 L814.76 689.629 L815.319 689.629 L815.879 689.629 L816.438 689.629 L816.997 689.629 L817.556 689.629 L818.116 689.629 L818.675 689.629 L819.234 689.629 L819.793 689.629 L820.353 689.629 L820.912 689.629 L821.471 689.629 L822.03 689.629 L822.59 689.629 L823.149 689.629 L823.708 689.629 L824.267 689.629 L824.827 689.629 L825.386 689.629 L825.945 689.629 L826.504 689.629 L827.064 689.629 L827.623 689.629 L828.182 689.629 L828.741 689.629 L829.301 689.629 L829.86 689.629 L830.419 689.629 L830.978 689.629 L831.538 689.629 L832.097 689.629 L832.656 689.629 L833.215 689.629 L833.775 689.629 L834.334 689.629 L834.893 689.629 L835.452 689.629 L836.012 689.629 L836.571 689.629 L837.13 689.629 L837.689 689.629 L838.249 689.629 L838.808 689.629 L839.367 689.629 L839.926 689.629 L840.486 689.629 L841.045 689.629 L841.604 689.629 L842.163 689.629 L842.723 689.629 L843.282 689.629 L843.841 689.629 L844.4 689.629 L844.96 689.629 L845.519 689.629 L846.078 689.629 L846.637 689.629 L847.197 689.629 L847.756 689.629 L848.315 689.629 L848.874 689.629 L849.434 689.629 L849.993 689.629 L850.552 689.629 L851.111 689.629 L851.671 689.629 L852.23 689.629 L852.789 689.629 L853.348 689.629 L853.908 689.629 L854.467 689.629 L855.026 689.629 L855.585 689.629 L856.145 689.629 L856.704 689.629 L857.263 689.629 L857.822 689.629 L858.382 689.629 L858.941 689.629 L859.5 689.629 L860.059 689.629 L860.619 689.629 L861.178 689.629 L861.737 689.629 L862.296 689.629 L862.856 689.629 L863.415 689.629 L863.974 689.629 L864.533 689.629 L865.093 689.629 L865.652 689.629 L866.211 689.629 L866.77 689.629 L867.33 689.629 L867.889 689.629 L868.448 689.629 L869.007 689.629 L869.567 689.629 L870.126 689.629 L870.685 689.629 L871.244 689.629 L871.804 689.629 L872.363 689.629 L872.922 689.629 L873.481 689.629 L874.041 689.629 L874.6 689.629 L875.159 689.629 L875.718 689.629 L876.278 689.629 L876.837 689.629 L877.396 689.629 L877.955 689.629 L878.515 689.629 L879.074 689.629 L879.633 689.629 L880.192 689.629 L880.752 689.629 L881.311 689.629 L881.87 689.629 L882.429 689.629 L882.989 689.629 L883.548 689.629 L884.107 689.629 L884.666 689.629 L885.226 689.629 L885.785 689.629 L886.344 689.629 L886.903 689.629 L887.463 689.629 L888.022 689.629 L888.581 689.629 L889.14 689.629 L889.7 689.629 L890.259 689.629 L890.818 689.629 L891.377 689.629 L891.937 689.629 L892.496 689.629 L893.055 689.629 L893.614 689.629 L894.174 689.629 L894.733 689.629 L895.292 689.629 L895.851 689.629 L896.411 689.629 L896.97 689.629 L897.529 689.629 L898.088 689.629 L898.648 689.629 L899.207 689.629 L899.766 689.629 L900.325 689.629 L900.885 689.629 L901.444 689.629 L902.003 689.629 L902.562 689.629 L903.122 689.629 L903.681 689.629 L904.24 689.629 L904.799 689.629 L905.359 689.629 L905.918 689.629 L906.477 689.629 L907.036 689.629 L907.596 689.629 L908.155 689.629 L908.714 689.629 L909.273 689.629 L909.833 689.629 L910.392 689.629 L910.951 689.629 L911.51 689.629 L912.07 689.629 L912.629 689.629 L913.188 689.629 L913.747 689.629 L914.307 689.629 L914.866 689.629 L915.425 689.629 L915.984 689.629 L916.544 689.629 L917.103 689.629 L917.662 689.629 L918.221 689.629 L918.781 689.629 L919.34 689.629 L919.899 689.629 L920.458 689.629 L921.018 689.629 L921.577 689.629 L922.136 689.629 L922.695 689.629 L923.255 689.629 L923.814 689.629 L924.373 689.629 L924.932 689.629 L925.492 689.629 L926.051 689.629 L926.61 689.629 L927.169 689.629 L927.729 689.629 L928.288 689.629 L928.847 689.629 L929.406 689.629 L929.966 689.629 L930.525 689.629 L931.084 689.629 L931.644 689.629 L932.203 689.629 L932.762 689.629 L933.321 689.629 L933.881 689.629 L934.44 689.629 L934.999 689.629 L935.558 689.629 L936.118 689.629 L936.677 689.629 L937.236 689.629 L937.795 689.629 L938.355 689.629 L938.914 689.629 L939.473 689.629 L940.032 689.629 L940.592 689.629 L941.151 689.629 L941.71 689.629 L942.269 689.629 L942.829 689.629 L943.388 689.629 L943.947 689.629 L944.506 689.629 L945.066 689.629 L945.625 689.629 L946.184 689.629 L946.743 689.629 L947.303 689.629 L947.862 689.629 L948.421 689.629 L948.98 689.629 L949.54 689.629 L950.099 689.629 L950.658 689.629 L951.217 689.629 L951.777 689.629 L952.336 689.629 L952.895 689.629 L953.454 689.629 L954.014 689.629 L954.573 689.629 L955.132 689.629 L955.691 689.629 L956.251 689.629 L956.81 689.629 L957.369 689.629 L957.928 689.629 L958.488 689.629 L959.047 689.629 L959.606 689.629 L960.165 689.629 L960.725 689.629 L961.284 689.629 L961.843 689.629 L962.402 689.629 L962.962 689.629 L963.521 689.629 L964.08 689.629 L964.639 689.629 L965.199 689.629 L965.758 689.629 L966.317 689.629 L966.876 689.629 L967.436 689.629 L967.995 689.629 L968.554 689.629 L969.113 689.629 L969.673 689.629 L970.232 689.629 L970.791 689.629 L971.35 689.629 L971.91 689.629 L972.469 689.629 L973.028 689.629 L973.587 689.629 L974.147 689.629 L974.706 689.629 L975.265 689.629 L975.824 689.629 L976.384 689.629 L976.943 689.629 L977.502 689.629 L978.061 689.629 L978.621 689.629 L979.18 689.629 L979.739 689.629 L980.298 689.629 L980.858 689.629 L981.417 689.629 L981.976 689.629 L982.535 689.629 L983.095 689.629 L983.654 689.629 L984.213 689.629 L984.772 689.629 L985.332 689.629 L985.891 689.629 L986.45 689.629 L987.009 689.629 L987.569 689.629 L988.128 689.629 L988.687 689.629 L989.246 689.629 L989.806 689.629 L990.365 689.629 L990.924 689.629 L991.483 689.629 L992.043 689.629 L992.602 689.629 L993.161 689.629 L993.72 689.629 L994.28 689.629 L994.839 689.629 L995.398 689.629 L995.957 689.629 L996.517 689.629 L997.076 689.629 L997.635 689.629 L998.194 689.629 L998.754 689.629 L999.313 689.629 L999.872 689.629 L1000.43 689.629 L1000.99 689.629 L1001.55 689.629 L1002.11 689.629 L1002.67 689.629 L1003.23 689.629 L1003.79 689.629 L1004.35 689.629 L1004.91 689.629 L1005.46 689.629 L1006.02 689.629 L1006.58 689.629 L1007.14 689.629 L1007.7 689.629 L1008.26 689.629 L1008.82 689.629 L1009.38 689.629 L1009.94 689.629 L1010.5 689.629 L1011.06 689.629 L1011.62 689.629 L1012.18 689.629 L1012.73 689.629 L1013.29 689.629 L1013.85 689.629 L1014.41 689.629 L1014.97 689.629 L1015.53 689.629 L1016.09 689.629 L1016.65 689.629 L1017.21 689.629 L1017.77 689.629 L1018.33 689.629 L1018.89 689.629 L1019.45 689.629 L1020.01 689.629 L1020.56 689.629 L1021.12 689.629 L1021.68 689.629 L1022.24 689.629 L1022.8 689.629 L1023.36 689.629 L1023.92 689.629 L1024.48 689.629 L1025.04 689.629 L1025.6 689.629 L1026.16 689.629 L1026.72 689.629 L1027.28 689.629 L1027.83 689.629 L1028.39 689.629 L1028.95 689.629 L1029.51 689.629 L1030.07 689.629 L1030.63 689.629 L1031.19 689.629 L1031.75 689.629 L1032.31 689.629 L1032.87 689.629 L1033.43 689.629 L1033.99 689.629 L1034.55 689.629 L1035.1 689.629 L1035.66 689.629 L1036.22 689.629 L1036.78 689.629 L1037.34 689.629 L1037.9 689.629 L1038.46 689.629 L1039.02 689.629 L1039.58 689.629 L1040.14 689.629 L1040.7 689.629 L1041.26 689.629 L1041.82 689.629 L1042.38 689.629 L1042.93 689.629 L1043.49 689.629 L1044.05 689.629 L1044.61 689.629 L1045.17 689.629 L1045.73 689.629 L1046.29 689.629 L1046.85 689.629 L1047.41 689.629 L1047.97 689.629 L1048.53 689.629 L1049.09 689.629 L1049.65 689.629 L1050.2 689.629 L1050.76 689.629 L1051.32 689.629 L1051.88 689.629 L1052.44 689.629 L1053 689.629 L1053.56 689.629 L1054.12 689.629 L1054.68 689.629 L1055.24 689.629 L1055.8 689.629 L1056.36 689.629 L1056.92 689.629 L1057.48 689.629 L1058.03 689.629 L1058.59 689.629 L1059.15 689.629 L1059.71 689.629 L1060.27 689.629 L1060.83 689.629 L1061.39 689.629 L1061.95 689.629 L1062.51 689.629 L1063.07 689.629 L1063.63 689.629 L1064.19 689.629 L1064.75 689.629 L1065.3 689.629 L1065.86 689.629 L1066.42 689.629 L1066.98 689.629 L1067.54 689.629 L1068.1 689.629 L1068.66 689.629 L1069.22 689.629 L1069.78 689.629 L1070.34 689.629 L1070.9 689.629 L1071.46 689.629 L1072.02 689.629 L1072.57 689.629 L1073.13 689.629 L1073.69 689.629 L1074.25 689.629 L1074.81 689.629 L1075.37 689.629 L1075.93 689.629 L1076.49 689.629 L1077.05 689.629 L1077.61 689.629 L1078.17 689.629 L1078.73 689.629 L1079.29 689.629 L1079.85 689.629 L1080.4 689.629 L1080.96 689.629 L1081.52 689.629 L1082.08 689.629 L1082.64 689.629 L1083.2 689.629 L1083.76 689.629 L1084.32 689.629 L1084.88 689.629 L1085.44 689.629 L1086 689.629 L1086.56 689.629 L1087.12 689.629 L1087.67 689.629 L1088.23 689.629 L1088.79 689.629 L1089.35 689.629 L1089.91 689.629 L1090.47 689.629 L1091.03 689.629 L1091.59 689.629 L1092.15 689.629 L1092.71 689.629 L1093.27 689.629 L1093.83 689.629 L1094.39 689.629 L1094.94 689.629 L1095.5 689.629 L1096.06 689.629 L1096.62 689.629 L1097.18 689.629 L1097.74 689.629 L1098.3 689.629 L1098.86 689.629 L1099.42 689.629 L1099.98 689.629 L1100.54 689.629 L1101.1 689.629 L1101.66 689.629 L1102.22 689.629 L1102.77 689.629 L1103.33 689.629 L1103.89 689.629 L1104.45 689.629 L1105.01 689.629 L1105.57 689.629 L1106.13 689.629 L1106.69 689.629 L1107.25 689.629 L1107.81 689.629 L1108.37 689.629 L1108.93 689.629 L1109.49 689.629 L1110.04 689.629 L1110.6 689.629 L1111.16 689.629 L1111.72 689.629 L1112.28 689.629 L1112.84 689.629 L1113.4 689.629 L1113.96 689.629 L1114.52 689.629 L1115.08 689.629 L1115.64 689.629 L1116.2 689.629 L1116.76 689.629 L1117.31 689.629 L1117.87 689.629 L1118.43 689.629 L1118.99 689.629 L1119.55 689.629 L1120.11 689.629 L1120.67 689.629 L1121.23 689.629 L1121.79 689.629 L1122.35 689.629 L1122.91 689.629 L1123.47 689.629 L1124.03 689.629 L1124.59 689.629 L1125.14 689.629 L1125.7 689.629 L1126.26 689.629 L1126.82 689.629 L1127.38 689.629 L1127.94 689.629 L1128.5 689.629 L1129.06 689.629 L1129.62 689.629 L1130.18 689.629 L1130.74 689.629 L1131.3 689.629 L1131.86 689.629 L1132.41 689.629 L1132.97 689.629 L1133.53 689.629 L1134.09 689.629 L1134.65 689.629 L1135.21 689.629 L1135.77 689.629 L1136.33 689.629 L1136.89 689.629 L1137.45 689.629 L1138.01 689.629 L1138.57 689.629 L1139.13 689.629 L1139.68 689.629 L1140.24 689.629 L1140.8 689.629 L1141.36 689.629 L1141.92 689.629 L1142.48 689.629 L1143.04 689.629 L1143.6 689.629 L1144.16 689.629 L1144.72 689.629 L1145.28 689.629 L1145.84 689.629 L1146.4 689.629 L1146.96 689.629 L1147.51 689.629 L1148.07 689.629 L1148.63 689.629 L1149.19 689.629 L1149.75 689.629 L1150.31 689.629 L1150.87 689.629 L1151.43 689.629 L1151.99 689.629 L1152.55 689.629 L1153.11 689.629 L1153.67 689.629 L1154.23 689.629 L1154.78 689.629 L1155.34 689.629 L1155.9 689.629 L1156.46 689.629 L1157.02 689.629 L1157.58 689.629 L1158.14 689.629 L1158.7 689.629 L1159.26 689.629 L1159.82 689.629 L1160.38 689.629 L1160.94 689.629 L1161.5 689.629 L1162.05 689.629 L1162.61 689.629 L1163.17 689.629 L1163.73 689.629 L1164.29 689.629 L1164.85 689.629 L1165.41 689.629 L1165.97 689.629 L1166.53 689.629 L1167.09 689.629 L1167.65 689.629 L1168.21 689.629 L1168.77 689.629 L1169.33 689.629 L1169.88 689.629 L1170.44 689.629 L1171 689.629 L1171.56 689.629 L1172.12 689.629 L1172.68 689.629 L1173.24 689.629 L1173.8 689.629 L1174.36 689.629 L1174.92 689.629 L1175.48 689.629 L1176.04 689.629 L1176.6 689.629 L1177.15 689.629 L1177.71 689.629 L1178.27 689.629 L1178.83 689.629 L1179.39 689.629 L1179.95 689.629 L1180.51 689.629 L1181.07 689.629 L1181.63 689.629 L1182.19 689.629 L1182.75 689.629 L1183.31 689.629 L1183.87 689.629 L1184.43 689.629 L1184.98 689.629 L1185.54 689.629 L1186.1 689.629 L1186.66 689.629 L1187.22 689.629 L1187.78 689.629 L1188.34 689.629 L1188.9 689.629 L1189.46 689.629 L1190.02 689.629 L1190.58 689.629 L1191.14 689.629 L1191.7 689.629 L1192.25 689.629 L1192.81 689.629 L1193.37 689.629 L1193.93 689.629 L1194.49 689.629 L1195.05 689.629 L1195.61 689.629 L1196.17 689.629 L1196.73 689.629 L1197.29 689.629 L1197.85 689.629 L1198.41 689.629 L1198.97 689.629 L1199.52 689.629 L1200.08 689.629 L1200.64 689.629 L1201.2 689.629 L1201.76 689.629 L1202.32 689.629 L1202.88 689.629 L1203.44 689.629 L1204 689.629 L1204.56 689.629 L1205.12 689.629 L1205.68 689.629 L1206.24 689.629 L1206.8 689.629 L1207.35 689.629 L1207.91 689.629 L1208.47 689.629 L1209.03 689.629 L1209.59 689.629 L1210.15 689.629 L1210.71 689.629 L1211.27 689.629 L1211.83 689.629 L1212.39 689.629 L1212.95 689.629 L1213.51 689.629 L1214.07 689.629 L1214.62 689.629 L1215.18 689.629 L1215.74 689.629 L1216.3 689.629 L1216.86 689.629 L1217.42 689.629 L1217.98 689.629 L1218.54 689.629 L1219.1 689.629 L1219.66 689.629 L1220.22 689.629 L1220.78 689.629 L1221.34 689.629 L1221.89 689.629 L1222.45 689.629 L1223.01 689.629 L1223.57 689.629 L1224.13 689.629 L1224.69 689.629 L1225.25 689.629 L1225.81 689.629 L1226.37 689.629 L1226.93 689.629 L1227.49 689.629 L1228.05 689.629 L1228.61 689.629 L1229.17 689.629 L1229.72 689.629 L1230.28 689.629 L1230.84 689.629 L1231.4 689.629 L1231.96 689.629 L1232.52 689.629 L1233.08 689.629 L1233.64 689.629 L1234.2 689.629 L1234.76 689.629 L1235.32 689.629 L1235.88 689.629 L1236.44 689.629 L1236.99 689.629 L1237.55 689.629 L1238.11 689.629 L1238.67 689.629 L1239.23 689.629 L1239.79 689.629 L1240.35 689.629 L1240.91 689.629 L1241.47 689.629 L1242.03 689.629 L1242.59 689.629 L1243.15 689.629 L1243.71 689.629 L1244.26 689.629 L1244.82 689.629 L1245.38 689.629 L1245.94 689.629 L1246.5 689.629 L1247.06 689.629 L1247.62 689.629 L1248.18 689.629 L1248.74 689.629 L1249.3 689.629 L1249.86 689.629 L1250.42 689.629 L1250.98 689.629 L1251.54 689.629 L1252.09 689.629 L1252.65 689.629 L1253.21 689.629 L1253.77 689.629 L1254.33 689.629 L1254.89 689.629 L1255.45 689.629 L1256.01 689.629 L1256.57 689.629 L1257.13 689.629 L1257.69 689.629 L1258.25 689.629 L1258.81 689.629 L1259.36 689.629 L1259.92 689.629 L1260.48 689.629 L1261.04 689.629 L1261.6 689.629 L1262.16 689.629 L1262.72 689.629 L1263.28 689.629 L1263.84 689.629 L1264.4 689.629 L1264.96 689.629 L1265.52 689.629 L1266.08 689.629 L1266.63 689.629 L1267.19 689.629 L1267.75 689.629 L1268.31 689.629 L1268.87 689.629 L1269.43 689.629 L1269.99 689.629 L1270.55 689.629 L1271.11 689.629 L1271.67 689.629 L1272.23 689.629 L1272.79 689.629 L1273.35 689.629 L1273.91 689.629 L1274.46 689.629 L1275.02 689.629 L1275.58 689.629 L1276.14 689.629 L1276.7 689.629 L1277.26 689.629 L1277.82 689.629 L1278.38 689.629 L1278.94 689.629 L1279.5 689.629 L1280.06 689.629 L1280.62 689.629 L1281.18 689.629 L1281.73 689.629 L1282.29 689.629 L1282.85 689.629 L1283.41 689.629 L1283.97 689.629 L1284.53 689.629 L1285.09 689.629 L1285.65 689.629 L1286.21 689.629 L1286.77 689.629 L1287.33 689.629 L1287.89 689.629 L1288.45 689.629 L1289 689.629 L1289.56 689.629 L1290.12 689.629 L1290.68 689.629 L1291.24 689.629 L1291.8 689.629 L1292.36 689.629 L1292.92 689.629 L1293.48 689.629 L1294.04 689.629 L1294.6 689.629 L1295.16 689.629 L1295.72 689.629 L1296.28 689.629 L1296.83 689.629 L1297.39 689.629 L1297.95 689.629 L1298.51 689.629 L1299.07 689.629 L1299.63 689.629 L1300.19 689.629 L1300.75 689.629 L1301.31 689.629 L1301.87 689.629 L1302.43 689.629 L1302.99 689.629 L1303.55 689.629 L1304.1 689.629 L1304.66 689.629 L1305.22 689.629 L1305.78 689.629 L1306.34 689.629 L1306.9 689.629 L1307.46 689.629 L1308.02 689.629 L1308.58 689.629 L1309.14 689.629 L1309.7 689.629 L1310.26 689.629 L1310.82 689.629 L1311.38 689.629 L1311.93 689.629 L1312.49 689.629 L1313.05 689.629 L1313.61 689.629 L1314.17 689.629 L1314.73 689.629 L1315.29 689.629 L1315.85 689.629 L1316.41 689.629 L1316.97 689.629 L1317.53 689.629 L1318.09 689.629 L1318.65 689.629 L1319.2 689.629 L1319.76 689.629 L1320.32 689.629 L1320.88 689.629 L1321.44 689.629 L1322 689.629 L1322.56 689.629 L1323.12 689.629 L1323.68 689.629 L1324.24 689.629 L1324.8 689.629 L1325.36 689.629 L1325.92 689.629 L1326.47 689.629 L1327.03 689.629 L1327.59 689.629 L1328.15 689.629 L1328.71 689.629 L1329.27 689.629 L1329.83 689.629 L1330.39 689.629 L1330.95 689.629 L1331.51 689.629 L1332.07 689.629 L1332.63 689.629 L1333.19 689.629 L1333.75 689.629 L1334.3 689.629 L1334.86 689.629 L1335.42 689.629 L1335.98 689.629 L1336.54 689.629 L1337.1 689.629 L1337.66 689.629 L1338.22 689.629 L1338.78 689.629 L1339.34 689.629 L1339.9 689.629 L1340.46 689.629 L1341.02 689.629 L1341.57 689.629 L1342.13 689.629 L1342.69 689.629 L1343.25 689.629 L1343.81 689.629 L1344.37 689.629 L1344.93 689.629 L1345.49 689.629 L1346.05 689.629 L1346.61 689.629 L1347.17 689.629 L1347.73 689.629 L1348.29 689.629 L1348.84 689.629 L1349.4 689.629 L1349.96 689.629 L1350.52 689.629 L1351.08 689.629 L1351.64 689.629 L1352.2 689.629 L1352.76 689.629 L1353.32 689.629 L1353.88 689.629 L1354.44 689.629 L1355 689.629 L1355.56 689.629 L1356.12 689.629 L1356.67 689.629 L1357.23 689.629 L1357.79 689.629 L1358.35 689.629 L1358.91 689.629 L1359.47 689.629 L1360.03 689.629 L1360.59 689.629 L1361.15 689.629 L1361.71 689.629 L1362.27 689.629 L1362.83 689.629 L1363.39 689.629 L1363.94 689.629 L1364.5 689.629 L1365.06 689.629 L1365.62 689.629 L1366.18 689.629 L1366.74 689.629 L1367.3 689.629 L1367.86 689.629 L1368.42 689.629 L1368.98 689.629 L1369.54 689.629 L1370.1 689.629 L1370.66 689.629 L1371.21 689.629 L1371.77 689.629 L1372.33 689.629 L1372.89 689.629 L1373.45 689.629 L1374.01 689.629 L1374.57 689.629 L1375.13 689.629 L1375.69 689.629 L1376.25 689.629 L1376.81 689.629 L1377.37 689.629 L1377.93 689.629 L1378.49 689.629 L1379.04 689.629 L1379.6 689.629 L1380.16 689.629 L1380.72 689.629 L1381.28 689.629 L1381.84 689.629 L1382.4 689.629 L1382.96 689.629 L1383.52 689.629 L1384.08 689.629 L1384.64 689.629 L1385.2 689.629 L1385.76 689.629 L1386.31 689.629 L1386.87 689.629 L1387.43 689.629 L1387.99 689.629 L1388.55 689.629 L1389.11 689.629 L1389.67 689.629 L1390.23 689.629 L1390.79 689.629 L1391.35 689.629 L1391.91 689.629 L1392.47 689.629 L1393.03 689.629 L1393.58 689.629 L1394.14 689.629 L1394.7 689.629 L1395.26 689.629 L1395.82 689.629 L1396.38 689.629 L1396.94 689.629 L1397.5 689.629 L1398.06 689.629 L1398.62 689.629 L1399.18 689.629 L1399.74 689.629 L1400.3 689.629 L1400.86 689.629 L1401.41 689.629 L1401.97 689.629 L1402.53 689.629 L1403.09 689.629 L1403.65 689.629 L1404.21 689.629 L1404.77 689.629 L1405.33 689.629 L1405.89 689.629 L1406.45 689.629 L1407.01 689.629 L1407.57 689.629 L1408.13 689.629 L1408.68 689.629 L1409.24 689.629 L1409.8 689.629 L1410.36 689.629 L1410.92 689.629 L1411.48 689.629 L1412.04 689.629 L1412.6 689.629 L1413.16 689.629 L1413.72 689.629 L1414.28 689.629 L1414.84 689.629 L1415.4 689.629 L1415.95 689.629 L1416.51 689.629 L1417.07 689.629 L1417.63 689.629 L1418.19 689.629 L1418.75 689.629 L1419.31 689.629 L1419.87 689.629 L1420.43 689.629 L1420.99 689.629 L1421.55 689.629 L1422.11 689.629 L1422.67 689.629 L1423.23 689.629 L1423.78 689.629 L1424.34 689.629 L1424.9 689.629 L1425.46 689.629 L1426.02 689.629 L1426.58 689.629 L1427.14 689.629 L1427.7 689.629 L1428.26 689.629 L1428.82 689.629 L1429.38 689.629 L1429.94 689.629 L1430.5 689.629 L1431.05 689.629 L1431.61 689.629 L1432.17 689.629 L1432.73 689.629 L1433.29 689.629 L1433.85 689.629 L1434.41 689.629 L1434.97 689.629 L1435.53 689.629 L1436.09 689.629 L1436.65 689.629 L1437.21 689.629 L1437.77 689.629 L1438.33 689.629 L1438.88 689.629 L1439.44 689.629 L1440 689.629 L1440.56 689.629 L1441.12 689.629 L1441.68 689.629 L1442.24 689.629 L1442.8 689.629 L1443.36 689.629 L1443.92 689.629 L1444.48 689.629 L1445.04 689.629 L1445.6 689.629 L1446.15 689.629 L1446.71 689.629 L1447.27 689.629 L1447.83 689.629 L1448.39 689.629 L1448.95 689.629 L1449.51 689.629 L1450.07 689.629 L1450.63 689.629 L1451.19 689.629 L1451.75 689.629 L1452.31 689.629 L1452.87 689.629 L1453.42 689.629 L1453.98 689.629 L1454.54 689.629 L1455.1 689.629 L1455.66 689.629 L1456.22 689.629 L1456.78 689.629 L1457.34 689.629 L1457.9 689.629 L1458.46 689.629 L1459.02 689.629 L1459.58 689.629 L1460.14 689.629 L1460.7 689.629 L1461.25 689.629 L1461.81 689.629 L1462.37 689.629 L1462.93 689.629 L1463.49 689.629 L1464.05 689.629 L1464.61 689.629 L1465.17 689.629 L1465.73 689.629 L1466.29 689.629 L1466.85 689.629 L1467.41 689.629 L1467.97 689.629 L1468.52 689.629 L1469.08 689.629 L1469.64 689.629 L1470.2 689.629 L1470.76 689.629 L1471.32 689.629 L1471.88 689.629 L1472.44 689.629 L1473 689.629 L1473.56 689.629 L1474.12 689.629 L1474.68 689.629 L1475.24 689.629 L1475.79 689.629 L1476.35 689.629 L1476.91 689.629 L1477.47 689.629 L1478.03 689.629 L1478.59 689.629 L1479.15 689.629 L1479.71 689.629 L1480.27 689.629 L1480.83 689.629 L1481.39 689.629 L1481.95 689.629 L1482.51 689.629 L1483.07 689.629 L1483.62 689.629 L1484.18 689.629 L1484.74 689.629 L1485.3 689.629 L1485.86 689.629 L1486.42 689.629 L1486.98 689.629 L1487.54 689.629 L1488.1 689.629 L1488.66 689.629 L1489.22 689.629 L1489.78 689.629 L1490.34 689.629 L1490.89 689.629 L1491.45 689.629 L1492.01 689.629 L1492.57 689.629 L1493.13 689.629 L1493.69 689.629 L1494.25 689.629 L1494.81 689.629 L1495.37 689.629 L1495.93 689.629 L1496.49 689.629 L1497.05 689.629 L1497.61 689.629 L1498.16 689.629 L1498.72 689.629 L1499.28 689.629 L1499.84 689.629 L1500.4 689.629 L1500.96 689.629 L1501.52 689.629 L1502.08 689.629 L1502.64 689.629 L1503.2 689.629 L1503.76 689.629 L1504.32 689.629 L1504.88 689.629 L1505.44 689.629 L1505.99 689.629 L1506.55 689.629 L1507.11 689.629 L1507.67 689.629 L1508.23 689.629 L1508.79 689.629 L1509.35 689.629 L1509.91 689.629 L1510.47 689.629 L1511.03 689.629 L1511.59 689.629 L1512.15 689.629 L1512.71 689.629 L1513.26 689.629 L1513.82 689.629 L1514.38 689.629 L1514.94 689.629 L1515.5 689.629 L1516.06 689.629 L1516.62 689.629 L1517.18 689.629 L1517.74 689.629 L1518.3 689.629 L1518.86 689.629 L1519.42 689.629 L1519.98 689.629 L1520.53 689.629 L1521.09 689.629 L1521.65 689.629 L1522.21 689.629 L1522.77 689.629 L1523.33 689.629 L1523.89 689.629 L1524.45 689.629 L1525.01 689.629 L1525.57 689.629 L1526.13 689.629 L1526.69 689.629 L1527.25 689.629 L1527.81 689.629 L1528.36 689.629 L1528.92 689.629 L1529.48 689.629 L1530.04 689.629 L1530.6 689.629 L1531.16 689.629 L1531.72 689.629 L1532.28 689.629 L1532.84 689.629 L1533.4 689.629 L1533.96 689.629 L1534.52 689.629 L1535.08 689.629 L1535.63 689.629 L1536.19 689.629 L1536.75 689.629 L1537.31 689.629 L1537.87 689.629 L1538.43 689.629 L1538.99 689.629 L1539.55 689.629 L1540.11 689.629 L1540.67 689.629 L1541.23 689.629 L1541.79 689.629 L1542.35 689.629 L1542.9 689.629 L1543.46 689.629 L1544.02 689.629 L1544.58 689.629 L1545.14 689.629 L1545.7 689.629 L1546.26 689.629 L1546.82 689.629 L1547.38 689.629 L1547.94 689.629 L1548.5 689.629 L1549.06 689.629 L1549.62 689.629 L1550.18 689.629 L1550.73 689.629 L1551.29 689.629 L1551.85 689.629 L1552.41 689.629 L1552.97 689.629 L1553.53 689.629 L1554.09 689.629 L1554.65 689.629 L1555.21 689.629 L1555.77 689.629 L1556.33 689.629 L1556.89 689.629 L1557.45 689.629 L1558 689.629 L1558.56 689.629 L1559.12 689.629 L1559.68 689.629 L1560.24 689.629 L1560.8 689.629 L1561.36 689.629 L1561.92 689.629 L1562.48 689.629 L1563.04 689.629 L1563.6 689.629 L1564.16 689.629 L1564.72 689.629 L1565.28 689.629 L1565.83 689.629 L1566.39 689.629 L1566.95 689.629 L1567.51 689.629 L1568.07 689.629 L1568.63 689.629 L1569.19 689.629 L1569.75 689.629 L1570.31 689.629 L1570.87 689.629 L1571.43 689.629 L1571.99 689.629 L1572.55 689.629 L1573.1 689.629 L1573.66 689.629 L1574.22 689.629 L1574.78 689.629 L1575.34 689.629 L1575.9 689.629 L1576.46 689.629 L1577.02 689.629 L1577.58 689.629 L1578.14 689.629 L1578.7 689.629 L1579.26 689.629 L1579.82 689.629 L1580.37 689.629 L1580.93 689.629 L1581.49 689.629 L1582.05 689.629 L1582.61 689.629 L1583.17 689.629 L1583.73 689.629 L1584.29 689.629 L1584.85 689.629 L1585.41 689.629 L1585.97 689.629 L1586.53 689.629 L1587.09 689.629 L1587.65 689.629 L1588.2 689.629 L1588.76 689.629 L1589.32 689.629 L1589.88 689.629 L1590.44 689.629 L1591 689.629 L1591.56 689.629 L1592.12 689.629 L1592.68 689.629 L1593.24 689.629 L1593.8 689.629 L1594.36 689.629 L1594.92 689.629 L1595.47 689.629 L1596.03 689.629 L1596.59 689.629 L1597.15 689.629 L1597.71 689.629 L1598.27 689.629 L1598.83 689.629 L1599.39 689.629 L1599.95 689.629 L1600.51 689.629 L1601.07 689.629 L1601.63 689.629 L1602.19 689.629 L1602.74 689.629 L1603.3 689.629 L1603.86 689.629 L1604.42 689.629 L1604.98 689.629 L1605.54 689.629 L1606.1 689.629 L1606.66 689.629 L1607.22 689.629 L1607.78 689.629 L1608.34 689.629 L1608.9 689.629 L1609.46 689.629 L1610.02 689.629 L1610.57 689.629 L1611.13 689.629 L1611.69 689.629 L1612.25 689.629 L1612.81 689.629 L1613.37 689.629 L1613.93 689.629 L1614.49 689.629 L1615.05 689.629 L1615.61 689.629 L1616.17 689.629 L1616.73 689.629 L1617.29 689.629 L1617.84 689.629 L1618.4 689.629 L1618.96 689.629 L1619.52 689.629 L1620.08 689.629 L1620.64 689.629 L1621.2 689.629 L1621.76 689.629 L1622.32 689.629 L1622.88 689.629 L1623.44 689.629 L1624 689.629 L1624.56 689.629 L1625.11 689.629 L1625.67 689.629 L1626.23 689.629 L1626.79 689.629 L1627.35 689.629 L1627.91 689.629 L1628.47 689.629 L1629.03 689.629 L1629.59 689.629 L1630.15 689.629 L1630.71 689.629 L1631.27 689.629 L1631.83 689.629 L1632.39 689.629 L1632.94 689.629 L1633.5 689.629 L1634.06 689.629 L1634.62 689.629 L1635.18 689.629 L1635.74 689.629 L1636.3 689.629 L1636.86 689.629 L1637.42 689.629 L1637.98 689.629 L1638.54 689.629 L1639.1 689.629 L1639.66 689.629 L1640.21 689.629 L1640.77 689.629 L1641.33 689.629 L1641.89 689.629 L1642.45 689.629 L1643.01 689.629 L1643.57 689.629 L1644.13 689.629 L1644.69 689.629 L1645.25 689.629 L1645.81 689.629 L1646.37 689.629 L1646.93 689.629 L1647.48 689.629 L1648.04 689.629 L1648.6 689.629 L1649.16 689.629 L1649.72 689.629 L1650.28 689.629 L1650.84 689.629 L1651.4 689.629 L1651.96 689.629 L1652.52 689.629 L1653.08 689.629 L1653.64 689.629 L1654.2 689.629 L1654.76 689.629 L1655.31 689.629 L1655.87 689.629 L1656.43 689.629 L1656.99 689.629 L1657.55 689.629 L1658.11 689.629 L1658.67 689.629 L1659.23 689.629 L1659.79 689.629 L1660.35 689.629 L1660.91 689.629 L1661.47 689.629 L1662.03 689.629 L1662.58 689.629 L1663.14 689.629 L1663.7 689.629 L1664.26 689.629 L1664.82 689.629 L1665.38 689.629 L1665.94 689.629 L1666.5 689.629 L1667.06 689.629 L1667.62 689.629 L1668.18 689.629 L1668.74 689.629 L1669.3 689.629 L1669.85 689.629 L1670.41 689.629 L1670.97 689.629 L1671.53 689.629 L1672.09 689.629 L1672.65 689.629 L1673.21 689.629 L1673.77 689.629 L1674.33 689.629 L1674.89 689.629 L1675.45 689.629 L1676.01 689.629 L1676.57 689.629 L1677.13 689.629 L1677.68 689.629 L1678.24 689.629 L1678.8 689.629 L1679.36 689.629 L1679.92 689.629 L1680.48 689.629 L1681.04 689.629 L1681.6 689.629 L1682.16 689.629 L1682.72 689.629 L1683.28 689.629 L1683.84 689.629 L1684.4 689.629 L1684.95 689.629 L1685.51 689.629 L1686.07 689.629 L1686.63 689.629 L1687.19 689.629 L1687.75 689.629 L1688.31 689.629 L1688.87 689.629 L1689.43 689.629 L1689.99 689.629 L1690.55 689.629 L1691.11 689.629 L1691.67 689.629 L1692.23 689.629 L1692.78 689.629 L1693.34 689.629 L1693.9 689.629 L1694.46 689.629 L1695.02 689.629 L1695.58 689.629 L1696.14 689.629 L1696.7 689.629 L1697.26 689.629 L1697.82 689.629 L1698.38 689.629 L1698.94 689.629 L1699.5 689.629 L1700.05 689.629 L1700.61 689.629 L1701.17 689.629 L1701.73 689.629 L1702.29 689.629 L1702.85 689.629 L1703.41 689.629 L1703.97 689.629 L1704.53 689.629 L1705.09 689.629 L1705.65 689.629 L1706.21 689.629 L1706.77 689.629 L1707.32 689.629 L1707.88 689.629 L1708.44 689.629 L1709 689.629 L1709.56 689.629 L1710.12 689.629 L1710.68 689.629 L1711.24 689.629 L1711.8 689.629 L1712.36 689.629 L1712.92 689.629 L1713.48 689.629 L1714.04 689.629 L1714.6 689.629 L1715.15 689.629 L1715.71 689.629 L1716.27 689.629 L1716.83 689.629 L1717.39 689.629 L1717.95 689.629 L1718.51 689.629 L1719.07 689.629 L1719.63 689.629 L1720.19 689.629 L1720.75 689.629 L1721.31 689.629 L1721.87 689.629 L1722.42 689.629 L1722.98 689.629 L1723.54 689.629 L1724.1 689.629 L1724.66 689.629 L1725.22 689.629 L1725.78 689.629 L1726.34 689.629 L1726.9 689.629 L1727.46 689.629 L1728.02 689.629 L1728.58 689.629 L1729.14 689.629 L1729.69 689.629 L1730.25 689.629 L1730.81 689.629 L1731.37 689.629 L1731.93 689.629 L1732.49 689.629 L1733.05 689.629 L1733.61 689.629 L1734.17 689.629 L1734.73 689.629 L1735.29 689.629 L1735.85 689.629 L1736.41 689.629 L1736.97 689.629 L1737.52 689.629 L1738.08 689.629 L1738.64 689.629 L1739.2 689.629 L1739.76 689.629 L1740.32 689.629 L1740.88 689.629 L1741.44 689.629 L1742 689.629 L1742.56 689.629 L1743.12 689.629 L1743.68 689.629 L1744.24 689.629 L1744.79 689.629 L1745.35 689.629 L1745.91 689.629 L1746.47 689.629 L1747.03 689.629 L1747.59 689.629 L1748.15 689.629 L1748.71 689.629 L1749.27 689.629 L1749.83 689.629 L1750.39 689.629 L1750.95 689.629 L1751.51 689.629 L1752.06 689.629 L1752.62 689.629 L1753.18 689.629 L1753.74 689.629 L1754.3 689.629 L1754.86 689.629 L1755.42 689.629 L1755.98 689.629 L1756.54 689.629 L1757.1 689.629 L1757.66 689.629 L1758.22 689.629 L1758.78 689.629 L1759.34 689.629 L1759.89 689.629 L1760.45 689.629 L1761.01 689.629 L1761.57 689.629 L1762.13 689.629 L1762.69 689.629 L1763.25 689.629 L1763.81 689.629 L1764.37 689.629 L1764.93 689.629 L1765.49 689.629 L1766.05 689.629 L1766.61 689.629 L1767.16 689.629 L1767.72 689.629 L1768.28 689.629 L1768.84 689.629 L1769.4 689.629 L1769.96 689.629 L1770.52 689.629 L1771.08 689.629 L1771.64 689.629 L1772.2 689.629 L1772.76 689.629 L1773.32 689.629 L1773.88 689.629 L1774.43 689.629 L1774.99 689.629 L1775.55 689.629 L1776.11 689.629 L1776.67 689.629 L1777.23 689.629 L1777.79 689.629 L1778.35 689.629 L1778.91 689.629 L1779.47 689.629 L1780.03 689.629 L1780.59 689.629 L1781.15 689.629 L1781.71 689.629 L1782.26 689.629 L1782.82 689.629 L1783.38 689.629 L1783.94 689.629 L1784.5 689.629 L1785.06 689.629 L1785.62 689.629 L1786.18 689.629 L1786.74 689.629 L1787.3 689.629 L1787.86 689.629 L1788.42 689.629 L1788.98 689.629 L1789.53 689.629 L1790.09 689.629 L1790.65 689.629 L1791.21 689.629 L1791.77 689.629 L1792.33 689.629 L1792.89 689.629 L1793.45 689.629 L1794.01 689.629 L1794.57 689.629 L1795.13 689.629 L1795.69 689.629 L1796.25 689.629 L1796.8 689.629 L1797.36 689.629 L1797.92 689.629 L1798.48 689.629 L1799.04 689.629 L1799.6 689.629 L1800.16 689.629 L1800.72 689.629 L1801.28 689.629 L1801.84 689.629 L1802.4 689.629 L1802.96 689.629 L1803.52 689.629 L1804.08 689.629 L1804.63 689.629 L1805.19 689.629 L1805.75 689.629 L1806.31 689.629 L1806.87 689.629 L1807.43 689.629 L1807.99 689.629 L1808.55 689.629 L1809.11 689.629 L1809.67 689.629 L1810.23 689.629 L1810.79 689.629 L1811.35 689.629 L1811.9 689.629 L1812.46 689.629 L1813.02 689.629 L1813.58 689.629 L1814.14 689.629 L1814.7 689.629 L1815.26 689.629 L1815.82 689.629 L1816.38 689.629 L1816.94 689.629 L1817.5 689.629 L1818.06 689.629 L1818.62 689.629 L1819.18 689.629 L1819.73 689.629 L1820.29 689.629 L1820.85 689.629 L1821.41 689.629 L1821.97 689.629 L1822.53 689.629 L1823.09 689.629 L1823.65 689.629 L1824.21 689.629 L1824.77 689.629 L1825.33 689.629 L1825.89 689.629 L1826.45 689.629 L1827 689.629 L1827.56 689.629 L1828.12 689.629 L1828.68 689.629 L1829.24 689.629 L1829.8 689.629 L1830.36 689.629 L1830.92 689.629 L1831.48 689.629 L1832.04 689.629 L1832.6 689.629 L1833.16 689.629 L1833.72 689.629 L1834.27 689.629 L1834.83 689.629 L1835.39 689.629 L1835.95 689.629 L1836.51 689.629 L1837.07 689.629 L1837.63 689.629 L1838.19 689.629 L1838.19 681.89 L1837.63 681.89 L1837.07 681.89 L1836.51 681.89 L1835.95 681.89 L1835.39 681.89 L1834.83 681.89 L1834.27 681.89 L1833.72 681.89 L1833.16 681.89 L1832.6 681.89 L1832.04 681.89 L1831.48 681.89 L1830.92 681.89 L1830.36 681.89 L1829.8 681.89 L1829.24 681.89 L1828.68 681.89 L1828.12 681.89 L1827.56 681.89 L1827 681.89 L1826.45 681.89 L1825.89 681.89 L1825.33 681.89 L1824.77 681.89 L1824.21 681.89 L1823.65 681.89 L1823.09 681.89 L1822.53 681.89 L1821.97 681.89 L1821.41 681.89 L1820.85 681.89 L1820.29 681.89 L1819.73 681.89 L1819.18 681.89 L1818.62 681.89 L1818.06 681.89 L1817.5 681.89 L1816.94 681.89 L1816.38 681.89 L1815.82 681.89 L1815.26 681.89 L1814.7 681.89 L1814.14 681.89 L1813.58 681.89 L1813.02 681.89 L1812.46 681.89 L1811.9 681.89 L1811.35 681.89 L1810.79 681.89 L1810.23 681.89 L1809.67 681.89 L1809.11 681.89 L1808.55 681.89 L1807.99 681.89 L1807.43 681.89 L1806.87 681.89 L1806.31 681.89 L1805.75 681.89 L1805.19 681.89 L1804.63 681.89 L1804.08 681.89 L1803.52 681.89 L1802.96 681.89 L1802.4 681.89 L1801.84 681.89 L1801.28 681.89 L1800.72 681.89 L1800.16 681.89 L1799.6 681.89 L1799.04 681.89 L1798.48 681.89 L1797.92 681.89 L1797.36 681.89 L1796.8 681.89 L1796.25 681.89 L1795.69 681.89 L1795.13 681.89 L1794.57 681.89 L1794.01 681.89 L1793.45 681.89 L1792.89 681.89 L1792.33 681.89 L1791.77 681.89 L1791.21 681.89 L1790.65 681.89 L1790.09 681.89 L1789.53 681.89 L1788.98 681.89 L1788.42 681.89 L1787.86 681.89 L1787.3 681.89 L1786.74 681.89 L1786.18 681.89 L1785.62 681.89 L1785.06 681.89 L1784.5 681.89 L1783.94 681.89 L1783.38 681.89 L1782.82 681.89 L1782.26 681.89 L1781.71 681.89 L1781.15 681.89 L1780.59 681.89 L1780.03 681.89 L1779.47 681.89 L1778.91 681.89 L1778.35 681.89 L1777.79 681.89 L1777.23 681.89 L1776.67 681.89 L1776.11 681.89 L1775.55 681.89 L1774.99 681.89 L1774.43 681.89 L1773.88 681.89 L1773.32 681.89 L1772.76 681.89 L1772.2 681.89 L1771.64 681.89 L1771.08 681.89 L1770.52 681.89 L1769.96 681.89 L1769.4 681.89 L1768.84 681.89 L1768.28 681.89 L1767.72 681.89 L1767.16 681.89 L1766.61 681.89 L1766.05 681.89 L1765.49 681.89 L1764.93 681.89 L1764.37 681.89 L1763.81 681.89 L1763.25 681.89 L1762.69 681.89 L1762.13 681.89 L1761.57 681.89 L1761.01 681.89 L1760.45 681.89 L1759.89 681.89 L1759.34 681.89 L1758.78 681.89 L1758.22 681.89 L1757.66 681.89 L1757.1 681.89 L1756.54 681.89 L1755.98 681.89 L1755.42 681.89 L1754.86 681.89 L1754.3 681.89 L1753.74 681.89 L1753.18 681.89 L1752.62 681.89 L1752.06 681.89 L1751.51 681.89 L1750.95 681.89 L1750.39 681.89 L1749.83 681.89 L1749.27 681.89 L1748.71 681.89 L1748.15 681.89 L1747.59 681.89 L1747.03 681.89 L1746.47 681.89 L1745.91 681.89 L1745.35 681.89 L1744.79 681.89 L1744.24 681.89 L1743.68 681.89 L1743.12 681.89 L1742.56 681.89 L1742 681.89 L1741.44 681.89 L1740.88 681.89 L1740.32 681.89 L1739.76 681.89 L1739.2 681.89 L1738.64 681.89 L1738.08 681.89 L1737.52 681.89 L1736.97 681.89 L1736.41 681.89 L1735.85 681.89 L1735.29 681.89 L1734.73 681.89 L1734.17 681.89 L1733.61 681.89 L1733.05 681.89 L1732.49 681.89 L1731.93 681.89 L1731.37 681.89 L1730.81 681.89 L1730.25 681.89 L1729.69 681.89 L1729.14 681.89 L1728.58 681.89 L1728.02 681.89 L1727.46 681.89 L1726.9 681.89 L1726.34 681.89 L1725.78 681.89 L1725.22 681.89 L1724.66 681.89 L1724.1 681.89 L1723.54 681.89 L1722.98 681.89 L1722.42 681.89 L1721.87 681.89 L1721.31 681.89 L1720.75 681.89 L1720.19 681.89 L1719.63 681.89 L1719.07 681.89 L1718.51 681.89 L1717.95 681.89 L1717.39 681.89 L1716.83 681.89 L1716.27 681.89 L1715.71 681.89 L1715.15 681.89 L1714.6 681.89 L1714.04 681.89 L1713.48 681.89 L1712.92 681.89 L1712.36 681.89 L1711.8 681.89 L1711.24 681.89 L1710.68 681.89 L1710.12 681.89 L1709.56 681.89 L1709 681.89 L1708.44 681.89 L1707.88 681.89 L1707.32 681.89 L1706.77 681.89 L1706.21 681.89 L1705.65 681.89 L1705.09 681.89 L1704.53 681.89 L1703.97 681.89 L1703.41 681.89 L1702.85 681.89 L1702.29 681.89 L1701.73 681.89 L1701.17 681.89 L1700.61 681.89 L1700.05 681.89 L1699.5 681.89 L1698.94 681.89 L1698.38 681.89 L1697.82 681.89 L1697.26 681.89 L1696.7 681.89 L1696.14 681.89 L1695.58 681.89 L1695.02 681.89 L1694.46 681.89 L1693.9 681.89 L1693.34 681.89 L1692.78 681.89 L1692.23 681.89 L1691.67 681.89 L1691.11 681.89 L1690.55 681.89 L1689.99 681.89 L1689.43 681.89 L1688.87 681.89 L1688.31 681.89 L1687.75 681.89 L1687.19 681.89 L1686.63 681.89 L1686.07 681.89 L1685.51 681.89 L1684.95 681.89 L1684.4 681.89 L1683.84 681.89 L1683.28 681.89 L1682.72 681.89 L1682.16 681.89 L1681.6 681.89 L1681.04 681.89 L1680.48 681.89 L1679.92 681.89 L1679.36 681.89 L1678.8 681.89 L1678.24 681.89 L1677.68 681.89 L1677.13 681.89 L1676.57 681.89 L1676.01 681.89 L1675.45 681.89 L1674.89 681.89 L1674.33 681.89 L1673.77 681.89 L1673.21 681.89 L1672.65 681.89 L1672.09 681.89 L1671.53 681.89 L1670.97 681.89 L1670.41 681.89 L1669.85 681.89 L1669.3 681.89 L1668.74 681.89 L1668.18 681.89 L1667.62 681.89 L1667.06 681.89 L1666.5 681.89 L1665.94 681.89 L1665.38 681.89 L1664.82 681.89 L1664.26 681.89 L1663.7 681.89 L1663.14 681.89 L1662.58 681.89 L1662.03 681.89 L1661.47 681.89 L1660.91 681.89 L1660.35 681.89 L1659.79 681.89 L1659.23 681.89 L1658.67 681.89 L1658.11 681.89 L1657.55 681.89 L1656.99 681.89 L1656.43 681.89 L1655.87 681.89 L1655.31 681.89 L1654.76 681.89 L1654.2 681.89 L1653.64 681.89 L1653.08 681.89 L1652.52 681.89 L1651.96 681.89 L1651.4 681.89 L1650.84 681.89 L1650.28 681.89 L1649.72 681.89 L1649.16 681.89 L1648.6 681.89 L1648.04 681.89 L1647.48 681.89 L1646.93 681.89 L1646.37 681.89 L1645.81 681.89 L1645.25 681.89 L1644.69 681.89 L1644.13 681.89 L1643.57 681.89 L1643.01 681.89 L1642.45 681.89 L1641.89 681.89 L1641.33 681.89 L1640.77 681.89 L1640.21 681.89 L1639.66 681.89 L1639.1 681.89 L1638.54 681.89 L1637.98 681.89 L1637.42 681.89 L1636.86 681.89 L1636.3 681.89 L1635.74 681.89 L1635.18 681.89 L1634.62 681.89 L1634.06 681.89 L1633.5 681.89 L1632.94 681.89 L1632.39 681.89 L1631.83 681.89 L1631.27 681.89 L1630.71 681.89 L1630.15 681.89 L1629.59 681.89 L1629.03 681.89 L1628.47 681.89 L1627.91 681.89 L1627.35 681.89 L1626.79 681.89 L1626.23 681.89 L1625.67 681.89 L1625.11 681.89 L1624.56 681.89 L1624 681.89 L1623.44 681.89 L1622.88 681.89 L1622.32 681.89 L1621.76 681.89 L1621.2 681.89 L1620.64 681.89 L1620.08 681.89 L1619.52 681.89 L1618.96 681.89 L1618.4 681.89 L1617.84 681.89 L1617.29 681.89 L1616.73 681.89 L1616.17 681.89 L1615.61 681.89 L1615.05 681.89 L1614.49 681.89 L1613.93 681.89 L1613.37 681.89 L1612.81 681.89 L1612.25 681.89 L1611.69 681.89 L1611.13 681.89 L1610.57 681.89 L1610.02 681.89 L1609.46 681.89 L1608.9 681.89 L1608.34 681.89 L1607.78 681.89 L1607.22 681.89 L1606.66 681.89 L1606.1 681.89 L1605.54 681.89 L1604.98 681.89 L1604.42 681.89 L1603.86 681.89 L1603.3 681.89 L1602.74 681.89 L1602.19 681.89 L1601.63 681.89 L1601.07 681.89 L1600.51 681.89 L1599.95 681.89 L1599.39 681.89 L1598.83 681.89 L1598.27 681.89 L1597.71 681.89 L1597.15 681.89 L1596.59 681.89 L1596.03 681.89 L1595.47 681.89 L1594.92 681.89 L1594.36 681.89 L1593.8 681.89 L1593.24 681.89 L1592.68 681.89 L1592.12 681.89 L1591.56 681.89 L1591 681.89 L1590.44 681.89 L1589.88 681.89 L1589.32 681.89 L1588.76 681.89 L1588.2 681.89 L1587.65 681.89 L1587.09 681.89 L1586.53 681.89 L1585.97 681.89 L1585.41 681.89 L1584.85 681.89 L1584.29 681.89 L1583.73 681.89 L1583.17 681.89 L1582.61 681.89 L1582.05 681.89 L1581.49 681.89 L1580.93 681.89 L1580.37 681.89 L1579.82 681.89 L1579.26 681.89 L1578.7 681.89 L1578.14 681.89 L1577.58 681.89 L1577.02 681.89 L1576.46 681.89 L1575.9 681.89 L1575.34 681.89 L1574.78 681.89 L1574.22 681.89 L1573.66 681.89 L1573.1 681.89 L1572.55 681.89 L1571.99 681.89 L1571.43 681.89 L1570.87 681.89 L1570.31 681.89 L1569.75 681.89 L1569.19 681.89 L1568.63 681.89 L1568.07 681.89 L1567.51 681.89 L1566.95 681.89 L1566.39 681.89 L1565.83 681.89 L1565.28 681.89 L1564.72 681.89 L1564.16 681.89 L1563.6 681.89 L1563.04 681.89 L1562.48 681.89 L1561.92 681.89 L1561.36 681.89 L1560.8 681.89 L1560.24 681.89 L1559.68 681.89 L1559.12 681.89 L1558.56 681.89 L1558 681.89 L1557.45 681.89 L1556.89 681.89 L1556.33 681.89 L1555.77 681.89 L1555.21 681.89 L1554.65 681.89 L1554.09 681.89 L1553.53 681.89 L1552.97 681.89 L1552.41 681.89 L1551.85 681.89 L1551.29 681.89 L1550.73 681.89 L1550.18 681.89 L1549.62 681.89 L1549.06 681.89 L1548.5 681.89 L1547.94 681.89 L1547.38 681.89 L1546.82 681.89 L1546.26 681.89 L1545.7 681.89 L1545.14 681.89 L1544.58 681.89 L1544.02 681.89 L1543.46 681.89 L1542.9 681.89 L1542.35 681.89 L1541.79 681.89 L1541.23 681.89 L1540.67 681.89 L1540.11 681.89 L1539.55 681.89 L1538.99 681.89 L1538.43 681.89 L1537.87 681.89 L1537.31 681.89 L1536.75 681.89 L1536.19 681.89 L1535.63 681.89 L1535.08 681.89 L1534.52 681.89 L1533.96 681.89 L1533.4 681.89 L1532.84 681.89 L1532.28 681.89 L1531.72 681.89 L1531.16 681.89 L1530.6 681.89 L1530.04 681.89 L1529.48 681.89 L1528.92 681.89 L1528.36 681.89 L1527.81 681.89 L1527.25 681.89 L1526.69 681.89 L1526.13 681.89 L1525.57 681.89 L1525.01 681.89 L1524.45 681.89 L1523.89 681.89 L1523.33 681.89 L1522.77 681.89 L1522.21 681.89 L1521.65 681.89 L1521.09 681.89 L1520.53 681.89 L1519.98 681.89 L1519.42 681.89 L1518.86 681.89 L1518.3 681.89 L1517.74 681.89 L1517.18 681.89 L1516.62 681.89 L1516.06 681.89 L1515.5 681.89 L1514.94 681.89 L1514.38 681.89 L1513.82 681.89 L1513.26 681.89 L1512.71 681.89 L1512.15 681.89 L1511.59 681.89 L1511.03 681.89 L1510.47 681.89 L1509.91 681.89 L1509.35 681.89 L1508.79 681.89 L1508.23 681.89 L1507.67 681.89 L1507.11 681.89 L1506.55 681.89 L1505.99 681.89 L1505.44 681.89 L1504.88 681.89 L1504.32 681.89 L1503.76 681.89 L1503.2 681.89 L1502.64 681.89 L1502.08 681.89 L1501.52 681.89 L1500.96 681.89 L1500.4 681.89 L1499.84 681.89 L1499.28 681.89 L1498.72 681.89 L1498.16 681.89 L1497.61 681.89 L1497.05 681.89 L1496.49 681.89 L1495.93 681.89 L1495.37 681.89 L1494.81 681.89 L1494.25 681.89 L1493.69 681.89 L1493.13 681.89 L1492.57 681.89 L1492.01 681.89 L1491.45 681.89 L1490.89 681.89 L1490.34 681.89 L1489.78 681.89 L1489.22 681.89 L1488.66 681.89 L1488.1 681.89 L1487.54 681.89 L1486.98 681.89 L1486.42 681.89 L1485.86 681.89 L1485.3 681.89 L1484.74 681.89 L1484.18 681.89 L1483.62 681.89 L1483.07 681.89 L1482.51 681.89 L1481.95 681.89 L1481.39 681.89 L1480.83 681.89 L1480.27 681.89 L1479.71 681.89 L1479.15 681.89 L1478.59 681.89 L1478.03 681.89 L1477.47 681.89 L1476.91 681.89 L1476.35 681.89 L1475.79 681.89 L1475.24 681.89 L1474.68 681.89 L1474.12 681.89 L1473.56 681.89 L1473 681.89 L1472.44 681.89 L1471.88 681.89 L1471.32 681.89 L1470.76 681.89 L1470.2 681.89 L1469.64 681.89 L1469.08 681.89 L1468.52 681.89 L1467.97 681.89 L1467.41 681.89 L1466.85 681.89 L1466.29 681.89 L1465.73 681.89 L1465.17 681.89 L1464.61 681.89 L1464.05 681.89 L1463.49 681.89 L1462.93 681.89 L1462.37 681.89 L1461.81 681.89 L1461.25 681.89 L1460.7 681.89 L1460.14 681.89 L1459.58 681.89 L1459.02 681.89 L1458.46 681.89 L1457.9 681.89 L1457.34 681.89 L1456.78 681.89 L1456.22 681.89 L1455.66 681.89 L1455.1 681.89 L1454.54 681.89 L1453.98 681.89 L1453.42 681.89 L1452.87 681.89 L1452.31 681.89 L1451.75 681.89 L1451.19 681.89 L1450.63 681.89 L1450.07 681.89 L1449.51 681.89 L1448.95 681.89 L1448.39 681.89 L1447.83 681.89 L1447.27 681.89 L1446.71 681.89 L1446.15 681.89 L1445.6 681.89 L1445.04 681.89 L1444.48 681.89 L1443.92 681.89 L1443.36 681.89 L1442.8 681.89 L1442.24 681.89 L1441.68 681.89 L1441.12 681.89 L1440.56 681.89 L1440 681.89 L1439.44 681.89 L1438.88 681.89 L1438.33 681.89 L1437.77 681.89 L1437.21 681.89 L1436.65 681.89 L1436.09 681.89 L1435.53 681.89 L1434.97 681.89 L1434.41 681.89 L1433.85 681.89 L1433.29 681.89 L1432.73 681.89 L1432.17 681.89 L1431.61 681.89 L1431.05 681.89 L1430.5 681.89 L1429.94 681.89 L1429.38 681.89 L1428.82 681.89 L1428.26 681.89 L1427.7 681.89 L1427.14 681.89 L1426.58 681.89 L1426.02 681.89 L1425.46 681.89 L1424.9 681.89 L1424.34 681.89 L1423.78 681.89 L1423.23 681.89 L1422.67 681.89 L1422.11 681.89 L1421.55 681.89 L1420.99 681.89 L1420.43 681.89 L1419.87 681.89 L1419.31 681.89 L1418.75 681.89 L1418.19 681.89 L1417.63 681.89 L1417.07 681.89 L1416.51 681.89 L1415.95 681.89 L1415.4 681.89 L1414.84 681.89 L1414.28 681.89 L1413.72 681.89 L1413.16 681.89 L1412.6 681.89 L1412.04 681.89 L1411.48 681.89 L1410.92 681.89 L1410.36 681.89 L1409.8 681.89 L1409.24 681.89 L1408.68 681.89 L1408.13 681.89 L1407.57 681.89 L1407.01 681.89 L1406.45 681.89 L1405.89 681.89 L1405.33 681.89 L1404.77 681.89 L1404.21 681.89 L1403.65 681.89 L1403.09 681.89 L1402.53 681.89 L1401.97 681.89 L1401.41 681.89 L1400.86 681.89 L1400.3 681.89 L1399.74 681.89 L1399.18 681.89 L1398.62 681.89 L1398.06 681.89 L1397.5 681.89 L1396.94 681.89 L1396.38 681.89 L1395.82 681.89 L1395.26 681.89 L1394.7 681.89 L1394.14 681.89 L1393.58 681.89 L1393.03 681.89 L1392.47 681.89 L1391.91 681.89 L1391.35 681.89 L1390.79 681.89 L1390.23 681.89 L1389.67 681.89 L1389.11 681.89 L1388.55 681.89 L1387.99 681.89 L1387.43 681.89 L1386.87 681.89 L1386.31 681.89 L1385.76 681.89 L1385.2 681.89 L1384.64 681.89 L1384.08 681.89 L1383.52 681.89 L1382.96 681.89 L1382.4 681.89 L1381.84 681.89 L1381.28 681.89 L1380.72 681.89 L1380.16 681.89 L1379.6 681.89 L1379.04 681.89 L1378.49 681.89 L1377.93 681.89 L1377.37 681.89 L1376.81 681.89 L1376.25 681.89 L1375.69 681.89 L1375.13 681.89 L1374.57 681.89 L1374.01 681.89 L1373.45 681.89 L1372.89 681.89 L1372.33 681.89 L1371.77 681.89 L1371.21 681.89 L1370.66 681.89 L1370.1 681.89 L1369.54 681.89 L1368.98 681.89 L1368.42 681.89 L1367.86 681.89 L1367.3 681.89 L1366.74 681.89 L1366.18 681.89 L1365.62 681.89 L1365.06 681.89 L1364.5 681.89 L1363.94 681.89 L1363.39 681.89 L1362.83 681.89 L1362.27 681.89 L1361.71 681.89 L1361.15 681.89 L1360.59 681.89 L1360.03 681.89 L1359.47 681.89 L1358.91 681.89 L1358.35 681.89 L1357.79 681.89 L1357.23 681.89 L1356.67 681.89 L1356.12 681.89 L1355.56 681.89 L1355 681.89 L1354.44 681.89 L1353.88 681.89 L1353.32 681.89 L1352.76 681.89 L1352.2 681.89 L1351.64 681.89 L1351.08 681.89 L1350.52 681.89 L1349.96 681.89 L1349.4 681.89 L1348.84 681.89 L1348.29 681.89 L1347.73 681.89 L1347.17 681.89 L1346.61 681.89 L1346.05 681.89 L1345.49 681.89 L1344.93 681.89 L1344.37 681.89 L1343.81 681.89 L1343.25 681.89 L1342.69 681.89 L1342.13 681.89 L1341.57 681.89 L1341.02 681.89 L1340.46 681.89 L1339.9 681.89 L1339.34 681.89 L1338.78 681.89 L1338.22 681.89 L1337.66 681.89 L1337.1 681.89 L1336.54 681.89 L1335.98 681.89 L1335.42 681.89 L1334.86 681.89 L1334.3 681.89 L1333.75 681.89 L1333.19 681.89 L1332.63 681.89 L1332.07 681.89 L1331.51 681.89 L1330.95 681.89 L1330.39 681.89 L1329.83 681.89 L1329.27 681.89 L1328.71 681.89 L1328.15 681.89 L1327.59 681.89 L1327.03 681.89 L1326.47 681.89 L1325.92 681.89 L1325.36 681.89 L1324.8 681.89 L1324.24 681.89 L1323.68 681.89 L1323.12 681.89 L1322.56 681.89 L1322 681.89 L1321.44 681.89 L1320.88 681.89 L1320.32 681.89 L1319.76 681.89 L1319.2 681.89 L1318.65 681.89 L1318.09 681.89 L1317.53 681.89 L1316.97 681.89 L1316.41 681.89 L1315.85 681.89 L1315.29 681.89 L1314.73 681.89 L1314.17 681.89 L1313.61 681.89 L1313.05 681.89 L1312.49 681.89 L1311.93 681.89 L1311.38 681.89 L1310.82 681.89 L1310.26 681.89 L1309.7 681.89 L1309.14 681.89 L1308.58 681.89 L1308.02 681.89 L1307.46 681.89 L1306.9 681.89 L1306.34 681.89 L1305.78 681.89 L1305.22 681.89 L1304.66 681.89 L1304.1 681.89 L1303.55 681.89 L1302.99 681.89 L1302.43 681.89 L1301.87 681.89 L1301.31 681.89 L1300.75 681.89 L1300.19 681.89 L1299.63 681.89 L1299.07 681.89 L1298.51 681.89 L1297.95 681.89 L1297.39 681.89 L1296.83 681.89 L1296.28 681.89 L1295.72 681.89 L1295.16 681.89 L1294.6 681.89 L1294.04 681.89 L1293.48 681.89 L1292.92 681.89 L1292.36 681.89 L1291.8 681.89 L1291.24 681.89 L1290.68 681.89 L1290.12 681.89 L1289.56 681.89 L1289 681.89 L1288.45 681.89 L1287.89 681.89 L1287.33 681.89 L1286.77 681.89 L1286.21 681.89 L1285.65 681.89 L1285.09 681.89 L1284.53 681.89 L1283.97 681.89 L1283.41 681.89 L1282.85 681.89 L1282.29 681.89 L1281.73 681.89 L1281.18 681.89 L1280.62 681.89 L1280.06 681.89 L1279.5 681.89 L1278.94 681.89 L1278.38 681.89 L1277.82 681.89 L1277.26 681.89 L1276.7 681.89 L1276.14 681.89 L1275.58 681.89 L1275.02 681.89 L1274.46 681.89 L1273.91 681.89 L1273.35 681.89 L1272.79 681.89 L1272.23 681.89 L1271.67 681.89 L1271.11 681.89 L1270.55 681.89 L1269.99 681.89 L1269.43 681.89 L1268.87 681.89 L1268.31 681.89 L1267.75 681.89 L1267.19 681.89 L1266.63 681.89 L1266.08 681.89 L1265.52 681.89 L1264.96 681.89 L1264.4 681.89 L1263.84 681.89 L1263.28 681.89 L1262.72 681.89 L1262.16 681.89 L1261.6 681.89 L1261.04 681.89 L1260.48 681.89 L1259.92 681.89 L1259.36 681.89 L1258.81 681.89 L1258.25 681.89 L1257.69 681.89 L1257.13 681.89 L1256.57 681.89 L1256.01 681.89 L1255.45 681.89 L1254.89 681.89 L1254.33 681.89 L1253.77 681.89 L1253.21 681.89 L1252.65 681.89 L1252.09 681.89 L1251.54 681.89 L1250.98 681.89 L1250.42 681.89 L1249.86 681.89 L1249.3 681.89 L1248.74 681.89 L1248.18 681.89 L1247.62 681.89 L1247.06 681.89 L1246.5 681.89 L1245.94 681.89 L1245.38 681.89 L1244.82 681.89 L1244.26 681.89 L1243.71 681.89 L1243.15 681.89 L1242.59 681.89 L1242.03 681.89 L1241.47 681.89 L1240.91 681.89 L1240.35 681.89 L1239.79 681.89 L1239.23 681.89 L1238.67 681.89 L1238.11 681.89 L1237.55 681.89 L1236.99 681.89 L1236.44 681.89 L1235.88 681.89 L1235.32 681.89 L1234.76 681.89 L1234.2 681.89 L1233.64 681.89 L1233.08 681.89 L1232.52 681.89 L1231.96 681.89 L1231.4 681.89 L1230.84 681.89 L1230.28 681.89 L1229.72 681.89 L1229.17 681.89 L1228.61 681.89 L1228.05 681.89 L1227.49 681.89 L1226.93 681.89 L1226.37 681.89 L1225.81 681.89 L1225.25 681.89 L1224.69 681.89 L1224.13 681.89 L1223.57 681.89 L1223.01 681.89 L1222.45 681.89 L1221.89 681.89 L1221.34 681.89 L1220.78 681.89 L1220.22 681.89 L1219.66 681.89 L1219.1 681.89 L1218.54 681.89 L1217.98 681.89 L1217.42 681.89 L1216.86 681.89 L1216.3 681.89 L1215.74 681.89 L1215.18 681.89 L1214.62 681.89 L1214.07 681.89 L1213.51 681.89 L1212.95 681.89 L1212.39 681.89 L1211.83 681.89 L1211.27 681.89 L1210.71 681.89 L1210.15 681.89 L1209.59 681.89 L1209.03 681.89 L1208.47 681.89 L1207.91 681.89 L1207.35 681.89 L1206.8 681.89 L1206.24 681.89 L1205.68 681.89 L1205.12 681.89 L1204.56 681.89 L1204 681.89 L1203.44 681.89 L1202.88 681.89 L1202.32 681.89 L1201.76 681.89 L1201.2 681.89 L1200.64 681.89 L1200.08 681.89 L1199.52 681.89 L1198.97 681.89 L1198.41 681.89 L1197.85 681.89 L1197.29 681.89 L1196.73 681.89 L1196.17 681.89 L1195.61 681.89 L1195.05 681.89 L1194.49 681.89 L1193.93 681.89 L1193.37 681.89 L1192.81 681.89 L1192.25 681.89 L1191.7 681.89 L1191.14 681.89 L1190.58 681.89 L1190.02 681.89 L1189.46 681.89 L1188.9 681.89 L1188.34 681.89 L1187.78 681.89 L1187.22 681.89 L1186.66 681.89 L1186.1 681.89 L1185.54 681.89 L1184.98 681.89 L1184.43 681.89 L1183.87 681.89 L1183.31 681.89 L1182.75 681.89 L1182.19 681.89 L1181.63 681.89 L1181.07 681.89 L1180.51 681.89 L1179.95 681.89 L1179.39 681.89 L1178.83 681.89 L1178.27 681.89 L1177.71 681.89 L1177.15 681.89 L1176.6 681.89 L1176.04 681.89 L1175.48 681.89 L1174.92 681.89 L1174.36 681.89 L1173.8 681.89 L1173.24 681.89 L1172.68 681.89 L1172.12 681.89 L1171.56 681.89 L1171 681.89 L1170.44 681.89 L1169.88 681.89 L1169.33 681.89 L1168.77 681.89 L1168.21 681.89 L1167.65 681.89 L1167.09 681.89 L1166.53 681.89 L1165.97 681.89 L1165.41 681.89 L1164.85 681.89 L1164.29 681.89 L1163.73 681.89 L1163.17 681.89 L1162.61 681.89 L1162.05 681.89 L1161.5 681.89 L1160.94 681.89 L1160.38 681.89 L1159.82 681.89 L1159.26 681.89 L1158.7 681.89 L1158.14 681.89 L1157.58 681.89 L1157.02 681.89 L1156.46 681.89 L1155.9 681.89 L1155.34 681.89 L1154.78 681.89 L1154.23 681.89 L1153.67 681.89 L1153.11 681.89 L1152.55 681.89 L1151.99 681.89 L1151.43 681.89 L1150.87 681.89 L1150.31 681.89 L1149.75 681.89 L1149.19 681.89 L1148.63 681.89 L1148.07 681.89 L1147.51 681.89 L1146.96 681.89 L1146.4 681.89 L1145.84 681.89 L1145.28 681.89 L1144.72 681.89 L1144.16 681.89 L1143.6 681.89 L1143.04 681.89 L1142.48 681.89 L1141.92 681.89 L1141.36 681.89 L1140.8 681.89 L1140.24 681.89 L1139.68 681.89 L1139.13 681.89 L1138.57 681.89 L1138.01 681.89 L1137.45 681.89 L1136.89 681.89 L1136.33 681.89 L1135.77 681.89 L1135.21 681.89 L1134.65 681.89 L1134.09 681.89 L1133.53 681.89 L1132.97 681.89 L1132.41 681.89 L1131.86 681.89 L1131.3 681.89 L1130.74 681.89 L1130.18 681.89 L1129.62 681.89 L1129.06 681.89 L1128.5 681.89 L1127.94 681.89 L1127.38 681.89 L1126.82 681.89 L1126.26 681.89 L1125.7 681.89 L1125.14 681.89 L1124.59 681.89 L1124.03 681.89 L1123.47 681.89 L1122.91 681.89 L1122.35 681.89 L1121.79 681.89 L1121.23 681.89 L1120.67 681.89 L1120.11 681.89 L1119.55 681.89 L1118.99 681.89 L1118.43 681.89 L1117.87 681.89 L1117.31 681.89 L1116.76 681.89 L1116.2 681.89 L1115.64 681.89 L1115.08 681.89 L1114.52 681.89 L1113.96 681.89 L1113.4 681.89 L1112.84 681.89 L1112.28 681.89 L1111.72 681.89 L1111.16 681.89 L1110.6 681.89 L1110.04 681.89 L1109.49 681.89 L1108.93 681.89 L1108.37 681.89 L1107.81 681.89 L1107.25 681.89 L1106.69 681.89 L1106.13 681.89 L1105.57 681.89 L1105.01 681.89 L1104.45 681.89 L1103.89 681.89 L1103.33 681.89 L1102.77 681.89 L1102.22 681.89 L1101.66 681.89 L1101.1 681.89 L1100.54 681.89 L1099.98 681.89 L1099.42 681.89 L1098.86 681.89 L1098.3 681.89 L1097.74 681.89 L1097.18 681.89 L1096.62 681.89 L1096.06 681.89 L1095.5 681.89 L1094.94 681.89 L1094.39 681.89 L1093.83 681.89 L1093.27 681.89 L1092.71 681.89 L1092.15 681.89 L1091.59 681.89 L1091.03 681.89 L1090.47 681.89 L1089.91 681.89 L1089.35 681.89 L1088.79 681.89 L1088.23 681.89 L1087.67 681.89 L1087.12 681.89 L1086.56 681.89 L1086 681.89 L1085.44 681.89 L1084.88 681.89 L1084.32 681.89 L1083.76 681.89 L1083.2 681.89 L1082.64 681.89 L1082.08 681.89 L1081.52 681.89 L1080.96 681.89 L1080.4 681.89 L1079.85 681.89 L1079.29 681.89 L1078.73 681.89 L1078.17 681.89 L1077.61 681.89 L1077.05 681.89 L1076.49 681.89 L1075.93 681.89 L1075.37 681.89 L1074.81 681.89 L1074.25 681.89 L1073.69 681.89 L1073.13 681.89 L1072.57 681.89 L1072.02 681.89 L1071.46 681.89 L1070.9 681.89 L1070.34 681.89 L1069.78 681.89 L1069.22 681.89 L1068.66 681.89 L1068.1 681.89 L1067.54 681.89 L1066.98 681.89 L1066.42 681.89 L1065.86 681.89 L1065.3 681.89 L1064.75 681.89 L1064.19 681.89 L1063.63 681.89 L1063.07 681.89 L1062.51 681.89 L1061.95 681.89 L1061.39 681.89 L1060.83 681.89 L1060.27 681.89 L1059.71 681.89 L1059.15 681.89 L1058.59 681.89 L1058.03 681.89 L1057.48 681.89 L1056.92 681.89 L1056.36 681.89 L1055.8 681.89 L1055.24 681.89 L1054.68 681.89 L1054.12 681.89 L1053.56 681.89 L1053 681.89 L1052.44 681.89 L1051.88 681.89 L1051.32 681.89 L1050.76 681.89 L1050.2 681.89 L1049.65 681.89 L1049.09 681.89 L1048.53 681.89 L1047.97 681.89 L1047.41 681.89 L1046.85 681.89 L1046.29 681.89 L1045.73 681.89 L1045.17 681.89 L1044.61 681.89 L1044.05 681.89 L1043.49 681.89 L1042.93 681.89 L1042.38 681.89 L1041.82 681.89 L1041.26 681.89 L1040.7 681.89 L1040.14 681.89 L1039.58 681.89 L1039.02 681.89 L1038.46 681.89 L1037.9 681.89 L1037.34 681.89 L1036.78 681.89 L1036.22 681.89 L1035.66 681.89 L1035.1 681.89 L1034.55 681.89 L1033.99 681.89 L1033.43 681.89 L1032.87 681.89 L1032.31 681.89 L1031.75 681.89 L1031.19 681.89 L1030.63 681.89 L1030.07 681.89 L1029.51 681.89 L1028.95 681.89 L1028.39 681.89 L1027.83 681.89 L1027.28 681.89 L1026.72 681.89 L1026.16 681.89 L1025.6 681.89 L1025.04 681.89 L1024.48 681.89 L1023.92 681.89 L1023.36 681.89 L1022.8 681.89 L1022.24 681.89 L1021.68 681.89 L1021.12 681.89 L1020.56 681.89 L1020.01 681.89 L1019.45 681.89 L1018.89 681.89 L1018.33 681.89 L1017.77 681.89 L1017.21 681.89 L1016.65 681.89 L1016.09 681.89 L1015.53 681.89 L1014.97 681.89 L1014.41 681.89 L1013.85 681.89 L1013.29 681.89 L1012.73 681.89 L1012.18 681.89 L1011.62 681.89 L1011.06 681.89 L1010.5 681.89 L1009.94 681.89 L1009.38 681.89 L1008.82 681.89 L1008.26 681.89 L1007.7 681.89 L1007.14 681.89 L1006.58 681.89 L1006.02 681.89 L1005.46 681.89 L1004.91 681.89 L1004.35 681.89 L1003.79 681.89 L1003.23 681.89 L1002.67 681.89 L1002.11 681.89 L1001.55 681.89 L1000.99 681.89 L1000.43 681.89 L999.872 681.89 L999.313 681.89 L998.754 681.89 L998.194 681.89 L997.635 681.89 L997.076 681.89 L996.517 681.89 L995.957 681.89 L995.398 681.89 L994.839 681.89 L994.28 681.89 L993.72 681.89 L993.161 681.89 L992.602 681.89 L992.043 681.89 L991.483 681.89 L990.924 681.89 L990.365 681.89 L989.806 681.89 L989.246 681.89 L988.687 681.89 L988.128 681.89 L987.569 681.89 L987.009 681.89 L986.45 681.89 L985.891 681.89 L985.332 681.89 L984.772 681.89 L984.213 681.89 L983.654 681.89 L983.095 681.89 L982.535 681.89 L981.976 681.89 L981.417 681.89 L980.858 681.89 L980.298 681.89 L979.739 681.89 L979.18 681.89 L978.621 681.89 L978.061 681.89 L977.502 681.89 L976.943 681.89 L976.384 681.89 L975.824 681.89 L975.265 681.89 L974.706 681.89 L974.147 681.89 L973.587 681.89 L973.028 681.89 L972.469 681.89 L971.91 681.89 L971.35 681.89 L970.791 681.89 L970.232 681.89 L969.673 681.89 L969.113 681.89 L968.554 681.89 L967.995 681.89 L967.436 681.89 L966.876 681.89 L966.317 681.89 L965.758 681.89 L965.199 681.89 L964.639 681.89 L964.08 681.89 L963.521 681.89 L962.962 681.89 L962.402 681.89 L961.843 681.89 L961.284 681.89 L960.725 681.89 L960.165 681.89 L959.606 681.89 L959.047 681.89 L958.488 681.89 L957.928 681.89 L957.369 681.89 L956.81 681.89 L956.251 681.89 L955.691 681.89 L955.132 681.89 L954.573 681.89 L954.014 681.89 L953.454 681.89 L952.895 681.89 L952.336 681.89 L951.777 681.89 L951.217 681.89 L950.658 681.89 L950.099 681.89 L949.54 681.89 L948.98 681.89 L948.421 681.89 L947.862 681.89 L947.303 681.89 L946.743 681.89 L946.184 681.89 L945.625 681.89 L945.066 681.89 L944.506 681.89 L943.947 681.89 L943.388 681.89 L942.829 681.89 L942.269 681.89 L941.71 681.89 L941.151 681.89 L940.592 681.89 L940.032 681.89 L939.473 681.89 L938.914 681.89 L938.355 681.89 L937.795 681.89 L937.236 681.89 L936.677 681.89 L936.118 681.89 L935.558 681.89 L934.999 681.89 L934.44 681.89 L933.881 681.89 L933.321 681.89 L932.762 681.89 L932.203 681.89 L931.644 681.89 L931.084 681.89 L930.525 681.89 L929.966 681.89 L929.406 681.89 L928.847 681.89 L928.288 681.89 L927.729 681.89 L927.169 681.89 L926.61 681.89 L926.051 681.89 L925.492 681.89 L924.932 681.89 L924.373 681.89 L923.814 681.89 L923.255 681.89 L922.695 681.89 L922.136 681.89 L921.577 681.89 L921.018 681.89 L920.458 681.89 L919.899 681.89 L919.34 681.89 L918.781 681.89 L918.221 681.89 L917.662 681.89 L917.103 681.89 L916.544 681.89 L915.984 681.89 L915.425 681.89 L914.866 681.89 L914.307 681.89 L913.747 681.89 L913.188 681.89 L912.629 681.89 L912.07 681.89 L911.51 681.89 L910.951 681.89 L910.392 681.89 L909.833 681.89 L909.273 681.89 L908.714 681.89 L908.155 681.89 L907.596 681.89 L907.036 681.89 L906.477 681.89 L905.918 681.89 L905.359 681.89 L904.799 681.89 L904.24 681.89 L903.681 681.89 L903.122 681.89 L902.562 681.89 L902.003 681.89 L901.444 681.89 L900.885 681.89 L900.325 681.89 L899.766 681.89 L899.207 681.89 L898.648 681.89 L898.088 681.89 L897.529 681.89 L896.97 681.89 L896.411 681.89 L895.851 681.89 L895.292 681.89 L894.733 681.89 L894.174 681.89 L893.614 681.89 L893.055 681.89 L892.496 681.89 L891.937 681.89 L891.377 681.89 L890.818 681.89 L890.259 681.89 L889.7 681.89 L889.14 681.89 L888.581 681.89 L888.022 681.89 L887.463 681.89 L886.903 681.89 L886.344 681.89 L885.785 681.89 L885.226 681.89 L884.666 681.89 L884.107 681.89 L883.548 681.89 L882.989 681.89 L882.429 681.89 L881.87 681.89 L881.311 681.89 L880.752 681.89 L880.192 681.89 L879.633 681.89 L879.074 681.89 L878.515 681.89 L877.955 681.89 L877.396 681.89 L876.837 681.89 L876.278 681.89 L875.718 681.89 L875.159 681.89 L874.6 681.89 L874.041 681.89 L873.481 681.89 L872.922 681.89 L872.363 681.89 L871.804 681.89 L871.244 681.89 L870.685 681.89 L870.126 681.89 L869.567 681.89 L869.007 681.89 L868.448 681.89 L867.889 681.89 L867.33 681.89 L866.77 681.89 L866.211 681.89 L865.652 681.89 L865.093 681.89 L864.533 681.89 L863.974 681.89 L863.415 681.89 L862.856 681.89 L862.296 681.89 L861.737 681.89 L861.178 681.89 L860.619 681.89 L860.059 681.89 L859.5 681.89 L858.941 681.89 L858.382 681.89 L857.822 681.89 L857.263 681.89 L856.704 681.89 L856.145 681.89 L855.585 681.89 L855.026 681.89 L854.467 681.89 L853.908 681.89 L853.348 681.89 L852.789 681.89 L852.23 681.89 L851.671 681.89 L851.111 681.89 L850.552 681.89 L849.993 681.89 L849.434 681.89 L848.874 681.89 L848.315 681.89 L847.756 681.89 L847.197 681.89 L846.637 681.89 L846.078 681.89 L845.519 681.89 L844.96 681.89 L844.4 681.89 L843.841 681.89 L843.282 681.89 L842.723 681.89 L842.163 681.89 L841.604 681.89 L841.045 681.89 L840.486 681.89 L839.926 681.89 L839.367 681.89 L838.808 681.89 L838.249 681.89 L837.689 681.89 L837.13 681.89 L836.571 681.89 L836.012 681.89 L835.452 681.89 L834.893 681.89 L834.334 681.89 L833.775 681.89 L833.215 681.89 L832.656 681.89 L832.097 681.89 L831.538 681.89 L830.978 681.89 L830.419 681.89 L829.86 681.89 L829.301 681.89 L828.741 681.89 L828.182 681.89 L827.623 681.89 L827.064 681.89 L826.504 681.89 L825.945 681.89 L825.386 681.89 L824.827 681.89 L824.267 681.89 L823.708 681.89 L823.149 681.89 L822.59 681.89 L822.03 681.89 L821.471 681.89 L820.912 681.89 L820.353 681.89 L819.793 681.89 L819.234 681.89 L818.675 681.89 L818.116 681.89 L817.556 681.89 L816.997 681.89 L816.438 681.89 L815.879 681.89 L815.319 681.89 L814.76 681.89 L814.201 681.89 L813.642 681.89 L813.082 681.89 L812.523 681.89 L811.964 681.89 L811.405 681.89 L810.845 681.89 L810.286 681.89 L809.727 681.89 L809.168 681.89 L808.608 681.89 L808.049 681.89 L807.49 681.89 L806.931 681.89 L806.371 681.89 L805.812 681.89 L805.253 681.89 L804.693 681.89 L804.134 681.89 L803.575 681.89 L803.016 681.89 L802.456 681.89 L801.897 681.89 L801.338 681.89 L800.779 681.89 L800.219 681.89 L799.66 681.89 L799.101 681.89 L798.542 681.89 L797.982 681.89 L797.423 681.89 L796.864 681.89 L796.305 681.89 L795.745 681.89 L795.186 681.89 L794.627 681.89 L794.068 681.89 L793.508 681.89 L792.949 681.89 L792.39 681.89 L791.831 681.89 L791.271 681.89 L790.712 681.89 L790.153 681.89 L789.594 681.89 L789.034 681.89 L788.475 681.89 L787.916 681.89 L787.357 681.89 L786.797 681.89 L786.238 681.89 L785.679 681.89 L785.12 681.89 L784.56 681.89 L784.001 681.89 L783.442 681.89 L782.883 681.89 L782.323 681.89 L781.764 681.89 L781.205 681.89 L780.646 681.89 L780.086 681.89 L779.527 681.89 L778.968 681.89 L778.409 681.89 L777.849 681.89 L777.29 681.89 L776.731 681.89 L776.172 681.89 L775.612 681.89 L775.053 681.89 L774.494 681.89 L773.935 681.89 L773.375 681.89 L772.816 681.89 L772.257 681.89 L771.698 681.89 L771.138 681.89 L770.579 681.89 L770.02 681.89 L769.461 681.89 L768.901 681.89 L768.342 681.89 L767.783 681.89 L767.224 681.89 L766.664 681.89 L766.105 681.89 L765.546 681.89 L764.987 681.89 L764.427 681.89 L763.868 681.89 L763.309 681.89 L762.75 681.89 L762.19 681.89 L761.631 681.89 L761.072 681.89 L760.513 681.89 L759.953 681.89 L759.394 681.89 L758.835 681.89 L758.276 681.89 L757.716 681.89 L757.157 681.89 L756.598 681.89 L756.039 681.89 L755.479 681.89 L754.92 681.89 L754.361 681.89 L753.802 681.89 L753.242 681.89 L752.683 681.89 L752.124 681.89 L751.565 681.89 L751.005 681.89 L750.446 681.89 L749.887 681.89 L749.328 681.89 L748.768 681.89 L748.209 681.89 L747.65 681.89 L747.091 681.89 L746.531 681.89 L745.972 681.89 L745.413 681.89 L744.854 681.89 L744.294 681.89 L743.735 681.89 L743.176 681.89 L742.617 681.89 L742.057 681.89 L741.498 681.89 L740.939 681.89 L740.38 681.89 L739.82 681.89 L739.261 681.89 L738.702 681.89 L738.143 681.89 L737.583 681.89 L737.024 681.89 L736.465 681.89 L735.906 681.89 L735.346 681.89 L734.787 681.89 L734.228 681.89 L733.669 681.89 L733.109 681.89 L732.55 681.89 L731.991 681.89 L731.432 681.89 L730.872 681.89 L730.313 681.89 L729.754 681.89 L729.195 681.89 L728.635 681.89 L728.076 681.89 L727.517 681.89 L726.958 681.89 L726.398 681.89 L725.839 681.89 L725.28 681.89 L724.721 681.89 L724.161 681.89 L723.602 681.89 L723.043 681.89 L722.484 681.89 L721.924 681.89 L721.365 681.89 L720.806 681.89 L720.247 681.89  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.759 720.806,685.759 721.365,685.759 721.924,685.759 722.484,685.759 723.043,685.759 723.602,685.759 724.161,685.759 724.721,685.759 725.28,685.759 725.839,685.759 726.398,685.759 726.958,685.759 727.517,685.759 728.076,685.759 728.635,685.759 729.195,685.759 729.754,685.759 730.313,685.759 730.872,685.759 731.432,685.759 731.991,685.759 732.55,685.759 733.109,685.759 733.669,685.759 734.228,685.759 734.787,685.759 735.346,685.759 735.906,685.759 736.465,685.759 737.024,685.759 737.583,685.759 738.143,685.759 738.702,685.759 739.261,685.759 739.82,685.759 740.38,685.759 740.939,685.759 741.498,685.759 742.057,685.759 742.617,685.759 743.176,685.759 743.735,685.759 744.294,685.759 744.854,685.759 745.413,685.759 745.972,685.759 746.531,685.759 747.091,685.759 747.65,685.759 748.209,685.759 748.768,685.759 749.328,685.759 749.887,685.759 750.446,685.759 751.005,685.759 751.565,685.759 752.124,685.759 752.683,685.759 753.242,685.759 753.802,685.759 754.361,685.759 754.92,685.759 755.479,685.759 756.039,685.759 756.598,685.759 757.157,685.759 757.716,685.759 758.276,685.759 758.835,685.759 759.394,685.759 759.953,685.759 760.513,685.759 761.072,685.759 761.631,685.759 762.19,685.759 762.75,685.759 763.309,685.759 763.868,685.759 764.427,685.759 764.987,685.759 765.546,685.759 766.105,685.759 766.664,685.759 767.224,685.759 767.783,685.759 768.342,685.759 768.901,685.759 769.461,685.759 770.02,685.759 770.579,685.759 771.138,685.759 771.698,685.759 772.257,685.759 772.816,685.759 773.375,685.759 773.935,685.759 774.494,685.759 775.053,685.759 775.612,685.759 776.172,685.759 776.731,685.759 777.29,685.759 777.849,685.759 778.409,685.759 778.968,685.759 779.527,685.759 780.086,685.759 780.646,685.759 781.205,685.759 781.764,685.759 782.323,685.759 782.883,685.759 783.442,685.759 784.001,685.759 784.56,685.759 785.12,685.759 785.679,685.759 786.238,685.759 786.797,685.759 787.357,685.759 787.916,685.759 788.475,685.759 789.034,685.759 789.594,685.759 790.153,685.759 790.712,685.759 791.271,685.759 791.831,685.759 792.39,685.759 792.949,685.759 793.508,685.759 794.068,685.759 794.627,685.759 795.186,685.759 795.745,685.759 796.305,685.759 796.864,685.759 797.423,685.759 797.982,685.759 798.542,685.759 799.101,685.759 799.66,685.759 800.219,685.759 800.779,685.759 801.338,685.759 801.897,685.759 802.456,685.759 803.016,685.759 803.575,685.759 804.134,685.759 804.693,685.759 805.253,685.759 805.812,685.759 806.371,685.759 806.931,685.759 807.49,685.759 808.049,685.759 808.608,685.759 809.168,685.759 809.727,685.759 810.286,685.759 810.845,685.759 811.405,685.759 811.964,685.759 812.523,685.759 813.082,685.759 813.642,685.759 814.201,685.759 814.76,685.759 815.319,685.759 815.879,685.759 816.438,685.759 816.997,685.759 817.556,685.759 818.116,685.759 818.675,685.759 819.234,685.759 819.793,685.759 820.353,685.759 820.912,685.759 821.471,685.759 822.03,685.759 822.59,685.759 823.149,685.759 823.708,685.759 824.267,685.759 824.827,685.759 825.386,685.759 825.945,685.759 826.504,685.759 827.064,685.759 827.623,685.759 828.182,685.759 828.741,685.759 829.301,685.759 829.86,685.759 830.419,685.759 830.978,685.759 831.538,685.759 832.097,685.759 832.656,685.759 833.215,685.759 833.775,685.759 834.334,685.759 834.893,685.759 835.452,685.759 836.012,685.759 836.571,685.759 837.13,685.759 837.689,685.759 838.249,685.759 838.808,685.759 839.367,685.759 839.926,685.759 840.486,685.759 841.045,685.759 841.604,685.759 842.163,685.759 842.723,685.759 843.282,685.759 843.841,685.759 844.4,685.759 844.96,685.759 845.519,685.759 846.078,685.759 846.637,685.759 847.197,685.759 847.756,685.759 848.315,685.759 848.874,685.759 849.434,685.759 849.993,685.759 850.552,685.759 851.111,685.759 851.671,685.759 852.23,685.759 852.789,685.759 853.348,685.759 853.908,685.759 854.467,685.759 855.026,685.759 855.585,685.759 856.145,685.759 856.704,685.759 857.263,685.759 857.822,685.759 858.382,685.759 858.941,685.759 859.5,685.759 860.059,685.759 860.619,685.759 861.178,685.759 861.737,685.759 862.296,685.759 862.856,685.759 863.415,685.759 863.974,685.759 864.533,685.759 865.093,685.759 865.652,685.759 866.211,685.759 866.77,685.759 867.33,685.759 867.889,685.759 868.448,685.759 869.007,685.759 869.567,685.759 870.126,685.759 870.685,685.759 871.244,685.759 871.804,685.759 872.363,685.759 872.922,685.759 873.481,685.759 874.041,685.759 874.6,685.759 875.159,685.759 875.718,685.759 876.278,685.759 876.837,685.759 877.396,685.759 877.955,685.759 878.515,685.759 879.074,685.759 879.633,685.759 880.192,685.759 880.752,685.759 881.311,685.759 881.87,685.759 882.429,685.759 882.989,685.759 883.548,685.759 884.107,685.759 884.666,685.759 885.226,685.759 885.785,685.759 886.344,685.759 886.903,685.759 887.463,685.759 888.022,685.759 888.581,685.759 889.14,685.759 889.7,685.759 890.259,685.759 890.818,685.759 891.377,685.759 891.937,685.759 892.496,685.759 893.055,685.759 893.614,685.759 894.174,685.759 894.733,685.759 895.292,685.759 895.851,685.759 896.411,685.759 896.97,685.759 897.529,685.759 898.088,685.759 898.648,685.759 899.207,685.759 899.766,685.759 900.325,685.759 900.885,685.759 901.444,685.759 902.003,685.759 902.562,685.759 903.122,685.759 903.681,685.759 904.24,685.759 904.799,685.759 905.359,685.759 905.918,685.759 906.477,685.759 907.036,685.759 907.596,685.759 908.155,685.759 908.714,685.759 909.273,685.759 909.833,685.759 910.392,685.759 910.951,685.759 911.51,685.759 912.07,685.759 912.629,685.759 913.188,685.759 913.747,685.759 914.307,685.759 914.866,685.759 915.425,685.759 915.984,685.759 916.544,685.759 917.103,685.759 917.662,685.759 918.221,685.759 918.781,685.759 919.34,685.759 919.899,685.759 920.458,685.759 921.018,685.759 921.577,685.759 922.136,685.759 922.695,685.759 923.255,685.759 923.814,685.759 924.373,685.759 924.932,685.759 925.492,685.759 926.051,685.759 926.61,685.759 927.169,685.759 927.729,685.759 928.288,685.759 928.847,685.759 929.406,685.759 929.966,685.759 930.525,685.759 931.084,685.759 931.644,685.759 932.203,685.759 932.762,685.759 933.321,685.759 933.881,685.759 934.44,685.759 934.999,685.759 935.558,685.759 936.118,685.759 936.677,685.759 937.236,685.759 937.795,685.759 938.355,685.759 938.914,685.759 939.473,685.759 940.032,685.759 940.592,685.759 941.151,685.759 941.71,685.759 942.269,685.759 942.829,685.759 943.388,685.759 943.947,685.759 944.506,685.759 945.066,685.759 945.625,685.759 946.184,685.759 946.743,685.759 947.303,685.759 947.862,685.759 948.421,685.759 948.98,685.759 949.54,685.759 950.099,685.759 950.658,685.759 951.217,685.759 951.777,685.759 952.336,685.759 952.895,685.759 953.454,685.759 954.014,685.759 954.573,685.759 955.132,685.759 955.691,685.759 956.251,685.759 956.81,685.759 957.369,685.759 957.928,685.759 958.488,685.759 959.047,685.759 959.606,685.759 960.165,685.759 960.725,685.759 961.284,685.759 961.843,685.759 962.402,685.759 962.962,685.759 963.521,685.759 964.08,685.759 964.639,685.759 965.199,685.759 965.758,685.759 966.317,685.759 966.876,685.759 967.436,685.759 967.995,685.759 968.554,685.759 969.113,685.759 969.673,685.759 970.232,685.759 970.791,685.759 971.35,685.759 971.91,685.759 972.469,685.759 973.028,685.759 973.587,685.759 974.147,685.759 974.706,685.759 975.265,685.759 975.824,685.759 976.384,685.759 976.943,685.759 977.502,685.759 978.061,685.759 978.621,685.759 979.18,685.759 979.739,685.759 980.298,685.759 980.858,685.759 981.417,685.759 981.976,685.759 982.535,685.759 983.095,685.759 983.654,685.759 984.213,685.759 984.772,685.759 985.332,685.759 985.891,685.759 986.45,685.759 987.009,685.759 987.569,685.759 988.128,685.759 988.687,685.759 989.246,685.759 989.806,685.759 990.365,685.759 990.924,685.759 991.483,685.759 992.043,685.759 992.602,685.759 993.161,685.759 993.72,685.759 994.28,685.759 994.839,685.759 995.398,685.759 995.957,685.759 996.517,685.759 997.076,685.759 997.635,685.759 998.194,685.759 998.754,685.759 999.313,685.759 999.872,685.759 1000.43,685.759 1000.99,685.759 1001.55,685.759 1002.11,685.759 1002.67,685.759 1003.23,685.759 1003.79,685.759 1004.35,685.759 1004.91,685.759 1005.46,685.759 1006.02,685.759 1006.58,685.759 1007.14,685.759 1007.7,685.759 1008.26,685.759 1008.82,685.759 1009.38,685.759 1009.94,685.759 1010.5,685.759 1011.06,685.759 1011.62,685.759 1012.18,685.759 1012.73,685.759 1013.29,685.759 1013.85,685.759 1014.41,685.759 1014.97,685.759 1015.53,685.759 1016.09,685.759 1016.65,685.759 1017.21,685.759 1017.77,685.759 1018.33,685.759 1018.89,685.759 1019.45,685.759 1020.01,685.759 1020.56,685.759 1021.12,685.759 1021.68,685.759 1022.24,685.759 1022.8,685.759 1023.36,685.759 1023.92,685.759 1024.48,685.759 1025.04,685.759 1025.6,685.759 1026.16,685.759 1026.72,685.759 1027.28,685.759 1027.83,685.759 1028.39,685.759 1028.95,685.759 1029.51,685.759 1030.07,685.759 1030.63,685.759 1031.19,685.759 1031.75,685.759 1032.31,685.759 1032.87,685.759 1033.43,685.759 1033.99,685.759 1034.55,685.759 1035.1,685.759 1035.66,685.759 1036.22,685.759 1036.78,685.759 1037.34,685.759 1037.9,685.759 1038.46,685.759 1039.02,685.759 1039.58,685.759 1040.14,685.759 1040.7,685.759 1041.26,685.759 1041.82,685.759 1042.38,685.759 1042.93,685.759 1043.49,685.759 1044.05,685.759 1044.61,685.759 1045.17,685.759 1045.73,685.759 1046.29,685.759 1046.85,685.759 1047.41,685.759 1047.97,685.759 1048.53,685.759 1049.09,685.759 1049.65,685.759 1050.2,685.759 1050.76,685.759 1051.32,685.759 1051.88,685.759 1052.44,685.759 1053,685.759 1053.56,685.759 1054.12,685.759 1054.68,685.759 1055.24,685.759 1055.8,685.759 1056.36,685.759 1056.92,685.759 1057.48,685.759 1058.03,685.759 1058.59,685.759 1059.15,685.759 1059.71,685.759 1060.27,685.759 1060.83,685.759 1061.39,685.759 1061.95,685.759 1062.51,685.759 1063.07,685.759 1063.63,685.759 1064.19,685.759 1064.75,685.759 1065.3,685.759 1065.86,685.759 1066.42,685.759 1066.98,685.759 1067.54,685.759 1068.1,685.759 1068.66,685.759 1069.22,685.759 1069.78,685.759 1070.34,685.759 1070.9,685.759 1071.46,685.759 1072.02,685.759 1072.57,685.759 1073.13,685.759 1073.69,685.759 1074.25,685.759 1074.81,685.759 1075.37,685.759 1075.93,685.759 1076.49,685.759 1077.05,685.759 1077.61,685.759 1078.17,685.759 1078.73,685.759 1079.29,685.759 1079.85,685.759 1080.4,685.759 1080.96,685.759 1081.52,685.759 1082.08,685.759 1082.64,685.759 1083.2,685.759 1083.76,685.759 1084.32,685.759 1084.88,685.759 1085.44,685.759 1086,685.759 1086.56,685.759 1087.12,685.759 1087.67,685.759 1088.23,685.759 1088.79,685.759 1089.35,685.759 1089.91,685.759 1090.47,685.759 1091.03,685.759 1091.59,685.759 1092.15,685.759 1092.71,685.759 1093.27,685.759 1093.83,685.759 1094.39,685.759 1094.94,685.759 1095.5,685.759 1096.06,685.759 1096.62,685.759 1097.18,685.759 1097.74,685.759 1098.3,685.759 1098.86,685.759 1099.42,685.759 1099.98,685.759 1100.54,685.759 1101.1,685.759 1101.66,685.759 1102.22,685.759 1102.77,685.759 1103.33,685.759 1103.89,685.759 1104.45,685.759 1105.01,685.759 1105.57,685.759 1106.13,685.759 1106.69,685.759 1107.25,685.759 1107.81,685.759 1108.37,685.759 1108.93,685.759 1109.49,685.759 1110.04,685.759 1110.6,685.759 1111.16,685.759 1111.72,685.759 1112.28,685.759 1112.84,685.759 1113.4,685.759 1113.96,685.759 1114.52,685.759 1115.08,685.759 1115.64,685.759 1116.2,685.759 1116.76,685.759 1117.31,685.759 1117.87,685.759 1118.43,685.759 1118.99,685.759 1119.55,685.759 1120.11,685.759 1120.67,685.759 1121.23,685.759 1121.79,685.759 1122.35,685.759 1122.91,685.759 1123.47,685.759 1124.03,685.759 1124.59,685.759 1125.14,685.759 1125.7,685.759 1126.26,685.759 1126.82,685.759 1127.38,685.759 1127.94,685.759 1128.5,685.759 1129.06,685.759 1129.62,685.759 1130.18,685.759 1130.74,685.759 1131.3,685.759 1131.86,685.759 1132.41,685.759 1132.97,685.759 1133.53,685.759 1134.09,685.759 1134.65,685.759 1135.21,685.759 1135.77,685.759 1136.33,685.759 1136.89,685.759 1137.45,685.759 1138.01,685.759 1138.57,685.759 1139.13,685.759 1139.68,685.759 1140.24,685.759 1140.8,685.759 1141.36,685.759 1141.92,685.759 1142.48,685.759 1143.04,685.759 1143.6,685.759 1144.16,685.759 1144.72,685.759 1145.28,685.759 1145.84,685.759 1146.4,685.759 1146.96,685.759 1147.51,685.759 1148.07,685.759 1148.63,685.759 1149.19,685.759 1149.75,685.759 1150.31,685.759 1150.87,685.759 1151.43,685.759 1151.99,685.759 1152.55,685.759 1153.11,685.759 1153.67,685.759 1154.23,685.759 1154.78,685.759 1155.34,685.759 1155.9,685.759 1156.46,685.759 1157.02,685.759 1157.58,685.759 1158.14,685.759 1158.7,685.759 1159.26,685.759 1159.82,685.759 1160.38,685.759 1160.94,685.759 1161.5,685.759 1162.05,685.759 1162.61,685.759 1163.17,685.759 1163.73,685.759 1164.29,685.759 1164.85,685.759 1165.41,685.759 1165.97,685.759 1166.53,685.759 1167.09,685.759 1167.65,685.759 1168.21,685.759 1168.77,685.759 1169.33,685.759 1169.88,685.759 1170.44,685.759 1171,685.759 1171.56,685.759 1172.12,685.759 1172.68,685.759 1173.24,685.759 1173.8,685.759 1174.36,685.759 1174.92,685.759 1175.48,685.759 1176.04,685.759 1176.6,685.759 1177.15,685.759 1177.71,685.759 1178.27,685.759 1178.83,685.759 1179.39,685.759 1179.95,685.759 1180.51,685.759 1181.07,685.759 1181.63,685.759 1182.19,685.759 1182.75,685.759 1183.31,685.759 1183.87,685.759 1184.43,685.759 1184.98,685.759 1185.54,685.759 1186.1,685.759 1186.66,685.759 1187.22,685.759 1187.78,685.759 1188.34,685.759 1188.9,685.759 1189.46,685.759 1190.02,685.759 1190.58,685.759 1191.14,685.759 1191.7,685.759 1192.25,685.759 1192.81,685.759 1193.37,685.759 1193.93,685.759 1194.49,685.759 1195.05,685.759 1195.61,685.759 1196.17,685.759 1196.73,685.759 1197.29,685.759 1197.85,685.759 1198.41,685.759 1198.97,685.759 1199.52,685.759 1200.08,685.759 1200.64,685.759 1201.2,685.759 1201.76,685.759 1202.32,685.759 1202.88,685.759 1203.44,685.759 1204,685.759 1204.56,685.759 1205.12,685.759 1205.68,685.759 1206.24,685.759 1206.8,685.759 1207.35,685.759 1207.91,685.759 1208.47,685.759 1209.03,685.759 1209.59,685.759 1210.15,685.759 1210.71,685.759 1211.27,685.759 1211.83,685.759 1212.39,685.759 1212.95,685.759 1213.51,685.759 1214.07,685.759 1214.62,685.759 1215.18,685.759 1215.74,685.759 1216.3,685.759 1216.86,685.759 1217.42,685.759 1217.98,685.759 1218.54,685.759 1219.1,685.759 1219.66,685.759 1220.22,685.759 1220.78,685.759 1221.34,685.759 1221.89,685.759 1222.45,685.759 1223.01,685.759 1223.57,685.759 1224.13,685.759 1224.69,685.759 1225.25,685.759 1225.81,685.759 1226.37,685.759 1226.93,685.759 1227.49,685.759 1228.05,685.759 1228.61,685.759 1229.17,685.759 1229.72,685.759 1230.28,685.759 1230.84,685.759 1231.4,685.759 1231.96,685.759 1232.52,685.759 1233.08,685.759 1233.64,685.759 1234.2,685.759 1234.76,685.759 1235.32,685.759 1235.88,685.759 1236.44,685.759 1236.99,685.759 1237.55,685.759 1238.11,685.759 1238.67,685.759 1239.23,685.759 1239.79,685.759 1240.35,685.759 1240.91,685.759 1241.47,685.759 1242.03,685.759 1242.59,685.759 1243.15,685.759 1243.71,685.759 1244.26,685.759 1244.82,685.759 1245.38,685.759 1245.94,685.759 1246.5,685.759 1247.06,685.759 1247.62,685.759 1248.18,685.759 1248.74,685.759 1249.3,685.759 1249.86,685.759 1250.42,685.759 1250.98,685.759 1251.54,685.759 1252.09,685.759 1252.65,685.759 1253.21,685.759 1253.77,685.759 1254.33,685.759 1254.89,685.759 1255.45,685.759 1256.01,685.759 1256.57,685.759 1257.13,685.759 1257.69,685.759 1258.25,685.759 1258.81,685.759 1259.36,685.759 1259.92,685.759 1260.48,685.759 1261.04,685.759 1261.6,685.759 1262.16,685.759 1262.72,685.759 1263.28,685.759 1263.84,685.759 1264.4,685.759 1264.96,685.759 1265.52,685.759 1266.08,685.759 1266.63,685.759 1267.19,685.759 1267.75,685.759 1268.31,685.759 1268.87,685.759 1269.43,685.759 1269.99,685.759 1270.55,685.759 1271.11,685.759 1271.67,685.759 1272.23,685.759 1272.79,685.759 1273.35,685.759 1273.91,685.759 1274.46,685.759 1275.02,685.759 1275.58,685.759 1276.14,685.759 1276.7,685.759 1277.26,685.759 1277.82,685.759 1278.38,685.759 1278.94,685.759 1279.5,685.759 1280.06,685.759 1280.62,685.759 1281.18,685.759 1281.73,685.759 1282.29,685.759 1282.85,685.759 1283.41,685.759 1283.97,685.759 1284.53,685.759 1285.09,685.759 1285.65,685.759 1286.21,685.759 1286.77,685.759 1287.33,685.759 1287.89,685.759 1288.45,685.759 1289,685.759 1289.56,685.759 1290.12,685.759 1290.68,685.759 1291.24,685.759 1291.8,685.759 1292.36,685.759 1292.92,685.759 1293.48,685.759 1294.04,685.759 1294.6,685.759 1295.16,685.759 1295.72,685.759 1296.28,685.759 1296.83,685.759 1297.39,685.759 1297.95,685.759 1298.51,685.759 1299.07,685.759 1299.63,685.759 1300.19,685.759 1300.75,685.759 1301.31,685.759 1301.87,685.759 1302.43,685.759 1302.99,685.759 1303.55,685.759 1304.1,685.759 1304.66,685.759 1305.22,685.759 1305.78,685.759 1306.34,685.759 1306.9,685.759 1307.46,685.759 1308.02,685.759 1308.58,685.759 1309.14,685.759 1309.7,685.759 1310.26,685.759 1310.82,685.759 1311.38,685.759 1311.93,685.759 1312.49,685.759 1313.05,685.759 1313.61,685.759 1314.17,685.759 1314.73,685.759 1315.29,685.759 1315.85,685.759 1316.41,685.759 1316.97,685.759 1317.53,685.759 1318.09,685.759 1318.65,685.759 1319.2,685.759 1319.76,685.759 1320.32,685.759 1320.88,685.759 1321.44,685.759 1322,685.759 1322.56,685.759 1323.12,685.759 1323.68,685.759 1324.24,685.759 1324.8,685.759 1325.36,685.759 1325.92,685.759 1326.47,685.759 1327.03,685.759 1327.59,685.759 1328.15,685.759 1328.71,685.759 1329.27,685.759 1329.83,685.759 1330.39,685.759 1330.95,685.759 1331.51,685.759 1332.07,685.759 1332.63,685.759 1333.19,685.759 1333.75,685.759 1334.3,685.759 1334.86,685.759 1335.42,685.759 1335.98,685.759 1336.54,685.759 1337.1,685.759 1337.66,685.759 1338.22,685.759 1338.78,685.759 1339.34,685.759 1339.9,685.759 1340.46,685.759 1341.02,685.759 1341.57,685.759 1342.13,685.759 1342.69,685.759 1343.25,685.759 1343.81,685.759 1344.37,685.759 1344.93,685.759 1345.49,685.759 1346.05,685.759 1346.61,685.759 1347.17,685.759 1347.73,685.759 1348.29,685.759 1348.84,685.759 1349.4,685.759 1349.96,685.759 1350.52,685.759 1351.08,685.759 1351.64,685.759 1352.2,685.759 1352.76,685.759 1353.32,685.759 1353.88,685.759 1354.44,685.759 1355,685.759 1355.56,685.759 1356.12,685.759 1356.67,685.759 1357.23,685.759 1357.79,685.759 1358.35,685.759 1358.91,685.759 1359.47,685.759 1360.03,685.759 1360.59,685.759 1361.15,685.759 1361.71,685.759 1362.27,685.759 1362.83,685.759 1363.39,685.759 1363.94,685.759 1364.5,685.759 1365.06,685.759 1365.62,685.759 1366.18,685.759 1366.74,685.759 1367.3,685.759 1367.86,685.759 1368.42,685.759 1368.98,685.759 1369.54,685.759 1370.1,685.759 1370.66,685.759 1371.21,685.759 1371.77,685.759 1372.33,685.759 1372.89,685.759 1373.45,685.759 1374.01,685.759 1374.57,685.759 1375.13,685.759 1375.69,685.759 1376.25,685.759 1376.81,685.759 1377.37,685.759 1377.93,685.759 1378.49,685.759 1379.04,685.759 1379.6,685.759 1380.16,685.759 1380.72,685.759 1381.28,685.759 1381.84,685.759 1382.4,685.759 1382.96,685.759 1383.52,685.759 1384.08,685.759 1384.64,685.759 1385.2,685.759 1385.76,685.759 1386.31,685.759 1386.87,685.759 1387.43,685.759 1387.99,685.759 1388.55,685.759 1389.11,685.759 1389.67,685.759 1390.23,685.759 1390.79,685.759 1391.35,685.759 1391.91,685.759 1392.47,685.759 1393.03,685.759 1393.58,685.759 1394.14,685.759 1394.7,685.759 1395.26,685.759 1395.82,685.759 1396.38,685.759 1396.94,685.759 1397.5,685.759 1398.06,685.759 1398.62,685.759 1399.18,685.759 1399.74,685.759 1400.3,685.759 1400.86,685.759 1401.41,685.759 1401.97,685.759 1402.53,685.759 1403.09,685.759 1403.65,685.759 1404.21,685.759 1404.77,685.759 1405.33,685.759 1405.89,685.759 1406.45,685.759 1407.01,685.759 1407.57,685.759 1408.13,685.759 1408.68,685.759 1409.24,685.759 1409.8,685.759 1410.36,685.759 1410.92,685.759 1411.48,685.759 1412.04,685.759 1412.6,685.759 1413.16,685.759 1413.72,685.759 1414.28,685.759 1414.84,685.759 1415.4,685.759 1415.95,685.759 1416.51,685.759 1417.07,685.759 1417.63,685.759 1418.19,685.759 1418.75,685.759 1419.31,685.759 1419.87,685.759 1420.43,685.759 1420.99,685.759 1421.55,685.759 1422.11,685.759 1422.67,685.759 1423.23,685.759 1423.78,685.759 1424.34,685.759 1424.9,685.759 1425.46,685.759 1426.02,685.759 1426.58,685.759 1427.14,685.759 1427.7,685.759 1428.26,685.759 1428.82,685.759 1429.38,685.759 1429.94,685.759 1430.5,685.759 1431.05,685.759 1431.61,685.759 1432.17,685.759 1432.73,685.759 1433.29,685.759 1433.85,685.759 1434.41,685.759 1434.97,685.759 1435.53,685.759 1436.09,685.759 1436.65,685.759 1437.21,685.759 1437.77,685.759 1438.33,685.759 1438.88,685.759 1439.44,685.759 1440,685.759 1440.56,685.759 1441.12,685.759 1441.68,685.759 1442.24,685.759 1442.8,685.759 1443.36,685.759 1443.92,685.759 1444.48,685.759 1445.04,685.759 1445.6,685.759 1446.15,685.759 1446.71,685.759 1447.27,685.759 1447.83,685.759 1448.39,685.759 1448.95,685.759 1449.51,685.759 1450.07,685.759 1450.63,685.759 1451.19,685.759 1451.75,685.759 1452.31,685.759 1452.87,685.759 1453.42,685.759 1453.98,685.759 1454.54,685.759 1455.1,685.759 1455.66,685.759 1456.22,685.759 1456.78,685.759 1457.34,685.759 1457.9,685.759 1458.46,685.759 1459.02,685.759 1459.58,685.759 1460.14,685.759 1460.7,685.759 1461.25,685.759 1461.81,685.759 1462.37,685.759 1462.93,685.759 1463.49,685.759 1464.05,685.759 1464.61,685.759 1465.17,685.759 1465.73,685.759 1466.29,685.759 1466.85,685.759 1467.41,685.759 1467.97,685.759 1468.52,685.759 1469.08,685.759 1469.64,685.759 1470.2,685.759 1470.76,685.759 1471.32,685.759 1471.88,685.759 1472.44,685.759 1473,685.759 1473.56,685.759 1474.12,685.759 1474.68,685.759 1475.24,685.759 1475.79,685.759 1476.35,685.759 1476.91,685.759 1477.47,685.759 1478.03,685.759 1478.59,685.759 1479.15,685.759 1479.71,685.759 1480.27,685.759 1480.83,685.759 1481.39,685.759 1481.95,685.759 1482.51,685.759 1483.07,685.759 1483.62,685.759 1484.18,685.759 1484.74,685.759 1485.3,685.759 1485.86,685.759 1486.42,685.759 1486.98,685.759 1487.54,685.759 1488.1,685.759 1488.66,685.759 1489.22,685.759 1489.78,685.759 1490.34,685.759 1490.89,685.759 1491.45,685.759 1492.01,685.759 1492.57,685.759 1493.13,685.759 1493.69,685.759 1494.25,685.759 1494.81,685.759 1495.37,685.759 1495.93,685.759 1496.49,685.759 1497.05,685.759 1497.61,685.759 1498.16,685.759 1498.72,685.759 1499.28,685.759 1499.84,685.759 1500.4,685.759 1500.96,685.759 1501.52,685.759 1502.08,685.759 1502.64,685.759 1503.2,685.759 1503.76,685.759 1504.32,685.759 1504.88,685.759 1505.44,685.759 1505.99,685.759 1506.55,685.759 1507.11,685.759 1507.67,685.759 1508.23,685.759 1508.79,685.759 1509.35,685.759 1509.91,685.759 1510.47,685.759 1511.03,685.759 1511.59,685.759 1512.15,685.759 1512.71,685.759 1513.26,685.759 1513.82,685.759 1514.38,685.759 1514.94,685.759 1515.5,685.759 1516.06,685.759 1516.62,685.759 1517.18,685.759 1517.74,685.759 1518.3,685.759 1518.86,685.759 1519.42,685.759 1519.98,685.759 1520.53,685.759 1521.09,685.759 1521.65,685.759 1522.21,685.759 1522.77,685.759 1523.33,685.759 1523.89,685.759 1524.45,685.759 1525.01,685.759 1525.57,685.759 1526.13,685.759 1526.69,685.759 1527.25,685.759 1527.81,685.759 1528.36,685.759 1528.92,685.759 1529.48,685.759 1530.04,685.759 1530.6,685.759 1531.16,685.759 1531.72,685.759 1532.28,685.759 1532.84,685.759 1533.4,685.759 1533.96,685.759 1534.52,685.759 1535.08,685.759 1535.63,685.759 1536.19,685.759 1536.75,685.759 1537.31,685.759 1537.87,685.759 1538.43,685.759 1538.99,685.759 1539.55,685.759 1540.11,685.759 1540.67,685.759 1541.23,685.759 1541.79,685.759 1542.35,685.759 1542.9,685.759 1543.46,685.759 1544.02,685.759 1544.58,685.759 1545.14,685.759 1545.7,685.759 1546.26,685.759 1546.82,685.759 1547.38,685.759 1547.94,685.759 1548.5,685.759 1549.06,685.759 1549.62,685.759 1550.18,685.759 1550.73,685.759 1551.29,685.759 1551.85,685.759 1552.41,685.759 1552.97,685.759 1553.53,685.759 1554.09,685.759 1554.65,685.759 1555.21,685.759 1555.77,685.759 1556.33,685.759 1556.89,685.759 1557.45,685.759 1558,685.759 1558.56,685.759 1559.12,685.759 1559.68,685.759 1560.24,685.759 1560.8,685.759 1561.36,685.759 1561.92,685.759 1562.48,685.759 1563.04,685.759 1563.6,685.759 1564.16,685.759 1564.72,685.759 1565.28,685.759 1565.83,685.759 1566.39,685.759 1566.95,685.759 1567.51,685.759 1568.07,685.759 1568.63,685.759 1569.19,685.759 1569.75,685.759 1570.31,685.759 1570.87,685.759 1571.43,685.759 1571.99,685.759 1572.55,685.759 1573.1,685.759 1573.66,685.759 1574.22,685.759 1574.78,685.759 1575.34,685.759 1575.9,685.759 1576.46,685.759 1577.02,685.759 1577.58,685.759 1578.14,685.759 1578.7,685.759 1579.26,685.759 1579.82,685.759 1580.37,685.759 1580.93,685.759 1581.49,685.759 1582.05,685.759 1582.61,685.759 1583.17,685.759 1583.73,685.759 1584.29,685.759 1584.85,685.759 1585.41,685.759 1585.97,685.759 1586.53,685.759 1587.09,685.759 1587.65,685.759 1588.2,685.759 1588.76,685.759 1589.32,685.759 1589.88,685.759 1590.44,685.759 1591,685.759 1591.56,685.759 1592.12,685.759 1592.68,685.759 1593.24,685.759 1593.8,685.759 1594.36,685.759 1594.92,685.759 1595.47,685.759 1596.03,685.759 1596.59,685.759 1597.15,685.759 1597.71,685.759 1598.27,685.759 1598.83,685.759 1599.39,685.759 1599.95,685.759 1600.51,685.759 1601.07,685.759 1601.63,685.759 1602.19,685.759 1602.74,685.759 1603.3,685.759 1603.86,685.759 1604.42,685.759 1604.98,685.759 1605.54,685.759 1606.1,685.759 1606.66,685.759 1607.22,685.759 1607.78,685.759 1608.34,685.759 1608.9,685.759 1609.46,685.759 1610.02,685.759 1610.57,685.759 1611.13,685.759 1611.69,685.759 1612.25,685.759 1612.81,685.759 1613.37,685.759 1613.93,685.759 1614.49,685.759 1615.05,685.759 1615.61,685.759 1616.17,685.759 1616.73,685.759 1617.29,685.759 1617.84,685.759 1618.4,685.759 1618.96,685.759 1619.52,685.759 1620.08,685.759 1620.64,685.759 1621.2,685.759 1621.76,685.759 1622.32,685.759 1622.88,685.759 1623.44,685.759 1624,685.759 1624.56,685.759 1625.11,685.759 1625.67,685.759 1626.23,685.759 1626.79,685.759 1627.35,685.759 1627.91,685.759 1628.47,685.759 1629.03,685.759 1629.59,685.759 1630.15,685.759 1630.71,685.759 1631.27,685.759 1631.83,685.759 1632.39,685.759 1632.94,685.759 1633.5,685.759 1634.06,685.759 1634.62,685.759 1635.18,685.759 1635.74,685.759 1636.3,685.759 1636.86,685.759 1637.42,685.759 1637.98,685.759 1638.54,685.759 1639.1,685.759 1639.66,685.759 1640.21,685.759 1640.77,685.759 1641.33,685.759 1641.89,685.759 1642.45,685.759 1643.01,685.759 1643.57,685.759 1644.13,685.759 1644.69,685.759 1645.25,685.759 1645.81,685.759 1646.37,685.759 1646.93,685.759 1647.48,685.759 1648.04,685.759 1648.6,685.759 1649.16,685.759 1649.72,685.759 1650.28,685.759 1650.84,685.759 1651.4,685.759 1651.96,685.759 1652.52,685.759 1653.08,685.759 1653.64,685.759 1654.2,685.759 1654.76,685.759 1655.31,685.759 1655.87,685.759 1656.43,685.759 1656.99,685.759 1657.55,685.759 1658.11,685.759 1658.67,685.759 1659.23,685.759 1659.79,685.759 1660.35,685.759 1660.91,685.759 1661.47,685.759 1662.03,685.759 1662.58,685.759 1663.14,685.759 1663.7,685.759 1664.26,685.759 1664.82,685.759 1665.38,685.759 1665.94,685.759 1666.5,685.759 1667.06,685.759 1667.62,685.759 1668.18,685.759 1668.74,685.759 1669.3,685.759 1669.85,685.759 1670.41,685.759 1670.97,685.759 1671.53,685.759 1672.09,685.759 1672.65,685.759 1673.21,685.759 1673.77,685.759 1674.33,685.759 1674.89,685.759 1675.45,685.759 1676.01,685.759 1676.57,685.759 1677.13,685.759 1677.68,685.759 1678.24,685.759 1678.8,685.759 1679.36,685.759 1679.92,685.759 1680.48,685.759 1681.04,685.759 1681.6,685.759 1682.16,685.759 1682.72,685.759 1683.28,685.759 1683.84,685.759 1684.4,685.759 1684.95,685.759 1685.51,685.759 1686.07,685.759 1686.63,685.759 1687.19,685.759 1687.75,685.759 1688.31,685.759 1688.87,685.759 1689.43,685.759 1689.99,685.759 1690.55,685.759 1691.11,685.759 1691.67,685.759 1692.23,685.759 1692.78,685.759 1693.34,685.759 1693.9,685.759 1694.46,685.759 1695.02,685.759 1695.58,685.759 1696.14,685.759 1696.7,685.759 1697.26,685.759 1697.82,685.759 1698.38,685.759 1698.94,685.759 1699.5,685.759 1700.05,685.759 1700.61,685.759 1701.17,685.759 1701.73,685.759 1702.29,685.759 1702.85,685.759 1703.41,685.759 1703.97,685.759 1704.53,685.759 1705.09,685.759 1705.65,685.759 1706.21,685.759 1706.77,685.759 1707.32,685.759 1707.88,685.759 1708.44,685.759 1709,685.759 1709.56,685.759 1710.12,685.759 1710.68,685.759 1711.24,685.759 1711.8,685.759 1712.36,685.759 1712.92,685.759 1713.48,685.759 1714.04,685.759 1714.6,685.759 1715.15,685.759 1715.71,685.759 1716.27,685.759 1716.83,685.759 1717.39,685.759 1717.95,685.759 1718.51,685.759 1719.07,685.759 1719.63,685.759 1720.19,685.759 1720.75,685.759 1721.31,685.759 1721.87,685.759 1722.42,685.759 1722.98,685.759 1723.54,685.759 1724.1,685.759 1724.66,685.759 1725.22,685.759 1725.78,685.759 1726.34,685.759 1726.9,685.759 1727.46,685.759 1728.02,685.759 1728.58,685.759 1729.14,685.759 1729.69,685.759 1730.25,685.759 1730.81,685.759 1731.37,685.759 1731.93,685.759 1732.49,685.759 1733.05,685.759 1733.61,685.759 1734.17,685.759 1734.73,685.759 1735.29,685.759 1735.85,685.759 1736.41,685.759 1736.97,685.759 1737.52,685.759 1738.08,685.759 1738.64,685.759 1739.2,685.759 1739.76,685.759 1740.32,685.759 1740.88,685.759 1741.44,685.759 1742,685.759 1742.56,685.759 1743.12,685.759 1743.68,685.759 1744.24,685.759 1744.79,685.759 1745.35,685.759 1745.91,685.759 1746.47,685.759 1747.03,685.759 1747.59,685.759 1748.15,685.759 1748.71,685.759 1749.27,685.759 1749.83,685.759 1750.39,685.759 1750.95,685.759 1751.51,685.759 1752.06,685.759 1752.62,685.759 1753.18,685.759 1753.74,685.759 1754.3,685.759 1754.86,685.759 1755.42,685.759 1755.98,685.759 1756.54,685.759 1757.1,685.759 1757.66,685.759 1758.22,685.759 1758.78,685.759 1759.34,685.759 1759.89,685.759 1760.45,685.759 1761.01,685.759 1761.57,685.759 1762.13,685.759 1762.69,685.759 1763.25,685.759 1763.81,685.759 1764.37,685.759 1764.93,685.759 1765.49,685.759 1766.05,685.759 1766.61,685.759 1767.16,685.759 1767.72,685.759 1768.28,685.759 1768.84,685.759 1769.4,685.759 1769.96,685.759 1770.52,685.759 1771.08,685.759 1771.64,685.759 1772.2,685.759 1772.76,685.759 1773.32,685.759 1773.88,685.759 1774.43,685.759 1774.99,685.759 1775.55,685.759 1776.11,685.759 1776.67,685.759 1777.23,685.759 1777.79,685.759 1778.35,685.759 1778.91,685.759 1779.47,685.759 1780.03,685.759 1780.59,685.759 1781.15,685.759 1781.71,685.759 1782.26,685.759 1782.82,685.759 1783.38,685.759 1783.94,685.759 1784.5,685.759 1785.06,685.759 1785.62,685.759 1786.18,685.759 1786.74,685.759 1787.3,685.759 1787.86,685.759 1788.42,685.759 1788.98,685.759 1789.53,685.759 1790.09,685.759 1790.65,685.759 1791.21,685.759 1791.77,685.759 1792.33,685.759 1792.89,685.759 1793.45,685.759 1794.01,685.759 1794.57,685.759 1795.13,685.759 1795.69,685.759 1796.25,685.759 1796.8,685.759 1797.36,685.759 1797.92,685.759 1798.48,685.759 1799.04,685.759 1799.6,685.759 1800.16,685.759 1800.72,685.759 1801.28,685.759 1801.84,685.759 1802.4,685.759 1802.96,685.759 1803.52,685.759 1804.08,685.759 1804.63,685.759 1805.19,685.759 1805.75,685.759 1806.31,685.759 1806.87,685.759 1807.43,685.759 1807.99,685.759 1808.55,685.759 1809.11,685.759 1809.67,685.759 1810.23,685.759 1810.79,685.759 1811.35,685.759 1811.9,685.759 1812.46,685.759 1813.02,685.759 1813.58,685.759 1814.14,685.759 1814.7,685.759 1815.26,685.759 1815.82,685.759 1816.38,685.759 1816.94,685.759 1817.5,685.759 1818.06,685.759 1818.62,685.759 1819.18,685.759 1819.73,685.759 1820.29,685.759 1820.85,685.759 1821.41,685.759 1821.97,685.759 1822.53,685.759 1823.09,685.759 1823.65,685.759 1824.21,685.759 1824.77,685.759 1825.33,685.759 1825.89,685.759 1826.45,685.759 1827,685.759 1827.56,685.759 1828.12,685.759 1828.68,685.759 1829.24,685.759 1829.8,685.759 1830.36,685.759 1830.92,685.759 1831.48,685.759 1832.04,685.759 1832.6,685.759 1833.16,685.759 1833.72,685.759 1834.27,685.759 1834.83,685.759 1835.39,685.759 1835.95,685.759 1836.51,685.759 1837.07,685.759 1837.63,685.759 1838.19,685.759 \"/>\n<path clip-path=\"url(#clip913)\" d=\"M720.247 685.238 L720.806 685.238 L721.365 685.238 L721.924 685.238 L722.484 685.238 L723.043 685.238 L723.602 685.238 L724.161 685.238 L724.721 685.238 L725.28 685.238 L725.839 685.238 L726.398 685.238 L726.958 685.238 L727.517 685.238 L728.076 685.238 L728.635 685.238 L729.195 685.238 L729.754 685.238 L730.313 685.238 L730.872 685.238 L731.432 685.238 L731.991 685.238 L732.55 685.238 L733.109 685.238 L733.669 685.238 L734.228 685.238 L734.787 685.238 L735.346 685.238 L735.906 685.238 L736.465 685.238 L737.024 685.238 L737.583 685.238 L738.143 685.238 L738.702 685.238 L739.261 685.238 L739.82 685.238 L740.38 685.238 L740.939 685.238 L741.498 685.238 L742.057 685.238 L742.617 685.238 L743.176 685.238 L743.735 685.238 L744.294 685.238 L744.854 685.238 L745.413 685.238 L745.972 685.238 L746.531 685.238 L747.091 685.238 L747.65 685.238 L748.209 685.238 L748.768 685.238 L749.328 685.238 L749.887 685.238 L750.446 685.238 L751.005 685.238 L751.565 685.238 L752.124 685.238 L752.683 685.238 L753.242 685.238 L753.802 685.238 L754.361 685.238 L754.92 685.238 L755.479 685.238 L756.039 685.238 L756.598 685.238 L757.157 685.238 L757.716 685.238 L758.276 685.238 L758.835 685.238 L759.394 685.238 L759.953 685.238 L760.513 685.238 L761.072 685.238 L761.631 685.238 L762.19 685.238 L762.75 685.238 L763.309 685.238 L763.868 685.238 L764.427 685.238 L764.987 685.238 L765.546 685.238 L766.105 685.238 L766.664 685.238 L767.224 685.238 L767.783 685.238 L768.342 685.238 L768.901 685.238 L769.461 685.238 L770.02 685.238 L770.579 685.238 L771.138 685.238 L771.698 685.238 L772.257 685.238 L772.816 685.238 L773.375 685.238 L773.935 685.238 L774.494 685.238 L775.053 685.238 L775.612 685.238 L776.172 685.238 L776.731 685.238 L777.29 685.238 L777.849 685.238 L778.409 685.238 L778.968 685.238 L779.527 685.238 L780.086 685.238 L780.646 685.238 L781.205 685.238 L781.764 685.238 L782.323 685.238 L782.883 685.238 L783.442 685.238 L784.001 685.238 L784.56 685.238 L785.12 685.238 L785.679 685.238 L786.238 685.238 L786.797 685.238 L787.357 685.238 L787.916 685.238 L788.475 685.238 L789.034 685.238 L789.594 685.238 L790.153 685.238 L790.712 685.238 L791.271 685.238 L791.831 685.238 L792.39 685.238 L792.949 685.238 L793.508 685.238 L794.068 685.238 L794.627 685.238 L795.186 685.238 L795.745 685.238 L796.305 685.238 L796.864 685.238 L797.423 685.238 L797.982 685.238 L798.542 685.238 L799.101 685.238 L799.66 685.238 L800.219 685.238 L800.779 685.238 L801.338 685.238 L801.897 685.238 L802.456 685.238 L803.016 685.238 L803.575 685.238 L804.134 685.238 L804.693 685.238 L805.253 685.238 L805.812 685.238 L806.371 685.238 L806.931 685.238 L807.49 685.238 L808.049 685.238 L808.608 685.238 L809.168 685.238 L809.727 685.238 L810.286 685.238 L810.845 685.238 L811.405 685.238 L811.964 685.238 L812.523 685.238 L813.082 685.238 L813.642 685.238 L814.201 685.238 L814.76 685.238 L815.319 685.238 L815.879 685.238 L816.438 685.238 L816.997 685.238 L817.556 685.238 L818.116 685.238 L818.675 685.238 L819.234 685.238 L819.793 685.238 L820.353 685.238 L820.912 685.238 L821.471 685.238 L822.03 685.238 L822.59 685.238 L823.149 685.238 L823.708 685.238 L824.267 685.238 L824.827 685.238 L825.386 685.238 L825.945 685.238 L826.504 685.238 L827.064 685.238 L827.623 685.238 L828.182 685.238 L828.741 685.238 L829.301 685.238 L829.86 685.238 L830.419 685.238 L830.978 685.238 L831.538 685.238 L832.097 685.238 L832.656 685.238 L833.215 685.238 L833.775 685.238 L834.334 685.238 L834.893 685.238 L835.452 685.238 L836.012 685.238 L836.571 685.238 L837.13 685.238 L837.689 685.238 L838.249 685.238 L838.808 685.238 L839.367 685.238 L839.926 685.238 L840.486 685.238 L841.045 685.238 L841.604 685.238 L842.163 685.238 L842.723 685.238 L843.282 685.238 L843.841 685.238 L844.4 685.238 L844.96 685.238 L845.519 685.238 L846.078 685.238 L846.637 685.238 L847.197 685.238 L847.756 685.238 L848.315 685.238 L848.874 685.238 L849.434 685.238 L849.993 685.238 L850.552 685.238 L851.111 685.238 L851.671 685.238 L852.23 685.238 L852.789 685.238 L853.348 685.238 L853.908 685.238 L854.467 685.238 L855.026 685.238 L855.585 685.238 L856.145 685.238 L856.704 685.238 L857.263 685.238 L857.822 685.238 L858.382 685.238 L858.941 685.238 L859.5 685.238 L860.059 685.238 L860.619 685.238 L861.178 685.238 L861.737 685.238 L862.296 685.238 L862.856 685.238 L863.415 685.238 L863.974 685.238 L864.533 685.238 L865.093 685.238 L865.652 685.238 L866.211 685.238 L866.77 685.238 L867.33 685.238 L867.889 685.238 L868.448 685.238 L869.007 685.238 L869.567 685.238 L870.126 685.238 L870.685 685.238 L871.244 685.238 L871.804 685.238 L872.363 685.238 L872.922 685.238 L873.481 685.238 L874.041 685.238 L874.6 685.238 L875.159 685.238 L875.718 685.238 L876.278 685.238 L876.837 685.238 L877.396 685.238 L877.955 685.238 L878.515 685.238 L879.074 685.238 L879.633 685.238 L880.192 685.238 L880.752 685.238 L881.311 685.238 L881.87 685.238 L882.429 685.238 L882.989 685.238 L883.548 685.238 L884.107 685.238 L884.666 685.238 L885.226 685.238 L885.785 685.238 L886.344 685.238 L886.903 685.238 L887.463 685.238 L888.022 685.238 L888.581 685.238 L889.14 685.238 L889.7 685.238 L890.259 685.238 L890.818 685.238 L891.377 685.238 L891.937 685.238 L892.496 685.238 L893.055 685.238 L893.614 685.238 L894.174 685.238 L894.733 685.238 L895.292 685.238 L895.851 685.238 L896.411 685.238 L896.97 685.238 L897.529 685.238 L898.088 685.238 L898.648 685.238 L899.207 685.238 L899.766 685.238 L900.325 685.238 L900.885 685.238 L901.444 685.238 L902.003 685.238 L902.562 685.238 L903.122 685.238 L903.681 685.238 L904.24 685.238 L904.799 685.238 L905.359 685.238 L905.918 685.238 L906.477 685.238 L907.036 685.238 L907.596 685.238 L908.155 685.238 L908.714 685.238 L909.273 685.238 L909.833 685.238 L910.392 685.238 L910.951 685.238 L911.51 685.238 L912.07 685.238 L912.629 685.238 L913.188 685.238 L913.747 685.238 L914.307 685.238 L914.866 685.238 L915.425 685.238 L915.984 685.238 L916.544 685.238 L917.103 685.238 L917.662 685.238 L918.221 685.238 L918.781 685.238 L919.34 685.238 L919.899 685.238 L920.458 685.238 L921.018 685.238 L921.577 685.238 L922.136 685.238 L922.695 685.238 L923.255 685.238 L923.814 685.238 L924.373 685.238 L924.932 685.238 L925.492 685.238 L926.051 685.238 L926.61 685.238 L927.169 685.238 L927.729 685.238 L928.288 685.238 L928.847 685.238 L929.406 685.238 L929.966 685.238 L930.525 685.238 L931.084 685.238 L931.644 685.238 L932.203 685.238 L932.762 685.238 L933.321 685.238 L933.881 685.238 L934.44 685.238 L934.999 685.238 L935.558 685.238 L936.118 685.238 L936.677 685.238 L937.236 685.238 L937.795 685.238 L938.355 685.238 L938.914 685.238 L939.473 685.238 L940.032 685.238 L940.592 685.238 L941.151 685.238 L941.71 685.238 L942.269 685.238 L942.829 685.238 L943.388 685.238 L943.947 685.238 L944.506 685.238 L945.066 685.238 L945.625 685.238 L946.184 685.238 L946.743 685.238 L947.303 685.238 L947.862 685.238 L948.421 685.238 L948.98 685.238 L949.54 685.238 L950.099 685.238 L950.658 685.238 L951.217 685.238 L951.777 685.238 L952.336 685.238 L952.895 685.238 L953.454 685.238 L954.014 685.238 L954.573 685.238 L955.132 685.238 L955.691 685.238 L956.251 685.238 L956.81 685.238 L957.369 685.238 L957.928 685.238 L958.488 685.238 L959.047 685.238 L959.606 685.238 L960.165 685.238 L960.725 685.238 L961.284 685.238 L961.843 685.238 L962.402 685.238 L962.962 685.238 L963.521 685.238 L964.08 685.238 L964.639 685.238 L965.199 685.238 L965.758 685.238 L966.317 685.238 L966.876 685.238 L967.436 685.238 L967.995 685.238 L968.554 685.238 L969.113 685.238 L969.673 685.238 L970.232 685.238 L970.791 685.238 L971.35 685.238 L971.91 685.238 L972.469 685.238 L973.028 685.238 L973.587 685.238 L974.147 685.238 L974.706 685.238 L975.265 685.238 L975.824 685.238 L976.384 685.238 L976.943 685.238 L977.502 685.238 L978.061 685.238 L978.621 685.238 L979.18 685.238 L979.739 685.238 L980.298 685.238 L980.858 685.238 L981.417 685.238 L981.976 685.238 L982.535 685.238 L983.095 685.238 L983.654 685.238 L984.213 685.238 L984.772 685.238 L985.332 685.238 L985.891 685.238 L986.45 685.238 L987.009 685.238 L987.569 685.238 L988.128 685.238 L988.687 685.238 L989.246 685.238 L989.806 685.238 L990.365 685.238 L990.924 685.238 L991.483 685.238 L992.043 685.238 L992.602 685.238 L993.161 685.238 L993.72 685.238 L994.28 685.238 L994.839 685.238 L995.398 685.238 L995.957 685.238 L996.517 685.238 L997.076 685.238 L997.635 685.238 L998.194 685.238 L998.754 685.238 L999.313 685.238 L999.872 685.238 L1000.43 685.238 L1000.99 685.238 L1001.55 685.238 L1002.11 685.238 L1002.67 685.238 L1003.23 685.238 L1003.79 685.238 L1004.35 685.238 L1004.91 685.238 L1005.46 685.238 L1006.02 685.238 L1006.58 685.238 L1007.14 685.238 L1007.7 685.238 L1008.26 685.238 L1008.82 685.238 L1009.38 685.238 L1009.94 685.238 L1010.5 685.238 L1011.06 685.238 L1011.62 685.238 L1012.18 685.238 L1012.73 685.238 L1013.29 685.238 L1013.85 685.238 L1014.41 685.238 L1014.97 685.238 L1015.53 685.238 L1016.09 685.238 L1016.65 685.238 L1017.21 685.238 L1017.77 685.238 L1018.33 685.238 L1018.89 685.238 L1019.45 685.238 L1020.01 685.238 L1020.56 685.238 L1021.12 685.238 L1021.68 685.238 L1022.24 685.238 L1022.8 685.238 L1023.36 685.238 L1023.92 685.238 L1024.48 685.238 L1025.04 685.238 L1025.6 685.238 L1026.16 685.238 L1026.72 685.238 L1027.28 685.238 L1027.83 685.238 L1028.39 685.238 L1028.95 685.238 L1029.51 685.238 L1030.07 685.238 L1030.63 685.238 L1031.19 685.238 L1031.75 685.238 L1032.31 685.238 L1032.87 685.238 L1033.43 685.238 L1033.99 685.238 L1034.55 685.238 L1035.1 685.238 L1035.66 685.238 L1036.22 685.238 L1036.78 685.238 L1037.34 685.238 L1037.9 685.238 L1038.46 685.238 L1039.02 685.238 L1039.58 685.238 L1040.14 685.238 L1040.7 685.238 L1041.26 685.238 L1041.82 685.238 L1042.38 685.238 L1042.93 685.238 L1043.49 685.238 L1044.05 685.238 L1044.61 685.238 L1045.17 685.238 L1045.73 685.238 L1046.29 685.238 L1046.85 685.238 L1047.41 685.238 L1047.97 685.238 L1048.53 685.238 L1049.09 685.238 L1049.65 685.238 L1050.2 685.238 L1050.76 685.238 L1051.32 685.238 L1051.88 685.238 L1052.44 685.238 L1053 685.238 L1053.56 685.238 L1054.12 685.238 L1054.68 685.238 L1055.24 685.238 L1055.8 685.238 L1056.36 685.238 L1056.92 685.238 L1057.48 685.238 L1058.03 685.238 L1058.59 685.238 L1059.15 685.238 L1059.71 685.238 L1060.27 685.238 L1060.83 685.238 L1061.39 685.238 L1061.95 685.238 L1062.51 685.238 L1063.07 685.238 L1063.63 685.238 L1064.19 685.238 L1064.75 685.238 L1065.3 685.238 L1065.86 685.238 L1066.42 685.238 L1066.98 685.238 L1067.54 685.238 L1068.1 685.238 L1068.66 685.238 L1069.22 685.238 L1069.78 685.238 L1070.34 685.238 L1070.9 685.238 L1071.46 685.238 L1072.02 685.238 L1072.57 685.238 L1073.13 685.238 L1073.69 685.238 L1074.25 685.238 L1074.81 685.238 L1075.37 685.238 L1075.93 685.238 L1076.49 685.238 L1077.05 685.238 L1077.61 685.238 L1078.17 685.238 L1078.73 685.238 L1079.29 685.238 L1079.85 685.238 L1080.4 685.238 L1080.96 685.238 L1081.52 685.238 L1082.08 685.238 L1082.64 685.238 L1083.2 685.238 L1083.76 685.238 L1084.32 685.238 L1084.88 685.238 L1085.44 685.238 L1086 685.238 L1086.56 685.238 L1087.12 685.238 L1087.67 685.238 L1088.23 685.238 L1088.79 685.238 L1089.35 685.238 L1089.91 685.238 L1090.47 685.238 L1091.03 685.238 L1091.59 685.238 L1092.15 685.238 L1092.71 685.238 L1093.27 685.238 L1093.83 685.238 L1094.39 685.238 L1094.94 685.238 L1095.5 685.238 L1096.06 685.238 L1096.62 685.238 L1097.18 685.238 L1097.74 685.238 L1098.3 685.238 L1098.86 685.238 L1099.42 685.238 L1099.98 685.238 L1100.54 685.238 L1101.1 685.238 L1101.66 685.238 L1102.22 685.238 L1102.77 685.238 L1103.33 685.238 L1103.89 685.238 L1104.45 685.238 L1105.01 685.238 L1105.57 685.238 L1106.13 685.238 L1106.69 685.238 L1107.25 685.238 L1107.81 685.238 L1108.37 685.238 L1108.93 685.238 L1109.49 685.238 L1110.04 685.238 L1110.6 685.238 L1111.16 685.238 L1111.72 685.238 L1112.28 685.238 L1112.84 685.238 L1113.4 685.238 L1113.96 685.238 L1114.52 685.238 L1115.08 685.238 L1115.64 685.238 L1116.2 685.238 L1116.76 685.238 L1117.31 685.238 L1117.87 685.238 L1118.43 685.238 L1118.99 685.238 L1119.55 685.238 L1120.11 685.238 L1120.67 685.238 L1121.23 685.238 L1121.79 685.238 L1122.35 685.238 L1122.91 685.238 L1123.47 685.238 L1124.03 685.238 L1124.59 685.238 L1125.14 685.238 L1125.7 685.238 L1126.26 685.238 L1126.82 685.238 L1127.38 685.238 L1127.94 685.238 L1128.5 685.238 L1129.06 685.238 L1129.62 685.238 L1130.18 685.238 L1130.74 685.238 L1131.3 685.238 L1131.86 685.238 L1132.41 685.238 L1132.97 685.238 L1133.53 685.238 L1134.09 685.238 L1134.65 685.238 L1135.21 685.238 L1135.77 685.238 L1136.33 685.238 L1136.89 685.238 L1137.45 685.238 L1138.01 685.238 L1138.57 685.238 L1139.13 685.238 L1139.68 685.238 L1140.24 685.238 L1140.8 685.238 L1141.36 685.238 L1141.92 685.238 L1142.48 685.238 L1143.04 685.238 L1143.6 685.238 L1144.16 685.238 L1144.72 685.238 L1145.28 685.238 L1145.84 685.238 L1146.4 685.238 L1146.96 685.238 L1147.51 685.238 L1148.07 685.238 L1148.63 685.238 L1149.19 685.238 L1149.75 685.238 L1150.31 685.238 L1150.87 685.238 L1151.43 685.238 L1151.99 685.238 L1152.55 685.238 L1153.11 685.238 L1153.67 685.238 L1154.23 685.238 L1154.78 685.238 L1155.34 685.238 L1155.9 685.238 L1156.46 685.238 L1157.02 685.238 L1157.58 685.238 L1158.14 685.238 L1158.7 685.238 L1159.26 685.238 L1159.82 685.238 L1160.38 685.238 L1160.94 685.238 L1161.5 685.238 L1162.05 685.238 L1162.61 685.238 L1163.17 685.238 L1163.73 685.238 L1164.29 685.238 L1164.85 685.238 L1165.41 685.238 L1165.97 685.238 L1166.53 685.238 L1167.09 685.238 L1167.65 685.238 L1168.21 685.238 L1168.77 685.238 L1169.33 685.238 L1169.88 685.238 L1170.44 685.238 L1171 685.238 L1171.56 685.238 L1172.12 685.238 L1172.68 685.238 L1173.24 685.238 L1173.8 685.238 L1174.36 685.238 L1174.92 685.238 L1175.48 685.238 L1176.04 685.238 L1176.6 685.238 L1177.15 685.238 L1177.71 685.238 L1178.27 685.238 L1178.83 685.238 L1179.39 685.238 L1179.95 685.238 L1180.51 685.238 L1181.07 685.238 L1181.63 685.238 L1182.19 685.238 L1182.75 685.238 L1183.31 685.238 L1183.87 685.238 L1184.43 685.238 L1184.98 685.238 L1185.54 685.238 L1186.1 685.238 L1186.66 685.238 L1187.22 685.238 L1187.78 685.238 L1188.34 685.238 L1188.9 685.238 L1189.46 685.238 L1190.02 685.238 L1190.58 685.238 L1191.14 685.238 L1191.7 685.238 L1192.25 685.238 L1192.81 685.238 L1193.37 685.238 L1193.93 685.238 L1194.49 685.238 L1195.05 685.238 L1195.61 685.238 L1196.17 685.238 L1196.73 685.238 L1197.29 685.238 L1197.85 685.238 L1198.41 685.238 L1198.97 685.238 L1199.52 685.238 L1200.08 685.238 L1200.64 685.238 L1201.2 685.238 L1201.76 685.238 L1202.32 685.238 L1202.88 685.238 L1203.44 685.238 L1204 685.238 L1204.56 685.238 L1205.12 685.238 L1205.68 685.238 L1206.24 685.238 L1206.8 685.238 L1207.35 685.238 L1207.91 685.238 L1208.47 685.238 L1209.03 685.238 L1209.59 685.238 L1210.15 685.238 L1210.71 685.238 L1211.27 685.238 L1211.83 685.238 L1212.39 685.238 L1212.95 685.238 L1213.51 685.238 L1214.07 685.238 L1214.62 685.238 L1215.18 685.238 L1215.74 685.238 L1216.3 685.238 L1216.86 685.238 L1217.42 685.238 L1217.98 685.238 L1218.54 685.238 L1219.1 685.238 L1219.66 685.238 L1220.22 685.238 L1220.78 685.238 L1221.34 685.238 L1221.89 685.238 L1222.45 685.238 L1223.01 685.238 L1223.57 685.238 L1224.13 685.238 L1224.69 685.238 L1225.25 685.238 L1225.81 685.238 L1226.37 685.238 L1226.93 685.238 L1227.49 685.238 L1228.05 685.238 L1228.61 685.238 L1229.17 685.238 L1229.72 685.238 L1230.28 685.238 L1230.84 685.238 L1231.4 685.238 L1231.96 685.238 L1232.52 685.238 L1233.08 685.238 L1233.64 685.238 L1234.2 685.238 L1234.76 685.238 L1235.32 685.238 L1235.88 685.238 L1236.44 685.238 L1236.99 685.238 L1237.55 685.238 L1238.11 685.238 L1238.67 685.238 L1239.23 685.238 L1239.79 685.238 L1240.35 685.238 L1240.91 685.238 L1241.47 685.238 L1242.03 685.238 L1242.59 685.238 L1243.15 685.238 L1243.71 685.238 L1244.26 685.238 L1244.82 685.238 L1245.38 685.238 L1245.94 685.238 L1246.5 685.238 L1247.06 685.238 L1247.62 685.238 L1248.18 685.238 L1248.74 685.238 L1249.3 685.238 L1249.86 685.238 L1250.42 685.238 L1250.98 685.238 L1251.54 685.238 L1252.09 685.238 L1252.65 685.238 L1253.21 685.238 L1253.77 685.238 L1254.33 685.238 L1254.89 685.238 L1255.45 685.238 L1256.01 685.238 L1256.57 685.238 L1257.13 685.238 L1257.69 685.238 L1258.25 685.238 L1258.81 685.238 L1259.36 685.238 L1259.92 685.238 L1260.48 685.238 L1261.04 685.238 L1261.6 685.238 L1262.16 685.238 L1262.72 685.238 L1263.28 685.238 L1263.84 685.238 L1264.4 685.238 L1264.96 685.238 L1265.52 685.238 L1266.08 685.238 L1266.63 685.238 L1267.19 685.238 L1267.75 685.238 L1268.31 685.238 L1268.87 685.238 L1269.43 685.238 L1269.99 685.238 L1270.55 685.238 L1271.11 685.238 L1271.67 685.238 L1272.23 685.238 L1272.79 685.238 L1273.35 685.238 L1273.91 685.238 L1274.46 685.238 L1275.02 685.238 L1275.58 685.238 L1276.14 685.238 L1276.7 685.238 L1277.26 685.238 L1277.82 685.238 L1278.38 685.238 L1278.94 685.238 L1279.5 685.238 L1280.06 685.238 L1280.62 685.238 L1281.18 685.238 L1281.73 685.238 L1282.29 685.238 L1282.85 685.238 L1283.41 685.238 L1283.97 685.238 L1284.53 685.238 L1285.09 685.238 L1285.65 685.238 L1286.21 685.238 L1286.77 685.238 L1287.33 685.238 L1287.89 685.238 L1288.45 685.238 L1289 685.238 L1289.56 685.238 L1290.12 685.238 L1290.68 685.238 L1291.24 685.238 L1291.8 685.238 L1292.36 685.238 L1292.92 685.238 L1293.48 685.238 L1294.04 685.238 L1294.6 685.238 L1295.16 685.238 L1295.72 685.238 L1296.28 685.238 L1296.83 685.238 L1297.39 685.238 L1297.95 685.238 L1298.51 685.238 L1299.07 685.238 L1299.63 685.238 L1300.19 685.238 L1300.75 685.238 L1301.31 685.238 L1301.87 685.238 L1302.43 685.238 L1302.99 685.238 L1303.55 685.238 L1304.1 685.238 L1304.66 685.238 L1305.22 685.238 L1305.78 685.238 L1306.34 685.238 L1306.9 685.238 L1307.46 685.238 L1308.02 685.238 L1308.58 685.238 L1309.14 685.238 L1309.7 685.238 L1310.26 685.238 L1310.82 685.238 L1311.38 685.238 L1311.93 685.238 L1312.49 685.238 L1313.05 685.238 L1313.61 685.238 L1314.17 685.238 L1314.73 685.238 L1315.29 685.238 L1315.85 685.238 L1316.41 685.238 L1316.97 685.238 L1317.53 685.238 L1318.09 685.238 L1318.65 685.238 L1319.2 685.238 L1319.76 685.238 L1320.32 685.238 L1320.88 685.238 L1321.44 685.238 L1322 685.238 L1322.56 685.238 L1323.12 685.238 L1323.68 685.238 L1324.24 685.238 L1324.8 685.238 L1325.36 685.238 L1325.92 685.238 L1326.47 685.238 L1327.03 685.238 L1327.59 685.238 L1328.15 685.238 L1328.71 685.238 L1329.27 685.238 L1329.83 685.238 L1330.39 685.238 L1330.95 685.238 L1331.51 685.238 L1332.07 685.238 L1332.63 685.238 L1333.19 685.238 L1333.75 685.238 L1334.3 685.238 L1334.86 685.238 L1335.42 685.238 L1335.98 685.238 L1336.54 685.238 L1337.1 685.238 L1337.66 685.238 L1338.22 685.238 L1338.78 685.238 L1339.34 685.238 L1339.9 685.238 L1340.46 685.238 L1341.02 685.238 L1341.57 685.238 L1342.13 685.238 L1342.69 685.238 L1343.25 685.238 L1343.81 685.238 L1344.37 685.238 L1344.93 685.238 L1345.49 685.238 L1346.05 685.238 L1346.61 685.238 L1347.17 685.238 L1347.73 685.238 L1348.29 685.238 L1348.84 685.238 L1349.4 685.238 L1349.96 685.238 L1350.52 685.238 L1351.08 685.238 L1351.64 685.238 L1352.2 685.238 L1352.76 685.238 L1353.32 685.238 L1353.88 685.238 L1354.44 685.238 L1355 685.238 L1355.56 685.238 L1356.12 685.238 L1356.67 685.238 L1357.23 685.238 L1357.79 685.238 L1358.35 685.238 L1358.91 685.238 L1359.47 685.238 L1360.03 685.238 L1360.59 685.238 L1361.15 685.238 L1361.71 685.238 L1362.27 685.238 L1362.83 685.238 L1363.39 685.238 L1363.94 685.238 L1364.5 685.238 L1365.06 685.238 L1365.62 685.238 L1366.18 685.238 L1366.74 685.238 L1367.3 685.238 L1367.86 685.238 L1368.42 685.238 L1368.98 685.238 L1369.54 685.238 L1370.1 685.238 L1370.66 685.238 L1371.21 685.238 L1371.77 685.238 L1372.33 685.238 L1372.89 685.238 L1373.45 685.238 L1374.01 685.238 L1374.57 685.238 L1375.13 685.238 L1375.69 685.238 L1376.25 685.238 L1376.81 685.238 L1377.37 685.238 L1377.93 685.238 L1378.49 685.238 L1379.04 685.238 L1379.6 685.238 L1380.16 685.238 L1380.72 685.238 L1381.28 685.238 L1381.84 685.238 L1382.4 685.238 L1382.96 685.238 L1383.52 685.238 L1384.08 685.238 L1384.64 685.238 L1385.2 685.238 L1385.76 685.238 L1386.31 685.238 L1386.87 685.238 L1387.43 685.238 L1387.99 685.238 L1388.55 685.238 L1389.11 685.238 L1389.67 685.238 L1390.23 685.238 L1390.79 685.238 L1391.35 685.238 L1391.91 685.238 L1392.47 685.238 L1393.03 685.238 L1393.58 685.238 L1394.14 685.238 L1394.7 685.238 L1395.26 685.238 L1395.82 685.238 L1396.38 685.238 L1396.94 685.238 L1397.5 685.238 L1398.06 685.238 L1398.62 685.238 L1399.18 685.238 L1399.74 685.238 L1400.3 685.238 L1400.86 685.238 L1401.41 685.238 L1401.97 685.238 L1402.53 685.238 L1403.09 685.238 L1403.65 685.238 L1404.21 685.238 L1404.77 685.238 L1405.33 685.238 L1405.89 685.238 L1406.45 685.238 L1407.01 685.238 L1407.57 685.238 L1408.13 685.238 L1408.68 685.238 L1409.24 685.238 L1409.8 685.238 L1410.36 685.238 L1410.92 685.238 L1411.48 685.238 L1412.04 685.238 L1412.6 685.238 L1413.16 685.238 L1413.72 685.238 L1414.28 685.238 L1414.84 685.238 L1415.4 685.238 L1415.95 685.238 L1416.51 685.238 L1417.07 685.238 L1417.63 685.238 L1418.19 685.238 L1418.75 685.238 L1419.31 685.238 L1419.87 685.238 L1420.43 685.238 L1420.99 685.238 L1421.55 685.238 L1422.11 685.238 L1422.67 685.238 L1423.23 685.238 L1423.78 685.238 L1424.34 685.238 L1424.9 685.238 L1425.46 685.238 L1426.02 685.238 L1426.58 685.238 L1427.14 685.238 L1427.7 685.238 L1428.26 685.238 L1428.82 685.238 L1429.38 685.238 L1429.94 685.238 L1430.5 685.238 L1431.05 685.238 L1431.61 685.238 L1432.17 685.238 L1432.73 685.238 L1433.29 685.238 L1433.85 685.238 L1434.41 685.238 L1434.97 685.238 L1435.53 685.238 L1436.09 685.238 L1436.65 685.238 L1437.21 685.238 L1437.77 685.238 L1438.33 685.238 L1438.88 685.238 L1439.44 685.238 L1440 685.238 L1440.56 685.238 L1441.12 685.238 L1441.68 685.238 L1442.24 685.238 L1442.8 685.238 L1443.36 685.238 L1443.92 685.238 L1444.48 685.238 L1445.04 685.238 L1445.6 685.238 L1446.15 685.238 L1446.71 685.238 L1447.27 685.238 L1447.83 685.238 L1448.39 685.238 L1448.95 685.238 L1449.51 685.238 L1450.07 685.238 L1450.63 685.238 L1451.19 685.238 L1451.75 685.238 L1452.31 685.238 L1452.87 685.238 L1453.42 685.238 L1453.98 685.238 L1454.54 685.238 L1455.1 685.238 L1455.66 685.238 L1456.22 685.238 L1456.78 685.238 L1457.34 685.238 L1457.9 685.238 L1458.46 685.238 L1459.02 685.238 L1459.58 685.238 L1460.14 685.238 L1460.7 685.238 L1461.25 685.238 L1461.81 685.238 L1462.37 685.238 L1462.93 685.238 L1463.49 685.238 L1464.05 685.238 L1464.61 685.238 L1465.17 685.238 L1465.73 685.238 L1466.29 685.238 L1466.85 685.238 L1467.41 685.238 L1467.97 685.238 L1468.52 685.238 L1469.08 685.238 L1469.64 685.238 L1470.2 685.238 L1470.76 685.238 L1471.32 685.238 L1471.88 685.238 L1472.44 685.238 L1473 685.238 L1473.56 685.238 L1474.12 685.238 L1474.68 685.238 L1475.24 685.238 L1475.79 685.238 L1476.35 685.238 L1476.91 685.238 L1477.47 685.238 L1478.03 685.238 L1478.59 685.238 L1479.15 685.238 L1479.71 685.238 L1480.27 685.238 L1480.83 685.238 L1481.39 685.238 L1481.95 685.238 L1482.51 685.238 L1483.07 685.238 L1483.62 685.238 L1484.18 685.238 L1484.74 685.238 L1485.3 685.238 L1485.86 685.238 L1486.42 685.238 L1486.98 685.238 L1487.54 685.238 L1488.1 685.238 L1488.66 685.238 L1489.22 685.238 L1489.78 685.238 L1490.34 685.238 L1490.89 685.238 L1491.45 685.238 L1492.01 685.238 L1492.57 685.238 L1493.13 685.238 L1493.69 685.238 L1494.25 685.238 L1494.81 685.238 L1495.37 685.238 L1495.93 685.238 L1496.49 685.238 L1497.05 685.238 L1497.61 685.238 L1498.16 685.238 L1498.72 685.238 L1499.28 685.238 L1499.84 685.238 L1500.4 685.238 L1500.96 685.238 L1501.52 685.238 L1502.08 685.238 L1502.64 685.238 L1503.2 685.238 L1503.76 685.238 L1504.32 685.238 L1504.88 685.238 L1505.44 685.238 L1505.99 685.238 L1506.55 685.238 L1507.11 685.238 L1507.67 685.238 L1508.23 685.238 L1508.79 685.238 L1509.35 685.238 L1509.91 685.238 L1510.47 685.238 L1511.03 685.238 L1511.59 685.238 L1512.15 685.238 L1512.71 685.238 L1513.26 685.238 L1513.82 685.238 L1514.38 685.238 L1514.94 685.238 L1515.5 685.238 L1516.06 685.238 L1516.62 685.238 L1517.18 685.238 L1517.74 685.238 L1518.3 685.238 L1518.86 685.238 L1519.42 685.238 L1519.98 685.238 L1520.53 685.238 L1521.09 685.238 L1521.65 685.238 L1522.21 685.238 L1522.77 685.238 L1523.33 685.238 L1523.89 685.238 L1524.45 685.238 L1525.01 685.238 L1525.57 685.238 L1526.13 685.238 L1526.69 685.238 L1527.25 685.238 L1527.81 685.238 L1528.36 685.238 L1528.92 685.238 L1529.48 685.238 L1530.04 685.238 L1530.6 685.238 L1531.16 685.238 L1531.72 685.238 L1532.28 685.238 L1532.84 685.238 L1533.4 685.238 L1533.96 685.238 L1534.52 685.238 L1535.08 685.238 L1535.63 685.238 L1536.19 685.238 L1536.75 685.238 L1537.31 685.238 L1537.87 685.238 L1538.43 685.238 L1538.99 685.238 L1539.55 685.238 L1540.11 685.238 L1540.67 685.238 L1541.23 685.238 L1541.79 685.238 L1542.35 685.238 L1542.9 685.238 L1543.46 685.238 L1544.02 685.238 L1544.58 685.238 L1545.14 685.238 L1545.7 685.238 L1546.26 685.238 L1546.82 685.238 L1547.38 685.238 L1547.94 685.238 L1548.5 685.238 L1549.06 685.238 L1549.62 685.238 L1550.18 685.238 L1550.73 685.238 L1551.29 685.238 L1551.85 685.238 L1552.41 685.238 L1552.97 685.238 L1553.53 685.238 L1554.09 685.238 L1554.65 685.238 L1555.21 685.238 L1555.77 685.238 L1556.33 685.238 L1556.89 685.238 L1557.45 685.238 L1558 685.238 L1558.56 685.238 L1559.12 685.238 L1559.68 685.238 L1560.24 685.238 L1560.8 685.238 L1561.36 685.238 L1561.92 685.238 L1562.48 685.238 L1563.04 685.238 L1563.6 685.238 L1564.16 685.238 L1564.72 685.238 L1565.28 685.238 L1565.83 685.238 L1566.39 685.238 L1566.95 685.238 L1567.51 685.238 L1568.07 685.238 L1568.63 685.238 L1569.19 685.238 L1569.75 685.238 L1570.31 685.238 L1570.87 685.238 L1571.43 685.238 L1571.99 685.238 L1572.55 685.238 L1573.1 685.238 L1573.66 685.238 L1574.22 685.238 L1574.78 685.238 L1575.34 685.238 L1575.9 685.238 L1576.46 685.238 L1577.02 685.238 L1577.58 685.238 L1578.14 685.238 L1578.7 685.238 L1579.26 685.238 L1579.82 685.238 L1580.37 685.238 L1580.93 685.238 L1581.49 685.238 L1582.05 685.238 L1582.61 685.238 L1583.17 685.238 L1583.73 685.238 L1584.29 685.238 L1584.85 685.238 L1585.41 685.238 L1585.97 685.238 L1586.53 685.238 L1587.09 685.238 L1587.65 685.238 L1588.2 685.238 L1588.76 685.238 L1589.32 685.238 L1589.88 685.238 L1590.44 685.238 L1591 685.238 L1591.56 685.238 L1592.12 685.238 L1592.68 685.238 L1593.24 685.238 L1593.8 685.238 L1594.36 685.238 L1594.92 685.238 L1595.47 685.238 L1596.03 685.238 L1596.59 685.238 L1597.15 685.238 L1597.71 685.238 L1598.27 685.238 L1598.83 685.238 L1599.39 685.238 L1599.95 685.238 L1600.51 685.238 L1601.07 685.238 L1601.63 685.238 L1602.19 685.238 L1602.74 685.238 L1603.3 685.238 L1603.86 685.238 L1604.42 685.238 L1604.98 685.238 L1605.54 685.238 L1606.1 685.238 L1606.66 685.238 L1607.22 685.238 L1607.78 685.238 L1608.34 685.238 L1608.9 685.238 L1609.46 685.238 L1610.02 685.238 L1610.57 685.238 L1611.13 685.238 L1611.69 685.238 L1612.25 685.238 L1612.81 685.238 L1613.37 685.238 L1613.93 685.238 L1614.49 685.238 L1615.05 685.238 L1615.61 685.238 L1616.17 685.238 L1616.73 685.238 L1617.29 685.238 L1617.84 685.238 L1618.4 685.238 L1618.96 685.238 L1619.52 685.238 L1620.08 685.238 L1620.64 685.238 L1621.2 685.238 L1621.76 685.238 L1622.32 685.238 L1622.88 685.238 L1623.44 685.238 L1624 685.238 L1624.56 685.238 L1625.11 685.238 L1625.67 685.238 L1626.23 685.238 L1626.79 685.238 L1627.35 685.238 L1627.91 685.238 L1628.47 685.238 L1629.03 685.238 L1629.59 685.238 L1630.15 685.238 L1630.71 685.238 L1631.27 685.238 L1631.83 685.238 L1632.39 685.238 L1632.94 685.238 L1633.5 685.238 L1634.06 685.238 L1634.62 685.238 L1635.18 685.238 L1635.74 685.238 L1636.3 685.238 L1636.86 685.238 L1637.42 685.238 L1637.98 685.238 L1638.54 685.238 L1639.1 685.238 L1639.66 685.238 L1640.21 685.238 L1640.77 685.238 L1641.33 685.238 L1641.89 685.238 L1642.45 685.238 L1643.01 685.238 L1643.57 685.238 L1644.13 685.238 L1644.69 685.238 L1645.25 685.238 L1645.81 685.238 L1646.37 685.238 L1646.93 685.238 L1647.48 685.238 L1648.04 685.238 L1648.6 685.238 L1649.16 685.238 L1649.72 685.238 L1650.28 685.238 L1650.84 685.238 L1651.4 685.238 L1651.96 685.238 L1652.52 685.238 L1653.08 685.238 L1653.64 685.238 L1654.2 685.238 L1654.76 685.238 L1655.31 685.238 L1655.87 685.238 L1656.43 685.238 L1656.99 685.238 L1657.55 685.238 L1658.11 685.238 L1658.67 685.238 L1659.23 685.238 L1659.79 685.238 L1660.35 685.238 L1660.91 685.238 L1661.47 685.238 L1662.03 685.238 L1662.58 685.238 L1663.14 685.238 L1663.7 685.238 L1664.26 685.238 L1664.82 685.238 L1665.38 685.238 L1665.94 685.238 L1666.5 685.238 L1667.06 685.238 L1667.62 685.238 L1668.18 685.238 L1668.74 685.238 L1669.3 685.238 L1669.85 685.238 L1670.41 685.238 L1670.97 685.238 L1671.53 685.238 L1672.09 685.238 L1672.65 685.238 L1673.21 685.238 L1673.77 685.238 L1674.33 685.238 L1674.89 685.238 L1675.45 685.238 L1676.01 685.238 L1676.57 685.238 L1677.13 685.238 L1677.68 685.238 L1678.24 685.238 L1678.8 685.238 L1679.36 685.238 L1679.92 685.238 L1680.48 685.238 L1681.04 685.238 L1681.6 685.238 L1682.16 685.238 L1682.72 685.238 L1683.28 685.238 L1683.84 685.238 L1684.4 685.238 L1684.95 685.238 L1685.51 685.238 L1686.07 685.238 L1686.63 685.238 L1687.19 685.238 L1687.75 685.238 L1688.31 685.238 L1688.87 685.238 L1689.43 685.238 L1689.99 685.238 L1690.55 685.238 L1691.11 685.238 L1691.67 685.238 L1692.23 685.238 L1692.78 685.238 L1693.34 685.238 L1693.9 685.238 L1694.46 685.238 L1695.02 685.238 L1695.58 685.238 L1696.14 685.238 L1696.7 685.238 L1697.26 685.238 L1697.82 685.238 L1698.38 685.238 L1698.94 685.238 L1699.5 685.238 L1700.05 685.238 L1700.61 685.238 L1701.17 685.238 L1701.73 685.238 L1702.29 685.238 L1702.85 685.238 L1703.41 685.238 L1703.97 685.238 L1704.53 685.238 L1705.09 685.238 L1705.65 685.238 L1706.21 685.238 L1706.77 685.238 L1707.32 685.238 L1707.88 685.238 L1708.44 685.238 L1709 685.238 L1709.56 685.238 L1710.12 685.238 L1710.68 685.238 L1711.24 685.238 L1711.8 685.238 L1712.36 685.238 L1712.92 685.238 L1713.48 685.238 L1714.04 685.238 L1714.6 685.238 L1715.15 685.238 L1715.71 685.238 L1716.27 685.238 L1716.83 685.238 L1717.39 685.238 L1717.95 685.238 L1718.51 685.238 L1719.07 685.238 L1719.63 685.238 L1720.19 685.238 L1720.75 685.238 L1721.31 685.238 L1721.87 685.238 L1722.42 685.238 L1722.98 685.238 L1723.54 685.238 L1724.1 685.238 L1724.66 685.238 L1725.22 685.238 L1725.78 685.238 L1726.34 685.238 L1726.9 685.238 L1727.46 685.238 L1728.02 685.238 L1728.58 685.238 L1729.14 685.238 L1729.69 685.238 L1730.25 685.238 L1730.81 685.238 L1731.37 685.238 L1731.93 685.238 L1732.49 685.238 L1733.05 685.238 L1733.61 685.238 L1734.17 685.238 L1734.73 685.238 L1735.29 685.238 L1735.85 685.238 L1736.41 685.238 L1736.97 685.238 L1737.52 685.238 L1738.08 685.238 L1738.64 685.238 L1739.2 685.238 L1739.76 685.238 L1740.32 685.238 L1740.88 685.238 L1741.44 685.238 L1742 685.238 L1742.56 685.238 L1743.12 685.238 L1743.68 685.238 L1744.24 685.238 L1744.79 685.238 L1745.35 685.238 L1745.91 685.238 L1746.47 685.238 L1747.03 685.238 L1747.59 685.238 L1748.15 685.238 L1748.71 685.238 L1749.27 685.238 L1749.83 685.238 L1750.39 685.238 L1750.95 685.238 L1751.51 685.238 L1752.06 685.238 L1752.62 685.238 L1753.18 685.238 L1753.74 685.238 L1754.3 685.238 L1754.86 685.238 L1755.42 685.238 L1755.98 685.238 L1756.54 685.238 L1757.1 685.238 L1757.66 685.238 L1758.22 685.238 L1758.78 685.238 L1759.34 685.238 L1759.89 685.238 L1760.45 685.238 L1761.01 685.238 L1761.57 685.238 L1762.13 685.238 L1762.69 685.238 L1763.25 685.238 L1763.81 685.238 L1764.37 685.238 L1764.93 685.238 L1765.49 685.238 L1766.05 685.238 L1766.61 685.238 L1767.16 685.238 L1767.72 685.238 L1768.28 685.238 L1768.84 685.238 L1769.4 685.238 L1769.96 685.238 L1770.52 685.238 L1771.08 685.238 L1771.64 685.238 L1772.2 685.238 L1772.76 685.238 L1773.32 685.238 L1773.88 685.238 L1774.43 685.238 L1774.99 685.238 L1775.55 685.238 L1776.11 685.238 L1776.67 685.238 L1777.23 685.238 L1777.79 685.238 L1778.35 685.238 L1778.91 685.238 L1779.47 685.238 L1780.03 685.238 L1780.59 685.238 L1781.15 685.238 L1781.71 685.238 L1782.26 685.238 L1782.82 685.238 L1783.38 685.238 L1783.94 685.238 L1784.5 685.238 L1785.06 685.238 L1785.62 685.238 L1786.18 685.238 L1786.74 685.238 L1787.3 685.238 L1787.86 685.238 L1788.42 685.238 L1788.98 685.238 L1789.53 685.238 L1790.09 685.238 L1790.65 685.238 L1791.21 685.238 L1791.77 685.238 L1792.33 685.238 L1792.89 685.238 L1793.45 685.238 L1794.01 685.238 L1794.57 685.238 L1795.13 685.238 L1795.69 685.238 L1796.25 685.238 L1796.8 685.238 L1797.36 685.238 L1797.92 685.238 L1798.48 685.238 L1799.04 685.238 L1799.6 685.238 L1800.16 685.238 L1800.72 685.238 L1801.28 685.238 L1801.84 685.238 L1802.4 685.238 L1802.96 685.238 L1803.52 685.238 L1804.08 685.238 L1804.63 685.238 L1805.19 685.238 L1805.75 685.238 L1806.31 685.238 L1806.87 685.238 L1807.43 685.238 L1807.99 685.238 L1808.55 685.238 L1809.11 685.238 L1809.67 685.238 L1810.23 685.238 L1810.79 685.238 L1811.35 685.238 L1811.9 685.238 L1812.46 685.238 L1813.02 685.238 L1813.58 685.238 L1814.14 685.238 L1814.7 685.238 L1815.26 685.238 L1815.82 685.238 L1816.38 685.238 L1816.94 685.238 L1817.5 685.238 L1818.06 685.238 L1818.62 685.238 L1819.18 685.238 L1819.73 685.238 L1820.29 685.238 L1820.85 685.238 L1821.41 685.238 L1821.97 685.238 L1822.53 685.238 L1823.09 685.238 L1823.65 685.238 L1824.21 685.238 L1824.77 685.238 L1825.33 685.238 L1825.89 685.238 L1826.45 685.238 L1827 685.238 L1827.56 685.238 L1828.12 685.238 L1828.68 685.238 L1829.24 685.238 L1829.8 685.238 L1830.36 685.238 L1830.92 685.238 L1831.48 685.238 L1832.04 685.238 L1832.6 685.238 L1833.16 685.238 L1833.72 685.238 L1834.27 685.238 L1834.83 685.238 L1835.39 685.238 L1835.95 685.238 L1836.51 685.238 L1837.07 685.238 L1837.63 685.238 L1838.19 685.238 L1838.19 682.161 L1837.63 682.161 L1837.07 682.161 L1836.51 682.161 L1835.95 682.161 L1835.39 682.161 L1834.83 682.161 L1834.27 682.161 L1833.72 682.161 L1833.16 682.161 L1832.6 682.161 L1832.04 682.161 L1831.48 682.161 L1830.92 682.161 L1830.36 682.161 L1829.8 682.161 L1829.24 682.161 L1828.68 682.161 L1828.12 682.161 L1827.56 682.161 L1827 682.161 L1826.45 682.161 L1825.89 682.161 L1825.33 682.161 L1824.77 682.161 L1824.21 682.161 L1823.65 682.161 L1823.09 682.161 L1822.53 682.161 L1821.97 682.161 L1821.41 682.161 L1820.85 682.161 L1820.29 682.161 L1819.73 682.161 L1819.18 682.161 L1818.62 682.161 L1818.06 682.161 L1817.5 682.161 L1816.94 682.161 L1816.38 682.161 L1815.82 682.161 L1815.26 682.161 L1814.7 682.161 L1814.14 682.161 L1813.58 682.161 L1813.02 682.161 L1812.46 682.161 L1811.9 682.161 L1811.35 682.161 L1810.79 682.161 L1810.23 682.161 L1809.67 682.161 L1809.11 682.161 L1808.55 682.161 L1807.99 682.161 L1807.43 682.161 L1806.87 682.161 L1806.31 682.161 L1805.75 682.161 L1805.19 682.161 L1804.63 682.161 L1804.08 682.161 L1803.52 682.161 L1802.96 682.161 L1802.4 682.161 L1801.84 682.161 L1801.28 682.161 L1800.72 682.161 L1800.16 682.161 L1799.6 682.161 L1799.04 682.161 L1798.48 682.161 L1797.92 682.161 L1797.36 682.161 L1796.8 682.161 L1796.25 682.161 L1795.69 682.161 L1795.13 682.161 L1794.57 682.161 L1794.01 682.161 L1793.45 682.161 L1792.89 682.161 L1792.33 682.161 L1791.77 682.161 L1791.21 682.161 L1790.65 682.161 L1790.09 682.161 L1789.53 682.161 L1788.98 682.161 L1788.42 682.161 L1787.86 682.161 L1787.3 682.161 L1786.74 682.161 L1786.18 682.161 L1785.62 682.161 L1785.06 682.161 L1784.5 682.161 L1783.94 682.161 L1783.38 682.161 L1782.82 682.161 L1782.26 682.161 L1781.71 682.161 L1781.15 682.161 L1780.59 682.161 L1780.03 682.161 L1779.47 682.161 L1778.91 682.161 L1778.35 682.161 L1777.79 682.161 L1777.23 682.161 L1776.67 682.161 L1776.11 682.161 L1775.55 682.161 L1774.99 682.161 L1774.43 682.161 L1773.88 682.161 L1773.32 682.161 L1772.76 682.161 L1772.2 682.161 L1771.64 682.161 L1771.08 682.161 L1770.52 682.161 L1769.96 682.161 L1769.4 682.161 L1768.84 682.161 L1768.28 682.161 L1767.72 682.161 L1767.16 682.161 L1766.61 682.161 L1766.05 682.161 L1765.49 682.161 L1764.93 682.161 L1764.37 682.161 L1763.81 682.161 L1763.25 682.161 L1762.69 682.161 L1762.13 682.161 L1761.57 682.161 L1761.01 682.161 L1760.45 682.161 L1759.89 682.161 L1759.34 682.161 L1758.78 682.161 L1758.22 682.161 L1757.66 682.161 L1757.1 682.161 L1756.54 682.161 L1755.98 682.161 L1755.42 682.161 L1754.86 682.161 L1754.3 682.161 L1753.74 682.161 L1753.18 682.161 L1752.62 682.161 L1752.06 682.161 L1751.51 682.161 L1750.95 682.161 L1750.39 682.161 L1749.83 682.161 L1749.27 682.161 L1748.71 682.161 L1748.15 682.161 L1747.59 682.161 L1747.03 682.161 L1746.47 682.161 L1745.91 682.161 L1745.35 682.161 L1744.79 682.161 L1744.24 682.161 L1743.68 682.161 L1743.12 682.161 L1742.56 682.161 L1742 682.161 L1741.44 682.161 L1740.88 682.161 L1740.32 682.161 L1739.76 682.161 L1739.2 682.161 L1738.64 682.161 L1738.08 682.161 L1737.52 682.161 L1736.97 682.161 L1736.41 682.161 L1735.85 682.161 L1735.29 682.161 L1734.73 682.161 L1734.17 682.161 L1733.61 682.161 L1733.05 682.161 L1732.49 682.161 L1731.93 682.161 L1731.37 682.161 L1730.81 682.161 L1730.25 682.161 L1729.69 682.161 L1729.14 682.161 L1728.58 682.161 L1728.02 682.161 L1727.46 682.161 L1726.9 682.161 L1726.34 682.161 L1725.78 682.161 L1725.22 682.161 L1724.66 682.161 L1724.1 682.161 L1723.54 682.161 L1722.98 682.161 L1722.42 682.161 L1721.87 682.161 L1721.31 682.161 L1720.75 682.161 L1720.19 682.161 L1719.63 682.161 L1719.07 682.161 L1718.51 682.161 L1717.95 682.161 L1717.39 682.161 L1716.83 682.161 L1716.27 682.161 L1715.71 682.161 L1715.15 682.161 L1714.6 682.161 L1714.04 682.161 L1713.48 682.161 L1712.92 682.161 L1712.36 682.161 L1711.8 682.161 L1711.24 682.161 L1710.68 682.161 L1710.12 682.161 L1709.56 682.161 L1709 682.161 L1708.44 682.161 L1707.88 682.161 L1707.32 682.161 L1706.77 682.161 L1706.21 682.161 L1705.65 682.161 L1705.09 682.161 L1704.53 682.161 L1703.97 682.161 L1703.41 682.161 L1702.85 682.161 L1702.29 682.161 L1701.73 682.161 L1701.17 682.161 L1700.61 682.161 L1700.05 682.161 L1699.5 682.161 L1698.94 682.161 L1698.38 682.161 L1697.82 682.161 L1697.26 682.161 L1696.7 682.161 L1696.14 682.161 L1695.58 682.161 L1695.02 682.161 L1694.46 682.161 L1693.9 682.161 L1693.34 682.161 L1692.78 682.161 L1692.23 682.161 L1691.67 682.161 L1691.11 682.161 L1690.55 682.161 L1689.99 682.161 L1689.43 682.161 L1688.87 682.161 L1688.31 682.161 L1687.75 682.161 L1687.19 682.161 L1686.63 682.161 L1686.07 682.161 L1685.51 682.161 L1684.95 682.161 L1684.4 682.161 L1683.84 682.161 L1683.28 682.161 L1682.72 682.161 L1682.16 682.161 L1681.6 682.161 L1681.04 682.161 L1680.48 682.161 L1679.92 682.161 L1679.36 682.161 L1678.8 682.161 L1678.24 682.161 L1677.68 682.161 L1677.13 682.161 L1676.57 682.161 L1676.01 682.161 L1675.45 682.161 L1674.89 682.161 L1674.33 682.161 L1673.77 682.161 L1673.21 682.161 L1672.65 682.161 L1672.09 682.161 L1671.53 682.161 L1670.97 682.161 L1670.41 682.161 L1669.85 682.161 L1669.3 682.161 L1668.74 682.161 L1668.18 682.161 L1667.62 682.161 L1667.06 682.161 L1666.5 682.161 L1665.94 682.161 L1665.38 682.161 L1664.82 682.161 L1664.26 682.161 L1663.7 682.161 L1663.14 682.161 L1662.58 682.161 L1662.03 682.161 L1661.47 682.161 L1660.91 682.161 L1660.35 682.161 L1659.79 682.161 L1659.23 682.161 L1658.67 682.161 L1658.11 682.161 L1657.55 682.161 L1656.99 682.161 L1656.43 682.161 L1655.87 682.161 L1655.31 682.161 L1654.76 682.161 L1654.2 682.161 L1653.64 682.161 L1653.08 682.161 L1652.52 682.161 L1651.96 682.161 L1651.4 682.161 L1650.84 682.161 L1650.28 682.161 L1649.72 682.161 L1649.16 682.161 L1648.6 682.161 L1648.04 682.161 L1647.48 682.161 L1646.93 682.161 L1646.37 682.161 L1645.81 682.161 L1645.25 682.161 L1644.69 682.161 L1644.13 682.161 L1643.57 682.161 L1643.01 682.161 L1642.45 682.161 L1641.89 682.161 L1641.33 682.161 L1640.77 682.161 L1640.21 682.161 L1639.66 682.161 L1639.1 682.161 L1638.54 682.161 L1637.98 682.161 L1637.42 682.161 L1636.86 682.161 L1636.3 682.161 L1635.74 682.161 L1635.18 682.161 L1634.62 682.161 L1634.06 682.161 L1633.5 682.161 L1632.94 682.161 L1632.39 682.161 L1631.83 682.161 L1631.27 682.161 L1630.71 682.161 L1630.15 682.161 L1629.59 682.161 L1629.03 682.161 L1628.47 682.161 L1627.91 682.161 L1627.35 682.161 L1626.79 682.161 L1626.23 682.161 L1625.67 682.161 L1625.11 682.161 L1624.56 682.161 L1624 682.161 L1623.44 682.161 L1622.88 682.161 L1622.32 682.161 L1621.76 682.161 L1621.2 682.161 L1620.64 682.161 L1620.08 682.161 L1619.52 682.161 L1618.96 682.161 L1618.4 682.161 L1617.84 682.161 L1617.29 682.161 L1616.73 682.161 L1616.17 682.161 L1615.61 682.161 L1615.05 682.161 L1614.49 682.161 L1613.93 682.161 L1613.37 682.161 L1612.81 682.161 L1612.25 682.161 L1611.69 682.161 L1611.13 682.161 L1610.57 682.161 L1610.02 682.161 L1609.46 682.161 L1608.9 682.161 L1608.34 682.161 L1607.78 682.161 L1607.22 682.161 L1606.66 682.161 L1606.1 682.161 L1605.54 682.161 L1604.98 682.161 L1604.42 682.161 L1603.86 682.161 L1603.3 682.161 L1602.74 682.161 L1602.19 682.161 L1601.63 682.161 L1601.07 682.161 L1600.51 682.161 L1599.95 682.161 L1599.39 682.161 L1598.83 682.161 L1598.27 682.161 L1597.71 682.161 L1597.15 682.161 L1596.59 682.161 L1596.03 682.161 L1595.47 682.161 L1594.92 682.161 L1594.36 682.161 L1593.8 682.161 L1593.24 682.161 L1592.68 682.161 L1592.12 682.161 L1591.56 682.161 L1591 682.161 L1590.44 682.161 L1589.88 682.161 L1589.32 682.161 L1588.76 682.161 L1588.2 682.161 L1587.65 682.161 L1587.09 682.161 L1586.53 682.161 L1585.97 682.161 L1585.41 682.161 L1584.85 682.161 L1584.29 682.161 L1583.73 682.161 L1583.17 682.161 L1582.61 682.161 L1582.05 682.161 L1581.49 682.161 L1580.93 682.161 L1580.37 682.161 L1579.82 682.161 L1579.26 682.161 L1578.7 682.161 L1578.14 682.161 L1577.58 682.161 L1577.02 682.161 L1576.46 682.161 L1575.9 682.161 L1575.34 682.161 L1574.78 682.161 L1574.22 682.161 L1573.66 682.161 L1573.1 682.161 L1572.55 682.161 L1571.99 682.161 L1571.43 682.161 L1570.87 682.161 L1570.31 682.161 L1569.75 682.161 L1569.19 682.161 L1568.63 682.161 L1568.07 682.161 L1567.51 682.161 L1566.95 682.161 L1566.39 682.161 L1565.83 682.161 L1565.28 682.161 L1564.72 682.161 L1564.16 682.161 L1563.6 682.161 L1563.04 682.161 L1562.48 682.161 L1561.92 682.161 L1561.36 682.161 L1560.8 682.161 L1560.24 682.161 L1559.68 682.161 L1559.12 682.161 L1558.56 682.161 L1558 682.161 L1557.45 682.161 L1556.89 682.161 L1556.33 682.161 L1555.77 682.161 L1555.21 682.161 L1554.65 682.161 L1554.09 682.161 L1553.53 682.161 L1552.97 682.161 L1552.41 682.161 L1551.85 682.161 L1551.29 682.161 L1550.73 682.161 L1550.18 682.161 L1549.62 682.161 L1549.06 682.161 L1548.5 682.161 L1547.94 682.161 L1547.38 682.161 L1546.82 682.161 L1546.26 682.161 L1545.7 682.161 L1545.14 682.161 L1544.58 682.161 L1544.02 682.161 L1543.46 682.161 L1542.9 682.161 L1542.35 682.161 L1541.79 682.161 L1541.23 682.161 L1540.67 682.161 L1540.11 682.161 L1539.55 682.161 L1538.99 682.161 L1538.43 682.161 L1537.87 682.161 L1537.31 682.161 L1536.75 682.161 L1536.19 682.161 L1535.63 682.161 L1535.08 682.161 L1534.52 682.161 L1533.96 682.161 L1533.4 682.161 L1532.84 682.161 L1532.28 682.161 L1531.72 682.161 L1531.16 682.161 L1530.6 682.161 L1530.04 682.161 L1529.48 682.161 L1528.92 682.161 L1528.36 682.161 L1527.81 682.161 L1527.25 682.161 L1526.69 682.161 L1526.13 682.161 L1525.57 682.161 L1525.01 682.161 L1524.45 682.161 L1523.89 682.161 L1523.33 682.161 L1522.77 682.161 L1522.21 682.161 L1521.65 682.161 L1521.09 682.161 L1520.53 682.161 L1519.98 682.161 L1519.42 682.161 L1518.86 682.161 L1518.3 682.161 L1517.74 682.161 L1517.18 682.161 L1516.62 682.161 L1516.06 682.161 L1515.5 682.161 L1514.94 682.161 L1514.38 682.161 L1513.82 682.161 L1513.26 682.161 L1512.71 682.161 L1512.15 682.161 L1511.59 682.161 L1511.03 682.161 L1510.47 682.161 L1509.91 682.161 L1509.35 682.161 L1508.79 682.161 L1508.23 682.161 L1507.67 682.161 L1507.11 682.161 L1506.55 682.161 L1505.99 682.161 L1505.44 682.161 L1504.88 682.161 L1504.32 682.161 L1503.76 682.161 L1503.2 682.161 L1502.64 682.161 L1502.08 682.161 L1501.52 682.161 L1500.96 682.161 L1500.4 682.161 L1499.84 682.161 L1499.28 682.161 L1498.72 682.161 L1498.16 682.161 L1497.61 682.161 L1497.05 682.161 L1496.49 682.161 L1495.93 682.161 L1495.37 682.161 L1494.81 682.161 L1494.25 682.161 L1493.69 682.161 L1493.13 682.161 L1492.57 682.161 L1492.01 682.161 L1491.45 682.161 L1490.89 682.161 L1490.34 682.161 L1489.78 682.161 L1489.22 682.161 L1488.66 682.161 L1488.1 682.161 L1487.54 682.161 L1486.98 682.161 L1486.42 682.161 L1485.86 682.161 L1485.3 682.161 L1484.74 682.161 L1484.18 682.161 L1483.62 682.161 L1483.07 682.161 L1482.51 682.161 L1481.95 682.161 L1481.39 682.161 L1480.83 682.161 L1480.27 682.161 L1479.71 682.161 L1479.15 682.161 L1478.59 682.161 L1478.03 682.161 L1477.47 682.161 L1476.91 682.161 L1476.35 682.161 L1475.79 682.161 L1475.24 682.161 L1474.68 682.161 L1474.12 682.161 L1473.56 682.161 L1473 682.161 L1472.44 682.161 L1471.88 682.161 L1471.32 682.161 L1470.76 682.161 L1470.2 682.161 L1469.64 682.161 L1469.08 682.161 L1468.52 682.161 L1467.97 682.161 L1467.41 682.161 L1466.85 682.161 L1466.29 682.161 L1465.73 682.161 L1465.17 682.161 L1464.61 682.161 L1464.05 682.161 L1463.49 682.161 L1462.93 682.161 L1462.37 682.161 L1461.81 682.161 L1461.25 682.161 L1460.7 682.161 L1460.14 682.161 L1459.58 682.161 L1459.02 682.161 L1458.46 682.161 L1457.9 682.161 L1457.34 682.161 L1456.78 682.161 L1456.22 682.161 L1455.66 682.161 L1455.1 682.161 L1454.54 682.161 L1453.98 682.161 L1453.42 682.161 L1452.87 682.161 L1452.31 682.161 L1451.75 682.161 L1451.19 682.161 L1450.63 682.161 L1450.07 682.161 L1449.51 682.161 L1448.95 682.161 L1448.39 682.161 L1447.83 682.161 L1447.27 682.161 L1446.71 682.161 L1446.15 682.161 L1445.6 682.161 L1445.04 682.161 L1444.48 682.161 L1443.92 682.161 L1443.36 682.161 L1442.8 682.161 L1442.24 682.161 L1441.68 682.161 L1441.12 682.161 L1440.56 682.161 L1440 682.161 L1439.44 682.161 L1438.88 682.161 L1438.33 682.161 L1437.77 682.161 L1437.21 682.161 L1436.65 682.161 L1436.09 682.161 L1435.53 682.161 L1434.97 682.161 L1434.41 682.161 L1433.85 682.161 L1433.29 682.161 L1432.73 682.161 L1432.17 682.161 L1431.61 682.161 L1431.05 682.161 L1430.5 682.161 L1429.94 682.161 L1429.38 682.161 L1428.82 682.161 L1428.26 682.161 L1427.7 682.161 L1427.14 682.161 L1426.58 682.161 L1426.02 682.161 L1425.46 682.161 L1424.9 682.161 L1424.34 682.161 L1423.78 682.161 L1423.23 682.161 L1422.67 682.161 L1422.11 682.161 L1421.55 682.161 L1420.99 682.161 L1420.43 682.161 L1419.87 682.161 L1419.31 682.161 L1418.75 682.161 L1418.19 682.161 L1417.63 682.161 L1417.07 682.161 L1416.51 682.161 L1415.95 682.161 L1415.4 682.161 L1414.84 682.161 L1414.28 682.161 L1413.72 682.161 L1413.16 682.161 L1412.6 682.161 L1412.04 682.161 L1411.48 682.161 L1410.92 682.161 L1410.36 682.161 L1409.8 682.161 L1409.24 682.161 L1408.68 682.161 L1408.13 682.161 L1407.57 682.161 L1407.01 682.161 L1406.45 682.161 L1405.89 682.161 L1405.33 682.161 L1404.77 682.161 L1404.21 682.161 L1403.65 682.161 L1403.09 682.161 L1402.53 682.161 L1401.97 682.161 L1401.41 682.161 L1400.86 682.161 L1400.3 682.161 L1399.74 682.161 L1399.18 682.161 L1398.62 682.161 L1398.06 682.161 L1397.5 682.161 L1396.94 682.161 L1396.38 682.161 L1395.82 682.161 L1395.26 682.161 L1394.7 682.161 L1394.14 682.161 L1393.58 682.161 L1393.03 682.161 L1392.47 682.161 L1391.91 682.161 L1391.35 682.161 L1390.79 682.161 L1390.23 682.161 L1389.67 682.161 L1389.11 682.161 L1388.55 682.161 L1387.99 682.161 L1387.43 682.161 L1386.87 682.161 L1386.31 682.161 L1385.76 682.161 L1385.2 682.161 L1384.64 682.161 L1384.08 682.161 L1383.52 682.161 L1382.96 682.161 L1382.4 682.161 L1381.84 682.161 L1381.28 682.161 L1380.72 682.161 L1380.16 682.161 L1379.6 682.161 L1379.04 682.161 L1378.49 682.161 L1377.93 682.161 L1377.37 682.161 L1376.81 682.161 L1376.25 682.161 L1375.69 682.161 L1375.13 682.161 L1374.57 682.161 L1374.01 682.161 L1373.45 682.161 L1372.89 682.161 L1372.33 682.161 L1371.77 682.161 L1371.21 682.161 L1370.66 682.161 L1370.1 682.161 L1369.54 682.161 L1368.98 682.161 L1368.42 682.161 L1367.86 682.161 L1367.3 682.161 L1366.74 682.161 L1366.18 682.161 L1365.62 682.161 L1365.06 682.161 L1364.5 682.161 L1363.94 682.161 L1363.39 682.161 L1362.83 682.161 L1362.27 682.161 L1361.71 682.161 L1361.15 682.161 L1360.59 682.161 L1360.03 682.161 L1359.47 682.161 L1358.91 682.161 L1358.35 682.161 L1357.79 682.161 L1357.23 682.161 L1356.67 682.161 L1356.12 682.161 L1355.56 682.161 L1355 682.161 L1354.44 682.161 L1353.88 682.161 L1353.32 682.161 L1352.76 682.161 L1352.2 682.161 L1351.64 682.161 L1351.08 682.161 L1350.52 682.161 L1349.96 682.161 L1349.4 682.161 L1348.84 682.161 L1348.29 682.161 L1347.73 682.161 L1347.17 682.161 L1346.61 682.161 L1346.05 682.161 L1345.49 682.161 L1344.93 682.161 L1344.37 682.161 L1343.81 682.161 L1343.25 682.161 L1342.69 682.161 L1342.13 682.161 L1341.57 682.161 L1341.02 682.161 L1340.46 682.161 L1339.9 682.161 L1339.34 682.161 L1338.78 682.161 L1338.22 682.161 L1337.66 682.161 L1337.1 682.161 L1336.54 682.161 L1335.98 682.161 L1335.42 682.161 L1334.86 682.161 L1334.3 682.161 L1333.75 682.161 L1333.19 682.161 L1332.63 682.161 L1332.07 682.161 L1331.51 682.161 L1330.95 682.161 L1330.39 682.161 L1329.83 682.161 L1329.27 682.161 L1328.71 682.161 L1328.15 682.161 L1327.59 682.161 L1327.03 682.161 L1326.47 682.161 L1325.92 682.161 L1325.36 682.161 L1324.8 682.161 L1324.24 682.161 L1323.68 682.161 L1323.12 682.161 L1322.56 682.161 L1322 682.161 L1321.44 682.161 L1320.88 682.161 L1320.32 682.161 L1319.76 682.161 L1319.2 682.161 L1318.65 682.161 L1318.09 682.161 L1317.53 682.161 L1316.97 682.161 L1316.41 682.161 L1315.85 682.161 L1315.29 682.161 L1314.73 682.161 L1314.17 682.161 L1313.61 682.161 L1313.05 682.161 L1312.49 682.161 L1311.93 682.161 L1311.38 682.161 L1310.82 682.161 L1310.26 682.161 L1309.7 682.161 L1309.14 682.161 L1308.58 682.161 L1308.02 682.161 L1307.46 682.161 L1306.9 682.161 L1306.34 682.161 L1305.78 682.161 L1305.22 682.161 L1304.66 682.161 L1304.1 682.161 L1303.55 682.161 L1302.99 682.161 L1302.43 682.161 L1301.87 682.161 L1301.31 682.161 L1300.75 682.161 L1300.19 682.161 L1299.63 682.161 L1299.07 682.161 L1298.51 682.161 L1297.95 682.161 L1297.39 682.161 L1296.83 682.161 L1296.28 682.161 L1295.72 682.161 L1295.16 682.161 L1294.6 682.161 L1294.04 682.161 L1293.48 682.161 L1292.92 682.161 L1292.36 682.161 L1291.8 682.161 L1291.24 682.161 L1290.68 682.161 L1290.12 682.161 L1289.56 682.161 L1289 682.161 L1288.45 682.161 L1287.89 682.161 L1287.33 682.161 L1286.77 682.161 L1286.21 682.161 L1285.65 682.161 L1285.09 682.161 L1284.53 682.161 L1283.97 682.161 L1283.41 682.161 L1282.85 682.161 L1282.29 682.161 L1281.73 682.161 L1281.18 682.161 L1280.62 682.161 L1280.06 682.161 L1279.5 682.161 L1278.94 682.161 L1278.38 682.161 L1277.82 682.161 L1277.26 682.161 L1276.7 682.161 L1276.14 682.161 L1275.58 682.161 L1275.02 682.161 L1274.46 682.161 L1273.91 682.161 L1273.35 682.161 L1272.79 682.161 L1272.23 682.161 L1271.67 682.161 L1271.11 682.161 L1270.55 682.161 L1269.99 682.161 L1269.43 682.161 L1268.87 682.161 L1268.31 682.161 L1267.75 682.161 L1267.19 682.161 L1266.63 682.161 L1266.08 682.161 L1265.52 682.161 L1264.96 682.161 L1264.4 682.161 L1263.84 682.161 L1263.28 682.161 L1262.72 682.161 L1262.16 682.161 L1261.6 682.161 L1261.04 682.161 L1260.48 682.161 L1259.92 682.161 L1259.36 682.161 L1258.81 682.161 L1258.25 682.161 L1257.69 682.161 L1257.13 682.161 L1256.57 682.161 L1256.01 682.161 L1255.45 682.161 L1254.89 682.161 L1254.33 682.161 L1253.77 682.161 L1253.21 682.161 L1252.65 682.161 L1252.09 682.161 L1251.54 682.161 L1250.98 682.161 L1250.42 682.161 L1249.86 682.161 L1249.3 682.161 L1248.74 682.161 L1248.18 682.161 L1247.62 682.161 L1247.06 682.161 L1246.5 682.161 L1245.94 682.161 L1245.38 682.161 L1244.82 682.161 L1244.26 682.161 L1243.71 682.161 L1243.15 682.161 L1242.59 682.161 L1242.03 682.161 L1241.47 682.161 L1240.91 682.161 L1240.35 682.161 L1239.79 682.161 L1239.23 682.161 L1238.67 682.161 L1238.11 682.161 L1237.55 682.161 L1236.99 682.161 L1236.44 682.161 L1235.88 682.161 L1235.32 682.161 L1234.76 682.161 L1234.2 682.161 L1233.64 682.161 L1233.08 682.161 L1232.52 682.161 L1231.96 682.161 L1231.4 682.161 L1230.84 682.161 L1230.28 682.161 L1229.72 682.161 L1229.17 682.161 L1228.61 682.161 L1228.05 682.161 L1227.49 682.161 L1226.93 682.161 L1226.37 682.161 L1225.81 682.161 L1225.25 682.161 L1224.69 682.161 L1224.13 682.161 L1223.57 682.161 L1223.01 682.161 L1222.45 682.161 L1221.89 682.161 L1221.34 682.161 L1220.78 682.161 L1220.22 682.161 L1219.66 682.161 L1219.1 682.161 L1218.54 682.161 L1217.98 682.161 L1217.42 682.161 L1216.86 682.161 L1216.3 682.161 L1215.74 682.161 L1215.18 682.161 L1214.62 682.161 L1214.07 682.161 L1213.51 682.161 L1212.95 682.161 L1212.39 682.161 L1211.83 682.161 L1211.27 682.161 L1210.71 682.161 L1210.15 682.161 L1209.59 682.161 L1209.03 682.161 L1208.47 682.161 L1207.91 682.161 L1207.35 682.161 L1206.8 682.161 L1206.24 682.161 L1205.68 682.161 L1205.12 682.161 L1204.56 682.161 L1204 682.161 L1203.44 682.161 L1202.88 682.161 L1202.32 682.161 L1201.76 682.161 L1201.2 682.161 L1200.64 682.161 L1200.08 682.161 L1199.52 682.161 L1198.97 682.161 L1198.41 682.161 L1197.85 682.161 L1197.29 682.161 L1196.73 682.161 L1196.17 682.161 L1195.61 682.161 L1195.05 682.161 L1194.49 682.161 L1193.93 682.161 L1193.37 682.161 L1192.81 682.161 L1192.25 682.161 L1191.7 682.161 L1191.14 682.161 L1190.58 682.161 L1190.02 682.161 L1189.46 682.161 L1188.9 682.161 L1188.34 682.161 L1187.78 682.161 L1187.22 682.161 L1186.66 682.161 L1186.1 682.161 L1185.54 682.161 L1184.98 682.161 L1184.43 682.161 L1183.87 682.161 L1183.31 682.161 L1182.75 682.161 L1182.19 682.161 L1181.63 682.161 L1181.07 682.161 L1180.51 682.161 L1179.95 682.161 L1179.39 682.161 L1178.83 682.161 L1178.27 682.161 L1177.71 682.161 L1177.15 682.161 L1176.6 682.161 L1176.04 682.161 L1175.48 682.161 L1174.92 682.161 L1174.36 682.161 L1173.8 682.161 L1173.24 682.161 L1172.68 682.161 L1172.12 682.161 L1171.56 682.161 L1171 682.161 L1170.44 682.161 L1169.88 682.161 L1169.33 682.161 L1168.77 682.161 L1168.21 682.161 L1167.65 682.161 L1167.09 682.161 L1166.53 682.161 L1165.97 682.161 L1165.41 682.161 L1164.85 682.161 L1164.29 682.161 L1163.73 682.161 L1163.17 682.161 L1162.61 682.161 L1162.05 682.161 L1161.5 682.161 L1160.94 682.161 L1160.38 682.161 L1159.82 682.161 L1159.26 682.161 L1158.7 682.161 L1158.14 682.161 L1157.58 682.161 L1157.02 682.161 L1156.46 682.161 L1155.9 682.161 L1155.34 682.161 L1154.78 682.161 L1154.23 682.161 L1153.67 682.161 L1153.11 682.161 L1152.55 682.161 L1151.99 682.161 L1151.43 682.161 L1150.87 682.161 L1150.31 682.161 L1149.75 682.161 L1149.19 682.161 L1148.63 682.161 L1148.07 682.161 L1147.51 682.161 L1146.96 682.161 L1146.4 682.161 L1145.84 682.161 L1145.28 682.161 L1144.72 682.161 L1144.16 682.161 L1143.6 682.161 L1143.04 682.161 L1142.48 682.161 L1141.92 682.161 L1141.36 682.161 L1140.8 682.161 L1140.24 682.161 L1139.68 682.161 L1139.13 682.161 L1138.57 682.161 L1138.01 682.161 L1137.45 682.161 L1136.89 682.161 L1136.33 682.161 L1135.77 682.161 L1135.21 682.161 L1134.65 682.161 L1134.09 682.161 L1133.53 682.161 L1132.97 682.161 L1132.41 682.161 L1131.86 682.161 L1131.3 682.161 L1130.74 682.161 L1130.18 682.161 L1129.62 682.161 L1129.06 682.161 L1128.5 682.161 L1127.94 682.161 L1127.38 682.161 L1126.82 682.161 L1126.26 682.161 L1125.7 682.161 L1125.14 682.161 L1124.59 682.161 L1124.03 682.161 L1123.47 682.161 L1122.91 682.161 L1122.35 682.161 L1121.79 682.161 L1121.23 682.161 L1120.67 682.161 L1120.11 682.161 L1119.55 682.161 L1118.99 682.161 L1118.43 682.161 L1117.87 682.161 L1117.31 682.161 L1116.76 682.161 L1116.2 682.161 L1115.64 682.161 L1115.08 682.161 L1114.52 682.161 L1113.96 682.161 L1113.4 682.161 L1112.84 682.161 L1112.28 682.161 L1111.72 682.161 L1111.16 682.161 L1110.6 682.161 L1110.04 682.161 L1109.49 682.161 L1108.93 682.161 L1108.37 682.161 L1107.81 682.161 L1107.25 682.161 L1106.69 682.161 L1106.13 682.161 L1105.57 682.161 L1105.01 682.161 L1104.45 682.161 L1103.89 682.161 L1103.33 682.161 L1102.77 682.161 L1102.22 682.161 L1101.66 682.161 L1101.1 682.161 L1100.54 682.161 L1099.98 682.161 L1099.42 682.161 L1098.86 682.161 L1098.3 682.161 L1097.74 682.161 L1097.18 682.161 L1096.62 682.161 L1096.06 682.161 L1095.5 682.161 L1094.94 682.161 L1094.39 682.161 L1093.83 682.161 L1093.27 682.161 L1092.71 682.161 L1092.15 682.161 L1091.59 682.161 L1091.03 682.161 L1090.47 682.161 L1089.91 682.161 L1089.35 682.161 L1088.79 682.161 L1088.23 682.161 L1087.67 682.161 L1087.12 682.161 L1086.56 682.161 L1086 682.161 L1085.44 682.161 L1084.88 682.161 L1084.32 682.161 L1083.76 682.161 L1083.2 682.161 L1082.64 682.161 L1082.08 682.161 L1081.52 682.161 L1080.96 682.161 L1080.4 682.161 L1079.85 682.161 L1079.29 682.161 L1078.73 682.161 L1078.17 682.161 L1077.61 682.161 L1077.05 682.161 L1076.49 682.161 L1075.93 682.161 L1075.37 682.161 L1074.81 682.161 L1074.25 682.161 L1073.69 682.161 L1073.13 682.161 L1072.57 682.161 L1072.02 682.161 L1071.46 682.161 L1070.9 682.161 L1070.34 682.161 L1069.78 682.161 L1069.22 682.161 L1068.66 682.161 L1068.1 682.161 L1067.54 682.161 L1066.98 682.161 L1066.42 682.161 L1065.86 682.161 L1065.3 682.161 L1064.75 682.161 L1064.19 682.161 L1063.63 682.161 L1063.07 682.161 L1062.51 682.161 L1061.95 682.161 L1061.39 682.161 L1060.83 682.161 L1060.27 682.161 L1059.71 682.161 L1059.15 682.161 L1058.59 682.161 L1058.03 682.161 L1057.48 682.161 L1056.92 682.161 L1056.36 682.161 L1055.8 682.161 L1055.24 682.161 L1054.68 682.161 L1054.12 682.161 L1053.56 682.161 L1053 682.161 L1052.44 682.161 L1051.88 682.161 L1051.32 682.161 L1050.76 682.161 L1050.2 682.161 L1049.65 682.161 L1049.09 682.161 L1048.53 682.161 L1047.97 682.161 L1047.41 682.161 L1046.85 682.161 L1046.29 682.161 L1045.73 682.161 L1045.17 682.161 L1044.61 682.161 L1044.05 682.161 L1043.49 682.161 L1042.93 682.161 L1042.38 682.161 L1041.82 682.161 L1041.26 682.161 L1040.7 682.161 L1040.14 682.161 L1039.58 682.161 L1039.02 682.161 L1038.46 682.161 L1037.9 682.161 L1037.34 682.161 L1036.78 682.161 L1036.22 682.161 L1035.66 682.161 L1035.1 682.161 L1034.55 682.161 L1033.99 682.161 L1033.43 682.161 L1032.87 682.161 L1032.31 682.161 L1031.75 682.161 L1031.19 682.161 L1030.63 682.161 L1030.07 682.161 L1029.51 682.161 L1028.95 682.161 L1028.39 682.161 L1027.83 682.161 L1027.28 682.161 L1026.72 682.161 L1026.16 682.161 L1025.6 682.161 L1025.04 682.161 L1024.48 682.161 L1023.92 682.161 L1023.36 682.161 L1022.8 682.161 L1022.24 682.161 L1021.68 682.161 L1021.12 682.161 L1020.56 682.161 L1020.01 682.161 L1019.45 682.161 L1018.89 682.161 L1018.33 682.161 L1017.77 682.161 L1017.21 682.161 L1016.65 682.161 L1016.09 682.161 L1015.53 682.161 L1014.97 682.161 L1014.41 682.161 L1013.85 682.161 L1013.29 682.161 L1012.73 682.161 L1012.18 682.161 L1011.62 682.161 L1011.06 682.161 L1010.5 682.161 L1009.94 682.161 L1009.38 682.161 L1008.82 682.161 L1008.26 682.161 L1007.7 682.161 L1007.14 682.161 L1006.58 682.161 L1006.02 682.161 L1005.46 682.161 L1004.91 682.161 L1004.35 682.161 L1003.79 682.161 L1003.23 682.161 L1002.67 682.161 L1002.11 682.161 L1001.55 682.161 L1000.99 682.161 L1000.43 682.161 L999.872 682.161 L999.313 682.161 L998.754 682.161 L998.194 682.161 L997.635 682.161 L997.076 682.161 L996.517 682.161 L995.957 682.161 L995.398 682.161 L994.839 682.161 L994.28 682.161 L993.72 682.161 L993.161 682.161 L992.602 682.161 L992.043 682.161 L991.483 682.161 L990.924 682.161 L990.365 682.161 L989.806 682.161 L989.246 682.161 L988.687 682.161 L988.128 682.161 L987.569 682.161 L987.009 682.161 L986.45 682.161 L985.891 682.161 L985.332 682.161 L984.772 682.161 L984.213 682.161 L983.654 682.161 L983.095 682.161 L982.535 682.161 L981.976 682.161 L981.417 682.161 L980.858 682.161 L980.298 682.161 L979.739 682.161 L979.18 682.161 L978.621 682.161 L978.061 682.161 L977.502 682.161 L976.943 682.161 L976.384 682.161 L975.824 682.161 L975.265 682.161 L974.706 682.161 L974.147 682.161 L973.587 682.161 L973.028 682.161 L972.469 682.161 L971.91 682.161 L971.35 682.161 L970.791 682.161 L970.232 682.161 L969.673 682.161 L969.113 682.161 L968.554 682.161 L967.995 682.161 L967.436 682.161 L966.876 682.161 L966.317 682.161 L965.758 682.161 L965.199 682.161 L964.639 682.161 L964.08 682.161 L963.521 682.161 L962.962 682.161 L962.402 682.161 L961.843 682.161 L961.284 682.161 L960.725 682.161 L960.165 682.161 L959.606 682.161 L959.047 682.161 L958.488 682.161 L957.928 682.161 L957.369 682.161 L956.81 682.161 L956.251 682.161 L955.691 682.161 L955.132 682.161 L954.573 682.161 L954.014 682.161 L953.454 682.161 L952.895 682.161 L952.336 682.161 L951.777 682.161 L951.217 682.161 L950.658 682.161 L950.099 682.161 L949.54 682.161 L948.98 682.161 L948.421 682.161 L947.862 682.161 L947.303 682.161 L946.743 682.161 L946.184 682.161 L945.625 682.161 L945.066 682.161 L944.506 682.161 L943.947 682.161 L943.388 682.161 L942.829 682.161 L942.269 682.161 L941.71 682.161 L941.151 682.161 L940.592 682.161 L940.032 682.161 L939.473 682.161 L938.914 682.161 L938.355 682.161 L937.795 682.161 L937.236 682.161 L936.677 682.161 L936.118 682.161 L935.558 682.161 L934.999 682.161 L934.44 682.161 L933.881 682.161 L933.321 682.161 L932.762 682.161 L932.203 682.161 L931.644 682.161 L931.084 682.161 L930.525 682.161 L929.966 682.161 L929.406 682.161 L928.847 682.161 L928.288 682.161 L927.729 682.161 L927.169 682.161 L926.61 682.161 L926.051 682.161 L925.492 682.161 L924.932 682.161 L924.373 682.161 L923.814 682.161 L923.255 682.161 L922.695 682.161 L922.136 682.161 L921.577 682.161 L921.018 682.161 L920.458 682.161 L919.899 682.161 L919.34 682.161 L918.781 682.161 L918.221 682.161 L917.662 682.161 L917.103 682.161 L916.544 682.161 L915.984 682.161 L915.425 682.161 L914.866 682.161 L914.307 682.161 L913.747 682.161 L913.188 682.161 L912.629 682.161 L912.07 682.161 L911.51 682.161 L910.951 682.161 L910.392 682.161 L909.833 682.161 L909.273 682.161 L908.714 682.161 L908.155 682.161 L907.596 682.161 L907.036 682.161 L906.477 682.161 L905.918 682.161 L905.359 682.161 L904.799 682.161 L904.24 682.161 L903.681 682.161 L903.122 682.161 L902.562 682.161 L902.003 682.161 L901.444 682.161 L900.885 682.161 L900.325 682.161 L899.766 682.161 L899.207 682.161 L898.648 682.161 L898.088 682.161 L897.529 682.161 L896.97 682.161 L896.411 682.161 L895.851 682.161 L895.292 682.161 L894.733 682.161 L894.174 682.161 L893.614 682.161 L893.055 682.161 L892.496 682.161 L891.937 682.161 L891.377 682.161 L890.818 682.161 L890.259 682.161 L889.7 682.161 L889.14 682.161 L888.581 682.161 L888.022 682.161 L887.463 682.161 L886.903 682.161 L886.344 682.161 L885.785 682.161 L885.226 682.161 L884.666 682.161 L884.107 682.161 L883.548 682.161 L882.989 682.161 L882.429 682.161 L881.87 682.161 L881.311 682.161 L880.752 682.161 L880.192 682.161 L879.633 682.161 L879.074 682.161 L878.515 682.161 L877.955 682.161 L877.396 682.161 L876.837 682.161 L876.278 682.161 L875.718 682.161 L875.159 682.161 L874.6 682.161 L874.041 682.161 L873.481 682.161 L872.922 682.161 L872.363 682.161 L871.804 682.161 L871.244 682.161 L870.685 682.161 L870.126 682.161 L869.567 682.161 L869.007 682.161 L868.448 682.161 L867.889 682.161 L867.33 682.161 L866.77 682.161 L866.211 682.161 L865.652 682.161 L865.093 682.161 L864.533 682.161 L863.974 682.161 L863.415 682.161 L862.856 682.161 L862.296 682.161 L861.737 682.161 L861.178 682.161 L860.619 682.161 L860.059 682.161 L859.5 682.161 L858.941 682.161 L858.382 682.161 L857.822 682.161 L857.263 682.161 L856.704 682.161 L856.145 682.161 L855.585 682.161 L855.026 682.161 L854.467 682.161 L853.908 682.161 L853.348 682.161 L852.789 682.161 L852.23 682.161 L851.671 682.161 L851.111 682.161 L850.552 682.161 L849.993 682.161 L849.434 682.161 L848.874 682.161 L848.315 682.161 L847.756 682.161 L847.197 682.161 L846.637 682.161 L846.078 682.161 L845.519 682.161 L844.96 682.161 L844.4 682.161 L843.841 682.161 L843.282 682.161 L842.723 682.161 L842.163 682.161 L841.604 682.161 L841.045 682.161 L840.486 682.161 L839.926 682.161 L839.367 682.161 L838.808 682.161 L838.249 682.161 L837.689 682.161 L837.13 682.161 L836.571 682.161 L836.012 682.161 L835.452 682.161 L834.893 682.161 L834.334 682.161 L833.775 682.161 L833.215 682.161 L832.656 682.161 L832.097 682.161 L831.538 682.161 L830.978 682.161 L830.419 682.161 L829.86 682.161 L829.301 682.161 L828.741 682.161 L828.182 682.161 L827.623 682.161 L827.064 682.161 L826.504 682.161 L825.945 682.161 L825.386 682.161 L824.827 682.161 L824.267 682.161 L823.708 682.161 L823.149 682.161 L822.59 682.161 L822.03 682.161 L821.471 682.161 L820.912 682.161 L820.353 682.161 L819.793 682.161 L819.234 682.161 L818.675 682.161 L818.116 682.161 L817.556 682.161 L816.997 682.161 L816.438 682.161 L815.879 682.161 L815.319 682.161 L814.76 682.161 L814.201 682.161 L813.642 682.161 L813.082 682.161 L812.523 682.161 L811.964 682.161 L811.405 682.161 L810.845 682.161 L810.286 682.161 L809.727 682.161 L809.168 682.161 L808.608 682.161 L808.049 682.161 L807.49 682.161 L806.931 682.161 L806.371 682.161 L805.812 682.161 L805.253 682.161 L804.693 682.161 L804.134 682.161 L803.575 682.161 L803.016 682.161 L802.456 682.161 L801.897 682.161 L801.338 682.161 L800.779 682.161 L800.219 682.161 L799.66 682.161 L799.101 682.161 L798.542 682.161 L797.982 682.161 L797.423 682.161 L796.864 682.161 L796.305 682.161 L795.745 682.161 L795.186 682.161 L794.627 682.161 L794.068 682.161 L793.508 682.161 L792.949 682.161 L792.39 682.161 L791.831 682.161 L791.271 682.161 L790.712 682.161 L790.153 682.161 L789.594 682.161 L789.034 682.161 L788.475 682.161 L787.916 682.161 L787.357 682.161 L786.797 682.161 L786.238 682.161 L785.679 682.161 L785.12 682.161 L784.56 682.161 L784.001 682.161 L783.442 682.161 L782.883 682.161 L782.323 682.161 L781.764 682.161 L781.205 682.161 L780.646 682.161 L780.086 682.161 L779.527 682.161 L778.968 682.161 L778.409 682.161 L777.849 682.161 L777.29 682.161 L776.731 682.161 L776.172 682.161 L775.612 682.161 L775.053 682.161 L774.494 682.161 L773.935 682.161 L773.375 682.161 L772.816 682.161 L772.257 682.161 L771.698 682.161 L771.138 682.161 L770.579 682.161 L770.02 682.161 L769.461 682.161 L768.901 682.161 L768.342 682.161 L767.783 682.161 L767.224 682.161 L766.664 682.161 L766.105 682.161 L765.546 682.161 L764.987 682.161 L764.427 682.161 L763.868 682.161 L763.309 682.161 L762.75 682.161 L762.19 682.161 L761.631 682.161 L761.072 682.161 L760.513 682.161 L759.953 682.161 L759.394 682.161 L758.835 682.161 L758.276 682.161 L757.716 682.161 L757.157 682.161 L756.598 682.161 L756.039 682.161 L755.479 682.161 L754.92 682.161 L754.361 682.161 L753.802 682.161 L753.242 682.161 L752.683 682.161 L752.124 682.161 L751.565 682.161 L751.005 682.161 L750.446 682.161 L749.887 682.161 L749.328 682.161 L748.768 682.161 L748.209 682.161 L747.65 682.161 L747.091 682.161 L746.531 682.161 L745.972 682.161 L745.413 682.161 L744.854 682.161 L744.294 682.161 L743.735 682.161 L743.176 682.161 L742.617 682.161 L742.057 682.161 L741.498 682.161 L740.939 682.161 L740.38 682.161 L739.82 682.161 L739.261 682.161 L738.702 682.161 L738.143 682.161 L737.583 682.161 L737.024 682.161 L736.465 682.161 L735.906 682.161 L735.346 682.161 L734.787 682.161 L734.228 682.161 L733.669 682.161 L733.109 682.161 L732.55 682.161 L731.991 682.161 L731.432 682.161 L730.872 682.161 L730.313 682.161 L729.754 682.161 L729.195 682.161 L728.635 682.161 L728.076 682.161 L727.517 682.161 L726.958 682.161 L726.398 682.161 L725.839 682.161 L725.28 682.161 L724.721 682.161 L724.161 682.161 L723.602 682.161 L723.043 682.161 L722.484 682.161 L721.924 682.161 L721.365 682.161 L720.806 682.161 L720.247 682.161  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip913)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.737 720.806,683.737 721.365,683.737 721.924,683.737 722.484,683.737 723.043,683.737 723.602,683.737 724.161,683.737 724.721,683.737 725.28,683.737 725.839,683.737 726.398,683.737 726.958,683.737 727.517,683.737 728.076,683.737 728.635,683.737 729.195,683.737 729.754,683.737 730.313,683.737 730.872,683.737 731.432,683.737 731.991,683.737 732.55,683.737 733.109,683.737 733.669,683.737 734.228,683.737 734.787,683.737 735.346,683.737 735.906,683.737 736.465,683.737 737.024,683.737 737.583,683.737 738.143,683.737 738.702,683.737 739.261,683.737 739.82,683.737 740.38,683.737 740.939,683.737 741.498,683.737 742.057,683.737 742.617,683.737 743.176,683.737 743.735,683.737 744.294,683.737 744.854,683.737 745.413,683.737 745.972,683.737 746.531,683.737 747.091,683.737 747.65,683.737 748.209,683.737 748.768,683.737 749.328,683.737 749.887,683.737 750.446,683.737 751.005,683.737 751.565,683.737 752.124,683.737 752.683,683.737 753.242,683.737 753.802,683.737 754.361,683.737 754.92,683.737 755.479,683.737 756.039,683.737 756.598,683.737 757.157,683.737 757.716,683.737 758.276,683.737 758.835,683.737 759.394,683.737 759.953,683.737 760.513,683.737 761.072,683.737 761.631,683.737 762.19,683.737 762.75,683.737 763.309,683.737 763.868,683.737 764.427,683.737 764.987,683.737 765.546,683.737 766.105,683.737 766.664,683.737 767.224,683.737 767.783,683.737 768.342,683.737 768.901,683.737 769.461,683.737 770.02,683.737 770.579,683.737 771.138,683.737 771.698,683.737 772.257,683.737 772.816,683.737 773.375,683.737 773.935,683.737 774.494,683.737 775.053,683.737 775.612,683.737 776.172,683.737 776.731,683.737 777.29,683.737 777.849,683.737 778.409,683.737 778.968,683.737 779.527,683.737 780.086,683.737 780.646,683.737 781.205,683.737 781.764,683.737 782.323,683.737 782.883,683.737 783.442,683.737 784.001,683.737 784.56,683.737 785.12,683.737 785.679,683.737 786.238,683.737 786.797,683.737 787.357,683.737 787.916,683.737 788.475,683.737 789.034,683.737 789.594,683.737 790.153,683.737 790.712,683.737 791.271,683.737 791.831,683.737 792.39,683.737 792.949,683.737 793.508,683.737 794.068,683.737 794.627,683.737 795.186,683.737 795.745,683.737 796.305,683.737 796.864,683.737 797.423,683.737 797.982,683.737 798.542,683.737 799.101,683.737 799.66,683.737 800.219,683.737 800.779,683.737 801.338,683.737 801.897,683.737 802.456,683.737 803.016,683.737 803.575,683.737 804.134,683.737 804.693,683.737 805.253,683.737 805.812,683.737 806.371,683.737 806.931,683.737 807.49,683.737 808.049,683.737 808.608,683.737 809.168,683.737 809.727,683.737 810.286,683.737 810.845,683.737 811.405,683.737 811.964,683.737 812.523,683.737 813.082,683.737 813.642,683.737 814.201,683.737 814.76,683.737 815.319,683.737 815.879,683.737 816.438,683.737 816.997,683.737 817.556,683.737 818.116,683.737 818.675,683.737 819.234,683.737 819.793,683.737 820.353,683.737 820.912,683.737 821.471,683.737 822.03,683.737 822.59,683.737 823.149,683.737 823.708,683.737 824.267,683.737 824.827,683.737 825.386,683.737 825.945,683.737 826.504,683.737 827.064,683.737 827.623,683.737 828.182,683.737 828.741,683.737 829.301,683.737 829.86,683.737 830.419,683.737 830.978,683.737 831.538,683.737 832.097,683.737 832.656,683.737 833.215,683.737 833.775,683.737 834.334,683.737 834.893,683.737 835.452,683.737 836.012,683.737 836.571,683.737 837.13,683.737 837.689,683.737 838.249,683.737 838.808,683.737 839.367,683.737 839.926,683.737 840.486,683.737 841.045,683.737 841.604,683.737 842.163,683.737 842.723,683.737 843.282,683.737 843.841,683.737 844.4,683.737 844.96,683.737 845.519,683.737 846.078,683.737 846.637,683.737 847.197,683.737 847.756,683.737 848.315,683.737 848.874,683.737 849.434,683.737 849.993,683.737 850.552,683.737 851.111,683.737 851.671,683.737 852.23,683.737 852.789,683.737 853.348,683.737 853.908,683.737 854.467,683.737 855.026,683.737 855.585,683.737 856.145,683.737 856.704,683.737 857.263,683.737 857.822,683.737 858.382,683.737 858.941,683.737 859.5,683.737 860.059,683.737 860.619,683.737 861.178,683.737 861.737,683.737 862.296,683.737 862.856,683.737 863.415,683.737 863.974,683.737 864.533,683.737 865.093,683.737 865.652,683.737 866.211,683.737 866.77,683.737 867.33,683.737 867.889,683.737 868.448,683.737 869.007,683.737 869.567,683.737 870.126,683.737 870.685,683.737 871.244,683.737 871.804,683.737 872.363,683.737 872.922,683.737 873.481,683.737 874.041,683.737 874.6,683.737 875.159,683.737 875.718,683.737 876.278,683.737 876.837,683.737 877.396,683.737 877.955,683.737 878.515,683.737 879.074,683.737 879.633,683.737 880.192,683.737 880.752,683.737 881.311,683.737 881.87,683.737 882.429,683.737 882.989,683.737 883.548,683.737 884.107,683.737 884.666,683.737 885.226,683.737 885.785,683.737 886.344,683.737 886.903,683.737 887.463,683.737 888.022,683.737 888.581,683.737 889.14,683.737 889.7,683.737 890.259,683.737 890.818,683.737 891.377,683.737 891.937,683.737 892.496,683.737 893.055,683.737 893.614,683.737 894.174,683.737 894.733,683.737 895.292,683.737 895.851,683.737 896.411,683.737 896.97,683.737 897.529,683.737 898.088,683.737 898.648,683.737 899.207,683.737 899.766,683.737 900.325,683.737 900.885,683.737 901.444,683.737 902.003,683.737 902.562,683.737 903.122,683.737 903.681,683.737 904.24,683.737 904.799,683.737 905.359,683.737 905.918,683.737 906.477,683.737 907.036,683.737 907.596,683.737 908.155,683.737 908.714,683.737 909.273,683.737 909.833,683.737 910.392,683.737 910.951,683.737 911.51,683.737 912.07,683.737 912.629,683.737 913.188,683.737 913.747,683.737 914.307,683.737 914.866,683.737 915.425,683.737 915.984,683.737 916.544,683.737 917.103,683.737 917.662,683.737 918.221,683.737 918.781,683.737 919.34,683.737 919.899,683.737 920.458,683.737 921.018,683.737 921.577,683.737 922.136,683.737 922.695,683.737 923.255,683.737 923.814,683.737 924.373,683.737 924.932,683.737 925.492,683.737 926.051,683.737 926.61,683.737 927.169,683.737 927.729,683.737 928.288,683.737 928.847,683.737 929.406,683.737 929.966,683.737 930.525,683.737 931.084,683.737 931.644,683.737 932.203,683.737 932.762,683.737 933.321,683.737 933.881,683.737 934.44,683.737 934.999,683.737 935.558,683.737 936.118,683.737 936.677,683.737 937.236,683.737 937.795,683.737 938.355,683.737 938.914,683.737 939.473,683.737 940.032,683.737 940.592,683.737 941.151,683.737 941.71,683.737 942.269,683.737 942.829,683.737 943.388,683.737 943.947,683.737 944.506,683.737 945.066,683.737 945.625,683.737 946.184,683.737 946.743,683.737 947.303,683.737 947.862,683.737 948.421,683.737 948.98,683.737 949.54,683.737 950.099,683.737 950.658,683.737 951.217,683.737 951.777,683.737 952.336,683.737 952.895,683.737 953.454,683.737 954.014,683.737 954.573,683.737 955.132,683.737 955.691,683.737 956.251,683.737 956.81,683.737 957.369,683.737 957.928,683.737 958.488,683.737 959.047,683.737 959.606,683.737 960.165,683.737 960.725,683.737 961.284,683.737 961.843,683.737 962.402,683.737 962.962,683.737 963.521,683.737 964.08,683.737 964.639,683.737 965.199,683.737 965.758,683.737 966.317,683.737 966.876,683.737 967.436,683.737 967.995,683.737 968.554,683.737 969.113,683.737 969.673,683.737 970.232,683.737 970.791,683.737 971.35,683.737 971.91,683.737 972.469,683.737 973.028,683.737 973.587,683.737 974.147,683.737 974.706,683.737 975.265,683.737 975.824,683.737 976.384,683.737 976.943,683.737 977.502,683.737 978.061,683.737 978.621,683.737 979.18,683.737 979.739,683.737 980.298,683.737 980.858,683.737 981.417,683.737 981.976,683.737 982.535,683.737 983.095,683.737 983.654,683.737 984.213,683.737 984.772,683.737 985.332,683.737 985.891,683.737 986.45,683.737 987.009,683.737 987.569,683.737 988.128,683.737 988.687,683.737 989.246,683.737 989.806,683.737 990.365,683.737 990.924,683.737 991.483,683.737 992.043,683.737 992.602,683.737 993.161,683.737 993.72,683.737 994.28,683.737 994.839,683.737 995.398,683.737 995.957,683.737 996.517,683.737 997.076,683.737 997.635,683.737 998.194,683.737 998.754,683.737 999.313,683.737 999.872,683.737 1000.43,683.737 1000.99,683.737 1001.55,683.737 1002.11,683.737 1002.67,683.737 1003.23,683.737 1003.79,683.737 1004.35,683.737 1004.91,683.737 1005.46,683.737 1006.02,683.737 1006.58,683.737 1007.14,683.737 1007.7,683.737 1008.26,683.737 1008.82,683.737 1009.38,683.737 1009.94,683.737 1010.5,683.737 1011.06,683.737 1011.62,683.737 1012.18,683.737 1012.73,683.737 1013.29,683.737 1013.85,683.737 1014.41,683.737 1014.97,683.737 1015.53,683.737 1016.09,683.737 1016.65,683.737 1017.21,683.737 1017.77,683.737 1018.33,683.737 1018.89,683.737 1019.45,683.737 1020.01,683.737 1020.56,683.737 1021.12,683.737 1021.68,683.737 1022.24,683.737 1022.8,683.737 1023.36,683.737 1023.92,683.737 1024.48,683.737 1025.04,683.737 1025.6,683.737 1026.16,683.737 1026.72,683.737 1027.28,683.737 1027.83,683.737 1028.39,683.737 1028.95,683.737 1029.51,683.737 1030.07,683.737 1030.63,683.737 1031.19,683.737 1031.75,683.737 1032.31,683.737 1032.87,683.737 1033.43,683.737 1033.99,683.737 1034.55,683.737 1035.1,683.737 1035.66,683.737 1036.22,683.737 1036.78,683.737 1037.34,683.737 1037.9,683.737 1038.46,683.737 1039.02,683.737 1039.58,683.737 1040.14,683.737 1040.7,683.737 1041.26,683.737 1041.82,683.737 1042.38,683.737 1042.93,683.737 1043.49,683.737 1044.05,683.737 1044.61,683.737 1045.17,683.737 1045.73,683.737 1046.29,683.737 1046.85,683.737 1047.41,683.737 1047.97,683.737 1048.53,683.737 1049.09,683.737 1049.65,683.737 1050.2,683.737 1050.76,683.737 1051.32,683.737 1051.88,683.737 1052.44,683.737 1053,683.737 1053.56,683.737 1054.12,683.737 1054.68,683.737 1055.24,683.737 1055.8,683.737 1056.36,683.737 1056.92,683.737 1057.48,683.737 1058.03,683.737 1058.59,683.737 1059.15,683.737 1059.71,683.737 1060.27,683.737 1060.83,683.737 1061.39,683.737 1061.95,683.737 1062.51,683.737 1063.07,683.737 1063.63,683.737 1064.19,683.737 1064.75,683.737 1065.3,683.737 1065.86,683.737 1066.42,683.737 1066.98,683.737 1067.54,683.737 1068.1,683.737 1068.66,683.737 1069.22,683.737 1069.78,683.737 1070.34,683.737 1070.9,683.737 1071.46,683.737 1072.02,683.737 1072.57,683.737 1073.13,683.737 1073.69,683.737 1074.25,683.737 1074.81,683.737 1075.37,683.737 1075.93,683.737 1076.49,683.737 1077.05,683.737 1077.61,683.737 1078.17,683.737 1078.73,683.737 1079.29,683.737 1079.85,683.737 1080.4,683.737 1080.96,683.737 1081.52,683.737 1082.08,683.737 1082.64,683.737 1083.2,683.737 1083.76,683.737 1084.32,683.737 1084.88,683.737 1085.44,683.737 1086,683.737 1086.56,683.737 1087.12,683.737 1087.67,683.737 1088.23,683.737 1088.79,683.737 1089.35,683.737 1089.91,683.737 1090.47,683.737 1091.03,683.737 1091.59,683.737 1092.15,683.737 1092.71,683.737 1093.27,683.737 1093.83,683.737 1094.39,683.737 1094.94,683.737 1095.5,683.737 1096.06,683.737 1096.62,683.737 1097.18,683.737 1097.74,683.737 1098.3,683.737 1098.86,683.737 1099.42,683.737 1099.98,683.737 1100.54,683.737 1101.1,683.737 1101.66,683.737 1102.22,683.737 1102.77,683.737 1103.33,683.737 1103.89,683.737 1104.45,683.737 1105.01,683.737 1105.57,683.737 1106.13,683.737 1106.69,683.737 1107.25,683.737 1107.81,683.737 1108.37,683.737 1108.93,683.737 1109.49,683.737 1110.04,683.737 1110.6,683.737 1111.16,683.737 1111.72,683.737 1112.28,683.737 1112.84,683.737 1113.4,683.737 1113.96,683.737 1114.52,683.737 1115.08,683.737 1115.64,683.737 1116.2,683.737 1116.76,683.737 1117.31,683.737 1117.87,683.737 1118.43,683.737 1118.99,683.737 1119.55,683.737 1120.11,683.737 1120.67,683.737 1121.23,683.737 1121.79,683.737 1122.35,683.737 1122.91,683.737 1123.47,683.737 1124.03,683.737 1124.59,683.737 1125.14,683.737 1125.7,683.737 1126.26,683.737 1126.82,683.737 1127.38,683.737 1127.94,683.737 1128.5,683.737 1129.06,683.737 1129.62,683.737 1130.18,683.737 1130.74,683.737 1131.3,683.737 1131.86,683.737 1132.41,683.737 1132.97,683.737 1133.53,683.737 1134.09,683.737 1134.65,683.737 1135.21,683.737 1135.77,683.737 1136.33,683.737 1136.89,683.737 1137.45,683.737 1138.01,683.737 1138.57,683.737 1139.13,683.737 1139.68,683.737 1140.24,683.737 1140.8,683.737 1141.36,683.737 1141.92,683.737 1142.48,683.737 1143.04,683.737 1143.6,683.737 1144.16,683.737 1144.72,683.737 1145.28,683.737 1145.84,683.737 1146.4,683.737 1146.96,683.737 1147.51,683.737 1148.07,683.737 1148.63,683.737 1149.19,683.737 1149.75,683.737 1150.31,683.737 1150.87,683.737 1151.43,683.737 1151.99,683.737 1152.55,683.737 1153.11,683.737 1153.67,683.737 1154.23,683.737 1154.78,683.737 1155.34,683.737 1155.9,683.737 1156.46,683.737 1157.02,683.737 1157.58,683.737 1158.14,683.737 1158.7,683.737 1159.26,683.737 1159.82,683.737 1160.38,683.737 1160.94,683.737 1161.5,683.737 1162.05,683.737 1162.61,683.737 1163.17,683.737 1163.73,683.737 1164.29,683.737 1164.85,683.737 1165.41,683.737 1165.97,683.737 1166.53,683.737 1167.09,683.737 1167.65,683.737 1168.21,683.737 1168.77,683.737 1169.33,683.737 1169.88,683.737 1170.44,683.737 1171,683.737 1171.56,683.737 1172.12,683.737 1172.68,683.737 1173.24,683.737 1173.8,683.737 1174.36,683.737 1174.92,683.737 1175.48,683.737 1176.04,683.737 1176.6,683.737 1177.15,683.737 1177.71,683.737 1178.27,683.737 1178.83,683.737 1179.39,683.737 1179.95,683.737 1180.51,683.737 1181.07,683.737 1181.63,683.737 1182.19,683.737 1182.75,683.737 1183.31,683.737 1183.87,683.737 1184.43,683.737 1184.98,683.737 1185.54,683.737 1186.1,683.737 1186.66,683.737 1187.22,683.737 1187.78,683.737 1188.34,683.737 1188.9,683.737 1189.46,683.737 1190.02,683.737 1190.58,683.737 1191.14,683.737 1191.7,683.737 1192.25,683.737 1192.81,683.737 1193.37,683.737 1193.93,683.737 1194.49,683.737 1195.05,683.737 1195.61,683.737 1196.17,683.737 1196.73,683.737 1197.29,683.737 1197.85,683.737 1198.41,683.737 1198.97,683.737 1199.52,683.737 1200.08,683.737 1200.64,683.737 1201.2,683.737 1201.76,683.737 1202.32,683.737 1202.88,683.737 1203.44,683.737 1204,683.737 1204.56,683.737 1205.12,683.737 1205.68,683.737 1206.24,683.737 1206.8,683.737 1207.35,683.737 1207.91,683.737 1208.47,683.737 1209.03,683.737 1209.59,683.737 1210.15,683.737 1210.71,683.737 1211.27,683.737 1211.83,683.737 1212.39,683.737 1212.95,683.737 1213.51,683.737 1214.07,683.737 1214.62,683.737 1215.18,683.737 1215.74,683.737 1216.3,683.737 1216.86,683.737 1217.42,683.737 1217.98,683.737 1218.54,683.737 1219.1,683.737 1219.66,683.737 1220.22,683.737 1220.78,683.737 1221.34,683.737 1221.89,683.737 1222.45,683.737 1223.01,683.737 1223.57,683.737 1224.13,683.737 1224.69,683.737 1225.25,683.737 1225.81,683.737 1226.37,683.737 1226.93,683.737 1227.49,683.737 1228.05,683.737 1228.61,683.737 1229.17,683.737 1229.72,683.737 1230.28,683.737 1230.84,683.737 1231.4,683.737 1231.96,683.737 1232.52,683.737 1233.08,683.737 1233.64,683.737 1234.2,683.737 1234.76,683.737 1235.32,683.737 1235.88,683.737 1236.44,683.737 1236.99,683.737 1237.55,683.737 1238.11,683.737 1238.67,683.737 1239.23,683.737 1239.79,683.737 1240.35,683.737 1240.91,683.737 1241.47,683.737 1242.03,683.737 1242.59,683.737 1243.15,683.737 1243.71,683.737 1244.26,683.737 1244.82,683.737 1245.38,683.737 1245.94,683.737 1246.5,683.737 1247.06,683.737 1247.62,683.737 1248.18,683.737 1248.74,683.737 1249.3,683.737 1249.86,683.737 1250.42,683.737 1250.98,683.737 1251.54,683.737 1252.09,683.737 1252.65,683.737 1253.21,683.737 1253.77,683.737 1254.33,683.737 1254.89,683.737 1255.45,683.737 1256.01,683.737 1256.57,683.737 1257.13,683.737 1257.69,683.737 1258.25,683.737 1258.81,683.737 1259.36,683.737 1259.92,683.737 1260.48,683.737 1261.04,683.737 1261.6,683.737 1262.16,683.737 1262.72,683.737 1263.28,683.737 1263.84,683.737 1264.4,683.737 1264.96,683.737 1265.52,683.737 1266.08,683.737 1266.63,683.737 1267.19,683.737 1267.75,683.737 1268.31,683.737 1268.87,683.737 1269.43,683.737 1269.99,683.737 1270.55,683.737 1271.11,683.737 1271.67,683.737 1272.23,683.737 1272.79,683.737 1273.35,683.737 1273.91,683.737 1274.46,683.737 1275.02,683.737 1275.58,683.737 1276.14,683.737 1276.7,683.737 1277.26,683.737 1277.82,683.737 1278.38,683.737 1278.94,683.737 1279.5,683.737 1280.06,683.737 1280.62,683.737 1281.18,683.737 1281.73,683.737 1282.29,683.737 1282.85,683.737 1283.41,683.737 1283.97,683.737 1284.53,683.737 1285.09,683.737 1285.65,683.737 1286.21,683.737 1286.77,683.737 1287.33,683.737 1287.89,683.737 1288.45,683.737 1289,683.737 1289.56,683.737 1290.12,683.737 1290.68,683.737 1291.24,683.737 1291.8,683.737 1292.36,683.737 1292.92,683.737 1293.48,683.737 1294.04,683.737 1294.6,683.737 1295.16,683.737 1295.72,683.737 1296.28,683.737 1296.83,683.737 1297.39,683.737 1297.95,683.737 1298.51,683.737 1299.07,683.737 1299.63,683.737 1300.19,683.737 1300.75,683.737 1301.31,683.737 1301.87,683.737 1302.43,683.737 1302.99,683.737 1303.55,683.737 1304.1,683.737 1304.66,683.737 1305.22,683.737 1305.78,683.737 1306.34,683.737 1306.9,683.737 1307.46,683.737 1308.02,683.737 1308.58,683.737 1309.14,683.737 1309.7,683.737 1310.26,683.737 1310.82,683.737 1311.38,683.737 1311.93,683.737 1312.49,683.737 1313.05,683.737 1313.61,683.737 1314.17,683.737 1314.73,683.737 1315.29,683.737 1315.85,683.737 1316.41,683.737 1316.97,683.737 1317.53,683.737 1318.09,683.737 1318.65,683.737 1319.2,683.737 1319.76,683.737 1320.32,683.737 1320.88,683.737 1321.44,683.737 1322,683.737 1322.56,683.737 1323.12,683.737 1323.68,683.737 1324.24,683.737 1324.8,683.737 1325.36,683.737 1325.92,683.737 1326.47,683.737 1327.03,683.737 1327.59,683.737 1328.15,683.737 1328.71,683.737 1329.27,683.737 1329.83,683.737 1330.39,683.737 1330.95,683.737 1331.51,683.737 1332.07,683.737 1332.63,683.737 1333.19,683.737 1333.75,683.737 1334.3,683.737 1334.86,683.737 1335.42,683.737 1335.98,683.737 1336.54,683.737 1337.1,683.737 1337.66,683.737 1338.22,683.737 1338.78,683.737 1339.34,683.737 1339.9,683.737 1340.46,683.737 1341.02,683.737 1341.57,683.737 1342.13,683.737 1342.69,683.737 1343.25,683.737 1343.81,683.737 1344.37,683.737 1344.93,683.737 1345.49,683.737 1346.05,683.737 1346.61,683.737 1347.17,683.737 1347.73,683.737 1348.29,683.737 1348.84,683.737 1349.4,683.737 1349.96,683.737 1350.52,683.737 1351.08,683.737 1351.64,683.737 1352.2,683.737 1352.76,683.737 1353.32,683.737 1353.88,683.737 1354.44,683.737 1355,683.737 1355.56,683.737 1356.12,683.737 1356.67,683.737 1357.23,683.737 1357.79,683.737 1358.35,683.737 1358.91,683.737 1359.47,683.737 1360.03,683.737 1360.59,683.737 1361.15,683.737 1361.71,683.737 1362.27,683.737 1362.83,683.737 1363.39,683.737 1363.94,683.737 1364.5,683.737 1365.06,683.737 1365.62,683.737 1366.18,683.737 1366.74,683.737 1367.3,683.737 1367.86,683.737 1368.42,683.737 1368.98,683.737 1369.54,683.737 1370.1,683.737 1370.66,683.737 1371.21,683.737 1371.77,683.737 1372.33,683.737 1372.89,683.737 1373.45,683.737 1374.01,683.737 1374.57,683.737 1375.13,683.737 1375.69,683.737 1376.25,683.737 1376.81,683.737 1377.37,683.737 1377.93,683.737 1378.49,683.737 1379.04,683.737 1379.6,683.737 1380.16,683.737 1380.72,683.737 1381.28,683.737 1381.84,683.737 1382.4,683.737 1382.96,683.737 1383.52,683.737 1384.08,683.737 1384.64,683.737 1385.2,683.737 1385.76,683.737 1386.31,683.737 1386.87,683.737 1387.43,683.737 1387.99,683.737 1388.55,683.737 1389.11,683.737 1389.67,683.737 1390.23,683.737 1390.79,683.737 1391.35,683.737 1391.91,683.737 1392.47,683.737 1393.03,683.737 1393.58,683.737 1394.14,683.737 1394.7,683.737 1395.26,683.737 1395.82,683.737 1396.38,683.737 1396.94,683.737 1397.5,683.737 1398.06,683.737 1398.62,683.737 1399.18,683.737 1399.74,683.737 1400.3,683.737 1400.86,683.737 1401.41,683.737 1401.97,683.737 1402.53,683.737 1403.09,683.737 1403.65,683.737 1404.21,683.737 1404.77,683.737 1405.33,683.737 1405.89,683.737 1406.45,683.737 1407.01,683.737 1407.57,683.737 1408.13,683.737 1408.68,683.737 1409.24,683.737 1409.8,683.737 1410.36,683.737 1410.92,683.737 1411.48,683.737 1412.04,683.737 1412.6,683.737 1413.16,683.737 1413.72,683.737 1414.28,683.737 1414.84,683.737 1415.4,683.737 1415.95,683.737 1416.51,683.737 1417.07,683.737 1417.63,683.737 1418.19,683.737 1418.75,683.737 1419.31,683.737 1419.87,683.737 1420.43,683.737 1420.99,683.737 1421.55,683.737 1422.11,683.737 1422.67,683.737 1423.23,683.737 1423.78,683.737 1424.34,683.737 1424.9,683.737 1425.46,683.737 1426.02,683.737 1426.58,683.737 1427.14,683.737 1427.7,683.737 1428.26,683.737 1428.82,683.737 1429.38,683.737 1429.94,683.737 1430.5,683.737 1431.05,683.737 1431.61,683.737 1432.17,683.737 1432.73,683.737 1433.29,683.737 1433.85,683.737 1434.41,683.737 1434.97,683.737 1435.53,683.737 1436.09,683.737 1436.65,683.737 1437.21,683.737 1437.77,683.737 1438.33,683.737 1438.88,683.737 1439.44,683.737 1440,683.737 1440.56,683.737 1441.12,683.737 1441.68,683.737 1442.24,683.737 1442.8,683.737 1443.36,683.737 1443.92,683.737 1444.48,683.737 1445.04,683.737 1445.6,683.737 1446.15,683.737 1446.71,683.737 1447.27,683.737 1447.83,683.737 1448.39,683.737 1448.95,683.737 1449.51,683.737 1450.07,683.737 1450.63,683.737 1451.19,683.737 1451.75,683.737 1452.31,683.737 1452.87,683.737 1453.42,683.737 1453.98,683.737 1454.54,683.737 1455.1,683.737 1455.66,683.737 1456.22,683.737 1456.78,683.737 1457.34,683.737 1457.9,683.737 1458.46,683.737 1459.02,683.737 1459.58,683.737 1460.14,683.737 1460.7,683.737 1461.25,683.737 1461.81,683.737 1462.37,683.737 1462.93,683.737 1463.49,683.737 1464.05,683.737 1464.61,683.737 1465.17,683.737 1465.73,683.737 1466.29,683.737 1466.85,683.737 1467.41,683.737 1467.97,683.737 1468.52,683.737 1469.08,683.737 1469.64,683.737 1470.2,683.737 1470.76,683.737 1471.32,683.737 1471.88,683.737 1472.44,683.737 1473,683.737 1473.56,683.737 1474.12,683.737 1474.68,683.737 1475.24,683.737 1475.79,683.737 1476.35,683.737 1476.91,683.737 1477.47,683.737 1478.03,683.737 1478.59,683.737 1479.15,683.737 1479.71,683.737 1480.27,683.737 1480.83,683.737 1481.39,683.737 1481.95,683.737 1482.51,683.737 1483.07,683.737 1483.62,683.737 1484.18,683.737 1484.74,683.737 1485.3,683.737 1485.86,683.737 1486.42,683.737 1486.98,683.737 1487.54,683.737 1488.1,683.737 1488.66,683.737 1489.22,683.737 1489.78,683.737 1490.34,683.737 1490.89,683.737 1491.45,683.737 1492.01,683.737 1492.57,683.737 1493.13,683.737 1493.69,683.737 1494.25,683.737 1494.81,683.737 1495.37,683.737 1495.93,683.737 1496.49,683.737 1497.05,683.737 1497.61,683.737 1498.16,683.737 1498.72,683.737 1499.28,683.737 1499.84,683.737 1500.4,683.737 1500.96,683.737 1501.52,683.737 1502.08,683.737 1502.64,683.737 1503.2,683.737 1503.76,683.737 1504.32,683.737 1504.88,683.737 1505.44,683.737 1505.99,683.737 1506.55,683.737 1507.11,683.737 1507.67,683.737 1508.23,683.737 1508.79,683.737 1509.35,683.737 1509.91,683.737 1510.47,683.737 1511.03,683.737 1511.59,683.737 1512.15,683.737 1512.71,683.737 1513.26,683.737 1513.82,683.737 1514.38,683.737 1514.94,683.737 1515.5,683.737 1516.06,683.737 1516.62,683.737 1517.18,683.737 1517.74,683.737 1518.3,683.737 1518.86,683.737 1519.42,683.737 1519.98,683.737 1520.53,683.737 1521.09,683.737 1521.65,683.737 1522.21,683.737 1522.77,683.737 1523.33,683.737 1523.89,683.737 1524.45,683.737 1525.01,683.737 1525.57,683.737 1526.13,683.737 1526.69,683.737 1527.25,683.737 1527.81,683.737 1528.36,683.737 1528.92,683.737 1529.48,683.737 1530.04,683.737 1530.6,683.737 1531.16,683.737 1531.72,683.737 1532.28,683.737 1532.84,683.737 1533.4,683.737 1533.96,683.737 1534.52,683.737 1535.08,683.737 1535.63,683.737 1536.19,683.737 1536.75,683.737 1537.31,683.737 1537.87,683.737 1538.43,683.737 1538.99,683.737 1539.55,683.737 1540.11,683.737 1540.67,683.737 1541.23,683.737 1541.79,683.737 1542.35,683.737 1542.9,683.737 1543.46,683.737 1544.02,683.737 1544.58,683.737 1545.14,683.737 1545.7,683.737 1546.26,683.737 1546.82,683.737 1547.38,683.737 1547.94,683.737 1548.5,683.737 1549.06,683.737 1549.62,683.737 1550.18,683.737 1550.73,683.737 1551.29,683.737 1551.85,683.737 1552.41,683.737 1552.97,683.737 1553.53,683.737 1554.09,683.737 1554.65,683.737 1555.21,683.737 1555.77,683.737 1556.33,683.737 1556.89,683.737 1557.45,683.737 1558,683.737 1558.56,683.737 1559.12,683.737 1559.68,683.737 1560.24,683.737 1560.8,683.737 1561.36,683.737 1561.92,683.737 1562.48,683.737 1563.04,683.737 1563.6,683.737 1564.16,683.737 1564.72,683.737 1565.28,683.737 1565.83,683.737 1566.39,683.737 1566.95,683.737 1567.51,683.737 1568.07,683.737 1568.63,683.737 1569.19,683.737 1569.75,683.737 1570.31,683.737 1570.87,683.737 1571.43,683.737 1571.99,683.737 1572.55,683.737 1573.1,683.737 1573.66,683.737 1574.22,683.737 1574.78,683.737 1575.34,683.737 1575.9,683.737 1576.46,683.737 1577.02,683.737 1577.58,683.737 1578.14,683.737 1578.7,683.737 1579.26,683.737 1579.82,683.737 1580.37,683.737 1580.93,683.737 1581.49,683.737 1582.05,683.737 1582.61,683.737 1583.17,683.737 1583.73,683.737 1584.29,683.737 1584.85,683.737 1585.41,683.737 1585.97,683.737 1586.53,683.737 1587.09,683.737 1587.65,683.737 1588.2,683.737 1588.76,683.737 1589.32,683.737 1589.88,683.737 1590.44,683.737 1591,683.737 1591.56,683.737 1592.12,683.737 1592.68,683.737 1593.24,683.737 1593.8,683.737 1594.36,683.737 1594.92,683.737 1595.47,683.737 1596.03,683.737 1596.59,683.737 1597.15,683.737 1597.71,683.737 1598.27,683.737 1598.83,683.737 1599.39,683.737 1599.95,683.737 1600.51,683.737 1601.07,683.737 1601.63,683.737 1602.19,683.737 1602.74,683.737 1603.3,683.737 1603.86,683.737 1604.42,683.737 1604.98,683.737 1605.54,683.737 1606.1,683.737 1606.66,683.737 1607.22,683.737 1607.78,683.737 1608.34,683.737 1608.9,683.737 1609.46,683.737 1610.02,683.737 1610.57,683.737 1611.13,683.737 1611.69,683.737 1612.25,683.737 1612.81,683.737 1613.37,683.737 1613.93,683.737 1614.49,683.737 1615.05,683.737 1615.61,683.737 1616.17,683.737 1616.73,683.737 1617.29,683.737 1617.84,683.737 1618.4,683.737 1618.96,683.737 1619.52,683.737 1620.08,683.737 1620.64,683.737 1621.2,683.737 1621.76,683.737 1622.32,683.737 1622.88,683.737 1623.44,683.737 1624,683.737 1624.56,683.737 1625.11,683.737 1625.67,683.737 1626.23,683.737 1626.79,683.737 1627.35,683.737 1627.91,683.737 1628.47,683.737 1629.03,683.737 1629.59,683.737 1630.15,683.737 1630.71,683.737 1631.27,683.737 1631.83,683.737 1632.39,683.737 1632.94,683.737 1633.5,683.737 1634.06,683.737 1634.62,683.737 1635.18,683.737 1635.74,683.737 1636.3,683.737 1636.86,683.737 1637.42,683.737 1637.98,683.737 1638.54,683.737 1639.1,683.737 1639.66,683.737 1640.21,683.737 1640.77,683.737 1641.33,683.737 1641.89,683.737 1642.45,683.737 1643.01,683.737 1643.57,683.737 1644.13,683.737 1644.69,683.737 1645.25,683.737 1645.81,683.737 1646.37,683.737 1646.93,683.737 1647.48,683.737 1648.04,683.737 1648.6,683.737 1649.16,683.737 1649.72,683.737 1650.28,683.737 1650.84,683.737 1651.4,683.737 1651.96,683.737 1652.52,683.737 1653.08,683.737 1653.64,683.737 1654.2,683.737 1654.76,683.737 1655.31,683.737 1655.87,683.737 1656.43,683.737 1656.99,683.737 1657.55,683.737 1658.11,683.737 1658.67,683.737 1659.23,683.737 1659.79,683.737 1660.35,683.737 1660.91,683.737 1661.47,683.737 1662.03,683.737 1662.58,683.737 1663.14,683.737 1663.7,683.737 1664.26,683.737 1664.82,683.737 1665.38,683.737 1665.94,683.737 1666.5,683.737 1667.06,683.737 1667.62,683.737 1668.18,683.737 1668.74,683.737 1669.3,683.737 1669.85,683.737 1670.41,683.737 1670.97,683.737 1671.53,683.737 1672.09,683.737 1672.65,683.737 1673.21,683.737 1673.77,683.737 1674.33,683.737 1674.89,683.737 1675.45,683.737 1676.01,683.737 1676.57,683.737 1677.13,683.737 1677.68,683.737 1678.24,683.737 1678.8,683.737 1679.36,683.737 1679.92,683.737 1680.48,683.737 1681.04,683.737 1681.6,683.737 1682.16,683.737 1682.72,683.737 1683.28,683.737 1683.84,683.737 1684.4,683.737 1684.95,683.737 1685.51,683.737 1686.07,683.737 1686.63,683.737 1687.19,683.737 1687.75,683.737 1688.31,683.737 1688.87,683.737 1689.43,683.737 1689.99,683.737 1690.55,683.737 1691.11,683.737 1691.67,683.737 1692.23,683.737 1692.78,683.737 1693.34,683.737 1693.9,683.737 1694.46,683.737 1695.02,683.737 1695.58,683.737 1696.14,683.737 1696.7,683.737 1697.26,683.737 1697.82,683.737 1698.38,683.737 1698.94,683.737 1699.5,683.737 1700.05,683.737 1700.61,683.737 1701.17,683.737 1701.73,683.737 1702.29,683.737 1702.85,683.737 1703.41,683.737 1703.97,683.737 1704.53,683.737 1705.09,683.737 1705.65,683.737 1706.21,683.737 1706.77,683.737 1707.32,683.737 1707.88,683.737 1708.44,683.737 1709,683.737 1709.56,683.737 1710.12,683.737 1710.68,683.737 1711.24,683.737 1711.8,683.737 1712.36,683.737 1712.92,683.737 1713.48,683.737 1714.04,683.737 1714.6,683.737 1715.15,683.737 1715.71,683.737 1716.27,683.737 1716.83,683.737 1717.39,683.737 1717.95,683.737 1718.51,683.737 1719.07,683.737 1719.63,683.737 1720.19,683.737 1720.75,683.737 1721.31,683.737 1721.87,683.737 1722.42,683.737 1722.98,683.737 1723.54,683.737 1724.1,683.737 1724.66,683.737 1725.22,683.737 1725.78,683.737 1726.34,683.737 1726.9,683.737 1727.46,683.737 1728.02,683.737 1728.58,683.737 1729.14,683.737 1729.69,683.737 1730.25,683.737 1730.81,683.737 1731.37,683.737 1731.93,683.737 1732.49,683.737 1733.05,683.737 1733.61,683.737 1734.17,683.737 1734.73,683.737 1735.29,683.737 1735.85,683.737 1736.41,683.737 1736.97,683.737 1737.52,683.737 1738.08,683.737 1738.64,683.737 1739.2,683.737 1739.76,683.737 1740.32,683.737 1740.88,683.737 1741.44,683.737 1742,683.737 1742.56,683.737 1743.12,683.737 1743.68,683.737 1744.24,683.737 1744.79,683.737 1745.35,683.737 1745.91,683.737 1746.47,683.737 1747.03,683.737 1747.59,683.737 1748.15,683.737 1748.71,683.737 1749.27,683.737 1749.83,683.737 1750.39,683.737 1750.95,683.737 1751.51,683.737 1752.06,683.737 1752.62,683.737 1753.18,683.737 1753.74,683.737 1754.3,683.737 1754.86,683.737 1755.42,683.737 1755.98,683.737 1756.54,683.737 1757.1,683.737 1757.66,683.737 1758.22,683.737 1758.78,683.737 1759.34,683.737 1759.89,683.737 1760.45,683.737 1761.01,683.737 1761.57,683.737 1762.13,683.737 1762.69,683.737 1763.25,683.737 1763.81,683.737 1764.37,683.737 1764.93,683.737 1765.49,683.737 1766.05,683.737 1766.61,683.737 1767.16,683.737 1767.72,683.737 1768.28,683.737 1768.84,683.737 1769.4,683.737 1769.96,683.737 1770.52,683.737 1771.08,683.737 1771.64,683.737 1772.2,683.737 1772.76,683.737 1773.32,683.737 1773.88,683.737 1774.43,683.737 1774.99,683.737 1775.55,683.737 1776.11,683.737 1776.67,683.737 1777.23,683.737 1777.79,683.737 1778.35,683.737 1778.91,683.737 1779.47,683.737 1780.03,683.737 1780.59,683.737 1781.15,683.737 1781.71,683.737 1782.26,683.737 1782.82,683.737 1783.38,683.737 1783.94,683.737 1784.5,683.737 1785.06,683.737 1785.62,683.737 1786.18,683.737 1786.74,683.737 1787.3,683.737 1787.86,683.737 1788.42,683.737 1788.98,683.737 1789.53,683.737 1790.09,683.737 1790.65,683.737 1791.21,683.737 1791.77,683.737 1792.33,683.737 1792.89,683.737 1793.45,683.737 1794.01,683.737 1794.57,683.737 1795.13,683.737 1795.69,683.737 1796.25,683.737 1796.8,683.737 1797.36,683.737 1797.92,683.737 1798.48,683.737 1799.04,683.737 1799.6,683.737 1800.16,683.737 1800.72,683.737 1801.28,683.737 1801.84,683.737 1802.4,683.737 1802.96,683.737 1803.52,683.737 1804.08,683.737 1804.63,683.737 1805.19,683.737 1805.75,683.737 1806.31,683.737 1806.87,683.737 1807.43,683.737 1807.99,683.737 1808.55,683.737 1809.11,683.737 1809.67,683.737 1810.23,683.737 1810.79,683.737 1811.35,683.737 1811.9,683.737 1812.46,683.737 1813.02,683.737 1813.58,683.737 1814.14,683.737 1814.7,683.737 1815.26,683.737 1815.82,683.737 1816.38,683.737 1816.94,683.737 1817.5,683.737 1818.06,683.737 1818.62,683.737 1819.18,683.737 1819.73,683.737 1820.29,683.737 1820.85,683.737 1821.41,683.737 1821.97,683.737 1822.53,683.737 1823.09,683.737 1823.65,683.737 1824.21,683.737 1824.77,683.737 1825.33,683.737 1825.89,683.737 1826.45,683.737 1827,683.737 1827.56,683.737 1828.12,683.737 1828.68,683.737 1829.24,683.737 1829.8,683.737 1830.36,683.737 1830.92,683.737 1831.48,683.737 1832.04,683.737 1832.6,683.737 1833.16,683.737 1833.72,683.737 1834.27,683.737 1834.83,683.737 1835.39,683.737 1835.95,683.737 1836.51,683.737 1837.07,683.737 1837.63,683.737 1838.19,683.737 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.026033591647847 ± 0.019478669645954422\nProjected Energy: -4.015849461033268 ± (0.007559825748883142, 0.007934686930513912)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.448893</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5208e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.288e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.308e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.483e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.655e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.536e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613376\n -0.7590191922770799\n  0.13584182219622498\n  0.1578999869460862\n  0.8767114411781467\n  1.530592997097333\n  1.5835732611867428\n  3.0728703303258635\n  3.1256726539518445\n  4.862107221562162\n  6.26069485038059\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1⟩\" => -0.57735   fs\"|0 1 0⟩\" => -0.57735   fs\"|1 0 0⟩\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
