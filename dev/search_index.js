var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2106056636517948 ± 0.0015395406426839332\n   G2(1) = 0.9166720995930596 ± 0.0006947485198479018\n   G2(2) = 0.9828411410509503 ± 0.0006171855968573763\n   G2(3) = 0.9903678550601859 ± 0.0008293229281158971\n   G2(4) = 0.9828411410509503 ± 0.0006171855968573763\n   G2(5) = 0.9166720995930596 ± 0.0006947485198479018\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.017406557001716 ± 0.13290739451876563\n   Replica 2: -4.046550115843369 ± 0.11687750908571601\n   Replica 3: -4.120212624856333 ± 0.12323080802916199\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip110\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip111\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip112\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.3 2211.02,1003.3 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.778 2211.02,745.778 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.253 2211.02,488.253 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.727 2211.02,230.727 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.3 423.181,1003.3 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.778 423.181,745.778 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.253 423.181,488.253 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.727 423.181,230.727 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M290.043 1016.65 L306.363 1016.65 L306.363 1020.58 L284.418 1020.58 L284.418 1016.65 Q287.08 1013.89 291.664 1009.26 Q296.27 1004.61 297.451 1003.27 Q299.696 1000.75 300.576 999.01 Q301.478 997.251 301.478 995.561 Q301.478 992.806 299.534 991.07 Q297.613 989.334 294.511 989.334 Q292.312 989.334 289.858 990.098 Q287.427 990.862 284.65 992.413 L284.65 987.691 Q287.474 986.556 289.927 985.978 Q292.381 985.399 294.418 985.399 Q299.789 985.399 302.983 988.084 Q306.177 990.769 306.177 995.26 Q306.177 997.39 305.367 999.311 Q304.58 1001.21 302.474 1003.8 Q301.895 1004.47 298.793 1007.69 Q295.691 1010.88 290.043 1016.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 986.024 L334.58 986.024 L334.58 989.959 L320.506 989.959 L320.506 998.431 Q321.524 998.084 322.543 997.922 Q323.562 997.737 324.58 997.737 Q330.367 997.737 333.747 1000.91 Q337.126 1004.08 337.126 1009.5 Q337.126 1015.07 333.654 1018.18 Q330.182 1021.26 323.862 1021.26 Q321.687 1021.26 319.418 1020.88 Q317.173 1020.51 314.765 1019.77 L314.765 1015.07 Q316.849 1016.21 319.071 1016.76 Q321.293 1017.32 323.77 1017.32 Q327.774 1017.32 330.112 1015.21 Q332.45 1013.11 332.45 1009.5 Q332.45 1005.88 330.112 1003.78 Q327.774 1001.67 323.77 1001.67 Q321.895 1001.67 320.02 1002.09 Q318.168 1002.51 316.224 1003.38 L316.224 986.024 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 989.103 Q352.728 989.103 350.899 992.667 Q349.094 996.209 349.094 1003.34 Q349.094 1010.45 350.899 1014.01 Q352.728 1017.55 356.339 1017.55 Q359.973 1017.55 361.779 1014.01 Q363.608 1010.45 363.608 1003.34 Q363.608 996.209 361.779 992.667 Q359.973 989.103 356.339 989.103 M356.339 985.399 Q362.149 985.399 365.205 990.005 Q368.284 994.589 368.284 1003.34 Q368.284 1012.07 365.205 1016.67 Q362.149 1021.26 356.339 1021.26 Q350.529 1021.26 347.45 1016.67 Q344.395 1012.07 344.395 1003.34 Q344.395 994.589 347.45 990.005 Q350.529 985.399 356.339 985.399 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M286.062 728.498 L304.418 728.498 L304.418 732.433 L290.344 732.433 L290.344 740.906 Q291.363 740.558 292.381 740.396 Q293.4 740.211 294.418 740.211 Q300.205 740.211 303.585 743.382 Q306.964 746.554 306.964 751.97 Q306.964 757.549 303.492 760.651 Q300.02 763.73 293.701 763.73 Q291.525 763.73 289.256 763.359 Q287.011 762.989 284.603 762.248 L284.603 757.549 Q286.687 758.683 288.909 759.239 Q291.131 759.794 293.608 759.794 Q297.613 759.794 299.951 757.688 Q302.288 755.581 302.288 751.97 Q302.288 748.359 299.951 746.253 Q297.613 744.146 293.608 744.146 Q291.733 744.146 289.858 744.563 Q288.006 744.98 286.062 745.859 L286.062 728.498 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 731.577 Q322.566 731.577 320.737 735.142 Q318.932 738.683 318.932 745.813 Q318.932 752.919 320.737 756.484 Q322.566 760.026 326.177 760.026 Q329.811 760.026 331.617 756.484 Q333.446 752.919 333.446 745.813 Q333.446 738.683 331.617 735.142 Q329.811 731.577 326.177 731.577 M326.177 727.873 Q331.987 727.873 335.043 732.48 Q338.122 737.063 338.122 745.813 Q338.122 754.54 335.043 759.146 Q331.987 763.73 326.177 763.73 Q320.367 763.73 317.288 759.146 Q314.233 754.54 314.233 745.813 Q314.233 737.063 317.288 732.48 Q320.367 727.873 326.177 727.873 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 731.577 Q352.728 731.577 350.899 735.142 Q349.094 738.683 349.094 745.813 Q349.094 752.919 350.899 756.484 Q352.728 760.026 356.339 760.026 Q359.973 760.026 361.779 756.484 Q363.608 752.919 363.608 745.813 Q363.608 738.683 361.779 735.142 Q359.973 731.577 356.339 731.577 M356.339 727.873 Q362.149 727.873 365.205 732.48 Q368.284 737.063 368.284 745.813 Q368.284 754.54 365.205 759.146 Q362.149 763.73 356.339 763.73 Q350.529 763.73 347.45 759.146 Q344.395 754.54 344.395 745.813 Q344.395 737.063 347.45 732.48 Q350.529 727.873 356.339 727.873 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M284.835 470.973 L307.057 470.973 L307.057 472.963 L294.511 505.533 L289.627 505.533 L301.432 474.908 L284.835 474.908 L284.835 470.973 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M316.224 470.973 L334.58 470.973 L334.58 474.908 L320.506 474.908 L320.506 483.38 Q321.524 483.033 322.543 482.871 Q323.562 482.685 324.58 482.685 Q330.367 482.685 333.747 485.857 Q337.126 489.028 337.126 494.445 Q337.126 500.023 333.654 503.125 Q330.182 506.204 323.862 506.204 Q321.687 506.204 319.418 505.834 Q317.173 505.463 314.765 504.722 L314.765 500.023 Q316.849 501.158 319.071 501.713 Q321.293 502.269 323.77 502.269 Q327.774 502.269 330.112 500.162 Q332.45 498.056 332.45 494.445 Q332.45 490.834 330.112 488.727 Q327.774 486.621 323.77 486.621 Q321.895 486.621 320.02 487.037 Q318.168 487.454 316.224 488.334 L316.224 470.973 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 474.051 Q352.728 474.051 350.899 477.616 Q349.094 481.158 349.094 488.287 Q349.094 495.394 350.899 498.959 Q352.728 502.5 356.339 502.5 Q359.973 502.5 361.779 498.959 Q363.608 495.394 363.608 488.287 Q363.608 481.158 361.779 477.616 Q359.973 474.051 356.339 474.051 M356.339 470.348 Q362.149 470.348 365.205 474.954 Q368.284 479.537 368.284 488.287 Q368.284 497.014 365.205 501.621 Q362.149 506.204 356.339 506.204 Q350.529 506.204 347.45 501.621 Q344.395 497.014 344.395 488.287 Q344.395 479.537 347.45 474.954 Q350.529 470.348 356.339 470.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M256.664 244.072 L264.303 244.072 L264.303 217.706 L255.992 219.373 L255.992 215.114 L264.256 213.447 L268.932 213.447 L268.932 244.072 L276.571 244.072 L276.571 248.007 L256.664 248.007 L256.664 244.072 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M296.015 216.526 Q292.404 216.526 290.576 220.09 Q288.77 223.632 288.77 230.762 Q288.77 237.868 290.576 241.433 Q292.404 244.975 296.015 244.975 Q299.65 244.975 301.455 241.433 Q303.284 237.868 303.284 230.762 Q303.284 223.632 301.455 220.09 Q299.65 216.526 296.015 216.526 M296.015 212.822 Q301.826 212.822 304.881 217.428 Q307.96 222.012 307.96 230.762 Q307.96 239.488 304.881 244.095 Q301.826 248.678 296.015 248.678 Q290.205 248.678 287.127 244.095 Q284.071 239.488 284.071 230.762 Q284.071 222.012 287.127 217.428 Q290.205 212.822 296.015 212.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M326.177 216.526 Q322.566 216.526 320.737 220.09 Q318.932 223.632 318.932 230.762 Q318.932 237.868 320.737 241.433 Q322.566 244.975 326.177 244.975 Q329.811 244.975 331.617 241.433 Q333.446 237.868 333.446 230.762 Q333.446 223.632 331.617 220.09 Q329.811 216.526 326.177 216.526 M326.177 212.822 Q331.987 212.822 335.043 217.428 Q338.122 222.012 338.122 230.762 Q338.122 239.488 335.043 244.095 Q331.987 248.678 326.177 248.678 Q320.367 248.678 317.288 244.095 Q314.233 239.488 314.233 230.762 Q314.233 222.012 317.288 217.428 Q320.367 212.822 326.177 212.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M356.339 216.526 Q352.728 216.526 350.899 220.09 Q349.094 223.632 349.094 230.762 Q349.094 237.868 350.899 241.433 Q352.728 244.975 356.339 244.975 Q359.973 244.975 361.779 241.433 Q363.608 237.868 363.608 230.762 Q363.608 223.632 361.779 220.09 Q359.973 216.526 356.339 216.526 M356.339 212.822 Q362.149 212.822 365.205 217.428 Q368.284 222.012 368.284 230.762 Q368.284 239.488 365.205 244.095 Q362.149 248.678 356.339 248.678 Q350.529 248.678 347.45 244.095 Q344.395 239.488 344.395 230.762 Q344.395 222.012 347.45 217.428 Q350.529 212.822 356.339 212.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip112)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.727 4017.76,230.727 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.53 458.828,1248.16 459.396,1247.73 459.964,1247.24 460.533,1246.66 461.101,1244.97 461.669,1244.28 462.238,1243.51 462.806,1242.66 463.375,1241.7 463.943,1240.66 464.511,1239.52 465.08,1238.28 465.648,1236.94 466.216,1235.44 466.785,1233.85 467.353,1232.14 467.921,1229.24 468.49,1227.21 469.058,1224.05 469.626,1220.69 470.195,1218.28 470.763,1213.6 471.331,1210.78 471.9,1207.82 472.468,1202.57 473.036,1199.16 473.605,1195.56 474.173,1189.67 474.741,1185.63 475.31,1181.41 475.878,1176.94 476.446,1172.3 477.015,1166.43 477.583,1161.4 478.152,1155.14 478.72,1149.58 479.288,1142.78 479.857,1136.87 480.425,1130.68 480.993,1124.24 481.562,1116.54 482.13,1108.55 482.698,1098.32 483.267,1091.12 483.835,1081.63 484.403,1073.03 484.972,1063.26 485.54,1055.46 486.108,1047.45 486.677,1038.1 487.245,1026.39 487.813,1017.68 488.382,1006.97 488.95,995.154 489.518,985.09 490.087,976.048 490.655,964.919 491.224,955.761 491.792,946.534 492.36,935.183 492.929,924.687 493.497,914.165 494.065,904.737 494.634,892.119 495.202,879.529 495.77,866.119 496.339,854.752 496.907,845.458 497.475,834.988 498.044,823.676 498.612,812.373 499.18,800.008 499.749,788.812 500.317,778.867 500.885,769.889 501.454,759.887 502.022,751.879 502.59,740.946 503.159,732.204 503.727,722.364 504.295,711.693 504.864,701.097 505.432,691.479 506.001,681.027 506.569,671.705 507.137,663.516 507.706,653.3 508.274,642.199 508.842,633.35 509.411,623.776 509.979,616.154 510.547,605.548 511.116,595.002 511.684,585.776 512.252,577.826 512.821,569.926 513.389,564.388 513.957,558.799 514.526,548.975 515.094,540.345 515.662,530.881 516.231,521.663 516.799,515.975 517.367,510.087 517.936,502.397 518.504,494.999 519.072,487.652 519.641,481.432 520.209,473.369 520.778,467.813 521.346,465.091 521.914,460.239 522.483,454.552 523.051,450.968 523.619,445.284 524.188,438.752 524.756,435.755 525.324,431.475 525.893,425.368 526.461,419.087 527.029,414.225 527.598,409.432 528.166,403.58 528.734,397.051 529.303,393.911 529.871,387.683 530.439,383.508 531.008,378.572 531.576,375.926 532.144,373.135 532.713,370.42 533.281,367.863 533.85,365.139 534.418,361.943 534.986,359.314 535.555,356.53 536.123,350.945 536.691,346.936 537.26,341.652 537.828,338.771 538.396,335.867 538.965,334.161 539.533,332.252 540.101,327.426 540.67,325.998 541.238,324.58 541.806,322.169 542.375,319.758 542.943,318.232 543.511,314.819 544.08,310.841 544.648,308.71 545.216,305.695 545.785,302.784 546.353,301.138 546.921,300.372 547.49,298.488 548.058,298.947 548.627,296.316 549.195,295.603 549.763,298.078 550.332,297.247 550.9,297.248 551.468,295.274 552.037,294.45 552.605,291.508 553.173,290.809 553.742,290.949 554.31,290.086 554.878,288.059 555.447,286.32 556.015,285.498 556.583,285.781 557.152,283.849 557.72,283.095 558.288,284.251 558.857,281.371 559.425,280.859 559.993,279.187 560.562,277.54 561.13,276.88 561.698,275.077 562.267,272.559 562.835,271.259 563.404,271.05 563.972,270.627 564.54,266.138 565.109,264.841 565.677,263.766 566.245,262.774 566.814,265.041 567.382,261.887 567.95,262.981 568.519,262.736 569.087,258.425 569.655,258.697 570.224,256.805 570.792,255.182 571.36,255.374 571.929,255.766 572.497,257.117 573.065,257.347 573.634,256.429 574.202,256.487 574.77,255.701 575.339,256.976 575.907,255.016 576.476,255.071 577.044,257.228 577.612,258.167 578.181,257.216 578.749,256.251 579.317,254.307 579.886,254.46 580.454,254.643 581.022,256.645 581.591,253.342 582.159,250.317 582.727,250.552 583.296,250.595 583.864,249.713 584.432,251.935 585.001,251.242 585.569,252.305 586.137,252.21 586.706,250.172 587.274,251.263 587.842,251.206 588.411,252.382 588.979,252.427 589.547,254.383 590.116,252.036 590.684,251.029 591.253,250.91 591.821,249.848 592.389,250.857 592.958,249.707 593.526,246.325 594.094,245.638 594.663,245.058 595.231,245.444 595.799,243.487 596.368,242.951 596.936,242.186 597.504,241.58 598.073,241.366 598.641,241.813 599.209,243.232 599.778,242.546 600.346,243.885 600.914,244.349 601.483,244.656 602.051,244.814 602.619,247.229 603.188,250.4 603.756,250.256 604.325,245.907 604.893,245.752 605.461,243.662 606.03,244.773 606.598,243.852 607.166,245.137 607.735,243.041 608.303,243.346 608.871,240.49 609.44,242.956 610.008,242.25 610.576,241.258 611.145,239.367 611.713,238.842 612.281,237.579 612.85,237.876 613.418,239.164 613.986,239.443 614.555,238.858 615.123,239.038 615.691,239.688 616.26,243.091 616.828,243.176 617.396,243.108 617.965,242.493 618.533,242.598 619.102,244.907 619.67,244.869 620.238,245.602 620.807,244.512 621.375,243.368 621.943,244.14 622.512,243.074 623.08,241.927 623.648,243.135 624.217,241.898 624.785,241.147 625.353,242.486 625.922,243.16 626.49,240.922 627.058,243.148 627.627,241.829 628.195,241.713 628.763,241.819 629.332,239.645 629.9,239.941 630.468,239.936 631.037,243.021 631.605,241.92 632.173,241.779 632.742,243.85 633.31,242.719 633.879,243.642 634.447,243.493 635.015,243.246 635.584,242.001 636.152,240.918 636.72,238.688 637.289,239.862 637.857,237.718 638.425,236.793 638.994,235.697 639.562,234.617 640.13,233.864 640.699,236.419 641.267,235.689 641.835,235.767 642.404,236.973 642.972,236.076 643.54,233.152 644.109,233.425 644.677,232.791 645.245,233.233 645.814,233.818 646.382,234.101 646.951,233.32 647.519,232.662 648.087,232.087 648.656,232.462 649.224,234.933 649.792,236.248 650.361,236.053 650.929,237.338 651.497,238.689 652.066,237.602 652.634,235.578 653.202,238.026 653.771,237.055 654.339,238.146 654.907,241.171 655.476,240.989 656.044,241.778 656.612,239.441 657.181,239.196 657.749,239.046 658.317,237.992 658.886,236.923 659.454,234.771 660.022,236.03 660.591,236.065 661.159,235.094 661.728,233.293 662.296,234.645 662.864,235.986 663.433,236.126 664.001,235.128 664.569,234.184 665.138,234.386 665.706,235.507 666.274,235.729 666.843,233.777 667.411,234.154 667.979,233.422 668.548,232.813 669.116,232.084 669.684,233.454 670.253,233.45 670.821,229.576 671.389,231.246 671.958,234.944 672.526,233.058 673.094,232.25 673.663,235.876 674.231,235.224 674.799,237.421 675.368,236.386 675.936,237.359 676.505,237.247 677.073,239.057 677.641,235.794 678.21,236.771 678.778,236.794 679.346,239.896 679.915,238.514 680.483,238.397 681.051,240.086 681.62,236.79 682.188,237.668 682.756,236.56 683.325,237.532 683.893,237.443 684.461,236.427 685.03,235.476 685.598,236.512 686.166,237.604 686.735,235.327 687.303,239.214 687.871,237.984 688.44,236.706 689.008,234.621 689.577,234.396 690.145,232.541 690.713,231.633 691.282,233.83 691.85,233.774 692.418,235.961 692.987,236.944 693.555,235.954 694.123,231.736 694.692,232.145 695.26,231.357 695.828,230.654 696.397,234.471 696.965,234.591 697.533,235.848 698.102,236.904 698.67,236.883 699.238,240.052 699.807,241.733 700.375,241.182 700.943,241.709 701.512,240.2 702.08,237.969 702.648,239.002 703.217,237.578 703.785,238.343 704.354,235.86 704.922,236.887 705.49,235.583 706.059,235.463 706.627,235.514 707.195,236.397 707.764,237.315 708.332,236.04 708.9,234.825 709.469,234.568 710.037,234.422 710.605,234.337 711.174,232.047 711.742,232.171 712.31,232.393 712.879,232.306 713.447,231.44 714.015,230.268 714.584,230.342 715.152,227.51 715.72,228.099 716.289,227.681 716.857,227.056 717.425,226.442 717.994,228.002 718.562,227.314 719.131,228.751 719.699,228.985 720.267,231.275 720.836,230.408 721.404,230.49 721.972,228.651 722.541,227.944 723.109,227.512 723.677,228.023 724.246,226.392 724.814,226.956 725.382,227.444 725.951,226.7 726.519,227.407 727.087,228.986 727.656,230.483 728.224,229.476 728.792,228.65 729.361,229.92 729.929,229.139 730.497,228.601 731.066,229.062 731.634,228.618 732.203,227.959 732.771,228.45 733.339,229.948 733.908,231.398 734.476,230.465 735.044,231.775 735.613,229.978 736.181,230.264 736.749,229.41 737.318,231.063 737.886,231.356 738.454,229.488 739.023,228.715 739.591,229.298 740.159,233.115 740.728,237.356 741.296,239.236 741.864,240.029 742.433,238.718 743.001,238.374 743.569,239.076 744.138,239.842 744.706,240.426 745.274,239.921 745.843,238.49 746.411,237.12 746.98,235.721 747.548,236.601 748.116,236.495 748.685,237.198 749.253,232.835 749.821,232.99 750.39,233.127 750.958,231.258 751.526,230.211 752.095,231.449 752.663,229.578 753.231,231.973 753.8,231.88 754.368,232.988 754.936,230.73 755.505,230.825 756.073,231.781 756.641,231.945 757.21,233.285 757.778,234.433 758.346,234.435 758.915,234.146 759.483,235.966 760.052,233.507 760.62,232.455 761.188,232.554 761.757,232.623 762.325,233.822 762.893,232.742 763.462,232.853 764.03,233.125 764.598,233.207 765.167,236.389 765.735,236.221 766.303,234.788 766.872,234.532 767.44,232.307 768.008,234.428 768.577,234.186 769.145,236.277 769.713,233.884 770.282,236.966 770.85,236.575 771.418,235.23 771.987,234.935 772.555,233.768 773.123,233.575 773.692,232.408 774.26,233.41 774.829,233.065 775.397,234.158 775.965,236.835 776.534,234.339 777.102,235.242 777.67,232.947 778.239,232.907 778.807,232.785 779.375,232.675 779.944,232.497 780.512,232.354 781.08,232.25 781.649,233.292 782.217,234.06 782.785,232.907 783.354,232.568 783.922,230.299 784.49,231.455 785.059,231.491 785.627,230.473 786.195,231.56 786.764,229.539 787.332,231.707 787.9,229.672 788.469,229.798 789.037,227.847 789.606,231.146 790.174,229.152 790.742,228.24 791.311,228.539 791.879,228.827 792.447,229.097 793.016,230.185 793.584,231.351 794.152,232.573 794.721,235.524 795.289,235.161 795.857,233.775 796.426,233.723 796.994,232.617 797.562,232.571 798.131,231.526 798.699,231.524 799.267,231.595 799.836,229.655 800.404,228.864 800.972,229.117 801.541,229.373 802.109,229.533 802.678,228.559 803.246,228.769 803.814,227.959 804.383,228.43 804.951,227.796 805.519,228.062 806.088,230.397 806.656,229.642 807.224,230.749 807.793,232.103 808.361,230.985 808.929,230.872 809.498,229.828 810.066,231.055 810.634,229.998 811.203,230.166 811.771,229.304 812.339,230.512 812.908,227.681 813.476,230.147 814.044,230.291 814.613,231.593 815.181,229.64 815.749,229.756 816.318,229.051 816.886,228.385 817.455,228.869 818.023,230.232 818.591,231.366 819.16,231.406 819.728,229.567 820.296,230.941 820.865,230.958 821.433,232.091 822.001,230.112 822.57,231.141 823.138,232.515 823.706,231.608 824.275,230.825 824.843,232.963 825.411,232.834 825.98,231.796 826.548,234.84 827.116,234.72 827.685,234.472 828.253,233.148 828.821,231.167 829.39,232.352 829.958,232.296 830.526,231.056 831.095,231.267 831.663,232.37 832.232,234.57 832.8,233.317 833.368,233.446 833.937,231.334 834.505,231.452 835.073,230.525 835.642,231.739 836.21,231.76 836.778,232.885 837.347,233.911 837.915,234.88 838.483,234.746 839.052,235.751 839.62,235.282 840.188,235.265 840.757,236.904 841.325,232.352 841.893,234.228 842.462,235.022 843.03,232.776 843.598,231.604 844.167,231.697 844.735,229.783 845.304,231.103 845.872,233 846.44,229.93 847.009,232.281 847.577,233.253 848.145,232.128 848.714,233.958 849.282,234.664 849.85,234.541 850.419,235.384 850.987,237.306 851.555,239.956 852.124,238.456 852.692,237.023 853.26,234.57 853.829,234.3 854.397,234.248 854.965,233.051 855.534,229.637 856.102,230.531 856.67,229.459 857.239,227.372 857.807,226.622 858.375,227.886 858.944,227.35 859.512,225.717 860.081,228.355 860.649,230.523 861.217,231.44 861.786,233.462 862.354,233.198 862.922,232.936 863.491,232.729 864.059,231.736 864.627,231.951 865.196,231.849 865.764,230.803 866.332,228.923 866.901,227.981 867.469,228.278 868.037,227.563 868.606,226.836 869.174,225.145 869.742,224.864 870.311,226.461 870.879,226.107 871.447,225.446 872.016,225.99 872.584,226.349 873.152,228.952 873.721,230.379 874.289,229.388 874.858,230.461 875.426,229.439 875.994,227.505 876.563,228.993 877.131,227.152 877.699,227.492 878.268,228.828 878.836,233.092 879.404,233.066 879.973,234.064 880.541,235.892 881.109,234.423 881.678,235.377 882.246,235.167 882.814,233.908 883.383,233.672 883.951,233.551 884.519,231.386 885.088,236.26 885.656,233.772 886.224,236.994 886.793,236.516 887.361,234.075 887.93,232.782 888.498,234.764 889.066,236.593 889.635,235.348 890.203,233.085 890.771,232.902 891.34,231.8 891.908,229.719 892.476,228.891 893.045,228.982 893.613,228.015 894.181,227.29 894.75,229.716 895.318,232.022 895.886,231.009 896.455,230.994 897.023,229.91 897.591,229.017 898.16,228.962 898.728,230.273 899.296,230.428 899.865,229.667 900.433,228.822 901.001,227.28 901.57,226.755 902.138,227.301 902.707,227.641 903.275,228.876 903.843,228.07 904.412,227.516 904.98,226.45 905.548,228.068 906.117,229.492 906.685,229.701 907.253,231.97 907.822,230.927 908.39,230.883 908.958,232.107 909.527,232.283 910.095,234.247 910.663,235.184 911.232,233.668 911.8,233.569 912.368,235.347 912.937,237.947 913.505,239.54 914.073,238.781 914.642,238.39 915.21,236.759 915.779,235.206 916.347,235.82 916.915,235.49 917.484,236.375 918.052,236.055 918.62,236.677 919.189,236.24 919.757,236.959 920.325,237.779 920.894,237.129 921.462,235.72 922.03,234.127 922.599,233.832 923.167,233.54 923.735,233.315 924.304,235.325 924.872,234.138 925.44,234.005 926.009,232.718 926.577,231.526 927.145,232.367 927.714,233.005 928.282,230.671 928.85,228.523 929.419,229.56 929.987,230.433 930.556,231.317 931.124,232.448 931.692,230.255 932.261,229.086 932.829,228.162 933.397,228.489 933.966,227.57 934.534,228.961 935.102,227.935 935.671,229.103 936.239,230.159 936.807,230.286 937.376,231.248 937.944,230.232 938.512,232.394 939.081,230.066 939.649,229.831 940.217,230.843 940.786,231.916 941.354,230.864 941.922,231.85 942.491,228.687 943.059,229.875 943.627,230.8 944.196,230.899 944.764,230.692 945.333,229.503 945.901,228.597 946.469,227.805 947.038,226.903 947.606,226.169 948.174,225.567 948.743,227.06 949.311,224.51 949.879,223.898 950.448,224.449 951.016,224.953 951.584,224.459 952.153,224.778 952.721,225.385 953.289,225.805 953.858,226.224 954.426,224.767 954.994,224.098 955.563,223.865 956.131,225.57 956.699,227 957.268,229.444 957.836,228.844 958.405,228.925 958.973,228.033 959.541,228.069 960.11,226.615 960.678,228.984 961.246,230.361 961.815,230.599 962.383,228.772 962.951,231.328 963.52,231.43 964.088,231.429 964.656,233.762 965.225,236.832 965.793,238.453 966.361,243.09 966.93,243.401 967.498,242.505 968.066,242.712 968.635,241.892 969.203,240.027 969.771,238.286 970.34,237.905 970.908,238.368 971.476,237.57 972.045,235.043 972.613,234.77 973.182,234.54 973.75,234.291 974.318,233.86 974.887,232.662 975.455,232.413 976.023,233.323 976.592,232.96 977.16,231.487 977.728,229.437 978.297,230.537 978.865,231.564 979.433,231.469 980.002,231.402 980.57,230.481 981.138,230.657 981.707,230.495 982.275,230.443 982.843,231.293 983.412,230.272 983.98,230.145 984.548,230.222 985.117,228.238 985.685,226.438 986.253,226.697 986.822,228.212 987.39,228.426 987.959,227.826 988.527,229.085 989.095,230.207 989.664,231.441 990.232,229.115 990.8,232.323 991.369,232.154 991.937,232.065 992.505,232.036 993.074,232.918 993.642,232.543 994.21,231.559 994.779,231.577 995.347,231.382 995.915,230.165 996.484,227.084 997.052,226.358 997.62,226.567 998.189,228.897 998.757,229.618 999.325,230.714 999.894,231.794 1000.46,231.709 1001.03,231.609 1001.6,229.488 1002.17,231.704 1002.74,231.679 1003.3,230.597 1003.87,229.356 1004.44,228.386 1005.01,228.658 1005.58,228.887 1006.15,228.915 1006.71,226.915 1007.28,227.047 1007.85,225.515 1008.42,226.933 1008.99,228.304 1009.56,230.678 1010.12,232.65 1010.69,231.565 1011.26,229.36 1011.83,228.399 1012.4,227.615 1012.97,228.995 1013.53,228.174 1014.1,226.6 1014.67,228.213 1015.24,228.471 1015.81,227.766 1016.38,228.985 1016.94,229.19 1017.51,230.417 1018.08,230.38 1018.65,232.509 1019.22,232.375 1019.79,232.322 1020.35,231.225 1020.92,230.049 1021.49,228.284 1022.06,227.473 1022.63,226.951 1023.2,226.279 1023.76,225.378 1024.33,228.846 1024.9,231.171 1025.47,233.158 1026.04,233.044 1026.61,233.987 1027.17,235.954 1027.74,235.528 1028.31,234.165 1028.88,235.065 1029.45,233.722 1030.02,232.791 1030.58,234.733 1031.15,234.463 1031.72,234.268 1032.29,235.157 1032.86,235.014 1033.43,235.995 1033.99,237.748 1034.56,235.225 1035.13,234.687 1035.7,234.397 1036.27,235.036 1036.84,234.868 1037.4,233.659 1037.97,234.526 1038.54,234.452 1039.11,237.25 1039.68,235.845 1040.25,235.138 1040.81,234.627 1041.38,235.338 1041.95,235.196 1042.52,235.036 1043.09,234.556 1043.66,231.929 1044.22,230.698 1044.79,229.566 1045.36,229.673 1045.93,229.806 1046.5,229.812 1047.07,230.879 1047.63,230.621 1048.2,229.436 1048.77,228.334 1049.34,231.601 1049.91,230.367 1050.48,230.218 1051.05,231.176 1051.61,230.86 1052.18,229.697 1052.75,230.673 1053.32,230.663 1053.89,230.685 1054.46,231.625 1055.02,229.525 1055.59,229.633 1056.16,229.685 1056.73,228.698 1057.3,229.763 1057.87,229.936 1058.43,229.232 1059,228.275 1059.57,227.431 1060.14,228.826 1060.71,228.177 1061.28,229.347 1061.84,229.445 1062.41,229.767 1062.98,229.871 1063.55,230.822 1064.12,228.724 1064.69,228.851 1065.25,230.027 1065.82,230.005 1066.39,232.203 1066.96,233.167 1067.53,232.964 1068.1,231.69 1068.66,231.594 1069.23,231.455 1069.8,231.258 1070.37,231.327 1070.94,232.273 1071.51,231.14 1072.07,230.147 1072.64,227.034 1073.21,227.378 1073.78,226.52 1074.35,225.829 1074.92,227.244 1075.48,227.393 1076.05,227.402 1076.62,226.778 1077.19,226.9 1077.76,228.311 1078.33,226.477 1078.89,228.849 1079.46,230.081 1080.03,229.11 1080.6,228.332 1081.17,228.417 1081.74,230.566 1082.3,229.643 1082.87,230.609 1083.44,231.926 1084.01,230.978 1084.58,231.067 1085.15,231.189 1085.71,232.241 1086.28,235.389 1086.85,233.925 1087.42,230.656 1087.99,229.641 1088.56,229.645 1089.12,227.725 1089.69,226.176 1090.26,225.606 1090.83,225.261 1091.4,226.716 1091.97,227.887 1092.53,228.073 1093.1,228.415 1093.67,227.614 1094.24,225.777 1094.81,222.987 1095.38,222.512 1095.94,226.204 1096.51,224.389 1097.08,224.881 1097.65,225.439 1098.22,224.954 1098.79,225.44 1099.35,225.966 1099.92,226.473 1100.49,226.992 1101.06,229.409 1101.63,229.636 1102.2,229.973 1102.76,231.255 1103.33,230.283 1103.9,230.389 1104.47,232.525 1105.04,233.514 1105.61,232.507 1106.17,232.45 1106.74,233.27 1107.31,233.151 1107.88,234.985 1108.45,234.593 1109.02,234.336 1109.58,233.023 1110.15,233.02 1110.72,231.878 1111.29,231.008 1111.86,233.198 1112.43,233.111 1112.99,233.089 1113.56,233.892 1114.13,234.892 1114.7,234.489 1115.27,235.299 1115.84,238.169 1116.4,240.013 1116.97,239.438 1117.54,239.869 1118.11,240.28 1118.68,239.417 1119.25,239.876 1119.81,239.298 1120.38,238.572 1120.95,237.798 1121.52,237.235 1122.09,237.741 1122.66,237.364 1123.23,237.653 1123.79,236.16 1124.36,234.649 1124.93,233.254 1125.5,233.899 1126.07,233.74 1126.64,233.543 1127.2,233.227 1127.77,231.958 1128.34,231.639 1128.91,229.446 1129.48,230.487 1130.05,231.497 1130.61,232.418 1131.18,232.206 1131.75,230.079 1132.32,230.053 1132.89,226.828 1133.46,225.997 1134.02,226.622 1134.59,226.975 1135.16,229.02 1135.73,229.094 1136.3,228.037 1136.87,226.884 1137.43,225.037 1138,224.173 1138.57,224.66 1139.14,224.827 1139.71,226.195 1140.28,226.476 1140.84,227.994 1141.41,228.354 1141.98,227.396 1142.55,227.456 1143.12,228.896 1143.69,225.977 1144.25,228.599 1144.82,229.647 1145.39,230.77 1145.96,231.016 1146.53,231.136 1147.1,231.054 1147.66,229.995 1148.23,230.108 1148.8,230.043 1149.37,231.138 1149.94,230.284 1150.51,229.339 1151.07,228.393 1151.64,228.643 1152.21,228.663 1152.78,227.968 1153.35,226.133 1153.92,224.509 1154.48,225.001 1155.05,223.391 1155.62,225.083 1156.19,228.343 1156.76,229.638 1157.33,230.731 1157.89,230.853 1158.46,230.971 1159.03,231.964 1159.6,232.869 1160.17,230.856 1160.74,230.806 1161.3,229.92 1161.87,230.434 1162.44,230.538 1163.01,229.61 1163.58,229.556 1164.15,231.754 1164.71,231.699 1165.28,229.685 1165.85,228.54 1166.42,226.729 1166.99,228.068 1167.56,228.229 1168.12,229.525 1168.69,228.519 1169.26,228.816 1169.83,228.084 1170.4,228.373 1170.97,229.593 1171.53,230.94 1172.1,231.286 1172.67,233.296 1173.24,233.313 1173.81,234.347 1174.38,234.087 1174.94,234.003 1175.51,234.984 1176.08,236.875 1176.65,234.351 1177.22,234.378 1177.79,231.208 1178.35,230.892 1178.92,229.796 1179.49,229.976 1180.06,228.883 1180.63,226.015 1181.2,227.278 1181.76,226.65 1182.33,228.1 1182.9,228.134 1183.47,230.301 1184.04,228.295 1184.61,228.538 1185.17,226.55 1185.74,228.094 1186.31,229.643 1186.88,229.947 1187.45,230.343 1188.02,226.27 1188.58,228.731 1189.15,228.096 1189.72,226.153 1190.29,225.447 1190.86,225.965 1191.43,227.381 1192,227.746 1192.56,230.019 1193.13,230.044 1193.7,231.342 1194.27,231.257 1194.84,231.534 1195.41,231.642 1195.97,232.714 1196.54,229.698 1197.11,229.871 1197.68,229.868 1198.25,230.967 1198.82,232.206 1199.38,234.57 1199.95,234.513 1200.52,235.373 1201.09,233.997 1201.66,232.774 1202.23,232.807 1202.79,233.595 1203.36,232.771 1203.93,231.782 1204.5,231.857 1205.07,230.741 1205.64,230.892 1206.2,233.141 1206.77,231.094 1207.34,230.123 1207.91,230.457 1208.48,229.585 1209.05,230.617 1209.61,232.773 1210.18,232.622 1210.75,233.713 1211.32,233.727 1211.89,233.435 1212.46,232.879 1213.02,232.857 1213.59,233.954 1214.16,233.707 1214.73,234.572 1215.3,233.406 1215.87,235.449 1216.43,235.195 1217,236.923 1217.57,236.519 1218.14,234.983 1218.71,233.63 1219.28,233.314 1219.84,234.011 1220.41,235.597 1220.98,235.289 1221.55,238.092 1222.12,237.563 1222.69,237.204 1223.25,238.105 1223.82,236.508 1224.39,238.004 1224.96,237.37 1225.53,236.77 1226.1,235.291 1226.66,233.792 1227.23,233.283 1227.8,232.886 1228.37,232.648 1228.94,232.459 1229.51,232.34 1230.07,228.984 1230.64,228.982 1231.21,230.122 1231.78,233.451 1232.35,232.025 1232.92,232.916 1233.48,232.673 1234.05,234.827 1234.62,236.793 1235.19,236.203 1235.76,234.973 1236.33,234.401 1236.89,232.918 1237.46,232.716 1238.03,233.597 1238.6,233.367 1239.17,231.081 1239.74,229.727 1240.3,230.865 1240.87,230.83 1241.44,229.648 1242.01,227.347 1242.58,227.438 1243.15,224.563 1243.71,224.966 1244.28,225.471 1244.85,224.957 1245.42,225.258 1245.99,226.773 1246.56,225.958 1247.12,227.34 1247.69,227.461 1248.26,226.626 1248.83,227.975 1249.4,228.176 1249.97,228.436 1250.53,227.456 1251.1,227.66 1251.67,228.695 1252.24,229.994 1252.81,227.959 1253.38,226.24 1253.94,226.579 1254.51,224.847 1255.08,226.391 1255.65,225.731 1256.22,225.897 1256.79,227.169 1257.35,229.347 1257.92,231.706 1258.49,234.828 1259.06,233.531 1259.63,233.492 1260.2,233.192 1260.76,234.796 1261.33,237.616 1261.9,235.877 1262.47,236.492 1263.04,236.26 1263.61,233.948 1264.18,232.587 1264.74,231.553 1265.31,234.736 1265.88,234.523 1266.45,234.001 1267.02,233.553 1267.59,234.096 1268.15,233.844 1268.72,234.567 1269.29,234.559 1269.86,234.314 1270.43,231.931 1271,228.769 1271.56,228.838 1272.13,227.969 1272.7,228.915 1273.27,227.691 1273.84,227.932 1274.41,227.87 1274.97,230.292 1275.54,232.364 1276.11,233.115 1276.68,231.797 1277.25,232.688 1277.82,231.549 1278.38,232.363 1278.95,231.229 1279.52,232.291 1280.09,232.272 1280.66,231.282 1281.23,233.355 1281.79,234.25 1282.36,233.904 1282.93,234.691 1283.5,235.204 1284.07,236.696 1284.64,236.038 1285.2,237.549 1285.77,236.037 1286.34,234.58 1286.91,234.245 1287.48,233.727 1288.05,236.254 1288.61,236.847 1289.18,236.382 1289.75,235.636 1290.32,234.25 1290.89,232.962 1291.46,228.493 1292.02,226.487 1292.59,225.54 1293.16,225.901 1293.73,226.104 1294.3,226.216 1294.87,228.593 1295.43,228.83 1296,226.785 1296.57,226.968 1297.14,228.172 1297.71,228.261 1298.28,229.448 1298.84,229.859 1299.41,231.632 1299.98,231.497 1300.55,231.277 1301.12,231.167 1301.69,232.133 1302.25,229.879 1302.82,231.018 1303.39,229.793 1303.96,229.59 1304.53,229.504 1305.1,230.345 1305.66,231.169 1306.23,232.145 1306.8,232.034 1307.37,232.832 1307.94,233.761 1308.51,232.41 1309.07,230.181 1309.64,231.008 1310.21,229.756 1310.78,229.671 1311.35,230.685 1311.92,231.647 1312.48,232.76 1313.05,230.165 1313.62,231.169 1314.19,231.167 1314.76,229.865 1315.33,228.786 1315.89,228.814 1316.46,230.925 1317.03,231.72 1317.6,229.459 1318.17,229.538 1318.74,229.403 1319.3,227.369 1319.87,227.636 1320.44,226.698 1321.01,227.762 1321.58,226.918 1322.15,225.251 1322.71,226.499 1323.28,225.803 1323.85,224.053 1324.42,226.764 1324.99,225.859 1325.56,226.027 1326.12,226.259 1326.69,227.437 1327.26,226.7 1327.83,225.99 1328.4,228.356 1328.97,227.469 1329.53,230.749 1330.1,229.656 1330.67,230.755 1331.24,229.768 1331.81,228.82 1332.38,228.968 1332.94,230.065 1333.51,232.087 1334.08,232.822 1334.65,230.572 1335.22,230.526 1335.79,231.364 1336.36,228.542 1336.92,229.636 1337.49,228.799 1338.06,228.925 1338.63,227.054 1339.2,227.25 1339.77,227.462 1340.33,227.635 1340.9,226.784 1341.47,226.899 1342.04,227.194 1342.61,228.518 1343.18,229.782 1343.74,229.814 1344.31,229.862 1344.88,229.966 1345.45,230.148 1346.02,230.283 1346.59,228.251 1347.15,228.227 1347.72,230.676 1348.29,230.63 1348.86,233.787 1349.43,231.368 1350,233.277 1350.56,231.983 1351.13,233.677 1351.7,232.499 1352.27,234.451 1352.84,234.244 1353.41,233.019 1353.97,230.743 1354.54,230.699 1355.11,230.847 1355.68,232.028 1356.25,229.935 1356.82,232.243 1357.38,229.921 1357.95,230.174 1358.52,229.012 1359.09,229.061 1359.66,226.315 1360.23,227.679 1360.79,230.071 1361.36,231.086 1361.93,230.976 1362.5,232 1363.07,231.758 1363.64,234.96 1364.2,234.66 1364.77,235.481 1365.34,232.177 1365.91,230.982 1366.48,228.953 1367.05,227.113 1367.61,227.341 1368.18,228.641 1368.75,229.835 1369.32,227.918 1369.89,231.164 1370.46,229.902 1371.02,226.833 1371.59,226.992 1372.16,227.296 1372.73,226.392 1373.3,229.78 1373.87,228.665 1374.43,227.846 1375,231.18 1375.57,231.166 1376.14,232.268 1376.71,232.214 1377.28,230.947 1377.84,230.87 1378.41,232.015 1378.98,231.294 1379.55,231.108 1380.12,231.528 1380.69,231.659 1381.25,232.788 1381.82,230.619 1382.39,231.647 1382.96,231.897 1383.53,234.008 1384.1,233.681 1384.66,232.517 1385.23,232.464 1385.8,234.232 1386.37,233.004 1386.94,232.821 1387.51,233.564 1388.07,232.513 1388.64,230.237 1389.21,229.333 1389.78,224.37 1390.35,224.777 1390.92,225.03 1391.48,223.326 1392.05,224.895 1392.62,225.373 1393.19,223.041 1393.76,223.653 1394.33,223.18 1394.89,225.84 1395.46,228.278 1396.03,228.505 1396.6,226.929 1397.17,228.718 1397.74,229.042 1398.3,230.294 1398.87,228.175 1399.44,229.486 1400.01,228.561 1400.58,228.762 1401.15,226.929 1401.71,227.329 1402.28,229.592 1402.85,230.783 1403.42,230.995 1403.99,228.949 1404.56,229.027 1405.13,229.438 1405.69,228.163 1406.26,229.74 1406.83,231.246 1407.4,230.204 1407.97,229.204 1408.54,230.395 1409.1,228.33 1409.67,230.653 1410.24,230.507 1410.81,230.382 1411.38,230.537 1411.95,230.8 1412.51,232.129 1413.08,231.238 1413.65,230.47 1414.22,231.579 1414.79,233.696 1415.36,234.566 1415.92,234.353 1416.49,233.185 1417.06,232.121 1417.63,233.327 1418.2,233.266 1418.77,234.006 1419.33,234.81 1419.9,233.779 1420.47,233.725 1421.04,232.766 1421.61,234.033 1422.18,235.091 1422.74,233.014 1423.31,233.879 1423.88,231.621 1424.45,231.576 1425.02,228.844 1425.59,230.169 1426.15,232.311 1426.72,232.267 1427.29,234.049 1427.86,234.192 1428.43,232.006 1429,232.002 1429.56,232.113 1430.13,229.818 1430.7,230.097 1431.27,231.149 1431.84,233.009 1432.41,232.925 1432.97,232.891 1433.54,231.091 1434.11,231.249 1434.68,232.372 1435.25,232.443 1435.82,230.108 1436.38,231.016 1436.95,228.167 1437.52,227.127 1438.09,229.437 1438.66,229.712 1439.23,228.93 1439.79,228.879 1440.36,231.248 1440.93,233.252 1441.5,233.041 1442.07,233.977 1442.64,237.868 1443.2,238.457 1443.77,235.955 1444.34,234.582 1444.91,233.418 1445.48,231.432 1446.05,231.175 1446.61,231.114 1447.18,230.826 1447.75,229.823 1448.32,230.976 1448.89,229.909 1449.46,229.971 1450.02,227.994 1450.59,228.239 1451.16,230.66 1451.73,229.628 1452.3,226.601 1452.87,225.547 1453.43,227.82 1454,229.053 1454.57,229.245 1455.14,228.394 1455.71,231.829 1456.28,232.869 1456.84,233.007 1457.41,233.975 1457.98,235.781 1458.55,235.233 1459.12,235.157 1459.69,238.115 1460.25,239.381 1460.82,238.01 1461.39,237.564 1461.96,236.958 1462.53,238.466 1463.1,240.734 1463.66,236.923 1464.23,234.109 1464.8,233.758 1465.37,233.32 1465.94,235.098 1466.51,234.776 1467.07,232.186 1467.64,231.974 1468.21,233.789 1468.78,234.714 1469.35,234.291 1469.92,233.964 1470.48,233.728 1471.05,233.548 1471.62,234.409 1472.19,233.051 1472.76,232.018 1473.33,231.645 1473.89,231.316 1474.46,231.147 1475.03,230.892 1475.6,230.761 1476.17,227.561 1476.74,225.56 1477.31,226.999 1477.87,231.395 1478.44,230.271 1479.01,230.099 1479.58,232.232 1480.15,232.226 1480.72,233.189 1481.28,231.826 1481.85,231.824 1482.42,232.822 1482.99,232.334 1483.56,234.205 1484.13,233.512 1484.69,235.189 1485.26,234.777 1485.83,233.438 1486.4,232.301 1486.97,232.207 1487.54,231.007 1488.1,230.814 1488.67,229.616 1489.24,229.516 1489.81,231.559 1490.38,231.379 1490.95,230.023 1491.51,230.716 1492.08,230.45 1492.65,228.151 1493.22,230.284 1493.79,230.197 1494.36,229.115 1494.92,228.988 1495.49,228.096 1496.06,227.001 1496.63,230.171 1497.2,229.869 1497.77,228.939 1498.33,227.932 1498.9,228.192 1499.47,228.33 1500.04,229.359 1500.61,227.47 1501.18,226.534 1501.74,225.708 1502.31,225.922 1502.88,225.21 1503.45,225.338 1504.02,224.589 1504.59,222.853 1505.15,223.273 1505.72,223.769 1506.29,226.077 1506.86,226.415 1507.43,224.401 1508,225.818 1508.56,226.116 1509.13,226.32 1509.7,225.554 1510.27,225.698 1510.84,223.948 1511.41,224.548 1511.97,224.917 1512.54,227.388 1513.11,228.715 1513.68,226.819 1514.25,227.123 1514.82,226.225 1515.38,226.426 1515.95,225.88 1516.52,226.385 1517.09,226.53 1517.66,226.991 1518.23,228.461 1518.79,229.531 1519.36,232.913 1519.93,232.745 1520.5,231.714 1521.07,231.745 1521.64,231.921 1522.2,231.961 1522.77,232.825 1523.34,230.702 1523.91,233.007 1524.48,234.086 1525.05,232.852 1525.61,231.709 1526.18,231.648 1526.75,232.572 1527.32,232.655 1527.89,231.483 1528.46,233.465 1529.02,236.534 1529.59,235.187 1530.16,236.048 1530.73,238.592 1531.3,237.151 1531.87,237.872 1532.43,237.414 1533,236.883 1533.57,237.296 1534.14,236.816 1534.71,237.216 1535.28,235.526 1535.84,235.191 1536.41,234.542 1536.98,234.144 1537.55,231.723 1538.12,231.828 1538.69,230.777 1539.25,226.594 1539.82,224.895 1540.39,226.345 1540.96,227.692 1541.53,227.101 1542.1,227.648 1542.66,226.568 1543.23,225.09 1543.8,225.231 1544.37,225.524 1544.94,226.812 1545.51,226.227 1546.08,225.649 1546.64,223.684 1547.21,222.108 1547.78,222.641 1548.35,222.408 1548.92,223.183 1549.49,225.864 1550.05,226.274 1550.62,229.536 1551.19,232.854 1551.76,231.688 1552.33,229.55 1552.9,230.503 1553.46,230.863 1554.03,229.938 1554.6,235.327 1555.17,232.998 1555.74,232.857 1556.31,230.658 1556.87,230.743 1557.44,232.948 1558.01,233.88 1558.58,234.899 1559.15,235.756 1559.72,236.451 1560.28,235.845 1560.85,234.223 1561.42,233.784 1561.99,234.535 1562.56,234.157 1563.13,232.885 1563.69,233.599 1564.26,229.249 1564.83,230.343 1565.4,229.564 1565.97,228.515 1566.54,226.774 1567.1,225.922 1567.67,226.641 1568.24,226.84 1568.81,227.178 1569.38,226.492 1569.95,227.881 1570.51,228.074 1571.08,224.027 1571.65,226.751 1572.22,226.423 1572.79,228.959 1573.36,230.118 1573.92,231.287 1574.49,232.557 1575.06,232.418 1575.63,233.471 1576.2,234.211 1576.77,236.098 1577.33,233.611 1577.9,234.51 1578.47,234.473 1579.04,234.261 1579.61,232.927 1580.18,231.732 1580.74,232.649 1581.31,232.555 1581.88,231.282 1582.45,230.208 1583.02,230.278 1583.59,229.458 1584.15,229.573 1584.72,228.805 1585.29,230.044 1585.86,230.373 1586.43,228.522 1587,229.939 1587.56,231.216 1588.13,232.328 1588.7,233.217 1589.27,232.118 1589.84,231.198 1590.41,230.057 1590.97,228.302 1591.54,227.344 1592.11,227.61 1592.68,230.012 1593.25,228.211 1593.82,227.448 1594.38,227.667 1594.95,228.024 1595.52,228.303 1596.09,226.462 1596.66,227.858 1597.23,228.403 1597.79,229.714 1598.36,228.945 1598.93,229.014 1599.5,231.466 1600.07,232.351 1600.64,230.527 1601.2,230.79 1601.77,230.831 1602.34,231.96 1602.91,232.016 1603.48,231.093 1604.05,231.129 1604.61,230.163 1605.18,229.374 1605.75,228.364 1606.32,227.644 1606.89,228.034 1607.46,230.309 1608.02,231.21 1608.59,227.132 1609.16,231.662 1609.73,232.701 1610.3,234.565 1610.87,235.501 1611.43,237.297 1612,236.753 1612.57,236.228 1613.14,237.877 1613.71,237.494 1614.28,236.031 1614.84,235.748 1615.41,235.391 1615.98,233.853 1616.55,232.732 1617.12,234.618 1617.69,234.402 1618.26,235.264 1618.82,234.908 1619.39,234.6 1619.96,234.543 1620.53,233.065 1621.1,233.922 1621.67,234.789 1622.23,235.407 1622.8,233.142 1623.37,232.879 1623.94,228.741 1624.51,228.75 1625.08,228.907 1625.64,228.837 1626.21,229.922 1626.78,227.812 1627.35,227.015 1627.92,229.28 1628.49,231.467 1629.05,232.452 1629.62,230.249 1630.19,230.476 1630.76,233.665 1631.33,232.399 1631.9,232.544 1632.46,231.171 1633.03,231.157 1633.6,233.149 1634.17,232.601 1634.74,235.824 1635.31,235.494 1635.87,235.114 1636.44,232.627 1637.01,230.389 1637.58,229.648 1638.15,232.675 1638.72,230.548 1639.28,230.552 1639.85,230.449 1640.42,232.482 1640.99,234.156 1641.56,234.814 1642.13,233.311 1642.69,234.049 1643.26,232.545 1643.83,232.366 1644.4,233.959 1644.97,235.535 1645.54,235.053 1646.1,235.881 1646.67,234.131 1647.24,235.113 1647.81,234.699 1648.38,234.208 1648.95,234.82 1649.51,234.259 1650.08,231.929 1650.65,230.654 1651.22,231.471 1651.79,230.27 1652.36,229.028 1652.92,228.97 1653.49,227.984 1654.06,228.178 1654.63,228.283 1655.2,230.48 1655.77,230.353 1656.33,229.333 1656.9,231.402 1657.47,232.045 1658.04,230.895 1658.61,229.69 1659.18,229.681 1659.74,230.88 1660.31,231.981 1660.88,231.872 1661.45,231.703 1662.02,231.467 1662.59,230.333 1663.15,231.38 1663.72,231.042 1664.29,232.131 1664.86,230.935 1665.43,230.504 1666,231.101 1666.56,230.965 1667.13,231.754 1667.7,231.425 1668.27,231.237 1668.84,232.182 1669.41,232.033 1669.97,231.77 1670.54,230.51 1671.11,230.465 1671.68,229.13 1672.25,228.968 1672.82,230.995 1673.38,231.695 1673.95,232.678 1674.52,233.426 1675.09,233.176 1675.66,233.921 1676.23,233.481 1676.79,232.055 1677.36,230.82 1677.93,228.713 1678.5,231.638 1679.07,231.583 1679.64,231.413 1680.2,231.256 1680.77,231.842 1681.34,229.44 1681.91,229.157 1682.48,230.512 1683.05,231.574 1683.61,230.253 1684.18,229.03 1684.75,228.123 1685.32,226.197 1685.89,227.274 1686.46,226.491 1687.02,227.863 1687.59,223.884 1688.16,222.996 1688.73,223.302 1689.3,224.648 1689.87,223.871 1690.44,223.425 1691,224.821 1691.57,226.16 1692.14,226.376 1692.71,227.639 1693.28,228.829 1693.85,227.646 1694.41,225.694 1694.98,227.088 1695.55,228.259 1696.12,228.424 1696.69,225.46 1697.26,226.751 1697.82,226.093 1698.39,225.411 1698.96,225.638 1699.53,224.086 1700.1,225.74 1700.67,225.965 1701.23,227.403 1701.8,229.898 1702.37,228.992 1702.94,227.101 1703.51,227.279 1704.08,227.495 1704.64,226.87 1705.21,226.157 1705.78,229.588 1706.35,228.675 1706.92,227.808 1707.49,229.191 1708.05,228.374 1708.62,230.677 1709.19,229.789 1709.76,231.07 1710.33,234.246 1710.9,234.102 1711.46,235.027 1712.03,233.682 1712.6,233.818 1713.17,230.658 1713.74,229.733 1714.31,229.841 1714.87,230.191 1715.44,231.115 1716.01,230.073 1716.58,228.073 1717.15,226.241 1717.72,227.831 1718.28,227.128 1718.85,229.328 1719.42,227.685 1719.99,225.73 1720.56,225.083 1721.13,225.539 1721.69,225.926 1722.26,226.357 1722.83,226.784 1723.4,227.225 1723.97,227.622 1724.54,226.045 1725.1,227.42 1725.67,226.974 1726.24,227.441 1726.81,227.938 1727.38,229.196 1727.95,229.345 1728.51,230.343 1729.08,231.735 1729.65,230.723 1730.22,232.962 1730.79,233.096 1731.36,233.072 1731.92,232.186 1732.49,234.51 1733.06,234.345 1733.63,233.185 1734.2,230.981 1734.77,230.999 1735.33,232.22 1735.9,232.231 1736.47,231.198 1737.04,232.316 1737.61,233.196 1738.18,233.089 1738.74,232.132 1739.31,231.241 1739.88,231.254 1740.45,230.148 1741.02,231.213 1741.59,232.146 1742.15,233.031 1742.72,232.746 1743.29,232.64 1743.86,234.537 1744.43,232.2 1745,230.195 1745.56,230.233 1746.13,230.498 1746.7,230.471 1747.27,230.608 1747.84,230.574 1748.41,229.284 1748.97,228.523 1749.54,228.689 1750.11,231.201 1750.68,232.204 1751.25,230.147 1751.82,232.532 1752.38,233.626 1752.95,236.579 1753.52,237.182 1754.09,235.738 1754.66,232.497 1755.23,230.3 1755.79,232.445 1756.36,233.265 1756.93,236.164 1757.5,236.892 1758.07,236.548 1758.64,237.295 1759.21,236.82 1759.77,235.451 1760.34,235.081 1760.91,234.807 1761.48,233.305 1762.05,234.001 1762.62,233.718 1763.18,231.493 1763.75,232.371 1764.32,230.12 1764.89,232.189 1765.46,233.404 1766.03,231.211 1766.59,231.028 1767.16,231.043 1767.73,229.225 1768.3,231.486 1768.87,230.774 1769.44,230.904 1770,233.012 1770.57,232.695 1771.14,234.533 1771.71,236.288 1772.28,234.856 1772.85,234.635 1773.41,234.181 1773.98,230.723 1774.55,230.703 1775.12,232.843 1775.69,231.629 1776.26,228.605 1776.82,228.487 1777.39,229.63 1777.96,229.743 1778.53,229.786 1779.1,231.856 1779.67,230.817 1780.23,232.003 1780.8,231.947 1781.37,232.876 1781.94,231.756 1782.51,233.737 1783.08,234.175 1783.64,232.747 1784.21,232.903 1784.78,235.79 1785.35,236.587 1785.92,237.05 1786.49,237.405 1787.05,237.81 1787.62,237.346 1788.19,236.597 1788.76,239.036 1789.33,238.411 1789.9,239.604 1790.46,238.704 1791.03,238.868 1791.6,238.879 1792.17,239.185 1792.74,238.351 1793.31,238.737 1793.87,237.005 1794.44,235.358 1795.01,232.665 1795.58,232.327 1796.15,234.002 1796.72,233.566 1797.28,234.095 1797.85,229.468 1798.42,228.446 1798.99,228.214 1799.56,227.129 1800.13,227.081 1800.69,227.24 1801.26,228.167 1801.83,226.993 1802.4,229.177 1802.97,230.207 1803.54,229.028 1804.1,227.86 1804.67,227.685 1805.24,226.517 1805.81,225.555 1806.38,225.818 1806.95,225.767 1807.51,225.87 1808.08,226.168 1808.65,227.142 1809.22,229.343 1809.79,229.384 1810.36,230.321 1810.92,229.092 1811.49,229.957 1812.06,227.946 1812.63,226.88 1813.2,227.026 1813.77,229.112 1814.33,226.915 1814.9,227.185 1815.47,227.255 1816.04,228.553 1816.61,228.543 1817.18,225.434 1817.74,226.523 1818.31,224.631 1818.88,225.991 1819.45,226.251 1820.02,224.424 1820.59,220.362 1821.15,219.895 1821.72,219.968 1822.29,221.837 1822.86,222.286 1823.43,224.068 1824,222.467 1824.56,222.887 1825.13,224.458 1825.7,223.797 1826.27,226.108 1826.84,227.744 1827.41,231.088 1827.97,229.297 1828.54,229.652 1829.11,228.601 1829.68,229.931 1830.25,229.293 1830.82,230.537 1831.39,229.681 1831.95,230.863 1832.52,230.908 1833.09,229.013 1833.66,231.311 1834.23,230.387 1834.8,229.76 1835.36,228.758 1835.93,227.03 1836.5,225.409 1837.07,225.667 1837.64,225.046 1838.21,224.632 1838.77,223.055 1839.34,224.84 1839.91,225.255 1840.48,223.768 1841.05,224.768 1841.62,225.485 1842.18,224.862 1842.75,223.405 1843.32,222.907 1843.89,224.654 1844.46,225.404 1845.03,225.975 1845.59,226.548 1846.16,226.099 1846.73,226.6 1847.3,224.915 1847.87,224.575 1848.44,222.311 1849,222.09 1849.57,224.212 1850.14,224.851 1850.71,226.544 1851.28,229.071 1851.85,229.381 1852.41,229.62 1852.98,230.185 1853.55,235.458 1854.12,236.403 1854.69,236.137 1855.26,239.208 1855.82,240.973 1856.39,241.506 1856.96,242.887 1857.53,244.252 1858.1,244.587 1858.67,243.622 1859.23,241.832 1859.8,242.163 1860.37,241.3 1860.94,241.657 1861.51,241.029 1862.08,239.31 1862.64,237.948 1863.21,236.519 1863.78,236.168 1864.35,235.82 1864.92,233.419 1865.49,237.384 1866.05,236.927 1866.62,233.258 1867.19,231.084 1867.76,230.998 1868.33,230.796 1868.9,231.818 1869.46,231.635 1870.03,232.552 1870.6,232.29 1871.17,231.189 1871.74,228.972 1872.31,230.023 1872.87,229.087 1873.44,229.18 1874.01,230.133 1874.58,230.062 1875.15,229.252 1875.72,227.468 1876.28,226.599 1876.85,223.714 1877.42,225.34 1877.99,224.546 1878.56,222.855 1879.13,221.44 1879.69,222.235 1880.26,225.985 1880.83,225.417 1881.4,226.91 1881.97,226.269 1882.54,224.721 1883.1,226.328 1883.67,228.916 1884.24,228.232 1884.81,231.574 1885.38,230.779 1885.95,229.87 1886.51,230.072 1887.08,230.131 1887.65,231.208 1888.22,230.234 1888.79,232.275 1889.36,233.473 1889.92,230.286 1890.49,231.217 1891.06,231.518 1891.63,229.583 1892.2,229.747 1892.77,230.981 1893.33,228.934 1893.9,229.982 1894.47,231.205 1895.04,232.307 1895.61,232.263 1896.18,232.016 1896.74,233.117 1897.31,233.019 1897.88,232.927 1898.45,232.817 1899.02,233.719 1899.59,233.44 1900.16,234.263 1900.72,234.057 1901.29,233.994 1901.86,233.966 1902.43,233.794 1903,233.699 1903.57,232.351 1904.13,231.472 1904.7,231.549 1905.27,230.754 1905.84,230.954 1906.41,229.901 1906.98,229.03 1907.54,228.147 1908.11,229.28 1908.68,230.752 1909.25,229.739 1909.82,229.719 1910.39,230.778 1910.95,231.834 1911.52,231.688 1912.09,233.773 1912.66,234.768 1913.23,235.459 1913.8,235.087 1914.36,232.723 1914.93,232.496 1915.5,230.297 1916.07,231.465 1916.64,233.66 1917.21,235.551 1917.77,239.091 1918.34,236.563 1918.91,236.905 1919.48,235.364 1920.05,239.329 1920.62,236.567 1921.18,234.045 1921.75,233.79 1922.32,230.278 1922.89,230.51 1923.46,230.467 1924.03,227.441 1924.59,226.612 1925.16,227.108 1925.73,228.3 1926.3,231.453 1926.87,231.527 1927.44,232.686 1928,232.589 1928.57,233.573 1929.14,233.409 1929.71,232.275 1930.28,232.168 1930.85,232.104 1931.41,233.121 1931.98,232.887 1932.55,233.77 1933.12,232.298 1933.69,232.213 1934.26,231.233 1934.82,231.207 1935.39,230.001 1935.96,233.061 1936.53,232.845 1937.1,233.777 1937.67,235.648 1938.23,234.132 1938.8,235.931 1939.37,234.796 1939.94,234.639 1940.51,234.182 1941.08,232.73 1941.64,231.464 1942.21,230.33 1942.78,232.291 1943.35,233.225 1943.92,234.107 1944.49,232.702 1945.05,231.57 1945.62,231.162 1946.19,234.128 1946.76,233.888 1947.33,235.824 1947.9,235.58 1948.46,235.146 1949.03,235.58 1949.6,234.209 1950.17,232.001 1950.74,231.747 1951.31,231.414 1951.87,231.392 1952.44,233.342 1953.01,233.981 1953.58,233.662 1954.15,234.277 1954.72,233.937 1955.28,230.702 1955.85,230.4 1956.42,229.393 1956.99,230.39 1957.56,232.238 1958.13,232.914 1958.69,232.484 1959.26,231.112 1959.83,234.264 1960.4,231.588 1960.97,229.437 1961.54,229.459 1962.1,226.254 1962.67,227.502 1963.24,226.853 1963.81,227.887 1964.38,226.781 1964.95,227.751 1965.51,228.643 1966.08,226.995 1966.65,227.235 1967.22,227.729 1967.79,228.797 1968.36,224.88 1968.92,226.311 1969.49,225.435 1970.06,226.674 1970.63,228.82 1971.2,229.739 1971.77,228.766 1972.34,228.571 1972.9,228.465 1973.47,229.808 1974.04,231.7 1974.61,229.417 1975.18,228.766 1975.75,229.058 1976.31,228.14 1976.88,229.189 1977.45,230.388 1978.02,231.351 1978.59,231.234 1979.16,229.942 1979.72,227.851 1980.29,231.04 1980.86,232.097 1981.43,229.872 1982,229.9 1982.57,228.953 1983.13,229.92 1983.7,231.993 1984.27,227.632 1984.84,228.73 1985.41,229.828 1985.98,232.171 1986.54,230.949 1987.11,229.961 1987.68,230.894 1988.25,230.832 1988.82,230.683 1989.39,229.852 1989.95,229.789 1990.52,231.867 1991.09,233.188 1991.66,235.994 1992.23,237.567 1992.8,235.955 1993.36,232.663 1993.93,233.509 1994.5,232.364 1995.07,230.27 1995.64,230.425 1996.21,232.551 1996.77,234.414 1997.34,233.969 1997.91,234.449 1998.48,232.029 1999.05,231.857 1999.62,230.714 2000.18,230.558 2000.75,229.418 2001.32,231.452 2001.89,231.169 2002.46,231.054 2003.03,231.042 2003.59,232.138 2004.16,228.778 2004.73,227.876 2005.3,228.897 2005.87,228.996 2006.44,228.647 2007,226.711 2007.57,226.831 2008.14,225.935 2008.71,228.547 2009.28,229.703 2009.85,227.628 2010.41,229.549 2010.98,229.56 2011.55,230.514 2012.12,230.383 2012.69,230.683 2013.26,231.564 2013.82,231.344 2014.39,229.106 2014.96,228.281 2015.53,226.242 2016.1,228.699 2016.67,228.821 2017.23,229.235 2017.8,230.212 2018.37,227.289 2018.94,227.202 2019.51,227.347 2020.08,226.504 2020.64,227.805 2021.21,225.696 2021.78,227.141 2022.35,227.315 2022.92,225.63 2023.49,226.062 2024.05,225.297 2024.62,223.524 2025.19,224.044 2025.76,224.55 2026.33,224.973 2026.9,226.55 2027.46,227.912 2028.03,227.218 2028.6,227.716 2029.17,225.798 2029.74,226.154 2030.31,225.696 2030.87,223.214 2031.44,225.667 2032.01,226.178 2032.58,226.465 2033.15,226.879 2033.72,226.419 2034.28,226.691 2034.85,229.272 2035.42,230.538 2035.99,231.536 2036.56,231.451 2037.13,230.477 2037.69,230.709 2038.26,230.625 2038.83,230.671 2039.4,229.771 2039.97,227.14 2040.54,226.289 2041.11,226.662 2041.67,225.974 2042.24,226.517 2042.81,227.172 2043.38,229.622 2043.95,228.652 2044.52,228.897 2045.08,231.324 2045.65,233.336 2046.22,232.157 2046.79,233.359 2047.36,233.261 2047.93,229.101 2048.49,229.462 2049.06,230.749 2049.63,231.841 2050.2,228.631 2050.77,227.551 2051.34,228.851 2051.9,231.112 2052.47,232.194 2053.04,229.169 2053.61,230.166 2054.18,229.202 2054.75,232.6 2055.31,230.834 2055.88,232.025 2056.45,231 2057.02,233.179 2057.59,234.915 2058.16,232.739 2058.72,229.438 2059.29,230.909 2059.86,233.461 2060.43,233.491 2061,234.222 2061.57,233.386 2062.13,232.351 2062.7,234.396 2063.27,234.084 2063.84,232.847 2064.41,230.752 2064.98,233.879 2065.54,233.766 2066.11,233.773 2066.68,234.62 2067.25,232.644 2067.82,231.674 2068.39,230.857 2068.95,229.959 2069.52,232.247 2070.09,231.208 2070.66,231.288 2071.23,228.343 2071.8,228.534 2072.36,227.597 2072.93,225.976 2073.5,227.452 2074.07,222.617 2074.64,222.202 2075.21,222.875 2075.77,224.434 2076.34,225.104 2076.91,226.756 2077.48,229.358 2078.05,228.701 2078.62,228.811 2079.18,228.892 2079.75,232.464 2080.32,232.366 2080.89,229.525 2081.46,229.742 2082.03,230.091 2082.59,228.26 2083.16,229.543 2083.73,228.513 2084.3,230.001 2084.87,231.192 2085.44,232.438 2086,232.7 2086.57,233.883 2087.14,235.761 2087.71,235.274 2088.28,235.075 2088.85,232.727 2089.41,232.796 2089.98,230.536 2090.55,231.777 2091.12,233.775 2091.69,233.678 2092.26,232.635 2092.82,231.701 2093.39,233.724 2093.96,232.429 2094.53,231.198 2095.1,230.292 2095.67,230.423 2096.23,231.677 2096.8,229.673 2097.37,229.754 2097.94,227.79 2098.51,227.906 2099.08,227.33 2099.64,229.595 2100.21,228.955 2100.78,229.079 2101.35,231.311 2101.92,231.391 2102.49,231.514 2103.05,231.477 2103.62,232.644 2104.19,231.811 2104.76,232.797 2105.33,229.432 2105.9,229.7 2106.46,231.764 2107.03,233.78 2107.6,233.679 2108.17,235.65 2108.74,236.588 2109.31,236.495 2109.87,236.913 2110.44,236.459 2111.01,236.242 2111.58,236.684 2112.15,236.152 2112.72,237.038 2113.29,239.801 2113.85,240.478 2114.42,240.94 2114.99,240.164 2115.56,239.442 2116.13,238.781 2116.7,235.129 2117.26,235.908 2117.83,236.466 2118.4,233.95 2118.97,231.677 2119.54,231.608 2120.11,231.53 2120.67,232.259 2121.24,233.265 2121.81,234.154 2122.38,235.757 2122.95,235.213 2123.52,234.651 2124.08,236.245 2124.65,236.616 2125.22,234.849 2125.79,234.542 2126.36,234.387 2126.93,237.079 2127.49,236.359 2128.06,233.857 2128.63,232.519 2129.2,231.2 2129.77,232.153 2130.34,229.782 2130.9,231.676 2131.47,229.371 2132.04,230.212 2132.61,229.147 2133.18,229.977 2133.75,229.944 2134.31,229.794 2134.88,228.71 2135.45,229.945 2136.02,229.774 2136.59,229.614 2137.16,230.578 2137.72,230.147 2138.29,228.97 2138.86,228.858 2139.43,228.898 2140,230.802 2140.57,231.675 2141.13,233.648 2141.7,233.36 2142.27,231.902 2142.84,230.589 2143.41,229.295 2143.98,230.236 2144.54,230.187 2145.11,234.226 2145.68,232.705 2146.25,233.313 2146.82,233.967 2147.39,233.659 2147.95,232.173 2148.52,229.714 2149.09,229.851 2149.66,226.503 2150.23,224.67 2150.8,224.174 2151.36,225.471 2151.93,225.445 2152.5,225.865 2153.07,226.148 2153.64,227.536 2154.21,229.589 2154.77,231.446 2155.34,231.422 2155.91,229.133 2156.48,228.342 2157.05,227.307 2157.62,228.799 2158.18,228.74 2158.75,225.784 2159.32,223.751 2159.89,224.021 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.026\n  with uncertainty of ± 0.002315246269622024\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01415 ± (0.00186957, 0.00169575) (MC)\n  95% confidence interval: [-4.01756, -4.01067] (MC)\n  linear error propagation: -4.01413 ± 0.00180838\n  |δ_y| = |0.00184467| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014148279821399, val_l = 0.003413694243317167, val_u = 0.0034795057675580665)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.55 2211.02,1152.55 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1006.98 2211.02,1006.98 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,861.416 2211.02,861.416 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,715.848 2211.02,715.848 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,570.28 2211.02,570.28 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,424.712 2211.02,424.712 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,279.144 2211.02,279.144 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.55 365.751,1152.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1006.98 365.751,1006.98 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,861.416 365.751,861.416 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,715.848 365.751,715.848 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,570.28 365.751,570.28 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,424.712 365.751,424.712 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,279.144 365.751,279.144 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M298.909 1138.35 Q295.298 1138.35 293.469 1141.92 Q291.664 1145.46 291.664 1152.59 Q291.664 1159.69 293.469 1163.26 Q295.298 1166.8 298.909 1166.8 Q302.543 1166.8 304.349 1163.26 Q306.177 1159.69 306.177 1152.59 Q306.177 1145.46 304.349 1141.92 Q302.543 1138.35 298.909 1138.35 M298.909 1134.65 Q304.719 1134.65 307.775 1139.25 Q310.853 1143.84 310.853 1152.59 Q310.853 1161.31 307.775 1165.92 Q304.719 1170.5 298.909 1170.5 Q293.099 1170.5 290.02 1165.92 Q286.964 1161.31 286.964 1152.59 Q286.964 1143.84 290.02 1139.25 Q293.099 1134.65 298.909 1134.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M259.557 1020.33 L267.196 1020.33 L267.196 993.964 L258.886 995.631 L258.886 991.371 L267.15 989.705 L271.826 989.705 L271.826 1020.33 L279.465 1020.33 L279.465 1024.26 L259.557 1024.26 L259.557 1020.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 992.783 Q295.298 992.783 293.469 996.348 Q291.664 999.89 291.664 1007.02 Q291.664 1014.13 293.469 1017.69 Q295.298 1021.23 298.909 1021.23 Q302.543 1021.23 304.349 1017.69 Q306.177 1014.13 306.177 1007.02 Q306.177 999.89 304.349 996.348 Q302.543 992.783 298.909 992.783 M298.909 989.08 Q304.719 989.08 307.775 993.686 Q310.853 998.269 310.853 1007.02 Q310.853 1015.75 307.775 1020.35 Q304.719 1024.94 298.909 1024.94 Q293.099 1024.94 290.02 1020.35 Q286.964 1015.75 286.964 1007.02 Q286.964 998.269 290.02 993.686 Q293.099 989.08 298.909 989.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M262.775 874.761 L279.094 874.761 L279.094 878.696 L257.15 878.696 L257.15 874.761 Q259.812 872.007 264.395 867.377 Q269.002 862.724 270.182 861.382 Q272.428 858.859 273.307 857.122 Q274.21 855.363 274.21 853.673 Q274.21 850.919 272.266 849.183 Q270.344 847.447 267.242 847.447 Q265.043 847.447 262.59 848.21 Q260.159 848.974 257.381 850.525 L257.381 845.803 Q260.205 844.669 262.659 844.09 Q265.113 843.511 267.15 843.511 Q272.52 843.511 275.715 846.197 Q278.909 848.882 278.909 853.372 Q278.909 855.502 278.099 857.423 Q277.312 859.322 275.205 861.914 Q274.627 862.585 271.525 865.803 Q268.423 868.997 262.775 874.761 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 847.215 Q295.298 847.215 293.469 850.78 Q291.664 854.322 291.664 861.451 Q291.664 868.558 293.469 872.122 Q295.298 875.664 298.909 875.664 Q302.543 875.664 304.349 872.122 Q306.177 868.558 306.177 861.451 Q306.177 854.322 304.349 850.78 Q302.543 847.215 298.909 847.215 M298.909 843.511 Q304.719 843.511 307.775 848.118 Q310.853 852.701 310.853 861.451 Q310.853 870.178 307.775 874.784 Q304.719 879.368 298.909 879.368 Q293.099 879.368 290.02 874.784 Q286.964 870.178 286.964 861.451 Q286.964 852.701 290.02 848.118 Q293.099 843.511 298.909 843.511 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M272.914 714.494 Q276.27 715.212 278.145 717.48 Q280.043 719.749 280.043 723.082 Q280.043 728.198 276.525 730.999 Q273.006 733.8 266.525 733.8 Q264.349 733.8 262.034 733.36 Q259.742 732.943 257.289 732.087 L257.289 727.573 Q259.233 728.707 261.548 729.286 Q263.863 729.864 266.386 729.864 Q270.784 729.864 273.076 728.128 Q275.39 726.392 275.39 723.082 Q275.39 720.026 273.238 718.314 Q271.108 716.577 267.289 716.577 L263.261 716.577 L263.261 712.735 L267.474 712.735 Q270.923 712.735 272.752 711.369 Q274.58 709.98 274.58 707.388 Q274.58 704.726 272.682 703.314 Q270.807 701.878 267.289 701.878 Q265.367 701.878 263.168 702.295 Q260.969 702.712 258.33 703.591 L258.33 699.425 Q260.992 698.684 263.307 698.314 Q265.645 697.943 267.705 697.943 Q273.029 697.943 276.131 700.374 Q279.233 702.781 279.233 706.902 Q279.233 709.772 277.59 711.763 Q275.946 713.73 272.914 714.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 701.647 Q295.298 701.647 293.469 705.212 Q291.664 708.753 291.664 715.883 Q291.664 722.989 293.469 726.554 Q295.298 730.096 298.909 730.096 Q302.543 730.096 304.349 726.554 Q306.177 722.989 306.177 715.883 Q306.177 708.753 304.349 705.212 Q302.543 701.647 298.909 701.647 M298.909 697.943 Q304.719 697.943 307.775 702.55 Q310.853 707.133 310.853 715.883 Q310.853 724.61 307.775 729.216 Q304.719 733.8 298.909 733.8 Q293.099 733.8 290.02 729.216 Q286.964 724.61 286.964 715.883 Q286.964 707.133 290.02 702.55 Q293.099 697.943 298.909 697.943 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M271.594 557.074 L259.789 575.523 L271.594 575.523 L271.594 557.074 M270.367 553 L276.247 553 L276.247 575.523 L281.177 575.523 L281.177 579.412 L276.247 579.412 L276.247 587.56 L271.594 587.56 L271.594 579.412 L255.992 579.412 L255.992 574.898 L270.367 553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 556.079 Q295.298 556.079 293.469 559.644 Q291.664 563.185 291.664 570.315 Q291.664 577.421 293.469 580.986 Q295.298 584.528 298.909 584.528 Q302.543 584.528 304.349 580.986 Q306.177 577.421 306.177 570.315 Q306.177 563.185 304.349 559.644 Q302.543 556.079 298.909 556.079 M298.909 552.375 Q304.719 552.375 307.775 556.982 Q310.853 561.565 310.853 570.315 Q310.853 579.042 307.775 583.648 Q304.719 588.231 298.909 588.231 Q293.099 588.231 290.02 583.648 Q286.964 579.042 286.964 570.315 Q286.964 561.565 290.02 556.982 Q293.099 552.375 298.909 552.375 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M258.793 407.432 L277.15 407.432 L277.15 411.367 L263.076 411.367 L263.076 419.839 Q264.094 419.492 265.113 419.33 Q266.131 419.145 267.15 419.145 Q272.937 419.145 276.316 422.316 Q279.696 425.487 279.696 430.904 Q279.696 436.483 276.224 439.584 Q272.752 442.663 266.432 442.663 Q264.256 442.663 261.988 442.293 Q259.742 441.922 257.335 441.182 L257.335 436.483 Q259.418 437.617 261.641 438.172 Q263.863 438.728 266.34 438.728 Q270.344 438.728 272.682 436.622 Q275.02 434.515 275.02 430.904 Q275.02 427.293 272.682 425.186 Q270.344 423.08 266.34 423.08 Q264.465 423.08 262.59 423.497 Q260.738 423.913 258.793 424.793 L258.793 407.432 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 410.511 Q295.298 410.511 293.469 414.075 Q291.664 417.617 291.664 424.747 Q291.664 431.853 293.469 435.418 Q295.298 438.959 298.909 438.959 Q302.543 438.959 304.349 435.418 Q306.177 431.853 306.177 424.747 Q306.177 417.617 304.349 414.075 Q302.543 410.511 298.909 410.511 M298.909 406.807 Q304.719 406.807 307.775 411.413 Q310.853 415.997 310.853 424.747 Q310.853 433.473 307.775 438.08 Q304.719 442.663 298.909 442.663 Q293.099 442.663 290.02 438.08 Q286.964 433.473 286.964 424.747 Q286.964 415.997 290.02 411.413 Q293.099 406.807 298.909 406.807 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M269.326 277.28 Q266.178 277.28 264.326 279.433 Q262.497 281.586 262.497 285.336 Q262.497 289.063 264.326 291.239 Q266.178 293.391 269.326 293.391 Q272.474 293.391 274.303 291.239 Q276.154 289.063 276.154 285.336 Q276.154 281.586 274.303 279.433 Q272.474 277.28 269.326 277.28 M278.608 262.628 L278.608 266.887 Q276.849 266.053 275.043 265.614 Q273.261 265.174 271.502 265.174 Q266.872 265.174 264.418 268.299 Q261.988 271.424 261.641 277.743 Q263.006 275.729 265.066 274.665 Q267.127 273.577 269.603 273.577 Q274.812 273.577 277.821 276.748 Q280.853 279.896 280.853 285.336 Q280.853 290.66 277.705 293.877 Q274.557 297.095 269.326 297.095 Q263.33 297.095 260.159 292.512 Q256.988 287.905 256.988 279.178 Q256.988 270.984 260.877 266.123 Q264.766 261.239 271.316 261.239 Q273.076 261.239 274.858 261.586 Q276.664 261.933 278.608 262.628 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M298.909 264.942 Q295.298 264.942 293.469 268.507 Q291.664 272.049 291.664 279.178 Q291.664 286.285 293.469 289.85 Q295.298 293.391 298.909 293.391 Q302.543 293.391 304.349 289.85 Q306.177 286.285 306.177 279.178 Q306.177 272.049 304.349 268.507 Q302.543 264.942 298.909 264.942 M298.909 261.239 Q304.719 261.239 307.775 265.845 Q310.853 270.428 310.853 279.178 Q310.853 287.905 307.775 292.512 Q304.719 297.095 298.909 297.095 Q293.099 297.095 290.02 292.512 Q286.964 287.905 286.964 279.178 Q286.964 270.428 290.02 265.845 Q293.099 261.239 298.909 261.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1045.29 400.199,946.756 400.786,856.344 401.372,882.324 401.958,801.207 402.545,727.008 403.131,659.272 403.718,595.801 404.304,538.098 404.891,487.258 405.477,521.128 406.063,474.263 406.65,432.051 407.236,394.189 407.823,361.199 408.409,331.161 408.995,304.682 409.582,281.529 410.168,261.482 410.755,245.768 411.341,231.948 411.927,219.895 412.514,251.041 413.1,243.71 413.687,270.699 414.273,296.881 414.86,290.801 415.446,340.443 416.032,337.418 416.619,335.298 417.205,378.384 417.792,379.107 418.378,380.955 418.964,419.282 419.551,422.663 420.137,426.514 420.724,431.861 421.31,437.341 421.896,456.511 422.483,462.458 423.069,480.562 423.656,488.385 424.242,507.09 424.829,514.647 425.415,523.203 426.001,532.405 426.588,550.454 427.174,568.74 427.761,601.419 428.347,609.905 428.933,632.523 429.52,647.48 430.106,668.073 430.693,675.593 431.279,683.486 431.865,697.77 432.452,722.955 433.038,731.806 433.625,749.378 434.211,770.814 434.798,783.413 435.384,791.044 435.97,806.636 436.557,813.787 437.143,820.841 437.73,835.335 438.316,846.192 438.902,856.725 439.489,863.232 440.075,879.854 440.662,895.806 441.248,913.717 441.835,925.1 442.421,930.299 443.007,938.713 443.594,949.281 444.18,959.641 444.767,972.58 445.353,982.359 445.939,988.951 446.526,993.184 447.112,999.88 447.699,1001.93 448.285,1010.75 448.871,1014.63 449.458,1021 450.044,1029.2 450.631,1037.25 451.217,1043.28 451.804,1051.08 452.39,1056.64 452.976,1060.03 453.563,1067.48 454.149,1076.69 454.736,1081.68 455.322,1088.12 455.908,1091.06 456.495,1099.53 457.081,1107.96 457.668,1114.14 458.254,1118.2 458.84,1122.29 459.427,1122.47 460.013,1122.85 460.6,1130.43 461.186,1136.13 461.773,1143.31 462.359,1150.19 462.945,1151.57 463.532,1153.37 464.118,1158.11 464.705,1162.51 465.291,1166.94 465.877,1169.78 466.464,1175.51 467.05,1177.6 467.637,1175.58 468.223,1176.79 468.809,1179.33 469.396,1178.89 469.982,1181.59 470.569,1185.63 471.155,1184.7 471.742,1185.67 472.328,1189.34 472.914,1193.36 473.501,1195.5 474.087,1197.64 474.674,1201.33 475.26,1206.07 475.846,1206.28 476.433,1210.76 477.019,1212.58 477.606,1215.5 478.192,1215.45 478.778,1215.65 479.365,1215.82 479.951,1215.83 480.538,1216.12 481.124,1217.09 481.711,1217.39 482.297,1217.95 482.883,1222.23 483.47,1224.56 484.056,1228.62 484.643,1229.68 485.229,1230.84 485.815,1230.52 486.402,1230.5 486.988,1234.24 487.575,1233.76 488.161,1233.3 488.748,1234.13 489.334,1235.01 489.92,1234.83 490.507,1237.05 491.093,1240.06 491.68,1240.83 492.266,1242.75 492.852,1244.61 493.439,1244.96 494.025,1244.26 494.612,1244.95 495.198,1242.8 495.784,1244.45 496.371,1243.8 496.957,1239.23 497.544,1238.68 498.13,1237.13 498.717,1238 499.303,1237.51 499.889,1239.63 500.476,1239.07 501.062,1237.5 501.649,1237.15 502.235,1238.25 502.821,1239.04 503.408,1238.75 503.994,1237.13 504.581,1238.2 505.167,1237.88 505.753,1235.26 506.34,1237.52 506.926,1236.97 507.513,1237.83 508.099,1238.7 508.686,1238.41 509.272,1239.52 509.858,1241.52 510.445,1242.12 511.031,1241.44 511.618,1241.01 512.204,1245.47 512.79,1246.2 513.377,1246.7 513.963,1247.12 514.55,1243.68 515.136,1246.65 515.722,1244.63 516.309,1244.18 516.895,1248.57 517.482,1247.61 518.068,1249.21 518.655,1250.53 519.241,1249.74 519.827,1248.72 520.414,1246.54 521,1245.67 521.587,1246.14 522.173,1245.49 522.759,1245.83 523.346,1243.75 523.932,1245.46 524.519,1244.84 525.105,1241.74 525.691,1240.02 526.278,1240.51 526.864,1241.05 527.451,1242.76 528.037,1242.04 528.624,1241.28 529.21,1238.37 529.796,1241.68 530.383,1244.72 530.969,1244 531.556,1243.49 532.142,1244.08 532.728,1241.03 533.315,1241.36 533.901,1239.64 534.488,1239.26 535.074,1241.17 535.661,1239.44 536.247,1239.04 536.833,1237.19 537.42,1236.64 538.006,1233.84 538.593,1236.06 539.179,1236.76 539.765,1236.44 540.352,1237.22 540.938,1235.6 541.525,1236.49 542.111,1240.03 542.697,1240.47 543.284,1240.81 543.87,1240.04 544.457,1241.99 545.043,1242.32 545.63,1242.94 546.216,1243.38 546.802,1243.39 547.389,1242.62 547.975,1240.72 548.562,1241.23 549.148,1239.4 549.734,1238.56 550.321,1237.89 550.907,1237.39 551.494,1234.24 552.08,1230.14 552.666,1229.86 553.253,1234.52 553.839,1234.35 554.426,1236.45 555.012,1234.86 555.599,1235.62 556.185,1233.82 556.771,1235.94 557.358,1235.3 557.944,1238.35 558.531,1235.25 559.117,1235.79 559.703,1236.69 560.29,1238.65 560.876,1239.06 561.463,1240.35 562.049,1239.85 562.635,1238.19 563.222,1237.67 563.808,1238.15 564.395,1237.76 564.981,1236.82 565.568,1232.65 566.154,1232.27 566.74,1232.06 567.327,1232.5 567.913,1232.11 568.5,1229.14 569.086,1228.86 569.672,1227.69 570.259,1228.62 570.845,1229.64 571.432,1228.45 572.018,1229.39 572.605,1230.45 573.191,1228.79 573.777,1229.95 574.364,1230.57 574.95,1228.77 575.537,1227.72 576.123,1230.04 576.709,1227.22 577.296,1228.47 577.882,1228.36 578.469,1227.98 579.055,1230.26 579.641,1229.71 580.228,1229.51 580.814,1225.71 581.401,1226.71 581.987,1226.62 582.574,1223.95 583.16,1224.98 583.746,1223.63 584.333,1223.51 584.919,1223.5 585.506,1224.67 586.092,1225.68 586.678,1228.04 587.265,1226.49 587.851,1228.78 588.438,1229.69 589.024,1230.83 589.61,1231.96 590.197,1232.75 590.783,1229.72 591.37,1230.43 591.956,1230.23 592.543,1228.72 593.129,1229.62 593.715,1232.88 594.302,1232.51 594.888,1233.18 595.475,1232.62 596.061,1231.89 596.647,1231.49 597.234,1232.32 597.82,1233.02 598.407,1233.64 598.993,1233.18 599.579,1230.28 600.166,1228.66 600.752,1228.76 601.339,1227.15 601.925,1225.43 602.512,1226.52 603.098,1228.71 603.684,1225.76 604.271,1226.72 604.857,1225.31 605.444,1221.62 606.03,1221.6 606.616,1220.44 607.203,1222.91 607.789,1223 608.376,1222.98 608.962,1224.02 609.548,1225.1 610.135,1227.45 610.721,1225.9 611.308,1225.74 611.894,1226.74 612.481,1228.73 613.067,1227.1 613.653,1225.46 614.24,1225.18 614.826,1226.22 615.413,1227.21 615.999,1226.9 616.585,1225.51 617.172,1225.15 617.758,1227.3 618.345,1226.79 618.931,1227.56 619.518,1228.2 620.104,1229 620.69,1227.38 621.277,1227.33 621.863,1231.74 622.45,1229.84 623.036,1225.55 623.622,1227.64 624.209,1228.52 624.795,1224.29 625.382,1224.93 625.968,1222.28 626.554,1223.33 627.141,1222.07 627.727,1222.05 628.314,1219.8 628.9,1223.4 629.487,1222.15 630.073,1221.99 630.659,1218.24 631.246,1219.64 631.832,1219.6 632.419,1217.46 633.005,1221.08 633.591,1219.93 634.178,1221.05 634.764,1219.79 635.351,1219.74 635.937,1220.77 636.523,1221.74 637.11,1220.43 637.696,1219.03 638.283,1221.52 638.869,1216.9 639.456,1218.14 640.042,1219.46 640.628,1221.74 641.215,1221.91 641.801,1223.97 642.388,1224.98 642.974,1222.42 643.56,1222.42 644.147,1219.82 644.733,1218.56 645.32,1219.56 645.906,1224.32 646.492,1223.83 647.079,1224.71 647.665,1225.5 648.252,1221.09 648.838,1220.87 649.425,1219.33 650.011,1217.99 650.597,1217.87 651.184,1214.05 651.77,1211.88 652.357,1212.27 652.943,1211.42 653.529,1212.93 654.116,1215.31 654.702,1213.94 655.289,1215.41 655.875,1214.37 656.462,1217.07 657.048,1215.77 657.634,1217.14 658.221,1217.17 658.807,1217 659.394,1215.87 659.98,1214.68 660.566,1216 661.153,1217.29 661.739,1217.5 662.326,1217.58 662.912,1217.59 663.498,1220.16 664.085,1219.99 664.671,1219.7 665.258,1219.76 665.844,1220.72 666.431,1222.06 667.017,1221.98 667.603,1225.25 668.19,1224.65 668.776,1225.19 669.363,1225.98 669.949,1226.76 670.535,1225.07 671.122,1225.92 671.708,1224.34 672.295,1224.12 672.881,1221.52 673.467,1222.51 674.054,1222.42 674.64,1224.54 675.227,1225.4 675.813,1225.96 676.4,1225.45 676.986,1227.38 677.572,1226.83 678.159,1226.36 678.745,1227.29 679.332,1226.56 679.918,1224.82 680.504,1223.14 681.091,1224.3 681.677,1225.28 682.264,1223.87 682.85,1224.79 683.436,1225.44 684.023,1224.96 684.609,1225.51 685.196,1226.31 685.782,1225.81 686.369,1224.14 686.955,1222.48 687.541,1223.54 688.128,1222.04 688.714,1224.09 689.301,1223.77 689.887,1224.77 690.473,1222.89 691.06,1222.55 691.646,1224.69 692.233,1225.6 692.819,1224.98 693.405,1220.61 693.992,1215.64 694.578,1213.31 695.165,1212.19 695.751,1213.51 696.338,1213.72 696.924,1212.73 697.51,1211.65 698.097,1210.77 698.683,1211.13 699.27,1212.59 699.856,1214 700.442,1215.48 701.029,1214.35 701.615,1214.34 702.202,1213.39 702.788,1218.3 703.375,1218.07 703.961,1217.86 704.547,1219.96 705.134,1221.16 705.72,1219.74 706.307,1221.88 706.893,1219.15 707.479,1219.23 708.066,1217.92 708.652,1220.48 709.239,1220.37 709.825,1219.26 710.411,1219.05 710.998,1217.47 711.584,1216.09 712.171,1216 712.757,1216.25 713.344,1214.07 713.93,1216.79 714.516,1217.95 715.103,1217.79 715.689,1217.67 716.276,1216.24 716.862,1217.42 717.448,1217.25 718.035,1216.89 718.621,1216.74 719.208,1213 719.794,1213.06 720.38,1214.6 720.967,1214.8 721.553,1217.29 722.14,1214.8 722.726,1215 723.313,1212.5 723.899,1215.14 724.485,1211.5 725.072,1211.81 725.658,1213.24 726.245,1213.48 726.831,1214.73 727.417,1214.89 728.004,1216.17 728.59,1214.98 729.177,1215.32 729.763,1214 730.349,1210.82 730.936,1213.57 731.522,1212.45 732.109,1215 732.695,1214.99 733.282,1215.09 733.868,1215.17 734.454,1215.33 735.041,1215.45 735.627,1215.54 736.214,1214.3 736.8,1213.35 737.386,1214.61 737.973,1214.95 738.559,1217.53 739.146,1216.21 739.732,1216.15 740.318,1217.3 740.905,1216.06 741.491,1218.37 742.078,1215.89 742.664,1218.22 743.251,1218.1 743.837,1220.36 744.423,1216.63 745.01,1218.92 745.596,1220 746.183,1219.71 746.769,1219.43 747.355,1219.16 747.942,1217.95 748.528,1216.62 749.115,1215.19 749.701,1211.74 750.288,1212.05 750.874,1213.55 751.46,1213.54 752.047,1214.75 752.633,1214.76 753.22,1215.93 753.806,1215.91 754.392,1215.81 754.979,1218.03 755.565,1218.96 756.152,1218.72 756.738,1218.46 757.324,1218.3 757.911,1219.45 758.497,1219.26 759.084,1220.23 759.67,1219.76 760.257,1220.54 760.843,1220.3 761.429,1217.67 762.016,1218.55 762.602,1217.29 763.189,1215.73 763.775,1216.99 764.361,1217.12 764.948,1218.32 765.534,1216.92 766.121,1218.13 766.707,1217.96 767.293,1218.96 767.88,1217.6 768.466,1220.87 769.053,1218.1 769.639,1217.94 770.226,1216.45 770.812,1218.68 771.398,1218.57 771.985,1219.41 772.571,1220.21 773.158,1219.71 773.744,1218.18 774.33,1216.88 774.917,1216.82 775.503,1218.93 776.09,1217.37 776.676,1217.35 777.262,1216.03 777.849,1218.29 778.435,1217.11 779.022,1215.52 779.608,1216.52 780.195,1217.41 780.781,1214.94 781.367,1215.04 781.954,1216.19 782.54,1212.64 783.127,1212.69 783.713,1212.89 784.299,1214.33 784.886,1216.57 785.472,1215.19 786.059,1215.22 786.645,1216.61 787.232,1216.36 787.818,1215.07 788.404,1212.49 788.991,1213.86 789.577,1213.65 790.164,1216.03 790.75,1215.88 791.336,1216.93 791.923,1215.53 792.509,1215.49 793.096,1214.16 793.682,1212.93 794.268,1211.74 794.855,1211.8 795.441,1210.54 796.028,1210.97 796.614,1210.89 797.201,1208.88 797.787,1214.01 798.373,1211.81 798.96,1210.81 799.546,1213.31 800.133,1214.62 800.719,1214.49 801.305,1216.68 801.892,1215.17 802.478,1212.98 803.065,1216.47 803.651,1213.77 804.237,1212.61 804.824,1213.86 805.41,1211.71 805.997,1210.82 806.583,1210.87 807.17,1209.81 807.756,1207.48 808.342,1204.25 808.929,1205.78 809.515,1207.27 810.102,1209.97 810.688,1210.2 811.274,1210.18 811.861,1211.48 812.447,1215.37 813.034,1214.36 813.62,1215.6 814.206,1218.03 814.793,1218.97 815.379,1217.61 815.966,1218.29 816.552,1220.24 817.139,1217.32 817.725,1214.88 818.311,1213.83 818.898,1211.47 819.484,1211.72 820.071,1211.96 820.657,1212.15 821.243,1213.25 821.83,1212.98 822.416,1213.07 823.003,1214.26 823.589,1216.42 824.175,1217.54 824.762,1217.26 825.348,1218.14 825.935,1219.05 826.521,1221.08 827.108,1221.53 827.694,1219.83 828.28,1220.33 828.867,1221.19 829.453,1220.69 830.04,1220.38 830.626,1217.49 831.212,1215.88 831.799,1217.03 832.385,1215.83 832.972,1217.01 833.558,1219.26 834.145,1217.63 834.731,1219.78 835.317,1219.47 835.904,1218.01 836.49,1213.13 837.077,1213.11 837.663,1211.9 838.249,1209.71 838.836,1211.29 839.422,1210.11 840.009,1210.24 840.595,1211.6 841.181,1211.8 841.768,1211.88 842.354,1214.31 842.941,1208.66 843.527,1211.42 844.114,1207.61 844.7,1208.03 845.286,1210.72 845.873,1212.14 846.459,1209.8 847.046,1207.59 847.632,1208.9 848.218,1211.42 848.805,1211.57 849.391,1212.8 849.978,1215.17 850.564,1216.15 851.15,1216.09 851.737,1217.24 852.323,1218.13 852.91,1215.42 853.496,1212.78 854.083,1213.92 854.669,1213.93 855.255,1215.18 855.842,1216.22 856.428,1216.33 857.015,1214.86 857.601,1214.69 858.187,1215.57 858.774,1216.57 859.36,1218.38 859.947,1219.06 860.533,1218.53 861.119,1218.21 861.706,1216.86 862.292,1217.83 862.879,1218.53 863.465,1219.83 864.052,1218.06 864.638,1216.48 865.224,1216.27 865.811,1213.68 866.397,1214.85 866.984,1214.9 867.57,1213.48 868.156,1213.25 868.743,1210.94 869.329,1209.78 869.916,1211.43 870.502,1211.48 871.089,1209.36 871.675,1206.24 872.261,1204.22 872.848,1204.91 873.434,1205.18 874.021,1206.9 874.607,1208.56 875.193,1207.75 875.78,1208.01 876.366,1206.88 876.953,1207.12 877.539,1206.28 878.125,1206.65 878.712,1205.69 879.298,1204.6 879.885,1205.19 880.471,1206.68 881.058,1208.41 881.644,1208.68 882.23,1208.95 882.817,1209.14 883.403,1206.76 883.99,1208.03 884.576,1208.11 885.162,1209.52 885.749,1210.85 886.335,1209.86 886.922,1209.09 887.508,1211.73 888.094,1214.2 888.681,1213.06 889.267,1212.08 889.854,1211.07 890.44,1209.75 891.027,1212.24 891.613,1213.6 892.199,1214.7 892.786,1214.38 893.372,1215.49 893.959,1213.96 894.545,1215.18 895.131,1213.9 895.718,1212.72 896.304,1212.59 896.891,1211.49 897.477,1212.65 898.063,1210.16 898.65,1212.81 899.236,1213.1 899.823,1211.95 900.409,1210.71 900.996,1211.9 901.582,1210.76 902.168,1214.38 902.755,1213.05 903.341,1212.01 903.928,1211.89 904.514,1212.13 905.1,1213.5 905.687,1214.57 906.273,1215.53 906.86,1216.63 907.446,1217.56 908.032,1218.35 908.619,1216.75 909.205,1219.76 909.792,1220.6 910.378,1220.13 910.965,1219.69 911.551,1220.39 912.137,1220.16 912.724,1219.6 913.31,1219.24 913.897,1218.87 914.483,1220.64 915.069,1221.54 915.656,1221.96 916.242,1220.16 916.829,1218.63 917.415,1215.91 918.002,1216.63 918.588,1216.58 919.174,1217.64 919.761,1217.66 920.347,1219.39 920.934,1216.76 921.52,1215.22 922.106,1214.95 922.693,1217.06 923.279,1214.16 923.866,1214.03 924.452,1214.01 925.038,1211.3 925.625,1207.67 926.211,1205.65 926.798,1200.08 927.384,1199.44 927.971,1200.19 928.557,1199.68 929.143,1200.37 929.73,1202.29 930.316,1204.1 930.903,1204.37 931.489,1203.67 932.075,1204.42 932.662,1207.2 933.248,1207.41 933.835,1207.59 934.421,1207.79 935.007,1208.21 935.594,1209.52 936.18,1209.77 936.767,1208.68 937.353,1209.04 937.94,1210.69 938.526,1213.03 939.112,1211.8 939.699,1210.62 940.285,1210.71 940.872,1210.77 941.458,1211.81 942.044,1211.62 942.631,1211.8 943.217,1211.87 943.804,1210.9 944.39,1212.06 944.976,1212.22 945.563,1212.14 946.149,1214.44 946.736,1216.56 947.322,1216.36 947.909,1214.71 948.495,1214.52 949.081,1215.26 949.668,1213.88 950.254,1212.63 950.841,1211.21 951.427,1213.88 952.013,1210.22 952.6,1210.38 953.186,1210.45 953.773,1210.45 954.359,1209.4 954.945,1209.78 955.532,1210.88 956.118,1210.84 956.705,1211.05 957.291,1212.43 957.878,1215.99 958.464,1216.91 959.05,1216.77 959.637,1214.18 960.223,1213.39 960.81,1212.16 961.396,1210.91 961.982,1210.98 962.569,1211.08 963.155,1213.5 963.742,1210.98 964.328,1210.98 964.915,1212.21 965.501,1213.64 966.087,1214.79 966.674,1214.53 967.26,1214.31 967.847,1214.32 968.433,1216.66 969.019,1216.6 969.606,1218.44 970.192,1216.93 970.779,1215.44 971.365,1212.76 971.951,1210.48 972.538,1211.69 973.124,1214.22 973.711,1215.35 974.297,1216.31 974.884,1214.79 975.47,1215.77 976.056,1217.64 976.643,1215.88 977.229,1215.64 977.816,1216.5 978.402,1215.17 978.988,1214.97 979.575,1213.59 980.161,1213.64 980.748,1211.19 981.334,1211.3 981.92,1211.33 982.507,1212.56 983.093,1213.9 983.68,1215.95 984.266,1216.94 984.853,1217.61 985.439,1218.47 986.025,1219.6 986.612,1215.74 987.198,1213.1 987.785,1210.8 988.371,1210.88 988.957,1209.73 989.544,1207.38 990.13,1207.76 990.717,1209.23 991.303,1208.11 991.889,1209.56 992.476,1210.57 993.062,1208.28 993.649,1208.5 994.235,1208.64 994.822,1207.53 995.408,1207.6 995.994,1206.36 996.581,1204.21 997.167,1206.98 997.754,1207.5 998.34,1207.74 998.926,1206.92 999.513,1207.02 1000.1,1208.32 1000.69,1207.25 1001.27,1207.25 1001.86,1203.93 1002.44,1205.41 1003.03,1206.11 1003.62,1206.6 1004.2,1205.69 1004.79,1205.75 1005.38,1205.83 1005.96,1206.29 1006.55,1209.24 1007.14,1210.63 1007.72,1211.94 1008.31,1211.84 1008.9,1211.71 1009.48,1211.73 1010.07,1210.52 1010.65,1210.81 1011.24,1212.18 1011.83,1213.48 1012.41,1209.77 1013,1211.17 1013.59,1211.35 1014.17,1210.26 1014.76,1210.61 1015.35,1211.95 1015.93,1210.85 1016.52,1210.86 1017.11,1210.84 1017.69,1209.75 1018.28,1212.15 1018.86,1212.06 1019.45,1212.02 1020.04,1213.18 1020.62,1212 1021.21,1211.82 1021.8,1212.65 1022.38,1213.79 1022.97,1214.81 1023.56,1213.28 1024.14,1214.07 1024.73,1212.78 1025.32,1212.7 1025.9,1212.36 1026.49,1212.26 1027.07,1211.19 1027.66,1213.6 1028.25,1213.5 1028.83,1212.19 1029.42,1212.23 1030.01,1209.71 1030.59,1208.56 1031.18,1208.74 1031.77,1210.16 1032.35,1210.25 1032.94,1210.39 1033.52,1210.6 1034.11,1210.51 1034.7,1209.41 1035.28,1210.68 1035.87,1211.81 1036.46,1215.41 1037.04,1215.1 1037.63,1216.16 1038.22,1217.05 1038.8,1215.53 1039.39,1215.44 1039.98,1215.5 1040.56,1216.3 1041.15,1216.25 1041.73,1214.71 1042.32,1216.87 1042.91,1214.24 1043.49,1212.87 1044.08,1214 1044.67,1214.93 1045.25,1214.89 1045.84,1212.46 1046.43,1213.53 1047.01,1212.44 1047.6,1210.93 1048.19,1211.99 1048.77,1211.88 1049.36,1211.73 1049.94,1210.51 1050.53,1206.84 1051.12,1208.42 1051.7,1212.13 1052.29,1213.3 1052.88,1213.32 1053.46,1215.55 1054.05,1217.4 1054.64,1218.16 1055.22,1218.67 1055.81,1217.12 1056.39,1215.87 1056.98,1215.72 1057.57,1215.38 1058.15,1216.36 1058.74,1218.54 1059.33,1221.85 1059.91,1222.56 1060.5,1218.52 1061.09,1220.7 1061.67,1220.28 1062.26,1219.77 1062.85,1220.45 1063.43,1220.02 1064.02,1219.54 1064.6,1219.06 1065.19,1218.56 1065.78,1215.87 1066.36,1215.63 1066.95,1215.27 1067.54,1213.81 1068.12,1214.92 1068.71,1214.81 1069.3,1212.35 1069.88,1211.16 1070.47,1212.26 1071.06,1212.29 1071.64,1211.3 1072.23,1211.38 1072.81,1209.21 1073.4,1209.57 1073.99,1209.77 1074.57,1211.21 1075.16,1211.16 1075.75,1212.43 1076.33,1213.41 1076.92,1210.87 1077.51,1210.92 1078.09,1210.89 1078.68,1209.91 1079.26,1208.68 1079.85,1209.05 1080.44,1208.03 1081.02,1204.59 1081.61,1202.28 1082.2,1202.74 1082.78,1202.04 1083.37,1201.36 1083.96,1202.14 1084.54,1201.41 1085.13,1201.88 1085.72,1202.52 1086.3,1203.25 1086.89,1203.74 1087.47,1203 1088.06,1203.28 1088.65,1202.8 1089.23,1204.37 1089.82,1206 1090.41,1207.52 1090.99,1206.72 1091.58,1206.83 1092.17,1206.99 1092.75,1207.29 1093.34,1208.7 1093.93,1209.04 1094.51,1211.55 1095.1,1210.38 1095.68,1209.22 1096.27,1208.14 1096.86,1208.35 1097.44,1210.77 1098.03,1210.81 1098.62,1214.54 1099.2,1215.58 1099.79,1214.97 1100.38,1214.66 1100.96,1212.39 1101.55,1212.34 1102.14,1213.6 1102.72,1214.98 1103.31,1217.19 1103.89,1218.31 1104.48,1217.9 1105.07,1217.84 1105.65,1216.4 1106.24,1216.18 1106.83,1214.54 1107.41,1214.18 1108,1215.34 1108.59,1215.35 1109.17,1213.76 1109.76,1217.16 1110.34,1214.25 1110.93,1213.09 1111.52,1211.82 1112.1,1211.54 1112.69,1211.39 1113.28,1211.48 1113.86,1212.69 1114.45,1212.58 1115.04,1212.67 1115.62,1211.42 1116.21,1212.4 1116.8,1213.5 1117.38,1214.62 1117.97,1214.38 1118.55,1214.41 1119.14,1215.25 1119.73,1217.42 1120.31,1219.39 1120.9,1218.97 1121.49,1220.94 1122.07,1219.17 1122.66,1215.55 1123.25,1214.11 1123.83,1212.88 1124.42,1212.74 1125.01,1212.6 1125.59,1211.44 1126.18,1210.37 1126.76,1212.65 1127.35,1212.7 1127.94,1213.72 1128.52,1213.15 1129.11,1213.03 1129.7,1214.11 1130.28,1214.19 1130.87,1211.69 1131.46,1211.73 1132.04,1214.03 1132.63,1215.37 1133.21,1217.5 1133.8,1216.05 1134.39,1215.93 1134.97,1214.49 1135.56,1215.68 1136.15,1215.38 1136.73,1216.27 1137.32,1216 1137.91,1214.65 1138.49,1213.12 1139.08,1212.71 1139.67,1210.38 1140.25,1210.3 1140.84,1209.05 1141.42,1209.27 1142.01,1209.29 1142.6,1208.08 1143.18,1205.79 1143.77,1208.58 1144.36,1208.46 1144.94,1212.04 1145.53,1212.4 1146.12,1213.66 1146.7,1213.47 1147.29,1214.75 1147.88,1218.08 1148.46,1216.74 1149.05,1217.54 1149.63,1215.96 1150.22,1215.98 1150.81,1213.55 1151.39,1215.87 1151.98,1215.64 1152.57,1217.98 1153.15,1216.3 1153.74,1214.57 1154.33,1214.25 1154.91,1213.81 1155.5,1218.5 1156.09,1215.78 1156.67,1216.55 1157.26,1218.84 1157.84,1219.76 1158.43,1219.28 1159.02,1217.76 1159.6,1217.42 1160.19,1214.87 1160.78,1214.86 1161.36,1213.38 1161.95,1213.46 1162.54,1213.13 1163.12,1212.98 1163.71,1211.73 1164.29,1215.16 1164.88,1214.98 1165.47,1215.01 1166.05,1213.76 1166.64,1212.32 1167.23,1209.56 1167.81,1209.54 1168.4,1208.45 1168.99,1209.94 1169.57,1211.28 1170.16,1211.2 1170.75,1210.24 1171.33,1211.13 1171.92,1212.22 1172.5,1212.11 1173.09,1213.37 1173.68,1213.2 1174.26,1210.6 1174.85,1212.91 1175.44,1214.02 1176.02,1213.65 1176.61,1214.66 1177.2,1213.5 1177.78,1211.01 1178.37,1211.14 1178.96,1209.84 1179.54,1209.75 1180.13,1210.02 1180.71,1210.6 1181.3,1210.58 1181.89,1209.26 1182.47,1209.48 1183.06,1208.41 1183.65,1209.67 1184.23,1207.24 1184.82,1207.43 1185.41,1205.33 1185.99,1205.65 1186.58,1207.3 1187.16,1208.77 1187.75,1209.07 1188.34,1208.21 1188.92,1206.3 1189.51,1206.54 1190.1,1203.19 1190.68,1203.64 1191.27,1203.9 1191.86,1202.7 1192.44,1204.39 1193.03,1202.52 1193.62,1203.09 1194.2,1203.64 1194.79,1205.22 1195.37,1206.85 1195.96,1207.37 1196.55,1207.77 1197.13,1208 1197.72,1208.17 1198.31,1208.27 1198.89,1212.1 1199.48,1212.14 1200.07,1210.87 1200.65,1207.04 1201.24,1208.63 1201.83,1207.57 1202.41,1207.8 1203,1205.26 1203.58,1202.89 1204.17,1203.44 1204.76,1204.74 1205.34,1205.31 1205.93,1206.94 1206.52,1207.12 1207.1,1206.06 1207.69,1206.26 1208.28,1208.84 1208.86,1210.39 1209.45,1209.1 1210.03,1209.14 1210.62,1210.5 1211.21,1213.17 1211.79,1213.14 1212.38,1216.52 1212.97,1216.2 1213.55,1215.75 1214.14,1216.45 1214.73,1216.24 1215.31,1214.62 1215.9,1215.65 1216.49,1214.17 1217.07,1214.11 1217.66,1215.14 1218.24,1213.68 1218.83,1213.51 1219.42,1213.27 1220,1214.45 1220.59,1214.29 1221.18,1213.17 1221.76,1211.72 1222.35,1214.08 1222.94,1216.11 1223.52,1215.83 1224.11,1217.91 1224.7,1216.27 1225.28,1217.12 1225.87,1217.05 1226.45,1215.69 1227.04,1213.27 1227.63,1210.58 1228.21,1206.95 1228.8,1208.36 1229.39,1208.34 1229.97,1208.62 1230.56,1206.71 1231.15,1203.35 1231.73,1205.21 1232.32,1204.38 1232.91,1204.52 1233.49,1207.07 1234.08,1208.57 1234.66,1209.72 1235.25,1206.03 1235.84,1206.18 1236.42,1206.7 1237.01,1207.14 1237.6,1206.45 1238.18,1206.67 1238.77,1205.76 1239.36,1205.68 1239.94,1205.88 1240.53,1208.55 1241.11,1212.17 1241.7,1212.13 1242.29,1213.18 1242.87,1212.15 1243.46,1213.6 1244.05,1213.39 1244.63,1213.53 1245.22,1210.8 1245.81,1208.42 1246.39,1207.52 1246.98,1208.98 1247.57,1207.93 1248.15,1209.2 1248.74,1208.24 1249.32,1209.52 1249.91,1208.28 1250.5,1208.26 1251.08,1209.37 1251.67,1206.97 1252.26,1205.87 1252.84,1206.19 1253.43,1205.21 1254.02,1204.53 1254.6,1202.69 1255.19,1203.32 1255.78,1201.45 1256.36,1203.05 1256.95,1204.62 1257.53,1204.92 1258.12,1205.43 1258.71,1202.44 1259.29,1201.63 1259.88,1202.03 1260.47,1202.77 1261.05,1204.26 1261.64,1205.67 1262.23,1210.77 1262.81,1213.13 1263.4,1214.31 1263.98,1214.01 1264.57,1213.89 1265.16,1213.86 1265.74,1211.23 1266.33,1211.01 1266.92,1213.4 1267.5,1213.28 1268.09,1211.98 1268.68,1211.94 1269.26,1210.63 1269.85,1210.18 1270.44,1208.16 1271.02,1208.29 1271.61,1208.53 1272.19,1208.64 1272.78,1207.52 1273.37,1210.09 1273.95,1208.79 1274.54,1210.2 1275.13,1210.46 1275.71,1210.58 1276.3,1209.64 1276.89,1208.7 1277.47,1207.56 1278.06,1207.66 1278.65,1206.71 1279.23,1205.58 1279.82,1207.08 1280.4,1209.61 1280.99,1208.67 1281.58,1210.11 1282.16,1210.23 1282.75,1209.08 1283.34,1207.97 1283.92,1206.67 1284.51,1209.61 1285.1,1208.47 1285.68,1208.46 1286.27,1209.95 1286.86,1211.21 1287.44,1211.23 1288.03,1208.84 1288.61,1207.92 1289.2,1210.5 1289.79,1210.44 1290.37,1210.62 1290.96,1212.99 1291.55,1212.76 1292.13,1213.91 1292.72,1212.77 1293.31,1213.81 1293.89,1215.81 1294.48,1214.5 1295.06,1215.4 1295.65,1217.51 1296.24,1214.55 1296.82,1215.68 1297.41,1215.6 1298,1215.44 1298.58,1214.19 1299.17,1215.11 1299.76,1216.02 1300.34,1213.4 1300.93,1214.48 1301.52,1210.77 1302.1,1212.03 1302.69,1210.79 1303.27,1211.93 1303.86,1213.04 1304.45,1212.91 1305.03,1211.69 1305.62,1209.37 1306.21,1208.49 1306.79,1211.04 1307.38,1211.1 1307.97,1210.14 1308.55,1213.37 1309.14,1212.16 1309.73,1213.15 1310.31,1213.05 1310.9,1215.24 1311.48,1215.1 1312.07,1214.94 1312.66,1214.81 1313.24,1215.86 1313.83,1215.82 1314.42,1215.56 1315,1214.12 1315.59,1212.71 1316.18,1212.7 1316.76,1212.66 1317.35,1212.56 1317.93,1212.37 1318.52,1212.23 1319.11,1214.58 1319.69,1214.66 1320.28,1211.9 1320.87,1211.95 1321.45,1208.31 1322.04,1211.03 1322.63,1208.81 1323.21,1210.25 1323.8,1208.27 1324.39,1209.56 1324.97,1207.26 1325.56,1207.42 1326.14,1208.76 1326.73,1211.33 1327.32,1211.38 1327.9,1211.21 1328.49,1209.85 1329.08,1212.23 1329.66,1209.59 1330.25,1212.23 1330.84,1211.96 1331.42,1213.31 1332.01,1213.29 1332.6,1216.49 1333.18,1215.02 1333.77,1212.33 1334.35,1211.18 1334.94,1211.3 1335.53,1210.11 1336.11,1210.36 1336.7,1206.63 1337.29,1206.89 1337.87,1205.85 1338.46,1209.56 1339.05,1210.91 1339.63,1213.24 1340.22,1215.39 1340.8,1215.21 1341.39,1213.8 1341.98,1212.47 1342.56,1214.69 1343.15,1211.02 1343.74,1212.46 1344.32,1216.01 1344.91,1215.92 1345.5,1215.65 1346.08,1216.77 1346.67,1212.97 1347.26,1214.28 1347.84,1215.27 1348.43,1211.49 1349.01,1211.5 1349.6,1210.21 1350.19,1210.24 1350.77,1211.67 1351.36,1211.75 1351.95,1210.43 1352.53,1211.23 1353.12,1211.43 1353.71,1210.94 1354.29,1210.77 1354.88,1209.45 1355.47,1211.9 1356.05,1210.72 1356.64,1210.41 1357.22,1207.95 1357.81,1208.25 1358.4,1209.53 1358.98,1209.55 1359.57,1207.46 1360.16,1208.8 1360.74,1208.97 1361.33,1208.06 1361.92,1209.21 1362.5,1211.79 1363.09,1212.85 1363.68,1218.58 1364.26,1218.26 1364.85,1218.1 1365.43,1220.18 1366.02,1218.55 1366.61,1218.13 1367.19,1220.93 1367.78,1220.4 1368.37,1221.1 1368.95,1218.22 1369.54,1215.53 1370.13,1215.33 1370.71,1217.19 1371.3,1215.22 1371.88,1214.89 1372.47,1213.48 1373.06,1215.93 1373.64,1214.48 1374.23,1215.58 1374.82,1215.39 1375.4,1217.55 1375.99,1217.17 1376.58,1214.64 1377.16,1213.3 1377.75,1213.05 1378.34,1215.4 1378.92,1215.35 1379.51,1214.92 1380.09,1216.42 1380.68,1214.66 1381.27,1212.94 1381.85,1214.13 1382.44,1215.3 1383.03,1213.96 1383.61,1216.35 1384.2,1213.72 1384.79,1213.89 1385.37,1214.04 1385.96,1213.87 1386.55,1213.57 1387.13,1212.04 1387.72,1213.03 1388.3,1213.91 1388.89,1212.64 1389.48,1210.17 1390.06,1209.1 1390.65,1209.26 1391.24,1210.52 1391.82,1211.7 1392.41,1210.27 1393,1210.28 1393.58,1209.37 1394.17,1208.37 1394.75,1209.47 1395.34,1209.46 1395.93,1210.5 1396.51,1208.99 1397.1,1207.69 1397.69,1210 1398.27,1208.94 1398.86,1211.48 1399.45,1211.51 1400.03,1214.64 1400.62,1213.16 1401.21,1210.7 1401.79,1210.72 1402.38,1208.62 1402.96,1208.38 1403.55,1210.83 1404.14,1210.8 1404.72,1210.65 1405.31,1213.26 1405.9,1212.96 1406.48,1211.76 1407.07,1209.61 1407.66,1209.65 1408.24,1209.64 1408.83,1211.67 1409.42,1211.48 1410,1210.17 1410.59,1210.05 1411.17,1212.71 1411.76,1211.67 1412.35,1214.95 1412.93,1216.2 1413.52,1213.63 1414.11,1213.34 1414.69,1214.26 1415.28,1214.36 1415.87,1211.67 1416.45,1209.35 1417.04,1209.53 1417.63,1208.4 1418.21,1203.82 1418.8,1202.97 1419.38,1205.7 1419.97,1207.17 1420.56,1208.43 1421.14,1210.66 1421.73,1210.94 1422.32,1211 1422.9,1211.33 1423.49,1212.48 1424.08,1211.17 1424.66,1212.4 1425.25,1212.34 1425.83,1214.64 1426.42,1214.42 1427.01,1211.68 1427.59,1212.87 1428.18,1216.38 1428.77,1217.68 1429.35,1215.19 1429.94,1213.84 1430.53,1213.65 1431.11,1214.67 1431.7,1210.76 1432.29,1209.54 1432.87,1209.33 1433.46,1208.16 1434.04,1205.99 1434.63,1206.51 1435.22,1206.5 1435.8,1202.97 1436.39,1201.33 1436.98,1202.72 1437.56,1203.08 1438.15,1203.63 1438.74,1201.73 1439.32,1198.92 1439.91,1203.12 1440.5,1206.24 1441.08,1206.57 1441.67,1207.01 1442.25,1204.89 1442.84,1205.17 1443.43,1208.07 1444.01,1208.28 1444.6,1206.15 1445.19,1205.02 1445.77,1205.41 1446.36,1205.71 1446.95,1205.91 1447.53,1206.05 1448.12,1204.99 1448.7,1206.48 1449.29,1207.62 1449.88,1208.02 1450.46,1208.38 1451.05,1208.56 1451.64,1208.85 1452.22,1208.99 1452.81,1212.68 1453.4,1215.05 1453.98,1213.51 1454.57,1208.53 1455.16,1209.82 1455.74,1210.02 1456.33,1207.58 1456.91,1207.55 1457.5,1206.4 1458.09,1207.92 1458.67,1207.9 1459.26,1206.72 1459.85,1207.24 1460.43,1205.04 1461.02,1205.76 1461.61,1203.76 1462.19,1204.13 1462.78,1205.59 1463.37,1206.84 1463.95,1206.92 1464.54,1208.27 1465.12,1208.48 1465.71,1209.86 1466.3,1210 1466.88,1207.68 1467.47,1207.87 1468.06,1209.41 1468.64,1208.63 1469.23,1208.94 1469.82,1211.59 1470.4,1209.19 1470.99,1209.3 1471.57,1210.56 1472.16,1210.74 1472.75,1211.81 1473.33,1213.13 1473.92,1209.56 1474.51,1209.93 1475.09,1211.02 1475.68,1212.22 1476.27,1211.98 1476.85,1211.88 1477.44,1210.75 1478.03,1212.95 1478.61,1214.1 1479.2,1215.14 1479.78,1215.01 1480.37,1215.94 1480.96,1215.91 1481.54,1216.89 1482.13,1219.02 1482.72,1218.72 1483.3,1218.32 1483.89,1215.83 1484.48,1215.54 1485.06,1217.95 1485.65,1216.47 1486.24,1216.24 1486.82,1216.11 1487.41,1217.09 1487.99,1217.04 1488.58,1219.16 1489.17,1218.62 1489.75,1218.34 1490.34,1215.63 1490.93,1214.18 1491.51,1216.41 1492.1,1216.15 1492.69,1217.26 1493.27,1217.13 1493.86,1217.86 1494.45,1217.38 1495.03,1217.32 1495.62,1216.88 1496.2,1215.28 1496.79,1214.09 1497.38,1210.22 1497.96,1210.36 1498.55,1211.51 1499.14,1211.45 1499.72,1211.23 1500.31,1211.15 1500.9,1210.13 1501.48,1212.53 1502.07,1209.87 1502.65,1208.57 1503.24,1209.92 1503.83,1211.19 1504.41,1211.24 1505,1210.15 1505.59,1210.02 1506.17,1211.33 1506.76,1209.02 1507.35,1205.4 1507.93,1206.83 1508.52,1205.73 1509.11,1202.66 1509.69,1204.16 1510.28,1203.17 1510.86,1203.54 1511.45,1204.01 1512.04,1203.39 1512.62,1203.8 1513.21,1203.19 1513.8,1205.01 1514.38,1205.28 1514.97,1205.94 1515.56,1206.31 1516.14,1209.03 1516.73,1208.89 1517.32,1210.07 1517.9,1214.89 1518.49,1216.93 1519.07,1215.4 1519.66,1213.95 1520.25,1214.7 1520.83,1214.15 1521.42,1215.46 1522.01,1217.25 1522.59,1217.22 1523.18,1217 1523.77,1215.64 1524.35,1216.4 1524.94,1217.17 1525.52,1219.53 1526.11,1221.5 1526.7,1221.08 1527.28,1221.53 1527.87,1220.83 1528.46,1217.93 1529.04,1217.57 1529.63,1213.92 1530.22,1210.11 1530.8,1211.41 1531.39,1213.86 1531.98,1212.78 1532.56,1212.37 1533.15,1213.44 1533.73,1207.23 1534.32,1209.82 1534.91,1209.93 1535.49,1212.42 1536.08,1212.33 1536.67,1209.78 1537.25,1208.65 1537.84,1207.4 1538.43,1206.31 1539.01,1205.39 1539.6,1205.97 1540.19,1207.73 1540.77,1208.16 1541.36,1207.22 1541.94,1207.57 1542.53,1208.96 1543.12,1208.09 1543.7,1213.04 1544.29,1211.82 1544.88,1212.72 1545.46,1213.96 1546.05,1216.01 1546.64,1217.08 1547.22,1216.36 1547.81,1216.22 1548.4,1215.92 1548.98,1216.79 1549.57,1215.29 1550.15,1215.13 1550.74,1219.84 1551.33,1216.86 1551.91,1217.33 1552.5,1214.51 1553.09,1213.22 1553.67,1211.88 1554.26,1210.4 1554.85,1210.52 1555.43,1209.27 1556.02,1208.35 1556.6,1206.09 1557.19,1208.84 1557.78,1207.74 1558.36,1207.7 1558.95,1207.86 1559.54,1209.32 1560.12,1210.65 1560.71,1209.57 1561.3,1209.63 1561.88,1211.06 1562.47,1212.29 1563.06,1212.22 1563.64,1213.17 1564.23,1213.07 1564.81,1213.98 1565.4,1212.59 1565.99,1212.23 1566.57,1214.37 1567.16,1212.79 1567.75,1211.33 1568.33,1210.04 1568.92,1208.98 1569.51,1210.19 1570.09,1211.22 1570.68,1212.53 1571.27,1214.56 1571.85,1215.72 1572.44,1215.49 1573.02,1212.79 1573.61,1214.88 1574.2,1215.82 1574.78,1215.64 1575.37,1215.3 1575.96,1215.04 1576.54,1217.21 1577.13,1215.7 1577.72,1215.14 1578.3,1213.68 1578.89,1214.59 1579.47,1214.55 1580.06,1211.76 1580.65,1210.73 1581.23,1212.79 1581.82,1212.49 1582.41,1212.45 1582.99,1211.14 1583.58,1211.05 1584.17,1212.08 1584.75,1212.03 1585.34,1213.14 1585.93,1214.06 1586.51,1215.25 1587.1,1216.14 1587.68,1215.76 1588.27,1213.2 1588.86,1212.17 1589.44,1216.85 1590.03,1211.72 1590.62,1210.5 1591.2,1208.3 1591.79,1207.13 1592.38,1204.93 1592.96,1205.42 1593.55,1205.89 1594.14,1203.85 1594.72,1204.13 1595.31,1205.68 1595.89,1205.89 1596.48,1206.18 1597.07,1207.86 1597.65,1209.08 1598.24,1206.86 1598.83,1207.02 1599.41,1205.94 1600,1206.25 1600.59,1206.51 1601.17,1206.49 1601.76,1208.11 1602.34,1207.07 1602.93,1205.99 1603.52,1205.18 1604.1,1207.7 1604.69,1207.95 1605.28,1212.67 1605.86,1212.71 1606.45,1212.57 1607.04,1212.69 1607.62,1211.49 1608.21,1213.93 1608.8,1214.91 1609.38,1212.39 1609.97,1209.9 1610.55,1208.75 1611.14,1211.25 1611.73,1211 1612.31,1207.33 1612.9,1208.72 1613.49,1208.52 1614.07,1210.06 1614.66,1210.07 1615.25,1207.76 1615.83,1208.33 1616.42,1204.56 1617.01,1204.83 1617.59,1205.16 1618.18,1207.94 1618.76,1210.48 1619.35,1211.34 1619.94,1207.87 1620.52,1210.28 1621.11,1210.28 1621.7,1210.41 1622.28,1208.07 1622.87,1206.09 1623.46,1205.25 1624.04,1206.9 1624.63,1205.99 1625.22,1207.65 1625.8,1207.82 1626.39,1205.94 1626.97,1204.04 1627.56,1204.49 1628.15,1203.43 1628.73,1205.34 1629.32,1204.13 1629.91,1204.51 1630.49,1204.99 1631.08,1204.2 1631.67,1204.76 1632.25,1207.37 1632.84,1208.81 1633.42,1207.87 1634.01,1209.24 1634.6,1210.68 1635.18,1210.79 1635.77,1211.96 1636.36,1211.8 1636.94,1211.73 1637.53,1209.26 1638.12,1209.41 1638.7,1210.6 1639.29,1208.24 1639.88,1207.48 1640.46,1208.78 1641.05,1210.17 1641.63,1210.2 1642.22,1208.84 1642.81,1207.57 1643.39,1207.67 1643.98,1207.84 1644.57,1208.09 1645.15,1209.38 1645.74,1208.18 1646.33,1208.55 1646.91,1207.29 1647.5,1208.64 1648.09,1209.13 1648.67,1208.45 1649.26,1208.59 1649.84,1207.68 1650.43,1208.04 1651.02,1208.24 1651.6,1207.14 1652.19,1207.27 1652.78,1207.55 1653.36,1208.98 1653.95,1209.03 1654.54,1210.58 1655.12,1210.8 1655.71,1208.5 1656.29,1207.69 1656.88,1206.53 1657.47,1205.63 1658.05,1205.85 1658.64,1204.94 1659.23,1205.37 1659.81,1206.96 1660.4,1208.35 1660.99,1210.78 1661.57,1207.45 1662.16,1207.5 1662.75,1207.67 1663.33,1207.84 1663.92,1207.15 1664.5,1209.89 1665.09,1210.25 1665.68,1208.72 1666.26,1207.5 1666.85,1209.01 1667.44,1210.43 1668.02,1211.51 1668.61,1213.78 1669.2,1212.65 1669.78,1213.62 1670.37,1212.14 1670.96,1216.77 1671.54,1217.95 1672.13,1217.77 1672.71,1216.4 1673.3,1217.42 1673.89,1218.09 1674.47,1216.65 1675.06,1215.25 1675.65,1215.1 1676.23,1213.75 1676.82,1212.45 1677.41,1213.86 1677.99,1216.17 1678.58,1214.68 1679.17,1213.42 1679.75,1213.28 1680.34,1216.74 1680.92,1215.38 1681.51,1216.22 1682.1,1217.11 1682.68,1216.97 1683.27,1218.86 1683.86,1217.12 1684.44,1216.97 1685.03,1215.43 1685.62,1212.63 1686.2,1213.69 1686.79,1215.91 1687.37,1215.78 1687.96,1215.61 1688.55,1216.4 1689.13,1217.31 1689.72,1213.47 1690.31,1214.54 1690.89,1215.59 1691.48,1214.06 1692.07,1215.04 1692.65,1212.44 1693.24,1213.46 1693.83,1212.01 1694.41,1208.33 1695,1208.42 1695.58,1207.27 1696.17,1208.73 1696.76,1208.51 1697.34,1212.08 1697.93,1213.15 1698.52,1213.05 1699.1,1212.67 1699.69,1211.61 1700.28,1212.81 1700.86,1215.12 1701.45,1217.29 1702.04,1215.56 1702.62,1216.44 1703.21,1213.99 1703.79,1215.91 1704.38,1218.22 1704.97,1219.08 1705.55,1218.68 1706.14,1218.35 1706.73,1217.97 1707.31,1217.58 1707.9,1217.16 1708.49,1216.78 1709.07,1218.66 1709.66,1217.19 1710.24,1217.78 1710.83,1217.33 1711.42,1216.83 1712,1215.44 1712.59,1215.31 1713.18,1214.19 1713.76,1212.59 1714.35,1213.73 1714.94,1211.15 1715.52,1210.95 1716.11,1210.92 1716.7,1211.89 1717.28,1209.17 1717.87,1209.27 1718.45,1210.53 1719.04,1213.02 1719.63,1213 1720.21,1211.58 1720.8,1211.54 1721.39,1212.69 1721.97,1211.39 1722.56,1210.34 1723.15,1210.41 1723.73,1211.46 1724.32,1212.46 1724.91,1212.43 1725.49,1213.69 1726.08,1212.48 1726.66,1211.39 1727.25,1210.34 1727.84,1210.61 1728.42,1210.69 1729.01,1208.45 1729.6,1211.07 1730.18,1213.35 1730.77,1213.32 1731.36,1213.02 1731.94,1213.06 1732.53,1212.91 1733.11,1212.95 1733.7,1214.44 1734.29,1215.35 1734.87,1215.21 1735.46,1212.36 1736.05,1211.19 1736.63,1213.53 1737.22,1210.79 1737.81,1209.48 1738.39,1206 1738.98,1205.17 1739.57,1206.69 1740.15,1210.33 1740.74,1212.83 1741.32,1210.36 1741.91,1209.37 1742.5,1205.96 1743.08,1204.99 1743.67,1205.25 1744.26,1204.25 1744.84,1204.66 1745.43,1206.1 1746.02,1206.43 1746.6,1206.64 1747.19,1208.29 1747.78,1207.43 1748.36,1207.68 1748.95,1210.18 1749.53,1209.15 1750.12,1211.71 1750.71,1209.34 1751.29,1207.9 1751.88,1210.37 1752.47,1210.57 1753.05,1210.55 1753.64,1212.64 1754.23,1210.07 1754.81,1210.87 1755.4,1210.72 1755.99,1208.28 1756.57,1208.6 1757.16,1206.43 1757.74,1204.31 1758.33,1205.84 1758.92,1206 1759.5,1206.44 1760.09,1210.35 1760.68,1210.38 1761.26,1207.91 1761.85,1209.26 1762.44,1212.73 1763.02,1212.91 1763.61,1211.64 1764.19,1211.54 1764.78,1211.51 1765.37,1209.15 1765.95,1210.32 1766.54,1208.95 1767.13,1208.99 1767.71,1207.88 1768.3,1209.13 1768.89,1206.82 1769.47,1206.24 1770.06,1207.82 1770.65,1207.59 1771.23,1204.2 1771.82,1203.16 1772.4,1202.49 1772.99,1201.94 1773.58,1201.31 1774.16,1201.69 1774.75,1202.41 1775.34,1199.45 1775.92,1199.98 1776.51,1198.42 1777.1,1199.27 1777.68,1198.9 1778.27,1198.7 1778.86,1198.16 1779.44,1198.93 1780.03,1198.31 1780.61,1200.14 1781.2,1201.91 1781.79,1204.92 1782.37,1205.27 1782.96,1203.29 1783.55,1203.72 1784.13,1203.05 1784.72,1208.31 1785.31,1209.52 1785.89,1209.83 1786.48,1211.14 1787.06,1211.28 1787.65,1211.17 1788.24,1210.19 1788.82,1211.6 1789.41,1209.17 1790,1208.02 1790.58,1209.39 1791.17,1210.77 1791.76,1211.03 1792.34,1212.45 1792.93,1213.64 1793.52,1213.46 1794.1,1213.63 1794.69,1213.62 1795.27,1213.39 1795.86,1212.37 1796.45,1209.92 1797.03,1209.91 1797.62,1208.86 1798.21,1210.28 1798.79,1209.32 1799.38,1211.66 1799.97,1212.94 1800.55,1212.86 1801.14,1210.55 1801.73,1213.11 1802.31,1212.89 1802.9,1212.89 1803.48,1211.47 1804.07,1211.53 1804.66,1215.15 1805.24,1214.02 1805.83,1216.29 1806.42,1214.87 1807,1214.67 1807.59,1216.87 1808.18,1221.66 1808.76,1222.43 1809.35,1222.59 1809.94,1220.69 1810.52,1220.38 1811.11,1218.53 1811.69,1220.51 1812.28,1220.22 1812.87,1218.6 1813.45,1219.49 1814.04,1217 1814.63,1215.23 1815.21,1211.44 1815.8,1213.5 1816.39,1213.12 1816.97,1214.36 1817.56,1212.87 1818.14,1213.62 1818.73,1212.22 1819.32,1213.21 1819.9,1211.88 1820.49,1211.82 1821.08,1214 1821.66,1211.39 1822.25,1212.44 1822.84,1213.17 1823.42,1214.35 1824.01,1216.38 1824.6,1218.32 1825.18,1218.15 1825.77,1218.97 1826.35,1219.58 1826.94,1221.52 1827.53,1219.65 1828.11,1219.31 1828.7,1221.13 1829.29,1220.15 1829.87,1219.46 1830.46,1220.29 1831.05,1222.09 1831.63,1222.83 1832.22,1221 1832.81,1220.28 1833.39,1219.74 1833.98,1219.19 1834.56,1219.8 1835.15,1219.33 1835.74,1221.36 1836.32,1221.88 1836.91,1224.61 1837.5,1225.05 1838.08,1222.82 1838.67,1222.23 1839.26,1220.42 1839.84,1217.61 1840.43,1217.29 1841.01,1217.05 1841.6,1216.42 1842.19,1210.34 1842.77,1209.14 1843.36,1209.32 1843.95,1205.63 1844.53,1203.38 1845.12,1202.53 1845.71,1200.67 1846.29,1198.8 1846.88,1198.1 1847.47,1198.92 1848.05,1200.71 1848.64,1200.07 1849.22,1200.82 1849.81,1200.16 1850.4,1200.64 1850.98,1202.41 1851.57,1203.8 1852.16,1205.29 1852.74,1205.57 1853.33,1205.85 1853.92,1208.51 1854.5,1203.86 1855.09,1204.24 1855.68,1208.35 1856.26,1210.8 1856.85,1210.89 1857.43,1211.12 1858.02,1209.94 1858.61,1210.12 1859.19,1209.04 1859.78,1209.31 1860.37,1210.54 1860.95,1213.09 1861.54,1211.91 1862.13,1213.01 1862.71,1212.94 1863.3,1211.88 1863.88,1211.97 1864.47,1212.92 1865.06,1215 1865.64,1216.08 1866.23,1219.48 1866.82,1217.77 1867.4,1218.81 1867.99,1220.88 1868.58,1222.68 1869.16,1221.98 1869.75,1217.87 1870.34,1218.63 1870.92,1217.04 1871.51,1217.86 1872.09,1219.74 1872.68,1218.03 1873.27,1215.15 1873.85,1215.98 1874.44,1212.18 1875.03,1213.08 1875.61,1214.13 1876.2,1213.92 1876.79,1213.86 1877.37,1212.63 1877.96,1213.75 1878.55,1211.4 1879.13,1209.98 1879.72,1213.6 1880.3,1212.54 1880.89,1212.18 1881.48,1214.39 1882.06,1214.23 1882.65,1212.83 1883.24,1215.18 1883.82,1214.01 1884.41,1212.62 1885,1211.34 1885.58,1211.35 1886.17,1211.6 1886.76,1210.3 1887.34,1210.36 1887.93,1210.42 1888.51,1210.49 1889.1,1209.4 1889.69,1209.66 1890.27,1208.65 1890.86,1208.8 1891.45,1208.8 1892.03,1208.76 1892.62,1208.88 1893.21,1208.93 1893.79,1210.42 1894.38,1211.39 1894.96,1211.29 1895.55,1212.19 1896.14,1211.96 1896.72,1213.16 1897.31,1214.19 1897.9,1215.24 1898.48,1214 1899.07,1212.33 1899.66,1213.5 1900.24,1213.54 1900.83,1212.35 1901.42,1211.13 1902,1211.27 1902.59,1208.84 1903.17,1207.62 1903.76,1206.73 1904.35,1207.05 1904.93,1209.69 1905.52,1209.9 1906.11,1212.4 1906.69,1211.06 1907.28,1208.51 1907.87,1206.26 1908.45,1202.04 1909.04,1204.78 1909.63,1204.25 1910.21,1205.9 1910.8,1201.19 1911.38,1204.21 1911.97,1206.99 1912.56,1207.21 1913.14,1211.2 1913.73,1210.94 1914.32,1211 1914.9,1214.49 1915.49,1215.51 1916.08,1215.04 1916.66,1213.75 1917.25,1210.17 1917.83,1210.07 1918.42,1208.71 1919.01,1208.78 1919.59,1207.6 1920.18,1207.73 1920.77,1208.97 1921.35,1209.06 1921.94,1209.1 1922.53,1207.9 1923.11,1208.11 1923.7,1207.04 1924.29,1208.68 1924.87,1208.74 1925.46,1209.84 1926.04,1209.86 1926.63,1211.24 1927.22,1207.72 1927.8,1207.92 1928.39,1206.79 1928.98,1204.56 1929.56,1206.2 1930.15,1204.04 1930.74,1205.24 1931.32,1205.33 1931.91,1205.77 1932.5,1207.37 1933.08,1208.78 1933.67,1210.08 1934.25,1207.82 1934.84,1206.71 1935.43,1205.63 1936.01,1207.18 1936.6,1208.44 1937.19,1208.89 1937.77,1205.46 1938.36,1205.66 1938.95,1203.34 1939.53,1203.51 1940.12,1203.9 1940.71,1203.3 1941.29,1204.78 1941.88,1207.25 1942.46,1207.52 1943.05,1207.88 1943.64,1207.89 1944.22,1205.62 1944.81,1204.82 1945.4,1205.12 1945.98,1204.34 1946.57,1204.65 1947.16,1208.32 1947.74,1208.66 1948.33,1209.83 1948.91,1208.71 1949.5,1206.59 1950.09,1205.77 1950.67,1206.22 1951.26,1207.76 1951.85,1204.11 1952.43,1207.13 1953.02,1209.59 1953.61,1209.59 1954.19,1213.3 1954.78,1211.97 1955.37,1212.79 1955.95,1211.69 1956.54,1213.03 1957.12,1212 1957.71,1211.04 1958.3,1212.98 1958.88,1212.79 1959.47,1212.3 1960.06,1211.14 1960.64,1215.68 1961.23,1214.17 1961.82,1215.28 1962.4,1213.98 1962.99,1211.6 1963.58,1210.58 1964.16,1211.73 1964.75,1212 1965.33,1212.17 1965.92,1210.67 1966.51,1208.51 1967.09,1211.12 1967.68,1211.9 1968.27,1211.61 1968.85,1212.7 1969.44,1211.55 1970.03,1210.21 1970.61,1209.1 1971.2,1209.23 1971.78,1210.7 1972.37,1213.13 1972.96,1209.52 1973.54,1208.29 1974.13,1210.83 1974.72,1210.82 1975.3,1211.92 1975.89,1210.85 1976.48,1208.48 1977.06,1213.47 1977.65,1212.28 1978.24,1211.06 1978.82,1208.38 1979.41,1209.76 1979.99,1210.89 1980.58,1209.83 1981.17,1209.9 1981.75,1210.07 1982.34,1211.03 1982.93,1211.12 1983.51,1208.75 1984.1,1207.19 1984.69,1203.89 1985.27,1201.95 1985.86,1203.66 1986.45,1207.35 1987.03,1206.33 1987.62,1207.59 1988.2,1209.97 1988.79,1209.8 1989.38,1207.36 1989.96,1205.16 1990.55,1205.59 1991.14,1204.96 1991.72,1207.68 1992.31,1207.84 1992.9,1209.14 1993.48,1209.32 1994.07,1210.64 1994.65,1208.32 1995.24,1208.63 1995.83,1208.75 1996.41,1208.76 1997,1207.49 1997.59,1211.33 1998.17,1212.41 1998.76,1211.3 1999.35,1211.23 1999.93,1211.67 2000.52,1213.94 2001.11,1213.89 2001.69,1215.01 2002.28,1212.12 2002.86,1210.84 2003.45,1213.25 2004.04,1211.11 2004.62,1211.12 2005.21,1210.05 2005.8,1210.2 2006.38,1209.86 2006.97,1208.85 2007.56,1209.08 2008.14,1211.65 2008.73,1212.64 2009.32,1215.03 2009.9,1212.31 2010.49,1212.22 2011.07,1211.78 2011.66,1210.69 2012.25,1214.07 2012.83,1214.24 2013.42,1214.16 2014.01,1215.2 2014.59,1213.8 2015.18,1216.29 2015.77,1214.75 2016.35,1214.63 2016.94,1216.64 2017.53,1216.26 2018.11,1217.24 2018.7,1219.4 2019.28,1218.96 2019.87,1218.53 2020.46,1218.19 2021.04,1216.51 2021.63,1215.04 2022.22,1215.9 2022.8,1215.4 2023.39,1217.68 2023.98,1217.38 2024.56,1218.01 2025.15,1220.96 2025.73,1218.32 2026.32,1217.85 2026.91,1217.62 2027.49,1217.24 2028.08,1217.86 2028.67,1217.64 2029.25,1214.77 2029.84,1213.34 2030.43,1212.19 2031.01,1212.27 2031.6,1213.38 2032.19,1213.12 2032.77,1213.22 2033.36,1213.17 2033.94,1214.2 2034.53,1217.25 2035.12,1218.31 2035.7,1217.98 2036.29,1218.86 2036.88,1218.35 2037.46,1217.69 2038.05,1214.95 2038.64,1216.09 2039.22,1215.86 2039.81,1213.1 2040.4,1210.77 2040.98,1212.07 2041.57,1210.65 2042.15,1210.7 2042.74,1215.44 2043.33,1215.06 2043.91,1213.61 2044.5,1212.35 2045.09,1216.02 2045.67,1217.31 2046.26,1215.89 2046.85,1213.33 2047.43,1212.07 2048.02,1215.52 2048.6,1214.41 2049.19,1215.53 2049.78,1211.65 2050.36,1213.65 2050.95,1212.27 2051.54,1213.42 2052.12,1210.9 2052.71,1208.84 2053.3,1211.26 2053.88,1215.02 2054.47,1213.35 2055.06,1210.4 2055.64,1210.31 2056.23,1209.4 2056.81,1210.29 2057.4,1211.42 2057.99,1209.02 2058.57,1209.3 2059.16,1210.65 2059.75,1213.02 2060.33,1209.41 2060.92,1209.47 2061.51,1209.39 2062.09,1208.35 2062.68,1210.54 2063.27,1211.62 2063.85,1212.54 2064.44,1213.57 2065.02,1210.95 2065.61,1212.12 2066.2,1212.01 2066.78,1215.39 2067.37,1215.23 2067.96,1216.35 2068.54,1218.29 2069.13,1216.7 2069.72,1222.32 2070.3,1222.97 2070.89,1222.4 2071.48,1220.79 2072.06,1220.16 2072.65,1218.39 2073.23,1215.49 2073.82,1216.28 2074.41,1216.2 2074.99,1216.14 2075.58,1212.07 2076.17,1212.14 2076.75,1215.38 2077.34,1215.16 2077.93,1214.78 2078.51,1216.9 2079.1,1215.48 2079.68,1216.69 2080.27,1215.03 2080.86,1213.67 2081.44,1212.22 2082.03,1211.88 2082.62,1210.47 2083.2,1208.22 2083.79,1208.67 2084.38,1208.8 2084.96,1211.42 2085.55,1211.29 2086.14,1213.86 2086.72,1212.43 2087.31,1210.1 2087.89,1210.14 2088.48,1211.28 2089.07,1212.31 2089.65,1209.95 2090.24,1211.38 2090.83,1212.77 2091.41,1213.8 2092,1213.66 2092.59,1212.22 2093.17,1214.51 2093.76,1214.44 2094.35,1216.72 2094.93,1216.65 2095.52,1217.38 2096.1,1214.85 2096.69,1215.61 2097.28,1215.51 2097.86,1212.98 2098.45,1212.87 2099.04,1212.71 2099.62,1212.74 2100.21,1211.37 2100.8,1212.29 2101.38,1211.13 2101.97,1214.96 2102.55,1214.68 2103.14,1212.33 2103.73,1209.97 2104.31,1210.02 2104.9,1207.67 2105.49,1206.48 2106.07,1206.45 2106.66,1205.83 2107.25,1206.22 2107.83,1206.34 2108.42,1205.7 2109.01,1206.19 2109.59,1205.04 2110.18,1201.68 2110.76,1200.69 2111.35,1199.93 2111.94,1200.6 2112.52,1201.23 2113.11,1201.8 2113.7,1205.85 2114.28,1204.85 2114.87,1204.08 2115.46,1206.87 2116.04,1209.42 2116.63,1209.48 2117.22,1209.55 2117.8,1208.69 2118.39,1207.49 2118.97,1206.41 2119.56,1204.47 2120.15,1204.99 2120.73,1205.54 2121.32,1203.6 2121.91,1203.05 2122.49,1204.96 2123.08,1205.22 2123.67,1205.32 2124.25,1202.12 2124.84,1202.81 2125.42,1205.58 2126.01,1207.05 2126.6,1208.53 2127.18,1207.42 2127.77,1210.13 2128.36,1207.96 2128.94,1210.6 2129.53,1209.66 2130.12,1210.9 2130.7,1209.98 2131.29,1210.03 2131.88,1210.22 2132.46,1211.49 2133.05,1210.12 2133.63,1210.33 2134.22,1210.54 2134.81,1209.45 2135.39,1209.95 2135.98,1211.32 2136.57,1211.49 2137.15,1211.49 2137.74,1209.33 2138.33,1208.32 2138.91,1206.02 2139.5,1206.29 2140.09,1207.92 2140.67,1209.4 2141.26,1210.9 2141.84,1209.84 2142.43,1209.91 2143.02,1205.26 2143.6,1206.94 2144.19,1206.19 2144.78,1205.38 2145.36,1205.66 2145.95,1207.31 2146.54,1210.11 2147.12,1209.98 2147.71,1213.85 2148.3,1216.05 2148.88,1216.75 2149.47,1215.42 2150.05,1215.56 2150.64,1215.2 2151.23,1214.98 2151.81,1213.49 2152.4,1211.2 2152.99,1209.09 2153.57,1209.1 2154.16,1211.72 2154.75,1212.67 2155.33,1213.91 2155.92,1212.27 2156.5,1212.39 2157.09,1215.83 2157.68,1218.27 2158.26,1218.12 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1211.6 L986.612 1211.6 L987.198 1211.6 L987.785 1211.6 L988.371 1211.6 L988.957 1211.6 L989.544 1211.6 L990.13 1211.6 L990.717 1211.6 L991.303 1211.6 L991.889 1211.6 L992.476 1211.6 L993.062 1211.6 L993.649 1211.6 L994.235 1211.6 L994.822 1211.6 L995.408 1211.6 L995.994 1211.6 L996.581 1211.6 L997.167 1211.6 L997.754 1211.6 L998.34 1211.6 L998.926 1211.6 L999.513 1211.6 L1000.1 1211.6 L1000.69 1211.6 L1001.27 1211.6 L1001.86 1211.6 L1002.44 1211.6 L1003.03 1211.6 L1003.62 1211.6 L1004.2 1211.6 L1004.79 1211.6 L1005.38 1211.6 L1005.96 1211.6 L1006.55 1211.6 L1007.14 1211.6 L1007.72 1211.6 L1008.31 1211.6 L1008.9 1211.6 L1009.48 1211.6 L1010.07 1211.6 L1010.65 1211.6 L1011.24 1211.6 L1011.83 1211.6 L1012.41 1211.6 L1013 1211.6 L1013.59 1211.6 L1014.17 1211.6 L1014.76 1211.6 L1015.35 1211.6 L1015.93 1211.6 L1016.52 1211.6 L1017.11 1211.6 L1017.69 1211.6 L1018.28 1211.6 L1018.86 1211.6 L1019.45 1211.6 L1020.04 1211.6 L1020.62 1211.6 L1021.21 1211.6 L1021.8 1211.6 L1022.38 1211.6 L1022.97 1211.6 L1023.56 1211.6 L1024.14 1211.6 L1024.73 1211.6 L1025.32 1211.6 L1025.9 1211.6 L1026.49 1211.6 L1027.07 1211.6 L1027.66 1211.6 L1028.25 1211.6 L1028.83 1211.6 L1029.42 1211.6 L1030.01 1211.6 L1030.59 1211.6 L1031.18 1211.6 L1031.77 1211.6 L1032.35 1211.6 L1032.94 1211.6 L1033.52 1211.6 L1034.11 1211.6 L1034.7 1211.6 L1035.28 1211.6 L1035.87 1211.6 L1036.46 1211.6 L1037.04 1211.6 L1037.63 1211.6 L1038.22 1211.6 L1038.8 1211.6 L1039.39 1211.6 L1039.98 1211.6 L1040.56 1211.6 L1041.15 1211.6 L1041.73 1211.6 L1042.32 1211.6 L1042.91 1211.6 L1043.49 1211.6 L1044.08 1211.6 L1044.67 1211.6 L1045.25 1211.6 L1045.84 1211.6 L1046.43 1211.6 L1047.01 1211.6 L1047.6 1211.6 L1048.19 1211.6 L1048.77 1211.6 L1049.36 1211.6 L1049.94 1211.6 L1050.53 1211.6 L1051.12 1211.6 L1051.7 1211.6 L1052.29 1211.6 L1052.88 1211.6 L1053.46 1211.6 L1054.05 1211.6 L1054.64 1211.6 L1055.22 1211.6 L1055.81 1211.6 L1056.39 1211.6 L1056.98 1211.6 L1057.57 1211.6 L1058.15 1211.6 L1058.74 1211.6 L1059.33 1211.6 L1059.91 1211.6 L1060.5 1211.6 L1061.09 1211.6 L1061.67 1211.6 L1062.26 1211.6 L1062.85 1211.6 L1063.43 1211.6 L1064.02 1211.6 L1064.6 1211.6 L1065.19 1211.6 L1065.78 1211.6 L1066.36 1211.6 L1066.95 1211.6 L1067.54 1211.6 L1068.12 1211.6 L1068.71 1211.6 L1069.3 1211.6 L1069.88 1211.6 L1070.47 1211.6 L1071.06 1211.6 L1071.64 1211.6 L1072.23 1211.6 L1072.81 1211.6 L1073.4 1211.6 L1073.99 1211.6 L1074.57 1211.6 L1075.16 1211.6 L1075.75 1211.6 L1076.33 1211.6 L1076.92 1211.6 L1077.51 1211.6 L1078.09 1211.6 L1078.68 1211.6 L1079.26 1211.6 L1079.85 1211.6 L1080.44 1211.6 L1081.02 1211.6 L1081.61 1211.6 L1082.2 1211.6 L1082.78 1211.6 L1083.37 1211.6 L1083.96 1211.6 L1084.54 1211.6 L1085.13 1211.6 L1085.72 1211.6 L1086.3 1211.6 L1086.89 1211.6 L1087.47 1211.6 L1088.06 1211.6 L1088.65 1211.6 L1089.23 1211.6 L1089.82 1211.6 L1090.41 1211.6 L1090.99 1211.6 L1091.58 1211.6 L1092.17 1211.6 L1092.75 1211.6 L1093.34 1211.6 L1093.93 1211.6 L1094.51 1211.6 L1095.1 1211.6 L1095.68 1211.6 L1096.27 1211.6 L1096.86 1211.6 L1097.44 1211.6 L1098.03 1211.6 L1098.62 1211.6 L1099.2 1211.6 L1099.79 1211.6 L1100.38 1211.6 L1100.96 1211.6 L1101.55 1211.6 L1102.14 1211.6 L1102.72 1211.6 L1103.31 1211.6 L1103.89 1211.6 L1104.48 1211.6 L1105.07 1211.6 L1105.65 1211.6 L1106.24 1211.6 L1106.83 1211.6 L1107.41 1211.6 L1108 1211.6 L1108.59 1211.6 L1109.17 1211.6 L1109.76 1211.6 L1110.34 1211.6 L1110.93 1211.6 L1111.52 1211.6 L1112.1 1211.6 L1112.69 1211.6 L1113.28 1211.6 L1113.86 1211.6 L1114.45 1211.6 L1115.04 1211.6 L1115.62 1211.6 L1116.21 1211.6 L1116.8 1211.6 L1117.38 1211.6 L1117.97 1211.6 L1118.55 1211.6 L1119.14 1211.6 L1119.73 1211.6 L1120.31 1211.6 L1120.9 1211.6 L1121.49 1211.6 L1122.07 1211.6 L1122.66 1211.6 L1123.25 1211.6 L1123.83 1211.6 L1124.42 1211.6 L1125.01 1211.6 L1125.59 1211.6 L1126.18 1211.6 L1126.76 1211.6 L1127.35 1211.6 L1127.94 1211.6 L1128.52 1211.6 L1129.11 1211.6 L1129.7 1211.6 L1130.28 1211.6 L1130.87 1211.6 L1131.46 1211.6 L1132.04 1211.6 L1132.63 1211.6 L1133.21 1211.6 L1133.8 1211.6 L1134.39 1211.6 L1134.97 1211.6 L1135.56 1211.6 L1136.15 1211.6 L1136.73 1211.6 L1137.32 1211.6 L1137.91 1211.6 L1138.49 1211.6 L1139.08 1211.6 L1139.67 1211.6 L1140.25 1211.6 L1140.84 1211.6 L1141.42 1211.6 L1142.01 1211.6 L1142.6 1211.6 L1143.18 1211.6 L1143.77 1211.6 L1144.36 1211.6 L1144.94 1211.6 L1145.53 1211.6 L1146.12 1211.6 L1146.7 1211.6 L1147.29 1211.6 L1147.88 1211.6 L1148.46 1211.6 L1149.05 1211.6 L1149.63 1211.6 L1150.22 1211.6 L1150.81 1211.6 L1151.39 1211.6 L1151.98 1211.6 L1152.57 1211.6 L1153.15 1211.6 L1153.74 1211.6 L1154.33 1211.6 L1154.91 1211.6 L1155.5 1211.6 L1156.09 1211.6 L1156.67 1211.6 L1157.26 1211.6 L1157.84 1211.6 L1158.43 1211.6 L1159.02 1211.6 L1159.6 1211.6 L1160.19 1211.6 L1160.78 1211.6 L1161.36 1211.6 L1161.95 1211.6 L1162.54 1211.6 L1163.12 1211.6 L1163.71 1211.6 L1164.29 1211.6 L1164.88 1211.6 L1165.47 1211.6 L1166.05 1211.6 L1166.64 1211.6 L1167.23 1211.6 L1167.81 1211.6 L1168.4 1211.6 L1168.99 1211.6 L1169.57 1211.6 L1170.16 1211.6 L1170.75 1211.6 L1171.33 1211.6 L1171.92 1211.6 L1172.5 1211.6 L1173.09 1211.6 L1173.68 1211.6 L1174.26 1211.6 L1174.85 1211.6 L1175.44 1211.6 L1176.02 1211.6 L1176.61 1211.6 L1177.2 1211.6 L1177.78 1211.6 L1178.37 1211.6 L1178.96 1211.6 L1179.54 1211.6 L1180.13 1211.6 L1180.71 1211.6 L1181.3 1211.6 L1181.89 1211.6 L1182.47 1211.6 L1183.06 1211.6 L1183.65 1211.6 L1184.23 1211.6 L1184.82 1211.6 L1185.41 1211.6 L1185.99 1211.6 L1186.58 1211.6 L1187.16 1211.6 L1187.75 1211.6 L1188.34 1211.6 L1188.92 1211.6 L1189.51 1211.6 L1190.1 1211.6 L1190.68 1211.6 L1191.27 1211.6 L1191.86 1211.6 L1192.44 1211.6 L1193.03 1211.6 L1193.62 1211.6 L1194.2 1211.6 L1194.79 1211.6 L1195.37 1211.6 L1195.96 1211.6 L1196.55 1211.6 L1197.13 1211.6 L1197.72 1211.6 L1198.31 1211.6 L1198.89 1211.6 L1199.48 1211.6 L1200.07 1211.6 L1200.65 1211.6 L1201.24 1211.6 L1201.83 1211.6 L1202.41 1211.6 L1203 1211.6 L1203.58 1211.6 L1204.17 1211.6 L1204.76 1211.6 L1205.34 1211.6 L1205.93 1211.6 L1206.52 1211.6 L1207.1 1211.6 L1207.69 1211.6 L1208.28 1211.6 L1208.86 1211.6 L1209.45 1211.6 L1210.03 1211.6 L1210.62 1211.6 L1211.21 1211.6 L1211.79 1211.6 L1212.38 1211.6 L1212.97 1211.6 L1213.55 1211.6 L1214.14 1211.6 L1214.73 1211.6 L1215.31 1211.6 L1215.9 1211.6 L1216.49 1211.6 L1217.07 1211.6 L1217.66 1211.6 L1218.24 1211.6 L1218.83 1211.6 L1219.42 1211.6 L1220 1211.6 L1220.59 1211.6 L1221.18 1211.6 L1221.76 1211.6 L1222.35 1211.6 L1222.94 1211.6 L1223.52 1211.6 L1224.11 1211.6 L1224.7 1211.6 L1225.28 1211.6 L1225.87 1211.6 L1226.45 1211.6 L1227.04 1211.6 L1227.63 1211.6 L1228.21 1211.6 L1228.8 1211.6 L1229.39 1211.6 L1229.97 1211.6 L1230.56 1211.6 L1231.15 1211.6 L1231.73 1211.6 L1232.32 1211.6 L1232.91 1211.6 L1233.49 1211.6 L1234.08 1211.6 L1234.66 1211.6 L1235.25 1211.6 L1235.84 1211.6 L1236.42 1211.6 L1237.01 1211.6 L1237.6 1211.6 L1238.18 1211.6 L1238.77 1211.6 L1239.36 1211.6 L1239.94 1211.6 L1240.53 1211.6 L1241.11 1211.6 L1241.7 1211.6 L1242.29 1211.6 L1242.87 1211.6 L1243.46 1211.6 L1244.05 1211.6 L1244.63 1211.6 L1245.22 1211.6 L1245.81 1211.6 L1246.39 1211.6 L1246.98 1211.6 L1247.57 1211.6 L1248.15 1211.6 L1248.74 1211.6 L1249.32 1211.6 L1249.91 1211.6 L1250.5 1211.6 L1251.08 1211.6 L1251.67 1211.6 L1252.26 1211.6 L1252.84 1211.6 L1253.43 1211.6 L1254.02 1211.6 L1254.6 1211.6 L1255.19 1211.6 L1255.78 1211.6 L1256.36 1211.6 L1256.95 1211.6 L1257.53 1211.6 L1258.12 1211.6 L1258.71 1211.6 L1259.29 1211.6 L1259.88 1211.6 L1260.47 1211.6 L1261.05 1211.6 L1261.64 1211.6 L1262.23 1211.6 L1262.81 1211.6 L1263.4 1211.6 L1263.98 1211.6 L1264.57 1211.6 L1265.16 1211.6 L1265.74 1211.6 L1266.33 1211.6 L1266.92 1211.6 L1267.5 1211.6 L1268.09 1211.6 L1268.68 1211.6 L1269.26 1211.6 L1269.85 1211.6 L1270.44 1211.6 L1271.02 1211.6 L1271.61 1211.6 L1272.19 1211.6 L1272.78 1211.6 L1273.37 1211.6 L1273.95 1211.6 L1274.54 1211.6 L1275.13 1211.6 L1275.71 1211.6 L1276.3 1211.6 L1276.89 1211.6 L1277.47 1211.6 L1278.06 1211.6 L1278.65 1211.6 L1279.23 1211.6 L1279.82 1211.6 L1280.4 1211.6 L1280.99 1211.6 L1281.58 1211.6 L1282.16 1211.6 L1282.75 1211.6 L1283.34 1211.6 L1283.92 1211.6 L1284.51 1211.6 L1285.1 1211.6 L1285.68 1211.6 L1286.27 1211.6 L1286.86 1211.6 L1287.44 1211.6 L1288.03 1211.6 L1288.61 1211.6 L1289.2 1211.6 L1289.79 1211.6 L1290.37 1211.6 L1290.96 1211.6 L1291.55 1211.6 L1292.13 1211.6 L1292.72 1211.6 L1293.31 1211.6 L1293.89 1211.6 L1294.48 1211.6 L1295.06 1211.6 L1295.65 1211.6 L1296.24 1211.6 L1296.82 1211.6 L1297.41 1211.6 L1298 1211.6 L1298.58 1211.6 L1299.17 1211.6 L1299.76 1211.6 L1300.34 1211.6 L1300.93 1211.6 L1301.52 1211.6 L1302.1 1211.6 L1302.69 1211.6 L1303.27 1211.6 L1303.86 1211.6 L1304.45 1211.6 L1305.03 1211.6 L1305.62 1211.6 L1306.21 1211.6 L1306.79 1211.6 L1307.38 1211.6 L1307.97 1211.6 L1308.55 1211.6 L1309.14 1211.6 L1309.73 1211.6 L1310.31 1211.6 L1310.9 1211.6 L1311.48 1211.6 L1312.07 1211.6 L1312.66 1211.6 L1313.24 1211.6 L1313.83 1211.6 L1314.42 1211.6 L1315 1211.6 L1315.59 1211.6 L1316.18 1211.6 L1316.76 1211.6 L1317.35 1211.6 L1317.93 1211.6 L1318.52 1211.6 L1319.11 1211.6 L1319.69 1211.6 L1320.28 1211.6 L1320.87 1211.6 L1321.45 1211.6 L1322.04 1211.6 L1322.63 1211.6 L1323.21 1211.6 L1323.8 1211.6 L1324.39 1211.6 L1324.97 1211.6 L1325.56 1211.6 L1326.14 1211.6 L1326.73 1211.6 L1327.32 1211.6 L1327.9 1211.6 L1328.49 1211.6 L1329.08 1211.6 L1329.66 1211.6 L1330.25 1211.6 L1330.84 1211.6 L1331.42 1211.6 L1332.01 1211.6 L1332.6 1211.6 L1333.18 1211.6 L1333.77 1211.6 L1334.35 1211.6 L1334.94 1211.6 L1335.53 1211.6 L1336.11 1211.6 L1336.7 1211.6 L1337.29 1211.6 L1337.87 1211.6 L1338.46 1211.6 L1339.05 1211.6 L1339.63 1211.6 L1340.22 1211.6 L1340.8 1211.6 L1341.39 1211.6 L1341.98 1211.6 L1342.56 1211.6 L1343.15 1211.6 L1343.74 1211.6 L1344.32 1211.6 L1344.91 1211.6 L1345.5 1211.6 L1346.08 1211.6 L1346.67 1211.6 L1347.26 1211.6 L1347.84 1211.6 L1348.43 1211.6 L1349.01 1211.6 L1349.6 1211.6 L1350.19 1211.6 L1350.77 1211.6 L1351.36 1211.6 L1351.95 1211.6 L1352.53 1211.6 L1353.12 1211.6 L1353.71 1211.6 L1354.29 1211.6 L1354.88 1211.6 L1355.47 1211.6 L1356.05 1211.6 L1356.64 1211.6 L1357.22 1211.6 L1357.81 1211.6 L1358.4 1211.6 L1358.98 1211.6 L1359.57 1211.6 L1360.16 1211.6 L1360.74 1211.6 L1361.33 1211.6 L1361.92 1211.6 L1362.5 1211.6 L1363.09 1211.6 L1363.68 1211.6 L1364.26 1211.6 L1364.85 1211.6 L1365.43 1211.6 L1366.02 1211.6 L1366.61 1211.6 L1367.19 1211.6 L1367.78 1211.6 L1368.37 1211.6 L1368.95 1211.6 L1369.54 1211.6 L1370.13 1211.6 L1370.71 1211.6 L1371.3 1211.6 L1371.88 1211.6 L1372.47 1211.6 L1373.06 1211.6 L1373.64 1211.6 L1374.23 1211.6 L1374.82 1211.6 L1375.4 1211.6 L1375.99 1211.6 L1376.58 1211.6 L1377.16 1211.6 L1377.75 1211.6 L1378.34 1211.6 L1378.92 1211.6 L1379.51 1211.6 L1380.09 1211.6 L1380.68 1211.6 L1381.27 1211.6 L1381.85 1211.6 L1382.44 1211.6 L1383.03 1211.6 L1383.61 1211.6 L1384.2 1211.6 L1384.79 1211.6 L1385.37 1211.6 L1385.96 1211.6 L1386.55 1211.6 L1387.13 1211.6 L1387.72 1211.6 L1388.3 1211.6 L1388.89 1211.6 L1389.48 1211.6 L1390.06 1211.6 L1390.65 1211.6 L1391.24 1211.6 L1391.82 1211.6 L1392.41 1211.6 L1393 1211.6 L1393.58 1211.6 L1394.17 1211.6 L1394.75 1211.6 L1395.34 1211.6 L1395.93 1211.6 L1396.51 1211.6 L1397.1 1211.6 L1397.69 1211.6 L1398.27 1211.6 L1398.86 1211.6 L1399.45 1211.6 L1400.03 1211.6 L1400.62 1211.6 L1401.21 1211.6 L1401.79 1211.6 L1402.38 1211.6 L1402.96 1211.6 L1403.55 1211.6 L1404.14 1211.6 L1404.72 1211.6 L1405.31 1211.6 L1405.9 1211.6 L1406.48 1211.6 L1407.07 1211.6 L1407.66 1211.6 L1408.24 1211.6 L1408.83 1211.6 L1409.42 1211.6 L1410 1211.6 L1410.59 1211.6 L1411.17 1211.6 L1411.76 1211.6 L1412.35 1211.6 L1412.93 1211.6 L1413.52 1211.6 L1414.11 1211.6 L1414.69 1211.6 L1415.28 1211.6 L1415.87 1211.6 L1416.45 1211.6 L1417.04 1211.6 L1417.63 1211.6 L1418.21 1211.6 L1418.8 1211.6 L1419.38 1211.6 L1419.97 1211.6 L1420.56 1211.6 L1421.14 1211.6 L1421.73 1211.6 L1422.32 1211.6 L1422.9 1211.6 L1423.49 1211.6 L1424.08 1211.6 L1424.66 1211.6 L1425.25 1211.6 L1425.83 1211.6 L1426.42 1211.6 L1427.01 1211.6 L1427.59 1211.6 L1428.18 1211.6 L1428.77 1211.6 L1429.35 1211.6 L1429.94 1211.6 L1430.53 1211.6 L1431.11 1211.6 L1431.7 1211.6 L1432.29 1211.6 L1432.87 1211.6 L1433.46 1211.6 L1434.04 1211.6 L1434.63 1211.6 L1435.22 1211.6 L1435.8 1211.6 L1436.39 1211.6 L1436.98 1211.6 L1437.56 1211.6 L1438.15 1211.6 L1438.74 1211.6 L1439.32 1211.6 L1439.91 1211.6 L1440.5 1211.6 L1441.08 1211.6 L1441.67 1211.6 L1442.25 1211.6 L1442.84 1211.6 L1443.43 1211.6 L1444.01 1211.6 L1444.6 1211.6 L1445.19 1211.6 L1445.77 1211.6 L1446.36 1211.6 L1446.95 1211.6 L1447.53 1211.6 L1448.12 1211.6 L1448.7 1211.6 L1449.29 1211.6 L1449.88 1211.6 L1450.46 1211.6 L1451.05 1211.6 L1451.64 1211.6 L1452.22 1211.6 L1452.81 1211.6 L1453.4 1211.6 L1453.98 1211.6 L1454.57 1211.6 L1455.16 1211.6 L1455.74 1211.6 L1456.33 1211.6 L1456.91 1211.6 L1457.5 1211.6 L1458.09 1211.6 L1458.67 1211.6 L1459.26 1211.6 L1459.85 1211.6 L1460.43 1211.6 L1461.02 1211.6 L1461.61 1211.6 L1462.19 1211.6 L1462.78 1211.6 L1463.37 1211.6 L1463.95 1211.6 L1464.54 1211.6 L1465.12 1211.6 L1465.71 1211.6 L1466.3 1211.6 L1466.88 1211.6 L1467.47 1211.6 L1468.06 1211.6 L1468.64 1211.6 L1469.23 1211.6 L1469.82 1211.6 L1470.4 1211.6 L1470.99 1211.6 L1471.57 1211.6 L1472.16 1211.6 L1472.75 1211.6 L1473.33 1211.6 L1473.92 1211.6 L1474.51 1211.6 L1475.09 1211.6 L1475.68 1211.6 L1476.27 1211.6 L1476.85 1211.6 L1477.44 1211.6 L1478.03 1211.6 L1478.61 1211.6 L1479.2 1211.6 L1479.78 1211.6 L1480.37 1211.6 L1480.96 1211.6 L1481.54 1211.6 L1482.13 1211.6 L1482.72 1211.6 L1483.3 1211.6 L1483.89 1211.6 L1484.48 1211.6 L1485.06 1211.6 L1485.65 1211.6 L1486.24 1211.6 L1486.82 1211.6 L1487.41 1211.6 L1487.99 1211.6 L1488.58 1211.6 L1489.17 1211.6 L1489.75 1211.6 L1490.34 1211.6 L1490.93 1211.6 L1491.51 1211.6 L1492.1 1211.6 L1492.69 1211.6 L1493.27 1211.6 L1493.86 1211.6 L1494.45 1211.6 L1495.03 1211.6 L1495.62 1211.6 L1496.2 1211.6 L1496.79 1211.6 L1497.38 1211.6 L1497.96 1211.6 L1498.55 1211.6 L1499.14 1211.6 L1499.72 1211.6 L1500.31 1211.6 L1500.9 1211.6 L1501.48 1211.6 L1502.07 1211.6 L1502.65 1211.6 L1503.24 1211.6 L1503.83 1211.6 L1504.41 1211.6 L1505 1211.6 L1505.59 1211.6 L1506.17 1211.6 L1506.76 1211.6 L1507.35 1211.6 L1507.93 1211.6 L1508.52 1211.6 L1509.11 1211.6 L1509.69 1211.6 L1510.28 1211.6 L1510.86 1211.6 L1511.45 1211.6 L1512.04 1211.6 L1512.62 1211.6 L1513.21 1211.6 L1513.8 1211.6 L1514.38 1211.6 L1514.97 1211.6 L1515.56 1211.6 L1516.14 1211.6 L1516.73 1211.6 L1517.32 1211.6 L1517.9 1211.6 L1518.49 1211.6 L1519.07 1211.6 L1519.66 1211.6 L1520.25 1211.6 L1520.83 1211.6 L1521.42 1211.6 L1522.01 1211.6 L1522.59 1211.6 L1523.18 1211.6 L1523.77 1211.6 L1524.35 1211.6 L1524.94 1211.6 L1525.52 1211.6 L1526.11 1211.6 L1526.7 1211.6 L1527.28 1211.6 L1527.87 1211.6 L1528.46 1211.6 L1529.04 1211.6 L1529.63 1211.6 L1530.22 1211.6 L1530.8 1211.6 L1531.39 1211.6 L1531.98 1211.6 L1532.56 1211.6 L1533.15 1211.6 L1533.73 1211.6 L1534.32 1211.6 L1534.91 1211.6 L1535.49 1211.6 L1536.08 1211.6 L1536.67 1211.6 L1537.25 1211.6 L1537.84 1211.6 L1538.43 1211.6 L1539.01 1211.6 L1539.6 1211.6 L1540.19 1211.6 L1540.77 1211.6 L1541.36 1211.6 L1541.94 1211.6 L1542.53 1211.6 L1543.12 1211.6 L1543.7 1211.6 L1544.29 1211.6 L1544.88 1211.6 L1545.46 1211.6 L1546.05 1211.6 L1546.64 1211.6 L1547.22 1211.6 L1547.81 1211.6 L1548.4 1211.6 L1548.98 1211.6 L1549.57 1211.6 L1550.15 1211.6 L1550.74 1211.6 L1551.33 1211.6 L1551.91 1211.6 L1552.5 1211.6 L1553.09 1211.6 L1553.67 1211.6 L1554.26 1211.6 L1554.85 1211.6 L1555.43 1211.6 L1556.02 1211.6 L1556.6 1211.6 L1557.19 1211.6 L1557.78 1211.6 L1558.36 1211.6 L1558.95 1211.6 L1559.54 1211.6 L1560.12 1211.6 L1560.71 1211.6 L1561.3 1211.6 L1561.88 1211.6 L1562.47 1211.6 L1563.06 1211.6 L1563.64 1211.6 L1564.23 1211.6 L1564.81 1211.6 L1565.4 1211.6 L1565.99 1211.6 L1566.57 1211.6 L1567.16 1211.6 L1567.75 1211.6 L1568.33 1211.6 L1568.92 1211.6 L1569.51 1211.6 L1570.09 1211.6 L1570.68 1211.6 L1571.27 1211.6 L1571.85 1211.6 L1572.44 1211.6 L1573.02 1211.6 L1573.61 1211.6 L1574.2 1211.6 L1574.78 1211.6 L1575.37 1211.6 L1575.96 1211.6 L1576.54 1211.6 L1577.13 1211.6 L1577.72 1211.6 L1578.3 1211.6 L1578.89 1211.6 L1579.47 1211.6 L1580.06 1211.6 L1580.65 1211.6 L1581.23 1211.6 L1581.82 1211.6 L1582.41 1211.6 L1582.99 1211.6 L1583.58 1211.6 L1584.17 1211.6 L1584.75 1211.6 L1585.34 1211.6 L1585.93 1211.6 L1586.51 1211.6 L1587.1 1211.6 L1587.68 1211.6 L1588.27 1211.6 L1588.86 1211.6 L1589.44 1211.6 L1590.03 1211.6 L1590.62 1211.6 L1591.2 1211.6 L1591.79 1211.6 L1592.38 1211.6 L1592.96 1211.6 L1593.55 1211.6 L1594.14 1211.6 L1594.72 1211.6 L1595.31 1211.6 L1595.89 1211.6 L1596.48 1211.6 L1597.07 1211.6 L1597.65 1211.6 L1598.24 1211.6 L1598.83 1211.6 L1599.41 1211.6 L1600 1211.6 L1600.59 1211.6 L1601.17 1211.6 L1601.76 1211.6 L1602.34 1211.6 L1602.93 1211.6 L1603.52 1211.6 L1604.1 1211.6 L1604.69 1211.6 L1605.28 1211.6 L1605.86 1211.6 L1606.45 1211.6 L1607.04 1211.6 L1607.62 1211.6 L1608.21 1211.6 L1608.8 1211.6 L1609.38 1211.6 L1609.97 1211.6 L1610.55 1211.6 L1611.14 1211.6 L1611.73 1211.6 L1612.31 1211.6 L1612.9 1211.6 L1613.49 1211.6 L1614.07 1211.6 L1614.66 1211.6 L1615.25 1211.6 L1615.83 1211.6 L1616.42 1211.6 L1617.01 1211.6 L1617.59 1211.6 L1618.18 1211.6 L1618.76 1211.6 L1619.35 1211.6 L1619.94 1211.6 L1620.52 1211.6 L1621.11 1211.6 L1621.7 1211.6 L1622.28 1211.6 L1622.87 1211.6 L1623.46 1211.6 L1624.04 1211.6 L1624.63 1211.6 L1625.22 1211.6 L1625.8 1211.6 L1626.39 1211.6 L1626.97 1211.6 L1627.56 1211.6 L1628.15 1211.6 L1628.73 1211.6 L1629.32 1211.6 L1629.91 1211.6 L1630.49 1211.6 L1631.08 1211.6 L1631.67 1211.6 L1632.25 1211.6 L1632.84 1211.6 L1633.42 1211.6 L1634.01 1211.6 L1634.6 1211.6 L1635.18 1211.6 L1635.77 1211.6 L1636.36 1211.6 L1636.94 1211.6 L1637.53 1211.6 L1638.12 1211.6 L1638.7 1211.6 L1639.29 1211.6 L1639.88 1211.6 L1640.46 1211.6 L1641.05 1211.6 L1641.63 1211.6 L1642.22 1211.6 L1642.81 1211.6 L1643.39 1211.6 L1643.98 1211.6 L1644.57 1211.6 L1645.15 1211.6 L1645.74 1211.6 L1646.33 1211.6 L1646.91 1211.6 L1647.5 1211.6 L1648.09 1211.6 L1648.67 1211.6 L1649.26 1211.6 L1649.84 1211.6 L1650.43 1211.6 L1651.02 1211.6 L1651.6 1211.6 L1652.19 1211.6 L1652.78 1211.6 L1653.36 1211.6 L1653.95 1211.6 L1654.54 1211.6 L1655.12 1211.6 L1655.71 1211.6 L1656.29 1211.6 L1656.88 1211.6 L1657.47 1211.6 L1658.05 1211.6 L1658.64 1211.6 L1659.23 1211.6 L1659.81 1211.6 L1660.4 1211.6 L1660.99 1211.6 L1661.57 1211.6 L1662.16 1211.6 L1662.75 1211.6 L1663.33 1211.6 L1663.92 1211.6 L1664.5 1211.6 L1665.09 1211.6 L1665.68 1211.6 L1666.26 1211.6 L1666.85 1211.6 L1667.44 1211.6 L1668.02 1211.6 L1668.61 1211.6 L1669.2 1211.6 L1669.78 1211.6 L1670.37 1211.6 L1670.96 1211.6 L1671.54 1211.6 L1672.13 1211.6 L1672.71 1211.6 L1673.3 1211.6 L1673.89 1211.6 L1674.47 1211.6 L1675.06 1211.6 L1675.65 1211.6 L1676.23 1211.6 L1676.82 1211.6 L1677.41 1211.6 L1677.99 1211.6 L1678.58 1211.6 L1679.17 1211.6 L1679.75 1211.6 L1680.34 1211.6 L1680.92 1211.6 L1681.51 1211.6 L1682.1 1211.6 L1682.68 1211.6 L1683.27 1211.6 L1683.86 1211.6 L1684.44 1211.6 L1685.03 1211.6 L1685.62 1211.6 L1686.2 1211.6 L1686.79 1211.6 L1687.37 1211.6 L1687.96 1211.6 L1688.55 1211.6 L1689.13 1211.6 L1689.72 1211.6 L1690.31 1211.6 L1690.89 1211.6 L1691.48 1211.6 L1692.07 1211.6 L1692.65 1211.6 L1693.24 1211.6 L1693.83 1211.6 L1694.41 1211.6 L1695 1211.6 L1695.58 1211.6 L1696.17 1211.6 L1696.76 1211.6 L1697.34 1211.6 L1697.93 1211.6 L1698.52 1211.6 L1699.1 1211.6 L1699.69 1211.6 L1700.28 1211.6 L1700.86 1211.6 L1701.45 1211.6 L1702.04 1211.6 L1702.62 1211.6 L1703.21 1211.6 L1703.79 1211.6 L1704.38 1211.6 L1704.97 1211.6 L1705.55 1211.6 L1706.14 1211.6 L1706.73 1211.6 L1707.31 1211.6 L1707.9 1211.6 L1708.49 1211.6 L1709.07 1211.6 L1709.66 1211.6 L1710.24 1211.6 L1710.83 1211.6 L1711.42 1211.6 L1712 1211.6 L1712.59 1211.6 L1713.18 1211.6 L1713.76 1211.6 L1714.35 1211.6 L1714.94 1211.6 L1715.52 1211.6 L1716.11 1211.6 L1716.7 1211.6 L1717.28 1211.6 L1717.87 1211.6 L1718.45 1211.6 L1719.04 1211.6 L1719.63 1211.6 L1720.21 1211.6 L1720.8 1211.6 L1721.39 1211.6 L1721.97 1211.6 L1722.56 1211.6 L1723.15 1211.6 L1723.73 1211.6 L1724.32 1211.6 L1724.91 1211.6 L1725.49 1211.6 L1726.08 1211.6 L1726.66 1211.6 L1727.25 1211.6 L1727.84 1211.6 L1728.42 1211.6 L1729.01 1211.6 L1729.6 1211.6 L1730.18 1211.6 L1730.77 1211.6 L1731.36 1211.6 L1731.94 1211.6 L1732.53 1211.6 L1733.11 1211.6 L1733.7 1211.6 L1734.29 1211.6 L1734.87 1211.6 L1735.46 1211.6 L1736.05 1211.6 L1736.63 1211.6 L1737.22 1211.6 L1737.81 1211.6 L1738.39 1211.6 L1738.98 1211.6 L1739.57 1211.6 L1740.15 1211.6 L1740.74 1211.6 L1741.32 1211.6 L1741.91 1211.6 L1742.5 1211.6 L1743.08 1211.6 L1743.67 1211.6 L1744.26 1211.6 L1744.84 1211.6 L1745.43 1211.6 L1746.02 1211.6 L1746.6 1211.6 L1747.19 1211.6 L1747.78 1211.6 L1748.36 1211.6 L1748.95 1211.6 L1749.53 1211.6 L1750.12 1211.6 L1750.71 1211.6 L1751.29 1211.6 L1751.88 1211.6 L1752.47 1211.6 L1753.05 1211.6 L1753.64 1211.6 L1754.23 1211.6 L1754.81 1211.6 L1755.4 1211.6 L1755.99 1211.6 L1756.57 1211.6 L1757.16 1211.6 L1757.74 1211.6 L1758.33 1211.6 L1758.92 1211.6 L1759.5 1211.6 L1760.09 1211.6 L1760.68 1211.6 L1761.26 1211.6 L1761.85 1211.6 L1762.44 1211.6 L1763.02 1211.6 L1763.61 1211.6 L1764.19 1211.6 L1764.78 1211.6 L1765.37 1211.6 L1765.95 1211.6 L1766.54 1211.6 L1767.13 1211.6 L1767.71 1211.6 L1768.3 1211.6 L1768.89 1211.6 L1769.47 1211.6 L1770.06 1211.6 L1770.65 1211.6 L1771.23 1211.6 L1771.82 1211.6 L1772.4 1211.6 L1772.99 1211.6 L1773.58 1211.6 L1774.16 1211.6 L1774.75 1211.6 L1775.34 1211.6 L1775.92 1211.6 L1776.51 1211.6 L1777.1 1211.6 L1777.68 1211.6 L1778.27 1211.6 L1778.86 1211.6 L1779.44 1211.6 L1780.03 1211.6 L1780.61 1211.6 L1781.2 1211.6 L1781.79 1211.6 L1782.37 1211.6 L1782.96 1211.6 L1783.55 1211.6 L1784.13 1211.6 L1784.72 1211.6 L1785.31 1211.6 L1785.89 1211.6 L1786.48 1211.6 L1787.06 1211.6 L1787.65 1211.6 L1788.24 1211.6 L1788.82 1211.6 L1789.41 1211.6 L1790 1211.6 L1790.58 1211.6 L1791.17 1211.6 L1791.76 1211.6 L1792.34 1211.6 L1792.93 1211.6 L1793.52 1211.6 L1794.1 1211.6 L1794.69 1211.6 L1795.27 1211.6 L1795.86 1211.6 L1796.45 1211.6 L1797.03 1211.6 L1797.62 1211.6 L1798.21 1211.6 L1798.79 1211.6 L1799.38 1211.6 L1799.97 1211.6 L1800.55 1211.6 L1801.14 1211.6 L1801.73 1211.6 L1802.31 1211.6 L1802.9 1211.6 L1803.48 1211.6 L1804.07 1211.6 L1804.66 1211.6 L1805.24 1211.6 L1805.83 1211.6 L1806.42 1211.6 L1807 1211.6 L1807.59 1211.6 L1808.18 1211.6 L1808.76 1211.6 L1809.35 1211.6 L1809.94 1211.6 L1810.52 1211.6 L1811.11 1211.6 L1811.69 1211.6 L1812.28 1211.6 L1812.87 1211.6 L1813.45 1211.6 L1814.04 1211.6 L1814.63 1211.6 L1815.21 1211.6 L1815.8 1211.6 L1816.39 1211.6 L1816.97 1211.6 L1817.56 1211.6 L1818.14 1211.6 L1818.73 1211.6 L1819.32 1211.6 L1819.9 1211.6 L1820.49 1211.6 L1821.08 1211.6 L1821.66 1211.6 L1822.25 1211.6 L1822.84 1211.6 L1823.42 1211.6 L1824.01 1211.6 L1824.6 1211.6 L1825.18 1211.6 L1825.77 1211.6 L1826.35 1211.6 L1826.94 1211.6 L1827.53 1211.6 L1828.11 1211.6 L1828.7 1211.6 L1829.29 1211.6 L1829.87 1211.6 L1830.46 1211.6 L1831.05 1211.6 L1831.63 1211.6 L1832.22 1211.6 L1832.81 1211.6 L1833.39 1211.6 L1833.98 1211.6 L1834.56 1211.6 L1835.15 1211.6 L1835.74 1211.6 L1836.32 1211.6 L1836.91 1211.6 L1837.5 1211.6 L1838.08 1211.6 L1838.67 1211.6 L1839.26 1211.6 L1839.84 1211.6 L1840.43 1211.6 L1841.01 1211.6 L1841.6 1211.6 L1842.19 1211.6 L1842.77 1211.6 L1843.36 1211.6 L1843.95 1211.6 L1844.53 1211.6 L1845.12 1211.6 L1845.71 1211.6 L1846.29 1211.6 L1846.88 1211.6 L1847.47 1211.6 L1848.05 1211.6 L1848.64 1211.6 L1849.22 1211.6 L1849.81 1211.6 L1850.4 1211.6 L1850.98 1211.6 L1851.57 1211.6 L1852.16 1211.6 L1852.74 1211.6 L1853.33 1211.6 L1853.92 1211.6 L1854.5 1211.6 L1855.09 1211.6 L1855.68 1211.6 L1856.26 1211.6 L1856.85 1211.6 L1857.43 1211.6 L1858.02 1211.6 L1858.61 1211.6 L1859.19 1211.6 L1859.78 1211.6 L1860.37 1211.6 L1860.95 1211.6 L1861.54 1211.6 L1862.13 1211.6 L1862.71 1211.6 L1863.3 1211.6 L1863.88 1211.6 L1864.47 1211.6 L1865.06 1211.6 L1865.64 1211.6 L1866.23 1211.6 L1866.82 1211.6 L1867.4 1211.6 L1867.99 1211.6 L1868.58 1211.6 L1869.16 1211.6 L1869.75 1211.6 L1870.34 1211.6 L1870.92 1211.6 L1871.51 1211.6 L1872.09 1211.6 L1872.68 1211.6 L1873.27 1211.6 L1873.85 1211.6 L1874.44 1211.6 L1875.03 1211.6 L1875.61 1211.6 L1876.2 1211.6 L1876.79 1211.6 L1877.37 1211.6 L1877.96 1211.6 L1878.55 1211.6 L1879.13 1211.6 L1879.72 1211.6 L1880.3 1211.6 L1880.89 1211.6 L1881.48 1211.6 L1882.06 1211.6 L1882.65 1211.6 L1883.24 1211.6 L1883.82 1211.6 L1884.41 1211.6 L1885 1211.6 L1885.58 1211.6 L1886.17 1211.6 L1886.76 1211.6 L1887.34 1211.6 L1887.93 1211.6 L1888.51 1211.6 L1889.1 1211.6 L1889.69 1211.6 L1890.27 1211.6 L1890.86 1211.6 L1891.45 1211.6 L1892.03 1211.6 L1892.62 1211.6 L1893.21 1211.6 L1893.79 1211.6 L1894.38 1211.6 L1894.96 1211.6 L1895.55 1211.6 L1896.14 1211.6 L1896.72 1211.6 L1897.31 1211.6 L1897.9 1211.6 L1898.48 1211.6 L1899.07 1211.6 L1899.66 1211.6 L1900.24 1211.6 L1900.83 1211.6 L1901.42 1211.6 L1902 1211.6 L1902.59 1211.6 L1903.17 1211.6 L1903.76 1211.6 L1904.35 1211.6 L1904.93 1211.6 L1905.52 1211.6 L1906.11 1211.6 L1906.69 1211.6 L1907.28 1211.6 L1907.87 1211.6 L1908.45 1211.6 L1909.04 1211.6 L1909.63 1211.6 L1910.21 1211.6 L1910.8 1211.6 L1911.38 1211.6 L1911.97 1211.6 L1912.56 1211.6 L1913.14 1211.6 L1913.73 1211.6 L1914.32 1211.6 L1914.9 1211.6 L1915.49 1211.6 L1916.08 1211.6 L1916.66 1211.6 L1917.25 1211.6 L1917.83 1211.6 L1918.42 1211.6 L1919.01 1211.6 L1919.59 1211.6 L1920.18 1211.6 L1920.77 1211.6 L1921.35 1211.6 L1921.94 1211.6 L1922.53 1211.6 L1923.11 1211.6 L1923.7 1211.6 L1924.29 1211.6 L1924.87 1211.6 L1925.46 1211.6 L1926.04 1211.6 L1926.63 1211.6 L1927.22 1211.6 L1927.8 1211.6 L1928.39 1211.6 L1928.98 1211.6 L1929.56 1211.6 L1930.15 1211.6 L1930.74 1211.6 L1931.32 1211.6 L1931.91 1211.6 L1932.5 1211.6 L1933.08 1211.6 L1933.67 1211.6 L1934.25 1211.6 L1934.84 1211.6 L1935.43 1211.6 L1936.01 1211.6 L1936.6 1211.6 L1937.19 1211.6 L1937.77 1211.6 L1938.36 1211.6 L1938.95 1211.6 L1939.53 1211.6 L1940.12 1211.6 L1940.71 1211.6 L1941.29 1211.6 L1941.88 1211.6 L1942.46 1211.6 L1943.05 1211.6 L1943.64 1211.6 L1944.22 1211.6 L1944.81 1211.6 L1945.4 1211.6 L1945.98 1211.6 L1946.57 1211.6 L1947.16 1211.6 L1947.74 1211.6 L1948.33 1211.6 L1948.91 1211.6 L1949.5 1211.6 L1950.09 1211.6 L1950.67 1211.6 L1951.26 1211.6 L1951.85 1211.6 L1952.43 1211.6 L1953.02 1211.6 L1953.61 1211.6 L1954.19 1211.6 L1954.78 1211.6 L1955.37 1211.6 L1955.95 1211.6 L1956.54 1211.6 L1957.12 1211.6 L1957.71 1211.6 L1958.3 1211.6 L1958.88 1211.6 L1959.47 1211.6 L1960.06 1211.6 L1960.64 1211.6 L1961.23 1211.6 L1961.82 1211.6 L1962.4 1211.6 L1962.99 1211.6 L1963.58 1211.6 L1964.16 1211.6 L1964.75 1211.6 L1965.33 1211.6 L1965.92 1211.6 L1966.51 1211.6 L1967.09 1211.6 L1967.68 1211.6 L1968.27 1211.6 L1968.85 1211.6 L1969.44 1211.6 L1970.03 1211.6 L1970.61 1211.6 L1971.2 1211.6 L1971.78 1211.6 L1972.37 1211.6 L1972.96 1211.6 L1973.54 1211.6 L1974.13 1211.6 L1974.72 1211.6 L1975.3 1211.6 L1975.89 1211.6 L1976.48 1211.6 L1977.06 1211.6 L1977.65 1211.6 L1978.24 1211.6 L1978.82 1211.6 L1979.41 1211.6 L1979.99 1211.6 L1980.58 1211.6 L1981.17 1211.6 L1981.75 1211.6 L1982.34 1211.6 L1982.93 1211.6 L1983.51 1211.6 L1984.1 1211.6 L1984.69 1211.6 L1985.27 1211.6 L1985.86 1211.6 L1986.45 1211.6 L1987.03 1211.6 L1987.62 1211.6 L1988.2 1211.6 L1988.79 1211.6 L1989.38 1211.6 L1989.96 1211.6 L1990.55 1211.6 L1991.14 1211.6 L1991.72 1211.6 L1992.31 1211.6 L1992.9 1211.6 L1993.48 1211.6 L1994.07 1211.6 L1994.65 1211.6 L1995.24 1211.6 L1995.83 1211.6 L1996.41 1211.6 L1997 1211.6 L1997.59 1211.6 L1998.17 1211.6 L1998.76 1211.6 L1999.35 1211.6 L1999.93 1211.6 L2000.52 1211.6 L2001.11 1211.6 L2001.69 1211.6 L2002.28 1211.6 L2002.86 1211.6 L2003.45 1211.6 L2004.04 1211.6 L2004.62 1211.6 L2005.21 1211.6 L2005.8 1211.6 L2006.38 1211.6 L2006.97 1211.6 L2007.56 1211.6 L2008.14 1211.6 L2008.73 1211.6 L2009.32 1211.6 L2009.9 1211.6 L2010.49 1211.6 L2011.07 1211.6 L2011.66 1211.6 L2012.25 1211.6 L2012.83 1211.6 L2013.42 1211.6 L2014.01 1211.6 L2014.59 1211.6 L2015.18 1211.6 L2015.77 1211.6 L2016.35 1211.6 L2016.94 1211.6 L2017.53 1211.6 L2018.11 1211.6 L2018.7 1211.6 L2019.28 1211.6 L2019.87 1211.6 L2020.46 1211.6 L2021.04 1211.6 L2021.63 1211.6 L2022.22 1211.6 L2022.8 1211.6 L2023.39 1211.6 L2023.98 1211.6 L2024.56 1211.6 L2025.15 1211.6 L2025.73 1211.6 L2026.32 1211.6 L2026.91 1211.6 L2027.49 1211.6 L2028.08 1211.6 L2028.67 1211.6 L2029.25 1211.6 L2029.84 1211.6 L2030.43 1211.6 L2031.01 1211.6 L2031.6 1211.6 L2032.19 1211.6 L2032.77 1211.6 L2033.36 1211.6 L2033.94 1211.6 L2034.53 1211.6 L2035.12 1211.6 L2035.7 1211.6 L2036.29 1211.6 L2036.88 1211.6 L2037.46 1211.6 L2038.05 1211.6 L2038.64 1211.6 L2039.22 1211.6 L2039.81 1211.6 L2040.4 1211.6 L2040.98 1211.6 L2041.57 1211.6 L2042.15 1211.6 L2042.74 1211.6 L2043.33 1211.6 L2043.91 1211.6 L2044.5 1211.6 L2045.09 1211.6 L2045.67 1211.6 L2046.26 1211.6 L2046.85 1211.6 L2047.43 1211.6 L2048.02 1211.6 L2048.6 1211.6 L2049.19 1211.6 L2049.78 1211.6 L2050.36 1211.6 L2050.95 1211.6 L2051.54 1211.6 L2052.12 1211.6 L2052.71 1211.6 L2053.3 1211.6 L2053.88 1211.6 L2054.47 1211.6 L2055.06 1211.6 L2055.64 1211.6 L2056.23 1211.6 L2056.81 1211.6 L2057.4 1211.6 L2057.99 1211.6 L2058.57 1211.6 L2059.16 1211.6 L2059.75 1211.6 L2060.33 1211.6 L2060.92 1211.6 L2061.51 1211.6 L2062.09 1211.6 L2062.68 1211.6 L2063.27 1211.6 L2063.85 1211.6 L2064.44 1211.6 L2065.02 1211.6 L2065.61 1211.6 L2066.2 1211.6 L2066.78 1211.6 L2067.37 1211.6 L2067.96 1211.6 L2068.54 1211.6 L2069.13 1211.6 L2069.72 1211.6 L2070.3 1211.6 L2070.89 1211.6 L2071.48 1211.6 L2072.06 1211.6 L2072.65 1211.6 L2073.23 1211.6 L2073.82 1211.6 L2074.41 1211.6 L2074.99 1211.6 L2075.58 1211.6 L2076.17 1211.6 L2076.75 1211.6 L2077.34 1211.6 L2077.93 1211.6 L2078.51 1211.6 L2079.1 1211.6 L2079.68 1211.6 L2080.27 1211.6 L2080.86 1211.6 L2081.44 1211.6 L2082.03 1211.6 L2082.62 1211.6 L2083.2 1211.6 L2083.79 1211.6 L2084.38 1211.6 L2084.96 1211.6 L2085.55 1211.6 L2086.14 1211.6 L2086.72 1211.6 L2087.31 1211.6 L2087.89 1211.6 L2088.48 1211.6 L2089.07 1211.6 L2089.65 1211.6 L2090.24 1211.6 L2090.83 1211.6 L2091.41 1211.6 L2092 1211.6 L2092.59 1211.6 L2093.17 1211.6 L2093.76 1211.6 L2094.35 1211.6 L2094.93 1211.6 L2095.52 1211.6 L2096.1 1211.6 L2096.69 1211.6 L2097.28 1211.6 L2097.86 1211.6 L2098.45 1211.6 L2099.04 1211.6 L2099.62 1211.6 L2100.21 1211.6 L2100.8 1211.6 L2101.38 1211.6 L2101.97 1211.6 L2102.55 1211.6 L2103.14 1211.6 L2103.73 1211.6 L2104.31 1211.6 L2104.9 1211.6 L2105.49 1211.6 L2106.07 1211.6 L2106.66 1211.6 L2107.25 1211.6 L2107.83 1211.6 L2108.42 1211.6 L2109.01 1211.6 L2109.59 1211.6 L2110.18 1211.6 L2110.76 1211.6 L2111.35 1211.6 L2111.94 1211.6 L2112.52 1211.6 L2113.11 1211.6 L2113.7 1211.6 L2114.28 1211.6 L2114.87 1211.6 L2115.46 1211.6 L2116.04 1211.6 L2116.63 1211.6 L2117.22 1211.6 L2117.8 1211.6 L2118.39 1211.6 L2118.97 1211.6 L2119.56 1211.6 L2120.15 1211.6 L2120.73 1211.6 L2121.32 1211.6 L2121.91 1211.6 L2122.49 1211.6 L2123.08 1211.6 L2123.67 1211.6 L2124.25 1211.6 L2124.84 1211.6 L2125.42 1211.6 L2126.01 1211.6 L2126.6 1211.6 L2127.18 1211.6 L2127.77 1211.6 L2128.36 1211.6 L2128.94 1211.6 L2129.53 1211.6 L2130.12 1211.6 L2130.7 1211.6 L2131.29 1211.6 L2131.88 1211.6 L2132.46 1211.6 L2133.05 1211.6 L2133.63 1211.6 L2134.22 1211.6 L2134.81 1211.6 L2135.39 1211.6 L2135.98 1211.6 L2136.57 1211.6 L2137.15 1211.6 L2137.74 1211.6 L2138.33 1211.6 L2138.91 1211.6 L2139.5 1211.6 L2140.09 1211.6 L2140.67 1211.6 L2141.26 1211.6 L2141.84 1211.6 L2142.43 1211.6 L2143.02 1211.6 L2143.6 1211.6 L2144.19 1211.6 L2144.78 1211.6 L2145.36 1211.6 L2145.95 1211.6 L2146.54 1211.6 L2147.12 1211.6 L2147.71 1211.6 L2148.3 1211.6 L2148.88 1211.6 L2149.47 1211.6 L2150.05 1211.6 L2150.64 1211.6 L2151.23 1211.6 L2151.81 1211.6 L2152.4 1211.6 L2152.99 1211.6 L2153.57 1211.6 L2154.16 1211.6 L2154.75 1211.6 L2155.33 1211.6 L2155.92 1211.6 L2156.5 1211.6 L2157.09 1211.6 L2157.68 1211.6 L2158.26 1211.6 L2158.26 1210.85 L2157.68 1210.85 L2157.09 1210.85 L2156.5 1210.85 L2155.92 1210.85 L2155.33 1210.85 L2154.75 1210.85 L2154.16 1210.85 L2153.57 1210.85 L2152.99 1210.85 L2152.4 1210.85 L2151.81 1210.85 L2151.23 1210.85 L2150.64 1210.85 L2150.05 1210.85 L2149.47 1210.85 L2148.88 1210.85 L2148.3 1210.85 L2147.71 1210.85 L2147.12 1210.85 L2146.54 1210.85 L2145.95 1210.85 L2145.36 1210.85 L2144.78 1210.85 L2144.19 1210.85 L2143.6 1210.85 L2143.02 1210.85 L2142.43 1210.85 L2141.84 1210.85 L2141.26 1210.85 L2140.67 1210.85 L2140.09 1210.85 L2139.5 1210.85 L2138.91 1210.85 L2138.33 1210.85 L2137.74 1210.85 L2137.15 1210.85 L2136.57 1210.85 L2135.98 1210.85 L2135.39 1210.85 L2134.81 1210.85 L2134.22 1210.85 L2133.63 1210.85 L2133.05 1210.85 L2132.46 1210.85 L2131.88 1210.85 L2131.29 1210.85 L2130.7 1210.85 L2130.12 1210.85 L2129.53 1210.85 L2128.94 1210.85 L2128.36 1210.85 L2127.77 1210.85 L2127.18 1210.85 L2126.6 1210.85 L2126.01 1210.85 L2125.42 1210.85 L2124.84 1210.85 L2124.25 1210.85 L2123.67 1210.85 L2123.08 1210.85 L2122.49 1210.85 L2121.91 1210.85 L2121.32 1210.85 L2120.73 1210.85 L2120.15 1210.85 L2119.56 1210.85 L2118.97 1210.85 L2118.39 1210.85 L2117.8 1210.85 L2117.22 1210.85 L2116.63 1210.85 L2116.04 1210.85 L2115.46 1210.85 L2114.87 1210.85 L2114.28 1210.85 L2113.7 1210.85 L2113.11 1210.85 L2112.52 1210.85 L2111.94 1210.85 L2111.35 1210.85 L2110.76 1210.85 L2110.18 1210.85 L2109.59 1210.85 L2109.01 1210.85 L2108.42 1210.85 L2107.83 1210.85 L2107.25 1210.85 L2106.66 1210.85 L2106.07 1210.85 L2105.49 1210.85 L2104.9 1210.85 L2104.31 1210.85 L2103.73 1210.85 L2103.14 1210.85 L2102.55 1210.85 L2101.97 1210.85 L2101.38 1210.85 L2100.8 1210.85 L2100.21 1210.85 L2099.62 1210.85 L2099.04 1210.85 L2098.45 1210.85 L2097.86 1210.85 L2097.28 1210.85 L2096.69 1210.85 L2096.1 1210.85 L2095.52 1210.85 L2094.93 1210.85 L2094.35 1210.85 L2093.76 1210.85 L2093.17 1210.85 L2092.59 1210.85 L2092 1210.85 L2091.41 1210.85 L2090.83 1210.85 L2090.24 1210.85 L2089.65 1210.85 L2089.07 1210.85 L2088.48 1210.85 L2087.89 1210.85 L2087.31 1210.85 L2086.72 1210.85 L2086.14 1210.85 L2085.55 1210.85 L2084.96 1210.85 L2084.38 1210.85 L2083.79 1210.85 L2083.2 1210.85 L2082.62 1210.85 L2082.03 1210.85 L2081.44 1210.85 L2080.86 1210.85 L2080.27 1210.85 L2079.68 1210.85 L2079.1 1210.85 L2078.51 1210.85 L2077.93 1210.85 L2077.34 1210.85 L2076.75 1210.85 L2076.17 1210.85 L2075.58 1210.85 L2074.99 1210.85 L2074.41 1210.85 L2073.82 1210.85 L2073.23 1210.85 L2072.65 1210.85 L2072.06 1210.85 L2071.48 1210.85 L2070.89 1210.85 L2070.3 1210.85 L2069.72 1210.85 L2069.13 1210.85 L2068.54 1210.85 L2067.96 1210.85 L2067.37 1210.85 L2066.78 1210.85 L2066.2 1210.85 L2065.61 1210.85 L2065.02 1210.85 L2064.44 1210.85 L2063.85 1210.85 L2063.27 1210.85 L2062.68 1210.85 L2062.09 1210.85 L2061.51 1210.85 L2060.92 1210.85 L2060.33 1210.85 L2059.75 1210.85 L2059.16 1210.85 L2058.57 1210.85 L2057.99 1210.85 L2057.4 1210.85 L2056.81 1210.85 L2056.23 1210.85 L2055.64 1210.85 L2055.06 1210.85 L2054.47 1210.85 L2053.88 1210.85 L2053.3 1210.85 L2052.71 1210.85 L2052.12 1210.85 L2051.54 1210.85 L2050.95 1210.85 L2050.36 1210.85 L2049.78 1210.85 L2049.19 1210.85 L2048.6 1210.85 L2048.02 1210.85 L2047.43 1210.85 L2046.85 1210.85 L2046.26 1210.85 L2045.67 1210.85 L2045.09 1210.85 L2044.5 1210.85 L2043.91 1210.85 L2043.33 1210.85 L2042.74 1210.85 L2042.15 1210.85 L2041.57 1210.85 L2040.98 1210.85 L2040.4 1210.85 L2039.81 1210.85 L2039.22 1210.85 L2038.64 1210.85 L2038.05 1210.85 L2037.46 1210.85 L2036.88 1210.85 L2036.29 1210.85 L2035.7 1210.85 L2035.12 1210.85 L2034.53 1210.85 L2033.94 1210.85 L2033.36 1210.85 L2032.77 1210.85 L2032.19 1210.85 L2031.6 1210.85 L2031.01 1210.85 L2030.43 1210.85 L2029.84 1210.85 L2029.25 1210.85 L2028.67 1210.85 L2028.08 1210.85 L2027.49 1210.85 L2026.91 1210.85 L2026.32 1210.85 L2025.73 1210.85 L2025.15 1210.85 L2024.56 1210.85 L2023.98 1210.85 L2023.39 1210.85 L2022.8 1210.85 L2022.22 1210.85 L2021.63 1210.85 L2021.04 1210.85 L2020.46 1210.85 L2019.87 1210.85 L2019.28 1210.85 L2018.7 1210.85 L2018.11 1210.85 L2017.53 1210.85 L2016.94 1210.85 L2016.35 1210.85 L2015.77 1210.85 L2015.18 1210.85 L2014.59 1210.85 L2014.01 1210.85 L2013.42 1210.85 L2012.83 1210.85 L2012.25 1210.85 L2011.66 1210.85 L2011.07 1210.85 L2010.49 1210.85 L2009.9 1210.85 L2009.32 1210.85 L2008.73 1210.85 L2008.14 1210.85 L2007.56 1210.85 L2006.97 1210.85 L2006.38 1210.85 L2005.8 1210.85 L2005.21 1210.85 L2004.62 1210.85 L2004.04 1210.85 L2003.45 1210.85 L2002.86 1210.85 L2002.28 1210.85 L2001.69 1210.85 L2001.11 1210.85 L2000.52 1210.85 L1999.93 1210.85 L1999.35 1210.85 L1998.76 1210.85 L1998.17 1210.85 L1997.59 1210.85 L1997 1210.85 L1996.41 1210.85 L1995.83 1210.85 L1995.24 1210.85 L1994.65 1210.85 L1994.07 1210.85 L1993.48 1210.85 L1992.9 1210.85 L1992.31 1210.85 L1991.72 1210.85 L1991.14 1210.85 L1990.55 1210.85 L1989.96 1210.85 L1989.38 1210.85 L1988.79 1210.85 L1988.2 1210.85 L1987.62 1210.85 L1987.03 1210.85 L1986.45 1210.85 L1985.86 1210.85 L1985.27 1210.85 L1984.69 1210.85 L1984.1 1210.85 L1983.51 1210.85 L1982.93 1210.85 L1982.34 1210.85 L1981.75 1210.85 L1981.17 1210.85 L1980.58 1210.85 L1979.99 1210.85 L1979.41 1210.85 L1978.82 1210.85 L1978.24 1210.85 L1977.65 1210.85 L1977.06 1210.85 L1976.48 1210.85 L1975.89 1210.85 L1975.3 1210.85 L1974.72 1210.85 L1974.13 1210.85 L1973.54 1210.85 L1972.96 1210.85 L1972.37 1210.85 L1971.78 1210.85 L1971.2 1210.85 L1970.61 1210.85 L1970.03 1210.85 L1969.44 1210.85 L1968.85 1210.85 L1968.27 1210.85 L1967.68 1210.85 L1967.09 1210.85 L1966.51 1210.85 L1965.92 1210.85 L1965.33 1210.85 L1964.75 1210.85 L1964.16 1210.85 L1963.58 1210.85 L1962.99 1210.85 L1962.4 1210.85 L1961.82 1210.85 L1961.23 1210.85 L1960.64 1210.85 L1960.06 1210.85 L1959.47 1210.85 L1958.88 1210.85 L1958.3 1210.85 L1957.71 1210.85 L1957.12 1210.85 L1956.54 1210.85 L1955.95 1210.85 L1955.37 1210.85 L1954.78 1210.85 L1954.19 1210.85 L1953.61 1210.85 L1953.02 1210.85 L1952.43 1210.85 L1951.85 1210.85 L1951.26 1210.85 L1950.67 1210.85 L1950.09 1210.85 L1949.5 1210.85 L1948.91 1210.85 L1948.33 1210.85 L1947.74 1210.85 L1947.16 1210.85 L1946.57 1210.85 L1945.98 1210.85 L1945.4 1210.85 L1944.81 1210.85 L1944.22 1210.85 L1943.64 1210.85 L1943.05 1210.85 L1942.46 1210.85 L1941.88 1210.85 L1941.29 1210.85 L1940.71 1210.85 L1940.12 1210.85 L1939.53 1210.85 L1938.95 1210.85 L1938.36 1210.85 L1937.77 1210.85 L1937.19 1210.85 L1936.6 1210.85 L1936.01 1210.85 L1935.43 1210.85 L1934.84 1210.85 L1934.25 1210.85 L1933.67 1210.85 L1933.08 1210.85 L1932.5 1210.85 L1931.91 1210.85 L1931.32 1210.85 L1930.74 1210.85 L1930.15 1210.85 L1929.56 1210.85 L1928.98 1210.85 L1928.39 1210.85 L1927.8 1210.85 L1927.22 1210.85 L1926.63 1210.85 L1926.04 1210.85 L1925.46 1210.85 L1924.87 1210.85 L1924.29 1210.85 L1923.7 1210.85 L1923.11 1210.85 L1922.53 1210.85 L1921.94 1210.85 L1921.35 1210.85 L1920.77 1210.85 L1920.18 1210.85 L1919.59 1210.85 L1919.01 1210.85 L1918.42 1210.85 L1917.83 1210.85 L1917.25 1210.85 L1916.66 1210.85 L1916.08 1210.85 L1915.49 1210.85 L1914.9 1210.85 L1914.32 1210.85 L1913.73 1210.85 L1913.14 1210.85 L1912.56 1210.85 L1911.97 1210.85 L1911.38 1210.85 L1910.8 1210.85 L1910.21 1210.85 L1909.63 1210.85 L1909.04 1210.85 L1908.45 1210.85 L1907.87 1210.85 L1907.28 1210.85 L1906.69 1210.85 L1906.11 1210.85 L1905.52 1210.85 L1904.93 1210.85 L1904.35 1210.85 L1903.76 1210.85 L1903.17 1210.85 L1902.59 1210.85 L1902 1210.85 L1901.42 1210.85 L1900.83 1210.85 L1900.24 1210.85 L1899.66 1210.85 L1899.07 1210.85 L1898.48 1210.85 L1897.9 1210.85 L1897.31 1210.85 L1896.72 1210.85 L1896.14 1210.85 L1895.55 1210.85 L1894.96 1210.85 L1894.38 1210.85 L1893.79 1210.85 L1893.21 1210.85 L1892.62 1210.85 L1892.03 1210.85 L1891.45 1210.85 L1890.86 1210.85 L1890.27 1210.85 L1889.69 1210.85 L1889.1 1210.85 L1888.51 1210.85 L1887.93 1210.85 L1887.34 1210.85 L1886.76 1210.85 L1886.17 1210.85 L1885.58 1210.85 L1885 1210.85 L1884.41 1210.85 L1883.82 1210.85 L1883.24 1210.85 L1882.65 1210.85 L1882.06 1210.85 L1881.48 1210.85 L1880.89 1210.85 L1880.3 1210.85 L1879.72 1210.85 L1879.13 1210.85 L1878.55 1210.85 L1877.96 1210.85 L1877.37 1210.85 L1876.79 1210.85 L1876.2 1210.85 L1875.61 1210.85 L1875.03 1210.85 L1874.44 1210.85 L1873.85 1210.85 L1873.27 1210.85 L1872.68 1210.85 L1872.09 1210.85 L1871.51 1210.85 L1870.92 1210.85 L1870.34 1210.85 L1869.75 1210.85 L1869.16 1210.85 L1868.58 1210.85 L1867.99 1210.85 L1867.4 1210.85 L1866.82 1210.85 L1866.23 1210.85 L1865.64 1210.85 L1865.06 1210.85 L1864.47 1210.85 L1863.88 1210.85 L1863.3 1210.85 L1862.71 1210.85 L1862.13 1210.85 L1861.54 1210.85 L1860.95 1210.85 L1860.37 1210.85 L1859.78 1210.85 L1859.19 1210.85 L1858.61 1210.85 L1858.02 1210.85 L1857.43 1210.85 L1856.85 1210.85 L1856.26 1210.85 L1855.68 1210.85 L1855.09 1210.85 L1854.5 1210.85 L1853.92 1210.85 L1853.33 1210.85 L1852.74 1210.85 L1852.16 1210.85 L1851.57 1210.85 L1850.98 1210.85 L1850.4 1210.85 L1849.81 1210.85 L1849.22 1210.85 L1848.64 1210.85 L1848.05 1210.85 L1847.47 1210.85 L1846.88 1210.85 L1846.29 1210.85 L1845.71 1210.85 L1845.12 1210.85 L1844.53 1210.85 L1843.95 1210.85 L1843.36 1210.85 L1842.77 1210.85 L1842.19 1210.85 L1841.6 1210.85 L1841.01 1210.85 L1840.43 1210.85 L1839.84 1210.85 L1839.26 1210.85 L1838.67 1210.85 L1838.08 1210.85 L1837.5 1210.85 L1836.91 1210.85 L1836.32 1210.85 L1835.74 1210.85 L1835.15 1210.85 L1834.56 1210.85 L1833.98 1210.85 L1833.39 1210.85 L1832.81 1210.85 L1832.22 1210.85 L1831.63 1210.85 L1831.05 1210.85 L1830.46 1210.85 L1829.87 1210.85 L1829.29 1210.85 L1828.7 1210.85 L1828.11 1210.85 L1827.53 1210.85 L1826.94 1210.85 L1826.35 1210.85 L1825.77 1210.85 L1825.18 1210.85 L1824.6 1210.85 L1824.01 1210.85 L1823.42 1210.85 L1822.84 1210.85 L1822.25 1210.85 L1821.66 1210.85 L1821.08 1210.85 L1820.49 1210.85 L1819.9 1210.85 L1819.32 1210.85 L1818.73 1210.85 L1818.14 1210.85 L1817.56 1210.85 L1816.97 1210.85 L1816.39 1210.85 L1815.8 1210.85 L1815.21 1210.85 L1814.63 1210.85 L1814.04 1210.85 L1813.45 1210.85 L1812.87 1210.85 L1812.28 1210.85 L1811.69 1210.85 L1811.11 1210.85 L1810.52 1210.85 L1809.94 1210.85 L1809.35 1210.85 L1808.76 1210.85 L1808.18 1210.85 L1807.59 1210.85 L1807 1210.85 L1806.42 1210.85 L1805.83 1210.85 L1805.24 1210.85 L1804.66 1210.85 L1804.07 1210.85 L1803.48 1210.85 L1802.9 1210.85 L1802.31 1210.85 L1801.73 1210.85 L1801.14 1210.85 L1800.55 1210.85 L1799.97 1210.85 L1799.38 1210.85 L1798.79 1210.85 L1798.21 1210.85 L1797.62 1210.85 L1797.03 1210.85 L1796.45 1210.85 L1795.86 1210.85 L1795.27 1210.85 L1794.69 1210.85 L1794.1 1210.85 L1793.52 1210.85 L1792.93 1210.85 L1792.34 1210.85 L1791.76 1210.85 L1791.17 1210.85 L1790.58 1210.85 L1790 1210.85 L1789.41 1210.85 L1788.82 1210.85 L1788.24 1210.85 L1787.65 1210.85 L1787.06 1210.85 L1786.48 1210.85 L1785.89 1210.85 L1785.31 1210.85 L1784.72 1210.85 L1784.13 1210.85 L1783.55 1210.85 L1782.96 1210.85 L1782.37 1210.85 L1781.79 1210.85 L1781.2 1210.85 L1780.61 1210.85 L1780.03 1210.85 L1779.44 1210.85 L1778.86 1210.85 L1778.27 1210.85 L1777.68 1210.85 L1777.1 1210.85 L1776.51 1210.85 L1775.92 1210.85 L1775.34 1210.85 L1774.75 1210.85 L1774.16 1210.85 L1773.58 1210.85 L1772.99 1210.85 L1772.4 1210.85 L1771.82 1210.85 L1771.23 1210.85 L1770.65 1210.85 L1770.06 1210.85 L1769.47 1210.85 L1768.89 1210.85 L1768.3 1210.85 L1767.71 1210.85 L1767.13 1210.85 L1766.54 1210.85 L1765.95 1210.85 L1765.37 1210.85 L1764.78 1210.85 L1764.19 1210.85 L1763.61 1210.85 L1763.02 1210.85 L1762.44 1210.85 L1761.85 1210.85 L1761.26 1210.85 L1760.68 1210.85 L1760.09 1210.85 L1759.5 1210.85 L1758.92 1210.85 L1758.33 1210.85 L1757.74 1210.85 L1757.16 1210.85 L1756.57 1210.85 L1755.99 1210.85 L1755.4 1210.85 L1754.81 1210.85 L1754.23 1210.85 L1753.64 1210.85 L1753.05 1210.85 L1752.47 1210.85 L1751.88 1210.85 L1751.29 1210.85 L1750.71 1210.85 L1750.12 1210.85 L1749.53 1210.85 L1748.95 1210.85 L1748.36 1210.85 L1747.78 1210.85 L1747.19 1210.85 L1746.6 1210.85 L1746.02 1210.85 L1745.43 1210.85 L1744.84 1210.85 L1744.26 1210.85 L1743.67 1210.85 L1743.08 1210.85 L1742.5 1210.85 L1741.91 1210.85 L1741.32 1210.85 L1740.74 1210.85 L1740.15 1210.85 L1739.57 1210.85 L1738.98 1210.85 L1738.39 1210.85 L1737.81 1210.85 L1737.22 1210.85 L1736.63 1210.85 L1736.05 1210.85 L1735.46 1210.85 L1734.87 1210.85 L1734.29 1210.85 L1733.7 1210.85 L1733.11 1210.85 L1732.53 1210.85 L1731.94 1210.85 L1731.36 1210.85 L1730.77 1210.85 L1730.18 1210.85 L1729.6 1210.85 L1729.01 1210.85 L1728.42 1210.85 L1727.84 1210.85 L1727.25 1210.85 L1726.66 1210.85 L1726.08 1210.85 L1725.49 1210.85 L1724.91 1210.85 L1724.32 1210.85 L1723.73 1210.85 L1723.15 1210.85 L1722.56 1210.85 L1721.97 1210.85 L1721.39 1210.85 L1720.8 1210.85 L1720.21 1210.85 L1719.63 1210.85 L1719.04 1210.85 L1718.45 1210.85 L1717.87 1210.85 L1717.28 1210.85 L1716.7 1210.85 L1716.11 1210.85 L1715.52 1210.85 L1714.94 1210.85 L1714.35 1210.85 L1713.76 1210.85 L1713.18 1210.85 L1712.59 1210.85 L1712 1210.85 L1711.42 1210.85 L1710.83 1210.85 L1710.24 1210.85 L1709.66 1210.85 L1709.07 1210.85 L1708.49 1210.85 L1707.9 1210.85 L1707.31 1210.85 L1706.73 1210.85 L1706.14 1210.85 L1705.55 1210.85 L1704.97 1210.85 L1704.38 1210.85 L1703.79 1210.85 L1703.21 1210.85 L1702.62 1210.85 L1702.04 1210.85 L1701.45 1210.85 L1700.86 1210.85 L1700.28 1210.85 L1699.69 1210.85 L1699.1 1210.85 L1698.52 1210.85 L1697.93 1210.85 L1697.34 1210.85 L1696.76 1210.85 L1696.17 1210.85 L1695.58 1210.85 L1695 1210.85 L1694.41 1210.85 L1693.83 1210.85 L1693.24 1210.85 L1692.65 1210.85 L1692.07 1210.85 L1691.48 1210.85 L1690.89 1210.85 L1690.31 1210.85 L1689.72 1210.85 L1689.13 1210.85 L1688.55 1210.85 L1687.96 1210.85 L1687.37 1210.85 L1686.79 1210.85 L1686.2 1210.85 L1685.62 1210.85 L1685.03 1210.85 L1684.44 1210.85 L1683.86 1210.85 L1683.27 1210.85 L1682.68 1210.85 L1682.1 1210.85 L1681.51 1210.85 L1680.92 1210.85 L1680.34 1210.85 L1679.75 1210.85 L1679.17 1210.85 L1678.58 1210.85 L1677.99 1210.85 L1677.41 1210.85 L1676.82 1210.85 L1676.23 1210.85 L1675.65 1210.85 L1675.06 1210.85 L1674.47 1210.85 L1673.89 1210.85 L1673.3 1210.85 L1672.71 1210.85 L1672.13 1210.85 L1671.54 1210.85 L1670.96 1210.85 L1670.37 1210.85 L1669.78 1210.85 L1669.2 1210.85 L1668.61 1210.85 L1668.02 1210.85 L1667.44 1210.85 L1666.85 1210.85 L1666.26 1210.85 L1665.68 1210.85 L1665.09 1210.85 L1664.5 1210.85 L1663.92 1210.85 L1663.33 1210.85 L1662.75 1210.85 L1662.16 1210.85 L1661.57 1210.85 L1660.99 1210.85 L1660.4 1210.85 L1659.81 1210.85 L1659.23 1210.85 L1658.64 1210.85 L1658.05 1210.85 L1657.47 1210.85 L1656.88 1210.85 L1656.29 1210.85 L1655.71 1210.85 L1655.12 1210.85 L1654.54 1210.85 L1653.95 1210.85 L1653.36 1210.85 L1652.78 1210.85 L1652.19 1210.85 L1651.6 1210.85 L1651.02 1210.85 L1650.43 1210.85 L1649.84 1210.85 L1649.26 1210.85 L1648.67 1210.85 L1648.09 1210.85 L1647.5 1210.85 L1646.91 1210.85 L1646.33 1210.85 L1645.74 1210.85 L1645.15 1210.85 L1644.57 1210.85 L1643.98 1210.85 L1643.39 1210.85 L1642.81 1210.85 L1642.22 1210.85 L1641.63 1210.85 L1641.05 1210.85 L1640.46 1210.85 L1639.88 1210.85 L1639.29 1210.85 L1638.7 1210.85 L1638.12 1210.85 L1637.53 1210.85 L1636.94 1210.85 L1636.36 1210.85 L1635.77 1210.85 L1635.18 1210.85 L1634.6 1210.85 L1634.01 1210.85 L1633.42 1210.85 L1632.84 1210.85 L1632.25 1210.85 L1631.67 1210.85 L1631.08 1210.85 L1630.49 1210.85 L1629.91 1210.85 L1629.32 1210.85 L1628.73 1210.85 L1628.15 1210.85 L1627.56 1210.85 L1626.97 1210.85 L1626.39 1210.85 L1625.8 1210.85 L1625.22 1210.85 L1624.63 1210.85 L1624.04 1210.85 L1623.46 1210.85 L1622.87 1210.85 L1622.28 1210.85 L1621.7 1210.85 L1621.11 1210.85 L1620.52 1210.85 L1619.94 1210.85 L1619.35 1210.85 L1618.76 1210.85 L1618.18 1210.85 L1617.59 1210.85 L1617.01 1210.85 L1616.42 1210.85 L1615.83 1210.85 L1615.25 1210.85 L1614.66 1210.85 L1614.07 1210.85 L1613.49 1210.85 L1612.9 1210.85 L1612.31 1210.85 L1611.73 1210.85 L1611.14 1210.85 L1610.55 1210.85 L1609.97 1210.85 L1609.38 1210.85 L1608.8 1210.85 L1608.21 1210.85 L1607.62 1210.85 L1607.04 1210.85 L1606.45 1210.85 L1605.86 1210.85 L1605.28 1210.85 L1604.69 1210.85 L1604.1 1210.85 L1603.52 1210.85 L1602.93 1210.85 L1602.34 1210.85 L1601.76 1210.85 L1601.17 1210.85 L1600.59 1210.85 L1600 1210.85 L1599.41 1210.85 L1598.83 1210.85 L1598.24 1210.85 L1597.65 1210.85 L1597.07 1210.85 L1596.48 1210.85 L1595.89 1210.85 L1595.31 1210.85 L1594.72 1210.85 L1594.14 1210.85 L1593.55 1210.85 L1592.96 1210.85 L1592.38 1210.85 L1591.79 1210.85 L1591.2 1210.85 L1590.62 1210.85 L1590.03 1210.85 L1589.44 1210.85 L1588.86 1210.85 L1588.27 1210.85 L1587.68 1210.85 L1587.1 1210.85 L1586.51 1210.85 L1585.93 1210.85 L1585.34 1210.85 L1584.75 1210.85 L1584.17 1210.85 L1583.58 1210.85 L1582.99 1210.85 L1582.41 1210.85 L1581.82 1210.85 L1581.23 1210.85 L1580.65 1210.85 L1580.06 1210.85 L1579.47 1210.85 L1578.89 1210.85 L1578.3 1210.85 L1577.72 1210.85 L1577.13 1210.85 L1576.54 1210.85 L1575.96 1210.85 L1575.37 1210.85 L1574.78 1210.85 L1574.2 1210.85 L1573.61 1210.85 L1573.02 1210.85 L1572.44 1210.85 L1571.85 1210.85 L1571.27 1210.85 L1570.68 1210.85 L1570.09 1210.85 L1569.51 1210.85 L1568.92 1210.85 L1568.33 1210.85 L1567.75 1210.85 L1567.16 1210.85 L1566.57 1210.85 L1565.99 1210.85 L1565.4 1210.85 L1564.81 1210.85 L1564.23 1210.85 L1563.64 1210.85 L1563.06 1210.85 L1562.47 1210.85 L1561.88 1210.85 L1561.3 1210.85 L1560.71 1210.85 L1560.12 1210.85 L1559.54 1210.85 L1558.95 1210.85 L1558.36 1210.85 L1557.78 1210.85 L1557.19 1210.85 L1556.6 1210.85 L1556.02 1210.85 L1555.43 1210.85 L1554.85 1210.85 L1554.26 1210.85 L1553.67 1210.85 L1553.09 1210.85 L1552.5 1210.85 L1551.91 1210.85 L1551.33 1210.85 L1550.74 1210.85 L1550.15 1210.85 L1549.57 1210.85 L1548.98 1210.85 L1548.4 1210.85 L1547.81 1210.85 L1547.22 1210.85 L1546.64 1210.85 L1546.05 1210.85 L1545.46 1210.85 L1544.88 1210.85 L1544.29 1210.85 L1543.7 1210.85 L1543.12 1210.85 L1542.53 1210.85 L1541.94 1210.85 L1541.36 1210.85 L1540.77 1210.85 L1540.19 1210.85 L1539.6 1210.85 L1539.01 1210.85 L1538.43 1210.85 L1537.84 1210.85 L1537.25 1210.85 L1536.67 1210.85 L1536.08 1210.85 L1535.49 1210.85 L1534.91 1210.85 L1534.32 1210.85 L1533.73 1210.85 L1533.15 1210.85 L1532.56 1210.85 L1531.98 1210.85 L1531.39 1210.85 L1530.8 1210.85 L1530.22 1210.85 L1529.63 1210.85 L1529.04 1210.85 L1528.46 1210.85 L1527.87 1210.85 L1527.28 1210.85 L1526.7 1210.85 L1526.11 1210.85 L1525.52 1210.85 L1524.94 1210.85 L1524.35 1210.85 L1523.77 1210.85 L1523.18 1210.85 L1522.59 1210.85 L1522.01 1210.85 L1521.42 1210.85 L1520.83 1210.85 L1520.25 1210.85 L1519.66 1210.85 L1519.07 1210.85 L1518.49 1210.85 L1517.9 1210.85 L1517.32 1210.85 L1516.73 1210.85 L1516.14 1210.85 L1515.56 1210.85 L1514.97 1210.85 L1514.38 1210.85 L1513.8 1210.85 L1513.21 1210.85 L1512.62 1210.85 L1512.04 1210.85 L1511.45 1210.85 L1510.86 1210.85 L1510.28 1210.85 L1509.69 1210.85 L1509.11 1210.85 L1508.52 1210.85 L1507.93 1210.85 L1507.35 1210.85 L1506.76 1210.85 L1506.17 1210.85 L1505.59 1210.85 L1505 1210.85 L1504.41 1210.85 L1503.83 1210.85 L1503.24 1210.85 L1502.65 1210.85 L1502.07 1210.85 L1501.48 1210.85 L1500.9 1210.85 L1500.31 1210.85 L1499.72 1210.85 L1499.14 1210.85 L1498.55 1210.85 L1497.96 1210.85 L1497.38 1210.85 L1496.79 1210.85 L1496.2 1210.85 L1495.62 1210.85 L1495.03 1210.85 L1494.45 1210.85 L1493.86 1210.85 L1493.27 1210.85 L1492.69 1210.85 L1492.1 1210.85 L1491.51 1210.85 L1490.93 1210.85 L1490.34 1210.85 L1489.75 1210.85 L1489.17 1210.85 L1488.58 1210.85 L1487.99 1210.85 L1487.41 1210.85 L1486.82 1210.85 L1486.24 1210.85 L1485.65 1210.85 L1485.06 1210.85 L1484.48 1210.85 L1483.89 1210.85 L1483.3 1210.85 L1482.72 1210.85 L1482.13 1210.85 L1481.54 1210.85 L1480.96 1210.85 L1480.37 1210.85 L1479.78 1210.85 L1479.2 1210.85 L1478.61 1210.85 L1478.03 1210.85 L1477.44 1210.85 L1476.85 1210.85 L1476.27 1210.85 L1475.68 1210.85 L1475.09 1210.85 L1474.51 1210.85 L1473.92 1210.85 L1473.33 1210.85 L1472.75 1210.85 L1472.16 1210.85 L1471.57 1210.85 L1470.99 1210.85 L1470.4 1210.85 L1469.82 1210.85 L1469.23 1210.85 L1468.64 1210.85 L1468.06 1210.85 L1467.47 1210.85 L1466.88 1210.85 L1466.3 1210.85 L1465.71 1210.85 L1465.12 1210.85 L1464.54 1210.85 L1463.95 1210.85 L1463.37 1210.85 L1462.78 1210.85 L1462.19 1210.85 L1461.61 1210.85 L1461.02 1210.85 L1460.43 1210.85 L1459.85 1210.85 L1459.26 1210.85 L1458.67 1210.85 L1458.09 1210.85 L1457.5 1210.85 L1456.91 1210.85 L1456.33 1210.85 L1455.74 1210.85 L1455.16 1210.85 L1454.57 1210.85 L1453.98 1210.85 L1453.4 1210.85 L1452.81 1210.85 L1452.22 1210.85 L1451.64 1210.85 L1451.05 1210.85 L1450.46 1210.85 L1449.88 1210.85 L1449.29 1210.85 L1448.7 1210.85 L1448.12 1210.85 L1447.53 1210.85 L1446.95 1210.85 L1446.36 1210.85 L1445.77 1210.85 L1445.19 1210.85 L1444.6 1210.85 L1444.01 1210.85 L1443.43 1210.85 L1442.84 1210.85 L1442.25 1210.85 L1441.67 1210.85 L1441.08 1210.85 L1440.5 1210.85 L1439.91 1210.85 L1439.32 1210.85 L1438.74 1210.85 L1438.15 1210.85 L1437.56 1210.85 L1436.98 1210.85 L1436.39 1210.85 L1435.8 1210.85 L1435.22 1210.85 L1434.63 1210.85 L1434.04 1210.85 L1433.46 1210.85 L1432.87 1210.85 L1432.29 1210.85 L1431.7 1210.85 L1431.11 1210.85 L1430.53 1210.85 L1429.94 1210.85 L1429.35 1210.85 L1428.77 1210.85 L1428.18 1210.85 L1427.59 1210.85 L1427.01 1210.85 L1426.42 1210.85 L1425.83 1210.85 L1425.25 1210.85 L1424.66 1210.85 L1424.08 1210.85 L1423.49 1210.85 L1422.9 1210.85 L1422.32 1210.85 L1421.73 1210.85 L1421.14 1210.85 L1420.56 1210.85 L1419.97 1210.85 L1419.38 1210.85 L1418.8 1210.85 L1418.21 1210.85 L1417.63 1210.85 L1417.04 1210.85 L1416.45 1210.85 L1415.87 1210.85 L1415.28 1210.85 L1414.69 1210.85 L1414.11 1210.85 L1413.52 1210.85 L1412.93 1210.85 L1412.35 1210.85 L1411.76 1210.85 L1411.17 1210.85 L1410.59 1210.85 L1410 1210.85 L1409.42 1210.85 L1408.83 1210.85 L1408.24 1210.85 L1407.66 1210.85 L1407.07 1210.85 L1406.48 1210.85 L1405.9 1210.85 L1405.31 1210.85 L1404.72 1210.85 L1404.14 1210.85 L1403.55 1210.85 L1402.96 1210.85 L1402.38 1210.85 L1401.79 1210.85 L1401.21 1210.85 L1400.62 1210.85 L1400.03 1210.85 L1399.45 1210.85 L1398.86 1210.85 L1398.27 1210.85 L1397.69 1210.85 L1397.1 1210.85 L1396.51 1210.85 L1395.93 1210.85 L1395.34 1210.85 L1394.75 1210.85 L1394.17 1210.85 L1393.58 1210.85 L1393 1210.85 L1392.41 1210.85 L1391.82 1210.85 L1391.24 1210.85 L1390.65 1210.85 L1390.06 1210.85 L1389.48 1210.85 L1388.89 1210.85 L1388.3 1210.85 L1387.72 1210.85 L1387.13 1210.85 L1386.55 1210.85 L1385.96 1210.85 L1385.37 1210.85 L1384.79 1210.85 L1384.2 1210.85 L1383.61 1210.85 L1383.03 1210.85 L1382.44 1210.85 L1381.85 1210.85 L1381.27 1210.85 L1380.68 1210.85 L1380.09 1210.85 L1379.51 1210.85 L1378.92 1210.85 L1378.34 1210.85 L1377.75 1210.85 L1377.16 1210.85 L1376.58 1210.85 L1375.99 1210.85 L1375.4 1210.85 L1374.82 1210.85 L1374.23 1210.85 L1373.64 1210.85 L1373.06 1210.85 L1372.47 1210.85 L1371.88 1210.85 L1371.3 1210.85 L1370.71 1210.85 L1370.13 1210.85 L1369.54 1210.85 L1368.95 1210.85 L1368.37 1210.85 L1367.78 1210.85 L1367.19 1210.85 L1366.61 1210.85 L1366.02 1210.85 L1365.43 1210.85 L1364.85 1210.85 L1364.26 1210.85 L1363.68 1210.85 L1363.09 1210.85 L1362.5 1210.85 L1361.92 1210.85 L1361.33 1210.85 L1360.74 1210.85 L1360.16 1210.85 L1359.57 1210.85 L1358.98 1210.85 L1358.4 1210.85 L1357.81 1210.85 L1357.22 1210.85 L1356.64 1210.85 L1356.05 1210.85 L1355.47 1210.85 L1354.88 1210.85 L1354.29 1210.85 L1353.71 1210.85 L1353.12 1210.85 L1352.53 1210.85 L1351.95 1210.85 L1351.36 1210.85 L1350.77 1210.85 L1350.19 1210.85 L1349.6 1210.85 L1349.01 1210.85 L1348.43 1210.85 L1347.84 1210.85 L1347.26 1210.85 L1346.67 1210.85 L1346.08 1210.85 L1345.5 1210.85 L1344.91 1210.85 L1344.32 1210.85 L1343.74 1210.85 L1343.15 1210.85 L1342.56 1210.85 L1341.98 1210.85 L1341.39 1210.85 L1340.8 1210.85 L1340.22 1210.85 L1339.63 1210.85 L1339.05 1210.85 L1338.46 1210.85 L1337.87 1210.85 L1337.29 1210.85 L1336.7 1210.85 L1336.11 1210.85 L1335.53 1210.85 L1334.94 1210.85 L1334.35 1210.85 L1333.77 1210.85 L1333.18 1210.85 L1332.6 1210.85 L1332.01 1210.85 L1331.42 1210.85 L1330.84 1210.85 L1330.25 1210.85 L1329.66 1210.85 L1329.08 1210.85 L1328.49 1210.85 L1327.9 1210.85 L1327.32 1210.85 L1326.73 1210.85 L1326.14 1210.85 L1325.56 1210.85 L1324.97 1210.85 L1324.39 1210.85 L1323.8 1210.85 L1323.21 1210.85 L1322.63 1210.85 L1322.04 1210.85 L1321.45 1210.85 L1320.87 1210.85 L1320.28 1210.85 L1319.69 1210.85 L1319.11 1210.85 L1318.52 1210.85 L1317.93 1210.85 L1317.35 1210.85 L1316.76 1210.85 L1316.18 1210.85 L1315.59 1210.85 L1315 1210.85 L1314.42 1210.85 L1313.83 1210.85 L1313.24 1210.85 L1312.66 1210.85 L1312.07 1210.85 L1311.48 1210.85 L1310.9 1210.85 L1310.31 1210.85 L1309.73 1210.85 L1309.14 1210.85 L1308.55 1210.85 L1307.97 1210.85 L1307.38 1210.85 L1306.79 1210.85 L1306.21 1210.85 L1305.62 1210.85 L1305.03 1210.85 L1304.45 1210.85 L1303.86 1210.85 L1303.27 1210.85 L1302.69 1210.85 L1302.1 1210.85 L1301.52 1210.85 L1300.93 1210.85 L1300.34 1210.85 L1299.76 1210.85 L1299.17 1210.85 L1298.58 1210.85 L1298 1210.85 L1297.41 1210.85 L1296.82 1210.85 L1296.24 1210.85 L1295.65 1210.85 L1295.06 1210.85 L1294.48 1210.85 L1293.89 1210.85 L1293.31 1210.85 L1292.72 1210.85 L1292.13 1210.85 L1291.55 1210.85 L1290.96 1210.85 L1290.37 1210.85 L1289.79 1210.85 L1289.2 1210.85 L1288.61 1210.85 L1288.03 1210.85 L1287.44 1210.85 L1286.86 1210.85 L1286.27 1210.85 L1285.68 1210.85 L1285.1 1210.85 L1284.51 1210.85 L1283.92 1210.85 L1283.34 1210.85 L1282.75 1210.85 L1282.16 1210.85 L1281.58 1210.85 L1280.99 1210.85 L1280.4 1210.85 L1279.82 1210.85 L1279.23 1210.85 L1278.65 1210.85 L1278.06 1210.85 L1277.47 1210.85 L1276.89 1210.85 L1276.3 1210.85 L1275.71 1210.85 L1275.13 1210.85 L1274.54 1210.85 L1273.95 1210.85 L1273.37 1210.85 L1272.78 1210.85 L1272.19 1210.85 L1271.61 1210.85 L1271.02 1210.85 L1270.44 1210.85 L1269.85 1210.85 L1269.26 1210.85 L1268.68 1210.85 L1268.09 1210.85 L1267.5 1210.85 L1266.92 1210.85 L1266.33 1210.85 L1265.74 1210.85 L1265.16 1210.85 L1264.57 1210.85 L1263.98 1210.85 L1263.4 1210.85 L1262.81 1210.85 L1262.23 1210.85 L1261.64 1210.85 L1261.05 1210.85 L1260.47 1210.85 L1259.88 1210.85 L1259.29 1210.85 L1258.71 1210.85 L1258.12 1210.85 L1257.53 1210.85 L1256.95 1210.85 L1256.36 1210.85 L1255.78 1210.85 L1255.19 1210.85 L1254.6 1210.85 L1254.02 1210.85 L1253.43 1210.85 L1252.84 1210.85 L1252.26 1210.85 L1251.67 1210.85 L1251.08 1210.85 L1250.5 1210.85 L1249.91 1210.85 L1249.32 1210.85 L1248.74 1210.85 L1248.15 1210.85 L1247.57 1210.85 L1246.98 1210.85 L1246.39 1210.85 L1245.81 1210.85 L1245.22 1210.85 L1244.63 1210.85 L1244.05 1210.85 L1243.46 1210.85 L1242.87 1210.85 L1242.29 1210.85 L1241.7 1210.85 L1241.11 1210.85 L1240.53 1210.85 L1239.94 1210.85 L1239.36 1210.85 L1238.77 1210.85 L1238.18 1210.85 L1237.6 1210.85 L1237.01 1210.85 L1236.42 1210.85 L1235.84 1210.85 L1235.25 1210.85 L1234.66 1210.85 L1234.08 1210.85 L1233.49 1210.85 L1232.91 1210.85 L1232.32 1210.85 L1231.73 1210.85 L1231.15 1210.85 L1230.56 1210.85 L1229.97 1210.85 L1229.39 1210.85 L1228.8 1210.85 L1228.21 1210.85 L1227.63 1210.85 L1227.04 1210.85 L1226.45 1210.85 L1225.87 1210.85 L1225.28 1210.85 L1224.7 1210.85 L1224.11 1210.85 L1223.52 1210.85 L1222.94 1210.85 L1222.35 1210.85 L1221.76 1210.85 L1221.18 1210.85 L1220.59 1210.85 L1220 1210.85 L1219.42 1210.85 L1218.83 1210.85 L1218.24 1210.85 L1217.66 1210.85 L1217.07 1210.85 L1216.49 1210.85 L1215.9 1210.85 L1215.31 1210.85 L1214.73 1210.85 L1214.14 1210.85 L1213.55 1210.85 L1212.97 1210.85 L1212.38 1210.85 L1211.79 1210.85 L1211.21 1210.85 L1210.62 1210.85 L1210.03 1210.85 L1209.45 1210.85 L1208.86 1210.85 L1208.28 1210.85 L1207.69 1210.85 L1207.1 1210.85 L1206.52 1210.85 L1205.93 1210.85 L1205.34 1210.85 L1204.76 1210.85 L1204.17 1210.85 L1203.58 1210.85 L1203 1210.85 L1202.41 1210.85 L1201.83 1210.85 L1201.24 1210.85 L1200.65 1210.85 L1200.07 1210.85 L1199.48 1210.85 L1198.89 1210.85 L1198.31 1210.85 L1197.72 1210.85 L1197.13 1210.85 L1196.55 1210.85 L1195.96 1210.85 L1195.37 1210.85 L1194.79 1210.85 L1194.2 1210.85 L1193.62 1210.85 L1193.03 1210.85 L1192.44 1210.85 L1191.86 1210.85 L1191.27 1210.85 L1190.68 1210.85 L1190.1 1210.85 L1189.51 1210.85 L1188.92 1210.85 L1188.34 1210.85 L1187.75 1210.85 L1187.16 1210.85 L1186.58 1210.85 L1185.99 1210.85 L1185.41 1210.85 L1184.82 1210.85 L1184.23 1210.85 L1183.65 1210.85 L1183.06 1210.85 L1182.47 1210.85 L1181.89 1210.85 L1181.3 1210.85 L1180.71 1210.85 L1180.13 1210.85 L1179.54 1210.85 L1178.96 1210.85 L1178.37 1210.85 L1177.78 1210.85 L1177.2 1210.85 L1176.61 1210.85 L1176.02 1210.85 L1175.44 1210.85 L1174.85 1210.85 L1174.26 1210.85 L1173.68 1210.85 L1173.09 1210.85 L1172.5 1210.85 L1171.92 1210.85 L1171.33 1210.85 L1170.75 1210.85 L1170.16 1210.85 L1169.57 1210.85 L1168.99 1210.85 L1168.4 1210.85 L1167.81 1210.85 L1167.23 1210.85 L1166.64 1210.85 L1166.05 1210.85 L1165.47 1210.85 L1164.88 1210.85 L1164.29 1210.85 L1163.71 1210.85 L1163.12 1210.85 L1162.54 1210.85 L1161.95 1210.85 L1161.36 1210.85 L1160.78 1210.85 L1160.19 1210.85 L1159.6 1210.85 L1159.02 1210.85 L1158.43 1210.85 L1157.84 1210.85 L1157.26 1210.85 L1156.67 1210.85 L1156.09 1210.85 L1155.5 1210.85 L1154.91 1210.85 L1154.33 1210.85 L1153.74 1210.85 L1153.15 1210.85 L1152.57 1210.85 L1151.98 1210.85 L1151.39 1210.85 L1150.81 1210.85 L1150.22 1210.85 L1149.63 1210.85 L1149.05 1210.85 L1148.46 1210.85 L1147.88 1210.85 L1147.29 1210.85 L1146.7 1210.85 L1146.12 1210.85 L1145.53 1210.85 L1144.94 1210.85 L1144.36 1210.85 L1143.77 1210.85 L1143.18 1210.85 L1142.6 1210.85 L1142.01 1210.85 L1141.42 1210.85 L1140.84 1210.85 L1140.25 1210.85 L1139.67 1210.85 L1139.08 1210.85 L1138.49 1210.85 L1137.91 1210.85 L1137.32 1210.85 L1136.73 1210.85 L1136.15 1210.85 L1135.56 1210.85 L1134.97 1210.85 L1134.39 1210.85 L1133.8 1210.85 L1133.21 1210.85 L1132.63 1210.85 L1132.04 1210.85 L1131.46 1210.85 L1130.87 1210.85 L1130.28 1210.85 L1129.7 1210.85 L1129.11 1210.85 L1128.52 1210.85 L1127.94 1210.85 L1127.35 1210.85 L1126.76 1210.85 L1126.18 1210.85 L1125.59 1210.85 L1125.01 1210.85 L1124.42 1210.85 L1123.83 1210.85 L1123.25 1210.85 L1122.66 1210.85 L1122.07 1210.85 L1121.49 1210.85 L1120.9 1210.85 L1120.31 1210.85 L1119.73 1210.85 L1119.14 1210.85 L1118.55 1210.85 L1117.97 1210.85 L1117.38 1210.85 L1116.8 1210.85 L1116.21 1210.85 L1115.62 1210.85 L1115.04 1210.85 L1114.45 1210.85 L1113.86 1210.85 L1113.28 1210.85 L1112.69 1210.85 L1112.1 1210.85 L1111.52 1210.85 L1110.93 1210.85 L1110.34 1210.85 L1109.76 1210.85 L1109.17 1210.85 L1108.59 1210.85 L1108 1210.85 L1107.41 1210.85 L1106.83 1210.85 L1106.24 1210.85 L1105.65 1210.85 L1105.07 1210.85 L1104.48 1210.85 L1103.89 1210.85 L1103.31 1210.85 L1102.72 1210.85 L1102.14 1210.85 L1101.55 1210.85 L1100.96 1210.85 L1100.38 1210.85 L1099.79 1210.85 L1099.2 1210.85 L1098.62 1210.85 L1098.03 1210.85 L1097.44 1210.85 L1096.86 1210.85 L1096.27 1210.85 L1095.68 1210.85 L1095.1 1210.85 L1094.51 1210.85 L1093.93 1210.85 L1093.34 1210.85 L1092.75 1210.85 L1092.17 1210.85 L1091.58 1210.85 L1090.99 1210.85 L1090.41 1210.85 L1089.82 1210.85 L1089.23 1210.85 L1088.65 1210.85 L1088.06 1210.85 L1087.47 1210.85 L1086.89 1210.85 L1086.3 1210.85 L1085.72 1210.85 L1085.13 1210.85 L1084.54 1210.85 L1083.96 1210.85 L1083.37 1210.85 L1082.78 1210.85 L1082.2 1210.85 L1081.61 1210.85 L1081.02 1210.85 L1080.44 1210.85 L1079.85 1210.85 L1079.26 1210.85 L1078.68 1210.85 L1078.09 1210.85 L1077.51 1210.85 L1076.92 1210.85 L1076.33 1210.85 L1075.75 1210.85 L1075.16 1210.85 L1074.57 1210.85 L1073.99 1210.85 L1073.4 1210.85 L1072.81 1210.85 L1072.23 1210.85 L1071.64 1210.85 L1071.06 1210.85 L1070.47 1210.85 L1069.88 1210.85 L1069.3 1210.85 L1068.71 1210.85 L1068.12 1210.85 L1067.54 1210.85 L1066.95 1210.85 L1066.36 1210.85 L1065.78 1210.85 L1065.19 1210.85 L1064.6 1210.85 L1064.02 1210.85 L1063.43 1210.85 L1062.85 1210.85 L1062.26 1210.85 L1061.67 1210.85 L1061.09 1210.85 L1060.5 1210.85 L1059.91 1210.85 L1059.33 1210.85 L1058.74 1210.85 L1058.15 1210.85 L1057.57 1210.85 L1056.98 1210.85 L1056.39 1210.85 L1055.81 1210.85 L1055.22 1210.85 L1054.64 1210.85 L1054.05 1210.85 L1053.46 1210.85 L1052.88 1210.85 L1052.29 1210.85 L1051.7 1210.85 L1051.12 1210.85 L1050.53 1210.85 L1049.94 1210.85 L1049.36 1210.85 L1048.77 1210.85 L1048.19 1210.85 L1047.6 1210.85 L1047.01 1210.85 L1046.43 1210.85 L1045.84 1210.85 L1045.25 1210.85 L1044.67 1210.85 L1044.08 1210.85 L1043.49 1210.85 L1042.91 1210.85 L1042.32 1210.85 L1041.73 1210.85 L1041.15 1210.85 L1040.56 1210.85 L1039.98 1210.85 L1039.39 1210.85 L1038.8 1210.85 L1038.22 1210.85 L1037.63 1210.85 L1037.04 1210.85 L1036.46 1210.85 L1035.87 1210.85 L1035.28 1210.85 L1034.7 1210.85 L1034.11 1210.85 L1033.52 1210.85 L1032.94 1210.85 L1032.35 1210.85 L1031.77 1210.85 L1031.18 1210.85 L1030.59 1210.85 L1030.01 1210.85 L1029.42 1210.85 L1028.83 1210.85 L1028.25 1210.85 L1027.66 1210.85 L1027.07 1210.85 L1026.49 1210.85 L1025.9 1210.85 L1025.32 1210.85 L1024.73 1210.85 L1024.14 1210.85 L1023.56 1210.85 L1022.97 1210.85 L1022.38 1210.85 L1021.8 1210.85 L1021.21 1210.85 L1020.62 1210.85 L1020.04 1210.85 L1019.45 1210.85 L1018.86 1210.85 L1018.28 1210.85 L1017.69 1210.85 L1017.11 1210.85 L1016.52 1210.85 L1015.93 1210.85 L1015.35 1210.85 L1014.76 1210.85 L1014.17 1210.85 L1013.59 1210.85 L1013 1210.85 L1012.41 1210.85 L1011.83 1210.85 L1011.24 1210.85 L1010.65 1210.85 L1010.07 1210.85 L1009.48 1210.85 L1008.9 1210.85 L1008.31 1210.85 L1007.72 1210.85 L1007.14 1210.85 L1006.55 1210.85 L1005.96 1210.85 L1005.38 1210.85 L1004.79 1210.85 L1004.2 1210.85 L1003.62 1210.85 L1003.03 1210.85 L1002.44 1210.85 L1001.86 1210.85 L1001.27 1210.85 L1000.69 1210.85 L1000.1 1210.85 L999.513 1210.85 L998.926 1210.85 L998.34 1210.85 L997.754 1210.85 L997.167 1210.85 L996.581 1210.85 L995.994 1210.85 L995.408 1210.85 L994.822 1210.85 L994.235 1210.85 L993.649 1210.85 L993.062 1210.85 L992.476 1210.85 L991.889 1210.85 L991.303 1210.85 L990.717 1210.85 L990.13 1210.85 L989.544 1210.85 L988.957 1210.85 L988.371 1210.85 L987.785 1210.85 L987.198 1210.85 L986.612 1210.85 L986.025 1210.85  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.22 986.612,1211.22 987.198,1211.22 987.785,1211.22 988.371,1211.22 988.957,1211.22 989.544,1211.22 990.13,1211.22 990.717,1211.22 991.303,1211.22 991.889,1211.22 992.476,1211.22 993.062,1211.22 993.649,1211.22 994.235,1211.22 994.822,1211.22 995.408,1211.22 995.994,1211.22 996.581,1211.22 997.167,1211.22 997.754,1211.22 998.34,1211.22 998.926,1211.22 999.513,1211.22 1000.1,1211.22 1000.69,1211.22 1001.27,1211.22 1001.86,1211.22 1002.44,1211.22 1003.03,1211.22 1003.62,1211.22 1004.2,1211.22 1004.79,1211.22 1005.38,1211.22 1005.96,1211.22 1006.55,1211.22 1007.14,1211.22 1007.72,1211.22 1008.31,1211.22 1008.9,1211.22 1009.48,1211.22 1010.07,1211.22 1010.65,1211.22 1011.24,1211.22 1011.83,1211.22 1012.41,1211.22 1013,1211.22 1013.59,1211.22 1014.17,1211.22 1014.76,1211.22 1015.35,1211.22 1015.93,1211.22 1016.52,1211.22 1017.11,1211.22 1017.69,1211.22 1018.28,1211.22 1018.86,1211.22 1019.45,1211.22 1020.04,1211.22 1020.62,1211.22 1021.21,1211.22 1021.8,1211.22 1022.38,1211.22 1022.97,1211.22 1023.56,1211.22 1024.14,1211.22 1024.73,1211.22 1025.32,1211.22 1025.9,1211.22 1026.49,1211.22 1027.07,1211.22 1027.66,1211.22 1028.25,1211.22 1028.83,1211.22 1029.42,1211.22 1030.01,1211.22 1030.59,1211.22 1031.18,1211.22 1031.77,1211.22 1032.35,1211.22 1032.94,1211.22 1033.52,1211.22 1034.11,1211.22 1034.7,1211.22 1035.28,1211.22 1035.87,1211.22 1036.46,1211.22 1037.04,1211.22 1037.63,1211.22 1038.22,1211.22 1038.8,1211.22 1039.39,1211.22 1039.98,1211.22 1040.56,1211.22 1041.15,1211.22 1041.73,1211.22 1042.32,1211.22 1042.91,1211.22 1043.49,1211.22 1044.08,1211.22 1044.67,1211.22 1045.25,1211.22 1045.84,1211.22 1046.43,1211.22 1047.01,1211.22 1047.6,1211.22 1048.19,1211.22 1048.77,1211.22 1049.36,1211.22 1049.94,1211.22 1050.53,1211.22 1051.12,1211.22 1051.7,1211.22 1052.29,1211.22 1052.88,1211.22 1053.46,1211.22 1054.05,1211.22 1054.64,1211.22 1055.22,1211.22 1055.81,1211.22 1056.39,1211.22 1056.98,1211.22 1057.57,1211.22 1058.15,1211.22 1058.74,1211.22 1059.33,1211.22 1059.91,1211.22 1060.5,1211.22 1061.09,1211.22 1061.67,1211.22 1062.26,1211.22 1062.85,1211.22 1063.43,1211.22 1064.02,1211.22 1064.6,1211.22 1065.19,1211.22 1065.78,1211.22 1066.36,1211.22 1066.95,1211.22 1067.54,1211.22 1068.12,1211.22 1068.71,1211.22 1069.3,1211.22 1069.88,1211.22 1070.47,1211.22 1071.06,1211.22 1071.64,1211.22 1072.23,1211.22 1072.81,1211.22 1073.4,1211.22 1073.99,1211.22 1074.57,1211.22 1075.16,1211.22 1075.75,1211.22 1076.33,1211.22 1076.92,1211.22 1077.51,1211.22 1078.09,1211.22 1078.68,1211.22 1079.26,1211.22 1079.85,1211.22 1080.44,1211.22 1081.02,1211.22 1081.61,1211.22 1082.2,1211.22 1082.78,1211.22 1083.37,1211.22 1083.96,1211.22 1084.54,1211.22 1085.13,1211.22 1085.72,1211.22 1086.3,1211.22 1086.89,1211.22 1087.47,1211.22 1088.06,1211.22 1088.65,1211.22 1089.23,1211.22 1089.82,1211.22 1090.41,1211.22 1090.99,1211.22 1091.58,1211.22 1092.17,1211.22 1092.75,1211.22 1093.34,1211.22 1093.93,1211.22 1094.51,1211.22 1095.1,1211.22 1095.68,1211.22 1096.27,1211.22 1096.86,1211.22 1097.44,1211.22 1098.03,1211.22 1098.62,1211.22 1099.2,1211.22 1099.79,1211.22 1100.38,1211.22 1100.96,1211.22 1101.55,1211.22 1102.14,1211.22 1102.72,1211.22 1103.31,1211.22 1103.89,1211.22 1104.48,1211.22 1105.07,1211.22 1105.65,1211.22 1106.24,1211.22 1106.83,1211.22 1107.41,1211.22 1108,1211.22 1108.59,1211.22 1109.17,1211.22 1109.76,1211.22 1110.34,1211.22 1110.93,1211.22 1111.52,1211.22 1112.1,1211.22 1112.69,1211.22 1113.28,1211.22 1113.86,1211.22 1114.45,1211.22 1115.04,1211.22 1115.62,1211.22 1116.21,1211.22 1116.8,1211.22 1117.38,1211.22 1117.97,1211.22 1118.55,1211.22 1119.14,1211.22 1119.73,1211.22 1120.31,1211.22 1120.9,1211.22 1121.49,1211.22 1122.07,1211.22 1122.66,1211.22 1123.25,1211.22 1123.83,1211.22 1124.42,1211.22 1125.01,1211.22 1125.59,1211.22 1126.18,1211.22 1126.76,1211.22 1127.35,1211.22 1127.94,1211.22 1128.52,1211.22 1129.11,1211.22 1129.7,1211.22 1130.28,1211.22 1130.87,1211.22 1131.46,1211.22 1132.04,1211.22 1132.63,1211.22 1133.21,1211.22 1133.8,1211.22 1134.39,1211.22 1134.97,1211.22 1135.56,1211.22 1136.15,1211.22 1136.73,1211.22 1137.32,1211.22 1137.91,1211.22 1138.49,1211.22 1139.08,1211.22 1139.67,1211.22 1140.25,1211.22 1140.84,1211.22 1141.42,1211.22 1142.01,1211.22 1142.6,1211.22 1143.18,1211.22 1143.77,1211.22 1144.36,1211.22 1144.94,1211.22 1145.53,1211.22 1146.12,1211.22 1146.7,1211.22 1147.29,1211.22 1147.88,1211.22 1148.46,1211.22 1149.05,1211.22 1149.63,1211.22 1150.22,1211.22 1150.81,1211.22 1151.39,1211.22 1151.98,1211.22 1152.57,1211.22 1153.15,1211.22 1153.74,1211.22 1154.33,1211.22 1154.91,1211.22 1155.5,1211.22 1156.09,1211.22 1156.67,1211.22 1157.26,1211.22 1157.84,1211.22 1158.43,1211.22 1159.02,1211.22 1159.6,1211.22 1160.19,1211.22 1160.78,1211.22 1161.36,1211.22 1161.95,1211.22 1162.54,1211.22 1163.12,1211.22 1163.71,1211.22 1164.29,1211.22 1164.88,1211.22 1165.47,1211.22 1166.05,1211.22 1166.64,1211.22 1167.23,1211.22 1167.81,1211.22 1168.4,1211.22 1168.99,1211.22 1169.57,1211.22 1170.16,1211.22 1170.75,1211.22 1171.33,1211.22 1171.92,1211.22 1172.5,1211.22 1173.09,1211.22 1173.68,1211.22 1174.26,1211.22 1174.85,1211.22 1175.44,1211.22 1176.02,1211.22 1176.61,1211.22 1177.2,1211.22 1177.78,1211.22 1178.37,1211.22 1178.96,1211.22 1179.54,1211.22 1180.13,1211.22 1180.71,1211.22 1181.3,1211.22 1181.89,1211.22 1182.47,1211.22 1183.06,1211.22 1183.65,1211.22 1184.23,1211.22 1184.82,1211.22 1185.41,1211.22 1185.99,1211.22 1186.58,1211.22 1187.16,1211.22 1187.75,1211.22 1188.34,1211.22 1188.92,1211.22 1189.51,1211.22 1190.1,1211.22 1190.68,1211.22 1191.27,1211.22 1191.86,1211.22 1192.44,1211.22 1193.03,1211.22 1193.62,1211.22 1194.2,1211.22 1194.79,1211.22 1195.37,1211.22 1195.96,1211.22 1196.55,1211.22 1197.13,1211.22 1197.72,1211.22 1198.31,1211.22 1198.89,1211.22 1199.48,1211.22 1200.07,1211.22 1200.65,1211.22 1201.24,1211.22 1201.83,1211.22 1202.41,1211.22 1203,1211.22 1203.58,1211.22 1204.17,1211.22 1204.76,1211.22 1205.34,1211.22 1205.93,1211.22 1206.52,1211.22 1207.1,1211.22 1207.69,1211.22 1208.28,1211.22 1208.86,1211.22 1209.45,1211.22 1210.03,1211.22 1210.62,1211.22 1211.21,1211.22 1211.79,1211.22 1212.38,1211.22 1212.97,1211.22 1213.55,1211.22 1214.14,1211.22 1214.73,1211.22 1215.31,1211.22 1215.9,1211.22 1216.49,1211.22 1217.07,1211.22 1217.66,1211.22 1218.24,1211.22 1218.83,1211.22 1219.42,1211.22 1220,1211.22 1220.59,1211.22 1221.18,1211.22 1221.76,1211.22 1222.35,1211.22 1222.94,1211.22 1223.52,1211.22 1224.11,1211.22 1224.7,1211.22 1225.28,1211.22 1225.87,1211.22 1226.45,1211.22 1227.04,1211.22 1227.63,1211.22 1228.21,1211.22 1228.8,1211.22 1229.39,1211.22 1229.97,1211.22 1230.56,1211.22 1231.15,1211.22 1231.73,1211.22 1232.32,1211.22 1232.91,1211.22 1233.49,1211.22 1234.08,1211.22 1234.66,1211.22 1235.25,1211.22 1235.84,1211.22 1236.42,1211.22 1237.01,1211.22 1237.6,1211.22 1238.18,1211.22 1238.77,1211.22 1239.36,1211.22 1239.94,1211.22 1240.53,1211.22 1241.11,1211.22 1241.7,1211.22 1242.29,1211.22 1242.87,1211.22 1243.46,1211.22 1244.05,1211.22 1244.63,1211.22 1245.22,1211.22 1245.81,1211.22 1246.39,1211.22 1246.98,1211.22 1247.57,1211.22 1248.15,1211.22 1248.74,1211.22 1249.32,1211.22 1249.91,1211.22 1250.5,1211.22 1251.08,1211.22 1251.67,1211.22 1252.26,1211.22 1252.84,1211.22 1253.43,1211.22 1254.02,1211.22 1254.6,1211.22 1255.19,1211.22 1255.78,1211.22 1256.36,1211.22 1256.95,1211.22 1257.53,1211.22 1258.12,1211.22 1258.71,1211.22 1259.29,1211.22 1259.88,1211.22 1260.47,1211.22 1261.05,1211.22 1261.64,1211.22 1262.23,1211.22 1262.81,1211.22 1263.4,1211.22 1263.98,1211.22 1264.57,1211.22 1265.16,1211.22 1265.74,1211.22 1266.33,1211.22 1266.92,1211.22 1267.5,1211.22 1268.09,1211.22 1268.68,1211.22 1269.26,1211.22 1269.85,1211.22 1270.44,1211.22 1271.02,1211.22 1271.61,1211.22 1272.19,1211.22 1272.78,1211.22 1273.37,1211.22 1273.95,1211.22 1274.54,1211.22 1275.13,1211.22 1275.71,1211.22 1276.3,1211.22 1276.89,1211.22 1277.47,1211.22 1278.06,1211.22 1278.65,1211.22 1279.23,1211.22 1279.82,1211.22 1280.4,1211.22 1280.99,1211.22 1281.58,1211.22 1282.16,1211.22 1282.75,1211.22 1283.34,1211.22 1283.92,1211.22 1284.51,1211.22 1285.1,1211.22 1285.68,1211.22 1286.27,1211.22 1286.86,1211.22 1287.44,1211.22 1288.03,1211.22 1288.61,1211.22 1289.2,1211.22 1289.79,1211.22 1290.37,1211.22 1290.96,1211.22 1291.55,1211.22 1292.13,1211.22 1292.72,1211.22 1293.31,1211.22 1293.89,1211.22 1294.48,1211.22 1295.06,1211.22 1295.65,1211.22 1296.24,1211.22 1296.82,1211.22 1297.41,1211.22 1298,1211.22 1298.58,1211.22 1299.17,1211.22 1299.76,1211.22 1300.34,1211.22 1300.93,1211.22 1301.52,1211.22 1302.1,1211.22 1302.69,1211.22 1303.27,1211.22 1303.86,1211.22 1304.45,1211.22 1305.03,1211.22 1305.62,1211.22 1306.21,1211.22 1306.79,1211.22 1307.38,1211.22 1307.97,1211.22 1308.55,1211.22 1309.14,1211.22 1309.73,1211.22 1310.31,1211.22 1310.9,1211.22 1311.48,1211.22 1312.07,1211.22 1312.66,1211.22 1313.24,1211.22 1313.83,1211.22 1314.42,1211.22 1315,1211.22 1315.59,1211.22 1316.18,1211.22 1316.76,1211.22 1317.35,1211.22 1317.93,1211.22 1318.52,1211.22 1319.11,1211.22 1319.69,1211.22 1320.28,1211.22 1320.87,1211.22 1321.45,1211.22 1322.04,1211.22 1322.63,1211.22 1323.21,1211.22 1323.8,1211.22 1324.39,1211.22 1324.97,1211.22 1325.56,1211.22 1326.14,1211.22 1326.73,1211.22 1327.32,1211.22 1327.9,1211.22 1328.49,1211.22 1329.08,1211.22 1329.66,1211.22 1330.25,1211.22 1330.84,1211.22 1331.42,1211.22 1332.01,1211.22 1332.6,1211.22 1333.18,1211.22 1333.77,1211.22 1334.35,1211.22 1334.94,1211.22 1335.53,1211.22 1336.11,1211.22 1336.7,1211.22 1337.29,1211.22 1337.87,1211.22 1338.46,1211.22 1339.05,1211.22 1339.63,1211.22 1340.22,1211.22 1340.8,1211.22 1341.39,1211.22 1341.98,1211.22 1342.56,1211.22 1343.15,1211.22 1343.74,1211.22 1344.32,1211.22 1344.91,1211.22 1345.5,1211.22 1346.08,1211.22 1346.67,1211.22 1347.26,1211.22 1347.84,1211.22 1348.43,1211.22 1349.01,1211.22 1349.6,1211.22 1350.19,1211.22 1350.77,1211.22 1351.36,1211.22 1351.95,1211.22 1352.53,1211.22 1353.12,1211.22 1353.71,1211.22 1354.29,1211.22 1354.88,1211.22 1355.47,1211.22 1356.05,1211.22 1356.64,1211.22 1357.22,1211.22 1357.81,1211.22 1358.4,1211.22 1358.98,1211.22 1359.57,1211.22 1360.16,1211.22 1360.74,1211.22 1361.33,1211.22 1361.92,1211.22 1362.5,1211.22 1363.09,1211.22 1363.68,1211.22 1364.26,1211.22 1364.85,1211.22 1365.43,1211.22 1366.02,1211.22 1366.61,1211.22 1367.19,1211.22 1367.78,1211.22 1368.37,1211.22 1368.95,1211.22 1369.54,1211.22 1370.13,1211.22 1370.71,1211.22 1371.3,1211.22 1371.88,1211.22 1372.47,1211.22 1373.06,1211.22 1373.64,1211.22 1374.23,1211.22 1374.82,1211.22 1375.4,1211.22 1375.99,1211.22 1376.58,1211.22 1377.16,1211.22 1377.75,1211.22 1378.34,1211.22 1378.92,1211.22 1379.51,1211.22 1380.09,1211.22 1380.68,1211.22 1381.27,1211.22 1381.85,1211.22 1382.44,1211.22 1383.03,1211.22 1383.61,1211.22 1384.2,1211.22 1384.79,1211.22 1385.37,1211.22 1385.96,1211.22 1386.55,1211.22 1387.13,1211.22 1387.72,1211.22 1388.3,1211.22 1388.89,1211.22 1389.48,1211.22 1390.06,1211.22 1390.65,1211.22 1391.24,1211.22 1391.82,1211.22 1392.41,1211.22 1393,1211.22 1393.58,1211.22 1394.17,1211.22 1394.75,1211.22 1395.34,1211.22 1395.93,1211.22 1396.51,1211.22 1397.1,1211.22 1397.69,1211.22 1398.27,1211.22 1398.86,1211.22 1399.45,1211.22 1400.03,1211.22 1400.62,1211.22 1401.21,1211.22 1401.79,1211.22 1402.38,1211.22 1402.96,1211.22 1403.55,1211.22 1404.14,1211.22 1404.72,1211.22 1405.31,1211.22 1405.9,1211.22 1406.48,1211.22 1407.07,1211.22 1407.66,1211.22 1408.24,1211.22 1408.83,1211.22 1409.42,1211.22 1410,1211.22 1410.59,1211.22 1411.17,1211.22 1411.76,1211.22 1412.35,1211.22 1412.93,1211.22 1413.52,1211.22 1414.11,1211.22 1414.69,1211.22 1415.28,1211.22 1415.87,1211.22 1416.45,1211.22 1417.04,1211.22 1417.63,1211.22 1418.21,1211.22 1418.8,1211.22 1419.38,1211.22 1419.97,1211.22 1420.56,1211.22 1421.14,1211.22 1421.73,1211.22 1422.32,1211.22 1422.9,1211.22 1423.49,1211.22 1424.08,1211.22 1424.66,1211.22 1425.25,1211.22 1425.83,1211.22 1426.42,1211.22 1427.01,1211.22 1427.59,1211.22 1428.18,1211.22 1428.77,1211.22 1429.35,1211.22 1429.94,1211.22 1430.53,1211.22 1431.11,1211.22 1431.7,1211.22 1432.29,1211.22 1432.87,1211.22 1433.46,1211.22 1434.04,1211.22 1434.63,1211.22 1435.22,1211.22 1435.8,1211.22 1436.39,1211.22 1436.98,1211.22 1437.56,1211.22 1438.15,1211.22 1438.74,1211.22 1439.32,1211.22 1439.91,1211.22 1440.5,1211.22 1441.08,1211.22 1441.67,1211.22 1442.25,1211.22 1442.84,1211.22 1443.43,1211.22 1444.01,1211.22 1444.6,1211.22 1445.19,1211.22 1445.77,1211.22 1446.36,1211.22 1446.95,1211.22 1447.53,1211.22 1448.12,1211.22 1448.7,1211.22 1449.29,1211.22 1449.88,1211.22 1450.46,1211.22 1451.05,1211.22 1451.64,1211.22 1452.22,1211.22 1452.81,1211.22 1453.4,1211.22 1453.98,1211.22 1454.57,1211.22 1455.16,1211.22 1455.74,1211.22 1456.33,1211.22 1456.91,1211.22 1457.5,1211.22 1458.09,1211.22 1458.67,1211.22 1459.26,1211.22 1459.85,1211.22 1460.43,1211.22 1461.02,1211.22 1461.61,1211.22 1462.19,1211.22 1462.78,1211.22 1463.37,1211.22 1463.95,1211.22 1464.54,1211.22 1465.12,1211.22 1465.71,1211.22 1466.3,1211.22 1466.88,1211.22 1467.47,1211.22 1468.06,1211.22 1468.64,1211.22 1469.23,1211.22 1469.82,1211.22 1470.4,1211.22 1470.99,1211.22 1471.57,1211.22 1472.16,1211.22 1472.75,1211.22 1473.33,1211.22 1473.92,1211.22 1474.51,1211.22 1475.09,1211.22 1475.68,1211.22 1476.27,1211.22 1476.85,1211.22 1477.44,1211.22 1478.03,1211.22 1478.61,1211.22 1479.2,1211.22 1479.78,1211.22 1480.37,1211.22 1480.96,1211.22 1481.54,1211.22 1482.13,1211.22 1482.72,1211.22 1483.3,1211.22 1483.89,1211.22 1484.48,1211.22 1485.06,1211.22 1485.65,1211.22 1486.24,1211.22 1486.82,1211.22 1487.41,1211.22 1487.99,1211.22 1488.58,1211.22 1489.17,1211.22 1489.75,1211.22 1490.34,1211.22 1490.93,1211.22 1491.51,1211.22 1492.1,1211.22 1492.69,1211.22 1493.27,1211.22 1493.86,1211.22 1494.45,1211.22 1495.03,1211.22 1495.62,1211.22 1496.2,1211.22 1496.79,1211.22 1497.38,1211.22 1497.96,1211.22 1498.55,1211.22 1499.14,1211.22 1499.72,1211.22 1500.31,1211.22 1500.9,1211.22 1501.48,1211.22 1502.07,1211.22 1502.65,1211.22 1503.24,1211.22 1503.83,1211.22 1504.41,1211.22 1505,1211.22 1505.59,1211.22 1506.17,1211.22 1506.76,1211.22 1507.35,1211.22 1507.93,1211.22 1508.52,1211.22 1509.11,1211.22 1509.69,1211.22 1510.28,1211.22 1510.86,1211.22 1511.45,1211.22 1512.04,1211.22 1512.62,1211.22 1513.21,1211.22 1513.8,1211.22 1514.38,1211.22 1514.97,1211.22 1515.56,1211.22 1516.14,1211.22 1516.73,1211.22 1517.32,1211.22 1517.9,1211.22 1518.49,1211.22 1519.07,1211.22 1519.66,1211.22 1520.25,1211.22 1520.83,1211.22 1521.42,1211.22 1522.01,1211.22 1522.59,1211.22 1523.18,1211.22 1523.77,1211.22 1524.35,1211.22 1524.94,1211.22 1525.52,1211.22 1526.11,1211.22 1526.7,1211.22 1527.28,1211.22 1527.87,1211.22 1528.46,1211.22 1529.04,1211.22 1529.63,1211.22 1530.22,1211.22 1530.8,1211.22 1531.39,1211.22 1531.98,1211.22 1532.56,1211.22 1533.15,1211.22 1533.73,1211.22 1534.32,1211.22 1534.91,1211.22 1535.49,1211.22 1536.08,1211.22 1536.67,1211.22 1537.25,1211.22 1537.84,1211.22 1538.43,1211.22 1539.01,1211.22 1539.6,1211.22 1540.19,1211.22 1540.77,1211.22 1541.36,1211.22 1541.94,1211.22 1542.53,1211.22 1543.12,1211.22 1543.7,1211.22 1544.29,1211.22 1544.88,1211.22 1545.46,1211.22 1546.05,1211.22 1546.64,1211.22 1547.22,1211.22 1547.81,1211.22 1548.4,1211.22 1548.98,1211.22 1549.57,1211.22 1550.15,1211.22 1550.74,1211.22 1551.33,1211.22 1551.91,1211.22 1552.5,1211.22 1553.09,1211.22 1553.67,1211.22 1554.26,1211.22 1554.85,1211.22 1555.43,1211.22 1556.02,1211.22 1556.6,1211.22 1557.19,1211.22 1557.78,1211.22 1558.36,1211.22 1558.95,1211.22 1559.54,1211.22 1560.12,1211.22 1560.71,1211.22 1561.3,1211.22 1561.88,1211.22 1562.47,1211.22 1563.06,1211.22 1563.64,1211.22 1564.23,1211.22 1564.81,1211.22 1565.4,1211.22 1565.99,1211.22 1566.57,1211.22 1567.16,1211.22 1567.75,1211.22 1568.33,1211.22 1568.92,1211.22 1569.51,1211.22 1570.09,1211.22 1570.68,1211.22 1571.27,1211.22 1571.85,1211.22 1572.44,1211.22 1573.02,1211.22 1573.61,1211.22 1574.2,1211.22 1574.78,1211.22 1575.37,1211.22 1575.96,1211.22 1576.54,1211.22 1577.13,1211.22 1577.72,1211.22 1578.3,1211.22 1578.89,1211.22 1579.47,1211.22 1580.06,1211.22 1580.65,1211.22 1581.23,1211.22 1581.82,1211.22 1582.41,1211.22 1582.99,1211.22 1583.58,1211.22 1584.17,1211.22 1584.75,1211.22 1585.34,1211.22 1585.93,1211.22 1586.51,1211.22 1587.1,1211.22 1587.68,1211.22 1588.27,1211.22 1588.86,1211.22 1589.44,1211.22 1590.03,1211.22 1590.62,1211.22 1591.2,1211.22 1591.79,1211.22 1592.38,1211.22 1592.96,1211.22 1593.55,1211.22 1594.14,1211.22 1594.72,1211.22 1595.31,1211.22 1595.89,1211.22 1596.48,1211.22 1597.07,1211.22 1597.65,1211.22 1598.24,1211.22 1598.83,1211.22 1599.41,1211.22 1600,1211.22 1600.59,1211.22 1601.17,1211.22 1601.76,1211.22 1602.34,1211.22 1602.93,1211.22 1603.52,1211.22 1604.1,1211.22 1604.69,1211.22 1605.28,1211.22 1605.86,1211.22 1606.45,1211.22 1607.04,1211.22 1607.62,1211.22 1608.21,1211.22 1608.8,1211.22 1609.38,1211.22 1609.97,1211.22 1610.55,1211.22 1611.14,1211.22 1611.73,1211.22 1612.31,1211.22 1612.9,1211.22 1613.49,1211.22 1614.07,1211.22 1614.66,1211.22 1615.25,1211.22 1615.83,1211.22 1616.42,1211.22 1617.01,1211.22 1617.59,1211.22 1618.18,1211.22 1618.76,1211.22 1619.35,1211.22 1619.94,1211.22 1620.52,1211.22 1621.11,1211.22 1621.7,1211.22 1622.28,1211.22 1622.87,1211.22 1623.46,1211.22 1624.04,1211.22 1624.63,1211.22 1625.22,1211.22 1625.8,1211.22 1626.39,1211.22 1626.97,1211.22 1627.56,1211.22 1628.15,1211.22 1628.73,1211.22 1629.32,1211.22 1629.91,1211.22 1630.49,1211.22 1631.08,1211.22 1631.67,1211.22 1632.25,1211.22 1632.84,1211.22 1633.42,1211.22 1634.01,1211.22 1634.6,1211.22 1635.18,1211.22 1635.77,1211.22 1636.36,1211.22 1636.94,1211.22 1637.53,1211.22 1638.12,1211.22 1638.7,1211.22 1639.29,1211.22 1639.88,1211.22 1640.46,1211.22 1641.05,1211.22 1641.63,1211.22 1642.22,1211.22 1642.81,1211.22 1643.39,1211.22 1643.98,1211.22 1644.57,1211.22 1645.15,1211.22 1645.74,1211.22 1646.33,1211.22 1646.91,1211.22 1647.5,1211.22 1648.09,1211.22 1648.67,1211.22 1649.26,1211.22 1649.84,1211.22 1650.43,1211.22 1651.02,1211.22 1651.6,1211.22 1652.19,1211.22 1652.78,1211.22 1653.36,1211.22 1653.95,1211.22 1654.54,1211.22 1655.12,1211.22 1655.71,1211.22 1656.29,1211.22 1656.88,1211.22 1657.47,1211.22 1658.05,1211.22 1658.64,1211.22 1659.23,1211.22 1659.81,1211.22 1660.4,1211.22 1660.99,1211.22 1661.57,1211.22 1662.16,1211.22 1662.75,1211.22 1663.33,1211.22 1663.92,1211.22 1664.5,1211.22 1665.09,1211.22 1665.68,1211.22 1666.26,1211.22 1666.85,1211.22 1667.44,1211.22 1668.02,1211.22 1668.61,1211.22 1669.2,1211.22 1669.78,1211.22 1670.37,1211.22 1670.96,1211.22 1671.54,1211.22 1672.13,1211.22 1672.71,1211.22 1673.3,1211.22 1673.89,1211.22 1674.47,1211.22 1675.06,1211.22 1675.65,1211.22 1676.23,1211.22 1676.82,1211.22 1677.41,1211.22 1677.99,1211.22 1678.58,1211.22 1679.17,1211.22 1679.75,1211.22 1680.34,1211.22 1680.92,1211.22 1681.51,1211.22 1682.1,1211.22 1682.68,1211.22 1683.27,1211.22 1683.86,1211.22 1684.44,1211.22 1685.03,1211.22 1685.62,1211.22 1686.2,1211.22 1686.79,1211.22 1687.37,1211.22 1687.96,1211.22 1688.55,1211.22 1689.13,1211.22 1689.72,1211.22 1690.31,1211.22 1690.89,1211.22 1691.48,1211.22 1692.07,1211.22 1692.65,1211.22 1693.24,1211.22 1693.83,1211.22 1694.41,1211.22 1695,1211.22 1695.58,1211.22 1696.17,1211.22 1696.76,1211.22 1697.34,1211.22 1697.93,1211.22 1698.52,1211.22 1699.1,1211.22 1699.69,1211.22 1700.28,1211.22 1700.86,1211.22 1701.45,1211.22 1702.04,1211.22 1702.62,1211.22 1703.21,1211.22 1703.79,1211.22 1704.38,1211.22 1704.97,1211.22 1705.55,1211.22 1706.14,1211.22 1706.73,1211.22 1707.31,1211.22 1707.9,1211.22 1708.49,1211.22 1709.07,1211.22 1709.66,1211.22 1710.24,1211.22 1710.83,1211.22 1711.42,1211.22 1712,1211.22 1712.59,1211.22 1713.18,1211.22 1713.76,1211.22 1714.35,1211.22 1714.94,1211.22 1715.52,1211.22 1716.11,1211.22 1716.7,1211.22 1717.28,1211.22 1717.87,1211.22 1718.45,1211.22 1719.04,1211.22 1719.63,1211.22 1720.21,1211.22 1720.8,1211.22 1721.39,1211.22 1721.97,1211.22 1722.56,1211.22 1723.15,1211.22 1723.73,1211.22 1724.32,1211.22 1724.91,1211.22 1725.49,1211.22 1726.08,1211.22 1726.66,1211.22 1727.25,1211.22 1727.84,1211.22 1728.42,1211.22 1729.01,1211.22 1729.6,1211.22 1730.18,1211.22 1730.77,1211.22 1731.36,1211.22 1731.94,1211.22 1732.53,1211.22 1733.11,1211.22 1733.7,1211.22 1734.29,1211.22 1734.87,1211.22 1735.46,1211.22 1736.05,1211.22 1736.63,1211.22 1737.22,1211.22 1737.81,1211.22 1738.39,1211.22 1738.98,1211.22 1739.57,1211.22 1740.15,1211.22 1740.74,1211.22 1741.32,1211.22 1741.91,1211.22 1742.5,1211.22 1743.08,1211.22 1743.67,1211.22 1744.26,1211.22 1744.84,1211.22 1745.43,1211.22 1746.02,1211.22 1746.6,1211.22 1747.19,1211.22 1747.78,1211.22 1748.36,1211.22 1748.95,1211.22 1749.53,1211.22 1750.12,1211.22 1750.71,1211.22 1751.29,1211.22 1751.88,1211.22 1752.47,1211.22 1753.05,1211.22 1753.64,1211.22 1754.23,1211.22 1754.81,1211.22 1755.4,1211.22 1755.99,1211.22 1756.57,1211.22 1757.16,1211.22 1757.74,1211.22 1758.33,1211.22 1758.92,1211.22 1759.5,1211.22 1760.09,1211.22 1760.68,1211.22 1761.26,1211.22 1761.85,1211.22 1762.44,1211.22 1763.02,1211.22 1763.61,1211.22 1764.19,1211.22 1764.78,1211.22 1765.37,1211.22 1765.95,1211.22 1766.54,1211.22 1767.13,1211.22 1767.71,1211.22 1768.3,1211.22 1768.89,1211.22 1769.47,1211.22 1770.06,1211.22 1770.65,1211.22 1771.23,1211.22 1771.82,1211.22 1772.4,1211.22 1772.99,1211.22 1773.58,1211.22 1774.16,1211.22 1774.75,1211.22 1775.34,1211.22 1775.92,1211.22 1776.51,1211.22 1777.1,1211.22 1777.68,1211.22 1778.27,1211.22 1778.86,1211.22 1779.44,1211.22 1780.03,1211.22 1780.61,1211.22 1781.2,1211.22 1781.79,1211.22 1782.37,1211.22 1782.96,1211.22 1783.55,1211.22 1784.13,1211.22 1784.72,1211.22 1785.31,1211.22 1785.89,1211.22 1786.48,1211.22 1787.06,1211.22 1787.65,1211.22 1788.24,1211.22 1788.82,1211.22 1789.41,1211.22 1790,1211.22 1790.58,1211.22 1791.17,1211.22 1791.76,1211.22 1792.34,1211.22 1792.93,1211.22 1793.52,1211.22 1794.1,1211.22 1794.69,1211.22 1795.27,1211.22 1795.86,1211.22 1796.45,1211.22 1797.03,1211.22 1797.62,1211.22 1798.21,1211.22 1798.79,1211.22 1799.38,1211.22 1799.97,1211.22 1800.55,1211.22 1801.14,1211.22 1801.73,1211.22 1802.31,1211.22 1802.9,1211.22 1803.48,1211.22 1804.07,1211.22 1804.66,1211.22 1805.24,1211.22 1805.83,1211.22 1806.42,1211.22 1807,1211.22 1807.59,1211.22 1808.18,1211.22 1808.76,1211.22 1809.35,1211.22 1809.94,1211.22 1810.52,1211.22 1811.11,1211.22 1811.69,1211.22 1812.28,1211.22 1812.87,1211.22 1813.45,1211.22 1814.04,1211.22 1814.63,1211.22 1815.21,1211.22 1815.8,1211.22 1816.39,1211.22 1816.97,1211.22 1817.56,1211.22 1818.14,1211.22 1818.73,1211.22 1819.32,1211.22 1819.9,1211.22 1820.49,1211.22 1821.08,1211.22 1821.66,1211.22 1822.25,1211.22 1822.84,1211.22 1823.42,1211.22 1824.01,1211.22 1824.6,1211.22 1825.18,1211.22 1825.77,1211.22 1826.35,1211.22 1826.94,1211.22 1827.53,1211.22 1828.11,1211.22 1828.7,1211.22 1829.29,1211.22 1829.87,1211.22 1830.46,1211.22 1831.05,1211.22 1831.63,1211.22 1832.22,1211.22 1832.81,1211.22 1833.39,1211.22 1833.98,1211.22 1834.56,1211.22 1835.15,1211.22 1835.74,1211.22 1836.32,1211.22 1836.91,1211.22 1837.5,1211.22 1838.08,1211.22 1838.67,1211.22 1839.26,1211.22 1839.84,1211.22 1840.43,1211.22 1841.01,1211.22 1841.6,1211.22 1842.19,1211.22 1842.77,1211.22 1843.36,1211.22 1843.95,1211.22 1844.53,1211.22 1845.12,1211.22 1845.71,1211.22 1846.29,1211.22 1846.88,1211.22 1847.47,1211.22 1848.05,1211.22 1848.64,1211.22 1849.22,1211.22 1849.81,1211.22 1850.4,1211.22 1850.98,1211.22 1851.57,1211.22 1852.16,1211.22 1852.74,1211.22 1853.33,1211.22 1853.92,1211.22 1854.5,1211.22 1855.09,1211.22 1855.68,1211.22 1856.26,1211.22 1856.85,1211.22 1857.43,1211.22 1858.02,1211.22 1858.61,1211.22 1859.19,1211.22 1859.78,1211.22 1860.37,1211.22 1860.95,1211.22 1861.54,1211.22 1862.13,1211.22 1862.71,1211.22 1863.3,1211.22 1863.88,1211.22 1864.47,1211.22 1865.06,1211.22 1865.64,1211.22 1866.23,1211.22 1866.82,1211.22 1867.4,1211.22 1867.99,1211.22 1868.58,1211.22 1869.16,1211.22 1869.75,1211.22 1870.34,1211.22 1870.92,1211.22 1871.51,1211.22 1872.09,1211.22 1872.68,1211.22 1873.27,1211.22 1873.85,1211.22 1874.44,1211.22 1875.03,1211.22 1875.61,1211.22 1876.2,1211.22 1876.79,1211.22 1877.37,1211.22 1877.96,1211.22 1878.55,1211.22 1879.13,1211.22 1879.72,1211.22 1880.3,1211.22 1880.89,1211.22 1881.48,1211.22 1882.06,1211.22 1882.65,1211.22 1883.24,1211.22 1883.82,1211.22 1884.41,1211.22 1885,1211.22 1885.58,1211.22 1886.17,1211.22 1886.76,1211.22 1887.34,1211.22 1887.93,1211.22 1888.51,1211.22 1889.1,1211.22 1889.69,1211.22 1890.27,1211.22 1890.86,1211.22 1891.45,1211.22 1892.03,1211.22 1892.62,1211.22 1893.21,1211.22 1893.79,1211.22 1894.38,1211.22 1894.96,1211.22 1895.55,1211.22 1896.14,1211.22 1896.72,1211.22 1897.31,1211.22 1897.9,1211.22 1898.48,1211.22 1899.07,1211.22 1899.66,1211.22 1900.24,1211.22 1900.83,1211.22 1901.42,1211.22 1902,1211.22 1902.59,1211.22 1903.17,1211.22 1903.76,1211.22 1904.35,1211.22 1904.93,1211.22 1905.52,1211.22 1906.11,1211.22 1906.69,1211.22 1907.28,1211.22 1907.87,1211.22 1908.45,1211.22 1909.04,1211.22 1909.63,1211.22 1910.21,1211.22 1910.8,1211.22 1911.38,1211.22 1911.97,1211.22 1912.56,1211.22 1913.14,1211.22 1913.73,1211.22 1914.32,1211.22 1914.9,1211.22 1915.49,1211.22 1916.08,1211.22 1916.66,1211.22 1917.25,1211.22 1917.83,1211.22 1918.42,1211.22 1919.01,1211.22 1919.59,1211.22 1920.18,1211.22 1920.77,1211.22 1921.35,1211.22 1921.94,1211.22 1922.53,1211.22 1923.11,1211.22 1923.7,1211.22 1924.29,1211.22 1924.87,1211.22 1925.46,1211.22 1926.04,1211.22 1926.63,1211.22 1927.22,1211.22 1927.8,1211.22 1928.39,1211.22 1928.98,1211.22 1929.56,1211.22 1930.15,1211.22 1930.74,1211.22 1931.32,1211.22 1931.91,1211.22 1932.5,1211.22 1933.08,1211.22 1933.67,1211.22 1934.25,1211.22 1934.84,1211.22 1935.43,1211.22 1936.01,1211.22 1936.6,1211.22 1937.19,1211.22 1937.77,1211.22 1938.36,1211.22 1938.95,1211.22 1939.53,1211.22 1940.12,1211.22 1940.71,1211.22 1941.29,1211.22 1941.88,1211.22 1942.46,1211.22 1943.05,1211.22 1943.64,1211.22 1944.22,1211.22 1944.81,1211.22 1945.4,1211.22 1945.98,1211.22 1946.57,1211.22 1947.16,1211.22 1947.74,1211.22 1948.33,1211.22 1948.91,1211.22 1949.5,1211.22 1950.09,1211.22 1950.67,1211.22 1951.26,1211.22 1951.85,1211.22 1952.43,1211.22 1953.02,1211.22 1953.61,1211.22 1954.19,1211.22 1954.78,1211.22 1955.37,1211.22 1955.95,1211.22 1956.54,1211.22 1957.12,1211.22 1957.71,1211.22 1958.3,1211.22 1958.88,1211.22 1959.47,1211.22 1960.06,1211.22 1960.64,1211.22 1961.23,1211.22 1961.82,1211.22 1962.4,1211.22 1962.99,1211.22 1963.58,1211.22 1964.16,1211.22 1964.75,1211.22 1965.33,1211.22 1965.92,1211.22 1966.51,1211.22 1967.09,1211.22 1967.68,1211.22 1968.27,1211.22 1968.85,1211.22 1969.44,1211.22 1970.03,1211.22 1970.61,1211.22 1971.2,1211.22 1971.78,1211.22 1972.37,1211.22 1972.96,1211.22 1973.54,1211.22 1974.13,1211.22 1974.72,1211.22 1975.3,1211.22 1975.89,1211.22 1976.48,1211.22 1977.06,1211.22 1977.65,1211.22 1978.24,1211.22 1978.82,1211.22 1979.41,1211.22 1979.99,1211.22 1980.58,1211.22 1981.17,1211.22 1981.75,1211.22 1982.34,1211.22 1982.93,1211.22 1983.51,1211.22 1984.1,1211.22 1984.69,1211.22 1985.27,1211.22 1985.86,1211.22 1986.45,1211.22 1987.03,1211.22 1987.62,1211.22 1988.2,1211.22 1988.79,1211.22 1989.38,1211.22 1989.96,1211.22 1990.55,1211.22 1991.14,1211.22 1991.72,1211.22 1992.31,1211.22 1992.9,1211.22 1993.48,1211.22 1994.07,1211.22 1994.65,1211.22 1995.24,1211.22 1995.83,1211.22 1996.41,1211.22 1997,1211.22 1997.59,1211.22 1998.17,1211.22 1998.76,1211.22 1999.35,1211.22 1999.93,1211.22 2000.52,1211.22 2001.11,1211.22 2001.69,1211.22 2002.28,1211.22 2002.86,1211.22 2003.45,1211.22 2004.04,1211.22 2004.62,1211.22 2005.21,1211.22 2005.8,1211.22 2006.38,1211.22 2006.97,1211.22 2007.56,1211.22 2008.14,1211.22 2008.73,1211.22 2009.32,1211.22 2009.9,1211.22 2010.49,1211.22 2011.07,1211.22 2011.66,1211.22 2012.25,1211.22 2012.83,1211.22 2013.42,1211.22 2014.01,1211.22 2014.59,1211.22 2015.18,1211.22 2015.77,1211.22 2016.35,1211.22 2016.94,1211.22 2017.53,1211.22 2018.11,1211.22 2018.7,1211.22 2019.28,1211.22 2019.87,1211.22 2020.46,1211.22 2021.04,1211.22 2021.63,1211.22 2022.22,1211.22 2022.8,1211.22 2023.39,1211.22 2023.98,1211.22 2024.56,1211.22 2025.15,1211.22 2025.73,1211.22 2026.32,1211.22 2026.91,1211.22 2027.49,1211.22 2028.08,1211.22 2028.67,1211.22 2029.25,1211.22 2029.84,1211.22 2030.43,1211.22 2031.01,1211.22 2031.6,1211.22 2032.19,1211.22 2032.77,1211.22 2033.36,1211.22 2033.94,1211.22 2034.53,1211.22 2035.12,1211.22 2035.7,1211.22 2036.29,1211.22 2036.88,1211.22 2037.46,1211.22 2038.05,1211.22 2038.64,1211.22 2039.22,1211.22 2039.81,1211.22 2040.4,1211.22 2040.98,1211.22 2041.57,1211.22 2042.15,1211.22 2042.74,1211.22 2043.33,1211.22 2043.91,1211.22 2044.5,1211.22 2045.09,1211.22 2045.67,1211.22 2046.26,1211.22 2046.85,1211.22 2047.43,1211.22 2048.02,1211.22 2048.6,1211.22 2049.19,1211.22 2049.78,1211.22 2050.36,1211.22 2050.95,1211.22 2051.54,1211.22 2052.12,1211.22 2052.71,1211.22 2053.3,1211.22 2053.88,1211.22 2054.47,1211.22 2055.06,1211.22 2055.64,1211.22 2056.23,1211.22 2056.81,1211.22 2057.4,1211.22 2057.99,1211.22 2058.57,1211.22 2059.16,1211.22 2059.75,1211.22 2060.33,1211.22 2060.92,1211.22 2061.51,1211.22 2062.09,1211.22 2062.68,1211.22 2063.27,1211.22 2063.85,1211.22 2064.44,1211.22 2065.02,1211.22 2065.61,1211.22 2066.2,1211.22 2066.78,1211.22 2067.37,1211.22 2067.96,1211.22 2068.54,1211.22 2069.13,1211.22 2069.72,1211.22 2070.3,1211.22 2070.89,1211.22 2071.48,1211.22 2072.06,1211.22 2072.65,1211.22 2073.23,1211.22 2073.82,1211.22 2074.41,1211.22 2074.99,1211.22 2075.58,1211.22 2076.17,1211.22 2076.75,1211.22 2077.34,1211.22 2077.93,1211.22 2078.51,1211.22 2079.1,1211.22 2079.68,1211.22 2080.27,1211.22 2080.86,1211.22 2081.44,1211.22 2082.03,1211.22 2082.62,1211.22 2083.2,1211.22 2083.79,1211.22 2084.38,1211.22 2084.96,1211.22 2085.55,1211.22 2086.14,1211.22 2086.72,1211.22 2087.31,1211.22 2087.89,1211.22 2088.48,1211.22 2089.07,1211.22 2089.65,1211.22 2090.24,1211.22 2090.83,1211.22 2091.41,1211.22 2092,1211.22 2092.59,1211.22 2093.17,1211.22 2093.76,1211.22 2094.35,1211.22 2094.93,1211.22 2095.52,1211.22 2096.1,1211.22 2096.69,1211.22 2097.28,1211.22 2097.86,1211.22 2098.45,1211.22 2099.04,1211.22 2099.62,1211.22 2100.21,1211.22 2100.8,1211.22 2101.38,1211.22 2101.97,1211.22 2102.55,1211.22 2103.14,1211.22 2103.73,1211.22 2104.31,1211.22 2104.9,1211.22 2105.49,1211.22 2106.07,1211.22 2106.66,1211.22 2107.25,1211.22 2107.83,1211.22 2108.42,1211.22 2109.01,1211.22 2109.59,1211.22 2110.18,1211.22 2110.76,1211.22 2111.35,1211.22 2111.94,1211.22 2112.52,1211.22 2113.11,1211.22 2113.7,1211.22 2114.28,1211.22 2114.87,1211.22 2115.46,1211.22 2116.04,1211.22 2116.63,1211.22 2117.22,1211.22 2117.8,1211.22 2118.39,1211.22 2118.97,1211.22 2119.56,1211.22 2120.15,1211.22 2120.73,1211.22 2121.32,1211.22 2121.91,1211.22 2122.49,1211.22 2123.08,1211.22 2123.67,1211.22 2124.25,1211.22 2124.84,1211.22 2125.42,1211.22 2126.01,1211.22 2126.6,1211.22 2127.18,1211.22 2127.77,1211.22 2128.36,1211.22 2128.94,1211.22 2129.53,1211.22 2130.12,1211.22 2130.7,1211.22 2131.29,1211.22 2131.88,1211.22 2132.46,1211.22 2133.05,1211.22 2133.63,1211.22 2134.22,1211.22 2134.81,1211.22 2135.39,1211.22 2135.98,1211.22 2136.57,1211.22 2137.15,1211.22 2137.74,1211.22 2138.33,1211.22 2138.91,1211.22 2139.5,1211.22 2140.09,1211.22 2140.67,1211.22 2141.26,1211.22 2141.84,1211.22 2142.43,1211.22 2143.02,1211.22 2143.6,1211.22 2144.19,1211.22 2144.78,1211.22 2145.36,1211.22 2145.95,1211.22 2146.54,1211.22 2147.12,1211.22 2147.71,1211.22 2148.3,1211.22 2148.88,1211.22 2149.47,1211.22 2150.05,1211.22 2150.64,1211.22 2151.23,1211.22 2151.81,1211.22 2152.4,1211.22 2152.99,1211.22 2153.57,1211.22 2154.16,1211.22 2154.75,1211.22 2155.33,1211.22 2155.92,1211.22 2156.5,1211.22 2157.09,1211.22 2157.68,1211.22 2158.26,1211.22 \"/>\n<path clip-path=\"url(#clip142)\" d=\"M986.025 1211.04 L986.612 1211.04 L987.198 1211.04 L987.785 1211.04 L988.371 1211.04 L988.957 1211.04 L989.544 1211.04 L990.13 1211.04 L990.717 1211.04 L991.303 1211.04 L991.889 1211.04 L992.476 1211.04 L993.062 1211.04 L993.649 1211.04 L994.235 1211.04 L994.822 1211.04 L995.408 1211.04 L995.994 1211.04 L996.581 1211.04 L997.167 1211.04 L997.754 1211.04 L998.34 1211.04 L998.926 1211.04 L999.513 1211.04 L1000.1 1211.04 L1000.69 1211.04 L1001.27 1211.04 L1001.86 1211.04 L1002.44 1211.04 L1003.03 1211.04 L1003.62 1211.04 L1004.2 1211.04 L1004.79 1211.04 L1005.38 1211.04 L1005.96 1211.04 L1006.55 1211.04 L1007.14 1211.04 L1007.72 1211.04 L1008.31 1211.04 L1008.9 1211.04 L1009.48 1211.04 L1010.07 1211.04 L1010.65 1211.04 L1011.24 1211.04 L1011.83 1211.04 L1012.41 1211.04 L1013 1211.04 L1013.59 1211.04 L1014.17 1211.04 L1014.76 1211.04 L1015.35 1211.04 L1015.93 1211.04 L1016.52 1211.04 L1017.11 1211.04 L1017.69 1211.04 L1018.28 1211.04 L1018.86 1211.04 L1019.45 1211.04 L1020.04 1211.04 L1020.62 1211.04 L1021.21 1211.04 L1021.8 1211.04 L1022.38 1211.04 L1022.97 1211.04 L1023.56 1211.04 L1024.14 1211.04 L1024.73 1211.04 L1025.32 1211.04 L1025.9 1211.04 L1026.49 1211.04 L1027.07 1211.04 L1027.66 1211.04 L1028.25 1211.04 L1028.83 1211.04 L1029.42 1211.04 L1030.01 1211.04 L1030.59 1211.04 L1031.18 1211.04 L1031.77 1211.04 L1032.35 1211.04 L1032.94 1211.04 L1033.52 1211.04 L1034.11 1211.04 L1034.7 1211.04 L1035.28 1211.04 L1035.87 1211.04 L1036.46 1211.04 L1037.04 1211.04 L1037.63 1211.04 L1038.22 1211.04 L1038.8 1211.04 L1039.39 1211.04 L1039.98 1211.04 L1040.56 1211.04 L1041.15 1211.04 L1041.73 1211.04 L1042.32 1211.04 L1042.91 1211.04 L1043.49 1211.04 L1044.08 1211.04 L1044.67 1211.04 L1045.25 1211.04 L1045.84 1211.04 L1046.43 1211.04 L1047.01 1211.04 L1047.6 1211.04 L1048.19 1211.04 L1048.77 1211.04 L1049.36 1211.04 L1049.94 1211.04 L1050.53 1211.04 L1051.12 1211.04 L1051.7 1211.04 L1052.29 1211.04 L1052.88 1211.04 L1053.46 1211.04 L1054.05 1211.04 L1054.64 1211.04 L1055.22 1211.04 L1055.81 1211.04 L1056.39 1211.04 L1056.98 1211.04 L1057.57 1211.04 L1058.15 1211.04 L1058.74 1211.04 L1059.33 1211.04 L1059.91 1211.04 L1060.5 1211.04 L1061.09 1211.04 L1061.67 1211.04 L1062.26 1211.04 L1062.85 1211.04 L1063.43 1211.04 L1064.02 1211.04 L1064.6 1211.04 L1065.19 1211.04 L1065.78 1211.04 L1066.36 1211.04 L1066.95 1211.04 L1067.54 1211.04 L1068.12 1211.04 L1068.71 1211.04 L1069.3 1211.04 L1069.88 1211.04 L1070.47 1211.04 L1071.06 1211.04 L1071.64 1211.04 L1072.23 1211.04 L1072.81 1211.04 L1073.4 1211.04 L1073.99 1211.04 L1074.57 1211.04 L1075.16 1211.04 L1075.75 1211.04 L1076.33 1211.04 L1076.92 1211.04 L1077.51 1211.04 L1078.09 1211.04 L1078.68 1211.04 L1079.26 1211.04 L1079.85 1211.04 L1080.44 1211.04 L1081.02 1211.04 L1081.61 1211.04 L1082.2 1211.04 L1082.78 1211.04 L1083.37 1211.04 L1083.96 1211.04 L1084.54 1211.04 L1085.13 1211.04 L1085.72 1211.04 L1086.3 1211.04 L1086.89 1211.04 L1087.47 1211.04 L1088.06 1211.04 L1088.65 1211.04 L1089.23 1211.04 L1089.82 1211.04 L1090.41 1211.04 L1090.99 1211.04 L1091.58 1211.04 L1092.17 1211.04 L1092.75 1211.04 L1093.34 1211.04 L1093.93 1211.04 L1094.51 1211.04 L1095.1 1211.04 L1095.68 1211.04 L1096.27 1211.04 L1096.86 1211.04 L1097.44 1211.04 L1098.03 1211.04 L1098.62 1211.04 L1099.2 1211.04 L1099.79 1211.04 L1100.38 1211.04 L1100.96 1211.04 L1101.55 1211.04 L1102.14 1211.04 L1102.72 1211.04 L1103.31 1211.04 L1103.89 1211.04 L1104.48 1211.04 L1105.07 1211.04 L1105.65 1211.04 L1106.24 1211.04 L1106.83 1211.04 L1107.41 1211.04 L1108 1211.04 L1108.59 1211.04 L1109.17 1211.04 L1109.76 1211.04 L1110.34 1211.04 L1110.93 1211.04 L1111.52 1211.04 L1112.1 1211.04 L1112.69 1211.04 L1113.28 1211.04 L1113.86 1211.04 L1114.45 1211.04 L1115.04 1211.04 L1115.62 1211.04 L1116.21 1211.04 L1116.8 1211.04 L1117.38 1211.04 L1117.97 1211.04 L1118.55 1211.04 L1119.14 1211.04 L1119.73 1211.04 L1120.31 1211.04 L1120.9 1211.04 L1121.49 1211.04 L1122.07 1211.04 L1122.66 1211.04 L1123.25 1211.04 L1123.83 1211.04 L1124.42 1211.04 L1125.01 1211.04 L1125.59 1211.04 L1126.18 1211.04 L1126.76 1211.04 L1127.35 1211.04 L1127.94 1211.04 L1128.52 1211.04 L1129.11 1211.04 L1129.7 1211.04 L1130.28 1211.04 L1130.87 1211.04 L1131.46 1211.04 L1132.04 1211.04 L1132.63 1211.04 L1133.21 1211.04 L1133.8 1211.04 L1134.39 1211.04 L1134.97 1211.04 L1135.56 1211.04 L1136.15 1211.04 L1136.73 1211.04 L1137.32 1211.04 L1137.91 1211.04 L1138.49 1211.04 L1139.08 1211.04 L1139.67 1211.04 L1140.25 1211.04 L1140.84 1211.04 L1141.42 1211.04 L1142.01 1211.04 L1142.6 1211.04 L1143.18 1211.04 L1143.77 1211.04 L1144.36 1211.04 L1144.94 1211.04 L1145.53 1211.04 L1146.12 1211.04 L1146.7 1211.04 L1147.29 1211.04 L1147.88 1211.04 L1148.46 1211.04 L1149.05 1211.04 L1149.63 1211.04 L1150.22 1211.04 L1150.81 1211.04 L1151.39 1211.04 L1151.98 1211.04 L1152.57 1211.04 L1153.15 1211.04 L1153.74 1211.04 L1154.33 1211.04 L1154.91 1211.04 L1155.5 1211.04 L1156.09 1211.04 L1156.67 1211.04 L1157.26 1211.04 L1157.84 1211.04 L1158.43 1211.04 L1159.02 1211.04 L1159.6 1211.04 L1160.19 1211.04 L1160.78 1211.04 L1161.36 1211.04 L1161.95 1211.04 L1162.54 1211.04 L1163.12 1211.04 L1163.71 1211.04 L1164.29 1211.04 L1164.88 1211.04 L1165.47 1211.04 L1166.05 1211.04 L1166.64 1211.04 L1167.23 1211.04 L1167.81 1211.04 L1168.4 1211.04 L1168.99 1211.04 L1169.57 1211.04 L1170.16 1211.04 L1170.75 1211.04 L1171.33 1211.04 L1171.92 1211.04 L1172.5 1211.04 L1173.09 1211.04 L1173.68 1211.04 L1174.26 1211.04 L1174.85 1211.04 L1175.44 1211.04 L1176.02 1211.04 L1176.61 1211.04 L1177.2 1211.04 L1177.78 1211.04 L1178.37 1211.04 L1178.96 1211.04 L1179.54 1211.04 L1180.13 1211.04 L1180.71 1211.04 L1181.3 1211.04 L1181.89 1211.04 L1182.47 1211.04 L1183.06 1211.04 L1183.65 1211.04 L1184.23 1211.04 L1184.82 1211.04 L1185.41 1211.04 L1185.99 1211.04 L1186.58 1211.04 L1187.16 1211.04 L1187.75 1211.04 L1188.34 1211.04 L1188.92 1211.04 L1189.51 1211.04 L1190.1 1211.04 L1190.68 1211.04 L1191.27 1211.04 L1191.86 1211.04 L1192.44 1211.04 L1193.03 1211.04 L1193.62 1211.04 L1194.2 1211.04 L1194.79 1211.04 L1195.37 1211.04 L1195.96 1211.04 L1196.55 1211.04 L1197.13 1211.04 L1197.72 1211.04 L1198.31 1211.04 L1198.89 1211.04 L1199.48 1211.04 L1200.07 1211.04 L1200.65 1211.04 L1201.24 1211.04 L1201.83 1211.04 L1202.41 1211.04 L1203 1211.04 L1203.58 1211.04 L1204.17 1211.04 L1204.76 1211.04 L1205.34 1211.04 L1205.93 1211.04 L1206.52 1211.04 L1207.1 1211.04 L1207.69 1211.04 L1208.28 1211.04 L1208.86 1211.04 L1209.45 1211.04 L1210.03 1211.04 L1210.62 1211.04 L1211.21 1211.04 L1211.79 1211.04 L1212.38 1211.04 L1212.97 1211.04 L1213.55 1211.04 L1214.14 1211.04 L1214.73 1211.04 L1215.31 1211.04 L1215.9 1211.04 L1216.49 1211.04 L1217.07 1211.04 L1217.66 1211.04 L1218.24 1211.04 L1218.83 1211.04 L1219.42 1211.04 L1220 1211.04 L1220.59 1211.04 L1221.18 1211.04 L1221.76 1211.04 L1222.35 1211.04 L1222.94 1211.04 L1223.52 1211.04 L1224.11 1211.04 L1224.7 1211.04 L1225.28 1211.04 L1225.87 1211.04 L1226.45 1211.04 L1227.04 1211.04 L1227.63 1211.04 L1228.21 1211.04 L1228.8 1211.04 L1229.39 1211.04 L1229.97 1211.04 L1230.56 1211.04 L1231.15 1211.04 L1231.73 1211.04 L1232.32 1211.04 L1232.91 1211.04 L1233.49 1211.04 L1234.08 1211.04 L1234.66 1211.04 L1235.25 1211.04 L1235.84 1211.04 L1236.42 1211.04 L1237.01 1211.04 L1237.6 1211.04 L1238.18 1211.04 L1238.77 1211.04 L1239.36 1211.04 L1239.94 1211.04 L1240.53 1211.04 L1241.11 1211.04 L1241.7 1211.04 L1242.29 1211.04 L1242.87 1211.04 L1243.46 1211.04 L1244.05 1211.04 L1244.63 1211.04 L1245.22 1211.04 L1245.81 1211.04 L1246.39 1211.04 L1246.98 1211.04 L1247.57 1211.04 L1248.15 1211.04 L1248.74 1211.04 L1249.32 1211.04 L1249.91 1211.04 L1250.5 1211.04 L1251.08 1211.04 L1251.67 1211.04 L1252.26 1211.04 L1252.84 1211.04 L1253.43 1211.04 L1254.02 1211.04 L1254.6 1211.04 L1255.19 1211.04 L1255.78 1211.04 L1256.36 1211.04 L1256.95 1211.04 L1257.53 1211.04 L1258.12 1211.04 L1258.71 1211.04 L1259.29 1211.04 L1259.88 1211.04 L1260.47 1211.04 L1261.05 1211.04 L1261.64 1211.04 L1262.23 1211.04 L1262.81 1211.04 L1263.4 1211.04 L1263.98 1211.04 L1264.57 1211.04 L1265.16 1211.04 L1265.74 1211.04 L1266.33 1211.04 L1266.92 1211.04 L1267.5 1211.04 L1268.09 1211.04 L1268.68 1211.04 L1269.26 1211.04 L1269.85 1211.04 L1270.44 1211.04 L1271.02 1211.04 L1271.61 1211.04 L1272.19 1211.04 L1272.78 1211.04 L1273.37 1211.04 L1273.95 1211.04 L1274.54 1211.04 L1275.13 1211.04 L1275.71 1211.04 L1276.3 1211.04 L1276.89 1211.04 L1277.47 1211.04 L1278.06 1211.04 L1278.65 1211.04 L1279.23 1211.04 L1279.82 1211.04 L1280.4 1211.04 L1280.99 1211.04 L1281.58 1211.04 L1282.16 1211.04 L1282.75 1211.04 L1283.34 1211.04 L1283.92 1211.04 L1284.51 1211.04 L1285.1 1211.04 L1285.68 1211.04 L1286.27 1211.04 L1286.86 1211.04 L1287.44 1211.04 L1288.03 1211.04 L1288.61 1211.04 L1289.2 1211.04 L1289.79 1211.04 L1290.37 1211.04 L1290.96 1211.04 L1291.55 1211.04 L1292.13 1211.04 L1292.72 1211.04 L1293.31 1211.04 L1293.89 1211.04 L1294.48 1211.04 L1295.06 1211.04 L1295.65 1211.04 L1296.24 1211.04 L1296.82 1211.04 L1297.41 1211.04 L1298 1211.04 L1298.58 1211.04 L1299.17 1211.04 L1299.76 1211.04 L1300.34 1211.04 L1300.93 1211.04 L1301.52 1211.04 L1302.1 1211.04 L1302.69 1211.04 L1303.27 1211.04 L1303.86 1211.04 L1304.45 1211.04 L1305.03 1211.04 L1305.62 1211.04 L1306.21 1211.04 L1306.79 1211.04 L1307.38 1211.04 L1307.97 1211.04 L1308.55 1211.04 L1309.14 1211.04 L1309.73 1211.04 L1310.31 1211.04 L1310.9 1211.04 L1311.48 1211.04 L1312.07 1211.04 L1312.66 1211.04 L1313.24 1211.04 L1313.83 1211.04 L1314.42 1211.04 L1315 1211.04 L1315.59 1211.04 L1316.18 1211.04 L1316.76 1211.04 L1317.35 1211.04 L1317.93 1211.04 L1318.52 1211.04 L1319.11 1211.04 L1319.69 1211.04 L1320.28 1211.04 L1320.87 1211.04 L1321.45 1211.04 L1322.04 1211.04 L1322.63 1211.04 L1323.21 1211.04 L1323.8 1211.04 L1324.39 1211.04 L1324.97 1211.04 L1325.56 1211.04 L1326.14 1211.04 L1326.73 1211.04 L1327.32 1211.04 L1327.9 1211.04 L1328.49 1211.04 L1329.08 1211.04 L1329.66 1211.04 L1330.25 1211.04 L1330.84 1211.04 L1331.42 1211.04 L1332.01 1211.04 L1332.6 1211.04 L1333.18 1211.04 L1333.77 1211.04 L1334.35 1211.04 L1334.94 1211.04 L1335.53 1211.04 L1336.11 1211.04 L1336.7 1211.04 L1337.29 1211.04 L1337.87 1211.04 L1338.46 1211.04 L1339.05 1211.04 L1339.63 1211.04 L1340.22 1211.04 L1340.8 1211.04 L1341.39 1211.04 L1341.98 1211.04 L1342.56 1211.04 L1343.15 1211.04 L1343.74 1211.04 L1344.32 1211.04 L1344.91 1211.04 L1345.5 1211.04 L1346.08 1211.04 L1346.67 1211.04 L1347.26 1211.04 L1347.84 1211.04 L1348.43 1211.04 L1349.01 1211.04 L1349.6 1211.04 L1350.19 1211.04 L1350.77 1211.04 L1351.36 1211.04 L1351.95 1211.04 L1352.53 1211.04 L1353.12 1211.04 L1353.71 1211.04 L1354.29 1211.04 L1354.88 1211.04 L1355.47 1211.04 L1356.05 1211.04 L1356.64 1211.04 L1357.22 1211.04 L1357.81 1211.04 L1358.4 1211.04 L1358.98 1211.04 L1359.57 1211.04 L1360.16 1211.04 L1360.74 1211.04 L1361.33 1211.04 L1361.92 1211.04 L1362.5 1211.04 L1363.09 1211.04 L1363.68 1211.04 L1364.26 1211.04 L1364.85 1211.04 L1365.43 1211.04 L1366.02 1211.04 L1366.61 1211.04 L1367.19 1211.04 L1367.78 1211.04 L1368.37 1211.04 L1368.95 1211.04 L1369.54 1211.04 L1370.13 1211.04 L1370.71 1211.04 L1371.3 1211.04 L1371.88 1211.04 L1372.47 1211.04 L1373.06 1211.04 L1373.64 1211.04 L1374.23 1211.04 L1374.82 1211.04 L1375.4 1211.04 L1375.99 1211.04 L1376.58 1211.04 L1377.16 1211.04 L1377.75 1211.04 L1378.34 1211.04 L1378.92 1211.04 L1379.51 1211.04 L1380.09 1211.04 L1380.68 1211.04 L1381.27 1211.04 L1381.85 1211.04 L1382.44 1211.04 L1383.03 1211.04 L1383.61 1211.04 L1384.2 1211.04 L1384.79 1211.04 L1385.37 1211.04 L1385.96 1211.04 L1386.55 1211.04 L1387.13 1211.04 L1387.72 1211.04 L1388.3 1211.04 L1388.89 1211.04 L1389.48 1211.04 L1390.06 1211.04 L1390.65 1211.04 L1391.24 1211.04 L1391.82 1211.04 L1392.41 1211.04 L1393 1211.04 L1393.58 1211.04 L1394.17 1211.04 L1394.75 1211.04 L1395.34 1211.04 L1395.93 1211.04 L1396.51 1211.04 L1397.1 1211.04 L1397.69 1211.04 L1398.27 1211.04 L1398.86 1211.04 L1399.45 1211.04 L1400.03 1211.04 L1400.62 1211.04 L1401.21 1211.04 L1401.79 1211.04 L1402.38 1211.04 L1402.96 1211.04 L1403.55 1211.04 L1404.14 1211.04 L1404.72 1211.04 L1405.31 1211.04 L1405.9 1211.04 L1406.48 1211.04 L1407.07 1211.04 L1407.66 1211.04 L1408.24 1211.04 L1408.83 1211.04 L1409.42 1211.04 L1410 1211.04 L1410.59 1211.04 L1411.17 1211.04 L1411.76 1211.04 L1412.35 1211.04 L1412.93 1211.04 L1413.52 1211.04 L1414.11 1211.04 L1414.69 1211.04 L1415.28 1211.04 L1415.87 1211.04 L1416.45 1211.04 L1417.04 1211.04 L1417.63 1211.04 L1418.21 1211.04 L1418.8 1211.04 L1419.38 1211.04 L1419.97 1211.04 L1420.56 1211.04 L1421.14 1211.04 L1421.73 1211.04 L1422.32 1211.04 L1422.9 1211.04 L1423.49 1211.04 L1424.08 1211.04 L1424.66 1211.04 L1425.25 1211.04 L1425.83 1211.04 L1426.42 1211.04 L1427.01 1211.04 L1427.59 1211.04 L1428.18 1211.04 L1428.77 1211.04 L1429.35 1211.04 L1429.94 1211.04 L1430.53 1211.04 L1431.11 1211.04 L1431.7 1211.04 L1432.29 1211.04 L1432.87 1211.04 L1433.46 1211.04 L1434.04 1211.04 L1434.63 1211.04 L1435.22 1211.04 L1435.8 1211.04 L1436.39 1211.04 L1436.98 1211.04 L1437.56 1211.04 L1438.15 1211.04 L1438.74 1211.04 L1439.32 1211.04 L1439.91 1211.04 L1440.5 1211.04 L1441.08 1211.04 L1441.67 1211.04 L1442.25 1211.04 L1442.84 1211.04 L1443.43 1211.04 L1444.01 1211.04 L1444.6 1211.04 L1445.19 1211.04 L1445.77 1211.04 L1446.36 1211.04 L1446.95 1211.04 L1447.53 1211.04 L1448.12 1211.04 L1448.7 1211.04 L1449.29 1211.04 L1449.88 1211.04 L1450.46 1211.04 L1451.05 1211.04 L1451.64 1211.04 L1452.22 1211.04 L1452.81 1211.04 L1453.4 1211.04 L1453.98 1211.04 L1454.57 1211.04 L1455.16 1211.04 L1455.74 1211.04 L1456.33 1211.04 L1456.91 1211.04 L1457.5 1211.04 L1458.09 1211.04 L1458.67 1211.04 L1459.26 1211.04 L1459.85 1211.04 L1460.43 1211.04 L1461.02 1211.04 L1461.61 1211.04 L1462.19 1211.04 L1462.78 1211.04 L1463.37 1211.04 L1463.95 1211.04 L1464.54 1211.04 L1465.12 1211.04 L1465.71 1211.04 L1466.3 1211.04 L1466.88 1211.04 L1467.47 1211.04 L1468.06 1211.04 L1468.64 1211.04 L1469.23 1211.04 L1469.82 1211.04 L1470.4 1211.04 L1470.99 1211.04 L1471.57 1211.04 L1472.16 1211.04 L1472.75 1211.04 L1473.33 1211.04 L1473.92 1211.04 L1474.51 1211.04 L1475.09 1211.04 L1475.68 1211.04 L1476.27 1211.04 L1476.85 1211.04 L1477.44 1211.04 L1478.03 1211.04 L1478.61 1211.04 L1479.2 1211.04 L1479.78 1211.04 L1480.37 1211.04 L1480.96 1211.04 L1481.54 1211.04 L1482.13 1211.04 L1482.72 1211.04 L1483.3 1211.04 L1483.89 1211.04 L1484.48 1211.04 L1485.06 1211.04 L1485.65 1211.04 L1486.24 1211.04 L1486.82 1211.04 L1487.41 1211.04 L1487.99 1211.04 L1488.58 1211.04 L1489.17 1211.04 L1489.75 1211.04 L1490.34 1211.04 L1490.93 1211.04 L1491.51 1211.04 L1492.1 1211.04 L1492.69 1211.04 L1493.27 1211.04 L1493.86 1211.04 L1494.45 1211.04 L1495.03 1211.04 L1495.62 1211.04 L1496.2 1211.04 L1496.79 1211.04 L1497.38 1211.04 L1497.96 1211.04 L1498.55 1211.04 L1499.14 1211.04 L1499.72 1211.04 L1500.31 1211.04 L1500.9 1211.04 L1501.48 1211.04 L1502.07 1211.04 L1502.65 1211.04 L1503.24 1211.04 L1503.83 1211.04 L1504.41 1211.04 L1505 1211.04 L1505.59 1211.04 L1506.17 1211.04 L1506.76 1211.04 L1507.35 1211.04 L1507.93 1211.04 L1508.52 1211.04 L1509.11 1211.04 L1509.69 1211.04 L1510.28 1211.04 L1510.86 1211.04 L1511.45 1211.04 L1512.04 1211.04 L1512.62 1211.04 L1513.21 1211.04 L1513.8 1211.04 L1514.38 1211.04 L1514.97 1211.04 L1515.56 1211.04 L1516.14 1211.04 L1516.73 1211.04 L1517.32 1211.04 L1517.9 1211.04 L1518.49 1211.04 L1519.07 1211.04 L1519.66 1211.04 L1520.25 1211.04 L1520.83 1211.04 L1521.42 1211.04 L1522.01 1211.04 L1522.59 1211.04 L1523.18 1211.04 L1523.77 1211.04 L1524.35 1211.04 L1524.94 1211.04 L1525.52 1211.04 L1526.11 1211.04 L1526.7 1211.04 L1527.28 1211.04 L1527.87 1211.04 L1528.46 1211.04 L1529.04 1211.04 L1529.63 1211.04 L1530.22 1211.04 L1530.8 1211.04 L1531.39 1211.04 L1531.98 1211.04 L1532.56 1211.04 L1533.15 1211.04 L1533.73 1211.04 L1534.32 1211.04 L1534.91 1211.04 L1535.49 1211.04 L1536.08 1211.04 L1536.67 1211.04 L1537.25 1211.04 L1537.84 1211.04 L1538.43 1211.04 L1539.01 1211.04 L1539.6 1211.04 L1540.19 1211.04 L1540.77 1211.04 L1541.36 1211.04 L1541.94 1211.04 L1542.53 1211.04 L1543.12 1211.04 L1543.7 1211.04 L1544.29 1211.04 L1544.88 1211.04 L1545.46 1211.04 L1546.05 1211.04 L1546.64 1211.04 L1547.22 1211.04 L1547.81 1211.04 L1548.4 1211.04 L1548.98 1211.04 L1549.57 1211.04 L1550.15 1211.04 L1550.74 1211.04 L1551.33 1211.04 L1551.91 1211.04 L1552.5 1211.04 L1553.09 1211.04 L1553.67 1211.04 L1554.26 1211.04 L1554.85 1211.04 L1555.43 1211.04 L1556.02 1211.04 L1556.6 1211.04 L1557.19 1211.04 L1557.78 1211.04 L1558.36 1211.04 L1558.95 1211.04 L1559.54 1211.04 L1560.12 1211.04 L1560.71 1211.04 L1561.3 1211.04 L1561.88 1211.04 L1562.47 1211.04 L1563.06 1211.04 L1563.64 1211.04 L1564.23 1211.04 L1564.81 1211.04 L1565.4 1211.04 L1565.99 1211.04 L1566.57 1211.04 L1567.16 1211.04 L1567.75 1211.04 L1568.33 1211.04 L1568.92 1211.04 L1569.51 1211.04 L1570.09 1211.04 L1570.68 1211.04 L1571.27 1211.04 L1571.85 1211.04 L1572.44 1211.04 L1573.02 1211.04 L1573.61 1211.04 L1574.2 1211.04 L1574.78 1211.04 L1575.37 1211.04 L1575.96 1211.04 L1576.54 1211.04 L1577.13 1211.04 L1577.72 1211.04 L1578.3 1211.04 L1578.89 1211.04 L1579.47 1211.04 L1580.06 1211.04 L1580.65 1211.04 L1581.23 1211.04 L1581.82 1211.04 L1582.41 1211.04 L1582.99 1211.04 L1583.58 1211.04 L1584.17 1211.04 L1584.75 1211.04 L1585.34 1211.04 L1585.93 1211.04 L1586.51 1211.04 L1587.1 1211.04 L1587.68 1211.04 L1588.27 1211.04 L1588.86 1211.04 L1589.44 1211.04 L1590.03 1211.04 L1590.62 1211.04 L1591.2 1211.04 L1591.79 1211.04 L1592.38 1211.04 L1592.96 1211.04 L1593.55 1211.04 L1594.14 1211.04 L1594.72 1211.04 L1595.31 1211.04 L1595.89 1211.04 L1596.48 1211.04 L1597.07 1211.04 L1597.65 1211.04 L1598.24 1211.04 L1598.83 1211.04 L1599.41 1211.04 L1600 1211.04 L1600.59 1211.04 L1601.17 1211.04 L1601.76 1211.04 L1602.34 1211.04 L1602.93 1211.04 L1603.52 1211.04 L1604.1 1211.04 L1604.69 1211.04 L1605.28 1211.04 L1605.86 1211.04 L1606.45 1211.04 L1607.04 1211.04 L1607.62 1211.04 L1608.21 1211.04 L1608.8 1211.04 L1609.38 1211.04 L1609.97 1211.04 L1610.55 1211.04 L1611.14 1211.04 L1611.73 1211.04 L1612.31 1211.04 L1612.9 1211.04 L1613.49 1211.04 L1614.07 1211.04 L1614.66 1211.04 L1615.25 1211.04 L1615.83 1211.04 L1616.42 1211.04 L1617.01 1211.04 L1617.59 1211.04 L1618.18 1211.04 L1618.76 1211.04 L1619.35 1211.04 L1619.94 1211.04 L1620.52 1211.04 L1621.11 1211.04 L1621.7 1211.04 L1622.28 1211.04 L1622.87 1211.04 L1623.46 1211.04 L1624.04 1211.04 L1624.63 1211.04 L1625.22 1211.04 L1625.8 1211.04 L1626.39 1211.04 L1626.97 1211.04 L1627.56 1211.04 L1628.15 1211.04 L1628.73 1211.04 L1629.32 1211.04 L1629.91 1211.04 L1630.49 1211.04 L1631.08 1211.04 L1631.67 1211.04 L1632.25 1211.04 L1632.84 1211.04 L1633.42 1211.04 L1634.01 1211.04 L1634.6 1211.04 L1635.18 1211.04 L1635.77 1211.04 L1636.36 1211.04 L1636.94 1211.04 L1637.53 1211.04 L1638.12 1211.04 L1638.7 1211.04 L1639.29 1211.04 L1639.88 1211.04 L1640.46 1211.04 L1641.05 1211.04 L1641.63 1211.04 L1642.22 1211.04 L1642.81 1211.04 L1643.39 1211.04 L1643.98 1211.04 L1644.57 1211.04 L1645.15 1211.04 L1645.74 1211.04 L1646.33 1211.04 L1646.91 1211.04 L1647.5 1211.04 L1648.09 1211.04 L1648.67 1211.04 L1649.26 1211.04 L1649.84 1211.04 L1650.43 1211.04 L1651.02 1211.04 L1651.6 1211.04 L1652.19 1211.04 L1652.78 1211.04 L1653.36 1211.04 L1653.95 1211.04 L1654.54 1211.04 L1655.12 1211.04 L1655.71 1211.04 L1656.29 1211.04 L1656.88 1211.04 L1657.47 1211.04 L1658.05 1211.04 L1658.64 1211.04 L1659.23 1211.04 L1659.81 1211.04 L1660.4 1211.04 L1660.99 1211.04 L1661.57 1211.04 L1662.16 1211.04 L1662.75 1211.04 L1663.33 1211.04 L1663.92 1211.04 L1664.5 1211.04 L1665.09 1211.04 L1665.68 1211.04 L1666.26 1211.04 L1666.85 1211.04 L1667.44 1211.04 L1668.02 1211.04 L1668.61 1211.04 L1669.2 1211.04 L1669.78 1211.04 L1670.37 1211.04 L1670.96 1211.04 L1671.54 1211.04 L1672.13 1211.04 L1672.71 1211.04 L1673.3 1211.04 L1673.89 1211.04 L1674.47 1211.04 L1675.06 1211.04 L1675.65 1211.04 L1676.23 1211.04 L1676.82 1211.04 L1677.41 1211.04 L1677.99 1211.04 L1678.58 1211.04 L1679.17 1211.04 L1679.75 1211.04 L1680.34 1211.04 L1680.92 1211.04 L1681.51 1211.04 L1682.1 1211.04 L1682.68 1211.04 L1683.27 1211.04 L1683.86 1211.04 L1684.44 1211.04 L1685.03 1211.04 L1685.62 1211.04 L1686.2 1211.04 L1686.79 1211.04 L1687.37 1211.04 L1687.96 1211.04 L1688.55 1211.04 L1689.13 1211.04 L1689.72 1211.04 L1690.31 1211.04 L1690.89 1211.04 L1691.48 1211.04 L1692.07 1211.04 L1692.65 1211.04 L1693.24 1211.04 L1693.83 1211.04 L1694.41 1211.04 L1695 1211.04 L1695.58 1211.04 L1696.17 1211.04 L1696.76 1211.04 L1697.34 1211.04 L1697.93 1211.04 L1698.52 1211.04 L1699.1 1211.04 L1699.69 1211.04 L1700.28 1211.04 L1700.86 1211.04 L1701.45 1211.04 L1702.04 1211.04 L1702.62 1211.04 L1703.21 1211.04 L1703.79 1211.04 L1704.38 1211.04 L1704.97 1211.04 L1705.55 1211.04 L1706.14 1211.04 L1706.73 1211.04 L1707.31 1211.04 L1707.9 1211.04 L1708.49 1211.04 L1709.07 1211.04 L1709.66 1211.04 L1710.24 1211.04 L1710.83 1211.04 L1711.42 1211.04 L1712 1211.04 L1712.59 1211.04 L1713.18 1211.04 L1713.76 1211.04 L1714.35 1211.04 L1714.94 1211.04 L1715.52 1211.04 L1716.11 1211.04 L1716.7 1211.04 L1717.28 1211.04 L1717.87 1211.04 L1718.45 1211.04 L1719.04 1211.04 L1719.63 1211.04 L1720.21 1211.04 L1720.8 1211.04 L1721.39 1211.04 L1721.97 1211.04 L1722.56 1211.04 L1723.15 1211.04 L1723.73 1211.04 L1724.32 1211.04 L1724.91 1211.04 L1725.49 1211.04 L1726.08 1211.04 L1726.66 1211.04 L1727.25 1211.04 L1727.84 1211.04 L1728.42 1211.04 L1729.01 1211.04 L1729.6 1211.04 L1730.18 1211.04 L1730.77 1211.04 L1731.36 1211.04 L1731.94 1211.04 L1732.53 1211.04 L1733.11 1211.04 L1733.7 1211.04 L1734.29 1211.04 L1734.87 1211.04 L1735.46 1211.04 L1736.05 1211.04 L1736.63 1211.04 L1737.22 1211.04 L1737.81 1211.04 L1738.39 1211.04 L1738.98 1211.04 L1739.57 1211.04 L1740.15 1211.04 L1740.74 1211.04 L1741.32 1211.04 L1741.91 1211.04 L1742.5 1211.04 L1743.08 1211.04 L1743.67 1211.04 L1744.26 1211.04 L1744.84 1211.04 L1745.43 1211.04 L1746.02 1211.04 L1746.6 1211.04 L1747.19 1211.04 L1747.78 1211.04 L1748.36 1211.04 L1748.95 1211.04 L1749.53 1211.04 L1750.12 1211.04 L1750.71 1211.04 L1751.29 1211.04 L1751.88 1211.04 L1752.47 1211.04 L1753.05 1211.04 L1753.64 1211.04 L1754.23 1211.04 L1754.81 1211.04 L1755.4 1211.04 L1755.99 1211.04 L1756.57 1211.04 L1757.16 1211.04 L1757.74 1211.04 L1758.33 1211.04 L1758.92 1211.04 L1759.5 1211.04 L1760.09 1211.04 L1760.68 1211.04 L1761.26 1211.04 L1761.85 1211.04 L1762.44 1211.04 L1763.02 1211.04 L1763.61 1211.04 L1764.19 1211.04 L1764.78 1211.04 L1765.37 1211.04 L1765.95 1211.04 L1766.54 1211.04 L1767.13 1211.04 L1767.71 1211.04 L1768.3 1211.04 L1768.89 1211.04 L1769.47 1211.04 L1770.06 1211.04 L1770.65 1211.04 L1771.23 1211.04 L1771.82 1211.04 L1772.4 1211.04 L1772.99 1211.04 L1773.58 1211.04 L1774.16 1211.04 L1774.75 1211.04 L1775.34 1211.04 L1775.92 1211.04 L1776.51 1211.04 L1777.1 1211.04 L1777.68 1211.04 L1778.27 1211.04 L1778.86 1211.04 L1779.44 1211.04 L1780.03 1211.04 L1780.61 1211.04 L1781.2 1211.04 L1781.79 1211.04 L1782.37 1211.04 L1782.96 1211.04 L1783.55 1211.04 L1784.13 1211.04 L1784.72 1211.04 L1785.31 1211.04 L1785.89 1211.04 L1786.48 1211.04 L1787.06 1211.04 L1787.65 1211.04 L1788.24 1211.04 L1788.82 1211.04 L1789.41 1211.04 L1790 1211.04 L1790.58 1211.04 L1791.17 1211.04 L1791.76 1211.04 L1792.34 1211.04 L1792.93 1211.04 L1793.52 1211.04 L1794.1 1211.04 L1794.69 1211.04 L1795.27 1211.04 L1795.86 1211.04 L1796.45 1211.04 L1797.03 1211.04 L1797.62 1211.04 L1798.21 1211.04 L1798.79 1211.04 L1799.38 1211.04 L1799.97 1211.04 L1800.55 1211.04 L1801.14 1211.04 L1801.73 1211.04 L1802.31 1211.04 L1802.9 1211.04 L1803.48 1211.04 L1804.07 1211.04 L1804.66 1211.04 L1805.24 1211.04 L1805.83 1211.04 L1806.42 1211.04 L1807 1211.04 L1807.59 1211.04 L1808.18 1211.04 L1808.76 1211.04 L1809.35 1211.04 L1809.94 1211.04 L1810.52 1211.04 L1811.11 1211.04 L1811.69 1211.04 L1812.28 1211.04 L1812.87 1211.04 L1813.45 1211.04 L1814.04 1211.04 L1814.63 1211.04 L1815.21 1211.04 L1815.8 1211.04 L1816.39 1211.04 L1816.97 1211.04 L1817.56 1211.04 L1818.14 1211.04 L1818.73 1211.04 L1819.32 1211.04 L1819.9 1211.04 L1820.49 1211.04 L1821.08 1211.04 L1821.66 1211.04 L1822.25 1211.04 L1822.84 1211.04 L1823.42 1211.04 L1824.01 1211.04 L1824.6 1211.04 L1825.18 1211.04 L1825.77 1211.04 L1826.35 1211.04 L1826.94 1211.04 L1827.53 1211.04 L1828.11 1211.04 L1828.7 1211.04 L1829.29 1211.04 L1829.87 1211.04 L1830.46 1211.04 L1831.05 1211.04 L1831.63 1211.04 L1832.22 1211.04 L1832.81 1211.04 L1833.39 1211.04 L1833.98 1211.04 L1834.56 1211.04 L1835.15 1211.04 L1835.74 1211.04 L1836.32 1211.04 L1836.91 1211.04 L1837.5 1211.04 L1838.08 1211.04 L1838.67 1211.04 L1839.26 1211.04 L1839.84 1211.04 L1840.43 1211.04 L1841.01 1211.04 L1841.6 1211.04 L1842.19 1211.04 L1842.77 1211.04 L1843.36 1211.04 L1843.95 1211.04 L1844.53 1211.04 L1845.12 1211.04 L1845.71 1211.04 L1846.29 1211.04 L1846.88 1211.04 L1847.47 1211.04 L1848.05 1211.04 L1848.64 1211.04 L1849.22 1211.04 L1849.81 1211.04 L1850.4 1211.04 L1850.98 1211.04 L1851.57 1211.04 L1852.16 1211.04 L1852.74 1211.04 L1853.33 1211.04 L1853.92 1211.04 L1854.5 1211.04 L1855.09 1211.04 L1855.68 1211.04 L1856.26 1211.04 L1856.85 1211.04 L1857.43 1211.04 L1858.02 1211.04 L1858.61 1211.04 L1859.19 1211.04 L1859.78 1211.04 L1860.37 1211.04 L1860.95 1211.04 L1861.54 1211.04 L1862.13 1211.04 L1862.71 1211.04 L1863.3 1211.04 L1863.88 1211.04 L1864.47 1211.04 L1865.06 1211.04 L1865.64 1211.04 L1866.23 1211.04 L1866.82 1211.04 L1867.4 1211.04 L1867.99 1211.04 L1868.58 1211.04 L1869.16 1211.04 L1869.75 1211.04 L1870.34 1211.04 L1870.92 1211.04 L1871.51 1211.04 L1872.09 1211.04 L1872.68 1211.04 L1873.27 1211.04 L1873.85 1211.04 L1874.44 1211.04 L1875.03 1211.04 L1875.61 1211.04 L1876.2 1211.04 L1876.79 1211.04 L1877.37 1211.04 L1877.96 1211.04 L1878.55 1211.04 L1879.13 1211.04 L1879.72 1211.04 L1880.3 1211.04 L1880.89 1211.04 L1881.48 1211.04 L1882.06 1211.04 L1882.65 1211.04 L1883.24 1211.04 L1883.82 1211.04 L1884.41 1211.04 L1885 1211.04 L1885.58 1211.04 L1886.17 1211.04 L1886.76 1211.04 L1887.34 1211.04 L1887.93 1211.04 L1888.51 1211.04 L1889.1 1211.04 L1889.69 1211.04 L1890.27 1211.04 L1890.86 1211.04 L1891.45 1211.04 L1892.03 1211.04 L1892.62 1211.04 L1893.21 1211.04 L1893.79 1211.04 L1894.38 1211.04 L1894.96 1211.04 L1895.55 1211.04 L1896.14 1211.04 L1896.72 1211.04 L1897.31 1211.04 L1897.9 1211.04 L1898.48 1211.04 L1899.07 1211.04 L1899.66 1211.04 L1900.24 1211.04 L1900.83 1211.04 L1901.42 1211.04 L1902 1211.04 L1902.59 1211.04 L1903.17 1211.04 L1903.76 1211.04 L1904.35 1211.04 L1904.93 1211.04 L1905.52 1211.04 L1906.11 1211.04 L1906.69 1211.04 L1907.28 1211.04 L1907.87 1211.04 L1908.45 1211.04 L1909.04 1211.04 L1909.63 1211.04 L1910.21 1211.04 L1910.8 1211.04 L1911.38 1211.04 L1911.97 1211.04 L1912.56 1211.04 L1913.14 1211.04 L1913.73 1211.04 L1914.32 1211.04 L1914.9 1211.04 L1915.49 1211.04 L1916.08 1211.04 L1916.66 1211.04 L1917.25 1211.04 L1917.83 1211.04 L1918.42 1211.04 L1919.01 1211.04 L1919.59 1211.04 L1920.18 1211.04 L1920.77 1211.04 L1921.35 1211.04 L1921.94 1211.04 L1922.53 1211.04 L1923.11 1211.04 L1923.7 1211.04 L1924.29 1211.04 L1924.87 1211.04 L1925.46 1211.04 L1926.04 1211.04 L1926.63 1211.04 L1927.22 1211.04 L1927.8 1211.04 L1928.39 1211.04 L1928.98 1211.04 L1929.56 1211.04 L1930.15 1211.04 L1930.74 1211.04 L1931.32 1211.04 L1931.91 1211.04 L1932.5 1211.04 L1933.08 1211.04 L1933.67 1211.04 L1934.25 1211.04 L1934.84 1211.04 L1935.43 1211.04 L1936.01 1211.04 L1936.6 1211.04 L1937.19 1211.04 L1937.77 1211.04 L1938.36 1211.04 L1938.95 1211.04 L1939.53 1211.04 L1940.12 1211.04 L1940.71 1211.04 L1941.29 1211.04 L1941.88 1211.04 L1942.46 1211.04 L1943.05 1211.04 L1943.64 1211.04 L1944.22 1211.04 L1944.81 1211.04 L1945.4 1211.04 L1945.98 1211.04 L1946.57 1211.04 L1947.16 1211.04 L1947.74 1211.04 L1948.33 1211.04 L1948.91 1211.04 L1949.5 1211.04 L1950.09 1211.04 L1950.67 1211.04 L1951.26 1211.04 L1951.85 1211.04 L1952.43 1211.04 L1953.02 1211.04 L1953.61 1211.04 L1954.19 1211.04 L1954.78 1211.04 L1955.37 1211.04 L1955.95 1211.04 L1956.54 1211.04 L1957.12 1211.04 L1957.71 1211.04 L1958.3 1211.04 L1958.88 1211.04 L1959.47 1211.04 L1960.06 1211.04 L1960.64 1211.04 L1961.23 1211.04 L1961.82 1211.04 L1962.4 1211.04 L1962.99 1211.04 L1963.58 1211.04 L1964.16 1211.04 L1964.75 1211.04 L1965.33 1211.04 L1965.92 1211.04 L1966.51 1211.04 L1967.09 1211.04 L1967.68 1211.04 L1968.27 1211.04 L1968.85 1211.04 L1969.44 1211.04 L1970.03 1211.04 L1970.61 1211.04 L1971.2 1211.04 L1971.78 1211.04 L1972.37 1211.04 L1972.96 1211.04 L1973.54 1211.04 L1974.13 1211.04 L1974.72 1211.04 L1975.3 1211.04 L1975.89 1211.04 L1976.48 1211.04 L1977.06 1211.04 L1977.65 1211.04 L1978.24 1211.04 L1978.82 1211.04 L1979.41 1211.04 L1979.99 1211.04 L1980.58 1211.04 L1981.17 1211.04 L1981.75 1211.04 L1982.34 1211.04 L1982.93 1211.04 L1983.51 1211.04 L1984.1 1211.04 L1984.69 1211.04 L1985.27 1211.04 L1985.86 1211.04 L1986.45 1211.04 L1987.03 1211.04 L1987.62 1211.04 L1988.2 1211.04 L1988.79 1211.04 L1989.38 1211.04 L1989.96 1211.04 L1990.55 1211.04 L1991.14 1211.04 L1991.72 1211.04 L1992.31 1211.04 L1992.9 1211.04 L1993.48 1211.04 L1994.07 1211.04 L1994.65 1211.04 L1995.24 1211.04 L1995.83 1211.04 L1996.41 1211.04 L1997 1211.04 L1997.59 1211.04 L1998.17 1211.04 L1998.76 1211.04 L1999.35 1211.04 L1999.93 1211.04 L2000.52 1211.04 L2001.11 1211.04 L2001.69 1211.04 L2002.28 1211.04 L2002.86 1211.04 L2003.45 1211.04 L2004.04 1211.04 L2004.62 1211.04 L2005.21 1211.04 L2005.8 1211.04 L2006.38 1211.04 L2006.97 1211.04 L2007.56 1211.04 L2008.14 1211.04 L2008.73 1211.04 L2009.32 1211.04 L2009.9 1211.04 L2010.49 1211.04 L2011.07 1211.04 L2011.66 1211.04 L2012.25 1211.04 L2012.83 1211.04 L2013.42 1211.04 L2014.01 1211.04 L2014.59 1211.04 L2015.18 1211.04 L2015.77 1211.04 L2016.35 1211.04 L2016.94 1211.04 L2017.53 1211.04 L2018.11 1211.04 L2018.7 1211.04 L2019.28 1211.04 L2019.87 1211.04 L2020.46 1211.04 L2021.04 1211.04 L2021.63 1211.04 L2022.22 1211.04 L2022.8 1211.04 L2023.39 1211.04 L2023.98 1211.04 L2024.56 1211.04 L2025.15 1211.04 L2025.73 1211.04 L2026.32 1211.04 L2026.91 1211.04 L2027.49 1211.04 L2028.08 1211.04 L2028.67 1211.04 L2029.25 1211.04 L2029.84 1211.04 L2030.43 1211.04 L2031.01 1211.04 L2031.6 1211.04 L2032.19 1211.04 L2032.77 1211.04 L2033.36 1211.04 L2033.94 1211.04 L2034.53 1211.04 L2035.12 1211.04 L2035.7 1211.04 L2036.29 1211.04 L2036.88 1211.04 L2037.46 1211.04 L2038.05 1211.04 L2038.64 1211.04 L2039.22 1211.04 L2039.81 1211.04 L2040.4 1211.04 L2040.98 1211.04 L2041.57 1211.04 L2042.15 1211.04 L2042.74 1211.04 L2043.33 1211.04 L2043.91 1211.04 L2044.5 1211.04 L2045.09 1211.04 L2045.67 1211.04 L2046.26 1211.04 L2046.85 1211.04 L2047.43 1211.04 L2048.02 1211.04 L2048.6 1211.04 L2049.19 1211.04 L2049.78 1211.04 L2050.36 1211.04 L2050.95 1211.04 L2051.54 1211.04 L2052.12 1211.04 L2052.71 1211.04 L2053.3 1211.04 L2053.88 1211.04 L2054.47 1211.04 L2055.06 1211.04 L2055.64 1211.04 L2056.23 1211.04 L2056.81 1211.04 L2057.4 1211.04 L2057.99 1211.04 L2058.57 1211.04 L2059.16 1211.04 L2059.75 1211.04 L2060.33 1211.04 L2060.92 1211.04 L2061.51 1211.04 L2062.09 1211.04 L2062.68 1211.04 L2063.27 1211.04 L2063.85 1211.04 L2064.44 1211.04 L2065.02 1211.04 L2065.61 1211.04 L2066.2 1211.04 L2066.78 1211.04 L2067.37 1211.04 L2067.96 1211.04 L2068.54 1211.04 L2069.13 1211.04 L2069.72 1211.04 L2070.3 1211.04 L2070.89 1211.04 L2071.48 1211.04 L2072.06 1211.04 L2072.65 1211.04 L2073.23 1211.04 L2073.82 1211.04 L2074.41 1211.04 L2074.99 1211.04 L2075.58 1211.04 L2076.17 1211.04 L2076.75 1211.04 L2077.34 1211.04 L2077.93 1211.04 L2078.51 1211.04 L2079.1 1211.04 L2079.68 1211.04 L2080.27 1211.04 L2080.86 1211.04 L2081.44 1211.04 L2082.03 1211.04 L2082.62 1211.04 L2083.2 1211.04 L2083.79 1211.04 L2084.38 1211.04 L2084.96 1211.04 L2085.55 1211.04 L2086.14 1211.04 L2086.72 1211.04 L2087.31 1211.04 L2087.89 1211.04 L2088.48 1211.04 L2089.07 1211.04 L2089.65 1211.04 L2090.24 1211.04 L2090.83 1211.04 L2091.41 1211.04 L2092 1211.04 L2092.59 1211.04 L2093.17 1211.04 L2093.76 1211.04 L2094.35 1211.04 L2094.93 1211.04 L2095.52 1211.04 L2096.1 1211.04 L2096.69 1211.04 L2097.28 1211.04 L2097.86 1211.04 L2098.45 1211.04 L2099.04 1211.04 L2099.62 1211.04 L2100.21 1211.04 L2100.8 1211.04 L2101.38 1211.04 L2101.97 1211.04 L2102.55 1211.04 L2103.14 1211.04 L2103.73 1211.04 L2104.31 1211.04 L2104.9 1211.04 L2105.49 1211.04 L2106.07 1211.04 L2106.66 1211.04 L2107.25 1211.04 L2107.83 1211.04 L2108.42 1211.04 L2109.01 1211.04 L2109.59 1211.04 L2110.18 1211.04 L2110.76 1211.04 L2111.35 1211.04 L2111.94 1211.04 L2112.52 1211.04 L2113.11 1211.04 L2113.7 1211.04 L2114.28 1211.04 L2114.87 1211.04 L2115.46 1211.04 L2116.04 1211.04 L2116.63 1211.04 L2117.22 1211.04 L2117.8 1211.04 L2118.39 1211.04 L2118.97 1211.04 L2119.56 1211.04 L2120.15 1211.04 L2120.73 1211.04 L2121.32 1211.04 L2121.91 1211.04 L2122.49 1211.04 L2123.08 1211.04 L2123.67 1211.04 L2124.25 1211.04 L2124.84 1211.04 L2125.42 1211.04 L2126.01 1211.04 L2126.6 1211.04 L2127.18 1211.04 L2127.77 1211.04 L2128.36 1211.04 L2128.94 1211.04 L2129.53 1211.04 L2130.12 1211.04 L2130.7 1211.04 L2131.29 1211.04 L2131.88 1211.04 L2132.46 1211.04 L2133.05 1211.04 L2133.63 1211.04 L2134.22 1211.04 L2134.81 1211.04 L2135.39 1211.04 L2135.98 1211.04 L2136.57 1211.04 L2137.15 1211.04 L2137.74 1211.04 L2138.33 1211.04 L2138.91 1211.04 L2139.5 1211.04 L2140.09 1211.04 L2140.67 1211.04 L2141.26 1211.04 L2141.84 1211.04 L2142.43 1211.04 L2143.02 1211.04 L2143.6 1211.04 L2144.19 1211.04 L2144.78 1211.04 L2145.36 1211.04 L2145.95 1211.04 L2146.54 1211.04 L2147.12 1211.04 L2147.71 1211.04 L2148.3 1211.04 L2148.88 1211.04 L2149.47 1211.04 L2150.05 1211.04 L2150.64 1211.04 L2151.23 1211.04 L2151.81 1211.04 L2152.4 1211.04 L2152.99 1211.04 L2153.57 1211.04 L2154.16 1211.04 L2154.75 1211.04 L2155.33 1211.04 L2155.92 1211.04 L2156.5 1211.04 L2157.09 1211.04 L2157.68 1211.04 L2158.26 1211.04 L2158.26 1210.94 L2157.68 1210.94 L2157.09 1210.94 L2156.5 1210.94 L2155.92 1210.94 L2155.33 1210.94 L2154.75 1210.94 L2154.16 1210.94 L2153.57 1210.94 L2152.99 1210.94 L2152.4 1210.94 L2151.81 1210.94 L2151.23 1210.94 L2150.64 1210.94 L2150.05 1210.94 L2149.47 1210.94 L2148.88 1210.94 L2148.3 1210.94 L2147.71 1210.94 L2147.12 1210.94 L2146.54 1210.94 L2145.95 1210.94 L2145.36 1210.94 L2144.78 1210.94 L2144.19 1210.94 L2143.6 1210.94 L2143.02 1210.94 L2142.43 1210.94 L2141.84 1210.94 L2141.26 1210.94 L2140.67 1210.94 L2140.09 1210.94 L2139.5 1210.94 L2138.91 1210.94 L2138.33 1210.94 L2137.74 1210.94 L2137.15 1210.94 L2136.57 1210.94 L2135.98 1210.94 L2135.39 1210.94 L2134.81 1210.94 L2134.22 1210.94 L2133.63 1210.94 L2133.05 1210.94 L2132.46 1210.94 L2131.88 1210.94 L2131.29 1210.94 L2130.7 1210.94 L2130.12 1210.94 L2129.53 1210.94 L2128.94 1210.94 L2128.36 1210.94 L2127.77 1210.94 L2127.18 1210.94 L2126.6 1210.94 L2126.01 1210.94 L2125.42 1210.94 L2124.84 1210.94 L2124.25 1210.94 L2123.67 1210.94 L2123.08 1210.94 L2122.49 1210.94 L2121.91 1210.94 L2121.32 1210.94 L2120.73 1210.94 L2120.15 1210.94 L2119.56 1210.94 L2118.97 1210.94 L2118.39 1210.94 L2117.8 1210.94 L2117.22 1210.94 L2116.63 1210.94 L2116.04 1210.94 L2115.46 1210.94 L2114.87 1210.94 L2114.28 1210.94 L2113.7 1210.94 L2113.11 1210.94 L2112.52 1210.94 L2111.94 1210.94 L2111.35 1210.94 L2110.76 1210.94 L2110.18 1210.94 L2109.59 1210.94 L2109.01 1210.94 L2108.42 1210.94 L2107.83 1210.94 L2107.25 1210.94 L2106.66 1210.94 L2106.07 1210.94 L2105.49 1210.94 L2104.9 1210.94 L2104.31 1210.94 L2103.73 1210.94 L2103.14 1210.94 L2102.55 1210.94 L2101.97 1210.94 L2101.38 1210.94 L2100.8 1210.94 L2100.21 1210.94 L2099.62 1210.94 L2099.04 1210.94 L2098.45 1210.94 L2097.86 1210.94 L2097.28 1210.94 L2096.69 1210.94 L2096.1 1210.94 L2095.52 1210.94 L2094.93 1210.94 L2094.35 1210.94 L2093.76 1210.94 L2093.17 1210.94 L2092.59 1210.94 L2092 1210.94 L2091.41 1210.94 L2090.83 1210.94 L2090.24 1210.94 L2089.65 1210.94 L2089.07 1210.94 L2088.48 1210.94 L2087.89 1210.94 L2087.31 1210.94 L2086.72 1210.94 L2086.14 1210.94 L2085.55 1210.94 L2084.96 1210.94 L2084.38 1210.94 L2083.79 1210.94 L2083.2 1210.94 L2082.62 1210.94 L2082.03 1210.94 L2081.44 1210.94 L2080.86 1210.94 L2080.27 1210.94 L2079.68 1210.94 L2079.1 1210.94 L2078.51 1210.94 L2077.93 1210.94 L2077.34 1210.94 L2076.75 1210.94 L2076.17 1210.94 L2075.58 1210.94 L2074.99 1210.94 L2074.41 1210.94 L2073.82 1210.94 L2073.23 1210.94 L2072.65 1210.94 L2072.06 1210.94 L2071.48 1210.94 L2070.89 1210.94 L2070.3 1210.94 L2069.72 1210.94 L2069.13 1210.94 L2068.54 1210.94 L2067.96 1210.94 L2067.37 1210.94 L2066.78 1210.94 L2066.2 1210.94 L2065.61 1210.94 L2065.02 1210.94 L2064.44 1210.94 L2063.85 1210.94 L2063.27 1210.94 L2062.68 1210.94 L2062.09 1210.94 L2061.51 1210.94 L2060.92 1210.94 L2060.33 1210.94 L2059.75 1210.94 L2059.16 1210.94 L2058.57 1210.94 L2057.99 1210.94 L2057.4 1210.94 L2056.81 1210.94 L2056.23 1210.94 L2055.64 1210.94 L2055.06 1210.94 L2054.47 1210.94 L2053.88 1210.94 L2053.3 1210.94 L2052.71 1210.94 L2052.12 1210.94 L2051.54 1210.94 L2050.95 1210.94 L2050.36 1210.94 L2049.78 1210.94 L2049.19 1210.94 L2048.6 1210.94 L2048.02 1210.94 L2047.43 1210.94 L2046.85 1210.94 L2046.26 1210.94 L2045.67 1210.94 L2045.09 1210.94 L2044.5 1210.94 L2043.91 1210.94 L2043.33 1210.94 L2042.74 1210.94 L2042.15 1210.94 L2041.57 1210.94 L2040.98 1210.94 L2040.4 1210.94 L2039.81 1210.94 L2039.22 1210.94 L2038.64 1210.94 L2038.05 1210.94 L2037.46 1210.94 L2036.88 1210.94 L2036.29 1210.94 L2035.7 1210.94 L2035.12 1210.94 L2034.53 1210.94 L2033.94 1210.94 L2033.36 1210.94 L2032.77 1210.94 L2032.19 1210.94 L2031.6 1210.94 L2031.01 1210.94 L2030.43 1210.94 L2029.84 1210.94 L2029.25 1210.94 L2028.67 1210.94 L2028.08 1210.94 L2027.49 1210.94 L2026.91 1210.94 L2026.32 1210.94 L2025.73 1210.94 L2025.15 1210.94 L2024.56 1210.94 L2023.98 1210.94 L2023.39 1210.94 L2022.8 1210.94 L2022.22 1210.94 L2021.63 1210.94 L2021.04 1210.94 L2020.46 1210.94 L2019.87 1210.94 L2019.28 1210.94 L2018.7 1210.94 L2018.11 1210.94 L2017.53 1210.94 L2016.94 1210.94 L2016.35 1210.94 L2015.77 1210.94 L2015.18 1210.94 L2014.59 1210.94 L2014.01 1210.94 L2013.42 1210.94 L2012.83 1210.94 L2012.25 1210.94 L2011.66 1210.94 L2011.07 1210.94 L2010.49 1210.94 L2009.9 1210.94 L2009.32 1210.94 L2008.73 1210.94 L2008.14 1210.94 L2007.56 1210.94 L2006.97 1210.94 L2006.38 1210.94 L2005.8 1210.94 L2005.21 1210.94 L2004.62 1210.94 L2004.04 1210.94 L2003.45 1210.94 L2002.86 1210.94 L2002.28 1210.94 L2001.69 1210.94 L2001.11 1210.94 L2000.52 1210.94 L1999.93 1210.94 L1999.35 1210.94 L1998.76 1210.94 L1998.17 1210.94 L1997.59 1210.94 L1997 1210.94 L1996.41 1210.94 L1995.83 1210.94 L1995.24 1210.94 L1994.65 1210.94 L1994.07 1210.94 L1993.48 1210.94 L1992.9 1210.94 L1992.31 1210.94 L1991.72 1210.94 L1991.14 1210.94 L1990.55 1210.94 L1989.96 1210.94 L1989.38 1210.94 L1988.79 1210.94 L1988.2 1210.94 L1987.62 1210.94 L1987.03 1210.94 L1986.45 1210.94 L1985.86 1210.94 L1985.27 1210.94 L1984.69 1210.94 L1984.1 1210.94 L1983.51 1210.94 L1982.93 1210.94 L1982.34 1210.94 L1981.75 1210.94 L1981.17 1210.94 L1980.58 1210.94 L1979.99 1210.94 L1979.41 1210.94 L1978.82 1210.94 L1978.24 1210.94 L1977.65 1210.94 L1977.06 1210.94 L1976.48 1210.94 L1975.89 1210.94 L1975.3 1210.94 L1974.72 1210.94 L1974.13 1210.94 L1973.54 1210.94 L1972.96 1210.94 L1972.37 1210.94 L1971.78 1210.94 L1971.2 1210.94 L1970.61 1210.94 L1970.03 1210.94 L1969.44 1210.94 L1968.85 1210.94 L1968.27 1210.94 L1967.68 1210.94 L1967.09 1210.94 L1966.51 1210.94 L1965.92 1210.94 L1965.33 1210.94 L1964.75 1210.94 L1964.16 1210.94 L1963.58 1210.94 L1962.99 1210.94 L1962.4 1210.94 L1961.82 1210.94 L1961.23 1210.94 L1960.64 1210.94 L1960.06 1210.94 L1959.47 1210.94 L1958.88 1210.94 L1958.3 1210.94 L1957.71 1210.94 L1957.12 1210.94 L1956.54 1210.94 L1955.95 1210.94 L1955.37 1210.94 L1954.78 1210.94 L1954.19 1210.94 L1953.61 1210.94 L1953.02 1210.94 L1952.43 1210.94 L1951.85 1210.94 L1951.26 1210.94 L1950.67 1210.94 L1950.09 1210.94 L1949.5 1210.94 L1948.91 1210.94 L1948.33 1210.94 L1947.74 1210.94 L1947.16 1210.94 L1946.57 1210.94 L1945.98 1210.94 L1945.4 1210.94 L1944.81 1210.94 L1944.22 1210.94 L1943.64 1210.94 L1943.05 1210.94 L1942.46 1210.94 L1941.88 1210.94 L1941.29 1210.94 L1940.71 1210.94 L1940.12 1210.94 L1939.53 1210.94 L1938.95 1210.94 L1938.36 1210.94 L1937.77 1210.94 L1937.19 1210.94 L1936.6 1210.94 L1936.01 1210.94 L1935.43 1210.94 L1934.84 1210.94 L1934.25 1210.94 L1933.67 1210.94 L1933.08 1210.94 L1932.5 1210.94 L1931.91 1210.94 L1931.32 1210.94 L1930.74 1210.94 L1930.15 1210.94 L1929.56 1210.94 L1928.98 1210.94 L1928.39 1210.94 L1927.8 1210.94 L1927.22 1210.94 L1926.63 1210.94 L1926.04 1210.94 L1925.46 1210.94 L1924.87 1210.94 L1924.29 1210.94 L1923.7 1210.94 L1923.11 1210.94 L1922.53 1210.94 L1921.94 1210.94 L1921.35 1210.94 L1920.77 1210.94 L1920.18 1210.94 L1919.59 1210.94 L1919.01 1210.94 L1918.42 1210.94 L1917.83 1210.94 L1917.25 1210.94 L1916.66 1210.94 L1916.08 1210.94 L1915.49 1210.94 L1914.9 1210.94 L1914.32 1210.94 L1913.73 1210.94 L1913.14 1210.94 L1912.56 1210.94 L1911.97 1210.94 L1911.38 1210.94 L1910.8 1210.94 L1910.21 1210.94 L1909.63 1210.94 L1909.04 1210.94 L1908.45 1210.94 L1907.87 1210.94 L1907.28 1210.94 L1906.69 1210.94 L1906.11 1210.94 L1905.52 1210.94 L1904.93 1210.94 L1904.35 1210.94 L1903.76 1210.94 L1903.17 1210.94 L1902.59 1210.94 L1902 1210.94 L1901.42 1210.94 L1900.83 1210.94 L1900.24 1210.94 L1899.66 1210.94 L1899.07 1210.94 L1898.48 1210.94 L1897.9 1210.94 L1897.31 1210.94 L1896.72 1210.94 L1896.14 1210.94 L1895.55 1210.94 L1894.96 1210.94 L1894.38 1210.94 L1893.79 1210.94 L1893.21 1210.94 L1892.62 1210.94 L1892.03 1210.94 L1891.45 1210.94 L1890.86 1210.94 L1890.27 1210.94 L1889.69 1210.94 L1889.1 1210.94 L1888.51 1210.94 L1887.93 1210.94 L1887.34 1210.94 L1886.76 1210.94 L1886.17 1210.94 L1885.58 1210.94 L1885 1210.94 L1884.41 1210.94 L1883.82 1210.94 L1883.24 1210.94 L1882.65 1210.94 L1882.06 1210.94 L1881.48 1210.94 L1880.89 1210.94 L1880.3 1210.94 L1879.72 1210.94 L1879.13 1210.94 L1878.55 1210.94 L1877.96 1210.94 L1877.37 1210.94 L1876.79 1210.94 L1876.2 1210.94 L1875.61 1210.94 L1875.03 1210.94 L1874.44 1210.94 L1873.85 1210.94 L1873.27 1210.94 L1872.68 1210.94 L1872.09 1210.94 L1871.51 1210.94 L1870.92 1210.94 L1870.34 1210.94 L1869.75 1210.94 L1869.16 1210.94 L1868.58 1210.94 L1867.99 1210.94 L1867.4 1210.94 L1866.82 1210.94 L1866.23 1210.94 L1865.64 1210.94 L1865.06 1210.94 L1864.47 1210.94 L1863.88 1210.94 L1863.3 1210.94 L1862.71 1210.94 L1862.13 1210.94 L1861.54 1210.94 L1860.95 1210.94 L1860.37 1210.94 L1859.78 1210.94 L1859.19 1210.94 L1858.61 1210.94 L1858.02 1210.94 L1857.43 1210.94 L1856.85 1210.94 L1856.26 1210.94 L1855.68 1210.94 L1855.09 1210.94 L1854.5 1210.94 L1853.92 1210.94 L1853.33 1210.94 L1852.74 1210.94 L1852.16 1210.94 L1851.57 1210.94 L1850.98 1210.94 L1850.4 1210.94 L1849.81 1210.94 L1849.22 1210.94 L1848.64 1210.94 L1848.05 1210.94 L1847.47 1210.94 L1846.88 1210.94 L1846.29 1210.94 L1845.71 1210.94 L1845.12 1210.94 L1844.53 1210.94 L1843.95 1210.94 L1843.36 1210.94 L1842.77 1210.94 L1842.19 1210.94 L1841.6 1210.94 L1841.01 1210.94 L1840.43 1210.94 L1839.84 1210.94 L1839.26 1210.94 L1838.67 1210.94 L1838.08 1210.94 L1837.5 1210.94 L1836.91 1210.94 L1836.32 1210.94 L1835.74 1210.94 L1835.15 1210.94 L1834.56 1210.94 L1833.98 1210.94 L1833.39 1210.94 L1832.81 1210.94 L1832.22 1210.94 L1831.63 1210.94 L1831.05 1210.94 L1830.46 1210.94 L1829.87 1210.94 L1829.29 1210.94 L1828.7 1210.94 L1828.11 1210.94 L1827.53 1210.94 L1826.94 1210.94 L1826.35 1210.94 L1825.77 1210.94 L1825.18 1210.94 L1824.6 1210.94 L1824.01 1210.94 L1823.42 1210.94 L1822.84 1210.94 L1822.25 1210.94 L1821.66 1210.94 L1821.08 1210.94 L1820.49 1210.94 L1819.9 1210.94 L1819.32 1210.94 L1818.73 1210.94 L1818.14 1210.94 L1817.56 1210.94 L1816.97 1210.94 L1816.39 1210.94 L1815.8 1210.94 L1815.21 1210.94 L1814.63 1210.94 L1814.04 1210.94 L1813.45 1210.94 L1812.87 1210.94 L1812.28 1210.94 L1811.69 1210.94 L1811.11 1210.94 L1810.52 1210.94 L1809.94 1210.94 L1809.35 1210.94 L1808.76 1210.94 L1808.18 1210.94 L1807.59 1210.94 L1807 1210.94 L1806.42 1210.94 L1805.83 1210.94 L1805.24 1210.94 L1804.66 1210.94 L1804.07 1210.94 L1803.48 1210.94 L1802.9 1210.94 L1802.31 1210.94 L1801.73 1210.94 L1801.14 1210.94 L1800.55 1210.94 L1799.97 1210.94 L1799.38 1210.94 L1798.79 1210.94 L1798.21 1210.94 L1797.62 1210.94 L1797.03 1210.94 L1796.45 1210.94 L1795.86 1210.94 L1795.27 1210.94 L1794.69 1210.94 L1794.1 1210.94 L1793.52 1210.94 L1792.93 1210.94 L1792.34 1210.94 L1791.76 1210.94 L1791.17 1210.94 L1790.58 1210.94 L1790 1210.94 L1789.41 1210.94 L1788.82 1210.94 L1788.24 1210.94 L1787.65 1210.94 L1787.06 1210.94 L1786.48 1210.94 L1785.89 1210.94 L1785.31 1210.94 L1784.72 1210.94 L1784.13 1210.94 L1783.55 1210.94 L1782.96 1210.94 L1782.37 1210.94 L1781.79 1210.94 L1781.2 1210.94 L1780.61 1210.94 L1780.03 1210.94 L1779.44 1210.94 L1778.86 1210.94 L1778.27 1210.94 L1777.68 1210.94 L1777.1 1210.94 L1776.51 1210.94 L1775.92 1210.94 L1775.34 1210.94 L1774.75 1210.94 L1774.16 1210.94 L1773.58 1210.94 L1772.99 1210.94 L1772.4 1210.94 L1771.82 1210.94 L1771.23 1210.94 L1770.65 1210.94 L1770.06 1210.94 L1769.47 1210.94 L1768.89 1210.94 L1768.3 1210.94 L1767.71 1210.94 L1767.13 1210.94 L1766.54 1210.94 L1765.95 1210.94 L1765.37 1210.94 L1764.78 1210.94 L1764.19 1210.94 L1763.61 1210.94 L1763.02 1210.94 L1762.44 1210.94 L1761.85 1210.94 L1761.26 1210.94 L1760.68 1210.94 L1760.09 1210.94 L1759.5 1210.94 L1758.92 1210.94 L1758.33 1210.94 L1757.74 1210.94 L1757.16 1210.94 L1756.57 1210.94 L1755.99 1210.94 L1755.4 1210.94 L1754.81 1210.94 L1754.23 1210.94 L1753.64 1210.94 L1753.05 1210.94 L1752.47 1210.94 L1751.88 1210.94 L1751.29 1210.94 L1750.71 1210.94 L1750.12 1210.94 L1749.53 1210.94 L1748.95 1210.94 L1748.36 1210.94 L1747.78 1210.94 L1747.19 1210.94 L1746.6 1210.94 L1746.02 1210.94 L1745.43 1210.94 L1744.84 1210.94 L1744.26 1210.94 L1743.67 1210.94 L1743.08 1210.94 L1742.5 1210.94 L1741.91 1210.94 L1741.32 1210.94 L1740.74 1210.94 L1740.15 1210.94 L1739.57 1210.94 L1738.98 1210.94 L1738.39 1210.94 L1737.81 1210.94 L1737.22 1210.94 L1736.63 1210.94 L1736.05 1210.94 L1735.46 1210.94 L1734.87 1210.94 L1734.29 1210.94 L1733.7 1210.94 L1733.11 1210.94 L1732.53 1210.94 L1731.94 1210.94 L1731.36 1210.94 L1730.77 1210.94 L1730.18 1210.94 L1729.6 1210.94 L1729.01 1210.94 L1728.42 1210.94 L1727.84 1210.94 L1727.25 1210.94 L1726.66 1210.94 L1726.08 1210.94 L1725.49 1210.94 L1724.91 1210.94 L1724.32 1210.94 L1723.73 1210.94 L1723.15 1210.94 L1722.56 1210.94 L1721.97 1210.94 L1721.39 1210.94 L1720.8 1210.94 L1720.21 1210.94 L1719.63 1210.94 L1719.04 1210.94 L1718.45 1210.94 L1717.87 1210.94 L1717.28 1210.94 L1716.7 1210.94 L1716.11 1210.94 L1715.52 1210.94 L1714.94 1210.94 L1714.35 1210.94 L1713.76 1210.94 L1713.18 1210.94 L1712.59 1210.94 L1712 1210.94 L1711.42 1210.94 L1710.83 1210.94 L1710.24 1210.94 L1709.66 1210.94 L1709.07 1210.94 L1708.49 1210.94 L1707.9 1210.94 L1707.31 1210.94 L1706.73 1210.94 L1706.14 1210.94 L1705.55 1210.94 L1704.97 1210.94 L1704.38 1210.94 L1703.79 1210.94 L1703.21 1210.94 L1702.62 1210.94 L1702.04 1210.94 L1701.45 1210.94 L1700.86 1210.94 L1700.28 1210.94 L1699.69 1210.94 L1699.1 1210.94 L1698.52 1210.94 L1697.93 1210.94 L1697.34 1210.94 L1696.76 1210.94 L1696.17 1210.94 L1695.58 1210.94 L1695 1210.94 L1694.41 1210.94 L1693.83 1210.94 L1693.24 1210.94 L1692.65 1210.94 L1692.07 1210.94 L1691.48 1210.94 L1690.89 1210.94 L1690.31 1210.94 L1689.72 1210.94 L1689.13 1210.94 L1688.55 1210.94 L1687.96 1210.94 L1687.37 1210.94 L1686.79 1210.94 L1686.2 1210.94 L1685.62 1210.94 L1685.03 1210.94 L1684.44 1210.94 L1683.86 1210.94 L1683.27 1210.94 L1682.68 1210.94 L1682.1 1210.94 L1681.51 1210.94 L1680.92 1210.94 L1680.34 1210.94 L1679.75 1210.94 L1679.17 1210.94 L1678.58 1210.94 L1677.99 1210.94 L1677.41 1210.94 L1676.82 1210.94 L1676.23 1210.94 L1675.65 1210.94 L1675.06 1210.94 L1674.47 1210.94 L1673.89 1210.94 L1673.3 1210.94 L1672.71 1210.94 L1672.13 1210.94 L1671.54 1210.94 L1670.96 1210.94 L1670.37 1210.94 L1669.78 1210.94 L1669.2 1210.94 L1668.61 1210.94 L1668.02 1210.94 L1667.44 1210.94 L1666.85 1210.94 L1666.26 1210.94 L1665.68 1210.94 L1665.09 1210.94 L1664.5 1210.94 L1663.92 1210.94 L1663.33 1210.94 L1662.75 1210.94 L1662.16 1210.94 L1661.57 1210.94 L1660.99 1210.94 L1660.4 1210.94 L1659.81 1210.94 L1659.23 1210.94 L1658.64 1210.94 L1658.05 1210.94 L1657.47 1210.94 L1656.88 1210.94 L1656.29 1210.94 L1655.71 1210.94 L1655.12 1210.94 L1654.54 1210.94 L1653.95 1210.94 L1653.36 1210.94 L1652.78 1210.94 L1652.19 1210.94 L1651.6 1210.94 L1651.02 1210.94 L1650.43 1210.94 L1649.84 1210.94 L1649.26 1210.94 L1648.67 1210.94 L1648.09 1210.94 L1647.5 1210.94 L1646.91 1210.94 L1646.33 1210.94 L1645.74 1210.94 L1645.15 1210.94 L1644.57 1210.94 L1643.98 1210.94 L1643.39 1210.94 L1642.81 1210.94 L1642.22 1210.94 L1641.63 1210.94 L1641.05 1210.94 L1640.46 1210.94 L1639.88 1210.94 L1639.29 1210.94 L1638.7 1210.94 L1638.12 1210.94 L1637.53 1210.94 L1636.94 1210.94 L1636.36 1210.94 L1635.77 1210.94 L1635.18 1210.94 L1634.6 1210.94 L1634.01 1210.94 L1633.42 1210.94 L1632.84 1210.94 L1632.25 1210.94 L1631.67 1210.94 L1631.08 1210.94 L1630.49 1210.94 L1629.91 1210.94 L1629.32 1210.94 L1628.73 1210.94 L1628.15 1210.94 L1627.56 1210.94 L1626.97 1210.94 L1626.39 1210.94 L1625.8 1210.94 L1625.22 1210.94 L1624.63 1210.94 L1624.04 1210.94 L1623.46 1210.94 L1622.87 1210.94 L1622.28 1210.94 L1621.7 1210.94 L1621.11 1210.94 L1620.52 1210.94 L1619.94 1210.94 L1619.35 1210.94 L1618.76 1210.94 L1618.18 1210.94 L1617.59 1210.94 L1617.01 1210.94 L1616.42 1210.94 L1615.83 1210.94 L1615.25 1210.94 L1614.66 1210.94 L1614.07 1210.94 L1613.49 1210.94 L1612.9 1210.94 L1612.31 1210.94 L1611.73 1210.94 L1611.14 1210.94 L1610.55 1210.94 L1609.97 1210.94 L1609.38 1210.94 L1608.8 1210.94 L1608.21 1210.94 L1607.62 1210.94 L1607.04 1210.94 L1606.45 1210.94 L1605.86 1210.94 L1605.28 1210.94 L1604.69 1210.94 L1604.1 1210.94 L1603.52 1210.94 L1602.93 1210.94 L1602.34 1210.94 L1601.76 1210.94 L1601.17 1210.94 L1600.59 1210.94 L1600 1210.94 L1599.41 1210.94 L1598.83 1210.94 L1598.24 1210.94 L1597.65 1210.94 L1597.07 1210.94 L1596.48 1210.94 L1595.89 1210.94 L1595.31 1210.94 L1594.72 1210.94 L1594.14 1210.94 L1593.55 1210.94 L1592.96 1210.94 L1592.38 1210.94 L1591.79 1210.94 L1591.2 1210.94 L1590.62 1210.94 L1590.03 1210.94 L1589.44 1210.94 L1588.86 1210.94 L1588.27 1210.94 L1587.68 1210.94 L1587.1 1210.94 L1586.51 1210.94 L1585.93 1210.94 L1585.34 1210.94 L1584.75 1210.94 L1584.17 1210.94 L1583.58 1210.94 L1582.99 1210.94 L1582.41 1210.94 L1581.82 1210.94 L1581.23 1210.94 L1580.65 1210.94 L1580.06 1210.94 L1579.47 1210.94 L1578.89 1210.94 L1578.3 1210.94 L1577.72 1210.94 L1577.13 1210.94 L1576.54 1210.94 L1575.96 1210.94 L1575.37 1210.94 L1574.78 1210.94 L1574.2 1210.94 L1573.61 1210.94 L1573.02 1210.94 L1572.44 1210.94 L1571.85 1210.94 L1571.27 1210.94 L1570.68 1210.94 L1570.09 1210.94 L1569.51 1210.94 L1568.92 1210.94 L1568.33 1210.94 L1567.75 1210.94 L1567.16 1210.94 L1566.57 1210.94 L1565.99 1210.94 L1565.4 1210.94 L1564.81 1210.94 L1564.23 1210.94 L1563.64 1210.94 L1563.06 1210.94 L1562.47 1210.94 L1561.88 1210.94 L1561.3 1210.94 L1560.71 1210.94 L1560.12 1210.94 L1559.54 1210.94 L1558.95 1210.94 L1558.36 1210.94 L1557.78 1210.94 L1557.19 1210.94 L1556.6 1210.94 L1556.02 1210.94 L1555.43 1210.94 L1554.85 1210.94 L1554.26 1210.94 L1553.67 1210.94 L1553.09 1210.94 L1552.5 1210.94 L1551.91 1210.94 L1551.33 1210.94 L1550.74 1210.94 L1550.15 1210.94 L1549.57 1210.94 L1548.98 1210.94 L1548.4 1210.94 L1547.81 1210.94 L1547.22 1210.94 L1546.64 1210.94 L1546.05 1210.94 L1545.46 1210.94 L1544.88 1210.94 L1544.29 1210.94 L1543.7 1210.94 L1543.12 1210.94 L1542.53 1210.94 L1541.94 1210.94 L1541.36 1210.94 L1540.77 1210.94 L1540.19 1210.94 L1539.6 1210.94 L1539.01 1210.94 L1538.43 1210.94 L1537.84 1210.94 L1537.25 1210.94 L1536.67 1210.94 L1536.08 1210.94 L1535.49 1210.94 L1534.91 1210.94 L1534.32 1210.94 L1533.73 1210.94 L1533.15 1210.94 L1532.56 1210.94 L1531.98 1210.94 L1531.39 1210.94 L1530.8 1210.94 L1530.22 1210.94 L1529.63 1210.94 L1529.04 1210.94 L1528.46 1210.94 L1527.87 1210.94 L1527.28 1210.94 L1526.7 1210.94 L1526.11 1210.94 L1525.52 1210.94 L1524.94 1210.94 L1524.35 1210.94 L1523.77 1210.94 L1523.18 1210.94 L1522.59 1210.94 L1522.01 1210.94 L1521.42 1210.94 L1520.83 1210.94 L1520.25 1210.94 L1519.66 1210.94 L1519.07 1210.94 L1518.49 1210.94 L1517.9 1210.94 L1517.32 1210.94 L1516.73 1210.94 L1516.14 1210.94 L1515.56 1210.94 L1514.97 1210.94 L1514.38 1210.94 L1513.8 1210.94 L1513.21 1210.94 L1512.62 1210.94 L1512.04 1210.94 L1511.45 1210.94 L1510.86 1210.94 L1510.28 1210.94 L1509.69 1210.94 L1509.11 1210.94 L1508.52 1210.94 L1507.93 1210.94 L1507.35 1210.94 L1506.76 1210.94 L1506.17 1210.94 L1505.59 1210.94 L1505 1210.94 L1504.41 1210.94 L1503.83 1210.94 L1503.24 1210.94 L1502.65 1210.94 L1502.07 1210.94 L1501.48 1210.94 L1500.9 1210.94 L1500.31 1210.94 L1499.72 1210.94 L1499.14 1210.94 L1498.55 1210.94 L1497.96 1210.94 L1497.38 1210.94 L1496.79 1210.94 L1496.2 1210.94 L1495.62 1210.94 L1495.03 1210.94 L1494.45 1210.94 L1493.86 1210.94 L1493.27 1210.94 L1492.69 1210.94 L1492.1 1210.94 L1491.51 1210.94 L1490.93 1210.94 L1490.34 1210.94 L1489.75 1210.94 L1489.17 1210.94 L1488.58 1210.94 L1487.99 1210.94 L1487.41 1210.94 L1486.82 1210.94 L1486.24 1210.94 L1485.65 1210.94 L1485.06 1210.94 L1484.48 1210.94 L1483.89 1210.94 L1483.3 1210.94 L1482.72 1210.94 L1482.13 1210.94 L1481.54 1210.94 L1480.96 1210.94 L1480.37 1210.94 L1479.78 1210.94 L1479.2 1210.94 L1478.61 1210.94 L1478.03 1210.94 L1477.44 1210.94 L1476.85 1210.94 L1476.27 1210.94 L1475.68 1210.94 L1475.09 1210.94 L1474.51 1210.94 L1473.92 1210.94 L1473.33 1210.94 L1472.75 1210.94 L1472.16 1210.94 L1471.57 1210.94 L1470.99 1210.94 L1470.4 1210.94 L1469.82 1210.94 L1469.23 1210.94 L1468.64 1210.94 L1468.06 1210.94 L1467.47 1210.94 L1466.88 1210.94 L1466.3 1210.94 L1465.71 1210.94 L1465.12 1210.94 L1464.54 1210.94 L1463.95 1210.94 L1463.37 1210.94 L1462.78 1210.94 L1462.19 1210.94 L1461.61 1210.94 L1461.02 1210.94 L1460.43 1210.94 L1459.85 1210.94 L1459.26 1210.94 L1458.67 1210.94 L1458.09 1210.94 L1457.5 1210.94 L1456.91 1210.94 L1456.33 1210.94 L1455.74 1210.94 L1455.16 1210.94 L1454.57 1210.94 L1453.98 1210.94 L1453.4 1210.94 L1452.81 1210.94 L1452.22 1210.94 L1451.64 1210.94 L1451.05 1210.94 L1450.46 1210.94 L1449.88 1210.94 L1449.29 1210.94 L1448.7 1210.94 L1448.12 1210.94 L1447.53 1210.94 L1446.95 1210.94 L1446.36 1210.94 L1445.77 1210.94 L1445.19 1210.94 L1444.6 1210.94 L1444.01 1210.94 L1443.43 1210.94 L1442.84 1210.94 L1442.25 1210.94 L1441.67 1210.94 L1441.08 1210.94 L1440.5 1210.94 L1439.91 1210.94 L1439.32 1210.94 L1438.74 1210.94 L1438.15 1210.94 L1437.56 1210.94 L1436.98 1210.94 L1436.39 1210.94 L1435.8 1210.94 L1435.22 1210.94 L1434.63 1210.94 L1434.04 1210.94 L1433.46 1210.94 L1432.87 1210.94 L1432.29 1210.94 L1431.7 1210.94 L1431.11 1210.94 L1430.53 1210.94 L1429.94 1210.94 L1429.35 1210.94 L1428.77 1210.94 L1428.18 1210.94 L1427.59 1210.94 L1427.01 1210.94 L1426.42 1210.94 L1425.83 1210.94 L1425.25 1210.94 L1424.66 1210.94 L1424.08 1210.94 L1423.49 1210.94 L1422.9 1210.94 L1422.32 1210.94 L1421.73 1210.94 L1421.14 1210.94 L1420.56 1210.94 L1419.97 1210.94 L1419.38 1210.94 L1418.8 1210.94 L1418.21 1210.94 L1417.63 1210.94 L1417.04 1210.94 L1416.45 1210.94 L1415.87 1210.94 L1415.28 1210.94 L1414.69 1210.94 L1414.11 1210.94 L1413.52 1210.94 L1412.93 1210.94 L1412.35 1210.94 L1411.76 1210.94 L1411.17 1210.94 L1410.59 1210.94 L1410 1210.94 L1409.42 1210.94 L1408.83 1210.94 L1408.24 1210.94 L1407.66 1210.94 L1407.07 1210.94 L1406.48 1210.94 L1405.9 1210.94 L1405.31 1210.94 L1404.72 1210.94 L1404.14 1210.94 L1403.55 1210.94 L1402.96 1210.94 L1402.38 1210.94 L1401.79 1210.94 L1401.21 1210.94 L1400.62 1210.94 L1400.03 1210.94 L1399.45 1210.94 L1398.86 1210.94 L1398.27 1210.94 L1397.69 1210.94 L1397.1 1210.94 L1396.51 1210.94 L1395.93 1210.94 L1395.34 1210.94 L1394.75 1210.94 L1394.17 1210.94 L1393.58 1210.94 L1393 1210.94 L1392.41 1210.94 L1391.82 1210.94 L1391.24 1210.94 L1390.65 1210.94 L1390.06 1210.94 L1389.48 1210.94 L1388.89 1210.94 L1388.3 1210.94 L1387.72 1210.94 L1387.13 1210.94 L1386.55 1210.94 L1385.96 1210.94 L1385.37 1210.94 L1384.79 1210.94 L1384.2 1210.94 L1383.61 1210.94 L1383.03 1210.94 L1382.44 1210.94 L1381.85 1210.94 L1381.27 1210.94 L1380.68 1210.94 L1380.09 1210.94 L1379.51 1210.94 L1378.92 1210.94 L1378.34 1210.94 L1377.75 1210.94 L1377.16 1210.94 L1376.58 1210.94 L1375.99 1210.94 L1375.4 1210.94 L1374.82 1210.94 L1374.23 1210.94 L1373.64 1210.94 L1373.06 1210.94 L1372.47 1210.94 L1371.88 1210.94 L1371.3 1210.94 L1370.71 1210.94 L1370.13 1210.94 L1369.54 1210.94 L1368.95 1210.94 L1368.37 1210.94 L1367.78 1210.94 L1367.19 1210.94 L1366.61 1210.94 L1366.02 1210.94 L1365.43 1210.94 L1364.85 1210.94 L1364.26 1210.94 L1363.68 1210.94 L1363.09 1210.94 L1362.5 1210.94 L1361.92 1210.94 L1361.33 1210.94 L1360.74 1210.94 L1360.16 1210.94 L1359.57 1210.94 L1358.98 1210.94 L1358.4 1210.94 L1357.81 1210.94 L1357.22 1210.94 L1356.64 1210.94 L1356.05 1210.94 L1355.47 1210.94 L1354.88 1210.94 L1354.29 1210.94 L1353.71 1210.94 L1353.12 1210.94 L1352.53 1210.94 L1351.95 1210.94 L1351.36 1210.94 L1350.77 1210.94 L1350.19 1210.94 L1349.6 1210.94 L1349.01 1210.94 L1348.43 1210.94 L1347.84 1210.94 L1347.26 1210.94 L1346.67 1210.94 L1346.08 1210.94 L1345.5 1210.94 L1344.91 1210.94 L1344.32 1210.94 L1343.74 1210.94 L1343.15 1210.94 L1342.56 1210.94 L1341.98 1210.94 L1341.39 1210.94 L1340.8 1210.94 L1340.22 1210.94 L1339.63 1210.94 L1339.05 1210.94 L1338.46 1210.94 L1337.87 1210.94 L1337.29 1210.94 L1336.7 1210.94 L1336.11 1210.94 L1335.53 1210.94 L1334.94 1210.94 L1334.35 1210.94 L1333.77 1210.94 L1333.18 1210.94 L1332.6 1210.94 L1332.01 1210.94 L1331.42 1210.94 L1330.84 1210.94 L1330.25 1210.94 L1329.66 1210.94 L1329.08 1210.94 L1328.49 1210.94 L1327.9 1210.94 L1327.32 1210.94 L1326.73 1210.94 L1326.14 1210.94 L1325.56 1210.94 L1324.97 1210.94 L1324.39 1210.94 L1323.8 1210.94 L1323.21 1210.94 L1322.63 1210.94 L1322.04 1210.94 L1321.45 1210.94 L1320.87 1210.94 L1320.28 1210.94 L1319.69 1210.94 L1319.11 1210.94 L1318.52 1210.94 L1317.93 1210.94 L1317.35 1210.94 L1316.76 1210.94 L1316.18 1210.94 L1315.59 1210.94 L1315 1210.94 L1314.42 1210.94 L1313.83 1210.94 L1313.24 1210.94 L1312.66 1210.94 L1312.07 1210.94 L1311.48 1210.94 L1310.9 1210.94 L1310.31 1210.94 L1309.73 1210.94 L1309.14 1210.94 L1308.55 1210.94 L1307.97 1210.94 L1307.38 1210.94 L1306.79 1210.94 L1306.21 1210.94 L1305.62 1210.94 L1305.03 1210.94 L1304.45 1210.94 L1303.86 1210.94 L1303.27 1210.94 L1302.69 1210.94 L1302.1 1210.94 L1301.52 1210.94 L1300.93 1210.94 L1300.34 1210.94 L1299.76 1210.94 L1299.17 1210.94 L1298.58 1210.94 L1298 1210.94 L1297.41 1210.94 L1296.82 1210.94 L1296.24 1210.94 L1295.65 1210.94 L1295.06 1210.94 L1294.48 1210.94 L1293.89 1210.94 L1293.31 1210.94 L1292.72 1210.94 L1292.13 1210.94 L1291.55 1210.94 L1290.96 1210.94 L1290.37 1210.94 L1289.79 1210.94 L1289.2 1210.94 L1288.61 1210.94 L1288.03 1210.94 L1287.44 1210.94 L1286.86 1210.94 L1286.27 1210.94 L1285.68 1210.94 L1285.1 1210.94 L1284.51 1210.94 L1283.92 1210.94 L1283.34 1210.94 L1282.75 1210.94 L1282.16 1210.94 L1281.58 1210.94 L1280.99 1210.94 L1280.4 1210.94 L1279.82 1210.94 L1279.23 1210.94 L1278.65 1210.94 L1278.06 1210.94 L1277.47 1210.94 L1276.89 1210.94 L1276.3 1210.94 L1275.71 1210.94 L1275.13 1210.94 L1274.54 1210.94 L1273.95 1210.94 L1273.37 1210.94 L1272.78 1210.94 L1272.19 1210.94 L1271.61 1210.94 L1271.02 1210.94 L1270.44 1210.94 L1269.85 1210.94 L1269.26 1210.94 L1268.68 1210.94 L1268.09 1210.94 L1267.5 1210.94 L1266.92 1210.94 L1266.33 1210.94 L1265.74 1210.94 L1265.16 1210.94 L1264.57 1210.94 L1263.98 1210.94 L1263.4 1210.94 L1262.81 1210.94 L1262.23 1210.94 L1261.64 1210.94 L1261.05 1210.94 L1260.47 1210.94 L1259.88 1210.94 L1259.29 1210.94 L1258.71 1210.94 L1258.12 1210.94 L1257.53 1210.94 L1256.95 1210.94 L1256.36 1210.94 L1255.78 1210.94 L1255.19 1210.94 L1254.6 1210.94 L1254.02 1210.94 L1253.43 1210.94 L1252.84 1210.94 L1252.26 1210.94 L1251.67 1210.94 L1251.08 1210.94 L1250.5 1210.94 L1249.91 1210.94 L1249.32 1210.94 L1248.74 1210.94 L1248.15 1210.94 L1247.57 1210.94 L1246.98 1210.94 L1246.39 1210.94 L1245.81 1210.94 L1245.22 1210.94 L1244.63 1210.94 L1244.05 1210.94 L1243.46 1210.94 L1242.87 1210.94 L1242.29 1210.94 L1241.7 1210.94 L1241.11 1210.94 L1240.53 1210.94 L1239.94 1210.94 L1239.36 1210.94 L1238.77 1210.94 L1238.18 1210.94 L1237.6 1210.94 L1237.01 1210.94 L1236.42 1210.94 L1235.84 1210.94 L1235.25 1210.94 L1234.66 1210.94 L1234.08 1210.94 L1233.49 1210.94 L1232.91 1210.94 L1232.32 1210.94 L1231.73 1210.94 L1231.15 1210.94 L1230.56 1210.94 L1229.97 1210.94 L1229.39 1210.94 L1228.8 1210.94 L1228.21 1210.94 L1227.63 1210.94 L1227.04 1210.94 L1226.45 1210.94 L1225.87 1210.94 L1225.28 1210.94 L1224.7 1210.94 L1224.11 1210.94 L1223.52 1210.94 L1222.94 1210.94 L1222.35 1210.94 L1221.76 1210.94 L1221.18 1210.94 L1220.59 1210.94 L1220 1210.94 L1219.42 1210.94 L1218.83 1210.94 L1218.24 1210.94 L1217.66 1210.94 L1217.07 1210.94 L1216.49 1210.94 L1215.9 1210.94 L1215.31 1210.94 L1214.73 1210.94 L1214.14 1210.94 L1213.55 1210.94 L1212.97 1210.94 L1212.38 1210.94 L1211.79 1210.94 L1211.21 1210.94 L1210.62 1210.94 L1210.03 1210.94 L1209.45 1210.94 L1208.86 1210.94 L1208.28 1210.94 L1207.69 1210.94 L1207.1 1210.94 L1206.52 1210.94 L1205.93 1210.94 L1205.34 1210.94 L1204.76 1210.94 L1204.17 1210.94 L1203.58 1210.94 L1203 1210.94 L1202.41 1210.94 L1201.83 1210.94 L1201.24 1210.94 L1200.65 1210.94 L1200.07 1210.94 L1199.48 1210.94 L1198.89 1210.94 L1198.31 1210.94 L1197.72 1210.94 L1197.13 1210.94 L1196.55 1210.94 L1195.96 1210.94 L1195.37 1210.94 L1194.79 1210.94 L1194.2 1210.94 L1193.62 1210.94 L1193.03 1210.94 L1192.44 1210.94 L1191.86 1210.94 L1191.27 1210.94 L1190.68 1210.94 L1190.1 1210.94 L1189.51 1210.94 L1188.92 1210.94 L1188.34 1210.94 L1187.75 1210.94 L1187.16 1210.94 L1186.58 1210.94 L1185.99 1210.94 L1185.41 1210.94 L1184.82 1210.94 L1184.23 1210.94 L1183.65 1210.94 L1183.06 1210.94 L1182.47 1210.94 L1181.89 1210.94 L1181.3 1210.94 L1180.71 1210.94 L1180.13 1210.94 L1179.54 1210.94 L1178.96 1210.94 L1178.37 1210.94 L1177.78 1210.94 L1177.2 1210.94 L1176.61 1210.94 L1176.02 1210.94 L1175.44 1210.94 L1174.85 1210.94 L1174.26 1210.94 L1173.68 1210.94 L1173.09 1210.94 L1172.5 1210.94 L1171.92 1210.94 L1171.33 1210.94 L1170.75 1210.94 L1170.16 1210.94 L1169.57 1210.94 L1168.99 1210.94 L1168.4 1210.94 L1167.81 1210.94 L1167.23 1210.94 L1166.64 1210.94 L1166.05 1210.94 L1165.47 1210.94 L1164.88 1210.94 L1164.29 1210.94 L1163.71 1210.94 L1163.12 1210.94 L1162.54 1210.94 L1161.95 1210.94 L1161.36 1210.94 L1160.78 1210.94 L1160.19 1210.94 L1159.6 1210.94 L1159.02 1210.94 L1158.43 1210.94 L1157.84 1210.94 L1157.26 1210.94 L1156.67 1210.94 L1156.09 1210.94 L1155.5 1210.94 L1154.91 1210.94 L1154.33 1210.94 L1153.74 1210.94 L1153.15 1210.94 L1152.57 1210.94 L1151.98 1210.94 L1151.39 1210.94 L1150.81 1210.94 L1150.22 1210.94 L1149.63 1210.94 L1149.05 1210.94 L1148.46 1210.94 L1147.88 1210.94 L1147.29 1210.94 L1146.7 1210.94 L1146.12 1210.94 L1145.53 1210.94 L1144.94 1210.94 L1144.36 1210.94 L1143.77 1210.94 L1143.18 1210.94 L1142.6 1210.94 L1142.01 1210.94 L1141.42 1210.94 L1140.84 1210.94 L1140.25 1210.94 L1139.67 1210.94 L1139.08 1210.94 L1138.49 1210.94 L1137.91 1210.94 L1137.32 1210.94 L1136.73 1210.94 L1136.15 1210.94 L1135.56 1210.94 L1134.97 1210.94 L1134.39 1210.94 L1133.8 1210.94 L1133.21 1210.94 L1132.63 1210.94 L1132.04 1210.94 L1131.46 1210.94 L1130.87 1210.94 L1130.28 1210.94 L1129.7 1210.94 L1129.11 1210.94 L1128.52 1210.94 L1127.94 1210.94 L1127.35 1210.94 L1126.76 1210.94 L1126.18 1210.94 L1125.59 1210.94 L1125.01 1210.94 L1124.42 1210.94 L1123.83 1210.94 L1123.25 1210.94 L1122.66 1210.94 L1122.07 1210.94 L1121.49 1210.94 L1120.9 1210.94 L1120.31 1210.94 L1119.73 1210.94 L1119.14 1210.94 L1118.55 1210.94 L1117.97 1210.94 L1117.38 1210.94 L1116.8 1210.94 L1116.21 1210.94 L1115.62 1210.94 L1115.04 1210.94 L1114.45 1210.94 L1113.86 1210.94 L1113.28 1210.94 L1112.69 1210.94 L1112.1 1210.94 L1111.52 1210.94 L1110.93 1210.94 L1110.34 1210.94 L1109.76 1210.94 L1109.17 1210.94 L1108.59 1210.94 L1108 1210.94 L1107.41 1210.94 L1106.83 1210.94 L1106.24 1210.94 L1105.65 1210.94 L1105.07 1210.94 L1104.48 1210.94 L1103.89 1210.94 L1103.31 1210.94 L1102.72 1210.94 L1102.14 1210.94 L1101.55 1210.94 L1100.96 1210.94 L1100.38 1210.94 L1099.79 1210.94 L1099.2 1210.94 L1098.62 1210.94 L1098.03 1210.94 L1097.44 1210.94 L1096.86 1210.94 L1096.27 1210.94 L1095.68 1210.94 L1095.1 1210.94 L1094.51 1210.94 L1093.93 1210.94 L1093.34 1210.94 L1092.75 1210.94 L1092.17 1210.94 L1091.58 1210.94 L1090.99 1210.94 L1090.41 1210.94 L1089.82 1210.94 L1089.23 1210.94 L1088.65 1210.94 L1088.06 1210.94 L1087.47 1210.94 L1086.89 1210.94 L1086.3 1210.94 L1085.72 1210.94 L1085.13 1210.94 L1084.54 1210.94 L1083.96 1210.94 L1083.37 1210.94 L1082.78 1210.94 L1082.2 1210.94 L1081.61 1210.94 L1081.02 1210.94 L1080.44 1210.94 L1079.85 1210.94 L1079.26 1210.94 L1078.68 1210.94 L1078.09 1210.94 L1077.51 1210.94 L1076.92 1210.94 L1076.33 1210.94 L1075.75 1210.94 L1075.16 1210.94 L1074.57 1210.94 L1073.99 1210.94 L1073.4 1210.94 L1072.81 1210.94 L1072.23 1210.94 L1071.64 1210.94 L1071.06 1210.94 L1070.47 1210.94 L1069.88 1210.94 L1069.3 1210.94 L1068.71 1210.94 L1068.12 1210.94 L1067.54 1210.94 L1066.95 1210.94 L1066.36 1210.94 L1065.78 1210.94 L1065.19 1210.94 L1064.6 1210.94 L1064.02 1210.94 L1063.43 1210.94 L1062.85 1210.94 L1062.26 1210.94 L1061.67 1210.94 L1061.09 1210.94 L1060.5 1210.94 L1059.91 1210.94 L1059.33 1210.94 L1058.74 1210.94 L1058.15 1210.94 L1057.57 1210.94 L1056.98 1210.94 L1056.39 1210.94 L1055.81 1210.94 L1055.22 1210.94 L1054.64 1210.94 L1054.05 1210.94 L1053.46 1210.94 L1052.88 1210.94 L1052.29 1210.94 L1051.7 1210.94 L1051.12 1210.94 L1050.53 1210.94 L1049.94 1210.94 L1049.36 1210.94 L1048.77 1210.94 L1048.19 1210.94 L1047.6 1210.94 L1047.01 1210.94 L1046.43 1210.94 L1045.84 1210.94 L1045.25 1210.94 L1044.67 1210.94 L1044.08 1210.94 L1043.49 1210.94 L1042.91 1210.94 L1042.32 1210.94 L1041.73 1210.94 L1041.15 1210.94 L1040.56 1210.94 L1039.98 1210.94 L1039.39 1210.94 L1038.8 1210.94 L1038.22 1210.94 L1037.63 1210.94 L1037.04 1210.94 L1036.46 1210.94 L1035.87 1210.94 L1035.28 1210.94 L1034.7 1210.94 L1034.11 1210.94 L1033.52 1210.94 L1032.94 1210.94 L1032.35 1210.94 L1031.77 1210.94 L1031.18 1210.94 L1030.59 1210.94 L1030.01 1210.94 L1029.42 1210.94 L1028.83 1210.94 L1028.25 1210.94 L1027.66 1210.94 L1027.07 1210.94 L1026.49 1210.94 L1025.9 1210.94 L1025.32 1210.94 L1024.73 1210.94 L1024.14 1210.94 L1023.56 1210.94 L1022.97 1210.94 L1022.38 1210.94 L1021.8 1210.94 L1021.21 1210.94 L1020.62 1210.94 L1020.04 1210.94 L1019.45 1210.94 L1018.86 1210.94 L1018.28 1210.94 L1017.69 1210.94 L1017.11 1210.94 L1016.52 1210.94 L1015.93 1210.94 L1015.35 1210.94 L1014.76 1210.94 L1014.17 1210.94 L1013.59 1210.94 L1013 1210.94 L1012.41 1210.94 L1011.83 1210.94 L1011.24 1210.94 L1010.65 1210.94 L1010.07 1210.94 L1009.48 1210.94 L1008.9 1210.94 L1008.31 1210.94 L1007.72 1210.94 L1007.14 1210.94 L1006.55 1210.94 L1005.96 1210.94 L1005.38 1210.94 L1004.79 1210.94 L1004.2 1210.94 L1003.62 1210.94 L1003.03 1210.94 L1002.44 1210.94 L1001.86 1210.94 L1001.27 1210.94 L1000.69 1210.94 L1000.1 1210.94 L999.513 1210.94 L998.926 1210.94 L998.34 1210.94 L997.754 1210.94 L997.167 1210.94 L996.581 1210.94 L995.994 1210.94 L995.408 1210.94 L994.822 1210.94 L994.235 1210.94 L993.649 1210.94 L993.062 1210.94 L992.476 1210.94 L991.889 1210.94 L991.303 1210.94 L990.717 1210.94 L990.13 1210.94 L989.544 1210.94 L988.957 1210.94 L988.371 1210.94 L987.785 1210.94 L987.198 1210.94 L986.612 1210.94 L986.025 1210.94  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.99 986.612,1210.99 987.198,1210.99 987.785,1210.99 988.371,1210.99 988.957,1210.99 989.544,1210.99 990.13,1210.99 990.717,1210.99 991.303,1210.99 991.889,1210.99 992.476,1210.99 993.062,1210.99 993.649,1210.99 994.235,1210.99 994.822,1210.99 995.408,1210.99 995.994,1210.99 996.581,1210.99 997.167,1210.99 997.754,1210.99 998.34,1210.99 998.926,1210.99 999.513,1210.99 1000.1,1210.99 1000.69,1210.99 1001.27,1210.99 1001.86,1210.99 1002.44,1210.99 1003.03,1210.99 1003.62,1210.99 1004.2,1210.99 1004.79,1210.99 1005.38,1210.99 1005.96,1210.99 1006.55,1210.99 1007.14,1210.99 1007.72,1210.99 1008.31,1210.99 1008.9,1210.99 1009.48,1210.99 1010.07,1210.99 1010.65,1210.99 1011.24,1210.99 1011.83,1210.99 1012.41,1210.99 1013,1210.99 1013.59,1210.99 1014.17,1210.99 1014.76,1210.99 1015.35,1210.99 1015.93,1210.99 1016.52,1210.99 1017.11,1210.99 1017.69,1210.99 1018.28,1210.99 1018.86,1210.99 1019.45,1210.99 1020.04,1210.99 1020.62,1210.99 1021.21,1210.99 1021.8,1210.99 1022.38,1210.99 1022.97,1210.99 1023.56,1210.99 1024.14,1210.99 1024.73,1210.99 1025.32,1210.99 1025.9,1210.99 1026.49,1210.99 1027.07,1210.99 1027.66,1210.99 1028.25,1210.99 1028.83,1210.99 1029.42,1210.99 1030.01,1210.99 1030.59,1210.99 1031.18,1210.99 1031.77,1210.99 1032.35,1210.99 1032.94,1210.99 1033.52,1210.99 1034.11,1210.99 1034.7,1210.99 1035.28,1210.99 1035.87,1210.99 1036.46,1210.99 1037.04,1210.99 1037.63,1210.99 1038.22,1210.99 1038.8,1210.99 1039.39,1210.99 1039.98,1210.99 1040.56,1210.99 1041.15,1210.99 1041.73,1210.99 1042.32,1210.99 1042.91,1210.99 1043.49,1210.99 1044.08,1210.99 1044.67,1210.99 1045.25,1210.99 1045.84,1210.99 1046.43,1210.99 1047.01,1210.99 1047.6,1210.99 1048.19,1210.99 1048.77,1210.99 1049.36,1210.99 1049.94,1210.99 1050.53,1210.99 1051.12,1210.99 1051.7,1210.99 1052.29,1210.99 1052.88,1210.99 1053.46,1210.99 1054.05,1210.99 1054.64,1210.99 1055.22,1210.99 1055.81,1210.99 1056.39,1210.99 1056.98,1210.99 1057.57,1210.99 1058.15,1210.99 1058.74,1210.99 1059.33,1210.99 1059.91,1210.99 1060.5,1210.99 1061.09,1210.99 1061.67,1210.99 1062.26,1210.99 1062.85,1210.99 1063.43,1210.99 1064.02,1210.99 1064.6,1210.99 1065.19,1210.99 1065.78,1210.99 1066.36,1210.99 1066.95,1210.99 1067.54,1210.99 1068.12,1210.99 1068.71,1210.99 1069.3,1210.99 1069.88,1210.99 1070.47,1210.99 1071.06,1210.99 1071.64,1210.99 1072.23,1210.99 1072.81,1210.99 1073.4,1210.99 1073.99,1210.99 1074.57,1210.99 1075.16,1210.99 1075.75,1210.99 1076.33,1210.99 1076.92,1210.99 1077.51,1210.99 1078.09,1210.99 1078.68,1210.99 1079.26,1210.99 1079.85,1210.99 1080.44,1210.99 1081.02,1210.99 1081.61,1210.99 1082.2,1210.99 1082.78,1210.99 1083.37,1210.99 1083.96,1210.99 1084.54,1210.99 1085.13,1210.99 1085.72,1210.99 1086.3,1210.99 1086.89,1210.99 1087.47,1210.99 1088.06,1210.99 1088.65,1210.99 1089.23,1210.99 1089.82,1210.99 1090.41,1210.99 1090.99,1210.99 1091.58,1210.99 1092.17,1210.99 1092.75,1210.99 1093.34,1210.99 1093.93,1210.99 1094.51,1210.99 1095.1,1210.99 1095.68,1210.99 1096.27,1210.99 1096.86,1210.99 1097.44,1210.99 1098.03,1210.99 1098.62,1210.99 1099.2,1210.99 1099.79,1210.99 1100.38,1210.99 1100.96,1210.99 1101.55,1210.99 1102.14,1210.99 1102.72,1210.99 1103.31,1210.99 1103.89,1210.99 1104.48,1210.99 1105.07,1210.99 1105.65,1210.99 1106.24,1210.99 1106.83,1210.99 1107.41,1210.99 1108,1210.99 1108.59,1210.99 1109.17,1210.99 1109.76,1210.99 1110.34,1210.99 1110.93,1210.99 1111.52,1210.99 1112.1,1210.99 1112.69,1210.99 1113.28,1210.99 1113.86,1210.99 1114.45,1210.99 1115.04,1210.99 1115.62,1210.99 1116.21,1210.99 1116.8,1210.99 1117.38,1210.99 1117.97,1210.99 1118.55,1210.99 1119.14,1210.99 1119.73,1210.99 1120.31,1210.99 1120.9,1210.99 1121.49,1210.99 1122.07,1210.99 1122.66,1210.99 1123.25,1210.99 1123.83,1210.99 1124.42,1210.99 1125.01,1210.99 1125.59,1210.99 1126.18,1210.99 1126.76,1210.99 1127.35,1210.99 1127.94,1210.99 1128.52,1210.99 1129.11,1210.99 1129.7,1210.99 1130.28,1210.99 1130.87,1210.99 1131.46,1210.99 1132.04,1210.99 1132.63,1210.99 1133.21,1210.99 1133.8,1210.99 1134.39,1210.99 1134.97,1210.99 1135.56,1210.99 1136.15,1210.99 1136.73,1210.99 1137.32,1210.99 1137.91,1210.99 1138.49,1210.99 1139.08,1210.99 1139.67,1210.99 1140.25,1210.99 1140.84,1210.99 1141.42,1210.99 1142.01,1210.99 1142.6,1210.99 1143.18,1210.99 1143.77,1210.99 1144.36,1210.99 1144.94,1210.99 1145.53,1210.99 1146.12,1210.99 1146.7,1210.99 1147.29,1210.99 1147.88,1210.99 1148.46,1210.99 1149.05,1210.99 1149.63,1210.99 1150.22,1210.99 1150.81,1210.99 1151.39,1210.99 1151.98,1210.99 1152.57,1210.99 1153.15,1210.99 1153.74,1210.99 1154.33,1210.99 1154.91,1210.99 1155.5,1210.99 1156.09,1210.99 1156.67,1210.99 1157.26,1210.99 1157.84,1210.99 1158.43,1210.99 1159.02,1210.99 1159.6,1210.99 1160.19,1210.99 1160.78,1210.99 1161.36,1210.99 1161.95,1210.99 1162.54,1210.99 1163.12,1210.99 1163.71,1210.99 1164.29,1210.99 1164.88,1210.99 1165.47,1210.99 1166.05,1210.99 1166.64,1210.99 1167.23,1210.99 1167.81,1210.99 1168.4,1210.99 1168.99,1210.99 1169.57,1210.99 1170.16,1210.99 1170.75,1210.99 1171.33,1210.99 1171.92,1210.99 1172.5,1210.99 1173.09,1210.99 1173.68,1210.99 1174.26,1210.99 1174.85,1210.99 1175.44,1210.99 1176.02,1210.99 1176.61,1210.99 1177.2,1210.99 1177.78,1210.99 1178.37,1210.99 1178.96,1210.99 1179.54,1210.99 1180.13,1210.99 1180.71,1210.99 1181.3,1210.99 1181.89,1210.99 1182.47,1210.99 1183.06,1210.99 1183.65,1210.99 1184.23,1210.99 1184.82,1210.99 1185.41,1210.99 1185.99,1210.99 1186.58,1210.99 1187.16,1210.99 1187.75,1210.99 1188.34,1210.99 1188.92,1210.99 1189.51,1210.99 1190.1,1210.99 1190.68,1210.99 1191.27,1210.99 1191.86,1210.99 1192.44,1210.99 1193.03,1210.99 1193.62,1210.99 1194.2,1210.99 1194.79,1210.99 1195.37,1210.99 1195.96,1210.99 1196.55,1210.99 1197.13,1210.99 1197.72,1210.99 1198.31,1210.99 1198.89,1210.99 1199.48,1210.99 1200.07,1210.99 1200.65,1210.99 1201.24,1210.99 1201.83,1210.99 1202.41,1210.99 1203,1210.99 1203.58,1210.99 1204.17,1210.99 1204.76,1210.99 1205.34,1210.99 1205.93,1210.99 1206.52,1210.99 1207.1,1210.99 1207.69,1210.99 1208.28,1210.99 1208.86,1210.99 1209.45,1210.99 1210.03,1210.99 1210.62,1210.99 1211.21,1210.99 1211.79,1210.99 1212.38,1210.99 1212.97,1210.99 1213.55,1210.99 1214.14,1210.99 1214.73,1210.99 1215.31,1210.99 1215.9,1210.99 1216.49,1210.99 1217.07,1210.99 1217.66,1210.99 1218.24,1210.99 1218.83,1210.99 1219.42,1210.99 1220,1210.99 1220.59,1210.99 1221.18,1210.99 1221.76,1210.99 1222.35,1210.99 1222.94,1210.99 1223.52,1210.99 1224.11,1210.99 1224.7,1210.99 1225.28,1210.99 1225.87,1210.99 1226.45,1210.99 1227.04,1210.99 1227.63,1210.99 1228.21,1210.99 1228.8,1210.99 1229.39,1210.99 1229.97,1210.99 1230.56,1210.99 1231.15,1210.99 1231.73,1210.99 1232.32,1210.99 1232.91,1210.99 1233.49,1210.99 1234.08,1210.99 1234.66,1210.99 1235.25,1210.99 1235.84,1210.99 1236.42,1210.99 1237.01,1210.99 1237.6,1210.99 1238.18,1210.99 1238.77,1210.99 1239.36,1210.99 1239.94,1210.99 1240.53,1210.99 1241.11,1210.99 1241.7,1210.99 1242.29,1210.99 1242.87,1210.99 1243.46,1210.99 1244.05,1210.99 1244.63,1210.99 1245.22,1210.99 1245.81,1210.99 1246.39,1210.99 1246.98,1210.99 1247.57,1210.99 1248.15,1210.99 1248.74,1210.99 1249.32,1210.99 1249.91,1210.99 1250.5,1210.99 1251.08,1210.99 1251.67,1210.99 1252.26,1210.99 1252.84,1210.99 1253.43,1210.99 1254.02,1210.99 1254.6,1210.99 1255.19,1210.99 1255.78,1210.99 1256.36,1210.99 1256.95,1210.99 1257.53,1210.99 1258.12,1210.99 1258.71,1210.99 1259.29,1210.99 1259.88,1210.99 1260.47,1210.99 1261.05,1210.99 1261.64,1210.99 1262.23,1210.99 1262.81,1210.99 1263.4,1210.99 1263.98,1210.99 1264.57,1210.99 1265.16,1210.99 1265.74,1210.99 1266.33,1210.99 1266.92,1210.99 1267.5,1210.99 1268.09,1210.99 1268.68,1210.99 1269.26,1210.99 1269.85,1210.99 1270.44,1210.99 1271.02,1210.99 1271.61,1210.99 1272.19,1210.99 1272.78,1210.99 1273.37,1210.99 1273.95,1210.99 1274.54,1210.99 1275.13,1210.99 1275.71,1210.99 1276.3,1210.99 1276.89,1210.99 1277.47,1210.99 1278.06,1210.99 1278.65,1210.99 1279.23,1210.99 1279.82,1210.99 1280.4,1210.99 1280.99,1210.99 1281.58,1210.99 1282.16,1210.99 1282.75,1210.99 1283.34,1210.99 1283.92,1210.99 1284.51,1210.99 1285.1,1210.99 1285.68,1210.99 1286.27,1210.99 1286.86,1210.99 1287.44,1210.99 1288.03,1210.99 1288.61,1210.99 1289.2,1210.99 1289.79,1210.99 1290.37,1210.99 1290.96,1210.99 1291.55,1210.99 1292.13,1210.99 1292.72,1210.99 1293.31,1210.99 1293.89,1210.99 1294.48,1210.99 1295.06,1210.99 1295.65,1210.99 1296.24,1210.99 1296.82,1210.99 1297.41,1210.99 1298,1210.99 1298.58,1210.99 1299.17,1210.99 1299.76,1210.99 1300.34,1210.99 1300.93,1210.99 1301.52,1210.99 1302.1,1210.99 1302.69,1210.99 1303.27,1210.99 1303.86,1210.99 1304.45,1210.99 1305.03,1210.99 1305.62,1210.99 1306.21,1210.99 1306.79,1210.99 1307.38,1210.99 1307.97,1210.99 1308.55,1210.99 1309.14,1210.99 1309.73,1210.99 1310.31,1210.99 1310.9,1210.99 1311.48,1210.99 1312.07,1210.99 1312.66,1210.99 1313.24,1210.99 1313.83,1210.99 1314.42,1210.99 1315,1210.99 1315.59,1210.99 1316.18,1210.99 1316.76,1210.99 1317.35,1210.99 1317.93,1210.99 1318.52,1210.99 1319.11,1210.99 1319.69,1210.99 1320.28,1210.99 1320.87,1210.99 1321.45,1210.99 1322.04,1210.99 1322.63,1210.99 1323.21,1210.99 1323.8,1210.99 1324.39,1210.99 1324.97,1210.99 1325.56,1210.99 1326.14,1210.99 1326.73,1210.99 1327.32,1210.99 1327.9,1210.99 1328.49,1210.99 1329.08,1210.99 1329.66,1210.99 1330.25,1210.99 1330.84,1210.99 1331.42,1210.99 1332.01,1210.99 1332.6,1210.99 1333.18,1210.99 1333.77,1210.99 1334.35,1210.99 1334.94,1210.99 1335.53,1210.99 1336.11,1210.99 1336.7,1210.99 1337.29,1210.99 1337.87,1210.99 1338.46,1210.99 1339.05,1210.99 1339.63,1210.99 1340.22,1210.99 1340.8,1210.99 1341.39,1210.99 1341.98,1210.99 1342.56,1210.99 1343.15,1210.99 1343.74,1210.99 1344.32,1210.99 1344.91,1210.99 1345.5,1210.99 1346.08,1210.99 1346.67,1210.99 1347.26,1210.99 1347.84,1210.99 1348.43,1210.99 1349.01,1210.99 1349.6,1210.99 1350.19,1210.99 1350.77,1210.99 1351.36,1210.99 1351.95,1210.99 1352.53,1210.99 1353.12,1210.99 1353.71,1210.99 1354.29,1210.99 1354.88,1210.99 1355.47,1210.99 1356.05,1210.99 1356.64,1210.99 1357.22,1210.99 1357.81,1210.99 1358.4,1210.99 1358.98,1210.99 1359.57,1210.99 1360.16,1210.99 1360.74,1210.99 1361.33,1210.99 1361.92,1210.99 1362.5,1210.99 1363.09,1210.99 1363.68,1210.99 1364.26,1210.99 1364.85,1210.99 1365.43,1210.99 1366.02,1210.99 1366.61,1210.99 1367.19,1210.99 1367.78,1210.99 1368.37,1210.99 1368.95,1210.99 1369.54,1210.99 1370.13,1210.99 1370.71,1210.99 1371.3,1210.99 1371.88,1210.99 1372.47,1210.99 1373.06,1210.99 1373.64,1210.99 1374.23,1210.99 1374.82,1210.99 1375.4,1210.99 1375.99,1210.99 1376.58,1210.99 1377.16,1210.99 1377.75,1210.99 1378.34,1210.99 1378.92,1210.99 1379.51,1210.99 1380.09,1210.99 1380.68,1210.99 1381.27,1210.99 1381.85,1210.99 1382.44,1210.99 1383.03,1210.99 1383.61,1210.99 1384.2,1210.99 1384.79,1210.99 1385.37,1210.99 1385.96,1210.99 1386.55,1210.99 1387.13,1210.99 1387.72,1210.99 1388.3,1210.99 1388.89,1210.99 1389.48,1210.99 1390.06,1210.99 1390.65,1210.99 1391.24,1210.99 1391.82,1210.99 1392.41,1210.99 1393,1210.99 1393.58,1210.99 1394.17,1210.99 1394.75,1210.99 1395.34,1210.99 1395.93,1210.99 1396.51,1210.99 1397.1,1210.99 1397.69,1210.99 1398.27,1210.99 1398.86,1210.99 1399.45,1210.99 1400.03,1210.99 1400.62,1210.99 1401.21,1210.99 1401.79,1210.99 1402.38,1210.99 1402.96,1210.99 1403.55,1210.99 1404.14,1210.99 1404.72,1210.99 1405.31,1210.99 1405.9,1210.99 1406.48,1210.99 1407.07,1210.99 1407.66,1210.99 1408.24,1210.99 1408.83,1210.99 1409.42,1210.99 1410,1210.99 1410.59,1210.99 1411.17,1210.99 1411.76,1210.99 1412.35,1210.99 1412.93,1210.99 1413.52,1210.99 1414.11,1210.99 1414.69,1210.99 1415.28,1210.99 1415.87,1210.99 1416.45,1210.99 1417.04,1210.99 1417.63,1210.99 1418.21,1210.99 1418.8,1210.99 1419.38,1210.99 1419.97,1210.99 1420.56,1210.99 1421.14,1210.99 1421.73,1210.99 1422.32,1210.99 1422.9,1210.99 1423.49,1210.99 1424.08,1210.99 1424.66,1210.99 1425.25,1210.99 1425.83,1210.99 1426.42,1210.99 1427.01,1210.99 1427.59,1210.99 1428.18,1210.99 1428.77,1210.99 1429.35,1210.99 1429.94,1210.99 1430.53,1210.99 1431.11,1210.99 1431.7,1210.99 1432.29,1210.99 1432.87,1210.99 1433.46,1210.99 1434.04,1210.99 1434.63,1210.99 1435.22,1210.99 1435.8,1210.99 1436.39,1210.99 1436.98,1210.99 1437.56,1210.99 1438.15,1210.99 1438.74,1210.99 1439.32,1210.99 1439.91,1210.99 1440.5,1210.99 1441.08,1210.99 1441.67,1210.99 1442.25,1210.99 1442.84,1210.99 1443.43,1210.99 1444.01,1210.99 1444.6,1210.99 1445.19,1210.99 1445.77,1210.99 1446.36,1210.99 1446.95,1210.99 1447.53,1210.99 1448.12,1210.99 1448.7,1210.99 1449.29,1210.99 1449.88,1210.99 1450.46,1210.99 1451.05,1210.99 1451.64,1210.99 1452.22,1210.99 1452.81,1210.99 1453.4,1210.99 1453.98,1210.99 1454.57,1210.99 1455.16,1210.99 1455.74,1210.99 1456.33,1210.99 1456.91,1210.99 1457.5,1210.99 1458.09,1210.99 1458.67,1210.99 1459.26,1210.99 1459.85,1210.99 1460.43,1210.99 1461.02,1210.99 1461.61,1210.99 1462.19,1210.99 1462.78,1210.99 1463.37,1210.99 1463.95,1210.99 1464.54,1210.99 1465.12,1210.99 1465.71,1210.99 1466.3,1210.99 1466.88,1210.99 1467.47,1210.99 1468.06,1210.99 1468.64,1210.99 1469.23,1210.99 1469.82,1210.99 1470.4,1210.99 1470.99,1210.99 1471.57,1210.99 1472.16,1210.99 1472.75,1210.99 1473.33,1210.99 1473.92,1210.99 1474.51,1210.99 1475.09,1210.99 1475.68,1210.99 1476.27,1210.99 1476.85,1210.99 1477.44,1210.99 1478.03,1210.99 1478.61,1210.99 1479.2,1210.99 1479.78,1210.99 1480.37,1210.99 1480.96,1210.99 1481.54,1210.99 1482.13,1210.99 1482.72,1210.99 1483.3,1210.99 1483.89,1210.99 1484.48,1210.99 1485.06,1210.99 1485.65,1210.99 1486.24,1210.99 1486.82,1210.99 1487.41,1210.99 1487.99,1210.99 1488.58,1210.99 1489.17,1210.99 1489.75,1210.99 1490.34,1210.99 1490.93,1210.99 1491.51,1210.99 1492.1,1210.99 1492.69,1210.99 1493.27,1210.99 1493.86,1210.99 1494.45,1210.99 1495.03,1210.99 1495.62,1210.99 1496.2,1210.99 1496.79,1210.99 1497.38,1210.99 1497.96,1210.99 1498.55,1210.99 1499.14,1210.99 1499.72,1210.99 1500.31,1210.99 1500.9,1210.99 1501.48,1210.99 1502.07,1210.99 1502.65,1210.99 1503.24,1210.99 1503.83,1210.99 1504.41,1210.99 1505,1210.99 1505.59,1210.99 1506.17,1210.99 1506.76,1210.99 1507.35,1210.99 1507.93,1210.99 1508.52,1210.99 1509.11,1210.99 1509.69,1210.99 1510.28,1210.99 1510.86,1210.99 1511.45,1210.99 1512.04,1210.99 1512.62,1210.99 1513.21,1210.99 1513.8,1210.99 1514.38,1210.99 1514.97,1210.99 1515.56,1210.99 1516.14,1210.99 1516.73,1210.99 1517.32,1210.99 1517.9,1210.99 1518.49,1210.99 1519.07,1210.99 1519.66,1210.99 1520.25,1210.99 1520.83,1210.99 1521.42,1210.99 1522.01,1210.99 1522.59,1210.99 1523.18,1210.99 1523.77,1210.99 1524.35,1210.99 1524.94,1210.99 1525.52,1210.99 1526.11,1210.99 1526.7,1210.99 1527.28,1210.99 1527.87,1210.99 1528.46,1210.99 1529.04,1210.99 1529.63,1210.99 1530.22,1210.99 1530.8,1210.99 1531.39,1210.99 1531.98,1210.99 1532.56,1210.99 1533.15,1210.99 1533.73,1210.99 1534.32,1210.99 1534.91,1210.99 1535.49,1210.99 1536.08,1210.99 1536.67,1210.99 1537.25,1210.99 1537.84,1210.99 1538.43,1210.99 1539.01,1210.99 1539.6,1210.99 1540.19,1210.99 1540.77,1210.99 1541.36,1210.99 1541.94,1210.99 1542.53,1210.99 1543.12,1210.99 1543.7,1210.99 1544.29,1210.99 1544.88,1210.99 1545.46,1210.99 1546.05,1210.99 1546.64,1210.99 1547.22,1210.99 1547.81,1210.99 1548.4,1210.99 1548.98,1210.99 1549.57,1210.99 1550.15,1210.99 1550.74,1210.99 1551.33,1210.99 1551.91,1210.99 1552.5,1210.99 1553.09,1210.99 1553.67,1210.99 1554.26,1210.99 1554.85,1210.99 1555.43,1210.99 1556.02,1210.99 1556.6,1210.99 1557.19,1210.99 1557.78,1210.99 1558.36,1210.99 1558.95,1210.99 1559.54,1210.99 1560.12,1210.99 1560.71,1210.99 1561.3,1210.99 1561.88,1210.99 1562.47,1210.99 1563.06,1210.99 1563.64,1210.99 1564.23,1210.99 1564.81,1210.99 1565.4,1210.99 1565.99,1210.99 1566.57,1210.99 1567.16,1210.99 1567.75,1210.99 1568.33,1210.99 1568.92,1210.99 1569.51,1210.99 1570.09,1210.99 1570.68,1210.99 1571.27,1210.99 1571.85,1210.99 1572.44,1210.99 1573.02,1210.99 1573.61,1210.99 1574.2,1210.99 1574.78,1210.99 1575.37,1210.99 1575.96,1210.99 1576.54,1210.99 1577.13,1210.99 1577.72,1210.99 1578.3,1210.99 1578.89,1210.99 1579.47,1210.99 1580.06,1210.99 1580.65,1210.99 1581.23,1210.99 1581.82,1210.99 1582.41,1210.99 1582.99,1210.99 1583.58,1210.99 1584.17,1210.99 1584.75,1210.99 1585.34,1210.99 1585.93,1210.99 1586.51,1210.99 1587.1,1210.99 1587.68,1210.99 1588.27,1210.99 1588.86,1210.99 1589.44,1210.99 1590.03,1210.99 1590.62,1210.99 1591.2,1210.99 1591.79,1210.99 1592.38,1210.99 1592.96,1210.99 1593.55,1210.99 1594.14,1210.99 1594.72,1210.99 1595.31,1210.99 1595.89,1210.99 1596.48,1210.99 1597.07,1210.99 1597.65,1210.99 1598.24,1210.99 1598.83,1210.99 1599.41,1210.99 1600,1210.99 1600.59,1210.99 1601.17,1210.99 1601.76,1210.99 1602.34,1210.99 1602.93,1210.99 1603.52,1210.99 1604.1,1210.99 1604.69,1210.99 1605.28,1210.99 1605.86,1210.99 1606.45,1210.99 1607.04,1210.99 1607.62,1210.99 1608.21,1210.99 1608.8,1210.99 1609.38,1210.99 1609.97,1210.99 1610.55,1210.99 1611.14,1210.99 1611.73,1210.99 1612.31,1210.99 1612.9,1210.99 1613.49,1210.99 1614.07,1210.99 1614.66,1210.99 1615.25,1210.99 1615.83,1210.99 1616.42,1210.99 1617.01,1210.99 1617.59,1210.99 1618.18,1210.99 1618.76,1210.99 1619.35,1210.99 1619.94,1210.99 1620.52,1210.99 1621.11,1210.99 1621.7,1210.99 1622.28,1210.99 1622.87,1210.99 1623.46,1210.99 1624.04,1210.99 1624.63,1210.99 1625.22,1210.99 1625.8,1210.99 1626.39,1210.99 1626.97,1210.99 1627.56,1210.99 1628.15,1210.99 1628.73,1210.99 1629.32,1210.99 1629.91,1210.99 1630.49,1210.99 1631.08,1210.99 1631.67,1210.99 1632.25,1210.99 1632.84,1210.99 1633.42,1210.99 1634.01,1210.99 1634.6,1210.99 1635.18,1210.99 1635.77,1210.99 1636.36,1210.99 1636.94,1210.99 1637.53,1210.99 1638.12,1210.99 1638.7,1210.99 1639.29,1210.99 1639.88,1210.99 1640.46,1210.99 1641.05,1210.99 1641.63,1210.99 1642.22,1210.99 1642.81,1210.99 1643.39,1210.99 1643.98,1210.99 1644.57,1210.99 1645.15,1210.99 1645.74,1210.99 1646.33,1210.99 1646.91,1210.99 1647.5,1210.99 1648.09,1210.99 1648.67,1210.99 1649.26,1210.99 1649.84,1210.99 1650.43,1210.99 1651.02,1210.99 1651.6,1210.99 1652.19,1210.99 1652.78,1210.99 1653.36,1210.99 1653.95,1210.99 1654.54,1210.99 1655.12,1210.99 1655.71,1210.99 1656.29,1210.99 1656.88,1210.99 1657.47,1210.99 1658.05,1210.99 1658.64,1210.99 1659.23,1210.99 1659.81,1210.99 1660.4,1210.99 1660.99,1210.99 1661.57,1210.99 1662.16,1210.99 1662.75,1210.99 1663.33,1210.99 1663.92,1210.99 1664.5,1210.99 1665.09,1210.99 1665.68,1210.99 1666.26,1210.99 1666.85,1210.99 1667.44,1210.99 1668.02,1210.99 1668.61,1210.99 1669.2,1210.99 1669.78,1210.99 1670.37,1210.99 1670.96,1210.99 1671.54,1210.99 1672.13,1210.99 1672.71,1210.99 1673.3,1210.99 1673.89,1210.99 1674.47,1210.99 1675.06,1210.99 1675.65,1210.99 1676.23,1210.99 1676.82,1210.99 1677.41,1210.99 1677.99,1210.99 1678.58,1210.99 1679.17,1210.99 1679.75,1210.99 1680.34,1210.99 1680.92,1210.99 1681.51,1210.99 1682.1,1210.99 1682.68,1210.99 1683.27,1210.99 1683.86,1210.99 1684.44,1210.99 1685.03,1210.99 1685.62,1210.99 1686.2,1210.99 1686.79,1210.99 1687.37,1210.99 1687.96,1210.99 1688.55,1210.99 1689.13,1210.99 1689.72,1210.99 1690.31,1210.99 1690.89,1210.99 1691.48,1210.99 1692.07,1210.99 1692.65,1210.99 1693.24,1210.99 1693.83,1210.99 1694.41,1210.99 1695,1210.99 1695.58,1210.99 1696.17,1210.99 1696.76,1210.99 1697.34,1210.99 1697.93,1210.99 1698.52,1210.99 1699.1,1210.99 1699.69,1210.99 1700.28,1210.99 1700.86,1210.99 1701.45,1210.99 1702.04,1210.99 1702.62,1210.99 1703.21,1210.99 1703.79,1210.99 1704.38,1210.99 1704.97,1210.99 1705.55,1210.99 1706.14,1210.99 1706.73,1210.99 1707.31,1210.99 1707.9,1210.99 1708.49,1210.99 1709.07,1210.99 1709.66,1210.99 1710.24,1210.99 1710.83,1210.99 1711.42,1210.99 1712,1210.99 1712.59,1210.99 1713.18,1210.99 1713.76,1210.99 1714.35,1210.99 1714.94,1210.99 1715.52,1210.99 1716.11,1210.99 1716.7,1210.99 1717.28,1210.99 1717.87,1210.99 1718.45,1210.99 1719.04,1210.99 1719.63,1210.99 1720.21,1210.99 1720.8,1210.99 1721.39,1210.99 1721.97,1210.99 1722.56,1210.99 1723.15,1210.99 1723.73,1210.99 1724.32,1210.99 1724.91,1210.99 1725.49,1210.99 1726.08,1210.99 1726.66,1210.99 1727.25,1210.99 1727.84,1210.99 1728.42,1210.99 1729.01,1210.99 1729.6,1210.99 1730.18,1210.99 1730.77,1210.99 1731.36,1210.99 1731.94,1210.99 1732.53,1210.99 1733.11,1210.99 1733.7,1210.99 1734.29,1210.99 1734.87,1210.99 1735.46,1210.99 1736.05,1210.99 1736.63,1210.99 1737.22,1210.99 1737.81,1210.99 1738.39,1210.99 1738.98,1210.99 1739.57,1210.99 1740.15,1210.99 1740.74,1210.99 1741.32,1210.99 1741.91,1210.99 1742.5,1210.99 1743.08,1210.99 1743.67,1210.99 1744.26,1210.99 1744.84,1210.99 1745.43,1210.99 1746.02,1210.99 1746.6,1210.99 1747.19,1210.99 1747.78,1210.99 1748.36,1210.99 1748.95,1210.99 1749.53,1210.99 1750.12,1210.99 1750.71,1210.99 1751.29,1210.99 1751.88,1210.99 1752.47,1210.99 1753.05,1210.99 1753.64,1210.99 1754.23,1210.99 1754.81,1210.99 1755.4,1210.99 1755.99,1210.99 1756.57,1210.99 1757.16,1210.99 1757.74,1210.99 1758.33,1210.99 1758.92,1210.99 1759.5,1210.99 1760.09,1210.99 1760.68,1210.99 1761.26,1210.99 1761.85,1210.99 1762.44,1210.99 1763.02,1210.99 1763.61,1210.99 1764.19,1210.99 1764.78,1210.99 1765.37,1210.99 1765.95,1210.99 1766.54,1210.99 1767.13,1210.99 1767.71,1210.99 1768.3,1210.99 1768.89,1210.99 1769.47,1210.99 1770.06,1210.99 1770.65,1210.99 1771.23,1210.99 1771.82,1210.99 1772.4,1210.99 1772.99,1210.99 1773.58,1210.99 1774.16,1210.99 1774.75,1210.99 1775.34,1210.99 1775.92,1210.99 1776.51,1210.99 1777.1,1210.99 1777.68,1210.99 1778.27,1210.99 1778.86,1210.99 1779.44,1210.99 1780.03,1210.99 1780.61,1210.99 1781.2,1210.99 1781.79,1210.99 1782.37,1210.99 1782.96,1210.99 1783.55,1210.99 1784.13,1210.99 1784.72,1210.99 1785.31,1210.99 1785.89,1210.99 1786.48,1210.99 1787.06,1210.99 1787.65,1210.99 1788.24,1210.99 1788.82,1210.99 1789.41,1210.99 1790,1210.99 1790.58,1210.99 1791.17,1210.99 1791.76,1210.99 1792.34,1210.99 1792.93,1210.99 1793.52,1210.99 1794.1,1210.99 1794.69,1210.99 1795.27,1210.99 1795.86,1210.99 1796.45,1210.99 1797.03,1210.99 1797.62,1210.99 1798.21,1210.99 1798.79,1210.99 1799.38,1210.99 1799.97,1210.99 1800.55,1210.99 1801.14,1210.99 1801.73,1210.99 1802.31,1210.99 1802.9,1210.99 1803.48,1210.99 1804.07,1210.99 1804.66,1210.99 1805.24,1210.99 1805.83,1210.99 1806.42,1210.99 1807,1210.99 1807.59,1210.99 1808.18,1210.99 1808.76,1210.99 1809.35,1210.99 1809.94,1210.99 1810.52,1210.99 1811.11,1210.99 1811.69,1210.99 1812.28,1210.99 1812.87,1210.99 1813.45,1210.99 1814.04,1210.99 1814.63,1210.99 1815.21,1210.99 1815.8,1210.99 1816.39,1210.99 1816.97,1210.99 1817.56,1210.99 1818.14,1210.99 1818.73,1210.99 1819.32,1210.99 1819.9,1210.99 1820.49,1210.99 1821.08,1210.99 1821.66,1210.99 1822.25,1210.99 1822.84,1210.99 1823.42,1210.99 1824.01,1210.99 1824.6,1210.99 1825.18,1210.99 1825.77,1210.99 1826.35,1210.99 1826.94,1210.99 1827.53,1210.99 1828.11,1210.99 1828.7,1210.99 1829.29,1210.99 1829.87,1210.99 1830.46,1210.99 1831.05,1210.99 1831.63,1210.99 1832.22,1210.99 1832.81,1210.99 1833.39,1210.99 1833.98,1210.99 1834.56,1210.99 1835.15,1210.99 1835.74,1210.99 1836.32,1210.99 1836.91,1210.99 1837.5,1210.99 1838.08,1210.99 1838.67,1210.99 1839.26,1210.99 1839.84,1210.99 1840.43,1210.99 1841.01,1210.99 1841.6,1210.99 1842.19,1210.99 1842.77,1210.99 1843.36,1210.99 1843.95,1210.99 1844.53,1210.99 1845.12,1210.99 1845.71,1210.99 1846.29,1210.99 1846.88,1210.99 1847.47,1210.99 1848.05,1210.99 1848.64,1210.99 1849.22,1210.99 1849.81,1210.99 1850.4,1210.99 1850.98,1210.99 1851.57,1210.99 1852.16,1210.99 1852.74,1210.99 1853.33,1210.99 1853.92,1210.99 1854.5,1210.99 1855.09,1210.99 1855.68,1210.99 1856.26,1210.99 1856.85,1210.99 1857.43,1210.99 1858.02,1210.99 1858.61,1210.99 1859.19,1210.99 1859.78,1210.99 1860.37,1210.99 1860.95,1210.99 1861.54,1210.99 1862.13,1210.99 1862.71,1210.99 1863.3,1210.99 1863.88,1210.99 1864.47,1210.99 1865.06,1210.99 1865.64,1210.99 1866.23,1210.99 1866.82,1210.99 1867.4,1210.99 1867.99,1210.99 1868.58,1210.99 1869.16,1210.99 1869.75,1210.99 1870.34,1210.99 1870.92,1210.99 1871.51,1210.99 1872.09,1210.99 1872.68,1210.99 1873.27,1210.99 1873.85,1210.99 1874.44,1210.99 1875.03,1210.99 1875.61,1210.99 1876.2,1210.99 1876.79,1210.99 1877.37,1210.99 1877.96,1210.99 1878.55,1210.99 1879.13,1210.99 1879.72,1210.99 1880.3,1210.99 1880.89,1210.99 1881.48,1210.99 1882.06,1210.99 1882.65,1210.99 1883.24,1210.99 1883.82,1210.99 1884.41,1210.99 1885,1210.99 1885.58,1210.99 1886.17,1210.99 1886.76,1210.99 1887.34,1210.99 1887.93,1210.99 1888.51,1210.99 1889.1,1210.99 1889.69,1210.99 1890.27,1210.99 1890.86,1210.99 1891.45,1210.99 1892.03,1210.99 1892.62,1210.99 1893.21,1210.99 1893.79,1210.99 1894.38,1210.99 1894.96,1210.99 1895.55,1210.99 1896.14,1210.99 1896.72,1210.99 1897.31,1210.99 1897.9,1210.99 1898.48,1210.99 1899.07,1210.99 1899.66,1210.99 1900.24,1210.99 1900.83,1210.99 1901.42,1210.99 1902,1210.99 1902.59,1210.99 1903.17,1210.99 1903.76,1210.99 1904.35,1210.99 1904.93,1210.99 1905.52,1210.99 1906.11,1210.99 1906.69,1210.99 1907.28,1210.99 1907.87,1210.99 1908.45,1210.99 1909.04,1210.99 1909.63,1210.99 1910.21,1210.99 1910.8,1210.99 1911.38,1210.99 1911.97,1210.99 1912.56,1210.99 1913.14,1210.99 1913.73,1210.99 1914.32,1210.99 1914.9,1210.99 1915.49,1210.99 1916.08,1210.99 1916.66,1210.99 1917.25,1210.99 1917.83,1210.99 1918.42,1210.99 1919.01,1210.99 1919.59,1210.99 1920.18,1210.99 1920.77,1210.99 1921.35,1210.99 1921.94,1210.99 1922.53,1210.99 1923.11,1210.99 1923.7,1210.99 1924.29,1210.99 1924.87,1210.99 1925.46,1210.99 1926.04,1210.99 1926.63,1210.99 1927.22,1210.99 1927.8,1210.99 1928.39,1210.99 1928.98,1210.99 1929.56,1210.99 1930.15,1210.99 1930.74,1210.99 1931.32,1210.99 1931.91,1210.99 1932.5,1210.99 1933.08,1210.99 1933.67,1210.99 1934.25,1210.99 1934.84,1210.99 1935.43,1210.99 1936.01,1210.99 1936.6,1210.99 1937.19,1210.99 1937.77,1210.99 1938.36,1210.99 1938.95,1210.99 1939.53,1210.99 1940.12,1210.99 1940.71,1210.99 1941.29,1210.99 1941.88,1210.99 1942.46,1210.99 1943.05,1210.99 1943.64,1210.99 1944.22,1210.99 1944.81,1210.99 1945.4,1210.99 1945.98,1210.99 1946.57,1210.99 1947.16,1210.99 1947.74,1210.99 1948.33,1210.99 1948.91,1210.99 1949.5,1210.99 1950.09,1210.99 1950.67,1210.99 1951.26,1210.99 1951.85,1210.99 1952.43,1210.99 1953.02,1210.99 1953.61,1210.99 1954.19,1210.99 1954.78,1210.99 1955.37,1210.99 1955.95,1210.99 1956.54,1210.99 1957.12,1210.99 1957.71,1210.99 1958.3,1210.99 1958.88,1210.99 1959.47,1210.99 1960.06,1210.99 1960.64,1210.99 1961.23,1210.99 1961.82,1210.99 1962.4,1210.99 1962.99,1210.99 1963.58,1210.99 1964.16,1210.99 1964.75,1210.99 1965.33,1210.99 1965.92,1210.99 1966.51,1210.99 1967.09,1210.99 1967.68,1210.99 1968.27,1210.99 1968.85,1210.99 1969.44,1210.99 1970.03,1210.99 1970.61,1210.99 1971.2,1210.99 1971.78,1210.99 1972.37,1210.99 1972.96,1210.99 1973.54,1210.99 1974.13,1210.99 1974.72,1210.99 1975.3,1210.99 1975.89,1210.99 1976.48,1210.99 1977.06,1210.99 1977.65,1210.99 1978.24,1210.99 1978.82,1210.99 1979.41,1210.99 1979.99,1210.99 1980.58,1210.99 1981.17,1210.99 1981.75,1210.99 1982.34,1210.99 1982.93,1210.99 1983.51,1210.99 1984.1,1210.99 1984.69,1210.99 1985.27,1210.99 1985.86,1210.99 1986.45,1210.99 1987.03,1210.99 1987.62,1210.99 1988.2,1210.99 1988.79,1210.99 1989.38,1210.99 1989.96,1210.99 1990.55,1210.99 1991.14,1210.99 1991.72,1210.99 1992.31,1210.99 1992.9,1210.99 1993.48,1210.99 1994.07,1210.99 1994.65,1210.99 1995.24,1210.99 1995.83,1210.99 1996.41,1210.99 1997,1210.99 1997.59,1210.99 1998.17,1210.99 1998.76,1210.99 1999.35,1210.99 1999.93,1210.99 2000.52,1210.99 2001.11,1210.99 2001.69,1210.99 2002.28,1210.99 2002.86,1210.99 2003.45,1210.99 2004.04,1210.99 2004.62,1210.99 2005.21,1210.99 2005.8,1210.99 2006.38,1210.99 2006.97,1210.99 2007.56,1210.99 2008.14,1210.99 2008.73,1210.99 2009.32,1210.99 2009.9,1210.99 2010.49,1210.99 2011.07,1210.99 2011.66,1210.99 2012.25,1210.99 2012.83,1210.99 2013.42,1210.99 2014.01,1210.99 2014.59,1210.99 2015.18,1210.99 2015.77,1210.99 2016.35,1210.99 2016.94,1210.99 2017.53,1210.99 2018.11,1210.99 2018.7,1210.99 2019.28,1210.99 2019.87,1210.99 2020.46,1210.99 2021.04,1210.99 2021.63,1210.99 2022.22,1210.99 2022.8,1210.99 2023.39,1210.99 2023.98,1210.99 2024.56,1210.99 2025.15,1210.99 2025.73,1210.99 2026.32,1210.99 2026.91,1210.99 2027.49,1210.99 2028.08,1210.99 2028.67,1210.99 2029.25,1210.99 2029.84,1210.99 2030.43,1210.99 2031.01,1210.99 2031.6,1210.99 2032.19,1210.99 2032.77,1210.99 2033.36,1210.99 2033.94,1210.99 2034.53,1210.99 2035.12,1210.99 2035.7,1210.99 2036.29,1210.99 2036.88,1210.99 2037.46,1210.99 2038.05,1210.99 2038.64,1210.99 2039.22,1210.99 2039.81,1210.99 2040.4,1210.99 2040.98,1210.99 2041.57,1210.99 2042.15,1210.99 2042.74,1210.99 2043.33,1210.99 2043.91,1210.99 2044.5,1210.99 2045.09,1210.99 2045.67,1210.99 2046.26,1210.99 2046.85,1210.99 2047.43,1210.99 2048.02,1210.99 2048.6,1210.99 2049.19,1210.99 2049.78,1210.99 2050.36,1210.99 2050.95,1210.99 2051.54,1210.99 2052.12,1210.99 2052.71,1210.99 2053.3,1210.99 2053.88,1210.99 2054.47,1210.99 2055.06,1210.99 2055.64,1210.99 2056.23,1210.99 2056.81,1210.99 2057.4,1210.99 2057.99,1210.99 2058.57,1210.99 2059.16,1210.99 2059.75,1210.99 2060.33,1210.99 2060.92,1210.99 2061.51,1210.99 2062.09,1210.99 2062.68,1210.99 2063.27,1210.99 2063.85,1210.99 2064.44,1210.99 2065.02,1210.99 2065.61,1210.99 2066.2,1210.99 2066.78,1210.99 2067.37,1210.99 2067.96,1210.99 2068.54,1210.99 2069.13,1210.99 2069.72,1210.99 2070.3,1210.99 2070.89,1210.99 2071.48,1210.99 2072.06,1210.99 2072.65,1210.99 2073.23,1210.99 2073.82,1210.99 2074.41,1210.99 2074.99,1210.99 2075.58,1210.99 2076.17,1210.99 2076.75,1210.99 2077.34,1210.99 2077.93,1210.99 2078.51,1210.99 2079.1,1210.99 2079.68,1210.99 2080.27,1210.99 2080.86,1210.99 2081.44,1210.99 2082.03,1210.99 2082.62,1210.99 2083.2,1210.99 2083.79,1210.99 2084.38,1210.99 2084.96,1210.99 2085.55,1210.99 2086.14,1210.99 2086.72,1210.99 2087.31,1210.99 2087.89,1210.99 2088.48,1210.99 2089.07,1210.99 2089.65,1210.99 2090.24,1210.99 2090.83,1210.99 2091.41,1210.99 2092,1210.99 2092.59,1210.99 2093.17,1210.99 2093.76,1210.99 2094.35,1210.99 2094.93,1210.99 2095.52,1210.99 2096.1,1210.99 2096.69,1210.99 2097.28,1210.99 2097.86,1210.99 2098.45,1210.99 2099.04,1210.99 2099.62,1210.99 2100.21,1210.99 2100.8,1210.99 2101.38,1210.99 2101.97,1210.99 2102.55,1210.99 2103.14,1210.99 2103.73,1210.99 2104.31,1210.99 2104.9,1210.99 2105.49,1210.99 2106.07,1210.99 2106.66,1210.99 2107.25,1210.99 2107.83,1210.99 2108.42,1210.99 2109.01,1210.99 2109.59,1210.99 2110.18,1210.99 2110.76,1210.99 2111.35,1210.99 2111.94,1210.99 2112.52,1210.99 2113.11,1210.99 2113.7,1210.99 2114.28,1210.99 2114.87,1210.99 2115.46,1210.99 2116.04,1210.99 2116.63,1210.99 2117.22,1210.99 2117.8,1210.99 2118.39,1210.99 2118.97,1210.99 2119.56,1210.99 2120.15,1210.99 2120.73,1210.99 2121.32,1210.99 2121.91,1210.99 2122.49,1210.99 2123.08,1210.99 2123.67,1210.99 2124.25,1210.99 2124.84,1210.99 2125.42,1210.99 2126.01,1210.99 2126.6,1210.99 2127.18,1210.99 2127.77,1210.99 2128.36,1210.99 2128.94,1210.99 2129.53,1210.99 2130.12,1210.99 2130.7,1210.99 2131.29,1210.99 2131.88,1210.99 2132.46,1210.99 2133.05,1210.99 2133.63,1210.99 2134.22,1210.99 2134.81,1210.99 2135.39,1210.99 2135.98,1210.99 2136.57,1210.99 2137.15,1210.99 2137.74,1210.99 2138.33,1210.99 2138.91,1210.99 2139.5,1210.99 2140.09,1210.99 2140.67,1210.99 2141.26,1210.99 2141.84,1210.99 2142.43,1210.99 2143.02,1210.99 2143.6,1210.99 2144.19,1210.99 2144.78,1210.99 2145.36,1210.99 2145.95,1210.99 2146.54,1210.99 2147.12,1210.99 2147.71,1210.99 2148.3,1210.99 2148.88,1210.99 2149.47,1210.99 2150.05,1210.99 2150.64,1210.99 2151.23,1210.99 2151.81,1210.99 2152.4,1210.99 2152.99,1210.99 2153.57,1210.99 2154.16,1210.99 2154.75,1210.99 2155.33,1210.99 2155.92,1210.99 2156.5,1210.99 2157.09,1210.99 2157.68,1210.99 2158.26,1210.99 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.01,1194.77 1399.65,899.083 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.79 985.439,1194.77 2158.26,1194.77 2158.26,1226.79 985.439,1226.79 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip143\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip143)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4908.13 163.792,-5920.59 164.351,-6844.87 164.91,-7710.95 165.469,-8498.31 166.029,-9192.04 166.588,-8729.87 167.147,-9369.36 167.706,-9945.35 168.266,-10462 168.825,-10912.1 169.384,-11322 169.943,-11683.3 170.503,-11999.3 171.062,-12272.8 171.621,-12487.2 172.18,-12675.8 172.74,-12840.3 173.299,-12415.3 173.858,-12515.3 174.417,-12147 174.977,-11789.8 175.536,-11872.7 176.095,-11195.4 176.655,-11236.6 177.214,-11265.6 177.773,-10677.6 178.332,-10667.8 178.892,-10642.6 179.451,-10119.6 180.01,-10073.5 180.569,-10020.9 181.129,-9947.94 181.688,-9873.16 182.247,-9611.58 182.806,-9530.43 183.366,-9283.4 183.925,-9176.66 184.484,-8921.42 185.043,-8818.31 185.603,-8701.56 186.162,-8576 186.721,-8329.71 187.28,-8080.19 187.84,-7634.28 188.399,-7518.49 188.958,-7209.86 189.517,-7005.77 190.077,-6724.77 190.636,-6622.17 191.195,-6514.47 191.754,-6319.55 192.314,-5975.9 192.873,-5855.12 193.432,-5615.36 193.991,-5322.85 194.551,-5150.93 195.11,-5046.8 195.669,-4834.05 196.228,-4736.47 196.788,-4640.22 197.347,-4442.45 197.906,-4294.29 198.465,-4150.58 199.025,-4061.78 199.584,-3834.98 200.143,-3617.3 200.702,-3372.91 201.262,-3217.58 201.821,-3146.65 202.38,-3031.83 202.939,-2887.62 203.499,-2746.27 204.058,-2569.71 204.617,-2436.26 205.176,-2346.32 205.736,-2288.56 206.295,-2197.2 206.854,-2169.27 207.413,-2048.86 207.973,-1995.9 208.532,-1908.98 209.091,-1797.08 209.65,-1687.21 210.21,-1604.94 210.769,-1498.51 211.328,-1422.66 211.887,-1376.49 212.447,-1274.82 213.006,-1149.12 213.565,-1080.97 214.124,-993.088 214.684,-953.044 215.243,-837.487 215.802,-722.477 216.361,-638.112 216.921,-582.672 217.48,-526.872 218.039,-524.405 218.598,-519.237 219.158,-415.855 219.717,-337.99 220.276,-240.079 220.835,-146.154 221.395,-127.374 221.954,-102.797 222.513,-38.1611 223.072,21.8753 223.632,82.4134 224.191,121.112 224.75,199.282 225.309,227.884 225.869,200.286 226.428,216.772 226.987,251.392 227.546,245.434 228.106,282.34 228.665,337.41 229.224,324.71 229.783,338.024 230.343,388.051 230.902,442.9 231.461,472.067 232.02,501.231 232.58,551.69 233.139,616.301 233.698,619.151 234.257,680.364 234.817,705.139 235.376,745.041 235.935,744.357 236.494,747.107 237.054,749.311 237.613,749.483 238.172,753.444 238.731,766.747 239.291,770.773 239.85,778.364 240.409,836.763 240.968,868.582 241.528,923.995 242.087,938.5 242.646,954.263 243.205,949.906 243.765,949.628 244.324,1000.68 244.883,994.132 245.442,987.858 246.002,999.169 246.561,1011.22 247.12,1008.74 247.679,1039.11 248.239,1080.07 248.798,1090.66 249.357,1116.88 249.916,1142.18 250.476,1146.96 251.035,1137.38 251.594,1146.91 252.153,1117.55 252.713,1140.05 253.272,1131.12 253.831,1068.83 254.39,1061.32 254.95,1040.08 255.509,1052.05 256.068,1045.3 256.627,1074.27 257.187,1066.63 257.746,1045.2 258.305,1040.47 258.864,1055.42 259.424,1066.17 259.983,1062.2 260.542,1040.13 261.101,1054.76 261.661,1050.43 262.22,1014.68 262.779,1045.45 263.338,1037.9 263.898,1049.68 264.457,1061.53 265.016,1057.61 265.575,1072.73 266.135,1100.09 266.694,1108.22 267.253,1098.89 267.812,1093.12 268.372,1153.88 268.931,1163.88 269.49,1170.66 270.049,1176.42 270.609,1129.52 271.168,1170 271.727,1142.49 272.286,1136.36 272.846,1196.18 273.405,1183.11 273.964,1204.94 274.523,1222.97 275.083,1212.25 275.642,1198.23 276.201,1168.6 276.76,1156.64 277.32,1163.14 277.879,1154.17 278.438,1158.81 278.997,1130.43 279.557,1153.85 280.116,1145.37 280.675,1102.98 281.234,1079.53 281.794,1086.3 282.353,1093.6 282.912,1116.96 283.471,1107.14 284.031,1096.79 284.59,1057.04 285.149,1102.17 285.708,1143.71 286.268,1133.83 286.827,1126.97 287.386,1134.92 287.945,1093.34 288.505,1097.87 289.064,1074.4 289.623,1069.2 290.182,1095.21 290.742,1071.65 291.301,1066.17 291.86,1040.9 292.419,1033.42 292.979,995.179 293.538,1025.56 294.097,1035.08 294.656,1030.66 295.216,1041.42 295.775,1019.28 296.334,1031.44 296.893,1079.65 297.453,1085.78 298.012,1090.41 298.571,1079.79 299.13,1106.43 299.69,1111 300.249,1119.39 300.808,1125.47 301.368,1125.51 301.927,1115.1 302.486,1089.07 303.045,1096.11 303.605,1071.12 304.164,1059.64 304.723,1050.52 305.282,1043.67 305.842,1000.71 306.401,944.806 306.96,940.973 307.519,1004.5 308.079,1002.25 308.638,1030.92 309.197,1009.19 309.756,1019.52 310.316,994.944 310.875,1023.89 311.434,1015.2 311.993,1056.72 312.553,1014.48 313.112,1021.91 313.671,1034.12 314.23,1060.88 314.79,1066.54 315.349,1084.04 315.908,1077.21 316.467,1054.58 317.027,1047.55 317.586,1054.12 318.145,1048.75 318.704,1035.87 319.264,978.974 319.823,973.792 320.382,971.008 320.941,976.955 321.501,971.631 322.06,931.156 322.619,927.346 323.178,911.267 323.738,924.036 324.297,937.977 324.856,921.75 325.415,934.58 325.975,949.008 326.534,926.3 327.093,942.135 327.652,950.607 328.212,926.085 328.771,911.71 329.33,943.445 329.889,904.873 330.449,922.009 331.008,920.413 331.567,915.318 332.126,946.423 332.686,938.953 333.245,936.189 333.804,884.28 334.363,897.989 334.923,896.762 335.482,860.358 336.041,874.299 336.6,855.871 337.16,854.231 337.719,854.207 338.278,870.137 338.837,883.862 339.397,916.096 339.956,895.006 340.515,926.172 341.074,938.663 341.634,954.121 342.193,969.651 342.752,980.333 343.311,938.992 343.871,948.774 344.43,946.012 344.989,925.367 345.548,937.636 346.108,982.156 346.667,977.111 347.226,986.271 347.785,978.667 348.345,968.665 348.904,963.246 349.463,974.527 350.022,984.089 350.582,992.565 351.141,986.232 351.7,946.707 352.259,924.62 352.819,925.989 353.378,904.003 353.937,880.544 354.496,895.304 355.056,925.211 355.615,884.958 356.174,898.086 356.733,878.852 357.293,828.526 357.852,828.18 358.411,812.455 358.97,846.165 359.53,847.355 360.089,847.11 360.648,861.244 361.207,875.928 361.767,908.036 362.326,886.881 362.885,884.696 363.444,898.384 364.004,925.467 364.563,903.333 365.122,880.933 365.681,877.09 366.241,891.206 366.8,904.752 367.359,900.491 367.918,881.647 368.478,876.655 369.037,905.945 369.596,899.056 370.155,909.549 370.715,918.317 371.274,929.16 371.833,907.145 372.392,906.375 372.952,966.529 373.511,940.612 374.07,882.143 374.629,910.606 375.189,922.617 375.748,864.904 376.307,873.626 376.866,837.481 377.426,851.784 377.985,834.641 378.544,834.355 379.103,803.656 379.663,852.753 380.222,835.729 380.781,833.5 381.34,782.445 381.9,801.527 382.459,800.975 383.018,771.796 383.577,821.152 384.137,805.373 384.696,820.761 385.255,803.578 385.814,802.873 386.374,816.88 386.933,830.151 387.492,812.298 388.051,793.229 388.611,827.121 389.17,764.151 389.729,781.022 390.288,799.013 390.848,830.136 391.407,832.476 391.966,860.618 392.525,874.364 393.085,839.434 393.644,839.373 394.203,803.879 394.762,786.694 395.322,800.445 395.881,865.4 396.44,858.646 396.999,870.608 397.559,881.485 398.118,821.337 398.677,818.29 399.236,797.234 399.796,778.941 400.355,777.358 400.914,725.219 401.473,695.611 402.033,700.963 402.592,689.333 403.151,709.905 403.71,742.369 404.27,723.747 404.829,743.759 405.388,729.512 405.947,766.459 406.507,748.635 407.066,767.351 407.625,767.746 408.184,765.479 408.744,750.034 409.303,733.751 409.862,751.88 410.421,769.452 410.981,772.243 411.54,773.362 412.099,773.554 412.658,808.554 413.218,806.203 413.777,802.251 414.336,803.109 414.895,816.264 415.455,834.484 416.014,833.469 416.573,878.068 417.132,869.814 417.692,877.193 418.251,887.933 418.81,898.689 419.369,875.538 419.929,887.173 420.488,865.668 421.047,862.608 421.606,827.124 422.166,840.598 422.725,839.411 423.284,868.387 423.843,880.131 424.403,887.769 424.962,880.737 425.521,907.146 426.08,899.641 426.64,893.146 427.199,905.824 427.758,895.977 428.318,872.217 428.877,849.216 429.436,865.129 429.995,878.497 430.555,859.173 431.114,871.705 431.673,880.634 432.232,874.057 432.792,881.544 433.351,892.533 433.91,885.676 434.469,862.843 435.029,840.281 435.588,854.75 436.147,834.208 436.706,862.164 437.266,857.903 437.825,871.474 438.384,845.873 438.943,841.163 439.503,870.352 440.062,882.871 440.621,874.339 441.18,814.686 441.74,746.933 442.299,715.072 442.858,699.862 443.417,717.771 443.977,720.759 444.536,707.256 445.095,692.508 445.654,680.409 446.214,685.421 446.773,705.28 447.332,724.585 447.891,744.735 448.451,729.278 449.01,729.142 449.569,716.216 450.128,783.165 450.688,780.061 451.247,777.195 451.806,805.916 452.365,822.218 452.925,802.906 453.484,832.109 454.043,794.782 454.602,795.861 455.162,778.045 455.721,812.91 456.28,811.41 456.839,796.326 457.399,793.426 457.958,771.924 458.517,753.011 459.076,751.833 459.636,755.257 460.195,725.441 460.754,762.66 461.313,778.387 461.873,776.306 462.432,774.65 462.991,755.15 463.55,771.232 464.11,768.857 464.669,763.904 465.228,761.875 465.787,710.841 466.347,711.749 466.906,732.71 467.465,735.487 468.024,769.422 468.584,735.467 469.143,738.151 469.702,704.028 470.261,740.126 470.821,690.443 471.38,694.702 471.939,714.154 472.498,717.428 473.058,734.544 473.617,736.656 474.176,754.177 474.735,737.857 475.295,742.475 475.854,724.498 476.413,681.126 476.972,718.703 477.532,703.318 478.091,738.157 478.65,738.101 479.209,739.339 479.769,740.449 480.328,742.645 480.887,744.351 481.446,745.494 482.006,728.586 482.565,715.684 483.124,732.842 483.683,737.509 484.243,772.677 484.802,754.616 485.361,753.822 485.92,769.613 486.48,752.579 487.039,784.11 487.598,750.365 488.157,782.09 488.717,780.439 489.276,811.366 489.835,760.404 490.394,791.626 490.954,806.432 491.513,802.506 492.072,798.664 492.631,794.999 493.191,778.403 493.75,760.223 494.309,740.774 494.868,693.636 495.428,697.881 495.987,718.407 496.546,718.284 497.105,734.792 497.665,734.936 498.224,750.824 498.783,750.615 499.342,749.251 499.902,779.506 500.461,792.26 501.02,788.866 501.579,785.337 502.139,783.237 502.698,798.916 503.257,796.281 503.816,809.598 504.376,803.054 504.935,813.713 505.494,810.454 506.053,774.579 506.613,786.558 507.172,769.476 507.731,748.152 508.29,765.34 508.85,767.033 509.409,783.416 509.968,764.385 510.527,780.909 511.087,778.504 511.646,792.213 512.205,773.666 512.764,818.209 513.324,780.416 513.883,778.329 514.442,757.977 515.001,788.434 515.561,786.934 516.12,798.322 516.679,809.291 517.238,802.411 517.798,781.572 518.357,763.882 518.916,763.051 519.475,791.765 520.035,770.509 520.594,770.186 521.153,752.265 521.712,782.997 522.272,766.999 522.831,745.222 523.39,758.962 523.949,771.021 524.509,737.317 525.068,738.659 525.627,754.357 526.186,706.015 526.746,706.646 527.305,709.325 527.864,729.055 528.423,759.53 528.983,740.728 529.542,741.109 530.101,760.156 530.66,756.725 531.22,739.187 531.779,703.964 532.338,722.564 532.897,719.732 533.457,752.165 534.016,750.121 534.575,764.497 535.134,745.443 535.694,744.801 536.253,726.747 536.812,709.902 537.371,693.624 537.931,694.451 538.49,677.33 539.049,683.179 539.608,682.048 540.168,654.712 540.727,724.708 541.286,694.612 541.845,680.98 542.405,715.111 542.964,732.944 543.523,731.198 544.082,761.029 544.642,740.552 545.201,710.544 545.76,758.192 546.319,721.423 546.879,705.613 547.438,722.573 547.997,693.278 548.556,681.141 549.116,681.862 549.675,667.368 550.234,635.512 550.793,591.454 551.353,612.399 551.912,632.708 552.471,669.546 553.031,672.622 553.59,672.338 554.149,690.139 554.708,743.166 555.268,729.445 555.827,746.371 556.386,779.526 556.945,792.321 557.505,773.755 558.064,783.035 558.623,809.663 559.182,769.847 559.742,736.509 560.301,722.147 560.86,690.06 561.419,693.378 561.979,696.739 562.538,699.331 563.097,714.348 563.656,710.655 564.216,711.88 564.775,728.007 565.334,757.533 565.893,772.877 566.453,769.076 567.012,781.043 567.571,793.418 568.13,821.109 568.69,827.219 569.249,804.01 569.808,810.867 570.367,822.654 570.927,815.759 571.486,811.592 572.045,772.096 572.604,750.222 573.164,765.904 573.723,749.455 574.282,765.595 574.841,796.353 575.401,773.997 575.96,803.43 576.519,799.191 577.078,779.223 577.638,712.702 578.197,712.371 578.756,695.912 579.315,665.99 579.875,687.613 580.434,671.4 580.993,673.278 581.552,691.788 582.112,694.535 582.671,695.533 583.23,728.772 583.789,651.662 584.349,689.262 584.908,637.387 585.467,643.016 586.026,679.803 586.586,699.162 587.145,667.254 587.704,637.091 588.263,654.966 588.823,689.266 589.382,691.416 589.941,708.111 590.5,740.528 591.06,753.845 591.619,752.988 592.178,768.703 592.737,780.92 593.297,743.88 593.856,707.911 594.415,723.453 594.974,723.601 595.534,740.572 596.093,754.855 596.652,756.254 597.211,736.196 597.771,733.9 598.33,745.957 598.889,759.556 599.448,784.346 600.008,793.634 600.567,786.293 601.126,782.017 601.685,763.579 602.245,776.814 602.804,786.327 603.363,804.018 603.922,779.965 604.482,758.414 605.041,755.521 605.6,720.134 606.159,736.17 606.719,736.803 607.278,717.482 607.837,714.271 608.396,682.81 608.956,666.924 609.515,689.491 610.074,690.147 610.633,661.185 611.193,618.609 611.752,591.11 612.311,600.426 612.87,604.129 613.43,627.597 613.989,650.292 614.548,639.194 615.107,642.844 615.667,627.37 616.226,630.678 616.785,619.191 617.344,624.273 617.904,611.183 618.463,596.267 619.022,604.378 619.581,624.69 620.141,648.315 620.7,651.929 621.259,655.564 621.818,658.249 622.378,625.719 622.937,643.047 623.496,644.094 624.055,663.383 624.615,681.538 625.174,668.052 625.733,657.482 626.292,693.539 626.852,727.32 627.411,711.709 627.97,698.339 628.529,684.527 629.089,666.531 629.648,700.521 630.207,719.037 630.766,734.052 631.326,729.721 631.885,744.831 632.444,723.96 633.003,740.624 633.563,723.132 634.122,707.036 634.681,705.225 635.24,690.219 635.8,706.043 636.359,672.159 636.918,708.286 637.477,712.189 638.037,696.544 638.596,679.612 639.155,695.822 639.714,680.251 640.274,729.643 640.833,711.611 641.392,697.332 641.951,695.738 642.511,698.956 643.07,717.659 643.629,732.264 644.188,745.351 644.748,760.401 645.307,773.081 645.866,783.908 646.425,762.103 646.985,803.167 647.544,814.649 648.103,808.132 648.662,802.184 649.222,811.694 649.781,808.621 650.34,800.954 650.899,796.021 651.459,790.976 652.018,815.176 652.577,827.464 653.136,833.142 653.696,808.592 654.255,787.763 654.814,750.553 655.373,760.372 655.933,759.682 656.492,774.244 657.051,774.507 657.61,798.137 658.17,762.232 658.729,741.114 659.288,737.492 659.847,766.241 660.407,726.657 660.966,724.869 661.525,724.671 662.084,687.676 662.644,638.211 663.203,610.652 663.762,534.578 664.321,525.788 664.881,536.116 665.44,529.166 665.999,538.493 666.558,564.673 667.118,589.418 667.677,593.112 668.236,583.543 668.795,593.825 669.355,631.694 669.914,634.66 670.473,637.045 671.032,639.795 671.592,645.5 672.151,663.428 672.71,666.76 673.269,651.895 673.829,656.813 674.388,679.342 674.947,711.343 675.506,694.454 676.066,678.34 676.625,679.582 677.184,680.4 677.743,694.699 678.303,691.998 678.862,694.567 679.421,695.454 679.981,682.164 680.54,698.066 681.099,700.206 681.658,699.167 682.218,730.492 682.777,759.497 683.336,756.76 683.895,734.239 684.455,731.642 685.014,741.78 685.573,722.896 686.132,705.768 686.692,686.51 687.251,722.875 687.81,672.897 688.369,675.074 688.929,676.035 689.488,676.073 690.047,661.776 690.606,667.01 691.166,681.947 691.725,681.409 692.284,684.209 692.843,703.154 693.403,751.721 693.962,764.222 694.521,762.291 695.08,727.016 695.64,716.251 696.199,699.36 696.758,682.359 697.317,683.366 697.877,684.642 698.436,717.724 698.995,683.257 699.554,683.338 700.114,700.077 700.673,719.628 701.232,735.293 701.791,731.74 702.351,728.777 702.91,728.912 703.469,760.847 704.028,759.95 704.588,785.096 705.147,764.488 705.706,744.144 706.265,707.578 706.825,676.542 707.384,693.036 707.943,727.463 708.502,742.977 709.062,755.997 709.621,735.293 710.18,748.723 710.739,774.203 711.299,750.167 711.858,746.892 712.417,758.652 712.976,740.429 713.536,737.746 714.095,718.935 714.654,719.6 715.213,686.188 715.773,687.746 716.332,688.072 716.891,704.86 717.45,723.211 718.01,751.159 718.569,764.637 719.128,773.826 719.687,785.507 720.247,800.985 720.806,748.267 721.365,712.288 721.924,680.837 722.484,681.89 723.043,666.297 723.602,634.205 724.161,639.319 724.721,659.376 725.28,644.101 725.839,663.958 726.398,677.719 726.958,646.443 727.517,649.468 728.076,651.381 728.635,636.252 729.195,637.14 729.754,620.3 730.313,590.933 730.872,628.678 731.432,635.779 731.991,639.15 732.55,627.918 733.109,629.232 733.669,647.038 734.228,632.446 734.787,632.452 735.346,587.052 735.906,607.27 736.465,616.856 737.024,623.568 737.583,611.129 738.143,611.947 738.702,613.094 739.261,619.337 739.82,659.597 740.38,678.604 740.939,696.411 741.498,695.095 742.057,693.318 742.617,693.513 743.176,677.017 743.735,681.019 744.294,699.697 744.854,717.395 745.413,666.766 745.972,685.925 746.531,688.379 747.091,673.463 747.65,678.3 748.209,696.544 748.768,681.505 749.328,681.682 749.887,681.364 750.446,666.582 751.005,699.343 751.565,698.014 752.124,697.535 752.683,713.355 753.242,697.247 753.802,694.828 754.361,706.144 754.92,721.632 755.479,735.622 756.039,714.74 756.598,725.527 757.157,707.939 757.716,706.819 758.276,702.155 758.835,700.811 759.394,686.124 759.953,719.071 760.513,717.702 761.072,699.788 761.631,700.357 762.19,665.98 762.75,650.326 763.309,652.782 763.868,672.166 764.427,673.368 764.987,675.3 765.546,678.18 766.105,676.917 766.664,661.831 767.224,679.197 767.783,694.693 768.342,743.767 768.901,739.499 769.461,753.986 770.02,766.101 770.579,745.445 771.138,744.181 771.698,745.053 772.257,755.863 772.816,755.167 773.375,734.223 773.935,763.725 774.494,727.826 775.053,709.045 775.612,724.496 776.172,737.213 776.731,736.617 777.29,703.562 777.849,718.124 778.409,703.265 778.968,682.571 779.527,697.119 780.086,695.647 780.646,693.616 781.205,676.903 781.764,626.762 782.323,648.443 782.883,698.967 783.442,714.948 784.001,715.217 784.56,745.715 785.12,770.922 785.679,781.251 786.238,788.222 786.797,767.109 787.357,749.988 787.916,747.935 788.475,743.39 789.034,756.682 789.594,786.423 790.153,831.573 790.712,841.377 791.271,786.158 791.831,815.967 792.39,810.221 792.949,803.282 793.508,812.508 794.068,806.676 794.627,800.063 795.186,793.58 795.745,786.76 796.305,749.978 796.864,746.809 797.423,741.843 797.982,721.915 798.542,737.044 799.101,735.512 799.66,701.982 800.219,685.839 800.779,700.846 801.338,701.204 801.897,687.746 802.456,688.834 803.016,659.137 803.575,664.015 804.134,666.873 804.693,686.481 805.253,685.813 805.812,703.097 806.371,716.454 806.931,681.852 807.49,682.459 808.049,682.073 808.608,668.678 809.168,651.915 809.727,656.984 810.286,643.025 810.845,596.19 811.405,564.63 811.964,570.876 812.523,561.336 813.082,551.99 813.642,562.726 814.201,552.746 814.76,559.079 815.319,567.939 815.879,577.78 816.438,584.511 816.997,574.474 817.556,578.282 818.116,571.645 818.675,593.141 819.234,615.344 819.793,636.144 820.353,625.189 820.912,626.723 821.471,628.903 822.03,633.015 822.59,652.243 823.149,656.892 823.708,691.098 824.267,675.138 824.827,659.311 825.386,644.57 825.945,647.386 826.504,680.403 827.064,681.012 827.623,731.862 828.182,746.084 828.741,737.739 829.301,733.472 829.86,702.535 830.419,701.902 830.978,719 831.538,737.917 832.097,768.027 832.656,783.286 833.215,777.696 833.775,776.94 834.334,757.34 834.893,754.334 835.452,731.844 836.012,727.035 836.571,742.793 837.13,742.882 837.689,721.278 838.249,767.633 838.808,727.98 839.367,712.169 839.926,694.831 840.486,690.957 841.045,688.976 841.604,690.14 842.163,706.693 842.723,705.148 843.282,706.361 843.841,689.338 844.4,702.657 844.96,717.648 845.519,732.938 846.078,729.732 846.637,730.06 847.197,741.602 847.756,771.224 848.315,798.053 848.874,792.276 849.434,819.205 849.993,795.006 850.552,745.653 851.111,726.034 851.671,709.179 852.23,707.272 852.789,705.373 853.348,689.657 853.908,675.013 854.467,706.062 855.026,706.804 855.585,720.711 856.145,712.886 856.704,711.331 857.263,725.994 857.822,727.176 858.382,692.968 858.941,693.505 859.5,724.906 860.059,743.206 860.619,772.286 861.178,752.515 861.737,750.817 862.296,731.232 862.856,747.399 863.415,743.421 863.974,755.507 864.533,751.774 865.093,733.338 865.652,712.499 866.211,706.987 866.77,675.146 867.33,674.09 867.889,656.967 868.448,659.955 869.007,660.246 869.567,643.741 870.126,612.508 870.685,650.514 871.244,648.973 871.804,697.814 872.363,702.644 872.922,719.836 873.481,717.281 874.041,734.698 874.6,780.244 875.159,761.9 875.718,772.813 876.278,751.322 876.837,751.598 877.396,718.361 877.955,750.008 878.515,746.946 879.074,778.801 879.633,755.875 880.192,732.349 880.752,727.911 881.311,721.924 881.87,785.985 882.429,748.751 882.989,759.333 883.548,790.606 884.107,803.079 884.666,796.593 885.226,775.852 885.785,771.165 886.344,736.382 886.903,736.209 887.463,716.001 888.022,717.142 888.581,712.625 889.14,710.669 889.7,693.493 890.259,740.363 890.818,737.955 891.377,738.274 891.937,721.242 892.496,701.653 893.055,663.915 893.614,663.618 894.174,648.859 894.733,669.169 895.292,687.45 895.851,686.289 896.411,673.224 896.97,685.334 897.529,700.288 898.088,698.773 898.648,715.993 899.207,713.621 899.766,678.137 900.325,709.648 900.885,724.809 901.444,719.734 902.003,733.538 902.562,717.652 903.122,683.731 903.681,685.485 904.24,667.694 904.799,666.552 905.359,670.234 905.918,678.159 906.477,677.847 907.036,659.884 907.596,662.785 908.155,648.202 908.714,665.421 909.273,632.332 909.833,634.88 910.392,606.179 910.951,610.655 911.51,633.148 912.07,653.196 912.629,657.287 913.188,645.477 913.747,619.416 914.307,622.78 914.866,577.007 915.425,583.112 915.984,586.683 916.544,570.396 917.103,593.396 917.662,567.93 918.221,575.717 918.781,583.156 919.34,604.685 919.899,626.943 920.458,634.024 921.018,639.501 921.577,642.591 922.136,644.963 922.695,646.305 923.255,698.609 923.814,699.183 924.373,681.803 924.932,629.56 925.492,651.202 926.051,636.751 926.61,639.904 927.169,605.315 927.729,572.953 928.288,580.422 928.847,598.163 929.406,605.89 929.966,628.159 930.525,630.657 931.084,616.16 931.644,618.899 932.203,654.109 932.762,675.299 933.321,657.708 933.881,658.216 934.44,676.764 934.999,713.229 935.558,712.85 936.118,758.892 936.677,754.482 937.236,748.352 937.795,758.01 938.355,755.072 938.914,733.03 939.473,747.007 940.032,726.827 940.592,725.974 941.151,740.058 941.71,720.18 942.269,717.869 942.829,714.574 943.388,730.65 943.947,728.461 944.506,713.159 945.066,693.382 945.625,725.566 946.184,753.366 946.743,749.44 947.303,777.842 947.862,755.468 948.421,767.15 948.98,766.093 949.54,747.644 950.099,714.552 950.658,677.86 951.217,628.32 951.777,647.52 952.336,647.274 952.895,651.154 953.454,625.07 954.014,579.203 954.573,604.594 955.132,593.274 955.691,595.16 956.251,629.983 956.81,650.455 957.369,666.168 957.928,615.721 958.488,617.834 959.047,624.903 959.606,630.964 960.165,621.532 960.725,624.462 961.284,612.089 961.843,611.026 962.402,613.709 962.962,650.188 963.521,699.549 964.08,699.061 964.639,713.289 965.199,699.282 965.758,719.064 966.317,716.213 966.876,718.045 967.436,680.875 967.995,648.396 968.554,636.044 969.113,656.078 969.673,641.717 970.232,659.058 970.791,645.98 971.35,663.332 971.91,646.448 972.469,646.263 973.028,661.389 973.587,628.537 974.147,613.607 974.706,617.972 975.265,604.57 975.824,595.247 976.384,570.266 976.943,578.829 977.502,553.26 978.061,575.09 978.621,596.47 979.18,600.562 979.739,607.652 980.298,566.808 980.858,555.707 981.417,561.174 981.976,571.232 982.535,591.601 983.095,610.838 983.654,680.46 984.213,712.622 984.772,728.762 985.332,724.706 985.891,723.012 986.45,722.675 987.009,686.787 987.569,683.717 988.128,716.387 988.687,714.732 989.246,697.011 989.806,696.399 990.365,678.518 990.924,672.45 991.483,644.813 992.043,646.658 992.602,649.896 993.161,651.446 993.72,636.11 994.28,671.146 994.839,653.491 995.398,672.67 995.957,676.154 996.517,677.854 997.076,665.011 997.635,652.153 998.194,636.649 998.754,637.96 999.313,624.987 999.872,609.678 1000.43,630.05 1000.99,664.614 1001.55,651.775 1002.11,671.386 1002.67,673.019 1003.23,657.396 1003.79,642.272 1004.35,624.437 1004.91,664.67 1005.46,649.054 1006.02,648.942 1006.58,669.291 1007.14,686.517 1007.7,686.673 1008.26,654.075 1008.82,641.505 1009.38,676.765 1009.94,675.913 1010.5,678.394 1011.06,710.741 1011.62,707.58 1012.18,723.24 1012.73,707.798 1013.29,721.958 1013.85,749.235 1014.41,731.381 1014.97,743.581 1015.53,772.48 1016.09,732.089 1016.65,747.492 1017.21,746.36 1017.77,744.172 1018.33,727.086 1018.89,739.647 1019.45,752.022 1020.01,716.379 1020.56,731.025 1021.12,680.505 1021.68,697.675 1022.24,680.722 1022.8,696.247 1023.36,711.429 1023.92,709.693 1024.48,692.993 1025.04,661.381 1025.6,649.375 1026.16,684.158 1026.72,684.924 1027.28,671.801 1027.83,715.971 1028.39,699.463 1028.95,712.944 1029.51,711.562 1030.07,741.485 1030.63,739.544 1031.19,737.295 1031.75,735.585 1032.31,749.884 1032.87,749.294 1033.43,745.846 1033.99,726.15 1034.55,706.972 1035.1,706.772 1035.66,706.298 1036.22,704.92 1036.78,702.304 1037.34,700.35 1037.9,732.418 1038.46,733.566 1039.02,695.84 1039.58,696.578 1040.14,646.867 1040.7,684.054 1041.26,653.771 1041.82,673.384 1042.38,646.29 1042.93,663.946 1043.49,632.613 1044.05,634.717 1044.61,652.967 1045.17,688.111 1045.73,688.793 1046.29,686.474 1046.85,667.839 1047.41,700.377 1047.97,664.296 1048.53,700.375 1049.09,696.653 1049.65,715.09 1050.2,714.839 1050.76,758.442 1051.32,738.41 1051.88,701.778 1052.44,686.015 1053,687.627 1053.56,671.428 1054.12,674.849 1054.68,624.026 1055.24,627.449 1055.8,613.268 1056.36,663.936 1056.92,682.304 1057.48,714.126 1058.03,743.552 1058.59,741.086 1059.15,721.734 1059.71,703.625 1060.27,734.008 1060.83,683.847 1061.39,703.563 1061.95,752 1062.51,750.712 1063.07,747.097 1063.63,762.32 1064.19,710.477 1064.75,728.3 1065.3,741.792 1065.86,690.281 1066.42,690.349 1066.98,672.864 1067.54,673.243 1068.1,692.731 1068.66,693.874 1069.22,675.804 1069.78,686.763 1070.34,689.517 1070.9,682.791 1071.46,680.479 1072.02,662.402 1072.57,695.916 1073.13,679.769 1073.69,675.555 1074.25,641.906 1074.81,646.052 1075.37,663.489 1075.93,663.779 1076.49,635.35 1077.05,653.636 1077.61,655.831 1078.17,643.459 1078.73,659.152 1079.29,694.434 1079.85,708.795 1080.4,787.028 1080.96,782.612 1081.52,780.488 1082.08,808.889 1082.64,786.625 1083.2,780.939 1083.76,819.059 1084.32,811.861 1084.88,821.42 1085.44,782.137 1086,745.416 1086.56,742.605 1087.12,768.025 1087.67,741.126 1088.23,736.642 1088.79,717.495 1089.35,750.917 1089.91,731.113 1090.47,746.02 1091.03,743.533 1091.59,772.899 1092.15,767.804 1092.71,733.318 1093.27,714.94 1093.83,711.589 1094.39,743.668 1094.94,742.992 1095.5,737.065 1096.06,757.484 1096.62,733.496 1097.18,710.108 1097.74,726.348 1098.3,742.234 1098.86,723.983 1099.42,756.53 1099.98,720.754 1100.54,723.079 1101.1,725.113 1101.66,722.781 1102.22,718.709 1102.77,697.757 1103.33,711.355 1103.89,723.275 1104.45,705.91 1105.01,672.266 1105.57,657.613 1106.13,659.799 1106.69,677.099 1107.25,693.114 1107.81,673.669 1108.37,673.831 1108.93,661.37 1109.49,647.669 1110.04,662.689 1110.6,662.59 1111.16,676.792 1111.72,656.182 1112.28,638.442 1112.84,669.878 1113.4,655.528 1113.96,690.153 1114.52,690.587 1115.08,733.296 1115.64,713.052 1116.2,679.495 1116.76,679.703 1117.31,651.116 1117.87,647.844 1118.43,681.235 1118.99,680.904 1119.55,678.76 1120.11,714.454 1120.67,710.348 1121.23,693.999 1121.79,664.566 1122.35,665.187 1122.91,665.04 1123.47,692.726 1124.03,690.123 1124.59,672.274 1125.14,670.649 1125.7,706.875 1126.26,692.784 1126.82,737.468 1127.38,754.571 1127.94,719.429 1128.5,715.501 1129.06,728.1 1129.62,729.45 1130.18,692.776 1130.74,661.036 1131.3,663.584 1131.86,648.098 1132.41,585.564 1132.97,574.011 1133.53,611.233 1134.09,631.316 1134.65,648.511 1135.21,678.982 1135.77,682.81 1136.33,683.622 1136.89,688.042 1137.45,703.788 1138.01,685.925 1138.57,702.63 1139.13,701.913 1139.68,733.199 1140.24,730.195 1140.8,692.911 1141.36,709.16 1141.92,757.011 1142.48,774.788 1143.04,740.758 1143.6,722.298 1144.16,719.796 1144.72,733.622 1145.28,680.33 1145.84,663.6 1146.4,660.757 1146.96,644.786 1147.51,615.251 1148.07,622.338 1148.63,622.152 1149.19,573.969 1149.75,551.61 1150.31,570.668 1150.87,575.484 1151.43,582.961 1151.99,557.138 1152.55,518.744 1153.11,576.089 1153.67,618.647 1154.23,623.147 1154.78,629.12 1155.34,600.248 1155.9,603.983 1156.46,643.597 1157.02,646.491 1157.58,617.478 1158.14,601.934 1158.7,607.378 1159.26,611.438 1159.82,614.157 1160.38,616.073 1160.94,601.613 1161.5,621.904 1162.05,637.465 1162.61,642.948 1163.17,647.844 1163.73,650.32 1164.29,654.21 1164.85,656.22 1165.41,706.484 1165.97,738.816 1166.53,717.86 1167.09,649.947 1167.65,667.428 1168.21,670.271 1168.77,636.885 1169.33,636.509 1169.88,620.87 1170.44,641.587 1171,641.284 1171.56,625.215 1172.12,632.269 1172.68,602.261 1173.24,612.115 1173.8,584.782 1174.36,589.913 1174.92,609.797 1175.48,626.879 1176.04,627.88 1176.6,646.32 1177.15,649.268 1177.71,668.08 1178.27,669.997 1178.83,638.237 1179.39,640.814 1179.95,661.946 1180.51,651.268 1181.07,655.442 1181.63,691.658 1182.19,658.933 1182.75,660.447 1183.31,677.619 1183.87,680.107 1184.43,694.648 1184.98,712.639 1185.54,664 1186.1,668.922 1186.66,683.801 1187.22,700.174 1187.78,696.942 1188.34,695.568 1188.9,680.147 1189.46,710.222 1190.02,725.903 1190.58,740.12 1191.14,738.326 1191.7,750.951 1192.25,750.643 1192.81,764.021 1193.37,793.032 1193.93,788.902 1194.49,783.438 1195.05,749.472 1195.61,745.602 1196.17,778.46 1196.73,758.222 1197.29,755.075 1197.85,753.297 1198.41,766.641 1198.97,765.982 1199.52,794.916 1200.08,787.618 1200.64,783.745 1201.2,746.824 1201.76,727.03 1202.32,757.388 1202.88,753.831 1203.44,769.015 1204,767.246 1204.56,777.135 1205.12,770.703 1205.68,769.779 1206.24,763.841 1206.8,741.933 1207.35,725.817 1207.91,672.947 1208.47,674.922 1209.03,690.547 1209.59,689.749 1210.15,686.663 1210.71,685.666 1211.27,671.662 1211.83,704.465 1212.39,668.161 1212.95,650.425 1213.51,668.859 1214.07,686.221 1214.62,686.874 1215.18,672.033 1215.74,670.157 1216.3,688.024 1216.86,656.549 1217.42,607.216 1217.98,626.71 1218.54,611.733 1219.1,569.788 1219.66,590.191 1220.22,576.784 1220.78,581.83 1221.34,588.166 1221.89,579.715 1222.45,585.277 1223.01,577.066 1223.57,601.796 1224.13,605.601 1224.69,614.488 1225.25,619.585 1225.81,656.712 1226.37,654.741 1226.93,670.952 1227.49,736.63 1228.05,764.496 1228.61,743.599 1229.17,723.83 1229.72,734.021 1230.28,726.563 1230.84,744.452 1231.4,768.877 1231.96,768.403 1232.52,765.502 1233.08,746.938 1233.64,757.303 1234.2,767.735 1234.76,800.035 1235.32,826.82 1235.88,821.153 1236.44,827.267 1236.99,817.724 1237.55,778.111 1238.11,773.183 1238.67,723.371 1239.23,671.51 1239.79,689.231 1240.35,722.565 1240.91,707.943 1241.47,702.341 1242.03,716.85 1242.59,632.151 1243.15,667.49 1243.71,669.018 1244.26,702.994 1244.82,701.67 1245.38,666.934 1245.94,651.548 1246.5,634.48 1247.06,619.654 1247.62,607.104 1248.18,614.919 1248.74,638.958 1249.3,644.813 1249.86,632.003 1250.42,636.806 1250.98,655.813 1251.54,643.883 1252.09,711.484 1252.65,694.737 1253.21,707.109 1253.77,723.948 1254.33,751.935 1254.89,766.502 1255.45,756.727 1256.01,754.867 1256.57,750.753 1257.13,762.608 1257.69,742.125 1258.25,739.981 1258.81,804.179 1259.36,763.608 1259.92,769.966 1260.48,731.509 1261.04,713.831 1261.6,695.63 1262.16,675.458 1262.72,677.082 1263.28,659.958 1263.84,647.419 1264.4,616.526 1264.96,654.162 1265.52,639.076 1266.08,638.492 1266.63,640.683 1267.19,660.641 1267.75,678.789 1268.31,664.032 1268.87,664.914 1269.43,684.407 1269.99,701.134 1270.55,700.193 1271.11,713.228 1271.67,711.802 1272.23,724.233 1272.79,705.348 1273.35,700.386 1273.91,729.593 1274.46,708.007 1275.02,688.155 1275.58,670.485 1276.14,655.977 1276.7,672.533 1277.26,686.587 1277.82,704.407 1278.38,732.177 1278.94,747.963 1279.5,744.833 1280.06,708.058 1280.62,736.575 1281.18,749.328 1281.73,746.905 1282.29,742.244 1282.85,738.696 1283.41,768.31 1283.97,747.741 1284.53,740.063 1285.09,720.195 1285.65,732.593 1286.21,732.056 1286.77,694.02 1287.33,679.841 1287.89,708.069 1288.45,703.985 1289,703.319 1289.56,685.523 1290.12,684.253 1290.68,698.391 1291.24,697.71 1291.8,712.788 1292.36,725.369 1292.92,741.644 1293.48,753.668 1294.04,748.503 1294.6,713.596 1295.16,699.542 1295.72,763.464 1296.28,693.383 1296.83,676.715 1297.39,646.699 1297.95,630.727 1298.51,600.826 1299.07,607.417 1299.63,613.86 1300.19,586.045 1300.75,589.901 1301.31,610.966 1301.87,613.801 1302.43,617.881 1302.99,640.74 1303.55,657.453 1304.1,627.065 1304.66,629.274 1305.22,614.531 1305.78,618.745 1306.34,622.318 1306.9,622.019 1307.46,644.172 1308.02,629.92 1308.58,615.243 1309.14,604.229 1309.7,638.539 1310.26,641.95 1310.82,706.399 1311.38,706.862 1311.93,705.004 1312.49,706.678 1313.05,690.211 1313.61,723.588 1314.17,736.996 1314.73,702.579 1315.29,668.63 1315.85,652.888 1316.41,687.04 1316.97,683.617 1317.53,633.445 1318.09,652.501 1318.65,649.7 1319.2,670.771 1319.76,670.847 1320.32,639.324 1320.88,647.219 1321.44,595.758 1322,599.401 1322.56,603.936 1323.12,641.832 1323.68,676.482 1324.24,688.245 1324.8,640.921 1325.36,673.821 1325.92,673.815 1326.47,675.477 1327.03,643.558 1327.59,616.605 1328.15,605.153 1328.71,627.62 1329.27,615.175 1329.83,637.876 1330.39,640.136 1330.95,614.505 1331.51,588.617 1332.07,594.746 1332.63,580.323 1333.19,606.366 1333.75,589.805 1334.3,594.996 1334.86,601.515 1335.42,590.781 1335.98,598.377 1336.54,634.028 1337.1,653.724 1337.66,640.888 1338.22,659.558 1338.78,679.227 1339.34,680.664 1339.9,696.688 1340.46,694.48 1341.02,693.614 1341.57,659.854 1342.13,661.93 1342.69,678.076 1343.25,645.957 1343.81,635.625 1344.37,653.327 1344.93,672.219 1345.49,672.689 1346.05,654.158 1346.61,636.773 1347.17,638.101 1347.73,640.409 1348.29,643.819 1348.84,661.442 1349.4,645.088 1349.96,650.203 1350.52,632.961 1351.08,651.355 1351.64,658.074 1352.2,648.751 1352.76,650.77 1353.32,638.276 1353.88,643.138 1354.44,645.886 1355,630.851 1355.56,632.741 1356.12,636.482 1356.67,655.997 1357.23,656.771 1357.79,677.841 1358.35,680.881 1358.91,649.544 1359.47,638.446 1360.03,622.657 1360.59,610.26 1361.15,613.365 1361.71,600.863 1362.27,606.81 1362.83,628.442 1363.39,647.484 1363.94,680.58 1364.5,635.2 1365.06,635.777 1365.62,638.197 1366.18,640.459 1366.74,631.065 1367.3,668.511 1367.86,673.355 1368.42,652.533 1368.98,635.879 1369.54,656.411 1370.1,675.78 1370.66,690.548 1371.21,721.543 1371.77,706.061 1372.33,719.394 1372.89,699.194 1373.45,762.39 1374.01,778.364 1374.57,775.958 1375.13,757.209 1375.69,771.227 1376.25,780.303 1376.81,760.721 1377.37,741.571 1377.93,739.593 1378.49,721.134 1379.04,703.401 1379.6,722.56 1380.16,754.101 1380.72,733.818 1381.28,716.559 1381.84,714.726 1382.4,761.91 1382.96,743.3 1383.52,754.842 1384.08,766.947 1384.64,765.024 1385.2,790.879 1385.76,767.045 1386.31,765.054 1386.87,743.973 1387.43,705.825 1387.99,720.311 1388.55,750.535 1389.11,748.854 1389.67,746.534 1390.23,757.326 1390.79,769.693 1391.35,717.252 1391.91,731.949 1392.47,746.196 1393.03,725.372 1393.58,738.685 1394.14,703.207 1394.7,717.199 1395.26,697.338 1395.82,647.164 1396.38,648.354 1396.94,632.698 1397.5,652.605 1398.06,649.548 1398.62,698.383 1399.18,712.956 1399.74,711.559 1400.3,706.326 1400.86,691.96 1401.41,708.23 1401.97,739.851 1402.53,769.403 1403.09,745.844 1403.65,757.771 1404.21,724.348 1404.77,750.579 1405.33,782.145 1405.89,793.816 1406.45,788.409 1407.01,783.948 1407.57,778.685 1408.13,773.326 1408.68,767.634 1409.24,762.478 1409.8,788.158 1410.36,768.052 1410.92,776.059 1411.48,769.9 1412.04,763.115 1412.6,744.219 1413.16,742.346 1413.72,727.089 1414.28,705.297 1414.84,720.908 1415.4,685.646 1415.95,682.85 1416.51,682.489 1417.07,695.733 1417.63,658.623 1418.19,660.05 1418.75,677.242 1419.31,711.213 1419.87,710.853 1420.43,691.531 1420.99,690.9 1421.55,706.709 1422.11,688.949 1422.67,674.594 1423.23,675.513 1423.78,689.864 1424.34,703.47 1424.9,703.105 1425.46,720.349 1426.02,703.76 1426.58,688.927 1427.14,674.531 1427.7,678.31 1428.26,679.371 1428.82,648.835 1429.38,684.523 1429.94,715.631 1430.5,715.21 1431.05,711.194 1431.61,711.689 1432.17,709.608 1432.73,710.176 1433.29,730.507 1433.85,742.908 1434.41,740.976 1434.97,702.117 1435.53,686.172 1436.09,718.087 1436.65,680.72 1437.21,662.905 1437.77,615.353 1438.33,603.991 1438.88,624.843 1439.44,674.459 1440,708.501 1440.56,674.871 1441.12,661.408 1441.68,614.835 1442.24,601.623 1442.8,605.161 1443.36,591.539 1443.92,597.026 1444.48,616.788 1445.04,621.179 1445.6,624.163 1446.15,646.61 1446.71,634.839 1447.27,638.282 1447.83,672.434 1448.39,658.365 1448.95,693.295 1449.51,660.926 1450.07,641.317 1450.63,675.041 1451.19,677.773 1451.75,677.438 1452.31,705.937 1452.87,670.844 1453.42,681.814 1453.98,679.743 1454.54,646.495 1455.1,650.776 1455.66,621.167 1456.22,592.256 1456.78,613.165 1457.34,615.391 1457.9,621.347 1458.46,674.785 1459.02,675.099 1459.58,641.405 1460.14,659.877 1460.7,707.142 1461.25,709.66 1461.81,692.39 1462.37,690.945 1462.93,690.574 1463.49,658.292 1464.05,674.303 1464.61,655.605 1465.17,656.099 1465.73,641.08 1466.29,658.065 1466.85,626.506 1467.41,618.67 1467.97,640.132 1468.52,637.041 1469.08,590.791 1469.64,576.614 1470.2,567.477 1470.76,559.898 1471.32,551.412 1471.88,556.566 1472.44,566.386 1473,525.927 1473.56,533.257 1474.12,511.954 1474.68,523.487 1475.24,518.414 1475.79,515.722 1476.35,508.339 1476.91,518.942 1477.47,510.461 1478.03,535.422 1478.59,559.525 1479.15,600.608 1479.71,605.343 1480.27,578.434 1480.83,584.301 1481.39,575.074 1481.95,646.904 1482.51,663.342 1483.07,667.686 1483.62,685.483 1484.18,687.356 1484.74,685.977 1485.3,672.503 1485.86,691.719 1486.42,658.582 1486.98,642.881 1487.54,661.567 1488.1,680.43 1488.66,684.064 1489.22,703.313 1489.78,719.673 1490.34,717.143 1490.89,719.455 1491.45,719.376 1492.01,716.204 1492.57,702.34 1493.13,668.893 1493.69,668.677 1494.25,654.349 1494.81,673.795 1495.37,660.711 1495.93,692.536 1496.49,710.106 1497.05,709.012 1497.61,677.414 1498.16,712.385 1498.72,709.324 1499.28,709.319 1499.84,690.018 1500.4,690.844 1500.96,740.26 1501.52,724.835 1502.08,755.747 1502.64,736.344 1503.2,733.721 1503.76,763.703 1504.32,829.036 1504.88,839.489 1505.44,841.689 1505.99,815.856 1506.55,811.573 1507.11,786.345 1507.67,813.399 1508.23,809.373 1508.79,787.234 1509.35,799.504 1509.91,765.474 1510.47,741.241 1511.03,689.618 1511.59,717.662 1512.15,712.522 1512.71,729.374 1513.26,709.131 1513.82,719.404 1514.38,700.283 1514.94,713.804 1515.5,695.533 1516.06,694.794 1516.62,724.53 1517.18,688.914 1517.74,703.281 1518.3,713.245 1518.86,729.284 1519.42,757.004 1519.98,783.532 1520.53,781.13 1521.09,792.408 1521.65,800.639 1522.21,827.158 1522.77,801.622 1523.33,796.93 1523.89,821.883 1524.45,808.375 1525.01,798.985 1525.57,810.354 1526.13,834.937 1526.69,844.972 1527.25,820.06 1527.81,810.205 1528.36,802.891 1528.92,795.389 1529.48,803.708 1530.04,797.278 1530.6,824.933 1531.16,832.038 1531.72,869.313 1532.28,875.34 1532.84,844.853 1533.4,836.86 1533.96,812.152 1534.52,773.799 1535.08,769.444 1535.63,766.094 1536.19,757.553 1536.75,674.588 1537.31,658.179 1537.87,660.633 1538.43,610.306 1538.99,579.646 1539.55,568 1540.11,542.688 1540.67,517.16 1541.23,507.614 1541.79,518.698 1542.35,543.188 1542.9,534.481 1543.46,544.658 1544.02,535.7 1544.58,542.289 1545.14,566.399 1545.7,585.331 1546.26,605.736 1546.82,609.496 1547.38,613.303 1547.94,649.659 1548.5,586.149 1549.06,591.33 1549.62,647.387 1550.18,680.863 1550.73,682.096 1551.29,685.195 1551.85,669.081 1552.41,671.626 1552.97,656.901 1553.53,660.476 1554.09,677.33 1554.65,712.045 1555.21,696.074 1555.77,710.999 1556.33,710.051 1556.89,695.533 1557.45,696.841 1558,709.775 1558.56,738.238 1559.12,752.865 1559.68,799.292 1560.24,776.017 1560.8,790.094 1561.36,818.421 1561.92,842.92 1562.48,833.38 1563.04,777.354 1563.6,787.703 1564.16,765.952 1564.72,777.171 1565.28,802.783 1565.83,779.465 1566.39,740.219 1566.95,751.524 1567.51,699.745 1568.07,711.998 1568.63,726.282 1569.19,723.376 1569.75,722.644 1570.31,705.891 1570.87,721.06 1571.43,689.087 1571.99,669.721 1572.55,719.071 1573.1,704.55 1573.66,699.662 1574.22,729.865 1574.78,727.645 1575.34,708.531 1575.9,740.631 1576.46,724.723 1577.02,705.703 1577.58,688.199 1578.14,688.402 1578.7,691.823 1579.26,674.076 1579.82,674.88 1580.37,675.625 1580.93,676.675 1581.49,661.802 1582.05,665.288 1582.61,651.46 1583.17,653.622 1583.73,653.578 1584.29,653.014 1584.85,654.725 1585.41,655.281 1585.97,675.611 1586.53,688.965 1587.09,687.528 1587.65,699.789 1588.2,696.626 1588.76,713.119 1589.32,727.064 1589.88,741.447 1590.44,724.457 1591,701.76 1591.56,717.672 1592.12,718.29 1592.68,701.958 1593.24,685.307 1593.8,687.27 1594.36,654.098 1594.92,637.457 1595.47,625.285 1596.03,629.7 1596.59,665.663 1597.15,668.617 1597.71,702.703 1598.27,684.456 1598.83,649.626 1599.39,618.86 1599.95,561.301 1600.51,598.766 1601.07,591.551 1601.63,614.015 1602.19,549.783 1602.74,590.878 1603.3,628.935 1603.86,631.94 1604.42,686.327 1604.98,682.817 1605.54,683.551 1606.1,731.159 1606.66,745.178 1607.22,738.67 1607.78,721.084 1608.34,672.261 1608.9,670.864 1609.46,652.36 1610.02,653.29 1610.57,637.189 1611.13,638.904 1611.69,655.956 1612.25,657.162 1612.81,657.723 1613.37,641.264 1613.93,644.22 1614.49,629.619 1615.05,651.886 1615.61,652.753 1616.17,667.726 1616.73,667.978 1617.29,686.802 1617.84,638.848 1618.4,641.52 1618.96,626.173 1619.52,595.673 1620.08,618.106 1620.64,588.627 1621.2,604.961 1621.76,606.174 1622.32,612.189 1622.88,634.024 1623.44,653.357 1624,670.968 1624.56,640.223 1625.11,625.016 1625.67,610.318 1626.23,631.438 1626.79,648.668 1627.35,654.828 1627.91,607.941 1628.47,610.674 1629.03,579.12 1629.59,581.406 1630.15,586.762 1630.71,578.529 1631.27,598.686 1631.83,632.439 1632.39,636.053 1632.94,640.973 1633.5,641.113 1634.06,610.175 1634.62,599.284 1635.18,603.307 1635.74,592.703 1636.3,596.958 1636.86,646.955 1637.42,651.72 1637.98,667.644 1638.54,652.387 1639.1,623.393 1639.66,612.269 1640.21,618.381 1640.77,639.445 1641.33,589.627 1641.89,630.742 1642.45,664.303 1643.01,664.356 1643.57,715.037 1644.13,696.855 1644.69,708.017 1645.25,693.005 1645.81,711.226 1646.37,697.226 1646.93,684.145 1647.48,710.634 1648.04,708.021 1648.6,701.358 1649.16,685.505 1649.72,747.506 1650.28,726.909 1650.84,741.977 1651.4,724.196 1651.96,691.772 1652.52,677.924 1653.08,693.524 1653.64,697.185 1654.2,699.52 1654.76,679.118 1655.31,649.629 1655.87,685.246 1656.43,695.88 1656.99,691.895 1657.55,706.827 1658.11,691.153 1658.67,672.769 1659.23,657.729 1659.79,659.377 1660.35,679.538 1660.91,712.626 1661.47,663.392 1662.03,646.661 1662.58,681.251 1663.14,681.07 1663.7,696.204 1664.26,681.559 1664.82,649.188 1665.38,717.346 1665.94,701.074 1666.5,684.441 1667.06,647.835 1667.62,666.637 1668.18,682.1 1668.74,667.672 1669.3,668.595 1669.85,670.909 1670.41,683.984 1670.97,685.246 1671.53,652.829 1672.09,631.665 1672.65,586.578 1673.21,560.053 1673.77,583.458 1674.33,633.819 1674.89,619.871 1675.45,637.066 1676.01,669.529 1676.57,667.235 1677.13,633.859 1677.68,603.904 1678.24,609.781 1678.8,601.207 1679.36,638.221 1679.92,640.53 1680.48,658.18 1681.04,660.636 1681.6,678.611 1682.16,647.025 1682.72,651.245 1683.28,652.918 1683.84,653.01 1684.4,635.657 1684.95,688.078 1685.51,702.831 1686.07,687.684 1686.63,686.697 1687.19,692.711 1687.75,723.72 1688.31,723.074 1688.87,738.311 1689.43,698.831 1689.99,681.35 1690.55,714.249 1691.11,685.027 1691.67,685.228 1692.23,670.582 1692.78,672.703 1693.34,668.096 1693.9,654.237 1694.46,657.442 1695.02,692.456 1695.58,705.914 1696.14,738.637 1696.7,701.487 1697.26,700.183 1697.82,694.266 1698.38,679.383 1698.94,725.432 1699.5,727.867 1700.05,726.672 1700.61,740.928 1701.17,721.825 1701.73,755.791 1702.29,734.698 1702.85,733.078 1703.41,760.52 1703.97,755.335 1704.53,768.741 1705.09,798.144 1705.65,792.223 1706.21,786.366 1706.77,781.648 1707.32,758.722 1707.88,738.661 1708.44,750.415 1709,743.685 1709.56,774.679 1710.12,770.62 1710.68,779.192 1711.24,819.555 1711.8,783.511 1712.36,777.062 1712.92,773.962 1713.48,768.78 1714.04,777.188 1714.6,774.243 1715.15,734.978 1715.71,715.526 1716.27,699.872 1716.83,700.961 1717.39,716.071 1717.95,712.505 1718.51,713.827 1719.07,713.141 1719.63,727.31 1720.19,768.915 1720.75,783.345 1721.31,778.872 1721.87,790.896 1722.42,783.864 1722.98,774.891 1723.54,737.515 1724.1,753.097 1724.66,749.9 1725.22,712.29 1725.78,680.4 1726.34,698.181 1726.9,678.784 1727.46,679.518 1728.02,744.221 1728.58,739.049 1729.14,719.198 1729.69,702.002 1730.25,752.14 1730.81,769.737 1731.37,750.313 1731.93,715.351 1732.49,698.179 1733.05,745.323 1733.61,730.131 1734.17,745.465 1734.73,692.462 1735.29,719.688 1735.85,700.904 1736.41,716.644 1736.97,682.227 1737.52,654.075 1738.08,687.114 1738.64,738.451 1739.2,715.716 1739.76,675.453 1740.32,674.133 1740.88,661.742 1741.44,673.861 1742,689.356 1742.56,656.588 1743.12,660.38 1743.68,678.854 1744.24,711.211 1744.79,661.919 1745.35,662.735 1745.91,661.674 1746.47,647.368 1747.03,677.334 1747.59,692.026 1748.15,704.604 1748.71,718.692 1749.27,682.908 1749.83,698.804 1750.39,697.392 1750.95,743.516 1751.51,741.264 1752.06,756.638 1752.62,783.011 1753.18,761.34 1753.74,838.015 1754.3,846.973 1754.86,839.098 1755.42,817.135 1755.98,808.59 1756.54,784.454 1757.1,744.834 1757.66,755.588 1758.22,754.484 1758.78,753.792 1759.34,698.158 1759.89,699.168 1760.45,743.37 1761.01,740.329 1761.57,735.158 1762.13,764.116 1762.69,744.719 1763.25,761.268 1763.81,738.571 1764.37,720.06 1764.93,700.292 1765.49,695.635 1766.05,676.356 1766.61,645.723 1767.16,651.864 1767.72,653.6 1768.28,689.305 1768.84,687.606 1769.4,722.559 1769.96,703.088 1770.52,671.264 1771.08,671.847 1771.64,687.392 1772.2,701.52 1772.76,669.321 1773.32,688.822 1773.88,707.682 1774.43,721.788 1774.99,719.864 1775.55,700.22 1776.11,731.465 1776.67,730.507 1777.23,761.663 1777.79,760.738 1778.35,770.64 1778.91,736.125 1779.47,746.529 1780.03,745.139 1780.59,710.541 1781.15,709.107 1781.71,706.965 1782.26,707.292 1782.82,688.688 1783.38,701.221 1783.94,685.337 1784.5,737.672 1785.06,733.858 1785.62,701.692 1786.18,669.596 1786.74,670.239 1787.3,638.205 1787.86,621.845 1788.42,621.507 1788.98,613.105 1789.53,618.365 1790.09,620.036 1790.65,611.326 1791.21,617.911 1791.77,602.206 1792.33,556.454 1792.89,542.891 1793.45,532.532 1794.01,541.683 1794.57,550.216 1795.13,558.014 1795.69,613.331 1796.25,599.657 1796.8,589.221 1797.36,627.209 1797.92,662.042 1798.48,662.836 1799.04,663.798 1799.6,652.071 1800.16,635.734 1800.72,620.926 1801.28,594.537 1801.84,601.582 1802.4,609.065 1802.96,582.662 1803.52,575.089 1804.08,601.195 1804.63,604.773 1805.19,606.046 1805.75,562.355 1806.31,571.779 1806.87,609.569 1807.43,629.709 1807.99,649.935 1808.55,634.769 1809.11,671.655 1809.67,642.134 1810.23,678.109 1810.79,665.313 1811.35,682.212 1811.9,669.656 1812.46,670.398 1813.02,672.998 1813.58,690.318 1814.14,671.538 1814.7,674.468 1815.26,677.28 1815.82,662.464 1816.38,669.277 1816.94,687.955 1817.5,690.265 1818.06,690.209 1818.62,660.839 1819.18,647.075 1819.73,615.679 1820.29,619.321 1820.85,641.495 1821.41,661.79 1821.97,682.181 1822.53,667.826 1823.09,668.755 1823.65,605.276 1824.21,628.198 1824.77,617.992 1825.33,606.877 1825.89,610.734 1826.45,633.265 1827,671.506 1827.56,669.666 1828.12,722.489 1828.68,752.491 1829.24,762.114 1829.8,743.841 1830.36,745.856 1830.92,740.902 1831.48,737.964 1832.04,717.619 1832.6,686.368 1833.16,657.513 1833.72,657.67 1834.27,693.451 1834.83,706.368 1835.39,723.336 1835.95,700.983 1836.51,702.495 1837.07,749.463 1837.63,782.785 1838.19,780.714 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 691.708 L720.806 691.708 L721.365 691.708 L721.924 691.708 L722.484 691.708 L723.043 691.708 L723.602 691.708 L724.161 691.708 L724.721 691.708 L725.28 691.708 L725.839 691.708 L726.398 691.708 L726.958 691.708 L727.517 691.708 L728.076 691.708 L728.635 691.708 L729.195 691.708 L729.754 691.708 L730.313 691.708 L730.872 691.708 L731.432 691.708 L731.991 691.708 L732.55 691.708 L733.109 691.708 L733.669 691.708 L734.228 691.708 L734.787 691.708 L735.346 691.708 L735.906 691.708 L736.465 691.708 L737.024 691.708 L737.583 691.708 L738.143 691.708 L738.702 691.708 L739.261 691.708 L739.82 691.708 L740.38 691.708 L740.939 691.708 L741.498 691.708 L742.057 691.708 L742.617 691.708 L743.176 691.708 L743.735 691.708 L744.294 691.708 L744.854 691.708 L745.413 691.708 L745.972 691.708 L746.531 691.708 L747.091 691.708 L747.65 691.708 L748.209 691.708 L748.768 691.708 L749.328 691.708 L749.887 691.708 L750.446 691.708 L751.005 691.708 L751.565 691.708 L752.124 691.708 L752.683 691.708 L753.242 691.708 L753.802 691.708 L754.361 691.708 L754.92 691.708 L755.479 691.708 L756.039 691.708 L756.598 691.708 L757.157 691.708 L757.716 691.708 L758.276 691.708 L758.835 691.708 L759.394 691.708 L759.953 691.708 L760.513 691.708 L761.072 691.708 L761.631 691.708 L762.19 691.708 L762.75 691.708 L763.309 691.708 L763.868 691.708 L764.427 691.708 L764.987 691.708 L765.546 691.708 L766.105 691.708 L766.664 691.708 L767.224 691.708 L767.783 691.708 L768.342 691.708 L768.901 691.708 L769.461 691.708 L770.02 691.708 L770.579 691.708 L771.138 691.708 L771.698 691.708 L772.257 691.708 L772.816 691.708 L773.375 691.708 L773.935 691.708 L774.494 691.708 L775.053 691.708 L775.612 691.708 L776.172 691.708 L776.731 691.708 L777.29 691.708 L777.849 691.708 L778.409 691.708 L778.968 691.708 L779.527 691.708 L780.086 691.708 L780.646 691.708 L781.205 691.708 L781.764 691.708 L782.323 691.708 L782.883 691.708 L783.442 691.708 L784.001 691.708 L784.56 691.708 L785.12 691.708 L785.679 691.708 L786.238 691.708 L786.797 691.708 L787.357 691.708 L787.916 691.708 L788.475 691.708 L789.034 691.708 L789.594 691.708 L790.153 691.708 L790.712 691.708 L791.271 691.708 L791.831 691.708 L792.39 691.708 L792.949 691.708 L793.508 691.708 L794.068 691.708 L794.627 691.708 L795.186 691.708 L795.745 691.708 L796.305 691.708 L796.864 691.708 L797.423 691.708 L797.982 691.708 L798.542 691.708 L799.101 691.708 L799.66 691.708 L800.219 691.708 L800.779 691.708 L801.338 691.708 L801.897 691.708 L802.456 691.708 L803.016 691.708 L803.575 691.708 L804.134 691.708 L804.693 691.708 L805.253 691.708 L805.812 691.708 L806.371 691.708 L806.931 691.708 L807.49 691.708 L808.049 691.708 L808.608 691.708 L809.168 691.708 L809.727 691.708 L810.286 691.708 L810.845 691.708 L811.405 691.708 L811.964 691.708 L812.523 691.708 L813.082 691.708 L813.642 691.708 L814.201 691.708 L814.76 691.708 L815.319 691.708 L815.879 691.708 L816.438 691.708 L816.997 691.708 L817.556 691.708 L818.116 691.708 L818.675 691.708 L819.234 691.708 L819.793 691.708 L820.353 691.708 L820.912 691.708 L821.471 691.708 L822.03 691.708 L822.59 691.708 L823.149 691.708 L823.708 691.708 L824.267 691.708 L824.827 691.708 L825.386 691.708 L825.945 691.708 L826.504 691.708 L827.064 691.708 L827.623 691.708 L828.182 691.708 L828.741 691.708 L829.301 691.708 L829.86 691.708 L830.419 691.708 L830.978 691.708 L831.538 691.708 L832.097 691.708 L832.656 691.708 L833.215 691.708 L833.775 691.708 L834.334 691.708 L834.893 691.708 L835.452 691.708 L836.012 691.708 L836.571 691.708 L837.13 691.708 L837.689 691.708 L838.249 691.708 L838.808 691.708 L839.367 691.708 L839.926 691.708 L840.486 691.708 L841.045 691.708 L841.604 691.708 L842.163 691.708 L842.723 691.708 L843.282 691.708 L843.841 691.708 L844.4 691.708 L844.96 691.708 L845.519 691.708 L846.078 691.708 L846.637 691.708 L847.197 691.708 L847.756 691.708 L848.315 691.708 L848.874 691.708 L849.434 691.708 L849.993 691.708 L850.552 691.708 L851.111 691.708 L851.671 691.708 L852.23 691.708 L852.789 691.708 L853.348 691.708 L853.908 691.708 L854.467 691.708 L855.026 691.708 L855.585 691.708 L856.145 691.708 L856.704 691.708 L857.263 691.708 L857.822 691.708 L858.382 691.708 L858.941 691.708 L859.5 691.708 L860.059 691.708 L860.619 691.708 L861.178 691.708 L861.737 691.708 L862.296 691.708 L862.856 691.708 L863.415 691.708 L863.974 691.708 L864.533 691.708 L865.093 691.708 L865.652 691.708 L866.211 691.708 L866.77 691.708 L867.33 691.708 L867.889 691.708 L868.448 691.708 L869.007 691.708 L869.567 691.708 L870.126 691.708 L870.685 691.708 L871.244 691.708 L871.804 691.708 L872.363 691.708 L872.922 691.708 L873.481 691.708 L874.041 691.708 L874.6 691.708 L875.159 691.708 L875.718 691.708 L876.278 691.708 L876.837 691.708 L877.396 691.708 L877.955 691.708 L878.515 691.708 L879.074 691.708 L879.633 691.708 L880.192 691.708 L880.752 691.708 L881.311 691.708 L881.87 691.708 L882.429 691.708 L882.989 691.708 L883.548 691.708 L884.107 691.708 L884.666 691.708 L885.226 691.708 L885.785 691.708 L886.344 691.708 L886.903 691.708 L887.463 691.708 L888.022 691.708 L888.581 691.708 L889.14 691.708 L889.7 691.708 L890.259 691.708 L890.818 691.708 L891.377 691.708 L891.937 691.708 L892.496 691.708 L893.055 691.708 L893.614 691.708 L894.174 691.708 L894.733 691.708 L895.292 691.708 L895.851 691.708 L896.411 691.708 L896.97 691.708 L897.529 691.708 L898.088 691.708 L898.648 691.708 L899.207 691.708 L899.766 691.708 L900.325 691.708 L900.885 691.708 L901.444 691.708 L902.003 691.708 L902.562 691.708 L903.122 691.708 L903.681 691.708 L904.24 691.708 L904.799 691.708 L905.359 691.708 L905.918 691.708 L906.477 691.708 L907.036 691.708 L907.596 691.708 L908.155 691.708 L908.714 691.708 L909.273 691.708 L909.833 691.708 L910.392 691.708 L910.951 691.708 L911.51 691.708 L912.07 691.708 L912.629 691.708 L913.188 691.708 L913.747 691.708 L914.307 691.708 L914.866 691.708 L915.425 691.708 L915.984 691.708 L916.544 691.708 L917.103 691.708 L917.662 691.708 L918.221 691.708 L918.781 691.708 L919.34 691.708 L919.899 691.708 L920.458 691.708 L921.018 691.708 L921.577 691.708 L922.136 691.708 L922.695 691.708 L923.255 691.708 L923.814 691.708 L924.373 691.708 L924.932 691.708 L925.492 691.708 L926.051 691.708 L926.61 691.708 L927.169 691.708 L927.729 691.708 L928.288 691.708 L928.847 691.708 L929.406 691.708 L929.966 691.708 L930.525 691.708 L931.084 691.708 L931.644 691.708 L932.203 691.708 L932.762 691.708 L933.321 691.708 L933.881 691.708 L934.44 691.708 L934.999 691.708 L935.558 691.708 L936.118 691.708 L936.677 691.708 L937.236 691.708 L937.795 691.708 L938.355 691.708 L938.914 691.708 L939.473 691.708 L940.032 691.708 L940.592 691.708 L941.151 691.708 L941.71 691.708 L942.269 691.708 L942.829 691.708 L943.388 691.708 L943.947 691.708 L944.506 691.708 L945.066 691.708 L945.625 691.708 L946.184 691.708 L946.743 691.708 L947.303 691.708 L947.862 691.708 L948.421 691.708 L948.98 691.708 L949.54 691.708 L950.099 691.708 L950.658 691.708 L951.217 691.708 L951.777 691.708 L952.336 691.708 L952.895 691.708 L953.454 691.708 L954.014 691.708 L954.573 691.708 L955.132 691.708 L955.691 691.708 L956.251 691.708 L956.81 691.708 L957.369 691.708 L957.928 691.708 L958.488 691.708 L959.047 691.708 L959.606 691.708 L960.165 691.708 L960.725 691.708 L961.284 691.708 L961.843 691.708 L962.402 691.708 L962.962 691.708 L963.521 691.708 L964.08 691.708 L964.639 691.708 L965.199 691.708 L965.758 691.708 L966.317 691.708 L966.876 691.708 L967.436 691.708 L967.995 691.708 L968.554 691.708 L969.113 691.708 L969.673 691.708 L970.232 691.708 L970.791 691.708 L971.35 691.708 L971.91 691.708 L972.469 691.708 L973.028 691.708 L973.587 691.708 L974.147 691.708 L974.706 691.708 L975.265 691.708 L975.824 691.708 L976.384 691.708 L976.943 691.708 L977.502 691.708 L978.061 691.708 L978.621 691.708 L979.18 691.708 L979.739 691.708 L980.298 691.708 L980.858 691.708 L981.417 691.708 L981.976 691.708 L982.535 691.708 L983.095 691.708 L983.654 691.708 L984.213 691.708 L984.772 691.708 L985.332 691.708 L985.891 691.708 L986.45 691.708 L987.009 691.708 L987.569 691.708 L988.128 691.708 L988.687 691.708 L989.246 691.708 L989.806 691.708 L990.365 691.708 L990.924 691.708 L991.483 691.708 L992.043 691.708 L992.602 691.708 L993.161 691.708 L993.72 691.708 L994.28 691.708 L994.839 691.708 L995.398 691.708 L995.957 691.708 L996.517 691.708 L997.076 691.708 L997.635 691.708 L998.194 691.708 L998.754 691.708 L999.313 691.708 L999.872 691.708 L1000.43 691.708 L1000.99 691.708 L1001.55 691.708 L1002.11 691.708 L1002.67 691.708 L1003.23 691.708 L1003.79 691.708 L1004.35 691.708 L1004.91 691.708 L1005.46 691.708 L1006.02 691.708 L1006.58 691.708 L1007.14 691.708 L1007.7 691.708 L1008.26 691.708 L1008.82 691.708 L1009.38 691.708 L1009.94 691.708 L1010.5 691.708 L1011.06 691.708 L1011.62 691.708 L1012.18 691.708 L1012.73 691.708 L1013.29 691.708 L1013.85 691.708 L1014.41 691.708 L1014.97 691.708 L1015.53 691.708 L1016.09 691.708 L1016.65 691.708 L1017.21 691.708 L1017.77 691.708 L1018.33 691.708 L1018.89 691.708 L1019.45 691.708 L1020.01 691.708 L1020.56 691.708 L1021.12 691.708 L1021.68 691.708 L1022.24 691.708 L1022.8 691.708 L1023.36 691.708 L1023.92 691.708 L1024.48 691.708 L1025.04 691.708 L1025.6 691.708 L1026.16 691.708 L1026.72 691.708 L1027.28 691.708 L1027.83 691.708 L1028.39 691.708 L1028.95 691.708 L1029.51 691.708 L1030.07 691.708 L1030.63 691.708 L1031.19 691.708 L1031.75 691.708 L1032.31 691.708 L1032.87 691.708 L1033.43 691.708 L1033.99 691.708 L1034.55 691.708 L1035.1 691.708 L1035.66 691.708 L1036.22 691.708 L1036.78 691.708 L1037.34 691.708 L1037.9 691.708 L1038.46 691.708 L1039.02 691.708 L1039.58 691.708 L1040.14 691.708 L1040.7 691.708 L1041.26 691.708 L1041.82 691.708 L1042.38 691.708 L1042.93 691.708 L1043.49 691.708 L1044.05 691.708 L1044.61 691.708 L1045.17 691.708 L1045.73 691.708 L1046.29 691.708 L1046.85 691.708 L1047.41 691.708 L1047.97 691.708 L1048.53 691.708 L1049.09 691.708 L1049.65 691.708 L1050.2 691.708 L1050.76 691.708 L1051.32 691.708 L1051.88 691.708 L1052.44 691.708 L1053 691.708 L1053.56 691.708 L1054.12 691.708 L1054.68 691.708 L1055.24 691.708 L1055.8 691.708 L1056.36 691.708 L1056.92 691.708 L1057.48 691.708 L1058.03 691.708 L1058.59 691.708 L1059.15 691.708 L1059.71 691.708 L1060.27 691.708 L1060.83 691.708 L1061.39 691.708 L1061.95 691.708 L1062.51 691.708 L1063.07 691.708 L1063.63 691.708 L1064.19 691.708 L1064.75 691.708 L1065.3 691.708 L1065.86 691.708 L1066.42 691.708 L1066.98 691.708 L1067.54 691.708 L1068.1 691.708 L1068.66 691.708 L1069.22 691.708 L1069.78 691.708 L1070.34 691.708 L1070.9 691.708 L1071.46 691.708 L1072.02 691.708 L1072.57 691.708 L1073.13 691.708 L1073.69 691.708 L1074.25 691.708 L1074.81 691.708 L1075.37 691.708 L1075.93 691.708 L1076.49 691.708 L1077.05 691.708 L1077.61 691.708 L1078.17 691.708 L1078.73 691.708 L1079.29 691.708 L1079.85 691.708 L1080.4 691.708 L1080.96 691.708 L1081.52 691.708 L1082.08 691.708 L1082.64 691.708 L1083.2 691.708 L1083.76 691.708 L1084.32 691.708 L1084.88 691.708 L1085.44 691.708 L1086 691.708 L1086.56 691.708 L1087.12 691.708 L1087.67 691.708 L1088.23 691.708 L1088.79 691.708 L1089.35 691.708 L1089.91 691.708 L1090.47 691.708 L1091.03 691.708 L1091.59 691.708 L1092.15 691.708 L1092.71 691.708 L1093.27 691.708 L1093.83 691.708 L1094.39 691.708 L1094.94 691.708 L1095.5 691.708 L1096.06 691.708 L1096.62 691.708 L1097.18 691.708 L1097.74 691.708 L1098.3 691.708 L1098.86 691.708 L1099.42 691.708 L1099.98 691.708 L1100.54 691.708 L1101.1 691.708 L1101.66 691.708 L1102.22 691.708 L1102.77 691.708 L1103.33 691.708 L1103.89 691.708 L1104.45 691.708 L1105.01 691.708 L1105.57 691.708 L1106.13 691.708 L1106.69 691.708 L1107.25 691.708 L1107.81 691.708 L1108.37 691.708 L1108.93 691.708 L1109.49 691.708 L1110.04 691.708 L1110.6 691.708 L1111.16 691.708 L1111.72 691.708 L1112.28 691.708 L1112.84 691.708 L1113.4 691.708 L1113.96 691.708 L1114.52 691.708 L1115.08 691.708 L1115.64 691.708 L1116.2 691.708 L1116.76 691.708 L1117.31 691.708 L1117.87 691.708 L1118.43 691.708 L1118.99 691.708 L1119.55 691.708 L1120.11 691.708 L1120.67 691.708 L1121.23 691.708 L1121.79 691.708 L1122.35 691.708 L1122.91 691.708 L1123.47 691.708 L1124.03 691.708 L1124.59 691.708 L1125.14 691.708 L1125.7 691.708 L1126.26 691.708 L1126.82 691.708 L1127.38 691.708 L1127.94 691.708 L1128.5 691.708 L1129.06 691.708 L1129.62 691.708 L1130.18 691.708 L1130.74 691.708 L1131.3 691.708 L1131.86 691.708 L1132.41 691.708 L1132.97 691.708 L1133.53 691.708 L1134.09 691.708 L1134.65 691.708 L1135.21 691.708 L1135.77 691.708 L1136.33 691.708 L1136.89 691.708 L1137.45 691.708 L1138.01 691.708 L1138.57 691.708 L1139.13 691.708 L1139.68 691.708 L1140.24 691.708 L1140.8 691.708 L1141.36 691.708 L1141.92 691.708 L1142.48 691.708 L1143.04 691.708 L1143.6 691.708 L1144.16 691.708 L1144.72 691.708 L1145.28 691.708 L1145.84 691.708 L1146.4 691.708 L1146.96 691.708 L1147.51 691.708 L1148.07 691.708 L1148.63 691.708 L1149.19 691.708 L1149.75 691.708 L1150.31 691.708 L1150.87 691.708 L1151.43 691.708 L1151.99 691.708 L1152.55 691.708 L1153.11 691.708 L1153.67 691.708 L1154.23 691.708 L1154.78 691.708 L1155.34 691.708 L1155.9 691.708 L1156.46 691.708 L1157.02 691.708 L1157.58 691.708 L1158.14 691.708 L1158.7 691.708 L1159.26 691.708 L1159.82 691.708 L1160.38 691.708 L1160.94 691.708 L1161.5 691.708 L1162.05 691.708 L1162.61 691.708 L1163.17 691.708 L1163.73 691.708 L1164.29 691.708 L1164.85 691.708 L1165.41 691.708 L1165.97 691.708 L1166.53 691.708 L1167.09 691.708 L1167.65 691.708 L1168.21 691.708 L1168.77 691.708 L1169.33 691.708 L1169.88 691.708 L1170.44 691.708 L1171 691.708 L1171.56 691.708 L1172.12 691.708 L1172.68 691.708 L1173.24 691.708 L1173.8 691.708 L1174.36 691.708 L1174.92 691.708 L1175.48 691.708 L1176.04 691.708 L1176.6 691.708 L1177.15 691.708 L1177.71 691.708 L1178.27 691.708 L1178.83 691.708 L1179.39 691.708 L1179.95 691.708 L1180.51 691.708 L1181.07 691.708 L1181.63 691.708 L1182.19 691.708 L1182.75 691.708 L1183.31 691.708 L1183.87 691.708 L1184.43 691.708 L1184.98 691.708 L1185.54 691.708 L1186.1 691.708 L1186.66 691.708 L1187.22 691.708 L1187.78 691.708 L1188.34 691.708 L1188.9 691.708 L1189.46 691.708 L1190.02 691.708 L1190.58 691.708 L1191.14 691.708 L1191.7 691.708 L1192.25 691.708 L1192.81 691.708 L1193.37 691.708 L1193.93 691.708 L1194.49 691.708 L1195.05 691.708 L1195.61 691.708 L1196.17 691.708 L1196.73 691.708 L1197.29 691.708 L1197.85 691.708 L1198.41 691.708 L1198.97 691.708 L1199.52 691.708 L1200.08 691.708 L1200.64 691.708 L1201.2 691.708 L1201.76 691.708 L1202.32 691.708 L1202.88 691.708 L1203.44 691.708 L1204 691.708 L1204.56 691.708 L1205.12 691.708 L1205.68 691.708 L1206.24 691.708 L1206.8 691.708 L1207.35 691.708 L1207.91 691.708 L1208.47 691.708 L1209.03 691.708 L1209.59 691.708 L1210.15 691.708 L1210.71 691.708 L1211.27 691.708 L1211.83 691.708 L1212.39 691.708 L1212.95 691.708 L1213.51 691.708 L1214.07 691.708 L1214.62 691.708 L1215.18 691.708 L1215.74 691.708 L1216.3 691.708 L1216.86 691.708 L1217.42 691.708 L1217.98 691.708 L1218.54 691.708 L1219.1 691.708 L1219.66 691.708 L1220.22 691.708 L1220.78 691.708 L1221.34 691.708 L1221.89 691.708 L1222.45 691.708 L1223.01 691.708 L1223.57 691.708 L1224.13 691.708 L1224.69 691.708 L1225.25 691.708 L1225.81 691.708 L1226.37 691.708 L1226.93 691.708 L1227.49 691.708 L1228.05 691.708 L1228.61 691.708 L1229.17 691.708 L1229.72 691.708 L1230.28 691.708 L1230.84 691.708 L1231.4 691.708 L1231.96 691.708 L1232.52 691.708 L1233.08 691.708 L1233.64 691.708 L1234.2 691.708 L1234.76 691.708 L1235.32 691.708 L1235.88 691.708 L1236.44 691.708 L1236.99 691.708 L1237.55 691.708 L1238.11 691.708 L1238.67 691.708 L1239.23 691.708 L1239.79 691.708 L1240.35 691.708 L1240.91 691.708 L1241.47 691.708 L1242.03 691.708 L1242.59 691.708 L1243.15 691.708 L1243.71 691.708 L1244.26 691.708 L1244.82 691.708 L1245.38 691.708 L1245.94 691.708 L1246.5 691.708 L1247.06 691.708 L1247.62 691.708 L1248.18 691.708 L1248.74 691.708 L1249.3 691.708 L1249.86 691.708 L1250.42 691.708 L1250.98 691.708 L1251.54 691.708 L1252.09 691.708 L1252.65 691.708 L1253.21 691.708 L1253.77 691.708 L1254.33 691.708 L1254.89 691.708 L1255.45 691.708 L1256.01 691.708 L1256.57 691.708 L1257.13 691.708 L1257.69 691.708 L1258.25 691.708 L1258.81 691.708 L1259.36 691.708 L1259.92 691.708 L1260.48 691.708 L1261.04 691.708 L1261.6 691.708 L1262.16 691.708 L1262.72 691.708 L1263.28 691.708 L1263.84 691.708 L1264.4 691.708 L1264.96 691.708 L1265.52 691.708 L1266.08 691.708 L1266.63 691.708 L1267.19 691.708 L1267.75 691.708 L1268.31 691.708 L1268.87 691.708 L1269.43 691.708 L1269.99 691.708 L1270.55 691.708 L1271.11 691.708 L1271.67 691.708 L1272.23 691.708 L1272.79 691.708 L1273.35 691.708 L1273.91 691.708 L1274.46 691.708 L1275.02 691.708 L1275.58 691.708 L1276.14 691.708 L1276.7 691.708 L1277.26 691.708 L1277.82 691.708 L1278.38 691.708 L1278.94 691.708 L1279.5 691.708 L1280.06 691.708 L1280.62 691.708 L1281.18 691.708 L1281.73 691.708 L1282.29 691.708 L1282.85 691.708 L1283.41 691.708 L1283.97 691.708 L1284.53 691.708 L1285.09 691.708 L1285.65 691.708 L1286.21 691.708 L1286.77 691.708 L1287.33 691.708 L1287.89 691.708 L1288.45 691.708 L1289 691.708 L1289.56 691.708 L1290.12 691.708 L1290.68 691.708 L1291.24 691.708 L1291.8 691.708 L1292.36 691.708 L1292.92 691.708 L1293.48 691.708 L1294.04 691.708 L1294.6 691.708 L1295.16 691.708 L1295.72 691.708 L1296.28 691.708 L1296.83 691.708 L1297.39 691.708 L1297.95 691.708 L1298.51 691.708 L1299.07 691.708 L1299.63 691.708 L1300.19 691.708 L1300.75 691.708 L1301.31 691.708 L1301.87 691.708 L1302.43 691.708 L1302.99 691.708 L1303.55 691.708 L1304.1 691.708 L1304.66 691.708 L1305.22 691.708 L1305.78 691.708 L1306.34 691.708 L1306.9 691.708 L1307.46 691.708 L1308.02 691.708 L1308.58 691.708 L1309.14 691.708 L1309.7 691.708 L1310.26 691.708 L1310.82 691.708 L1311.38 691.708 L1311.93 691.708 L1312.49 691.708 L1313.05 691.708 L1313.61 691.708 L1314.17 691.708 L1314.73 691.708 L1315.29 691.708 L1315.85 691.708 L1316.41 691.708 L1316.97 691.708 L1317.53 691.708 L1318.09 691.708 L1318.65 691.708 L1319.2 691.708 L1319.76 691.708 L1320.32 691.708 L1320.88 691.708 L1321.44 691.708 L1322 691.708 L1322.56 691.708 L1323.12 691.708 L1323.68 691.708 L1324.24 691.708 L1324.8 691.708 L1325.36 691.708 L1325.92 691.708 L1326.47 691.708 L1327.03 691.708 L1327.59 691.708 L1328.15 691.708 L1328.71 691.708 L1329.27 691.708 L1329.83 691.708 L1330.39 691.708 L1330.95 691.708 L1331.51 691.708 L1332.07 691.708 L1332.63 691.708 L1333.19 691.708 L1333.75 691.708 L1334.3 691.708 L1334.86 691.708 L1335.42 691.708 L1335.98 691.708 L1336.54 691.708 L1337.1 691.708 L1337.66 691.708 L1338.22 691.708 L1338.78 691.708 L1339.34 691.708 L1339.9 691.708 L1340.46 691.708 L1341.02 691.708 L1341.57 691.708 L1342.13 691.708 L1342.69 691.708 L1343.25 691.708 L1343.81 691.708 L1344.37 691.708 L1344.93 691.708 L1345.49 691.708 L1346.05 691.708 L1346.61 691.708 L1347.17 691.708 L1347.73 691.708 L1348.29 691.708 L1348.84 691.708 L1349.4 691.708 L1349.96 691.708 L1350.52 691.708 L1351.08 691.708 L1351.64 691.708 L1352.2 691.708 L1352.76 691.708 L1353.32 691.708 L1353.88 691.708 L1354.44 691.708 L1355 691.708 L1355.56 691.708 L1356.12 691.708 L1356.67 691.708 L1357.23 691.708 L1357.79 691.708 L1358.35 691.708 L1358.91 691.708 L1359.47 691.708 L1360.03 691.708 L1360.59 691.708 L1361.15 691.708 L1361.71 691.708 L1362.27 691.708 L1362.83 691.708 L1363.39 691.708 L1363.94 691.708 L1364.5 691.708 L1365.06 691.708 L1365.62 691.708 L1366.18 691.708 L1366.74 691.708 L1367.3 691.708 L1367.86 691.708 L1368.42 691.708 L1368.98 691.708 L1369.54 691.708 L1370.1 691.708 L1370.66 691.708 L1371.21 691.708 L1371.77 691.708 L1372.33 691.708 L1372.89 691.708 L1373.45 691.708 L1374.01 691.708 L1374.57 691.708 L1375.13 691.708 L1375.69 691.708 L1376.25 691.708 L1376.81 691.708 L1377.37 691.708 L1377.93 691.708 L1378.49 691.708 L1379.04 691.708 L1379.6 691.708 L1380.16 691.708 L1380.72 691.708 L1381.28 691.708 L1381.84 691.708 L1382.4 691.708 L1382.96 691.708 L1383.52 691.708 L1384.08 691.708 L1384.64 691.708 L1385.2 691.708 L1385.76 691.708 L1386.31 691.708 L1386.87 691.708 L1387.43 691.708 L1387.99 691.708 L1388.55 691.708 L1389.11 691.708 L1389.67 691.708 L1390.23 691.708 L1390.79 691.708 L1391.35 691.708 L1391.91 691.708 L1392.47 691.708 L1393.03 691.708 L1393.58 691.708 L1394.14 691.708 L1394.7 691.708 L1395.26 691.708 L1395.82 691.708 L1396.38 691.708 L1396.94 691.708 L1397.5 691.708 L1398.06 691.708 L1398.62 691.708 L1399.18 691.708 L1399.74 691.708 L1400.3 691.708 L1400.86 691.708 L1401.41 691.708 L1401.97 691.708 L1402.53 691.708 L1403.09 691.708 L1403.65 691.708 L1404.21 691.708 L1404.77 691.708 L1405.33 691.708 L1405.89 691.708 L1406.45 691.708 L1407.01 691.708 L1407.57 691.708 L1408.13 691.708 L1408.68 691.708 L1409.24 691.708 L1409.8 691.708 L1410.36 691.708 L1410.92 691.708 L1411.48 691.708 L1412.04 691.708 L1412.6 691.708 L1413.16 691.708 L1413.72 691.708 L1414.28 691.708 L1414.84 691.708 L1415.4 691.708 L1415.95 691.708 L1416.51 691.708 L1417.07 691.708 L1417.63 691.708 L1418.19 691.708 L1418.75 691.708 L1419.31 691.708 L1419.87 691.708 L1420.43 691.708 L1420.99 691.708 L1421.55 691.708 L1422.11 691.708 L1422.67 691.708 L1423.23 691.708 L1423.78 691.708 L1424.34 691.708 L1424.9 691.708 L1425.46 691.708 L1426.02 691.708 L1426.58 691.708 L1427.14 691.708 L1427.7 691.708 L1428.26 691.708 L1428.82 691.708 L1429.38 691.708 L1429.94 691.708 L1430.5 691.708 L1431.05 691.708 L1431.61 691.708 L1432.17 691.708 L1432.73 691.708 L1433.29 691.708 L1433.85 691.708 L1434.41 691.708 L1434.97 691.708 L1435.53 691.708 L1436.09 691.708 L1436.65 691.708 L1437.21 691.708 L1437.77 691.708 L1438.33 691.708 L1438.88 691.708 L1439.44 691.708 L1440 691.708 L1440.56 691.708 L1441.12 691.708 L1441.68 691.708 L1442.24 691.708 L1442.8 691.708 L1443.36 691.708 L1443.92 691.708 L1444.48 691.708 L1445.04 691.708 L1445.6 691.708 L1446.15 691.708 L1446.71 691.708 L1447.27 691.708 L1447.83 691.708 L1448.39 691.708 L1448.95 691.708 L1449.51 691.708 L1450.07 691.708 L1450.63 691.708 L1451.19 691.708 L1451.75 691.708 L1452.31 691.708 L1452.87 691.708 L1453.42 691.708 L1453.98 691.708 L1454.54 691.708 L1455.1 691.708 L1455.66 691.708 L1456.22 691.708 L1456.78 691.708 L1457.34 691.708 L1457.9 691.708 L1458.46 691.708 L1459.02 691.708 L1459.58 691.708 L1460.14 691.708 L1460.7 691.708 L1461.25 691.708 L1461.81 691.708 L1462.37 691.708 L1462.93 691.708 L1463.49 691.708 L1464.05 691.708 L1464.61 691.708 L1465.17 691.708 L1465.73 691.708 L1466.29 691.708 L1466.85 691.708 L1467.41 691.708 L1467.97 691.708 L1468.52 691.708 L1469.08 691.708 L1469.64 691.708 L1470.2 691.708 L1470.76 691.708 L1471.32 691.708 L1471.88 691.708 L1472.44 691.708 L1473 691.708 L1473.56 691.708 L1474.12 691.708 L1474.68 691.708 L1475.24 691.708 L1475.79 691.708 L1476.35 691.708 L1476.91 691.708 L1477.47 691.708 L1478.03 691.708 L1478.59 691.708 L1479.15 691.708 L1479.71 691.708 L1480.27 691.708 L1480.83 691.708 L1481.39 691.708 L1481.95 691.708 L1482.51 691.708 L1483.07 691.708 L1483.62 691.708 L1484.18 691.708 L1484.74 691.708 L1485.3 691.708 L1485.86 691.708 L1486.42 691.708 L1486.98 691.708 L1487.54 691.708 L1488.1 691.708 L1488.66 691.708 L1489.22 691.708 L1489.78 691.708 L1490.34 691.708 L1490.89 691.708 L1491.45 691.708 L1492.01 691.708 L1492.57 691.708 L1493.13 691.708 L1493.69 691.708 L1494.25 691.708 L1494.81 691.708 L1495.37 691.708 L1495.93 691.708 L1496.49 691.708 L1497.05 691.708 L1497.61 691.708 L1498.16 691.708 L1498.72 691.708 L1499.28 691.708 L1499.84 691.708 L1500.4 691.708 L1500.96 691.708 L1501.52 691.708 L1502.08 691.708 L1502.64 691.708 L1503.2 691.708 L1503.76 691.708 L1504.32 691.708 L1504.88 691.708 L1505.44 691.708 L1505.99 691.708 L1506.55 691.708 L1507.11 691.708 L1507.67 691.708 L1508.23 691.708 L1508.79 691.708 L1509.35 691.708 L1509.91 691.708 L1510.47 691.708 L1511.03 691.708 L1511.59 691.708 L1512.15 691.708 L1512.71 691.708 L1513.26 691.708 L1513.82 691.708 L1514.38 691.708 L1514.94 691.708 L1515.5 691.708 L1516.06 691.708 L1516.62 691.708 L1517.18 691.708 L1517.74 691.708 L1518.3 691.708 L1518.86 691.708 L1519.42 691.708 L1519.98 691.708 L1520.53 691.708 L1521.09 691.708 L1521.65 691.708 L1522.21 691.708 L1522.77 691.708 L1523.33 691.708 L1523.89 691.708 L1524.45 691.708 L1525.01 691.708 L1525.57 691.708 L1526.13 691.708 L1526.69 691.708 L1527.25 691.708 L1527.81 691.708 L1528.36 691.708 L1528.92 691.708 L1529.48 691.708 L1530.04 691.708 L1530.6 691.708 L1531.16 691.708 L1531.72 691.708 L1532.28 691.708 L1532.84 691.708 L1533.4 691.708 L1533.96 691.708 L1534.52 691.708 L1535.08 691.708 L1535.63 691.708 L1536.19 691.708 L1536.75 691.708 L1537.31 691.708 L1537.87 691.708 L1538.43 691.708 L1538.99 691.708 L1539.55 691.708 L1540.11 691.708 L1540.67 691.708 L1541.23 691.708 L1541.79 691.708 L1542.35 691.708 L1542.9 691.708 L1543.46 691.708 L1544.02 691.708 L1544.58 691.708 L1545.14 691.708 L1545.7 691.708 L1546.26 691.708 L1546.82 691.708 L1547.38 691.708 L1547.94 691.708 L1548.5 691.708 L1549.06 691.708 L1549.62 691.708 L1550.18 691.708 L1550.73 691.708 L1551.29 691.708 L1551.85 691.708 L1552.41 691.708 L1552.97 691.708 L1553.53 691.708 L1554.09 691.708 L1554.65 691.708 L1555.21 691.708 L1555.77 691.708 L1556.33 691.708 L1556.89 691.708 L1557.45 691.708 L1558 691.708 L1558.56 691.708 L1559.12 691.708 L1559.68 691.708 L1560.24 691.708 L1560.8 691.708 L1561.36 691.708 L1561.92 691.708 L1562.48 691.708 L1563.04 691.708 L1563.6 691.708 L1564.16 691.708 L1564.72 691.708 L1565.28 691.708 L1565.83 691.708 L1566.39 691.708 L1566.95 691.708 L1567.51 691.708 L1568.07 691.708 L1568.63 691.708 L1569.19 691.708 L1569.75 691.708 L1570.31 691.708 L1570.87 691.708 L1571.43 691.708 L1571.99 691.708 L1572.55 691.708 L1573.1 691.708 L1573.66 691.708 L1574.22 691.708 L1574.78 691.708 L1575.34 691.708 L1575.9 691.708 L1576.46 691.708 L1577.02 691.708 L1577.58 691.708 L1578.14 691.708 L1578.7 691.708 L1579.26 691.708 L1579.82 691.708 L1580.37 691.708 L1580.93 691.708 L1581.49 691.708 L1582.05 691.708 L1582.61 691.708 L1583.17 691.708 L1583.73 691.708 L1584.29 691.708 L1584.85 691.708 L1585.41 691.708 L1585.97 691.708 L1586.53 691.708 L1587.09 691.708 L1587.65 691.708 L1588.2 691.708 L1588.76 691.708 L1589.32 691.708 L1589.88 691.708 L1590.44 691.708 L1591 691.708 L1591.56 691.708 L1592.12 691.708 L1592.68 691.708 L1593.24 691.708 L1593.8 691.708 L1594.36 691.708 L1594.92 691.708 L1595.47 691.708 L1596.03 691.708 L1596.59 691.708 L1597.15 691.708 L1597.71 691.708 L1598.27 691.708 L1598.83 691.708 L1599.39 691.708 L1599.95 691.708 L1600.51 691.708 L1601.07 691.708 L1601.63 691.708 L1602.19 691.708 L1602.74 691.708 L1603.3 691.708 L1603.86 691.708 L1604.42 691.708 L1604.98 691.708 L1605.54 691.708 L1606.1 691.708 L1606.66 691.708 L1607.22 691.708 L1607.78 691.708 L1608.34 691.708 L1608.9 691.708 L1609.46 691.708 L1610.02 691.708 L1610.57 691.708 L1611.13 691.708 L1611.69 691.708 L1612.25 691.708 L1612.81 691.708 L1613.37 691.708 L1613.93 691.708 L1614.49 691.708 L1615.05 691.708 L1615.61 691.708 L1616.17 691.708 L1616.73 691.708 L1617.29 691.708 L1617.84 691.708 L1618.4 691.708 L1618.96 691.708 L1619.52 691.708 L1620.08 691.708 L1620.64 691.708 L1621.2 691.708 L1621.76 691.708 L1622.32 691.708 L1622.88 691.708 L1623.44 691.708 L1624 691.708 L1624.56 691.708 L1625.11 691.708 L1625.67 691.708 L1626.23 691.708 L1626.79 691.708 L1627.35 691.708 L1627.91 691.708 L1628.47 691.708 L1629.03 691.708 L1629.59 691.708 L1630.15 691.708 L1630.71 691.708 L1631.27 691.708 L1631.83 691.708 L1632.39 691.708 L1632.94 691.708 L1633.5 691.708 L1634.06 691.708 L1634.62 691.708 L1635.18 691.708 L1635.74 691.708 L1636.3 691.708 L1636.86 691.708 L1637.42 691.708 L1637.98 691.708 L1638.54 691.708 L1639.1 691.708 L1639.66 691.708 L1640.21 691.708 L1640.77 691.708 L1641.33 691.708 L1641.89 691.708 L1642.45 691.708 L1643.01 691.708 L1643.57 691.708 L1644.13 691.708 L1644.69 691.708 L1645.25 691.708 L1645.81 691.708 L1646.37 691.708 L1646.93 691.708 L1647.48 691.708 L1648.04 691.708 L1648.6 691.708 L1649.16 691.708 L1649.72 691.708 L1650.28 691.708 L1650.84 691.708 L1651.4 691.708 L1651.96 691.708 L1652.52 691.708 L1653.08 691.708 L1653.64 691.708 L1654.2 691.708 L1654.76 691.708 L1655.31 691.708 L1655.87 691.708 L1656.43 691.708 L1656.99 691.708 L1657.55 691.708 L1658.11 691.708 L1658.67 691.708 L1659.23 691.708 L1659.79 691.708 L1660.35 691.708 L1660.91 691.708 L1661.47 691.708 L1662.03 691.708 L1662.58 691.708 L1663.14 691.708 L1663.7 691.708 L1664.26 691.708 L1664.82 691.708 L1665.38 691.708 L1665.94 691.708 L1666.5 691.708 L1667.06 691.708 L1667.62 691.708 L1668.18 691.708 L1668.74 691.708 L1669.3 691.708 L1669.85 691.708 L1670.41 691.708 L1670.97 691.708 L1671.53 691.708 L1672.09 691.708 L1672.65 691.708 L1673.21 691.708 L1673.77 691.708 L1674.33 691.708 L1674.89 691.708 L1675.45 691.708 L1676.01 691.708 L1676.57 691.708 L1677.13 691.708 L1677.68 691.708 L1678.24 691.708 L1678.8 691.708 L1679.36 691.708 L1679.92 691.708 L1680.48 691.708 L1681.04 691.708 L1681.6 691.708 L1682.16 691.708 L1682.72 691.708 L1683.28 691.708 L1683.84 691.708 L1684.4 691.708 L1684.95 691.708 L1685.51 691.708 L1686.07 691.708 L1686.63 691.708 L1687.19 691.708 L1687.75 691.708 L1688.31 691.708 L1688.87 691.708 L1689.43 691.708 L1689.99 691.708 L1690.55 691.708 L1691.11 691.708 L1691.67 691.708 L1692.23 691.708 L1692.78 691.708 L1693.34 691.708 L1693.9 691.708 L1694.46 691.708 L1695.02 691.708 L1695.58 691.708 L1696.14 691.708 L1696.7 691.708 L1697.26 691.708 L1697.82 691.708 L1698.38 691.708 L1698.94 691.708 L1699.5 691.708 L1700.05 691.708 L1700.61 691.708 L1701.17 691.708 L1701.73 691.708 L1702.29 691.708 L1702.85 691.708 L1703.41 691.708 L1703.97 691.708 L1704.53 691.708 L1705.09 691.708 L1705.65 691.708 L1706.21 691.708 L1706.77 691.708 L1707.32 691.708 L1707.88 691.708 L1708.44 691.708 L1709 691.708 L1709.56 691.708 L1710.12 691.708 L1710.68 691.708 L1711.24 691.708 L1711.8 691.708 L1712.36 691.708 L1712.92 691.708 L1713.48 691.708 L1714.04 691.708 L1714.6 691.708 L1715.15 691.708 L1715.71 691.708 L1716.27 691.708 L1716.83 691.708 L1717.39 691.708 L1717.95 691.708 L1718.51 691.708 L1719.07 691.708 L1719.63 691.708 L1720.19 691.708 L1720.75 691.708 L1721.31 691.708 L1721.87 691.708 L1722.42 691.708 L1722.98 691.708 L1723.54 691.708 L1724.1 691.708 L1724.66 691.708 L1725.22 691.708 L1725.78 691.708 L1726.34 691.708 L1726.9 691.708 L1727.46 691.708 L1728.02 691.708 L1728.58 691.708 L1729.14 691.708 L1729.69 691.708 L1730.25 691.708 L1730.81 691.708 L1731.37 691.708 L1731.93 691.708 L1732.49 691.708 L1733.05 691.708 L1733.61 691.708 L1734.17 691.708 L1734.73 691.708 L1735.29 691.708 L1735.85 691.708 L1736.41 691.708 L1736.97 691.708 L1737.52 691.708 L1738.08 691.708 L1738.64 691.708 L1739.2 691.708 L1739.76 691.708 L1740.32 691.708 L1740.88 691.708 L1741.44 691.708 L1742 691.708 L1742.56 691.708 L1743.12 691.708 L1743.68 691.708 L1744.24 691.708 L1744.79 691.708 L1745.35 691.708 L1745.91 691.708 L1746.47 691.708 L1747.03 691.708 L1747.59 691.708 L1748.15 691.708 L1748.71 691.708 L1749.27 691.708 L1749.83 691.708 L1750.39 691.708 L1750.95 691.708 L1751.51 691.708 L1752.06 691.708 L1752.62 691.708 L1753.18 691.708 L1753.74 691.708 L1754.3 691.708 L1754.86 691.708 L1755.42 691.708 L1755.98 691.708 L1756.54 691.708 L1757.1 691.708 L1757.66 691.708 L1758.22 691.708 L1758.78 691.708 L1759.34 691.708 L1759.89 691.708 L1760.45 691.708 L1761.01 691.708 L1761.57 691.708 L1762.13 691.708 L1762.69 691.708 L1763.25 691.708 L1763.81 691.708 L1764.37 691.708 L1764.93 691.708 L1765.49 691.708 L1766.05 691.708 L1766.61 691.708 L1767.16 691.708 L1767.72 691.708 L1768.28 691.708 L1768.84 691.708 L1769.4 691.708 L1769.96 691.708 L1770.52 691.708 L1771.08 691.708 L1771.64 691.708 L1772.2 691.708 L1772.76 691.708 L1773.32 691.708 L1773.88 691.708 L1774.43 691.708 L1774.99 691.708 L1775.55 691.708 L1776.11 691.708 L1776.67 691.708 L1777.23 691.708 L1777.79 691.708 L1778.35 691.708 L1778.91 691.708 L1779.47 691.708 L1780.03 691.708 L1780.59 691.708 L1781.15 691.708 L1781.71 691.708 L1782.26 691.708 L1782.82 691.708 L1783.38 691.708 L1783.94 691.708 L1784.5 691.708 L1785.06 691.708 L1785.62 691.708 L1786.18 691.708 L1786.74 691.708 L1787.3 691.708 L1787.86 691.708 L1788.42 691.708 L1788.98 691.708 L1789.53 691.708 L1790.09 691.708 L1790.65 691.708 L1791.21 691.708 L1791.77 691.708 L1792.33 691.708 L1792.89 691.708 L1793.45 691.708 L1794.01 691.708 L1794.57 691.708 L1795.13 691.708 L1795.69 691.708 L1796.25 691.708 L1796.8 691.708 L1797.36 691.708 L1797.92 691.708 L1798.48 691.708 L1799.04 691.708 L1799.6 691.708 L1800.16 691.708 L1800.72 691.708 L1801.28 691.708 L1801.84 691.708 L1802.4 691.708 L1802.96 691.708 L1803.52 691.708 L1804.08 691.708 L1804.63 691.708 L1805.19 691.708 L1805.75 691.708 L1806.31 691.708 L1806.87 691.708 L1807.43 691.708 L1807.99 691.708 L1808.55 691.708 L1809.11 691.708 L1809.67 691.708 L1810.23 691.708 L1810.79 691.708 L1811.35 691.708 L1811.9 691.708 L1812.46 691.708 L1813.02 691.708 L1813.58 691.708 L1814.14 691.708 L1814.7 691.708 L1815.26 691.708 L1815.82 691.708 L1816.38 691.708 L1816.94 691.708 L1817.5 691.708 L1818.06 691.708 L1818.62 691.708 L1819.18 691.708 L1819.73 691.708 L1820.29 691.708 L1820.85 691.708 L1821.41 691.708 L1821.97 691.708 L1822.53 691.708 L1823.09 691.708 L1823.65 691.708 L1824.21 691.708 L1824.77 691.708 L1825.33 691.708 L1825.89 691.708 L1826.45 691.708 L1827 691.708 L1827.56 691.708 L1828.12 691.708 L1828.68 691.708 L1829.24 691.708 L1829.8 691.708 L1830.36 691.708 L1830.92 691.708 L1831.48 691.708 L1832.04 691.708 L1832.6 691.708 L1833.16 691.708 L1833.72 691.708 L1834.27 691.708 L1834.83 691.708 L1835.39 691.708 L1835.95 691.708 L1836.51 691.708 L1837.07 691.708 L1837.63 691.708 L1838.19 691.708 L1838.19 681.549 L1837.63 681.549 L1837.07 681.549 L1836.51 681.549 L1835.95 681.549 L1835.39 681.549 L1834.83 681.549 L1834.27 681.549 L1833.72 681.549 L1833.16 681.549 L1832.6 681.549 L1832.04 681.549 L1831.48 681.549 L1830.92 681.549 L1830.36 681.549 L1829.8 681.549 L1829.24 681.549 L1828.68 681.549 L1828.12 681.549 L1827.56 681.549 L1827 681.549 L1826.45 681.549 L1825.89 681.549 L1825.33 681.549 L1824.77 681.549 L1824.21 681.549 L1823.65 681.549 L1823.09 681.549 L1822.53 681.549 L1821.97 681.549 L1821.41 681.549 L1820.85 681.549 L1820.29 681.549 L1819.73 681.549 L1819.18 681.549 L1818.62 681.549 L1818.06 681.549 L1817.5 681.549 L1816.94 681.549 L1816.38 681.549 L1815.82 681.549 L1815.26 681.549 L1814.7 681.549 L1814.14 681.549 L1813.58 681.549 L1813.02 681.549 L1812.46 681.549 L1811.9 681.549 L1811.35 681.549 L1810.79 681.549 L1810.23 681.549 L1809.67 681.549 L1809.11 681.549 L1808.55 681.549 L1807.99 681.549 L1807.43 681.549 L1806.87 681.549 L1806.31 681.549 L1805.75 681.549 L1805.19 681.549 L1804.63 681.549 L1804.08 681.549 L1803.52 681.549 L1802.96 681.549 L1802.4 681.549 L1801.84 681.549 L1801.28 681.549 L1800.72 681.549 L1800.16 681.549 L1799.6 681.549 L1799.04 681.549 L1798.48 681.549 L1797.92 681.549 L1797.36 681.549 L1796.8 681.549 L1796.25 681.549 L1795.69 681.549 L1795.13 681.549 L1794.57 681.549 L1794.01 681.549 L1793.45 681.549 L1792.89 681.549 L1792.33 681.549 L1791.77 681.549 L1791.21 681.549 L1790.65 681.549 L1790.09 681.549 L1789.53 681.549 L1788.98 681.549 L1788.42 681.549 L1787.86 681.549 L1787.3 681.549 L1786.74 681.549 L1786.18 681.549 L1785.62 681.549 L1785.06 681.549 L1784.5 681.549 L1783.94 681.549 L1783.38 681.549 L1782.82 681.549 L1782.26 681.549 L1781.71 681.549 L1781.15 681.549 L1780.59 681.549 L1780.03 681.549 L1779.47 681.549 L1778.91 681.549 L1778.35 681.549 L1777.79 681.549 L1777.23 681.549 L1776.67 681.549 L1776.11 681.549 L1775.55 681.549 L1774.99 681.549 L1774.43 681.549 L1773.88 681.549 L1773.32 681.549 L1772.76 681.549 L1772.2 681.549 L1771.64 681.549 L1771.08 681.549 L1770.52 681.549 L1769.96 681.549 L1769.4 681.549 L1768.84 681.549 L1768.28 681.549 L1767.72 681.549 L1767.16 681.549 L1766.61 681.549 L1766.05 681.549 L1765.49 681.549 L1764.93 681.549 L1764.37 681.549 L1763.81 681.549 L1763.25 681.549 L1762.69 681.549 L1762.13 681.549 L1761.57 681.549 L1761.01 681.549 L1760.45 681.549 L1759.89 681.549 L1759.34 681.549 L1758.78 681.549 L1758.22 681.549 L1757.66 681.549 L1757.1 681.549 L1756.54 681.549 L1755.98 681.549 L1755.42 681.549 L1754.86 681.549 L1754.3 681.549 L1753.74 681.549 L1753.18 681.549 L1752.62 681.549 L1752.06 681.549 L1751.51 681.549 L1750.95 681.549 L1750.39 681.549 L1749.83 681.549 L1749.27 681.549 L1748.71 681.549 L1748.15 681.549 L1747.59 681.549 L1747.03 681.549 L1746.47 681.549 L1745.91 681.549 L1745.35 681.549 L1744.79 681.549 L1744.24 681.549 L1743.68 681.549 L1743.12 681.549 L1742.56 681.549 L1742 681.549 L1741.44 681.549 L1740.88 681.549 L1740.32 681.549 L1739.76 681.549 L1739.2 681.549 L1738.64 681.549 L1738.08 681.549 L1737.52 681.549 L1736.97 681.549 L1736.41 681.549 L1735.85 681.549 L1735.29 681.549 L1734.73 681.549 L1734.17 681.549 L1733.61 681.549 L1733.05 681.549 L1732.49 681.549 L1731.93 681.549 L1731.37 681.549 L1730.81 681.549 L1730.25 681.549 L1729.69 681.549 L1729.14 681.549 L1728.58 681.549 L1728.02 681.549 L1727.46 681.549 L1726.9 681.549 L1726.34 681.549 L1725.78 681.549 L1725.22 681.549 L1724.66 681.549 L1724.1 681.549 L1723.54 681.549 L1722.98 681.549 L1722.42 681.549 L1721.87 681.549 L1721.31 681.549 L1720.75 681.549 L1720.19 681.549 L1719.63 681.549 L1719.07 681.549 L1718.51 681.549 L1717.95 681.549 L1717.39 681.549 L1716.83 681.549 L1716.27 681.549 L1715.71 681.549 L1715.15 681.549 L1714.6 681.549 L1714.04 681.549 L1713.48 681.549 L1712.92 681.549 L1712.36 681.549 L1711.8 681.549 L1711.24 681.549 L1710.68 681.549 L1710.12 681.549 L1709.56 681.549 L1709 681.549 L1708.44 681.549 L1707.88 681.549 L1707.32 681.549 L1706.77 681.549 L1706.21 681.549 L1705.65 681.549 L1705.09 681.549 L1704.53 681.549 L1703.97 681.549 L1703.41 681.549 L1702.85 681.549 L1702.29 681.549 L1701.73 681.549 L1701.17 681.549 L1700.61 681.549 L1700.05 681.549 L1699.5 681.549 L1698.94 681.549 L1698.38 681.549 L1697.82 681.549 L1697.26 681.549 L1696.7 681.549 L1696.14 681.549 L1695.58 681.549 L1695.02 681.549 L1694.46 681.549 L1693.9 681.549 L1693.34 681.549 L1692.78 681.549 L1692.23 681.549 L1691.67 681.549 L1691.11 681.549 L1690.55 681.549 L1689.99 681.549 L1689.43 681.549 L1688.87 681.549 L1688.31 681.549 L1687.75 681.549 L1687.19 681.549 L1686.63 681.549 L1686.07 681.549 L1685.51 681.549 L1684.95 681.549 L1684.4 681.549 L1683.84 681.549 L1683.28 681.549 L1682.72 681.549 L1682.16 681.549 L1681.6 681.549 L1681.04 681.549 L1680.48 681.549 L1679.92 681.549 L1679.36 681.549 L1678.8 681.549 L1678.24 681.549 L1677.68 681.549 L1677.13 681.549 L1676.57 681.549 L1676.01 681.549 L1675.45 681.549 L1674.89 681.549 L1674.33 681.549 L1673.77 681.549 L1673.21 681.549 L1672.65 681.549 L1672.09 681.549 L1671.53 681.549 L1670.97 681.549 L1670.41 681.549 L1669.85 681.549 L1669.3 681.549 L1668.74 681.549 L1668.18 681.549 L1667.62 681.549 L1667.06 681.549 L1666.5 681.549 L1665.94 681.549 L1665.38 681.549 L1664.82 681.549 L1664.26 681.549 L1663.7 681.549 L1663.14 681.549 L1662.58 681.549 L1662.03 681.549 L1661.47 681.549 L1660.91 681.549 L1660.35 681.549 L1659.79 681.549 L1659.23 681.549 L1658.67 681.549 L1658.11 681.549 L1657.55 681.549 L1656.99 681.549 L1656.43 681.549 L1655.87 681.549 L1655.31 681.549 L1654.76 681.549 L1654.2 681.549 L1653.64 681.549 L1653.08 681.549 L1652.52 681.549 L1651.96 681.549 L1651.4 681.549 L1650.84 681.549 L1650.28 681.549 L1649.72 681.549 L1649.16 681.549 L1648.6 681.549 L1648.04 681.549 L1647.48 681.549 L1646.93 681.549 L1646.37 681.549 L1645.81 681.549 L1645.25 681.549 L1644.69 681.549 L1644.13 681.549 L1643.57 681.549 L1643.01 681.549 L1642.45 681.549 L1641.89 681.549 L1641.33 681.549 L1640.77 681.549 L1640.21 681.549 L1639.66 681.549 L1639.1 681.549 L1638.54 681.549 L1637.98 681.549 L1637.42 681.549 L1636.86 681.549 L1636.3 681.549 L1635.74 681.549 L1635.18 681.549 L1634.62 681.549 L1634.06 681.549 L1633.5 681.549 L1632.94 681.549 L1632.39 681.549 L1631.83 681.549 L1631.27 681.549 L1630.71 681.549 L1630.15 681.549 L1629.59 681.549 L1629.03 681.549 L1628.47 681.549 L1627.91 681.549 L1627.35 681.549 L1626.79 681.549 L1626.23 681.549 L1625.67 681.549 L1625.11 681.549 L1624.56 681.549 L1624 681.549 L1623.44 681.549 L1622.88 681.549 L1622.32 681.549 L1621.76 681.549 L1621.2 681.549 L1620.64 681.549 L1620.08 681.549 L1619.52 681.549 L1618.96 681.549 L1618.4 681.549 L1617.84 681.549 L1617.29 681.549 L1616.73 681.549 L1616.17 681.549 L1615.61 681.549 L1615.05 681.549 L1614.49 681.549 L1613.93 681.549 L1613.37 681.549 L1612.81 681.549 L1612.25 681.549 L1611.69 681.549 L1611.13 681.549 L1610.57 681.549 L1610.02 681.549 L1609.46 681.549 L1608.9 681.549 L1608.34 681.549 L1607.78 681.549 L1607.22 681.549 L1606.66 681.549 L1606.1 681.549 L1605.54 681.549 L1604.98 681.549 L1604.42 681.549 L1603.86 681.549 L1603.3 681.549 L1602.74 681.549 L1602.19 681.549 L1601.63 681.549 L1601.07 681.549 L1600.51 681.549 L1599.95 681.549 L1599.39 681.549 L1598.83 681.549 L1598.27 681.549 L1597.71 681.549 L1597.15 681.549 L1596.59 681.549 L1596.03 681.549 L1595.47 681.549 L1594.92 681.549 L1594.36 681.549 L1593.8 681.549 L1593.24 681.549 L1592.68 681.549 L1592.12 681.549 L1591.56 681.549 L1591 681.549 L1590.44 681.549 L1589.88 681.549 L1589.32 681.549 L1588.76 681.549 L1588.2 681.549 L1587.65 681.549 L1587.09 681.549 L1586.53 681.549 L1585.97 681.549 L1585.41 681.549 L1584.85 681.549 L1584.29 681.549 L1583.73 681.549 L1583.17 681.549 L1582.61 681.549 L1582.05 681.549 L1581.49 681.549 L1580.93 681.549 L1580.37 681.549 L1579.82 681.549 L1579.26 681.549 L1578.7 681.549 L1578.14 681.549 L1577.58 681.549 L1577.02 681.549 L1576.46 681.549 L1575.9 681.549 L1575.34 681.549 L1574.78 681.549 L1574.22 681.549 L1573.66 681.549 L1573.1 681.549 L1572.55 681.549 L1571.99 681.549 L1571.43 681.549 L1570.87 681.549 L1570.31 681.549 L1569.75 681.549 L1569.19 681.549 L1568.63 681.549 L1568.07 681.549 L1567.51 681.549 L1566.95 681.549 L1566.39 681.549 L1565.83 681.549 L1565.28 681.549 L1564.72 681.549 L1564.16 681.549 L1563.6 681.549 L1563.04 681.549 L1562.48 681.549 L1561.92 681.549 L1561.36 681.549 L1560.8 681.549 L1560.24 681.549 L1559.68 681.549 L1559.12 681.549 L1558.56 681.549 L1558 681.549 L1557.45 681.549 L1556.89 681.549 L1556.33 681.549 L1555.77 681.549 L1555.21 681.549 L1554.65 681.549 L1554.09 681.549 L1553.53 681.549 L1552.97 681.549 L1552.41 681.549 L1551.85 681.549 L1551.29 681.549 L1550.73 681.549 L1550.18 681.549 L1549.62 681.549 L1549.06 681.549 L1548.5 681.549 L1547.94 681.549 L1547.38 681.549 L1546.82 681.549 L1546.26 681.549 L1545.7 681.549 L1545.14 681.549 L1544.58 681.549 L1544.02 681.549 L1543.46 681.549 L1542.9 681.549 L1542.35 681.549 L1541.79 681.549 L1541.23 681.549 L1540.67 681.549 L1540.11 681.549 L1539.55 681.549 L1538.99 681.549 L1538.43 681.549 L1537.87 681.549 L1537.31 681.549 L1536.75 681.549 L1536.19 681.549 L1535.63 681.549 L1535.08 681.549 L1534.52 681.549 L1533.96 681.549 L1533.4 681.549 L1532.84 681.549 L1532.28 681.549 L1531.72 681.549 L1531.16 681.549 L1530.6 681.549 L1530.04 681.549 L1529.48 681.549 L1528.92 681.549 L1528.36 681.549 L1527.81 681.549 L1527.25 681.549 L1526.69 681.549 L1526.13 681.549 L1525.57 681.549 L1525.01 681.549 L1524.45 681.549 L1523.89 681.549 L1523.33 681.549 L1522.77 681.549 L1522.21 681.549 L1521.65 681.549 L1521.09 681.549 L1520.53 681.549 L1519.98 681.549 L1519.42 681.549 L1518.86 681.549 L1518.3 681.549 L1517.74 681.549 L1517.18 681.549 L1516.62 681.549 L1516.06 681.549 L1515.5 681.549 L1514.94 681.549 L1514.38 681.549 L1513.82 681.549 L1513.26 681.549 L1512.71 681.549 L1512.15 681.549 L1511.59 681.549 L1511.03 681.549 L1510.47 681.549 L1509.91 681.549 L1509.35 681.549 L1508.79 681.549 L1508.23 681.549 L1507.67 681.549 L1507.11 681.549 L1506.55 681.549 L1505.99 681.549 L1505.44 681.549 L1504.88 681.549 L1504.32 681.549 L1503.76 681.549 L1503.2 681.549 L1502.64 681.549 L1502.08 681.549 L1501.52 681.549 L1500.96 681.549 L1500.4 681.549 L1499.84 681.549 L1499.28 681.549 L1498.72 681.549 L1498.16 681.549 L1497.61 681.549 L1497.05 681.549 L1496.49 681.549 L1495.93 681.549 L1495.37 681.549 L1494.81 681.549 L1494.25 681.549 L1493.69 681.549 L1493.13 681.549 L1492.57 681.549 L1492.01 681.549 L1491.45 681.549 L1490.89 681.549 L1490.34 681.549 L1489.78 681.549 L1489.22 681.549 L1488.66 681.549 L1488.1 681.549 L1487.54 681.549 L1486.98 681.549 L1486.42 681.549 L1485.86 681.549 L1485.3 681.549 L1484.74 681.549 L1484.18 681.549 L1483.62 681.549 L1483.07 681.549 L1482.51 681.549 L1481.95 681.549 L1481.39 681.549 L1480.83 681.549 L1480.27 681.549 L1479.71 681.549 L1479.15 681.549 L1478.59 681.549 L1478.03 681.549 L1477.47 681.549 L1476.91 681.549 L1476.35 681.549 L1475.79 681.549 L1475.24 681.549 L1474.68 681.549 L1474.12 681.549 L1473.56 681.549 L1473 681.549 L1472.44 681.549 L1471.88 681.549 L1471.32 681.549 L1470.76 681.549 L1470.2 681.549 L1469.64 681.549 L1469.08 681.549 L1468.52 681.549 L1467.97 681.549 L1467.41 681.549 L1466.85 681.549 L1466.29 681.549 L1465.73 681.549 L1465.17 681.549 L1464.61 681.549 L1464.05 681.549 L1463.49 681.549 L1462.93 681.549 L1462.37 681.549 L1461.81 681.549 L1461.25 681.549 L1460.7 681.549 L1460.14 681.549 L1459.58 681.549 L1459.02 681.549 L1458.46 681.549 L1457.9 681.549 L1457.34 681.549 L1456.78 681.549 L1456.22 681.549 L1455.66 681.549 L1455.1 681.549 L1454.54 681.549 L1453.98 681.549 L1453.42 681.549 L1452.87 681.549 L1452.31 681.549 L1451.75 681.549 L1451.19 681.549 L1450.63 681.549 L1450.07 681.549 L1449.51 681.549 L1448.95 681.549 L1448.39 681.549 L1447.83 681.549 L1447.27 681.549 L1446.71 681.549 L1446.15 681.549 L1445.6 681.549 L1445.04 681.549 L1444.48 681.549 L1443.92 681.549 L1443.36 681.549 L1442.8 681.549 L1442.24 681.549 L1441.68 681.549 L1441.12 681.549 L1440.56 681.549 L1440 681.549 L1439.44 681.549 L1438.88 681.549 L1438.33 681.549 L1437.77 681.549 L1437.21 681.549 L1436.65 681.549 L1436.09 681.549 L1435.53 681.549 L1434.97 681.549 L1434.41 681.549 L1433.85 681.549 L1433.29 681.549 L1432.73 681.549 L1432.17 681.549 L1431.61 681.549 L1431.05 681.549 L1430.5 681.549 L1429.94 681.549 L1429.38 681.549 L1428.82 681.549 L1428.26 681.549 L1427.7 681.549 L1427.14 681.549 L1426.58 681.549 L1426.02 681.549 L1425.46 681.549 L1424.9 681.549 L1424.34 681.549 L1423.78 681.549 L1423.23 681.549 L1422.67 681.549 L1422.11 681.549 L1421.55 681.549 L1420.99 681.549 L1420.43 681.549 L1419.87 681.549 L1419.31 681.549 L1418.75 681.549 L1418.19 681.549 L1417.63 681.549 L1417.07 681.549 L1416.51 681.549 L1415.95 681.549 L1415.4 681.549 L1414.84 681.549 L1414.28 681.549 L1413.72 681.549 L1413.16 681.549 L1412.6 681.549 L1412.04 681.549 L1411.48 681.549 L1410.92 681.549 L1410.36 681.549 L1409.8 681.549 L1409.24 681.549 L1408.68 681.549 L1408.13 681.549 L1407.57 681.549 L1407.01 681.549 L1406.45 681.549 L1405.89 681.549 L1405.33 681.549 L1404.77 681.549 L1404.21 681.549 L1403.65 681.549 L1403.09 681.549 L1402.53 681.549 L1401.97 681.549 L1401.41 681.549 L1400.86 681.549 L1400.3 681.549 L1399.74 681.549 L1399.18 681.549 L1398.62 681.549 L1398.06 681.549 L1397.5 681.549 L1396.94 681.549 L1396.38 681.549 L1395.82 681.549 L1395.26 681.549 L1394.7 681.549 L1394.14 681.549 L1393.58 681.549 L1393.03 681.549 L1392.47 681.549 L1391.91 681.549 L1391.35 681.549 L1390.79 681.549 L1390.23 681.549 L1389.67 681.549 L1389.11 681.549 L1388.55 681.549 L1387.99 681.549 L1387.43 681.549 L1386.87 681.549 L1386.31 681.549 L1385.76 681.549 L1385.2 681.549 L1384.64 681.549 L1384.08 681.549 L1383.52 681.549 L1382.96 681.549 L1382.4 681.549 L1381.84 681.549 L1381.28 681.549 L1380.72 681.549 L1380.16 681.549 L1379.6 681.549 L1379.04 681.549 L1378.49 681.549 L1377.93 681.549 L1377.37 681.549 L1376.81 681.549 L1376.25 681.549 L1375.69 681.549 L1375.13 681.549 L1374.57 681.549 L1374.01 681.549 L1373.45 681.549 L1372.89 681.549 L1372.33 681.549 L1371.77 681.549 L1371.21 681.549 L1370.66 681.549 L1370.1 681.549 L1369.54 681.549 L1368.98 681.549 L1368.42 681.549 L1367.86 681.549 L1367.3 681.549 L1366.74 681.549 L1366.18 681.549 L1365.62 681.549 L1365.06 681.549 L1364.5 681.549 L1363.94 681.549 L1363.39 681.549 L1362.83 681.549 L1362.27 681.549 L1361.71 681.549 L1361.15 681.549 L1360.59 681.549 L1360.03 681.549 L1359.47 681.549 L1358.91 681.549 L1358.35 681.549 L1357.79 681.549 L1357.23 681.549 L1356.67 681.549 L1356.12 681.549 L1355.56 681.549 L1355 681.549 L1354.44 681.549 L1353.88 681.549 L1353.32 681.549 L1352.76 681.549 L1352.2 681.549 L1351.64 681.549 L1351.08 681.549 L1350.52 681.549 L1349.96 681.549 L1349.4 681.549 L1348.84 681.549 L1348.29 681.549 L1347.73 681.549 L1347.17 681.549 L1346.61 681.549 L1346.05 681.549 L1345.49 681.549 L1344.93 681.549 L1344.37 681.549 L1343.81 681.549 L1343.25 681.549 L1342.69 681.549 L1342.13 681.549 L1341.57 681.549 L1341.02 681.549 L1340.46 681.549 L1339.9 681.549 L1339.34 681.549 L1338.78 681.549 L1338.22 681.549 L1337.66 681.549 L1337.1 681.549 L1336.54 681.549 L1335.98 681.549 L1335.42 681.549 L1334.86 681.549 L1334.3 681.549 L1333.75 681.549 L1333.19 681.549 L1332.63 681.549 L1332.07 681.549 L1331.51 681.549 L1330.95 681.549 L1330.39 681.549 L1329.83 681.549 L1329.27 681.549 L1328.71 681.549 L1328.15 681.549 L1327.59 681.549 L1327.03 681.549 L1326.47 681.549 L1325.92 681.549 L1325.36 681.549 L1324.8 681.549 L1324.24 681.549 L1323.68 681.549 L1323.12 681.549 L1322.56 681.549 L1322 681.549 L1321.44 681.549 L1320.88 681.549 L1320.32 681.549 L1319.76 681.549 L1319.2 681.549 L1318.65 681.549 L1318.09 681.549 L1317.53 681.549 L1316.97 681.549 L1316.41 681.549 L1315.85 681.549 L1315.29 681.549 L1314.73 681.549 L1314.17 681.549 L1313.61 681.549 L1313.05 681.549 L1312.49 681.549 L1311.93 681.549 L1311.38 681.549 L1310.82 681.549 L1310.26 681.549 L1309.7 681.549 L1309.14 681.549 L1308.58 681.549 L1308.02 681.549 L1307.46 681.549 L1306.9 681.549 L1306.34 681.549 L1305.78 681.549 L1305.22 681.549 L1304.66 681.549 L1304.1 681.549 L1303.55 681.549 L1302.99 681.549 L1302.43 681.549 L1301.87 681.549 L1301.31 681.549 L1300.75 681.549 L1300.19 681.549 L1299.63 681.549 L1299.07 681.549 L1298.51 681.549 L1297.95 681.549 L1297.39 681.549 L1296.83 681.549 L1296.28 681.549 L1295.72 681.549 L1295.16 681.549 L1294.6 681.549 L1294.04 681.549 L1293.48 681.549 L1292.92 681.549 L1292.36 681.549 L1291.8 681.549 L1291.24 681.549 L1290.68 681.549 L1290.12 681.549 L1289.56 681.549 L1289 681.549 L1288.45 681.549 L1287.89 681.549 L1287.33 681.549 L1286.77 681.549 L1286.21 681.549 L1285.65 681.549 L1285.09 681.549 L1284.53 681.549 L1283.97 681.549 L1283.41 681.549 L1282.85 681.549 L1282.29 681.549 L1281.73 681.549 L1281.18 681.549 L1280.62 681.549 L1280.06 681.549 L1279.5 681.549 L1278.94 681.549 L1278.38 681.549 L1277.82 681.549 L1277.26 681.549 L1276.7 681.549 L1276.14 681.549 L1275.58 681.549 L1275.02 681.549 L1274.46 681.549 L1273.91 681.549 L1273.35 681.549 L1272.79 681.549 L1272.23 681.549 L1271.67 681.549 L1271.11 681.549 L1270.55 681.549 L1269.99 681.549 L1269.43 681.549 L1268.87 681.549 L1268.31 681.549 L1267.75 681.549 L1267.19 681.549 L1266.63 681.549 L1266.08 681.549 L1265.52 681.549 L1264.96 681.549 L1264.4 681.549 L1263.84 681.549 L1263.28 681.549 L1262.72 681.549 L1262.16 681.549 L1261.6 681.549 L1261.04 681.549 L1260.48 681.549 L1259.92 681.549 L1259.36 681.549 L1258.81 681.549 L1258.25 681.549 L1257.69 681.549 L1257.13 681.549 L1256.57 681.549 L1256.01 681.549 L1255.45 681.549 L1254.89 681.549 L1254.33 681.549 L1253.77 681.549 L1253.21 681.549 L1252.65 681.549 L1252.09 681.549 L1251.54 681.549 L1250.98 681.549 L1250.42 681.549 L1249.86 681.549 L1249.3 681.549 L1248.74 681.549 L1248.18 681.549 L1247.62 681.549 L1247.06 681.549 L1246.5 681.549 L1245.94 681.549 L1245.38 681.549 L1244.82 681.549 L1244.26 681.549 L1243.71 681.549 L1243.15 681.549 L1242.59 681.549 L1242.03 681.549 L1241.47 681.549 L1240.91 681.549 L1240.35 681.549 L1239.79 681.549 L1239.23 681.549 L1238.67 681.549 L1238.11 681.549 L1237.55 681.549 L1236.99 681.549 L1236.44 681.549 L1235.88 681.549 L1235.32 681.549 L1234.76 681.549 L1234.2 681.549 L1233.64 681.549 L1233.08 681.549 L1232.52 681.549 L1231.96 681.549 L1231.4 681.549 L1230.84 681.549 L1230.28 681.549 L1229.72 681.549 L1229.17 681.549 L1228.61 681.549 L1228.05 681.549 L1227.49 681.549 L1226.93 681.549 L1226.37 681.549 L1225.81 681.549 L1225.25 681.549 L1224.69 681.549 L1224.13 681.549 L1223.57 681.549 L1223.01 681.549 L1222.45 681.549 L1221.89 681.549 L1221.34 681.549 L1220.78 681.549 L1220.22 681.549 L1219.66 681.549 L1219.1 681.549 L1218.54 681.549 L1217.98 681.549 L1217.42 681.549 L1216.86 681.549 L1216.3 681.549 L1215.74 681.549 L1215.18 681.549 L1214.62 681.549 L1214.07 681.549 L1213.51 681.549 L1212.95 681.549 L1212.39 681.549 L1211.83 681.549 L1211.27 681.549 L1210.71 681.549 L1210.15 681.549 L1209.59 681.549 L1209.03 681.549 L1208.47 681.549 L1207.91 681.549 L1207.35 681.549 L1206.8 681.549 L1206.24 681.549 L1205.68 681.549 L1205.12 681.549 L1204.56 681.549 L1204 681.549 L1203.44 681.549 L1202.88 681.549 L1202.32 681.549 L1201.76 681.549 L1201.2 681.549 L1200.64 681.549 L1200.08 681.549 L1199.52 681.549 L1198.97 681.549 L1198.41 681.549 L1197.85 681.549 L1197.29 681.549 L1196.73 681.549 L1196.17 681.549 L1195.61 681.549 L1195.05 681.549 L1194.49 681.549 L1193.93 681.549 L1193.37 681.549 L1192.81 681.549 L1192.25 681.549 L1191.7 681.549 L1191.14 681.549 L1190.58 681.549 L1190.02 681.549 L1189.46 681.549 L1188.9 681.549 L1188.34 681.549 L1187.78 681.549 L1187.22 681.549 L1186.66 681.549 L1186.1 681.549 L1185.54 681.549 L1184.98 681.549 L1184.43 681.549 L1183.87 681.549 L1183.31 681.549 L1182.75 681.549 L1182.19 681.549 L1181.63 681.549 L1181.07 681.549 L1180.51 681.549 L1179.95 681.549 L1179.39 681.549 L1178.83 681.549 L1178.27 681.549 L1177.71 681.549 L1177.15 681.549 L1176.6 681.549 L1176.04 681.549 L1175.48 681.549 L1174.92 681.549 L1174.36 681.549 L1173.8 681.549 L1173.24 681.549 L1172.68 681.549 L1172.12 681.549 L1171.56 681.549 L1171 681.549 L1170.44 681.549 L1169.88 681.549 L1169.33 681.549 L1168.77 681.549 L1168.21 681.549 L1167.65 681.549 L1167.09 681.549 L1166.53 681.549 L1165.97 681.549 L1165.41 681.549 L1164.85 681.549 L1164.29 681.549 L1163.73 681.549 L1163.17 681.549 L1162.61 681.549 L1162.05 681.549 L1161.5 681.549 L1160.94 681.549 L1160.38 681.549 L1159.82 681.549 L1159.26 681.549 L1158.7 681.549 L1158.14 681.549 L1157.58 681.549 L1157.02 681.549 L1156.46 681.549 L1155.9 681.549 L1155.34 681.549 L1154.78 681.549 L1154.23 681.549 L1153.67 681.549 L1153.11 681.549 L1152.55 681.549 L1151.99 681.549 L1151.43 681.549 L1150.87 681.549 L1150.31 681.549 L1149.75 681.549 L1149.19 681.549 L1148.63 681.549 L1148.07 681.549 L1147.51 681.549 L1146.96 681.549 L1146.4 681.549 L1145.84 681.549 L1145.28 681.549 L1144.72 681.549 L1144.16 681.549 L1143.6 681.549 L1143.04 681.549 L1142.48 681.549 L1141.92 681.549 L1141.36 681.549 L1140.8 681.549 L1140.24 681.549 L1139.68 681.549 L1139.13 681.549 L1138.57 681.549 L1138.01 681.549 L1137.45 681.549 L1136.89 681.549 L1136.33 681.549 L1135.77 681.549 L1135.21 681.549 L1134.65 681.549 L1134.09 681.549 L1133.53 681.549 L1132.97 681.549 L1132.41 681.549 L1131.86 681.549 L1131.3 681.549 L1130.74 681.549 L1130.18 681.549 L1129.62 681.549 L1129.06 681.549 L1128.5 681.549 L1127.94 681.549 L1127.38 681.549 L1126.82 681.549 L1126.26 681.549 L1125.7 681.549 L1125.14 681.549 L1124.59 681.549 L1124.03 681.549 L1123.47 681.549 L1122.91 681.549 L1122.35 681.549 L1121.79 681.549 L1121.23 681.549 L1120.67 681.549 L1120.11 681.549 L1119.55 681.549 L1118.99 681.549 L1118.43 681.549 L1117.87 681.549 L1117.31 681.549 L1116.76 681.549 L1116.2 681.549 L1115.64 681.549 L1115.08 681.549 L1114.52 681.549 L1113.96 681.549 L1113.4 681.549 L1112.84 681.549 L1112.28 681.549 L1111.72 681.549 L1111.16 681.549 L1110.6 681.549 L1110.04 681.549 L1109.49 681.549 L1108.93 681.549 L1108.37 681.549 L1107.81 681.549 L1107.25 681.549 L1106.69 681.549 L1106.13 681.549 L1105.57 681.549 L1105.01 681.549 L1104.45 681.549 L1103.89 681.549 L1103.33 681.549 L1102.77 681.549 L1102.22 681.549 L1101.66 681.549 L1101.1 681.549 L1100.54 681.549 L1099.98 681.549 L1099.42 681.549 L1098.86 681.549 L1098.3 681.549 L1097.74 681.549 L1097.18 681.549 L1096.62 681.549 L1096.06 681.549 L1095.5 681.549 L1094.94 681.549 L1094.39 681.549 L1093.83 681.549 L1093.27 681.549 L1092.71 681.549 L1092.15 681.549 L1091.59 681.549 L1091.03 681.549 L1090.47 681.549 L1089.91 681.549 L1089.35 681.549 L1088.79 681.549 L1088.23 681.549 L1087.67 681.549 L1087.12 681.549 L1086.56 681.549 L1086 681.549 L1085.44 681.549 L1084.88 681.549 L1084.32 681.549 L1083.76 681.549 L1083.2 681.549 L1082.64 681.549 L1082.08 681.549 L1081.52 681.549 L1080.96 681.549 L1080.4 681.549 L1079.85 681.549 L1079.29 681.549 L1078.73 681.549 L1078.17 681.549 L1077.61 681.549 L1077.05 681.549 L1076.49 681.549 L1075.93 681.549 L1075.37 681.549 L1074.81 681.549 L1074.25 681.549 L1073.69 681.549 L1073.13 681.549 L1072.57 681.549 L1072.02 681.549 L1071.46 681.549 L1070.9 681.549 L1070.34 681.549 L1069.78 681.549 L1069.22 681.549 L1068.66 681.549 L1068.1 681.549 L1067.54 681.549 L1066.98 681.549 L1066.42 681.549 L1065.86 681.549 L1065.3 681.549 L1064.75 681.549 L1064.19 681.549 L1063.63 681.549 L1063.07 681.549 L1062.51 681.549 L1061.95 681.549 L1061.39 681.549 L1060.83 681.549 L1060.27 681.549 L1059.71 681.549 L1059.15 681.549 L1058.59 681.549 L1058.03 681.549 L1057.48 681.549 L1056.92 681.549 L1056.36 681.549 L1055.8 681.549 L1055.24 681.549 L1054.68 681.549 L1054.12 681.549 L1053.56 681.549 L1053 681.549 L1052.44 681.549 L1051.88 681.549 L1051.32 681.549 L1050.76 681.549 L1050.2 681.549 L1049.65 681.549 L1049.09 681.549 L1048.53 681.549 L1047.97 681.549 L1047.41 681.549 L1046.85 681.549 L1046.29 681.549 L1045.73 681.549 L1045.17 681.549 L1044.61 681.549 L1044.05 681.549 L1043.49 681.549 L1042.93 681.549 L1042.38 681.549 L1041.82 681.549 L1041.26 681.549 L1040.7 681.549 L1040.14 681.549 L1039.58 681.549 L1039.02 681.549 L1038.46 681.549 L1037.9 681.549 L1037.34 681.549 L1036.78 681.549 L1036.22 681.549 L1035.66 681.549 L1035.1 681.549 L1034.55 681.549 L1033.99 681.549 L1033.43 681.549 L1032.87 681.549 L1032.31 681.549 L1031.75 681.549 L1031.19 681.549 L1030.63 681.549 L1030.07 681.549 L1029.51 681.549 L1028.95 681.549 L1028.39 681.549 L1027.83 681.549 L1027.28 681.549 L1026.72 681.549 L1026.16 681.549 L1025.6 681.549 L1025.04 681.549 L1024.48 681.549 L1023.92 681.549 L1023.36 681.549 L1022.8 681.549 L1022.24 681.549 L1021.68 681.549 L1021.12 681.549 L1020.56 681.549 L1020.01 681.549 L1019.45 681.549 L1018.89 681.549 L1018.33 681.549 L1017.77 681.549 L1017.21 681.549 L1016.65 681.549 L1016.09 681.549 L1015.53 681.549 L1014.97 681.549 L1014.41 681.549 L1013.85 681.549 L1013.29 681.549 L1012.73 681.549 L1012.18 681.549 L1011.62 681.549 L1011.06 681.549 L1010.5 681.549 L1009.94 681.549 L1009.38 681.549 L1008.82 681.549 L1008.26 681.549 L1007.7 681.549 L1007.14 681.549 L1006.58 681.549 L1006.02 681.549 L1005.46 681.549 L1004.91 681.549 L1004.35 681.549 L1003.79 681.549 L1003.23 681.549 L1002.67 681.549 L1002.11 681.549 L1001.55 681.549 L1000.99 681.549 L1000.43 681.549 L999.872 681.549 L999.313 681.549 L998.754 681.549 L998.194 681.549 L997.635 681.549 L997.076 681.549 L996.517 681.549 L995.957 681.549 L995.398 681.549 L994.839 681.549 L994.28 681.549 L993.72 681.549 L993.161 681.549 L992.602 681.549 L992.043 681.549 L991.483 681.549 L990.924 681.549 L990.365 681.549 L989.806 681.549 L989.246 681.549 L988.687 681.549 L988.128 681.549 L987.569 681.549 L987.009 681.549 L986.45 681.549 L985.891 681.549 L985.332 681.549 L984.772 681.549 L984.213 681.549 L983.654 681.549 L983.095 681.549 L982.535 681.549 L981.976 681.549 L981.417 681.549 L980.858 681.549 L980.298 681.549 L979.739 681.549 L979.18 681.549 L978.621 681.549 L978.061 681.549 L977.502 681.549 L976.943 681.549 L976.384 681.549 L975.824 681.549 L975.265 681.549 L974.706 681.549 L974.147 681.549 L973.587 681.549 L973.028 681.549 L972.469 681.549 L971.91 681.549 L971.35 681.549 L970.791 681.549 L970.232 681.549 L969.673 681.549 L969.113 681.549 L968.554 681.549 L967.995 681.549 L967.436 681.549 L966.876 681.549 L966.317 681.549 L965.758 681.549 L965.199 681.549 L964.639 681.549 L964.08 681.549 L963.521 681.549 L962.962 681.549 L962.402 681.549 L961.843 681.549 L961.284 681.549 L960.725 681.549 L960.165 681.549 L959.606 681.549 L959.047 681.549 L958.488 681.549 L957.928 681.549 L957.369 681.549 L956.81 681.549 L956.251 681.549 L955.691 681.549 L955.132 681.549 L954.573 681.549 L954.014 681.549 L953.454 681.549 L952.895 681.549 L952.336 681.549 L951.777 681.549 L951.217 681.549 L950.658 681.549 L950.099 681.549 L949.54 681.549 L948.98 681.549 L948.421 681.549 L947.862 681.549 L947.303 681.549 L946.743 681.549 L946.184 681.549 L945.625 681.549 L945.066 681.549 L944.506 681.549 L943.947 681.549 L943.388 681.549 L942.829 681.549 L942.269 681.549 L941.71 681.549 L941.151 681.549 L940.592 681.549 L940.032 681.549 L939.473 681.549 L938.914 681.549 L938.355 681.549 L937.795 681.549 L937.236 681.549 L936.677 681.549 L936.118 681.549 L935.558 681.549 L934.999 681.549 L934.44 681.549 L933.881 681.549 L933.321 681.549 L932.762 681.549 L932.203 681.549 L931.644 681.549 L931.084 681.549 L930.525 681.549 L929.966 681.549 L929.406 681.549 L928.847 681.549 L928.288 681.549 L927.729 681.549 L927.169 681.549 L926.61 681.549 L926.051 681.549 L925.492 681.549 L924.932 681.549 L924.373 681.549 L923.814 681.549 L923.255 681.549 L922.695 681.549 L922.136 681.549 L921.577 681.549 L921.018 681.549 L920.458 681.549 L919.899 681.549 L919.34 681.549 L918.781 681.549 L918.221 681.549 L917.662 681.549 L917.103 681.549 L916.544 681.549 L915.984 681.549 L915.425 681.549 L914.866 681.549 L914.307 681.549 L913.747 681.549 L913.188 681.549 L912.629 681.549 L912.07 681.549 L911.51 681.549 L910.951 681.549 L910.392 681.549 L909.833 681.549 L909.273 681.549 L908.714 681.549 L908.155 681.549 L907.596 681.549 L907.036 681.549 L906.477 681.549 L905.918 681.549 L905.359 681.549 L904.799 681.549 L904.24 681.549 L903.681 681.549 L903.122 681.549 L902.562 681.549 L902.003 681.549 L901.444 681.549 L900.885 681.549 L900.325 681.549 L899.766 681.549 L899.207 681.549 L898.648 681.549 L898.088 681.549 L897.529 681.549 L896.97 681.549 L896.411 681.549 L895.851 681.549 L895.292 681.549 L894.733 681.549 L894.174 681.549 L893.614 681.549 L893.055 681.549 L892.496 681.549 L891.937 681.549 L891.377 681.549 L890.818 681.549 L890.259 681.549 L889.7 681.549 L889.14 681.549 L888.581 681.549 L888.022 681.549 L887.463 681.549 L886.903 681.549 L886.344 681.549 L885.785 681.549 L885.226 681.549 L884.666 681.549 L884.107 681.549 L883.548 681.549 L882.989 681.549 L882.429 681.549 L881.87 681.549 L881.311 681.549 L880.752 681.549 L880.192 681.549 L879.633 681.549 L879.074 681.549 L878.515 681.549 L877.955 681.549 L877.396 681.549 L876.837 681.549 L876.278 681.549 L875.718 681.549 L875.159 681.549 L874.6 681.549 L874.041 681.549 L873.481 681.549 L872.922 681.549 L872.363 681.549 L871.804 681.549 L871.244 681.549 L870.685 681.549 L870.126 681.549 L869.567 681.549 L869.007 681.549 L868.448 681.549 L867.889 681.549 L867.33 681.549 L866.77 681.549 L866.211 681.549 L865.652 681.549 L865.093 681.549 L864.533 681.549 L863.974 681.549 L863.415 681.549 L862.856 681.549 L862.296 681.549 L861.737 681.549 L861.178 681.549 L860.619 681.549 L860.059 681.549 L859.5 681.549 L858.941 681.549 L858.382 681.549 L857.822 681.549 L857.263 681.549 L856.704 681.549 L856.145 681.549 L855.585 681.549 L855.026 681.549 L854.467 681.549 L853.908 681.549 L853.348 681.549 L852.789 681.549 L852.23 681.549 L851.671 681.549 L851.111 681.549 L850.552 681.549 L849.993 681.549 L849.434 681.549 L848.874 681.549 L848.315 681.549 L847.756 681.549 L847.197 681.549 L846.637 681.549 L846.078 681.549 L845.519 681.549 L844.96 681.549 L844.4 681.549 L843.841 681.549 L843.282 681.549 L842.723 681.549 L842.163 681.549 L841.604 681.549 L841.045 681.549 L840.486 681.549 L839.926 681.549 L839.367 681.549 L838.808 681.549 L838.249 681.549 L837.689 681.549 L837.13 681.549 L836.571 681.549 L836.012 681.549 L835.452 681.549 L834.893 681.549 L834.334 681.549 L833.775 681.549 L833.215 681.549 L832.656 681.549 L832.097 681.549 L831.538 681.549 L830.978 681.549 L830.419 681.549 L829.86 681.549 L829.301 681.549 L828.741 681.549 L828.182 681.549 L827.623 681.549 L827.064 681.549 L826.504 681.549 L825.945 681.549 L825.386 681.549 L824.827 681.549 L824.267 681.549 L823.708 681.549 L823.149 681.549 L822.59 681.549 L822.03 681.549 L821.471 681.549 L820.912 681.549 L820.353 681.549 L819.793 681.549 L819.234 681.549 L818.675 681.549 L818.116 681.549 L817.556 681.549 L816.997 681.549 L816.438 681.549 L815.879 681.549 L815.319 681.549 L814.76 681.549 L814.201 681.549 L813.642 681.549 L813.082 681.549 L812.523 681.549 L811.964 681.549 L811.405 681.549 L810.845 681.549 L810.286 681.549 L809.727 681.549 L809.168 681.549 L808.608 681.549 L808.049 681.549 L807.49 681.549 L806.931 681.549 L806.371 681.549 L805.812 681.549 L805.253 681.549 L804.693 681.549 L804.134 681.549 L803.575 681.549 L803.016 681.549 L802.456 681.549 L801.897 681.549 L801.338 681.549 L800.779 681.549 L800.219 681.549 L799.66 681.549 L799.101 681.549 L798.542 681.549 L797.982 681.549 L797.423 681.549 L796.864 681.549 L796.305 681.549 L795.745 681.549 L795.186 681.549 L794.627 681.549 L794.068 681.549 L793.508 681.549 L792.949 681.549 L792.39 681.549 L791.831 681.549 L791.271 681.549 L790.712 681.549 L790.153 681.549 L789.594 681.549 L789.034 681.549 L788.475 681.549 L787.916 681.549 L787.357 681.549 L786.797 681.549 L786.238 681.549 L785.679 681.549 L785.12 681.549 L784.56 681.549 L784.001 681.549 L783.442 681.549 L782.883 681.549 L782.323 681.549 L781.764 681.549 L781.205 681.549 L780.646 681.549 L780.086 681.549 L779.527 681.549 L778.968 681.549 L778.409 681.549 L777.849 681.549 L777.29 681.549 L776.731 681.549 L776.172 681.549 L775.612 681.549 L775.053 681.549 L774.494 681.549 L773.935 681.549 L773.375 681.549 L772.816 681.549 L772.257 681.549 L771.698 681.549 L771.138 681.549 L770.579 681.549 L770.02 681.549 L769.461 681.549 L768.901 681.549 L768.342 681.549 L767.783 681.549 L767.224 681.549 L766.664 681.549 L766.105 681.549 L765.546 681.549 L764.987 681.549 L764.427 681.549 L763.868 681.549 L763.309 681.549 L762.75 681.549 L762.19 681.549 L761.631 681.549 L761.072 681.549 L760.513 681.549 L759.953 681.549 L759.394 681.549 L758.835 681.549 L758.276 681.549 L757.716 681.549 L757.157 681.549 L756.598 681.549 L756.039 681.549 L755.479 681.549 L754.92 681.549 L754.361 681.549 L753.802 681.549 L753.242 681.549 L752.683 681.549 L752.124 681.549 L751.565 681.549 L751.005 681.549 L750.446 681.549 L749.887 681.549 L749.328 681.549 L748.768 681.549 L748.209 681.549 L747.65 681.549 L747.091 681.549 L746.531 681.549 L745.972 681.549 L745.413 681.549 L744.854 681.549 L744.294 681.549 L743.735 681.549 L743.176 681.549 L742.617 681.549 L742.057 681.549 L741.498 681.549 L740.939 681.549 L740.38 681.549 L739.82 681.549 L739.261 681.549 L738.702 681.549 L738.143 681.549 L737.583 681.549 L737.024 681.549 L736.465 681.549 L735.906 681.549 L735.346 681.549 L734.787 681.549 L734.228 681.549 L733.669 681.549 L733.109 681.549 L732.55 681.549 L731.991 681.549 L731.432 681.549 L730.872 681.549 L730.313 681.549 L729.754 681.549 L729.195 681.549 L728.635 681.549 L728.076 681.549 L727.517 681.549 L726.958 681.549 L726.398 681.549 L725.839 681.549 L725.28 681.549 L724.721 681.549 L724.161 681.549 L723.602 681.549 L723.043 681.549 L722.484 681.549 L721.924 681.549 L721.365 681.549 L720.806 681.549 L720.247 681.549  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.629 720.806,686.629 721.365,686.629 721.924,686.629 722.484,686.629 723.043,686.629 723.602,686.629 724.161,686.629 724.721,686.629 725.28,686.629 725.839,686.629 726.398,686.629 726.958,686.629 727.517,686.629 728.076,686.629 728.635,686.629 729.195,686.629 729.754,686.629 730.313,686.629 730.872,686.629 731.432,686.629 731.991,686.629 732.55,686.629 733.109,686.629 733.669,686.629 734.228,686.629 734.787,686.629 735.346,686.629 735.906,686.629 736.465,686.629 737.024,686.629 737.583,686.629 738.143,686.629 738.702,686.629 739.261,686.629 739.82,686.629 740.38,686.629 740.939,686.629 741.498,686.629 742.057,686.629 742.617,686.629 743.176,686.629 743.735,686.629 744.294,686.629 744.854,686.629 745.413,686.629 745.972,686.629 746.531,686.629 747.091,686.629 747.65,686.629 748.209,686.629 748.768,686.629 749.328,686.629 749.887,686.629 750.446,686.629 751.005,686.629 751.565,686.629 752.124,686.629 752.683,686.629 753.242,686.629 753.802,686.629 754.361,686.629 754.92,686.629 755.479,686.629 756.039,686.629 756.598,686.629 757.157,686.629 757.716,686.629 758.276,686.629 758.835,686.629 759.394,686.629 759.953,686.629 760.513,686.629 761.072,686.629 761.631,686.629 762.19,686.629 762.75,686.629 763.309,686.629 763.868,686.629 764.427,686.629 764.987,686.629 765.546,686.629 766.105,686.629 766.664,686.629 767.224,686.629 767.783,686.629 768.342,686.629 768.901,686.629 769.461,686.629 770.02,686.629 770.579,686.629 771.138,686.629 771.698,686.629 772.257,686.629 772.816,686.629 773.375,686.629 773.935,686.629 774.494,686.629 775.053,686.629 775.612,686.629 776.172,686.629 776.731,686.629 777.29,686.629 777.849,686.629 778.409,686.629 778.968,686.629 779.527,686.629 780.086,686.629 780.646,686.629 781.205,686.629 781.764,686.629 782.323,686.629 782.883,686.629 783.442,686.629 784.001,686.629 784.56,686.629 785.12,686.629 785.679,686.629 786.238,686.629 786.797,686.629 787.357,686.629 787.916,686.629 788.475,686.629 789.034,686.629 789.594,686.629 790.153,686.629 790.712,686.629 791.271,686.629 791.831,686.629 792.39,686.629 792.949,686.629 793.508,686.629 794.068,686.629 794.627,686.629 795.186,686.629 795.745,686.629 796.305,686.629 796.864,686.629 797.423,686.629 797.982,686.629 798.542,686.629 799.101,686.629 799.66,686.629 800.219,686.629 800.779,686.629 801.338,686.629 801.897,686.629 802.456,686.629 803.016,686.629 803.575,686.629 804.134,686.629 804.693,686.629 805.253,686.629 805.812,686.629 806.371,686.629 806.931,686.629 807.49,686.629 808.049,686.629 808.608,686.629 809.168,686.629 809.727,686.629 810.286,686.629 810.845,686.629 811.405,686.629 811.964,686.629 812.523,686.629 813.082,686.629 813.642,686.629 814.201,686.629 814.76,686.629 815.319,686.629 815.879,686.629 816.438,686.629 816.997,686.629 817.556,686.629 818.116,686.629 818.675,686.629 819.234,686.629 819.793,686.629 820.353,686.629 820.912,686.629 821.471,686.629 822.03,686.629 822.59,686.629 823.149,686.629 823.708,686.629 824.267,686.629 824.827,686.629 825.386,686.629 825.945,686.629 826.504,686.629 827.064,686.629 827.623,686.629 828.182,686.629 828.741,686.629 829.301,686.629 829.86,686.629 830.419,686.629 830.978,686.629 831.538,686.629 832.097,686.629 832.656,686.629 833.215,686.629 833.775,686.629 834.334,686.629 834.893,686.629 835.452,686.629 836.012,686.629 836.571,686.629 837.13,686.629 837.689,686.629 838.249,686.629 838.808,686.629 839.367,686.629 839.926,686.629 840.486,686.629 841.045,686.629 841.604,686.629 842.163,686.629 842.723,686.629 843.282,686.629 843.841,686.629 844.4,686.629 844.96,686.629 845.519,686.629 846.078,686.629 846.637,686.629 847.197,686.629 847.756,686.629 848.315,686.629 848.874,686.629 849.434,686.629 849.993,686.629 850.552,686.629 851.111,686.629 851.671,686.629 852.23,686.629 852.789,686.629 853.348,686.629 853.908,686.629 854.467,686.629 855.026,686.629 855.585,686.629 856.145,686.629 856.704,686.629 857.263,686.629 857.822,686.629 858.382,686.629 858.941,686.629 859.5,686.629 860.059,686.629 860.619,686.629 861.178,686.629 861.737,686.629 862.296,686.629 862.856,686.629 863.415,686.629 863.974,686.629 864.533,686.629 865.093,686.629 865.652,686.629 866.211,686.629 866.77,686.629 867.33,686.629 867.889,686.629 868.448,686.629 869.007,686.629 869.567,686.629 870.126,686.629 870.685,686.629 871.244,686.629 871.804,686.629 872.363,686.629 872.922,686.629 873.481,686.629 874.041,686.629 874.6,686.629 875.159,686.629 875.718,686.629 876.278,686.629 876.837,686.629 877.396,686.629 877.955,686.629 878.515,686.629 879.074,686.629 879.633,686.629 880.192,686.629 880.752,686.629 881.311,686.629 881.87,686.629 882.429,686.629 882.989,686.629 883.548,686.629 884.107,686.629 884.666,686.629 885.226,686.629 885.785,686.629 886.344,686.629 886.903,686.629 887.463,686.629 888.022,686.629 888.581,686.629 889.14,686.629 889.7,686.629 890.259,686.629 890.818,686.629 891.377,686.629 891.937,686.629 892.496,686.629 893.055,686.629 893.614,686.629 894.174,686.629 894.733,686.629 895.292,686.629 895.851,686.629 896.411,686.629 896.97,686.629 897.529,686.629 898.088,686.629 898.648,686.629 899.207,686.629 899.766,686.629 900.325,686.629 900.885,686.629 901.444,686.629 902.003,686.629 902.562,686.629 903.122,686.629 903.681,686.629 904.24,686.629 904.799,686.629 905.359,686.629 905.918,686.629 906.477,686.629 907.036,686.629 907.596,686.629 908.155,686.629 908.714,686.629 909.273,686.629 909.833,686.629 910.392,686.629 910.951,686.629 911.51,686.629 912.07,686.629 912.629,686.629 913.188,686.629 913.747,686.629 914.307,686.629 914.866,686.629 915.425,686.629 915.984,686.629 916.544,686.629 917.103,686.629 917.662,686.629 918.221,686.629 918.781,686.629 919.34,686.629 919.899,686.629 920.458,686.629 921.018,686.629 921.577,686.629 922.136,686.629 922.695,686.629 923.255,686.629 923.814,686.629 924.373,686.629 924.932,686.629 925.492,686.629 926.051,686.629 926.61,686.629 927.169,686.629 927.729,686.629 928.288,686.629 928.847,686.629 929.406,686.629 929.966,686.629 930.525,686.629 931.084,686.629 931.644,686.629 932.203,686.629 932.762,686.629 933.321,686.629 933.881,686.629 934.44,686.629 934.999,686.629 935.558,686.629 936.118,686.629 936.677,686.629 937.236,686.629 937.795,686.629 938.355,686.629 938.914,686.629 939.473,686.629 940.032,686.629 940.592,686.629 941.151,686.629 941.71,686.629 942.269,686.629 942.829,686.629 943.388,686.629 943.947,686.629 944.506,686.629 945.066,686.629 945.625,686.629 946.184,686.629 946.743,686.629 947.303,686.629 947.862,686.629 948.421,686.629 948.98,686.629 949.54,686.629 950.099,686.629 950.658,686.629 951.217,686.629 951.777,686.629 952.336,686.629 952.895,686.629 953.454,686.629 954.014,686.629 954.573,686.629 955.132,686.629 955.691,686.629 956.251,686.629 956.81,686.629 957.369,686.629 957.928,686.629 958.488,686.629 959.047,686.629 959.606,686.629 960.165,686.629 960.725,686.629 961.284,686.629 961.843,686.629 962.402,686.629 962.962,686.629 963.521,686.629 964.08,686.629 964.639,686.629 965.199,686.629 965.758,686.629 966.317,686.629 966.876,686.629 967.436,686.629 967.995,686.629 968.554,686.629 969.113,686.629 969.673,686.629 970.232,686.629 970.791,686.629 971.35,686.629 971.91,686.629 972.469,686.629 973.028,686.629 973.587,686.629 974.147,686.629 974.706,686.629 975.265,686.629 975.824,686.629 976.384,686.629 976.943,686.629 977.502,686.629 978.061,686.629 978.621,686.629 979.18,686.629 979.739,686.629 980.298,686.629 980.858,686.629 981.417,686.629 981.976,686.629 982.535,686.629 983.095,686.629 983.654,686.629 984.213,686.629 984.772,686.629 985.332,686.629 985.891,686.629 986.45,686.629 987.009,686.629 987.569,686.629 988.128,686.629 988.687,686.629 989.246,686.629 989.806,686.629 990.365,686.629 990.924,686.629 991.483,686.629 992.043,686.629 992.602,686.629 993.161,686.629 993.72,686.629 994.28,686.629 994.839,686.629 995.398,686.629 995.957,686.629 996.517,686.629 997.076,686.629 997.635,686.629 998.194,686.629 998.754,686.629 999.313,686.629 999.872,686.629 1000.43,686.629 1000.99,686.629 1001.55,686.629 1002.11,686.629 1002.67,686.629 1003.23,686.629 1003.79,686.629 1004.35,686.629 1004.91,686.629 1005.46,686.629 1006.02,686.629 1006.58,686.629 1007.14,686.629 1007.7,686.629 1008.26,686.629 1008.82,686.629 1009.38,686.629 1009.94,686.629 1010.5,686.629 1011.06,686.629 1011.62,686.629 1012.18,686.629 1012.73,686.629 1013.29,686.629 1013.85,686.629 1014.41,686.629 1014.97,686.629 1015.53,686.629 1016.09,686.629 1016.65,686.629 1017.21,686.629 1017.77,686.629 1018.33,686.629 1018.89,686.629 1019.45,686.629 1020.01,686.629 1020.56,686.629 1021.12,686.629 1021.68,686.629 1022.24,686.629 1022.8,686.629 1023.36,686.629 1023.92,686.629 1024.48,686.629 1025.04,686.629 1025.6,686.629 1026.16,686.629 1026.72,686.629 1027.28,686.629 1027.83,686.629 1028.39,686.629 1028.95,686.629 1029.51,686.629 1030.07,686.629 1030.63,686.629 1031.19,686.629 1031.75,686.629 1032.31,686.629 1032.87,686.629 1033.43,686.629 1033.99,686.629 1034.55,686.629 1035.1,686.629 1035.66,686.629 1036.22,686.629 1036.78,686.629 1037.34,686.629 1037.9,686.629 1038.46,686.629 1039.02,686.629 1039.58,686.629 1040.14,686.629 1040.7,686.629 1041.26,686.629 1041.82,686.629 1042.38,686.629 1042.93,686.629 1043.49,686.629 1044.05,686.629 1044.61,686.629 1045.17,686.629 1045.73,686.629 1046.29,686.629 1046.85,686.629 1047.41,686.629 1047.97,686.629 1048.53,686.629 1049.09,686.629 1049.65,686.629 1050.2,686.629 1050.76,686.629 1051.32,686.629 1051.88,686.629 1052.44,686.629 1053,686.629 1053.56,686.629 1054.12,686.629 1054.68,686.629 1055.24,686.629 1055.8,686.629 1056.36,686.629 1056.92,686.629 1057.48,686.629 1058.03,686.629 1058.59,686.629 1059.15,686.629 1059.71,686.629 1060.27,686.629 1060.83,686.629 1061.39,686.629 1061.95,686.629 1062.51,686.629 1063.07,686.629 1063.63,686.629 1064.19,686.629 1064.75,686.629 1065.3,686.629 1065.86,686.629 1066.42,686.629 1066.98,686.629 1067.54,686.629 1068.1,686.629 1068.66,686.629 1069.22,686.629 1069.78,686.629 1070.34,686.629 1070.9,686.629 1071.46,686.629 1072.02,686.629 1072.57,686.629 1073.13,686.629 1073.69,686.629 1074.25,686.629 1074.81,686.629 1075.37,686.629 1075.93,686.629 1076.49,686.629 1077.05,686.629 1077.61,686.629 1078.17,686.629 1078.73,686.629 1079.29,686.629 1079.85,686.629 1080.4,686.629 1080.96,686.629 1081.52,686.629 1082.08,686.629 1082.64,686.629 1083.2,686.629 1083.76,686.629 1084.32,686.629 1084.88,686.629 1085.44,686.629 1086,686.629 1086.56,686.629 1087.12,686.629 1087.67,686.629 1088.23,686.629 1088.79,686.629 1089.35,686.629 1089.91,686.629 1090.47,686.629 1091.03,686.629 1091.59,686.629 1092.15,686.629 1092.71,686.629 1093.27,686.629 1093.83,686.629 1094.39,686.629 1094.94,686.629 1095.5,686.629 1096.06,686.629 1096.62,686.629 1097.18,686.629 1097.74,686.629 1098.3,686.629 1098.86,686.629 1099.42,686.629 1099.98,686.629 1100.54,686.629 1101.1,686.629 1101.66,686.629 1102.22,686.629 1102.77,686.629 1103.33,686.629 1103.89,686.629 1104.45,686.629 1105.01,686.629 1105.57,686.629 1106.13,686.629 1106.69,686.629 1107.25,686.629 1107.81,686.629 1108.37,686.629 1108.93,686.629 1109.49,686.629 1110.04,686.629 1110.6,686.629 1111.16,686.629 1111.72,686.629 1112.28,686.629 1112.84,686.629 1113.4,686.629 1113.96,686.629 1114.52,686.629 1115.08,686.629 1115.64,686.629 1116.2,686.629 1116.76,686.629 1117.31,686.629 1117.87,686.629 1118.43,686.629 1118.99,686.629 1119.55,686.629 1120.11,686.629 1120.67,686.629 1121.23,686.629 1121.79,686.629 1122.35,686.629 1122.91,686.629 1123.47,686.629 1124.03,686.629 1124.59,686.629 1125.14,686.629 1125.7,686.629 1126.26,686.629 1126.82,686.629 1127.38,686.629 1127.94,686.629 1128.5,686.629 1129.06,686.629 1129.62,686.629 1130.18,686.629 1130.74,686.629 1131.3,686.629 1131.86,686.629 1132.41,686.629 1132.97,686.629 1133.53,686.629 1134.09,686.629 1134.65,686.629 1135.21,686.629 1135.77,686.629 1136.33,686.629 1136.89,686.629 1137.45,686.629 1138.01,686.629 1138.57,686.629 1139.13,686.629 1139.68,686.629 1140.24,686.629 1140.8,686.629 1141.36,686.629 1141.92,686.629 1142.48,686.629 1143.04,686.629 1143.6,686.629 1144.16,686.629 1144.72,686.629 1145.28,686.629 1145.84,686.629 1146.4,686.629 1146.96,686.629 1147.51,686.629 1148.07,686.629 1148.63,686.629 1149.19,686.629 1149.75,686.629 1150.31,686.629 1150.87,686.629 1151.43,686.629 1151.99,686.629 1152.55,686.629 1153.11,686.629 1153.67,686.629 1154.23,686.629 1154.78,686.629 1155.34,686.629 1155.9,686.629 1156.46,686.629 1157.02,686.629 1157.58,686.629 1158.14,686.629 1158.7,686.629 1159.26,686.629 1159.82,686.629 1160.38,686.629 1160.94,686.629 1161.5,686.629 1162.05,686.629 1162.61,686.629 1163.17,686.629 1163.73,686.629 1164.29,686.629 1164.85,686.629 1165.41,686.629 1165.97,686.629 1166.53,686.629 1167.09,686.629 1167.65,686.629 1168.21,686.629 1168.77,686.629 1169.33,686.629 1169.88,686.629 1170.44,686.629 1171,686.629 1171.56,686.629 1172.12,686.629 1172.68,686.629 1173.24,686.629 1173.8,686.629 1174.36,686.629 1174.92,686.629 1175.48,686.629 1176.04,686.629 1176.6,686.629 1177.15,686.629 1177.71,686.629 1178.27,686.629 1178.83,686.629 1179.39,686.629 1179.95,686.629 1180.51,686.629 1181.07,686.629 1181.63,686.629 1182.19,686.629 1182.75,686.629 1183.31,686.629 1183.87,686.629 1184.43,686.629 1184.98,686.629 1185.54,686.629 1186.1,686.629 1186.66,686.629 1187.22,686.629 1187.78,686.629 1188.34,686.629 1188.9,686.629 1189.46,686.629 1190.02,686.629 1190.58,686.629 1191.14,686.629 1191.7,686.629 1192.25,686.629 1192.81,686.629 1193.37,686.629 1193.93,686.629 1194.49,686.629 1195.05,686.629 1195.61,686.629 1196.17,686.629 1196.73,686.629 1197.29,686.629 1197.85,686.629 1198.41,686.629 1198.97,686.629 1199.52,686.629 1200.08,686.629 1200.64,686.629 1201.2,686.629 1201.76,686.629 1202.32,686.629 1202.88,686.629 1203.44,686.629 1204,686.629 1204.56,686.629 1205.12,686.629 1205.68,686.629 1206.24,686.629 1206.8,686.629 1207.35,686.629 1207.91,686.629 1208.47,686.629 1209.03,686.629 1209.59,686.629 1210.15,686.629 1210.71,686.629 1211.27,686.629 1211.83,686.629 1212.39,686.629 1212.95,686.629 1213.51,686.629 1214.07,686.629 1214.62,686.629 1215.18,686.629 1215.74,686.629 1216.3,686.629 1216.86,686.629 1217.42,686.629 1217.98,686.629 1218.54,686.629 1219.1,686.629 1219.66,686.629 1220.22,686.629 1220.78,686.629 1221.34,686.629 1221.89,686.629 1222.45,686.629 1223.01,686.629 1223.57,686.629 1224.13,686.629 1224.69,686.629 1225.25,686.629 1225.81,686.629 1226.37,686.629 1226.93,686.629 1227.49,686.629 1228.05,686.629 1228.61,686.629 1229.17,686.629 1229.72,686.629 1230.28,686.629 1230.84,686.629 1231.4,686.629 1231.96,686.629 1232.52,686.629 1233.08,686.629 1233.64,686.629 1234.2,686.629 1234.76,686.629 1235.32,686.629 1235.88,686.629 1236.44,686.629 1236.99,686.629 1237.55,686.629 1238.11,686.629 1238.67,686.629 1239.23,686.629 1239.79,686.629 1240.35,686.629 1240.91,686.629 1241.47,686.629 1242.03,686.629 1242.59,686.629 1243.15,686.629 1243.71,686.629 1244.26,686.629 1244.82,686.629 1245.38,686.629 1245.94,686.629 1246.5,686.629 1247.06,686.629 1247.62,686.629 1248.18,686.629 1248.74,686.629 1249.3,686.629 1249.86,686.629 1250.42,686.629 1250.98,686.629 1251.54,686.629 1252.09,686.629 1252.65,686.629 1253.21,686.629 1253.77,686.629 1254.33,686.629 1254.89,686.629 1255.45,686.629 1256.01,686.629 1256.57,686.629 1257.13,686.629 1257.69,686.629 1258.25,686.629 1258.81,686.629 1259.36,686.629 1259.92,686.629 1260.48,686.629 1261.04,686.629 1261.6,686.629 1262.16,686.629 1262.72,686.629 1263.28,686.629 1263.84,686.629 1264.4,686.629 1264.96,686.629 1265.52,686.629 1266.08,686.629 1266.63,686.629 1267.19,686.629 1267.75,686.629 1268.31,686.629 1268.87,686.629 1269.43,686.629 1269.99,686.629 1270.55,686.629 1271.11,686.629 1271.67,686.629 1272.23,686.629 1272.79,686.629 1273.35,686.629 1273.91,686.629 1274.46,686.629 1275.02,686.629 1275.58,686.629 1276.14,686.629 1276.7,686.629 1277.26,686.629 1277.82,686.629 1278.38,686.629 1278.94,686.629 1279.5,686.629 1280.06,686.629 1280.62,686.629 1281.18,686.629 1281.73,686.629 1282.29,686.629 1282.85,686.629 1283.41,686.629 1283.97,686.629 1284.53,686.629 1285.09,686.629 1285.65,686.629 1286.21,686.629 1286.77,686.629 1287.33,686.629 1287.89,686.629 1288.45,686.629 1289,686.629 1289.56,686.629 1290.12,686.629 1290.68,686.629 1291.24,686.629 1291.8,686.629 1292.36,686.629 1292.92,686.629 1293.48,686.629 1294.04,686.629 1294.6,686.629 1295.16,686.629 1295.72,686.629 1296.28,686.629 1296.83,686.629 1297.39,686.629 1297.95,686.629 1298.51,686.629 1299.07,686.629 1299.63,686.629 1300.19,686.629 1300.75,686.629 1301.31,686.629 1301.87,686.629 1302.43,686.629 1302.99,686.629 1303.55,686.629 1304.1,686.629 1304.66,686.629 1305.22,686.629 1305.78,686.629 1306.34,686.629 1306.9,686.629 1307.46,686.629 1308.02,686.629 1308.58,686.629 1309.14,686.629 1309.7,686.629 1310.26,686.629 1310.82,686.629 1311.38,686.629 1311.93,686.629 1312.49,686.629 1313.05,686.629 1313.61,686.629 1314.17,686.629 1314.73,686.629 1315.29,686.629 1315.85,686.629 1316.41,686.629 1316.97,686.629 1317.53,686.629 1318.09,686.629 1318.65,686.629 1319.2,686.629 1319.76,686.629 1320.32,686.629 1320.88,686.629 1321.44,686.629 1322,686.629 1322.56,686.629 1323.12,686.629 1323.68,686.629 1324.24,686.629 1324.8,686.629 1325.36,686.629 1325.92,686.629 1326.47,686.629 1327.03,686.629 1327.59,686.629 1328.15,686.629 1328.71,686.629 1329.27,686.629 1329.83,686.629 1330.39,686.629 1330.95,686.629 1331.51,686.629 1332.07,686.629 1332.63,686.629 1333.19,686.629 1333.75,686.629 1334.3,686.629 1334.86,686.629 1335.42,686.629 1335.98,686.629 1336.54,686.629 1337.1,686.629 1337.66,686.629 1338.22,686.629 1338.78,686.629 1339.34,686.629 1339.9,686.629 1340.46,686.629 1341.02,686.629 1341.57,686.629 1342.13,686.629 1342.69,686.629 1343.25,686.629 1343.81,686.629 1344.37,686.629 1344.93,686.629 1345.49,686.629 1346.05,686.629 1346.61,686.629 1347.17,686.629 1347.73,686.629 1348.29,686.629 1348.84,686.629 1349.4,686.629 1349.96,686.629 1350.52,686.629 1351.08,686.629 1351.64,686.629 1352.2,686.629 1352.76,686.629 1353.32,686.629 1353.88,686.629 1354.44,686.629 1355,686.629 1355.56,686.629 1356.12,686.629 1356.67,686.629 1357.23,686.629 1357.79,686.629 1358.35,686.629 1358.91,686.629 1359.47,686.629 1360.03,686.629 1360.59,686.629 1361.15,686.629 1361.71,686.629 1362.27,686.629 1362.83,686.629 1363.39,686.629 1363.94,686.629 1364.5,686.629 1365.06,686.629 1365.62,686.629 1366.18,686.629 1366.74,686.629 1367.3,686.629 1367.86,686.629 1368.42,686.629 1368.98,686.629 1369.54,686.629 1370.1,686.629 1370.66,686.629 1371.21,686.629 1371.77,686.629 1372.33,686.629 1372.89,686.629 1373.45,686.629 1374.01,686.629 1374.57,686.629 1375.13,686.629 1375.69,686.629 1376.25,686.629 1376.81,686.629 1377.37,686.629 1377.93,686.629 1378.49,686.629 1379.04,686.629 1379.6,686.629 1380.16,686.629 1380.72,686.629 1381.28,686.629 1381.84,686.629 1382.4,686.629 1382.96,686.629 1383.52,686.629 1384.08,686.629 1384.64,686.629 1385.2,686.629 1385.76,686.629 1386.31,686.629 1386.87,686.629 1387.43,686.629 1387.99,686.629 1388.55,686.629 1389.11,686.629 1389.67,686.629 1390.23,686.629 1390.79,686.629 1391.35,686.629 1391.91,686.629 1392.47,686.629 1393.03,686.629 1393.58,686.629 1394.14,686.629 1394.7,686.629 1395.26,686.629 1395.82,686.629 1396.38,686.629 1396.94,686.629 1397.5,686.629 1398.06,686.629 1398.62,686.629 1399.18,686.629 1399.74,686.629 1400.3,686.629 1400.86,686.629 1401.41,686.629 1401.97,686.629 1402.53,686.629 1403.09,686.629 1403.65,686.629 1404.21,686.629 1404.77,686.629 1405.33,686.629 1405.89,686.629 1406.45,686.629 1407.01,686.629 1407.57,686.629 1408.13,686.629 1408.68,686.629 1409.24,686.629 1409.8,686.629 1410.36,686.629 1410.92,686.629 1411.48,686.629 1412.04,686.629 1412.6,686.629 1413.16,686.629 1413.72,686.629 1414.28,686.629 1414.84,686.629 1415.4,686.629 1415.95,686.629 1416.51,686.629 1417.07,686.629 1417.63,686.629 1418.19,686.629 1418.75,686.629 1419.31,686.629 1419.87,686.629 1420.43,686.629 1420.99,686.629 1421.55,686.629 1422.11,686.629 1422.67,686.629 1423.23,686.629 1423.78,686.629 1424.34,686.629 1424.9,686.629 1425.46,686.629 1426.02,686.629 1426.58,686.629 1427.14,686.629 1427.7,686.629 1428.26,686.629 1428.82,686.629 1429.38,686.629 1429.94,686.629 1430.5,686.629 1431.05,686.629 1431.61,686.629 1432.17,686.629 1432.73,686.629 1433.29,686.629 1433.85,686.629 1434.41,686.629 1434.97,686.629 1435.53,686.629 1436.09,686.629 1436.65,686.629 1437.21,686.629 1437.77,686.629 1438.33,686.629 1438.88,686.629 1439.44,686.629 1440,686.629 1440.56,686.629 1441.12,686.629 1441.68,686.629 1442.24,686.629 1442.8,686.629 1443.36,686.629 1443.92,686.629 1444.48,686.629 1445.04,686.629 1445.6,686.629 1446.15,686.629 1446.71,686.629 1447.27,686.629 1447.83,686.629 1448.39,686.629 1448.95,686.629 1449.51,686.629 1450.07,686.629 1450.63,686.629 1451.19,686.629 1451.75,686.629 1452.31,686.629 1452.87,686.629 1453.42,686.629 1453.98,686.629 1454.54,686.629 1455.1,686.629 1455.66,686.629 1456.22,686.629 1456.78,686.629 1457.34,686.629 1457.9,686.629 1458.46,686.629 1459.02,686.629 1459.58,686.629 1460.14,686.629 1460.7,686.629 1461.25,686.629 1461.81,686.629 1462.37,686.629 1462.93,686.629 1463.49,686.629 1464.05,686.629 1464.61,686.629 1465.17,686.629 1465.73,686.629 1466.29,686.629 1466.85,686.629 1467.41,686.629 1467.97,686.629 1468.52,686.629 1469.08,686.629 1469.64,686.629 1470.2,686.629 1470.76,686.629 1471.32,686.629 1471.88,686.629 1472.44,686.629 1473,686.629 1473.56,686.629 1474.12,686.629 1474.68,686.629 1475.24,686.629 1475.79,686.629 1476.35,686.629 1476.91,686.629 1477.47,686.629 1478.03,686.629 1478.59,686.629 1479.15,686.629 1479.71,686.629 1480.27,686.629 1480.83,686.629 1481.39,686.629 1481.95,686.629 1482.51,686.629 1483.07,686.629 1483.62,686.629 1484.18,686.629 1484.74,686.629 1485.3,686.629 1485.86,686.629 1486.42,686.629 1486.98,686.629 1487.54,686.629 1488.1,686.629 1488.66,686.629 1489.22,686.629 1489.78,686.629 1490.34,686.629 1490.89,686.629 1491.45,686.629 1492.01,686.629 1492.57,686.629 1493.13,686.629 1493.69,686.629 1494.25,686.629 1494.81,686.629 1495.37,686.629 1495.93,686.629 1496.49,686.629 1497.05,686.629 1497.61,686.629 1498.16,686.629 1498.72,686.629 1499.28,686.629 1499.84,686.629 1500.4,686.629 1500.96,686.629 1501.52,686.629 1502.08,686.629 1502.64,686.629 1503.2,686.629 1503.76,686.629 1504.32,686.629 1504.88,686.629 1505.44,686.629 1505.99,686.629 1506.55,686.629 1507.11,686.629 1507.67,686.629 1508.23,686.629 1508.79,686.629 1509.35,686.629 1509.91,686.629 1510.47,686.629 1511.03,686.629 1511.59,686.629 1512.15,686.629 1512.71,686.629 1513.26,686.629 1513.82,686.629 1514.38,686.629 1514.94,686.629 1515.5,686.629 1516.06,686.629 1516.62,686.629 1517.18,686.629 1517.74,686.629 1518.3,686.629 1518.86,686.629 1519.42,686.629 1519.98,686.629 1520.53,686.629 1521.09,686.629 1521.65,686.629 1522.21,686.629 1522.77,686.629 1523.33,686.629 1523.89,686.629 1524.45,686.629 1525.01,686.629 1525.57,686.629 1526.13,686.629 1526.69,686.629 1527.25,686.629 1527.81,686.629 1528.36,686.629 1528.92,686.629 1529.48,686.629 1530.04,686.629 1530.6,686.629 1531.16,686.629 1531.72,686.629 1532.28,686.629 1532.84,686.629 1533.4,686.629 1533.96,686.629 1534.52,686.629 1535.08,686.629 1535.63,686.629 1536.19,686.629 1536.75,686.629 1537.31,686.629 1537.87,686.629 1538.43,686.629 1538.99,686.629 1539.55,686.629 1540.11,686.629 1540.67,686.629 1541.23,686.629 1541.79,686.629 1542.35,686.629 1542.9,686.629 1543.46,686.629 1544.02,686.629 1544.58,686.629 1545.14,686.629 1545.7,686.629 1546.26,686.629 1546.82,686.629 1547.38,686.629 1547.94,686.629 1548.5,686.629 1549.06,686.629 1549.62,686.629 1550.18,686.629 1550.73,686.629 1551.29,686.629 1551.85,686.629 1552.41,686.629 1552.97,686.629 1553.53,686.629 1554.09,686.629 1554.65,686.629 1555.21,686.629 1555.77,686.629 1556.33,686.629 1556.89,686.629 1557.45,686.629 1558,686.629 1558.56,686.629 1559.12,686.629 1559.68,686.629 1560.24,686.629 1560.8,686.629 1561.36,686.629 1561.92,686.629 1562.48,686.629 1563.04,686.629 1563.6,686.629 1564.16,686.629 1564.72,686.629 1565.28,686.629 1565.83,686.629 1566.39,686.629 1566.95,686.629 1567.51,686.629 1568.07,686.629 1568.63,686.629 1569.19,686.629 1569.75,686.629 1570.31,686.629 1570.87,686.629 1571.43,686.629 1571.99,686.629 1572.55,686.629 1573.1,686.629 1573.66,686.629 1574.22,686.629 1574.78,686.629 1575.34,686.629 1575.9,686.629 1576.46,686.629 1577.02,686.629 1577.58,686.629 1578.14,686.629 1578.7,686.629 1579.26,686.629 1579.82,686.629 1580.37,686.629 1580.93,686.629 1581.49,686.629 1582.05,686.629 1582.61,686.629 1583.17,686.629 1583.73,686.629 1584.29,686.629 1584.85,686.629 1585.41,686.629 1585.97,686.629 1586.53,686.629 1587.09,686.629 1587.65,686.629 1588.2,686.629 1588.76,686.629 1589.32,686.629 1589.88,686.629 1590.44,686.629 1591,686.629 1591.56,686.629 1592.12,686.629 1592.68,686.629 1593.24,686.629 1593.8,686.629 1594.36,686.629 1594.92,686.629 1595.47,686.629 1596.03,686.629 1596.59,686.629 1597.15,686.629 1597.71,686.629 1598.27,686.629 1598.83,686.629 1599.39,686.629 1599.95,686.629 1600.51,686.629 1601.07,686.629 1601.63,686.629 1602.19,686.629 1602.74,686.629 1603.3,686.629 1603.86,686.629 1604.42,686.629 1604.98,686.629 1605.54,686.629 1606.1,686.629 1606.66,686.629 1607.22,686.629 1607.78,686.629 1608.34,686.629 1608.9,686.629 1609.46,686.629 1610.02,686.629 1610.57,686.629 1611.13,686.629 1611.69,686.629 1612.25,686.629 1612.81,686.629 1613.37,686.629 1613.93,686.629 1614.49,686.629 1615.05,686.629 1615.61,686.629 1616.17,686.629 1616.73,686.629 1617.29,686.629 1617.84,686.629 1618.4,686.629 1618.96,686.629 1619.52,686.629 1620.08,686.629 1620.64,686.629 1621.2,686.629 1621.76,686.629 1622.32,686.629 1622.88,686.629 1623.44,686.629 1624,686.629 1624.56,686.629 1625.11,686.629 1625.67,686.629 1626.23,686.629 1626.79,686.629 1627.35,686.629 1627.91,686.629 1628.47,686.629 1629.03,686.629 1629.59,686.629 1630.15,686.629 1630.71,686.629 1631.27,686.629 1631.83,686.629 1632.39,686.629 1632.94,686.629 1633.5,686.629 1634.06,686.629 1634.62,686.629 1635.18,686.629 1635.74,686.629 1636.3,686.629 1636.86,686.629 1637.42,686.629 1637.98,686.629 1638.54,686.629 1639.1,686.629 1639.66,686.629 1640.21,686.629 1640.77,686.629 1641.33,686.629 1641.89,686.629 1642.45,686.629 1643.01,686.629 1643.57,686.629 1644.13,686.629 1644.69,686.629 1645.25,686.629 1645.81,686.629 1646.37,686.629 1646.93,686.629 1647.48,686.629 1648.04,686.629 1648.6,686.629 1649.16,686.629 1649.72,686.629 1650.28,686.629 1650.84,686.629 1651.4,686.629 1651.96,686.629 1652.52,686.629 1653.08,686.629 1653.64,686.629 1654.2,686.629 1654.76,686.629 1655.31,686.629 1655.87,686.629 1656.43,686.629 1656.99,686.629 1657.55,686.629 1658.11,686.629 1658.67,686.629 1659.23,686.629 1659.79,686.629 1660.35,686.629 1660.91,686.629 1661.47,686.629 1662.03,686.629 1662.58,686.629 1663.14,686.629 1663.7,686.629 1664.26,686.629 1664.82,686.629 1665.38,686.629 1665.94,686.629 1666.5,686.629 1667.06,686.629 1667.62,686.629 1668.18,686.629 1668.74,686.629 1669.3,686.629 1669.85,686.629 1670.41,686.629 1670.97,686.629 1671.53,686.629 1672.09,686.629 1672.65,686.629 1673.21,686.629 1673.77,686.629 1674.33,686.629 1674.89,686.629 1675.45,686.629 1676.01,686.629 1676.57,686.629 1677.13,686.629 1677.68,686.629 1678.24,686.629 1678.8,686.629 1679.36,686.629 1679.92,686.629 1680.48,686.629 1681.04,686.629 1681.6,686.629 1682.16,686.629 1682.72,686.629 1683.28,686.629 1683.84,686.629 1684.4,686.629 1684.95,686.629 1685.51,686.629 1686.07,686.629 1686.63,686.629 1687.19,686.629 1687.75,686.629 1688.31,686.629 1688.87,686.629 1689.43,686.629 1689.99,686.629 1690.55,686.629 1691.11,686.629 1691.67,686.629 1692.23,686.629 1692.78,686.629 1693.34,686.629 1693.9,686.629 1694.46,686.629 1695.02,686.629 1695.58,686.629 1696.14,686.629 1696.7,686.629 1697.26,686.629 1697.82,686.629 1698.38,686.629 1698.94,686.629 1699.5,686.629 1700.05,686.629 1700.61,686.629 1701.17,686.629 1701.73,686.629 1702.29,686.629 1702.85,686.629 1703.41,686.629 1703.97,686.629 1704.53,686.629 1705.09,686.629 1705.65,686.629 1706.21,686.629 1706.77,686.629 1707.32,686.629 1707.88,686.629 1708.44,686.629 1709,686.629 1709.56,686.629 1710.12,686.629 1710.68,686.629 1711.24,686.629 1711.8,686.629 1712.36,686.629 1712.92,686.629 1713.48,686.629 1714.04,686.629 1714.6,686.629 1715.15,686.629 1715.71,686.629 1716.27,686.629 1716.83,686.629 1717.39,686.629 1717.95,686.629 1718.51,686.629 1719.07,686.629 1719.63,686.629 1720.19,686.629 1720.75,686.629 1721.31,686.629 1721.87,686.629 1722.42,686.629 1722.98,686.629 1723.54,686.629 1724.1,686.629 1724.66,686.629 1725.22,686.629 1725.78,686.629 1726.34,686.629 1726.9,686.629 1727.46,686.629 1728.02,686.629 1728.58,686.629 1729.14,686.629 1729.69,686.629 1730.25,686.629 1730.81,686.629 1731.37,686.629 1731.93,686.629 1732.49,686.629 1733.05,686.629 1733.61,686.629 1734.17,686.629 1734.73,686.629 1735.29,686.629 1735.85,686.629 1736.41,686.629 1736.97,686.629 1737.52,686.629 1738.08,686.629 1738.64,686.629 1739.2,686.629 1739.76,686.629 1740.32,686.629 1740.88,686.629 1741.44,686.629 1742,686.629 1742.56,686.629 1743.12,686.629 1743.68,686.629 1744.24,686.629 1744.79,686.629 1745.35,686.629 1745.91,686.629 1746.47,686.629 1747.03,686.629 1747.59,686.629 1748.15,686.629 1748.71,686.629 1749.27,686.629 1749.83,686.629 1750.39,686.629 1750.95,686.629 1751.51,686.629 1752.06,686.629 1752.62,686.629 1753.18,686.629 1753.74,686.629 1754.3,686.629 1754.86,686.629 1755.42,686.629 1755.98,686.629 1756.54,686.629 1757.1,686.629 1757.66,686.629 1758.22,686.629 1758.78,686.629 1759.34,686.629 1759.89,686.629 1760.45,686.629 1761.01,686.629 1761.57,686.629 1762.13,686.629 1762.69,686.629 1763.25,686.629 1763.81,686.629 1764.37,686.629 1764.93,686.629 1765.49,686.629 1766.05,686.629 1766.61,686.629 1767.16,686.629 1767.72,686.629 1768.28,686.629 1768.84,686.629 1769.4,686.629 1769.96,686.629 1770.52,686.629 1771.08,686.629 1771.64,686.629 1772.2,686.629 1772.76,686.629 1773.32,686.629 1773.88,686.629 1774.43,686.629 1774.99,686.629 1775.55,686.629 1776.11,686.629 1776.67,686.629 1777.23,686.629 1777.79,686.629 1778.35,686.629 1778.91,686.629 1779.47,686.629 1780.03,686.629 1780.59,686.629 1781.15,686.629 1781.71,686.629 1782.26,686.629 1782.82,686.629 1783.38,686.629 1783.94,686.629 1784.5,686.629 1785.06,686.629 1785.62,686.629 1786.18,686.629 1786.74,686.629 1787.3,686.629 1787.86,686.629 1788.42,686.629 1788.98,686.629 1789.53,686.629 1790.09,686.629 1790.65,686.629 1791.21,686.629 1791.77,686.629 1792.33,686.629 1792.89,686.629 1793.45,686.629 1794.01,686.629 1794.57,686.629 1795.13,686.629 1795.69,686.629 1796.25,686.629 1796.8,686.629 1797.36,686.629 1797.92,686.629 1798.48,686.629 1799.04,686.629 1799.6,686.629 1800.16,686.629 1800.72,686.629 1801.28,686.629 1801.84,686.629 1802.4,686.629 1802.96,686.629 1803.52,686.629 1804.08,686.629 1804.63,686.629 1805.19,686.629 1805.75,686.629 1806.31,686.629 1806.87,686.629 1807.43,686.629 1807.99,686.629 1808.55,686.629 1809.11,686.629 1809.67,686.629 1810.23,686.629 1810.79,686.629 1811.35,686.629 1811.9,686.629 1812.46,686.629 1813.02,686.629 1813.58,686.629 1814.14,686.629 1814.7,686.629 1815.26,686.629 1815.82,686.629 1816.38,686.629 1816.94,686.629 1817.5,686.629 1818.06,686.629 1818.62,686.629 1819.18,686.629 1819.73,686.629 1820.29,686.629 1820.85,686.629 1821.41,686.629 1821.97,686.629 1822.53,686.629 1823.09,686.629 1823.65,686.629 1824.21,686.629 1824.77,686.629 1825.33,686.629 1825.89,686.629 1826.45,686.629 1827,686.629 1827.56,686.629 1828.12,686.629 1828.68,686.629 1829.24,686.629 1829.8,686.629 1830.36,686.629 1830.92,686.629 1831.48,686.629 1832.04,686.629 1832.6,686.629 1833.16,686.629 1833.72,686.629 1834.27,686.629 1834.83,686.629 1835.39,686.629 1835.95,686.629 1836.51,686.629 1837.07,686.629 1837.63,686.629 1838.19,686.629 \"/>\n<path clip-path=\"url(#clip143)\" d=\"M720.247 684.077 L720.806 684.077 L721.365 684.077 L721.924 684.077 L722.484 684.077 L723.043 684.077 L723.602 684.077 L724.161 684.077 L724.721 684.077 L725.28 684.077 L725.839 684.077 L726.398 684.077 L726.958 684.077 L727.517 684.077 L728.076 684.077 L728.635 684.077 L729.195 684.077 L729.754 684.077 L730.313 684.077 L730.872 684.077 L731.432 684.077 L731.991 684.077 L732.55 684.077 L733.109 684.077 L733.669 684.077 L734.228 684.077 L734.787 684.077 L735.346 684.077 L735.906 684.077 L736.465 684.077 L737.024 684.077 L737.583 684.077 L738.143 684.077 L738.702 684.077 L739.261 684.077 L739.82 684.077 L740.38 684.077 L740.939 684.077 L741.498 684.077 L742.057 684.077 L742.617 684.077 L743.176 684.077 L743.735 684.077 L744.294 684.077 L744.854 684.077 L745.413 684.077 L745.972 684.077 L746.531 684.077 L747.091 684.077 L747.65 684.077 L748.209 684.077 L748.768 684.077 L749.328 684.077 L749.887 684.077 L750.446 684.077 L751.005 684.077 L751.565 684.077 L752.124 684.077 L752.683 684.077 L753.242 684.077 L753.802 684.077 L754.361 684.077 L754.92 684.077 L755.479 684.077 L756.039 684.077 L756.598 684.077 L757.157 684.077 L757.716 684.077 L758.276 684.077 L758.835 684.077 L759.394 684.077 L759.953 684.077 L760.513 684.077 L761.072 684.077 L761.631 684.077 L762.19 684.077 L762.75 684.077 L763.309 684.077 L763.868 684.077 L764.427 684.077 L764.987 684.077 L765.546 684.077 L766.105 684.077 L766.664 684.077 L767.224 684.077 L767.783 684.077 L768.342 684.077 L768.901 684.077 L769.461 684.077 L770.02 684.077 L770.579 684.077 L771.138 684.077 L771.698 684.077 L772.257 684.077 L772.816 684.077 L773.375 684.077 L773.935 684.077 L774.494 684.077 L775.053 684.077 L775.612 684.077 L776.172 684.077 L776.731 684.077 L777.29 684.077 L777.849 684.077 L778.409 684.077 L778.968 684.077 L779.527 684.077 L780.086 684.077 L780.646 684.077 L781.205 684.077 L781.764 684.077 L782.323 684.077 L782.883 684.077 L783.442 684.077 L784.001 684.077 L784.56 684.077 L785.12 684.077 L785.679 684.077 L786.238 684.077 L786.797 684.077 L787.357 684.077 L787.916 684.077 L788.475 684.077 L789.034 684.077 L789.594 684.077 L790.153 684.077 L790.712 684.077 L791.271 684.077 L791.831 684.077 L792.39 684.077 L792.949 684.077 L793.508 684.077 L794.068 684.077 L794.627 684.077 L795.186 684.077 L795.745 684.077 L796.305 684.077 L796.864 684.077 L797.423 684.077 L797.982 684.077 L798.542 684.077 L799.101 684.077 L799.66 684.077 L800.219 684.077 L800.779 684.077 L801.338 684.077 L801.897 684.077 L802.456 684.077 L803.016 684.077 L803.575 684.077 L804.134 684.077 L804.693 684.077 L805.253 684.077 L805.812 684.077 L806.371 684.077 L806.931 684.077 L807.49 684.077 L808.049 684.077 L808.608 684.077 L809.168 684.077 L809.727 684.077 L810.286 684.077 L810.845 684.077 L811.405 684.077 L811.964 684.077 L812.523 684.077 L813.082 684.077 L813.642 684.077 L814.201 684.077 L814.76 684.077 L815.319 684.077 L815.879 684.077 L816.438 684.077 L816.997 684.077 L817.556 684.077 L818.116 684.077 L818.675 684.077 L819.234 684.077 L819.793 684.077 L820.353 684.077 L820.912 684.077 L821.471 684.077 L822.03 684.077 L822.59 684.077 L823.149 684.077 L823.708 684.077 L824.267 684.077 L824.827 684.077 L825.386 684.077 L825.945 684.077 L826.504 684.077 L827.064 684.077 L827.623 684.077 L828.182 684.077 L828.741 684.077 L829.301 684.077 L829.86 684.077 L830.419 684.077 L830.978 684.077 L831.538 684.077 L832.097 684.077 L832.656 684.077 L833.215 684.077 L833.775 684.077 L834.334 684.077 L834.893 684.077 L835.452 684.077 L836.012 684.077 L836.571 684.077 L837.13 684.077 L837.689 684.077 L838.249 684.077 L838.808 684.077 L839.367 684.077 L839.926 684.077 L840.486 684.077 L841.045 684.077 L841.604 684.077 L842.163 684.077 L842.723 684.077 L843.282 684.077 L843.841 684.077 L844.4 684.077 L844.96 684.077 L845.519 684.077 L846.078 684.077 L846.637 684.077 L847.197 684.077 L847.756 684.077 L848.315 684.077 L848.874 684.077 L849.434 684.077 L849.993 684.077 L850.552 684.077 L851.111 684.077 L851.671 684.077 L852.23 684.077 L852.789 684.077 L853.348 684.077 L853.908 684.077 L854.467 684.077 L855.026 684.077 L855.585 684.077 L856.145 684.077 L856.704 684.077 L857.263 684.077 L857.822 684.077 L858.382 684.077 L858.941 684.077 L859.5 684.077 L860.059 684.077 L860.619 684.077 L861.178 684.077 L861.737 684.077 L862.296 684.077 L862.856 684.077 L863.415 684.077 L863.974 684.077 L864.533 684.077 L865.093 684.077 L865.652 684.077 L866.211 684.077 L866.77 684.077 L867.33 684.077 L867.889 684.077 L868.448 684.077 L869.007 684.077 L869.567 684.077 L870.126 684.077 L870.685 684.077 L871.244 684.077 L871.804 684.077 L872.363 684.077 L872.922 684.077 L873.481 684.077 L874.041 684.077 L874.6 684.077 L875.159 684.077 L875.718 684.077 L876.278 684.077 L876.837 684.077 L877.396 684.077 L877.955 684.077 L878.515 684.077 L879.074 684.077 L879.633 684.077 L880.192 684.077 L880.752 684.077 L881.311 684.077 L881.87 684.077 L882.429 684.077 L882.989 684.077 L883.548 684.077 L884.107 684.077 L884.666 684.077 L885.226 684.077 L885.785 684.077 L886.344 684.077 L886.903 684.077 L887.463 684.077 L888.022 684.077 L888.581 684.077 L889.14 684.077 L889.7 684.077 L890.259 684.077 L890.818 684.077 L891.377 684.077 L891.937 684.077 L892.496 684.077 L893.055 684.077 L893.614 684.077 L894.174 684.077 L894.733 684.077 L895.292 684.077 L895.851 684.077 L896.411 684.077 L896.97 684.077 L897.529 684.077 L898.088 684.077 L898.648 684.077 L899.207 684.077 L899.766 684.077 L900.325 684.077 L900.885 684.077 L901.444 684.077 L902.003 684.077 L902.562 684.077 L903.122 684.077 L903.681 684.077 L904.24 684.077 L904.799 684.077 L905.359 684.077 L905.918 684.077 L906.477 684.077 L907.036 684.077 L907.596 684.077 L908.155 684.077 L908.714 684.077 L909.273 684.077 L909.833 684.077 L910.392 684.077 L910.951 684.077 L911.51 684.077 L912.07 684.077 L912.629 684.077 L913.188 684.077 L913.747 684.077 L914.307 684.077 L914.866 684.077 L915.425 684.077 L915.984 684.077 L916.544 684.077 L917.103 684.077 L917.662 684.077 L918.221 684.077 L918.781 684.077 L919.34 684.077 L919.899 684.077 L920.458 684.077 L921.018 684.077 L921.577 684.077 L922.136 684.077 L922.695 684.077 L923.255 684.077 L923.814 684.077 L924.373 684.077 L924.932 684.077 L925.492 684.077 L926.051 684.077 L926.61 684.077 L927.169 684.077 L927.729 684.077 L928.288 684.077 L928.847 684.077 L929.406 684.077 L929.966 684.077 L930.525 684.077 L931.084 684.077 L931.644 684.077 L932.203 684.077 L932.762 684.077 L933.321 684.077 L933.881 684.077 L934.44 684.077 L934.999 684.077 L935.558 684.077 L936.118 684.077 L936.677 684.077 L937.236 684.077 L937.795 684.077 L938.355 684.077 L938.914 684.077 L939.473 684.077 L940.032 684.077 L940.592 684.077 L941.151 684.077 L941.71 684.077 L942.269 684.077 L942.829 684.077 L943.388 684.077 L943.947 684.077 L944.506 684.077 L945.066 684.077 L945.625 684.077 L946.184 684.077 L946.743 684.077 L947.303 684.077 L947.862 684.077 L948.421 684.077 L948.98 684.077 L949.54 684.077 L950.099 684.077 L950.658 684.077 L951.217 684.077 L951.777 684.077 L952.336 684.077 L952.895 684.077 L953.454 684.077 L954.014 684.077 L954.573 684.077 L955.132 684.077 L955.691 684.077 L956.251 684.077 L956.81 684.077 L957.369 684.077 L957.928 684.077 L958.488 684.077 L959.047 684.077 L959.606 684.077 L960.165 684.077 L960.725 684.077 L961.284 684.077 L961.843 684.077 L962.402 684.077 L962.962 684.077 L963.521 684.077 L964.08 684.077 L964.639 684.077 L965.199 684.077 L965.758 684.077 L966.317 684.077 L966.876 684.077 L967.436 684.077 L967.995 684.077 L968.554 684.077 L969.113 684.077 L969.673 684.077 L970.232 684.077 L970.791 684.077 L971.35 684.077 L971.91 684.077 L972.469 684.077 L973.028 684.077 L973.587 684.077 L974.147 684.077 L974.706 684.077 L975.265 684.077 L975.824 684.077 L976.384 684.077 L976.943 684.077 L977.502 684.077 L978.061 684.077 L978.621 684.077 L979.18 684.077 L979.739 684.077 L980.298 684.077 L980.858 684.077 L981.417 684.077 L981.976 684.077 L982.535 684.077 L983.095 684.077 L983.654 684.077 L984.213 684.077 L984.772 684.077 L985.332 684.077 L985.891 684.077 L986.45 684.077 L987.009 684.077 L987.569 684.077 L988.128 684.077 L988.687 684.077 L989.246 684.077 L989.806 684.077 L990.365 684.077 L990.924 684.077 L991.483 684.077 L992.043 684.077 L992.602 684.077 L993.161 684.077 L993.72 684.077 L994.28 684.077 L994.839 684.077 L995.398 684.077 L995.957 684.077 L996.517 684.077 L997.076 684.077 L997.635 684.077 L998.194 684.077 L998.754 684.077 L999.313 684.077 L999.872 684.077 L1000.43 684.077 L1000.99 684.077 L1001.55 684.077 L1002.11 684.077 L1002.67 684.077 L1003.23 684.077 L1003.79 684.077 L1004.35 684.077 L1004.91 684.077 L1005.46 684.077 L1006.02 684.077 L1006.58 684.077 L1007.14 684.077 L1007.7 684.077 L1008.26 684.077 L1008.82 684.077 L1009.38 684.077 L1009.94 684.077 L1010.5 684.077 L1011.06 684.077 L1011.62 684.077 L1012.18 684.077 L1012.73 684.077 L1013.29 684.077 L1013.85 684.077 L1014.41 684.077 L1014.97 684.077 L1015.53 684.077 L1016.09 684.077 L1016.65 684.077 L1017.21 684.077 L1017.77 684.077 L1018.33 684.077 L1018.89 684.077 L1019.45 684.077 L1020.01 684.077 L1020.56 684.077 L1021.12 684.077 L1021.68 684.077 L1022.24 684.077 L1022.8 684.077 L1023.36 684.077 L1023.92 684.077 L1024.48 684.077 L1025.04 684.077 L1025.6 684.077 L1026.16 684.077 L1026.72 684.077 L1027.28 684.077 L1027.83 684.077 L1028.39 684.077 L1028.95 684.077 L1029.51 684.077 L1030.07 684.077 L1030.63 684.077 L1031.19 684.077 L1031.75 684.077 L1032.31 684.077 L1032.87 684.077 L1033.43 684.077 L1033.99 684.077 L1034.55 684.077 L1035.1 684.077 L1035.66 684.077 L1036.22 684.077 L1036.78 684.077 L1037.34 684.077 L1037.9 684.077 L1038.46 684.077 L1039.02 684.077 L1039.58 684.077 L1040.14 684.077 L1040.7 684.077 L1041.26 684.077 L1041.82 684.077 L1042.38 684.077 L1042.93 684.077 L1043.49 684.077 L1044.05 684.077 L1044.61 684.077 L1045.17 684.077 L1045.73 684.077 L1046.29 684.077 L1046.85 684.077 L1047.41 684.077 L1047.97 684.077 L1048.53 684.077 L1049.09 684.077 L1049.65 684.077 L1050.2 684.077 L1050.76 684.077 L1051.32 684.077 L1051.88 684.077 L1052.44 684.077 L1053 684.077 L1053.56 684.077 L1054.12 684.077 L1054.68 684.077 L1055.24 684.077 L1055.8 684.077 L1056.36 684.077 L1056.92 684.077 L1057.48 684.077 L1058.03 684.077 L1058.59 684.077 L1059.15 684.077 L1059.71 684.077 L1060.27 684.077 L1060.83 684.077 L1061.39 684.077 L1061.95 684.077 L1062.51 684.077 L1063.07 684.077 L1063.63 684.077 L1064.19 684.077 L1064.75 684.077 L1065.3 684.077 L1065.86 684.077 L1066.42 684.077 L1066.98 684.077 L1067.54 684.077 L1068.1 684.077 L1068.66 684.077 L1069.22 684.077 L1069.78 684.077 L1070.34 684.077 L1070.9 684.077 L1071.46 684.077 L1072.02 684.077 L1072.57 684.077 L1073.13 684.077 L1073.69 684.077 L1074.25 684.077 L1074.81 684.077 L1075.37 684.077 L1075.93 684.077 L1076.49 684.077 L1077.05 684.077 L1077.61 684.077 L1078.17 684.077 L1078.73 684.077 L1079.29 684.077 L1079.85 684.077 L1080.4 684.077 L1080.96 684.077 L1081.52 684.077 L1082.08 684.077 L1082.64 684.077 L1083.2 684.077 L1083.76 684.077 L1084.32 684.077 L1084.88 684.077 L1085.44 684.077 L1086 684.077 L1086.56 684.077 L1087.12 684.077 L1087.67 684.077 L1088.23 684.077 L1088.79 684.077 L1089.35 684.077 L1089.91 684.077 L1090.47 684.077 L1091.03 684.077 L1091.59 684.077 L1092.15 684.077 L1092.71 684.077 L1093.27 684.077 L1093.83 684.077 L1094.39 684.077 L1094.94 684.077 L1095.5 684.077 L1096.06 684.077 L1096.62 684.077 L1097.18 684.077 L1097.74 684.077 L1098.3 684.077 L1098.86 684.077 L1099.42 684.077 L1099.98 684.077 L1100.54 684.077 L1101.1 684.077 L1101.66 684.077 L1102.22 684.077 L1102.77 684.077 L1103.33 684.077 L1103.89 684.077 L1104.45 684.077 L1105.01 684.077 L1105.57 684.077 L1106.13 684.077 L1106.69 684.077 L1107.25 684.077 L1107.81 684.077 L1108.37 684.077 L1108.93 684.077 L1109.49 684.077 L1110.04 684.077 L1110.6 684.077 L1111.16 684.077 L1111.72 684.077 L1112.28 684.077 L1112.84 684.077 L1113.4 684.077 L1113.96 684.077 L1114.52 684.077 L1115.08 684.077 L1115.64 684.077 L1116.2 684.077 L1116.76 684.077 L1117.31 684.077 L1117.87 684.077 L1118.43 684.077 L1118.99 684.077 L1119.55 684.077 L1120.11 684.077 L1120.67 684.077 L1121.23 684.077 L1121.79 684.077 L1122.35 684.077 L1122.91 684.077 L1123.47 684.077 L1124.03 684.077 L1124.59 684.077 L1125.14 684.077 L1125.7 684.077 L1126.26 684.077 L1126.82 684.077 L1127.38 684.077 L1127.94 684.077 L1128.5 684.077 L1129.06 684.077 L1129.62 684.077 L1130.18 684.077 L1130.74 684.077 L1131.3 684.077 L1131.86 684.077 L1132.41 684.077 L1132.97 684.077 L1133.53 684.077 L1134.09 684.077 L1134.65 684.077 L1135.21 684.077 L1135.77 684.077 L1136.33 684.077 L1136.89 684.077 L1137.45 684.077 L1138.01 684.077 L1138.57 684.077 L1139.13 684.077 L1139.68 684.077 L1140.24 684.077 L1140.8 684.077 L1141.36 684.077 L1141.92 684.077 L1142.48 684.077 L1143.04 684.077 L1143.6 684.077 L1144.16 684.077 L1144.72 684.077 L1145.28 684.077 L1145.84 684.077 L1146.4 684.077 L1146.96 684.077 L1147.51 684.077 L1148.07 684.077 L1148.63 684.077 L1149.19 684.077 L1149.75 684.077 L1150.31 684.077 L1150.87 684.077 L1151.43 684.077 L1151.99 684.077 L1152.55 684.077 L1153.11 684.077 L1153.67 684.077 L1154.23 684.077 L1154.78 684.077 L1155.34 684.077 L1155.9 684.077 L1156.46 684.077 L1157.02 684.077 L1157.58 684.077 L1158.14 684.077 L1158.7 684.077 L1159.26 684.077 L1159.82 684.077 L1160.38 684.077 L1160.94 684.077 L1161.5 684.077 L1162.05 684.077 L1162.61 684.077 L1163.17 684.077 L1163.73 684.077 L1164.29 684.077 L1164.85 684.077 L1165.41 684.077 L1165.97 684.077 L1166.53 684.077 L1167.09 684.077 L1167.65 684.077 L1168.21 684.077 L1168.77 684.077 L1169.33 684.077 L1169.88 684.077 L1170.44 684.077 L1171 684.077 L1171.56 684.077 L1172.12 684.077 L1172.68 684.077 L1173.24 684.077 L1173.8 684.077 L1174.36 684.077 L1174.92 684.077 L1175.48 684.077 L1176.04 684.077 L1176.6 684.077 L1177.15 684.077 L1177.71 684.077 L1178.27 684.077 L1178.83 684.077 L1179.39 684.077 L1179.95 684.077 L1180.51 684.077 L1181.07 684.077 L1181.63 684.077 L1182.19 684.077 L1182.75 684.077 L1183.31 684.077 L1183.87 684.077 L1184.43 684.077 L1184.98 684.077 L1185.54 684.077 L1186.1 684.077 L1186.66 684.077 L1187.22 684.077 L1187.78 684.077 L1188.34 684.077 L1188.9 684.077 L1189.46 684.077 L1190.02 684.077 L1190.58 684.077 L1191.14 684.077 L1191.7 684.077 L1192.25 684.077 L1192.81 684.077 L1193.37 684.077 L1193.93 684.077 L1194.49 684.077 L1195.05 684.077 L1195.61 684.077 L1196.17 684.077 L1196.73 684.077 L1197.29 684.077 L1197.85 684.077 L1198.41 684.077 L1198.97 684.077 L1199.52 684.077 L1200.08 684.077 L1200.64 684.077 L1201.2 684.077 L1201.76 684.077 L1202.32 684.077 L1202.88 684.077 L1203.44 684.077 L1204 684.077 L1204.56 684.077 L1205.12 684.077 L1205.68 684.077 L1206.24 684.077 L1206.8 684.077 L1207.35 684.077 L1207.91 684.077 L1208.47 684.077 L1209.03 684.077 L1209.59 684.077 L1210.15 684.077 L1210.71 684.077 L1211.27 684.077 L1211.83 684.077 L1212.39 684.077 L1212.95 684.077 L1213.51 684.077 L1214.07 684.077 L1214.62 684.077 L1215.18 684.077 L1215.74 684.077 L1216.3 684.077 L1216.86 684.077 L1217.42 684.077 L1217.98 684.077 L1218.54 684.077 L1219.1 684.077 L1219.66 684.077 L1220.22 684.077 L1220.78 684.077 L1221.34 684.077 L1221.89 684.077 L1222.45 684.077 L1223.01 684.077 L1223.57 684.077 L1224.13 684.077 L1224.69 684.077 L1225.25 684.077 L1225.81 684.077 L1226.37 684.077 L1226.93 684.077 L1227.49 684.077 L1228.05 684.077 L1228.61 684.077 L1229.17 684.077 L1229.72 684.077 L1230.28 684.077 L1230.84 684.077 L1231.4 684.077 L1231.96 684.077 L1232.52 684.077 L1233.08 684.077 L1233.64 684.077 L1234.2 684.077 L1234.76 684.077 L1235.32 684.077 L1235.88 684.077 L1236.44 684.077 L1236.99 684.077 L1237.55 684.077 L1238.11 684.077 L1238.67 684.077 L1239.23 684.077 L1239.79 684.077 L1240.35 684.077 L1240.91 684.077 L1241.47 684.077 L1242.03 684.077 L1242.59 684.077 L1243.15 684.077 L1243.71 684.077 L1244.26 684.077 L1244.82 684.077 L1245.38 684.077 L1245.94 684.077 L1246.5 684.077 L1247.06 684.077 L1247.62 684.077 L1248.18 684.077 L1248.74 684.077 L1249.3 684.077 L1249.86 684.077 L1250.42 684.077 L1250.98 684.077 L1251.54 684.077 L1252.09 684.077 L1252.65 684.077 L1253.21 684.077 L1253.77 684.077 L1254.33 684.077 L1254.89 684.077 L1255.45 684.077 L1256.01 684.077 L1256.57 684.077 L1257.13 684.077 L1257.69 684.077 L1258.25 684.077 L1258.81 684.077 L1259.36 684.077 L1259.92 684.077 L1260.48 684.077 L1261.04 684.077 L1261.6 684.077 L1262.16 684.077 L1262.72 684.077 L1263.28 684.077 L1263.84 684.077 L1264.4 684.077 L1264.96 684.077 L1265.52 684.077 L1266.08 684.077 L1266.63 684.077 L1267.19 684.077 L1267.75 684.077 L1268.31 684.077 L1268.87 684.077 L1269.43 684.077 L1269.99 684.077 L1270.55 684.077 L1271.11 684.077 L1271.67 684.077 L1272.23 684.077 L1272.79 684.077 L1273.35 684.077 L1273.91 684.077 L1274.46 684.077 L1275.02 684.077 L1275.58 684.077 L1276.14 684.077 L1276.7 684.077 L1277.26 684.077 L1277.82 684.077 L1278.38 684.077 L1278.94 684.077 L1279.5 684.077 L1280.06 684.077 L1280.62 684.077 L1281.18 684.077 L1281.73 684.077 L1282.29 684.077 L1282.85 684.077 L1283.41 684.077 L1283.97 684.077 L1284.53 684.077 L1285.09 684.077 L1285.65 684.077 L1286.21 684.077 L1286.77 684.077 L1287.33 684.077 L1287.89 684.077 L1288.45 684.077 L1289 684.077 L1289.56 684.077 L1290.12 684.077 L1290.68 684.077 L1291.24 684.077 L1291.8 684.077 L1292.36 684.077 L1292.92 684.077 L1293.48 684.077 L1294.04 684.077 L1294.6 684.077 L1295.16 684.077 L1295.72 684.077 L1296.28 684.077 L1296.83 684.077 L1297.39 684.077 L1297.95 684.077 L1298.51 684.077 L1299.07 684.077 L1299.63 684.077 L1300.19 684.077 L1300.75 684.077 L1301.31 684.077 L1301.87 684.077 L1302.43 684.077 L1302.99 684.077 L1303.55 684.077 L1304.1 684.077 L1304.66 684.077 L1305.22 684.077 L1305.78 684.077 L1306.34 684.077 L1306.9 684.077 L1307.46 684.077 L1308.02 684.077 L1308.58 684.077 L1309.14 684.077 L1309.7 684.077 L1310.26 684.077 L1310.82 684.077 L1311.38 684.077 L1311.93 684.077 L1312.49 684.077 L1313.05 684.077 L1313.61 684.077 L1314.17 684.077 L1314.73 684.077 L1315.29 684.077 L1315.85 684.077 L1316.41 684.077 L1316.97 684.077 L1317.53 684.077 L1318.09 684.077 L1318.65 684.077 L1319.2 684.077 L1319.76 684.077 L1320.32 684.077 L1320.88 684.077 L1321.44 684.077 L1322 684.077 L1322.56 684.077 L1323.12 684.077 L1323.68 684.077 L1324.24 684.077 L1324.8 684.077 L1325.36 684.077 L1325.92 684.077 L1326.47 684.077 L1327.03 684.077 L1327.59 684.077 L1328.15 684.077 L1328.71 684.077 L1329.27 684.077 L1329.83 684.077 L1330.39 684.077 L1330.95 684.077 L1331.51 684.077 L1332.07 684.077 L1332.63 684.077 L1333.19 684.077 L1333.75 684.077 L1334.3 684.077 L1334.86 684.077 L1335.42 684.077 L1335.98 684.077 L1336.54 684.077 L1337.1 684.077 L1337.66 684.077 L1338.22 684.077 L1338.78 684.077 L1339.34 684.077 L1339.9 684.077 L1340.46 684.077 L1341.02 684.077 L1341.57 684.077 L1342.13 684.077 L1342.69 684.077 L1343.25 684.077 L1343.81 684.077 L1344.37 684.077 L1344.93 684.077 L1345.49 684.077 L1346.05 684.077 L1346.61 684.077 L1347.17 684.077 L1347.73 684.077 L1348.29 684.077 L1348.84 684.077 L1349.4 684.077 L1349.96 684.077 L1350.52 684.077 L1351.08 684.077 L1351.64 684.077 L1352.2 684.077 L1352.76 684.077 L1353.32 684.077 L1353.88 684.077 L1354.44 684.077 L1355 684.077 L1355.56 684.077 L1356.12 684.077 L1356.67 684.077 L1357.23 684.077 L1357.79 684.077 L1358.35 684.077 L1358.91 684.077 L1359.47 684.077 L1360.03 684.077 L1360.59 684.077 L1361.15 684.077 L1361.71 684.077 L1362.27 684.077 L1362.83 684.077 L1363.39 684.077 L1363.94 684.077 L1364.5 684.077 L1365.06 684.077 L1365.62 684.077 L1366.18 684.077 L1366.74 684.077 L1367.3 684.077 L1367.86 684.077 L1368.42 684.077 L1368.98 684.077 L1369.54 684.077 L1370.1 684.077 L1370.66 684.077 L1371.21 684.077 L1371.77 684.077 L1372.33 684.077 L1372.89 684.077 L1373.45 684.077 L1374.01 684.077 L1374.57 684.077 L1375.13 684.077 L1375.69 684.077 L1376.25 684.077 L1376.81 684.077 L1377.37 684.077 L1377.93 684.077 L1378.49 684.077 L1379.04 684.077 L1379.6 684.077 L1380.16 684.077 L1380.72 684.077 L1381.28 684.077 L1381.84 684.077 L1382.4 684.077 L1382.96 684.077 L1383.52 684.077 L1384.08 684.077 L1384.64 684.077 L1385.2 684.077 L1385.76 684.077 L1386.31 684.077 L1386.87 684.077 L1387.43 684.077 L1387.99 684.077 L1388.55 684.077 L1389.11 684.077 L1389.67 684.077 L1390.23 684.077 L1390.79 684.077 L1391.35 684.077 L1391.91 684.077 L1392.47 684.077 L1393.03 684.077 L1393.58 684.077 L1394.14 684.077 L1394.7 684.077 L1395.26 684.077 L1395.82 684.077 L1396.38 684.077 L1396.94 684.077 L1397.5 684.077 L1398.06 684.077 L1398.62 684.077 L1399.18 684.077 L1399.74 684.077 L1400.3 684.077 L1400.86 684.077 L1401.41 684.077 L1401.97 684.077 L1402.53 684.077 L1403.09 684.077 L1403.65 684.077 L1404.21 684.077 L1404.77 684.077 L1405.33 684.077 L1405.89 684.077 L1406.45 684.077 L1407.01 684.077 L1407.57 684.077 L1408.13 684.077 L1408.68 684.077 L1409.24 684.077 L1409.8 684.077 L1410.36 684.077 L1410.92 684.077 L1411.48 684.077 L1412.04 684.077 L1412.6 684.077 L1413.16 684.077 L1413.72 684.077 L1414.28 684.077 L1414.84 684.077 L1415.4 684.077 L1415.95 684.077 L1416.51 684.077 L1417.07 684.077 L1417.63 684.077 L1418.19 684.077 L1418.75 684.077 L1419.31 684.077 L1419.87 684.077 L1420.43 684.077 L1420.99 684.077 L1421.55 684.077 L1422.11 684.077 L1422.67 684.077 L1423.23 684.077 L1423.78 684.077 L1424.34 684.077 L1424.9 684.077 L1425.46 684.077 L1426.02 684.077 L1426.58 684.077 L1427.14 684.077 L1427.7 684.077 L1428.26 684.077 L1428.82 684.077 L1429.38 684.077 L1429.94 684.077 L1430.5 684.077 L1431.05 684.077 L1431.61 684.077 L1432.17 684.077 L1432.73 684.077 L1433.29 684.077 L1433.85 684.077 L1434.41 684.077 L1434.97 684.077 L1435.53 684.077 L1436.09 684.077 L1436.65 684.077 L1437.21 684.077 L1437.77 684.077 L1438.33 684.077 L1438.88 684.077 L1439.44 684.077 L1440 684.077 L1440.56 684.077 L1441.12 684.077 L1441.68 684.077 L1442.24 684.077 L1442.8 684.077 L1443.36 684.077 L1443.92 684.077 L1444.48 684.077 L1445.04 684.077 L1445.6 684.077 L1446.15 684.077 L1446.71 684.077 L1447.27 684.077 L1447.83 684.077 L1448.39 684.077 L1448.95 684.077 L1449.51 684.077 L1450.07 684.077 L1450.63 684.077 L1451.19 684.077 L1451.75 684.077 L1452.31 684.077 L1452.87 684.077 L1453.42 684.077 L1453.98 684.077 L1454.54 684.077 L1455.1 684.077 L1455.66 684.077 L1456.22 684.077 L1456.78 684.077 L1457.34 684.077 L1457.9 684.077 L1458.46 684.077 L1459.02 684.077 L1459.58 684.077 L1460.14 684.077 L1460.7 684.077 L1461.25 684.077 L1461.81 684.077 L1462.37 684.077 L1462.93 684.077 L1463.49 684.077 L1464.05 684.077 L1464.61 684.077 L1465.17 684.077 L1465.73 684.077 L1466.29 684.077 L1466.85 684.077 L1467.41 684.077 L1467.97 684.077 L1468.52 684.077 L1469.08 684.077 L1469.64 684.077 L1470.2 684.077 L1470.76 684.077 L1471.32 684.077 L1471.88 684.077 L1472.44 684.077 L1473 684.077 L1473.56 684.077 L1474.12 684.077 L1474.68 684.077 L1475.24 684.077 L1475.79 684.077 L1476.35 684.077 L1476.91 684.077 L1477.47 684.077 L1478.03 684.077 L1478.59 684.077 L1479.15 684.077 L1479.71 684.077 L1480.27 684.077 L1480.83 684.077 L1481.39 684.077 L1481.95 684.077 L1482.51 684.077 L1483.07 684.077 L1483.62 684.077 L1484.18 684.077 L1484.74 684.077 L1485.3 684.077 L1485.86 684.077 L1486.42 684.077 L1486.98 684.077 L1487.54 684.077 L1488.1 684.077 L1488.66 684.077 L1489.22 684.077 L1489.78 684.077 L1490.34 684.077 L1490.89 684.077 L1491.45 684.077 L1492.01 684.077 L1492.57 684.077 L1493.13 684.077 L1493.69 684.077 L1494.25 684.077 L1494.81 684.077 L1495.37 684.077 L1495.93 684.077 L1496.49 684.077 L1497.05 684.077 L1497.61 684.077 L1498.16 684.077 L1498.72 684.077 L1499.28 684.077 L1499.84 684.077 L1500.4 684.077 L1500.96 684.077 L1501.52 684.077 L1502.08 684.077 L1502.64 684.077 L1503.2 684.077 L1503.76 684.077 L1504.32 684.077 L1504.88 684.077 L1505.44 684.077 L1505.99 684.077 L1506.55 684.077 L1507.11 684.077 L1507.67 684.077 L1508.23 684.077 L1508.79 684.077 L1509.35 684.077 L1509.91 684.077 L1510.47 684.077 L1511.03 684.077 L1511.59 684.077 L1512.15 684.077 L1512.71 684.077 L1513.26 684.077 L1513.82 684.077 L1514.38 684.077 L1514.94 684.077 L1515.5 684.077 L1516.06 684.077 L1516.62 684.077 L1517.18 684.077 L1517.74 684.077 L1518.3 684.077 L1518.86 684.077 L1519.42 684.077 L1519.98 684.077 L1520.53 684.077 L1521.09 684.077 L1521.65 684.077 L1522.21 684.077 L1522.77 684.077 L1523.33 684.077 L1523.89 684.077 L1524.45 684.077 L1525.01 684.077 L1525.57 684.077 L1526.13 684.077 L1526.69 684.077 L1527.25 684.077 L1527.81 684.077 L1528.36 684.077 L1528.92 684.077 L1529.48 684.077 L1530.04 684.077 L1530.6 684.077 L1531.16 684.077 L1531.72 684.077 L1532.28 684.077 L1532.84 684.077 L1533.4 684.077 L1533.96 684.077 L1534.52 684.077 L1535.08 684.077 L1535.63 684.077 L1536.19 684.077 L1536.75 684.077 L1537.31 684.077 L1537.87 684.077 L1538.43 684.077 L1538.99 684.077 L1539.55 684.077 L1540.11 684.077 L1540.67 684.077 L1541.23 684.077 L1541.79 684.077 L1542.35 684.077 L1542.9 684.077 L1543.46 684.077 L1544.02 684.077 L1544.58 684.077 L1545.14 684.077 L1545.7 684.077 L1546.26 684.077 L1546.82 684.077 L1547.38 684.077 L1547.94 684.077 L1548.5 684.077 L1549.06 684.077 L1549.62 684.077 L1550.18 684.077 L1550.73 684.077 L1551.29 684.077 L1551.85 684.077 L1552.41 684.077 L1552.97 684.077 L1553.53 684.077 L1554.09 684.077 L1554.65 684.077 L1555.21 684.077 L1555.77 684.077 L1556.33 684.077 L1556.89 684.077 L1557.45 684.077 L1558 684.077 L1558.56 684.077 L1559.12 684.077 L1559.68 684.077 L1560.24 684.077 L1560.8 684.077 L1561.36 684.077 L1561.92 684.077 L1562.48 684.077 L1563.04 684.077 L1563.6 684.077 L1564.16 684.077 L1564.72 684.077 L1565.28 684.077 L1565.83 684.077 L1566.39 684.077 L1566.95 684.077 L1567.51 684.077 L1568.07 684.077 L1568.63 684.077 L1569.19 684.077 L1569.75 684.077 L1570.31 684.077 L1570.87 684.077 L1571.43 684.077 L1571.99 684.077 L1572.55 684.077 L1573.1 684.077 L1573.66 684.077 L1574.22 684.077 L1574.78 684.077 L1575.34 684.077 L1575.9 684.077 L1576.46 684.077 L1577.02 684.077 L1577.58 684.077 L1578.14 684.077 L1578.7 684.077 L1579.26 684.077 L1579.82 684.077 L1580.37 684.077 L1580.93 684.077 L1581.49 684.077 L1582.05 684.077 L1582.61 684.077 L1583.17 684.077 L1583.73 684.077 L1584.29 684.077 L1584.85 684.077 L1585.41 684.077 L1585.97 684.077 L1586.53 684.077 L1587.09 684.077 L1587.65 684.077 L1588.2 684.077 L1588.76 684.077 L1589.32 684.077 L1589.88 684.077 L1590.44 684.077 L1591 684.077 L1591.56 684.077 L1592.12 684.077 L1592.68 684.077 L1593.24 684.077 L1593.8 684.077 L1594.36 684.077 L1594.92 684.077 L1595.47 684.077 L1596.03 684.077 L1596.59 684.077 L1597.15 684.077 L1597.71 684.077 L1598.27 684.077 L1598.83 684.077 L1599.39 684.077 L1599.95 684.077 L1600.51 684.077 L1601.07 684.077 L1601.63 684.077 L1602.19 684.077 L1602.74 684.077 L1603.3 684.077 L1603.86 684.077 L1604.42 684.077 L1604.98 684.077 L1605.54 684.077 L1606.1 684.077 L1606.66 684.077 L1607.22 684.077 L1607.78 684.077 L1608.34 684.077 L1608.9 684.077 L1609.46 684.077 L1610.02 684.077 L1610.57 684.077 L1611.13 684.077 L1611.69 684.077 L1612.25 684.077 L1612.81 684.077 L1613.37 684.077 L1613.93 684.077 L1614.49 684.077 L1615.05 684.077 L1615.61 684.077 L1616.17 684.077 L1616.73 684.077 L1617.29 684.077 L1617.84 684.077 L1618.4 684.077 L1618.96 684.077 L1619.52 684.077 L1620.08 684.077 L1620.64 684.077 L1621.2 684.077 L1621.76 684.077 L1622.32 684.077 L1622.88 684.077 L1623.44 684.077 L1624 684.077 L1624.56 684.077 L1625.11 684.077 L1625.67 684.077 L1626.23 684.077 L1626.79 684.077 L1627.35 684.077 L1627.91 684.077 L1628.47 684.077 L1629.03 684.077 L1629.59 684.077 L1630.15 684.077 L1630.71 684.077 L1631.27 684.077 L1631.83 684.077 L1632.39 684.077 L1632.94 684.077 L1633.5 684.077 L1634.06 684.077 L1634.62 684.077 L1635.18 684.077 L1635.74 684.077 L1636.3 684.077 L1636.86 684.077 L1637.42 684.077 L1637.98 684.077 L1638.54 684.077 L1639.1 684.077 L1639.66 684.077 L1640.21 684.077 L1640.77 684.077 L1641.33 684.077 L1641.89 684.077 L1642.45 684.077 L1643.01 684.077 L1643.57 684.077 L1644.13 684.077 L1644.69 684.077 L1645.25 684.077 L1645.81 684.077 L1646.37 684.077 L1646.93 684.077 L1647.48 684.077 L1648.04 684.077 L1648.6 684.077 L1649.16 684.077 L1649.72 684.077 L1650.28 684.077 L1650.84 684.077 L1651.4 684.077 L1651.96 684.077 L1652.52 684.077 L1653.08 684.077 L1653.64 684.077 L1654.2 684.077 L1654.76 684.077 L1655.31 684.077 L1655.87 684.077 L1656.43 684.077 L1656.99 684.077 L1657.55 684.077 L1658.11 684.077 L1658.67 684.077 L1659.23 684.077 L1659.79 684.077 L1660.35 684.077 L1660.91 684.077 L1661.47 684.077 L1662.03 684.077 L1662.58 684.077 L1663.14 684.077 L1663.7 684.077 L1664.26 684.077 L1664.82 684.077 L1665.38 684.077 L1665.94 684.077 L1666.5 684.077 L1667.06 684.077 L1667.62 684.077 L1668.18 684.077 L1668.74 684.077 L1669.3 684.077 L1669.85 684.077 L1670.41 684.077 L1670.97 684.077 L1671.53 684.077 L1672.09 684.077 L1672.65 684.077 L1673.21 684.077 L1673.77 684.077 L1674.33 684.077 L1674.89 684.077 L1675.45 684.077 L1676.01 684.077 L1676.57 684.077 L1677.13 684.077 L1677.68 684.077 L1678.24 684.077 L1678.8 684.077 L1679.36 684.077 L1679.92 684.077 L1680.48 684.077 L1681.04 684.077 L1681.6 684.077 L1682.16 684.077 L1682.72 684.077 L1683.28 684.077 L1683.84 684.077 L1684.4 684.077 L1684.95 684.077 L1685.51 684.077 L1686.07 684.077 L1686.63 684.077 L1687.19 684.077 L1687.75 684.077 L1688.31 684.077 L1688.87 684.077 L1689.43 684.077 L1689.99 684.077 L1690.55 684.077 L1691.11 684.077 L1691.67 684.077 L1692.23 684.077 L1692.78 684.077 L1693.34 684.077 L1693.9 684.077 L1694.46 684.077 L1695.02 684.077 L1695.58 684.077 L1696.14 684.077 L1696.7 684.077 L1697.26 684.077 L1697.82 684.077 L1698.38 684.077 L1698.94 684.077 L1699.5 684.077 L1700.05 684.077 L1700.61 684.077 L1701.17 684.077 L1701.73 684.077 L1702.29 684.077 L1702.85 684.077 L1703.41 684.077 L1703.97 684.077 L1704.53 684.077 L1705.09 684.077 L1705.65 684.077 L1706.21 684.077 L1706.77 684.077 L1707.32 684.077 L1707.88 684.077 L1708.44 684.077 L1709 684.077 L1709.56 684.077 L1710.12 684.077 L1710.68 684.077 L1711.24 684.077 L1711.8 684.077 L1712.36 684.077 L1712.92 684.077 L1713.48 684.077 L1714.04 684.077 L1714.6 684.077 L1715.15 684.077 L1715.71 684.077 L1716.27 684.077 L1716.83 684.077 L1717.39 684.077 L1717.95 684.077 L1718.51 684.077 L1719.07 684.077 L1719.63 684.077 L1720.19 684.077 L1720.75 684.077 L1721.31 684.077 L1721.87 684.077 L1722.42 684.077 L1722.98 684.077 L1723.54 684.077 L1724.1 684.077 L1724.66 684.077 L1725.22 684.077 L1725.78 684.077 L1726.34 684.077 L1726.9 684.077 L1727.46 684.077 L1728.02 684.077 L1728.58 684.077 L1729.14 684.077 L1729.69 684.077 L1730.25 684.077 L1730.81 684.077 L1731.37 684.077 L1731.93 684.077 L1732.49 684.077 L1733.05 684.077 L1733.61 684.077 L1734.17 684.077 L1734.73 684.077 L1735.29 684.077 L1735.85 684.077 L1736.41 684.077 L1736.97 684.077 L1737.52 684.077 L1738.08 684.077 L1738.64 684.077 L1739.2 684.077 L1739.76 684.077 L1740.32 684.077 L1740.88 684.077 L1741.44 684.077 L1742 684.077 L1742.56 684.077 L1743.12 684.077 L1743.68 684.077 L1744.24 684.077 L1744.79 684.077 L1745.35 684.077 L1745.91 684.077 L1746.47 684.077 L1747.03 684.077 L1747.59 684.077 L1748.15 684.077 L1748.71 684.077 L1749.27 684.077 L1749.83 684.077 L1750.39 684.077 L1750.95 684.077 L1751.51 684.077 L1752.06 684.077 L1752.62 684.077 L1753.18 684.077 L1753.74 684.077 L1754.3 684.077 L1754.86 684.077 L1755.42 684.077 L1755.98 684.077 L1756.54 684.077 L1757.1 684.077 L1757.66 684.077 L1758.22 684.077 L1758.78 684.077 L1759.34 684.077 L1759.89 684.077 L1760.45 684.077 L1761.01 684.077 L1761.57 684.077 L1762.13 684.077 L1762.69 684.077 L1763.25 684.077 L1763.81 684.077 L1764.37 684.077 L1764.93 684.077 L1765.49 684.077 L1766.05 684.077 L1766.61 684.077 L1767.16 684.077 L1767.72 684.077 L1768.28 684.077 L1768.84 684.077 L1769.4 684.077 L1769.96 684.077 L1770.52 684.077 L1771.08 684.077 L1771.64 684.077 L1772.2 684.077 L1772.76 684.077 L1773.32 684.077 L1773.88 684.077 L1774.43 684.077 L1774.99 684.077 L1775.55 684.077 L1776.11 684.077 L1776.67 684.077 L1777.23 684.077 L1777.79 684.077 L1778.35 684.077 L1778.91 684.077 L1779.47 684.077 L1780.03 684.077 L1780.59 684.077 L1781.15 684.077 L1781.71 684.077 L1782.26 684.077 L1782.82 684.077 L1783.38 684.077 L1783.94 684.077 L1784.5 684.077 L1785.06 684.077 L1785.62 684.077 L1786.18 684.077 L1786.74 684.077 L1787.3 684.077 L1787.86 684.077 L1788.42 684.077 L1788.98 684.077 L1789.53 684.077 L1790.09 684.077 L1790.65 684.077 L1791.21 684.077 L1791.77 684.077 L1792.33 684.077 L1792.89 684.077 L1793.45 684.077 L1794.01 684.077 L1794.57 684.077 L1795.13 684.077 L1795.69 684.077 L1796.25 684.077 L1796.8 684.077 L1797.36 684.077 L1797.92 684.077 L1798.48 684.077 L1799.04 684.077 L1799.6 684.077 L1800.16 684.077 L1800.72 684.077 L1801.28 684.077 L1801.84 684.077 L1802.4 684.077 L1802.96 684.077 L1803.52 684.077 L1804.08 684.077 L1804.63 684.077 L1805.19 684.077 L1805.75 684.077 L1806.31 684.077 L1806.87 684.077 L1807.43 684.077 L1807.99 684.077 L1808.55 684.077 L1809.11 684.077 L1809.67 684.077 L1810.23 684.077 L1810.79 684.077 L1811.35 684.077 L1811.9 684.077 L1812.46 684.077 L1813.02 684.077 L1813.58 684.077 L1814.14 684.077 L1814.7 684.077 L1815.26 684.077 L1815.82 684.077 L1816.38 684.077 L1816.94 684.077 L1817.5 684.077 L1818.06 684.077 L1818.62 684.077 L1819.18 684.077 L1819.73 684.077 L1820.29 684.077 L1820.85 684.077 L1821.41 684.077 L1821.97 684.077 L1822.53 684.077 L1823.09 684.077 L1823.65 684.077 L1824.21 684.077 L1824.77 684.077 L1825.33 684.077 L1825.89 684.077 L1826.45 684.077 L1827 684.077 L1827.56 684.077 L1828.12 684.077 L1828.68 684.077 L1829.24 684.077 L1829.8 684.077 L1830.36 684.077 L1830.92 684.077 L1831.48 684.077 L1832.04 684.077 L1832.6 684.077 L1833.16 684.077 L1833.72 684.077 L1834.27 684.077 L1834.83 684.077 L1835.39 684.077 L1835.95 684.077 L1836.51 684.077 L1837.07 684.077 L1837.63 684.077 L1838.19 684.077 L1838.19 682.708 L1837.63 682.708 L1837.07 682.708 L1836.51 682.708 L1835.95 682.708 L1835.39 682.708 L1834.83 682.708 L1834.27 682.708 L1833.72 682.708 L1833.16 682.708 L1832.6 682.708 L1832.04 682.708 L1831.48 682.708 L1830.92 682.708 L1830.36 682.708 L1829.8 682.708 L1829.24 682.708 L1828.68 682.708 L1828.12 682.708 L1827.56 682.708 L1827 682.708 L1826.45 682.708 L1825.89 682.708 L1825.33 682.708 L1824.77 682.708 L1824.21 682.708 L1823.65 682.708 L1823.09 682.708 L1822.53 682.708 L1821.97 682.708 L1821.41 682.708 L1820.85 682.708 L1820.29 682.708 L1819.73 682.708 L1819.18 682.708 L1818.62 682.708 L1818.06 682.708 L1817.5 682.708 L1816.94 682.708 L1816.38 682.708 L1815.82 682.708 L1815.26 682.708 L1814.7 682.708 L1814.14 682.708 L1813.58 682.708 L1813.02 682.708 L1812.46 682.708 L1811.9 682.708 L1811.35 682.708 L1810.79 682.708 L1810.23 682.708 L1809.67 682.708 L1809.11 682.708 L1808.55 682.708 L1807.99 682.708 L1807.43 682.708 L1806.87 682.708 L1806.31 682.708 L1805.75 682.708 L1805.19 682.708 L1804.63 682.708 L1804.08 682.708 L1803.52 682.708 L1802.96 682.708 L1802.4 682.708 L1801.84 682.708 L1801.28 682.708 L1800.72 682.708 L1800.16 682.708 L1799.6 682.708 L1799.04 682.708 L1798.48 682.708 L1797.92 682.708 L1797.36 682.708 L1796.8 682.708 L1796.25 682.708 L1795.69 682.708 L1795.13 682.708 L1794.57 682.708 L1794.01 682.708 L1793.45 682.708 L1792.89 682.708 L1792.33 682.708 L1791.77 682.708 L1791.21 682.708 L1790.65 682.708 L1790.09 682.708 L1789.53 682.708 L1788.98 682.708 L1788.42 682.708 L1787.86 682.708 L1787.3 682.708 L1786.74 682.708 L1786.18 682.708 L1785.62 682.708 L1785.06 682.708 L1784.5 682.708 L1783.94 682.708 L1783.38 682.708 L1782.82 682.708 L1782.26 682.708 L1781.71 682.708 L1781.15 682.708 L1780.59 682.708 L1780.03 682.708 L1779.47 682.708 L1778.91 682.708 L1778.35 682.708 L1777.79 682.708 L1777.23 682.708 L1776.67 682.708 L1776.11 682.708 L1775.55 682.708 L1774.99 682.708 L1774.43 682.708 L1773.88 682.708 L1773.32 682.708 L1772.76 682.708 L1772.2 682.708 L1771.64 682.708 L1771.08 682.708 L1770.52 682.708 L1769.96 682.708 L1769.4 682.708 L1768.84 682.708 L1768.28 682.708 L1767.72 682.708 L1767.16 682.708 L1766.61 682.708 L1766.05 682.708 L1765.49 682.708 L1764.93 682.708 L1764.37 682.708 L1763.81 682.708 L1763.25 682.708 L1762.69 682.708 L1762.13 682.708 L1761.57 682.708 L1761.01 682.708 L1760.45 682.708 L1759.89 682.708 L1759.34 682.708 L1758.78 682.708 L1758.22 682.708 L1757.66 682.708 L1757.1 682.708 L1756.54 682.708 L1755.98 682.708 L1755.42 682.708 L1754.86 682.708 L1754.3 682.708 L1753.74 682.708 L1753.18 682.708 L1752.62 682.708 L1752.06 682.708 L1751.51 682.708 L1750.95 682.708 L1750.39 682.708 L1749.83 682.708 L1749.27 682.708 L1748.71 682.708 L1748.15 682.708 L1747.59 682.708 L1747.03 682.708 L1746.47 682.708 L1745.91 682.708 L1745.35 682.708 L1744.79 682.708 L1744.24 682.708 L1743.68 682.708 L1743.12 682.708 L1742.56 682.708 L1742 682.708 L1741.44 682.708 L1740.88 682.708 L1740.32 682.708 L1739.76 682.708 L1739.2 682.708 L1738.64 682.708 L1738.08 682.708 L1737.52 682.708 L1736.97 682.708 L1736.41 682.708 L1735.85 682.708 L1735.29 682.708 L1734.73 682.708 L1734.17 682.708 L1733.61 682.708 L1733.05 682.708 L1732.49 682.708 L1731.93 682.708 L1731.37 682.708 L1730.81 682.708 L1730.25 682.708 L1729.69 682.708 L1729.14 682.708 L1728.58 682.708 L1728.02 682.708 L1727.46 682.708 L1726.9 682.708 L1726.34 682.708 L1725.78 682.708 L1725.22 682.708 L1724.66 682.708 L1724.1 682.708 L1723.54 682.708 L1722.98 682.708 L1722.42 682.708 L1721.87 682.708 L1721.31 682.708 L1720.75 682.708 L1720.19 682.708 L1719.63 682.708 L1719.07 682.708 L1718.51 682.708 L1717.95 682.708 L1717.39 682.708 L1716.83 682.708 L1716.27 682.708 L1715.71 682.708 L1715.15 682.708 L1714.6 682.708 L1714.04 682.708 L1713.48 682.708 L1712.92 682.708 L1712.36 682.708 L1711.8 682.708 L1711.24 682.708 L1710.68 682.708 L1710.12 682.708 L1709.56 682.708 L1709 682.708 L1708.44 682.708 L1707.88 682.708 L1707.32 682.708 L1706.77 682.708 L1706.21 682.708 L1705.65 682.708 L1705.09 682.708 L1704.53 682.708 L1703.97 682.708 L1703.41 682.708 L1702.85 682.708 L1702.29 682.708 L1701.73 682.708 L1701.17 682.708 L1700.61 682.708 L1700.05 682.708 L1699.5 682.708 L1698.94 682.708 L1698.38 682.708 L1697.82 682.708 L1697.26 682.708 L1696.7 682.708 L1696.14 682.708 L1695.58 682.708 L1695.02 682.708 L1694.46 682.708 L1693.9 682.708 L1693.34 682.708 L1692.78 682.708 L1692.23 682.708 L1691.67 682.708 L1691.11 682.708 L1690.55 682.708 L1689.99 682.708 L1689.43 682.708 L1688.87 682.708 L1688.31 682.708 L1687.75 682.708 L1687.19 682.708 L1686.63 682.708 L1686.07 682.708 L1685.51 682.708 L1684.95 682.708 L1684.4 682.708 L1683.84 682.708 L1683.28 682.708 L1682.72 682.708 L1682.16 682.708 L1681.6 682.708 L1681.04 682.708 L1680.48 682.708 L1679.92 682.708 L1679.36 682.708 L1678.8 682.708 L1678.24 682.708 L1677.68 682.708 L1677.13 682.708 L1676.57 682.708 L1676.01 682.708 L1675.45 682.708 L1674.89 682.708 L1674.33 682.708 L1673.77 682.708 L1673.21 682.708 L1672.65 682.708 L1672.09 682.708 L1671.53 682.708 L1670.97 682.708 L1670.41 682.708 L1669.85 682.708 L1669.3 682.708 L1668.74 682.708 L1668.18 682.708 L1667.62 682.708 L1667.06 682.708 L1666.5 682.708 L1665.94 682.708 L1665.38 682.708 L1664.82 682.708 L1664.26 682.708 L1663.7 682.708 L1663.14 682.708 L1662.58 682.708 L1662.03 682.708 L1661.47 682.708 L1660.91 682.708 L1660.35 682.708 L1659.79 682.708 L1659.23 682.708 L1658.67 682.708 L1658.11 682.708 L1657.55 682.708 L1656.99 682.708 L1656.43 682.708 L1655.87 682.708 L1655.31 682.708 L1654.76 682.708 L1654.2 682.708 L1653.64 682.708 L1653.08 682.708 L1652.52 682.708 L1651.96 682.708 L1651.4 682.708 L1650.84 682.708 L1650.28 682.708 L1649.72 682.708 L1649.16 682.708 L1648.6 682.708 L1648.04 682.708 L1647.48 682.708 L1646.93 682.708 L1646.37 682.708 L1645.81 682.708 L1645.25 682.708 L1644.69 682.708 L1644.13 682.708 L1643.57 682.708 L1643.01 682.708 L1642.45 682.708 L1641.89 682.708 L1641.33 682.708 L1640.77 682.708 L1640.21 682.708 L1639.66 682.708 L1639.1 682.708 L1638.54 682.708 L1637.98 682.708 L1637.42 682.708 L1636.86 682.708 L1636.3 682.708 L1635.74 682.708 L1635.18 682.708 L1634.62 682.708 L1634.06 682.708 L1633.5 682.708 L1632.94 682.708 L1632.39 682.708 L1631.83 682.708 L1631.27 682.708 L1630.71 682.708 L1630.15 682.708 L1629.59 682.708 L1629.03 682.708 L1628.47 682.708 L1627.91 682.708 L1627.35 682.708 L1626.79 682.708 L1626.23 682.708 L1625.67 682.708 L1625.11 682.708 L1624.56 682.708 L1624 682.708 L1623.44 682.708 L1622.88 682.708 L1622.32 682.708 L1621.76 682.708 L1621.2 682.708 L1620.64 682.708 L1620.08 682.708 L1619.52 682.708 L1618.96 682.708 L1618.4 682.708 L1617.84 682.708 L1617.29 682.708 L1616.73 682.708 L1616.17 682.708 L1615.61 682.708 L1615.05 682.708 L1614.49 682.708 L1613.93 682.708 L1613.37 682.708 L1612.81 682.708 L1612.25 682.708 L1611.69 682.708 L1611.13 682.708 L1610.57 682.708 L1610.02 682.708 L1609.46 682.708 L1608.9 682.708 L1608.34 682.708 L1607.78 682.708 L1607.22 682.708 L1606.66 682.708 L1606.1 682.708 L1605.54 682.708 L1604.98 682.708 L1604.42 682.708 L1603.86 682.708 L1603.3 682.708 L1602.74 682.708 L1602.19 682.708 L1601.63 682.708 L1601.07 682.708 L1600.51 682.708 L1599.95 682.708 L1599.39 682.708 L1598.83 682.708 L1598.27 682.708 L1597.71 682.708 L1597.15 682.708 L1596.59 682.708 L1596.03 682.708 L1595.47 682.708 L1594.92 682.708 L1594.36 682.708 L1593.8 682.708 L1593.24 682.708 L1592.68 682.708 L1592.12 682.708 L1591.56 682.708 L1591 682.708 L1590.44 682.708 L1589.88 682.708 L1589.32 682.708 L1588.76 682.708 L1588.2 682.708 L1587.65 682.708 L1587.09 682.708 L1586.53 682.708 L1585.97 682.708 L1585.41 682.708 L1584.85 682.708 L1584.29 682.708 L1583.73 682.708 L1583.17 682.708 L1582.61 682.708 L1582.05 682.708 L1581.49 682.708 L1580.93 682.708 L1580.37 682.708 L1579.82 682.708 L1579.26 682.708 L1578.7 682.708 L1578.14 682.708 L1577.58 682.708 L1577.02 682.708 L1576.46 682.708 L1575.9 682.708 L1575.34 682.708 L1574.78 682.708 L1574.22 682.708 L1573.66 682.708 L1573.1 682.708 L1572.55 682.708 L1571.99 682.708 L1571.43 682.708 L1570.87 682.708 L1570.31 682.708 L1569.75 682.708 L1569.19 682.708 L1568.63 682.708 L1568.07 682.708 L1567.51 682.708 L1566.95 682.708 L1566.39 682.708 L1565.83 682.708 L1565.28 682.708 L1564.72 682.708 L1564.16 682.708 L1563.6 682.708 L1563.04 682.708 L1562.48 682.708 L1561.92 682.708 L1561.36 682.708 L1560.8 682.708 L1560.24 682.708 L1559.68 682.708 L1559.12 682.708 L1558.56 682.708 L1558 682.708 L1557.45 682.708 L1556.89 682.708 L1556.33 682.708 L1555.77 682.708 L1555.21 682.708 L1554.65 682.708 L1554.09 682.708 L1553.53 682.708 L1552.97 682.708 L1552.41 682.708 L1551.85 682.708 L1551.29 682.708 L1550.73 682.708 L1550.18 682.708 L1549.62 682.708 L1549.06 682.708 L1548.5 682.708 L1547.94 682.708 L1547.38 682.708 L1546.82 682.708 L1546.26 682.708 L1545.7 682.708 L1545.14 682.708 L1544.58 682.708 L1544.02 682.708 L1543.46 682.708 L1542.9 682.708 L1542.35 682.708 L1541.79 682.708 L1541.23 682.708 L1540.67 682.708 L1540.11 682.708 L1539.55 682.708 L1538.99 682.708 L1538.43 682.708 L1537.87 682.708 L1537.31 682.708 L1536.75 682.708 L1536.19 682.708 L1535.63 682.708 L1535.08 682.708 L1534.52 682.708 L1533.96 682.708 L1533.4 682.708 L1532.84 682.708 L1532.28 682.708 L1531.72 682.708 L1531.16 682.708 L1530.6 682.708 L1530.04 682.708 L1529.48 682.708 L1528.92 682.708 L1528.36 682.708 L1527.81 682.708 L1527.25 682.708 L1526.69 682.708 L1526.13 682.708 L1525.57 682.708 L1525.01 682.708 L1524.45 682.708 L1523.89 682.708 L1523.33 682.708 L1522.77 682.708 L1522.21 682.708 L1521.65 682.708 L1521.09 682.708 L1520.53 682.708 L1519.98 682.708 L1519.42 682.708 L1518.86 682.708 L1518.3 682.708 L1517.74 682.708 L1517.18 682.708 L1516.62 682.708 L1516.06 682.708 L1515.5 682.708 L1514.94 682.708 L1514.38 682.708 L1513.82 682.708 L1513.26 682.708 L1512.71 682.708 L1512.15 682.708 L1511.59 682.708 L1511.03 682.708 L1510.47 682.708 L1509.91 682.708 L1509.35 682.708 L1508.79 682.708 L1508.23 682.708 L1507.67 682.708 L1507.11 682.708 L1506.55 682.708 L1505.99 682.708 L1505.44 682.708 L1504.88 682.708 L1504.32 682.708 L1503.76 682.708 L1503.2 682.708 L1502.64 682.708 L1502.08 682.708 L1501.52 682.708 L1500.96 682.708 L1500.4 682.708 L1499.84 682.708 L1499.28 682.708 L1498.72 682.708 L1498.16 682.708 L1497.61 682.708 L1497.05 682.708 L1496.49 682.708 L1495.93 682.708 L1495.37 682.708 L1494.81 682.708 L1494.25 682.708 L1493.69 682.708 L1493.13 682.708 L1492.57 682.708 L1492.01 682.708 L1491.45 682.708 L1490.89 682.708 L1490.34 682.708 L1489.78 682.708 L1489.22 682.708 L1488.66 682.708 L1488.1 682.708 L1487.54 682.708 L1486.98 682.708 L1486.42 682.708 L1485.86 682.708 L1485.3 682.708 L1484.74 682.708 L1484.18 682.708 L1483.62 682.708 L1483.07 682.708 L1482.51 682.708 L1481.95 682.708 L1481.39 682.708 L1480.83 682.708 L1480.27 682.708 L1479.71 682.708 L1479.15 682.708 L1478.59 682.708 L1478.03 682.708 L1477.47 682.708 L1476.91 682.708 L1476.35 682.708 L1475.79 682.708 L1475.24 682.708 L1474.68 682.708 L1474.12 682.708 L1473.56 682.708 L1473 682.708 L1472.44 682.708 L1471.88 682.708 L1471.32 682.708 L1470.76 682.708 L1470.2 682.708 L1469.64 682.708 L1469.08 682.708 L1468.52 682.708 L1467.97 682.708 L1467.41 682.708 L1466.85 682.708 L1466.29 682.708 L1465.73 682.708 L1465.17 682.708 L1464.61 682.708 L1464.05 682.708 L1463.49 682.708 L1462.93 682.708 L1462.37 682.708 L1461.81 682.708 L1461.25 682.708 L1460.7 682.708 L1460.14 682.708 L1459.58 682.708 L1459.02 682.708 L1458.46 682.708 L1457.9 682.708 L1457.34 682.708 L1456.78 682.708 L1456.22 682.708 L1455.66 682.708 L1455.1 682.708 L1454.54 682.708 L1453.98 682.708 L1453.42 682.708 L1452.87 682.708 L1452.31 682.708 L1451.75 682.708 L1451.19 682.708 L1450.63 682.708 L1450.07 682.708 L1449.51 682.708 L1448.95 682.708 L1448.39 682.708 L1447.83 682.708 L1447.27 682.708 L1446.71 682.708 L1446.15 682.708 L1445.6 682.708 L1445.04 682.708 L1444.48 682.708 L1443.92 682.708 L1443.36 682.708 L1442.8 682.708 L1442.24 682.708 L1441.68 682.708 L1441.12 682.708 L1440.56 682.708 L1440 682.708 L1439.44 682.708 L1438.88 682.708 L1438.33 682.708 L1437.77 682.708 L1437.21 682.708 L1436.65 682.708 L1436.09 682.708 L1435.53 682.708 L1434.97 682.708 L1434.41 682.708 L1433.85 682.708 L1433.29 682.708 L1432.73 682.708 L1432.17 682.708 L1431.61 682.708 L1431.05 682.708 L1430.5 682.708 L1429.94 682.708 L1429.38 682.708 L1428.82 682.708 L1428.26 682.708 L1427.7 682.708 L1427.14 682.708 L1426.58 682.708 L1426.02 682.708 L1425.46 682.708 L1424.9 682.708 L1424.34 682.708 L1423.78 682.708 L1423.23 682.708 L1422.67 682.708 L1422.11 682.708 L1421.55 682.708 L1420.99 682.708 L1420.43 682.708 L1419.87 682.708 L1419.31 682.708 L1418.75 682.708 L1418.19 682.708 L1417.63 682.708 L1417.07 682.708 L1416.51 682.708 L1415.95 682.708 L1415.4 682.708 L1414.84 682.708 L1414.28 682.708 L1413.72 682.708 L1413.16 682.708 L1412.6 682.708 L1412.04 682.708 L1411.48 682.708 L1410.92 682.708 L1410.36 682.708 L1409.8 682.708 L1409.24 682.708 L1408.68 682.708 L1408.13 682.708 L1407.57 682.708 L1407.01 682.708 L1406.45 682.708 L1405.89 682.708 L1405.33 682.708 L1404.77 682.708 L1404.21 682.708 L1403.65 682.708 L1403.09 682.708 L1402.53 682.708 L1401.97 682.708 L1401.41 682.708 L1400.86 682.708 L1400.3 682.708 L1399.74 682.708 L1399.18 682.708 L1398.62 682.708 L1398.06 682.708 L1397.5 682.708 L1396.94 682.708 L1396.38 682.708 L1395.82 682.708 L1395.26 682.708 L1394.7 682.708 L1394.14 682.708 L1393.58 682.708 L1393.03 682.708 L1392.47 682.708 L1391.91 682.708 L1391.35 682.708 L1390.79 682.708 L1390.23 682.708 L1389.67 682.708 L1389.11 682.708 L1388.55 682.708 L1387.99 682.708 L1387.43 682.708 L1386.87 682.708 L1386.31 682.708 L1385.76 682.708 L1385.2 682.708 L1384.64 682.708 L1384.08 682.708 L1383.52 682.708 L1382.96 682.708 L1382.4 682.708 L1381.84 682.708 L1381.28 682.708 L1380.72 682.708 L1380.16 682.708 L1379.6 682.708 L1379.04 682.708 L1378.49 682.708 L1377.93 682.708 L1377.37 682.708 L1376.81 682.708 L1376.25 682.708 L1375.69 682.708 L1375.13 682.708 L1374.57 682.708 L1374.01 682.708 L1373.45 682.708 L1372.89 682.708 L1372.33 682.708 L1371.77 682.708 L1371.21 682.708 L1370.66 682.708 L1370.1 682.708 L1369.54 682.708 L1368.98 682.708 L1368.42 682.708 L1367.86 682.708 L1367.3 682.708 L1366.74 682.708 L1366.18 682.708 L1365.62 682.708 L1365.06 682.708 L1364.5 682.708 L1363.94 682.708 L1363.39 682.708 L1362.83 682.708 L1362.27 682.708 L1361.71 682.708 L1361.15 682.708 L1360.59 682.708 L1360.03 682.708 L1359.47 682.708 L1358.91 682.708 L1358.35 682.708 L1357.79 682.708 L1357.23 682.708 L1356.67 682.708 L1356.12 682.708 L1355.56 682.708 L1355 682.708 L1354.44 682.708 L1353.88 682.708 L1353.32 682.708 L1352.76 682.708 L1352.2 682.708 L1351.64 682.708 L1351.08 682.708 L1350.52 682.708 L1349.96 682.708 L1349.4 682.708 L1348.84 682.708 L1348.29 682.708 L1347.73 682.708 L1347.17 682.708 L1346.61 682.708 L1346.05 682.708 L1345.49 682.708 L1344.93 682.708 L1344.37 682.708 L1343.81 682.708 L1343.25 682.708 L1342.69 682.708 L1342.13 682.708 L1341.57 682.708 L1341.02 682.708 L1340.46 682.708 L1339.9 682.708 L1339.34 682.708 L1338.78 682.708 L1338.22 682.708 L1337.66 682.708 L1337.1 682.708 L1336.54 682.708 L1335.98 682.708 L1335.42 682.708 L1334.86 682.708 L1334.3 682.708 L1333.75 682.708 L1333.19 682.708 L1332.63 682.708 L1332.07 682.708 L1331.51 682.708 L1330.95 682.708 L1330.39 682.708 L1329.83 682.708 L1329.27 682.708 L1328.71 682.708 L1328.15 682.708 L1327.59 682.708 L1327.03 682.708 L1326.47 682.708 L1325.92 682.708 L1325.36 682.708 L1324.8 682.708 L1324.24 682.708 L1323.68 682.708 L1323.12 682.708 L1322.56 682.708 L1322 682.708 L1321.44 682.708 L1320.88 682.708 L1320.32 682.708 L1319.76 682.708 L1319.2 682.708 L1318.65 682.708 L1318.09 682.708 L1317.53 682.708 L1316.97 682.708 L1316.41 682.708 L1315.85 682.708 L1315.29 682.708 L1314.73 682.708 L1314.17 682.708 L1313.61 682.708 L1313.05 682.708 L1312.49 682.708 L1311.93 682.708 L1311.38 682.708 L1310.82 682.708 L1310.26 682.708 L1309.7 682.708 L1309.14 682.708 L1308.58 682.708 L1308.02 682.708 L1307.46 682.708 L1306.9 682.708 L1306.34 682.708 L1305.78 682.708 L1305.22 682.708 L1304.66 682.708 L1304.1 682.708 L1303.55 682.708 L1302.99 682.708 L1302.43 682.708 L1301.87 682.708 L1301.31 682.708 L1300.75 682.708 L1300.19 682.708 L1299.63 682.708 L1299.07 682.708 L1298.51 682.708 L1297.95 682.708 L1297.39 682.708 L1296.83 682.708 L1296.28 682.708 L1295.72 682.708 L1295.16 682.708 L1294.6 682.708 L1294.04 682.708 L1293.48 682.708 L1292.92 682.708 L1292.36 682.708 L1291.8 682.708 L1291.24 682.708 L1290.68 682.708 L1290.12 682.708 L1289.56 682.708 L1289 682.708 L1288.45 682.708 L1287.89 682.708 L1287.33 682.708 L1286.77 682.708 L1286.21 682.708 L1285.65 682.708 L1285.09 682.708 L1284.53 682.708 L1283.97 682.708 L1283.41 682.708 L1282.85 682.708 L1282.29 682.708 L1281.73 682.708 L1281.18 682.708 L1280.62 682.708 L1280.06 682.708 L1279.5 682.708 L1278.94 682.708 L1278.38 682.708 L1277.82 682.708 L1277.26 682.708 L1276.7 682.708 L1276.14 682.708 L1275.58 682.708 L1275.02 682.708 L1274.46 682.708 L1273.91 682.708 L1273.35 682.708 L1272.79 682.708 L1272.23 682.708 L1271.67 682.708 L1271.11 682.708 L1270.55 682.708 L1269.99 682.708 L1269.43 682.708 L1268.87 682.708 L1268.31 682.708 L1267.75 682.708 L1267.19 682.708 L1266.63 682.708 L1266.08 682.708 L1265.52 682.708 L1264.96 682.708 L1264.4 682.708 L1263.84 682.708 L1263.28 682.708 L1262.72 682.708 L1262.16 682.708 L1261.6 682.708 L1261.04 682.708 L1260.48 682.708 L1259.92 682.708 L1259.36 682.708 L1258.81 682.708 L1258.25 682.708 L1257.69 682.708 L1257.13 682.708 L1256.57 682.708 L1256.01 682.708 L1255.45 682.708 L1254.89 682.708 L1254.33 682.708 L1253.77 682.708 L1253.21 682.708 L1252.65 682.708 L1252.09 682.708 L1251.54 682.708 L1250.98 682.708 L1250.42 682.708 L1249.86 682.708 L1249.3 682.708 L1248.74 682.708 L1248.18 682.708 L1247.62 682.708 L1247.06 682.708 L1246.5 682.708 L1245.94 682.708 L1245.38 682.708 L1244.82 682.708 L1244.26 682.708 L1243.71 682.708 L1243.15 682.708 L1242.59 682.708 L1242.03 682.708 L1241.47 682.708 L1240.91 682.708 L1240.35 682.708 L1239.79 682.708 L1239.23 682.708 L1238.67 682.708 L1238.11 682.708 L1237.55 682.708 L1236.99 682.708 L1236.44 682.708 L1235.88 682.708 L1235.32 682.708 L1234.76 682.708 L1234.2 682.708 L1233.64 682.708 L1233.08 682.708 L1232.52 682.708 L1231.96 682.708 L1231.4 682.708 L1230.84 682.708 L1230.28 682.708 L1229.72 682.708 L1229.17 682.708 L1228.61 682.708 L1228.05 682.708 L1227.49 682.708 L1226.93 682.708 L1226.37 682.708 L1225.81 682.708 L1225.25 682.708 L1224.69 682.708 L1224.13 682.708 L1223.57 682.708 L1223.01 682.708 L1222.45 682.708 L1221.89 682.708 L1221.34 682.708 L1220.78 682.708 L1220.22 682.708 L1219.66 682.708 L1219.1 682.708 L1218.54 682.708 L1217.98 682.708 L1217.42 682.708 L1216.86 682.708 L1216.3 682.708 L1215.74 682.708 L1215.18 682.708 L1214.62 682.708 L1214.07 682.708 L1213.51 682.708 L1212.95 682.708 L1212.39 682.708 L1211.83 682.708 L1211.27 682.708 L1210.71 682.708 L1210.15 682.708 L1209.59 682.708 L1209.03 682.708 L1208.47 682.708 L1207.91 682.708 L1207.35 682.708 L1206.8 682.708 L1206.24 682.708 L1205.68 682.708 L1205.12 682.708 L1204.56 682.708 L1204 682.708 L1203.44 682.708 L1202.88 682.708 L1202.32 682.708 L1201.76 682.708 L1201.2 682.708 L1200.64 682.708 L1200.08 682.708 L1199.52 682.708 L1198.97 682.708 L1198.41 682.708 L1197.85 682.708 L1197.29 682.708 L1196.73 682.708 L1196.17 682.708 L1195.61 682.708 L1195.05 682.708 L1194.49 682.708 L1193.93 682.708 L1193.37 682.708 L1192.81 682.708 L1192.25 682.708 L1191.7 682.708 L1191.14 682.708 L1190.58 682.708 L1190.02 682.708 L1189.46 682.708 L1188.9 682.708 L1188.34 682.708 L1187.78 682.708 L1187.22 682.708 L1186.66 682.708 L1186.1 682.708 L1185.54 682.708 L1184.98 682.708 L1184.43 682.708 L1183.87 682.708 L1183.31 682.708 L1182.75 682.708 L1182.19 682.708 L1181.63 682.708 L1181.07 682.708 L1180.51 682.708 L1179.95 682.708 L1179.39 682.708 L1178.83 682.708 L1178.27 682.708 L1177.71 682.708 L1177.15 682.708 L1176.6 682.708 L1176.04 682.708 L1175.48 682.708 L1174.92 682.708 L1174.36 682.708 L1173.8 682.708 L1173.24 682.708 L1172.68 682.708 L1172.12 682.708 L1171.56 682.708 L1171 682.708 L1170.44 682.708 L1169.88 682.708 L1169.33 682.708 L1168.77 682.708 L1168.21 682.708 L1167.65 682.708 L1167.09 682.708 L1166.53 682.708 L1165.97 682.708 L1165.41 682.708 L1164.85 682.708 L1164.29 682.708 L1163.73 682.708 L1163.17 682.708 L1162.61 682.708 L1162.05 682.708 L1161.5 682.708 L1160.94 682.708 L1160.38 682.708 L1159.82 682.708 L1159.26 682.708 L1158.7 682.708 L1158.14 682.708 L1157.58 682.708 L1157.02 682.708 L1156.46 682.708 L1155.9 682.708 L1155.34 682.708 L1154.78 682.708 L1154.23 682.708 L1153.67 682.708 L1153.11 682.708 L1152.55 682.708 L1151.99 682.708 L1151.43 682.708 L1150.87 682.708 L1150.31 682.708 L1149.75 682.708 L1149.19 682.708 L1148.63 682.708 L1148.07 682.708 L1147.51 682.708 L1146.96 682.708 L1146.4 682.708 L1145.84 682.708 L1145.28 682.708 L1144.72 682.708 L1144.16 682.708 L1143.6 682.708 L1143.04 682.708 L1142.48 682.708 L1141.92 682.708 L1141.36 682.708 L1140.8 682.708 L1140.24 682.708 L1139.68 682.708 L1139.13 682.708 L1138.57 682.708 L1138.01 682.708 L1137.45 682.708 L1136.89 682.708 L1136.33 682.708 L1135.77 682.708 L1135.21 682.708 L1134.65 682.708 L1134.09 682.708 L1133.53 682.708 L1132.97 682.708 L1132.41 682.708 L1131.86 682.708 L1131.3 682.708 L1130.74 682.708 L1130.18 682.708 L1129.62 682.708 L1129.06 682.708 L1128.5 682.708 L1127.94 682.708 L1127.38 682.708 L1126.82 682.708 L1126.26 682.708 L1125.7 682.708 L1125.14 682.708 L1124.59 682.708 L1124.03 682.708 L1123.47 682.708 L1122.91 682.708 L1122.35 682.708 L1121.79 682.708 L1121.23 682.708 L1120.67 682.708 L1120.11 682.708 L1119.55 682.708 L1118.99 682.708 L1118.43 682.708 L1117.87 682.708 L1117.31 682.708 L1116.76 682.708 L1116.2 682.708 L1115.64 682.708 L1115.08 682.708 L1114.52 682.708 L1113.96 682.708 L1113.4 682.708 L1112.84 682.708 L1112.28 682.708 L1111.72 682.708 L1111.16 682.708 L1110.6 682.708 L1110.04 682.708 L1109.49 682.708 L1108.93 682.708 L1108.37 682.708 L1107.81 682.708 L1107.25 682.708 L1106.69 682.708 L1106.13 682.708 L1105.57 682.708 L1105.01 682.708 L1104.45 682.708 L1103.89 682.708 L1103.33 682.708 L1102.77 682.708 L1102.22 682.708 L1101.66 682.708 L1101.1 682.708 L1100.54 682.708 L1099.98 682.708 L1099.42 682.708 L1098.86 682.708 L1098.3 682.708 L1097.74 682.708 L1097.18 682.708 L1096.62 682.708 L1096.06 682.708 L1095.5 682.708 L1094.94 682.708 L1094.39 682.708 L1093.83 682.708 L1093.27 682.708 L1092.71 682.708 L1092.15 682.708 L1091.59 682.708 L1091.03 682.708 L1090.47 682.708 L1089.91 682.708 L1089.35 682.708 L1088.79 682.708 L1088.23 682.708 L1087.67 682.708 L1087.12 682.708 L1086.56 682.708 L1086 682.708 L1085.44 682.708 L1084.88 682.708 L1084.32 682.708 L1083.76 682.708 L1083.2 682.708 L1082.64 682.708 L1082.08 682.708 L1081.52 682.708 L1080.96 682.708 L1080.4 682.708 L1079.85 682.708 L1079.29 682.708 L1078.73 682.708 L1078.17 682.708 L1077.61 682.708 L1077.05 682.708 L1076.49 682.708 L1075.93 682.708 L1075.37 682.708 L1074.81 682.708 L1074.25 682.708 L1073.69 682.708 L1073.13 682.708 L1072.57 682.708 L1072.02 682.708 L1071.46 682.708 L1070.9 682.708 L1070.34 682.708 L1069.78 682.708 L1069.22 682.708 L1068.66 682.708 L1068.1 682.708 L1067.54 682.708 L1066.98 682.708 L1066.42 682.708 L1065.86 682.708 L1065.3 682.708 L1064.75 682.708 L1064.19 682.708 L1063.63 682.708 L1063.07 682.708 L1062.51 682.708 L1061.95 682.708 L1061.39 682.708 L1060.83 682.708 L1060.27 682.708 L1059.71 682.708 L1059.15 682.708 L1058.59 682.708 L1058.03 682.708 L1057.48 682.708 L1056.92 682.708 L1056.36 682.708 L1055.8 682.708 L1055.24 682.708 L1054.68 682.708 L1054.12 682.708 L1053.56 682.708 L1053 682.708 L1052.44 682.708 L1051.88 682.708 L1051.32 682.708 L1050.76 682.708 L1050.2 682.708 L1049.65 682.708 L1049.09 682.708 L1048.53 682.708 L1047.97 682.708 L1047.41 682.708 L1046.85 682.708 L1046.29 682.708 L1045.73 682.708 L1045.17 682.708 L1044.61 682.708 L1044.05 682.708 L1043.49 682.708 L1042.93 682.708 L1042.38 682.708 L1041.82 682.708 L1041.26 682.708 L1040.7 682.708 L1040.14 682.708 L1039.58 682.708 L1039.02 682.708 L1038.46 682.708 L1037.9 682.708 L1037.34 682.708 L1036.78 682.708 L1036.22 682.708 L1035.66 682.708 L1035.1 682.708 L1034.55 682.708 L1033.99 682.708 L1033.43 682.708 L1032.87 682.708 L1032.31 682.708 L1031.75 682.708 L1031.19 682.708 L1030.63 682.708 L1030.07 682.708 L1029.51 682.708 L1028.95 682.708 L1028.39 682.708 L1027.83 682.708 L1027.28 682.708 L1026.72 682.708 L1026.16 682.708 L1025.6 682.708 L1025.04 682.708 L1024.48 682.708 L1023.92 682.708 L1023.36 682.708 L1022.8 682.708 L1022.24 682.708 L1021.68 682.708 L1021.12 682.708 L1020.56 682.708 L1020.01 682.708 L1019.45 682.708 L1018.89 682.708 L1018.33 682.708 L1017.77 682.708 L1017.21 682.708 L1016.65 682.708 L1016.09 682.708 L1015.53 682.708 L1014.97 682.708 L1014.41 682.708 L1013.85 682.708 L1013.29 682.708 L1012.73 682.708 L1012.18 682.708 L1011.62 682.708 L1011.06 682.708 L1010.5 682.708 L1009.94 682.708 L1009.38 682.708 L1008.82 682.708 L1008.26 682.708 L1007.7 682.708 L1007.14 682.708 L1006.58 682.708 L1006.02 682.708 L1005.46 682.708 L1004.91 682.708 L1004.35 682.708 L1003.79 682.708 L1003.23 682.708 L1002.67 682.708 L1002.11 682.708 L1001.55 682.708 L1000.99 682.708 L1000.43 682.708 L999.872 682.708 L999.313 682.708 L998.754 682.708 L998.194 682.708 L997.635 682.708 L997.076 682.708 L996.517 682.708 L995.957 682.708 L995.398 682.708 L994.839 682.708 L994.28 682.708 L993.72 682.708 L993.161 682.708 L992.602 682.708 L992.043 682.708 L991.483 682.708 L990.924 682.708 L990.365 682.708 L989.806 682.708 L989.246 682.708 L988.687 682.708 L988.128 682.708 L987.569 682.708 L987.009 682.708 L986.45 682.708 L985.891 682.708 L985.332 682.708 L984.772 682.708 L984.213 682.708 L983.654 682.708 L983.095 682.708 L982.535 682.708 L981.976 682.708 L981.417 682.708 L980.858 682.708 L980.298 682.708 L979.739 682.708 L979.18 682.708 L978.621 682.708 L978.061 682.708 L977.502 682.708 L976.943 682.708 L976.384 682.708 L975.824 682.708 L975.265 682.708 L974.706 682.708 L974.147 682.708 L973.587 682.708 L973.028 682.708 L972.469 682.708 L971.91 682.708 L971.35 682.708 L970.791 682.708 L970.232 682.708 L969.673 682.708 L969.113 682.708 L968.554 682.708 L967.995 682.708 L967.436 682.708 L966.876 682.708 L966.317 682.708 L965.758 682.708 L965.199 682.708 L964.639 682.708 L964.08 682.708 L963.521 682.708 L962.962 682.708 L962.402 682.708 L961.843 682.708 L961.284 682.708 L960.725 682.708 L960.165 682.708 L959.606 682.708 L959.047 682.708 L958.488 682.708 L957.928 682.708 L957.369 682.708 L956.81 682.708 L956.251 682.708 L955.691 682.708 L955.132 682.708 L954.573 682.708 L954.014 682.708 L953.454 682.708 L952.895 682.708 L952.336 682.708 L951.777 682.708 L951.217 682.708 L950.658 682.708 L950.099 682.708 L949.54 682.708 L948.98 682.708 L948.421 682.708 L947.862 682.708 L947.303 682.708 L946.743 682.708 L946.184 682.708 L945.625 682.708 L945.066 682.708 L944.506 682.708 L943.947 682.708 L943.388 682.708 L942.829 682.708 L942.269 682.708 L941.71 682.708 L941.151 682.708 L940.592 682.708 L940.032 682.708 L939.473 682.708 L938.914 682.708 L938.355 682.708 L937.795 682.708 L937.236 682.708 L936.677 682.708 L936.118 682.708 L935.558 682.708 L934.999 682.708 L934.44 682.708 L933.881 682.708 L933.321 682.708 L932.762 682.708 L932.203 682.708 L931.644 682.708 L931.084 682.708 L930.525 682.708 L929.966 682.708 L929.406 682.708 L928.847 682.708 L928.288 682.708 L927.729 682.708 L927.169 682.708 L926.61 682.708 L926.051 682.708 L925.492 682.708 L924.932 682.708 L924.373 682.708 L923.814 682.708 L923.255 682.708 L922.695 682.708 L922.136 682.708 L921.577 682.708 L921.018 682.708 L920.458 682.708 L919.899 682.708 L919.34 682.708 L918.781 682.708 L918.221 682.708 L917.662 682.708 L917.103 682.708 L916.544 682.708 L915.984 682.708 L915.425 682.708 L914.866 682.708 L914.307 682.708 L913.747 682.708 L913.188 682.708 L912.629 682.708 L912.07 682.708 L911.51 682.708 L910.951 682.708 L910.392 682.708 L909.833 682.708 L909.273 682.708 L908.714 682.708 L908.155 682.708 L907.596 682.708 L907.036 682.708 L906.477 682.708 L905.918 682.708 L905.359 682.708 L904.799 682.708 L904.24 682.708 L903.681 682.708 L903.122 682.708 L902.562 682.708 L902.003 682.708 L901.444 682.708 L900.885 682.708 L900.325 682.708 L899.766 682.708 L899.207 682.708 L898.648 682.708 L898.088 682.708 L897.529 682.708 L896.97 682.708 L896.411 682.708 L895.851 682.708 L895.292 682.708 L894.733 682.708 L894.174 682.708 L893.614 682.708 L893.055 682.708 L892.496 682.708 L891.937 682.708 L891.377 682.708 L890.818 682.708 L890.259 682.708 L889.7 682.708 L889.14 682.708 L888.581 682.708 L888.022 682.708 L887.463 682.708 L886.903 682.708 L886.344 682.708 L885.785 682.708 L885.226 682.708 L884.666 682.708 L884.107 682.708 L883.548 682.708 L882.989 682.708 L882.429 682.708 L881.87 682.708 L881.311 682.708 L880.752 682.708 L880.192 682.708 L879.633 682.708 L879.074 682.708 L878.515 682.708 L877.955 682.708 L877.396 682.708 L876.837 682.708 L876.278 682.708 L875.718 682.708 L875.159 682.708 L874.6 682.708 L874.041 682.708 L873.481 682.708 L872.922 682.708 L872.363 682.708 L871.804 682.708 L871.244 682.708 L870.685 682.708 L870.126 682.708 L869.567 682.708 L869.007 682.708 L868.448 682.708 L867.889 682.708 L867.33 682.708 L866.77 682.708 L866.211 682.708 L865.652 682.708 L865.093 682.708 L864.533 682.708 L863.974 682.708 L863.415 682.708 L862.856 682.708 L862.296 682.708 L861.737 682.708 L861.178 682.708 L860.619 682.708 L860.059 682.708 L859.5 682.708 L858.941 682.708 L858.382 682.708 L857.822 682.708 L857.263 682.708 L856.704 682.708 L856.145 682.708 L855.585 682.708 L855.026 682.708 L854.467 682.708 L853.908 682.708 L853.348 682.708 L852.789 682.708 L852.23 682.708 L851.671 682.708 L851.111 682.708 L850.552 682.708 L849.993 682.708 L849.434 682.708 L848.874 682.708 L848.315 682.708 L847.756 682.708 L847.197 682.708 L846.637 682.708 L846.078 682.708 L845.519 682.708 L844.96 682.708 L844.4 682.708 L843.841 682.708 L843.282 682.708 L842.723 682.708 L842.163 682.708 L841.604 682.708 L841.045 682.708 L840.486 682.708 L839.926 682.708 L839.367 682.708 L838.808 682.708 L838.249 682.708 L837.689 682.708 L837.13 682.708 L836.571 682.708 L836.012 682.708 L835.452 682.708 L834.893 682.708 L834.334 682.708 L833.775 682.708 L833.215 682.708 L832.656 682.708 L832.097 682.708 L831.538 682.708 L830.978 682.708 L830.419 682.708 L829.86 682.708 L829.301 682.708 L828.741 682.708 L828.182 682.708 L827.623 682.708 L827.064 682.708 L826.504 682.708 L825.945 682.708 L825.386 682.708 L824.827 682.708 L824.267 682.708 L823.708 682.708 L823.149 682.708 L822.59 682.708 L822.03 682.708 L821.471 682.708 L820.912 682.708 L820.353 682.708 L819.793 682.708 L819.234 682.708 L818.675 682.708 L818.116 682.708 L817.556 682.708 L816.997 682.708 L816.438 682.708 L815.879 682.708 L815.319 682.708 L814.76 682.708 L814.201 682.708 L813.642 682.708 L813.082 682.708 L812.523 682.708 L811.964 682.708 L811.405 682.708 L810.845 682.708 L810.286 682.708 L809.727 682.708 L809.168 682.708 L808.608 682.708 L808.049 682.708 L807.49 682.708 L806.931 682.708 L806.371 682.708 L805.812 682.708 L805.253 682.708 L804.693 682.708 L804.134 682.708 L803.575 682.708 L803.016 682.708 L802.456 682.708 L801.897 682.708 L801.338 682.708 L800.779 682.708 L800.219 682.708 L799.66 682.708 L799.101 682.708 L798.542 682.708 L797.982 682.708 L797.423 682.708 L796.864 682.708 L796.305 682.708 L795.745 682.708 L795.186 682.708 L794.627 682.708 L794.068 682.708 L793.508 682.708 L792.949 682.708 L792.39 682.708 L791.831 682.708 L791.271 682.708 L790.712 682.708 L790.153 682.708 L789.594 682.708 L789.034 682.708 L788.475 682.708 L787.916 682.708 L787.357 682.708 L786.797 682.708 L786.238 682.708 L785.679 682.708 L785.12 682.708 L784.56 682.708 L784.001 682.708 L783.442 682.708 L782.883 682.708 L782.323 682.708 L781.764 682.708 L781.205 682.708 L780.646 682.708 L780.086 682.708 L779.527 682.708 L778.968 682.708 L778.409 682.708 L777.849 682.708 L777.29 682.708 L776.731 682.708 L776.172 682.708 L775.612 682.708 L775.053 682.708 L774.494 682.708 L773.935 682.708 L773.375 682.708 L772.816 682.708 L772.257 682.708 L771.698 682.708 L771.138 682.708 L770.579 682.708 L770.02 682.708 L769.461 682.708 L768.901 682.708 L768.342 682.708 L767.783 682.708 L767.224 682.708 L766.664 682.708 L766.105 682.708 L765.546 682.708 L764.987 682.708 L764.427 682.708 L763.868 682.708 L763.309 682.708 L762.75 682.708 L762.19 682.708 L761.631 682.708 L761.072 682.708 L760.513 682.708 L759.953 682.708 L759.394 682.708 L758.835 682.708 L758.276 682.708 L757.716 682.708 L757.157 682.708 L756.598 682.708 L756.039 682.708 L755.479 682.708 L754.92 682.708 L754.361 682.708 L753.802 682.708 L753.242 682.708 L752.683 682.708 L752.124 682.708 L751.565 682.708 L751.005 682.708 L750.446 682.708 L749.887 682.708 L749.328 682.708 L748.768 682.708 L748.209 682.708 L747.65 682.708 L747.091 682.708 L746.531 682.708 L745.972 682.708 L745.413 682.708 L744.854 682.708 L744.294 682.708 L743.735 682.708 L743.176 682.708 L742.617 682.708 L742.057 682.708 L741.498 682.708 L740.939 682.708 L740.38 682.708 L739.82 682.708 L739.261 682.708 L738.702 682.708 L738.143 682.708 L737.583 682.708 L737.024 682.708 L736.465 682.708 L735.906 682.708 L735.346 682.708 L734.787 682.708 L734.228 682.708 L733.669 682.708 L733.109 682.708 L732.55 682.708 L731.991 682.708 L731.432 682.708 L730.872 682.708 L730.313 682.708 L729.754 682.708 L729.195 682.708 L728.635 682.708 L728.076 682.708 L727.517 682.708 L726.958 682.708 L726.398 682.708 L725.839 682.708 L725.28 682.708 L724.721 682.708 L724.161 682.708 L723.602 682.708 L723.043 682.708 L722.484 682.708 L721.924 682.708 L721.365 682.708 L720.806 682.708 L720.247 682.708  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip143)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.399 720.806,683.399 721.365,683.399 721.924,683.399 722.484,683.399 723.043,683.399 723.602,683.399 724.161,683.399 724.721,683.399 725.28,683.399 725.839,683.399 726.398,683.399 726.958,683.399 727.517,683.399 728.076,683.399 728.635,683.399 729.195,683.399 729.754,683.399 730.313,683.399 730.872,683.399 731.432,683.399 731.991,683.399 732.55,683.399 733.109,683.399 733.669,683.399 734.228,683.399 734.787,683.399 735.346,683.399 735.906,683.399 736.465,683.399 737.024,683.399 737.583,683.399 738.143,683.399 738.702,683.399 739.261,683.399 739.82,683.399 740.38,683.399 740.939,683.399 741.498,683.399 742.057,683.399 742.617,683.399 743.176,683.399 743.735,683.399 744.294,683.399 744.854,683.399 745.413,683.399 745.972,683.399 746.531,683.399 747.091,683.399 747.65,683.399 748.209,683.399 748.768,683.399 749.328,683.399 749.887,683.399 750.446,683.399 751.005,683.399 751.565,683.399 752.124,683.399 752.683,683.399 753.242,683.399 753.802,683.399 754.361,683.399 754.92,683.399 755.479,683.399 756.039,683.399 756.598,683.399 757.157,683.399 757.716,683.399 758.276,683.399 758.835,683.399 759.394,683.399 759.953,683.399 760.513,683.399 761.072,683.399 761.631,683.399 762.19,683.399 762.75,683.399 763.309,683.399 763.868,683.399 764.427,683.399 764.987,683.399 765.546,683.399 766.105,683.399 766.664,683.399 767.224,683.399 767.783,683.399 768.342,683.399 768.901,683.399 769.461,683.399 770.02,683.399 770.579,683.399 771.138,683.399 771.698,683.399 772.257,683.399 772.816,683.399 773.375,683.399 773.935,683.399 774.494,683.399 775.053,683.399 775.612,683.399 776.172,683.399 776.731,683.399 777.29,683.399 777.849,683.399 778.409,683.399 778.968,683.399 779.527,683.399 780.086,683.399 780.646,683.399 781.205,683.399 781.764,683.399 782.323,683.399 782.883,683.399 783.442,683.399 784.001,683.399 784.56,683.399 785.12,683.399 785.679,683.399 786.238,683.399 786.797,683.399 787.357,683.399 787.916,683.399 788.475,683.399 789.034,683.399 789.594,683.399 790.153,683.399 790.712,683.399 791.271,683.399 791.831,683.399 792.39,683.399 792.949,683.399 793.508,683.399 794.068,683.399 794.627,683.399 795.186,683.399 795.745,683.399 796.305,683.399 796.864,683.399 797.423,683.399 797.982,683.399 798.542,683.399 799.101,683.399 799.66,683.399 800.219,683.399 800.779,683.399 801.338,683.399 801.897,683.399 802.456,683.399 803.016,683.399 803.575,683.399 804.134,683.399 804.693,683.399 805.253,683.399 805.812,683.399 806.371,683.399 806.931,683.399 807.49,683.399 808.049,683.399 808.608,683.399 809.168,683.399 809.727,683.399 810.286,683.399 810.845,683.399 811.405,683.399 811.964,683.399 812.523,683.399 813.082,683.399 813.642,683.399 814.201,683.399 814.76,683.399 815.319,683.399 815.879,683.399 816.438,683.399 816.997,683.399 817.556,683.399 818.116,683.399 818.675,683.399 819.234,683.399 819.793,683.399 820.353,683.399 820.912,683.399 821.471,683.399 822.03,683.399 822.59,683.399 823.149,683.399 823.708,683.399 824.267,683.399 824.827,683.399 825.386,683.399 825.945,683.399 826.504,683.399 827.064,683.399 827.623,683.399 828.182,683.399 828.741,683.399 829.301,683.399 829.86,683.399 830.419,683.399 830.978,683.399 831.538,683.399 832.097,683.399 832.656,683.399 833.215,683.399 833.775,683.399 834.334,683.399 834.893,683.399 835.452,683.399 836.012,683.399 836.571,683.399 837.13,683.399 837.689,683.399 838.249,683.399 838.808,683.399 839.367,683.399 839.926,683.399 840.486,683.399 841.045,683.399 841.604,683.399 842.163,683.399 842.723,683.399 843.282,683.399 843.841,683.399 844.4,683.399 844.96,683.399 845.519,683.399 846.078,683.399 846.637,683.399 847.197,683.399 847.756,683.399 848.315,683.399 848.874,683.399 849.434,683.399 849.993,683.399 850.552,683.399 851.111,683.399 851.671,683.399 852.23,683.399 852.789,683.399 853.348,683.399 853.908,683.399 854.467,683.399 855.026,683.399 855.585,683.399 856.145,683.399 856.704,683.399 857.263,683.399 857.822,683.399 858.382,683.399 858.941,683.399 859.5,683.399 860.059,683.399 860.619,683.399 861.178,683.399 861.737,683.399 862.296,683.399 862.856,683.399 863.415,683.399 863.974,683.399 864.533,683.399 865.093,683.399 865.652,683.399 866.211,683.399 866.77,683.399 867.33,683.399 867.889,683.399 868.448,683.399 869.007,683.399 869.567,683.399 870.126,683.399 870.685,683.399 871.244,683.399 871.804,683.399 872.363,683.399 872.922,683.399 873.481,683.399 874.041,683.399 874.6,683.399 875.159,683.399 875.718,683.399 876.278,683.399 876.837,683.399 877.396,683.399 877.955,683.399 878.515,683.399 879.074,683.399 879.633,683.399 880.192,683.399 880.752,683.399 881.311,683.399 881.87,683.399 882.429,683.399 882.989,683.399 883.548,683.399 884.107,683.399 884.666,683.399 885.226,683.399 885.785,683.399 886.344,683.399 886.903,683.399 887.463,683.399 888.022,683.399 888.581,683.399 889.14,683.399 889.7,683.399 890.259,683.399 890.818,683.399 891.377,683.399 891.937,683.399 892.496,683.399 893.055,683.399 893.614,683.399 894.174,683.399 894.733,683.399 895.292,683.399 895.851,683.399 896.411,683.399 896.97,683.399 897.529,683.399 898.088,683.399 898.648,683.399 899.207,683.399 899.766,683.399 900.325,683.399 900.885,683.399 901.444,683.399 902.003,683.399 902.562,683.399 903.122,683.399 903.681,683.399 904.24,683.399 904.799,683.399 905.359,683.399 905.918,683.399 906.477,683.399 907.036,683.399 907.596,683.399 908.155,683.399 908.714,683.399 909.273,683.399 909.833,683.399 910.392,683.399 910.951,683.399 911.51,683.399 912.07,683.399 912.629,683.399 913.188,683.399 913.747,683.399 914.307,683.399 914.866,683.399 915.425,683.399 915.984,683.399 916.544,683.399 917.103,683.399 917.662,683.399 918.221,683.399 918.781,683.399 919.34,683.399 919.899,683.399 920.458,683.399 921.018,683.399 921.577,683.399 922.136,683.399 922.695,683.399 923.255,683.399 923.814,683.399 924.373,683.399 924.932,683.399 925.492,683.399 926.051,683.399 926.61,683.399 927.169,683.399 927.729,683.399 928.288,683.399 928.847,683.399 929.406,683.399 929.966,683.399 930.525,683.399 931.084,683.399 931.644,683.399 932.203,683.399 932.762,683.399 933.321,683.399 933.881,683.399 934.44,683.399 934.999,683.399 935.558,683.399 936.118,683.399 936.677,683.399 937.236,683.399 937.795,683.399 938.355,683.399 938.914,683.399 939.473,683.399 940.032,683.399 940.592,683.399 941.151,683.399 941.71,683.399 942.269,683.399 942.829,683.399 943.388,683.399 943.947,683.399 944.506,683.399 945.066,683.399 945.625,683.399 946.184,683.399 946.743,683.399 947.303,683.399 947.862,683.399 948.421,683.399 948.98,683.399 949.54,683.399 950.099,683.399 950.658,683.399 951.217,683.399 951.777,683.399 952.336,683.399 952.895,683.399 953.454,683.399 954.014,683.399 954.573,683.399 955.132,683.399 955.691,683.399 956.251,683.399 956.81,683.399 957.369,683.399 957.928,683.399 958.488,683.399 959.047,683.399 959.606,683.399 960.165,683.399 960.725,683.399 961.284,683.399 961.843,683.399 962.402,683.399 962.962,683.399 963.521,683.399 964.08,683.399 964.639,683.399 965.199,683.399 965.758,683.399 966.317,683.399 966.876,683.399 967.436,683.399 967.995,683.399 968.554,683.399 969.113,683.399 969.673,683.399 970.232,683.399 970.791,683.399 971.35,683.399 971.91,683.399 972.469,683.399 973.028,683.399 973.587,683.399 974.147,683.399 974.706,683.399 975.265,683.399 975.824,683.399 976.384,683.399 976.943,683.399 977.502,683.399 978.061,683.399 978.621,683.399 979.18,683.399 979.739,683.399 980.298,683.399 980.858,683.399 981.417,683.399 981.976,683.399 982.535,683.399 983.095,683.399 983.654,683.399 984.213,683.399 984.772,683.399 985.332,683.399 985.891,683.399 986.45,683.399 987.009,683.399 987.569,683.399 988.128,683.399 988.687,683.399 989.246,683.399 989.806,683.399 990.365,683.399 990.924,683.399 991.483,683.399 992.043,683.399 992.602,683.399 993.161,683.399 993.72,683.399 994.28,683.399 994.839,683.399 995.398,683.399 995.957,683.399 996.517,683.399 997.076,683.399 997.635,683.399 998.194,683.399 998.754,683.399 999.313,683.399 999.872,683.399 1000.43,683.399 1000.99,683.399 1001.55,683.399 1002.11,683.399 1002.67,683.399 1003.23,683.399 1003.79,683.399 1004.35,683.399 1004.91,683.399 1005.46,683.399 1006.02,683.399 1006.58,683.399 1007.14,683.399 1007.7,683.399 1008.26,683.399 1008.82,683.399 1009.38,683.399 1009.94,683.399 1010.5,683.399 1011.06,683.399 1011.62,683.399 1012.18,683.399 1012.73,683.399 1013.29,683.399 1013.85,683.399 1014.41,683.399 1014.97,683.399 1015.53,683.399 1016.09,683.399 1016.65,683.399 1017.21,683.399 1017.77,683.399 1018.33,683.399 1018.89,683.399 1019.45,683.399 1020.01,683.399 1020.56,683.399 1021.12,683.399 1021.68,683.399 1022.24,683.399 1022.8,683.399 1023.36,683.399 1023.92,683.399 1024.48,683.399 1025.04,683.399 1025.6,683.399 1026.16,683.399 1026.72,683.399 1027.28,683.399 1027.83,683.399 1028.39,683.399 1028.95,683.399 1029.51,683.399 1030.07,683.399 1030.63,683.399 1031.19,683.399 1031.75,683.399 1032.31,683.399 1032.87,683.399 1033.43,683.399 1033.99,683.399 1034.55,683.399 1035.1,683.399 1035.66,683.399 1036.22,683.399 1036.78,683.399 1037.34,683.399 1037.9,683.399 1038.46,683.399 1039.02,683.399 1039.58,683.399 1040.14,683.399 1040.7,683.399 1041.26,683.399 1041.82,683.399 1042.38,683.399 1042.93,683.399 1043.49,683.399 1044.05,683.399 1044.61,683.399 1045.17,683.399 1045.73,683.399 1046.29,683.399 1046.85,683.399 1047.41,683.399 1047.97,683.399 1048.53,683.399 1049.09,683.399 1049.65,683.399 1050.2,683.399 1050.76,683.399 1051.32,683.399 1051.88,683.399 1052.44,683.399 1053,683.399 1053.56,683.399 1054.12,683.399 1054.68,683.399 1055.24,683.399 1055.8,683.399 1056.36,683.399 1056.92,683.399 1057.48,683.399 1058.03,683.399 1058.59,683.399 1059.15,683.399 1059.71,683.399 1060.27,683.399 1060.83,683.399 1061.39,683.399 1061.95,683.399 1062.51,683.399 1063.07,683.399 1063.63,683.399 1064.19,683.399 1064.75,683.399 1065.3,683.399 1065.86,683.399 1066.42,683.399 1066.98,683.399 1067.54,683.399 1068.1,683.399 1068.66,683.399 1069.22,683.399 1069.78,683.399 1070.34,683.399 1070.9,683.399 1071.46,683.399 1072.02,683.399 1072.57,683.399 1073.13,683.399 1073.69,683.399 1074.25,683.399 1074.81,683.399 1075.37,683.399 1075.93,683.399 1076.49,683.399 1077.05,683.399 1077.61,683.399 1078.17,683.399 1078.73,683.399 1079.29,683.399 1079.85,683.399 1080.4,683.399 1080.96,683.399 1081.52,683.399 1082.08,683.399 1082.64,683.399 1083.2,683.399 1083.76,683.399 1084.32,683.399 1084.88,683.399 1085.44,683.399 1086,683.399 1086.56,683.399 1087.12,683.399 1087.67,683.399 1088.23,683.399 1088.79,683.399 1089.35,683.399 1089.91,683.399 1090.47,683.399 1091.03,683.399 1091.59,683.399 1092.15,683.399 1092.71,683.399 1093.27,683.399 1093.83,683.399 1094.39,683.399 1094.94,683.399 1095.5,683.399 1096.06,683.399 1096.62,683.399 1097.18,683.399 1097.74,683.399 1098.3,683.399 1098.86,683.399 1099.42,683.399 1099.98,683.399 1100.54,683.399 1101.1,683.399 1101.66,683.399 1102.22,683.399 1102.77,683.399 1103.33,683.399 1103.89,683.399 1104.45,683.399 1105.01,683.399 1105.57,683.399 1106.13,683.399 1106.69,683.399 1107.25,683.399 1107.81,683.399 1108.37,683.399 1108.93,683.399 1109.49,683.399 1110.04,683.399 1110.6,683.399 1111.16,683.399 1111.72,683.399 1112.28,683.399 1112.84,683.399 1113.4,683.399 1113.96,683.399 1114.52,683.399 1115.08,683.399 1115.64,683.399 1116.2,683.399 1116.76,683.399 1117.31,683.399 1117.87,683.399 1118.43,683.399 1118.99,683.399 1119.55,683.399 1120.11,683.399 1120.67,683.399 1121.23,683.399 1121.79,683.399 1122.35,683.399 1122.91,683.399 1123.47,683.399 1124.03,683.399 1124.59,683.399 1125.14,683.399 1125.7,683.399 1126.26,683.399 1126.82,683.399 1127.38,683.399 1127.94,683.399 1128.5,683.399 1129.06,683.399 1129.62,683.399 1130.18,683.399 1130.74,683.399 1131.3,683.399 1131.86,683.399 1132.41,683.399 1132.97,683.399 1133.53,683.399 1134.09,683.399 1134.65,683.399 1135.21,683.399 1135.77,683.399 1136.33,683.399 1136.89,683.399 1137.45,683.399 1138.01,683.399 1138.57,683.399 1139.13,683.399 1139.68,683.399 1140.24,683.399 1140.8,683.399 1141.36,683.399 1141.92,683.399 1142.48,683.399 1143.04,683.399 1143.6,683.399 1144.16,683.399 1144.72,683.399 1145.28,683.399 1145.84,683.399 1146.4,683.399 1146.96,683.399 1147.51,683.399 1148.07,683.399 1148.63,683.399 1149.19,683.399 1149.75,683.399 1150.31,683.399 1150.87,683.399 1151.43,683.399 1151.99,683.399 1152.55,683.399 1153.11,683.399 1153.67,683.399 1154.23,683.399 1154.78,683.399 1155.34,683.399 1155.9,683.399 1156.46,683.399 1157.02,683.399 1157.58,683.399 1158.14,683.399 1158.7,683.399 1159.26,683.399 1159.82,683.399 1160.38,683.399 1160.94,683.399 1161.5,683.399 1162.05,683.399 1162.61,683.399 1163.17,683.399 1163.73,683.399 1164.29,683.399 1164.85,683.399 1165.41,683.399 1165.97,683.399 1166.53,683.399 1167.09,683.399 1167.65,683.399 1168.21,683.399 1168.77,683.399 1169.33,683.399 1169.88,683.399 1170.44,683.399 1171,683.399 1171.56,683.399 1172.12,683.399 1172.68,683.399 1173.24,683.399 1173.8,683.399 1174.36,683.399 1174.92,683.399 1175.48,683.399 1176.04,683.399 1176.6,683.399 1177.15,683.399 1177.71,683.399 1178.27,683.399 1178.83,683.399 1179.39,683.399 1179.95,683.399 1180.51,683.399 1181.07,683.399 1181.63,683.399 1182.19,683.399 1182.75,683.399 1183.31,683.399 1183.87,683.399 1184.43,683.399 1184.98,683.399 1185.54,683.399 1186.1,683.399 1186.66,683.399 1187.22,683.399 1187.78,683.399 1188.34,683.399 1188.9,683.399 1189.46,683.399 1190.02,683.399 1190.58,683.399 1191.14,683.399 1191.7,683.399 1192.25,683.399 1192.81,683.399 1193.37,683.399 1193.93,683.399 1194.49,683.399 1195.05,683.399 1195.61,683.399 1196.17,683.399 1196.73,683.399 1197.29,683.399 1197.85,683.399 1198.41,683.399 1198.97,683.399 1199.52,683.399 1200.08,683.399 1200.64,683.399 1201.2,683.399 1201.76,683.399 1202.32,683.399 1202.88,683.399 1203.44,683.399 1204,683.399 1204.56,683.399 1205.12,683.399 1205.68,683.399 1206.24,683.399 1206.8,683.399 1207.35,683.399 1207.91,683.399 1208.47,683.399 1209.03,683.399 1209.59,683.399 1210.15,683.399 1210.71,683.399 1211.27,683.399 1211.83,683.399 1212.39,683.399 1212.95,683.399 1213.51,683.399 1214.07,683.399 1214.62,683.399 1215.18,683.399 1215.74,683.399 1216.3,683.399 1216.86,683.399 1217.42,683.399 1217.98,683.399 1218.54,683.399 1219.1,683.399 1219.66,683.399 1220.22,683.399 1220.78,683.399 1221.34,683.399 1221.89,683.399 1222.45,683.399 1223.01,683.399 1223.57,683.399 1224.13,683.399 1224.69,683.399 1225.25,683.399 1225.81,683.399 1226.37,683.399 1226.93,683.399 1227.49,683.399 1228.05,683.399 1228.61,683.399 1229.17,683.399 1229.72,683.399 1230.28,683.399 1230.84,683.399 1231.4,683.399 1231.96,683.399 1232.52,683.399 1233.08,683.399 1233.64,683.399 1234.2,683.399 1234.76,683.399 1235.32,683.399 1235.88,683.399 1236.44,683.399 1236.99,683.399 1237.55,683.399 1238.11,683.399 1238.67,683.399 1239.23,683.399 1239.79,683.399 1240.35,683.399 1240.91,683.399 1241.47,683.399 1242.03,683.399 1242.59,683.399 1243.15,683.399 1243.71,683.399 1244.26,683.399 1244.82,683.399 1245.38,683.399 1245.94,683.399 1246.5,683.399 1247.06,683.399 1247.62,683.399 1248.18,683.399 1248.74,683.399 1249.3,683.399 1249.86,683.399 1250.42,683.399 1250.98,683.399 1251.54,683.399 1252.09,683.399 1252.65,683.399 1253.21,683.399 1253.77,683.399 1254.33,683.399 1254.89,683.399 1255.45,683.399 1256.01,683.399 1256.57,683.399 1257.13,683.399 1257.69,683.399 1258.25,683.399 1258.81,683.399 1259.36,683.399 1259.92,683.399 1260.48,683.399 1261.04,683.399 1261.6,683.399 1262.16,683.399 1262.72,683.399 1263.28,683.399 1263.84,683.399 1264.4,683.399 1264.96,683.399 1265.52,683.399 1266.08,683.399 1266.63,683.399 1267.19,683.399 1267.75,683.399 1268.31,683.399 1268.87,683.399 1269.43,683.399 1269.99,683.399 1270.55,683.399 1271.11,683.399 1271.67,683.399 1272.23,683.399 1272.79,683.399 1273.35,683.399 1273.91,683.399 1274.46,683.399 1275.02,683.399 1275.58,683.399 1276.14,683.399 1276.7,683.399 1277.26,683.399 1277.82,683.399 1278.38,683.399 1278.94,683.399 1279.5,683.399 1280.06,683.399 1280.62,683.399 1281.18,683.399 1281.73,683.399 1282.29,683.399 1282.85,683.399 1283.41,683.399 1283.97,683.399 1284.53,683.399 1285.09,683.399 1285.65,683.399 1286.21,683.399 1286.77,683.399 1287.33,683.399 1287.89,683.399 1288.45,683.399 1289,683.399 1289.56,683.399 1290.12,683.399 1290.68,683.399 1291.24,683.399 1291.8,683.399 1292.36,683.399 1292.92,683.399 1293.48,683.399 1294.04,683.399 1294.6,683.399 1295.16,683.399 1295.72,683.399 1296.28,683.399 1296.83,683.399 1297.39,683.399 1297.95,683.399 1298.51,683.399 1299.07,683.399 1299.63,683.399 1300.19,683.399 1300.75,683.399 1301.31,683.399 1301.87,683.399 1302.43,683.399 1302.99,683.399 1303.55,683.399 1304.1,683.399 1304.66,683.399 1305.22,683.399 1305.78,683.399 1306.34,683.399 1306.9,683.399 1307.46,683.399 1308.02,683.399 1308.58,683.399 1309.14,683.399 1309.7,683.399 1310.26,683.399 1310.82,683.399 1311.38,683.399 1311.93,683.399 1312.49,683.399 1313.05,683.399 1313.61,683.399 1314.17,683.399 1314.73,683.399 1315.29,683.399 1315.85,683.399 1316.41,683.399 1316.97,683.399 1317.53,683.399 1318.09,683.399 1318.65,683.399 1319.2,683.399 1319.76,683.399 1320.32,683.399 1320.88,683.399 1321.44,683.399 1322,683.399 1322.56,683.399 1323.12,683.399 1323.68,683.399 1324.24,683.399 1324.8,683.399 1325.36,683.399 1325.92,683.399 1326.47,683.399 1327.03,683.399 1327.59,683.399 1328.15,683.399 1328.71,683.399 1329.27,683.399 1329.83,683.399 1330.39,683.399 1330.95,683.399 1331.51,683.399 1332.07,683.399 1332.63,683.399 1333.19,683.399 1333.75,683.399 1334.3,683.399 1334.86,683.399 1335.42,683.399 1335.98,683.399 1336.54,683.399 1337.1,683.399 1337.66,683.399 1338.22,683.399 1338.78,683.399 1339.34,683.399 1339.9,683.399 1340.46,683.399 1341.02,683.399 1341.57,683.399 1342.13,683.399 1342.69,683.399 1343.25,683.399 1343.81,683.399 1344.37,683.399 1344.93,683.399 1345.49,683.399 1346.05,683.399 1346.61,683.399 1347.17,683.399 1347.73,683.399 1348.29,683.399 1348.84,683.399 1349.4,683.399 1349.96,683.399 1350.52,683.399 1351.08,683.399 1351.64,683.399 1352.2,683.399 1352.76,683.399 1353.32,683.399 1353.88,683.399 1354.44,683.399 1355,683.399 1355.56,683.399 1356.12,683.399 1356.67,683.399 1357.23,683.399 1357.79,683.399 1358.35,683.399 1358.91,683.399 1359.47,683.399 1360.03,683.399 1360.59,683.399 1361.15,683.399 1361.71,683.399 1362.27,683.399 1362.83,683.399 1363.39,683.399 1363.94,683.399 1364.5,683.399 1365.06,683.399 1365.62,683.399 1366.18,683.399 1366.74,683.399 1367.3,683.399 1367.86,683.399 1368.42,683.399 1368.98,683.399 1369.54,683.399 1370.1,683.399 1370.66,683.399 1371.21,683.399 1371.77,683.399 1372.33,683.399 1372.89,683.399 1373.45,683.399 1374.01,683.399 1374.57,683.399 1375.13,683.399 1375.69,683.399 1376.25,683.399 1376.81,683.399 1377.37,683.399 1377.93,683.399 1378.49,683.399 1379.04,683.399 1379.6,683.399 1380.16,683.399 1380.72,683.399 1381.28,683.399 1381.84,683.399 1382.4,683.399 1382.96,683.399 1383.52,683.399 1384.08,683.399 1384.64,683.399 1385.2,683.399 1385.76,683.399 1386.31,683.399 1386.87,683.399 1387.43,683.399 1387.99,683.399 1388.55,683.399 1389.11,683.399 1389.67,683.399 1390.23,683.399 1390.79,683.399 1391.35,683.399 1391.91,683.399 1392.47,683.399 1393.03,683.399 1393.58,683.399 1394.14,683.399 1394.7,683.399 1395.26,683.399 1395.82,683.399 1396.38,683.399 1396.94,683.399 1397.5,683.399 1398.06,683.399 1398.62,683.399 1399.18,683.399 1399.74,683.399 1400.3,683.399 1400.86,683.399 1401.41,683.399 1401.97,683.399 1402.53,683.399 1403.09,683.399 1403.65,683.399 1404.21,683.399 1404.77,683.399 1405.33,683.399 1405.89,683.399 1406.45,683.399 1407.01,683.399 1407.57,683.399 1408.13,683.399 1408.68,683.399 1409.24,683.399 1409.8,683.399 1410.36,683.399 1410.92,683.399 1411.48,683.399 1412.04,683.399 1412.6,683.399 1413.16,683.399 1413.72,683.399 1414.28,683.399 1414.84,683.399 1415.4,683.399 1415.95,683.399 1416.51,683.399 1417.07,683.399 1417.63,683.399 1418.19,683.399 1418.75,683.399 1419.31,683.399 1419.87,683.399 1420.43,683.399 1420.99,683.399 1421.55,683.399 1422.11,683.399 1422.67,683.399 1423.23,683.399 1423.78,683.399 1424.34,683.399 1424.9,683.399 1425.46,683.399 1426.02,683.399 1426.58,683.399 1427.14,683.399 1427.7,683.399 1428.26,683.399 1428.82,683.399 1429.38,683.399 1429.94,683.399 1430.5,683.399 1431.05,683.399 1431.61,683.399 1432.17,683.399 1432.73,683.399 1433.29,683.399 1433.85,683.399 1434.41,683.399 1434.97,683.399 1435.53,683.399 1436.09,683.399 1436.65,683.399 1437.21,683.399 1437.77,683.399 1438.33,683.399 1438.88,683.399 1439.44,683.399 1440,683.399 1440.56,683.399 1441.12,683.399 1441.68,683.399 1442.24,683.399 1442.8,683.399 1443.36,683.399 1443.92,683.399 1444.48,683.399 1445.04,683.399 1445.6,683.399 1446.15,683.399 1446.71,683.399 1447.27,683.399 1447.83,683.399 1448.39,683.399 1448.95,683.399 1449.51,683.399 1450.07,683.399 1450.63,683.399 1451.19,683.399 1451.75,683.399 1452.31,683.399 1452.87,683.399 1453.42,683.399 1453.98,683.399 1454.54,683.399 1455.1,683.399 1455.66,683.399 1456.22,683.399 1456.78,683.399 1457.34,683.399 1457.9,683.399 1458.46,683.399 1459.02,683.399 1459.58,683.399 1460.14,683.399 1460.7,683.399 1461.25,683.399 1461.81,683.399 1462.37,683.399 1462.93,683.399 1463.49,683.399 1464.05,683.399 1464.61,683.399 1465.17,683.399 1465.73,683.399 1466.29,683.399 1466.85,683.399 1467.41,683.399 1467.97,683.399 1468.52,683.399 1469.08,683.399 1469.64,683.399 1470.2,683.399 1470.76,683.399 1471.32,683.399 1471.88,683.399 1472.44,683.399 1473,683.399 1473.56,683.399 1474.12,683.399 1474.68,683.399 1475.24,683.399 1475.79,683.399 1476.35,683.399 1476.91,683.399 1477.47,683.399 1478.03,683.399 1478.59,683.399 1479.15,683.399 1479.71,683.399 1480.27,683.399 1480.83,683.399 1481.39,683.399 1481.95,683.399 1482.51,683.399 1483.07,683.399 1483.62,683.399 1484.18,683.399 1484.74,683.399 1485.3,683.399 1485.86,683.399 1486.42,683.399 1486.98,683.399 1487.54,683.399 1488.1,683.399 1488.66,683.399 1489.22,683.399 1489.78,683.399 1490.34,683.399 1490.89,683.399 1491.45,683.399 1492.01,683.399 1492.57,683.399 1493.13,683.399 1493.69,683.399 1494.25,683.399 1494.81,683.399 1495.37,683.399 1495.93,683.399 1496.49,683.399 1497.05,683.399 1497.61,683.399 1498.16,683.399 1498.72,683.399 1499.28,683.399 1499.84,683.399 1500.4,683.399 1500.96,683.399 1501.52,683.399 1502.08,683.399 1502.64,683.399 1503.2,683.399 1503.76,683.399 1504.32,683.399 1504.88,683.399 1505.44,683.399 1505.99,683.399 1506.55,683.399 1507.11,683.399 1507.67,683.399 1508.23,683.399 1508.79,683.399 1509.35,683.399 1509.91,683.399 1510.47,683.399 1511.03,683.399 1511.59,683.399 1512.15,683.399 1512.71,683.399 1513.26,683.399 1513.82,683.399 1514.38,683.399 1514.94,683.399 1515.5,683.399 1516.06,683.399 1516.62,683.399 1517.18,683.399 1517.74,683.399 1518.3,683.399 1518.86,683.399 1519.42,683.399 1519.98,683.399 1520.53,683.399 1521.09,683.399 1521.65,683.399 1522.21,683.399 1522.77,683.399 1523.33,683.399 1523.89,683.399 1524.45,683.399 1525.01,683.399 1525.57,683.399 1526.13,683.399 1526.69,683.399 1527.25,683.399 1527.81,683.399 1528.36,683.399 1528.92,683.399 1529.48,683.399 1530.04,683.399 1530.6,683.399 1531.16,683.399 1531.72,683.399 1532.28,683.399 1532.84,683.399 1533.4,683.399 1533.96,683.399 1534.52,683.399 1535.08,683.399 1535.63,683.399 1536.19,683.399 1536.75,683.399 1537.31,683.399 1537.87,683.399 1538.43,683.399 1538.99,683.399 1539.55,683.399 1540.11,683.399 1540.67,683.399 1541.23,683.399 1541.79,683.399 1542.35,683.399 1542.9,683.399 1543.46,683.399 1544.02,683.399 1544.58,683.399 1545.14,683.399 1545.7,683.399 1546.26,683.399 1546.82,683.399 1547.38,683.399 1547.94,683.399 1548.5,683.399 1549.06,683.399 1549.62,683.399 1550.18,683.399 1550.73,683.399 1551.29,683.399 1551.85,683.399 1552.41,683.399 1552.97,683.399 1553.53,683.399 1554.09,683.399 1554.65,683.399 1555.21,683.399 1555.77,683.399 1556.33,683.399 1556.89,683.399 1557.45,683.399 1558,683.399 1558.56,683.399 1559.12,683.399 1559.68,683.399 1560.24,683.399 1560.8,683.399 1561.36,683.399 1561.92,683.399 1562.48,683.399 1563.04,683.399 1563.6,683.399 1564.16,683.399 1564.72,683.399 1565.28,683.399 1565.83,683.399 1566.39,683.399 1566.95,683.399 1567.51,683.399 1568.07,683.399 1568.63,683.399 1569.19,683.399 1569.75,683.399 1570.31,683.399 1570.87,683.399 1571.43,683.399 1571.99,683.399 1572.55,683.399 1573.1,683.399 1573.66,683.399 1574.22,683.399 1574.78,683.399 1575.34,683.399 1575.9,683.399 1576.46,683.399 1577.02,683.399 1577.58,683.399 1578.14,683.399 1578.7,683.399 1579.26,683.399 1579.82,683.399 1580.37,683.399 1580.93,683.399 1581.49,683.399 1582.05,683.399 1582.61,683.399 1583.17,683.399 1583.73,683.399 1584.29,683.399 1584.85,683.399 1585.41,683.399 1585.97,683.399 1586.53,683.399 1587.09,683.399 1587.65,683.399 1588.2,683.399 1588.76,683.399 1589.32,683.399 1589.88,683.399 1590.44,683.399 1591,683.399 1591.56,683.399 1592.12,683.399 1592.68,683.399 1593.24,683.399 1593.8,683.399 1594.36,683.399 1594.92,683.399 1595.47,683.399 1596.03,683.399 1596.59,683.399 1597.15,683.399 1597.71,683.399 1598.27,683.399 1598.83,683.399 1599.39,683.399 1599.95,683.399 1600.51,683.399 1601.07,683.399 1601.63,683.399 1602.19,683.399 1602.74,683.399 1603.3,683.399 1603.86,683.399 1604.42,683.399 1604.98,683.399 1605.54,683.399 1606.1,683.399 1606.66,683.399 1607.22,683.399 1607.78,683.399 1608.34,683.399 1608.9,683.399 1609.46,683.399 1610.02,683.399 1610.57,683.399 1611.13,683.399 1611.69,683.399 1612.25,683.399 1612.81,683.399 1613.37,683.399 1613.93,683.399 1614.49,683.399 1615.05,683.399 1615.61,683.399 1616.17,683.399 1616.73,683.399 1617.29,683.399 1617.84,683.399 1618.4,683.399 1618.96,683.399 1619.52,683.399 1620.08,683.399 1620.64,683.399 1621.2,683.399 1621.76,683.399 1622.32,683.399 1622.88,683.399 1623.44,683.399 1624,683.399 1624.56,683.399 1625.11,683.399 1625.67,683.399 1626.23,683.399 1626.79,683.399 1627.35,683.399 1627.91,683.399 1628.47,683.399 1629.03,683.399 1629.59,683.399 1630.15,683.399 1630.71,683.399 1631.27,683.399 1631.83,683.399 1632.39,683.399 1632.94,683.399 1633.5,683.399 1634.06,683.399 1634.62,683.399 1635.18,683.399 1635.74,683.399 1636.3,683.399 1636.86,683.399 1637.42,683.399 1637.98,683.399 1638.54,683.399 1639.1,683.399 1639.66,683.399 1640.21,683.399 1640.77,683.399 1641.33,683.399 1641.89,683.399 1642.45,683.399 1643.01,683.399 1643.57,683.399 1644.13,683.399 1644.69,683.399 1645.25,683.399 1645.81,683.399 1646.37,683.399 1646.93,683.399 1647.48,683.399 1648.04,683.399 1648.6,683.399 1649.16,683.399 1649.72,683.399 1650.28,683.399 1650.84,683.399 1651.4,683.399 1651.96,683.399 1652.52,683.399 1653.08,683.399 1653.64,683.399 1654.2,683.399 1654.76,683.399 1655.31,683.399 1655.87,683.399 1656.43,683.399 1656.99,683.399 1657.55,683.399 1658.11,683.399 1658.67,683.399 1659.23,683.399 1659.79,683.399 1660.35,683.399 1660.91,683.399 1661.47,683.399 1662.03,683.399 1662.58,683.399 1663.14,683.399 1663.7,683.399 1664.26,683.399 1664.82,683.399 1665.38,683.399 1665.94,683.399 1666.5,683.399 1667.06,683.399 1667.62,683.399 1668.18,683.399 1668.74,683.399 1669.3,683.399 1669.85,683.399 1670.41,683.399 1670.97,683.399 1671.53,683.399 1672.09,683.399 1672.65,683.399 1673.21,683.399 1673.77,683.399 1674.33,683.399 1674.89,683.399 1675.45,683.399 1676.01,683.399 1676.57,683.399 1677.13,683.399 1677.68,683.399 1678.24,683.399 1678.8,683.399 1679.36,683.399 1679.92,683.399 1680.48,683.399 1681.04,683.399 1681.6,683.399 1682.16,683.399 1682.72,683.399 1683.28,683.399 1683.84,683.399 1684.4,683.399 1684.95,683.399 1685.51,683.399 1686.07,683.399 1686.63,683.399 1687.19,683.399 1687.75,683.399 1688.31,683.399 1688.87,683.399 1689.43,683.399 1689.99,683.399 1690.55,683.399 1691.11,683.399 1691.67,683.399 1692.23,683.399 1692.78,683.399 1693.34,683.399 1693.9,683.399 1694.46,683.399 1695.02,683.399 1695.58,683.399 1696.14,683.399 1696.7,683.399 1697.26,683.399 1697.82,683.399 1698.38,683.399 1698.94,683.399 1699.5,683.399 1700.05,683.399 1700.61,683.399 1701.17,683.399 1701.73,683.399 1702.29,683.399 1702.85,683.399 1703.41,683.399 1703.97,683.399 1704.53,683.399 1705.09,683.399 1705.65,683.399 1706.21,683.399 1706.77,683.399 1707.32,683.399 1707.88,683.399 1708.44,683.399 1709,683.399 1709.56,683.399 1710.12,683.399 1710.68,683.399 1711.24,683.399 1711.8,683.399 1712.36,683.399 1712.92,683.399 1713.48,683.399 1714.04,683.399 1714.6,683.399 1715.15,683.399 1715.71,683.399 1716.27,683.399 1716.83,683.399 1717.39,683.399 1717.95,683.399 1718.51,683.399 1719.07,683.399 1719.63,683.399 1720.19,683.399 1720.75,683.399 1721.31,683.399 1721.87,683.399 1722.42,683.399 1722.98,683.399 1723.54,683.399 1724.1,683.399 1724.66,683.399 1725.22,683.399 1725.78,683.399 1726.34,683.399 1726.9,683.399 1727.46,683.399 1728.02,683.399 1728.58,683.399 1729.14,683.399 1729.69,683.399 1730.25,683.399 1730.81,683.399 1731.37,683.399 1731.93,683.399 1732.49,683.399 1733.05,683.399 1733.61,683.399 1734.17,683.399 1734.73,683.399 1735.29,683.399 1735.85,683.399 1736.41,683.399 1736.97,683.399 1737.52,683.399 1738.08,683.399 1738.64,683.399 1739.2,683.399 1739.76,683.399 1740.32,683.399 1740.88,683.399 1741.44,683.399 1742,683.399 1742.56,683.399 1743.12,683.399 1743.68,683.399 1744.24,683.399 1744.79,683.399 1745.35,683.399 1745.91,683.399 1746.47,683.399 1747.03,683.399 1747.59,683.399 1748.15,683.399 1748.71,683.399 1749.27,683.399 1749.83,683.399 1750.39,683.399 1750.95,683.399 1751.51,683.399 1752.06,683.399 1752.62,683.399 1753.18,683.399 1753.74,683.399 1754.3,683.399 1754.86,683.399 1755.42,683.399 1755.98,683.399 1756.54,683.399 1757.1,683.399 1757.66,683.399 1758.22,683.399 1758.78,683.399 1759.34,683.399 1759.89,683.399 1760.45,683.399 1761.01,683.399 1761.57,683.399 1762.13,683.399 1762.69,683.399 1763.25,683.399 1763.81,683.399 1764.37,683.399 1764.93,683.399 1765.49,683.399 1766.05,683.399 1766.61,683.399 1767.16,683.399 1767.72,683.399 1768.28,683.399 1768.84,683.399 1769.4,683.399 1769.96,683.399 1770.52,683.399 1771.08,683.399 1771.64,683.399 1772.2,683.399 1772.76,683.399 1773.32,683.399 1773.88,683.399 1774.43,683.399 1774.99,683.399 1775.55,683.399 1776.11,683.399 1776.67,683.399 1777.23,683.399 1777.79,683.399 1778.35,683.399 1778.91,683.399 1779.47,683.399 1780.03,683.399 1780.59,683.399 1781.15,683.399 1781.71,683.399 1782.26,683.399 1782.82,683.399 1783.38,683.399 1783.94,683.399 1784.5,683.399 1785.06,683.399 1785.62,683.399 1786.18,683.399 1786.74,683.399 1787.3,683.399 1787.86,683.399 1788.42,683.399 1788.98,683.399 1789.53,683.399 1790.09,683.399 1790.65,683.399 1791.21,683.399 1791.77,683.399 1792.33,683.399 1792.89,683.399 1793.45,683.399 1794.01,683.399 1794.57,683.399 1795.13,683.399 1795.69,683.399 1796.25,683.399 1796.8,683.399 1797.36,683.399 1797.92,683.399 1798.48,683.399 1799.04,683.399 1799.6,683.399 1800.16,683.399 1800.72,683.399 1801.28,683.399 1801.84,683.399 1802.4,683.399 1802.96,683.399 1803.52,683.399 1804.08,683.399 1804.63,683.399 1805.19,683.399 1805.75,683.399 1806.31,683.399 1806.87,683.399 1807.43,683.399 1807.99,683.399 1808.55,683.399 1809.11,683.399 1809.67,683.399 1810.23,683.399 1810.79,683.399 1811.35,683.399 1811.9,683.399 1812.46,683.399 1813.02,683.399 1813.58,683.399 1814.14,683.399 1814.7,683.399 1815.26,683.399 1815.82,683.399 1816.38,683.399 1816.94,683.399 1817.5,683.399 1818.06,683.399 1818.62,683.399 1819.18,683.399 1819.73,683.399 1820.29,683.399 1820.85,683.399 1821.41,683.399 1821.97,683.399 1822.53,683.399 1823.09,683.399 1823.65,683.399 1824.21,683.399 1824.77,683.399 1825.33,683.399 1825.89,683.399 1826.45,683.399 1827,683.399 1827.56,683.399 1828.12,683.399 1828.68,683.399 1829.24,683.399 1829.8,683.399 1830.36,683.399 1830.92,683.399 1831.48,683.399 1832.04,683.399 1832.6,683.399 1833.16,683.399 1833.72,683.399 1834.27,683.399 1834.83,683.399 1835.39,683.399 1835.95,683.399 1836.51,683.399 1837.07,683.399 1837.63,683.399 1838.19,683.399 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030409809083895 ± 0.02557273089167133\nProjected Energy: -4.014148279821399 ± (0.003413694243317167, 0.0034795057675580665)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.12835</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.5376e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">3.2481e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.603e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">4.027e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">8.385e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.5018e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133726\n -0.7590191922770888\n  0.13584182219621432\n  0.15789998694608265\n  0.8767114411781272\n  1.5305929970973295\n  1.5835732611867428\n  3.0728703303258547\n  3.1256726539518427\n  4.862107221562174\n  6.260694850380599\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
