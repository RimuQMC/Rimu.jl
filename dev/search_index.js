var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2127923993272198 ± 0.0015256426420264643\n   G2(1) = 0.9164868701501369 ± 0.0006737050773828413\n   G2(2) = 0.9825663312407734 ± 0.0005496383556034191\n   G2(3) = 0.9891011978909603 ± 0.0008089791993206292\n   G2(4) = 0.9825663312407734 ± 0.0005496383556034191\n   G2(5) = 0.9164868701501369 ± 0.0006737050773828413\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.96759679174373 ± 0.13648050634977513\n   Replica 2: -3.980703424260646 ± 0.135040958807017\n   Replica 3: -3.987826524320446 ± 0.13019832664998127\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip210\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip211\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip212\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.93 2211.02,1003.93 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.981 2211.02,745.981 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.032 2211.02,488.032 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.084 2211.02,230.084 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.93 423.181,1003.93 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.981 423.181,745.981 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.032 423.181,488.032 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.084 423.181,230.084 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.68 356.339 1247.68 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.25 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.25 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M290.043 1017.27 L306.363 1017.27 L306.363 1021.21 L284.418 1021.21 L284.418 1017.27 Q287.08 1014.52 291.664 1009.89 Q296.27 1005.24 297.451 1003.89 Q299.696 1001.37 300.576 999.636 Q301.478 997.876 301.478 996.187 Q301.478 993.432 299.534 991.696 Q297.613 989.96 294.511 989.96 Q292.312 989.96 289.858 990.724 Q287.427 991.488 284.65 993.039 L284.65 988.316 Q287.474 987.182 289.927 986.603 Q292.381 986.025 294.418 986.025 Q299.789 986.025 302.983 988.71 Q306.177 991.395 306.177 995.886 Q306.177 998.015 305.367 999.937 Q304.58 1001.83 302.474 1004.43 Q301.895 1005.1 298.793 1008.32 Q295.691 1011.51 290.043 1017.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M316.224 986.65 L334.58 986.65 L334.58 990.585 L320.506 990.585 L320.506 999.057 Q321.524 998.71 322.543 998.548 Q323.562 998.363 324.58 998.363 Q330.367 998.363 333.747 1001.53 Q337.126 1004.71 337.126 1010.12 Q337.126 1015.7 333.654 1018.8 Q330.182 1021.88 323.862 1021.88 Q321.687 1021.88 319.418 1021.51 Q317.173 1021.14 314.765 1020.4 L314.765 1015.7 Q316.849 1016.83 319.071 1017.39 Q321.293 1017.95 323.77 1017.95 Q327.774 1017.95 330.112 1015.84 Q332.45 1013.73 332.45 1010.12 Q332.45 1006.51 330.112 1004.4 Q327.774 1002.3 323.77 1002.3 Q321.895 1002.3 320.02 1002.71 Q318.168 1003.13 316.224 1004.01 L316.224 986.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 989.728 Q352.728 989.728 350.899 993.293 Q349.094 996.835 349.094 1003.96 Q349.094 1011.07 350.899 1014.64 Q352.728 1018.18 356.339 1018.18 Q359.973 1018.18 361.779 1014.64 Q363.608 1011.07 363.608 1003.96 Q363.608 996.835 361.779 993.293 Q359.973 989.728 356.339 989.728 M356.339 986.025 Q362.149 986.025 365.205 990.631 Q368.284 995.214 368.284 1003.96 Q368.284 1012.69 365.205 1017.3 Q362.149 1021.88 356.339 1021.88 Q350.529 1021.88 347.45 1017.3 Q344.395 1012.69 344.395 1003.96 Q344.395 995.214 347.45 990.631 Q350.529 986.025 356.339 986.025 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M286.062 728.701 L304.418 728.701 L304.418 732.636 L290.344 732.636 L290.344 741.108 Q291.363 740.761 292.381 740.599 Q293.4 740.414 294.418 740.414 Q300.205 740.414 303.585 743.585 Q306.964 746.756 306.964 752.173 Q306.964 757.752 303.492 760.854 Q300.02 763.932 293.701 763.932 Q291.525 763.932 289.256 763.562 Q287.011 763.192 284.603 762.451 L284.603 757.752 Q286.687 758.886 288.909 759.442 Q291.131 759.997 293.608 759.997 Q297.613 759.997 299.951 757.891 Q302.288 755.784 302.288 752.173 Q302.288 748.562 299.951 746.456 Q297.613 744.349 293.608 744.349 Q291.733 744.349 289.858 744.766 Q288.006 745.182 286.062 746.062 L286.062 728.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M326.177 731.78 Q322.566 731.78 320.737 735.344 Q318.932 738.886 318.932 746.016 Q318.932 753.122 320.737 756.687 Q322.566 760.229 326.177 760.229 Q329.811 760.229 331.617 756.687 Q333.446 753.122 333.446 746.016 Q333.446 738.886 331.617 735.344 Q329.811 731.78 326.177 731.78 M326.177 728.076 Q331.987 728.076 335.043 732.682 Q338.122 737.266 338.122 746.016 Q338.122 754.743 335.043 759.349 Q331.987 763.932 326.177 763.932 Q320.367 763.932 317.288 759.349 Q314.233 754.743 314.233 746.016 Q314.233 737.266 317.288 732.682 Q320.367 728.076 326.177 728.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 731.78 Q352.728 731.78 350.899 735.344 Q349.094 738.886 349.094 746.016 Q349.094 753.122 350.899 756.687 Q352.728 760.229 356.339 760.229 Q359.973 760.229 361.779 756.687 Q363.608 753.122 363.608 746.016 Q363.608 738.886 361.779 735.344 Q359.973 731.78 356.339 731.78 M356.339 728.076 Q362.149 728.076 365.205 732.682 Q368.284 737.266 368.284 746.016 Q368.284 754.743 365.205 759.349 Q362.149 763.932 356.339 763.932 Q350.529 763.932 347.45 759.349 Q344.395 754.743 344.395 746.016 Q344.395 737.266 347.45 732.682 Q350.529 728.076 356.339 728.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M284.835 470.752 L307.057 470.752 L307.057 472.743 L294.511 505.312 L289.627 505.312 L301.432 474.687 L284.835 474.687 L284.835 470.752 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M316.224 470.752 L334.58 470.752 L334.58 474.687 L320.506 474.687 L320.506 483.16 Q321.524 482.812 322.543 482.65 Q323.562 482.465 324.58 482.465 Q330.367 482.465 333.747 485.637 Q337.126 488.808 337.126 494.224 Q337.126 499.803 333.654 502.905 Q330.182 505.984 323.862 505.984 Q321.687 505.984 319.418 505.613 Q317.173 505.243 314.765 504.502 L314.765 499.803 Q316.849 500.937 319.071 501.493 Q321.293 502.048 323.77 502.048 Q327.774 502.048 330.112 499.942 Q332.45 497.836 332.45 494.224 Q332.45 490.613 330.112 488.507 Q327.774 486.4 323.77 486.4 Q321.895 486.4 320.02 486.817 Q318.168 487.234 316.224 488.113 L316.224 470.752 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 473.831 Q352.728 473.831 350.899 477.396 Q349.094 480.937 349.094 488.067 Q349.094 495.173 350.899 498.738 Q352.728 502.28 356.339 502.28 Q359.973 502.28 361.779 498.738 Q363.608 495.173 363.608 488.067 Q363.608 480.937 361.779 477.396 Q359.973 473.831 356.339 473.831 M356.339 470.127 Q362.149 470.127 365.205 474.734 Q368.284 479.317 368.284 488.067 Q368.284 496.794 365.205 501.4 Q362.149 505.984 356.339 505.984 Q350.529 505.984 347.45 501.4 Q344.395 496.794 344.395 488.067 Q344.395 479.317 347.45 474.734 Q350.529 470.127 356.339 470.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M256.664 243.429 L264.303 243.429 L264.303 217.063 L255.992 218.73 L255.992 214.47 L264.256 212.804 L268.932 212.804 L268.932 243.429 L276.571 243.429 L276.571 247.364 L256.664 247.364 L256.664 243.429 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M296.015 215.882 Q292.404 215.882 290.576 219.447 Q288.77 222.989 288.77 230.118 Q288.77 237.225 290.576 240.79 Q292.404 244.331 296.015 244.331 Q299.65 244.331 301.455 240.79 Q303.284 237.225 303.284 230.118 Q303.284 222.989 301.455 219.447 Q299.65 215.882 296.015 215.882 M296.015 212.179 Q301.826 212.179 304.881 216.785 Q307.96 221.368 307.96 230.118 Q307.96 238.845 304.881 243.452 Q301.826 248.035 296.015 248.035 Q290.205 248.035 287.127 243.452 Q284.071 238.845 284.071 230.118 Q284.071 221.368 287.127 216.785 Q290.205 212.179 296.015 212.179 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M326.177 215.882 Q322.566 215.882 320.737 219.447 Q318.932 222.989 318.932 230.118 Q318.932 237.225 320.737 240.79 Q322.566 244.331 326.177 244.331 Q329.811 244.331 331.617 240.79 Q333.446 237.225 333.446 230.118 Q333.446 222.989 331.617 219.447 Q329.811 215.882 326.177 215.882 M326.177 212.179 Q331.987 212.179 335.043 216.785 Q338.122 221.368 338.122 230.118 Q338.122 238.845 335.043 243.452 Q331.987 248.035 326.177 248.035 Q320.367 248.035 317.288 243.452 Q314.233 238.845 314.233 230.118 Q314.233 221.368 317.288 216.785 Q320.367 212.179 326.177 212.179 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 215.882 Q352.728 215.882 350.899 219.447 Q349.094 222.989 349.094 230.118 Q349.094 237.225 350.899 240.79 Q352.728 244.331 356.339 244.331 Q359.973 244.331 361.779 240.79 Q363.608 237.225 363.608 230.118 Q363.608 222.989 361.779 219.447 Q359.973 215.882 356.339 215.882 M356.339 212.179 Q362.149 212.179 365.205 216.785 Q368.284 221.368 368.284 230.118 Q368.284 238.845 365.205 243.452 Q362.149 248.035 356.339 248.035 Q350.529 248.035 347.45 243.452 Q344.395 238.845 344.395 230.118 Q344.395 221.368 347.45 216.785 Q350.529 212.179 356.339 212.179 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip212)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.084 4017.76,230.084 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.5 456.554,1250.44 457.123,1250.27 457.691,1250.05 458.259,1248.73 458.828,1248.43 459.396,1248.06 459.964,1247.58 460.533,1247 461.101,1246.37 461.669,1244.62 462.238,1243.84 462.806,1242.96 463.375,1242.01 463.943,1240.97 464.511,1238.8 465.08,1236.51 465.648,1235.16 466.216,1233.72 466.785,1231.09 467.353,1229.34 467.921,1227.51 468.49,1225.53 469.058,1223.42 469.626,1221.17 470.195,1218.77 470.763,1216.18 471.331,1213.45 471.9,1207.44 472.468,1204.31 473.036,1201.01 473.605,1196.5 474.173,1191.79 474.741,1187.9 475.31,1181.72 475.878,1177.41 476.446,1172.83 477.015,1168.07 477.583,1162.07 478.152,1156.95 478.72,1148.56 479.288,1143 479.857,1137.26 480.425,1129.21 480.993,1121.97 481.562,1115.66 482.13,1106.03 482.698,1098.25 483.267,1091.27 483.835,1083.26 484.403,1073.95 484.972,1066.61 485.54,1056.03 486.108,1047.45 486.677,1037.62 487.245,1029.86 487.813,1019.86 488.382,1010.72 488.95,1001.55 489.518,990.129 490.087,980.918 490.655,970.425 491.224,959.927 491.792,951.515 492.36,941.981 492.929,931.219 493.497,922.664 494.065,913.861 494.634,901.82 495.202,892.832 495.77,882.83 496.339,872.803 496.907,861.561 497.475,851.515 498.044,838.252 498.612,829.331 499.18,817.251 499.749,805.14 500.317,795.246 500.885,784.337 501.454,775.551 502.022,766.764 502.59,755.988 503.159,746.281 503.727,737.575 504.295,725.87 504.864,717.522 505.432,706.001 506.001,696.712 506.569,687.445 507.137,677.289 507.706,667.253 508.274,656.175 508.842,648.575 509.411,641.137 509.979,631.529 510.547,623.052 511.116,614.734 511.684,606.395 512.252,598.043 512.821,588.837 513.389,581.86 513.957,572.82 514.526,565.048 515.094,555.385 515.662,546.718 516.231,538.156 516.799,532.006 517.367,523.836 517.936,517.907 518.504,512.082 519.072,505.327 519.641,498.622 520.209,489.128 520.778,482.63 521.346,477.299 521.914,471.047 522.483,465.889 523.051,460.942 523.619,455.02 524.188,450.247 524.756,445.454 525.324,440.615 525.893,434.91 526.461,429.565 527.029,423.249 527.598,418.978 528.166,413.889 528.734,408.052 529.303,402.375 529.871,395.858 530.439,391.653 531.008,389.415 531.576,386.157 532.144,380.831 532.713,377.965 533.281,375.033 533.85,371.08 534.418,368.144 534.986,365.188 535.555,362.666 536.123,361.002 536.691,357.015 537.26,350.224 537.828,345.813 538.396,341.561 538.965,337.422 539.533,334.38 540.101,333.522 540.67,330.84 541.238,328.143 541.806,326.373 542.375,324.648 542.943,322.248 543.511,320.786 544.08,317.127 544.648,313.559 545.216,312.177 545.785,310.968 546.353,310.661 546.921,308.163 547.49,305.796 548.058,304.369 548.627,300.114 549.195,297.942 549.763,296.635 550.332,293.473 550.9,293.652 551.468,291.839 552.037,291.803 552.605,290.766 553.173,291.761 553.742,287.638 554.31,284.57 554.878,284.799 555.447,284.928 556.015,285.152 556.583,283.132 557.152,280.965 557.72,278.148 558.288,276.229 558.857,274.622 559.425,273.92 559.993,273.602 560.562,268.955 561.13,267.774 561.698,268.663 562.267,267.398 562.835,267.293 563.404,268.931 563.972,267.586 564.54,269.26 565.109,265.577 565.677,263.429 566.245,263.088 566.814,263.858 567.382,263.583 567.95,264.441 568.519,263.922 569.087,263.388 569.655,260.108 570.224,258.948 570.792,258.762 571.36,259.57 571.929,258.091 572.497,259.053 573.065,257.73 573.634,257.566 574.202,257.414 574.77,256.448 575.339,255.499 575.907,254.198 576.476,251.072 577.044,249.325 577.612,249.593 578.181,246.772 578.749,245.135 579.317,243.538 579.886,245.01 580.454,248.529 581.022,250.85 581.591,251.818 582.159,248.476 582.727,249.336 583.296,249.5 583.864,247.564 584.432,247.778 585.001,247.77 585.569,248.702 586.137,247.519 586.706,247.568 587.274,247.8 587.842,247.72 588.411,248.878 588.979,247.91 589.547,247.973 590.116,247.769 590.684,246.558 591.253,246.794 591.821,246.733 592.389,246.937 592.958,243.791 593.526,243.871 594.094,240.93 594.663,240.167 595.231,239.323 595.799,240.577 596.368,239.869 596.936,241.411 597.504,241.687 598.073,240.07 598.641,240.415 599.209,242.826 599.778,245.014 600.346,245.981 600.914,244.985 601.483,244.774 602.051,243.699 602.619,243.875 603.188,243.012 603.756,243.006 604.325,240.943 604.893,240.943 605.461,241.913 606.03,239.903 606.598,240 607.166,236.087 607.735,234.436 608.303,232.931 608.871,231.786 609.44,230.832 610.008,231.683 610.576,230.516 611.145,229.325 611.713,230.072 612.281,228.918 612.85,231.2 613.418,231.599 613.986,233.599 614.555,235.153 615.123,235.816 615.691,237.369 616.26,236.667 616.828,236.42 617.396,237.744 617.965,240.264 618.533,240.205 619.102,239.289 619.67,238.789 620.238,239.92 620.807,242.032 621.375,244.279 621.943,243.254 622.512,244.287 623.08,243.093 623.648,241.927 624.217,244.065 624.785,241.791 625.353,242.886 625.922,239.607 626.49,240.956 627.058,238.9 627.627,239.002 628.195,239.075 628.763,240.27 629.332,239.068 629.9,239.084 630.468,237.022 631.037,237.188 631.605,238.451 632.173,236.563 632.742,236.788 633.31,237.024 633.879,234.209 634.447,234.597 635.015,234.847 635.584,235.204 636.152,233.601 636.72,235.116 637.289,236.613 637.857,235.958 638.425,236.118 638.994,237.567 639.562,238.643 640.13,237.623 640.699,236.644 641.267,235.819 641.835,235.865 642.404,237.283 642.972,236.3 643.54,235.529 644.109,237.612 644.677,237.565 645.245,237.559 645.814,237.612 646.382,238.599 646.951,238.462 647.519,236.445 648.087,235.665 648.656,233.906 649.224,234.34 649.792,234.726 650.361,236.988 650.929,237.168 651.497,238.398 652.066,240.288 652.634,241.134 653.202,240.864 653.771,241.641 654.339,242.629 654.907,243.241 655.476,241.665 656.044,242.191 656.612,241.766 657.181,241.314 657.749,240.912 658.317,238.583 658.886,236.332 659.454,236.379 660.022,234.261 660.591,233.427 661.159,232.64 661.728,229.741 662.296,229.127 662.864,229.744 663.433,231.165 664.001,231.73 664.569,231.047 665.138,231.371 665.706,231.392 666.274,230.555 666.843,232.073 667.411,233.435 667.979,234.699 668.548,233.9 669.116,232.077 669.684,233.543 670.253,233.653 670.821,234.851 671.389,236.936 671.958,235.761 672.526,237.126 673.094,237.155 673.663,237.149 674.231,234.99 674.799,233.264 675.368,232.396 675.936,232.415 676.505,233.705 677.073,235.947 677.641,237.023 678.21,237.058 678.778,238.148 679.346,238.043 679.915,236.819 680.483,234.808 681.051,234.933 681.62,235.907 682.188,237.827 682.756,240.737 683.325,238.353 683.893,236.051 684.461,236.962 685.03,235.625 685.598,233.598 686.166,234.668 686.735,231.637 687.303,232.915 687.871,230.133 688.44,230.295 689.008,229.38 689.577,229.828 690.145,229.057 690.713,228.36 691.282,227.748 691.85,228.161 692.418,231.672 692.987,233.702 693.555,233.914 694.123,233.834 694.692,233.833 695.26,233.77 695.828,234.902 696.397,235.826 696.965,235.671 697.533,236.616 698.102,236.344 698.67,235.024 699.238,235.834 699.807,235.434 700.375,233.125 700.943,234.149 701.512,233.269 702.08,234.538 702.648,233.453 703.217,232.516 703.785,235.656 704.354,235.518 704.922,236.484 705.49,235.354 706.059,233.175 706.627,232.259 707.195,231.393 707.764,232.582 708.332,232.7 708.9,231.524 709.469,231.621 710.037,230.862 710.605,229.944 711.174,230.231 711.742,229.5 712.31,228.782 712.879,227.113 713.447,229.749 714.015,228.067 714.584,226.571 715.152,229.287 715.72,231.868 716.289,233.033 716.857,233.078 717.425,231.841 717.994,231.958 718.562,235.074 719.131,231.524 719.699,231.697 720.267,231.942 720.836,231.838 721.404,232.152 721.972,232.181 722.541,233.225 723.109,233.24 723.677,233.195 724.246,234.344 724.814,234.289 725.382,232.948 725.951,234.2 726.519,235.17 727.087,235.045 727.656,234.936 728.224,233.888 728.792,232.948 729.361,234.071 729.929,234.054 730.497,233.03 731.066,232.223 731.634,232.371 732.203,231.447 732.771,231.687 733.339,231.825 733.908,232.107 734.476,234.063 735.044,233.143 735.613,233.146 736.181,233.192 736.749,234.305 737.318,234.109 737.886,234.057 738.454,236.169 739.023,233.711 739.591,233.78 740.159,231.499 740.728,230.487 741.296,230.485 741.864,229.822 742.433,233.09 743.001,233.121 743.569,233.159 744.138,234.176 744.706,234.214 745.274,235.155 745.843,234.911 746.411,235.768 746.98,235.552 747.548,236.137 748.116,236.731 748.685,237.399 749.253,239.123 749.821,239.571 750.39,235.832 750.958,235.53 751.526,236.139 752.095,235.792 752.663,235.564 753.231,235.252 753.8,235.066 754.368,235.817 754.936,235.349 755.505,236.138 756.073,235.679 756.641,235.335 757.21,235.091 757.778,232.718 758.346,232.493 758.915,231.347 759.483,230.271 760.052,232.551 760.62,233.328 761.188,233.177 761.757,232.918 762.325,232.684 762.893,231.553 763.462,231.271 764.03,231.347 764.598,231.27 765.167,231.25 765.735,229.384 766.303,229.339 766.872,230.534 767.44,228.265 768.008,228.489 768.577,229.607 769.145,228.69 769.713,230.048 770.282,229.959 770.85,231.07 771.418,229.968 771.987,228.846 772.555,229.924 773.123,228.036 773.692,227.298 774.26,228.753 774.829,227.831 775.397,229.137 775.965,229.45 776.534,229.572 777.102,229.694 777.67,230.587 778.239,230.651 778.807,229.69 779.375,228.73 779.944,228.716 780.512,228.643 781.08,227.742 781.649,228.845 782.217,229.09 782.785,229.278 783.354,226.564 783.922,224.827 784.49,226.415 785.059,227.547 785.627,227.893 786.195,227.395 786.764,226.678 787.332,226.005 787.9,226.608 788.469,229.058 789.037,230.487 789.606,229.48 790.174,230.706 790.742,232.999 791.311,233.871 791.879,235.813 792.447,236.404 793.016,234.993 793.584,235.741 794.152,233.274 794.721,232.018 795.289,232.875 795.857,231.962 796.426,230.733 796.994,230.637 797.562,231.509 798.131,228.156 798.699,228.165 799.267,228.18 799.836,227.352 800.404,226.819 800.972,227.104 801.541,224.541 802.109,224.966 802.678,224.3 803.246,225.627 803.814,226.992 804.383,227.428 804.951,228.528 805.519,226.67 806.088,225.791 806.656,228.391 807.224,225.761 807.793,226.417 808.361,229.02 808.929,229.447 809.498,230.38 810.066,230.461 810.634,228.633 811.203,228.06 811.771,229.518 812.339,228.588 812.908,228.755 813.476,227.04 814.044,230.52 814.613,231.711 815.181,231.783 815.749,233.092 816.318,235.173 816.886,234.01 817.455,233.758 818.023,233.73 818.591,232.475 819.16,230.511 819.728,230.747 820.296,229.808 820.865,228.047 821.433,230.314 822.001,228.603 822.57,228.925 823.138,229.261 823.706,229.601 824.275,228.799 824.843,229.881 825.411,227.858 825.98,227.347 826.548,228.872 827.116,229.106 827.685,229.578 828.253,231.818 828.821,230.899 829.39,230.076 829.958,230.221 830.526,231.317 831.095,231.684 831.663,230.879 832.232,230.087 832.8,230.403 833.368,231.763 833.937,232.946 834.505,233.997 835.073,234.889 835.642,233.845 836.21,232.764 836.778,233.812 837.347,232.637 837.915,233.64 838.483,232.772 839.052,231.553 839.62,233.614 840.188,233.547 840.757,235.688 841.325,234.333 841.893,232.122 842.462,232.136 843.03,231.025 843.598,230.952 844.167,231.175 844.735,231.361 845.304,230.375 845.872,228.327 846.44,229.766 847.009,233.023 847.577,230.913 848.145,232.104 848.714,229.029 849.282,227.943 849.85,229.041 850.419,229.448 850.987,229.645 851.555,229.665 852.124,230.724 852.692,229.846 853.26,229.143 853.829,229.443 854.397,228.694 854.965,228.787 855.534,227.873 856.102,225.96 856.67,226.261 857.239,226.89 857.807,228.299 858.375,230.48 858.944,230.592 859.512,229.583 860.081,232.855 860.649,235.952 861.217,235.558 861.786,234.019 862.354,233.849 862.922,232.788 863.491,231.86 864.059,229.777 864.627,229.704 865.196,229.821 865.764,231.156 866.332,231.02 866.901,230.236 867.469,228.531 868.037,226.667 868.606,225.993 869.174,227.571 869.742,229.055 870.311,230.171 870.879,230.299 871.447,228.338 872.016,227.697 872.584,230.227 873.152,231.108 873.721,232.305 874.289,233.663 874.858,232.49 875.426,233.494 875.994,234.425 876.563,233.239 877.131,233.142 877.699,234.135 878.268,233.905 878.836,234.656 879.404,235.38 879.973,237.195 880.541,234.591 881.109,233.407 881.678,231.326 882.246,233.284 882.814,234.162 883.383,233.899 883.951,231.698 884.519,230.634 885.088,231.576 885.656,231.532 886.224,230.526 886.793,231.372 887.361,233.499 887.93,235.42 888.498,235.041 889.066,234.739 889.635,235.589 890.203,237.375 890.771,236.749 891.34,235.445 891.908,235.127 892.476,235.868 893.045,235.397 893.613,234.96 894.181,234.497 894.75,235.178 895.318,234.032 895.886,233.757 896.455,234.624 897.023,235.648 897.591,235.384 898.16,235.046 898.728,233.536 899.296,235.316 899.865,234.058 900.433,230.719 901.001,232.538 901.57,233.315 902.138,232.933 902.707,235.9 903.275,235.284 903.843,231.88 904.412,232.865 904.98,231.604 905.548,231.599 906.117,230.39 906.685,230.288 907.253,230.208 907.822,228.143 908.39,228.363 908.958,230.538 909.527,229.321 910.095,228.019 910.663,228.093 911.232,227.22 911.8,227.227 912.368,229.425 912.937,230.575 913.505,229.395 914.073,227.267 914.642,229.512 915.21,229.563 915.779,231.651 916.347,231.537 916.915,230.377 917.484,229.274 918.052,230.454 918.62,229.633 919.189,229.578 919.757,230.884 920.325,228.809 920.894,228.695 921.462,229.67 922.03,229.818 922.599,229.996 923.167,227.764 923.735,226.75 924.304,227.185 924.872,228.131 925.44,229.376 926.009,228.236 926.577,230.487 927.145,232.713 927.714,234.428 928.282,234.083 928.85,235.913 929.419,234.268 929.987,235.148 930.556,234.849 931.124,234.406 931.692,233.005 932.261,232.924 932.829,232.663 933.397,232.416 933.966,232.253 934.534,232.246 935.102,230.988 935.671,229.866 936.239,228.639 936.807,227.835 937.376,227.966 937.944,228.266 938.512,228.438 939.081,229.257 939.649,229.065 940.217,227.952 940.786,228.036 941.354,227.045 941.922,229.281 942.491,231.126 943.059,231.953 943.627,230.49 944.196,230.553 944.764,231.422 945.333,231.188 945.901,229 946.469,229.112 947.038,227.176 947.606,225.527 948.174,226.707 948.743,226.906 949.311,226.993 949.879,227.995 950.448,229.324 951.016,228.369 951.584,228.526 952.153,228.439 952.721,228.655 953.289,227.591 953.858,231.14 954.426,230.024 954.994,231.082 955.563,231.088 956.131,230.989 956.699,232.1 957.268,231.001 957.836,229.793 958.405,230.927 958.973,228.934 959.541,227.986 960.11,229.355 960.678,228.6 961.246,229.031 961.815,227.208 962.383,227.364 962.951,228.58 963.52,227.638 964.088,225.835 964.656,226.962 965.225,231.25 965.793,228.274 966.361,229.548 966.93,232.657 967.498,231.658 968.066,231.65 968.635,232.584 969.203,230.351 969.771,229.117 970.34,229.486 970.908,225.157 971.476,225.399 972.045,225.761 972.613,229.169 973.182,230.208 973.75,230.312 974.318,230.124 974.887,230.04 975.455,227.92 976.023,227.967 976.592,226.168 977.16,225.37 977.728,225.711 978.297,225.916 978.865,227.282 979.433,225.33 980.002,225.366 980.57,226.755 981.138,227.15 981.707,227.375 982.275,227.649 982.843,225.851 983.412,227.292 983.98,228.729 984.548,227.021 985.117,228.227 985.685,228.405 986.253,227.723 986.822,229.18 987.39,228.432 987.959,230.609 988.527,229.842 989.095,227.881 989.664,227.984 990.232,229.14 990.8,230.336 991.369,231.363 991.937,231.455 992.505,230.48 993.074,229.751 993.642,228.767 994.21,229.786 994.779,228.892 995.347,230.168 995.915,231.145 996.484,232.296 997.052,230.214 997.62,231.061 998.189,230.982 998.757,231.087 999.325,231.098 999.894,229.896 1000.46,229.888 1001.03,230.971 1001.6,231.978 1002.17,231.816 1002.74,231.88 1003.3,231.838 1003.87,231.859 1004.44,230.786 1005.01,230.753 1005.58,233.935 1006.15,232.642 1006.71,230.387 1007.28,232.36 1007.85,231.381 1008.42,230.366 1008.99,230.451 1009.56,230.54 1010.12,231.643 1010.69,231.677 1011.26,230.644 1011.83,229.484 1012.4,226.665 1012.97,227.94 1013.53,230.138 1014.1,230.186 1014.67,228.178 1015.24,227.515 1015.81,228.611 1016.38,228.889 1016.94,230.178 1017.51,232.41 1018.08,232.572 1018.65,234.66 1019.22,234.298 1019.79,234.086 1020.35,232.881 1020.92,232.692 1021.49,228.42 1022.06,226.717 1022.63,230.195 1023.2,229.277 1023.76,229.334 1024.33,228.667 1024.9,228.922 1025.47,228.01 1026.04,229.662 1026.61,228.641 1027.17,227.837 1027.74,229.108 1028.31,229.431 1028.88,232.78 1029.45,231.595 1030.02,231.601 1030.58,231.608 1031.15,231.724 1031.72,231.594 1032.29,230.506 1032.86,230.659 1033.43,231.841 1033.99,231.988 1034.56,233.094 1035.13,230.951 1035.7,230.992 1036.27,230.87 1036.84,231.087 1037.4,232.132 1037.97,232.131 1038.54,234.014 1039.11,231.872 1039.68,232.999 1040.25,235.064 1040.81,233.613 1041.38,234.439 1041.95,235.036 1042.52,235.637 1043.09,235.375 1043.66,237.271 1044.22,239.828 1044.79,239.23 1045.36,238.34 1045.93,237.741 1046.5,235.989 1047.07,236.467 1047.63,235.798 1048.2,234.3 1048.77,233.877 1049.34,234.69 1049.91,233.337 1050.48,231.412 1051.05,232.15 1051.61,230.851 1052.18,231.886 1052.75,231.812 1053.32,230.713 1053.89,229.784 1054.46,230.682 1055.02,230.577 1055.59,229.303 1056.16,229.189 1056.73,230.297 1057.3,229.442 1057.87,228.386 1058.43,228.564 1059,230.676 1059.57,229.44 1060.14,229.548 1060.71,228.416 1061.28,230.486 1061.84,229.447 1062.41,230.46 1062.98,233.649 1063.55,233.588 1064.12,230.184 1064.69,229.138 1065.25,228.128 1065.82,226.895 1066.39,226.179 1066.96,224.166 1067.53,224.459 1068.1,222.835 1068.66,224.084 1069.23,222.414 1069.8,221.61 1070.37,222.18 1070.94,224.772 1071.51,226.021 1072.07,224.229 1072.64,223.64 1073.21,221.147 1073.78,221.947 1074.35,222.63 1074.92,224.102 1075.48,224.738 1076.05,224.004 1076.62,224.259 1077.19,225.803 1077.76,226.181 1078.33,228.361 1078.89,229.414 1079.46,230.583 1080.03,230.636 1080.6,233.904 1081.17,238.961 1081.74,239.205 1082.3,238.885 1082.87,238.092 1083.44,237.295 1084.01,236.957 1084.58,237.301 1085.15,237.709 1085.71,237.319 1086.28,237.642 1086.85,235.792 1087.42,233.197 1087.99,231.911 1088.56,229.588 1089.12,229.816 1089.69,227.733 1090.26,229.967 1090.83,230.276 1091.4,231.243 1091.97,231.4 1092.53,230.285 1093.1,228.52 1093.67,227.56 1094.24,227.831 1094.81,229.142 1095.38,229.335 1095.94,229.628 1096.51,227.595 1097.08,226.648 1097.65,226.954 1098.22,227.086 1098.79,227.334 1099.35,225.373 1099.92,227.708 1100.49,226.863 1101.06,226.235 1101.63,224.596 1102.2,222.958 1102.76,222.836 1103.33,224.445 1103.9,225.881 1104.47,227.072 1105.04,228.319 1105.61,226.445 1106.17,226.757 1106.74,230.25 1107.31,232.306 1107.88,232.292 1108.45,231.914 1109.02,231.89 1109.58,231.978 1110.15,234.055 1110.72,236.793 1111.29,236.142 1111.86,236.617 1112.43,236.294 1112.99,236.002 1113.56,236.325 1114.13,235.874 1114.7,235.524 1115.27,235.177 1115.84,234.703 1116.4,233.431 1116.97,231.107 1117.54,232.177 1118.11,232.015 1118.68,232.948 1119.25,231.758 1119.81,232.931 1120.38,230.73 1120.95,230.744 1121.52,228.531 1122.09,229.558 1122.66,229.748 1123.23,229.829 1123.79,229.686 1124.36,230.605 1124.93,232.6 1125.5,232.225 1126.07,230.949 1126.64,230.926 1127.2,232.894 1127.77,233.698 1128.34,232.412 1128.91,231.239 1129.48,229.972 1130.05,228.857 1130.61,229.849 1131.18,230.013 1131.75,227.878 1132.32,227.873 1132.89,226.961 1133.46,228.003 1134.02,228.804 1134.59,226.952 1135.16,226.251 1135.73,226.542 1136.3,229.78 1136.87,229.689 1137.43,228.64 1138,230.945 1138.57,228.723 1139.14,227.839 1139.71,225.949 1140.28,225.348 1140.84,227.729 1141.41,225.703 1141.98,225.875 1142.55,222.864 1143.12,222.411 1143.69,222.822 1144.25,225.451 1144.82,225.949 1145.39,226.214 1145.96,226.81 1146.53,228.281 1147.1,225.542 1147.66,228.926 1148.23,229.314 1148.8,230.314 1149.37,228.279 1149.94,227.378 1150.51,227.719 1151.07,225.667 1151.64,225.987 1152.21,229.315 1152.78,229.216 1153.35,230.503 1153.92,230.589 1154.48,230.854 1155.05,231.926 1155.62,231.663 1156.19,230.654 1156.76,231.773 1157.33,231.749 1157.89,231.677 1158.46,231.794 1159.03,230.761 1159.6,230.673 1160.17,231.643 1160.74,231.635 1161.3,231.487 1161.87,230.453 1162.44,228.328 1163.01,226.593 1163.58,227.028 1164.15,227.398 1164.71,227.752 1165.28,228.08 1165.85,227.228 1166.42,226.512 1166.99,228.786 1167.56,231.179 1168.12,231.298 1168.69,232.33 1169.26,231.091 1169.83,228.127 1170.4,230.542 1170.97,230.562 1171.53,232.061 1172.1,233.072 1172.67,232.989 1173.24,235.903 1173.81,235.54 1174.38,236.258 1174.94,236.042 1175.51,234.91 1176.08,235.66 1176.65,234.136 1177.22,232.908 1177.79,233.876 1178.35,232.599 1178.92,233.465 1179.49,232.231 1180.06,233.11 1180.63,231.861 1181.2,233.961 1181.76,232.488 1182.33,233.439 1182.9,233.191 1183.47,232.983 1184.04,232.784 1184.61,232.524 1185.17,233.338 1185.74,229.823 1186.31,229.894 1186.88,227.1 1187.45,230.533 1188.02,230.449 1188.58,230.263 1189.15,229.235 1189.72,229.341 1190.29,230.57 1190.86,231.444 1191.43,230.464 1192,231.373 1192.56,230.233 1193.13,229.064 1193.7,229.156 1194.27,228.973 1194.84,230.039 1195.41,229.102 1195.97,227.318 1196.54,228.399 1197.11,227.485 1197.68,228.627 1198.25,229.727 1198.82,228.814 1199.38,225.97 1199.95,224.249 1200.52,224.625 1201.09,223.89 1201.66,225.279 1202.23,226.684 1202.79,227.092 1203.36,226.32 1203.93,227.881 1204.5,225.835 1205.07,225.064 1205.64,225.577 1206.2,229.065 1206.77,228.983 1207.34,228.225 1207.91,225.333 1208.48,224.903 1209.05,223.347 1209.61,225.936 1210.18,226.359 1210.75,226.65 1211.32,227.886 1211.89,228.404 1212.46,232.703 1213.02,231.631 1213.59,229.681 1214.16,230.707 1214.73,231.683 1215.3,234.79 1215.87,236.517 1216.43,238.283 1217,237.74 1217.57,238.277 1218.14,237.809 1218.71,237.363 1219.28,235.759 1219.84,235.346 1220.41,235.153 1220.98,234.781 1221.55,233.508 1222.12,233.265 1222.69,233.119 1223.25,232.091 1223.82,236.161 1224.39,236.659 1224.96,237.036 1225.53,236.621 1226.1,236.061 1226.66,235.604 1227.23,234.272 1227.8,230.919 1228.37,231.786 1228.94,233.758 1229.51,233.314 1230.07,235.25 1230.64,234.854 1231.21,234.432 1231.78,233.856 1232.35,236.407 1232.92,236.77 1233.48,236.255 1234.05,233.747 1234.62,234.37 1235.19,235.996 1235.76,235.475 1236.33,234.843 1236.89,234.432 1237.46,232.112 1238.03,231.765 1238.6,231.372 1239.17,231.111 1239.74,228.847 1240.3,223.578 1240.87,221.632 1241.44,220.905 1242.01,221.327 1242.58,223.711 1243.15,223.042 1243.71,224.347 1244.28,224.727 1244.85,227.167 1245.42,227.248 1245.99,227.559 1246.56,227.56 1247.12,227.736 1247.69,227.695 1248.26,228.845 1248.83,228.792 1249.4,229.635 1249.97,229.458 1250.53,228.449 1251.1,228.462 1251.67,227.509 1252.24,228.715 1252.81,228.917 1253.38,229.884 1253.94,231.763 1254.51,232.695 1255.08,231.448 1255.65,231.064 1256.22,229.957 1256.79,228.832 1257.35,230.874 1257.92,233.703 1258.49,234.526 1259.06,235.09 1259.63,235.604 1260.2,234.264 1260.76,235.102 1261.33,236.812 1261.9,236.116 1262.47,236.675 1263.04,236.064 1263.61,234.589 1264.18,233.313 1264.74,232.917 1265.31,231.608 1265.88,230.281 1266.45,230.082 1267.02,227.912 1267.59,228.833 1268.15,229.038 1268.72,229.04 1269.29,228.013 1269.86,226.861 1270.43,225.966 1271,225.136 1271.56,227.503 1272.13,227.378 1272.7,225.429 1273.27,225.643 1273.84,225.76 1274.41,226.096 1274.97,228.396 1275.54,230.465 1276.11,232.468 1276.68,232.352 1277.25,233.252 1277.82,233.9 1278.38,232.656 1278.95,232.52 1279.52,233.621 1280.09,231.381 1280.66,231.045 1281.23,230.874 1281.79,229.831 1282.36,229.727 1282.93,230.488 1283.5,231.156 1284.07,230.991 1284.64,232.068 1285.2,230.603 1285.77,231.563 1286.34,232.428 1286.91,233.39 1287.48,234.289 1288.05,233.853 1288.61,233.205 1289.18,233.008 1289.75,234.671 1290.32,234.294 1290.89,234.928 1291.46,235.557 1292.02,236.049 1292.59,234.726 1293.16,231.124 1293.73,231.876 1294.3,231.67 1294.87,229.392 1295.43,230.505 1296,227.255 1296.57,227.268 1297.14,223.132 1297.71,223.515 1298.28,226.022 1298.84,224.189 1299.41,225.564 1299.98,226.694 1300.55,226.658 1301.12,226.666 1301.69,226.83 1302.25,227.009 1302.82,226.938 1303.39,228.21 1303.96,225.191 1304.53,223.587 1305.1,221.775 1305.66,223.314 1306.23,222.622 1306.8,223.214 1307.37,221.671 1307.94,222.284 1308.51,223.76 1309.07,223.977 1309.64,224.489 1310.21,223.865 1310.78,224.327 1311.35,224.858 1311.92,225.264 1312.48,227.686 1313.05,227.043 1313.62,224.28 1314.19,225.838 1314.76,226.059 1315.33,227.325 1315.89,226.581 1316.46,227.846 1317.03,228.19 1317.6,231.452 1318.17,229.386 1318.74,225.534 1319.3,224.797 1319.87,225.247 1320.44,227.833 1321.01,227.96 1321.58,226.049 1322.15,224.51 1322.71,227.108 1323.28,231.4 1323.85,231.329 1324.42,231.442 1324.99,231.324 1325.56,231.249 1326.12,231.359 1326.69,231.55 1327.26,229.898 1327.83,228.837 1328.4,227.064 1328.97,228.482 1329.53,228.738 1330.1,228.089 1330.67,229.299 1331.24,230.721 1331.81,227.584 1332.38,227.897 1332.94,228.014 1333.51,228.366 1334.08,230.647 1334.65,232.716 1335.22,232.543 1335.79,232.417 1336.36,232.305 1336.92,233.18 1337.49,229.703 1338.06,229.836 1338.63,229.989 1339.2,232.355 1339.77,231.383 1340.33,230.236 1340.9,228.35 1341.47,228.858 1342.04,229.887 1342.61,231.106 1343.18,231.163 1343.74,230.234 1344.31,230.441 1344.88,230.524 1345.45,229.75 1346.02,229.983 1346.59,229.04 1347.15,229.174 1347.72,230.322 1348.29,231.248 1348.86,232.136 1349.43,235.024 1350,232.708 1350.56,231.582 1351.13,231.763 1351.7,231.679 1352.27,232.919 1352.84,232.763 1353.41,232.365 1353.97,233.355 1354.54,235.146 1355.11,237.012 1355.68,237.459 1356.25,237.014 1356.82,236.545 1357.38,236.011 1357.95,236.722 1358.52,238.42 1359.09,238.673 1359.66,236.861 1360.23,236.541 1360.79,236.144 1361.36,235.653 1361.93,235.258 1362.5,233.756 1363.07,231.525 1363.64,230.35 1364.2,231.347 1364.77,231.499 1365.34,232.306 1365.91,230.856 1366.48,227.638 1367.05,228.878 1367.61,230.099 1368.18,227.991 1368.75,228.067 1369.32,227.115 1369.89,229.279 1370.46,231.185 1371.02,231.254 1371.59,231.056 1372.16,230.634 1372.73,228.391 1373.3,226.645 1373.87,228.802 1374.43,227.898 1375,227.965 1375.57,226.918 1376.14,227.968 1376.71,226.063 1377.28,226.516 1377.84,227.764 1378.41,225.954 1378.98,227.462 1379.55,227.74 1380.12,228.061 1380.69,227.11 1381.25,227.226 1381.82,222.215 1382.39,221.854 1382.96,221.505 1383.53,223.353 1384.1,223.864 1384.66,224.349 1385.23,225.631 1385.8,228.893 1386.37,229.073 1386.94,227.144 1387.51,226.436 1388.07,226.959 1388.64,228.301 1389.21,227.367 1389.78,227.564 1390.35,229.789 1390.92,229.779 1391.48,231.872 1392.05,230.723 1392.62,231.72 1393.19,230.662 1393.76,229.491 1394.33,231.749 1394.89,229.625 1395.46,230.944 1396.03,229.979 1396.6,231.305 1397.17,232.453 1397.74,234.491 1398.3,233.38 1398.87,235.268 1399.44,235.845 1400.01,233.526 1400.58,232.345 1401.15,234.398 1401.71,233.066 1402.28,230.898 1402.85,230.859 1403.42,230.88 1403.99,231.01 1404.56,230.835 1405.13,230.055 1405.69,229.079 1406.26,228.063 1406.83,230.194 1407.4,229.328 1407.97,230.588 1408.54,228.725 1409.1,230.679 1409.67,230.634 1410.24,229.578 1410.81,227.786 1411.38,227.812 1411.95,228.939 1412.51,228.866 1413.08,233.999 1413.65,233.705 1414.22,229.226 1414.79,232.373 1415.36,234.425 1415.92,233.092 1416.49,235.877 1417.06,232.35 1417.63,232.099 1418.2,229.814 1418.77,229.899 1419.33,229.958 1419.9,229.824 1420.47,228.769 1421.04,228.924 1421.61,226.855 1422.18,227.275 1422.74,228.632 1423.31,227.509 1423.88,227.517 1424.45,228.685 1425.02,230.885 1425.59,229.781 1426.15,228.809 1426.72,229.877 1427.29,231.036 1427.86,229.956 1428.43,229.836 1429,227.841 1429.56,226.942 1430.13,226.079 1430.7,227.423 1431.27,226.558 1431.84,227.884 1432.41,227.945 1432.97,228.282 1433.54,230.584 1434.11,230.633 1434.68,230.643 1435.25,233.6 1435.82,233.329 1436.38,234.019 1436.95,233.796 1437.52,235.687 1438.09,235.423 1438.66,234.108 1439.23,235.817 1439.79,236.508 1440.36,233.79 1440.93,233.565 1441.5,234.258 1442.07,232.962 1442.64,233.02 1443.2,232.901 1443.77,234.566 1444.34,236.165 1444.91,235.634 1445.48,235.024 1446.05,234.385 1446.61,233.141 1447.18,235.026 1447.75,233.599 1448.32,232.009 1448.89,230.44 1449.46,231.477 1450.02,231.193 1450.59,235.199 1451.16,234.616 1451.73,235.069 1452.3,235.444 1452.87,235.115 1453.43,234.474 1454,234.226 1454.57,232.884 1455.14,234.282 1455.71,234.894 1456.28,234.417 1456.84,234.225 1457.41,234.864 1457.98,236.446 1458.55,233.761 1459.12,231.135 1459.69,230.051 1460.25,228.851 1460.82,226.696 1461.39,228.706 1461.96,229.861 1462.53,229.792 1463.1,228.685 1463.66,228.584 1464.23,227.692 1464.8,227.027 1465.37,225.975 1465.94,227.244 1466.51,226.503 1467.07,224.57 1467.64,223.967 1468.21,225.096 1468.78,225.2 1469.35,225.439 1469.92,226.72 1470.48,225.732 1471.05,227.132 1471.62,230.404 1472.19,231.265 1472.76,230.805 1473.33,230.646 1473.89,229.583 1474.46,228.276 1475.03,226.25 1475.6,226.254 1476.17,224.516 1476.74,225.894 1477.31,227.24 1477.87,227.586 1478.44,224.636 1479.01,225.946 1479.58,227.396 1480.15,228.515 1480.72,228.509 1481.28,225.611 1481.85,226.861 1482.42,225.939 1482.99,226.98 1483.56,228.063 1484.13,225.109 1484.69,225.323 1485.26,225.739 1485.83,228.234 1486.4,227.197 1486.97,226.301 1487.54,226.592 1488.1,226.015 1488.67,227.403 1489.24,225.666 1489.81,227.187 1490.38,227.446 1490.95,226.562 1491.51,224.805 1492.08,224.362 1492.65,226.909 1493.22,226.059 1493.79,227.604 1494.36,229.851 1494.92,231.942 1495.49,233.896 1496.06,233.719 1496.63,233.337 1497.2,232.899 1497.77,232.805 1498.33,229.541 1498.9,229.665 1499.47,227.294 1500.04,227.803 1500.61,227.97 1501.18,230.288 1501.74,230.593 1502.31,229.503 1502.88,225.432 1503.45,225.875 1504.02,226.159 1504.59,225.345 1505.15,225.808 1505.72,226.116 1506.29,225.398 1506.86,226.678 1507.43,230.035 1508,231.299 1508.56,233.105 1509.13,231.03 1509.7,230.094 1510.27,228.059 1510.84,228.265 1511.41,228.474 1511.97,229.62 1512.54,228.557 1513.11,226.668 1513.68,227.028 1514.25,226.563 1514.82,226.928 1515.38,226.485 1515.95,226.886 1516.52,226.404 1517.09,223.826 1517.66,223.285 1518.23,223.937 1518.79,228.479 1519.36,229.887 1519.93,230.245 1520.5,229.514 1521.07,232.568 1521.64,235.742 1522.2,234.59 1522.77,233.401 1523.34,232.192 1523.91,233.276 1524.48,232.057 1525.05,231.036 1525.61,231.143 1526.18,232.025 1526.75,230.962 1527.32,231.941 1527.89,236.265 1528.46,236.833 1529.02,237.25 1529.59,236.809 1530.16,239.494 1530.73,236.734 1531.3,236.059 1531.87,234.536 1532.43,234.211 1533,232.119 1533.57,233.286 1534.14,235.106 1534.71,234.621 1535.28,234.339 1535.84,234.121 1536.41,234.015 1536.98,234.712 1537.55,234.469 1538.12,235.176 1538.69,232.611 1539.25,231.392 1539.82,232.13 1540.39,231.878 1540.96,231.773 1541.53,231.864 1542.1,231.655 1542.66,231.477 1543.23,229.509 1543.8,229.319 1544.37,227.345 1544.94,227.556 1545.51,227.658 1546.08,228.709 1546.64,227.738 1547.21,230.98 1547.78,230.747 1548.35,231.749 1548.92,232.746 1549.49,232.644 1550.05,231.488 1550.62,231.5 1551.19,233.567 1551.76,232.222 1552.33,233.159 1552.9,231.979 1553.46,230.641 1554.03,226.464 1554.6,225.522 1555.17,224.797 1555.74,224.994 1556.31,228.365 1556.87,227.337 1557.44,227.46 1558.01,227.681 1558.58,227.949 1559.15,227.037 1559.72,227.296 1560.28,227.437 1560.85,228.57 1561.42,228.736 1561.99,229.843 1562.56,230.038 1563.13,230.031 1563.69,228.941 1564.26,228.254 1564.83,230.583 1565.4,227.705 1565.97,228.139 1566.54,228.29 1567.1,228.605 1567.67,227.837 1568.24,226.893 1568.81,227.117 1569.38,225.338 1569.95,227.622 1570.51,227.634 1571.08,230.08 1571.65,230.043 1572.22,230.012 1572.79,229.883 1573.36,230.923 1573.92,231.924 1574.49,230.78 1575.06,231.766 1575.63,231.586 1576.2,230.716 1576.77,231.834 1577.33,230.859 1577.9,229.824 1578.47,229.781 1579.04,229.056 1579.61,228.143 1580.18,226.321 1580.74,225.641 1581.31,223.982 1581.88,223.474 1582.45,223.36 1583.02,221.993 1583.59,222.8 1584.15,226.564 1584.72,226.571 1585.29,225.828 1585.86,225.171 1586.43,225.668 1587,225.092 1587.56,224.825 1588.13,222.194 1588.7,223.845 1589.27,224.593 1589.84,225.084 1590.41,227.831 1590.97,229.227 1591.54,230.673 1592.11,231.765 1592.68,232.856 1593.25,231.902 1593.82,232.733 1594.38,234.628 1594.95,233.281 1595.52,233.454 1596.09,233.233 1596.66,231.126 1597.23,230.485 1597.79,232.745 1598.36,231.63 1598.93,231.573 1599.5,230.713 1600.07,231.712 1600.64,232.781 1601.2,232.799 1601.77,232.69 1602.34,233.619 1602.91,233.656 1603.48,232.586 1604.05,233.561 1604.61,233.343 1605.18,234.409 1605.75,235.194 1606.32,236.807 1606.89,235.311 1607.46,233.764 1608.02,236.807 1608.59,235.403 1609.16,236.245 1609.73,231.77 1610.3,231.393 1610.87,228.289 1611.43,226.605 1612,224.768 1612.57,225.187 1613.14,224.801 1613.71,224.579 1614.28,223.152 1614.84,222.713 1615.41,224.531 1615.98,226.119 1616.55,226.568 1617.12,227.003 1617.69,226.309 1618.26,225.532 1618.82,224.781 1619.39,228.316 1619.96,230.738 1620.53,233.846 1621.1,234.605 1621.67,231.231 1622.23,231.307 1622.8,232.556 1623.37,230.441 1623.94,231.501 1624.51,232.725 1625.08,233.666 1625.64,235.847 1626.21,236.651 1626.78,236.561 1627.35,233.262 1627.92,234.251 1628.49,232.62 1629.05,233.621 1629.62,237.451 1630.19,237.832 1630.76,237.088 1631.33,236.622 1631.9,236.078 1632.46,235.566 1633.03,234.313 1633.6,235.015 1634.17,234.792 1634.74,234.453 1635.31,234.174 1635.87,235.997 1636.44,234.378 1637.01,232.834 1637.58,232.577 1638.15,232.275 1638.72,231.109 1639.28,232.192 1639.85,233.093 1640.42,234.971 1640.99,233.806 1641.56,231.378 1642.13,233.357 1642.69,235.297 1643.26,236.771 1643.83,237.117 1644.4,237.569 1644.97,235.938 1645.54,236.402 1646.1,234.735 1646.67,233.364 1647.24,233.108 1647.81,234.767 1648.38,235.486 1648.95,237.272 1649.51,236.636 1650.08,236.993 1650.65,237.044 1651.22,238.489 1651.79,238.763 1652.36,238.668 1652.92,237.744 1653.49,237.048 1654.06,235.431 1654.63,236.97 1655.2,238.239 1655.77,237.429 1656.33,236.599 1656.9,236.686 1657.47,236.986 1658.04,238.141 1658.61,237.201 1659.18,236.315 1659.74,235.521 1660.31,231.598 1660.88,230.32 1661.45,229.891 1662.02,229.543 1662.59,228.354 1663.15,228.121 1663.72,227.027 1664.29,225.086 1664.86,225.198 1665.43,225.312 1666,225.414 1666.56,224.458 1667.13,224.541 1667.7,223.574 1668.27,224.878 1668.84,226.094 1669.41,225.074 1669.97,225.224 1670.54,226.565 1671.11,226.288 1671.68,227.406 1672.25,227.659 1672.82,224.275 1673.38,225.492 1673.95,226.547 1674.52,227.606 1675.09,224.511 1675.66,225.728 1676.23,225.746 1676.79,227.057 1677.36,228.239 1677.93,227.215 1678.5,227.365 1679.07,227.33 1679.64,227.247 1680.2,227.294 1680.77,227.325 1681.34,224.328 1681.91,222.541 1682.48,220.781 1683.05,220.231 1683.61,221.92 1684.18,223.402 1684.75,222.744 1685.32,221.942 1685.89,221.409 1686.46,223.072 1687.02,223.69 1687.59,226.18 1688.16,224.387 1688.73,223.792 1689.3,222.295 1689.87,222.016 1690.44,224.782 1691,226.241 1691.57,225.487 1692.14,225.737 1692.71,225.976 1693.28,229.203 1693.85,229.247 1694.41,228.381 1694.98,230.661 1695.55,229.624 1696.12,233.872 1696.69,234.659 1697.26,231.298 1697.82,230.188 1698.39,231.217 1698.96,227.122 1699.53,227.446 1700.1,226.585 1700.67,226.907 1701.23,227.263 1701.8,226.418 1702.37,227.667 1702.94,227.721 1703.51,228.171 1704.08,230.338 1704.64,230.313 1705.21,230.126 1705.78,229.238 1706.35,228.402 1706.92,227.178 1707.49,227.379 1708.05,228.585 1708.62,229.752 1709.19,229.965 1709.76,230.985 1710.33,232.991 1710.9,232.745 1711.46,234.708 1712.03,236.779 1712.6,238.583 1713.17,240.045 1713.74,239.432 1714.31,237.78 1714.87,236.311 1715.44,235.756 1716.01,236.335 1716.58,233.015 1717.15,232.792 1717.72,232.506 1718.28,229.298 1718.85,231.502 1719.42,230.422 1719.99,231.225 1720.56,229.083 1721.13,230.35 1721.69,231.421 1722.26,234.409 1722.83,234.019 1723.4,232.578 1723.97,234.241 1724.54,233.862 1725.1,232.332 1725.67,231.933 1726.24,233.738 1726.81,233.175 1727.38,231.897 1727.95,230.611 1728.51,230.558 1729.08,230.522 1729.65,229.542 1730.22,226.573 1730.79,226.644 1731.36,226.809 1731.92,228.879 1732.49,229.853 1733.06,228.846 1733.63,229.069 1734.2,229.151 1734.77,228.913 1735.33,227.979 1735.9,229.328 1736.47,227.27 1737.04,226.434 1737.61,227.646 1738.18,228.699 1738.74,228.972 1739.31,229.216 1739.88,229.301 1740.45,230.268 1741.02,231.36 1741.59,233.436 1742.15,232.042 1742.72,235.064 1743.29,234.677 1743.86,232.297 1744.43,232.967 1745,233.086 1745.56,232.795 1746.13,234.766 1746.7,236.563 1747.27,234.01 1747.84,235.783 1748.41,232.234 1748.97,232.261 1749.54,233.055 1750.11,233.904 1750.68,234.282 1751.25,233.927 1751.82,233.294 1752.38,232.908 1752.95,229.701 1753.52,228.596 1754.09,228.649 1754.66,229.65 1755.23,230.228 1755.79,229.972 1756.36,229.939 1756.93,228.706 1757.5,224.496 1758.07,224.949 1758.64,225.064 1759.21,225.316 1759.77,224.558 1760.34,225.628 1760.91,227.081 1761.48,228.274 1762.05,228.244 1762.62,229.483 1763.18,232.51 1763.75,230.118 1764.32,229.124 1764.89,228.078 1765.46,227.179 1766.03,226.341 1766.59,226.778 1767.16,226.991 1767.73,223.199 1768.3,223.783 1768.87,225.122 1769.44,226.526 1770,226.572 1770.57,226.812 1771.14,225.879 1771.71,226.381 1772.28,227.939 1772.85,228.092 1773.41,227.151 1773.98,228.605 1774.55,228.755 1775.12,234.043 1775.69,231.531 1776.26,232.567 1776.82,232.516 1777.39,231.094 1777.96,234.03 1778.53,232.707 1779.1,234.49 1779.67,234.925 1780.23,235.758 1780.8,233.339 1781.37,232.05 1781.94,228.824 1782.51,228.911 1783.08,229.012 1783.64,231.075 1784.21,230.938 1784.78,230.937 1785.35,230.945 1785.92,231.188 1786.49,233.127 1787.05,233.939 1787.62,233.622 1788.19,236.454 1788.76,235.891 1789.33,236.112 1789.9,234.32 1790.46,233.866 1791.03,234.425 1791.6,234.856 1792.17,233.572 1792.74,232.024 1793.31,231.834 1793.87,231.555 1794.44,231.438 1795.01,231.194 1795.58,230.839 1796.15,227.728 1796.72,228.863 1797.28,225.854 1797.85,227.151 1798.42,229.147 1798.99,229.037 1799.56,229.123 1800.13,230.374 1800.69,230.554 1801.26,230.284 1801.83,228.246 1802.4,228.266 1802.97,227.336 1803.54,228.478 1804.1,227.581 1804.67,226.582 1805.24,226.642 1805.81,226.831 1806.38,228.01 1806.95,229.002 1807.51,229.046 1808.08,226.979 1808.65,226.998 1809.22,225.953 1809.79,223.966 1810.36,223.417 1810.92,222.805 1811.49,223.367 1812.06,224.93 1812.63,224.292 1813.2,224.798 1813.77,224.875 1814.33,226.03 1814.9,226.321 1815.47,225.708 1816.04,226.061 1816.61,226.417 1817.18,226.733 1817.74,226.134 1818.31,226.714 1818.88,228.09 1819.45,229.129 1820.02,228.268 1820.59,228.598 1821.15,230.834 1821.72,230.848 1822.29,231.912 1822.86,231.885 1823.43,230.618 1824,232.818 1824.56,232.73 1825.13,234.985 1825.7,234.629 1826.27,234.244 1826.84,234.804 1827.41,235.467 1827.97,235.028 1828.54,232.679 1829.11,232.516 1829.68,232.502 1830.25,232.095 1830.82,230.836 1831.39,229.62 1831.95,229.847 1832.52,229.899 1833.09,228.856 1833.66,229.767 1834.23,229.911 1834.8,229.173 1835.36,228.118 1835.93,227.06 1836.5,226.235 1837.07,227.504 1837.64,228.851 1838.21,229.941 1838.77,228.978 1839.34,227.883 1839.91,225.987 1840.48,225.233 1841.05,223.469 1841.62,225.974 1842.18,225.242 1842.75,224.552 1843.32,224.8 1843.89,226.036 1844.46,227.439 1845.03,226.657 1845.59,227.874 1846.16,227.967 1846.73,233.473 1847.3,231.314 1847.87,232.222 1848.44,232.088 1849,231.19 1849.57,231.97 1850.14,228.836 1850.71,228.796 1851.28,228.92 1851.85,230.144 1852.41,230.997 1852.98,229.903 1853.55,232.058 1854.12,232.971 1854.69,232.486 1855.26,232.17 1855.82,230.868 1856.39,230.929 1856.96,230.861 1857.53,227.812 1858.1,226.994 1858.67,226.205 1859.23,228.583 1859.8,229.939 1860.37,228.905 1860.94,230.136 1861.51,233.223 1862.08,233.963 1862.64,232.634 1863.21,232.396 1863.78,234.511 1864.35,234.114 1864.92,234.027 1865.49,233.955 1866.05,234.809 1866.62,234.358 1867.19,233.266 1867.76,234.018 1868.33,231.683 1868.9,230.599 1869.46,230.307 1870.03,231.159 1870.6,230.072 1871.17,229.086 1871.74,229.057 1872.31,229.034 1872.87,230.107 1873.44,228.078 1874.01,227.31 1874.58,228.668 1875.15,229.795 1875.72,232.056 1876.28,230.02 1876.85,230.834 1877.42,229.444 1877.99,229.457 1878.56,229.539 1879.13,229.626 1879.69,230.724 1880.26,229.825 1880.83,229.683 1881.4,228.798 1881.97,233.878 1882.54,235.749 1883.1,234.116 1883.67,232.583 1884.24,233.433 1884.81,232.15 1885.38,233.958 1885.95,231.733 1886.51,229.45 1887.08,229.545 1887.65,227.369 1888.22,227.558 1888.79,227.873 1889.36,229.236 1889.92,227.342 1890.49,227.216 1891.06,228.518 1891.63,228.721 1892.2,228.87 1892.77,229.045 1893.33,229.017 1893.9,228.997 1894.47,227.222 1895.04,227.598 1895.61,229.074 1896.18,229.121 1896.74,228.318 1897.31,229.616 1897.88,229.863 1898.45,231.887 1899.02,231.877 1899.59,229.648 1900.16,232.967 1900.72,231.63 1901.29,230.59 1901.86,230.651 1902.43,230.541 1903,230.636 1903.57,230.716 1904.13,228.708 1904.7,228.866 1905.27,229.204 1905.84,229.269 1906.41,229.429 1906.98,230.375 1907.54,231.459 1908.11,231.233 1908.68,231.303 1909.25,232.18 1909.82,232.084 1910.39,232.935 1910.95,233.794 1911.52,234.479 1912.09,232.089 1912.66,229.975 1913.23,229.021 1913.8,228.453 1914.36,228.488 1914.93,228.751 1915.5,226.976 1916.07,227.284 1916.64,226.259 1917.21,226.534 1917.77,224.971 1918.34,224.396 1918.91,224.863 1919.48,226.176 1920.05,226.399 1920.62,229.74 1921.18,230.517 1921.75,231.509 1922.32,231.507 1922.89,231.337 1923.46,231.37 1924.03,230.137 1924.59,229.157 1925.16,228.281 1925.73,228.355 1926.3,228.662 1926.87,227.683 1927.44,227.935 1928,227.224 1928.57,227.611 1929.14,227.888 1929.71,227.057 1930.28,229.323 1930.85,228.417 1931.41,230.699 1931.98,232.505 1932.55,235.515 1933.12,233.157 1933.69,231.708 1934.26,232.398 1934.82,233.394 1935.39,233.159 1935.96,231.793 1936.53,230.546 1937.1,232.565 1937.67,231.465 1938.23,233.198 1938.8,232.002 1939.37,232.148 1939.94,229.826 1940.51,232.807 1941.08,230.71 1941.64,229.543 1942.21,229.43 1942.78,229.222 1943.35,228.274 1943.92,228.225 1944.49,229.608 1945.05,227.716 1945.62,228.974 1946.19,232.076 1946.76,234.046 1947.33,231.743 1947.9,231.528 1948.46,230.576 1949.03,229.432 1949.6,230.432 1950.17,228.376 1950.74,225.441 1951.31,224.652 1951.87,227.345 1952.44,231.634 1953.01,231.465 1953.58,230.074 1954.15,227.025 1954.72,228.069 1955.28,229.366 1955.85,226.352 1956.42,226.559 1956.99,226.816 1957.56,226.136 1958.13,226.525 1958.69,228.732 1959.26,228.986 1959.83,229.213 1960.4,229.261 1960.97,230.401 1961.54,229.452 1962.1,228.544 1962.67,229.669 1963.24,229.722 1963.81,229.932 1964.38,231.142 1964.95,231.226 1965.51,232.335 1966.08,231.305 1966.65,231.095 1967.22,230.845 1967.79,230.024 1968.36,230.212 1968.92,229.18 1969.49,231.354 1970.06,230.289 1970.63,230.362 1971.2,229.462 1971.77,232.734 1972.34,233.381 1972.9,231.244 1973.47,230.042 1974.04,232.334 1974.61,233.328 1975.18,232.121 1975.75,231.03 1976.31,228.153 1976.88,228.323 1977.45,231.546 1978.02,232.385 1978.59,230.023 1979.16,231.197 1979.72,232.037 1980.29,231.036 1980.86,228.945 1981.43,230.082 1982,230.049 1982.57,229.95 1983.13,231.99 1983.7,232.935 1984.27,231.724 1984.84,230.704 1985.41,229.792 1985.98,230.932 1986.54,232.743 1987.11,232.803 1987.68,230.518 1988.25,231.713 1988.82,232.456 1989.39,233.282 1989.95,232.934 1990.52,229.55 1991.09,230.833 1991.66,233.998 1992.23,233.756 1992.8,233.388 1993.36,233.1 1993.93,231.641 1994.5,233.658 1995.07,232.514 1995.64,231.277 1996.21,233.061 1996.77,234.834 1997.34,233.448 1997.91,233.443 1998.48,233.233 1999.05,234.029 1999.62,235.84 2000.18,235.371 2000.75,236.347 2001.32,235.048 2001.89,235.688 2002.46,235.307 2003.03,235.694 2003.59,235.134 2004.16,233.605 2004.73,233.176 2005.3,231.833 2005.87,232.577 2006.44,232.411 2007,237.071 2007.57,236.512 2008.14,235.917 2008.71,236.441 2009.28,236.696 2009.85,235.934 2010.41,236.255 2010.98,236.748 2011.55,234.001 2012.12,232.436 2012.69,233.279 2013.26,232.879 2013.82,231.388 2014.39,231.037 2014.96,229.575 2015.53,229.479 2016.1,228.37 2016.67,228.42 2017.23,229.3 2017.8,225.468 2018.37,227.53 2018.94,230.311 2019.51,226.829 2020.08,227.86 2020.64,226.701 2021.21,221.741 2021.78,223.176 2022.35,224.699 2022.92,223.021 2023.49,222.293 2024.05,221.655 2024.62,219.895 2025.19,220.513 2025.76,222.093 2026.33,223.689 2026.9,220.009 2027.46,222.742 2028.03,224.255 2028.6,226.784 2029.17,225.058 2029.74,223.146 2030.31,225.364 2030.87,226.911 2031.44,226.078 2032.01,225.311 2032.58,224.32 2033.15,224.513 2033.72,226.862 2034.28,227.177 2034.85,228.384 2035.42,228.531 2035.99,229.765 2036.56,229.669 2037.13,229.518 2037.69,229.622 2038.26,228.43 2038.83,227.532 2039.4,227.639 2039.97,227.539 2040.54,226.612 2041.11,228.084 2041.67,228.358 2042.24,228.546 2042.81,229.448 2043.38,227.615 2043.95,226.012 2044.52,224.418 2045.08,223.778 2045.65,223.267 2046.22,223.859 2046.79,223.282 2047.36,222.767 2047.93,224.562 2048.49,224.022 2049.06,223.321 2049.63,224.015 2050.2,223.692 2050.77,223.216 2051.34,222.747 2051.9,223.455 2052.47,224.239 2053.04,225.968 2053.61,228.644 2054.18,229.997 2054.75,230.319 2055.31,226.417 2055.88,226.862 2056.45,229.54 2057.02,230.899 2057.59,231.948 2058.16,231.777 2058.72,232.064 2059.29,232.993 2059.86,231.878 2060.43,234.994 2061,233.942 2061.57,233.886 2062.13,233.741 2062.7,231.61 2063.27,231.64 2063.84,231.46 2064.41,229.457 2064.98,229.652 2065.54,229.739 2066.11,229.724 2066.68,230.924 2067.25,228.936 2067.82,228.927 2068.39,229.288 2068.95,230.46 2069.52,229.518 2070.09,230.74 2070.66,235.153 2071.23,235.787 2071.8,235.3 2072.36,237.846 2072.93,238.41 2073.5,234.591 2074.07,231.031 2074.64,231.073 2075.21,235.021 2075.77,235.746 2076.34,233.598 2076.91,232.425 2077.48,233.328 2078.05,230.224 2078.62,232.146 2079.18,232.947 2079.75,232.715 2080.32,232.517 2080.89,233.302 2081.46,235.149 2082.03,233.668 2082.59,233.287 2083.16,231.957 2083.73,230.753 2084.3,229.876 2084.87,229.148 2085.44,229.377 2086,229.615 2086.57,228.762 2087.14,228.597 2087.71,225.742 2088.28,226.841 2088.85,228.006 2089.41,229.234 2089.98,230.011 2090.55,231.936 2091.12,230.774 2091.69,230.652 2092.26,227.603 2092.82,227.88 2093.39,228.104 2093.96,228.218 2094.53,228.429 2095.1,228.468 2095.67,228.693 2096.23,226.848 2096.8,227.259 2097.37,227.541 2097.94,225.485 2098.51,227.813 2099.08,229.269 2099.64,228.191 2100.21,228.455 2100.78,227.84 2101.35,228.117 2101.92,227.308 2102.49,226.737 2103.05,229.255 2103.62,228.433 2104.19,228.644 2104.76,227.754 2105.33,227.138 2105.9,227.54 2106.46,227.787 2107.03,225.817 2107.6,225.033 2108.17,225.641 2108.74,228.335 2109.31,232.851 2109.87,235.793 2110.44,234.56 2111.01,235.447 2111.58,236.154 2112.15,235.931 2112.72,233.614 2113.29,231.31 2113.85,232.075 2114.42,230.898 2114.99,232.818 2115.56,230.909 2116.13,229.942 2116.7,228.064 2117.26,227.324 2117.83,226.561 2118.4,227.946 2118.97,230.032 2119.54,231.168 2120.11,230.361 2120.67,230.402 2121.24,230.445 2121.81,230.563 2122.38,230.71 2122.95,231.762 2123.52,231.629 2124.08,232.682 2124.65,233.811 2125.22,233.541 2125.79,232.527 2126.36,231.501 2126.93,231.525 2127.49,231.305 2128.06,230.043 2128.63,229.112 2129.2,229.081 2129.77,229.195 2130.34,229.309 2130.9,230.519 2131.47,232.571 2132.04,232.44 2132.61,232.357 2133.18,231.116 2133.75,231.239 2134.31,232.12 2134.88,232.862 2135.45,232.601 2136.02,232.5 2136.59,233.217 2137.16,233.849 2137.72,234.541 2138.29,234.132 2138.86,234.761 2139.43,234.388 2140,234.042 2140.57,230.594 2141.13,230.703 2141.7,228.513 2142.27,228.562 2142.84,226.548 2143.41,224.982 2143.98,226.347 2144.54,226.529 2145.11,228.698 2145.68,229.828 2146.25,230.862 2146.82,234.824 2147.39,235.66 2147.95,234.212 2148.52,233.923 2149.09,233.587 2149.66,236.318 2150.23,236.039 2150.8,235.598 2151.36,236.358 2151.93,234.803 2152.5,234.435 2153.07,233.036 2153.64,233.078 2154.21,232.872 2154.77,234.56 2155.34,232.293 2155.91,232.877 2156.48,234.631 2157.05,235.511 2157.62,237.045 2158.18,235.467 2158.75,232.873 2159.32,232.377 2159.89,233.162 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.027\n  with uncertainty of ± 0.0024250061702493896\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01564 ± (0.00247587, 0.00248572) (MC)\n  95% confidence interval: [-4.02045, -4.01073] (MC)\n  linear error propagation: -4.01571 ± 0.00248828\n  |δ_y| = |0.00162269| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015641164350947, val_l = 0.004807828404358894, val_u = 0.004909918973353911)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.2 2211.02,1144.2 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,980.237 2211.02,980.237 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,816.273 2211.02,816.273 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,652.31 2211.02,652.31 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,488.346 2211.02,488.346 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,324.382 2211.02,324.382 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.2 365.751,1144.2 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,980.237 365.751,980.237 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,816.273 365.751,816.273 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,652.31 365.751,652.31 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,488.346 365.751,488.346 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,324.382 365.751,324.382 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M298.909 1130 Q295.298 1130 293.469 1133.56 Q291.664 1137.11 291.664 1144.24 Q291.664 1151.34 293.469 1154.91 Q295.298 1158.45 298.909 1158.45 Q302.543 1158.45 304.349 1154.91 Q306.177 1151.34 306.177 1144.24 Q306.177 1137.11 304.349 1133.56 Q302.543 1130 298.909 1130 M298.909 1126.3 Q304.719 1126.3 307.775 1130.9 Q310.853 1135.49 310.853 1144.24 Q310.853 1152.96 307.775 1157.57 Q304.719 1162.15 298.909 1162.15 Q293.099 1162.15 290.02 1157.57 Q286.964 1152.96 286.964 1144.24 Q286.964 1135.49 290.02 1130.9 Q293.099 1126.3 298.909 1126.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M259.557 993.582 L267.196 993.582 L267.196 967.217 L258.886 968.883 L258.886 964.624 L267.15 962.957 L271.826 962.957 L271.826 993.582 L279.465 993.582 L279.465 997.517 L259.557 997.517 L259.557 993.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 966.036 Q295.298 966.036 293.469 969.601 Q291.664 973.142 291.664 980.272 Q291.664 987.379 293.469 990.943 Q295.298 994.485 298.909 994.485 Q302.543 994.485 304.349 990.943 Q306.177 987.379 306.177 980.272 Q306.177 973.142 304.349 969.601 Q302.543 966.036 298.909 966.036 M298.909 962.332 Q304.719 962.332 307.775 966.939 Q310.853 971.522 310.853 980.272 Q310.853 988.999 307.775 993.605 Q304.719 998.189 298.909 998.189 Q293.099 998.189 290.02 993.605 Q286.964 988.999 286.964 980.272 Q286.964 971.522 290.02 966.939 Q293.099 962.332 298.909 962.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M262.775 829.618 L279.094 829.618 L279.094 833.553 L257.15 833.553 L257.15 829.618 Q259.812 826.864 264.395 822.234 Q269.002 817.581 270.182 816.239 Q272.428 813.716 273.307 811.979 Q274.21 810.22 274.21 808.53 Q274.21 805.776 272.266 804.04 Q270.344 802.304 267.242 802.304 Q265.043 802.304 262.59 803.067 Q260.159 803.831 257.381 805.382 L257.381 800.66 Q260.205 799.526 262.659 798.947 Q265.113 798.368 267.15 798.368 Q272.52 798.368 275.715 801.054 Q278.909 803.739 278.909 808.229 Q278.909 810.359 278.099 812.28 Q277.312 814.179 275.205 816.771 Q274.627 817.442 271.525 820.66 Q268.423 823.854 262.775 829.618 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 802.072 Q295.298 802.072 293.469 805.637 Q291.664 809.179 291.664 816.308 Q291.664 823.415 293.469 826.979 Q295.298 830.521 298.909 830.521 Q302.543 830.521 304.349 826.979 Q306.177 823.415 306.177 816.308 Q306.177 809.179 304.349 805.637 Q302.543 802.072 298.909 802.072 M298.909 798.368 Q304.719 798.368 307.775 802.975 Q310.853 807.558 310.853 816.308 Q310.853 825.035 307.775 829.641 Q304.719 834.225 298.909 834.225 Q293.099 834.225 290.02 829.641 Q286.964 825.035 286.964 816.308 Q286.964 807.558 290.02 802.975 Q293.099 798.368 298.909 798.368 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M272.914 650.955 Q276.27 651.673 278.145 653.941 Q280.043 656.21 280.043 659.543 Q280.043 664.659 276.525 667.46 Q273.006 670.261 266.525 670.261 Q264.349 670.261 262.034 669.821 Q259.742 669.404 257.289 668.548 L257.289 664.034 Q259.233 665.168 261.548 665.747 Q263.863 666.326 266.386 666.326 Q270.784 666.326 273.076 664.59 Q275.39 662.853 275.39 659.543 Q275.39 656.488 273.238 654.775 Q271.108 653.039 267.289 653.039 L263.261 653.039 L263.261 649.196 L267.474 649.196 Q270.923 649.196 272.752 647.83 Q274.58 646.442 274.58 643.849 Q274.58 641.187 272.682 639.775 Q270.807 638.34 267.289 638.34 Q265.367 638.34 263.168 638.756 Q260.969 639.173 258.33 640.053 L258.33 635.886 Q260.992 635.145 263.307 634.775 Q265.645 634.405 267.705 634.405 Q273.029 634.405 276.131 636.835 Q279.233 639.242 279.233 643.363 Q279.233 646.233 277.59 648.224 Q275.946 650.191 272.914 650.955 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 638.108 Q295.298 638.108 293.469 641.673 Q291.664 645.215 291.664 652.344 Q291.664 659.451 293.469 663.015 Q295.298 666.557 298.909 666.557 Q302.543 666.557 304.349 663.015 Q306.177 659.451 306.177 652.344 Q306.177 645.215 304.349 641.673 Q302.543 638.108 298.909 638.108 M298.909 634.405 Q304.719 634.405 307.775 639.011 Q310.853 643.594 310.853 652.344 Q310.853 661.071 307.775 665.678 Q304.719 670.261 298.909 670.261 Q293.099 670.261 290.02 665.678 Q286.964 661.071 286.964 652.344 Q286.964 643.594 290.02 639.011 Q293.099 634.405 298.909 634.405 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M271.594 475.14 L259.789 493.589 L271.594 493.589 L271.594 475.14 M270.367 471.066 L276.247 471.066 L276.247 493.589 L281.177 493.589 L281.177 497.478 L276.247 497.478 L276.247 505.626 L271.594 505.626 L271.594 497.478 L255.992 497.478 L255.992 492.964 L270.367 471.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 474.144 Q295.298 474.144 293.469 477.709 Q291.664 481.251 291.664 488.38 Q291.664 495.487 293.469 499.052 Q295.298 502.593 298.909 502.593 Q302.543 502.593 304.349 499.052 Q306.177 495.487 306.177 488.38 Q306.177 481.251 304.349 477.709 Q302.543 474.144 298.909 474.144 M298.909 470.441 Q304.719 470.441 307.775 475.047 Q310.853 479.63 310.853 488.38 Q310.853 497.107 307.775 501.714 Q304.719 506.297 298.909 506.297 Q293.099 506.297 290.02 501.714 Q286.964 497.107 286.964 488.38 Q286.964 479.63 290.02 475.047 Q293.099 470.441 298.909 470.441 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M258.793 307.102 L277.15 307.102 L277.15 311.037 L263.076 311.037 L263.076 319.509 Q264.094 319.162 265.113 319 Q266.131 318.815 267.15 318.815 Q272.937 318.815 276.316 321.986 Q279.696 325.157 279.696 330.574 Q279.696 336.152 276.224 339.254 Q272.752 342.333 266.432 342.333 Q264.256 342.333 261.988 341.963 Q259.742 341.592 257.335 340.852 L257.335 336.152 Q259.418 337.287 261.641 337.842 Q263.863 338.398 266.34 338.398 Q270.344 338.398 272.682 336.291 Q275.02 334.185 275.02 330.574 Q275.02 326.963 272.682 324.856 Q270.344 322.75 266.34 322.75 Q264.465 322.75 262.59 323.166 Q260.738 323.583 258.793 324.463 L258.793 307.102 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 310.18 Q295.298 310.18 293.469 313.745 Q291.664 317.287 291.664 324.416 Q291.664 331.523 293.469 335.088 Q295.298 338.629 298.909 338.629 Q302.543 338.629 304.349 335.088 Q306.177 331.523 306.177 324.416 Q306.177 317.287 304.349 313.745 Q302.543 310.18 298.909 310.18 M298.909 306.477 Q304.719 306.477 307.775 311.083 Q310.853 315.666 310.853 324.416 Q310.853 333.143 307.775 337.75 Q304.719 342.333 298.909 342.333 Q293.099 342.333 290.02 337.75 Q286.964 333.143 286.964 324.416 Q286.964 315.666 290.02 311.083 Q293.099 306.477 298.909 306.477 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1150.91 400.199,1035.44 400.786,925.288 401.372,826.233 401.958,733.469 402.545,757.961 403.131,673.371 403.718,596.106 404.304,529.032 404.891,469.784 405.477,414.257 406.063,446.648 406.65,399.143 407.236,356.502 407.823,316.91 408.409,281.653 408.995,311.636 409.582,338.2 410.168,310.387 410.755,285.019 411.341,309.856 411.927,291.721 412.514,274.323 413.1,259.787 413.687,247.729 414.273,237.363 414.86,229.242 415.446,224.035 416.032,219.895 416.619,296.273 417.205,293.797 417.792,292.702 418.378,313.946 418.964,334.747 419.551,336.39 420.137,374.73 420.724,377.731 421.31,382.658 421.896,388.049 422.483,408.164 423.069,413.778 423.656,456.793 424.242,462.864 424.829,469.245 425.415,497.599 426.001,514.839 426.588,521.501 427.174,555.515 427.761,571.152 428.347,578.687 428.933,592.85 429.52,614.855 430.106,621.45 430.693,648.36 431.279,660.717 431.865,679.491 432.452,684.929 433.038,702.253 433.625,713.808 434.211,724.73 434.798,746.037 435.384,755.635 435.97,770.567 436.557,784.745 437.143,789.274 437.73,798.238 438.316,811.787 438.902,816.109 439.489,821.204 440.075,838.201 440.662,843.572 441.248,852.377 441.835,861.039 442.421,873.566 443.007,881.887 443.594,900.257 444.18,904.787 444.767,918.833 445.353,932.703 445.939,939.999 446.526,950.101 447.112,954.282 447.699,958.508 448.285,968.051 448.871,974.783 449.458,978.987 450.044,990.768 450.631,994.263 451.217,1005.51 451.804,1011.46 452.39,1017.42 452.976,1025.51 453.563,1033.38 454.149,1043.62 454.736,1046.33 455.322,1048.81 455.908,1056.03 456.495,1060.97 457.081,1065.7 457.668,1070.6 458.254,1075.64 458.84,1082.49 459.427,1085.08 460.013,1091.81 460.6,1096.23 461.186,1104.36 461.773,1110.73 462.359,1117.04 462.945,1119.06 463.532,1124.87 464.118,1126.79 464.705,1128.64 465.291,1132.26 465.877,1135.93 466.464,1144.56 467.05,1148.18 467.637,1149.94 468.223,1153.37 468.809,1155.09 469.396,1156.57 469.982,1159.79 470.569,1161.23 471.155,1162.81 471.742,1164.57 472.328,1167.85 472.914,1170.66 473.501,1175.14 474.087,1176.5 474.674,1179.25 475.26,1183.28 475.846,1187.18 476.433,1192.49 477.019,1194.38 477.606,1193.35 478.192,1193.93 478.778,1197.74 479.365,1197.95 479.951,1198.32 480.538,1200.3 481.124,1200.84 481.711,1201.49 482.297,1201.57 482.883,1200.43 483.47,1202.78 484.056,1209.34 484.643,1212.55 485.229,1215.63 485.815,1218.63 486.402,1220.15 486.988,1218.59 487.575,1219.68 488.161,1220.85 488.748,1220.76 489.334,1220.66 489.92,1221.56 490.507,1221.19 491.093,1223.96 491.68,1226.69 492.266,1226.43 492.852,1225.96 493.439,1224.25 494.025,1225.62 494.612,1226.87 495.198,1226.87 495.784,1230.84 496.371,1232.02 496.957,1232.05 497.544,1234.67 498.13,1232.76 498.717,1233.6 499.303,1232.03 499.889,1231.84 500.476,1228.88 501.062,1232.93 501.649,1235.63 502.235,1233.9 502.821,1232.29 503.408,1230.55 503.994,1231.88 504.581,1233.45 505.167,1235.96 505.753,1237.32 506.34,1238.3 506.926,1238.09 507.513,1237.38 508.099,1242.53 508.686,1243.11 509.272,1240.94 509.858,1241.64 510.445,1240.82 511.031,1237.65 511.618,1238.45 512.204,1235.23 512.79,1239.16 513.377,1241.13 513.963,1240.72 514.55,1238.84 515.136,1238.33 515.722,1236.32 516.309,1236.12 516.895,1235.97 517.482,1239.49 518.068,1240.27 518.655,1239.77 519.241,1237.95 519.827,1239.17 520.414,1237.16 521,1238.18 521.587,1237.68 522.173,1237.18 522.759,1237.76 523.346,1238.34 523.932,1239.42 524.519,1242.94 525.105,1244.71 525.691,1243.86 526.278,1247.09 526.864,1248.81 527.451,1250.53 528.037,1248.25 528.624,1243.23 529.21,1239.69 529.796,1237.87 530.383,1241.73 530.969,1240.13 531.556,1239.42 532.142,1241.47 532.728,1240.74 533.315,1240.3 533.901,1238.61 534.488,1239.7 535.074,1239.19 535.661,1238.43 536.247,1238.08 536.833,1236.1 537.42,1236.9 538.006,1236.36 538.593,1236.17 539.179,1237.31 539.765,1236.58 540.352,1236.23 540.938,1235.53 541.525,1239.24 542.111,1238.79 542.697,1242.29 543.284,1243.02 543.87,1243.86 544.457,1241.99 545.043,1242.64 545.63,1240.38 546.216,1239.72 546.802,1241.55 547.389,1240.84 547.975,1237.41 548.562,1234.21 549.148,1232.56 549.734,1233.46 550.321,1233.36 550.907,1234.39 551.494,1233.81 552.08,1234.59 552.666,1234.27 553.253,1236.65 553.839,1236.37 554.426,1234.82 555.012,1237.15 555.599,1236.77 556.185,1241.63 556.771,1243.63 557.358,1245.48 557.944,1246.89 558.531,1248.09 559.117,1246.97 559.703,1248.44 560.29,1249.97 560.876,1249.02 561.463,1250.52 562.049,1247.59 562.635,1247.04 563.222,1244.41 563.808,1242.29 564.395,1241.3 564.981,1239.13 565.568,1239.86 566.154,1240.01 566.74,1238.12 567.327,1234.63 567.913,1234.45 568.5,1235.39 569.086,1235.81 569.672,1234.1 570.259,1231.09 570.845,1227.83 571.432,1228.81 572.018,1227.12 572.605,1228.32 573.191,1229.52 573.777,1226.41 574.364,1229.04 574.95,1227.3 575.537,1231.27 576.123,1229.26 576.709,1231.68 577.296,1231.32 577.882,1230.99 578.469,1229.2 579.055,1230.51 579.641,1230.26 580.228,1232.73 580.814,1232.33 581.401,1230.5 581.987,1232.75 582.574,1232.3 583.16,1231.82 583.746,1235.31 584.333,1234.7 584.919,1234.26 585.506,1233.67 586.092,1235.63 586.678,1233.57 587.265,1231.49 587.851,1232.17 588.438,1231.82 589.024,1229.77 589.61,1228.17 590.197,1229.29 590.783,1230.37 591.37,1231.28 591.956,1231.08 592.543,1229.08 593.129,1230.18 593.715,1231.03 594.302,1228.17 594.888,1228.04 595.475,1227.85 596.061,1227.59 596.647,1226.11 597.234,1226.07 597.82,1228.49 598.407,1229.35 598.993,1231.5 599.579,1230.84 600.166,1230.23 600.752,1227.16 601.339,1226.75 601.925,1224.96 602.512,1222.27 603.098,1220.9 603.684,1220.98 604.271,1219.68 604.857,1218.09 605.444,1216.96 606.03,1218.7 606.616,1217.71 607.203,1217.96 607.789,1218.25 608.376,1218.49 608.962,1221.26 609.548,1223.99 610.135,1223.77 610.721,1226.37 611.308,1227.35 611.894,1228.28 612.481,1231.98 613.067,1232.79 613.653,1232.01 614.24,1230.18 614.826,1229.41 615.413,1230.26 615.999,1229.81 616.585,1229.75 617.172,1230.81 617.758,1228.82 618.345,1227 618.931,1225.27 619.518,1226.2 620.104,1228.47 620.69,1226.51 621.277,1226.28 621.863,1224.63 622.45,1221.79 623.036,1223.15 623.622,1221.22 624.209,1221 624.795,1220.83 625.382,1223.47 625.968,1225.59 626.554,1226.64 627.141,1226.55 627.727,1224.82 628.314,1221.8 628.9,1220.25 629.487,1220.03 630.073,1218.43 630.659,1218.36 631.246,1219.75 631.832,1222.2 632.419,1221.92 633.005,1220.53 633.591,1217.87 634.178,1213.87 634.764,1216.72 635.351,1219.51 635.937,1218.17 636.523,1219.74 637.11,1222.24 637.696,1220.75 638.283,1224.58 638.869,1222.88 639.456,1226.42 640.042,1226.21 640.628,1227.39 641.215,1226.83 641.801,1227.83 642.388,1228.76 642.974,1229.6 643.56,1229.12 644.147,1224.62 644.733,1221.94 645.32,1221.57 645.906,1221.58 646.492,1221.48 647.079,1221.47 647.665,1219.9 648.252,1218.57 648.838,1218.63 649.425,1217.26 650.011,1217.44 650.597,1219 651.184,1217.82 651.77,1218.2 652.357,1221.07 652.943,1219.66 653.529,1220.7 654.116,1218.97 654.702,1220.26 655.289,1221.4 655.875,1217.25 656.462,1217.29 657.048,1215.89 657.634,1217.2 658.221,1219.9 658.807,1221.01 659.394,1222.08 659.98,1220.5 660.566,1220.29 661.153,1221.75 661.739,1221.59 662.326,1222.53 662.912,1223.7 663.498,1223.33 664.085,1224.28 664.671,1225.22 665.258,1227.42 665.844,1224.08 666.431,1226.27 667.017,1228.25 667.603,1224.83 668.19,1221.5 668.776,1219.94 669.363,1219.81 669.949,1221.34 670.535,1221.14 671.122,1217.04 671.708,1221.53 672.295,1221.27 672.881,1220.91 673.467,1221 674.054,1220.54 674.64,1220.45 675.227,1219.04 675.813,1218.94 676.4,1218.92 676.986,1217.35 677.572,1217.31 678.159,1218.95 678.745,1217.25 679.332,1215.88 679.918,1215.91 680.504,1215.93 681.091,1217.17 681.677,1218.29 682.264,1216.76 682.85,1216.68 683.436,1217.91 684.023,1218.88 684.609,1218.64 685.196,1219.78 685.782,1219.43 686.369,1219.21 686.955,1218.8 687.541,1216.21 688.128,1217.3 688.714,1217.22 689.301,1217.08 689.887,1215.56 690.473,1215.7 691.06,1215.67 691.646,1212.82 692.233,1215.86 692.819,1215.68 693.405,1218.55 693.992,1219.83 694.578,1219.82 695.165,1220.67 695.751,1216.43 696.338,1216.32 696.924,1216.19 697.51,1214.79 698.097,1214.64 698.683,1213.31 699.27,1213.49 699.856,1212.25 700.442,1212.39 701.029,1211.49 701.615,1210.56 702.202,1209.52 702.788,1207.08 703.375,1206.26 703.961,1210.9 704.547,1211.15 705.134,1210.22 705.72,1210.51 706.307,1210.67 706.893,1210.93 707.479,1211.04 708.066,1209.94 708.652,1210.4 709.239,1209.24 709.825,1209.68 710.411,1209.99 710.998,1210.17 711.584,1213.13 712.171,1213.36 712.757,1214.79 713.344,1216.15 713.93,1213.19 714.516,1212.11 715.103,1212.23 715.689,1212.48 716.276,1212.72 716.862,1214.12 717.448,1214.45 718.035,1214.32 718.621,1214.39 719.208,1214.38 719.794,1216.77 720.38,1216.85 720.967,1215.32 721.553,1218.25 722.14,1218 722.726,1216.6 723.313,1217.8 723.899,1216.07 724.485,1216.19 725.072,1214.75 725.658,1216.16 726.245,1217.61 726.831,1216.25 727.417,1218.7 728.004,1219.7 728.59,1217.89 729.177,1219.12 729.763,1217.48 730.349,1217.1 730.936,1216.96 731.522,1216.82 732.109,1215.67 732.695,1215.57 733.282,1216.8 733.868,1218.06 734.454,1218.11 735.041,1218.24 735.627,1219.44 736.214,1218.07 736.8,1217.79 737.386,1217.57 737.973,1221.1 738.559,1223.43 739.146,1221.52 739.732,1220.15 740.318,1219.76 740.905,1220.46 741.491,1221.46 742.078,1222.42 742.664,1221.74 743.251,1218.66 743.837,1216.83 744.423,1218.13 745.01,1216.55 745.596,1213.56 746.183,1212.35 746.769,1209.72 747.355,1208.81 747.942,1210.48 748.528,1209.38 749.115,1212.45 749.701,1214 750.288,1212.84 750.874,1213.96 751.46,1215.5 752.047,1215.61 752.633,1214.47 753.22,1218.78 753.806,1218.81 754.392,1218.84 754.979,1219.96 755.565,1220.72 756.152,1220.44 756.738,1223.82 757.324,1223.41 757.911,1224.4 758.497,1222.84 759.084,1221.19 759.67,1220.7 760.257,1219.34 760.843,1221.79 761.429,1223.01 762.016,1219.76 762.602,1223.2 763.189,1222.46 763.775,1219.19 764.361,1218.66 764.948,1217.47 765.534,1217.36 766.121,1219.72 766.707,1220.49 767.293,1218.66 767.88,1219.88 768.466,1219.7 769.053,1221.95 769.639,1217.52 770.226,1215.97 770.812,1215.83 771.398,1214.09 771.985,1211.3 772.571,1212.68 773.158,1212.91 773.744,1212.86 774.33,1214.39 774.917,1216.89 775.503,1216.57 776.09,1217.77 776.676,1220.06 777.262,1217.17 777.849,1219.38 778.435,1219 779.022,1218.6 779.608,1218.18 780.195,1219.23 780.781,1217.86 781.367,1220.49 781.954,1221.2 782.54,1219.3 783.127,1219.03 783.713,1218.44 784.299,1215.55 784.886,1216.69 785.472,1217.74 786.059,1217.55 786.645,1216.13 787.232,1215.62 787.818,1216.62 788.404,1217.63 788.991,1217.22 789.577,1215.45 790.164,1213.87 790.75,1212.43 791.336,1211.17 791.923,1212.4 792.509,1213.71 793.096,1212.28 793.682,1213.72 794.268,1212.35 794.855,1213.38 795.441,1214.9 796.028,1212.18 796.614,1212.18 797.201,1209.3 797.787,1210.93 798.373,1213.7 798.96,1213.62 799.546,1215.01 800.133,1215.09 800.719,1214.77 801.305,1214.5 801.892,1215.75 802.478,1218.4 803.065,1216.58 803.651,1212.36 804.237,1215.02 804.824,1213.46 805.41,1217.39 805.997,1218.83 806.583,1217.46 807.17,1216.96 807.756,1216.72 808.342,1216.71 808.929,1215.34 809.515,1216.47 810.102,1217.38 810.688,1217.02 811.274,1218 811.861,1217.92 812.447,1219.14 813.034,1221.66 813.62,1221.38 814.206,1220.66 814.793,1218.92 815.379,1216.14 815.966,1215.99 816.552,1217.28 817.139,1213.05 817.725,1208.94 818.311,1209.31 818.898,1211.17 819.484,1211.29 820.071,1212.58 820.657,1213.72 821.243,1216.37 821.83,1216.48 822.416,1216.33 823.003,1214.61 823.589,1214.76 824.175,1215.75 824.762,1217.96 825.348,1220.41 825.935,1221.37 826.521,1219.43 827.108,1217.57 827.694,1216.15 828.28,1215.98 828.867,1218.52 829.453,1219.39 830.04,1216.18 830.626,1215.03 831.212,1213.45 831.799,1211.63 832.385,1213.06 832.972,1211.69 833.558,1210.4 834.145,1211.83 834.731,1211.87 835.317,1210.5 835.904,1210.7 836.49,1209.63 837.077,1208.57 837.663,1206.06 838.249,1209.28 838.836,1210.7 839.422,1213.32 840.009,1210.75 840.595,1209.52 841.181,1209.76 841.768,1212.53 842.354,1213.87 842.941,1212.63 843.527,1212.65 844.114,1213.92 844.7,1212.81 845.286,1210.01 845.873,1207.42 846.459,1207.78 847.046,1208.05 847.632,1206.82 848.218,1204.35 848.805,1204.98 849.391,1206.51 849.978,1206.79 850.564,1205.7 851.15,1206.16 851.737,1206.6 852.323,1207.08 852.91,1206.07 853.496,1207.44 854.083,1207.7 854.669,1206.47 855.255,1205.02 855.842,1205.22 856.428,1205.53 857.015,1207.37 857.601,1204.96 858.187,1206.47 858.774,1210.71 859.36,1208.33 859.947,1207.26 860.533,1207.67 861.119,1203.73 861.706,1204.39 862.292,1208.69 862.879,1207.36 863.465,1208.93 864.052,1208.9 864.638,1210.43 865.224,1210.55 865.811,1210.65 866.397,1213.32 866.984,1213.09 867.57,1210.31 868.156,1211.88 868.743,1213.58 869.329,1213.54 869.916,1214.72 870.502,1214.78 871.089,1212.01 871.675,1210.54 872.261,1212.05 872.848,1214.83 873.434,1211.99 874.021,1211.94 874.607,1209.24 875.193,1209.35 875.78,1210.82 876.366,1212.24 876.953,1210.73 877.539,1211.79 878.125,1211.87 878.712,1210.19 879.298,1212.86 879.885,1213.04 880.471,1211.81 881.058,1211.63 881.644,1211.41 882.23,1214.3 882.817,1215.67 883.403,1215.19 883.99,1214.04 884.576,1212.48 885.162,1213.97 885.749,1211.1 886.335,1208.2 886.922,1205.9 887.508,1206.24 888.094,1203.76 888.681,1205.75 889.267,1204.5 889.854,1204.76 890.44,1205.22 891.027,1206.93 891.613,1206.96 892.199,1207.23 892.786,1207.48 893.372,1207.63 893.959,1207.59 894.545,1209.17 895.131,1210.6 895.718,1212.19 896.304,1213.27 896.891,1213.16 897.477,1212.82 898.063,1212.65 898.65,1211.63 899.236,1211.9 899.823,1213.37 900.409,1213.31 900.996,1214.65 901.582,1211.83 902.168,1209.46 902.755,1208.36 903.341,1210.21 903.928,1210.12 904.514,1208.98 905.1,1209.25 905.687,1212.05 906.273,1211.94 906.86,1214.47 907.446,1216.67 908.032,1215.26 908.619,1215.09 909.205,1215.06 909.792,1213.84 910.378,1212.17 910.965,1213.43 911.551,1213.27 912.137,1213.42 912.724,1213.18 913.31,1214.6 913.897,1210.06 914.483,1211.48 915.069,1210.11 915.656,1210.08 916.242,1210.18 916.829,1208.72 917.415,1210.09 918.002,1211.64 918.588,1210.17 919.174,1212.74 919.761,1213.99 920.347,1212.27 920.934,1213.27 921.52,1212.75 922.106,1215.13 922.693,1215.01 923.279,1213.5 923.866,1214.76 924.452,1217.15 925.038,1215.8 925.625,1210.33 926.211,1214.16 926.798,1212.55 927.384,1208.53 927.971,1209.76 928.557,1209.73 929.143,1208.48 929.73,1211.31 930.316,1212.91 930.903,1212.45 931.489,1218.07 932.075,1217.88 932.662,1217.53 933.248,1213.23 933.835,1211.91 934.421,1211.77 935.007,1212.01 935.594,1212.12 936.18,1214.86 936.767,1214.86 937.353,1217.24 937.94,1218.37 938.526,1218.05 939.112,1217.89 939.699,1216.23 940.285,1218.83 940.872,1218.9 941.458,1217.23 942.044,1216.8 942.631,1216.58 943.217,1216.3 943.804,1218.68 944.39,1216.93 944.976,1215.14 945.563,1217.39 946.149,1215.9 946.736,1215.72 947.322,1216.65 947.909,1214.82 948.495,1215.81 949.081,1213.03 949.668,1214.01 950.254,1216.56 950.841,1216.48 951.427,1215.04 952.013,1213.51 952.6,1212.17 953.186,1212.02 953.773,1213.25 954.359,1214.19 954.945,1215.47 955.532,1214.18 956.118,1215.35 956.705,1213.72 957.291,1212.46 957.878,1210.93 958.464,1213.58 959.05,1212.48 959.637,1212.56 960.223,1212.4 960.81,1212.36 961.396,1213.89 961.982,1213.9 962.569,1212.5 963.155,1211.17 963.742,1211.34 964.328,1211.21 964.915,1211.22 965.501,1211.15 966.087,1212.5 966.674,1212.52 967.26,1208.37 967.847,1209.95 968.433,1212.81 969.019,1210.24 969.606,1211.46 970.192,1212.74 970.779,1212.63 971.365,1212.5 971.951,1211.06 972.538,1210.97 973.124,1212.27 973.711,1213.76 974.297,1217.43 974.884,1215.86 975.47,1213.07 976.056,1213.01 976.643,1215.61 977.229,1216.51 977.816,1215.16 978.402,1214.84 978.988,1213.2 979.575,1210.3 980.161,1210.03 980.748,1207.25 981.334,1207.6 981.92,1207.77 982.507,1209.24 983.093,1209.41 983.68,1214.89 984.266,1217.13 984.853,1212.72 985.439,1213.9 986.025,1213.85 986.612,1214.73 987.198,1214.44 987.785,1215.65 988.371,1213.56 988.957,1214.89 989.544,1215.97 990.13,1214.38 990.717,1213.99 991.303,1209.66 991.889,1211.13 992.476,1211.08 993.062,1211.04 993.649,1210.85 994.235,1210.97 994.822,1212.35 995.408,1212.14 995.994,1210.59 996.581,1210.35 997.167,1208.87 997.754,1211.58 998.34,1211.5 998.926,1211.64 999.513,1211.33 1000.1,1209.95 1000.69,1209.9 1001.27,1207.4 1001.86,1210.08 1002.44,1208.57 1003.03,1205.81 1003.62,1207.57 1004.2,1206.41 1004.79,1205.52 1005.38,1204.61 1005.96,1204.81 1006.55,1202.2 1007.14,1198.68 1007.72,1199.21 1008.31,1200.14 1008.9,1200.71 1009.48,1202.8 1010.07,1202.03 1010.65,1202.74 1011.24,1204.55 1011.83,1204.99 1012.41,1203.83 1013,1205.48 1013.59,1207.9 1014.17,1206.9 1014.76,1208.54 1015.35,1207.17 1015.93,1207.23 1016.52,1208.61 1017.11,1209.8 1017.69,1208.64 1018.28,1208.76 1018.86,1210.4 1019.45,1210.57 1020.04,1209.15 1020.62,1210.26 1021.21,1211.64 1021.8,1211.45 1022.38,1208.75 1022.97,1210.34 1023.56,1210.22 1024.14,1211.7 1024.73,1209.06 1025.32,1210.4 1025.9,1209.1 1026.49,1204.95 1027.07,1204.93 1027.66,1209.27 1028.25,1210.62 1028.83,1211.95 1029.42,1213.6 1030.01,1214.6 1030.59,1217.3 1031.18,1217.07 1031.77,1219.31 1032.35,1217.88 1032.94,1220.18 1033.52,1221.41 1034.11,1220.89 1034.7,1217.76 1035.28,1216.28 1035.87,1218.69 1036.46,1219.6 1037.04,1222.97 1037.63,1222.17 1038.22,1221.5 1038.8,1219.79 1039.39,1219.12 1039.98,1220.2 1040.56,1220.03 1041.15,1218.18 1041.73,1217.8 1042.32,1215.08 1042.91,1213.76 1043.49,1212.27 1044.08,1212.18 1044.67,1207.92 1045.25,1201.23 1045.84,1200.68 1046.43,1200.87 1047.01,1201.68 1047.6,1202.52 1048.19,1202.77 1048.77,1202.15 1049.36,1201.43 1049.94,1201.75 1050.53,1201.14 1051.12,1203.36 1051.7,1206.6 1052.29,1208.19 1052.88,1211.16 1053.46,1210.87 1054.05,1213.58 1054.64,1210.74 1055.22,1210.35 1055.81,1209.09 1056.39,1208.85 1056.98,1210.27 1057.57,1212.55 1058.15,1213.83 1058.74,1213.54 1059.33,1211.9 1059.91,1211.68 1060.5,1211.32 1061.09,1213.96 1061.67,1215.25 1062.26,1214.94 1062.85,1214.85 1063.43,1214.6 1064.02,1217.21 1064.6,1214.31 1065.19,1215.46 1065.78,1216.36 1066.36,1218.57 1066.95,1220.82 1067.54,1221.16 1068.12,1219.27 1068.71,1217.56 1069.3,1216.13 1069.88,1214.59 1070.47,1217.06 1071.06,1216.75 1071.64,1212.31 1072.23,1209.63 1072.81,1209.6 1073.4,1210.03 1073.99,1210.02 1074.57,1209.86 1075.16,1207.11 1075.75,1203.44 1076.33,1204.12 1076.92,1203.34 1077.51,1203.6 1078.09,1203.82 1078.68,1203.25 1079.26,1203.67 1079.85,1203.98 1080.44,1204.3 1081.02,1204.78 1081.61,1206.32 1082.2,1209.26 1082.78,1207.84 1083.37,1208 1083.96,1206.74 1084.54,1208.21 1085.13,1206.64 1085.72,1209.43 1086.3,1209.4 1086.89,1212.25 1087.47,1210.96 1088.06,1210.72 1088.65,1210.63 1089.23,1210.82 1089.82,1209.64 1090.41,1207.03 1090.99,1207.46 1091.58,1209.06 1092.17,1209.07 1092.75,1206.49 1093.34,1205.37 1093.93,1206.95 1094.51,1208.42 1095.1,1210.03 1095.68,1211.48 1096.27,1210.22 1096.86,1210.02 1097.44,1212.79 1098.03,1212.85 1098.62,1214.08 1099.2,1212.81 1099.79,1211.83 1100.38,1214.26 1100.96,1215.24 1101.55,1214.97 1102.14,1210.87 1102.72,1210.99 1103.31,1212.36 1103.89,1209.41 1104.48,1212.27 1105.07,1213.45 1105.65,1215.95 1106.24,1216.83 1106.83,1213.87 1107.41,1216.55 1108,1216.44 1108.59,1220.43 1109.17,1221.19 1109.76,1220.86 1110.34,1217.65 1110.93,1217.13 1111.52,1216.89 1112.1,1216.22 1112.69,1214.4 1113.28,1217.99 1113.86,1213.72 1114.45,1213.25 1115.04,1211.98 1115.62,1214.61 1116.21,1215.82 1116.8,1215.45 1117.38,1218.16 1117.97,1217.86 1118.55,1213.65 1119.14,1213.8 1119.73,1212.16 1120.31,1212.03 1120.9,1211.68 1121.49,1210.27 1122.07,1210.56 1122.66,1211.83 1123.25,1210.36 1123.83,1210.35 1124.42,1210.4 1125.01,1210.21 1125.59,1211.51 1126.18,1211.6 1126.76,1210.33 1127.35,1210.3 1127.94,1210.45 1128.52,1211.76 1129.11,1214.5 1129.7,1216.79 1130.28,1216.32 1130.87,1215.92 1131.46,1215.53 1132.04,1215.16 1132.63,1216.32 1133.21,1217.31 1133.8,1214.46 1134.39,1211.39 1134.97,1211.21 1135.56,1209.84 1136.15,1211.39 1136.73,1215.21 1137.32,1212.13 1137.91,1212.09 1138.49,1210.13 1139.08,1208.77 1139.67,1208.8 1140.25,1204.93 1140.84,1205.26 1141.42,1204.18 1142.01,1204.3 1142.6,1205.63 1143.18,1204.53 1143.77,1206.37 1144.36,1207.87 1144.94,1206.53 1145.53,1208.1 1146.12,1206.91 1146.7,1208.43 1147.29,1207.23 1147.88,1208.78 1148.46,1206 1149.05,1207.82 1149.63,1206.52 1150.22,1206.76 1150.81,1206.95 1151.39,1207.13 1151.98,1207.4 1152.57,1206.28 1153.15,1210.76 1153.74,1210.68 1154.33,1214.3 1154.91,1209.93 1155.5,1210.03 1156.09,1210.26 1156.67,1211.59 1157.26,1211.47 1157.84,1209.9 1158.43,1208.75 1159.02,1209.99 1159.6,1208.8 1160.19,1210.24 1160.78,1211.76 1161.36,1211.66 1161.95,1211.92 1162.54,1210.57 1163.12,1211.79 1163.71,1214.12 1164.29,1212.79 1164.88,1214.02 1165.47,1212.6 1166.05,1211.22 1166.64,1212.41 1167.23,1216.12 1167.81,1218.45 1168.4,1218.11 1168.99,1219.19 1169.57,1217.56 1170.16,1215.87 1170.75,1215.43 1171.33,1216.5 1171.92,1214.58 1172.5,1217.28 1173.09,1218.38 1173.68,1217.85 1174.26,1213.45 1174.85,1213.58 1175.44,1214.59 1176.02,1218.38 1176.61,1219.05 1177.2,1221.19 1177.78,1218.02 1178.37,1217.58 1178.96,1217.3 1179.54,1215.79 1180.13,1215.17 1180.71,1209.64 1181.3,1210.96 1181.89,1213.45 1182.47,1212.13 1183.06,1210.85 1183.65,1206.77 1184.23,1204.4 1184.82,1201.93 1185.41,1202.43 1185.99,1201.53 1186.58,1201.93 1187.16,1202.32 1187.75,1204.22 1188.34,1204.62 1188.92,1204.74 1189.51,1205.09 1190.1,1206.63 1190.68,1206.86 1191.27,1206.97 1191.86,1208.23 1192.44,1202.88 1193.03,1202.07 1193.62,1201.41 1194.2,1201.78 1194.79,1202.34 1195.37,1202.78 1195.96,1204.38 1196.55,1208.63 1197.13,1207.48 1197.72,1204.88 1198.31,1205.36 1198.89,1202.76 1199.48,1203.14 1200.07,1203.57 1200.65,1204.21 1201.24,1200.79 1201.83,1200.15 1202.41,1200.65 1203,1203.77 1203.58,1202.86 1204.17,1200.63 1204.76,1201.16 1205.34,1201.85 1205.93,1202.26 1206.52,1205.17 1207.1,1205.57 1207.69,1206.04 1208.28,1206.34 1208.86,1209.25 1209.45,1216.09 1210.03,1218.76 1210.62,1219.91 1211.21,1219.6 1211.79,1216.75 1212.38,1217.77 1212.97,1216.27 1213.55,1215.92 1214.14,1212.91 1214.73,1212.88 1215.31,1212.55 1215.9,1212.61 1216.49,1212.45 1217.07,1212.56 1217.66,1211.13 1218.24,1211.23 1218.83,1210.17 1219.42,1210.41 1220,1211.74 1220.59,1211.76 1221.18,1213.04 1221.76,1211.54 1222.35,1211.31 1222.94,1210.09 1223.52,1207.66 1224.11,1206.4 1224.7,1207.96 1225.28,1208.42 1225.87,1209.83 1226.45,1211.29 1227.04,1208.68 1227.63,1204.98 1228.21,1203.82 1228.8,1202.97 1229.39,1202.17 1229.97,1203.78 1230.56,1202.58 1231.15,1200.22 1231.73,1200.96 1232.32,1200.08 1232.91,1200.7 1233.49,1202.47 1234.08,1204.02 1234.66,1204.45 1235.25,1206.08 1235.84,1207.76 1236.42,1208.02 1237.01,1210.83 1237.6,1209.69 1238.18,1209.46 1238.77,1209.48 1239.36,1210.84 1239.94,1212.38 1240.53,1213.62 1241.11,1214.8 1241.7,1211.86 1242.29,1212.09 1242.87,1214.68 1243.46,1214.52 1244.05,1214.48 1244.63,1214.16 1245.22,1211.28 1245.81,1208.64 1246.39,1206.03 1246.98,1206.12 1247.57,1204.9 1248.15,1203.97 1248.74,1205.49 1249.32,1205.6 1249.91,1204.11 1250.5,1206.93 1251.08,1207.33 1251.67,1207.53 1252.26,1208.87 1252.84,1209.01 1253.43,1208.03 1254.02,1207.15 1254.6,1207.34 1255.19,1205.92 1255.78,1207.77 1256.36,1206.51 1256.95,1205.35 1257.53,1204.04 1258.12,1202.78 1258.71,1203.24 1259.29,1203.99 1259.88,1204.17 1260.47,1201.93 1261.05,1202.3 1261.64,1201.37 1262.23,1200.43 1262.81,1199.65 1263.4,1201.22 1263.98,1205.78 1264.57,1204.78 1265.16,1205 1265.74,1207.92 1266.33,1206.49 1266.92,1210.69 1267.5,1210.74 1268.09,1216.16 1268.68,1215.84 1269.26,1212.77 1269.85,1215.24 1270.44,1213.61 1271.02,1212.27 1271.61,1212.4 1272.19,1212.48 1272.78,1212.35 1273.37,1212.2 1273.95,1212.37 1274.54,1210.81 1275.13,1214.76 1275.71,1216.95 1276.3,1219.45 1276.89,1217.68 1277.47,1218.74 1278.06,1218.17 1278.65,1220.33 1279.23,1219.75 1279.82,1218.05 1280.4,1217.93 1280.99,1217.42 1281.58,1218.37 1282.16,1217.93 1282.75,1217.39 1283.34,1217 1283.92,1213.99 1284.51,1214.89 1285.1,1218.53 1285.68,1216.67 1286.27,1216.49 1286.86,1214.96 1287.44,1215.99 1288.03,1214.44 1288.61,1214.05 1289.2,1209.87 1289.79,1212.52 1290.37,1217.52 1290.96,1218.58 1291.55,1218.14 1292.13,1214.92 1292.72,1214.81 1293.31,1217.33 1293.89,1219.42 1294.48,1216.21 1295.06,1210.73 1295.65,1210.78 1296.24,1210.6 1296.82,1210.72 1297.41,1210.79 1298,1210.62 1298.58,1210.34 1299.17,1212.44 1299.76,1213.82 1300.34,1216.15 1300.93,1214.39 1301.52,1214.1 1302.1,1214.97 1302.69,1213.46 1303.27,1211.63 1303.86,1215.68 1304.45,1215.34 1305.03,1215.24 1305.62,1214.84 1306.21,1211.93 1306.79,1209.23 1307.38,1209.38 1307.97,1209.49 1308.55,1209.57 1309.14,1208.38 1309.73,1212.81 1310.31,1212.65 1310.9,1212.46 1311.48,1209.39 1312.07,1210.6 1312.66,1212.05 1313.24,1214.49 1313.83,1213.88 1314.42,1212.57 1315,1211 1315.59,1210.9 1316.18,1212.08 1316.76,1211.8 1317.35,1211.69 1317.93,1212.68 1318.52,1212.39 1319.11,1213.61 1319.69,1213.46 1320.28,1212 1320.87,1210.79 1321.45,1209.61 1322.04,1205.8 1322.63,1208.69 1323.21,1210.08 1323.8,1209.81 1324.39,1209.88 1324.97,1208.22 1325.56,1208.35 1326.14,1208.8 1326.73,1207.46 1327.32,1205.04 1327.9,1202.48 1328.49,1201.72 1329.08,1202.11 1329.66,1202.55 1330.25,1203.08 1330.84,1202 1331.42,1199.61 1332.01,1199.07 1332.6,1201.22 1333.18,1201.46 1333.77,1201.82 1334.35,1202.3 1334.94,1202.68 1335.53,1204.5 1336.11,1207.31 1336.7,1208.79 1337.29,1207.49 1337.87,1207.26 1338.46,1206.18 1339.05,1208.01 1339.63,1212.16 1340.22,1210.61 1340.8,1209.06 1341.39,1211.79 1341.98,1211.75 1342.56,1213.03 1343.15,1210.3 1343.74,1207.85 1344.32,1207.73 1344.91,1207.96 1345.5,1208.48 1346.08,1211.38 1346.67,1213.68 1347.26,1210.98 1347.84,1212.18 1348.43,1212.15 1349.01,1213.56 1349.6,1212.28 1350.19,1214.79 1350.77,1214.31 1351.36,1212.79 1351.95,1215.19 1352.53,1213.34 1353.12,1213.05 1353.71,1212.69 1354.29,1213.98 1354.88,1213.9 1355.47,1220.44 1356.05,1221.1 1356.64,1221.76 1357.22,1219.6 1357.81,1219.11 1358.4,1218.64 1358.98,1217.13 1359.57,1213.03 1360.16,1212.82 1360.74,1215.35 1361.33,1216.34 1361.92,1215.75 1362.5,1214.1 1363.09,1215.35 1363.68,1215.16 1364.26,1212.35 1364.85,1212.37 1365.43,1209.66 1366.02,1211.1 1366.61,1209.79 1367.19,1211.13 1367.78,1212.63 1368.37,1209.72 1368.95,1212.43 1369.54,1210.73 1370.13,1211.96 1370.71,1210.24 1371.3,1208.72 1371.88,1206.01 1372.47,1207.34 1373.06,1204.8 1373.64,1203.92 1374.23,1206.79 1374.82,1208.24 1375.4,1205.51 1375.99,1207.13 1376.58,1209.87 1377.16,1209.9 1377.75,1209.86 1378.34,1209.67 1378.92,1209.87 1379.51,1210.86 1380.09,1212.13 1380.68,1213.47 1381.27,1210.76 1381.85,1211.88 1382.44,1210.27 1383.03,1212.67 1383.61,1210.17 1384.2,1210.21 1384.79,1211.57 1385.37,1213.9 1385.96,1213.93 1386.55,1212.53 1387.13,1212.65 1387.72,1206.01 1388.3,1206.3 1388.89,1212.02 1389.48,1207.96 1390.06,1205.23 1390.65,1206.85 1391.24,1203.15 1391.82,1207.6 1392.41,1207.86 1393,1210.78 1393.58,1210.67 1394.17,1210.6 1394.75,1210.78 1395.34,1212.15 1395.93,1211.99 1396.51,1214.69 1397.1,1214.23 1397.69,1212.55 1398.27,1214.04 1398.86,1214.09 1399.45,1212.65 1400.03,1209.83 1400.62,1211.24 1401.21,1212.51 1401.79,1211.16 1402.38,1209.66 1402.96,1211.04 1403.55,1211.19 1404.14,1213.78 1404.72,1215 1405.31,1216.2 1405.9,1214.56 1406.48,1215.75 1407.07,1214.12 1407.66,1214.1 1408.24,1213.72 1408.83,1210.78 1409.42,1210.71 1410,1210.68 1410.59,1206.82 1411.17,1207.08 1411.76,1206.11 1412.35,1206.29 1412.93,1203.74 1413.52,1203.94 1414.11,1205.52 1414.69,1203.19 1415.28,1202.14 1415.87,1205.52 1416.45,1205.71 1417.04,1204.72 1417.63,1206.3 1418.21,1206.16 1418.8,1206.24 1419.38,1204 1419.97,1201.8 1420.56,1202.34 1421.14,1202.99 1421.73,1203.7 1422.32,1205.2 1422.9,1202.67 1423.49,1204.41 1424.08,1206.38 1424.66,1208.37 1425.25,1207.02 1425.83,1207.35 1426.42,1202.11 1427.01,1202.74 1427.59,1202.03 1428.18,1201.42 1428.77,1201.71 1429.35,1202.42 1429.94,1202.63 1430.53,1204.27 1431.11,1202.38 1431.7,1201.48 1432.29,1201.97 1432.87,1202.11 1433.46,1201.18 1434.04,1198.99 1434.63,1202.33 1435.22,1205.65 1435.8,1207.03 1436.39,1208.58 1436.98,1211.4 1437.56,1208.89 1438.15,1207.43 1438.74,1207.52 1439.32,1208.96 1439.91,1209.13 1440.5,1210.32 1441.08,1211.24 1441.67,1212.68 1442.25,1211.14 1442.84,1212.17 1443.43,1214.76 1444.01,1215.68 1444.6,1214.38 1445.19,1214.37 1445.77,1214.18 1446.36,1212.65 1446.95,1214.01 1447.53,1212.31 1448.12,1208.15 1448.7,1207.02 1449.29,1207.59 1449.88,1207.78 1450.46,1209.14 1451.05,1210.85 1451.64,1213.51 1452.22,1213.61 1452.81,1215.95 1453.4,1214.31 1453.98,1212.68 1454.57,1212.3 1455.16,1216.17 1455.74,1214.62 1456.33,1212.85 1456.91,1211.47 1457.5,1211.52 1458.09,1215.31 1458.67,1213.81 1459.26,1215.08 1459.85,1213.84 1460.43,1212.52 1461.02,1216.39 1461.61,1216.24 1462.19,1215.82 1462.78,1212.7 1463.37,1214.09 1463.95,1215.32 1464.54,1215.04 1465.12,1215.88 1465.71,1214.19 1466.3,1216.5 1466.88,1214.65 1467.47,1214.39 1468.06,1215.6 1468.64,1217.95 1469.23,1218.66 1469.82,1215.52 1470.4,1216.69 1470.99,1214.8 1471.57,1211.95 1472.16,1209.24 1472.75,1206.66 1473.33,1206.79 1473.92,1207.19 1474.51,1207.68 1475.09,1207.73 1475.68,1211.9 1476.27,1211.75 1476.85,1214.83 1477.44,1214.25 1478.03,1214.09 1478.61,1211.14 1479.2,1210.74 1479.78,1212.14 1480.37,1217.42 1480.96,1216.96 1481.54,1216.7 1482.13,1217.85 1482.72,1217.38 1483.3,1217.09 1483.89,1218.12 1484.48,1216.58 1485.06,1212.32 1485.65,1210.68 1486.24,1208.31 1486.82,1210.92 1487.41,1212.11 1487.99,1214.75 1488.58,1214.54 1489.17,1214.31 1489.75,1212.87 1490.34,1214.26 1490.93,1216.74 1491.51,1216.36 1492.1,1217.04 1492.69,1216.66 1493.27,1217.31 1493.86,1216.88 1494.45,1217.59 1495.03,1221.01 1495.62,1221.86 1496.2,1221.19 1496.79,1215.48 1497.38,1213.7 1497.96,1213.24 1498.55,1214.18 1499.14,1210.23 1499.72,1206.04 1500.31,1207.4 1500.9,1208.83 1501.48,1210.32 1502.07,1208.85 1502.65,1210.36 1503.24,1211.63 1503.83,1211.47 1504.41,1210.3 1505,1211.63 1505.59,1210.33 1506.17,1204.66 1506.76,1203.76 1507.35,1203.04 1507.93,1203.44 1508.52,1199.75 1509.11,1203.12 1509.69,1203.83 1510.28,1205.66 1510.86,1205.97 1511.45,1208.59 1512.04,1207.02 1512.62,1204.57 1513.21,1205.07 1513.8,1205.33 1514.38,1205.5 1514.97,1205.54 1515.56,1204.53 1516.14,1204.73 1516.73,1203.69 1517.32,1206.9 1517.9,1208.42 1518.49,1207.43 1519.07,1207.71 1519.66,1207.8 1520.25,1207.64 1520.83,1207.86 1521.42,1208.05 1522.01,1210.57 1522.59,1210.83 1523.18,1213.41 1523.77,1213.2 1524.35,1213.13 1524.94,1211.84 1525.52,1213.13 1526.11,1208.99 1526.7,1209.27 1527.28,1207.95 1527.87,1206.61 1528.46,1206.68 1529.04,1208.11 1529.63,1208.06 1530.22,1205.34 1530.8,1207 1531.39,1205.73 1531.98,1207.18 1532.56,1208.87 1533.15,1214.26 1533.73,1215.57 1534.32,1216.62 1534.91,1216.5 1535.49,1212.28 1536.08,1213.65 1536.67,1213.56 1537.25,1213.34 1537.84,1213.06 1538.43,1214.29 1539.01,1214.03 1539.6,1213.92 1540.19,1212.52 1540.77,1212.34 1541.36,1210.94 1541.94,1210.7 1542.53,1210.71 1543.12,1212.12 1543.7,1213.04 1544.29,1210.07 1544.88,1213.79 1545.46,1213.28 1546.05,1213.14 1546.64,1212.77 1547.22,1213.81 1547.81,1215.08 1548.4,1214.88 1548.98,1217.25 1549.57,1214.42 1550.15,1214.47 1550.74,1211.36 1551.33,1211.41 1551.91,1211.45 1552.5,1211.62 1553.09,1210.27 1553.67,1208.95 1554.26,1210.39 1554.85,1209.09 1555.43,1209.28 1556.02,1210.38 1556.6,1208.91 1557.19,1210.13 1557.78,1211.45 1558.36,1211.52 1558.95,1212.46 1559.54,1213.67 1560.12,1216.08 1560.71,1217.05 1561.3,1219.3 1561.88,1220.11 1562.47,1220.43 1563.06,1222.36 1563.64,1221.52 1564.23,1216.85 1564.81,1216.93 1565.4,1217.98 1565.99,1218.94 1566.57,1218.42 1567.16,1219.28 1567.75,1219.75 1568.33,1223.27 1568.92,1221.34 1569.51,1220.54 1570.09,1220.04 1570.68,1216.62 1571.27,1214.87 1571.85,1213.02 1572.44,1211.59 1573.02,1210.12 1573.61,1211.29 1574.2,1210.17 1574.78,1207.63 1575.37,1209.27 1575.96,1208.97 1576.54,1209.17 1577.13,1211.82 1577.72,1212.63 1578.3,1209.69 1578.89,1211.07 1579.47,1211.1 1580.06,1212.18 1580.65,1210.87 1581.23,1209.44 1581.82,1209.34 1582.41,1209.42 1582.99,1208.14 1583.58,1208 1584.17,1209.3 1584.75,1207.97 1585.34,1208.17 1585.93,1206.7 1586.51,1205.56 1587.1,1203.33 1587.68,1205.11 1588.27,1206.99 1588.86,1202.93 1589.44,1204.59 1590.03,1203.36 1590.62,1209.03 1591.2,1209.47 1591.79,1213.46 1592.38,1215.69 1592.96,1218.15 1593.55,1217.74 1594.14,1218.36 1594.72,1218.78 1595.31,1220.76 1595.89,1221.5 1596.48,1219.35 1597.07,1217.44 1597.65,1216.96 1598.24,1216.49 1598.83,1217.46 1599.41,1218.56 1600,1219.64 1600.59,1215.21 1601.17,1212.12 1601.76,1208.06 1602.34,1206.98 1602.93,1211.25 1603.52,1211.12 1604.1,1209.47 1604.69,1212.15 1605.28,1210.77 1605.86,1209.14 1606.45,1207.85 1607.04,1204.92 1607.62,1203.72 1608.21,1203.67 1608.8,1207.8 1609.38,1206.44 1609.97,1208.45 1610.55,1207.08 1611.14,1202 1611.73,1201.32 1612.31,1202.09 1612.9,1202.52 1613.49,1203.06 1614.07,1203.58 1614.66,1205.07 1615.25,1204.05 1615.83,1204.21 1616.42,1204.54 1617.01,1204.79 1617.59,1202.31 1618.18,1204.27 1618.76,1206.17 1619.35,1206.43 1619.94,1206.76 1620.52,1208.22 1621.11,1206.79 1621.7,1205.56 1622.28,1203.04 1622.87,1204.43 1623.46,1207.49 1624.04,1204.89 1624.63,1202.28 1625.22,1200.22 1625.8,1199.6 1626.39,1198.83 1626.97,1200.77 1627.56,1200.01 1628.15,1202.03 1628.73,1203.69 1629.32,1203.94 1629.91,1201.71 1630.49,1200.65 1631.08,1198.18 1631.67,1198.83 1632.25,1198.19 1632.84,1197.95 1633.42,1195.89 1634.01,1195.31 1634.6,1195.22 1635.18,1196.2 1635.77,1196.92 1636.36,1198.85 1636.94,1196.71 1637.53,1194.87 1638.12,1195.72 1638.7,1196.62 1639.29,1196.34 1639.88,1195.78 1640.46,1194.1 1641.05,1195.12 1641.63,1196.09 1642.22,1196.97 1642.81,1201.93 1643.39,1203.55 1643.98,1204.1 1644.57,1204.56 1645.15,1206.11 1645.74,1206.46 1646.33,1207.93 1646.91,1210.51 1647.5,1210.49 1648.09,1210.47 1648.67,1210.46 1649.26,1211.81 1649.84,1211.85 1650.43,1213.23 1651.02,1211.72 1651.6,1210.28 1652.19,1211.7 1652.78,1211.63 1653.36,1210.02 1653.95,1210.47 1654.54,1209.12 1655.12,1208.86 1655.71,1213.29 1656.29,1211.87 1656.88,1210.62 1657.47,1209.34 1658.05,1213.41 1658.64,1211.98 1659.23,1212.06 1659.81,1210.48 1660.4,1209.03 1660.99,1210.4 1661.57,1210.28 1662.16,1210.39 1662.75,1210.57 1663.33,1210.58 1663.92,1210.61 1664.5,1214.55 1665.09,1217 1665.68,1219.45 1666.26,1220.4 1666.85,1218.48 1667.44,1216.77 1668.02,1217.79 1668.61,1219.01 1669.2,1219.9 1669.78,1217.98 1670.37,1217.36 1670.96,1214.31 1671.54,1216.72 1672.13,1217.64 1672.71,1219.72 1673.3,1220.28 1673.89,1216.92 1674.47,1215.17 1675.06,1216.24 1675.65,1216.04 1676.23,1215.84 1676.82,1211.77 1677.41,1211.73 1677.99,1212.88 1678.58,1209.96 1679.17,1211.29 1679.75,1205.79 1680.34,1204.67 1680.92,1208.92 1681.51,1210.33 1682.1,1208.99 1682.68,1214.27 1683.27,1213.92 1683.86,1215.11 1684.44,1214.78 1685.03,1214.4 1685.62,1215.56 1686.2,1214.04 1686.79,1214.03 1687.37,1213.51 1687.96,1210.75 1688.55,1210.78 1689.13,1211.01 1689.72,1212.16 1690.31,1213.27 1690.89,1214.89 1691.48,1214.71 1692.07,1213.22 1692.65,1211.74 1693.24,1211.47 1693.83,1210.15 1694.41,1207.53 1695,1207.77 1695.58,1205.15 1696.17,1202.33 1696.76,1199.8 1697.34,1197.67 1697.93,1198.22 1698.52,1200.14 1699.1,1201.86 1699.69,1202.43 1700.28,1201.53 1700.86,1205.69 1701.45,1205.91 1702.04,1206.21 1702.62,1210.31 1703.21,1207.48 1703.79,1208.84 1704.38,1207.79 1704.97,1210.54 1705.55,1208.92 1706.14,1207.53 1706.73,1203.61 1707.31,1204 1707.9,1205.78 1708.49,1203.55 1709.07,1203.94 1709.66,1205.83 1710.24,1206.29 1710.83,1203.9 1711.42,1204.54 1712,1206.12 1712.59,1207.74 1713.18,1207.8 1713.76,1207.83 1714.35,1209.09 1714.94,1212.95 1715.52,1212.95 1716.11,1212.82 1716.7,1210.23 1717.28,1208.99 1717.87,1210.3 1718.45,1210.05 1719.04,1209.97 1719.63,1210.3 1720.21,1211.54 1720.8,1209.84 1721.39,1212.53 1721.97,1213.68 1722.56,1212.21 1723.15,1210.91 1723.73,1210.59 1724.32,1210.3 1724.91,1210.21 1725.49,1208.98 1726.08,1207.56 1726.66,1204.82 1727.25,1206.55 1727.84,1202.57 1728.42,1202.95 1729.01,1205.93 1729.6,1205 1730.18,1204.77 1730.77,1205.07 1731.36,1202.44 1731.94,1199.98 1732.53,1203.14 1733.11,1200.73 1733.7,1205.2 1734.29,1205.11 1734.87,1204.02 1735.46,1202.84 1736.05,1202.26 1736.63,1202.61 1737.22,1203.34 1737.81,1203.76 1738.39,1207.85 1738.98,1209.29 1739.57,1209.26 1740.15,1208 1740.74,1207.26 1741.32,1207.59 1741.91,1207.63 1742.5,1209.24 1743.08,1214.71 1743.67,1214.27 1744.26,1214.25 1744.84,1214.05 1745.43,1215.15 1746.02,1213.91 1746.6,1212.15 1747.19,1210.68 1747.78,1210.76 1748.36,1209.21 1748.95,1205.29 1749.53,1208.34 1750.12,1209.62 1750.71,1211 1751.29,1212.22 1751.88,1213.37 1752.47,1212.9 1753.05,1212.71 1753.64,1217.68 1754.23,1217.11 1754.81,1215.54 1755.4,1213.85 1755.99,1213.88 1756.57,1213.66 1757.16,1214.95 1757.74,1214.41 1758.33,1212.49 1758.92,1212.34 1759.5,1213.61 1760.09,1211.81 1760.68,1211.65 1761.26,1204.82 1761.85,1207.98 1762.44,1206.6 1763.02,1206.6 1763.61,1208.39 1764.19,1204.55 1764.78,1206.17 1765.37,1203.78 1765.95,1203.1 1766.54,1201.89 1767.13,1204.9 1767.71,1206.49 1768.3,1210.62 1768.89,1210.54 1769.47,1210.44 1770.06,1207.79 1770.65,1207.95 1771.23,1207.93 1771.82,1207.89 1772.4,1207.56 1772.99,1205.01 1773.58,1203.88 1774.16,1204.19 1774.75,1200.41 1775.34,1200.98 1775.92,1200.55 1776.51,1202.73 1777.1,1203.21 1777.68,1202.39 1778.27,1201.71 1778.86,1203.26 1779.44,1205.19 1780.03,1205.39 1780.61,1205.7 1781.2,1205.82 1781.79,1206.1 1782.37,1206.53 1782.96,1210.54 1783.55,1209.14 1784.13,1213.06 1784.72,1211.49 1785.31,1208.98 1785.89,1209.15 1786.48,1209.06 1787.06,1207.46 1787.65,1207.22 1788.24,1207.56 1788.82,1210.2 1789.41,1210.22 1790,1211.47 1790.58,1210.06 1791.17,1211.26 1791.76,1212.62 1792.34,1212.63 1792.93,1212.47 1793.52,1211.03 1794.1,1209.8 1794.69,1209.77 1795.27,1212.47 1795.86,1212.52 1796.45,1213.95 1797.03,1216.62 1797.62,1217.48 1798.21,1218.44 1798.79,1217.9 1799.38,1216.06 1799.97,1217.01 1800.55,1216.5 1801.14,1216.54 1801.73,1215.18 1802.31,1214.91 1802.9,1215.79 1803.48,1215.45 1804.07,1215.09 1804.66,1214.78 1805.24,1215.63 1805.83,1214.98 1806.42,1213.29 1807,1212 1807.59,1213.14 1808.18,1212.75 1808.76,1209.89 1809.35,1209.86 1809.94,1208.45 1810.52,1208.44 1811.11,1210.04 1811.69,1207.17 1812.28,1207.22 1812.87,1204.21 1813.45,1204.55 1814.04,1204.94 1814.63,1204.1 1815.21,1203.12 1815.8,1203.55 1816.39,1206.48 1816.97,1206.63 1817.56,1206.59 1818.14,1207.06 1818.73,1208.64 1819.32,1210.2 1819.9,1209.91 1820.49,1209.85 1821.08,1211.21 1821.66,1210.06 1822.25,1209.88 1822.84,1210.84 1823.42,1212.23 1824.01,1213.65 1824.6,1214.79 1825.18,1213.25 1825.77,1211.57 1826.35,1210.19 1826.94,1211.44 1827.53,1212.89 1828.11,1215.39 1828.7,1216.47 1829.29,1218.87 1829.87,1215.81 1830.46,1216.86 1831.05,1217.87 1831.63,1217.69 1832.22,1216.23 1832.81,1214.52 1833.39,1215.6 1833.98,1214.11 1834.56,1214.04 1835.15,1206.95 1835.74,1209.67 1836.32,1208.46 1836.91,1208.58 1837.5,1209.7 1838.08,1208.66 1838.67,1212.67 1839.26,1212.76 1839.84,1212.63 1840.43,1211.07 1841.01,1209.96 1841.6,1211.36 1842.19,1208.57 1842.77,1207.33 1843.36,1207.89 1843.95,1208.24 1844.53,1209.88 1845.12,1209.78 1845.71,1209.84 1846.29,1213.77 1846.88,1214.89 1847.47,1215.99 1848.05,1213.01 1848.64,1211.29 1849.22,1212.64 1849.81,1211.07 1850.4,1207.06 1850.98,1206.02 1851.57,1207.65 1852.16,1207.89 1852.74,1205.08 1853.33,1205.48 1853.92,1205.5 1854.5,1205.49 1855.09,1204.28 1855.68,1204.74 1856.26,1206.06 1856.85,1205 1857.43,1207.93 1858.02,1209.3 1858.61,1209.67 1859.19,1208.55 1859.78,1209.94 1860.37,1211.22 1860.95,1211.28 1861.54,1211.33 1862.13,1209.97 1862.71,1212.6 1863.3,1213.64 1863.88,1211.96 1864.47,1210.53 1865.06,1207.61 1865.64,1210.2 1866.23,1209.14 1866.82,1210.93 1867.4,1210.93 1867.99,1210.84 1868.58,1210.74 1869.16,1209.32 1869.75,1210.47 1870.34,1210.66 1870.92,1211.82 1871.51,1205.26 1872.09,1202.72 1872.68,1204.71 1873.27,1206.6 1873.85,1205.43 1874.44,1207.01 1875.03,1204.61 1875.61,1207.4 1876.2,1210.32 1876.79,1210.22 1877.37,1213.05 1877.96,1212.87 1878.55,1212.53 1879.13,1210.82 1879.72,1213.29 1880.3,1213.52 1880.89,1211.91 1881.48,1211.69 1882.06,1211.53 1882.65,1211.34 1883.24,1211.4 1883.82,1211.45 1884.41,1213.78 1885,1213.36 1885.58,1211.52 1886.17,1211.48 1886.76,1212.54 1887.34,1210.91 1887.93,1210.6 1888.51,1207.98 1889.1,1207.95 1889.69,1210.79 1890.27,1206.5 1890.86,1208.16 1891.45,1209.47 1892.03,1209.38 1892.62,1209.51 1893.21,1209.37 1893.79,1209.25 1894.38,1211.84 1894.96,1211.67 1895.55,1211.26 1896.14,1211.2 1896.72,1211.02 1897.31,1209.8 1897.9,1208.39 1898.48,1208.65 1899.07,1208.53 1899.66,1207.36 1900.24,1207.43 1900.83,1206.27 1901.42,1205.08 1902,1204.1 1902.59,1207.09 1903.17,1209.79 1903.76,1211.03 1904.35,1211.79 1904.93,1211.78 1905.52,1211.48 1906.11,1213.82 1906.69,1213.5 1907.28,1214.89 1907.87,1214.63 1908.45,1216.74 1909.04,1217.61 1909.63,1217.16 1910.21,1215.59 1910.8,1215.4 1911.38,1211.17 1911.97,1210.17 1912.56,1208.88 1913.14,1208.84 1913.73,1209.03 1914.32,1208.95 1914.9,1210.52 1915.49,1211.79 1916.08,1212.95 1916.66,1212.9 1917.25,1212.54 1917.83,1213.84 1918.42,1213.58 1919.01,1214.56 1919.59,1214.13 1920.18,1213.83 1920.77,1214.96 1921.35,1212.11 1921.94,1213.3 1922.53,1210.38 1923.11,1208.02 1923.7,1204.04 1924.29,1206.97 1924.87,1208.78 1925.46,1207.84 1926.04,1206.49 1926.63,1206.71 1927.22,1208.41 1927.8,1209.98 1928.39,1207.35 1928.98,1208.71 1929.56,1206.43 1930.15,1207.9 1930.74,1207.66 1931.32,1210.62 1931.91,1206.76 1932.5,1209.41 1933.08,1210.91 1933.67,1211.07 1934.25,1211.36 1934.84,1212.61 1935.43,1212.72 1936.01,1210.97 1936.6,1213.44 1937.19,1211.87 1937.77,1207.87 1938.36,1205.26 1938.95,1208.15 1939.53,1208.39 1940.12,1209.59 1940.71,1211.06 1941.29,1209.78 1941.88,1212.43 1942.46,1216.27 1943.05,1217.41 1943.64,1214.07 1944.22,1208.58 1944.81,1208.76 1945.4,1210.53 1945.98,1214.48 1946.57,1213.2 1947.16,1211.57 1947.74,1215.49 1948.33,1215.32 1948.91,1215.08 1949.5,1216.04 1950.09,1215.64 1950.67,1212.87 1951.26,1212.58 1951.85,1212.31 1952.43,1212.27 1953.02,1210.81 1953.61,1212.04 1954.19,1213.23 1954.78,1211.81 1955.37,1211.75 1955.95,1211.49 1956.54,1209.92 1957.12,1209.79 1957.71,1208.32 1958.3,1209.6 1958.88,1209.84 1959.47,1210.14 1960.06,1211.18 1960.64,1210.94 1961.23,1212.28 1961.82,1209.48 1962.4,1210.83 1962.99,1210.73 1963.58,1211.89 1964.16,1207.66 1964.75,1206.75 1965.33,1209.44 1965.92,1210.97 1966.51,1208 1967.09,1206.65 1967.68,1208.14 1968.27,1209.5 1968.85,1213.2 1969.44,1213.03 1970.03,1208.9 1970.61,1207.77 1971.2,1210.78 1971.78,1209.26 1972.37,1208.14 1972.96,1209.39 1973.54,1212.08 1974.13,1210.63 1974.72,1210.67 1975.3,1210.8 1975.89,1208.16 1976.48,1206.88 1977.06,1208.38 1977.65,1209.67 1978.24,1210.83 1978.82,1209.36 1979.41,1206.99 1979.99,1206.84 1980.58,1209.74 1981.17,1208.18 1981.75,1207.17 1982.34,1206.04 1982.93,1206.41 1983.51,1210.73 1984.1,1209.08 1984.69,1204.95 1985.27,1205.16 1985.86,1205.55 1986.45,1205.84 1987.03,1207.66 1987.62,1205 1988.2,1206.39 1988.79,1207.94 1989.38,1205.59 1989.96,1203.21 1990.55,1204.89 1991.14,1204.81 1991.72,1205 1992.31,1203.88 1992.9,1201.42 1993.48,1201.89 1994.07,1200.48 1994.65,1202.01 1995.24,1201.05 1995.83,1201.41 1996.41,1200.77 1997,1201.35 1997.59,1203.22 1998.17,1203.69 1998.76,1205.35 1999.35,1204.34 1999.93,1204.49 2000.52,1198.36 2001.11,1198.91 2001.69,1199.53 2002.28,1198.7 2002.86,1198.2 2003.45,1199.03 2004.04,1198.46 2004.62,1197.66 2005.21,1201.07 2005.8,1203 2006.38,1201.85 2006.97,1202.29 2007.56,1204.15 2008.14,1204.58 2008.73,1206.45 2009.32,1206.58 2009.9,1208.04 2010.49,1208.02 2011.07,1206.92 2011.66,1211.89 2012.25,1209.35 2012.83,1205.81 2013.42,1210.31 2014.01,1209.06 2014.59,1210.62 2015.18,1217.1 2015.77,1215.46 2016.35,1213.67 2016.94,1215.97 2017.53,1217.09 2018.11,1218.11 2018.7,1220.58 2019.28,1220.05 2019.87,1218.26 2020.46,1216.4 2021.04,1221.3 2021.63,1218.04 2022.22,1216.28 2022.8,1213.16 2023.39,1215.47 2023.98,1218.06 2024.56,1215.38 2025.15,1213.5 2025.73,1214.66 2026.32,1215.75 2026.91,1217.15 2027.49,1217.05 2028.08,1214.16 2028.67,1213.83 2029.25,1212.34 2029.84,1212.2 2030.43,1210.64 2031.01,1210.77 2031.6,1210.98 2032.19,1210.86 2032.77,1212.41 2033.36,1213.62 2033.94,1213.54 2034.53,1213.73 2035.12,1215 2035.7,1213.18 2036.29,1212.88 2036.88,1212.68 2037.46,1211.55 2038.05,1213.94 2038.64,1216.07 2039.22,1218.23 2039.81,1219.2 2040.4,1220.02 2040.98,1219.43 2041.57,1220.33 2042.15,1221.17 2042.74,1219.04 2043.33,1219.87 2043.91,1220.93 2044.5,1220.21 2045.09,1220.78 2045.67,1221.55 2046.26,1222.33 2046.85,1221.61 2047.43,1220.76 2048.02,1218.68 2048.6,1215.33 2049.19,1213.61 2049.78,1213.19 2050.36,1218.24 2050.95,1217.76 2051.54,1214.37 2052.12,1212.62 2052.71,1211.24 2053.3,1211.42 2053.88,1211 2054.47,1209.74 2055.06,1211.12 2055.64,1207.02 2056.23,1208.26 2056.81,1208.24 2057.4,1208.33 2057.99,1211.01 2058.57,1210.93 2059.16,1211.12 2059.75,1213.69 2060.33,1213.45 2060.92,1213.35 2061.51,1213.37 2062.09,1211.83 2062.68,1214.38 2063.27,1214.42 2063.85,1213.99 2064.44,1212.49 2065.02,1213.7 2065.61,1212.13 2066.2,1206.37 2066.78,1205.42 2067.37,1205.91 2067.96,1202.45 2068.54,1201.52 2069.13,1206.29 2069.72,1210.8 2070.3,1210.72 2070.89,1205.56 2071.48,1204.49 2072.06,1207.15 2072.65,1208.58 2073.23,1207.35 2073.82,1211.3 2074.41,1208.8 2074.99,1207.7 2075.58,1207.93 2076.17,1208.12 2076.75,1207.04 2077.34,1204.55 2077.93,1206.35 2078.51,1206.76 2079.1,1208.4 2079.68,1209.92 2080.27,1211.04 2080.86,1211.99 2081.44,1211.72 2082.03,1211.43 2082.62,1212.54 2083.2,1212.79 2083.79,1216.52 2084.38,1215.21 2084.96,1213.79 2085.55,1212.25 2086.14,1211.26 2086.72,1208.77 2087.31,1210.23 2087.89,1210.37 2088.48,1214.3 2089.07,1214.01 2089.65,1213.78 2090.24,1213.68 2090.83,1213.45 2091.41,1213.44 2092,1213.19 2092.59,1215.62 2093.17,1215.17 2093.76,1214.87 2094.35,1217.59 2094.93,1214.7 2095.52,1212.88 2096.1,1214.29 2096.69,1214 2097.28,1214.84 2097.86,1214.53 2098.45,1215.63 2099.04,1216.44 2099.62,1213.27 2100.21,1214.35 2100.8,1214.12 2101.38,1215.31 2101.97,1216.16 2102.55,1215.72 2103.14,1215.46 2103.73,1218.07 2104.31,1219.19 2104.9,1218.53 2105.49,1215.16 2106.07,1209.35 2106.66,1205.45 2107.25,1206.91 2107.83,1205.64 2108.42,1204.58 2109.01,1204.72 2109.59,1207.58 2110.18,1210.49 2110.76,1209.47 2111.35,1210.94 2111.94,1208.43 2112.52,1210.84 2113.11,1212.07 2113.7,1214.51 2114.28,1215.52 2114.87,1216.57 2115.46,1214.87 2116.04,1212.22 2116.63,1210.75 2117.22,1211.77 2117.8,1211.71 2118.39,1211.65 2118.97,1211.48 2119.56,1211.28 2120.15,1209.9 2120.73,1210.03 2121.32,1208.62 2121.91,1207.09 2122.49,1207.34 2123.08,1208.58 2123.67,1209.85 2124.25,1209.78 2124.84,1210.03 2125.42,1211.63 2126.01,1212.84 2126.6,1212.91 2127.18,1212.78 2127.77,1212.66 2128.36,1211.11 2128.94,1208.43 2129.53,1208.54 2130.12,1208.59 2130.7,1210.14 2131.29,1209.96 2131.88,1208.78 2132.46,1207.77 2133.05,1208.04 2133.63,1208.1 2134.22,1207.11 2134.81,1206.21 2135.39,1205.21 2135.98,1205.63 2136.57,1204.71 2137.15,1205.07 2137.74,1205.41 2138.33,1209.79 2138.91,1209.64 2139.5,1212.46 2140.09,1212.44 2140.67,1215.08 2141.26,1217.2 2141.84,1215.56 2142.43,1215.42 2143.02,1212.71 2143.6,1211.28 2144.19,1209.94 2144.78,1204.77 2145.36,1203.56 2145.95,1205.31 2146.54,1205.58 2147.12,1205.92 2147.71,1202.27 2148.3,1202.47 2148.88,1202.9 2149.47,1201.76 2150.05,1203.63 2150.64,1203.99 2151.23,1205.7 2151.81,1205.57 2152.4,1205.76 2152.99,1203.5 2153.57,1206.33 2154.16,1205.52 2154.75,1203.16 2155.33,1201.9 2155.92,1199.76 2156.5,1201.64 2157.09,1204.88 2157.68,1205.45 2158.26,1204.38 \"/>\n<path clip-path=\"url(#clip242)\" d=\"M986.025 1210.66 L986.612 1210.66 L987.198 1210.66 L987.785 1210.66 L988.371 1210.66 L988.957 1210.66 L989.544 1210.66 L990.13 1210.66 L990.717 1210.66 L991.303 1210.66 L991.889 1210.66 L992.476 1210.66 L993.062 1210.66 L993.649 1210.66 L994.235 1210.66 L994.822 1210.66 L995.408 1210.66 L995.994 1210.66 L996.581 1210.66 L997.167 1210.66 L997.754 1210.66 L998.34 1210.66 L998.926 1210.66 L999.513 1210.66 L1000.1 1210.66 L1000.69 1210.66 L1001.27 1210.66 L1001.86 1210.66 L1002.44 1210.66 L1003.03 1210.66 L1003.62 1210.66 L1004.2 1210.66 L1004.79 1210.66 L1005.38 1210.66 L1005.96 1210.66 L1006.55 1210.66 L1007.14 1210.66 L1007.72 1210.66 L1008.31 1210.66 L1008.9 1210.66 L1009.48 1210.66 L1010.07 1210.66 L1010.65 1210.66 L1011.24 1210.66 L1011.83 1210.66 L1012.41 1210.66 L1013 1210.66 L1013.59 1210.66 L1014.17 1210.66 L1014.76 1210.66 L1015.35 1210.66 L1015.93 1210.66 L1016.52 1210.66 L1017.11 1210.66 L1017.69 1210.66 L1018.28 1210.66 L1018.86 1210.66 L1019.45 1210.66 L1020.04 1210.66 L1020.62 1210.66 L1021.21 1210.66 L1021.8 1210.66 L1022.38 1210.66 L1022.97 1210.66 L1023.56 1210.66 L1024.14 1210.66 L1024.73 1210.66 L1025.32 1210.66 L1025.9 1210.66 L1026.49 1210.66 L1027.07 1210.66 L1027.66 1210.66 L1028.25 1210.66 L1028.83 1210.66 L1029.42 1210.66 L1030.01 1210.66 L1030.59 1210.66 L1031.18 1210.66 L1031.77 1210.66 L1032.35 1210.66 L1032.94 1210.66 L1033.52 1210.66 L1034.11 1210.66 L1034.7 1210.66 L1035.28 1210.66 L1035.87 1210.66 L1036.46 1210.66 L1037.04 1210.66 L1037.63 1210.66 L1038.22 1210.66 L1038.8 1210.66 L1039.39 1210.66 L1039.98 1210.66 L1040.56 1210.66 L1041.15 1210.66 L1041.73 1210.66 L1042.32 1210.66 L1042.91 1210.66 L1043.49 1210.66 L1044.08 1210.66 L1044.67 1210.66 L1045.25 1210.66 L1045.84 1210.66 L1046.43 1210.66 L1047.01 1210.66 L1047.6 1210.66 L1048.19 1210.66 L1048.77 1210.66 L1049.36 1210.66 L1049.94 1210.66 L1050.53 1210.66 L1051.12 1210.66 L1051.7 1210.66 L1052.29 1210.66 L1052.88 1210.66 L1053.46 1210.66 L1054.05 1210.66 L1054.64 1210.66 L1055.22 1210.66 L1055.81 1210.66 L1056.39 1210.66 L1056.98 1210.66 L1057.57 1210.66 L1058.15 1210.66 L1058.74 1210.66 L1059.33 1210.66 L1059.91 1210.66 L1060.5 1210.66 L1061.09 1210.66 L1061.67 1210.66 L1062.26 1210.66 L1062.85 1210.66 L1063.43 1210.66 L1064.02 1210.66 L1064.6 1210.66 L1065.19 1210.66 L1065.78 1210.66 L1066.36 1210.66 L1066.95 1210.66 L1067.54 1210.66 L1068.12 1210.66 L1068.71 1210.66 L1069.3 1210.66 L1069.88 1210.66 L1070.47 1210.66 L1071.06 1210.66 L1071.64 1210.66 L1072.23 1210.66 L1072.81 1210.66 L1073.4 1210.66 L1073.99 1210.66 L1074.57 1210.66 L1075.16 1210.66 L1075.75 1210.66 L1076.33 1210.66 L1076.92 1210.66 L1077.51 1210.66 L1078.09 1210.66 L1078.68 1210.66 L1079.26 1210.66 L1079.85 1210.66 L1080.44 1210.66 L1081.02 1210.66 L1081.61 1210.66 L1082.2 1210.66 L1082.78 1210.66 L1083.37 1210.66 L1083.96 1210.66 L1084.54 1210.66 L1085.13 1210.66 L1085.72 1210.66 L1086.3 1210.66 L1086.89 1210.66 L1087.47 1210.66 L1088.06 1210.66 L1088.65 1210.66 L1089.23 1210.66 L1089.82 1210.66 L1090.41 1210.66 L1090.99 1210.66 L1091.58 1210.66 L1092.17 1210.66 L1092.75 1210.66 L1093.34 1210.66 L1093.93 1210.66 L1094.51 1210.66 L1095.1 1210.66 L1095.68 1210.66 L1096.27 1210.66 L1096.86 1210.66 L1097.44 1210.66 L1098.03 1210.66 L1098.62 1210.66 L1099.2 1210.66 L1099.79 1210.66 L1100.38 1210.66 L1100.96 1210.66 L1101.55 1210.66 L1102.14 1210.66 L1102.72 1210.66 L1103.31 1210.66 L1103.89 1210.66 L1104.48 1210.66 L1105.07 1210.66 L1105.65 1210.66 L1106.24 1210.66 L1106.83 1210.66 L1107.41 1210.66 L1108 1210.66 L1108.59 1210.66 L1109.17 1210.66 L1109.76 1210.66 L1110.34 1210.66 L1110.93 1210.66 L1111.52 1210.66 L1112.1 1210.66 L1112.69 1210.66 L1113.28 1210.66 L1113.86 1210.66 L1114.45 1210.66 L1115.04 1210.66 L1115.62 1210.66 L1116.21 1210.66 L1116.8 1210.66 L1117.38 1210.66 L1117.97 1210.66 L1118.55 1210.66 L1119.14 1210.66 L1119.73 1210.66 L1120.31 1210.66 L1120.9 1210.66 L1121.49 1210.66 L1122.07 1210.66 L1122.66 1210.66 L1123.25 1210.66 L1123.83 1210.66 L1124.42 1210.66 L1125.01 1210.66 L1125.59 1210.66 L1126.18 1210.66 L1126.76 1210.66 L1127.35 1210.66 L1127.94 1210.66 L1128.52 1210.66 L1129.11 1210.66 L1129.7 1210.66 L1130.28 1210.66 L1130.87 1210.66 L1131.46 1210.66 L1132.04 1210.66 L1132.63 1210.66 L1133.21 1210.66 L1133.8 1210.66 L1134.39 1210.66 L1134.97 1210.66 L1135.56 1210.66 L1136.15 1210.66 L1136.73 1210.66 L1137.32 1210.66 L1137.91 1210.66 L1138.49 1210.66 L1139.08 1210.66 L1139.67 1210.66 L1140.25 1210.66 L1140.84 1210.66 L1141.42 1210.66 L1142.01 1210.66 L1142.6 1210.66 L1143.18 1210.66 L1143.77 1210.66 L1144.36 1210.66 L1144.94 1210.66 L1145.53 1210.66 L1146.12 1210.66 L1146.7 1210.66 L1147.29 1210.66 L1147.88 1210.66 L1148.46 1210.66 L1149.05 1210.66 L1149.63 1210.66 L1150.22 1210.66 L1150.81 1210.66 L1151.39 1210.66 L1151.98 1210.66 L1152.57 1210.66 L1153.15 1210.66 L1153.74 1210.66 L1154.33 1210.66 L1154.91 1210.66 L1155.5 1210.66 L1156.09 1210.66 L1156.67 1210.66 L1157.26 1210.66 L1157.84 1210.66 L1158.43 1210.66 L1159.02 1210.66 L1159.6 1210.66 L1160.19 1210.66 L1160.78 1210.66 L1161.36 1210.66 L1161.95 1210.66 L1162.54 1210.66 L1163.12 1210.66 L1163.71 1210.66 L1164.29 1210.66 L1164.88 1210.66 L1165.47 1210.66 L1166.05 1210.66 L1166.64 1210.66 L1167.23 1210.66 L1167.81 1210.66 L1168.4 1210.66 L1168.99 1210.66 L1169.57 1210.66 L1170.16 1210.66 L1170.75 1210.66 L1171.33 1210.66 L1171.92 1210.66 L1172.5 1210.66 L1173.09 1210.66 L1173.68 1210.66 L1174.26 1210.66 L1174.85 1210.66 L1175.44 1210.66 L1176.02 1210.66 L1176.61 1210.66 L1177.2 1210.66 L1177.78 1210.66 L1178.37 1210.66 L1178.96 1210.66 L1179.54 1210.66 L1180.13 1210.66 L1180.71 1210.66 L1181.3 1210.66 L1181.89 1210.66 L1182.47 1210.66 L1183.06 1210.66 L1183.65 1210.66 L1184.23 1210.66 L1184.82 1210.66 L1185.41 1210.66 L1185.99 1210.66 L1186.58 1210.66 L1187.16 1210.66 L1187.75 1210.66 L1188.34 1210.66 L1188.92 1210.66 L1189.51 1210.66 L1190.1 1210.66 L1190.68 1210.66 L1191.27 1210.66 L1191.86 1210.66 L1192.44 1210.66 L1193.03 1210.66 L1193.62 1210.66 L1194.2 1210.66 L1194.79 1210.66 L1195.37 1210.66 L1195.96 1210.66 L1196.55 1210.66 L1197.13 1210.66 L1197.72 1210.66 L1198.31 1210.66 L1198.89 1210.66 L1199.48 1210.66 L1200.07 1210.66 L1200.65 1210.66 L1201.24 1210.66 L1201.83 1210.66 L1202.41 1210.66 L1203 1210.66 L1203.58 1210.66 L1204.17 1210.66 L1204.76 1210.66 L1205.34 1210.66 L1205.93 1210.66 L1206.52 1210.66 L1207.1 1210.66 L1207.69 1210.66 L1208.28 1210.66 L1208.86 1210.66 L1209.45 1210.66 L1210.03 1210.66 L1210.62 1210.66 L1211.21 1210.66 L1211.79 1210.66 L1212.38 1210.66 L1212.97 1210.66 L1213.55 1210.66 L1214.14 1210.66 L1214.73 1210.66 L1215.31 1210.66 L1215.9 1210.66 L1216.49 1210.66 L1217.07 1210.66 L1217.66 1210.66 L1218.24 1210.66 L1218.83 1210.66 L1219.42 1210.66 L1220 1210.66 L1220.59 1210.66 L1221.18 1210.66 L1221.76 1210.66 L1222.35 1210.66 L1222.94 1210.66 L1223.52 1210.66 L1224.11 1210.66 L1224.7 1210.66 L1225.28 1210.66 L1225.87 1210.66 L1226.45 1210.66 L1227.04 1210.66 L1227.63 1210.66 L1228.21 1210.66 L1228.8 1210.66 L1229.39 1210.66 L1229.97 1210.66 L1230.56 1210.66 L1231.15 1210.66 L1231.73 1210.66 L1232.32 1210.66 L1232.91 1210.66 L1233.49 1210.66 L1234.08 1210.66 L1234.66 1210.66 L1235.25 1210.66 L1235.84 1210.66 L1236.42 1210.66 L1237.01 1210.66 L1237.6 1210.66 L1238.18 1210.66 L1238.77 1210.66 L1239.36 1210.66 L1239.94 1210.66 L1240.53 1210.66 L1241.11 1210.66 L1241.7 1210.66 L1242.29 1210.66 L1242.87 1210.66 L1243.46 1210.66 L1244.05 1210.66 L1244.63 1210.66 L1245.22 1210.66 L1245.81 1210.66 L1246.39 1210.66 L1246.98 1210.66 L1247.57 1210.66 L1248.15 1210.66 L1248.74 1210.66 L1249.32 1210.66 L1249.91 1210.66 L1250.5 1210.66 L1251.08 1210.66 L1251.67 1210.66 L1252.26 1210.66 L1252.84 1210.66 L1253.43 1210.66 L1254.02 1210.66 L1254.6 1210.66 L1255.19 1210.66 L1255.78 1210.66 L1256.36 1210.66 L1256.95 1210.66 L1257.53 1210.66 L1258.12 1210.66 L1258.71 1210.66 L1259.29 1210.66 L1259.88 1210.66 L1260.47 1210.66 L1261.05 1210.66 L1261.64 1210.66 L1262.23 1210.66 L1262.81 1210.66 L1263.4 1210.66 L1263.98 1210.66 L1264.57 1210.66 L1265.16 1210.66 L1265.74 1210.66 L1266.33 1210.66 L1266.92 1210.66 L1267.5 1210.66 L1268.09 1210.66 L1268.68 1210.66 L1269.26 1210.66 L1269.85 1210.66 L1270.44 1210.66 L1271.02 1210.66 L1271.61 1210.66 L1272.19 1210.66 L1272.78 1210.66 L1273.37 1210.66 L1273.95 1210.66 L1274.54 1210.66 L1275.13 1210.66 L1275.71 1210.66 L1276.3 1210.66 L1276.89 1210.66 L1277.47 1210.66 L1278.06 1210.66 L1278.65 1210.66 L1279.23 1210.66 L1279.82 1210.66 L1280.4 1210.66 L1280.99 1210.66 L1281.58 1210.66 L1282.16 1210.66 L1282.75 1210.66 L1283.34 1210.66 L1283.92 1210.66 L1284.51 1210.66 L1285.1 1210.66 L1285.68 1210.66 L1286.27 1210.66 L1286.86 1210.66 L1287.44 1210.66 L1288.03 1210.66 L1288.61 1210.66 L1289.2 1210.66 L1289.79 1210.66 L1290.37 1210.66 L1290.96 1210.66 L1291.55 1210.66 L1292.13 1210.66 L1292.72 1210.66 L1293.31 1210.66 L1293.89 1210.66 L1294.48 1210.66 L1295.06 1210.66 L1295.65 1210.66 L1296.24 1210.66 L1296.82 1210.66 L1297.41 1210.66 L1298 1210.66 L1298.58 1210.66 L1299.17 1210.66 L1299.76 1210.66 L1300.34 1210.66 L1300.93 1210.66 L1301.52 1210.66 L1302.1 1210.66 L1302.69 1210.66 L1303.27 1210.66 L1303.86 1210.66 L1304.45 1210.66 L1305.03 1210.66 L1305.62 1210.66 L1306.21 1210.66 L1306.79 1210.66 L1307.38 1210.66 L1307.97 1210.66 L1308.55 1210.66 L1309.14 1210.66 L1309.73 1210.66 L1310.31 1210.66 L1310.9 1210.66 L1311.48 1210.66 L1312.07 1210.66 L1312.66 1210.66 L1313.24 1210.66 L1313.83 1210.66 L1314.42 1210.66 L1315 1210.66 L1315.59 1210.66 L1316.18 1210.66 L1316.76 1210.66 L1317.35 1210.66 L1317.93 1210.66 L1318.52 1210.66 L1319.11 1210.66 L1319.69 1210.66 L1320.28 1210.66 L1320.87 1210.66 L1321.45 1210.66 L1322.04 1210.66 L1322.63 1210.66 L1323.21 1210.66 L1323.8 1210.66 L1324.39 1210.66 L1324.97 1210.66 L1325.56 1210.66 L1326.14 1210.66 L1326.73 1210.66 L1327.32 1210.66 L1327.9 1210.66 L1328.49 1210.66 L1329.08 1210.66 L1329.66 1210.66 L1330.25 1210.66 L1330.84 1210.66 L1331.42 1210.66 L1332.01 1210.66 L1332.6 1210.66 L1333.18 1210.66 L1333.77 1210.66 L1334.35 1210.66 L1334.94 1210.66 L1335.53 1210.66 L1336.11 1210.66 L1336.7 1210.66 L1337.29 1210.66 L1337.87 1210.66 L1338.46 1210.66 L1339.05 1210.66 L1339.63 1210.66 L1340.22 1210.66 L1340.8 1210.66 L1341.39 1210.66 L1341.98 1210.66 L1342.56 1210.66 L1343.15 1210.66 L1343.74 1210.66 L1344.32 1210.66 L1344.91 1210.66 L1345.5 1210.66 L1346.08 1210.66 L1346.67 1210.66 L1347.26 1210.66 L1347.84 1210.66 L1348.43 1210.66 L1349.01 1210.66 L1349.6 1210.66 L1350.19 1210.66 L1350.77 1210.66 L1351.36 1210.66 L1351.95 1210.66 L1352.53 1210.66 L1353.12 1210.66 L1353.71 1210.66 L1354.29 1210.66 L1354.88 1210.66 L1355.47 1210.66 L1356.05 1210.66 L1356.64 1210.66 L1357.22 1210.66 L1357.81 1210.66 L1358.4 1210.66 L1358.98 1210.66 L1359.57 1210.66 L1360.16 1210.66 L1360.74 1210.66 L1361.33 1210.66 L1361.92 1210.66 L1362.5 1210.66 L1363.09 1210.66 L1363.68 1210.66 L1364.26 1210.66 L1364.85 1210.66 L1365.43 1210.66 L1366.02 1210.66 L1366.61 1210.66 L1367.19 1210.66 L1367.78 1210.66 L1368.37 1210.66 L1368.95 1210.66 L1369.54 1210.66 L1370.13 1210.66 L1370.71 1210.66 L1371.3 1210.66 L1371.88 1210.66 L1372.47 1210.66 L1373.06 1210.66 L1373.64 1210.66 L1374.23 1210.66 L1374.82 1210.66 L1375.4 1210.66 L1375.99 1210.66 L1376.58 1210.66 L1377.16 1210.66 L1377.75 1210.66 L1378.34 1210.66 L1378.92 1210.66 L1379.51 1210.66 L1380.09 1210.66 L1380.68 1210.66 L1381.27 1210.66 L1381.85 1210.66 L1382.44 1210.66 L1383.03 1210.66 L1383.61 1210.66 L1384.2 1210.66 L1384.79 1210.66 L1385.37 1210.66 L1385.96 1210.66 L1386.55 1210.66 L1387.13 1210.66 L1387.72 1210.66 L1388.3 1210.66 L1388.89 1210.66 L1389.48 1210.66 L1390.06 1210.66 L1390.65 1210.66 L1391.24 1210.66 L1391.82 1210.66 L1392.41 1210.66 L1393 1210.66 L1393.58 1210.66 L1394.17 1210.66 L1394.75 1210.66 L1395.34 1210.66 L1395.93 1210.66 L1396.51 1210.66 L1397.1 1210.66 L1397.69 1210.66 L1398.27 1210.66 L1398.86 1210.66 L1399.45 1210.66 L1400.03 1210.66 L1400.62 1210.66 L1401.21 1210.66 L1401.79 1210.66 L1402.38 1210.66 L1402.96 1210.66 L1403.55 1210.66 L1404.14 1210.66 L1404.72 1210.66 L1405.31 1210.66 L1405.9 1210.66 L1406.48 1210.66 L1407.07 1210.66 L1407.66 1210.66 L1408.24 1210.66 L1408.83 1210.66 L1409.42 1210.66 L1410 1210.66 L1410.59 1210.66 L1411.17 1210.66 L1411.76 1210.66 L1412.35 1210.66 L1412.93 1210.66 L1413.52 1210.66 L1414.11 1210.66 L1414.69 1210.66 L1415.28 1210.66 L1415.87 1210.66 L1416.45 1210.66 L1417.04 1210.66 L1417.63 1210.66 L1418.21 1210.66 L1418.8 1210.66 L1419.38 1210.66 L1419.97 1210.66 L1420.56 1210.66 L1421.14 1210.66 L1421.73 1210.66 L1422.32 1210.66 L1422.9 1210.66 L1423.49 1210.66 L1424.08 1210.66 L1424.66 1210.66 L1425.25 1210.66 L1425.83 1210.66 L1426.42 1210.66 L1427.01 1210.66 L1427.59 1210.66 L1428.18 1210.66 L1428.77 1210.66 L1429.35 1210.66 L1429.94 1210.66 L1430.53 1210.66 L1431.11 1210.66 L1431.7 1210.66 L1432.29 1210.66 L1432.87 1210.66 L1433.46 1210.66 L1434.04 1210.66 L1434.63 1210.66 L1435.22 1210.66 L1435.8 1210.66 L1436.39 1210.66 L1436.98 1210.66 L1437.56 1210.66 L1438.15 1210.66 L1438.74 1210.66 L1439.32 1210.66 L1439.91 1210.66 L1440.5 1210.66 L1441.08 1210.66 L1441.67 1210.66 L1442.25 1210.66 L1442.84 1210.66 L1443.43 1210.66 L1444.01 1210.66 L1444.6 1210.66 L1445.19 1210.66 L1445.77 1210.66 L1446.36 1210.66 L1446.95 1210.66 L1447.53 1210.66 L1448.12 1210.66 L1448.7 1210.66 L1449.29 1210.66 L1449.88 1210.66 L1450.46 1210.66 L1451.05 1210.66 L1451.64 1210.66 L1452.22 1210.66 L1452.81 1210.66 L1453.4 1210.66 L1453.98 1210.66 L1454.57 1210.66 L1455.16 1210.66 L1455.74 1210.66 L1456.33 1210.66 L1456.91 1210.66 L1457.5 1210.66 L1458.09 1210.66 L1458.67 1210.66 L1459.26 1210.66 L1459.85 1210.66 L1460.43 1210.66 L1461.02 1210.66 L1461.61 1210.66 L1462.19 1210.66 L1462.78 1210.66 L1463.37 1210.66 L1463.95 1210.66 L1464.54 1210.66 L1465.12 1210.66 L1465.71 1210.66 L1466.3 1210.66 L1466.88 1210.66 L1467.47 1210.66 L1468.06 1210.66 L1468.64 1210.66 L1469.23 1210.66 L1469.82 1210.66 L1470.4 1210.66 L1470.99 1210.66 L1471.57 1210.66 L1472.16 1210.66 L1472.75 1210.66 L1473.33 1210.66 L1473.92 1210.66 L1474.51 1210.66 L1475.09 1210.66 L1475.68 1210.66 L1476.27 1210.66 L1476.85 1210.66 L1477.44 1210.66 L1478.03 1210.66 L1478.61 1210.66 L1479.2 1210.66 L1479.78 1210.66 L1480.37 1210.66 L1480.96 1210.66 L1481.54 1210.66 L1482.13 1210.66 L1482.72 1210.66 L1483.3 1210.66 L1483.89 1210.66 L1484.48 1210.66 L1485.06 1210.66 L1485.65 1210.66 L1486.24 1210.66 L1486.82 1210.66 L1487.41 1210.66 L1487.99 1210.66 L1488.58 1210.66 L1489.17 1210.66 L1489.75 1210.66 L1490.34 1210.66 L1490.93 1210.66 L1491.51 1210.66 L1492.1 1210.66 L1492.69 1210.66 L1493.27 1210.66 L1493.86 1210.66 L1494.45 1210.66 L1495.03 1210.66 L1495.62 1210.66 L1496.2 1210.66 L1496.79 1210.66 L1497.38 1210.66 L1497.96 1210.66 L1498.55 1210.66 L1499.14 1210.66 L1499.72 1210.66 L1500.31 1210.66 L1500.9 1210.66 L1501.48 1210.66 L1502.07 1210.66 L1502.65 1210.66 L1503.24 1210.66 L1503.83 1210.66 L1504.41 1210.66 L1505 1210.66 L1505.59 1210.66 L1506.17 1210.66 L1506.76 1210.66 L1507.35 1210.66 L1507.93 1210.66 L1508.52 1210.66 L1509.11 1210.66 L1509.69 1210.66 L1510.28 1210.66 L1510.86 1210.66 L1511.45 1210.66 L1512.04 1210.66 L1512.62 1210.66 L1513.21 1210.66 L1513.8 1210.66 L1514.38 1210.66 L1514.97 1210.66 L1515.56 1210.66 L1516.14 1210.66 L1516.73 1210.66 L1517.32 1210.66 L1517.9 1210.66 L1518.49 1210.66 L1519.07 1210.66 L1519.66 1210.66 L1520.25 1210.66 L1520.83 1210.66 L1521.42 1210.66 L1522.01 1210.66 L1522.59 1210.66 L1523.18 1210.66 L1523.77 1210.66 L1524.35 1210.66 L1524.94 1210.66 L1525.52 1210.66 L1526.11 1210.66 L1526.7 1210.66 L1527.28 1210.66 L1527.87 1210.66 L1528.46 1210.66 L1529.04 1210.66 L1529.63 1210.66 L1530.22 1210.66 L1530.8 1210.66 L1531.39 1210.66 L1531.98 1210.66 L1532.56 1210.66 L1533.15 1210.66 L1533.73 1210.66 L1534.32 1210.66 L1534.91 1210.66 L1535.49 1210.66 L1536.08 1210.66 L1536.67 1210.66 L1537.25 1210.66 L1537.84 1210.66 L1538.43 1210.66 L1539.01 1210.66 L1539.6 1210.66 L1540.19 1210.66 L1540.77 1210.66 L1541.36 1210.66 L1541.94 1210.66 L1542.53 1210.66 L1543.12 1210.66 L1543.7 1210.66 L1544.29 1210.66 L1544.88 1210.66 L1545.46 1210.66 L1546.05 1210.66 L1546.64 1210.66 L1547.22 1210.66 L1547.81 1210.66 L1548.4 1210.66 L1548.98 1210.66 L1549.57 1210.66 L1550.15 1210.66 L1550.74 1210.66 L1551.33 1210.66 L1551.91 1210.66 L1552.5 1210.66 L1553.09 1210.66 L1553.67 1210.66 L1554.26 1210.66 L1554.85 1210.66 L1555.43 1210.66 L1556.02 1210.66 L1556.6 1210.66 L1557.19 1210.66 L1557.78 1210.66 L1558.36 1210.66 L1558.95 1210.66 L1559.54 1210.66 L1560.12 1210.66 L1560.71 1210.66 L1561.3 1210.66 L1561.88 1210.66 L1562.47 1210.66 L1563.06 1210.66 L1563.64 1210.66 L1564.23 1210.66 L1564.81 1210.66 L1565.4 1210.66 L1565.99 1210.66 L1566.57 1210.66 L1567.16 1210.66 L1567.75 1210.66 L1568.33 1210.66 L1568.92 1210.66 L1569.51 1210.66 L1570.09 1210.66 L1570.68 1210.66 L1571.27 1210.66 L1571.85 1210.66 L1572.44 1210.66 L1573.02 1210.66 L1573.61 1210.66 L1574.2 1210.66 L1574.78 1210.66 L1575.37 1210.66 L1575.96 1210.66 L1576.54 1210.66 L1577.13 1210.66 L1577.72 1210.66 L1578.3 1210.66 L1578.89 1210.66 L1579.47 1210.66 L1580.06 1210.66 L1580.65 1210.66 L1581.23 1210.66 L1581.82 1210.66 L1582.41 1210.66 L1582.99 1210.66 L1583.58 1210.66 L1584.17 1210.66 L1584.75 1210.66 L1585.34 1210.66 L1585.93 1210.66 L1586.51 1210.66 L1587.1 1210.66 L1587.68 1210.66 L1588.27 1210.66 L1588.86 1210.66 L1589.44 1210.66 L1590.03 1210.66 L1590.62 1210.66 L1591.2 1210.66 L1591.79 1210.66 L1592.38 1210.66 L1592.96 1210.66 L1593.55 1210.66 L1594.14 1210.66 L1594.72 1210.66 L1595.31 1210.66 L1595.89 1210.66 L1596.48 1210.66 L1597.07 1210.66 L1597.65 1210.66 L1598.24 1210.66 L1598.83 1210.66 L1599.41 1210.66 L1600 1210.66 L1600.59 1210.66 L1601.17 1210.66 L1601.76 1210.66 L1602.34 1210.66 L1602.93 1210.66 L1603.52 1210.66 L1604.1 1210.66 L1604.69 1210.66 L1605.28 1210.66 L1605.86 1210.66 L1606.45 1210.66 L1607.04 1210.66 L1607.62 1210.66 L1608.21 1210.66 L1608.8 1210.66 L1609.38 1210.66 L1609.97 1210.66 L1610.55 1210.66 L1611.14 1210.66 L1611.73 1210.66 L1612.31 1210.66 L1612.9 1210.66 L1613.49 1210.66 L1614.07 1210.66 L1614.66 1210.66 L1615.25 1210.66 L1615.83 1210.66 L1616.42 1210.66 L1617.01 1210.66 L1617.59 1210.66 L1618.18 1210.66 L1618.76 1210.66 L1619.35 1210.66 L1619.94 1210.66 L1620.52 1210.66 L1621.11 1210.66 L1621.7 1210.66 L1622.28 1210.66 L1622.87 1210.66 L1623.46 1210.66 L1624.04 1210.66 L1624.63 1210.66 L1625.22 1210.66 L1625.8 1210.66 L1626.39 1210.66 L1626.97 1210.66 L1627.56 1210.66 L1628.15 1210.66 L1628.73 1210.66 L1629.32 1210.66 L1629.91 1210.66 L1630.49 1210.66 L1631.08 1210.66 L1631.67 1210.66 L1632.25 1210.66 L1632.84 1210.66 L1633.42 1210.66 L1634.01 1210.66 L1634.6 1210.66 L1635.18 1210.66 L1635.77 1210.66 L1636.36 1210.66 L1636.94 1210.66 L1637.53 1210.66 L1638.12 1210.66 L1638.7 1210.66 L1639.29 1210.66 L1639.88 1210.66 L1640.46 1210.66 L1641.05 1210.66 L1641.63 1210.66 L1642.22 1210.66 L1642.81 1210.66 L1643.39 1210.66 L1643.98 1210.66 L1644.57 1210.66 L1645.15 1210.66 L1645.74 1210.66 L1646.33 1210.66 L1646.91 1210.66 L1647.5 1210.66 L1648.09 1210.66 L1648.67 1210.66 L1649.26 1210.66 L1649.84 1210.66 L1650.43 1210.66 L1651.02 1210.66 L1651.6 1210.66 L1652.19 1210.66 L1652.78 1210.66 L1653.36 1210.66 L1653.95 1210.66 L1654.54 1210.66 L1655.12 1210.66 L1655.71 1210.66 L1656.29 1210.66 L1656.88 1210.66 L1657.47 1210.66 L1658.05 1210.66 L1658.64 1210.66 L1659.23 1210.66 L1659.81 1210.66 L1660.4 1210.66 L1660.99 1210.66 L1661.57 1210.66 L1662.16 1210.66 L1662.75 1210.66 L1663.33 1210.66 L1663.92 1210.66 L1664.5 1210.66 L1665.09 1210.66 L1665.68 1210.66 L1666.26 1210.66 L1666.85 1210.66 L1667.44 1210.66 L1668.02 1210.66 L1668.61 1210.66 L1669.2 1210.66 L1669.78 1210.66 L1670.37 1210.66 L1670.96 1210.66 L1671.54 1210.66 L1672.13 1210.66 L1672.71 1210.66 L1673.3 1210.66 L1673.89 1210.66 L1674.47 1210.66 L1675.06 1210.66 L1675.65 1210.66 L1676.23 1210.66 L1676.82 1210.66 L1677.41 1210.66 L1677.99 1210.66 L1678.58 1210.66 L1679.17 1210.66 L1679.75 1210.66 L1680.34 1210.66 L1680.92 1210.66 L1681.51 1210.66 L1682.1 1210.66 L1682.68 1210.66 L1683.27 1210.66 L1683.86 1210.66 L1684.44 1210.66 L1685.03 1210.66 L1685.62 1210.66 L1686.2 1210.66 L1686.79 1210.66 L1687.37 1210.66 L1687.96 1210.66 L1688.55 1210.66 L1689.13 1210.66 L1689.72 1210.66 L1690.31 1210.66 L1690.89 1210.66 L1691.48 1210.66 L1692.07 1210.66 L1692.65 1210.66 L1693.24 1210.66 L1693.83 1210.66 L1694.41 1210.66 L1695 1210.66 L1695.58 1210.66 L1696.17 1210.66 L1696.76 1210.66 L1697.34 1210.66 L1697.93 1210.66 L1698.52 1210.66 L1699.1 1210.66 L1699.69 1210.66 L1700.28 1210.66 L1700.86 1210.66 L1701.45 1210.66 L1702.04 1210.66 L1702.62 1210.66 L1703.21 1210.66 L1703.79 1210.66 L1704.38 1210.66 L1704.97 1210.66 L1705.55 1210.66 L1706.14 1210.66 L1706.73 1210.66 L1707.31 1210.66 L1707.9 1210.66 L1708.49 1210.66 L1709.07 1210.66 L1709.66 1210.66 L1710.24 1210.66 L1710.83 1210.66 L1711.42 1210.66 L1712 1210.66 L1712.59 1210.66 L1713.18 1210.66 L1713.76 1210.66 L1714.35 1210.66 L1714.94 1210.66 L1715.52 1210.66 L1716.11 1210.66 L1716.7 1210.66 L1717.28 1210.66 L1717.87 1210.66 L1718.45 1210.66 L1719.04 1210.66 L1719.63 1210.66 L1720.21 1210.66 L1720.8 1210.66 L1721.39 1210.66 L1721.97 1210.66 L1722.56 1210.66 L1723.15 1210.66 L1723.73 1210.66 L1724.32 1210.66 L1724.91 1210.66 L1725.49 1210.66 L1726.08 1210.66 L1726.66 1210.66 L1727.25 1210.66 L1727.84 1210.66 L1728.42 1210.66 L1729.01 1210.66 L1729.6 1210.66 L1730.18 1210.66 L1730.77 1210.66 L1731.36 1210.66 L1731.94 1210.66 L1732.53 1210.66 L1733.11 1210.66 L1733.7 1210.66 L1734.29 1210.66 L1734.87 1210.66 L1735.46 1210.66 L1736.05 1210.66 L1736.63 1210.66 L1737.22 1210.66 L1737.81 1210.66 L1738.39 1210.66 L1738.98 1210.66 L1739.57 1210.66 L1740.15 1210.66 L1740.74 1210.66 L1741.32 1210.66 L1741.91 1210.66 L1742.5 1210.66 L1743.08 1210.66 L1743.67 1210.66 L1744.26 1210.66 L1744.84 1210.66 L1745.43 1210.66 L1746.02 1210.66 L1746.6 1210.66 L1747.19 1210.66 L1747.78 1210.66 L1748.36 1210.66 L1748.95 1210.66 L1749.53 1210.66 L1750.12 1210.66 L1750.71 1210.66 L1751.29 1210.66 L1751.88 1210.66 L1752.47 1210.66 L1753.05 1210.66 L1753.64 1210.66 L1754.23 1210.66 L1754.81 1210.66 L1755.4 1210.66 L1755.99 1210.66 L1756.57 1210.66 L1757.16 1210.66 L1757.74 1210.66 L1758.33 1210.66 L1758.92 1210.66 L1759.5 1210.66 L1760.09 1210.66 L1760.68 1210.66 L1761.26 1210.66 L1761.85 1210.66 L1762.44 1210.66 L1763.02 1210.66 L1763.61 1210.66 L1764.19 1210.66 L1764.78 1210.66 L1765.37 1210.66 L1765.95 1210.66 L1766.54 1210.66 L1767.13 1210.66 L1767.71 1210.66 L1768.3 1210.66 L1768.89 1210.66 L1769.47 1210.66 L1770.06 1210.66 L1770.65 1210.66 L1771.23 1210.66 L1771.82 1210.66 L1772.4 1210.66 L1772.99 1210.66 L1773.58 1210.66 L1774.16 1210.66 L1774.75 1210.66 L1775.34 1210.66 L1775.92 1210.66 L1776.51 1210.66 L1777.1 1210.66 L1777.68 1210.66 L1778.27 1210.66 L1778.86 1210.66 L1779.44 1210.66 L1780.03 1210.66 L1780.61 1210.66 L1781.2 1210.66 L1781.79 1210.66 L1782.37 1210.66 L1782.96 1210.66 L1783.55 1210.66 L1784.13 1210.66 L1784.72 1210.66 L1785.31 1210.66 L1785.89 1210.66 L1786.48 1210.66 L1787.06 1210.66 L1787.65 1210.66 L1788.24 1210.66 L1788.82 1210.66 L1789.41 1210.66 L1790 1210.66 L1790.58 1210.66 L1791.17 1210.66 L1791.76 1210.66 L1792.34 1210.66 L1792.93 1210.66 L1793.52 1210.66 L1794.1 1210.66 L1794.69 1210.66 L1795.27 1210.66 L1795.86 1210.66 L1796.45 1210.66 L1797.03 1210.66 L1797.62 1210.66 L1798.21 1210.66 L1798.79 1210.66 L1799.38 1210.66 L1799.97 1210.66 L1800.55 1210.66 L1801.14 1210.66 L1801.73 1210.66 L1802.31 1210.66 L1802.9 1210.66 L1803.48 1210.66 L1804.07 1210.66 L1804.66 1210.66 L1805.24 1210.66 L1805.83 1210.66 L1806.42 1210.66 L1807 1210.66 L1807.59 1210.66 L1808.18 1210.66 L1808.76 1210.66 L1809.35 1210.66 L1809.94 1210.66 L1810.52 1210.66 L1811.11 1210.66 L1811.69 1210.66 L1812.28 1210.66 L1812.87 1210.66 L1813.45 1210.66 L1814.04 1210.66 L1814.63 1210.66 L1815.21 1210.66 L1815.8 1210.66 L1816.39 1210.66 L1816.97 1210.66 L1817.56 1210.66 L1818.14 1210.66 L1818.73 1210.66 L1819.32 1210.66 L1819.9 1210.66 L1820.49 1210.66 L1821.08 1210.66 L1821.66 1210.66 L1822.25 1210.66 L1822.84 1210.66 L1823.42 1210.66 L1824.01 1210.66 L1824.6 1210.66 L1825.18 1210.66 L1825.77 1210.66 L1826.35 1210.66 L1826.94 1210.66 L1827.53 1210.66 L1828.11 1210.66 L1828.7 1210.66 L1829.29 1210.66 L1829.87 1210.66 L1830.46 1210.66 L1831.05 1210.66 L1831.63 1210.66 L1832.22 1210.66 L1832.81 1210.66 L1833.39 1210.66 L1833.98 1210.66 L1834.56 1210.66 L1835.15 1210.66 L1835.74 1210.66 L1836.32 1210.66 L1836.91 1210.66 L1837.5 1210.66 L1838.08 1210.66 L1838.67 1210.66 L1839.26 1210.66 L1839.84 1210.66 L1840.43 1210.66 L1841.01 1210.66 L1841.6 1210.66 L1842.19 1210.66 L1842.77 1210.66 L1843.36 1210.66 L1843.95 1210.66 L1844.53 1210.66 L1845.12 1210.66 L1845.71 1210.66 L1846.29 1210.66 L1846.88 1210.66 L1847.47 1210.66 L1848.05 1210.66 L1848.64 1210.66 L1849.22 1210.66 L1849.81 1210.66 L1850.4 1210.66 L1850.98 1210.66 L1851.57 1210.66 L1852.16 1210.66 L1852.74 1210.66 L1853.33 1210.66 L1853.92 1210.66 L1854.5 1210.66 L1855.09 1210.66 L1855.68 1210.66 L1856.26 1210.66 L1856.85 1210.66 L1857.43 1210.66 L1858.02 1210.66 L1858.61 1210.66 L1859.19 1210.66 L1859.78 1210.66 L1860.37 1210.66 L1860.95 1210.66 L1861.54 1210.66 L1862.13 1210.66 L1862.71 1210.66 L1863.3 1210.66 L1863.88 1210.66 L1864.47 1210.66 L1865.06 1210.66 L1865.64 1210.66 L1866.23 1210.66 L1866.82 1210.66 L1867.4 1210.66 L1867.99 1210.66 L1868.58 1210.66 L1869.16 1210.66 L1869.75 1210.66 L1870.34 1210.66 L1870.92 1210.66 L1871.51 1210.66 L1872.09 1210.66 L1872.68 1210.66 L1873.27 1210.66 L1873.85 1210.66 L1874.44 1210.66 L1875.03 1210.66 L1875.61 1210.66 L1876.2 1210.66 L1876.79 1210.66 L1877.37 1210.66 L1877.96 1210.66 L1878.55 1210.66 L1879.13 1210.66 L1879.72 1210.66 L1880.3 1210.66 L1880.89 1210.66 L1881.48 1210.66 L1882.06 1210.66 L1882.65 1210.66 L1883.24 1210.66 L1883.82 1210.66 L1884.41 1210.66 L1885 1210.66 L1885.58 1210.66 L1886.17 1210.66 L1886.76 1210.66 L1887.34 1210.66 L1887.93 1210.66 L1888.51 1210.66 L1889.1 1210.66 L1889.69 1210.66 L1890.27 1210.66 L1890.86 1210.66 L1891.45 1210.66 L1892.03 1210.66 L1892.62 1210.66 L1893.21 1210.66 L1893.79 1210.66 L1894.38 1210.66 L1894.96 1210.66 L1895.55 1210.66 L1896.14 1210.66 L1896.72 1210.66 L1897.31 1210.66 L1897.9 1210.66 L1898.48 1210.66 L1899.07 1210.66 L1899.66 1210.66 L1900.24 1210.66 L1900.83 1210.66 L1901.42 1210.66 L1902 1210.66 L1902.59 1210.66 L1903.17 1210.66 L1903.76 1210.66 L1904.35 1210.66 L1904.93 1210.66 L1905.52 1210.66 L1906.11 1210.66 L1906.69 1210.66 L1907.28 1210.66 L1907.87 1210.66 L1908.45 1210.66 L1909.04 1210.66 L1909.63 1210.66 L1910.21 1210.66 L1910.8 1210.66 L1911.38 1210.66 L1911.97 1210.66 L1912.56 1210.66 L1913.14 1210.66 L1913.73 1210.66 L1914.32 1210.66 L1914.9 1210.66 L1915.49 1210.66 L1916.08 1210.66 L1916.66 1210.66 L1917.25 1210.66 L1917.83 1210.66 L1918.42 1210.66 L1919.01 1210.66 L1919.59 1210.66 L1920.18 1210.66 L1920.77 1210.66 L1921.35 1210.66 L1921.94 1210.66 L1922.53 1210.66 L1923.11 1210.66 L1923.7 1210.66 L1924.29 1210.66 L1924.87 1210.66 L1925.46 1210.66 L1926.04 1210.66 L1926.63 1210.66 L1927.22 1210.66 L1927.8 1210.66 L1928.39 1210.66 L1928.98 1210.66 L1929.56 1210.66 L1930.15 1210.66 L1930.74 1210.66 L1931.32 1210.66 L1931.91 1210.66 L1932.5 1210.66 L1933.08 1210.66 L1933.67 1210.66 L1934.25 1210.66 L1934.84 1210.66 L1935.43 1210.66 L1936.01 1210.66 L1936.6 1210.66 L1937.19 1210.66 L1937.77 1210.66 L1938.36 1210.66 L1938.95 1210.66 L1939.53 1210.66 L1940.12 1210.66 L1940.71 1210.66 L1941.29 1210.66 L1941.88 1210.66 L1942.46 1210.66 L1943.05 1210.66 L1943.64 1210.66 L1944.22 1210.66 L1944.81 1210.66 L1945.4 1210.66 L1945.98 1210.66 L1946.57 1210.66 L1947.16 1210.66 L1947.74 1210.66 L1948.33 1210.66 L1948.91 1210.66 L1949.5 1210.66 L1950.09 1210.66 L1950.67 1210.66 L1951.26 1210.66 L1951.85 1210.66 L1952.43 1210.66 L1953.02 1210.66 L1953.61 1210.66 L1954.19 1210.66 L1954.78 1210.66 L1955.37 1210.66 L1955.95 1210.66 L1956.54 1210.66 L1957.12 1210.66 L1957.71 1210.66 L1958.3 1210.66 L1958.88 1210.66 L1959.47 1210.66 L1960.06 1210.66 L1960.64 1210.66 L1961.23 1210.66 L1961.82 1210.66 L1962.4 1210.66 L1962.99 1210.66 L1963.58 1210.66 L1964.16 1210.66 L1964.75 1210.66 L1965.33 1210.66 L1965.92 1210.66 L1966.51 1210.66 L1967.09 1210.66 L1967.68 1210.66 L1968.27 1210.66 L1968.85 1210.66 L1969.44 1210.66 L1970.03 1210.66 L1970.61 1210.66 L1971.2 1210.66 L1971.78 1210.66 L1972.37 1210.66 L1972.96 1210.66 L1973.54 1210.66 L1974.13 1210.66 L1974.72 1210.66 L1975.3 1210.66 L1975.89 1210.66 L1976.48 1210.66 L1977.06 1210.66 L1977.65 1210.66 L1978.24 1210.66 L1978.82 1210.66 L1979.41 1210.66 L1979.99 1210.66 L1980.58 1210.66 L1981.17 1210.66 L1981.75 1210.66 L1982.34 1210.66 L1982.93 1210.66 L1983.51 1210.66 L1984.1 1210.66 L1984.69 1210.66 L1985.27 1210.66 L1985.86 1210.66 L1986.45 1210.66 L1987.03 1210.66 L1987.62 1210.66 L1988.2 1210.66 L1988.79 1210.66 L1989.38 1210.66 L1989.96 1210.66 L1990.55 1210.66 L1991.14 1210.66 L1991.72 1210.66 L1992.31 1210.66 L1992.9 1210.66 L1993.48 1210.66 L1994.07 1210.66 L1994.65 1210.66 L1995.24 1210.66 L1995.83 1210.66 L1996.41 1210.66 L1997 1210.66 L1997.59 1210.66 L1998.17 1210.66 L1998.76 1210.66 L1999.35 1210.66 L1999.93 1210.66 L2000.52 1210.66 L2001.11 1210.66 L2001.69 1210.66 L2002.28 1210.66 L2002.86 1210.66 L2003.45 1210.66 L2004.04 1210.66 L2004.62 1210.66 L2005.21 1210.66 L2005.8 1210.66 L2006.38 1210.66 L2006.97 1210.66 L2007.56 1210.66 L2008.14 1210.66 L2008.73 1210.66 L2009.32 1210.66 L2009.9 1210.66 L2010.49 1210.66 L2011.07 1210.66 L2011.66 1210.66 L2012.25 1210.66 L2012.83 1210.66 L2013.42 1210.66 L2014.01 1210.66 L2014.59 1210.66 L2015.18 1210.66 L2015.77 1210.66 L2016.35 1210.66 L2016.94 1210.66 L2017.53 1210.66 L2018.11 1210.66 L2018.7 1210.66 L2019.28 1210.66 L2019.87 1210.66 L2020.46 1210.66 L2021.04 1210.66 L2021.63 1210.66 L2022.22 1210.66 L2022.8 1210.66 L2023.39 1210.66 L2023.98 1210.66 L2024.56 1210.66 L2025.15 1210.66 L2025.73 1210.66 L2026.32 1210.66 L2026.91 1210.66 L2027.49 1210.66 L2028.08 1210.66 L2028.67 1210.66 L2029.25 1210.66 L2029.84 1210.66 L2030.43 1210.66 L2031.01 1210.66 L2031.6 1210.66 L2032.19 1210.66 L2032.77 1210.66 L2033.36 1210.66 L2033.94 1210.66 L2034.53 1210.66 L2035.12 1210.66 L2035.7 1210.66 L2036.29 1210.66 L2036.88 1210.66 L2037.46 1210.66 L2038.05 1210.66 L2038.64 1210.66 L2039.22 1210.66 L2039.81 1210.66 L2040.4 1210.66 L2040.98 1210.66 L2041.57 1210.66 L2042.15 1210.66 L2042.74 1210.66 L2043.33 1210.66 L2043.91 1210.66 L2044.5 1210.66 L2045.09 1210.66 L2045.67 1210.66 L2046.26 1210.66 L2046.85 1210.66 L2047.43 1210.66 L2048.02 1210.66 L2048.6 1210.66 L2049.19 1210.66 L2049.78 1210.66 L2050.36 1210.66 L2050.95 1210.66 L2051.54 1210.66 L2052.12 1210.66 L2052.71 1210.66 L2053.3 1210.66 L2053.88 1210.66 L2054.47 1210.66 L2055.06 1210.66 L2055.64 1210.66 L2056.23 1210.66 L2056.81 1210.66 L2057.4 1210.66 L2057.99 1210.66 L2058.57 1210.66 L2059.16 1210.66 L2059.75 1210.66 L2060.33 1210.66 L2060.92 1210.66 L2061.51 1210.66 L2062.09 1210.66 L2062.68 1210.66 L2063.27 1210.66 L2063.85 1210.66 L2064.44 1210.66 L2065.02 1210.66 L2065.61 1210.66 L2066.2 1210.66 L2066.78 1210.66 L2067.37 1210.66 L2067.96 1210.66 L2068.54 1210.66 L2069.13 1210.66 L2069.72 1210.66 L2070.3 1210.66 L2070.89 1210.66 L2071.48 1210.66 L2072.06 1210.66 L2072.65 1210.66 L2073.23 1210.66 L2073.82 1210.66 L2074.41 1210.66 L2074.99 1210.66 L2075.58 1210.66 L2076.17 1210.66 L2076.75 1210.66 L2077.34 1210.66 L2077.93 1210.66 L2078.51 1210.66 L2079.1 1210.66 L2079.68 1210.66 L2080.27 1210.66 L2080.86 1210.66 L2081.44 1210.66 L2082.03 1210.66 L2082.62 1210.66 L2083.2 1210.66 L2083.79 1210.66 L2084.38 1210.66 L2084.96 1210.66 L2085.55 1210.66 L2086.14 1210.66 L2086.72 1210.66 L2087.31 1210.66 L2087.89 1210.66 L2088.48 1210.66 L2089.07 1210.66 L2089.65 1210.66 L2090.24 1210.66 L2090.83 1210.66 L2091.41 1210.66 L2092 1210.66 L2092.59 1210.66 L2093.17 1210.66 L2093.76 1210.66 L2094.35 1210.66 L2094.93 1210.66 L2095.52 1210.66 L2096.1 1210.66 L2096.69 1210.66 L2097.28 1210.66 L2097.86 1210.66 L2098.45 1210.66 L2099.04 1210.66 L2099.62 1210.66 L2100.21 1210.66 L2100.8 1210.66 L2101.38 1210.66 L2101.97 1210.66 L2102.55 1210.66 L2103.14 1210.66 L2103.73 1210.66 L2104.31 1210.66 L2104.9 1210.66 L2105.49 1210.66 L2106.07 1210.66 L2106.66 1210.66 L2107.25 1210.66 L2107.83 1210.66 L2108.42 1210.66 L2109.01 1210.66 L2109.59 1210.66 L2110.18 1210.66 L2110.76 1210.66 L2111.35 1210.66 L2111.94 1210.66 L2112.52 1210.66 L2113.11 1210.66 L2113.7 1210.66 L2114.28 1210.66 L2114.87 1210.66 L2115.46 1210.66 L2116.04 1210.66 L2116.63 1210.66 L2117.22 1210.66 L2117.8 1210.66 L2118.39 1210.66 L2118.97 1210.66 L2119.56 1210.66 L2120.15 1210.66 L2120.73 1210.66 L2121.32 1210.66 L2121.91 1210.66 L2122.49 1210.66 L2123.08 1210.66 L2123.67 1210.66 L2124.25 1210.66 L2124.84 1210.66 L2125.42 1210.66 L2126.01 1210.66 L2126.6 1210.66 L2127.18 1210.66 L2127.77 1210.66 L2128.36 1210.66 L2128.94 1210.66 L2129.53 1210.66 L2130.12 1210.66 L2130.7 1210.66 L2131.29 1210.66 L2131.88 1210.66 L2132.46 1210.66 L2133.05 1210.66 L2133.63 1210.66 L2134.22 1210.66 L2134.81 1210.66 L2135.39 1210.66 L2135.98 1210.66 L2136.57 1210.66 L2137.15 1210.66 L2137.74 1210.66 L2138.33 1210.66 L2138.91 1210.66 L2139.5 1210.66 L2140.09 1210.66 L2140.67 1210.66 L2141.26 1210.66 L2141.84 1210.66 L2142.43 1210.66 L2143.02 1210.66 L2143.6 1210.66 L2144.19 1210.66 L2144.78 1210.66 L2145.36 1210.66 L2145.95 1210.66 L2146.54 1210.66 L2147.12 1210.66 L2147.71 1210.66 L2148.3 1210.66 L2148.88 1210.66 L2149.47 1210.66 L2150.05 1210.66 L2150.64 1210.66 L2151.23 1210.66 L2151.81 1210.66 L2152.4 1210.66 L2152.99 1210.66 L2153.57 1210.66 L2154.16 1210.66 L2154.75 1210.66 L2155.33 1210.66 L2155.92 1210.66 L2156.5 1210.66 L2157.09 1210.66 L2157.68 1210.66 L2158.26 1210.66 L2158.26 1209.78 L2157.68 1209.78 L2157.09 1209.78 L2156.5 1209.78 L2155.92 1209.78 L2155.33 1209.78 L2154.75 1209.78 L2154.16 1209.78 L2153.57 1209.78 L2152.99 1209.78 L2152.4 1209.78 L2151.81 1209.78 L2151.23 1209.78 L2150.64 1209.78 L2150.05 1209.78 L2149.47 1209.78 L2148.88 1209.78 L2148.3 1209.78 L2147.71 1209.78 L2147.12 1209.78 L2146.54 1209.78 L2145.95 1209.78 L2145.36 1209.78 L2144.78 1209.78 L2144.19 1209.78 L2143.6 1209.78 L2143.02 1209.78 L2142.43 1209.78 L2141.84 1209.78 L2141.26 1209.78 L2140.67 1209.78 L2140.09 1209.78 L2139.5 1209.78 L2138.91 1209.78 L2138.33 1209.78 L2137.74 1209.78 L2137.15 1209.78 L2136.57 1209.78 L2135.98 1209.78 L2135.39 1209.78 L2134.81 1209.78 L2134.22 1209.78 L2133.63 1209.78 L2133.05 1209.78 L2132.46 1209.78 L2131.88 1209.78 L2131.29 1209.78 L2130.7 1209.78 L2130.12 1209.78 L2129.53 1209.78 L2128.94 1209.78 L2128.36 1209.78 L2127.77 1209.78 L2127.18 1209.78 L2126.6 1209.78 L2126.01 1209.78 L2125.42 1209.78 L2124.84 1209.78 L2124.25 1209.78 L2123.67 1209.78 L2123.08 1209.78 L2122.49 1209.78 L2121.91 1209.78 L2121.32 1209.78 L2120.73 1209.78 L2120.15 1209.78 L2119.56 1209.78 L2118.97 1209.78 L2118.39 1209.78 L2117.8 1209.78 L2117.22 1209.78 L2116.63 1209.78 L2116.04 1209.78 L2115.46 1209.78 L2114.87 1209.78 L2114.28 1209.78 L2113.7 1209.78 L2113.11 1209.78 L2112.52 1209.78 L2111.94 1209.78 L2111.35 1209.78 L2110.76 1209.78 L2110.18 1209.78 L2109.59 1209.78 L2109.01 1209.78 L2108.42 1209.78 L2107.83 1209.78 L2107.25 1209.78 L2106.66 1209.78 L2106.07 1209.78 L2105.49 1209.78 L2104.9 1209.78 L2104.31 1209.78 L2103.73 1209.78 L2103.14 1209.78 L2102.55 1209.78 L2101.97 1209.78 L2101.38 1209.78 L2100.8 1209.78 L2100.21 1209.78 L2099.62 1209.78 L2099.04 1209.78 L2098.45 1209.78 L2097.86 1209.78 L2097.28 1209.78 L2096.69 1209.78 L2096.1 1209.78 L2095.52 1209.78 L2094.93 1209.78 L2094.35 1209.78 L2093.76 1209.78 L2093.17 1209.78 L2092.59 1209.78 L2092 1209.78 L2091.41 1209.78 L2090.83 1209.78 L2090.24 1209.78 L2089.65 1209.78 L2089.07 1209.78 L2088.48 1209.78 L2087.89 1209.78 L2087.31 1209.78 L2086.72 1209.78 L2086.14 1209.78 L2085.55 1209.78 L2084.96 1209.78 L2084.38 1209.78 L2083.79 1209.78 L2083.2 1209.78 L2082.62 1209.78 L2082.03 1209.78 L2081.44 1209.78 L2080.86 1209.78 L2080.27 1209.78 L2079.68 1209.78 L2079.1 1209.78 L2078.51 1209.78 L2077.93 1209.78 L2077.34 1209.78 L2076.75 1209.78 L2076.17 1209.78 L2075.58 1209.78 L2074.99 1209.78 L2074.41 1209.78 L2073.82 1209.78 L2073.23 1209.78 L2072.65 1209.78 L2072.06 1209.78 L2071.48 1209.78 L2070.89 1209.78 L2070.3 1209.78 L2069.72 1209.78 L2069.13 1209.78 L2068.54 1209.78 L2067.96 1209.78 L2067.37 1209.78 L2066.78 1209.78 L2066.2 1209.78 L2065.61 1209.78 L2065.02 1209.78 L2064.44 1209.78 L2063.85 1209.78 L2063.27 1209.78 L2062.68 1209.78 L2062.09 1209.78 L2061.51 1209.78 L2060.92 1209.78 L2060.33 1209.78 L2059.75 1209.78 L2059.16 1209.78 L2058.57 1209.78 L2057.99 1209.78 L2057.4 1209.78 L2056.81 1209.78 L2056.23 1209.78 L2055.64 1209.78 L2055.06 1209.78 L2054.47 1209.78 L2053.88 1209.78 L2053.3 1209.78 L2052.71 1209.78 L2052.12 1209.78 L2051.54 1209.78 L2050.95 1209.78 L2050.36 1209.78 L2049.78 1209.78 L2049.19 1209.78 L2048.6 1209.78 L2048.02 1209.78 L2047.43 1209.78 L2046.85 1209.78 L2046.26 1209.78 L2045.67 1209.78 L2045.09 1209.78 L2044.5 1209.78 L2043.91 1209.78 L2043.33 1209.78 L2042.74 1209.78 L2042.15 1209.78 L2041.57 1209.78 L2040.98 1209.78 L2040.4 1209.78 L2039.81 1209.78 L2039.22 1209.78 L2038.64 1209.78 L2038.05 1209.78 L2037.46 1209.78 L2036.88 1209.78 L2036.29 1209.78 L2035.7 1209.78 L2035.12 1209.78 L2034.53 1209.78 L2033.94 1209.78 L2033.36 1209.78 L2032.77 1209.78 L2032.19 1209.78 L2031.6 1209.78 L2031.01 1209.78 L2030.43 1209.78 L2029.84 1209.78 L2029.25 1209.78 L2028.67 1209.78 L2028.08 1209.78 L2027.49 1209.78 L2026.91 1209.78 L2026.32 1209.78 L2025.73 1209.78 L2025.15 1209.78 L2024.56 1209.78 L2023.98 1209.78 L2023.39 1209.78 L2022.8 1209.78 L2022.22 1209.78 L2021.63 1209.78 L2021.04 1209.78 L2020.46 1209.78 L2019.87 1209.78 L2019.28 1209.78 L2018.7 1209.78 L2018.11 1209.78 L2017.53 1209.78 L2016.94 1209.78 L2016.35 1209.78 L2015.77 1209.78 L2015.18 1209.78 L2014.59 1209.78 L2014.01 1209.78 L2013.42 1209.78 L2012.83 1209.78 L2012.25 1209.78 L2011.66 1209.78 L2011.07 1209.78 L2010.49 1209.78 L2009.9 1209.78 L2009.32 1209.78 L2008.73 1209.78 L2008.14 1209.78 L2007.56 1209.78 L2006.97 1209.78 L2006.38 1209.78 L2005.8 1209.78 L2005.21 1209.78 L2004.62 1209.78 L2004.04 1209.78 L2003.45 1209.78 L2002.86 1209.78 L2002.28 1209.78 L2001.69 1209.78 L2001.11 1209.78 L2000.52 1209.78 L1999.93 1209.78 L1999.35 1209.78 L1998.76 1209.78 L1998.17 1209.78 L1997.59 1209.78 L1997 1209.78 L1996.41 1209.78 L1995.83 1209.78 L1995.24 1209.78 L1994.65 1209.78 L1994.07 1209.78 L1993.48 1209.78 L1992.9 1209.78 L1992.31 1209.78 L1991.72 1209.78 L1991.14 1209.78 L1990.55 1209.78 L1989.96 1209.78 L1989.38 1209.78 L1988.79 1209.78 L1988.2 1209.78 L1987.62 1209.78 L1987.03 1209.78 L1986.45 1209.78 L1985.86 1209.78 L1985.27 1209.78 L1984.69 1209.78 L1984.1 1209.78 L1983.51 1209.78 L1982.93 1209.78 L1982.34 1209.78 L1981.75 1209.78 L1981.17 1209.78 L1980.58 1209.78 L1979.99 1209.78 L1979.41 1209.78 L1978.82 1209.78 L1978.24 1209.78 L1977.65 1209.78 L1977.06 1209.78 L1976.48 1209.78 L1975.89 1209.78 L1975.3 1209.78 L1974.72 1209.78 L1974.13 1209.78 L1973.54 1209.78 L1972.96 1209.78 L1972.37 1209.78 L1971.78 1209.78 L1971.2 1209.78 L1970.61 1209.78 L1970.03 1209.78 L1969.44 1209.78 L1968.85 1209.78 L1968.27 1209.78 L1967.68 1209.78 L1967.09 1209.78 L1966.51 1209.78 L1965.92 1209.78 L1965.33 1209.78 L1964.75 1209.78 L1964.16 1209.78 L1963.58 1209.78 L1962.99 1209.78 L1962.4 1209.78 L1961.82 1209.78 L1961.23 1209.78 L1960.64 1209.78 L1960.06 1209.78 L1959.47 1209.78 L1958.88 1209.78 L1958.3 1209.78 L1957.71 1209.78 L1957.12 1209.78 L1956.54 1209.78 L1955.95 1209.78 L1955.37 1209.78 L1954.78 1209.78 L1954.19 1209.78 L1953.61 1209.78 L1953.02 1209.78 L1952.43 1209.78 L1951.85 1209.78 L1951.26 1209.78 L1950.67 1209.78 L1950.09 1209.78 L1949.5 1209.78 L1948.91 1209.78 L1948.33 1209.78 L1947.74 1209.78 L1947.16 1209.78 L1946.57 1209.78 L1945.98 1209.78 L1945.4 1209.78 L1944.81 1209.78 L1944.22 1209.78 L1943.64 1209.78 L1943.05 1209.78 L1942.46 1209.78 L1941.88 1209.78 L1941.29 1209.78 L1940.71 1209.78 L1940.12 1209.78 L1939.53 1209.78 L1938.95 1209.78 L1938.36 1209.78 L1937.77 1209.78 L1937.19 1209.78 L1936.6 1209.78 L1936.01 1209.78 L1935.43 1209.78 L1934.84 1209.78 L1934.25 1209.78 L1933.67 1209.78 L1933.08 1209.78 L1932.5 1209.78 L1931.91 1209.78 L1931.32 1209.78 L1930.74 1209.78 L1930.15 1209.78 L1929.56 1209.78 L1928.98 1209.78 L1928.39 1209.78 L1927.8 1209.78 L1927.22 1209.78 L1926.63 1209.78 L1926.04 1209.78 L1925.46 1209.78 L1924.87 1209.78 L1924.29 1209.78 L1923.7 1209.78 L1923.11 1209.78 L1922.53 1209.78 L1921.94 1209.78 L1921.35 1209.78 L1920.77 1209.78 L1920.18 1209.78 L1919.59 1209.78 L1919.01 1209.78 L1918.42 1209.78 L1917.83 1209.78 L1917.25 1209.78 L1916.66 1209.78 L1916.08 1209.78 L1915.49 1209.78 L1914.9 1209.78 L1914.32 1209.78 L1913.73 1209.78 L1913.14 1209.78 L1912.56 1209.78 L1911.97 1209.78 L1911.38 1209.78 L1910.8 1209.78 L1910.21 1209.78 L1909.63 1209.78 L1909.04 1209.78 L1908.45 1209.78 L1907.87 1209.78 L1907.28 1209.78 L1906.69 1209.78 L1906.11 1209.78 L1905.52 1209.78 L1904.93 1209.78 L1904.35 1209.78 L1903.76 1209.78 L1903.17 1209.78 L1902.59 1209.78 L1902 1209.78 L1901.42 1209.78 L1900.83 1209.78 L1900.24 1209.78 L1899.66 1209.78 L1899.07 1209.78 L1898.48 1209.78 L1897.9 1209.78 L1897.31 1209.78 L1896.72 1209.78 L1896.14 1209.78 L1895.55 1209.78 L1894.96 1209.78 L1894.38 1209.78 L1893.79 1209.78 L1893.21 1209.78 L1892.62 1209.78 L1892.03 1209.78 L1891.45 1209.78 L1890.86 1209.78 L1890.27 1209.78 L1889.69 1209.78 L1889.1 1209.78 L1888.51 1209.78 L1887.93 1209.78 L1887.34 1209.78 L1886.76 1209.78 L1886.17 1209.78 L1885.58 1209.78 L1885 1209.78 L1884.41 1209.78 L1883.82 1209.78 L1883.24 1209.78 L1882.65 1209.78 L1882.06 1209.78 L1881.48 1209.78 L1880.89 1209.78 L1880.3 1209.78 L1879.72 1209.78 L1879.13 1209.78 L1878.55 1209.78 L1877.96 1209.78 L1877.37 1209.78 L1876.79 1209.78 L1876.2 1209.78 L1875.61 1209.78 L1875.03 1209.78 L1874.44 1209.78 L1873.85 1209.78 L1873.27 1209.78 L1872.68 1209.78 L1872.09 1209.78 L1871.51 1209.78 L1870.92 1209.78 L1870.34 1209.78 L1869.75 1209.78 L1869.16 1209.78 L1868.58 1209.78 L1867.99 1209.78 L1867.4 1209.78 L1866.82 1209.78 L1866.23 1209.78 L1865.64 1209.78 L1865.06 1209.78 L1864.47 1209.78 L1863.88 1209.78 L1863.3 1209.78 L1862.71 1209.78 L1862.13 1209.78 L1861.54 1209.78 L1860.95 1209.78 L1860.37 1209.78 L1859.78 1209.78 L1859.19 1209.78 L1858.61 1209.78 L1858.02 1209.78 L1857.43 1209.78 L1856.85 1209.78 L1856.26 1209.78 L1855.68 1209.78 L1855.09 1209.78 L1854.5 1209.78 L1853.92 1209.78 L1853.33 1209.78 L1852.74 1209.78 L1852.16 1209.78 L1851.57 1209.78 L1850.98 1209.78 L1850.4 1209.78 L1849.81 1209.78 L1849.22 1209.78 L1848.64 1209.78 L1848.05 1209.78 L1847.47 1209.78 L1846.88 1209.78 L1846.29 1209.78 L1845.71 1209.78 L1845.12 1209.78 L1844.53 1209.78 L1843.95 1209.78 L1843.36 1209.78 L1842.77 1209.78 L1842.19 1209.78 L1841.6 1209.78 L1841.01 1209.78 L1840.43 1209.78 L1839.84 1209.78 L1839.26 1209.78 L1838.67 1209.78 L1838.08 1209.78 L1837.5 1209.78 L1836.91 1209.78 L1836.32 1209.78 L1835.74 1209.78 L1835.15 1209.78 L1834.56 1209.78 L1833.98 1209.78 L1833.39 1209.78 L1832.81 1209.78 L1832.22 1209.78 L1831.63 1209.78 L1831.05 1209.78 L1830.46 1209.78 L1829.87 1209.78 L1829.29 1209.78 L1828.7 1209.78 L1828.11 1209.78 L1827.53 1209.78 L1826.94 1209.78 L1826.35 1209.78 L1825.77 1209.78 L1825.18 1209.78 L1824.6 1209.78 L1824.01 1209.78 L1823.42 1209.78 L1822.84 1209.78 L1822.25 1209.78 L1821.66 1209.78 L1821.08 1209.78 L1820.49 1209.78 L1819.9 1209.78 L1819.32 1209.78 L1818.73 1209.78 L1818.14 1209.78 L1817.56 1209.78 L1816.97 1209.78 L1816.39 1209.78 L1815.8 1209.78 L1815.21 1209.78 L1814.63 1209.78 L1814.04 1209.78 L1813.45 1209.78 L1812.87 1209.78 L1812.28 1209.78 L1811.69 1209.78 L1811.11 1209.78 L1810.52 1209.78 L1809.94 1209.78 L1809.35 1209.78 L1808.76 1209.78 L1808.18 1209.78 L1807.59 1209.78 L1807 1209.78 L1806.42 1209.78 L1805.83 1209.78 L1805.24 1209.78 L1804.66 1209.78 L1804.07 1209.78 L1803.48 1209.78 L1802.9 1209.78 L1802.31 1209.78 L1801.73 1209.78 L1801.14 1209.78 L1800.55 1209.78 L1799.97 1209.78 L1799.38 1209.78 L1798.79 1209.78 L1798.21 1209.78 L1797.62 1209.78 L1797.03 1209.78 L1796.45 1209.78 L1795.86 1209.78 L1795.27 1209.78 L1794.69 1209.78 L1794.1 1209.78 L1793.52 1209.78 L1792.93 1209.78 L1792.34 1209.78 L1791.76 1209.78 L1791.17 1209.78 L1790.58 1209.78 L1790 1209.78 L1789.41 1209.78 L1788.82 1209.78 L1788.24 1209.78 L1787.65 1209.78 L1787.06 1209.78 L1786.48 1209.78 L1785.89 1209.78 L1785.31 1209.78 L1784.72 1209.78 L1784.13 1209.78 L1783.55 1209.78 L1782.96 1209.78 L1782.37 1209.78 L1781.79 1209.78 L1781.2 1209.78 L1780.61 1209.78 L1780.03 1209.78 L1779.44 1209.78 L1778.86 1209.78 L1778.27 1209.78 L1777.68 1209.78 L1777.1 1209.78 L1776.51 1209.78 L1775.92 1209.78 L1775.34 1209.78 L1774.75 1209.78 L1774.16 1209.78 L1773.58 1209.78 L1772.99 1209.78 L1772.4 1209.78 L1771.82 1209.78 L1771.23 1209.78 L1770.65 1209.78 L1770.06 1209.78 L1769.47 1209.78 L1768.89 1209.78 L1768.3 1209.78 L1767.71 1209.78 L1767.13 1209.78 L1766.54 1209.78 L1765.95 1209.78 L1765.37 1209.78 L1764.78 1209.78 L1764.19 1209.78 L1763.61 1209.78 L1763.02 1209.78 L1762.44 1209.78 L1761.85 1209.78 L1761.26 1209.78 L1760.68 1209.78 L1760.09 1209.78 L1759.5 1209.78 L1758.92 1209.78 L1758.33 1209.78 L1757.74 1209.78 L1757.16 1209.78 L1756.57 1209.78 L1755.99 1209.78 L1755.4 1209.78 L1754.81 1209.78 L1754.23 1209.78 L1753.64 1209.78 L1753.05 1209.78 L1752.47 1209.78 L1751.88 1209.78 L1751.29 1209.78 L1750.71 1209.78 L1750.12 1209.78 L1749.53 1209.78 L1748.95 1209.78 L1748.36 1209.78 L1747.78 1209.78 L1747.19 1209.78 L1746.6 1209.78 L1746.02 1209.78 L1745.43 1209.78 L1744.84 1209.78 L1744.26 1209.78 L1743.67 1209.78 L1743.08 1209.78 L1742.5 1209.78 L1741.91 1209.78 L1741.32 1209.78 L1740.74 1209.78 L1740.15 1209.78 L1739.57 1209.78 L1738.98 1209.78 L1738.39 1209.78 L1737.81 1209.78 L1737.22 1209.78 L1736.63 1209.78 L1736.05 1209.78 L1735.46 1209.78 L1734.87 1209.78 L1734.29 1209.78 L1733.7 1209.78 L1733.11 1209.78 L1732.53 1209.78 L1731.94 1209.78 L1731.36 1209.78 L1730.77 1209.78 L1730.18 1209.78 L1729.6 1209.78 L1729.01 1209.78 L1728.42 1209.78 L1727.84 1209.78 L1727.25 1209.78 L1726.66 1209.78 L1726.08 1209.78 L1725.49 1209.78 L1724.91 1209.78 L1724.32 1209.78 L1723.73 1209.78 L1723.15 1209.78 L1722.56 1209.78 L1721.97 1209.78 L1721.39 1209.78 L1720.8 1209.78 L1720.21 1209.78 L1719.63 1209.78 L1719.04 1209.78 L1718.45 1209.78 L1717.87 1209.78 L1717.28 1209.78 L1716.7 1209.78 L1716.11 1209.78 L1715.52 1209.78 L1714.94 1209.78 L1714.35 1209.78 L1713.76 1209.78 L1713.18 1209.78 L1712.59 1209.78 L1712 1209.78 L1711.42 1209.78 L1710.83 1209.78 L1710.24 1209.78 L1709.66 1209.78 L1709.07 1209.78 L1708.49 1209.78 L1707.9 1209.78 L1707.31 1209.78 L1706.73 1209.78 L1706.14 1209.78 L1705.55 1209.78 L1704.97 1209.78 L1704.38 1209.78 L1703.79 1209.78 L1703.21 1209.78 L1702.62 1209.78 L1702.04 1209.78 L1701.45 1209.78 L1700.86 1209.78 L1700.28 1209.78 L1699.69 1209.78 L1699.1 1209.78 L1698.52 1209.78 L1697.93 1209.78 L1697.34 1209.78 L1696.76 1209.78 L1696.17 1209.78 L1695.58 1209.78 L1695 1209.78 L1694.41 1209.78 L1693.83 1209.78 L1693.24 1209.78 L1692.65 1209.78 L1692.07 1209.78 L1691.48 1209.78 L1690.89 1209.78 L1690.31 1209.78 L1689.72 1209.78 L1689.13 1209.78 L1688.55 1209.78 L1687.96 1209.78 L1687.37 1209.78 L1686.79 1209.78 L1686.2 1209.78 L1685.62 1209.78 L1685.03 1209.78 L1684.44 1209.78 L1683.86 1209.78 L1683.27 1209.78 L1682.68 1209.78 L1682.1 1209.78 L1681.51 1209.78 L1680.92 1209.78 L1680.34 1209.78 L1679.75 1209.78 L1679.17 1209.78 L1678.58 1209.78 L1677.99 1209.78 L1677.41 1209.78 L1676.82 1209.78 L1676.23 1209.78 L1675.65 1209.78 L1675.06 1209.78 L1674.47 1209.78 L1673.89 1209.78 L1673.3 1209.78 L1672.71 1209.78 L1672.13 1209.78 L1671.54 1209.78 L1670.96 1209.78 L1670.37 1209.78 L1669.78 1209.78 L1669.2 1209.78 L1668.61 1209.78 L1668.02 1209.78 L1667.44 1209.78 L1666.85 1209.78 L1666.26 1209.78 L1665.68 1209.78 L1665.09 1209.78 L1664.5 1209.78 L1663.92 1209.78 L1663.33 1209.78 L1662.75 1209.78 L1662.16 1209.78 L1661.57 1209.78 L1660.99 1209.78 L1660.4 1209.78 L1659.81 1209.78 L1659.23 1209.78 L1658.64 1209.78 L1658.05 1209.78 L1657.47 1209.78 L1656.88 1209.78 L1656.29 1209.78 L1655.71 1209.78 L1655.12 1209.78 L1654.54 1209.78 L1653.95 1209.78 L1653.36 1209.78 L1652.78 1209.78 L1652.19 1209.78 L1651.6 1209.78 L1651.02 1209.78 L1650.43 1209.78 L1649.84 1209.78 L1649.26 1209.78 L1648.67 1209.78 L1648.09 1209.78 L1647.5 1209.78 L1646.91 1209.78 L1646.33 1209.78 L1645.74 1209.78 L1645.15 1209.78 L1644.57 1209.78 L1643.98 1209.78 L1643.39 1209.78 L1642.81 1209.78 L1642.22 1209.78 L1641.63 1209.78 L1641.05 1209.78 L1640.46 1209.78 L1639.88 1209.78 L1639.29 1209.78 L1638.7 1209.78 L1638.12 1209.78 L1637.53 1209.78 L1636.94 1209.78 L1636.36 1209.78 L1635.77 1209.78 L1635.18 1209.78 L1634.6 1209.78 L1634.01 1209.78 L1633.42 1209.78 L1632.84 1209.78 L1632.25 1209.78 L1631.67 1209.78 L1631.08 1209.78 L1630.49 1209.78 L1629.91 1209.78 L1629.32 1209.78 L1628.73 1209.78 L1628.15 1209.78 L1627.56 1209.78 L1626.97 1209.78 L1626.39 1209.78 L1625.8 1209.78 L1625.22 1209.78 L1624.63 1209.78 L1624.04 1209.78 L1623.46 1209.78 L1622.87 1209.78 L1622.28 1209.78 L1621.7 1209.78 L1621.11 1209.78 L1620.52 1209.78 L1619.94 1209.78 L1619.35 1209.78 L1618.76 1209.78 L1618.18 1209.78 L1617.59 1209.78 L1617.01 1209.78 L1616.42 1209.78 L1615.83 1209.78 L1615.25 1209.78 L1614.66 1209.78 L1614.07 1209.78 L1613.49 1209.78 L1612.9 1209.78 L1612.31 1209.78 L1611.73 1209.78 L1611.14 1209.78 L1610.55 1209.78 L1609.97 1209.78 L1609.38 1209.78 L1608.8 1209.78 L1608.21 1209.78 L1607.62 1209.78 L1607.04 1209.78 L1606.45 1209.78 L1605.86 1209.78 L1605.28 1209.78 L1604.69 1209.78 L1604.1 1209.78 L1603.52 1209.78 L1602.93 1209.78 L1602.34 1209.78 L1601.76 1209.78 L1601.17 1209.78 L1600.59 1209.78 L1600 1209.78 L1599.41 1209.78 L1598.83 1209.78 L1598.24 1209.78 L1597.65 1209.78 L1597.07 1209.78 L1596.48 1209.78 L1595.89 1209.78 L1595.31 1209.78 L1594.72 1209.78 L1594.14 1209.78 L1593.55 1209.78 L1592.96 1209.78 L1592.38 1209.78 L1591.79 1209.78 L1591.2 1209.78 L1590.62 1209.78 L1590.03 1209.78 L1589.44 1209.78 L1588.86 1209.78 L1588.27 1209.78 L1587.68 1209.78 L1587.1 1209.78 L1586.51 1209.78 L1585.93 1209.78 L1585.34 1209.78 L1584.75 1209.78 L1584.17 1209.78 L1583.58 1209.78 L1582.99 1209.78 L1582.41 1209.78 L1581.82 1209.78 L1581.23 1209.78 L1580.65 1209.78 L1580.06 1209.78 L1579.47 1209.78 L1578.89 1209.78 L1578.3 1209.78 L1577.72 1209.78 L1577.13 1209.78 L1576.54 1209.78 L1575.96 1209.78 L1575.37 1209.78 L1574.78 1209.78 L1574.2 1209.78 L1573.61 1209.78 L1573.02 1209.78 L1572.44 1209.78 L1571.85 1209.78 L1571.27 1209.78 L1570.68 1209.78 L1570.09 1209.78 L1569.51 1209.78 L1568.92 1209.78 L1568.33 1209.78 L1567.75 1209.78 L1567.16 1209.78 L1566.57 1209.78 L1565.99 1209.78 L1565.4 1209.78 L1564.81 1209.78 L1564.23 1209.78 L1563.64 1209.78 L1563.06 1209.78 L1562.47 1209.78 L1561.88 1209.78 L1561.3 1209.78 L1560.71 1209.78 L1560.12 1209.78 L1559.54 1209.78 L1558.95 1209.78 L1558.36 1209.78 L1557.78 1209.78 L1557.19 1209.78 L1556.6 1209.78 L1556.02 1209.78 L1555.43 1209.78 L1554.85 1209.78 L1554.26 1209.78 L1553.67 1209.78 L1553.09 1209.78 L1552.5 1209.78 L1551.91 1209.78 L1551.33 1209.78 L1550.74 1209.78 L1550.15 1209.78 L1549.57 1209.78 L1548.98 1209.78 L1548.4 1209.78 L1547.81 1209.78 L1547.22 1209.78 L1546.64 1209.78 L1546.05 1209.78 L1545.46 1209.78 L1544.88 1209.78 L1544.29 1209.78 L1543.7 1209.78 L1543.12 1209.78 L1542.53 1209.78 L1541.94 1209.78 L1541.36 1209.78 L1540.77 1209.78 L1540.19 1209.78 L1539.6 1209.78 L1539.01 1209.78 L1538.43 1209.78 L1537.84 1209.78 L1537.25 1209.78 L1536.67 1209.78 L1536.08 1209.78 L1535.49 1209.78 L1534.91 1209.78 L1534.32 1209.78 L1533.73 1209.78 L1533.15 1209.78 L1532.56 1209.78 L1531.98 1209.78 L1531.39 1209.78 L1530.8 1209.78 L1530.22 1209.78 L1529.63 1209.78 L1529.04 1209.78 L1528.46 1209.78 L1527.87 1209.78 L1527.28 1209.78 L1526.7 1209.78 L1526.11 1209.78 L1525.52 1209.78 L1524.94 1209.78 L1524.35 1209.78 L1523.77 1209.78 L1523.18 1209.78 L1522.59 1209.78 L1522.01 1209.78 L1521.42 1209.78 L1520.83 1209.78 L1520.25 1209.78 L1519.66 1209.78 L1519.07 1209.78 L1518.49 1209.78 L1517.9 1209.78 L1517.32 1209.78 L1516.73 1209.78 L1516.14 1209.78 L1515.56 1209.78 L1514.97 1209.78 L1514.38 1209.78 L1513.8 1209.78 L1513.21 1209.78 L1512.62 1209.78 L1512.04 1209.78 L1511.45 1209.78 L1510.86 1209.78 L1510.28 1209.78 L1509.69 1209.78 L1509.11 1209.78 L1508.52 1209.78 L1507.93 1209.78 L1507.35 1209.78 L1506.76 1209.78 L1506.17 1209.78 L1505.59 1209.78 L1505 1209.78 L1504.41 1209.78 L1503.83 1209.78 L1503.24 1209.78 L1502.65 1209.78 L1502.07 1209.78 L1501.48 1209.78 L1500.9 1209.78 L1500.31 1209.78 L1499.72 1209.78 L1499.14 1209.78 L1498.55 1209.78 L1497.96 1209.78 L1497.38 1209.78 L1496.79 1209.78 L1496.2 1209.78 L1495.62 1209.78 L1495.03 1209.78 L1494.45 1209.78 L1493.86 1209.78 L1493.27 1209.78 L1492.69 1209.78 L1492.1 1209.78 L1491.51 1209.78 L1490.93 1209.78 L1490.34 1209.78 L1489.75 1209.78 L1489.17 1209.78 L1488.58 1209.78 L1487.99 1209.78 L1487.41 1209.78 L1486.82 1209.78 L1486.24 1209.78 L1485.65 1209.78 L1485.06 1209.78 L1484.48 1209.78 L1483.89 1209.78 L1483.3 1209.78 L1482.72 1209.78 L1482.13 1209.78 L1481.54 1209.78 L1480.96 1209.78 L1480.37 1209.78 L1479.78 1209.78 L1479.2 1209.78 L1478.61 1209.78 L1478.03 1209.78 L1477.44 1209.78 L1476.85 1209.78 L1476.27 1209.78 L1475.68 1209.78 L1475.09 1209.78 L1474.51 1209.78 L1473.92 1209.78 L1473.33 1209.78 L1472.75 1209.78 L1472.16 1209.78 L1471.57 1209.78 L1470.99 1209.78 L1470.4 1209.78 L1469.82 1209.78 L1469.23 1209.78 L1468.64 1209.78 L1468.06 1209.78 L1467.47 1209.78 L1466.88 1209.78 L1466.3 1209.78 L1465.71 1209.78 L1465.12 1209.78 L1464.54 1209.78 L1463.95 1209.78 L1463.37 1209.78 L1462.78 1209.78 L1462.19 1209.78 L1461.61 1209.78 L1461.02 1209.78 L1460.43 1209.78 L1459.85 1209.78 L1459.26 1209.78 L1458.67 1209.78 L1458.09 1209.78 L1457.5 1209.78 L1456.91 1209.78 L1456.33 1209.78 L1455.74 1209.78 L1455.16 1209.78 L1454.57 1209.78 L1453.98 1209.78 L1453.4 1209.78 L1452.81 1209.78 L1452.22 1209.78 L1451.64 1209.78 L1451.05 1209.78 L1450.46 1209.78 L1449.88 1209.78 L1449.29 1209.78 L1448.7 1209.78 L1448.12 1209.78 L1447.53 1209.78 L1446.95 1209.78 L1446.36 1209.78 L1445.77 1209.78 L1445.19 1209.78 L1444.6 1209.78 L1444.01 1209.78 L1443.43 1209.78 L1442.84 1209.78 L1442.25 1209.78 L1441.67 1209.78 L1441.08 1209.78 L1440.5 1209.78 L1439.91 1209.78 L1439.32 1209.78 L1438.74 1209.78 L1438.15 1209.78 L1437.56 1209.78 L1436.98 1209.78 L1436.39 1209.78 L1435.8 1209.78 L1435.22 1209.78 L1434.63 1209.78 L1434.04 1209.78 L1433.46 1209.78 L1432.87 1209.78 L1432.29 1209.78 L1431.7 1209.78 L1431.11 1209.78 L1430.53 1209.78 L1429.94 1209.78 L1429.35 1209.78 L1428.77 1209.78 L1428.18 1209.78 L1427.59 1209.78 L1427.01 1209.78 L1426.42 1209.78 L1425.83 1209.78 L1425.25 1209.78 L1424.66 1209.78 L1424.08 1209.78 L1423.49 1209.78 L1422.9 1209.78 L1422.32 1209.78 L1421.73 1209.78 L1421.14 1209.78 L1420.56 1209.78 L1419.97 1209.78 L1419.38 1209.78 L1418.8 1209.78 L1418.21 1209.78 L1417.63 1209.78 L1417.04 1209.78 L1416.45 1209.78 L1415.87 1209.78 L1415.28 1209.78 L1414.69 1209.78 L1414.11 1209.78 L1413.52 1209.78 L1412.93 1209.78 L1412.35 1209.78 L1411.76 1209.78 L1411.17 1209.78 L1410.59 1209.78 L1410 1209.78 L1409.42 1209.78 L1408.83 1209.78 L1408.24 1209.78 L1407.66 1209.78 L1407.07 1209.78 L1406.48 1209.78 L1405.9 1209.78 L1405.31 1209.78 L1404.72 1209.78 L1404.14 1209.78 L1403.55 1209.78 L1402.96 1209.78 L1402.38 1209.78 L1401.79 1209.78 L1401.21 1209.78 L1400.62 1209.78 L1400.03 1209.78 L1399.45 1209.78 L1398.86 1209.78 L1398.27 1209.78 L1397.69 1209.78 L1397.1 1209.78 L1396.51 1209.78 L1395.93 1209.78 L1395.34 1209.78 L1394.75 1209.78 L1394.17 1209.78 L1393.58 1209.78 L1393 1209.78 L1392.41 1209.78 L1391.82 1209.78 L1391.24 1209.78 L1390.65 1209.78 L1390.06 1209.78 L1389.48 1209.78 L1388.89 1209.78 L1388.3 1209.78 L1387.72 1209.78 L1387.13 1209.78 L1386.55 1209.78 L1385.96 1209.78 L1385.37 1209.78 L1384.79 1209.78 L1384.2 1209.78 L1383.61 1209.78 L1383.03 1209.78 L1382.44 1209.78 L1381.85 1209.78 L1381.27 1209.78 L1380.68 1209.78 L1380.09 1209.78 L1379.51 1209.78 L1378.92 1209.78 L1378.34 1209.78 L1377.75 1209.78 L1377.16 1209.78 L1376.58 1209.78 L1375.99 1209.78 L1375.4 1209.78 L1374.82 1209.78 L1374.23 1209.78 L1373.64 1209.78 L1373.06 1209.78 L1372.47 1209.78 L1371.88 1209.78 L1371.3 1209.78 L1370.71 1209.78 L1370.13 1209.78 L1369.54 1209.78 L1368.95 1209.78 L1368.37 1209.78 L1367.78 1209.78 L1367.19 1209.78 L1366.61 1209.78 L1366.02 1209.78 L1365.43 1209.78 L1364.85 1209.78 L1364.26 1209.78 L1363.68 1209.78 L1363.09 1209.78 L1362.5 1209.78 L1361.92 1209.78 L1361.33 1209.78 L1360.74 1209.78 L1360.16 1209.78 L1359.57 1209.78 L1358.98 1209.78 L1358.4 1209.78 L1357.81 1209.78 L1357.22 1209.78 L1356.64 1209.78 L1356.05 1209.78 L1355.47 1209.78 L1354.88 1209.78 L1354.29 1209.78 L1353.71 1209.78 L1353.12 1209.78 L1352.53 1209.78 L1351.95 1209.78 L1351.36 1209.78 L1350.77 1209.78 L1350.19 1209.78 L1349.6 1209.78 L1349.01 1209.78 L1348.43 1209.78 L1347.84 1209.78 L1347.26 1209.78 L1346.67 1209.78 L1346.08 1209.78 L1345.5 1209.78 L1344.91 1209.78 L1344.32 1209.78 L1343.74 1209.78 L1343.15 1209.78 L1342.56 1209.78 L1341.98 1209.78 L1341.39 1209.78 L1340.8 1209.78 L1340.22 1209.78 L1339.63 1209.78 L1339.05 1209.78 L1338.46 1209.78 L1337.87 1209.78 L1337.29 1209.78 L1336.7 1209.78 L1336.11 1209.78 L1335.53 1209.78 L1334.94 1209.78 L1334.35 1209.78 L1333.77 1209.78 L1333.18 1209.78 L1332.6 1209.78 L1332.01 1209.78 L1331.42 1209.78 L1330.84 1209.78 L1330.25 1209.78 L1329.66 1209.78 L1329.08 1209.78 L1328.49 1209.78 L1327.9 1209.78 L1327.32 1209.78 L1326.73 1209.78 L1326.14 1209.78 L1325.56 1209.78 L1324.97 1209.78 L1324.39 1209.78 L1323.8 1209.78 L1323.21 1209.78 L1322.63 1209.78 L1322.04 1209.78 L1321.45 1209.78 L1320.87 1209.78 L1320.28 1209.78 L1319.69 1209.78 L1319.11 1209.78 L1318.52 1209.78 L1317.93 1209.78 L1317.35 1209.78 L1316.76 1209.78 L1316.18 1209.78 L1315.59 1209.78 L1315 1209.78 L1314.42 1209.78 L1313.83 1209.78 L1313.24 1209.78 L1312.66 1209.78 L1312.07 1209.78 L1311.48 1209.78 L1310.9 1209.78 L1310.31 1209.78 L1309.73 1209.78 L1309.14 1209.78 L1308.55 1209.78 L1307.97 1209.78 L1307.38 1209.78 L1306.79 1209.78 L1306.21 1209.78 L1305.62 1209.78 L1305.03 1209.78 L1304.45 1209.78 L1303.86 1209.78 L1303.27 1209.78 L1302.69 1209.78 L1302.1 1209.78 L1301.52 1209.78 L1300.93 1209.78 L1300.34 1209.78 L1299.76 1209.78 L1299.17 1209.78 L1298.58 1209.78 L1298 1209.78 L1297.41 1209.78 L1296.82 1209.78 L1296.24 1209.78 L1295.65 1209.78 L1295.06 1209.78 L1294.48 1209.78 L1293.89 1209.78 L1293.31 1209.78 L1292.72 1209.78 L1292.13 1209.78 L1291.55 1209.78 L1290.96 1209.78 L1290.37 1209.78 L1289.79 1209.78 L1289.2 1209.78 L1288.61 1209.78 L1288.03 1209.78 L1287.44 1209.78 L1286.86 1209.78 L1286.27 1209.78 L1285.68 1209.78 L1285.1 1209.78 L1284.51 1209.78 L1283.92 1209.78 L1283.34 1209.78 L1282.75 1209.78 L1282.16 1209.78 L1281.58 1209.78 L1280.99 1209.78 L1280.4 1209.78 L1279.82 1209.78 L1279.23 1209.78 L1278.65 1209.78 L1278.06 1209.78 L1277.47 1209.78 L1276.89 1209.78 L1276.3 1209.78 L1275.71 1209.78 L1275.13 1209.78 L1274.54 1209.78 L1273.95 1209.78 L1273.37 1209.78 L1272.78 1209.78 L1272.19 1209.78 L1271.61 1209.78 L1271.02 1209.78 L1270.44 1209.78 L1269.85 1209.78 L1269.26 1209.78 L1268.68 1209.78 L1268.09 1209.78 L1267.5 1209.78 L1266.92 1209.78 L1266.33 1209.78 L1265.74 1209.78 L1265.16 1209.78 L1264.57 1209.78 L1263.98 1209.78 L1263.4 1209.78 L1262.81 1209.78 L1262.23 1209.78 L1261.64 1209.78 L1261.05 1209.78 L1260.47 1209.78 L1259.88 1209.78 L1259.29 1209.78 L1258.71 1209.78 L1258.12 1209.78 L1257.53 1209.78 L1256.95 1209.78 L1256.36 1209.78 L1255.78 1209.78 L1255.19 1209.78 L1254.6 1209.78 L1254.02 1209.78 L1253.43 1209.78 L1252.84 1209.78 L1252.26 1209.78 L1251.67 1209.78 L1251.08 1209.78 L1250.5 1209.78 L1249.91 1209.78 L1249.32 1209.78 L1248.74 1209.78 L1248.15 1209.78 L1247.57 1209.78 L1246.98 1209.78 L1246.39 1209.78 L1245.81 1209.78 L1245.22 1209.78 L1244.63 1209.78 L1244.05 1209.78 L1243.46 1209.78 L1242.87 1209.78 L1242.29 1209.78 L1241.7 1209.78 L1241.11 1209.78 L1240.53 1209.78 L1239.94 1209.78 L1239.36 1209.78 L1238.77 1209.78 L1238.18 1209.78 L1237.6 1209.78 L1237.01 1209.78 L1236.42 1209.78 L1235.84 1209.78 L1235.25 1209.78 L1234.66 1209.78 L1234.08 1209.78 L1233.49 1209.78 L1232.91 1209.78 L1232.32 1209.78 L1231.73 1209.78 L1231.15 1209.78 L1230.56 1209.78 L1229.97 1209.78 L1229.39 1209.78 L1228.8 1209.78 L1228.21 1209.78 L1227.63 1209.78 L1227.04 1209.78 L1226.45 1209.78 L1225.87 1209.78 L1225.28 1209.78 L1224.7 1209.78 L1224.11 1209.78 L1223.52 1209.78 L1222.94 1209.78 L1222.35 1209.78 L1221.76 1209.78 L1221.18 1209.78 L1220.59 1209.78 L1220 1209.78 L1219.42 1209.78 L1218.83 1209.78 L1218.24 1209.78 L1217.66 1209.78 L1217.07 1209.78 L1216.49 1209.78 L1215.9 1209.78 L1215.31 1209.78 L1214.73 1209.78 L1214.14 1209.78 L1213.55 1209.78 L1212.97 1209.78 L1212.38 1209.78 L1211.79 1209.78 L1211.21 1209.78 L1210.62 1209.78 L1210.03 1209.78 L1209.45 1209.78 L1208.86 1209.78 L1208.28 1209.78 L1207.69 1209.78 L1207.1 1209.78 L1206.52 1209.78 L1205.93 1209.78 L1205.34 1209.78 L1204.76 1209.78 L1204.17 1209.78 L1203.58 1209.78 L1203 1209.78 L1202.41 1209.78 L1201.83 1209.78 L1201.24 1209.78 L1200.65 1209.78 L1200.07 1209.78 L1199.48 1209.78 L1198.89 1209.78 L1198.31 1209.78 L1197.72 1209.78 L1197.13 1209.78 L1196.55 1209.78 L1195.96 1209.78 L1195.37 1209.78 L1194.79 1209.78 L1194.2 1209.78 L1193.62 1209.78 L1193.03 1209.78 L1192.44 1209.78 L1191.86 1209.78 L1191.27 1209.78 L1190.68 1209.78 L1190.1 1209.78 L1189.51 1209.78 L1188.92 1209.78 L1188.34 1209.78 L1187.75 1209.78 L1187.16 1209.78 L1186.58 1209.78 L1185.99 1209.78 L1185.41 1209.78 L1184.82 1209.78 L1184.23 1209.78 L1183.65 1209.78 L1183.06 1209.78 L1182.47 1209.78 L1181.89 1209.78 L1181.3 1209.78 L1180.71 1209.78 L1180.13 1209.78 L1179.54 1209.78 L1178.96 1209.78 L1178.37 1209.78 L1177.78 1209.78 L1177.2 1209.78 L1176.61 1209.78 L1176.02 1209.78 L1175.44 1209.78 L1174.85 1209.78 L1174.26 1209.78 L1173.68 1209.78 L1173.09 1209.78 L1172.5 1209.78 L1171.92 1209.78 L1171.33 1209.78 L1170.75 1209.78 L1170.16 1209.78 L1169.57 1209.78 L1168.99 1209.78 L1168.4 1209.78 L1167.81 1209.78 L1167.23 1209.78 L1166.64 1209.78 L1166.05 1209.78 L1165.47 1209.78 L1164.88 1209.78 L1164.29 1209.78 L1163.71 1209.78 L1163.12 1209.78 L1162.54 1209.78 L1161.95 1209.78 L1161.36 1209.78 L1160.78 1209.78 L1160.19 1209.78 L1159.6 1209.78 L1159.02 1209.78 L1158.43 1209.78 L1157.84 1209.78 L1157.26 1209.78 L1156.67 1209.78 L1156.09 1209.78 L1155.5 1209.78 L1154.91 1209.78 L1154.33 1209.78 L1153.74 1209.78 L1153.15 1209.78 L1152.57 1209.78 L1151.98 1209.78 L1151.39 1209.78 L1150.81 1209.78 L1150.22 1209.78 L1149.63 1209.78 L1149.05 1209.78 L1148.46 1209.78 L1147.88 1209.78 L1147.29 1209.78 L1146.7 1209.78 L1146.12 1209.78 L1145.53 1209.78 L1144.94 1209.78 L1144.36 1209.78 L1143.77 1209.78 L1143.18 1209.78 L1142.6 1209.78 L1142.01 1209.78 L1141.42 1209.78 L1140.84 1209.78 L1140.25 1209.78 L1139.67 1209.78 L1139.08 1209.78 L1138.49 1209.78 L1137.91 1209.78 L1137.32 1209.78 L1136.73 1209.78 L1136.15 1209.78 L1135.56 1209.78 L1134.97 1209.78 L1134.39 1209.78 L1133.8 1209.78 L1133.21 1209.78 L1132.63 1209.78 L1132.04 1209.78 L1131.46 1209.78 L1130.87 1209.78 L1130.28 1209.78 L1129.7 1209.78 L1129.11 1209.78 L1128.52 1209.78 L1127.94 1209.78 L1127.35 1209.78 L1126.76 1209.78 L1126.18 1209.78 L1125.59 1209.78 L1125.01 1209.78 L1124.42 1209.78 L1123.83 1209.78 L1123.25 1209.78 L1122.66 1209.78 L1122.07 1209.78 L1121.49 1209.78 L1120.9 1209.78 L1120.31 1209.78 L1119.73 1209.78 L1119.14 1209.78 L1118.55 1209.78 L1117.97 1209.78 L1117.38 1209.78 L1116.8 1209.78 L1116.21 1209.78 L1115.62 1209.78 L1115.04 1209.78 L1114.45 1209.78 L1113.86 1209.78 L1113.28 1209.78 L1112.69 1209.78 L1112.1 1209.78 L1111.52 1209.78 L1110.93 1209.78 L1110.34 1209.78 L1109.76 1209.78 L1109.17 1209.78 L1108.59 1209.78 L1108 1209.78 L1107.41 1209.78 L1106.83 1209.78 L1106.24 1209.78 L1105.65 1209.78 L1105.07 1209.78 L1104.48 1209.78 L1103.89 1209.78 L1103.31 1209.78 L1102.72 1209.78 L1102.14 1209.78 L1101.55 1209.78 L1100.96 1209.78 L1100.38 1209.78 L1099.79 1209.78 L1099.2 1209.78 L1098.62 1209.78 L1098.03 1209.78 L1097.44 1209.78 L1096.86 1209.78 L1096.27 1209.78 L1095.68 1209.78 L1095.1 1209.78 L1094.51 1209.78 L1093.93 1209.78 L1093.34 1209.78 L1092.75 1209.78 L1092.17 1209.78 L1091.58 1209.78 L1090.99 1209.78 L1090.41 1209.78 L1089.82 1209.78 L1089.23 1209.78 L1088.65 1209.78 L1088.06 1209.78 L1087.47 1209.78 L1086.89 1209.78 L1086.3 1209.78 L1085.72 1209.78 L1085.13 1209.78 L1084.54 1209.78 L1083.96 1209.78 L1083.37 1209.78 L1082.78 1209.78 L1082.2 1209.78 L1081.61 1209.78 L1081.02 1209.78 L1080.44 1209.78 L1079.85 1209.78 L1079.26 1209.78 L1078.68 1209.78 L1078.09 1209.78 L1077.51 1209.78 L1076.92 1209.78 L1076.33 1209.78 L1075.75 1209.78 L1075.16 1209.78 L1074.57 1209.78 L1073.99 1209.78 L1073.4 1209.78 L1072.81 1209.78 L1072.23 1209.78 L1071.64 1209.78 L1071.06 1209.78 L1070.47 1209.78 L1069.88 1209.78 L1069.3 1209.78 L1068.71 1209.78 L1068.12 1209.78 L1067.54 1209.78 L1066.95 1209.78 L1066.36 1209.78 L1065.78 1209.78 L1065.19 1209.78 L1064.6 1209.78 L1064.02 1209.78 L1063.43 1209.78 L1062.85 1209.78 L1062.26 1209.78 L1061.67 1209.78 L1061.09 1209.78 L1060.5 1209.78 L1059.91 1209.78 L1059.33 1209.78 L1058.74 1209.78 L1058.15 1209.78 L1057.57 1209.78 L1056.98 1209.78 L1056.39 1209.78 L1055.81 1209.78 L1055.22 1209.78 L1054.64 1209.78 L1054.05 1209.78 L1053.46 1209.78 L1052.88 1209.78 L1052.29 1209.78 L1051.7 1209.78 L1051.12 1209.78 L1050.53 1209.78 L1049.94 1209.78 L1049.36 1209.78 L1048.77 1209.78 L1048.19 1209.78 L1047.6 1209.78 L1047.01 1209.78 L1046.43 1209.78 L1045.84 1209.78 L1045.25 1209.78 L1044.67 1209.78 L1044.08 1209.78 L1043.49 1209.78 L1042.91 1209.78 L1042.32 1209.78 L1041.73 1209.78 L1041.15 1209.78 L1040.56 1209.78 L1039.98 1209.78 L1039.39 1209.78 L1038.8 1209.78 L1038.22 1209.78 L1037.63 1209.78 L1037.04 1209.78 L1036.46 1209.78 L1035.87 1209.78 L1035.28 1209.78 L1034.7 1209.78 L1034.11 1209.78 L1033.52 1209.78 L1032.94 1209.78 L1032.35 1209.78 L1031.77 1209.78 L1031.18 1209.78 L1030.59 1209.78 L1030.01 1209.78 L1029.42 1209.78 L1028.83 1209.78 L1028.25 1209.78 L1027.66 1209.78 L1027.07 1209.78 L1026.49 1209.78 L1025.9 1209.78 L1025.32 1209.78 L1024.73 1209.78 L1024.14 1209.78 L1023.56 1209.78 L1022.97 1209.78 L1022.38 1209.78 L1021.8 1209.78 L1021.21 1209.78 L1020.62 1209.78 L1020.04 1209.78 L1019.45 1209.78 L1018.86 1209.78 L1018.28 1209.78 L1017.69 1209.78 L1017.11 1209.78 L1016.52 1209.78 L1015.93 1209.78 L1015.35 1209.78 L1014.76 1209.78 L1014.17 1209.78 L1013.59 1209.78 L1013 1209.78 L1012.41 1209.78 L1011.83 1209.78 L1011.24 1209.78 L1010.65 1209.78 L1010.07 1209.78 L1009.48 1209.78 L1008.9 1209.78 L1008.31 1209.78 L1007.72 1209.78 L1007.14 1209.78 L1006.55 1209.78 L1005.96 1209.78 L1005.38 1209.78 L1004.79 1209.78 L1004.2 1209.78 L1003.62 1209.78 L1003.03 1209.78 L1002.44 1209.78 L1001.86 1209.78 L1001.27 1209.78 L1000.69 1209.78 L1000.1 1209.78 L999.513 1209.78 L998.926 1209.78 L998.34 1209.78 L997.754 1209.78 L997.167 1209.78 L996.581 1209.78 L995.994 1209.78 L995.408 1209.78 L994.822 1209.78 L994.235 1209.78 L993.649 1209.78 L993.062 1209.78 L992.476 1209.78 L991.889 1209.78 L991.303 1209.78 L990.717 1209.78 L990.13 1209.78 L989.544 1209.78 L988.957 1209.78 L988.371 1209.78 L987.785 1209.78 L987.198 1209.78 L986.612 1209.78 L986.025 1209.78  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.22 986.612,1210.22 987.198,1210.22 987.785,1210.22 988.371,1210.22 988.957,1210.22 989.544,1210.22 990.13,1210.22 990.717,1210.22 991.303,1210.22 991.889,1210.22 992.476,1210.22 993.062,1210.22 993.649,1210.22 994.235,1210.22 994.822,1210.22 995.408,1210.22 995.994,1210.22 996.581,1210.22 997.167,1210.22 997.754,1210.22 998.34,1210.22 998.926,1210.22 999.513,1210.22 1000.1,1210.22 1000.69,1210.22 1001.27,1210.22 1001.86,1210.22 1002.44,1210.22 1003.03,1210.22 1003.62,1210.22 1004.2,1210.22 1004.79,1210.22 1005.38,1210.22 1005.96,1210.22 1006.55,1210.22 1007.14,1210.22 1007.72,1210.22 1008.31,1210.22 1008.9,1210.22 1009.48,1210.22 1010.07,1210.22 1010.65,1210.22 1011.24,1210.22 1011.83,1210.22 1012.41,1210.22 1013,1210.22 1013.59,1210.22 1014.17,1210.22 1014.76,1210.22 1015.35,1210.22 1015.93,1210.22 1016.52,1210.22 1017.11,1210.22 1017.69,1210.22 1018.28,1210.22 1018.86,1210.22 1019.45,1210.22 1020.04,1210.22 1020.62,1210.22 1021.21,1210.22 1021.8,1210.22 1022.38,1210.22 1022.97,1210.22 1023.56,1210.22 1024.14,1210.22 1024.73,1210.22 1025.32,1210.22 1025.9,1210.22 1026.49,1210.22 1027.07,1210.22 1027.66,1210.22 1028.25,1210.22 1028.83,1210.22 1029.42,1210.22 1030.01,1210.22 1030.59,1210.22 1031.18,1210.22 1031.77,1210.22 1032.35,1210.22 1032.94,1210.22 1033.52,1210.22 1034.11,1210.22 1034.7,1210.22 1035.28,1210.22 1035.87,1210.22 1036.46,1210.22 1037.04,1210.22 1037.63,1210.22 1038.22,1210.22 1038.8,1210.22 1039.39,1210.22 1039.98,1210.22 1040.56,1210.22 1041.15,1210.22 1041.73,1210.22 1042.32,1210.22 1042.91,1210.22 1043.49,1210.22 1044.08,1210.22 1044.67,1210.22 1045.25,1210.22 1045.84,1210.22 1046.43,1210.22 1047.01,1210.22 1047.6,1210.22 1048.19,1210.22 1048.77,1210.22 1049.36,1210.22 1049.94,1210.22 1050.53,1210.22 1051.12,1210.22 1051.7,1210.22 1052.29,1210.22 1052.88,1210.22 1053.46,1210.22 1054.05,1210.22 1054.64,1210.22 1055.22,1210.22 1055.81,1210.22 1056.39,1210.22 1056.98,1210.22 1057.57,1210.22 1058.15,1210.22 1058.74,1210.22 1059.33,1210.22 1059.91,1210.22 1060.5,1210.22 1061.09,1210.22 1061.67,1210.22 1062.26,1210.22 1062.85,1210.22 1063.43,1210.22 1064.02,1210.22 1064.6,1210.22 1065.19,1210.22 1065.78,1210.22 1066.36,1210.22 1066.95,1210.22 1067.54,1210.22 1068.12,1210.22 1068.71,1210.22 1069.3,1210.22 1069.88,1210.22 1070.47,1210.22 1071.06,1210.22 1071.64,1210.22 1072.23,1210.22 1072.81,1210.22 1073.4,1210.22 1073.99,1210.22 1074.57,1210.22 1075.16,1210.22 1075.75,1210.22 1076.33,1210.22 1076.92,1210.22 1077.51,1210.22 1078.09,1210.22 1078.68,1210.22 1079.26,1210.22 1079.85,1210.22 1080.44,1210.22 1081.02,1210.22 1081.61,1210.22 1082.2,1210.22 1082.78,1210.22 1083.37,1210.22 1083.96,1210.22 1084.54,1210.22 1085.13,1210.22 1085.72,1210.22 1086.3,1210.22 1086.89,1210.22 1087.47,1210.22 1088.06,1210.22 1088.65,1210.22 1089.23,1210.22 1089.82,1210.22 1090.41,1210.22 1090.99,1210.22 1091.58,1210.22 1092.17,1210.22 1092.75,1210.22 1093.34,1210.22 1093.93,1210.22 1094.51,1210.22 1095.1,1210.22 1095.68,1210.22 1096.27,1210.22 1096.86,1210.22 1097.44,1210.22 1098.03,1210.22 1098.62,1210.22 1099.2,1210.22 1099.79,1210.22 1100.38,1210.22 1100.96,1210.22 1101.55,1210.22 1102.14,1210.22 1102.72,1210.22 1103.31,1210.22 1103.89,1210.22 1104.48,1210.22 1105.07,1210.22 1105.65,1210.22 1106.24,1210.22 1106.83,1210.22 1107.41,1210.22 1108,1210.22 1108.59,1210.22 1109.17,1210.22 1109.76,1210.22 1110.34,1210.22 1110.93,1210.22 1111.52,1210.22 1112.1,1210.22 1112.69,1210.22 1113.28,1210.22 1113.86,1210.22 1114.45,1210.22 1115.04,1210.22 1115.62,1210.22 1116.21,1210.22 1116.8,1210.22 1117.38,1210.22 1117.97,1210.22 1118.55,1210.22 1119.14,1210.22 1119.73,1210.22 1120.31,1210.22 1120.9,1210.22 1121.49,1210.22 1122.07,1210.22 1122.66,1210.22 1123.25,1210.22 1123.83,1210.22 1124.42,1210.22 1125.01,1210.22 1125.59,1210.22 1126.18,1210.22 1126.76,1210.22 1127.35,1210.22 1127.94,1210.22 1128.52,1210.22 1129.11,1210.22 1129.7,1210.22 1130.28,1210.22 1130.87,1210.22 1131.46,1210.22 1132.04,1210.22 1132.63,1210.22 1133.21,1210.22 1133.8,1210.22 1134.39,1210.22 1134.97,1210.22 1135.56,1210.22 1136.15,1210.22 1136.73,1210.22 1137.32,1210.22 1137.91,1210.22 1138.49,1210.22 1139.08,1210.22 1139.67,1210.22 1140.25,1210.22 1140.84,1210.22 1141.42,1210.22 1142.01,1210.22 1142.6,1210.22 1143.18,1210.22 1143.77,1210.22 1144.36,1210.22 1144.94,1210.22 1145.53,1210.22 1146.12,1210.22 1146.7,1210.22 1147.29,1210.22 1147.88,1210.22 1148.46,1210.22 1149.05,1210.22 1149.63,1210.22 1150.22,1210.22 1150.81,1210.22 1151.39,1210.22 1151.98,1210.22 1152.57,1210.22 1153.15,1210.22 1153.74,1210.22 1154.33,1210.22 1154.91,1210.22 1155.5,1210.22 1156.09,1210.22 1156.67,1210.22 1157.26,1210.22 1157.84,1210.22 1158.43,1210.22 1159.02,1210.22 1159.6,1210.22 1160.19,1210.22 1160.78,1210.22 1161.36,1210.22 1161.95,1210.22 1162.54,1210.22 1163.12,1210.22 1163.71,1210.22 1164.29,1210.22 1164.88,1210.22 1165.47,1210.22 1166.05,1210.22 1166.64,1210.22 1167.23,1210.22 1167.81,1210.22 1168.4,1210.22 1168.99,1210.22 1169.57,1210.22 1170.16,1210.22 1170.75,1210.22 1171.33,1210.22 1171.92,1210.22 1172.5,1210.22 1173.09,1210.22 1173.68,1210.22 1174.26,1210.22 1174.85,1210.22 1175.44,1210.22 1176.02,1210.22 1176.61,1210.22 1177.2,1210.22 1177.78,1210.22 1178.37,1210.22 1178.96,1210.22 1179.54,1210.22 1180.13,1210.22 1180.71,1210.22 1181.3,1210.22 1181.89,1210.22 1182.47,1210.22 1183.06,1210.22 1183.65,1210.22 1184.23,1210.22 1184.82,1210.22 1185.41,1210.22 1185.99,1210.22 1186.58,1210.22 1187.16,1210.22 1187.75,1210.22 1188.34,1210.22 1188.92,1210.22 1189.51,1210.22 1190.1,1210.22 1190.68,1210.22 1191.27,1210.22 1191.86,1210.22 1192.44,1210.22 1193.03,1210.22 1193.62,1210.22 1194.2,1210.22 1194.79,1210.22 1195.37,1210.22 1195.96,1210.22 1196.55,1210.22 1197.13,1210.22 1197.72,1210.22 1198.31,1210.22 1198.89,1210.22 1199.48,1210.22 1200.07,1210.22 1200.65,1210.22 1201.24,1210.22 1201.83,1210.22 1202.41,1210.22 1203,1210.22 1203.58,1210.22 1204.17,1210.22 1204.76,1210.22 1205.34,1210.22 1205.93,1210.22 1206.52,1210.22 1207.1,1210.22 1207.69,1210.22 1208.28,1210.22 1208.86,1210.22 1209.45,1210.22 1210.03,1210.22 1210.62,1210.22 1211.21,1210.22 1211.79,1210.22 1212.38,1210.22 1212.97,1210.22 1213.55,1210.22 1214.14,1210.22 1214.73,1210.22 1215.31,1210.22 1215.9,1210.22 1216.49,1210.22 1217.07,1210.22 1217.66,1210.22 1218.24,1210.22 1218.83,1210.22 1219.42,1210.22 1220,1210.22 1220.59,1210.22 1221.18,1210.22 1221.76,1210.22 1222.35,1210.22 1222.94,1210.22 1223.52,1210.22 1224.11,1210.22 1224.7,1210.22 1225.28,1210.22 1225.87,1210.22 1226.45,1210.22 1227.04,1210.22 1227.63,1210.22 1228.21,1210.22 1228.8,1210.22 1229.39,1210.22 1229.97,1210.22 1230.56,1210.22 1231.15,1210.22 1231.73,1210.22 1232.32,1210.22 1232.91,1210.22 1233.49,1210.22 1234.08,1210.22 1234.66,1210.22 1235.25,1210.22 1235.84,1210.22 1236.42,1210.22 1237.01,1210.22 1237.6,1210.22 1238.18,1210.22 1238.77,1210.22 1239.36,1210.22 1239.94,1210.22 1240.53,1210.22 1241.11,1210.22 1241.7,1210.22 1242.29,1210.22 1242.87,1210.22 1243.46,1210.22 1244.05,1210.22 1244.63,1210.22 1245.22,1210.22 1245.81,1210.22 1246.39,1210.22 1246.98,1210.22 1247.57,1210.22 1248.15,1210.22 1248.74,1210.22 1249.32,1210.22 1249.91,1210.22 1250.5,1210.22 1251.08,1210.22 1251.67,1210.22 1252.26,1210.22 1252.84,1210.22 1253.43,1210.22 1254.02,1210.22 1254.6,1210.22 1255.19,1210.22 1255.78,1210.22 1256.36,1210.22 1256.95,1210.22 1257.53,1210.22 1258.12,1210.22 1258.71,1210.22 1259.29,1210.22 1259.88,1210.22 1260.47,1210.22 1261.05,1210.22 1261.64,1210.22 1262.23,1210.22 1262.81,1210.22 1263.4,1210.22 1263.98,1210.22 1264.57,1210.22 1265.16,1210.22 1265.74,1210.22 1266.33,1210.22 1266.92,1210.22 1267.5,1210.22 1268.09,1210.22 1268.68,1210.22 1269.26,1210.22 1269.85,1210.22 1270.44,1210.22 1271.02,1210.22 1271.61,1210.22 1272.19,1210.22 1272.78,1210.22 1273.37,1210.22 1273.95,1210.22 1274.54,1210.22 1275.13,1210.22 1275.71,1210.22 1276.3,1210.22 1276.89,1210.22 1277.47,1210.22 1278.06,1210.22 1278.65,1210.22 1279.23,1210.22 1279.82,1210.22 1280.4,1210.22 1280.99,1210.22 1281.58,1210.22 1282.16,1210.22 1282.75,1210.22 1283.34,1210.22 1283.92,1210.22 1284.51,1210.22 1285.1,1210.22 1285.68,1210.22 1286.27,1210.22 1286.86,1210.22 1287.44,1210.22 1288.03,1210.22 1288.61,1210.22 1289.2,1210.22 1289.79,1210.22 1290.37,1210.22 1290.96,1210.22 1291.55,1210.22 1292.13,1210.22 1292.72,1210.22 1293.31,1210.22 1293.89,1210.22 1294.48,1210.22 1295.06,1210.22 1295.65,1210.22 1296.24,1210.22 1296.82,1210.22 1297.41,1210.22 1298,1210.22 1298.58,1210.22 1299.17,1210.22 1299.76,1210.22 1300.34,1210.22 1300.93,1210.22 1301.52,1210.22 1302.1,1210.22 1302.69,1210.22 1303.27,1210.22 1303.86,1210.22 1304.45,1210.22 1305.03,1210.22 1305.62,1210.22 1306.21,1210.22 1306.79,1210.22 1307.38,1210.22 1307.97,1210.22 1308.55,1210.22 1309.14,1210.22 1309.73,1210.22 1310.31,1210.22 1310.9,1210.22 1311.48,1210.22 1312.07,1210.22 1312.66,1210.22 1313.24,1210.22 1313.83,1210.22 1314.42,1210.22 1315,1210.22 1315.59,1210.22 1316.18,1210.22 1316.76,1210.22 1317.35,1210.22 1317.93,1210.22 1318.52,1210.22 1319.11,1210.22 1319.69,1210.22 1320.28,1210.22 1320.87,1210.22 1321.45,1210.22 1322.04,1210.22 1322.63,1210.22 1323.21,1210.22 1323.8,1210.22 1324.39,1210.22 1324.97,1210.22 1325.56,1210.22 1326.14,1210.22 1326.73,1210.22 1327.32,1210.22 1327.9,1210.22 1328.49,1210.22 1329.08,1210.22 1329.66,1210.22 1330.25,1210.22 1330.84,1210.22 1331.42,1210.22 1332.01,1210.22 1332.6,1210.22 1333.18,1210.22 1333.77,1210.22 1334.35,1210.22 1334.94,1210.22 1335.53,1210.22 1336.11,1210.22 1336.7,1210.22 1337.29,1210.22 1337.87,1210.22 1338.46,1210.22 1339.05,1210.22 1339.63,1210.22 1340.22,1210.22 1340.8,1210.22 1341.39,1210.22 1341.98,1210.22 1342.56,1210.22 1343.15,1210.22 1343.74,1210.22 1344.32,1210.22 1344.91,1210.22 1345.5,1210.22 1346.08,1210.22 1346.67,1210.22 1347.26,1210.22 1347.84,1210.22 1348.43,1210.22 1349.01,1210.22 1349.6,1210.22 1350.19,1210.22 1350.77,1210.22 1351.36,1210.22 1351.95,1210.22 1352.53,1210.22 1353.12,1210.22 1353.71,1210.22 1354.29,1210.22 1354.88,1210.22 1355.47,1210.22 1356.05,1210.22 1356.64,1210.22 1357.22,1210.22 1357.81,1210.22 1358.4,1210.22 1358.98,1210.22 1359.57,1210.22 1360.16,1210.22 1360.74,1210.22 1361.33,1210.22 1361.92,1210.22 1362.5,1210.22 1363.09,1210.22 1363.68,1210.22 1364.26,1210.22 1364.85,1210.22 1365.43,1210.22 1366.02,1210.22 1366.61,1210.22 1367.19,1210.22 1367.78,1210.22 1368.37,1210.22 1368.95,1210.22 1369.54,1210.22 1370.13,1210.22 1370.71,1210.22 1371.3,1210.22 1371.88,1210.22 1372.47,1210.22 1373.06,1210.22 1373.64,1210.22 1374.23,1210.22 1374.82,1210.22 1375.4,1210.22 1375.99,1210.22 1376.58,1210.22 1377.16,1210.22 1377.75,1210.22 1378.34,1210.22 1378.92,1210.22 1379.51,1210.22 1380.09,1210.22 1380.68,1210.22 1381.27,1210.22 1381.85,1210.22 1382.44,1210.22 1383.03,1210.22 1383.61,1210.22 1384.2,1210.22 1384.79,1210.22 1385.37,1210.22 1385.96,1210.22 1386.55,1210.22 1387.13,1210.22 1387.72,1210.22 1388.3,1210.22 1388.89,1210.22 1389.48,1210.22 1390.06,1210.22 1390.65,1210.22 1391.24,1210.22 1391.82,1210.22 1392.41,1210.22 1393,1210.22 1393.58,1210.22 1394.17,1210.22 1394.75,1210.22 1395.34,1210.22 1395.93,1210.22 1396.51,1210.22 1397.1,1210.22 1397.69,1210.22 1398.27,1210.22 1398.86,1210.22 1399.45,1210.22 1400.03,1210.22 1400.62,1210.22 1401.21,1210.22 1401.79,1210.22 1402.38,1210.22 1402.96,1210.22 1403.55,1210.22 1404.14,1210.22 1404.72,1210.22 1405.31,1210.22 1405.9,1210.22 1406.48,1210.22 1407.07,1210.22 1407.66,1210.22 1408.24,1210.22 1408.83,1210.22 1409.42,1210.22 1410,1210.22 1410.59,1210.22 1411.17,1210.22 1411.76,1210.22 1412.35,1210.22 1412.93,1210.22 1413.52,1210.22 1414.11,1210.22 1414.69,1210.22 1415.28,1210.22 1415.87,1210.22 1416.45,1210.22 1417.04,1210.22 1417.63,1210.22 1418.21,1210.22 1418.8,1210.22 1419.38,1210.22 1419.97,1210.22 1420.56,1210.22 1421.14,1210.22 1421.73,1210.22 1422.32,1210.22 1422.9,1210.22 1423.49,1210.22 1424.08,1210.22 1424.66,1210.22 1425.25,1210.22 1425.83,1210.22 1426.42,1210.22 1427.01,1210.22 1427.59,1210.22 1428.18,1210.22 1428.77,1210.22 1429.35,1210.22 1429.94,1210.22 1430.53,1210.22 1431.11,1210.22 1431.7,1210.22 1432.29,1210.22 1432.87,1210.22 1433.46,1210.22 1434.04,1210.22 1434.63,1210.22 1435.22,1210.22 1435.8,1210.22 1436.39,1210.22 1436.98,1210.22 1437.56,1210.22 1438.15,1210.22 1438.74,1210.22 1439.32,1210.22 1439.91,1210.22 1440.5,1210.22 1441.08,1210.22 1441.67,1210.22 1442.25,1210.22 1442.84,1210.22 1443.43,1210.22 1444.01,1210.22 1444.6,1210.22 1445.19,1210.22 1445.77,1210.22 1446.36,1210.22 1446.95,1210.22 1447.53,1210.22 1448.12,1210.22 1448.7,1210.22 1449.29,1210.22 1449.88,1210.22 1450.46,1210.22 1451.05,1210.22 1451.64,1210.22 1452.22,1210.22 1452.81,1210.22 1453.4,1210.22 1453.98,1210.22 1454.57,1210.22 1455.16,1210.22 1455.74,1210.22 1456.33,1210.22 1456.91,1210.22 1457.5,1210.22 1458.09,1210.22 1458.67,1210.22 1459.26,1210.22 1459.85,1210.22 1460.43,1210.22 1461.02,1210.22 1461.61,1210.22 1462.19,1210.22 1462.78,1210.22 1463.37,1210.22 1463.95,1210.22 1464.54,1210.22 1465.12,1210.22 1465.71,1210.22 1466.3,1210.22 1466.88,1210.22 1467.47,1210.22 1468.06,1210.22 1468.64,1210.22 1469.23,1210.22 1469.82,1210.22 1470.4,1210.22 1470.99,1210.22 1471.57,1210.22 1472.16,1210.22 1472.75,1210.22 1473.33,1210.22 1473.92,1210.22 1474.51,1210.22 1475.09,1210.22 1475.68,1210.22 1476.27,1210.22 1476.85,1210.22 1477.44,1210.22 1478.03,1210.22 1478.61,1210.22 1479.2,1210.22 1479.78,1210.22 1480.37,1210.22 1480.96,1210.22 1481.54,1210.22 1482.13,1210.22 1482.72,1210.22 1483.3,1210.22 1483.89,1210.22 1484.48,1210.22 1485.06,1210.22 1485.65,1210.22 1486.24,1210.22 1486.82,1210.22 1487.41,1210.22 1487.99,1210.22 1488.58,1210.22 1489.17,1210.22 1489.75,1210.22 1490.34,1210.22 1490.93,1210.22 1491.51,1210.22 1492.1,1210.22 1492.69,1210.22 1493.27,1210.22 1493.86,1210.22 1494.45,1210.22 1495.03,1210.22 1495.62,1210.22 1496.2,1210.22 1496.79,1210.22 1497.38,1210.22 1497.96,1210.22 1498.55,1210.22 1499.14,1210.22 1499.72,1210.22 1500.31,1210.22 1500.9,1210.22 1501.48,1210.22 1502.07,1210.22 1502.65,1210.22 1503.24,1210.22 1503.83,1210.22 1504.41,1210.22 1505,1210.22 1505.59,1210.22 1506.17,1210.22 1506.76,1210.22 1507.35,1210.22 1507.93,1210.22 1508.52,1210.22 1509.11,1210.22 1509.69,1210.22 1510.28,1210.22 1510.86,1210.22 1511.45,1210.22 1512.04,1210.22 1512.62,1210.22 1513.21,1210.22 1513.8,1210.22 1514.38,1210.22 1514.97,1210.22 1515.56,1210.22 1516.14,1210.22 1516.73,1210.22 1517.32,1210.22 1517.9,1210.22 1518.49,1210.22 1519.07,1210.22 1519.66,1210.22 1520.25,1210.22 1520.83,1210.22 1521.42,1210.22 1522.01,1210.22 1522.59,1210.22 1523.18,1210.22 1523.77,1210.22 1524.35,1210.22 1524.94,1210.22 1525.52,1210.22 1526.11,1210.22 1526.7,1210.22 1527.28,1210.22 1527.87,1210.22 1528.46,1210.22 1529.04,1210.22 1529.63,1210.22 1530.22,1210.22 1530.8,1210.22 1531.39,1210.22 1531.98,1210.22 1532.56,1210.22 1533.15,1210.22 1533.73,1210.22 1534.32,1210.22 1534.91,1210.22 1535.49,1210.22 1536.08,1210.22 1536.67,1210.22 1537.25,1210.22 1537.84,1210.22 1538.43,1210.22 1539.01,1210.22 1539.6,1210.22 1540.19,1210.22 1540.77,1210.22 1541.36,1210.22 1541.94,1210.22 1542.53,1210.22 1543.12,1210.22 1543.7,1210.22 1544.29,1210.22 1544.88,1210.22 1545.46,1210.22 1546.05,1210.22 1546.64,1210.22 1547.22,1210.22 1547.81,1210.22 1548.4,1210.22 1548.98,1210.22 1549.57,1210.22 1550.15,1210.22 1550.74,1210.22 1551.33,1210.22 1551.91,1210.22 1552.5,1210.22 1553.09,1210.22 1553.67,1210.22 1554.26,1210.22 1554.85,1210.22 1555.43,1210.22 1556.02,1210.22 1556.6,1210.22 1557.19,1210.22 1557.78,1210.22 1558.36,1210.22 1558.95,1210.22 1559.54,1210.22 1560.12,1210.22 1560.71,1210.22 1561.3,1210.22 1561.88,1210.22 1562.47,1210.22 1563.06,1210.22 1563.64,1210.22 1564.23,1210.22 1564.81,1210.22 1565.4,1210.22 1565.99,1210.22 1566.57,1210.22 1567.16,1210.22 1567.75,1210.22 1568.33,1210.22 1568.92,1210.22 1569.51,1210.22 1570.09,1210.22 1570.68,1210.22 1571.27,1210.22 1571.85,1210.22 1572.44,1210.22 1573.02,1210.22 1573.61,1210.22 1574.2,1210.22 1574.78,1210.22 1575.37,1210.22 1575.96,1210.22 1576.54,1210.22 1577.13,1210.22 1577.72,1210.22 1578.3,1210.22 1578.89,1210.22 1579.47,1210.22 1580.06,1210.22 1580.65,1210.22 1581.23,1210.22 1581.82,1210.22 1582.41,1210.22 1582.99,1210.22 1583.58,1210.22 1584.17,1210.22 1584.75,1210.22 1585.34,1210.22 1585.93,1210.22 1586.51,1210.22 1587.1,1210.22 1587.68,1210.22 1588.27,1210.22 1588.86,1210.22 1589.44,1210.22 1590.03,1210.22 1590.62,1210.22 1591.2,1210.22 1591.79,1210.22 1592.38,1210.22 1592.96,1210.22 1593.55,1210.22 1594.14,1210.22 1594.72,1210.22 1595.31,1210.22 1595.89,1210.22 1596.48,1210.22 1597.07,1210.22 1597.65,1210.22 1598.24,1210.22 1598.83,1210.22 1599.41,1210.22 1600,1210.22 1600.59,1210.22 1601.17,1210.22 1601.76,1210.22 1602.34,1210.22 1602.93,1210.22 1603.52,1210.22 1604.1,1210.22 1604.69,1210.22 1605.28,1210.22 1605.86,1210.22 1606.45,1210.22 1607.04,1210.22 1607.62,1210.22 1608.21,1210.22 1608.8,1210.22 1609.38,1210.22 1609.97,1210.22 1610.55,1210.22 1611.14,1210.22 1611.73,1210.22 1612.31,1210.22 1612.9,1210.22 1613.49,1210.22 1614.07,1210.22 1614.66,1210.22 1615.25,1210.22 1615.83,1210.22 1616.42,1210.22 1617.01,1210.22 1617.59,1210.22 1618.18,1210.22 1618.76,1210.22 1619.35,1210.22 1619.94,1210.22 1620.52,1210.22 1621.11,1210.22 1621.7,1210.22 1622.28,1210.22 1622.87,1210.22 1623.46,1210.22 1624.04,1210.22 1624.63,1210.22 1625.22,1210.22 1625.8,1210.22 1626.39,1210.22 1626.97,1210.22 1627.56,1210.22 1628.15,1210.22 1628.73,1210.22 1629.32,1210.22 1629.91,1210.22 1630.49,1210.22 1631.08,1210.22 1631.67,1210.22 1632.25,1210.22 1632.84,1210.22 1633.42,1210.22 1634.01,1210.22 1634.6,1210.22 1635.18,1210.22 1635.77,1210.22 1636.36,1210.22 1636.94,1210.22 1637.53,1210.22 1638.12,1210.22 1638.7,1210.22 1639.29,1210.22 1639.88,1210.22 1640.46,1210.22 1641.05,1210.22 1641.63,1210.22 1642.22,1210.22 1642.81,1210.22 1643.39,1210.22 1643.98,1210.22 1644.57,1210.22 1645.15,1210.22 1645.74,1210.22 1646.33,1210.22 1646.91,1210.22 1647.5,1210.22 1648.09,1210.22 1648.67,1210.22 1649.26,1210.22 1649.84,1210.22 1650.43,1210.22 1651.02,1210.22 1651.6,1210.22 1652.19,1210.22 1652.78,1210.22 1653.36,1210.22 1653.95,1210.22 1654.54,1210.22 1655.12,1210.22 1655.71,1210.22 1656.29,1210.22 1656.88,1210.22 1657.47,1210.22 1658.05,1210.22 1658.64,1210.22 1659.23,1210.22 1659.81,1210.22 1660.4,1210.22 1660.99,1210.22 1661.57,1210.22 1662.16,1210.22 1662.75,1210.22 1663.33,1210.22 1663.92,1210.22 1664.5,1210.22 1665.09,1210.22 1665.68,1210.22 1666.26,1210.22 1666.85,1210.22 1667.44,1210.22 1668.02,1210.22 1668.61,1210.22 1669.2,1210.22 1669.78,1210.22 1670.37,1210.22 1670.96,1210.22 1671.54,1210.22 1672.13,1210.22 1672.71,1210.22 1673.3,1210.22 1673.89,1210.22 1674.47,1210.22 1675.06,1210.22 1675.65,1210.22 1676.23,1210.22 1676.82,1210.22 1677.41,1210.22 1677.99,1210.22 1678.58,1210.22 1679.17,1210.22 1679.75,1210.22 1680.34,1210.22 1680.92,1210.22 1681.51,1210.22 1682.1,1210.22 1682.68,1210.22 1683.27,1210.22 1683.86,1210.22 1684.44,1210.22 1685.03,1210.22 1685.62,1210.22 1686.2,1210.22 1686.79,1210.22 1687.37,1210.22 1687.96,1210.22 1688.55,1210.22 1689.13,1210.22 1689.72,1210.22 1690.31,1210.22 1690.89,1210.22 1691.48,1210.22 1692.07,1210.22 1692.65,1210.22 1693.24,1210.22 1693.83,1210.22 1694.41,1210.22 1695,1210.22 1695.58,1210.22 1696.17,1210.22 1696.76,1210.22 1697.34,1210.22 1697.93,1210.22 1698.52,1210.22 1699.1,1210.22 1699.69,1210.22 1700.28,1210.22 1700.86,1210.22 1701.45,1210.22 1702.04,1210.22 1702.62,1210.22 1703.21,1210.22 1703.79,1210.22 1704.38,1210.22 1704.97,1210.22 1705.55,1210.22 1706.14,1210.22 1706.73,1210.22 1707.31,1210.22 1707.9,1210.22 1708.49,1210.22 1709.07,1210.22 1709.66,1210.22 1710.24,1210.22 1710.83,1210.22 1711.42,1210.22 1712,1210.22 1712.59,1210.22 1713.18,1210.22 1713.76,1210.22 1714.35,1210.22 1714.94,1210.22 1715.52,1210.22 1716.11,1210.22 1716.7,1210.22 1717.28,1210.22 1717.87,1210.22 1718.45,1210.22 1719.04,1210.22 1719.63,1210.22 1720.21,1210.22 1720.8,1210.22 1721.39,1210.22 1721.97,1210.22 1722.56,1210.22 1723.15,1210.22 1723.73,1210.22 1724.32,1210.22 1724.91,1210.22 1725.49,1210.22 1726.08,1210.22 1726.66,1210.22 1727.25,1210.22 1727.84,1210.22 1728.42,1210.22 1729.01,1210.22 1729.6,1210.22 1730.18,1210.22 1730.77,1210.22 1731.36,1210.22 1731.94,1210.22 1732.53,1210.22 1733.11,1210.22 1733.7,1210.22 1734.29,1210.22 1734.87,1210.22 1735.46,1210.22 1736.05,1210.22 1736.63,1210.22 1737.22,1210.22 1737.81,1210.22 1738.39,1210.22 1738.98,1210.22 1739.57,1210.22 1740.15,1210.22 1740.74,1210.22 1741.32,1210.22 1741.91,1210.22 1742.5,1210.22 1743.08,1210.22 1743.67,1210.22 1744.26,1210.22 1744.84,1210.22 1745.43,1210.22 1746.02,1210.22 1746.6,1210.22 1747.19,1210.22 1747.78,1210.22 1748.36,1210.22 1748.95,1210.22 1749.53,1210.22 1750.12,1210.22 1750.71,1210.22 1751.29,1210.22 1751.88,1210.22 1752.47,1210.22 1753.05,1210.22 1753.64,1210.22 1754.23,1210.22 1754.81,1210.22 1755.4,1210.22 1755.99,1210.22 1756.57,1210.22 1757.16,1210.22 1757.74,1210.22 1758.33,1210.22 1758.92,1210.22 1759.5,1210.22 1760.09,1210.22 1760.68,1210.22 1761.26,1210.22 1761.85,1210.22 1762.44,1210.22 1763.02,1210.22 1763.61,1210.22 1764.19,1210.22 1764.78,1210.22 1765.37,1210.22 1765.95,1210.22 1766.54,1210.22 1767.13,1210.22 1767.71,1210.22 1768.3,1210.22 1768.89,1210.22 1769.47,1210.22 1770.06,1210.22 1770.65,1210.22 1771.23,1210.22 1771.82,1210.22 1772.4,1210.22 1772.99,1210.22 1773.58,1210.22 1774.16,1210.22 1774.75,1210.22 1775.34,1210.22 1775.92,1210.22 1776.51,1210.22 1777.1,1210.22 1777.68,1210.22 1778.27,1210.22 1778.86,1210.22 1779.44,1210.22 1780.03,1210.22 1780.61,1210.22 1781.2,1210.22 1781.79,1210.22 1782.37,1210.22 1782.96,1210.22 1783.55,1210.22 1784.13,1210.22 1784.72,1210.22 1785.31,1210.22 1785.89,1210.22 1786.48,1210.22 1787.06,1210.22 1787.65,1210.22 1788.24,1210.22 1788.82,1210.22 1789.41,1210.22 1790,1210.22 1790.58,1210.22 1791.17,1210.22 1791.76,1210.22 1792.34,1210.22 1792.93,1210.22 1793.52,1210.22 1794.1,1210.22 1794.69,1210.22 1795.27,1210.22 1795.86,1210.22 1796.45,1210.22 1797.03,1210.22 1797.62,1210.22 1798.21,1210.22 1798.79,1210.22 1799.38,1210.22 1799.97,1210.22 1800.55,1210.22 1801.14,1210.22 1801.73,1210.22 1802.31,1210.22 1802.9,1210.22 1803.48,1210.22 1804.07,1210.22 1804.66,1210.22 1805.24,1210.22 1805.83,1210.22 1806.42,1210.22 1807,1210.22 1807.59,1210.22 1808.18,1210.22 1808.76,1210.22 1809.35,1210.22 1809.94,1210.22 1810.52,1210.22 1811.11,1210.22 1811.69,1210.22 1812.28,1210.22 1812.87,1210.22 1813.45,1210.22 1814.04,1210.22 1814.63,1210.22 1815.21,1210.22 1815.8,1210.22 1816.39,1210.22 1816.97,1210.22 1817.56,1210.22 1818.14,1210.22 1818.73,1210.22 1819.32,1210.22 1819.9,1210.22 1820.49,1210.22 1821.08,1210.22 1821.66,1210.22 1822.25,1210.22 1822.84,1210.22 1823.42,1210.22 1824.01,1210.22 1824.6,1210.22 1825.18,1210.22 1825.77,1210.22 1826.35,1210.22 1826.94,1210.22 1827.53,1210.22 1828.11,1210.22 1828.7,1210.22 1829.29,1210.22 1829.87,1210.22 1830.46,1210.22 1831.05,1210.22 1831.63,1210.22 1832.22,1210.22 1832.81,1210.22 1833.39,1210.22 1833.98,1210.22 1834.56,1210.22 1835.15,1210.22 1835.74,1210.22 1836.32,1210.22 1836.91,1210.22 1837.5,1210.22 1838.08,1210.22 1838.67,1210.22 1839.26,1210.22 1839.84,1210.22 1840.43,1210.22 1841.01,1210.22 1841.6,1210.22 1842.19,1210.22 1842.77,1210.22 1843.36,1210.22 1843.95,1210.22 1844.53,1210.22 1845.12,1210.22 1845.71,1210.22 1846.29,1210.22 1846.88,1210.22 1847.47,1210.22 1848.05,1210.22 1848.64,1210.22 1849.22,1210.22 1849.81,1210.22 1850.4,1210.22 1850.98,1210.22 1851.57,1210.22 1852.16,1210.22 1852.74,1210.22 1853.33,1210.22 1853.92,1210.22 1854.5,1210.22 1855.09,1210.22 1855.68,1210.22 1856.26,1210.22 1856.85,1210.22 1857.43,1210.22 1858.02,1210.22 1858.61,1210.22 1859.19,1210.22 1859.78,1210.22 1860.37,1210.22 1860.95,1210.22 1861.54,1210.22 1862.13,1210.22 1862.71,1210.22 1863.3,1210.22 1863.88,1210.22 1864.47,1210.22 1865.06,1210.22 1865.64,1210.22 1866.23,1210.22 1866.82,1210.22 1867.4,1210.22 1867.99,1210.22 1868.58,1210.22 1869.16,1210.22 1869.75,1210.22 1870.34,1210.22 1870.92,1210.22 1871.51,1210.22 1872.09,1210.22 1872.68,1210.22 1873.27,1210.22 1873.85,1210.22 1874.44,1210.22 1875.03,1210.22 1875.61,1210.22 1876.2,1210.22 1876.79,1210.22 1877.37,1210.22 1877.96,1210.22 1878.55,1210.22 1879.13,1210.22 1879.72,1210.22 1880.3,1210.22 1880.89,1210.22 1881.48,1210.22 1882.06,1210.22 1882.65,1210.22 1883.24,1210.22 1883.82,1210.22 1884.41,1210.22 1885,1210.22 1885.58,1210.22 1886.17,1210.22 1886.76,1210.22 1887.34,1210.22 1887.93,1210.22 1888.51,1210.22 1889.1,1210.22 1889.69,1210.22 1890.27,1210.22 1890.86,1210.22 1891.45,1210.22 1892.03,1210.22 1892.62,1210.22 1893.21,1210.22 1893.79,1210.22 1894.38,1210.22 1894.96,1210.22 1895.55,1210.22 1896.14,1210.22 1896.72,1210.22 1897.31,1210.22 1897.9,1210.22 1898.48,1210.22 1899.07,1210.22 1899.66,1210.22 1900.24,1210.22 1900.83,1210.22 1901.42,1210.22 1902,1210.22 1902.59,1210.22 1903.17,1210.22 1903.76,1210.22 1904.35,1210.22 1904.93,1210.22 1905.52,1210.22 1906.11,1210.22 1906.69,1210.22 1907.28,1210.22 1907.87,1210.22 1908.45,1210.22 1909.04,1210.22 1909.63,1210.22 1910.21,1210.22 1910.8,1210.22 1911.38,1210.22 1911.97,1210.22 1912.56,1210.22 1913.14,1210.22 1913.73,1210.22 1914.32,1210.22 1914.9,1210.22 1915.49,1210.22 1916.08,1210.22 1916.66,1210.22 1917.25,1210.22 1917.83,1210.22 1918.42,1210.22 1919.01,1210.22 1919.59,1210.22 1920.18,1210.22 1920.77,1210.22 1921.35,1210.22 1921.94,1210.22 1922.53,1210.22 1923.11,1210.22 1923.7,1210.22 1924.29,1210.22 1924.87,1210.22 1925.46,1210.22 1926.04,1210.22 1926.63,1210.22 1927.22,1210.22 1927.8,1210.22 1928.39,1210.22 1928.98,1210.22 1929.56,1210.22 1930.15,1210.22 1930.74,1210.22 1931.32,1210.22 1931.91,1210.22 1932.5,1210.22 1933.08,1210.22 1933.67,1210.22 1934.25,1210.22 1934.84,1210.22 1935.43,1210.22 1936.01,1210.22 1936.6,1210.22 1937.19,1210.22 1937.77,1210.22 1938.36,1210.22 1938.95,1210.22 1939.53,1210.22 1940.12,1210.22 1940.71,1210.22 1941.29,1210.22 1941.88,1210.22 1942.46,1210.22 1943.05,1210.22 1943.64,1210.22 1944.22,1210.22 1944.81,1210.22 1945.4,1210.22 1945.98,1210.22 1946.57,1210.22 1947.16,1210.22 1947.74,1210.22 1948.33,1210.22 1948.91,1210.22 1949.5,1210.22 1950.09,1210.22 1950.67,1210.22 1951.26,1210.22 1951.85,1210.22 1952.43,1210.22 1953.02,1210.22 1953.61,1210.22 1954.19,1210.22 1954.78,1210.22 1955.37,1210.22 1955.95,1210.22 1956.54,1210.22 1957.12,1210.22 1957.71,1210.22 1958.3,1210.22 1958.88,1210.22 1959.47,1210.22 1960.06,1210.22 1960.64,1210.22 1961.23,1210.22 1961.82,1210.22 1962.4,1210.22 1962.99,1210.22 1963.58,1210.22 1964.16,1210.22 1964.75,1210.22 1965.33,1210.22 1965.92,1210.22 1966.51,1210.22 1967.09,1210.22 1967.68,1210.22 1968.27,1210.22 1968.85,1210.22 1969.44,1210.22 1970.03,1210.22 1970.61,1210.22 1971.2,1210.22 1971.78,1210.22 1972.37,1210.22 1972.96,1210.22 1973.54,1210.22 1974.13,1210.22 1974.72,1210.22 1975.3,1210.22 1975.89,1210.22 1976.48,1210.22 1977.06,1210.22 1977.65,1210.22 1978.24,1210.22 1978.82,1210.22 1979.41,1210.22 1979.99,1210.22 1980.58,1210.22 1981.17,1210.22 1981.75,1210.22 1982.34,1210.22 1982.93,1210.22 1983.51,1210.22 1984.1,1210.22 1984.69,1210.22 1985.27,1210.22 1985.86,1210.22 1986.45,1210.22 1987.03,1210.22 1987.62,1210.22 1988.2,1210.22 1988.79,1210.22 1989.38,1210.22 1989.96,1210.22 1990.55,1210.22 1991.14,1210.22 1991.72,1210.22 1992.31,1210.22 1992.9,1210.22 1993.48,1210.22 1994.07,1210.22 1994.65,1210.22 1995.24,1210.22 1995.83,1210.22 1996.41,1210.22 1997,1210.22 1997.59,1210.22 1998.17,1210.22 1998.76,1210.22 1999.35,1210.22 1999.93,1210.22 2000.52,1210.22 2001.11,1210.22 2001.69,1210.22 2002.28,1210.22 2002.86,1210.22 2003.45,1210.22 2004.04,1210.22 2004.62,1210.22 2005.21,1210.22 2005.8,1210.22 2006.38,1210.22 2006.97,1210.22 2007.56,1210.22 2008.14,1210.22 2008.73,1210.22 2009.32,1210.22 2009.9,1210.22 2010.49,1210.22 2011.07,1210.22 2011.66,1210.22 2012.25,1210.22 2012.83,1210.22 2013.42,1210.22 2014.01,1210.22 2014.59,1210.22 2015.18,1210.22 2015.77,1210.22 2016.35,1210.22 2016.94,1210.22 2017.53,1210.22 2018.11,1210.22 2018.7,1210.22 2019.28,1210.22 2019.87,1210.22 2020.46,1210.22 2021.04,1210.22 2021.63,1210.22 2022.22,1210.22 2022.8,1210.22 2023.39,1210.22 2023.98,1210.22 2024.56,1210.22 2025.15,1210.22 2025.73,1210.22 2026.32,1210.22 2026.91,1210.22 2027.49,1210.22 2028.08,1210.22 2028.67,1210.22 2029.25,1210.22 2029.84,1210.22 2030.43,1210.22 2031.01,1210.22 2031.6,1210.22 2032.19,1210.22 2032.77,1210.22 2033.36,1210.22 2033.94,1210.22 2034.53,1210.22 2035.12,1210.22 2035.7,1210.22 2036.29,1210.22 2036.88,1210.22 2037.46,1210.22 2038.05,1210.22 2038.64,1210.22 2039.22,1210.22 2039.81,1210.22 2040.4,1210.22 2040.98,1210.22 2041.57,1210.22 2042.15,1210.22 2042.74,1210.22 2043.33,1210.22 2043.91,1210.22 2044.5,1210.22 2045.09,1210.22 2045.67,1210.22 2046.26,1210.22 2046.85,1210.22 2047.43,1210.22 2048.02,1210.22 2048.6,1210.22 2049.19,1210.22 2049.78,1210.22 2050.36,1210.22 2050.95,1210.22 2051.54,1210.22 2052.12,1210.22 2052.71,1210.22 2053.3,1210.22 2053.88,1210.22 2054.47,1210.22 2055.06,1210.22 2055.64,1210.22 2056.23,1210.22 2056.81,1210.22 2057.4,1210.22 2057.99,1210.22 2058.57,1210.22 2059.16,1210.22 2059.75,1210.22 2060.33,1210.22 2060.92,1210.22 2061.51,1210.22 2062.09,1210.22 2062.68,1210.22 2063.27,1210.22 2063.85,1210.22 2064.44,1210.22 2065.02,1210.22 2065.61,1210.22 2066.2,1210.22 2066.78,1210.22 2067.37,1210.22 2067.96,1210.22 2068.54,1210.22 2069.13,1210.22 2069.72,1210.22 2070.3,1210.22 2070.89,1210.22 2071.48,1210.22 2072.06,1210.22 2072.65,1210.22 2073.23,1210.22 2073.82,1210.22 2074.41,1210.22 2074.99,1210.22 2075.58,1210.22 2076.17,1210.22 2076.75,1210.22 2077.34,1210.22 2077.93,1210.22 2078.51,1210.22 2079.1,1210.22 2079.68,1210.22 2080.27,1210.22 2080.86,1210.22 2081.44,1210.22 2082.03,1210.22 2082.62,1210.22 2083.2,1210.22 2083.79,1210.22 2084.38,1210.22 2084.96,1210.22 2085.55,1210.22 2086.14,1210.22 2086.72,1210.22 2087.31,1210.22 2087.89,1210.22 2088.48,1210.22 2089.07,1210.22 2089.65,1210.22 2090.24,1210.22 2090.83,1210.22 2091.41,1210.22 2092,1210.22 2092.59,1210.22 2093.17,1210.22 2093.76,1210.22 2094.35,1210.22 2094.93,1210.22 2095.52,1210.22 2096.1,1210.22 2096.69,1210.22 2097.28,1210.22 2097.86,1210.22 2098.45,1210.22 2099.04,1210.22 2099.62,1210.22 2100.21,1210.22 2100.8,1210.22 2101.38,1210.22 2101.97,1210.22 2102.55,1210.22 2103.14,1210.22 2103.73,1210.22 2104.31,1210.22 2104.9,1210.22 2105.49,1210.22 2106.07,1210.22 2106.66,1210.22 2107.25,1210.22 2107.83,1210.22 2108.42,1210.22 2109.01,1210.22 2109.59,1210.22 2110.18,1210.22 2110.76,1210.22 2111.35,1210.22 2111.94,1210.22 2112.52,1210.22 2113.11,1210.22 2113.7,1210.22 2114.28,1210.22 2114.87,1210.22 2115.46,1210.22 2116.04,1210.22 2116.63,1210.22 2117.22,1210.22 2117.8,1210.22 2118.39,1210.22 2118.97,1210.22 2119.56,1210.22 2120.15,1210.22 2120.73,1210.22 2121.32,1210.22 2121.91,1210.22 2122.49,1210.22 2123.08,1210.22 2123.67,1210.22 2124.25,1210.22 2124.84,1210.22 2125.42,1210.22 2126.01,1210.22 2126.6,1210.22 2127.18,1210.22 2127.77,1210.22 2128.36,1210.22 2128.94,1210.22 2129.53,1210.22 2130.12,1210.22 2130.7,1210.22 2131.29,1210.22 2131.88,1210.22 2132.46,1210.22 2133.05,1210.22 2133.63,1210.22 2134.22,1210.22 2134.81,1210.22 2135.39,1210.22 2135.98,1210.22 2136.57,1210.22 2137.15,1210.22 2137.74,1210.22 2138.33,1210.22 2138.91,1210.22 2139.5,1210.22 2140.09,1210.22 2140.67,1210.22 2141.26,1210.22 2141.84,1210.22 2142.43,1210.22 2143.02,1210.22 2143.6,1210.22 2144.19,1210.22 2144.78,1210.22 2145.36,1210.22 2145.95,1210.22 2146.54,1210.22 2147.12,1210.22 2147.71,1210.22 2148.3,1210.22 2148.88,1210.22 2149.47,1210.22 2150.05,1210.22 2150.64,1210.22 2151.23,1210.22 2151.81,1210.22 2152.4,1210.22 2152.99,1210.22 2153.57,1210.22 2154.16,1210.22 2154.75,1210.22 2155.33,1210.22 2155.92,1210.22 2156.5,1210.22 2157.09,1210.22 2157.68,1210.22 2158.26,1210.22 \"/>\n<path clip-path=\"url(#clip242)\" d=\"M986.025 1210.12 L986.612 1210.12 L987.198 1210.12 L987.785 1210.12 L988.371 1210.12 L988.957 1210.12 L989.544 1210.12 L990.13 1210.12 L990.717 1210.12 L991.303 1210.12 L991.889 1210.12 L992.476 1210.12 L993.062 1210.12 L993.649 1210.12 L994.235 1210.12 L994.822 1210.12 L995.408 1210.12 L995.994 1210.12 L996.581 1210.12 L997.167 1210.12 L997.754 1210.12 L998.34 1210.12 L998.926 1210.12 L999.513 1210.12 L1000.1 1210.12 L1000.69 1210.12 L1001.27 1210.12 L1001.86 1210.12 L1002.44 1210.12 L1003.03 1210.12 L1003.62 1210.12 L1004.2 1210.12 L1004.79 1210.12 L1005.38 1210.12 L1005.96 1210.12 L1006.55 1210.12 L1007.14 1210.12 L1007.72 1210.12 L1008.31 1210.12 L1008.9 1210.12 L1009.48 1210.12 L1010.07 1210.12 L1010.65 1210.12 L1011.24 1210.12 L1011.83 1210.12 L1012.41 1210.12 L1013 1210.12 L1013.59 1210.12 L1014.17 1210.12 L1014.76 1210.12 L1015.35 1210.12 L1015.93 1210.12 L1016.52 1210.12 L1017.11 1210.12 L1017.69 1210.12 L1018.28 1210.12 L1018.86 1210.12 L1019.45 1210.12 L1020.04 1210.12 L1020.62 1210.12 L1021.21 1210.12 L1021.8 1210.12 L1022.38 1210.12 L1022.97 1210.12 L1023.56 1210.12 L1024.14 1210.12 L1024.73 1210.12 L1025.32 1210.12 L1025.9 1210.12 L1026.49 1210.12 L1027.07 1210.12 L1027.66 1210.12 L1028.25 1210.12 L1028.83 1210.12 L1029.42 1210.12 L1030.01 1210.12 L1030.59 1210.12 L1031.18 1210.12 L1031.77 1210.12 L1032.35 1210.12 L1032.94 1210.12 L1033.52 1210.12 L1034.11 1210.12 L1034.7 1210.12 L1035.28 1210.12 L1035.87 1210.12 L1036.46 1210.12 L1037.04 1210.12 L1037.63 1210.12 L1038.22 1210.12 L1038.8 1210.12 L1039.39 1210.12 L1039.98 1210.12 L1040.56 1210.12 L1041.15 1210.12 L1041.73 1210.12 L1042.32 1210.12 L1042.91 1210.12 L1043.49 1210.12 L1044.08 1210.12 L1044.67 1210.12 L1045.25 1210.12 L1045.84 1210.12 L1046.43 1210.12 L1047.01 1210.12 L1047.6 1210.12 L1048.19 1210.12 L1048.77 1210.12 L1049.36 1210.12 L1049.94 1210.12 L1050.53 1210.12 L1051.12 1210.12 L1051.7 1210.12 L1052.29 1210.12 L1052.88 1210.12 L1053.46 1210.12 L1054.05 1210.12 L1054.64 1210.12 L1055.22 1210.12 L1055.81 1210.12 L1056.39 1210.12 L1056.98 1210.12 L1057.57 1210.12 L1058.15 1210.12 L1058.74 1210.12 L1059.33 1210.12 L1059.91 1210.12 L1060.5 1210.12 L1061.09 1210.12 L1061.67 1210.12 L1062.26 1210.12 L1062.85 1210.12 L1063.43 1210.12 L1064.02 1210.12 L1064.6 1210.12 L1065.19 1210.12 L1065.78 1210.12 L1066.36 1210.12 L1066.95 1210.12 L1067.54 1210.12 L1068.12 1210.12 L1068.71 1210.12 L1069.3 1210.12 L1069.88 1210.12 L1070.47 1210.12 L1071.06 1210.12 L1071.64 1210.12 L1072.23 1210.12 L1072.81 1210.12 L1073.4 1210.12 L1073.99 1210.12 L1074.57 1210.12 L1075.16 1210.12 L1075.75 1210.12 L1076.33 1210.12 L1076.92 1210.12 L1077.51 1210.12 L1078.09 1210.12 L1078.68 1210.12 L1079.26 1210.12 L1079.85 1210.12 L1080.44 1210.12 L1081.02 1210.12 L1081.61 1210.12 L1082.2 1210.12 L1082.78 1210.12 L1083.37 1210.12 L1083.96 1210.12 L1084.54 1210.12 L1085.13 1210.12 L1085.72 1210.12 L1086.3 1210.12 L1086.89 1210.12 L1087.47 1210.12 L1088.06 1210.12 L1088.65 1210.12 L1089.23 1210.12 L1089.82 1210.12 L1090.41 1210.12 L1090.99 1210.12 L1091.58 1210.12 L1092.17 1210.12 L1092.75 1210.12 L1093.34 1210.12 L1093.93 1210.12 L1094.51 1210.12 L1095.1 1210.12 L1095.68 1210.12 L1096.27 1210.12 L1096.86 1210.12 L1097.44 1210.12 L1098.03 1210.12 L1098.62 1210.12 L1099.2 1210.12 L1099.79 1210.12 L1100.38 1210.12 L1100.96 1210.12 L1101.55 1210.12 L1102.14 1210.12 L1102.72 1210.12 L1103.31 1210.12 L1103.89 1210.12 L1104.48 1210.12 L1105.07 1210.12 L1105.65 1210.12 L1106.24 1210.12 L1106.83 1210.12 L1107.41 1210.12 L1108 1210.12 L1108.59 1210.12 L1109.17 1210.12 L1109.76 1210.12 L1110.34 1210.12 L1110.93 1210.12 L1111.52 1210.12 L1112.1 1210.12 L1112.69 1210.12 L1113.28 1210.12 L1113.86 1210.12 L1114.45 1210.12 L1115.04 1210.12 L1115.62 1210.12 L1116.21 1210.12 L1116.8 1210.12 L1117.38 1210.12 L1117.97 1210.12 L1118.55 1210.12 L1119.14 1210.12 L1119.73 1210.12 L1120.31 1210.12 L1120.9 1210.12 L1121.49 1210.12 L1122.07 1210.12 L1122.66 1210.12 L1123.25 1210.12 L1123.83 1210.12 L1124.42 1210.12 L1125.01 1210.12 L1125.59 1210.12 L1126.18 1210.12 L1126.76 1210.12 L1127.35 1210.12 L1127.94 1210.12 L1128.52 1210.12 L1129.11 1210.12 L1129.7 1210.12 L1130.28 1210.12 L1130.87 1210.12 L1131.46 1210.12 L1132.04 1210.12 L1132.63 1210.12 L1133.21 1210.12 L1133.8 1210.12 L1134.39 1210.12 L1134.97 1210.12 L1135.56 1210.12 L1136.15 1210.12 L1136.73 1210.12 L1137.32 1210.12 L1137.91 1210.12 L1138.49 1210.12 L1139.08 1210.12 L1139.67 1210.12 L1140.25 1210.12 L1140.84 1210.12 L1141.42 1210.12 L1142.01 1210.12 L1142.6 1210.12 L1143.18 1210.12 L1143.77 1210.12 L1144.36 1210.12 L1144.94 1210.12 L1145.53 1210.12 L1146.12 1210.12 L1146.7 1210.12 L1147.29 1210.12 L1147.88 1210.12 L1148.46 1210.12 L1149.05 1210.12 L1149.63 1210.12 L1150.22 1210.12 L1150.81 1210.12 L1151.39 1210.12 L1151.98 1210.12 L1152.57 1210.12 L1153.15 1210.12 L1153.74 1210.12 L1154.33 1210.12 L1154.91 1210.12 L1155.5 1210.12 L1156.09 1210.12 L1156.67 1210.12 L1157.26 1210.12 L1157.84 1210.12 L1158.43 1210.12 L1159.02 1210.12 L1159.6 1210.12 L1160.19 1210.12 L1160.78 1210.12 L1161.36 1210.12 L1161.95 1210.12 L1162.54 1210.12 L1163.12 1210.12 L1163.71 1210.12 L1164.29 1210.12 L1164.88 1210.12 L1165.47 1210.12 L1166.05 1210.12 L1166.64 1210.12 L1167.23 1210.12 L1167.81 1210.12 L1168.4 1210.12 L1168.99 1210.12 L1169.57 1210.12 L1170.16 1210.12 L1170.75 1210.12 L1171.33 1210.12 L1171.92 1210.12 L1172.5 1210.12 L1173.09 1210.12 L1173.68 1210.12 L1174.26 1210.12 L1174.85 1210.12 L1175.44 1210.12 L1176.02 1210.12 L1176.61 1210.12 L1177.2 1210.12 L1177.78 1210.12 L1178.37 1210.12 L1178.96 1210.12 L1179.54 1210.12 L1180.13 1210.12 L1180.71 1210.12 L1181.3 1210.12 L1181.89 1210.12 L1182.47 1210.12 L1183.06 1210.12 L1183.65 1210.12 L1184.23 1210.12 L1184.82 1210.12 L1185.41 1210.12 L1185.99 1210.12 L1186.58 1210.12 L1187.16 1210.12 L1187.75 1210.12 L1188.34 1210.12 L1188.92 1210.12 L1189.51 1210.12 L1190.1 1210.12 L1190.68 1210.12 L1191.27 1210.12 L1191.86 1210.12 L1192.44 1210.12 L1193.03 1210.12 L1193.62 1210.12 L1194.2 1210.12 L1194.79 1210.12 L1195.37 1210.12 L1195.96 1210.12 L1196.55 1210.12 L1197.13 1210.12 L1197.72 1210.12 L1198.31 1210.12 L1198.89 1210.12 L1199.48 1210.12 L1200.07 1210.12 L1200.65 1210.12 L1201.24 1210.12 L1201.83 1210.12 L1202.41 1210.12 L1203 1210.12 L1203.58 1210.12 L1204.17 1210.12 L1204.76 1210.12 L1205.34 1210.12 L1205.93 1210.12 L1206.52 1210.12 L1207.1 1210.12 L1207.69 1210.12 L1208.28 1210.12 L1208.86 1210.12 L1209.45 1210.12 L1210.03 1210.12 L1210.62 1210.12 L1211.21 1210.12 L1211.79 1210.12 L1212.38 1210.12 L1212.97 1210.12 L1213.55 1210.12 L1214.14 1210.12 L1214.73 1210.12 L1215.31 1210.12 L1215.9 1210.12 L1216.49 1210.12 L1217.07 1210.12 L1217.66 1210.12 L1218.24 1210.12 L1218.83 1210.12 L1219.42 1210.12 L1220 1210.12 L1220.59 1210.12 L1221.18 1210.12 L1221.76 1210.12 L1222.35 1210.12 L1222.94 1210.12 L1223.52 1210.12 L1224.11 1210.12 L1224.7 1210.12 L1225.28 1210.12 L1225.87 1210.12 L1226.45 1210.12 L1227.04 1210.12 L1227.63 1210.12 L1228.21 1210.12 L1228.8 1210.12 L1229.39 1210.12 L1229.97 1210.12 L1230.56 1210.12 L1231.15 1210.12 L1231.73 1210.12 L1232.32 1210.12 L1232.91 1210.12 L1233.49 1210.12 L1234.08 1210.12 L1234.66 1210.12 L1235.25 1210.12 L1235.84 1210.12 L1236.42 1210.12 L1237.01 1210.12 L1237.6 1210.12 L1238.18 1210.12 L1238.77 1210.12 L1239.36 1210.12 L1239.94 1210.12 L1240.53 1210.12 L1241.11 1210.12 L1241.7 1210.12 L1242.29 1210.12 L1242.87 1210.12 L1243.46 1210.12 L1244.05 1210.12 L1244.63 1210.12 L1245.22 1210.12 L1245.81 1210.12 L1246.39 1210.12 L1246.98 1210.12 L1247.57 1210.12 L1248.15 1210.12 L1248.74 1210.12 L1249.32 1210.12 L1249.91 1210.12 L1250.5 1210.12 L1251.08 1210.12 L1251.67 1210.12 L1252.26 1210.12 L1252.84 1210.12 L1253.43 1210.12 L1254.02 1210.12 L1254.6 1210.12 L1255.19 1210.12 L1255.78 1210.12 L1256.36 1210.12 L1256.95 1210.12 L1257.53 1210.12 L1258.12 1210.12 L1258.71 1210.12 L1259.29 1210.12 L1259.88 1210.12 L1260.47 1210.12 L1261.05 1210.12 L1261.64 1210.12 L1262.23 1210.12 L1262.81 1210.12 L1263.4 1210.12 L1263.98 1210.12 L1264.57 1210.12 L1265.16 1210.12 L1265.74 1210.12 L1266.33 1210.12 L1266.92 1210.12 L1267.5 1210.12 L1268.09 1210.12 L1268.68 1210.12 L1269.26 1210.12 L1269.85 1210.12 L1270.44 1210.12 L1271.02 1210.12 L1271.61 1210.12 L1272.19 1210.12 L1272.78 1210.12 L1273.37 1210.12 L1273.95 1210.12 L1274.54 1210.12 L1275.13 1210.12 L1275.71 1210.12 L1276.3 1210.12 L1276.89 1210.12 L1277.47 1210.12 L1278.06 1210.12 L1278.65 1210.12 L1279.23 1210.12 L1279.82 1210.12 L1280.4 1210.12 L1280.99 1210.12 L1281.58 1210.12 L1282.16 1210.12 L1282.75 1210.12 L1283.34 1210.12 L1283.92 1210.12 L1284.51 1210.12 L1285.1 1210.12 L1285.68 1210.12 L1286.27 1210.12 L1286.86 1210.12 L1287.44 1210.12 L1288.03 1210.12 L1288.61 1210.12 L1289.2 1210.12 L1289.79 1210.12 L1290.37 1210.12 L1290.96 1210.12 L1291.55 1210.12 L1292.13 1210.12 L1292.72 1210.12 L1293.31 1210.12 L1293.89 1210.12 L1294.48 1210.12 L1295.06 1210.12 L1295.65 1210.12 L1296.24 1210.12 L1296.82 1210.12 L1297.41 1210.12 L1298 1210.12 L1298.58 1210.12 L1299.17 1210.12 L1299.76 1210.12 L1300.34 1210.12 L1300.93 1210.12 L1301.52 1210.12 L1302.1 1210.12 L1302.69 1210.12 L1303.27 1210.12 L1303.86 1210.12 L1304.45 1210.12 L1305.03 1210.12 L1305.62 1210.12 L1306.21 1210.12 L1306.79 1210.12 L1307.38 1210.12 L1307.97 1210.12 L1308.55 1210.12 L1309.14 1210.12 L1309.73 1210.12 L1310.31 1210.12 L1310.9 1210.12 L1311.48 1210.12 L1312.07 1210.12 L1312.66 1210.12 L1313.24 1210.12 L1313.83 1210.12 L1314.42 1210.12 L1315 1210.12 L1315.59 1210.12 L1316.18 1210.12 L1316.76 1210.12 L1317.35 1210.12 L1317.93 1210.12 L1318.52 1210.12 L1319.11 1210.12 L1319.69 1210.12 L1320.28 1210.12 L1320.87 1210.12 L1321.45 1210.12 L1322.04 1210.12 L1322.63 1210.12 L1323.21 1210.12 L1323.8 1210.12 L1324.39 1210.12 L1324.97 1210.12 L1325.56 1210.12 L1326.14 1210.12 L1326.73 1210.12 L1327.32 1210.12 L1327.9 1210.12 L1328.49 1210.12 L1329.08 1210.12 L1329.66 1210.12 L1330.25 1210.12 L1330.84 1210.12 L1331.42 1210.12 L1332.01 1210.12 L1332.6 1210.12 L1333.18 1210.12 L1333.77 1210.12 L1334.35 1210.12 L1334.94 1210.12 L1335.53 1210.12 L1336.11 1210.12 L1336.7 1210.12 L1337.29 1210.12 L1337.87 1210.12 L1338.46 1210.12 L1339.05 1210.12 L1339.63 1210.12 L1340.22 1210.12 L1340.8 1210.12 L1341.39 1210.12 L1341.98 1210.12 L1342.56 1210.12 L1343.15 1210.12 L1343.74 1210.12 L1344.32 1210.12 L1344.91 1210.12 L1345.5 1210.12 L1346.08 1210.12 L1346.67 1210.12 L1347.26 1210.12 L1347.84 1210.12 L1348.43 1210.12 L1349.01 1210.12 L1349.6 1210.12 L1350.19 1210.12 L1350.77 1210.12 L1351.36 1210.12 L1351.95 1210.12 L1352.53 1210.12 L1353.12 1210.12 L1353.71 1210.12 L1354.29 1210.12 L1354.88 1210.12 L1355.47 1210.12 L1356.05 1210.12 L1356.64 1210.12 L1357.22 1210.12 L1357.81 1210.12 L1358.4 1210.12 L1358.98 1210.12 L1359.57 1210.12 L1360.16 1210.12 L1360.74 1210.12 L1361.33 1210.12 L1361.92 1210.12 L1362.5 1210.12 L1363.09 1210.12 L1363.68 1210.12 L1364.26 1210.12 L1364.85 1210.12 L1365.43 1210.12 L1366.02 1210.12 L1366.61 1210.12 L1367.19 1210.12 L1367.78 1210.12 L1368.37 1210.12 L1368.95 1210.12 L1369.54 1210.12 L1370.13 1210.12 L1370.71 1210.12 L1371.3 1210.12 L1371.88 1210.12 L1372.47 1210.12 L1373.06 1210.12 L1373.64 1210.12 L1374.23 1210.12 L1374.82 1210.12 L1375.4 1210.12 L1375.99 1210.12 L1376.58 1210.12 L1377.16 1210.12 L1377.75 1210.12 L1378.34 1210.12 L1378.92 1210.12 L1379.51 1210.12 L1380.09 1210.12 L1380.68 1210.12 L1381.27 1210.12 L1381.85 1210.12 L1382.44 1210.12 L1383.03 1210.12 L1383.61 1210.12 L1384.2 1210.12 L1384.79 1210.12 L1385.37 1210.12 L1385.96 1210.12 L1386.55 1210.12 L1387.13 1210.12 L1387.72 1210.12 L1388.3 1210.12 L1388.89 1210.12 L1389.48 1210.12 L1390.06 1210.12 L1390.65 1210.12 L1391.24 1210.12 L1391.82 1210.12 L1392.41 1210.12 L1393 1210.12 L1393.58 1210.12 L1394.17 1210.12 L1394.75 1210.12 L1395.34 1210.12 L1395.93 1210.12 L1396.51 1210.12 L1397.1 1210.12 L1397.69 1210.12 L1398.27 1210.12 L1398.86 1210.12 L1399.45 1210.12 L1400.03 1210.12 L1400.62 1210.12 L1401.21 1210.12 L1401.79 1210.12 L1402.38 1210.12 L1402.96 1210.12 L1403.55 1210.12 L1404.14 1210.12 L1404.72 1210.12 L1405.31 1210.12 L1405.9 1210.12 L1406.48 1210.12 L1407.07 1210.12 L1407.66 1210.12 L1408.24 1210.12 L1408.83 1210.12 L1409.42 1210.12 L1410 1210.12 L1410.59 1210.12 L1411.17 1210.12 L1411.76 1210.12 L1412.35 1210.12 L1412.93 1210.12 L1413.52 1210.12 L1414.11 1210.12 L1414.69 1210.12 L1415.28 1210.12 L1415.87 1210.12 L1416.45 1210.12 L1417.04 1210.12 L1417.63 1210.12 L1418.21 1210.12 L1418.8 1210.12 L1419.38 1210.12 L1419.97 1210.12 L1420.56 1210.12 L1421.14 1210.12 L1421.73 1210.12 L1422.32 1210.12 L1422.9 1210.12 L1423.49 1210.12 L1424.08 1210.12 L1424.66 1210.12 L1425.25 1210.12 L1425.83 1210.12 L1426.42 1210.12 L1427.01 1210.12 L1427.59 1210.12 L1428.18 1210.12 L1428.77 1210.12 L1429.35 1210.12 L1429.94 1210.12 L1430.53 1210.12 L1431.11 1210.12 L1431.7 1210.12 L1432.29 1210.12 L1432.87 1210.12 L1433.46 1210.12 L1434.04 1210.12 L1434.63 1210.12 L1435.22 1210.12 L1435.8 1210.12 L1436.39 1210.12 L1436.98 1210.12 L1437.56 1210.12 L1438.15 1210.12 L1438.74 1210.12 L1439.32 1210.12 L1439.91 1210.12 L1440.5 1210.12 L1441.08 1210.12 L1441.67 1210.12 L1442.25 1210.12 L1442.84 1210.12 L1443.43 1210.12 L1444.01 1210.12 L1444.6 1210.12 L1445.19 1210.12 L1445.77 1210.12 L1446.36 1210.12 L1446.95 1210.12 L1447.53 1210.12 L1448.12 1210.12 L1448.7 1210.12 L1449.29 1210.12 L1449.88 1210.12 L1450.46 1210.12 L1451.05 1210.12 L1451.64 1210.12 L1452.22 1210.12 L1452.81 1210.12 L1453.4 1210.12 L1453.98 1210.12 L1454.57 1210.12 L1455.16 1210.12 L1455.74 1210.12 L1456.33 1210.12 L1456.91 1210.12 L1457.5 1210.12 L1458.09 1210.12 L1458.67 1210.12 L1459.26 1210.12 L1459.85 1210.12 L1460.43 1210.12 L1461.02 1210.12 L1461.61 1210.12 L1462.19 1210.12 L1462.78 1210.12 L1463.37 1210.12 L1463.95 1210.12 L1464.54 1210.12 L1465.12 1210.12 L1465.71 1210.12 L1466.3 1210.12 L1466.88 1210.12 L1467.47 1210.12 L1468.06 1210.12 L1468.64 1210.12 L1469.23 1210.12 L1469.82 1210.12 L1470.4 1210.12 L1470.99 1210.12 L1471.57 1210.12 L1472.16 1210.12 L1472.75 1210.12 L1473.33 1210.12 L1473.92 1210.12 L1474.51 1210.12 L1475.09 1210.12 L1475.68 1210.12 L1476.27 1210.12 L1476.85 1210.12 L1477.44 1210.12 L1478.03 1210.12 L1478.61 1210.12 L1479.2 1210.12 L1479.78 1210.12 L1480.37 1210.12 L1480.96 1210.12 L1481.54 1210.12 L1482.13 1210.12 L1482.72 1210.12 L1483.3 1210.12 L1483.89 1210.12 L1484.48 1210.12 L1485.06 1210.12 L1485.65 1210.12 L1486.24 1210.12 L1486.82 1210.12 L1487.41 1210.12 L1487.99 1210.12 L1488.58 1210.12 L1489.17 1210.12 L1489.75 1210.12 L1490.34 1210.12 L1490.93 1210.12 L1491.51 1210.12 L1492.1 1210.12 L1492.69 1210.12 L1493.27 1210.12 L1493.86 1210.12 L1494.45 1210.12 L1495.03 1210.12 L1495.62 1210.12 L1496.2 1210.12 L1496.79 1210.12 L1497.38 1210.12 L1497.96 1210.12 L1498.55 1210.12 L1499.14 1210.12 L1499.72 1210.12 L1500.31 1210.12 L1500.9 1210.12 L1501.48 1210.12 L1502.07 1210.12 L1502.65 1210.12 L1503.24 1210.12 L1503.83 1210.12 L1504.41 1210.12 L1505 1210.12 L1505.59 1210.12 L1506.17 1210.12 L1506.76 1210.12 L1507.35 1210.12 L1507.93 1210.12 L1508.52 1210.12 L1509.11 1210.12 L1509.69 1210.12 L1510.28 1210.12 L1510.86 1210.12 L1511.45 1210.12 L1512.04 1210.12 L1512.62 1210.12 L1513.21 1210.12 L1513.8 1210.12 L1514.38 1210.12 L1514.97 1210.12 L1515.56 1210.12 L1516.14 1210.12 L1516.73 1210.12 L1517.32 1210.12 L1517.9 1210.12 L1518.49 1210.12 L1519.07 1210.12 L1519.66 1210.12 L1520.25 1210.12 L1520.83 1210.12 L1521.42 1210.12 L1522.01 1210.12 L1522.59 1210.12 L1523.18 1210.12 L1523.77 1210.12 L1524.35 1210.12 L1524.94 1210.12 L1525.52 1210.12 L1526.11 1210.12 L1526.7 1210.12 L1527.28 1210.12 L1527.87 1210.12 L1528.46 1210.12 L1529.04 1210.12 L1529.63 1210.12 L1530.22 1210.12 L1530.8 1210.12 L1531.39 1210.12 L1531.98 1210.12 L1532.56 1210.12 L1533.15 1210.12 L1533.73 1210.12 L1534.32 1210.12 L1534.91 1210.12 L1535.49 1210.12 L1536.08 1210.12 L1536.67 1210.12 L1537.25 1210.12 L1537.84 1210.12 L1538.43 1210.12 L1539.01 1210.12 L1539.6 1210.12 L1540.19 1210.12 L1540.77 1210.12 L1541.36 1210.12 L1541.94 1210.12 L1542.53 1210.12 L1543.12 1210.12 L1543.7 1210.12 L1544.29 1210.12 L1544.88 1210.12 L1545.46 1210.12 L1546.05 1210.12 L1546.64 1210.12 L1547.22 1210.12 L1547.81 1210.12 L1548.4 1210.12 L1548.98 1210.12 L1549.57 1210.12 L1550.15 1210.12 L1550.74 1210.12 L1551.33 1210.12 L1551.91 1210.12 L1552.5 1210.12 L1553.09 1210.12 L1553.67 1210.12 L1554.26 1210.12 L1554.85 1210.12 L1555.43 1210.12 L1556.02 1210.12 L1556.6 1210.12 L1557.19 1210.12 L1557.78 1210.12 L1558.36 1210.12 L1558.95 1210.12 L1559.54 1210.12 L1560.12 1210.12 L1560.71 1210.12 L1561.3 1210.12 L1561.88 1210.12 L1562.47 1210.12 L1563.06 1210.12 L1563.64 1210.12 L1564.23 1210.12 L1564.81 1210.12 L1565.4 1210.12 L1565.99 1210.12 L1566.57 1210.12 L1567.16 1210.12 L1567.75 1210.12 L1568.33 1210.12 L1568.92 1210.12 L1569.51 1210.12 L1570.09 1210.12 L1570.68 1210.12 L1571.27 1210.12 L1571.85 1210.12 L1572.44 1210.12 L1573.02 1210.12 L1573.61 1210.12 L1574.2 1210.12 L1574.78 1210.12 L1575.37 1210.12 L1575.96 1210.12 L1576.54 1210.12 L1577.13 1210.12 L1577.72 1210.12 L1578.3 1210.12 L1578.89 1210.12 L1579.47 1210.12 L1580.06 1210.12 L1580.65 1210.12 L1581.23 1210.12 L1581.82 1210.12 L1582.41 1210.12 L1582.99 1210.12 L1583.58 1210.12 L1584.17 1210.12 L1584.75 1210.12 L1585.34 1210.12 L1585.93 1210.12 L1586.51 1210.12 L1587.1 1210.12 L1587.68 1210.12 L1588.27 1210.12 L1588.86 1210.12 L1589.44 1210.12 L1590.03 1210.12 L1590.62 1210.12 L1591.2 1210.12 L1591.79 1210.12 L1592.38 1210.12 L1592.96 1210.12 L1593.55 1210.12 L1594.14 1210.12 L1594.72 1210.12 L1595.31 1210.12 L1595.89 1210.12 L1596.48 1210.12 L1597.07 1210.12 L1597.65 1210.12 L1598.24 1210.12 L1598.83 1210.12 L1599.41 1210.12 L1600 1210.12 L1600.59 1210.12 L1601.17 1210.12 L1601.76 1210.12 L1602.34 1210.12 L1602.93 1210.12 L1603.52 1210.12 L1604.1 1210.12 L1604.69 1210.12 L1605.28 1210.12 L1605.86 1210.12 L1606.45 1210.12 L1607.04 1210.12 L1607.62 1210.12 L1608.21 1210.12 L1608.8 1210.12 L1609.38 1210.12 L1609.97 1210.12 L1610.55 1210.12 L1611.14 1210.12 L1611.73 1210.12 L1612.31 1210.12 L1612.9 1210.12 L1613.49 1210.12 L1614.07 1210.12 L1614.66 1210.12 L1615.25 1210.12 L1615.83 1210.12 L1616.42 1210.12 L1617.01 1210.12 L1617.59 1210.12 L1618.18 1210.12 L1618.76 1210.12 L1619.35 1210.12 L1619.94 1210.12 L1620.52 1210.12 L1621.11 1210.12 L1621.7 1210.12 L1622.28 1210.12 L1622.87 1210.12 L1623.46 1210.12 L1624.04 1210.12 L1624.63 1210.12 L1625.22 1210.12 L1625.8 1210.12 L1626.39 1210.12 L1626.97 1210.12 L1627.56 1210.12 L1628.15 1210.12 L1628.73 1210.12 L1629.32 1210.12 L1629.91 1210.12 L1630.49 1210.12 L1631.08 1210.12 L1631.67 1210.12 L1632.25 1210.12 L1632.84 1210.12 L1633.42 1210.12 L1634.01 1210.12 L1634.6 1210.12 L1635.18 1210.12 L1635.77 1210.12 L1636.36 1210.12 L1636.94 1210.12 L1637.53 1210.12 L1638.12 1210.12 L1638.7 1210.12 L1639.29 1210.12 L1639.88 1210.12 L1640.46 1210.12 L1641.05 1210.12 L1641.63 1210.12 L1642.22 1210.12 L1642.81 1210.12 L1643.39 1210.12 L1643.98 1210.12 L1644.57 1210.12 L1645.15 1210.12 L1645.74 1210.12 L1646.33 1210.12 L1646.91 1210.12 L1647.5 1210.12 L1648.09 1210.12 L1648.67 1210.12 L1649.26 1210.12 L1649.84 1210.12 L1650.43 1210.12 L1651.02 1210.12 L1651.6 1210.12 L1652.19 1210.12 L1652.78 1210.12 L1653.36 1210.12 L1653.95 1210.12 L1654.54 1210.12 L1655.12 1210.12 L1655.71 1210.12 L1656.29 1210.12 L1656.88 1210.12 L1657.47 1210.12 L1658.05 1210.12 L1658.64 1210.12 L1659.23 1210.12 L1659.81 1210.12 L1660.4 1210.12 L1660.99 1210.12 L1661.57 1210.12 L1662.16 1210.12 L1662.75 1210.12 L1663.33 1210.12 L1663.92 1210.12 L1664.5 1210.12 L1665.09 1210.12 L1665.68 1210.12 L1666.26 1210.12 L1666.85 1210.12 L1667.44 1210.12 L1668.02 1210.12 L1668.61 1210.12 L1669.2 1210.12 L1669.78 1210.12 L1670.37 1210.12 L1670.96 1210.12 L1671.54 1210.12 L1672.13 1210.12 L1672.71 1210.12 L1673.3 1210.12 L1673.89 1210.12 L1674.47 1210.12 L1675.06 1210.12 L1675.65 1210.12 L1676.23 1210.12 L1676.82 1210.12 L1677.41 1210.12 L1677.99 1210.12 L1678.58 1210.12 L1679.17 1210.12 L1679.75 1210.12 L1680.34 1210.12 L1680.92 1210.12 L1681.51 1210.12 L1682.1 1210.12 L1682.68 1210.12 L1683.27 1210.12 L1683.86 1210.12 L1684.44 1210.12 L1685.03 1210.12 L1685.62 1210.12 L1686.2 1210.12 L1686.79 1210.12 L1687.37 1210.12 L1687.96 1210.12 L1688.55 1210.12 L1689.13 1210.12 L1689.72 1210.12 L1690.31 1210.12 L1690.89 1210.12 L1691.48 1210.12 L1692.07 1210.12 L1692.65 1210.12 L1693.24 1210.12 L1693.83 1210.12 L1694.41 1210.12 L1695 1210.12 L1695.58 1210.12 L1696.17 1210.12 L1696.76 1210.12 L1697.34 1210.12 L1697.93 1210.12 L1698.52 1210.12 L1699.1 1210.12 L1699.69 1210.12 L1700.28 1210.12 L1700.86 1210.12 L1701.45 1210.12 L1702.04 1210.12 L1702.62 1210.12 L1703.21 1210.12 L1703.79 1210.12 L1704.38 1210.12 L1704.97 1210.12 L1705.55 1210.12 L1706.14 1210.12 L1706.73 1210.12 L1707.31 1210.12 L1707.9 1210.12 L1708.49 1210.12 L1709.07 1210.12 L1709.66 1210.12 L1710.24 1210.12 L1710.83 1210.12 L1711.42 1210.12 L1712 1210.12 L1712.59 1210.12 L1713.18 1210.12 L1713.76 1210.12 L1714.35 1210.12 L1714.94 1210.12 L1715.52 1210.12 L1716.11 1210.12 L1716.7 1210.12 L1717.28 1210.12 L1717.87 1210.12 L1718.45 1210.12 L1719.04 1210.12 L1719.63 1210.12 L1720.21 1210.12 L1720.8 1210.12 L1721.39 1210.12 L1721.97 1210.12 L1722.56 1210.12 L1723.15 1210.12 L1723.73 1210.12 L1724.32 1210.12 L1724.91 1210.12 L1725.49 1210.12 L1726.08 1210.12 L1726.66 1210.12 L1727.25 1210.12 L1727.84 1210.12 L1728.42 1210.12 L1729.01 1210.12 L1729.6 1210.12 L1730.18 1210.12 L1730.77 1210.12 L1731.36 1210.12 L1731.94 1210.12 L1732.53 1210.12 L1733.11 1210.12 L1733.7 1210.12 L1734.29 1210.12 L1734.87 1210.12 L1735.46 1210.12 L1736.05 1210.12 L1736.63 1210.12 L1737.22 1210.12 L1737.81 1210.12 L1738.39 1210.12 L1738.98 1210.12 L1739.57 1210.12 L1740.15 1210.12 L1740.74 1210.12 L1741.32 1210.12 L1741.91 1210.12 L1742.5 1210.12 L1743.08 1210.12 L1743.67 1210.12 L1744.26 1210.12 L1744.84 1210.12 L1745.43 1210.12 L1746.02 1210.12 L1746.6 1210.12 L1747.19 1210.12 L1747.78 1210.12 L1748.36 1210.12 L1748.95 1210.12 L1749.53 1210.12 L1750.12 1210.12 L1750.71 1210.12 L1751.29 1210.12 L1751.88 1210.12 L1752.47 1210.12 L1753.05 1210.12 L1753.64 1210.12 L1754.23 1210.12 L1754.81 1210.12 L1755.4 1210.12 L1755.99 1210.12 L1756.57 1210.12 L1757.16 1210.12 L1757.74 1210.12 L1758.33 1210.12 L1758.92 1210.12 L1759.5 1210.12 L1760.09 1210.12 L1760.68 1210.12 L1761.26 1210.12 L1761.85 1210.12 L1762.44 1210.12 L1763.02 1210.12 L1763.61 1210.12 L1764.19 1210.12 L1764.78 1210.12 L1765.37 1210.12 L1765.95 1210.12 L1766.54 1210.12 L1767.13 1210.12 L1767.71 1210.12 L1768.3 1210.12 L1768.89 1210.12 L1769.47 1210.12 L1770.06 1210.12 L1770.65 1210.12 L1771.23 1210.12 L1771.82 1210.12 L1772.4 1210.12 L1772.99 1210.12 L1773.58 1210.12 L1774.16 1210.12 L1774.75 1210.12 L1775.34 1210.12 L1775.92 1210.12 L1776.51 1210.12 L1777.1 1210.12 L1777.68 1210.12 L1778.27 1210.12 L1778.86 1210.12 L1779.44 1210.12 L1780.03 1210.12 L1780.61 1210.12 L1781.2 1210.12 L1781.79 1210.12 L1782.37 1210.12 L1782.96 1210.12 L1783.55 1210.12 L1784.13 1210.12 L1784.72 1210.12 L1785.31 1210.12 L1785.89 1210.12 L1786.48 1210.12 L1787.06 1210.12 L1787.65 1210.12 L1788.24 1210.12 L1788.82 1210.12 L1789.41 1210.12 L1790 1210.12 L1790.58 1210.12 L1791.17 1210.12 L1791.76 1210.12 L1792.34 1210.12 L1792.93 1210.12 L1793.52 1210.12 L1794.1 1210.12 L1794.69 1210.12 L1795.27 1210.12 L1795.86 1210.12 L1796.45 1210.12 L1797.03 1210.12 L1797.62 1210.12 L1798.21 1210.12 L1798.79 1210.12 L1799.38 1210.12 L1799.97 1210.12 L1800.55 1210.12 L1801.14 1210.12 L1801.73 1210.12 L1802.31 1210.12 L1802.9 1210.12 L1803.48 1210.12 L1804.07 1210.12 L1804.66 1210.12 L1805.24 1210.12 L1805.83 1210.12 L1806.42 1210.12 L1807 1210.12 L1807.59 1210.12 L1808.18 1210.12 L1808.76 1210.12 L1809.35 1210.12 L1809.94 1210.12 L1810.52 1210.12 L1811.11 1210.12 L1811.69 1210.12 L1812.28 1210.12 L1812.87 1210.12 L1813.45 1210.12 L1814.04 1210.12 L1814.63 1210.12 L1815.21 1210.12 L1815.8 1210.12 L1816.39 1210.12 L1816.97 1210.12 L1817.56 1210.12 L1818.14 1210.12 L1818.73 1210.12 L1819.32 1210.12 L1819.9 1210.12 L1820.49 1210.12 L1821.08 1210.12 L1821.66 1210.12 L1822.25 1210.12 L1822.84 1210.12 L1823.42 1210.12 L1824.01 1210.12 L1824.6 1210.12 L1825.18 1210.12 L1825.77 1210.12 L1826.35 1210.12 L1826.94 1210.12 L1827.53 1210.12 L1828.11 1210.12 L1828.7 1210.12 L1829.29 1210.12 L1829.87 1210.12 L1830.46 1210.12 L1831.05 1210.12 L1831.63 1210.12 L1832.22 1210.12 L1832.81 1210.12 L1833.39 1210.12 L1833.98 1210.12 L1834.56 1210.12 L1835.15 1210.12 L1835.74 1210.12 L1836.32 1210.12 L1836.91 1210.12 L1837.5 1210.12 L1838.08 1210.12 L1838.67 1210.12 L1839.26 1210.12 L1839.84 1210.12 L1840.43 1210.12 L1841.01 1210.12 L1841.6 1210.12 L1842.19 1210.12 L1842.77 1210.12 L1843.36 1210.12 L1843.95 1210.12 L1844.53 1210.12 L1845.12 1210.12 L1845.71 1210.12 L1846.29 1210.12 L1846.88 1210.12 L1847.47 1210.12 L1848.05 1210.12 L1848.64 1210.12 L1849.22 1210.12 L1849.81 1210.12 L1850.4 1210.12 L1850.98 1210.12 L1851.57 1210.12 L1852.16 1210.12 L1852.74 1210.12 L1853.33 1210.12 L1853.92 1210.12 L1854.5 1210.12 L1855.09 1210.12 L1855.68 1210.12 L1856.26 1210.12 L1856.85 1210.12 L1857.43 1210.12 L1858.02 1210.12 L1858.61 1210.12 L1859.19 1210.12 L1859.78 1210.12 L1860.37 1210.12 L1860.95 1210.12 L1861.54 1210.12 L1862.13 1210.12 L1862.71 1210.12 L1863.3 1210.12 L1863.88 1210.12 L1864.47 1210.12 L1865.06 1210.12 L1865.64 1210.12 L1866.23 1210.12 L1866.82 1210.12 L1867.4 1210.12 L1867.99 1210.12 L1868.58 1210.12 L1869.16 1210.12 L1869.75 1210.12 L1870.34 1210.12 L1870.92 1210.12 L1871.51 1210.12 L1872.09 1210.12 L1872.68 1210.12 L1873.27 1210.12 L1873.85 1210.12 L1874.44 1210.12 L1875.03 1210.12 L1875.61 1210.12 L1876.2 1210.12 L1876.79 1210.12 L1877.37 1210.12 L1877.96 1210.12 L1878.55 1210.12 L1879.13 1210.12 L1879.72 1210.12 L1880.3 1210.12 L1880.89 1210.12 L1881.48 1210.12 L1882.06 1210.12 L1882.65 1210.12 L1883.24 1210.12 L1883.82 1210.12 L1884.41 1210.12 L1885 1210.12 L1885.58 1210.12 L1886.17 1210.12 L1886.76 1210.12 L1887.34 1210.12 L1887.93 1210.12 L1888.51 1210.12 L1889.1 1210.12 L1889.69 1210.12 L1890.27 1210.12 L1890.86 1210.12 L1891.45 1210.12 L1892.03 1210.12 L1892.62 1210.12 L1893.21 1210.12 L1893.79 1210.12 L1894.38 1210.12 L1894.96 1210.12 L1895.55 1210.12 L1896.14 1210.12 L1896.72 1210.12 L1897.31 1210.12 L1897.9 1210.12 L1898.48 1210.12 L1899.07 1210.12 L1899.66 1210.12 L1900.24 1210.12 L1900.83 1210.12 L1901.42 1210.12 L1902 1210.12 L1902.59 1210.12 L1903.17 1210.12 L1903.76 1210.12 L1904.35 1210.12 L1904.93 1210.12 L1905.52 1210.12 L1906.11 1210.12 L1906.69 1210.12 L1907.28 1210.12 L1907.87 1210.12 L1908.45 1210.12 L1909.04 1210.12 L1909.63 1210.12 L1910.21 1210.12 L1910.8 1210.12 L1911.38 1210.12 L1911.97 1210.12 L1912.56 1210.12 L1913.14 1210.12 L1913.73 1210.12 L1914.32 1210.12 L1914.9 1210.12 L1915.49 1210.12 L1916.08 1210.12 L1916.66 1210.12 L1917.25 1210.12 L1917.83 1210.12 L1918.42 1210.12 L1919.01 1210.12 L1919.59 1210.12 L1920.18 1210.12 L1920.77 1210.12 L1921.35 1210.12 L1921.94 1210.12 L1922.53 1210.12 L1923.11 1210.12 L1923.7 1210.12 L1924.29 1210.12 L1924.87 1210.12 L1925.46 1210.12 L1926.04 1210.12 L1926.63 1210.12 L1927.22 1210.12 L1927.8 1210.12 L1928.39 1210.12 L1928.98 1210.12 L1929.56 1210.12 L1930.15 1210.12 L1930.74 1210.12 L1931.32 1210.12 L1931.91 1210.12 L1932.5 1210.12 L1933.08 1210.12 L1933.67 1210.12 L1934.25 1210.12 L1934.84 1210.12 L1935.43 1210.12 L1936.01 1210.12 L1936.6 1210.12 L1937.19 1210.12 L1937.77 1210.12 L1938.36 1210.12 L1938.95 1210.12 L1939.53 1210.12 L1940.12 1210.12 L1940.71 1210.12 L1941.29 1210.12 L1941.88 1210.12 L1942.46 1210.12 L1943.05 1210.12 L1943.64 1210.12 L1944.22 1210.12 L1944.81 1210.12 L1945.4 1210.12 L1945.98 1210.12 L1946.57 1210.12 L1947.16 1210.12 L1947.74 1210.12 L1948.33 1210.12 L1948.91 1210.12 L1949.5 1210.12 L1950.09 1210.12 L1950.67 1210.12 L1951.26 1210.12 L1951.85 1210.12 L1952.43 1210.12 L1953.02 1210.12 L1953.61 1210.12 L1954.19 1210.12 L1954.78 1210.12 L1955.37 1210.12 L1955.95 1210.12 L1956.54 1210.12 L1957.12 1210.12 L1957.71 1210.12 L1958.3 1210.12 L1958.88 1210.12 L1959.47 1210.12 L1960.06 1210.12 L1960.64 1210.12 L1961.23 1210.12 L1961.82 1210.12 L1962.4 1210.12 L1962.99 1210.12 L1963.58 1210.12 L1964.16 1210.12 L1964.75 1210.12 L1965.33 1210.12 L1965.92 1210.12 L1966.51 1210.12 L1967.09 1210.12 L1967.68 1210.12 L1968.27 1210.12 L1968.85 1210.12 L1969.44 1210.12 L1970.03 1210.12 L1970.61 1210.12 L1971.2 1210.12 L1971.78 1210.12 L1972.37 1210.12 L1972.96 1210.12 L1973.54 1210.12 L1974.13 1210.12 L1974.72 1210.12 L1975.3 1210.12 L1975.89 1210.12 L1976.48 1210.12 L1977.06 1210.12 L1977.65 1210.12 L1978.24 1210.12 L1978.82 1210.12 L1979.41 1210.12 L1979.99 1210.12 L1980.58 1210.12 L1981.17 1210.12 L1981.75 1210.12 L1982.34 1210.12 L1982.93 1210.12 L1983.51 1210.12 L1984.1 1210.12 L1984.69 1210.12 L1985.27 1210.12 L1985.86 1210.12 L1986.45 1210.12 L1987.03 1210.12 L1987.62 1210.12 L1988.2 1210.12 L1988.79 1210.12 L1989.38 1210.12 L1989.96 1210.12 L1990.55 1210.12 L1991.14 1210.12 L1991.72 1210.12 L1992.31 1210.12 L1992.9 1210.12 L1993.48 1210.12 L1994.07 1210.12 L1994.65 1210.12 L1995.24 1210.12 L1995.83 1210.12 L1996.41 1210.12 L1997 1210.12 L1997.59 1210.12 L1998.17 1210.12 L1998.76 1210.12 L1999.35 1210.12 L1999.93 1210.12 L2000.52 1210.12 L2001.11 1210.12 L2001.69 1210.12 L2002.28 1210.12 L2002.86 1210.12 L2003.45 1210.12 L2004.04 1210.12 L2004.62 1210.12 L2005.21 1210.12 L2005.8 1210.12 L2006.38 1210.12 L2006.97 1210.12 L2007.56 1210.12 L2008.14 1210.12 L2008.73 1210.12 L2009.32 1210.12 L2009.9 1210.12 L2010.49 1210.12 L2011.07 1210.12 L2011.66 1210.12 L2012.25 1210.12 L2012.83 1210.12 L2013.42 1210.12 L2014.01 1210.12 L2014.59 1210.12 L2015.18 1210.12 L2015.77 1210.12 L2016.35 1210.12 L2016.94 1210.12 L2017.53 1210.12 L2018.11 1210.12 L2018.7 1210.12 L2019.28 1210.12 L2019.87 1210.12 L2020.46 1210.12 L2021.04 1210.12 L2021.63 1210.12 L2022.22 1210.12 L2022.8 1210.12 L2023.39 1210.12 L2023.98 1210.12 L2024.56 1210.12 L2025.15 1210.12 L2025.73 1210.12 L2026.32 1210.12 L2026.91 1210.12 L2027.49 1210.12 L2028.08 1210.12 L2028.67 1210.12 L2029.25 1210.12 L2029.84 1210.12 L2030.43 1210.12 L2031.01 1210.12 L2031.6 1210.12 L2032.19 1210.12 L2032.77 1210.12 L2033.36 1210.12 L2033.94 1210.12 L2034.53 1210.12 L2035.12 1210.12 L2035.7 1210.12 L2036.29 1210.12 L2036.88 1210.12 L2037.46 1210.12 L2038.05 1210.12 L2038.64 1210.12 L2039.22 1210.12 L2039.81 1210.12 L2040.4 1210.12 L2040.98 1210.12 L2041.57 1210.12 L2042.15 1210.12 L2042.74 1210.12 L2043.33 1210.12 L2043.91 1210.12 L2044.5 1210.12 L2045.09 1210.12 L2045.67 1210.12 L2046.26 1210.12 L2046.85 1210.12 L2047.43 1210.12 L2048.02 1210.12 L2048.6 1210.12 L2049.19 1210.12 L2049.78 1210.12 L2050.36 1210.12 L2050.95 1210.12 L2051.54 1210.12 L2052.12 1210.12 L2052.71 1210.12 L2053.3 1210.12 L2053.88 1210.12 L2054.47 1210.12 L2055.06 1210.12 L2055.64 1210.12 L2056.23 1210.12 L2056.81 1210.12 L2057.4 1210.12 L2057.99 1210.12 L2058.57 1210.12 L2059.16 1210.12 L2059.75 1210.12 L2060.33 1210.12 L2060.92 1210.12 L2061.51 1210.12 L2062.09 1210.12 L2062.68 1210.12 L2063.27 1210.12 L2063.85 1210.12 L2064.44 1210.12 L2065.02 1210.12 L2065.61 1210.12 L2066.2 1210.12 L2066.78 1210.12 L2067.37 1210.12 L2067.96 1210.12 L2068.54 1210.12 L2069.13 1210.12 L2069.72 1210.12 L2070.3 1210.12 L2070.89 1210.12 L2071.48 1210.12 L2072.06 1210.12 L2072.65 1210.12 L2073.23 1210.12 L2073.82 1210.12 L2074.41 1210.12 L2074.99 1210.12 L2075.58 1210.12 L2076.17 1210.12 L2076.75 1210.12 L2077.34 1210.12 L2077.93 1210.12 L2078.51 1210.12 L2079.1 1210.12 L2079.68 1210.12 L2080.27 1210.12 L2080.86 1210.12 L2081.44 1210.12 L2082.03 1210.12 L2082.62 1210.12 L2083.2 1210.12 L2083.79 1210.12 L2084.38 1210.12 L2084.96 1210.12 L2085.55 1210.12 L2086.14 1210.12 L2086.72 1210.12 L2087.31 1210.12 L2087.89 1210.12 L2088.48 1210.12 L2089.07 1210.12 L2089.65 1210.12 L2090.24 1210.12 L2090.83 1210.12 L2091.41 1210.12 L2092 1210.12 L2092.59 1210.12 L2093.17 1210.12 L2093.76 1210.12 L2094.35 1210.12 L2094.93 1210.12 L2095.52 1210.12 L2096.1 1210.12 L2096.69 1210.12 L2097.28 1210.12 L2097.86 1210.12 L2098.45 1210.12 L2099.04 1210.12 L2099.62 1210.12 L2100.21 1210.12 L2100.8 1210.12 L2101.38 1210.12 L2101.97 1210.12 L2102.55 1210.12 L2103.14 1210.12 L2103.73 1210.12 L2104.31 1210.12 L2104.9 1210.12 L2105.49 1210.12 L2106.07 1210.12 L2106.66 1210.12 L2107.25 1210.12 L2107.83 1210.12 L2108.42 1210.12 L2109.01 1210.12 L2109.59 1210.12 L2110.18 1210.12 L2110.76 1210.12 L2111.35 1210.12 L2111.94 1210.12 L2112.52 1210.12 L2113.11 1210.12 L2113.7 1210.12 L2114.28 1210.12 L2114.87 1210.12 L2115.46 1210.12 L2116.04 1210.12 L2116.63 1210.12 L2117.22 1210.12 L2117.8 1210.12 L2118.39 1210.12 L2118.97 1210.12 L2119.56 1210.12 L2120.15 1210.12 L2120.73 1210.12 L2121.32 1210.12 L2121.91 1210.12 L2122.49 1210.12 L2123.08 1210.12 L2123.67 1210.12 L2124.25 1210.12 L2124.84 1210.12 L2125.42 1210.12 L2126.01 1210.12 L2126.6 1210.12 L2127.18 1210.12 L2127.77 1210.12 L2128.36 1210.12 L2128.94 1210.12 L2129.53 1210.12 L2130.12 1210.12 L2130.7 1210.12 L2131.29 1210.12 L2131.88 1210.12 L2132.46 1210.12 L2133.05 1210.12 L2133.63 1210.12 L2134.22 1210.12 L2134.81 1210.12 L2135.39 1210.12 L2135.98 1210.12 L2136.57 1210.12 L2137.15 1210.12 L2137.74 1210.12 L2138.33 1210.12 L2138.91 1210.12 L2139.5 1210.12 L2140.09 1210.12 L2140.67 1210.12 L2141.26 1210.12 L2141.84 1210.12 L2142.43 1210.12 L2143.02 1210.12 L2143.6 1210.12 L2144.19 1210.12 L2144.78 1210.12 L2145.36 1210.12 L2145.95 1210.12 L2146.54 1210.12 L2147.12 1210.12 L2147.71 1210.12 L2148.3 1210.12 L2148.88 1210.12 L2149.47 1210.12 L2150.05 1210.12 L2150.64 1210.12 L2151.23 1210.12 L2151.81 1210.12 L2152.4 1210.12 L2152.99 1210.12 L2153.57 1210.12 L2154.16 1210.12 L2154.75 1210.12 L2155.33 1210.12 L2155.92 1210.12 L2156.5 1210.12 L2157.09 1210.12 L2157.68 1210.12 L2158.26 1210.12 L2158.26 1209.96 L2157.68 1209.96 L2157.09 1209.96 L2156.5 1209.96 L2155.92 1209.96 L2155.33 1209.96 L2154.75 1209.96 L2154.16 1209.96 L2153.57 1209.96 L2152.99 1209.96 L2152.4 1209.96 L2151.81 1209.96 L2151.23 1209.96 L2150.64 1209.96 L2150.05 1209.96 L2149.47 1209.96 L2148.88 1209.96 L2148.3 1209.96 L2147.71 1209.96 L2147.12 1209.96 L2146.54 1209.96 L2145.95 1209.96 L2145.36 1209.96 L2144.78 1209.96 L2144.19 1209.96 L2143.6 1209.96 L2143.02 1209.96 L2142.43 1209.96 L2141.84 1209.96 L2141.26 1209.96 L2140.67 1209.96 L2140.09 1209.96 L2139.5 1209.96 L2138.91 1209.96 L2138.33 1209.96 L2137.74 1209.96 L2137.15 1209.96 L2136.57 1209.96 L2135.98 1209.96 L2135.39 1209.96 L2134.81 1209.96 L2134.22 1209.96 L2133.63 1209.96 L2133.05 1209.96 L2132.46 1209.96 L2131.88 1209.96 L2131.29 1209.96 L2130.7 1209.96 L2130.12 1209.96 L2129.53 1209.96 L2128.94 1209.96 L2128.36 1209.96 L2127.77 1209.96 L2127.18 1209.96 L2126.6 1209.96 L2126.01 1209.96 L2125.42 1209.96 L2124.84 1209.96 L2124.25 1209.96 L2123.67 1209.96 L2123.08 1209.96 L2122.49 1209.96 L2121.91 1209.96 L2121.32 1209.96 L2120.73 1209.96 L2120.15 1209.96 L2119.56 1209.96 L2118.97 1209.96 L2118.39 1209.96 L2117.8 1209.96 L2117.22 1209.96 L2116.63 1209.96 L2116.04 1209.96 L2115.46 1209.96 L2114.87 1209.96 L2114.28 1209.96 L2113.7 1209.96 L2113.11 1209.96 L2112.52 1209.96 L2111.94 1209.96 L2111.35 1209.96 L2110.76 1209.96 L2110.18 1209.96 L2109.59 1209.96 L2109.01 1209.96 L2108.42 1209.96 L2107.83 1209.96 L2107.25 1209.96 L2106.66 1209.96 L2106.07 1209.96 L2105.49 1209.96 L2104.9 1209.96 L2104.31 1209.96 L2103.73 1209.96 L2103.14 1209.96 L2102.55 1209.96 L2101.97 1209.96 L2101.38 1209.96 L2100.8 1209.96 L2100.21 1209.96 L2099.62 1209.96 L2099.04 1209.96 L2098.45 1209.96 L2097.86 1209.96 L2097.28 1209.96 L2096.69 1209.96 L2096.1 1209.96 L2095.52 1209.96 L2094.93 1209.96 L2094.35 1209.96 L2093.76 1209.96 L2093.17 1209.96 L2092.59 1209.96 L2092 1209.96 L2091.41 1209.96 L2090.83 1209.96 L2090.24 1209.96 L2089.65 1209.96 L2089.07 1209.96 L2088.48 1209.96 L2087.89 1209.96 L2087.31 1209.96 L2086.72 1209.96 L2086.14 1209.96 L2085.55 1209.96 L2084.96 1209.96 L2084.38 1209.96 L2083.79 1209.96 L2083.2 1209.96 L2082.62 1209.96 L2082.03 1209.96 L2081.44 1209.96 L2080.86 1209.96 L2080.27 1209.96 L2079.68 1209.96 L2079.1 1209.96 L2078.51 1209.96 L2077.93 1209.96 L2077.34 1209.96 L2076.75 1209.96 L2076.17 1209.96 L2075.58 1209.96 L2074.99 1209.96 L2074.41 1209.96 L2073.82 1209.96 L2073.23 1209.96 L2072.65 1209.96 L2072.06 1209.96 L2071.48 1209.96 L2070.89 1209.96 L2070.3 1209.96 L2069.72 1209.96 L2069.13 1209.96 L2068.54 1209.96 L2067.96 1209.96 L2067.37 1209.96 L2066.78 1209.96 L2066.2 1209.96 L2065.61 1209.96 L2065.02 1209.96 L2064.44 1209.96 L2063.85 1209.96 L2063.27 1209.96 L2062.68 1209.96 L2062.09 1209.96 L2061.51 1209.96 L2060.92 1209.96 L2060.33 1209.96 L2059.75 1209.96 L2059.16 1209.96 L2058.57 1209.96 L2057.99 1209.96 L2057.4 1209.96 L2056.81 1209.96 L2056.23 1209.96 L2055.64 1209.96 L2055.06 1209.96 L2054.47 1209.96 L2053.88 1209.96 L2053.3 1209.96 L2052.71 1209.96 L2052.12 1209.96 L2051.54 1209.96 L2050.95 1209.96 L2050.36 1209.96 L2049.78 1209.96 L2049.19 1209.96 L2048.6 1209.96 L2048.02 1209.96 L2047.43 1209.96 L2046.85 1209.96 L2046.26 1209.96 L2045.67 1209.96 L2045.09 1209.96 L2044.5 1209.96 L2043.91 1209.96 L2043.33 1209.96 L2042.74 1209.96 L2042.15 1209.96 L2041.57 1209.96 L2040.98 1209.96 L2040.4 1209.96 L2039.81 1209.96 L2039.22 1209.96 L2038.64 1209.96 L2038.05 1209.96 L2037.46 1209.96 L2036.88 1209.96 L2036.29 1209.96 L2035.7 1209.96 L2035.12 1209.96 L2034.53 1209.96 L2033.94 1209.96 L2033.36 1209.96 L2032.77 1209.96 L2032.19 1209.96 L2031.6 1209.96 L2031.01 1209.96 L2030.43 1209.96 L2029.84 1209.96 L2029.25 1209.96 L2028.67 1209.96 L2028.08 1209.96 L2027.49 1209.96 L2026.91 1209.96 L2026.32 1209.96 L2025.73 1209.96 L2025.15 1209.96 L2024.56 1209.96 L2023.98 1209.96 L2023.39 1209.96 L2022.8 1209.96 L2022.22 1209.96 L2021.63 1209.96 L2021.04 1209.96 L2020.46 1209.96 L2019.87 1209.96 L2019.28 1209.96 L2018.7 1209.96 L2018.11 1209.96 L2017.53 1209.96 L2016.94 1209.96 L2016.35 1209.96 L2015.77 1209.96 L2015.18 1209.96 L2014.59 1209.96 L2014.01 1209.96 L2013.42 1209.96 L2012.83 1209.96 L2012.25 1209.96 L2011.66 1209.96 L2011.07 1209.96 L2010.49 1209.96 L2009.9 1209.96 L2009.32 1209.96 L2008.73 1209.96 L2008.14 1209.96 L2007.56 1209.96 L2006.97 1209.96 L2006.38 1209.96 L2005.8 1209.96 L2005.21 1209.96 L2004.62 1209.96 L2004.04 1209.96 L2003.45 1209.96 L2002.86 1209.96 L2002.28 1209.96 L2001.69 1209.96 L2001.11 1209.96 L2000.52 1209.96 L1999.93 1209.96 L1999.35 1209.96 L1998.76 1209.96 L1998.17 1209.96 L1997.59 1209.96 L1997 1209.96 L1996.41 1209.96 L1995.83 1209.96 L1995.24 1209.96 L1994.65 1209.96 L1994.07 1209.96 L1993.48 1209.96 L1992.9 1209.96 L1992.31 1209.96 L1991.72 1209.96 L1991.14 1209.96 L1990.55 1209.96 L1989.96 1209.96 L1989.38 1209.96 L1988.79 1209.96 L1988.2 1209.96 L1987.62 1209.96 L1987.03 1209.96 L1986.45 1209.96 L1985.86 1209.96 L1985.27 1209.96 L1984.69 1209.96 L1984.1 1209.96 L1983.51 1209.96 L1982.93 1209.96 L1982.34 1209.96 L1981.75 1209.96 L1981.17 1209.96 L1980.58 1209.96 L1979.99 1209.96 L1979.41 1209.96 L1978.82 1209.96 L1978.24 1209.96 L1977.65 1209.96 L1977.06 1209.96 L1976.48 1209.96 L1975.89 1209.96 L1975.3 1209.96 L1974.72 1209.96 L1974.13 1209.96 L1973.54 1209.96 L1972.96 1209.96 L1972.37 1209.96 L1971.78 1209.96 L1971.2 1209.96 L1970.61 1209.96 L1970.03 1209.96 L1969.44 1209.96 L1968.85 1209.96 L1968.27 1209.96 L1967.68 1209.96 L1967.09 1209.96 L1966.51 1209.96 L1965.92 1209.96 L1965.33 1209.96 L1964.75 1209.96 L1964.16 1209.96 L1963.58 1209.96 L1962.99 1209.96 L1962.4 1209.96 L1961.82 1209.96 L1961.23 1209.96 L1960.64 1209.96 L1960.06 1209.96 L1959.47 1209.96 L1958.88 1209.96 L1958.3 1209.96 L1957.71 1209.96 L1957.12 1209.96 L1956.54 1209.96 L1955.95 1209.96 L1955.37 1209.96 L1954.78 1209.96 L1954.19 1209.96 L1953.61 1209.96 L1953.02 1209.96 L1952.43 1209.96 L1951.85 1209.96 L1951.26 1209.96 L1950.67 1209.96 L1950.09 1209.96 L1949.5 1209.96 L1948.91 1209.96 L1948.33 1209.96 L1947.74 1209.96 L1947.16 1209.96 L1946.57 1209.96 L1945.98 1209.96 L1945.4 1209.96 L1944.81 1209.96 L1944.22 1209.96 L1943.64 1209.96 L1943.05 1209.96 L1942.46 1209.96 L1941.88 1209.96 L1941.29 1209.96 L1940.71 1209.96 L1940.12 1209.96 L1939.53 1209.96 L1938.95 1209.96 L1938.36 1209.96 L1937.77 1209.96 L1937.19 1209.96 L1936.6 1209.96 L1936.01 1209.96 L1935.43 1209.96 L1934.84 1209.96 L1934.25 1209.96 L1933.67 1209.96 L1933.08 1209.96 L1932.5 1209.96 L1931.91 1209.96 L1931.32 1209.96 L1930.74 1209.96 L1930.15 1209.96 L1929.56 1209.96 L1928.98 1209.96 L1928.39 1209.96 L1927.8 1209.96 L1927.22 1209.96 L1926.63 1209.96 L1926.04 1209.96 L1925.46 1209.96 L1924.87 1209.96 L1924.29 1209.96 L1923.7 1209.96 L1923.11 1209.96 L1922.53 1209.96 L1921.94 1209.96 L1921.35 1209.96 L1920.77 1209.96 L1920.18 1209.96 L1919.59 1209.96 L1919.01 1209.96 L1918.42 1209.96 L1917.83 1209.96 L1917.25 1209.96 L1916.66 1209.96 L1916.08 1209.96 L1915.49 1209.96 L1914.9 1209.96 L1914.32 1209.96 L1913.73 1209.96 L1913.14 1209.96 L1912.56 1209.96 L1911.97 1209.96 L1911.38 1209.96 L1910.8 1209.96 L1910.21 1209.96 L1909.63 1209.96 L1909.04 1209.96 L1908.45 1209.96 L1907.87 1209.96 L1907.28 1209.96 L1906.69 1209.96 L1906.11 1209.96 L1905.52 1209.96 L1904.93 1209.96 L1904.35 1209.96 L1903.76 1209.96 L1903.17 1209.96 L1902.59 1209.96 L1902 1209.96 L1901.42 1209.96 L1900.83 1209.96 L1900.24 1209.96 L1899.66 1209.96 L1899.07 1209.96 L1898.48 1209.96 L1897.9 1209.96 L1897.31 1209.96 L1896.72 1209.96 L1896.14 1209.96 L1895.55 1209.96 L1894.96 1209.96 L1894.38 1209.96 L1893.79 1209.96 L1893.21 1209.96 L1892.62 1209.96 L1892.03 1209.96 L1891.45 1209.96 L1890.86 1209.96 L1890.27 1209.96 L1889.69 1209.96 L1889.1 1209.96 L1888.51 1209.96 L1887.93 1209.96 L1887.34 1209.96 L1886.76 1209.96 L1886.17 1209.96 L1885.58 1209.96 L1885 1209.96 L1884.41 1209.96 L1883.82 1209.96 L1883.24 1209.96 L1882.65 1209.96 L1882.06 1209.96 L1881.48 1209.96 L1880.89 1209.96 L1880.3 1209.96 L1879.72 1209.96 L1879.13 1209.96 L1878.55 1209.96 L1877.96 1209.96 L1877.37 1209.96 L1876.79 1209.96 L1876.2 1209.96 L1875.61 1209.96 L1875.03 1209.96 L1874.44 1209.96 L1873.85 1209.96 L1873.27 1209.96 L1872.68 1209.96 L1872.09 1209.96 L1871.51 1209.96 L1870.92 1209.96 L1870.34 1209.96 L1869.75 1209.96 L1869.16 1209.96 L1868.58 1209.96 L1867.99 1209.96 L1867.4 1209.96 L1866.82 1209.96 L1866.23 1209.96 L1865.64 1209.96 L1865.06 1209.96 L1864.47 1209.96 L1863.88 1209.96 L1863.3 1209.96 L1862.71 1209.96 L1862.13 1209.96 L1861.54 1209.96 L1860.95 1209.96 L1860.37 1209.96 L1859.78 1209.96 L1859.19 1209.96 L1858.61 1209.96 L1858.02 1209.96 L1857.43 1209.96 L1856.85 1209.96 L1856.26 1209.96 L1855.68 1209.96 L1855.09 1209.96 L1854.5 1209.96 L1853.92 1209.96 L1853.33 1209.96 L1852.74 1209.96 L1852.16 1209.96 L1851.57 1209.96 L1850.98 1209.96 L1850.4 1209.96 L1849.81 1209.96 L1849.22 1209.96 L1848.64 1209.96 L1848.05 1209.96 L1847.47 1209.96 L1846.88 1209.96 L1846.29 1209.96 L1845.71 1209.96 L1845.12 1209.96 L1844.53 1209.96 L1843.95 1209.96 L1843.36 1209.96 L1842.77 1209.96 L1842.19 1209.96 L1841.6 1209.96 L1841.01 1209.96 L1840.43 1209.96 L1839.84 1209.96 L1839.26 1209.96 L1838.67 1209.96 L1838.08 1209.96 L1837.5 1209.96 L1836.91 1209.96 L1836.32 1209.96 L1835.74 1209.96 L1835.15 1209.96 L1834.56 1209.96 L1833.98 1209.96 L1833.39 1209.96 L1832.81 1209.96 L1832.22 1209.96 L1831.63 1209.96 L1831.05 1209.96 L1830.46 1209.96 L1829.87 1209.96 L1829.29 1209.96 L1828.7 1209.96 L1828.11 1209.96 L1827.53 1209.96 L1826.94 1209.96 L1826.35 1209.96 L1825.77 1209.96 L1825.18 1209.96 L1824.6 1209.96 L1824.01 1209.96 L1823.42 1209.96 L1822.84 1209.96 L1822.25 1209.96 L1821.66 1209.96 L1821.08 1209.96 L1820.49 1209.96 L1819.9 1209.96 L1819.32 1209.96 L1818.73 1209.96 L1818.14 1209.96 L1817.56 1209.96 L1816.97 1209.96 L1816.39 1209.96 L1815.8 1209.96 L1815.21 1209.96 L1814.63 1209.96 L1814.04 1209.96 L1813.45 1209.96 L1812.87 1209.96 L1812.28 1209.96 L1811.69 1209.96 L1811.11 1209.96 L1810.52 1209.96 L1809.94 1209.96 L1809.35 1209.96 L1808.76 1209.96 L1808.18 1209.96 L1807.59 1209.96 L1807 1209.96 L1806.42 1209.96 L1805.83 1209.96 L1805.24 1209.96 L1804.66 1209.96 L1804.07 1209.96 L1803.48 1209.96 L1802.9 1209.96 L1802.31 1209.96 L1801.73 1209.96 L1801.14 1209.96 L1800.55 1209.96 L1799.97 1209.96 L1799.38 1209.96 L1798.79 1209.96 L1798.21 1209.96 L1797.62 1209.96 L1797.03 1209.96 L1796.45 1209.96 L1795.86 1209.96 L1795.27 1209.96 L1794.69 1209.96 L1794.1 1209.96 L1793.52 1209.96 L1792.93 1209.96 L1792.34 1209.96 L1791.76 1209.96 L1791.17 1209.96 L1790.58 1209.96 L1790 1209.96 L1789.41 1209.96 L1788.82 1209.96 L1788.24 1209.96 L1787.65 1209.96 L1787.06 1209.96 L1786.48 1209.96 L1785.89 1209.96 L1785.31 1209.96 L1784.72 1209.96 L1784.13 1209.96 L1783.55 1209.96 L1782.96 1209.96 L1782.37 1209.96 L1781.79 1209.96 L1781.2 1209.96 L1780.61 1209.96 L1780.03 1209.96 L1779.44 1209.96 L1778.86 1209.96 L1778.27 1209.96 L1777.68 1209.96 L1777.1 1209.96 L1776.51 1209.96 L1775.92 1209.96 L1775.34 1209.96 L1774.75 1209.96 L1774.16 1209.96 L1773.58 1209.96 L1772.99 1209.96 L1772.4 1209.96 L1771.82 1209.96 L1771.23 1209.96 L1770.65 1209.96 L1770.06 1209.96 L1769.47 1209.96 L1768.89 1209.96 L1768.3 1209.96 L1767.71 1209.96 L1767.13 1209.96 L1766.54 1209.96 L1765.95 1209.96 L1765.37 1209.96 L1764.78 1209.96 L1764.19 1209.96 L1763.61 1209.96 L1763.02 1209.96 L1762.44 1209.96 L1761.85 1209.96 L1761.26 1209.96 L1760.68 1209.96 L1760.09 1209.96 L1759.5 1209.96 L1758.92 1209.96 L1758.33 1209.96 L1757.74 1209.96 L1757.16 1209.96 L1756.57 1209.96 L1755.99 1209.96 L1755.4 1209.96 L1754.81 1209.96 L1754.23 1209.96 L1753.64 1209.96 L1753.05 1209.96 L1752.47 1209.96 L1751.88 1209.96 L1751.29 1209.96 L1750.71 1209.96 L1750.12 1209.96 L1749.53 1209.96 L1748.95 1209.96 L1748.36 1209.96 L1747.78 1209.96 L1747.19 1209.96 L1746.6 1209.96 L1746.02 1209.96 L1745.43 1209.96 L1744.84 1209.96 L1744.26 1209.96 L1743.67 1209.96 L1743.08 1209.96 L1742.5 1209.96 L1741.91 1209.96 L1741.32 1209.96 L1740.74 1209.96 L1740.15 1209.96 L1739.57 1209.96 L1738.98 1209.96 L1738.39 1209.96 L1737.81 1209.96 L1737.22 1209.96 L1736.63 1209.96 L1736.05 1209.96 L1735.46 1209.96 L1734.87 1209.96 L1734.29 1209.96 L1733.7 1209.96 L1733.11 1209.96 L1732.53 1209.96 L1731.94 1209.96 L1731.36 1209.96 L1730.77 1209.96 L1730.18 1209.96 L1729.6 1209.96 L1729.01 1209.96 L1728.42 1209.96 L1727.84 1209.96 L1727.25 1209.96 L1726.66 1209.96 L1726.08 1209.96 L1725.49 1209.96 L1724.91 1209.96 L1724.32 1209.96 L1723.73 1209.96 L1723.15 1209.96 L1722.56 1209.96 L1721.97 1209.96 L1721.39 1209.96 L1720.8 1209.96 L1720.21 1209.96 L1719.63 1209.96 L1719.04 1209.96 L1718.45 1209.96 L1717.87 1209.96 L1717.28 1209.96 L1716.7 1209.96 L1716.11 1209.96 L1715.52 1209.96 L1714.94 1209.96 L1714.35 1209.96 L1713.76 1209.96 L1713.18 1209.96 L1712.59 1209.96 L1712 1209.96 L1711.42 1209.96 L1710.83 1209.96 L1710.24 1209.96 L1709.66 1209.96 L1709.07 1209.96 L1708.49 1209.96 L1707.9 1209.96 L1707.31 1209.96 L1706.73 1209.96 L1706.14 1209.96 L1705.55 1209.96 L1704.97 1209.96 L1704.38 1209.96 L1703.79 1209.96 L1703.21 1209.96 L1702.62 1209.96 L1702.04 1209.96 L1701.45 1209.96 L1700.86 1209.96 L1700.28 1209.96 L1699.69 1209.96 L1699.1 1209.96 L1698.52 1209.96 L1697.93 1209.96 L1697.34 1209.96 L1696.76 1209.96 L1696.17 1209.96 L1695.58 1209.96 L1695 1209.96 L1694.41 1209.96 L1693.83 1209.96 L1693.24 1209.96 L1692.65 1209.96 L1692.07 1209.96 L1691.48 1209.96 L1690.89 1209.96 L1690.31 1209.96 L1689.72 1209.96 L1689.13 1209.96 L1688.55 1209.96 L1687.96 1209.96 L1687.37 1209.96 L1686.79 1209.96 L1686.2 1209.96 L1685.62 1209.96 L1685.03 1209.96 L1684.44 1209.96 L1683.86 1209.96 L1683.27 1209.96 L1682.68 1209.96 L1682.1 1209.96 L1681.51 1209.96 L1680.92 1209.96 L1680.34 1209.96 L1679.75 1209.96 L1679.17 1209.96 L1678.58 1209.96 L1677.99 1209.96 L1677.41 1209.96 L1676.82 1209.96 L1676.23 1209.96 L1675.65 1209.96 L1675.06 1209.96 L1674.47 1209.96 L1673.89 1209.96 L1673.3 1209.96 L1672.71 1209.96 L1672.13 1209.96 L1671.54 1209.96 L1670.96 1209.96 L1670.37 1209.96 L1669.78 1209.96 L1669.2 1209.96 L1668.61 1209.96 L1668.02 1209.96 L1667.44 1209.96 L1666.85 1209.96 L1666.26 1209.96 L1665.68 1209.96 L1665.09 1209.96 L1664.5 1209.96 L1663.92 1209.96 L1663.33 1209.96 L1662.75 1209.96 L1662.16 1209.96 L1661.57 1209.96 L1660.99 1209.96 L1660.4 1209.96 L1659.81 1209.96 L1659.23 1209.96 L1658.64 1209.96 L1658.05 1209.96 L1657.47 1209.96 L1656.88 1209.96 L1656.29 1209.96 L1655.71 1209.96 L1655.12 1209.96 L1654.54 1209.96 L1653.95 1209.96 L1653.36 1209.96 L1652.78 1209.96 L1652.19 1209.96 L1651.6 1209.96 L1651.02 1209.96 L1650.43 1209.96 L1649.84 1209.96 L1649.26 1209.96 L1648.67 1209.96 L1648.09 1209.96 L1647.5 1209.96 L1646.91 1209.96 L1646.33 1209.96 L1645.74 1209.96 L1645.15 1209.96 L1644.57 1209.96 L1643.98 1209.96 L1643.39 1209.96 L1642.81 1209.96 L1642.22 1209.96 L1641.63 1209.96 L1641.05 1209.96 L1640.46 1209.96 L1639.88 1209.96 L1639.29 1209.96 L1638.7 1209.96 L1638.12 1209.96 L1637.53 1209.96 L1636.94 1209.96 L1636.36 1209.96 L1635.77 1209.96 L1635.18 1209.96 L1634.6 1209.96 L1634.01 1209.96 L1633.42 1209.96 L1632.84 1209.96 L1632.25 1209.96 L1631.67 1209.96 L1631.08 1209.96 L1630.49 1209.96 L1629.91 1209.96 L1629.32 1209.96 L1628.73 1209.96 L1628.15 1209.96 L1627.56 1209.96 L1626.97 1209.96 L1626.39 1209.96 L1625.8 1209.96 L1625.22 1209.96 L1624.63 1209.96 L1624.04 1209.96 L1623.46 1209.96 L1622.87 1209.96 L1622.28 1209.96 L1621.7 1209.96 L1621.11 1209.96 L1620.52 1209.96 L1619.94 1209.96 L1619.35 1209.96 L1618.76 1209.96 L1618.18 1209.96 L1617.59 1209.96 L1617.01 1209.96 L1616.42 1209.96 L1615.83 1209.96 L1615.25 1209.96 L1614.66 1209.96 L1614.07 1209.96 L1613.49 1209.96 L1612.9 1209.96 L1612.31 1209.96 L1611.73 1209.96 L1611.14 1209.96 L1610.55 1209.96 L1609.97 1209.96 L1609.38 1209.96 L1608.8 1209.96 L1608.21 1209.96 L1607.62 1209.96 L1607.04 1209.96 L1606.45 1209.96 L1605.86 1209.96 L1605.28 1209.96 L1604.69 1209.96 L1604.1 1209.96 L1603.52 1209.96 L1602.93 1209.96 L1602.34 1209.96 L1601.76 1209.96 L1601.17 1209.96 L1600.59 1209.96 L1600 1209.96 L1599.41 1209.96 L1598.83 1209.96 L1598.24 1209.96 L1597.65 1209.96 L1597.07 1209.96 L1596.48 1209.96 L1595.89 1209.96 L1595.31 1209.96 L1594.72 1209.96 L1594.14 1209.96 L1593.55 1209.96 L1592.96 1209.96 L1592.38 1209.96 L1591.79 1209.96 L1591.2 1209.96 L1590.62 1209.96 L1590.03 1209.96 L1589.44 1209.96 L1588.86 1209.96 L1588.27 1209.96 L1587.68 1209.96 L1587.1 1209.96 L1586.51 1209.96 L1585.93 1209.96 L1585.34 1209.96 L1584.75 1209.96 L1584.17 1209.96 L1583.58 1209.96 L1582.99 1209.96 L1582.41 1209.96 L1581.82 1209.96 L1581.23 1209.96 L1580.65 1209.96 L1580.06 1209.96 L1579.47 1209.96 L1578.89 1209.96 L1578.3 1209.96 L1577.72 1209.96 L1577.13 1209.96 L1576.54 1209.96 L1575.96 1209.96 L1575.37 1209.96 L1574.78 1209.96 L1574.2 1209.96 L1573.61 1209.96 L1573.02 1209.96 L1572.44 1209.96 L1571.85 1209.96 L1571.27 1209.96 L1570.68 1209.96 L1570.09 1209.96 L1569.51 1209.96 L1568.92 1209.96 L1568.33 1209.96 L1567.75 1209.96 L1567.16 1209.96 L1566.57 1209.96 L1565.99 1209.96 L1565.4 1209.96 L1564.81 1209.96 L1564.23 1209.96 L1563.64 1209.96 L1563.06 1209.96 L1562.47 1209.96 L1561.88 1209.96 L1561.3 1209.96 L1560.71 1209.96 L1560.12 1209.96 L1559.54 1209.96 L1558.95 1209.96 L1558.36 1209.96 L1557.78 1209.96 L1557.19 1209.96 L1556.6 1209.96 L1556.02 1209.96 L1555.43 1209.96 L1554.85 1209.96 L1554.26 1209.96 L1553.67 1209.96 L1553.09 1209.96 L1552.5 1209.96 L1551.91 1209.96 L1551.33 1209.96 L1550.74 1209.96 L1550.15 1209.96 L1549.57 1209.96 L1548.98 1209.96 L1548.4 1209.96 L1547.81 1209.96 L1547.22 1209.96 L1546.64 1209.96 L1546.05 1209.96 L1545.46 1209.96 L1544.88 1209.96 L1544.29 1209.96 L1543.7 1209.96 L1543.12 1209.96 L1542.53 1209.96 L1541.94 1209.96 L1541.36 1209.96 L1540.77 1209.96 L1540.19 1209.96 L1539.6 1209.96 L1539.01 1209.96 L1538.43 1209.96 L1537.84 1209.96 L1537.25 1209.96 L1536.67 1209.96 L1536.08 1209.96 L1535.49 1209.96 L1534.91 1209.96 L1534.32 1209.96 L1533.73 1209.96 L1533.15 1209.96 L1532.56 1209.96 L1531.98 1209.96 L1531.39 1209.96 L1530.8 1209.96 L1530.22 1209.96 L1529.63 1209.96 L1529.04 1209.96 L1528.46 1209.96 L1527.87 1209.96 L1527.28 1209.96 L1526.7 1209.96 L1526.11 1209.96 L1525.52 1209.96 L1524.94 1209.96 L1524.35 1209.96 L1523.77 1209.96 L1523.18 1209.96 L1522.59 1209.96 L1522.01 1209.96 L1521.42 1209.96 L1520.83 1209.96 L1520.25 1209.96 L1519.66 1209.96 L1519.07 1209.96 L1518.49 1209.96 L1517.9 1209.96 L1517.32 1209.96 L1516.73 1209.96 L1516.14 1209.96 L1515.56 1209.96 L1514.97 1209.96 L1514.38 1209.96 L1513.8 1209.96 L1513.21 1209.96 L1512.62 1209.96 L1512.04 1209.96 L1511.45 1209.96 L1510.86 1209.96 L1510.28 1209.96 L1509.69 1209.96 L1509.11 1209.96 L1508.52 1209.96 L1507.93 1209.96 L1507.35 1209.96 L1506.76 1209.96 L1506.17 1209.96 L1505.59 1209.96 L1505 1209.96 L1504.41 1209.96 L1503.83 1209.96 L1503.24 1209.96 L1502.65 1209.96 L1502.07 1209.96 L1501.48 1209.96 L1500.9 1209.96 L1500.31 1209.96 L1499.72 1209.96 L1499.14 1209.96 L1498.55 1209.96 L1497.96 1209.96 L1497.38 1209.96 L1496.79 1209.96 L1496.2 1209.96 L1495.62 1209.96 L1495.03 1209.96 L1494.45 1209.96 L1493.86 1209.96 L1493.27 1209.96 L1492.69 1209.96 L1492.1 1209.96 L1491.51 1209.96 L1490.93 1209.96 L1490.34 1209.96 L1489.75 1209.96 L1489.17 1209.96 L1488.58 1209.96 L1487.99 1209.96 L1487.41 1209.96 L1486.82 1209.96 L1486.24 1209.96 L1485.65 1209.96 L1485.06 1209.96 L1484.48 1209.96 L1483.89 1209.96 L1483.3 1209.96 L1482.72 1209.96 L1482.13 1209.96 L1481.54 1209.96 L1480.96 1209.96 L1480.37 1209.96 L1479.78 1209.96 L1479.2 1209.96 L1478.61 1209.96 L1478.03 1209.96 L1477.44 1209.96 L1476.85 1209.96 L1476.27 1209.96 L1475.68 1209.96 L1475.09 1209.96 L1474.51 1209.96 L1473.92 1209.96 L1473.33 1209.96 L1472.75 1209.96 L1472.16 1209.96 L1471.57 1209.96 L1470.99 1209.96 L1470.4 1209.96 L1469.82 1209.96 L1469.23 1209.96 L1468.64 1209.96 L1468.06 1209.96 L1467.47 1209.96 L1466.88 1209.96 L1466.3 1209.96 L1465.71 1209.96 L1465.12 1209.96 L1464.54 1209.96 L1463.95 1209.96 L1463.37 1209.96 L1462.78 1209.96 L1462.19 1209.96 L1461.61 1209.96 L1461.02 1209.96 L1460.43 1209.96 L1459.85 1209.96 L1459.26 1209.96 L1458.67 1209.96 L1458.09 1209.96 L1457.5 1209.96 L1456.91 1209.96 L1456.33 1209.96 L1455.74 1209.96 L1455.16 1209.96 L1454.57 1209.96 L1453.98 1209.96 L1453.4 1209.96 L1452.81 1209.96 L1452.22 1209.96 L1451.64 1209.96 L1451.05 1209.96 L1450.46 1209.96 L1449.88 1209.96 L1449.29 1209.96 L1448.7 1209.96 L1448.12 1209.96 L1447.53 1209.96 L1446.95 1209.96 L1446.36 1209.96 L1445.77 1209.96 L1445.19 1209.96 L1444.6 1209.96 L1444.01 1209.96 L1443.43 1209.96 L1442.84 1209.96 L1442.25 1209.96 L1441.67 1209.96 L1441.08 1209.96 L1440.5 1209.96 L1439.91 1209.96 L1439.32 1209.96 L1438.74 1209.96 L1438.15 1209.96 L1437.56 1209.96 L1436.98 1209.96 L1436.39 1209.96 L1435.8 1209.96 L1435.22 1209.96 L1434.63 1209.96 L1434.04 1209.96 L1433.46 1209.96 L1432.87 1209.96 L1432.29 1209.96 L1431.7 1209.96 L1431.11 1209.96 L1430.53 1209.96 L1429.94 1209.96 L1429.35 1209.96 L1428.77 1209.96 L1428.18 1209.96 L1427.59 1209.96 L1427.01 1209.96 L1426.42 1209.96 L1425.83 1209.96 L1425.25 1209.96 L1424.66 1209.96 L1424.08 1209.96 L1423.49 1209.96 L1422.9 1209.96 L1422.32 1209.96 L1421.73 1209.96 L1421.14 1209.96 L1420.56 1209.96 L1419.97 1209.96 L1419.38 1209.96 L1418.8 1209.96 L1418.21 1209.96 L1417.63 1209.96 L1417.04 1209.96 L1416.45 1209.96 L1415.87 1209.96 L1415.28 1209.96 L1414.69 1209.96 L1414.11 1209.96 L1413.52 1209.96 L1412.93 1209.96 L1412.35 1209.96 L1411.76 1209.96 L1411.17 1209.96 L1410.59 1209.96 L1410 1209.96 L1409.42 1209.96 L1408.83 1209.96 L1408.24 1209.96 L1407.66 1209.96 L1407.07 1209.96 L1406.48 1209.96 L1405.9 1209.96 L1405.31 1209.96 L1404.72 1209.96 L1404.14 1209.96 L1403.55 1209.96 L1402.96 1209.96 L1402.38 1209.96 L1401.79 1209.96 L1401.21 1209.96 L1400.62 1209.96 L1400.03 1209.96 L1399.45 1209.96 L1398.86 1209.96 L1398.27 1209.96 L1397.69 1209.96 L1397.1 1209.96 L1396.51 1209.96 L1395.93 1209.96 L1395.34 1209.96 L1394.75 1209.96 L1394.17 1209.96 L1393.58 1209.96 L1393 1209.96 L1392.41 1209.96 L1391.82 1209.96 L1391.24 1209.96 L1390.65 1209.96 L1390.06 1209.96 L1389.48 1209.96 L1388.89 1209.96 L1388.3 1209.96 L1387.72 1209.96 L1387.13 1209.96 L1386.55 1209.96 L1385.96 1209.96 L1385.37 1209.96 L1384.79 1209.96 L1384.2 1209.96 L1383.61 1209.96 L1383.03 1209.96 L1382.44 1209.96 L1381.85 1209.96 L1381.27 1209.96 L1380.68 1209.96 L1380.09 1209.96 L1379.51 1209.96 L1378.92 1209.96 L1378.34 1209.96 L1377.75 1209.96 L1377.16 1209.96 L1376.58 1209.96 L1375.99 1209.96 L1375.4 1209.96 L1374.82 1209.96 L1374.23 1209.96 L1373.64 1209.96 L1373.06 1209.96 L1372.47 1209.96 L1371.88 1209.96 L1371.3 1209.96 L1370.71 1209.96 L1370.13 1209.96 L1369.54 1209.96 L1368.95 1209.96 L1368.37 1209.96 L1367.78 1209.96 L1367.19 1209.96 L1366.61 1209.96 L1366.02 1209.96 L1365.43 1209.96 L1364.85 1209.96 L1364.26 1209.96 L1363.68 1209.96 L1363.09 1209.96 L1362.5 1209.96 L1361.92 1209.96 L1361.33 1209.96 L1360.74 1209.96 L1360.16 1209.96 L1359.57 1209.96 L1358.98 1209.96 L1358.4 1209.96 L1357.81 1209.96 L1357.22 1209.96 L1356.64 1209.96 L1356.05 1209.96 L1355.47 1209.96 L1354.88 1209.96 L1354.29 1209.96 L1353.71 1209.96 L1353.12 1209.96 L1352.53 1209.96 L1351.95 1209.96 L1351.36 1209.96 L1350.77 1209.96 L1350.19 1209.96 L1349.6 1209.96 L1349.01 1209.96 L1348.43 1209.96 L1347.84 1209.96 L1347.26 1209.96 L1346.67 1209.96 L1346.08 1209.96 L1345.5 1209.96 L1344.91 1209.96 L1344.32 1209.96 L1343.74 1209.96 L1343.15 1209.96 L1342.56 1209.96 L1341.98 1209.96 L1341.39 1209.96 L1340.8 1209.96 L1340.22 1209.96 L1339.63 1209.96 L1339.05 1209.96 L1338.46 1209.96 L1337.87 1209.96 L1337.29 1209.96 L1336.7 1209.96 L1336.11 1209.96 L1335.53 1209.96 L1334.94 1209.96 L1334.35 1209.96 L1333.77 1209.96 L1333.18 1209.96 L1332.6 1209.96 L1332.01 1209.96 L1331.42 1209.96 L1330.84 1209.96 L1330.25 1209.96 L1329.66 1209.96 L1329.08 1209.96 L1328.49 1209.96 L1327.9 1209.96 L1327.32 1209.96 L1326.73 1209.96 L1326.14 1209.96 L1325.56 1209.96 L1324.97 1209.96 L1324.39 1209.96 L1323.8 1209.96 L1323.21 1209.96 L1322.63 1209.96 L1322.04 1209.96 L1321.45 1209.96 L1320.87 1209.96 L1320.28 1209.96 L1319.69 1209.96 L1319.11 1209.96 L1318.52 1209.96 L1317.93 1209.96 L1317.35 1209.96 L1316.76 1209.96 L1316.18 1209.96 L1315.59 1209.96 L1315 1209.96 L1314.42 1209.96 L1313.83 1209.96 L1313.24 1209.96 L1312.66 1209.96 L1312.07 1209.96 L1311.48 1209.96 L1310.9 1209.96 L1310.31 1209.96 L1309.73 1209.96 L1309.14 1209.96 L1308.55 1209.96 L1307.97 1209.96 L1307.38 1209.96 L1306.79 1209.96 L1306.21 1209.96 L1305.62 1209.96 L1305.03 1209.96 L1304.45 1209.96 L1303.86 1209.96 L1303.27 1209.96 L1302.69 1209.96 L1302.1 1209.96 L1301.52 1209.96 L1300.93 1209.96 L1300.34 1209.96 L1299.76 1209.96 L1299.17 1209.96 L1298.58 1209.96 L1298 1209.96 L1297.41 1209.96 L1296.82 1209.96 L1296.24 1209.96 L1295.65 1209.96 L1295.06 1209.96 L1294.48 1209.96 L1293.89 1209.96 L1293.31 1209.96 L1292.72 1209.96 L1292.13 1209.96 L1291.55 1209.96 L1290.96 1209.96 L1290.37 1209.96 L1289.79 1209.96 L1289.2 1209.96 L1288.61 1209.96 L1288.03 1209.96 L1287.44 1209.96 L1286.86 1209.96 L1286.27 1209.96 L1285.68 1209.96 L1285.1 1209.96 L1284.51 1209.96 L1283.92 1209.96 L1283.34 1209.96 L1282.75 1209.96 L1282.16 1209.96 L1281.58 1209.96 L1280.99 1209.96 L1280.4 1209.96 L1279.82 1209.96 L1279.23 1209.96 L1278.65 1209.96 L1278.06 1209.96 L1277.47 1209.96 L1276.89 1209.96 L1276.3 1209.96 L1275.71 1209.96 L1275.13 1209.96 L1274.54 1209.96 L1273.95 1209.96 L1273.37 1209.96 L1272.78 1209.96 L1272.19 1209.96 L1271.61 1209.96 L1271.02 1209.96 L1270.44 1209.96 L1269.85 1209.96 L1269.26 1209.96 L1268.68 1209.96 L1268.09 1209.96 L1267.5 1209.96 L1266.92 1209.96 L1266.33 1209.96 L1265.74 1209.96 L1265.16 1209.96 L1264.57 1209.96 L1263.98 1209.96 L1263.4 1209.96 L1262.81 1209.96 L1262.23 1209.96 L1261.64 1209.96 L1261.05 1209.96 L1260.47 1209.96 L1259.88 1209.96 L1259.29 1209.96 L1258.71 1209.96 L1258.12 1209.96 L1257.53 1209.96 L1256.95 1209.96 L1256.36 1209.96 L1255.78 1209.96 L1255.19 1209.96 L1254.6 1209.96 L1254.02 1209.96 L1253.43 1209.96 L1252.84 1209.96 L1252.26 1209.96 L1251.67 1209.96 L1251.08 1209.96 L1250.5 1209.96 L1249.91 1209.96 L1249.32 1209.96 L1248.74 1209.96 L1248.15 1209.96 L1247.57 1209.96 L1246.98 1209.96 L1246.39 1209.96 L1245.81 1209.96 L1245.22 1209.96 L1244.63 1209.96 L1244.05 1209.96 L1243.46 1209.96 L1242.87 1209.96 L1242.29 1209.96 L1241.7 1209.96 L1241.11 1209.96 L1240.53 1209.96 L1239.94 1209.96 L1239.36 1209.96 L1238.77 1209.96 L1238.18 1209.96 L1237.6 1209.96 L1237.01 1209.96 L1236.42 1209.96 L1235.84 1209.96 L1235.25 1209.96 L1234.66 1209.96 L1234.08 1209.96 L1233.49 1209.96 L1232.91 1209.96 L1232.32 1209.96 L1231.73 1209.96 L1231.15 1209.96 L1230.56 1209.96 L1229.97 1209.96 L1229.39 1209.96 L1228.8 1209.96 L1228.21 1209.96 L1227.63 1209.96 L1227.04 1209.96 L1226.45 1209.96 L1225.87 1209.96 L1225.28 1209.96 L1224.7 1209.96 L1224.11 1209.96 L1223.52 1209.96 L1222.94 1209.96 L1222.35 1209.96 L1221.76 1209.96 L1221.18 1209.96 L1220.59 1209.96 L1220 1209.96 L1219.42 1209.96 L1218.83 1209.96 L1218.24 1209.96 L1217.66 1209.96 L1217.07 1209.96 L1216.49 1209.96 L1215.9 1209.96 L1215.31 1209.96 L1214.73 1209.96 L1214.14 1209.96 L1213.55 1209.96 L1212.97 1209.96 L1212.38 1209.96 L1211.79 1209.96 L1211.21 1209.96 L1210.62 1209.96 L1210.03 1209.96 L1209.45 1209.96 L1208.86 1209.96 L1208.28 1209.96 L1207.69 1209.96 L1207.1 1209.96 L1206.52 1209.96 L1205.93 1209.96 L1205.34 1209.96 L1204.76 1209.96 L1204.17 1209.96 L1203.58 1209.96 L1203 1209.96 L1202.41 1209.96 L1201.83 1209.96 L1201.24 1209.96 L1200.65 1209.96 L1200.07 1209.96 L1199.48 1209.96 L1198.89 1209.96 L1198.31 1209.96 L1197.72 1209.96 L1197.13 1209.96 L1196.55 1209.96 L1195.96 1209.96 L1195.37 1209.96 L1194.79 1209.96 L1194.2 1209.96 L1193.62 1209.96 L1193.03 1209.96 L1192.44 1209.96 L1191.86 1209.96 L1191.27 1209.96 L1190.68 1209.96 L1190.1 1209.96 L1189.51 1209.96 L1188.92 1209.96 L1188.34 1209.96 L1187.75 1209.96 L1187.16 1209.96 L1186.58 1209.96 L1185.99 1209.96 L1185.41 1209.96 L1184.82 1209.96 L1184.23 1209.96 L1183.65 1209.96 L1183.06 1209.96 L1182.47 1209.96 L1181.89 1209.96 L1181.3 1209.96 L1180.71 1209.96 L1180.13 1209.96 L1179.54 1209.96 L1178.96 1209.96 L1178.37 1209.96 L1177.78 1209.96 L1177.2 1209.96 L1176.61 1209.96 L1176.02 1209.96 L1175.44 1209.96 L1174.85 1209.96 L1174.26 1209.96 L1173.68 1209.96 L1173.09 1209.96 L1172.5 1209.96 L1171.92 1209.96 L1171.33 1209.96 L1170.75 1209.96 L1170.16 1209.96 L1169.57 1209.96 L1168.99 1209.96 L1168.4 1209.96 L1167.81 1209.96 L1167.23 1209.96 L1166.64 1209.96 L1166.05 1209.96 L1165.47 1209.96 L1164.88 1209.96 L1164.29 1209.96 L1163.71 1209.96 L1163.12 1209.96 L1162.54 1209.96 L1161.95 1209.96 L1161.36 1209.96 L1160.78 1209.96 L1160.19 1209.96 L1159.6 1209.96 L1159.02 1209.96 L1158.43 1209.96 L1157.84 1209.96 L1157.26 1209.96 L1156.67 1209.96 L1156.09 1209.96 L1155.5 1209.96 L1154.91 1209.96 L1154.33 1209.96 L1153.74 1209.96 L1153.15 1209.96 L1152.57 1209.96 L1151.98 1209.96 L1151.39 1209.96 L1150.81 1209.96 L1150.22 1209.96 L1149.63 1209.96 L1149.05 1209.96 L1148.46 1209.96 L1147.88 1209.96 L1147.29 1209.96 L1146.7 1209.96 L1146.12 1209.96 L1145.53 1209.96 L1144.94 1209.96 L1144.36 1209.96 L1143.77 1209.96 L1143.18 1209.96 L1142.6 1209.96 L1142.01 1209.96 L1141.42 1209.96 L1140.84 1209.96 L1140.25 1209.96 L1139.67 1209.96 L1139.08 1209.96 L1138.49 1209.96 L1137.91 1209.96 L1137.32 1209.96 L1136.73 1209.96 L1136.15 1209.96 L1135.56 1209.96 L1134.97 1209.96 L1134.39 1209.96 L1133.8 1209.96 L1133.21 1209.96 L1132.63 1209.96 L1132.04 1209.96 L1131.46 1209.96 L1130.87 1209.96 L1130.28 1209.96 L1129.7 1209.96 L1129.11 1209.96 L1128.52 1209.96 L1127.94 1209.96 L1127.35 1209.96 L1126.76 1209.96 L1126.18 1209.96 L1125.59 1209.96 L1125.01 1209.96 L1124.42 1209.96 L1123.83 1209.96 L1123.25 1209.96 L1122.66 1209.96 L1122.07 1209.96 L1121.49 1209.96 L1120.9 1209.96 L1120.31 1209.96 L1119.73 1209.96 L1119.14 1209.96 L1118.55 1209.96 L1117.97 1209.96 L1117.38 1209.96 L1116.8 1209.96 L1116.21 1209.96 L1115.62 1209.96 L1115.04 1209.96 L1114.45 1209.96 L1113.86 1209.96 L1113.28 1209.96 L1112.69 1209.96 L1112.1 1209.96 L1111.52 1209.96 L1110.93 1209.96 L1110.34 1209.96 L1109.76 1209.96 L1109.17 1209.96 L1108.59 1209.96 L1108 1209.96 L1107.41 1209.96 L1106.83 1209.96 L1106.24 1209.96 L1105.65 1209.96 L1105.07 1209.96 L1104.48 1209.96 L1103.89 1209.96 L1103.31 1209.96 L1102.72 1209.96 L1102.14 1209.96 L1101.55 1209.96 L1100.96 1209.96 L1100.38 1209.96 L1099.79 1209.96 L1099.2 1209.96 L1098.62 1209.96 L1098.03 1209.96 L1097.44 1209.96 L1096.86 1209.96 L1096.27 1209.96 L1095.68 1209.96 L1095.1 1209.96 L1094.51 1209.96 L1093.93 1209.96 L1093.34 1209.96 L1092.75 1209.96 L1092.17 1209.96 L1091.58 1209.96 L1090.99 1209.96 L1090.41 1209.96 L1089.82 1209.96 L1089.23 1209.96 L1088.65 1209.96 L1088.06 1209.96 L1087.47 1209.96 L1086.89 1209.96 L1086.3 1209.96 L1085.72 1209.96 L1085.13 1209.96 L1084.54 1209.96 L1083.96 1209.96 L1083.37 1209.96 L1082.78 1209.96 L1082.2 1209.96 L1081.61 1209.96 L1081.02 1209.96 L1080.44 1209.96 L1079.85 1209.96 L1079.26 1209.96 L1078.68 1209.96 L1078.09 1209.96 L1077.51 1209.96 L1076.92 1209.96 L1076.33 1209.96 L1075.75 1209.96 L1075.16 1209.96 L1074.57 1209.96 L1073.99 1209.96 L1073.4 1209.96 L1072.81 1209.96 L1072.23 1209.96 L1071.64 1209.96 L1071.06 1209.96 L1070.47 1209.96 L1069.88 1209.96 L1069.3 1209.96 L1068.71 1209.96 L1068.12 1209.96 L1067.54 1209.96 L1066.95 1209.96 L1066.36 1209.96 L1065.78 1209.96 L1065.19 1209.96 L1064.6 1209.96 L1064.02 1209.96 L1063.43 1209.96 L1062.85 1209.96 L1062.26 1209.96 L1061.67 1209.96 L1061.09 1209.96 L1060.5 1209.96 L1059.91 1209.96 L1059.33 1209.96 L1058.74 1209.96 L1058.15 1209.96 L1057.57 1209.96 L1056.98 1209.96 L1056.39 1209.96 L1055.81 1209.96 L1055.22 1209.96 L1054.64 1209.96 L1054.05 1209.96 L1053.46 1209.96 L1052.88 1209.96 L1052.29 1209.96 L1051.7 1209.96 L1051.12 1209.96 L1050.53 1209.96 L1049.94 1209.96 L1049.36 1209.96 L1048.77 1209.96 L1048.19 1209.96 L1047.6 1209.96 L1047.01 1209.96 L1046.43 1209.96 L1045.84 1209.96 L1045.25 1209.96 L1044.67 1209.96 L1044.08 1209.96 L1043.49 1209.96 L1042.91 1209.96 L1042.32 1209.96 L1041.73 1209.96 L1041.15 1209.96 L1040.56 1209.96 L1039.98 1209.96 L1039.39 1209.96 L1038.8 1209.96 L1038.22 1209.96 L1037.63 1209.96 L1037.04 1209.96 L1036.46 1209.96 L1035.87 1209.96 L1035.28 1209.96 L1034.7 1209.96 L1034.11 1209.96 L1033.52 1209.96 L1032.94 1209.96 L1032.35 1209.96 L1031.77 1209.96 L1031.18 1209.96 L1030.59 1209.96 L1030.01 1209.96 L1029.42 1209.96 L1028.83 1209.96 L1028.25 1209.96 L1027.66 1209.96 L1027.07 1209.96 L1026.49 1209.96 L1025.9 1209.96 L1025.32 1209.96 L1024.73 1209.96 L1024.14 1209.96 L1023.56 1209.96 L1022.97 1209.96 L1022.38 1209.96 L1021.8 1209.96 L1021.21 1209.96 L1020.62 1209.96 L1020.04 1209.96 L1019.45 1209.96 L1018.86 1209.96 L1018.28 1209.96 L1017.69 1209.96 L1017.11 1209.96 L1016.52 1209.96 L1015.93 1209.96 L1015.35 1209.96 L1014.76 1209.96 L1014.17 1209.96 L1013.59 1209.96 L1013 1209.96 L1012.41 1209.96 L1011.83 1209.96 L1011.24 1209.96 L1010.65 1209.96 L1010.07 1209.96 L1009.48 1209.96 L1008.9 1209.96 L1008.31 1209.96 L1007.72 1209.96 L1007.14 1209.96 L1006.55 1209.96 L1005.96 1209.96 L1005.38 1209.96 L1004.79 1209.96 L1004.2 1209.96 L1003.62 1209.96 L1003.03 1209.96 L1002.44 1209.96 L1001.86 1209.96 L1001.27 1209.96 L1000.69 1209.96 L1000.1 1209.96 L999.513 1209.96 L998.926 1209.96 L998.34 1209.96 L997.754 1209.96 L997.167 1209.96 L996.581 1209.96 L995.994 1209.96 L995.408 1209.96 L994.822 1209.96 L994.235 1209.96 L993.649 1209.96 L993.062 1209.96 L992.476 1209.96 L991.889 1209.96 L991.303 1209.96 L990.717 1209.96 L990.13 1209.96 L989.544 1209.96 L988.957 1209.96 L988.371 1209.96 L987.785 1209.96 L987.198 1209.96 L986.612 1209.96 L986.025 1209.96  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.04 986.612,1210.04 987.198,1210.04 987.785,1210.04 988.371,1210.04 988.957,1210.04 989.544,1210.04 990.13,1210.04 990.717,1210.04 991.303,1210.04 991.889,1210.04 992.476,1210.04 993.062,1210.04 993.649,1210.04 994.235,1210.04 994.822,1210.04 995.408,1210.04 995.994,1210.04 996.581,1210.04 997.167,1210.04 997.754,1210.04 998.34,1210.04 998.926,1210.04 999.513,1210.04 1000.1,1210.04 1000.69,1210.04 1001.27,1210.04 1001.86,1210.04 1002.44,1210.04 1003.03,1210.04 1003.62,1210.04 1004.2,1210.04 1004.79,1210.04 1005.38,1210.04 1005.96,1210.04 1006.55,1210.04 1007.14,1210.04 1007.72,1210.04 1008.31,1210.04 1008.9,1210.04 1009.48,1210.04 1010.07,1210.04 1010.65,1210.04 1011.24,1210.04 1011.83,1210.04 1012.41,1210.04 1013,1210.04 1013.59,1210.04 1014.17,1210.04 1014.76,1210.04 1015.35,1210.04 1015.93,1210.04 1016.52,1210.04 1017.11,1210.04 1017.69,1210.04 1018.28,1210.04 1018.86,1210.04 1019.45,1210.04 1020.04,1210.04 1020.62,1210.04 1021.21,1210.04 1021.8,1210.04 1022.38,1210.04 1022.97,1210.04 1023.56,1210.04 1024.14,1210.04 1024.73,1210.04 1025.32,1210.04 1025.9,1210.04 1026.49,1210.04 1027.07,1210.04 1027.66,1210.04 1028.25,1210.04 1028.83,1210.04 1029.42,1210.04 1030.01,1210.04 1030.59,1210.04 1031.18,1210.04 1031.77,1210.04 1032.35,1210.04 1032.94,1210.04 1033.52,1210.04 1034.11,1210.04 1034.7,1210.04 1035.28,1210.04 1035.87,1210.04 1036.46,1210.04 1037.04,1210.04 1037.63,1210.04 1038.22,1210.04 1038.8,1210.04 1039.39,1210.04 1039.98,1210.04 1040.56,1210.04 1041.15,1210.04 1041.73,1210.04 1042.32,1210.04 1042.91,1210.04 1043.49,1210.04 1044.08,1210.04 1044.67,1210.04 1045.25,1210.04 1045.84,1210.04 1046.43,1210.04 1047.01,1210.04 1047.6,1210.04 1048.19,1210.04 1048.77,1210.04 1049.36,1210.04 1049.94,1210.04 1050.53,1210.04 1051.12,1210.04 1051.7,1210.04 1052.29,1210.04 1052.88,1210.04 1053.46,1210.04 1054.05,1210.04 1054.64,1210.04 1055.22,1210.04 1055.81,1210.04 1056.39,1210.04 1056.98,1210.04 1057.57,1210.04 1058.15,1210.04 1058.74,1210.04 1059.33,1210.04 1059.91,1210.04 1060.5,1210.04 1061.09,1210.04 1061.67,1210.04 1062.26,1210.04 1062.85,1210.04 1063.43,1210.04 1064.02,1210.04 1064.6,1210.04 1065.19,1210.04 1065.78,1210.04 1066.36,1210.04 1066.95,1210.04 1067.54,1210.04 1068.12,1210.04 1068.71,1210.04 1069.3,1210.04 1069.88,1210.04 1070.47,1210.04 1071.06,1210.04 1071.64,1210.04 1072.23,1210.04 1072.81,1210.04 1073.4,1210.04 1073.99,1210.04 1074.57,1210.04 1075.16,1210.04 1075.75,1210.04 1076.33,1210.04 1076.92,1210.04 1077.51,1210.04 1078.09,1210.04 1078.68,1210.04 1079.26,1210.04 1079.85,1210.04 1080.44,1210.04 1081.02,1210.04 1081.61,1210.04 1082.2,1210.04 1082.78,1210.04 1083.37,1210.04 1083.96,1210.04 1084.54,1210.04 1085.13,1210.04 1085.72,1210.04 1086.3,1210.04 1086.89,1210.04 1087.47,1210.04 1088.06,1210.04 1088.65,1210.04 1089.23,1210.04 1089.82,1210.04 1090.41,1210.04 1090.99,1210.04 1091.58,1210.04 1092.17,1210.04 1092.75,1210.04 1093.34,1210.04 1093.93,1210.04 1094.51,1210.04 1095.1,1210.04 1095.68,1210.04 1096.27,1210.04 1096.86,1210.04 1097.44,1210.04 1098.03,1210.04 1098.62,1210.04 1099.2,1210.04 1099.79,1210.04 1100.38,1210.04 1100.96,1210.04 1101.55,1210.04 1102.14,1210.04 1102.72,1210.04 1103.31,1210.04 1103.89,1210.04 1104.48,1210.04 1105.07,1210.04 1105.65,1210.04 1106.24,1210.04 1106.83,1210.04 1107.41,1210.04 1108,1210.04 1108.59,1210.04 1109.17,1210.04 1109.76,1210.04 1110.34,1210.04 1110.93,1210.04 1111.52,1210.04 1112.1,1210.04 1112.69,1210.04 1113.28,1210.04 1113.86,1210.04 1114.45,1210.04 1115.04,1210.04 1115.62,1210.04 1116.21,1210.04 1116.8,1210.04 1117.38,1210.04 1117.97,1210.04 1118.55,1210.04 1119.14,1210.04 1119.73,1210.04 1120.31,1210.04 1120.9,1210.04 1121.49,1210.04 1122.07,1210.04 1122.66,1210.04 1123.25,1210.04 1123.83,1210.04 1124.42,1210.04 1125.01,1210.04 1125.59,1210.04 1126.18,1210.04 1126.76,1210.04 1127.35,1210.04 1127.94,1210.04 1128.52,1210.04 1129.11,1210.04 1129.7,1210.04 1130.28,1210.04 1130.87,1210.04 1131.46,1210.04 1132.04,1210.04 1132.63,1210.04 1133.21,1210.04 1133.8,1210.04 1134.39,1210.04 1134.97,1210.04 1135.56,1210.04 1136.15,1210.04 1136.73,1210.04 1137.32,1210.04 1137.91,1210.04 1138.49,1210.04 1139.08,1210.04 1139.67,1210.04 1140.25,1210.04 1140.84,1210.04 1141.42,1210.04 1142.01,1210.04 1142.6,1210.04 1143.18,1210.04 1143.77,1210.04 1144.36,1210.04 1144.94,1210.04 1145.53,1210.04 1146.12,1210.04 1146.7,1210.04 1147.29,1210.04 1147.88,1210.04 1148.46,1210.04 1149.05,1210.04 1149.63,1210.04 1150.22,1210.04 1150.81,1210.04 1151.39,1210.04 1151.98,1210.04 1152.57,1210.04 1153.15,1210.04 1153.74,1210.04 1154.33,1210.04 1154.91,1210.04 1155.5,1210.04 1156.09,1210.04 1156.67,1210.04 1157.26,1210.04 1157.84,1210.04 1158.43,1210.04 1159.02,1210.04 1159.6,1210.04 1160.19,1210.04 1160.78,1210.04 1161.36,1210.04 1161.95,1210.04 1162.54,1210.04 1163.12,1210.04 1163.71,1210.04 1164.29,1210.04 1164.88,1210.04 1165.47,1210.04 1166.05,1210.04 1166.64,1210.04 1167.23,1210.04 1167.81,1210.04 1168.4,1210.04 1168.99,1210.04 1169.57,1210.04 1170.16,1210.04 1170.75,1210.04 1171.33,1210.04 1171.92,1210.04 1172.5,1210.04 1173.09,1210.04 1173.68,1210.04 1174.26,1210.04 1174.85,1210.04 1175.44,1210.04 1176.02,1210.04 1176.61,1210.04 1177.2,1210.04 1177.78,1210.04 1178.37,1210.04 1178.96,1210.04 1179.54,1210.04 1180.13,1210.04 1180.71,1210.04 1181.3,1210.04 1181.89,1210.04 1182.47,1210.04 1183.06,1210.04 1183.65,1210.04 1184.23,1210.04 1184.82,1210.04 1185.41,1210.04 1185.99,1210.04 1186.58,1210.04 1187.16,1210.04 1187.75,1210.04 1188.34,1210.04 1188.92,1210.04 1189.51,1210.04 1190.1,1210.04 1190.68,1210.04 1191.27,1210.04 1191.86,1210.04 1192.44,1210.04 1193.03,1210.04 1193.62,1210.04 1194.2,1210.04 1194.79,1210.04 1195.37,1210.04 1195.96,1210.04 1196.55,1210.04 1197.13,1210.04 1197.72,1210.04 1198.31,1210.04 1198.89,1210.04 1199.48,1210.04 1200.07,1210.04 1200.65,1210.04 1201.24,1210.04 1201.83,1210.04 1202.41,1210.04 1203,1210.04 1203.58,1210.04 1204.17,1210.04 1204.76,1210.04 1205.34,1210.04 1205.93,1210.04 1206.52,1210.04 1207.1,1210.04 1207.69,1210.04 1208.28,1210.04 1208.86,1210.04 1209.45,1210.04 1210.03,1210.04 1210.62,1210.04 1211.21,1210.04 1211.79,1210.04 1212.38,1210.04 1212.97,1210.04 1213.55,1210.04 1214.14,1210.04 1214.73,1210.04 1215.31,1210.04 1215.9,1210.04 1216.49,1210.04 1217.07,1210.04 1217.66,1210.04 1218.24,1210.04 1218.83,1210.04 1219.42,1210.04 1220,1210.04 1220.59,1210.04 1221.18,1210.04 1221.76,1210.04 1222.35,1210.04 1222.94,1210.04 1223.52,1210.04 1224.11,1210.04 1224.7,1210.04 1225.28,1210.04 1225.87,1210.04 1226.45,1210.04 1227.04,1210.04 1227.63,1210.04 1228.21,1210.04 1228.8,1210.04 1229.39,1210.04 1229.97,1210.04 1230.56,1210.04 1231.15,1210.04 1231.73,1210.04 1232.32,1210.04 1232.91,1210.04 1233.49,1210.04 1234.08,1210.04 1234.66,1210.04 1235.25,1210.04 1235.84,1210.04 1236.42,1210.04 1237.01,1210.04 1237.6,1210.04 1238.18,1210.04 1238.77,1210.04 1239.36,1210.04 1239.94,1210.04 1240.53,1210.04 1241.11,1210.04 1241.7,1210.04 1242.29,1210.04 1242.87,1210.04 1243.46,1210.04 1244.05,1210.04 1244.63,1210.04 1245.22,1210.04 1245.81,1210.04 1246.39,1210.04 1246.98,1210.04 1247.57,1210.04 1248.15,1210.04 1248.74,1210.04 1249.32,1210.04 1249.91,1210.04 1250.5,1210.04 1251.08,1210.04 1251.67,1210.04 1252.26,1210.04 1252.84,1210.04 1253.43,1210.04 1254.02,1210.04 1254.6,1210.04 1255.19,1210.04 1255.78,1210.04 1256.36,1210.04 1256.95,1210.04 1257.53,1210.04 1258.12,1210.04 1258.71,1210.04 1259.29,1210.04 1259.88,1210.04 1260.47,1210.04 1261.05,1210.04 1261.64,1210.04 1262.23,1210.04 1262.81,1210.04 1263.4,1210.04 1263.98,1210.04 1264.57,1210.04 1265.16,1210.04 1265.74,1210.04 1266.33,1210.04 1266.92,1210.04 1267.5,1210.04 1268.09,1210.04 1268.68,1210.04 1269.26,1210.04 1269.85,1210.04 1270.44,1210.04 1271.02,1210.04 1271.61,1210.04 1272.19,1210.04 1272.78,1210.04 1273.37,1210.04 1273.95,1210.04 1274.54,1210.04 1275.13,1210.04 1275.71,1210.04 1276.3,1210.04 1276.89,1210.04 1277.47,1210.04 1278.06,1210.04 1278.65,1210.04 1279.23,1210.04 1279.82,1210.04 1280.4,1210.04 1280.99,1210.04 1281.58,1210.04 1282.16,1210.04 1282.75,1210.04 1283.34,1210.04 1283.92,1210.04 1284.51,1210.04 1285.1,1210.04 1285.68,1210.04 1286.27,1210.04 1286.86,1210.04 1287.44,1210.04 1288.03,1210.04 1288.61,1210.04 1289.2,1210.04 1289.79,1210.04 1290.37,1210.04 1290.96,1210.04 1291.55,1210.04 1292.13,1210.04 1292.72,1210.04 1293.31,1210.04 1293.89,1210.04 1294.48,1210.04 1295.06,1210.04 1295.65,1210.04 1296.24,1210.04 1296.82,1210.04 1297.41,1210.04 1298,1210.04 1298.58,1210.04 1299.17,1210.04 1299.76,1210.04 1300.34,1210.04 1300.93,1210.04 1301.52,1210.04 1302.1,1210.04 1302.69,1210.04 1303.27,1210.04 1303.86,1210.04 1304.45,1210.04 1305.03,1210.04 1305.62,1210.04 1306.21,1210.04 1306.79,1210.04 1307.38,1210.04 1307.97,1210.04 1308.55,1210.04 1309.14,1210.04 1309.73,1210.04 1310.31,1210.04 1310.9,1210.04 1311.48,1210.04 1312.07,1210.04 1312.66,1210.04 1313.24,1210.04 1313.83,1210.04 1314.42,1210.04 1315,1210.04 1315.59,1210.04 1316.18,1210.04 1316.76,1210.04 1317.35,1210.04 1317.93,1210.04 1318.52,1210.04 1319.11,1210.04 1319.69,1210.04 1320.28,1210.04 1320.87,1210.04 1321.45,1210.04 1322.04,1210.04 1322.63,1210.04 1323.21,1210.04 1323.8,1210.04 1324.39,1210.04 1324.97,1210.04 1325.56,1210.04 1326.14,1210.04 1326.73,1210.04 1327.32,1210.04 1327.9,1210.04 1328.49,1210.04 1329.08,1210.04 1329.66,1210.04 1330.25,1210.04 1330.84,1210.04 1331.42,1210.04 1332.01,1210.04 1332.6,1210.04 1333.18,1210.04 1333.77,1210.04 1334.35,1210.04 1334.94,1210.04 1335.53,1210.04 1336.11,1210.04 1336.7,1210.04 1337.29,1210.04 1337.87,1210.04 1338.46,1210.04 1339.05,1210.04 1339.63,1210.04 1340.22,1210.04 1340.8,1210.04 1341.39,1210.04 1341.98,1210.04 1342.56,1210.04 1343.15,1210.04 1343.74,1210.04 1344.32,1210.04 1344.91,1210.04 1345.5,1210.04 1346.08,1210.04 1346.67,1210.04 1347.26,1210.04 1347.84,1210.04 1348.43,1210.04 1349.01,1210.04 1349.6,1210.04 1350.19,1210.04 1350.77,1210.04 1351.36,1210.04 1351.95,1210.04 1352.53,1210.04 1353.12,1210.04 1353.71,1210.04 1354.29,1210.04 1354.88,1210.04 1355.47,1210.04 1356.05,1210.04 1356.64,1210.04 1357.22,1210.04 1357.81,1210.04 1358.4,1210.04 1358.98,1210.04 1359.57,1210.04 1360.16,1210.04 1360.74,1210.04 1361.33,1210.04 1361.92,1210.04 1362.5,1210.04 1363.09,1210.04 1363.68,1210.04 1364.26,1210.04 1364.85,1210.04 1365.43,1210.04 1366.02,1210.04 1366.61,1210.04 1367.19,1210.04 1367.78,1210.04 1368.37,1210.04 1368.95,1210.04 1369.54,1210.04 1370.13,1210.04 1370.71,1210.04 1371.3,1210.04 1371.88,1210.04 1372.47,1210.04 1373.06,1210.04 1373.64,1210.04 1374.23,1210.04 1374.82,1210.04 1375.4,1210.04 1375.99,1210.04 1376.58,1210.04 1377.16,1210.04 1377.75,1210.04 1378.34,1210.04 1378.92,1210.04 1379.51,1210.04 1380.09,1210.04 1380.68,1210.04 1381.27,1210.04 1381.85,1210.04 1382.44,1210.04 1383.03,1210.04 1383.61,1210.04 1384.2,1210.04 1384.79,1210.04 1385.37,1210.04 1385.96,1210.04 1386.55,1210.04 1387.13,1210.04 1387.72,1210.04 1388.3,1210.04 1388.89,1210.04 1389.48,1210.04 1390.06,1210.04 1390.65,1210.04 1391.24,1210.04 1391.82,1210.04 1392.41,1210.04 1393,1210.04 1393.58,1210.04 1394.17,1210.04 1394.75,1210.04 1395.34,1210.04 1395.93,1210.04 1396.51,1210.04 1397.1,1210.04 1397.69,1210.04 1398.27,1210.04 1398.86,1210.04 1399.45,1210.04 1400.03,1210.04 1400.62,1210.04 1401.21,1210.04 1401.79,1210.04 1402.38,1210.04 1402.96,1210.04 1403.55,1210.04 1404.14,1210.04 1404.72,1210.04 1405.31,1210.04 1405.9,1210.04 1406.48,1210.04 1407.07,1210.04 1407.66,1210.04 1408.24,1210.04 1408.83,1210.04 1409.42,1210.04 1410,1210.04 1410.59,1210.04 1411.17,1210.04 1411.76,1210.04 1412.35,1210.04 1412.93,1210.04 1413.52,1210.04 1414.11,1210.04 1414.69,1210.04 1415.28,1210.04 1415.87,1210.04 1416.45,1210.04 1417.04,1210.04 1417.63,1210.04 1418.21,1210.04 1418.8,1210.04 1419.38,1210.04 1419.97,1210.04 1420.56,1210.04 1421.14,1210.04 1421.73,1210.04 1422.32,1210.04 1422.9,1210.04 1423.49,1210.04 1424.08,1210.04 1424.66,1210.04 1425.25,1210.04 1425.83,1210.04 1426.42,1210.04 1427.01,1210.04 1427.59,1210.04 1428.18,1210.04 1428.77,1210.04 1429.35,1210.04 1429.94,1210.04 1430.53,1210.04 1431.11,1210.04 1431.7,1210.04 1432.29,1210.04 1432.87,1210.04 1433.46,1210.04 1434.04,1210.04 1434.63,1210.04 1435.22,1210.04 1435.8,1210.04 1436.39,1210.04 1436.98,1210.04 1437.56,1210.04 1438.15,1210.04 1438.74,1210.04 1439.32,1210.04 1439.91,1210.04 1440.5,1210.04 1441.08,1210.04 1441.67,1210.04 1442.25,1210.04 1442.84,1210.04 1443.43,1210.04 1444.01,1210.04 1444.6,1210.04 1445.19,1210.04 1445.77,1210.04 1446.36,1210.04 1446.95,1210.04 1447.53,1210.04 1448.12,1210.04 1448.7,1210.04 1449.29,1210.04 1449.88,1210.04 1450.46,1210.04 1451.05,1210.04 1451.64,1210.04 1452.22,1210.04 1452.81,1210.04 1453.4,1210.04 1453.98,1210.04 1454.57,1210.04 1455.16,1210.04 1455.74,1210.04 1456.33,1210.04 1456.91,1210.04 1457.5,1210.04 1458.09,1210.04 1458.67,1210.04 1459.26,1210.04 1459.85,1210.04 1460.43,1210.04 1461.02,1210.04 1461.61,1210.04 1462.19,1210.04 1462.78,1210.04 1463.37,1210.04 1463.95,1210.04 1464.54,1210.04 1465.12,1210.04 1465.71,1210.04 1466.3,1210.04 1466.88,1210.04 1467.47,1210.04 1468.06,1210.04 1468.64,1210.04 1469.23,1210.04 1469.82,1210.04 1470.4,1210.04 1470.99,1210.04 1471.57,1210.04 1472.16,1210.04 1472.75,1210.04 1473.33,1210.04 1473.92,1210.04 1474.51,1210.04 1475.09,1210.04 1475.68,1210.04 1476.27,1210.04 1476.85,1210.04 1477.44,1210.04 1478.03,1210.04 1478.61,1210.04 1479.2,1210.04 1479.78,1210.04 1480.37,1210.04 1480.96,1210.04 1481.54,1210.04 1482.13,1210.04 1482.72,1210.04 1483.3,1210.04 1483.89,1210.04 1484.48,1210.04 1485.06,1210.04 1485.65,1210.04 1486.24,1210.04 1486.82,1210.04 1487.41,1210.04 1487.99,1210.04 1488.58,1210.04 1489.17,1210.04 1489.75,1210.04 1490.34,1210.04 1490.93,1210.04 1491.51,1210.04 1492.1,1210.04 1492.69,1210.04 1493.27,1210.04 1493.86,1210.04 1494.45,1210.04 1495.03,1210.04 1495.62,1210.04 1496.2,1210.04 1496.79,1210.04 1497.38,1210.04 1497.96,1210.04 1498.55,1210.04 1499.14,1210.04 1499.72,1210.04 1500.31,1210.04 1500.9,1210.04 1501.48,1210.04 1502.07,1210.04 1502.65,1210.04 1503.24,1210.04 1503.83,1210.04 1504.41,1210.04 1505,1210.04 1505.59,1210.04 1506.17,1210.04 1506.76,1210.04 1507.35,1210.04 1507.93,1210.04 1508.52,1210.04 1509.11,1210.04 1509.69,1210.04 1510.28,1210.04 1510.86,1210.04 1511.45,1210.04 1512.04,1210.04 1512.62,1210.04 1513.21,1210.04 1513.8,1210.04 1514.38,1210.04 1514.97,1210.04 1515.56,1210.04 1516.14,1210.04 1516.73,1210.04 1517.32,1210.04 1517.9,1210.04 1518.49,1210.04 1519.07,1210.04 1519.66,1210.04 1520.25,1210.04 1520.83,1210.04 1521.42,1210.04 1522.01,1210.04 1522.59,1210.04 1523.18,1210.04 1523.77,1210.04 1524.35,1210.04 1524.94,1210.04 1525.52,1210.04 1526.11,1210.04 1526.7,1210.04 1527.28,1210.04 1527.87,1210.04 1528.46,1210.04 1529.04,1210.04 1529.63,1210.04 1530.22,1210.04 1530.8,1210.04 1531.39,1210.04 1531.98,1210.04 1532.56,1210.04 1533.15,1210.04 1533.73,1210.04 1534.32,1210.04 1534.91,1210.04 1535.49,1210.04 1536.08,1210.04 1536.67,1210.04 1537.25,1210.04 1537.84,1210.04 1538.43,1210.04 1539.01,1210.04 1539.6,1210.04 1540.19,1210.04 1540.77,1210.04 1541.36,1210.04 1541.94,1210.04 1542.53,1210.04 1543.12,1210.04 1543.7,1210.04 1544.29,1210.04 1544.88,1210.04 1545.46,1210.04 1546.05,1210.04 1546.64,1210.04 1547.22,1210.04 1547.81,1210.04 1548.4,1210.04 1548.98,1210.04 1549.57,1210.04 1550.15,1210.04 1550.74,1210.04 1551.33,1210.04 1551.91,1210.04 1552.5,1210.04 1553.09,1210.04 1553.67,1210.04 1554.26,1210.04 1554.85,1210.04 1555.43,1210.04 1556.02,1210.04 1556.6,1210.04 1557.19,1210.04 1557.78,1210.04 1558.36,1210.04 1558.95,1210.04 1559.54,1210.04 1560.12,1210.04 1560.71,1210.04 1561.3,1210.04 1561.88,1210.04 1562.47,1210.04 1563.06,1210.04 1563.64,1210.04 1564.23,1210.04 1564.81,1210.04 1565.4,1210.04 1565.99,1210.04 1566.57,1210.04 1567.16,1210.04 1567.75,1210.04 1568.33,1210.04 1568.92,1210.04 1569.51,1210.04 1570.09,1210.04 1570.68,1210.04 1571.27,1210.04 1571.85,1210.04 1572.44,1210.04 1573.02,1210.04 1573.61,1210.04 1574.2,1210.04 1574.78,1210.04 1575.37,1210.04 1575.96,1210.04 1576.54,1210.04 1577.13,1210.04 1577.72,1210.04 1578.3,1210.04 1578.89,1210.04 1579.47,1210.04 1580.06,1210.04 1580.65,1210.04 1581.23,1210.04 1581.82,1210.04 1582.41,1210.04 1582.99,1210.04 1583.58,1210.04 1584.17,1210.04 1584.75,1210.04 1585.34,1210.04 1585.93,1210.04 1586.51,1210.04 1587.1,1210.04 1587.68,1210.04 1588.27,1210.04 1588.86,1210.04 1589.44,1210.04 1590.03,1210.04 1590.62,1210.04 1591.2,1210.04 1591.79,1210.04 1592.38,1210.04 1592.96,1210.04 1593.55,1210.04 1594.14,1210.04 1594.72,1210.04 1595.31,1210.04 1595.89,1210.04 1596.48,1210.04 1597.07,1210.04 1597.65,1210.04 1598.24,1210.04 1598.83,1210.04 1599.41,1210.04 1600,1210.04 1600.59,1210.04 1601.17,1210.04 1601.76,1210.04 1602.34,1210.04 1602.93,1210.04 1603.52,1210.04 1604.1,1210.04 1604.69,1210.04 1605.28,1210.04 1605.86,1210.04 1606.45,1210.04 1607.04,1210.04 1607.62,1210.04 1608.21,1210.04 1608.8,1210.04 1609.38,1210.04 1609.97,1210.04 1610.55,1210.04 1611.14,1210.04 1611.73,1210.04 1612.31,1210.04 1612.9,1210.04 1613.49,1210.04 1614.07,1210.04 1614.66,1210.04 1615.25,1210.04 1615.83,1210.04 1616.42,1210.04 1617.01,1210.04 1617.59,1210.04 1618.18,1210.04 1618.76,1210.04 1619.35,1210.04 1619.94,1210.04 1620.52,1210.04 1621.11,1210.04 1621.7,1210.04 1622.28,1210.04 1622.87,1210.04 1623.46,1210.04 1624.04,1210.04 1624.63,1210.04 1625.22,1210.04 1625.8,1210.04 1626.39,1210.04 1626.97,1210.04 1627.56,1210.04 1628.15,1210.04 1628.73,1210.04 1629.32,1210.04 1629.91,1210.04 1630.49,1210.04 1631.08,1210.04 1631.67,1210.04 1632.25,1210.04 1632.84,1210.04 1633.42,1210.04 1634.01,1210.04 1634.6,1210.04 1635.18,1210.04 1635.77,1210.04 1636.36,1210.04 1636.94,1210.04 1637.53,1210.04 1638.12,1210.04 1638.7,1210.04 1639.29,1210.04 1639.88,1210.04 1640.46,1210.04 1641.05,1210.04 1641.63,1210.04 1642.22,1210.04 1642.81,1210.04 1643.39,1210.04 1643.98,1210.04 1644.57,1210.04 1645.15,1210.04 1645.74,1210.04 1646.33,1210.04 1646.91,1210.04 1647.5,1210.04 1648.09,1210.04 1648.67,1210.04 1649.26,1210.04 1649.84,1210.04 1650.43,1210.04 1651.02,1210.04 1651.6,1210.04 1652.19,1210.04 1652.78,1210.04 1653.36,1210.04 1653.95,1210.04 1654.54,1210.04 1655.12,1210.04 1655.71,1210.04 1656.29,1210.04 1656.88,1210.04 1657.47,1210.04 1658.05,1210.04 1658.64,1210.04 1659.23,1210.04 1659.81,1210.04 1660.4,1210.04 1660.99,1210.04 1661.57,1210.04 1662.16,1210.04 1662.75,1210.04 1663.33,1210.04 1663.92,1210.04 1664.5,1210.04 1665.09,1210.04 1665.68,1210.04 1666.26,1210.04 1666.85,1210.04 1667.44,1210.04 1668.02,1210.04 1668.61,1210.04 1669.2,1210.04 1669.78,1210.04 1670.37,1210.04 1670.96,1210.04 1671.54,1210.04 1672.13,1210.04 1672.71,1210.04 1673.3,1210.04 1673.89,1210.04 1674.47,1210.04 1675.06,1210.04 1675.65,1210.04 1676.23,1210.04 1676.82,1210.04 1677.41,1210.04 1677.99,1210.04 1678.58,1210.04 1679.17,1210.04 1679.75,1210.04 1680.34,1210.04 1680.92,1210.04 1681.51,1210.04 1682.1,1210.04 1682.68,1210.04 1683.27,1210.04 1683.86,1210.04 1684.44,1210.04 1685.03,1210.04 1685.62,1210.04 1686.2,1210.04 1686.79,1210.04 1687.37,1210.04 1687.96,1210.04 1688.55,1210.04 1689.13,1210.04 1689.72,1210.04 1690.31,1210.04 1690.89,1210.04 1691.48,1210.04 1692.07,1210.04 1692.65,1210.04 1693.24,1210.04 1693.83,1210.04 1694.41,1210.04 1695,1210.04 1695.58,1210.04 1696.17,1210.04 1696.76,1210.04 1697.34,1210.04 1697.93,1210.04 1698.52,1210.04 1699.1,1210.04 1699.69,1210.04 1700.28,1210.04 1700.86,1210.04 1701.45,1210.04 1702.04,1210.04 1702.62,1210.04 1703.21,1210.04 1703.79,1210.04 1704.38,1210.04 1704.97,1210.04 1705.55,1210.04 1706.14,1210.04 1706.73,1210.04 1707.31,1210.04 1707.9,1210.04 1708.49,1210.04 1709.07,1210.04 1709.66,1210.04 1710.24,1210.04 1710.83,1210.04 1711.42,1210.04 1712,1210.04 1712.59,1210.04 1713.18,1210.04 1713.76,1210.04 1714.35,1210.04 1714.94,1210.04 1715.52,1210.04 1716.11,1210.04 1716.7,1210.04 1717.28,1210.04 1717.87,1210.04 1718.45,1210.04 1719.04,1210.04 1719.63,1210.04 1720.21,1210.04 1720.8,1210.04 1721.39,1210.04 1721.97,1210.04 1722.56,1210.04 1723.15,1210.04 1723.73,1210.04 1724.32,1210.04 1724.91,1210.04 1725.49,1210.04 1726.08,1210.04 1726.66,1210.04 1727.25,1210.04 1727.84,1210.04 1728.42,1210.04 1729.01,1210.04 1729.6,1210.04 1730.18,1210.04 1730.77,1210.04 1731.36,1210.04 1731.94,1210.04 1732.53,1210.04 1733.11,1210.04 1733.7,1210.04 1734.29,1210.04 1734.87,1210.04 1735.46,1210.04 1736.05,1210.04 1736.63,1210.04 1737.22,1210.04 1737.81,1210.04 1738.39,1210.04 1738.98,1210.04 1739.57,1210.04 1740.15,1210.04 1740.74,1210.04 1741.32,1210.04 1741.91,1210.04 1742.5,1210.04 1743.08,1210.04 1743.67,1210.04 1744.26,1210.04 1744.84,1210.04 1745.43,1210.04 1746.02,1210.04 1746.6,1210.04 1747.19,1210.04 1747.78,1210.04 1748.36,1210.04 1748.95,1210.04 1749.53,1210.04 1750.12,1210.04 1750.71,1210.04 1751.29,1210.04 1751.88,1210.04 1752.47,1210.04 1753.05,1210.04 1753.64,1210.04 1754.23,1210.04 1754.81,1210.04 1755.4,1210.04 1755.99,1210.04 1756.57,1210.04 1757.16,1210.04 1757.74,1210.04 1758.33,1210.04 1758.92,1210.04 1759.5,1210.04 1760.09,1210.04 1760.68,1210.04 1761.26,1210.04 1761.85,1210.04 1762.44,1210.04 1763.02,1210.04 1763.61,1210.04 1764.19,1210.04 1764.78,1210.04 1765.37,1210.04 1765.95,1210.04 1766.54,1210.04 1767.13,1210.04 1767.71,1210.04 1768.3,1210.04 1768.89,1210.04 1769.47,1210.04 1770.06,1210.04 1770.65,1210.04 1771.23,1210.04 1771.82,1210.04 1772.4,1210.04 1772.99,1210.04 1773.58,1210.04 1774.16,1210.04 1774.75,1210.04 1775.34,1210.04 1775.92,1210.04 1776.51,1210.04 1777.1,1210.04 1777.68,1210.04 1778.27,1210.04 1778.86,1210.04 1779.44,1210.04 1780.03,1210.04 1780.61,1210.04 1781.2,1210.04 1781.79,1210.04 1782.37,1210.04 1782.96,1210.04 1783.55,1210.04 1784.13,1210.04 1784.72,1210.04 1785.31,1210.04 1785.89,1210.04 1786.48,1210.04 1787.06,1210.04 1787.65,1210.04 1788.24,1210.04 1788.82,1210.04 1789.41,1210.04 1790,1210.04 1790.58,1210.04 1791.17,1210.04 1791.76,1210.04 1792.34,1210.04 1792.93,1210.04 1793.52,1210.04 1794.1,1210.04 1794.69,1210.04 1795.27,1210.04 1795.86,1210.04 1796.45,1210.04 1797.03,1210.04 1797.62,1210.04 1798.21,1210.04 1798.79,1210.04 1799.38,1210.04 1799.97,1210.04 1800.55,1210.04 1801.14,1210.04 1801.73,1210.04 1802.31,1210.04 1802.9,1210.04 1803.48,1210.04 1804.07,1210.04 1804.66,1210.04 1805.24,1210.04 1805.83,1210.04 1806.42,1210.04 1807,1210.04 1807.59,1210.04 1808.18,1210.04 1808.76,1210.04 1809.35,1210.04 1809.94,1210.04 1810.52,1210.04 1811.11,1210.04 1811.69,1210.04 1812.28,1210.04 1812.87,1210.04 1813.45,1210.04 1814.04,1210.04 1814.63,1210.04 1815.21,1210.04 1815.8,1210.04 1816.39,1210.04 1816.97,1210.04 1817.56,1210.04 1818.14,1210.04 1818.73,1210.04 1819.32,1210.04 1819.9,1210.04 1820.49,1210.04 1821.08,1210.04 1821.66,1210.04 1822.25,1210.04 1822.84,1210.04 1823.42,1210.04 1824.01,1210.04 1824.6,1210.04 1825.18,1210.04 1825.77,1210.04 1826.35,1210.04 1826.94,1210.04 1827.53,1210.04 1828.11,1210.04 1828.7,1210.04 1829.29,1210.04 1829.87,1210.04 1830.46,1210.04 1831.05,1210.04 1831.63,1210.04 1832.22,1210.04 1832.81,1210.04 1833.39,1210.04 1833.98,1210.04 1834.56,1210.04 1835.15,1210.04 1835.74,1210.04 1836.32,1210.04 1836.91,1210.04 1837.5,1210.04 1838.08,1210.04 1838.67,1210.04 1839.26,1210.04 1839.84,1210.04 1840.43,1210.04 1841.01,1210.04 1841.6,1210.04 1842.19,1210.04 1842.77,1210.04 1843.36,1210.04 1843.95,1210.04 1844.53,1210.04 1845.12,1210.04 1845.71,1210.04 1846.29,1210.04 1846.88,1210.04 1847.47,1210.04 1848.05,1210.04 1848.64,1210.04 1849.22,1210.04 1849.81,1210.04 1850.4,1210.04 1850.98,1210.04 1851.57,1210.04 1852.16,1210.04 1852.74,1210.04 1853.33,1210.04 1853.92,1210.04 1854.5,1210.04 1855.09,1210.04 1855.68,1210.04 1856.26,1210.04 1856.85,1210.04 1857.43,1210.04 1858.02,1210.04 1858.61,1210.04 1859.19,1210.04 1859.78,1210.04 1860.37,1210.04 1860.95,1210.04 1861.54,1210.04 1862.13,1210.04 1862.71,1210.04 1863.3,1210.04 1863.88,1210.04 1864.47,1210.04 1865.06,1210.04 1865.64,1210.04 1866.23,1210.04 1866.82,1210.04 1867.4,1210.04 1867.99,1210.04 1868.58,1210.04 1869.16,1210.04 1869.75,1210.04 1870.34,1210.04 1870.92,1210.04 1871.51,1210.04 1872.09,1210.04 1872.68,1210.04 1873.27,1210.04 1873.85,1210.04 1874.44,1210.04 1875.03,1210.04 1875.61,1210.04 1876.2,1210.04 1876.79,1210.04 1877.37,1210.04 1877.96,1210.04 1878.55,1210.04 1879.13,1210.04 1879.72,1210.04 1880.3,1210.04 1880.89,1210.04 1881.48,1210.04 1882.06,1210.04 1882.65,1210.04 1883.24,1210.04 1883.82,1210.04 1884.41,1210.04 1885,1210.04 1885.58,1210.04 1886.17,1210.04 1886.76,1210.04 1887.34,1210.04 1887.93,1210.04 1888.51,1210.04 1889.1,1210.04 1889.69,1210.04 1890.27,1210.04 1890.86,1210.04 1891.45,1210.04 1892.03,1210.04 1892.62,1210.04 1893.21,1210.04 1893.79,1210.04 1894.38,1210.04 1894.96,1210.04 1895.55,1210.04 1896.14,1210.04 1896.72,1210.04 1897.31,1210.04 1897.9,1210.04 1898.48,1210.04 1899.07,1210.04 1899.66,1210.04 1900.24,1210.04 1900.83,1210.04 1901.42,1210.04 1902,1210.04 1902.59,1210.04 1903.17,1210.04 1903.76,1210.04 1904.35,1210.04 1904.93,1210.04 1905.52,1210.04 1906.11,1210.04 1906.69,1210.04 1907.28,1210.04 1907.87,1210.04 1908.45,1210.04 1909.04,1210.04 1909.63,1210.04 1910.21,1210.04 1910.8,1210.04 1911.38,1210.04 1911.97,1210.04 1912.56,1210.04 1913.14,1210.04 1913.73,1210.04 1914.32,1210.04 1914.9,1210.04 1915.49,1210.04 1916.08,1210.04 1916.66,1210.04 1917.25,1210.04 1917.83,1210.04 1918.42,1210.04 1919.01,1210.04 1919.59,1210.04 1920.18,1210.04 1920.77,1210.04 1921.35,1210.04 1921.94,1210.04 1922.53,1210.04 1923.11,1210.04 1923.7,1210.04 1924.29,1210.04 1924.87,1210.04 1925.46,1210.04 1926.04,1210.04 1926.63,1210.04 1927.22,1210.04 1927.8,1210.04 1928.39,1210.04 1928.98,1210.04 1929.56,1210.04 1930.15,1210.04 1930.74,1210.04 1931.32,1210.04 1931.91,1210.04 1932.5,1210.04 1933.08,1210.04 1933.67,1210.04 1934.25,1210.04 1934.84,1210.04 1935.43,1210.04 1936.01,1210.04 1936.6,1210.04 1937.19,1210.04 1937.77,1210.04 1938.36,1210.04 1938.95,1210.04 1939.53,1210.04 1940.12,1210.04 1940.71,1210.04 1941.29,1210.04 1941.88,1210.04 1942.46,1210.04 1943.05,1210.04 1943.64,1210.04 1944.22,1210.04 1944.81,1210.04 1945.4,1210.04 1945.98,1210.04 1946.57,1210.04 1947.16,1210.04 1947.74,1210.04 1948.33,1210.04 1948.91,1210.04 1949.5,1210.04 1950.09,1210.04 1950.67,1210.04 1951.26,1210.04 1951.85,1210.04 1952.43,1210.04 1953.02,1210.04 1953.61,1210.04 1954.19,1210.04 1954.78,1210.04 1955.37,1210.04 1955.95,1210.04 1956.54,1210.04 1957.12,1210.04 1957.71,1210.04 1958.3,1210.04 1958.88,1210.04 1959.47,1210.04 1960.06,1210.04 1960.64,1210.04 1961.23,1210.04 1961.82,1210.04 1962.4,1210.04 1962.99,1210.04 1963.58,1210.04 1964.16,1210.04 1964.75,1210.04 1965.33,1210.04 1965.92,1210.04 1966.51,1210.04 1967.09,1210.04 1967.68,1210.04 1968.27,1210.04 1968.85,1210.04 1969.44,1210.04 1970.03,1210.04 1970.61,1210.04 1971.2,1210.04 1971.78,1210.04 1972.37,1210.04 1972.96,1210.04 1973.54,1210.04 1974.13,1210.04 1974.72,1210.04 1975.3,1210.04 1975.89,1210.04 1976.48,1210.04 1977.06,1210.04 1977.65,1210.04 1978.24,1210.04 1978.82,1210.04 1979.41,1210.04 1979.99,1210.04 1980.58,1210.04 1981.17,1210.04 1981.75,1210.04 1982.34,1210.04 1982.93,1210.04 1983.51,1210.04 1984.1,1210.04 1984.69,1210.04 1985.27,1210.04 1985.86,1210.04 1986.45,1210.04 1987.03,1210.04 1987.62,1210.04 1988.2,1210.04 1988.79,1210.04 1989.38,1210.04 1989.96,1210.04 1990.55,1210.04 1991.14,1210.04 1991.72,1210.04 1992.31,1210.04 1992.9,1210.04 1993.48,1210.04 1994.07,1210.04 1994.65,1210.04 1995.24,1210.04 1995.83,1210.04 1996.41,1210.04 1997,1210.04 1997.59,1210.04 1998.17,1210.04 1998.76,1210.04 1999.35,1210.04 1999.93,1210.04 2000.52,1210.04 2001.11,1210.04 2001.69,1210.04 2002.28,1210.04 2002.86,1210.04 2003.45,1210.04 2004.04,1210.04 2004.62,1210.04 2005.21,1210.04 2005.8,1210.04 2006.38,1210.04 2006.97,1210.04 2007.56,1210.04 2008.14,1210.04 2008.73,1210.04 2009.32,1210.04 2009.9,1210.04 2010.49,1210.04 2011.07,1210.04 2011.66,1210.04 2012.25,1210.04 2012.83,1210.04 2013.42,1210.04 2014.01,1210.04 2014.59,1210.04 2015.18,1210.04 2015.77,1210.04 2016.35,1210.04 2016.94,1210.04 2017.53,1210.04 2018.11,1210.04 2018.7,1210.04 2019.28,1210.04 2019.87,1210.04 2020.46,1210.04 2021.04,1210.04 2021.63,1210.04 2022.22,1210.04 2022.8,1210.04 2023.39,1210.04 2023.98,1210.04 2024.56,1210.04 2025.15,1210.04 2025.73,1210.04 2026.32,1210.04 2026.91,1210.04 2027.49,1210.04 2028.08,1210.04 2028.67,1210.04 2029.25,1210.04 2029.84,1210.04 2030.43,1210.04 2031.01,1210.04 2031.6,1210.04 2032.19,1210.04 2032.77,1210.04 2033.36,1210.04 2033.94,1210.04 2034.53,1210.04 2035.12,1210.04 2035.7,1210.04 2036.29,1210.04 2036.88,1210.04 2037.46,1210.04 2038.05,1210.04 2038.64,1210.04 2039.22,1210.04 2039.81,1210.04 2040.4,1210.04 2040.98,1210.04 2041.57,1210.04 2042.15,1210.04 2042.74,1210.04 2043.33,1210.04 2043.91,1210.04 2044.5,1210.04 2045.09,1210.04 2045.67,1210.04 2046.26,1210.04 2046.85,1210.04 2047.43,1210.04 2048.02,1210.04 2048.6,1210.04 2049.19,1210.04 2049.78,1210.04 2050.36,1210.04 2050.95,1210.04 2051.54,1210.04 2052.12,1210.04 2052.71,1210.04 2053.3,1210.04 2053.88,1210.04 2054.47,1210.04 2055.06,1210.04 2055.64,1210.04 2056.23,1210.04 2056.81,1210.04 2057.4,1210.04 2057.99,1210.04 2058.57,1210.04 2059.16,1210.04 2059.75,1210.04 2060.33,1210.04 2060.92,1210.04 2061.51,1210.04 2062.09,1210.04 2062.68,1210.04 2063.27,1210.04 2063.85,1210.04 2064.44,1210.04 2065.02,1210.04 2065.61,1210.04 2066.2,1210.04 2066.78,1210.04 2067.37,1210.04 2067.96,1210.04 2068.54,1210.04 2069.13,1210.04 2069.72,1210.04 2070.3,1210.04 2070.89,1210.04 2071.48,1210.04 2072.06,1210.04 2072.65,1210.04 2073.23,1210.04 2073.82,1210.04 2074.41,1210.04 2074.99,1210.04 2075.58,1210.04 2076.17,1210.04 2076.75,1210.04 2077.34,1210.04 2077.93,1210.04 2078.51,1210.04 2079.1,1210.04 2079.68,1210.04 2080.27,1210.04 2080.86,1210.04 2081.44,1210.04 2082.03,1210.04 2082.62,1210.04 2083.2,1210.04 2083.79,1210.04 2084.38,1210.04 2084.96,1210.04 2085.55,1210.04 2086.14,1210.04 2086.72,1210.04 2087.31,1210.04 2087.89,1210.04 2088.48,1210.04 2089.07,1210.04 2089.65,1210.04 2090.24,1210.04 2090.83,1210.04 2091.41,1210.04 2092,1210.04 2092.59,1210.04 2093.17,1210.04 2093.76,1210.04 2094.35,1210.04 2094.93,1210.04 2095.52,1210.04 2096.1,1210.04 2096.69,1210.04 2097.28,1210.04 2097.86,1210.04 2098.45,1210.04 2099.04,1210.04 2099.62,1210.04 2100.21,1210.04 2100.8,1210.04 2101.38,1210.04 2101.97,1210.04 2102.55,1210.04 2103.14,1210.04 2103.73,1210.04 2104.31,1210.04 2104.9,1210.04 2105.49,1210.04 2106.07,1210.04 2106.66,1210.04 2107.25,1210.04 2107.83,1210.04 2108.42,1210.04 2109.01,1210.04 2109.59,1210.04 2110.18,1210.04 2110.76,1210.04 2111.35,1210.04 2111.94,1210.04 2112.52,1210.04 2113.11,1210.04 2113.7,1210.04 2114.28,1210.04 2114.87,1210.04 2115.46,1210.04 2116.04,1210.04 2116.63,1210.04 2117.22,1210.04 2117.8,1210.04 2118.39,1210.04 2118.97,1210.04 2119.56,1210.04 2120.15,1210.04 2120.73,1210.04 2121.32,1210.04 2121.91,1210.04 2122.49,1210.04 2123.08,1210.04 2123.67,1210.04 2124.25,1210.04 2124.84,1210.04 2125.42,1210.04 2126.01,1210.04 2126.6,1210.04 2127.18,1210.04 2127.77,1210.04 2128.36,1210.04 2128.94,1210.04 2129.53,1210.04 2130.12,1210.04 2130.7,1210.04 2131.29,1210.04 2131.88,1210.04 2132.46,1210.04 2133.05,1210.04 2133.63,1210.04 2134.22,1210.04 2134.81,1210.04 2135.39,1210.04 2135.98,1210.04 2136.57,1210.04 2137.15,1210.04 2137.74,1210.04 2138.33,1210.04 2138.91,1210.04 2139.5,1210.04 2140.09,1210.04 2140.67,1210.04 2141.26,1210.04 2141.84,1210.04 2142.43,1210.04 2143.02,1210.04 2143.6,1210.04 2144.19,1210.04 2144.78,1210.04 2145.36,1210.04 2145.95,1210.04 2146.54,1210.04 2147.12,1210.04 2147.71,1210.04 2148.3,1210.04 2148.88,1210.04 2149.47,1210.04 2150.05,1210.04 2150.64,1210.04 2151.23,1210.04 2151.81,1210.04 2152.4,1210.04 2152.99,1210.04 2153.57,1210.04 2154.16,1210.04 2154.75,1210.04 2155.33,1210.04 2155.92,1210.04 2156.5,1210.04 2157.09,1210.04 2157.68,1210.04 2158.26,1210.04 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.87,1191.75 1399.88,899.083 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.82 985.439,1191.75 2158.26,1191.75 2158.26,1227.82 985.439,1227.82 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip243\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip243)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1431.46 162.114,-2765.92 162.673,-3965.9 163.232,-5089.67 163.792,-4792.98 164.351,-5817.72 164.91,-6753.73 165.469,-7566.3 166.029,-8284.04 166.588,-8956.72 167.147,-8564.32 167.706,-9139.81 168.266,-9656.37 168.825,-10136 169.384,-10563.1 169.943,-10199.9 170.503,-9878.1 171.062,-10215 171.621,-10522.3 172.18,-10221.5 172.74,-10441.2 173.299,-10651.9 173.858,-10828 174.417,-10974.1 174.977,-11099.7 175.536,-11198 176.095,-11261.1 176.655,-11311.3 177.214,-10386 177.773,-10416 178.332,-10429.3 178.892,-10171.9 179.451,-9919.92 180.01,-9900.02 180.569,-9435.56 181.129,-9399.21 181.688,-9339.52 182.247,-9274.21 182.806,-9030.52 183.366,-8962.52 183.925,-8441.43 184.484,-8367.87 185.043,-8290.57 185.603,-7947.09 186.162,-7738.23 186.721,-7657.53 187.28,-7245.47 187.84,-7056.04 188.399,-6964.75 188.958,-6793.18 189.517,-6526.6 190.077,-6446.72 190.636,-6120.71 191.195,-5971.02 191.754,-5743.59 192.314,-5677.71 192.873,-5467.84 193.432,-5327.86 193.991,-5195.55 194.551,-4937.43 195.11,-4821.15 195.669,-4640.26 196.228,-4468.51 196.788,-4413.64 197.347,-4305.04 197.906,-4140.91 198.465,-4088.56 199.025,-4026.83 199.584,-3820.92 200.143,-3755.85 200.702,-3649.19 201.262,-3544.25 201.821,-3392.5 202.38,-3291.7 202.939,-3069.15 203.499,-3014.28 204.058,-2844.12 204.617,-2676.09 205.176,-2587.7 205.736,-2465.33 206.295,-2414.68 206.854,-2363.48 207.413,-2247.88 207.973,-2166.32 208.532,-2115.39 209.091,-1972.67 209.65,-1930.34 210.21,-1794.1 210.769,-1722.05 211.328,-1649.75 211.887,-1551.8 212.447,-1456.48 213.006,-1332.45 213.565,-1299.63 214.124,-1269.56 214.684,-1182.1 215.243,-1122.19 215.802,-1064.88 216.361,-1005.6 216.921,-944.565 217.48,-861.501 218.039,-830.138 218.598,-748.595 219.158,-695.111 219.717,-596.626 220.276,-519.366 220.835,-442.956 221.395,-418.516 221.954,-348.122 222.513,-324.918 223.072,-302.435 223.632,-258.548 224.191,-214.13 224.75,-109.571 225.309,-65.73 225.869,-44.4478 226.428,-2.84627 226.987,18.007 227.546,35.9537 228.106,74.8645 228.665,92.3094 229.224,111.472 229.783,132.845 230.343,172.528 230.902,206.613 231.461,260.863 232.02,277.329 232.58,310.641 233.139,359.468 233.698,406.717 234.257,471.082 234.817,493.92 235.376,481.424 235.935,488.54 236.494,534.692 237.054,537.138 237.613,541.652 238.172,565.624 238.731,572.258 239.291,580.122 239.85,581.036 240.409,567.294 240.968,595.758 241.528,675.211 242.087,714.108 242.646,751.357 243.205,787.746 243.765,806.087 244.324,787.214 244.883,800.389 245.442,814.627 246.002,813.575 246.561,812.306 247.12,823.204 247.679,818.67 248.239,852.32 248.798,885.418 249.357,882.204 249.916,876.48 250.476,855.762 251.035,872.427 251.594,887.592 252.153,887.543 252.713,935.666 253.272,949.899 253.831,950.243 254.39,982.049 254.95,958.911 255.509,969.026 256.068,950.012 256.627,947.72 257.187,911.853 257.746,961.002 258.305,993.72 258.864,972.682 259.424,953.226 259.983,932.139 260.542,948.207 261.101,967.267 261.661,997.678 262.22,1014.11 262.779,1025.97 263.338,1023.47 263.898,1014.89 264.457,1077.23 265.016,1084.29 265.575,1057.96 266.135,1066.49 266.694,1056.48 267.253,1018.09 267.812,1027.84 268.372,988.765 268.931,1036.48 269.49,1060.28 270.049,1055.37 270.609,1032.53 271.168,1026.42 271.727,1002 272.286,999.655 272.846,997.736 273.405,1040.46 273.964,1049.83 274.523,1043.83 275.083,1021.8 275.642,1036.49 276.201,1012.21 276.76,1024.52 277.32,1018.54 277.879,1012.41 278.438,1019.47 278.997,1026.52 279.557,1039.53 280.116,1082.23 280.675,1103.68 281.234,1093.41 281.794,1132.45 282.353,1153.38 282.912,1174.15 283.471,1146.53 284.031,1085.71 284.59,1042.81 285.149,1020.83 285.708,1067.61 286.268,1048.13 286.827,1039.52 287.386,1064.44 287.945,1055.59 288.505,1050.22 289.064,1029.82 289.623,1042.94 290.182,1036.75 290.742,1027.61 291.301,1023.39 291.86,999.384 292.419,1009.03 292.979,1002.49 293.538,1000.18 294.097,1014.03 294.656,1005.15 295.216,1000.93 295.775,992.509 296.334,1037.44 296.893,1031.91 297.453,1074.4 298.012,1083.15 298.571,1093.41 299.13,1070.66 299.69,1078.64 300.249,1051.14 300.808,1043.24 301.368,1065.32 301.927,1056.75 302.486,1015.26 303.045,976.474 303.605,956.424 304.164,967.373 304.723,966.112 305.282,978.666 305.842,971.651 306.401,981.112 306.96,977.191 307.519,1005.98 308.079,1002.61 308.638,983.845 309.197,1012.09 309.756,1007.52 310.316,1066.39 310.875,1090.59 311.434,1112.98 311.993,1130.13 312.553,1144.61 313.112,1130.99 313.671,1148.84 314.23,1167.43 314.79,1155.92 315.349,1174.04 315.908,1138.57 316.467,1131.95 317.027,1099.98 317.586,1074.38 318.145,1062.35 318.704,1036.02 319.264,1044.88 319.823,1046.74 320.382,1023.85 320.941,981.541 321.501,979.333 322.06,990.724 322.619,995.794 323.178,975.18 323.738,938.604 324.297,899.154 324.856,911.073 325.415,890.541 325.975,905.147 326.534,919.639 327.093,881.969 327.652,913.802 328.212,892.764 328.771,940.876 329.33,916.529 329.889,945.773 330.449,941.421 331.008,937.506 331.567,915.772 332.126,931.682 332.686,928.65 333.245,958.51 333.804,953.734 334.363,931.546 334.923,958.832 335.482,953.277 336.041,947.468 336.6,989.789 337.16,982.39 337.719,977.053 338.278,969.954 338.837,993.658 339.397,968.672 339.956,943.466 340.515,951.8 341.074,947.461 341.634,922.689 342.193,903.339 342.752,916.839 343.311,929.994 343.871,941.003 344.43,938.51 344.989,914.31 345.548,927.618 346.108,937.887 346.667,903.268 347.226,901.686 347.785,899.469 348.345,896.322 348.904,878.363 349.463,877.896 350.022,907.22 350.582,917.578 351.141,943.61 351.7,935.585 352.259,928.197 352.819,891.029 353.378,886.047 353.937,864.378 354.496,831.858 355.056,815.27 355.615,816.129 356.174,800.45 356.733,781.174 357.293,767.546 357.852,788.528 358.411,776.576 358.97,779.586 359.53,783.143 360.089,786.056 360.648,819.636 361.207,852.614 361.767,849.941 362.326,881.446 362.885,893.299 363.444,904.663 364.004,949.459 364.563,959.205 365.122,949.817 365.681,927.59 366.241,918.365 366.8,928.607 367.359,923.214 367.918,922.489 368.478,935.244 369.037,911.22 369.596,889.168 370.155,868.189 370.715,879.375 371.274,906.916 371.833,883.202 372.392,880.409 372.952,860.412 373.511,826.005 374.07,842.46 374.629,819.13 375.189,816.485 375.748,814.397 376.307,846.328 376.866,872.037 377.426,884.724 377.985,883.71 378.544,862.663 379.103,826.163 379.663,807.354 380.222,804.65 380.781,785.241 381.34,784.423 381.9,801.328 382.459,831.014 383.018,827.572 383.577,810.694 384.137,778.534 384.696,730.024 385.255,764.522 385.814,798.372 386.374,782.124 386.933,801.143 387.492,831.398 388.051,813.439 388.611,859.788 389.17,839.185 389.729,882.085 390.288,879.516 390.848,893.818 391.407,887.01 391.966,899.19 392.525,910.44 393.085,920.562 393.644,914.805 394.203,860.259 394.762,827.804 395.322,823.333 395.881,823.418 396.44,822.277 396.999,822.112 397.559,803.119 398.118,787.046 398.677,787.709 399.236,771.062 399.796,773.347 400.355,792.254 400.914,777.936 401.473,782.478 402.033,817.241 402.592,800.175 403.151,812.779 403.71,791.787 404.27,807.521 404.829,821.245 405.388,770.986 405.947,771.434 406.507,754.494 407.066,770.365 407.625,803.12 408.184,816.59 408.744,829.537 409.303,810.429 409.862,807.803 410.421,825.501 410.981,823.535 411.54,834.993 412.099,849.183 412.658,844.712 413.218,856.148 413.777,867.595 414.336,894.163 414.895,853.736 415.455,880.228 416.014,904.281 416.573,862.784 417.132,822.468 417.692,803.585 418.251,801.961 418.81,820.516 419.369,818.13 419.929,768.441 420.488,822.845 421.047,819.671 421.606,815.317 422.166,816.383 422.725,810.91 423.284,809.81 423.843,792.713 424.403,791.513 424.962,791.256 425.521,772.176 426.08,771.737 426.64,791.566 427.199,770.95 427.758,754.38 428.318,754.772 428.877,754.974 429.436,769.993 429.995,783.641 430.555,765.054 431.114,764.103 431.673,779.011 432.232,790.805 432.792,787.814 433.351,801.662 433.91,797.464 434.469,794.797 435.029,789.819 435.588,758.385 436.147,771.656 436.706,770.665 437.266,768.992 437.825,750.495 438.384,752.275 438.943,751.859 439.503,717.287 440.062,754.207 440.621,751.998 441.18,786.776 441.74,802.25 442.299,802.16 442.858,812.456 443.417,761.125 443.977,759.707 444.536,758.171 445.095,741.19 445.654,739.335 446.214,723.211 446.773,725.5 447.332,710.47 447.891,712.131 448.451,701.204 449.01,689.934 449.569,677.317 450.128,647.757 450.688,637.864 451.247,694.095 451.806,697.098 452.365,685.785 452.925,689.405 453.484,691.245 454.043,694.476 454.602,695.818 455.162,682.423 455.721,688.037 456.28,673.951 456.839,679.329 457.399,683.029 457.958,685.261 458.517,721.129 459.076,723.87 459.636,741.162 460.195,757.69 460.754,721.768 461.313,708.761 461.873,710.148 462.432,713.263 462.991,716.073 463.55,733.074 464.11,737.058 464.669,735.507 465.228,736.326 465.787,736.271 466.347,765.232 466.906,766.157 467.465,747.616 468.024,783.092 468.584,780.138 469.143,763.078 469.702,777.628 470.261,756.736 470.821,758.14 471.38,740.717 471.939,757.742 472.498,775.387 473.058,758.84 473.617,788.515 474.176,800.721 474.735,778.759 475.295,793.624 475.854,773.834 476.413,769.214 476.972,767.504 477.532,765.743 478.091,751.824 478.65,750.663 479.209,765.599 479.769,780.776 480.328,781.42 480.887,782.991 481.446,797.549 482.006,780.977 482.565,777.523 483.124,774.879 483.683,817.671 484.243,845.918 484.802,822.69 485.361,806.1 485.92,801.452 486.48,809.934 487.039,821.979 487.598,833.57 488.157,825.381 488.717,788.046 489.276,765.924 489.835,781.614 490.394,762.542 490.954,726.266 491.513,711.629 492.072,679.813 492.631,668.699 493.191,689.038 493.75,675.716 494.309,712.877 494.868,731.681 495.428,717.583 495.987,731.103 496.546,749.85 497.105,751.155 497.665,737.288 498.224,789.503 498.783,789.948 499.342,790.302 499.902,803.873 500.461,813.058 501.02,809.596 501.579,850.606 502.139,845.676 502.698,857.65 503.257,838.688 503.816,818.694 504.376,812.814 504.935,796.379 505.494,825.987 506.053,840.788 506.613,801.388 507.172,843.102 507.731,834.168 508.29,794.486 508.85,788.113 509.409,773.652 509.968,772.287 510.527,800.884 511.087,810.308 511.646,788.061 512.205,802.826 512.764,800.67 513.324,827.954 513.883,774.305 514.442,755.433 515.001,753.802 515.561,732.674 516.12,698.925 516.679,715.697 517.238,718.466 517.798,717.766 518.357,736.41 518.916,766.579 519.475,762.738 520.035,777.275 520.594,805 521.153,770.048 521.712,796.831 522.272,792.24 522.831,787.318 523.39,782.235 523.949,794.978 524.509,778.384 525.068,810.194 525.627,818.885 526.186,795.815 526.746,792.514 527.305,785.409 527.864,750.36 528.423,764.266 528.983,776.955 529.542,774.684 530.101,757.403 530.66,751.26 531.22,763.422 531.779,775.623 532.338,770.662 532.897,749.171 533.457,730.039 534.016,712.594 534.575,697.311 535.134,712.296 535.694,728.159 536.253,710.829 536.812,728.184 537.371,711.596 537.931,724.178 538.49,742.531 539.049,709.627 539.608,709.593 540.168,674.747 540.727,694.406 541.286,727.935 541.845,727.076 542.405,743.921 542.964,744.787 543.523,741.017 544.082,737.743 544.642,752.853 545.201,784.919 545.76,762.877 546.319,711.744 546.879,744.041 547.438,725.046 547.997,772.747 548.556,790.116 549.116,773.55 549.675,767.487 550.234,764.583 550.793,764.411 551.353,747.902 551.912,761.494 552.471,772.601 553.031,768.179 553.59,780.138 554.149,779.103 554.708,793.843 555.268,824.48 555.827,821.029 556.386,812.364 556.945,791.265 557.505,757.572 558.064,755.692 558.623,771.383 559.182,720.091 559.742,670.384 560.301,674.794 560.86,697.391 561.419,698.843 561.979,714.408 562.538,728.18 563.097,760.379 563.656,761.627 564.216,759.896 564.775,739.004 565.334,740.816 565.893,752.838 566.453,779.564 567.012,809.251 567.571,820.857 568.13,797.407 568.69,774.902 569.249,757.687 569.808,755.655 570.367,786.373 570.927,796.951 571.486,757.994 572.045,744.1 572.604,724.948 573.164,702.877 573.723,720.249 574.282,703.69 574.841,687.964 575.401,705.315 575.96,705.876 576.519,689.277 577.078,691.655 577.638,678.633 578.197,665.788 578.756,635.472 579.315,674.416 579.875,691.689 580.434,723.429 580.993,692.226 581.552,677.387 582.112,680.275 582.671,713.766 583.23,730 583.789,715.018 584.349,715.253 584.908,730.629 585.467,717.186 586.026,683.301 586.586,651.938 587.145,656.272 587.704,659.509 588.263,644.661 588.823,614.722 589.382,622.37 589.941,640.924 590.5,644.288 591.06,631.022 591.619,636.677 592.178,641.926 592.737,647.74 593.297,635.622 593.856,652.138 594.415,655.252 594.974,640.437 595.534,622.876 596.093,625.325 596.652,629.027 597.211,651.315 597.771,622.161 598.33,640.401 598.889,691.743 599.448,662.938 600.008,649.932 600.567,654.955 601.126,607.274 601.685,615.208 602.245,667.246 602.804,651.196 603.363,670.181 603.922,669.789 604.482,688.336 605.041,689.849 605.6,691.04 606.159,723.415 606.719,720.565 607.278,686.946 607.837,705.921 608.396,726.58 608.956,726.052 609.515,740.34 610.074,741.117 610.633,707.524 611.193,689.666 611.752,708.049 612.311,741.634 612.87,707.289 613.43,706.66 613.989,674.014 614.548,675.315 615.107,693.114 615.667,710.346 616.226,692.059 616.785,704.843 617.344,705.847 617.904,685.479 618.463,717.822 619.022,719.998 619.581,705.13 620.141,702.927 620.7,700.216 621.259,735.259 621.818,751.864 622.378,746.073 622.937,732.139 623.496,713.208 624.055,731.32 624.615,696.55 625.174,661.403 625.733,633.557 626.292,637.659 626.852,607.548 627.411,631.704 627.97,616.539 628.529,619.683 629.089,625.213 629.648,645.951 630.207,646.327 630.766,649.572 631.326,652.66 631.885,654.503 632.444,653.943 633.003,673.065 633.563,690.428 634.122,709.759 634.681,722.809 635.24,721.446 635.8,717.392 636.359,715.259 636.918,702.912 637.477,706.175 638.037,723.95 638.596,723.288 639.155,739.443 639.714,705.32 640.274,676.585 640.833,663.253 641.392,685.683 641.951,684.571 642.511,670.764 643.07,674.028 643.629,708.061 644.188,706.635 644.748,737.294 645.307,763.99 645.866,746.934 646.425,744.845 646.985,744.469 647.544,729.722 648.103,709.503 648.662,724.727 649.222,722.796 649.781,724.633 650.34,721.754 650.899,738.88 651.459,683.928 652.018,701.142 652.577,684.537 653.136,684.14 653.696,685.389 654.255,667.628 654.814,684.297 655.373,702.995 655.933,685.264 656.492,716.312 657.051,731.523 657.61,710.696 658.17,722.769 658.729,716.469 659.288,745.366 659.847,743.809 660.407,725.592 660.966,740.813 661.525,769.799 662.084,753.475 662.644,687.124 663.203,733.507 663.762,714.075 664.321,665.357 664.881,680.287 665.44,679.924 665.999,664.745 666.558,699.097 667.118,718.391 667.677,712.892 668.236,780.903 668.795,778.636 669.355,774.407 669.914,722.34 670.473,706.302 671.032,704.633 671.592,707.509 672.151,708.822 672.71,742.106 673.269,742.034 673.829,770.868 674.388,784.551 674.947,780.669 675.506,778.795 676.066,758.69 676.625,790.105 677.184,790.999 677.743,770.726 678.303,765.563 678.862,762.935 679.421,759.47 679.981,788.373 680.54,767.123 681.099,745.447 681.658,772.641 682.218,754.69 682.777,752.46 683.336,763.673 683.895,741.551 684.455,753.561 685.014,719.886 685.573,731.778 686.132,762.624 686.692,761.683 687.251,744.202 687.81,725.709 688.369,709.477 688.929,707.637 689.488,722.556 690.047,733.872 690.606,749.429 691.166,733.836 691.725,747.968 692.284,728.292 692.843,712.92 693.403,694.475 693.962,726.545 694.521,713.178 695.08,714.125 695.64,712.191 696.199,711.71 696.758,730.29 697.317,730.47 697.877,713.516 698.436,697.404 698.995,699.365 699.554,697.835 700.114,697.935 700.673,697.07 701.232,713.399 701.791,713.702 702.351,663.394 702.91,682.584 703.469,717.263 704.028,686.134 704.588,700.839 705.147,716.399 705.706,714.984 706.265,713.46 706.825,695.974 707.384,694.963 707.943,710.714 708.502,728.77 709.062,773.152 709.621,754.218 710.18,720.394 710.739,719.618 711.299,751.109 711.858,762.083 712.417,745.695 712.976,741.785 713.536,721.911 714.095,686.778 714.654,683.51 715.213,649.834 715.773,654.131 716.332,656.172 716.891,673.925 717.45,676.047 718.01,742.383 718.569,769.583 719.128,716.065 719.687,730.439 720.247,729.794 720.806,740.494 721.365,736.931 721.924,751.596 722.484,726.305 723.043,742.468 723.602,755.52 724.161,736.271 724.721,731.504 725.28,679.039 725.839,696.862 726.398,696.304 726.958,695.725 727.517,693.433 728.076,694.97 728.635,711.62 729.195,709.081 729.754,690.317 730.313,687.46 730.872,669.454 731.432,702.259 731.991,701.336 732.55,702.986 733.109,699.329 733.669,682.577 734.228,681.968 734.787,651.67 735.346,684.199 735.906,665.904 736.465,632.433 737.024,653.788 737.583,639.674 738.143,628.902 738.702,617.882 739.261,620.311 739.82,588.712 740.38,545.995 740.939,552.46 741.498,563.72 742.057,570.648 742.617,595.986 743.176,586.616 743.735,595.21 744.294,617.092 744.854,622.464 745.413,608.461 745.972,628.377 746.531,657.69 747.091,645.662 747.65,665.461 748.209,648.948 748.768,649.555 749.328,666.301 749.887,680.7 750.446,666.682 751.005,668.148 751.565,688.008 752.124,690.039 752.683,672.926 753.242,686.276 753.802,703.056 754.361,700.777 754.92,668.08 755.479,687.324 756.039,685.824 756.598,703.746 757.157,671.766 757.716,687.962 758.276,672.239 758.835,621.945 759.394,621.797 759.953,674.286 760.513,690.677 761.072,706.82 761.631,726.733 762.19,738.92 762.75,771.605 763.309,768.843 763.868,795.923 764.427,778.645 764.987,806.55 765.546,821.435 766.105,815.147 766.664,777.121 767.224,759.228 767.783,788.48 768.342,799.476 768.901,840.329 769.461,830.602 770.02,822.453 770.579,801.774 771.138,793.668 771.698,806.782 772.257,804.669 772.816,782.318 773.375,777.715 773.935,744.76 774.494,728.77 775.053,710.625 775.612,709.633 776.172,658.015 776.731,576.9 777.29,570.289 777.849,572.542 778.409,582.382 778.968,592.523 779.527,595.635 780.086,588.062 780.646,579.388 781.205,583.196 781.764,575.854 782.323,602.754 782.883,641.931 783.442,661.221 784.001,697.171 784.56,693.751 785.12,726.51 785.679,692.18 786.238,687.361 786.797,672.102 787.357,669.28 787.916,686.4 788.475,714.044 789.034,729.583 789.594,726.101 790.153,706.238 790.712,703.506 791.271,699.127 791.831,731.161 792.39,746.76 792.949,743.025 793.508,741.915 794.068,738.95 794.627,770.501 795.186,735.386 795.745,749.355 796.305,760.188 796.864,786.988 797.423,814.253 797.982,818.345 798.542,795.452 799.101,774.728 799.66,757.381 800.219,738.771 800.779,768.674 801.338,764.9 801.897,711.133 802.456,678.748 803.016,678.284 803.575,683.559 804.134,683.374 804.693,681.421 805.253,648.121 805.812,603.66 806.371,611.882 806.931,602.503 807.49,605.581 808.049,608.281 808.608,601.351 809.168,606.547 809.727,610.289 810.286,614.084 810.845,619.991 811.405,638.625 811.964,674.178 812.523,657.032 813.082,658.934 813.642,643.657 814.201,661.499 814.76,642.513 815.319,676.276 815.879,675.85 816.438,710.394 816.997,694.768 817.556,691.942 818.116,690.764 818.675,693.087 819.234,678.775 819.793,647.231 820.353,652.362 820.912,671.776 821.471,671.871 822.03,640.643 822.59,627.109 823.149,646.252 823.708,663.991 824.267,683.547 824.827,701.088 825.386,685.886 825.945,683.392 826.504,716.913 827.064,717.667 827.623,732.64 828.182,717.267 828.741,705.345 829.301,734.775 829.86,746.707 830.419,743.33 830.978,693.654 831.538,695.172 832.097,711.763 832.656,676.007 833.215,710.632 833.775,724.913 834.334,755.202 834.893,765.884 835.452,730.057 836.012,762.51 836.571,761.157 837.13,809.5 837.689,818.77 838.249,814.715 838.808,775.89 839.367,769.525 839.926,766.646 840.486,758.501 841.045,736.453 841.604,779.914 842.163,728.293 842.723,722.567 843.282,707.099 843.841,738.959 844.4,753.639 844.96,749.134 845.519,781.988 846.078,778.335 846.637,727.443 847.197,729.233 847.756,709.295 848.315,707.803 848.874,703.491 849.434,686.384 849.993,689.953 850.552,705.344 851.111,687.56 851.671,687.423 852.23,688.043 852.789,685.708 853.348,701.427 853.908,702.605 854.467,687.162 855.026,686.807 855.585,688.664 856.145,704.483 856.704,737.725 857.263,765.464 857.822,759.717 858.382,754.857 858.941,750.145 859.5,745.724 860.059,759.679 860.619,771.773 861.178,737.23 861.737,700.05 862.296,697.839 862.856,681.229 863.415,700.033 863.974,746.261 864.533,708.946 865.093,708.499 865.652,684.77 866.211,668.239 866.77,668.629 867.33,621.758 867.889,625.703 868.448,612.678 869.007,614.174 869.567,630.215 870.126,616.876 870.685,639.21 871.244,657.32 871.804,641.183 872.363,660.145 872.922,645.719 873.481,664.116 874.041,649.607 874.6,668.335 875.159,634.712 875.718,656.728 876.278,641.012 876.837,643.881 877.396,646.196 877.955,648.441 878.515,651.699 879.074,638.124 879.633,692.419 880.192,691.386 880.752,735.262 881.311,682.317 881.87,683.504 882.429,686.306 882.989,702.396 883.548,701.001 884.107,681.921 884.666,668.027 885.226,683.018 885.785,668.608 886.344,686.132 886.903,704.448 887.463,703.318 888.022,706.469 888.581,690.075 889.14,704.807 889.7,733.078 890.259,716.986 890.818,731.824 891.377,714.722 891.937,697.907 892.496,712.351 893.055,757.3 893.614,785.478 894.174,781.381 894.733,794.54 895.292,774.743 895.851,754.244 896.411,748.891 896.97,761.9 897.529,738.612 898.088,771.326 898.648,784.691 899.207,778.208 899.766,724.945 900.325,726.546 900.885,738.785 901.444,784.636 902.003,792.812 902.562,818.718 903.122,780.324 903.681,774.982 904.24,771.573 904.799,753.257 905.359,745.818 905.918,678.763 906.477,694.829 907.036,725.012 907.596,709.01 908.155,693.47 908.714,644.017 909.273,615.3 909.833,585.364 910.392,591.424 910.951,580.558 911.51,585.438 912.07,590.108 912.629,613.206 913.188,617.974 913.747,619.395 914.307,623.706 914.866,642.333 915.425,645.101 915.984,646.428 916.544,661.679 917.103,596.87 917.662,587.126 918.221,579.13 918.781,583.548 919.34,590.371 919.899,595.741 920.458,615.065 921.018,666.577 921.577,652.671 922.136,621.087 922.695,626.965 923.255,595.427 923.814,600.079 924.373,605.267 924.932,613.008 925.492,571.581 926.051,563.878 926.61,569.957 927.169,607.639 927.729,596.675 928.288,569.684 928.847,576.084 929.406,584.399 929.966,589.424 930.525,624.629 931.084,629.47 931.644,635.14 932.203,638.843 932.762,674.092 933.321,756.93 933.881,789.278 934.44,803.191 934.999,799.441 935.558,764.937 936.118,777.347 936.677,759.124 937.236,754.947 937.795,718.418 938.355,718.058 938.914,714.054 939.473,714.807 940.032,712.834 940.592,714.189 941.151,696.903 941.71,698.113 942.269,685.273 942.829,688.196 943.388,704.218 943.947,704.518 944.506,719.959 945.066,701.839 945.625,699.096 946.184,684.275 946.743,654.786 947.303,639.603 947.862,658.429 948.421,664.045 948.98,681.132 949.54,698.832 950.099,667.161 950.658,622.382 951.217,608.278 951.777,598.002 952.336,588.341 952.895,607.79 953.454,593.269 954.014,564.712 954.573,573.631 955.132,562.938 955.691,570.552 956.251,592.001 956.81,610.73 957.369,615.965 957.928,635.7 958.488,656.087 959.047,659.161 959.606,693.212 960.165,679.439 960.725,676.604 961.284,676.891 961.843,693.329 962.402,712.02 962.962,727.019 963.521,741.269 964.08,705.728 964.639,708.489 965.199,739.829 965.758,737.911 966.317,737.44 966.876,733.514 967.436,698.716 967.995,666.753 968.554,635.119 969.113,636.22 969.673,621.336 970.232,610.154 970.791,628.57 971.35,629.925 971.91,611.833 972.469,646.005 973.028,650.882 973.587,653.286 974.147,669.422 974.706,671.139 975.265,659.297 975.824,648.673 976.384,650.924 976.943,633.703 977.502,656.144 978.061,640.881 978.621,626.809 979.18,610.942 979.739,595.737 980.298,601.318 980.858,610.379 981.417,612.506 981.976,585.392 982.535,589.917 983.095,578.625 983.654,567.194 984.213,557.734 984.772,576.78 985.332,632.091 985.891,619.93 986.45,622.631 987.009,657.935 987.569,640.671 988.128,691.529 988.687,692.195 989.246,757.736 989.806,753.894 990.365,716.724 990.924,746.634 991.483,726.942 992.043,710.651 992.602,712.262 993.161,713.19 993.72,711.669 994.28,709.871 994.839,711.92 995.398,692.961 995.957,740.805 996.517,767.373 997.076,797.618 997.635,776.178 998.194,789.052 998.754,782.104 999.313,808.278 999.872,801.294 1000.43,780.668 1000.99,779.21 1001.55,773.094 1002.11,784.562 1002.67,779.25 1003.23,772.73 1003.79,767.985 1004.35,731.547 1004.91,742.367 1005.46,786.522 1006.02,763.936 1006.58,761.783 1007.14,743.207 1007.7,755.702 1008.26,736.965 1008.82,732.259 1009.38,681.611 1009.94,713.651 1010.5,774.235 1011.06,787.155 1011.62,781.735 1012.18,742.737 1012.73,741.45 1013.29,772.029 1013.85,797.326 1014.41,758.393 1014.97,691.956 1015.53,692.661 1016.09,690.494 1016.65,691.934 1017.21,692.725 1017.77,690.641 1018.33,687.249 1018.89,712.754 1019.45,729.467 1020.01,757.645 1020.56,736.356 1021.12,732.827 1021.68,743.423 1022.24,725.052 1022.8,702.961 1023.36,751.993 1023.92,747.865 1024.48,746.703 1025.04,741.818 1025.6,706.538 1026.16,673.815 1026.72,675.717 1027.28,676.943 1027.83,677.997 1028.39,663.532 1028.95,717.264 1029.51,715.287 1030.07,712.965 1030.63,675.788 1031.19,690.38 1031.75,708.018 1032.31,737.571 1032.87,730.132 1033.43,714.352 1033.99,695.259 1034.55,694.049 1035.1,708.322 1035.66,705.016 1036.22,703.612 1036.78,715.631 1037.34,712.078 1037.9,726.911 1038.46,725.123 1039.02,707.378 1039.58,692.748 1040.14,678.415 1040.7,632.263 1041.26,667.249 1041.82,684.173 1042.38,680.861 1042.93,681.664 1043.49,661.657 1044.05,663.228 1044.61,668.673 1045.17,652.378 1045.73,623.124 1046.29,592.067 1046.85,582.869 1047.41,587.628 1047.97,592.898 1048.53,599.339 1049.09,586.274 1049.65,557.35 1050.2,550.757 1050.76,576.782 1051.32,579.755 1051.88,584.032 1052.44,589.908 1053,594.437 1053.56,616.53 1054.12,650.536 1054.68,668.566 1055.24,652.803 1055.8,650.021 1056.36,636.894 1056.92,659.019 1057.48,709.279 1058.03,690.593 1058.59,671.789 1059.15,704.864 1059.71,704.322 1060.27,719.869 1060.83,686.839 1061.39,657.147 1061.95,655.724 1062.51,658.481 1063.07,664.815 1063.63,699.856 1064.19,727.729 1064.75,694.99 1065.3,709.554 1065.86,709.174 1066.42,726.243 1066.98,710.754 1067.54,741.245 1068.1,735.396 1068.66,716.945 1069.22,746.001 1069.78,723.657 1070.34,720.109 1070.9,715.789 1071.46,731.327 1072.02,730.412 1072.57,809.611 1073.13,817.642 1073.69,825.611 1074.25,799.423 1074.81,793.522 1075.37,787.847 1075.93,769.576 1076.49,719.842 1077.05,717.389 1077.61,747.939 1078.17,759.925 1078.73,752.855 1079.29,732.787 1079.85,747.978 1080.4,745.729 1080.96,711.602 1081.52,711.844 1082.08,679.037 1082.64,696.551 1083.2,680.686 1083.76,696.813 1084.32,715.032 1084.88,679.722 1085.44,712.603 1086,692.01 1086.56,706.915 1087.12,686.106 1087.67,667.656 1088.23,634.811 1088.79,650.973 1089.35,620.179 1089.91,609.466 1090.47,644.264 1091.03,661.817 1091.59,628.755 1092.15,648.428 1092.71,681.624 1093.27,681.996 1093.83,681.417 1094.39,679.136 1094.94,681.593 1095.5,693.625 1096.06,708.962 1096.62,725.198 1097.18,692.381 1097.74,705.941 1098.3,686.386 1098.86,715.481 1099.42,685.226 1099.98,685.742 1100.54,702.156 1101.1,730.437 1101.66,730.728 1102.22,713.761 1102.77,715.248 1103.33,634.884 1103.89,638.315 1104.45,707.646 1105.01,658.444 1105.57,625.4 1106.13,645.069 1106.69,600.206 1107.25,654.037 1107.81,657.297 1108.37,692.597 1108.93,691.341 1109.49,690.483 1110.04,692.623 1110.6,709.257 1111.16,707.232 1111.72,740.02 1112.28,734.432 1112.84,714.033 1113.4,732.08 1113.96,732.752 1114.52,715.227 1115.08,681.111 1115.64,698.215 1116.2,713.55 1116.76,697.185 1117.31,679.034 1117.87,695.72 1118.43,697.633 1118.99,729.014 1119.55,743.792 1120.11,758.274 1120.67,738.451 1121.23,752.818 1121.79,733.129 1122.35,732.849 1122.91,728.224 1123.47,692.636 1124.03,691.718 1124.59,691.399 1125.14,644.671 1125.7,647.857 1126.26,635.989 1126.82,638.286 1127.38,607.303 1127.94,609.732 1128.5,628.847 1129.06,600.625 1129.62,587.928 1130.18,628.85 1130.74,631.261 1131.3,619.261 1131.86,638.406 1132.41,636.603 1132.97,637.57 1133.53,610.446 1134.09,583.812 1134.65,590.327 1135.21,598.246 1135.77,606.811 1136.33,625.082 1136.89,594.411 1137.45,615.408 1138.01,639.357 1138.57,663.437 1139.13,647.026 1139.68,651.069 1140.24,587.601 1140.8,595.222 1141.36,586.673 1141.92,579.209 1142.48,582.762 1143.04,591.311 1143.6,593.873 1144.16,613.747 1144.72,590.846 1145.28,579.902 1145.84,585.932 1146.4,587.622 1146.96,576.276 1147.51,549.805 1148.07,590.231 1148.63,630.435 1149.19,647.144 1149.75,666.002 1150.31,700.15 1150.87,669.69 1151.43,651.995 1151.99,653.142 1152.55,670.61 1153.11,672.619 1153.67,687.073 1154.23,698.231 1154.78,715.632 1155.34,697.026 1155.9,709.5 1156.46,740.841 1157.02,751.952 1157.58,736.188 1158.14,736.103 1158.7,733.866 1159.26,715.245 1159.82,731.735 1160.38,711.156 1160.94,660.731 1161.5,647.095 1162.05,653.973 1162.61,656.253 1163.17,672.768 1163.73,693.43 1164.29,725.735 1164.85,726.849 1165.41,755.204 1165.97,735.368 1166.53,715.581 1167.09,711.039 1167.65,757.965 1168.21,739.165 1168.77,717.722 1169.33,701.009 1169.88,701.59 1170.44,747.472 1171,729.285 1171.56,744.704 1172.12,729.678 1172.68,713.671 1173.24,760.538 1173.8,758.714 1174.36,753.67 1174.92,715.924 1175.48,732.757 1176.04,747.671 1176.6,744.276 1177.15,754.391 1177.71,733.907 1178.27,761.915 1178.83,739.471 1179.39,736.3 1179.95,750.955 1180.51,779.531 1181.07,788.07 1181.63,749.984 1182.19,764.268 1182.75,741.32 1183.31,706.83 1183.87,674.022 1184.43,642.667 1184.98,644.278 1185.54,649.19 1186.1,655.077 1186.66,655.699 1187.22,706.187 1187.78,704.402 1188.34,741.714 1188.9,734.601 1189.46,732.68 1190.02,696.952 1190.58,692.095 1191.14,709.072 1191.7,773.037 1192.25,767.529 1192.81,764.39 1193.37,778.325 1193.93,772.535 1194.49,769.029 1195.05,781.488 1195.61,762.89 1196.17,711.304 1196.73,691.447 1197.29,662.644 1197.85,694.373 1198.41,708.784 1198.97,740.718 1199.52,738.11 1200.08,735.393 1200.64,717.901 1201.2,734.736 1201.76,764.806 1202.32,760.213 1202.88,768.431 1203.44,763.799 1204,771.719 1204.56,766.534 1205.12,775.064 1205.68,816.507 1206.24,826.873 1206.8,818.787 1207.35,749.582 1207.91,727.982 1208.47,722.413 1209.03,733.845 1209.59,686.006 1210.15,635.185 1210.71,651.626 1211.27,668.972 1211.83,686.999 1212.39,669.274 1212.95,687.48 1213.51,702.94 1214.07,700.966 1214.62,686.763 1215.18,702.885 1215.74,687.217 1216.3,618.443 1216.86,607.56 1217.42,598.88 1217.98,603.648 1218.54,559.056 1219.1,599.838 1219.66,608.453 1220.22,630.652 1220.78,634.401 1221.34,666.086 1221.89,647.079 1222.45,617.39 1223.01,623.495 1223.57,626.549 1224.13,628.661 1224.69,629.101 1225.25,616.889 1225.81,619.286 1226.37,606.777 1226.93,645.65 1227.49,664.058 1228.05,652.042 1228.61,655.38 1229.17,656.479 1229.72,654.525 1230.28,657.268 1230.84,659.575 1231.4,690.078 1231.96,693.24 1232.52,724.435 1233.08,721.959 1233.64,721.142 1234.2,705.408 1234.76,721.06 1235.32,670.893 1235.88,674.267 1236.44,658.305 1236.99,642.111 1237.55,642.897 1238.11,660.29 1238.67,659.669 1239.23,626.689 1239.79,646.793 1240.35,631.387 1240.91,649.011 1241.47,669.477 1242.03,734.822 1242.59,750.672 1243.15,763.417 1243.71,761.95 1244.26,710.747 1244.82,727.382 1245.38,726.295 1245.94,723.64 1246.5,720.186 1247.06,735.127 1247.62,732.013 1248.18,730.665 1248.74,713.711 1249.3,711.575 1249.86,694.607 1250.42,691.617 1250.98,691.747 1251.54,708.879 1252.09,720.009 1252.65,683.999 1253.21,729.027 1253.77,722.94 1254.33,721.174 1254.89,716.782 1255.45,729.291 1256.01,744.768 1256.57,742.246 1257.13,770.999 1257.69,736.7 1258.25,737.269 1258.81,699.639 1259.36,700.233 1259.92,700.724 1260.48,702.783 1261.04,686.492 1261.6,670.489 1262.16,687.916 1262.72,672.197 1263.28,674.504 1263.84,687.732 1264.4,669.945 1264.96,684.748 1265.52,700.773 1266.08,701.528 1266.63,713.002 1267.19,727.639 1267.75,756.771 1268.31,768.579 1268.87,795.862 1269.43,805.676 1269.99,809.48 1270.55,832.865 1271.11,822.762 1271.67,766.184 1272.23,767.151 1272.79,779.854 1273.35,791.442 1273.91,785.178 1274.46,795.545 1275.02,801.248 1275.58,843.939 1276.14,820.599 1276.7,810.825 1277.26,804.847 1277.82,763.375 1278.38,742.18 1278.94,719.72 1279.5,702.377 1280.06,684.683 1280.62,698.845 1281.18,685.199 1281.73,654.516 1282.29,674.341 1282.85,670.641 1283.41,673.084 1283.97,705.275 1284.53,715.031 1285.09,679.356 1285.65,696.08 1286.21,696.497 1286.77,709.562 1287.33,693.653 1287.89,676.329 1288.45,675.214 1289,676.097 1289.56,660.649 1290.12,658.978 1290.68,674.742 1291.24,658.605 1291.8,660.965 1292.36,643.159 1292.92,629.424 1293.48,602.367 1294.04,623.925 1294.6,646.719 1295.16,597.54 1295.72,617.643 1296.28,602.704 1296.83,671.364 1297.39,676.768 1297.95,725.118 1298.51,752.066 1299.07,781.861 1299.63,776.949 1300.19,784.49 1300.75,789.581 1301.31,813.545 1301.87,822.534 1302.43,796.413 1302.99,773.281 1303.55,767.473 1304.1,761.75 1304.66,773.556 1305.22,786.869 1305.78,800.011 1306.34,746.302 1306.9,708.82 1307.46,659.692 1308.02,646.561 1308.58,698.318 1309.14,696.77 1309.7,676.723 1310.26,709.242 1310.82,692.454 1311.38,672.763 1311.93,657.124 1312.49,621.59 1313.05,607.113 1313.61,606.504 1314.17,656.567 1314.73,639.992 1315.29,664.413 1315.85,647.856 1316.41,586.283 1316.97,577.974 1317.53,587.362 1318.09,592.561 1318.65,599.132 1319.2,605.376 1319.76,623.449 1320.32,611.075 1320.88,613.065 1321.44,616.968 1322,620.02 1322.56,589.975 1323.12,613.718 1323.68,636.725 1324.24,639.921 1324.8,643.916 1325.36,661.585 1325.92,644.229 1326.47,629.386 1327.03,598.845 1327.59,615.712 1328.15,652.801 1328.71,621.233 1329.27,589.634 1329.83,564.724 1330.39,557.199 1330.95,547.874 1331.51,571.345 1332.07,562.2 1332.63,586.57 1333.19,606.763 1333.75,609.781 1334.3,582.688 1334.86,569.891 1335.42,540.001 1335.98,547.831 1336.54,540.156 1337.1,537.222 1337.66,512.193 1338.22,505.258 1338.78,504.073 1339.34,516.052 1339.9,524.703 1340.46,548.095 1341.02,522.13 1341.57,499.924 1342.13,510.218 1342.69,521.072 1343.25,517.687 1343.81,510.9 1344.37,490.499 1344.93,502.875 1345.49,514.684 1346.05,525.311 1346.61,585.455 1347.17,605.078 1347.73,611.746 1348.29,617.273 1348.84,636.093 1349.4,640.28 1349.96,658.039 1350.52,689.34 1351.08,689.126 1351.64,688.843 1352.2,688.712 1352.76,705.093 1353.32,705.525 1353.88,722.338 1354.44,703.957 1355,686.539 1355.56,703.719 1356.12,702.915 1356.67,683.426 1357.23,688.845 1357.79,672.517 1358.35,669.362 1358.91,723.064 1359.47,705.832 1360.03,690.722 1360.59,675.236 1361.15,724.422 1361.71,707.105 1362.27,708.159 1362.83,688.97 1363.39,671.39 1363.94,688.007 1364.5,686.539 1365.06,687.92 1365.62,690.071 1366.18,690.201 1366.74,690.574 1367.3,738.308 1367.86,767.967 1368.42,797.709 1368.98,809.121 1369.54,785.845 1370.1,765.226 1370.66,777.546 1371.21,792.3 1371.77,803.103 1372.33,779.845 1372.89,772.348 1373.45,735.383 1374.01,764.628 1374.57,775.675 1375.13,800.959 1375.69,807.694 1376.25,766.994 1376.81,745.809 1377.37,758.793 1377.93,756.286 1378.49,753.893 1379.04,704.588 1379.6,704.161 1380.16,718.014 1380.72,682.733 1381.28,698.854 1381.84,632.154 1382.4,618.565 1382.96,670.095 1383.52,687.182 1384.08,670.962 1384.64,734.887 1385.2,730.717 1385.76,745.022 1386.31,741.059 1386.87,736.456 1387.43,750.549 1387.99,732.119 1388.55,732.017 1389.11,725.688 1389.67,692.26 1390.23,692.587 1390.79,695.439 1391.35,709.37 1391.91,722.76 1392.47,742.461 1393.03,740.2 1393.58,722.131 1394.14,704.266 1394.7,701.034 1395.26,685.032 1395.82,653.194 1396.38,656.17 1396.94,624.403 1397.5,590.254 1398.06,559.635 1398.62,533.839 1399.18,540.472 1399.74,563.749 1400.3,584.602 1400.86,591.455 1401.41,580.548 1401.97,631.001 1402.53,633.61 1403.09,637.287 1403.65,686.964 1404.21,652.584 1404.77,669.114 1405.33,656.393 1405.89,689.692 1406.45,670.111 1407.01,653.192 1407.57,605.708 1408.13,610.524 1408.68,632.019 1409.24,605.032 1409.8,609.732 1410.36,632.671 1410.92,638.259 1411.48,609.251 1412.04,616.998 1412.6,636.172 1413.16,655.837 1413.72,656.511 1414.28,656.92 1414.84,672.18 1415.4,718.896 1415.95,718.866 1416.51,717.35 1417.07,685.904 1417.63,670.988 1418.19,686.865 1418.75,683.737 1419.31,682.775 1419.87,686.794 1420.43,701.805 1420.99,681.285 1421.55,713.797 1422.11,727.757 1422.67,709.887 1423.23,694.136 1423.78,690.264 1424.34,686.784 1424.9,685.719 1425.46,670.772 1426.02,653.556 1426.58,620.47 1427.14,641.393 1427.7,593.156 1428.26,597.723 1428.82,633.811 1429.38,622.578 1429.94,619.825 1430.5,623.484 1431.05,591.563 1431.61,561.737 1432.17,600.045 1432.73,570.848 1433.29,625.06 1433.85,623.964 1434.41,610.786 1434.97,596.49 1435.53,589.349 1436.09,593.657 1436.65,602.443 1437.21,607.532 1437.77,657.114 1438.33,674.567 1438.88,674.192 1439.44,658.93 1440,649.973 1440.56,653.962 1441.12,654.513 1441.68,673.908 1442.24,740.238 1442.8,734.883 1443.36,734.669 1443.92,732.261 1444.48,745.582 1445.04,730.545 1445.6,709.18 1446.15,691.397 1446.71,692.423 1447.27,673.554 1447.83,626.153 1448.39,663.021 1448.95,678.609 1449.51,695.319 1450.07,710.017 1450.63,724.038 1451.19,718.35 1451.75,716.023 1452.31,776.257 1452.87,769.254 1453.42,750.269 1453.98,729.834 1454.54,730.215 1455.1,727.531 1455.66,743.144 1456.22,736.577 1456.78,713.304 1457.34,711.572 1457.9,726.938 1458.46,705.039 1459.02,703.146 1459.58,620.371 1460.14,658.713 1460.7,641.971 1461.25,642.003 1461.81,663.635 1462.37,617.093 1462.93,636.717 1463.49,607.807 1464.05,599.579 1464.61,584.927 1465.17,621.343 1465.73,640.649 1466.29,690.729 1466.85,689.756 1467.41,688.53 1467.97,656.445 1468.52,658.297 1469.08,658.048 1469.64,657.664 1470.2,653.571 1470.76,622.716 1471.32,608.977 1471.88,612.782 1472.44,566.987 1473,573.923 1473.56,568.635 1474.12,595.069 1474.68,600.92 1475.24,590.936 1475.79,582.789 1476.35,601.578 1476.91,624.879 1477.47,627.264 1478.03,631.118 1478.59,632.498 1479.15,635.931 1479.71,641.172 1480.27,689.771 1480.83,672.695 1481.39,720.204 1481.95,701.212 1482.51,670.816 1483.07,672.826 1483.62,671.8 1484.18,652.447 1484.74,649.535 1485.3,653.631 1485.86,685.553 1486.42,685.808 1486.98,700.949 1487.54,683.887 1488.1,698.453 1488.66,714.869 1489.22,714.998 1489.78,713.106 1490.34,695.633 1490.89,680.702 1491.45,680.342 1492.01,713.069 1492.57,713.731 1493.13,731.038 1493.69,763.367 1494.25,773.822 1494.81,785.412 1495.37,778.88 1495.93,756.531 1496.49,768.081 1497.05,761.96 1497.61,762.372 1498.16,745.904 1498.72,742.609 1499.28,753.354 1499.84,749.179 1500.4,744.84 1500.96,741.026 1501.52,751.421 1502.08,743.556 1502.64,723.034 1503.2,707.35 1503.76,721.158 1504.32,716.531 1504.88,681.88 1505.44,681.433 1505.99,664.454 1506.55,664.328 1507.11,683.7 1507.67,648.917 1508.23,649.461 1508.79,613.087 1509.35,617.19 1509.91,621.858 1510.47,611.738 1511.03,599.822 1511.59,605.081 1512.15,640.589 1512.71,642.367 1513.26,641.828 1513.82,647.495 1514.38,666.681 1514.94,685.554 1515.5,682.129 1516.06,681.39 1516.62,697.815 1517.18,683.894 1517.74,681.723 1518.3,693.363 1518.86,710.206 1519.42,727.383 1519.98,741.232 1520.53,722.546 1521.09,702.215 1521.65,685.482 1522.21,700.645 1522.77,718.159 1523.33,748.523 1523.89,761.577 1524.45,790.635 1525.01,753.515 1525.57,766.221 1526.13,778.505 1526.69,776.321 1527.25,758.622 1527.81,737.888 1528.36,750.959 1528.92,732.939 1529.48,732.164 1530.04,646.273 1530.6,679.22 1531.16,664.552 1531.72,665.998 1532.28,679.517 1532.84,666.896 1533.4,715.557 1533.96,716.582 1534.52,715.023 1535.08,696.164 1535.63,682.739 1536.19,699.649 1536.75,665.833 1537.31,650.843 1537.87,657.591 1538.43,661.829 1538.99,681.665 1539.55,680.463 1540.11,681.275 1540.67,728.894 1541.23,742.41 1541.79,755.715 1542.35,719.639 1542.9,698.829 1543.46,715.093 1544.02,696.138 1544.58,647.557 1545.14,634.921 1545.7,654.668 1546.26,657.622 1546.82,623.576 1547.38,628.471 1547.94,628.606 1548.5,628.522 1549.06,613.847 1549.62,619.504 1550.18,635.409 1550.73,622.568 1551.29,658.137 1551.85,674.686 1552.41,679.125 1552.97,665.664 1553.53,682.417 1554.09,697.902 1554.65,698.663 1555.21,699.334 1555.77,682.816 1556.33,714.655 1556.89,727.301 1557.45,706.871 1558,689.617 1558.56,654.158 1559.12,685.553 1559.68,672.793 1560.24,694.399 1560.8,694.381 1561.36,693.288 1561.92,692.091 1562.48,674.981 1563.04,688.913 1563.6,691.22 1564.16,705.233 1564.72,625.733 1565.28,595.03 1565.83,619.056 1566.39,641.966 1566.95,627.816 1567.51,646.978 1568.07,617.868 1568.63,651.715 1569.19,687.083 1569.75,685.788 1570.31,720.09 1570.87,717.962 1571.43,713.794 1571.99,693.102 1572.55,723.06 1573.1,725.873 1573.66,706.356 1574.22,703.649 1574.78,701.73 1575.34,699.364 1575.9,700.114 1576.46,700.768 1577.02,728.927 1577.58,723.913 1578.14,701.53 1578.7,701.101 1579.26,714.001 1579.82,694.169 1580.37,690.434 1580.93,658.682 1581.49,658.295 1582.05,692.767 1582.61,640.717 1583.17,660.873 1583.73,676.737 1584.29,675.625 1584.85,677.191 1585.41,675.55 1585.97,674.118 1586.53,705.458 1587.09,703.397 1587.65,698.468 1588.2,697.727 1588.76,695.468 1589.32,680.801 1589.88,663.674 1590.44,666.805 1591,665.345 1591.56,651.171 1592.12,652.045 1592.68,638.032 1593.24,623.61 1593.8,611.66 1594.36,647.959 1594.92,680.578 1595.47,695.603 1596.03,704.838 1596.59,704.789 1597.15,701.158 1597.71,729.389 1598.27,725.511 1598.83,742.437 1599.39,739.306 1599.95,764.838 1600.51,775.4 1601.07,769.856 1601.63,750.916 1602.19,748.628 1602.74,697.374 1603.3,685.278 1603.86,669.547 1604.42,669.143 1604.98,671.381 1605.54,670.472 1606.1,689.46 1606.66,704.83 1607.22,718.859 1607.78,718.246 1608.34,713.969 1608.9,729.75 1609.46,726.552 1610.02,738.353 1610.57,733.158 1611.13,729.577 1611.69,743.272 1612.25,708.675 1612.81,723.135 1613.37,687.808 1613.93,659.206 1614.49,610.994 1615.05,646.52 1615.61,668.376 1616.17,657.015 1616.73,640.613 1617.29,643.299 1617.84,663.869 1618.4,682.951 1618.96,651.032 1619.52,667.589 1620.08,639.882 1620.64,657.744 1621.2,654.867 1621.76,690.732 1622.32,643.926 1622.88,676.084 1623.44,694.225 1624,696.167 1624.56,699.627 1625.11,714.776 1625.67,716.095 1626.23,694.96 1626.79,724.796 1627.35,705.797 1627.91,657.378 1628.47,625.736 1629.03,660.792 1629.59,663.661 1630.15,678.184 1630.71,695.998 1631.27,680.486 1631.83,712.66 1632.39,759.152 1632.94,772.905 1633.5,732.437 1634.06,665.953 1634.62,668.134 1635.18,689.565 1635.74,737.393 1636.3,721.978 1636.86,702.245 1637.42,749.722 1637.98,747.619 1638.54,744.684 1639.1,756.341 1639.66,751.461 1640.21,717.959 1640.77,714.391 1641.33,711.165 1641.89,710.684 1642.45,693.042 1643.01,707.849 1643.57,722.283 1644.13,705.106 1644.69,704.407 1645.25,701.208 1645.81,682.251 1646.37,680.596 1646.93,662.796 1647.48,678.312 1648.04,681.228 1648.6,684.847 1649.16,697.526 1649.72,694.585 1650.28,710.757 1650.84,676.879 1651.4,693.221 1651.96,692.014 1652.52,706.064 1653.08,654.802 1653.64,643.799 1654.2,676.42 1654.76,694.95 1655.31,658.923 1655.87,642.571 1656.43,660.586 1656.99,677.113 1657.55,721.996 1658.11,719.933 1658.67,669.844 1659.23,656.196 1659.79,692.627 1660.35,674.189 1660.91,660.631 1661.47,675.779 1662.03,708.331 1662.58,690.829 1663.14,691.348 1663.7,692.916 1664.26,660.886 1664.82,645.415 1665.38,663.598 1665.94,679.128 1666.5,693.274 1667.06,675.443 1667.62,646.687 1668.18,644.925 1668.74,680.041 1669.3,661.116 1669.85,648.913 1670.41,635.166 1670.97,639.673 1671.53,692.002 1672.09,672.023 1672.65,621.959 1673.21,624.569 1673.77,629.224 1674.33,632.746 1674.89,654.784 1675.45,622.551 1676.01,639.461 1676.57,658.187 1677.13,629.735 1677.68,600.862 1678.24,621.248 1678.8,620.283 1679.36,622.557 1679.92,609.049 1680.48,579.244 1681.04,584.877 1681.6,567.827 1682.16,586.407 1682.72,574.761 1683.28,579.058 1683.84,571.328 1684.4,578.442 1684.95,601.001 1685.51,606.672 1686.07,626.863 1686.63,614.618 1687.19,616.452 1687.75,542.21 1688.31,548.881 1688.87,556.305 1689.43,546.225 1689.99,540.216 1690.55,550.221 1691.11,543.349 1691.67,533.639 1692.23,574.965 1692.78,598.412 1693.34,584.41 1693.9,589.718 1694.46,612.323 1695.02,617.454 1695.58,640.12 1696.14,641.79 1696.7,659.368 1697.26,659.125 1697.82,645.826 1698.38,706.103 1698.94,675.245 1699.5,632.393 1700.05,686.947 1700.61,671.794 1701.17,690.631 1701.73,769.149 1702.29,749.324 1702.85,727.67 1703.41,755.523 1703.97,769.047 1704.53,781.385 1705.09,811.359 1705.65,804.869 1706.21,783.191 1706.77,760.749 1707.32,820.065 1707.88,780.572 1708.44,759.211 1709,721.455 1709.56,749.465 1710.12,780.873 1710.68,748.369 1711.24,725.609 1711.8,739.612 1712.36,752.841 1712.92,769.806 1713.48,768.562 1714.04,733.528 1714.6,729.584 1715.15,711.555 1715.71,709.778 1716.27,690.88 1716.83,692.5 1717.39,694.99 1717.95,693.538 1718.51,712.386 1719.07,726.973 1719.63,726.076 1720.19,728.392 1720.75,743.691 1721.31,721.701 1721.87,718.022 1722.42,715.606 1722.98,701.916 1723.54,730.875 1724.1,756.728 1724.66,782.9 1725.22,794.644 1725.78,804.55 1726.34,797.405 1726.9,808.317 1727.46,818.446 1728.02,792.672 1728.58,802.797 1729.14,815.614 1729.69,806.849 1730.25,813.757 1730.81,823.147 1731.37,832.575 1731.93,823.779 1732.49,813.57 1733.05,788.336 1733.61,747.681 1734.17,726.885 1734.73,721.848 1735.29,782.97 1735.85,777.132 1736.41,736.128 1736.97,714.949 1737.52,698.198 1738.08,700.316 1738.64,695.271 1739.2,680.035 1739.76,696.695 1740.32,647.032 1740.88,662.109 1741.44,661.803 1742,662.916 1742.56,695.35 1743.12,694.401 1743.68,696.753 1744.24,727.817 1744.79,724.948 1745.35,723.71 1745.91,724.045 1746.47,705.303 1747.03,736.271 1747.59,736.764 1748.15,731.453 1748.71,713.29 1749.27,727.976 1749.83,708.945 1750.39,639.235 1750.95,627.661 1751.51,633.583 1752.06,591.732 1752.62,580.391 1753.18,638.187 1753.74,692.874 1754.3,691.919 1754.86,629.423 1755.42,616.443 1755.98,648.585 1756.54,665.986 1757.1,651.042 1757.66,698.875 1758.22,668.611 1758.78,655.357 1759.34,658.133 1759.89,660.437 1760.45,647.318 1761.01,617.205 1761.57,638.998 1762.13,643.892 1762.69,663.845 1763.25,682.204 1763.81,695.787 1764.37,707.277 1764.93,703.964 1765.49,700.455 1766.05,713.98 1766.61,716.984 1767.16,762.157 1767.72,746.296 1768.28,729.036 1768.84,710.415 1769.4,698.47 1769.96,668.231 1770.52,685.929 1771.08,687.644 1771.64,735.312 1772.2,731.733 1772.76,728.909 1773.32,727.725 1773.88,724.995 1774.43,724.893 1774.99,721.862 1775.55,751.202 1776.11,745.767 1776.67,742.207 1777.23,775.176 1777.79,740.15 1778.35,718.009 1778.91,735.165 1779.47,731.607 1780.03,741.756 1780.59,738.101 1781.15,751.382 1781.71,761.181 1782.26,722.74 1782.82,735.887 1783.38,733.083 1783.94,747.489 1784.5,757.851 1785.06,752.462 1785.62,749.375 1786.18,780.923 1786.74,794.501 1787.3,786.54 1787.86,745.72 1788.42,675.285 1788.98,628.027 1789.53,645.723 1790.09,630.337 1790.65,617.521 1791.21,619.168 1791.77,653.915 1792.33,689.114 1792.89,676.696 1793.45,694.595 1794.01,664.129 1794.57,693.326 1795.13,708.277 1795.69,737.777 1796.25,749.997 1796.8,762.802 1797.36,742.192 1797.92,710.114 1798.48,692.275 1799.04,704.627 1799.6,703.899 1800.16,703.122 1800.72,701.152 1801.28,698.702 1801.84,681.955 1802.4,683.534 1802.96,666.487 1803.52,647.892 1804.08,651.002 1804.63,665.909 1805.19,681.307 1805.75,680.487 1806.31,683.504 1806.87,702.963 1807.43,717.586 1807.99,718.381 1808.55,716.903 1809.11,715.385 1809.67,696.617 1810.23,664.205 1810.79,665.494 1811.35,666.08 1811.9,684.902 1812.46,682.656 1813.02,668.438 1813.58,656.121 1814.14,659.378 1814.7,660.188 1815.26,648.144 1815.82,637.225 1816.38,625.151 1816.94,630.221 1817.5,619.051 1818.06,623.493 1818.62,627.617 1819.18,680.674 1819.73,678.816 1820.29,712.998 1820.85,712.719 1821.41,744.756 1821.97,770.336 1822.53,750.556 1823.09,748.854 1823.65,715.95 1824.21,698.639 1824.77,682.478 1825.33,619.836 1825.89,605.168 1826.45,626.297 1827,629.586 1827.56,633.695 1828.12,589.504 1828.68,591.985 1829.24,597.113 1829.8,583.406 1830.36,606.027 1830.92,610.381 1831.48,631.082 1832.04,629.508 1832.6,631.831 1833.16,604.372 1833.72,638.718 1834.27,628.842 1834.83,600.329 1835.39,585.033 1835.95,559.105 1836.51,581.892 1837.07,621.14 1837.63,628.088 1838.19,615.029 \"/>\n<path clip-path=\"url(#clip243)\" d=\"M720.247 691.189 L720.806 691.189 L721.365 691.189 L721.924 691.189 L722.484 691.189 L723.043 691.189 L723.602 691.189 L724.161 691.189 L724.721 691.189 L725.28 691.189 L725.839 691.189 L726.398 691.189 L726.958 691.189 L727.517 691.189 L728.076 691.189 L728.635 691.189 L729.195 691.189 L729.754 691.189 L730.313 691.189 L730.872 691.189 L731.432 691.189 L731.991 691.189 L732.55 691.189 L733.109 691.189 L733.669 691.189 L734.228 691.189 L734.787 691.189 L735.346 691.189 L735.906 691.189 L736.465 691.189 L737.024 691.189 L737.583 691.189 L738.143 691.189 L738.702 691.189 L739.261 691.189 L739.82 691.189 L740.38 691.189 L740.939 691.189 L741.498 691.189 L742.057 691.189 L742.617 691.189 L743.176 691.189 L743.735 691.189 L744.294 691.189 L744.854 691.189 L745.413 691.189 L745.972 691.189 L746.531 691.189 L747.091 691.189 L747.65 691.189 L748.209 691.189 L748.768 691.189 L749.328 691.189 L749.887 691.189 L750.446 691.189 L751.005 691.189 L751.565 691.189 L752.124 691.189 L752.683 691.189 L753.242 691.189 L753.802 691.189 L754.361 691.189 L754.92 691.189 L755.479 691.189 L756.039 691.189 L756.598 691.189 L757.157 691.189 L757.716 691.189 L758.276 691.189 L758.835 691.189 L759.394 691.189 L759.953 691.189 L760.513 691.189 L761.072 691.189 L761.631 691.189 L762.19 691.189 L762.75 691.189 L763.309 691.189 L763.868 691.189 L764.427 691.189 L764.987 691.189 L765.546 691.189 L766.105 691.189 L766.664 691.189 L767.224 691.189 L767.783 691.189 L768.342 691.189 L768.901 691.189 L769.461 691.189 L770.02 691.189 L770.579 691.189 L771.138 691.189 L771.698 691.189 L772.257 691.189 L772.816 691.189 L773.375 691.189 L773.935 691.189 L774.494 691.189 L775.053 691.189 L775.612 691.189 L776.172 691.189 L776.731 691.189 L777.29 691.189 L777.849 691.189 L778.409 691.189 L778.968 691.189 L779.527 691.189 L780.086 691.189 L780.646 691.189 L781.205 691.189 L781.764 691.189 L782.323 691.189 L782.883 691.189 L783.442 691.189 L784.001 691.189 L784.56 691.189 L785.12 691.189 L785.679 691.189 L786.238 691.189 L786.797 691.189 L787.357 691.189 L787.916 691.189 L788.475 691.189 L789.034 691.189 L789.594 691.189 L790.153 691.189 L790.712 691.189 L791.271 691.189 L791.831 691.189 L792.39 691.189 L792.949 691.189 L793.508 691.189 L794.068 691.189 L794.627 691.189 L795.186 691.189 L795.745 691.189 L796.305 691.189 L796.864 691.189 L797.423 691.189 L797.982 691.189 L798.542 691.189 L799.101 691.189 L799.66 691.189 L800.219 691.189 L800.779 691.189 L801.338 691.189 L801.897 691.189 L802.456 691.189 L803.016 691.189 L803.575 691.189 L804.134 691.189 L804.693 691.189 L805.253 691.189 L805.812 691.189 L806.371 691.189 L806.931 691.189 L807.49 691.189 L808.049 691.189 L808.608 691.189 L809.168 691.189 L809.727 691.189 L810.286 691.189 L810.845 691.189 L811.405 691.189 L811.964 691.189 L812.523 691.189 L813.082 691.189 L813.642 691.189 L814.201 691.189 L814.76 691.189 L815.319 691.189 L815.879 691.189 L816.438 691.189 L816.997 691.189 L817.556 691.189 L818.116 691.189 L818.675 691.189 L819.234 691.189 L819.793 691.189 L820.353 691.189 L820.912 691.189 L821.471 691.189 L822.03 691.189 L822.59 691.189 L823.149 691.189 L823.708 691.189 L824.267 691.189 L824.827 691.189 L825.386 691.189 L825.945 691.189 L826.504 691.189 L827.064 691.189 L827.623 691.189 L828.182 691.189 L828.741 691.189 L829.301 691.189 L829.86 691.189 L830.419 691.189 L830.978 691.189 L831.538 691.189 L832.097 691.189 L832.656 691.189 L833.215 691.189 L833.775 691.189 L834.334 691.189 L834.893 691.189 L835.452 691.189 L836.012 691.189 L836.571 691.189 L837.13 691.189 L837.689 691.189 L838.249 691.189 L838.808 691.189 L839.367 691.189 L839.926 691.189 L840.486 691.189 L841.045 691.189 L841.604 691.189 L842.163 691.189 L842.723 691.189 L843.282 691.189 L843.841 691.189 L844.4 691.189 L844.96 691.189 L845.519 691.189 L846.078 691.189 L846.637 691.189 L847.197 691.189 L847.756 691.189 L848.315 691.189 L848.874 691.189 L849.434 691.189 L849.993 691.189 L850.552 691.189 L851.111 691.189 L851.671 691.189 L852.23 691.189 L852.789 691.189 L853.348 691.189 L853.908 691.189 L854.467 691.189 L855.026 691.189 L855.585 691.189 L856.145 691.189 L856.704 691.189 L857.263 691.189 L857.822 691.189 L858.382 691.189 L858.941 691.189 L859.5 691.189 L860.059 691.189 L860.619 691.189 L861.178 691.189 L861.737 691.189 L862.296 691.189 L862.856 691.189 L863.415 691.189 L863.974 691.189 L864.533 691.189 L865.093 691.189 L865.652 691.189 L866.211 691.189 L866.77 691.189 L867.33 691.189 L867.889 691.189 L868.448 691.189 L869.007 691.189 L869.567 691.189 L870.126 691.189 L870.685 691.189 L871.244 691.189 L871.804 691.189 L872.363 691.189 L872.922 691.189 L873.481 691.189 L874.041 691.189 L874.6 691.189 L875.159 691.189 L875.718 691.189 L876.278 691.189 L876.837 691.189 L877.396 691.189 L877.955 691.189 L878.515 691.189 L879.074 691.189 L879.633 691.189 L880.192 691.189 L880.752 691.189 L881.311 691.189 L881.87 691.189 L882.429 691.189 L882.989 691.189 L883.548 691.189 L884.107 691.189 L884.666 691.189 L885.226 691.189 L885.785 691.189 L886.344 691.189 L886.903 691.189 L887.463 691.189 L888.022 691.189 L888.581 691.189 L889.14 691.189 L889.7 691.189 L890.259 691.189 L890.818 691.189 L891.377 691.189 L891.937 691.189 L892.496 691.189 L893.055 691.189 L893.614 691.189 L894.174 691.189 L894.733 691.189 L895.292 691.189 L895.851 691.189 L896.411 691.189 L896.97 691.189 L897.529 691.189 L898.088 691.189 L898.648 691.189 L899.207 691.189 L899.766 691.189 L900.325 691.189 L900.885 691.189 L901.444 691.189 L902.003 691.189 L902.562 691.189 L903.122 691.189 L903.681 691.189 L904.24 691.189 L904.799 691.189 L905.359 691.189 L905.918 691.189 L906.477 691.189 L907.036 691.189 L907.596 691.189 L908.155 691.189 L908.714 691.189 L909.273 691.189 L909.833 691.189 L910.392 691.189 L910.951 691.189 L911.51 691.189 L912.07 691.189 L912.629 691.189 L913.188 691.189 L913.747 691.189 L914.307 691.189 L914.866 691.189 L915.425 691.189 L915.984 691.189 L916.544 691.189 L917.103 691.189 L917.662 691.189 L918.221 691.189 L918.781 691.189 L919.34 691.189 L919.899 691.189 L920.458 691.189 L921.018 691.189 L921.577 691.189 L922.136 691.189 L922.695 691.189 L923.255 691.189 L923.814 691.189 L924.373 691.189 L924.932 691.189 L925.492 691.189 L926.051 691.189 L926.61 691.189 L927.169 691.189 L927.729 691.189 L928.288 691.189 L928.847 691.189 L929.406 691.189 L929.966 691.189 L930.525 691.189 L931.084 691.189 L931.644 691.189 L932.203 691.189 L932.762 691.189 L933.321 691.189 L933.881 691.189 L934.44 691.189 L934.999 691.189 L935.558 691.189 L936.118 691.189 L936.677 691.189 L937.236 691.189 L937.795 691.189 L938.355 691.189 L938.914 691.189 L939.473 691.189 L940.032 691.189 L940.592 691.189 L941.151 691.189 L941.71 691.189 L942.269 691.189 L942.829 691.189 L943.388 691.189 L943.947 691.189 L944.506 691.189 L945.066 691.189 L945.625 691.189 L946.184 691.189 L946.743 691.189 L947.303 691.189 L947.862 691.189 L948.421 691.189 L948.98 691.189 L949.54 691.189 L950.099 691.189 L950.658 691.189 L951.217 691.189 L951.777 691.189 L952.336 691.189 L952.895 691.189 L953.454 691.189 L954.014 691.189 L954.573 691.189 L955.132 691.189 L955.691 691.189 L956.251 691.189 L956.81 691.189 L957.369 691.189 L957.928 691.189 L958.488 691.189 L959.047 691.189 L959.606 691.189 L960.165 691.189 L960.725 691.189 L961.284 691.189 L961.843 691.189 L962.402 691.189 L962.962 691.189 L963.521 691.189 L964.08 691.189 L964.639 691.189 L965.199 691.189 L965.758 691.189 L966.317 691.189 L966.876 691.189 L967.436 691.189 L967.995 691.189 L968.554 691.189 L969.113 691.189 L969.673 691.189 L970.232 691.189 L970.791 691.189 L971.35 691.189 L971.91 691.189 L972.469 691.189 L973.028 691.189 L973.587 691.189 L974.147 691.189 L974.706 691.189 L975.265 691.189 L975.824 691.189 L976.384 691.189 L976.943 691.189 L977.502 691.189 L978.061 691.189 L978.621 691.189 L979.18 691.189 L979.739 691.189 L980.298 691.189 L980.858 691.189 L981.417 691.189 L981.976 691.189 L982.535 691.189 L983.095 691.189 L983.654 691.189 L984.213 691.189 L984.772 691.189 L985.332 691.189 L985.891 691.189 L986.45 691.189 L987.009 691.189 L987.569 691.189 L988.128 691.189 L988.687 691.189 L989.246 691.189 L989.806 691.189 L990.365 691.189 L990.924 691.189 L991.483 691.189 L992.043 691.189 L992.602 691.189 L993.161 691.189 L993.72 691.189 L994.28 691.189 L994.839 691.189 L995.398 691.189 L995.957 691.189 L996.517 691.189 L997.076 691.189 L997.635 691.189 L998.194 691.189 L998.754 691.189 L999.313 691.189 L999.872 691.189 L1000.43 691.189 L1000.99 691.189 L1001.55 691.189 L1002.11 691.189 L1002.67 691.189 L1003.23 691.189 L1003.79 691.189 L1004.35 691.189 L1004.91 691.189 L1005.46 691.189 L1006.02 691.189 L1006.58 691.189 L1007.14 691.189 L1007.7 691.189 L1008.26 691.189 L1008.82 691.189 L1009.38 691.189 L1009.94 691.189 L1010.5 691.189 L1011.06 691.189 L1011.62 691.189 L1012.18 691.189 L1012.73 691.189 L1013.29 691.189 L1013.85 691.189 L1014.41 691.189 L1014.97 691.189 L1015.53 691.189 L1016.09 691.189 L1016.65 691.189 L1017.21 691.189 L1017.77 691.189 L1018.33 691.189 L1018.89 691.189 L1019.45 691.189 L1020.01 691.189 L1020.56 691.189 L1021.12 691.189 L1021.68 691.189 L1022.24 691.189 L1022.8 691.189 L1023.36 691.189 L1023.92 691.189 L1024.48 691.189 L1025.04 691.189 L1025.6 691.189 L1026.16 691.189 L1026.72 691.189 L1027.28 691.189 L1027.83 691.189 L1028.39 691.189 L1028.95 691.189 L1029.51 691.189 L1030.07 691.189 L1030.63 691.189 L1031.19 691.189 L1031.75 691.189 L1032.31 691.189 L1032.87 691.189 L1033.43 691.189 L1033.99 691.189 L1034.55 691.189 L1035.1 691.189 L1035.66 691.189 L1036.22 691.189 L1036.78 691.189 L1037.34 691.189 L1037.9 691.189 L1038.46 691.189 L1039.02 691.189 L1039.58 691.189 L1040.14 691.189 L1040.7 691.189 L1041.26 691.189 L1041.82 691.189 L1042.38 691.189 L1042.93 691.189 L1043.49 691.189 L1044.05 691.189 L1044.61 691.189 L1045.17 691.189 L1045.73 691.189 L1046.29 691.189 L1046.85 691.189 L1047.41 691.189 L1047.97 691.189 L1048.53 691.189 L1049.09 691.189 L1049.65 691.189 L1050.2 691.189 L1050.76 691.189 L1051.32 691.189 L1051.88 691.189 L1052.44 691.189 L1053 691.189 L1053.56 691.189 L1054.12 691.189 L1054.68 691.189 L1055.24 691.189 L1055.8 691.189 L1056.36 691.189 L1056.92 691.189 L1057.48 691.189 L1058.03 691.189 L1058.59 691.189 L1059.15 691.189 L1059.71 691.189 L1060.27 691.189 L1060.83 691.189 L1061.39 691.189 L1061.95 691.189 L1062.51 691.189 L1063.07 691.189 L1063.63 691.189 L1064.19 691.189 L1064.75 691.189 L1065.3 691.189 L1065.86 691.189 L1066.42 691.189 L1066.98 691.189 L1067.54 691.189 L1068.1 691.189 L1068.66 691.189 L1069.22 691.189 L1069.78 691.189 L1070.34 691.189 L1070.9 691.189 L1071.46 691.189 L1072.02 691.189 L1072.57 691.189 L1073.13 691.189 L1073.69 691.189 L1074.25 691.189 L1074.81 691.189 L1075.37 691.189 L1075.93 691.189 L1076.49 691.189 L1077.05 691.189 L1077.61 691.189 L1078.17 691.189 L1078.73 691.189 L1079.29 691.189 L1079.85 691.189 L1080.4 691.189 L1080.96 691.189 L1081.52 691.189 L1082.08 691.189 L1082.64 691.189 L1083.2 691.189 L1083.76 691.189 L1084.32 691.189 L1084.88 691.189 L1085.44 691.189 L1086 691.189 L1086.56 691.189 L1087.12 691.189 L1087.67 691.189 L1088.23 691.189 L1088.79 691.189 L1089.35 691.189 L1089.91 691.189 L1090.47 691.189 L1091.03 691.189 L1091.59 691.189 L1092.15 691.189 L1092.71 691.189 L1093.27 691.189 L1093.83 691.189 L1094.39 691.189 L1094.94 691.189 L1095.5 691.189 L1096.06 691.189 L1096.62 691.189 L1097.18 691.189 L1097.74 691.189 L1098.3 691.189 L1098.86 691.189 L1099.42 691.189 L1099.98 691.189 L1100.54 691.189 L1101.1 691.189 L1101.66 691.189 L1102.22 691.189 L1102.77 691.189 L1103.33 691.189 L1103.89 691.189 L1104.45 691.189 L1105.01 691.189 L1105.57 691.189 L1106.13 691.189 L1106.69 691.189 L1107.25 691.189 L1107.81 691.189 L1108.37 691.189 L1108.93 691.189 L1109.49 691.189 L1110.04 691.189 L1110.6 691.189 L1111.16 691.189 L1111.72 691.189 L1112.28 691.189 L1112.84 691.189 L1113.4 691.189 L1113.96 691.189 L1114.52 691.189 L1115.08 691.189 L1115.64 691.189 L1116.2 691.189 L1116.76 691.189 L1117.31 691.189 L1117.87 691.189 L1118.43 691.189 L1118.99 691.189 L1119.55 691.189 L1120.11 691.189 L1120.67 691.189 L1121.23 691.189 L1121.79 691.189 L1122.35 691.189 L1122.91 691.189 L1123.47 691.189 L1124.03 691.189 L1124.59 691.189 L1125.14 691.189 L1125.7 691.189 L1126.26 691.189 L1126.82 691.189 L1127.38 691.189 L1127.94 691.189 L1128.5 691.189 L1129.06 691.189 L1129.62 691.189 L1130.18 691.189 L1130.74 691.189 L1131.3 691.189 L1131.86 691.189 L1132.41 691.189 L1132.97 691.189 L1133.53 691.189 L1134.09 691.189 L1134.65 691.189 L1135.21 691.189 L1135.77 691.189 L1136.33 691.189 L1136.89 691.189 L1137.45 691.189 L1138.01 691.189 L1138.57 691.189 L1139.13 691.189 L1139.68 691.189 L1140.24 691.189 L1140.8 691.189 L1141.36 691.189 L1141.92 691.189 L1142.48 691.189 L1143.04 691.189 L1143.6 691.189 L1144.16 691.189 L1144.72 691.189 L1145.28 691.189 L1145.84 691.189 L1146.4 691.189 L1146.96 691.189 L1147.51 691.189 L1148.07 691.189 L1148.63 691.189 L1149.19 691.189 L1149.75 691.189 L1150.31 691.189 L1150.87 691.189 L1151.43 691.189 L1151.99 691.189 L1152.55 691.189 L1153.11 691.189 L1153.67 691.189 L1154.23 691.189 L1154.78 691.189 L1155.34 691.189 L1155.9 691.189 L1156.46 691.189 L1157.02 691.189 L1157.58 691.189 L1158.14 691.189 L1158.7 691.189 L1159.26 691.189 L1159.82 691.189 L1160.38 691.189 L1160.94 691.189 L1161.5 691.189 L1162.05 691.189 L1162.61 691.189 L1163.17 691.189 L1163.73 691.189 L1164.29 691.189 L1164.85 691.189 L1165.41 691.189 L1165.97 691.189 L1166.53 691.189 L1167.09 691.189 L1167.65 691.189 L1168.21 691.189 L1168.77 691.189 L1169.33 691.189 L1169.88 691.189 L1170.44 691.189 L1171 691.189 L1171.56 691.189 L1172.12 691.189 L1172.68 691.189 L1173.24 691.189 L1173.8 691.189 L1174.36 691.189 L1174.92 691.189 L1175.48 691.189 L1176.04 691.189 L1176.6 691.189 L1177.15 691.189 L1177.71 691.189 L1178.27 691.189 L1178.83 691.189 L1179.39 691.189 L1179.95 691.189 L1180.51 691.189 L1181.07 691.189 L1181.63 691.189 L1182.19 691.189 L1182.75 691.189 L1183.31 691.189 L1183.87 691.189 L1184.43 691.189 L1184.98 691.189 L1185.54 691.189 L1186.1 691.189 L1186.66 691.189 L1187.22 691.189 L1187.78 691.189 L1188.34 691.189 L1188.9 691.189 L1189.46 691.189 L1190.02 691.189 L1190.58 691.189 L1191.14 691.189 L1191.7 691.189 L1192.25 691.189 L1192.81 691.189 L1193.37 691.189 L1193.93 691.189 L1194.49 691.189 L1195.05 691.189 L1195.61 691.189 L1196.17 691.189 L1196.73 691.189 L1197.29 691.189 L1197.85 691.189 L1198.41 691.189 L1198.97 691.189 L1199.52 691.189 L1200.08 691.189 L1200.64 691.189 L1201.2 691.189 L1201.76 691.189 L1202.32 691.189 L1202.88 691.189 L1203.44 691.189 L1204 691.189 L1204.56 691.189 L1205.12 691.189 L1205.68 691.189 L1206.24 691.189 L1206.8 691.189 L1207.35 691.189 L1207.91 691.189 L1208.47 691.189 L1209.03 691.189 L1209.59 691.189 L1210.15 691.189 L1210.71 691.189 L1211.27 691.189 L1211.83 691.189 L1212.39 691.189 L1212.95 691.189 L1213.51 691.189 L1214.07 691.189 L1214.62 691.189 L1215.18 691.189 L1215.74 691.189 L1216.3 691.189 L1216.86 691.189 L1217.42 691.189 L1217.98 691.189 L1218.54 691.189 L1219.1 691.189 L1219.66 691.189 L1220.22 691.189 L1220.78 691.189 L1221.34 691.189 L1221.89 691.189 L1222.45 691.189 L1223.01 691.189 L1223.57 691.189 L1224.13 691.189 L1224.69 691.189 L1225.25 691.189 L1225.81 691.189 L1226.37 691.189 L1226.93 691.189 L1227.49 691.189 L1228.05 691.189 L1228.61 691.189 L1229.17 691.189 L1229.72 691.189 L1230.28 691.189 L1230.84 691.189 L1231.4 691.189 L1231.96 691.189 L1232.52 691.189 L1233.08 691.189 L1233.64 691.189 L1234.2 691.189 L1234.76 691.189 L1235.32 691.189 L1235.88 691.189 L1236.44 691.189 L1236.99 691.189 L1237.55 691.189 L1238.11 691.189 L1238.67 691.189 L1239.23 691.189 L1239.79 691.189 L1240.35 691.189 L1240.91 691.189 L1241.47 691.189 L1242.03 691.189 L1242.59 691.189 L1243.15 691.189 L1243.71 691.189 L1244.26 691.189 L1244.82 691.189 L1245.38 691.189 L1245.94 691.189 L1246.5 691.189 L1247.06 691.189 L1247.62 691.189 L1248.18 691.189 L1248.74 691.189 L1249.3 691.189 L1249.86 691.189 L1250.42 691.189 L1250.98 691.189 L1251.54 691.189 L1252.09 691.189 L1252.65 691.189 L1253.21 691.189 L1253.77 691.189 L1254.33 691.189 L1254.89 691.189 L1255.45 691.189 L1256.01 691.189 L1256.57 691.189 L1257.13 691.189 L1257.69 691.189 L1258.25 691.189 L1258.81 691.189 L1259.36 691.189 L1259.92 691.189 L1260.48 691.189 L1261.04 691.189 L1261.6 691.189 L1262.16 691.189 L1262.72 691.189 L1263.28 691.189 L1263.84 691.189 L1264.4 691.189 L1264.96 691.189 L1265.52 691.189 L1266.08 691.189 L1266.63 691.189 L1267.19 691.189 L1267.75 691.189 L1268.31 691.189 L1268.87 691.189 L1269.43 691.189 L1269.99 691.189 L1270.55 691.189 L1271.11 691.189 L1271.67 691.189 L1272.23 691.189 L1272.79 691.189 L1273.35 691.189 L1273.91 691.189 L1274.46 691.189 L1275.02 691.189 L1275.58 691.189 L1276.14 691.189 L1276.7 691.189 L1277.26 691.189 L1277.82 691.189 L1278.38 691.189 L1278.94 691.189 L1279.5 691.189 L1280.06 691.189 L1280.62 691.189 L1281.18 691.189 L1281.73 691.189 L1282.29 691.189 L1282.85 691.189 L1283.41 691.189 L1283.97 691.189 L1284.53 691.189 L1285.09 691.189 L1285.65 691.189 L1286.21 691.189 L1286.77 691.189 L1287.33 691.189 L1287.89 691.189 L1288.45 691.189 L1289 691.189 L1289.56 691.189 L1290.12 691.189 L1290.68 691.189 L1291.24 691.189 L1291.8 691.189 L1292.36 691.189 L1292.92 691.189 L1293.48 691.189 L1294.04 691.189 L1294.6 691.189 L1295.16 691.189 L1295.72 691.189 L1296.28 691.189 L1296.83 691.189 L1297.39 691.189 L1297.95 691.189 L1298.51 691.189 L1299.07 691.189 L1299.63 691.189 L1300.19 691.189 L1300.75 691.189 L1301.31 691.189 L1301.87 691.189 L1302.43 691.189 L1302.99 691.189 L1303.55 691.189 L1304.1 691.189 L1304.66 691.189 L1305.22 691.189 L1305.78 691.189 L1306.34 691.189 L1306.9 691.189 L1307.46 691.189 L1308.02 691.189 L1308.58 691.189 L1309.14 691.189 L1309.7 691.189 L1310.26 691.189 L1310.82 691.189 L1311.38 691.189 L1311.93 691.189 L1312.49 691.189 L1313.05 691.189 L1313.61 691.189 L1314.17 691.189 L1314.73 691.189 L1315.29 691.189 L1315.85 691.189 L1316.41 691.189 L1316.97 691.189 L1317.53 691.189 L1318.09 691.189 L1318.65 691.189 L1319.2 691.189 L1319.76 691.189 L1320.32 691.189 L1320.88 691.189 L1321.44 691.189 L1322 691.189 L1322.56 691.189 L1323.12 691.189 L1323.68 691.189 L1324.24 691.189 L1324.8 691.189 L1325.36 691.189 L1325.92 691.189 L1326.47 691.189 L1327.03 691.189 L1327.59 691.189 L1328.15 691.189 L1328.71 691.189 L1329.27 691.189 L1329.83 691.189 L1330.39 691.189 L1330.95 691.189 L1331.51 691.189 L1332.07 691.189 L1332.63 691.189 L1333.19 691.189 L1333.75 691.189 L1334.3 691.189 L1334.86 691.189 L1335.42 691.189 L1335.98 691.189 L1336.54 691.189 L1337.1 691.189 L1337.66 691.189 L1338.22 691.189 L1338.78 691.189 L1339.34 691.189 L1339.9 691.189 L1340.46 691.189 L1341.02 691.189 L1341.57 691.189 L1342.13 691.189 L1342.69 691.189 L1343.25 691.189 L1343.81 691.189 L1344.37 691.189 L1344.93 691.189 L1345.49 691.189 L1346.05 691.189 L1346.61 691.189 L1347.17 691.189 L1347.73 691.189 L1348.29 691.189 L1348.84 691.189 L1349.4 691.189 L1349.96 691.189 L1350.52 691.189 L1351.08 691.189 L1351.64 691.189 L1352.2 691.189 L1352.76 691.189 L1353.32 691.189 L1353.88 691.189 L1354.44 691.189 L1355 691.189 L1355.56 691.189 L1356.12 691.189 L1356.67 691.189 L1357.23 691.189 L1357.79 691.189 L1358.35 691.189 L1358.91 691.189 L1359.47 691.189 L1360.03 691.189 L1360.59 691.189 L1361.15 691.189 L1361.71 691.189 L1362.27 691.189 L1362.83 691.189 L1363.39 691.189 L1363.94 691.189 L1364.5 691.189 L1365.06 691.189 L1365.62 691.189 L1366.18 691.189 L1366.74 691.189 L1367.3 691.189 L1367.86 691.189 L1368.42 691.189 L1368.98 691.189 L1369.54 691.189 L1370.1 691.189 L1370.66 691.189 L1371.21 691.189 L1371.77 691.189 L1372.33 691.189 L1372.89 691.189 L1373.45 691.189 L1374.01 691.189 L1374.57 691.189 L1375.13 691.189 L1375.69 691.189 L1376.25 691.189 L1376.81 691.189 L1377.37 691.189 L1377.93 691.189 L1378.49 691.189 L1379.04 691.189 L1379.6 691.189 L1380.16 691.189 L1380.72 691.189 L1381.28 691.189 L1381.84 691.189 L1382.4 691.189 L1382.96 691.189 L1383.52 691.189 L1384.08 691.189 L1384.64 691.189 L1385.2 691.189 L1385.76 691.189 L1386.31 691.189 L1386.87 691.189 L1387.43 691.189 L1387.99 691.189 L1388.55 691.189 L1389.11 691.189 L1389.67 691.189 L1390.23 691.189 L1390.79 691.189 L1391.35 691.189 L1391.91 691.189 L1392.47 691.189 L1393.03 691.189 L1393.58 691.189 L1394.14 691.189 L1394.7 691.189 L1395.26 691.189 L1395.82 691.189 L1396.38 691.189 L1396.94 691.189 L1397.5 691.189 L1398.06 691.189 L1398.62 691.189 L1399.18 691.189 L1399.74 691.189 L1400.3 691.189 L1400.86 691.189 L1401.41 691.189 L1401.97 691.189 L1402.53 691.189 L1403.09 691.189 L1403.65 691.189 L1404.21 691.189 L1404.77 691.189 L1405.33 691.189 L1405.89 691.189 L1406.45 691.189 L1407.01 691.189 L1407.57 691.189 L1408.13 691.189 L1408.68 691.189 L1409.24 691.189 L1409.8 691.189 L1410.36 691.189 L1410.92 691.189 L1411.48 691.189 L1412.04 691.189 L1412.6 691.189 L1413.16 691.189 L1413.72 691.189 L1414.28 691.189 L1414.84 691.189 L1415.4 691.189 L1415.95 691.189 L1416.51 691.189 L1417.07 691.189 L1417.63 691.189 L1418.19 691.189 L1418.75 691.189 L1419.31 691.189 L1419.87 691.189 L1420.43 691.189 L1420.99 691.189 L1421.55 691.189 L1422.11 691.189 L1422.67 691.189 L1423.23 691.189 L1423.78 691.189 L1424.34 691.189 L1424.9 691.189 L1425.46 691.189 L1426.02 691.189 L1426.58 691.189 L1427.14 691.189 L1427.7 691.189 L1428.26 691.189 L1428.82 691.189 L1429.38 691.189 L1429.94 691.189 L1430.5 691.189 L1431.05 691.189 L1431.61 691.189 L1432.17 691.189 L1432.73 691.189 L1433.29 691.189 L1433.85 691.189 L1434.41 691.189 L1434.97 691.189 L1435.53 691.189 L1436.09 691.189 L1436.65 691.189 L1437.21 691.189 L1437.77 691.189 L1438.33 691.189 L1438.88 691.189 L1439.44 691.189 L1440 691.189 L1440.56 691.189 L1441.12 691.189 L1441.68 691.189 L1442.24 691.189 L1442.8 691.189 L1443.36 691.189 L1443.92 691.189 L1444.48 691.189 L1445.04 691.189 L1445.6 691.189 L1446.15 691.189 L1446.71 691.189 L1447.27 691.189 L1447.83 691.189 L1448.39 691.189 L1448.95 691.189 L1449.51 691.189 L1450.07 691.189 L1450.63 691.189 L1451.19 691.189 L1451.75 691.189 L1452.31 691.189 L1452.87 691.189 L1453.42 691.189 L1453.98 691.189 L1454.54 691.189 L1455.1 691.189 L1455.66 691.189 L1456.22 691.189 L1456.78 691.189 L1457.34 691.189 L1457.9 691.189 L1458.46 691.189 L1459.02 691.189 L1459.58 691.189 L1460.14 691.189 L1460.7 691.189 L1461.25 691.189 L1461.81 691.189 L1462.37 691.189 L1462.93 691.189 L1463.49 691.189 L1464.05 691.189 L1464.61 691.189 L1465.17 691.189 L1465.73 691.189 L1466.29 691.189 L1466.85 691.189 L1467.41 691.189 L1467.97 691.189 L1468.52 691.189 L1469.08 691.189 L1469.64 691.189 L1470.2 691.189 L1470.76 691.189 L1471.32 691.189 L1471.88 691.189 L1472.44 691.189 L1473 691.189 L1473.56 691.189 L1474.12 691.189 L1474.68 691.189 L1475.24 691.189 L1475.79 691.189 L1476.35 691.189 L1476.91 691.189 L1477.47 691.189 L1478.03 691.189 L1478.59 691.189 L1479.15 691.189 L1479.71 691.189 L1480.27 691.189 L1480.83 691.189 L1481.39 691.189 L1481.95 691.189 L1482.51 691.189 L1483.07 691.189 L1483.62 691.189 L1484.18 691.189 L1484.74 691.189 L1485.3 691.189 L1485.86 691.189 L1486.42 691.189 L1486.98 691.189 L1487.54 691.189 L1488.1 691.189 L1488.66 691.189 L1489.22 691.189 L1489.78 691.189 L1490.34 691.189 L1490.89 691.189 L1491.45 691.189 L1492.01 691.189 L1492.57 691.189 L1493.13 691.189 L1493.69 691.189 L1494.25 691.189 L1494.81 691.189 L1495.37 691.189 L1495.93 691.189 L1496.49 691.189 L1497.05 691.189 L1497.61 691.189 L1498.16 691.189 L1498.72 691.189 L1499.28 691.189 L1499.84 691.189 L1500.4 691.189 L1500.96 691.189 L1501.52 691.189 L1502.08 691.189 L1502.64 691.189 L1503.2 691.189 L1503.76 691.189 L1504.32 691.189 L1504.88 691.189 L1505.44 691.189 L1505.99 691.189 L1506.55 691.189 L1507.11 691.189 L1507.67 691.189 L1508.23 691.189 L1508.79 691.189 L1509.35 691.189 L1509.91 691.189 L1510.47 691.189 L1511.03 691.189 L1511.59 691.189 L1512.15 691.189 L1512.71 691.189 L1513.26 691.189 L1513.82 691.189 L1514.38 691.189 L1514.94 691.189 L1515.5 691.189 L1516.06 691.189 L1516.62 691.189 L1517.18 691.189 L1517.74 691.189 L1518.3 691.189 L1518.86 691.189 L1519.42 691.189 L1519.98 691.189 L1520.53 691.189 L1521.09 691.189 L1521.65 691.189 L1522.21 691.189 L1522.77 691.189 L1523.33 691.189 L1523.89 691.189 L1524.45 691.189 L1525.01 691.189 L1525.57 691.189 L1526.13 691.189 L1526.69 691.189 L1527.25 691.189 L1527.81 691.189 L1528.36 691.189 L1528.92 691.189 L1529.48 691.189 L1530.04 691.189 L1530.6 691.189 L1531.16 691.189 L1531.72 691.189 L1532.28 691.189 L1532.84 691.189 L1533.4 691.189 L1533.96 691.189 L1534.52 691.189 L1535.08 691.189 L1535.63 691.189 L1536.19 691.189 L1536.75 691.189 L1537.31 691.189 L1537.87 691.189 L1538.43 691.189 L1538.99 691.189 L1539.55 691.189 L1540.11 691.189 L1540.67 691.189 L1541.23 691.189 L1541.79 691.189 L1542.35 691.189 L1542.9 691.189 L1543.46 691.189 L1544.02 691.189 L1544.58 691.189 L1545.14 691.189 L1545.7 691.189 L1546.26 691.189 L1546.82 691.189 L1547.38 691.189 L1547.94 691.189 L1548.5 691.189 L1549.06 691.189 L1549.62 691.189 L1550.18 691.189 L1550.73 691.189 L1551.29 691.189 L1551.85 691.189 L1552.41 691.189 L1552.97 691.189 L1553.53 691.189 L1554.09 691.189 L1554.65 691.189 L1555.21 691.189 L1555.77 691.189 L1556.33 691.189 L1556.89 691.189 L1557.45 691.189 L1558 691.189 L1558.56 691.189 L1559.12 691.189 L1559.68 691.189 L1560.24 691.189 L1560.8 691.189 L1561.36 691.189 L1561.92 691.189 L1562.48 691.189 L1563.04 691.189 L1563.6 691.189 L1564.16 691.189 L1564.72 691.189 L1565.28 691.189 L1565.83 691.189 L1566.39 691.189 L1566.95 691.189 L1567.51 691.189 L1568.07 691.189 L1568.63 691.189 L1569.19 691.189 L1569.75 691.189 L1570.31 691.189 L1570.87 691.189 L1571.43 691.189 L1571.99 691.189 L1572.55 691.189 L1573.1 691.189 L1573.66 691.189 L1574.22 691.189 L1574.78 691.189 L1575.34 691.189 L1575.9 691.189 L1576.46 691.189 L1577.02 691.189 L1577.58 691.189 L1578.14 691.189 L1578.7 691.189 L1579.26 691.189 L1579.82 691.189 L1580.37 691.189 L1580.93 691.189 L1581.49 691.189 L1582.05 691.189 L1582.61 691.189 L1583.17 691.189 L1583.73 691.189 L1584.29 691.189 L1584.85 691.189 L1585.41 691.189 L1585.97 691.189 L1586.53 691.189 L1587.09 691.189 L1587.65 691.189 L1588.2 691.189 L1588.76 691.189 L1589.32 691.189 L1589.88 691.189 L1590.44 691.189 L1591 691.189 L1591.56 691.189 L1592.12 691.189 L1592.68 691.189 L1593.24 691.189 L1593.8 691.189 L1594.36 691.189 L1594.92 691.189 L1595.47 691.189 L1596.03 691.189 L1596.59 691.189 L1597.15 691.189 L1597.71 691.189 L1598.27 691.189 L1598.83 691.189 L1599.39 691.189 L1599.95 691.189 L1600.51 691.189 L1601.07 691.189 L1601.63 691.189 L1602.19 691.189 L1602.74 691.189 L1603.3 691.189 L1603.86 691.189 L1604.42 691.189 L1604.98 691.189 L1605.54 691.189 L1606.1 691.189 L1606.66 691.189 L1607.22 691.189 L1607.78 691.189 L1608.34 691.189 L1608.9 691.189 L1609.46 691.189 L1610.02 691.189 L1610.57 691.189 L1611.13 691.189 L1611.69 691.189 L1612.25 691.189 L1612.81 691.189 L1613.37 691.189 L1613.93 691.189 L1614.49 691.189 L1615.05 691.189 L1615.61 691.189 L1616.17 691.189 L1616.73 691.189 L1617.29 691.189 L1617.84 691.189 L1618.4 691.189 L1618.96 691.189 L1619.52 691.189 L1620.08 691.189 L1620.64 691.189 L1621.2 691.189 L1621.76 691.189 L1622.32 691.189 L1622.88 691.189 L1623.44 691.189 L1624 691.189 L1624.56 691.189 L1625.11 691.189 L1625.67 691.189 L1626.23 691.189 L1626.79 691.189 L1627.35 691.189 L1627.91 691.189 L1628.47 691.189 L1629.03 691.189 L1629.59 691.189 L1630.15 691.189 L1630.71 691.189 L1631.27 691.189 L1631.83 691.189 L1632.39 691.189 L1632.94 691.189 L1633.5 691.189 L1634.06 691.189 L1634.62 691.189 L1635.18 691.189 L1635.74 691.189 L1636.3 691.189 L1636.86 691.189 L1637.42 691.189 L1637.98 691.189 L1638.54 691.189 L1639.1 691.189 L1639.66 691.189 L1640.21 691.189 L1640.77 691.189 L1641.33 691.189 L1641.89 691.189 L1642.45 691.189 L1643.01 691.189 L1643.57 691.189 L1644.13 691.189 L1644.69 691.189 L1645.25 691.189 L1645.81 691.189 L1646.37 691.189 L1646.93 691.189 L1647.48 691.189 L1648.04 691.189 L1648.6 691.189 L1649.16 691.189 L1649.72 691.189 L1650.28 691.189 L1650.84 691.189 L1651.4 691.189 L1651.96 691.189 L1652.52 691.189 L1653.08 691.189 L1653.64 691.189 L1654.2 691.189 L1654.76 691.189 L1655.31 691.189 L1655.87 691.189 L1656.43 691.189 L1656.99 691.189 L1657.55 691.189 L1658.11 691.189 L1658.67 691.189 L1659.23 691.189 L1659.79 691.189 L1660.35 691.189 L1660.91 691.189 L1661.47 691.189 L1662.03 691.189 L1662.58 691.189 L1663.14 691.189 L1663.7 691.189 L1664.26 691.189 L1664.82 691.189 L1665.38 691.189 L1665.94 691.189 L1666.5 691.189 L1667.06 691.189 L1667.62 691.189 L1668.18 691.189 L1668.74 691.189 L1669.3 691.189 L1669.85 691.189 L1670.41 691.189 L1670.97 691.189 L1671.53 691.189 L1672.09 691.189 L1672.65 691.189 L1673.21 691.189 L1673.77 691.189 L1674.33 691.189 L1674.89 691.189 L1675.45 691.189 L1676.01 691.189 L1676.57 691.189 L1677.13 691.189 L1677.68 691.189 L1678.24 691.189 L1678.8 691.189 L1679.36 691.189 L1679.92 691.189 L1680.48 691.189 L1681.04 691.189 L1681.6 691.189 L1682.16 691.189 L1682.72 691.189 L1683.28 691.189 L1683.84 691.189 L1684.4 691.189 L1684.95 691.189 L1685.51 691.189 L1686.07 691.189 L1686.63 691.189 L1687.19 691.189 L1687.75 691.189 L1688.31 691.189 L1688.87 691.189 L1689.43 691.189 L1689.99 691.189 L1690.55 691.189 L1691.11 691.189 L1691.67 691.189 L1692.23 691.189 L1692.78 691.189 L1693.34 691.189 L1693.9 691.189 L1694.46 691.189 L1695.02 691.189 L1695.58 691.189 L1696.14 691.189 L1696.7 691.189 L1697.26 691.189 L1697.82 691.189 L1698.38 691.189 L1698.94 691.189 L1699.5 691.189 L1700.05 691.189 L1700.61 691.189 L1701.17 691.189 L1701.73 691.189 L1702.29 691.189 L1702.85 691.189 L1703.41 691.189 L1703.97 691.189 L1704.53 691.189 L1705.09 691.189 L1705.65 691.189 L1706.21 691.189 L1706.77 691.189 L1707.32 691.189 L1707.88 691.189 L1708.44 691.189 L1709 691.189 L1709.56 691.189 L1710.12 691.189 L1710.68 691.189 L1711.24 691.189 L1711.8 691.189 L1712.36 691.189 L1712.92 691.189 L1713.48 691.189 L1714.04 691.189 L1714.6 691.189 L1715.15 691.189 L1715.71 691.189 L1716.27 691.189 L1716.83 691.189 L1717.39 691.189 L1717.95 691.189 L1718.51 691.189 L1719.07 691.189 L1719.63 691.189 L1720.19 691.189 L1720.75 691.189 L1721.31 691.189 L1721.87 691.189 L1722.42 691.189 L1722.98 691.189 L1723.54 691.189 L1724.1 691.189 L1724.66 691.189 L1725.22 691.189 L1725.78 691.189 L1726.34 691.189 L1726.9 691.189 L1727.46 691.189 L1728.02 691.189 L1728.58 691.189 L1729.14 691.189 L1729.69 691.189 L1730.25 691.189 L1730.81 691.189 L1731.37 691.189 L1731.93 691.189 L1732.49 691.189 L1733.05 691.189 L1733.61 691.189 L1734.17 691.189 L1734.73 691.189 L1735.29 691.189 L1735.85 691.189 L1736.41 691.189 L1736.97 691.189 L1737.52 691.189 L1738.08 691.189 L1738.64 691.189 L1739.2 691.189 L1739.76 691.189 L1740.32 691.189 L1740.88 691.189 L1741.44 691.189 L1742 691.189 L1742.56 691.189 L1743.12 691.189 L1743.68 691.189 L1744.24 691.189 L1744.79 691.189 L1745.35 691.189 L1745.91 691.189 L1746.47 691.189 L1747.03 691.189 L1747.59 691.189 L1748.15 691.189 L1748.71 691.189 L1749.27 691.189 L1749.83 691.189 L1750.39 691.189 L1750.95 691.189 L1751.51 691.189 L1752.06 691.189 L1752.62 691.189 L1753.18 691.189 L1753.74 691.189 L1754.3 691.189 L1754.86 691.189 L1755.42 691.189 L1755.98 691.189 L1756.54 691.189 L1757.1 691.189 L1757.66 691.189 L1758.22 691.189 L1758.78 691.189 L1759.34 691.189 L1759.89 691.189 L1760.45 691.189 L1761.01 691.189 L1761.57 691.189 L1762.13 691.189 L1762.69 691.189 L1763.25 691.189 L1763.81 691.189 L1764.37 691.189 L1764.93 691.189 L1765.49 691.189 L1766.05 691.189 L1766.61 691.189 L1767.16 691.189 L1767.72 691.189 L1768.28 691.189 L1768.84 691.189 L1769.4 691.189 L1769.96 691.189 L1770.52 691.189 L1771.08 691.189 L1771.64 691.189 L1772.2 691.189 L1772.76 691.189 L1773.32 691.189 L1773.88 691.189 L1774.43 691.189 L1774.99 691.189 L1775.55 691.189 L1776.11 691.189 L1776.67 691.189 L1777.23 691.189 L1777.79 691.189 L1778.35 691.189 L1778.91 691.189 L1779.47 691.189 L1780.03 691.189 L1780.59 691.189 L1781.15 691.189 L1781.71 691.189 L1782.26 691.189 L1782.82 691.189 L1783.38 691.189 L1783.94 691.189 L1784.5 691.189 L1785.06 691.189 L1785.62 691.189 L1786.18 691.189 L1786.74 691.189 L1787.3 691.189 L1787.86 691.189 L1788.42 691.189 L1788.98 691.189 L1789.53 691.189 L1790.09 691.189 L1790.65 691.189 L1791.21 691.189 L1791.77 691.189 L1792.33 691.189 L1792.89 691.189 L1793.45 691.189 L1794.01 691.189 L1794.57 691.189 L1795.13 691.189 L1795.69 691.189 L1796.25 691.189 L1796.8 691.189 L1797.36 691.189 L1797.92 691.189 L1798.48 691.189 L1799.04 691.189 L1799.6 691.189 L1800.16 691.189 L1800.72 691.189 L1801.28 691.189 L1801.84 691.189 L1802.4 691.189 L1802.96 691.189 L1803.52 691.189 L1804.08 691.189 L1804.63 691.189 L1805.19 691.189 L1805.75 691.189 L1806.31 691.189 L1806.87 691.189 L1807.43 691.189 L1807.99 691.189 L1808.55 691.189 L1809.11 691.189 L1809.67 691.189 L1810.23 691.189 L1810.79 691.189 L1811.35 691.189 L1811.9 691.189 L1812.46 691.189 L1813.02 691.189 L1813.58 691.189 L1814.14 691.189 L1814.7 691.189 L1815.26 691.189 L1815.82 691.189 L1816.38 691.189 L1816.94 691.189 L1817.5 691.189 L1818.06 691.189 L1818.62 691.189 L1819.18 691.189 L1819.73 691.189 L1820.29 691.189 L1820.85 691.189 L1821.41 691.189 L1821.97 691.189 L1822.53 691.189 L1823.09 691.189 L1823.65 691.189 L1824.21 691.189 L1824.77 691.189 L1825.33 691.189 L1825.89 691.189 L1826.45 691.189 L1827 691.189 L1827.56 691.189 L1828.12 691.189 L1828.68 691.189 L1829.24 691.189 L1829.8 691.189 L1830.36 691.189 L1830.92 691.189 L1831.48 691.189 L1832.04 691.189 L1832.6 691.189 L1833.16 691.189 L1833.72 691.189 L1834.27 691.189 L1834.83 691.189 L1835.39 691.189 L1835.95 691.189 L1836.51 691.189 L1837.07 691.189 L1837.63 691.189 L1838.19 691.189 L1838.19 680.548 L1837.63 680.548 L1837.07 680.548 L1836.51 680.548 L1835.95 680.548 L1835.39 680.548 L1834.83 680.548 L1834.27 680.548 L1833.72 680.548 L1833.16 680.548 L1832.6 680.548 L1832.04 680.548 L1831.48 680.548 L1830.92 680.548 L1830.36 680.548 L1829.8 680.548 L1829.24 680.548 L1828.68 680.548 L1828.12 680.548 L1827.56 680.548 L1827 680.548 L1826.45 680.548 L1825.89 680.548 L1825.33 680.548 L1824.77 680.548 L1824.21 680.548 L1823.65 680.548 L1823.09 680.548 L1822.53 680.548 L1821.97 680.548 L1821.41 680.548 L1820.85 680.548 L1820.29 680.548 L1819.73 680.548 L1819.18 680.548 L1818.62 680.548 L1818.06 680.548 L1817.5 680.548 L1816.94 680.548 L1816.38 680.548 L1815.82 680.548 L1815.26 680.548 L1814.7 680.548 L1814.14 680.548 L1813.58 680.548 L1813.02 680.548 L1812.46 680.548 L1811.9 680.548 L1811.35 680.548 L1810.79 680.548 L1810.23 680.548 L1809.67 680.548 L1809.11 680.548 L1808.55 680.548 L1807.99 680.548 L1807.43 680.548 L1806.87 680.548 L1806.31 680.548 L1805.75 680.548 L1805.19 680.548 L1804.63 680.548 L1804.08 680.548 L1803.52 680.548 L1802.96 680.548 L1802.4 680.548 L1801.84 680.548 L1801.28 680.548 L1800.72 680.548 L1800.16 680.548 L1799.6 680.548 L1799.04 680.548 L1798.48 680.548 L1797.92 680.548 L1797.36 680.548 L1796.8 680.548 L1796.25 680.548 L1795.69 680.548 L1795.13 680.548 L1794.57 680.548 L1794.01 680.548 L1793.45 680.548 L1792.89 680.548 L1792.33 680.548 L1791.77 680.548 L1791.21 680.548 L1790.65 680.548 L1790.09 680.548 L1789.53 680.548 L1788.98 680.548 L1788.42 680.548 L1787.86 680.548 L1787.3 680.548 L1786.74 680.548 L1786.18 680.548 L1785.62 680.548 L1785.06 680.548 L1784.5 680.548 L1783.94 680.548 L1783.38 680.548 L1782.82 680.548 L1782.26 680.548 L1781.71 680.548 L1781.15 680.548 L1780.59 680.548 L1780.03 680.548 L1779.47 680.548 L1778.91 680.548 L1778.35 680.548 L1777.79 680.548 L1777.23 680.548 L1776.67 680.548 L1776.11 680.548 L1775.55 680.548 L1774.99 680.548 L1774.43 680.548 L1773.88 680.548 L1773.32 680.548 L1772.76 680.548 L1772.2 680.548 L1771.64 680.548 L1771.08 680.548 L1770.52 680.548 L1769.96 680.548 L1769.4 680.548 L1768.84 680.548 L1768.28 680.548 L1767.72 680.548 L1767.16 680.548 L1766.61 680.548 L1766.05 680.548 L1765.49 680.548 L1764.93 680.548 L1764.37 680.548 L1763.81 680.548 L1763.25 680.548 L1762.69 680.548 L1762.13 680.548 L1761.57 680.548 L1761.01 680.548 L1760.45 680.548 L1759.89 680.548 L1759.34 680.548 L1758.78 680.548 L1758.22 680.548 L1757.66 680.548 L1757.1 680.548 L1756.54 680.548 L1755.98 680.548 L1755.42 680.548 L1754.86 680.548 L1754.3 680.548 L1753.74 680.548 L1753.18 680.548 L1752.62 680.548 L1752.06 680.548 L1751.51 680.548 L1750.95 680.548 L1750.39 680.548 L1749.83 680.548 L1749.27 680.548 L1748.71 680.548 L1748.15 680.548 L1747.59 680.548 L1747.03 680.548 L1746.47 680.548 L1745.91 680.548 L1745.35 680.548 L1744.79 680.548 L1744.24 680.548 L1743.68 680.548 L1743.12 680.548 L1742.56 680.548 L1742 680.548 L1741.44 680.548 L1740.88 680.548 L1740.32 680.548 L1739.76 680.548 L1739.2 680.548 L1738.64 680.548 L1738.08 680.548 L1737.52 680.548 L1736.97 680.548 L1736.41 680.548 L1735.85 680.548 L1735.29 680.548 L1734.73 680.548 L1734.17 680.548 L1733.61 680.548 L1733.05 680.548 L1732.49 680.548 L1731.93 680.548 L1731.37 680.548 L1730.81 680.548 L1730.25 680.548 L1729.69 680.548 L1729.14 680.548 L1728.58 680.548 L1728.02 680.548 L1727.46 680.548 L1726.9 680.548 L1726.34 680.548 L1725.78 680.548 L1725.22 680.548 L1724.66 680.548 L1724.1 680.548 L1723.54 680.548 L1722.98 680.548 L1722.42 680.548 L1721.87 680.548 L1721.31 680.548 L1720.75 680.548 L1720.19 680.548 L1719.63 680.548 L1719.07 680.548 L1718.51 680.548 L1717.95 680.548 L1717.39 680.548 L1716.83 680.548 L1716.27 680.548 L1715.71 680.548 L1715.15 680.548 L1714.6 680.548 L1714.04 680.548 L1713.48 680.548 L1712.92 680.548 L1712.36 680.548 L1711.8 680.548 L1711.24 680.548 L1710.68 680.548 L1710.12 680.548 L1709.56 680.548 L1709 680.548 L1708.44 680.548 L1707.88 680.548 L1707.32 680.548 L1706.77 680.548 L1706.21 680.548 L1705.65 680.548 L1705.09 680.548 L1704.53 680.548 L1703.97 680.548 L1703.41 680.548 L1702.85 680.548 L1702.29 680.548 L1701.73 680.548 L1701.17 680.548 L1700.61 680.548 L1700.05 680.548 L1699.5 680.548 L1698.94 680.548 L1698.38 680.548 L1697.82 680.548 L1697.26 680.548 L1696.7 680.548 L1696.14 680.548 L1695.58 680.548 L1695.02 680.548 L1694.46 680.548 L1693.9 680.548 L1693.34 680.548 L1692.78 680.548 L1692.23 680.548 L1691.67 680.548 L1691.11 680.548 L1690.55 680.548 L1689.99 680.548 L1689.43 680.548 L1688.87 680.548 L1688.31 680.548 L1687.75 680.548 L1687.19 680.548 L1686.63 680.548 L1686.07 680.548 L1685.51 680.548 L1684.95 680.548 L1684.4 680.548 L1683.84 680.548 L1683.28 680.548 L1682.72 680.548 L1682.16 680.548 L1681.6 680.548 L1681.04 680.548 L1680.48 680.548 L1679.92 680.548 L1679.36 680.548 L1678.8 680.548 L1678.24 680.548 L1677.68 680.548 L1677.13 680.548 L1676.57 680.548 L1676.01 680.548 L1675.45 680.548 L1674.89 680.548 L1674.33 680.548 L1673.77 680.548 L1673.21 680.548 L1672.65 680.548 L1672.09 680.548 L1671.53 680.548 L1670.97 680.548 L1670.41 680.548 L1669.85 680.548 L1669.3 680.548 L1668.74 680.548 L1668.18 680.548 L1667.62 680.548 L1667.06 680.548 L1666.5 680.548 L1665.94 680.548 L1665.38 680.548 L1664.82 680.548 L1664.26 680.548 L1663.7 680.548 L1663.14 680.548 L1662.58 680.548 L1662.03 680.548 L1661.47 680.548 L1660.91 680.548 L1660.35 680.548 L1659.79 680.548 L1659.23 680.548 L1658.67 680.548 L1658.11 680.548 L1657.55 680.548 L1656.99 680.548 L1656.43 680.548 L1655.87 680.548 L1655.31 680.548 L1654.76 680.548 L1654.2 680.548 L1653.64 680.548 L1653.08 680.548 L1652.52 680.548 L1651.96 680.548 L1651.4 680.548 L1650.84 680.548 L1650.28 680.548 L1649.72 680.548 L1649.16 680.548 L1648.6 680.548 L1648.04 680.548 L1647.48 680.548 L1646.93 680.548 L1646.37 680.548 L1645.81 680.548 L1645.25 680.548 L1644.69 680.548 L1644.13 680.548 L1643.57 680.548 L1643.01 680.548 L1642.45 680.548 L1641.89 680.548 L1641.33 680.548 L1640.77 680.548 L1640.21 680.548 L1639.66 680.548 L1639.1 680.548 L1638.54 680.548 L1637.98 680.548 L1637.42 680.548 L1636.86 680.548 L1636.3 680.548 L1635.74 680.548 L1635.18 680.548 L1634.62 680.548 L1634.06 680.548 L1633.5 680.548 L1632.94 680.548 L1632.39 680.548 L1631.83 680.548 L1631.27 680.548 L1630.71 680.548 L1630.15 680.548 L1629.59 680.548 L1629.03 680.548 L1628.47 680.548 L1627.91 680.548 L1627.35 680.548 L1626.79 680.548 L1626.23 680.548 L1625.67 680.548 L1625.11 680.548 L1624.56 680.548 L1624 680.548 L1623.44 680.548 L1622.88 680.548 L1622.32 680.548 L1621.76 680.548 L1621.2 680.548 L1620.64 680.548 L1620.08 680.548 L1619.52 680.548 L1618.96 680.548 L1618.4 680.548 L1617.84 680.548 L1617.29 680.548 L1616.73 680.548 L1616.17 680.548 L1615.61 680.548 L1615.05 680.548 L1614.49 680.548 L1613.93 680.548 L1613.37 680.548 L1612.81 680.548 L1612.25 680.548 L1611.69 680.548 L1611.13 680.548 L1610.57 680.548 L1610.02 680.548 L1609.46 680.548 L1608.9 680.548 L1608.34 680.548 L1607.78 680.548 L1607.22 680.548 L1606.66 680.548 L1606.1 680.548 L1605.54 680.548 L1604.98 680.548 L1604.42 680.548 L1603.86 680.548 L1603.3 680.548 L1602.74 680.548 L1602.19 680.548 L1601.63 680.548 L1601.07 680.548 L1600.51 680.548 L1599.95 680.548 L1599.39 680.548 L1598.83 680.548 L1598.27 680.548 L1597.71 680.548 L1597.15 680.548 L1596.59 680.548 L1596.03 680.548 L1595.47 680.548 L1594.92 680.548 L1594.36 680.548 L1593.8 680.548 L1593.24 680.548 L1592.68 680.548 L1592.12 680.548 L1591.56 680.548 L1591 680.548 L1590.44 680.548 L1589.88 680.548 L1589.32 680.548 L1588.76 680.548 L1588.2 680.548 L1587.65 680.548 L1587.09 680.548 L1586.53 680.548 L1585.97 680.548 L1585.41 680.548 L1584.85 680.548 L1584.29 680.548 L1583.73 680.548 L1583.17 680.548 L1582.61 680.548 L1582.05 680.548 L1581.49 680.548 L1580.93 680.548 L1580.37 680.548 L1579.82 680.548 L1579.26 680.548 L1578.7 680.548 L1578.14 680.548 L1577.58 680.548 L1577.02 680.548 L1576.46 680.548 L1575.9 680.548 L1575.34 680.548 L1574.78 680.548 L1574.22 680.548 L1573.66 680.548 L1573.1 680.548 L1572.55 680.548 L1571.99 680.548 L1571.43 680.548 L1570.87 680.548 L1570.31 680.548 L1569.75 680.548 L1569.19 680.548 L1568.63 680.548 L1568.07 680.548 L1567.51 680.548 L1566.95 680.548 L1566.39 680.548 L1565.83 680.548 L1565.28 680.548 L1564.72 680.548 L1564.16 680.548 L1563.6 680.548 L1563.04 680.548 L1562.48 680.548 L1561.92 680.548 L1561.36 680.548 L1560.8 680.548 L1560.24 680.548 L1559.68 680.548 L1559.12 680.548 L1558.56 680.548 L1558 680.548 L1557.45 680.548 L1556.89 680.548 L1556.33 680.548 L1555.77 680.548 L1555.21 680.548 L1554.65 680.548 L1554.09 680.548 L1553.53 680.548 L1552.97 680.548 L1552.41 680.548 L1551.85 680.548 L1551.29 680.548 L1550.73 680.548 L1550.18 680.548 L1549.62 680.548 L1549.06 680.548 L1548.5 680.548 L1547.94 680.548 L1547.38 680.548 L1546.82 680.548 L1546.26 680.548 L1545.7 680.548 L1545.14 680.548 L1544.58 680.548 L1544.02 680.548 L1543.46 680.548 L1542.9 680.548 L1542.35 680.548 L1541.79 680.548 L1541.23 680.548 L1540.67 680.548 L1540.11 680.548 L1539.55 680.548 L1538.99 680.548 L1538.43 680.548 L1537.87 680.548 L1537.31 680.548 L1536.75 680.548 L1536.19 680.548 L1535.63 680.548 L1535.08 680.548 L1534.52 680.548 L1533.96 680.548 L1533.4 680.548 L1532.84 680.548 L1532.28 680.548 L1531.72 680.548 L1531.16 680.548 L1530.6 680.548 L1530.04 680.548 L1529.48 680.548 L1528.92 680.548 L1528.36 680.548 L1527.81 680.548 L1527.25 680.548 L1526.69 680.548 L1526.13 680.548 L1525.57 680.548 L1525.01 680.548 L1524.45 680.548 L1523.89 680.548 L1523.33 680.548 L1522.77 680.548 L1522.21 680.548 L1521.65 680.548 L1521.09 680.548 L1520.53 680.548 L1519.98 680.548 L1519.42 680.548 L1518.86 680.548 L1518.3 680.548 L1517.74 680.548 L1517.18 680.548 L1516.62 680.548 L1516.06 680.548 L1515.5 680.548 L1514.94 680.548 L1514.38 680.548 L1513.82 680.548 L1513.26 680.548 L1512.71 680.548 L1512.15 680.548 L1511.59 680.548 L1511.03 680.548 L1510.47 680.548 L1509.91 680.548 L1509.35 680.548 L1508.79 680.548 L1508.23 680.548 L1507.67 680.548 L1507.11 680.548 L1506.55 680.548 L1505.99 680.548 L1505.44 680.548 L1504.88 680.548 L1504.32 680.548 L1503.76 680.548 L1503.2 680.548 L1502.64 680.548 L1502.08 680.548 L1501.52 680.548 L1500.96 680.548 L1500.4 680.548 L1499.84 680.548 L1499.28 680.548 L1498.72 680.548 L1498.16 680.548 L1497.61 680.548 L1497.05 680.548 L1496.49 680.548 L1495.93 680.548 L1495.37 680.548 L1494.81 680.548 L1494.25 680.548 L1493.69 680.548 L1493.13 680.548 L1492.57 680.548 L1492.01 680.548 L1491.45 680.548 L1490.89 680.548 L1490.34 680.548 L1489.78 680.548 L1489.22 680.548 L1488.66 680.548 L1488.1 680.548 L1487.54 680.548 L1486.98 680.548 L1486.42 680.548 L1485.86 680.548 L1485.3 680.548 L1484.74 680.548 L1484.18 680.548 L1483.62 680.548 L1483.07 680.548 L1482.51 680.548 L1481.95 680.548 L1481.39 680.548 L1480.83 680.548 L1480.27 680.548 L1479.71 680.548 L1479.15 680.548 L1478.59 680.548 L1478.03 680.548 L1477.47 680.548 L1476.91 680.548 L1476.35 680.548 L1475.79 680.548 L1475.24 680.548 L1474.68 680.548 L1474.12 680.548 L1473.56 680.548 L1473 680.548 L1472.44 680.548 L1471.88 680.548 L1471.32 680.548 L1470.76 680.548 L1470.2 680.548 L1469.64 680.548 L1469.08 680.548 L1468.52 680.548 L1467.97 680.548 L1467.41 680.548 L1466.85 680.548 L1466.29 680.548 L1465.73 680.548 L1465.17 680.548 L1464.61 680.548 L1464.05 680.548 L1463.49 680.548 L1462.93 680.548 L1462.37 680.548 L1461.81 680.548 L1461.25 680.548 L1460.7 680.548 L1460.14 680.548 L1459.58 680.548 L1459.02 680.548 L1458.46 680.548 L1457.9 680.548 L1457.34 680.548 L1456.78 680.548 L1456.22 680.548 L1455.66 680.548 L1455.1 680.548 L1454.54 680.548 L1453.98 680.548 L1453.42 680.548 L1452.87 680.548 L1452.31 680.548 L1451.75 680.548 L1451.19 680.548 L1450.63 680.548 L1450.07 680.548 L1449.51 680.548 L1448.95 680.548 L1448.39 680.548 L1447.83 680.548 L1447.27 680.548 L1446.71 680.548 L1446.15 680.548 L1445.6 680.548 L1445.04 680.548 L1444.48 680.548 L1443.92 680.548 L1443.36 680.548 L1442.8 680.548 L1442.24 680.548 L1441.68 680.548 L1441.12 680.548 L1440.56 680.548 L1440 680.548 L1439.44 680.548 L1438.88 680.548 L1438.33 680.548 L1437.77 680.548 L1437.21 680.548 L1436.65 680.548 L1436.09 680.548 L1435.53 680.548 L1434.97 680.548 L1434.41 680.548 L1433.85 680.548 L1433.29 680.548 L1432.73 680.548 L1432.17 680.548 L1431.61 680.548 L1431.05 680.548 L1430.5 680.548 L1429.94 680.548 L1429.38 680.548 L1428.82 680.548 L1428.26 680.548 L1427.7 680.548 L1427.14 680.548 L1426.58 680.548 L1426.02 680.548 L1425.46 680.548 L1424.9 680.548 L1424.34 680.548 L1423.78 680.548 L1423.23 680.548 L1422.67 680.548 L1422.11 680.548 L1421.55 680.548 L1420.99 680.548 L1420.43 680.548 L1419.87 680.548 L1419.31 680.548 L1418.75 680.548 L1418.19 680.548 L1417.63 680.548 L1417.07 680.548 L1416.51 680.548 L1415.95 680.548 L1415.4 680.548 L1414.84 680.548 L1414.28 680.548 L1413.72 680.548 L1413.16 680.548 L1412.6 680.548 L1412.04 680.548 L1411.48 680.548 L1410.92 680.548 L1410.36 680.548 L1409.8 680.548 L1409.24 680.548 L1408.68 680.548 L1408.13 680.548 L1407.57 680.548 L1407.01 680.548 L1406.45 680.548 L1405.89 680.548 L1405.33 680.548 L1404.77 680.548 L1404.21 680.548 L1403.65 680.548 L1403.09 680.548 L1402.53 680.548 L1401.97 680.548 L1401.41 680.548 L1400.86 680.548 L1400.3 680.548 L1399.74 680.548 L1399.18 680.548 L1398.62 680.548 L1398.06 680.548 L1397.5 680.548 L1396.94 680.548 L1396.38 680.548 L1395.82 680.548 L1395.26 680.548 L1394.7 680.548 L1394.14 680.548 L1393.58 680.548 L1393.03 680.548 L1392.47 680.548 L1391.91 680.548 L1391.35 680.548 L1390.79 680.548 L1390.23 680.548 L1389.67 680.548 L1389.11 680.548 L1388.55 680.548 L1387.99 680.548 L1387.43 680.548 L1386.87 680.548 L1386.31 680.548 L1385.76 680.548 L1385.2 680.548 L1384.64 680.548 L1384.08 680.548 L1383.52 680.548 L1382.96 680.548 L1382.4 680.548 L1381.84 680.548 L1381.28 680.548 L1380.72 680.548 L1380.16 680.548 L1379.6 680.548 L1379.04 680.548 L1378.49 680.548 L1377.93 680.548 L1377.37 680.548 L1376.81 680.548 L1376.25 680.548 L1375.69 680.548 L1375.13 680.548 L1374.57 680.548 L1374.01 680.548 L1373.45 680.548 L1372.89 680.548 L1372.33 680.548 L1371.77 680.548 L1371.21 680.548 L1370.66 680.548 L1370.1 680.548 L1369.54 680.548 L1368.98 680.548 L1368.42 680.548 L1367.86 680.548 L1367.3 680.548 L1366.74 680.548 L1366.18 680.548 L1365.62 680.548 L1365.06 680.548 L1364.5 680.548 L1363.94 680.548 L1363.39 680.548 L1362.83 680.548 L1362.27 680.548 L1361.71 680.548 L1361.15 680.548 L1360.59 680.548 L1360.03 680.548 L1359.47 680.548 L1358.91 680.548 L1358.35 680.548 L1357.79 680.548 L1357.23 680.548 L1356.67 680.548 L1356.12 680.548 L1355.56 680.548 L1355 680.548 L1354.44 680.548 L1353.88 680.548 L1353.32 680.548 L1352.76 680.548 L1352.2 680.548 L1351.64 680.548 L1351.08 680.548 L1350.52 680.548 L1349.96 680.548 L1349.4 680.548 L1348.84 680.548 L1348.29 680.548 L1347.73 680.548 L1347.17 680.548 L1346.61 680.548 L1346.05 680.548 L1345.49 680.548 L1344.93 680.548 L1344.37 680.548 L1343.81 680.548 L1343.25 680.548 L1342.69 680.548 L1342.13 680.548 L1341.57 680.548 L1341.02 680.548 L1340.46 680.548 L1339.9 680.548 L1339.34 680.548 L1338.78 680.548 L1338.22 680.548 L1337.66 680.548 L1337.1 680.548 L1336.54 680.548 L1335.98 680.548 L1335.42 680.548 L1334.86 680.548 L1334.3 680.548 L1333.75 680.548 L1333.19 680.548 L1332.63 680.548 L1332.07 680.548 L1331.51 680.548 L1330.95 680.548 L1330.39 680.548 L1329.83 680.548 L1329.27 680.548 L1328.71 680.548 L1328.15 680.548 L1327.59 680.548 L1327.03 680.548 L1326.47 680.548 L1325.92 680.548 L1325.36 680.548 L1324.8 680.548 L1324.24 680.548 L1323.68 680.548 L1323.12 680.548 L1322.56 680.548 L1322 680.548 L1321.44 680.548 L1320.88 680.548 L1320.32 680.548 L1319.76 680.548 L1319.2 680.548 L1318.65 680.548 L1318.09 680.548 L1317.53 680.548 L1316.97 680.548 L1316.41 680.548 L1315.85 680.548 L1315.29 680.548 L1314.73 680.548 L1314.17 680.548 L1313.61 680.548 L1313.05 680.548 L1312.49 680.548 L1311.93 680.548 L1311.38 680.548 L1310.82 680.548 L1310.26 680.548 L1309.7 680.548 L1309.14 680.548 L1308.58 680.548 L1308.02 680.548 L1307.46 680.548 L1306.9 680.548 L1306.34 680.548 L1305.78 680.548 L1305.22 680.548 L1304.66 680.548 L1304.1 680.548 L1303.55 680.548 L1302.99 680.548 L1302.43 680.548 L1301.87 680.548 L1301.31 680.548 L1300.75 680.548 L1300.19 680.548 L1299.63 680.548 L1299.07 680.548 L1298.51 680.548 L1297.95 680.548 L1297.39 680.548 L1296.83 680.548 L1296.28 680.548 L1295.72 680.548 L1295.16 680.548 L1294.6 680.548 L1294.04 680.548 L1293.48 680.548 L1292.92 680.548 L1292.36 680.548 L1291.8 680.548 L1291.24 680.548 L1290.68 680.548 L1290.12 680.548 L1289.56 680.548 L1289 680.548 L1288.45 680.548 L1287.89 680.548 L1287.33 680.548 L1286.77 680.548 L1286.21 680.548 L1285.65 680.548 L1285.09 680.548 L1284.53 680.548 L1283.97 680.548 L1283.41 680.548 L1282.85 680.548 L1282.29 680.548 L1281.73 680.548 L1281.18 680.548 L1280.62 680.548 L1280.06 680.548 L1279.5 680.548 L1278.94 680.548 L1278.38 680.548 L1277.82 680.548 L1277.26 680.548 L1276.7 680.548 L1276.14 680.548 L1275.58 680.548 L1275.02 680.548 L1274.46 680.548 L1273.91 680.548 L1273.35 680.548 L1272.79 680.548 L1272.23 680.548 L1271.67 680.548 L1271.11 680.548 L1270.55 680.548 L1269.99 680.548 L1269.43 680.548 L1268.87 680.548 L1268.31 680.548 L1267.75 680.548 L1267.19 680.548 L1266.63 680.548 L1266.08 680.548 L1265.52 680.548 L1264.96 680.548 L1264.4 680.548 L1263.84 680.548 L1263.28 680.548 L1262.72 680.548 L1262.16 680.548 L1261.6 680.548 L1261.04 680.548 L1260.48 680.548 L1259.92 680.548 L1259.36 680.548 L1258.81 680.548 L1258.25 680.548 L1257.69 680.548 L1257.13 680.548 L1256.57 680.548 L1256.01 680.548 L1255.45 680.548 L1254.89 680.548 L1254.33 680.548 L1253.77 680.548 L1253.21 680.548 L1252.65 680.548 L1252.09 680.548 L1251.54 680.548 L1250.98 680.548 L1250.42 680.548 L1249.86 680.548 L1249.3 680.548 L1248.74 680.548 L1248.18 680.548 L1247.62 680.548 L1247.06 680.548 L1246.5 680.548 L1245.94 680.548 L1245.38 680.548 L1244.82 680.548 L1244.26 680.548 L1243.71 680.548 L1243.15 680.548 L1242.59 680.548 L1242.03 680.548 L1241.47 680.548 L1240.91 680.548 L1240.35 680.548 L1239.79 680.548 L1239.23 680.548 L1238.67 680.548 L1238.11 680.548 L1237.55 680.548 L1236.99 680.548 L1236.44 680.548 L1235.88 680.548 L1235.32 680.548 L1234.76 680.548 L1234.2 680.548 L1233.64 680.548 L1233.08 680.548 L1232.52 680.548 L1231.96 680.548 L1231.4 680.548 L1230.84 680.548 L1230.28 680.548 L1229.72 680.548 L1229.17 680.548 L1228.61 680.548 L1228.05 680.548 L1227.49 680.548 L1226.93 680.548 L1226.37 680.548 L1225.81 680.548 L1225.25 680.548 L1224.69 680.548 L1224.13 680.548 L1223.57 680.548 L1223.01 680.548 L1222.45 680.548 L1221.89 680.548 L1221.34 680.548 L1220.78 680.548 L1220.22 680.548 L1219.66 680.548 L1219.1 680.548 L1218.54 680.548 L1217.98 680.548 L1217.42 680.548 L1216.86 680.548 L1216.3 680.548 L1215.74 680.548 L1215.18 680.548 L1214.62 680.548 L1214.07 680.548 L1213.51 680.548 L1212.95 680.548 L1212.39 680.548 L1211.83 680.548 L1211.27 680.548 L1210.71 680.548 L1210.15 680.548 L1209.59 680.548 L1209.03 680.548 L1208.47 680.548 L1207.91 680.548 L1207.35 680.548 L1206.8 680.548 L1206.24 680.548 L1205.68 680.548 L1205.12 680.548 L1204.56 680.548 L1204 680.548 L1203.44 680.548 L1202.88 680.548 L1202.32 680.548 L1201.76 680.548 L1201.2 680.548 L1200.64 680.548 L1200.08 680.548 L1199.52 680.548 L1198.97 680.548 L1198.41 680.548 L1197.85 680.548 L1197.29 680.548 L1196.73 680.548 L1196.17 680.548 L1195.61 680.548 L1195.05 680.548 L1194.49 680.548 L1193.93 680.548 L1193.37 680.548 L1192.81 680.548 L1192.25 680.548 L1191.7 680.548 L1191.14 680.548 L1190.58 680.548 L1190.02 680.548 L1189.46 680.548 L1188.9 680.548 L1188.34 680.548 L1187.78 680.548 L1187.22 680.548 L1186.66 680.548 L1186.1 680.548 L1185.54 680.548 L1184.98 680.548 L1184.43 680.548 L1183.87 680.548 L1183.31 680.548 L1182.75 680.548 L1182.19 680.548 L1181.63 680.548 L1181.07 680.548 L1180.51 680.548 L1179.95 680.548 L1179.39 680.548 L1178.83 680.548 L1178.27 680.548 L1177.71 680.548 L1177.15 680.548 L1176.6 680.548 L1176.04 680.548 L1175.48 680.548 L1174.92 680.548 L1174.36 680.548 L1173.8 680.548 L1173.24 680.548 L1172.68 680.548 L1172.12 680.548 L1171.56 680.548 L1171 680.548 L1170.44 680.548 L1169.88 680.548 L1169.33 680.548 L1168.77 680.548 L1168.21 680.548 L1167.65 680.548 L1167.09 680.548 L1166.53 680.548 L1165.97 680.548 L1165.41 680.548 L1164.85 680.548 L1164.29 680.548 L1163.73 680.548 L1163.17 680.548 L1162.61 680.548 L1162.05 680.548 L1161.5 680.548 L1160.94 680.548 L1160.38 680.548 L1159.82 680.548 L1159.26 680.548 L1158.7 680.548 L1158.14 680.548 L1157.58 680.548 L1157.02 680.548 L1156.46 680.548 L1155.9 680.548 L1155.34 680.548 L1154.78 680.548 L1154.23 680.548 L1153.67 680.548 L1153.11 680.548 L1152.55 680.548 L1151.99 680.548 L1151.43 680.548 L1150.87 680.548 L1150.31 680.548 L1149.75 680.548 L1149.19 680.548 L1148.63 680.548 L1148.07 680.548 L1147.51 680.548 L1146.96 680.548 L1146.4 680.548 L1145.84 680.548 L1145.28 680.548 L1144.72 680.548 L1144.16 680.548 L1143.6 680.548 L1143.04 680.548 L1142.48 680.548 L1141.92 680.548 L1141.36 680.548 L1140.8 680.548 L1140.24 680.548 L1139.68 680.548 L1139.13 680.548 L1138.57 680.548 L1138.01 680.548 L1137.45 680.548 L1136.89 680.548 L1136.33 680.548 L1135.77 680.548 L1135.21 680.548 L1134.65 680.548 L1134.09 680.548 L1133.53 680.548 L1132.97 680.548 L1132.41 680.548 L1131.86 680.548 L1131.3 680.548 L1130.74 680.548 L1130.18 680.548 L1129.62 680.548 L1129.06 680.548 L1128.5 680.548 L1127.94 680.548 L1127.38 680.548 L1126.82 680.548 L1126.26 680.548 L1125.7 680.548 L1125.14 680.548 L1124.59 680.548 L1124.03 680.548 L1123.47 680.548 L1122.91 680.548 L1122.35 680.548 L1121.79 680.548 L1121.23 680.548 L1120.67 680.548 L1120.11 680.548 L1119.55 680.548 L1118.99 680.548 L1118.43 680.548 L1117.87 680.548 L1117.31 680.548 L1116.76 680.548 L1116.2 680.548 L1115.64 680.548 L1115.08 680.548 L1114.52 680.548 L1113.96 680.548 L1113.4 680.548 L1112.84 680.548 L1112.28 680.548 L1111.72 680.548 L1111.16 680.548 L1110.6 680.548 L1110.04 680.548 L1109.49 680.548 L1108.93 680.548 L1108.37 680.548 L1107.81 680.548 L1107.25 680.548 L1106.69 680.548 L1106.13 680.548 L1105.57 680.548 L1105.01 680.548 L1104.45 680.548 L1103.89 680.548 L1103.33 680.548 L1102.77 680.548 L1102.22 680.548 L1101.66 680.548 L1101.1 680.548 L1100.54 680.548 L1099.98 680.548 L1099.42 680.548 L1098.86 680.548 L1098.3 680.548 L1097.74 680.548 L1097.18 680.548 L1096.62 680.548 L1096.06 680.548 L1095.5 680.548 L1094.94 680.548 L1094.39 680.548 L1093.83 680.548 L1093.27 680.548 L1092.71 680.548 L1092.15 680.548 L1091.59 680.548 L1091.03 680.548 L1090.47 680.548 L1089.91 680.548 L1089.35 680.548 L1088.79 680.548 L1088.23 680.548 L1087.67 680.548 L1087.12 680.548 L1086.56 680.548 L1086 680.548 L1085.44 680.548 L1084.88 680.548 L1084.32 680.548 L1083.76 680.548 L1083.2 680.548 L1082.64 680.548 L1082.08 680.548 L1081.52 680.548 L1080.96 680.548 L1080.4 680.548 L1079.85 680.548 L1079.29 680.548 L1078.73 680.548 L1078.17 680.548 L1077.61 680.548 L1077.05 680.548 L1076.49 680.548 L1075.93 680.548 L1075.37 680.548 L1074.81 680.548 L1074.25 680.548 L1073.69 680.548 L1073.13 680.548 L1072.57 680.548 L1072.02 680.548 L1071.46 680.548 L1070.9 680.548 L1070.34 680.548 L1069.78 680.548 L1069.22 680.548 L1068.66 680.548 L1068.1 680.548 L1067.54 680.548 L1066.98 680.548 L1066.42 680.548 L1065.86 680.548 L1065.3 680.548 L1064.75 680.548 L1064.19 680.548 L1063.63 680.548 L1063.07 680.548 L1062.51 680.548 L1061.95 680.548 L1061.39 680.548 L1060.83 680.548 L1060.27 680.548 L1059.71 680.548 L1059.15 680.548 L1058.59 680.548 L1058.03 680.548 L1057.48 680.548 L1056.92 680.548 L1056.36 680.548 L1055.8 680.548 L1055.24 680.548 L1054.68 680.548 L1054.12 680.548 L1053.56 680.548 L1053 680.548 L1052.44 680.548 L1051.88 680.548 L1051.32 680.548 L1050.76 680.548 L1050.2 680.548 L1049.65 680.548 L1049.09 680.548 L1048.53 680.548 L1047.97 680.548 L1047.41 680.548 L1046.85 680.548 L1046.29 680.548 L1045.73 680.548 L1045.17 680.548 L1044.61 680.548 L1044.05 680.548 L1043.49 680.548 L1042.93 680.548 L1042.38 680.548 L1041.82 680.548 L1041.26 680.548 L1040.7 680.548 L1040.14 680.548 L1039.58 680.548 L1039.02 680.548 L1038.46 680.548 L1037.9 680.548 L1037.34 680.548 L1036.78 680.548 L1036.22 680.548 L1035.66 680.548 L1035.1 680.548 L1034.55 680.548 L1033.99 680.548 L1033.43 680.548 L1032.87 680.548 L1032.31 680.548 L1031.75 680.548 L1031.19 680.548 L1030.63 680.548 L1030.07 680.548 L1029.51 680.548 L1028.95 680.548 L1028.39 680.548 L1027.83 680.548 L1027.28 680.548 L1026.72 680.548 L1026.16 680.548 L1025.6 680.548 L1025.04 680.548 L1024.48 680.548 L1023.92 680.548 L1023.36 680.548 L1022.8 680.548 L1022.24 680.548 L1021.68 680.548 L1021.12 680.548 L1020.56 680.548 L1020.01 680.548 L1019.45 680.548 L1018.89 680.548 L1018.33 680.548 L1017.77 680.548 L1017.21 680.548 L1016.65 680.548 L1016.09 680.548 L1015.53 680.548 L1014.97 680.548 L1014.41 680.548 L1013.85 680.548 L1013.29 680.548 L1012.73 680.548 L1012.18 680.548 L1011.62 680.548 L1011.06 680.548 L1010.5 680.548 L1009.94 680.548 L1009.38 680.548 L1008.82 680.548 L1008.26 680.548 L1007.7 680.548 L1007.14 680.548 L1006.58 680.548 L1006.02 680.548 L1005.46 680.548 L1004.91 680.548 L1004.35 680.548 L1003.79 680.548 L1003.23 680.548 L1002.67 680.548 L1002.11 680.548 L1001.55 680.548 L1000.99 680.548 L1000.43 680.548 L999.872 680.548 L999.313 680.548 L998.754 680.548 L998.194 680.548 L997.635 680.548 L997.076 680.548 L996.517 680.548 L995.957 680.548 L995.398 680.548 L994.839 680.548 L994.28 680.548 L993.72 680.548 L993.161 680.548 L992.602 680.548 L992.043 680.548 L991.483 680.548 L990.924 680.548 L990.365 680.548 L989.806 680.548 L989.246 680.548 L988.687 680.548 L988.128 680.548 L987.569 680.548 L987.009 680.548 L986.45 680.548 L985.891 680.548 L985.332 680.548 L984.772 680.548 L984.213 680.548 L983.654 680.548 L983.095 680.548 L982.535 680.548 L981.976 680.548 L981.417 680.548 L980.858 680.548 L980.298 680.548 L979.739 680.548 L979.18 680.548 L978.621 680.548 L978.061 680.548 L977.502 680.548 L976.943 680.548 L976.384 680.548 L975.824 680.548 L975.265 680.548 L974.706 680.548 L974.147 680.548 L973.587 680.548 L973.028 680.548 L972.469 680.548 L971.91 680.548 L971.35 680.548 L970.791 680.548 L970.232 680.548 L969.673 680.548 L969.113 680.548 L968.554 680.548 L967.995 680.548 L967.436 680.548 L966.876 680.548 L966.317 680.548 L965.758 680.548 L965.199 680.548 L964.639 680.548 L964.08 680.548 L963.521 680.548 L962.962 680.548 L962.402 680.548 L961.843 680.548 L961.284 680.548 L960.725 680.548 L960.165 680.548 L959.606 680.548 L959.047 680.548 L958.488 680.548 L957.928 680.548 L957.369 680.548 L956.81 680.548 L956.251 680.548 L955.691 680.548 L955.132 680.548 L954.573 680.548 L954.014 680.548 L953.454 680.548 L952.895 680.548 L952.336 680.548 L951.777 680.548 L951.217 680.548 L950.658 680.548 L950.099 680.548 L949.54 680.548 L948.98 680.548 L948.421 680.548 L947.862 680.548 L947.303 680.548 L946.743 680.548 L946.184 680.548 L945.625 680.548 L945.066 680.548 L944.506 680.548 L943.947 680.548 L943.388 680.548 L942.829 680.548 L942.269 680.548 L941.71 680.548 L941.151 680.548 L940.592 680.548 L940.032 680.548 L939.473 680.548 L938.914 680.548 L938.355 680.548 L937.795 680.548 L937.236 680.548 L936.677 680.548 L936.118 680.548 L935.558 680.548 L934.999 680.548 L934.44 680.548 L933.881 680.548 L933.321 680.548 L932.762 680.548 L932.203 680.548 L931.644 680.548 L931.084 680.548 L930.525 680.548 L929.966 680.548 L929.406 680.548 L928.847 680.548 L928.288 680.548 L927.729 680.548 L927.169 680.548 L926.61 680.548 L926.051 680.548 L925.492 680.548 L924.932 680.548 L924.373 680.548 L923.814 680.548 L923.255 680.548 L922.695 680.548 L922.136 680.548 L921.577 680.548 L921.018 680.548 L920.458 680.548 L919.899 680.548 L919.34 680.548 L918.781 680.548 L918.221 680.548 L917.662 680.548 L917.103 680.548 L916.544 680.548 L915.984 680.548 L915.425 680.548 L914.866 680.548 L914.307 680.548 L913.747 680.548 L913.188 680.548 L912.629 680.548 L912.07 680.548 L911.51 680.548 L910.951 680.548 L910.392 680.548 L909.833 680.548 L909.273 680.548 L908.714 680.548 L908.155 680.548 L907.596 680.548 L907.036 680.548 L906.477 680.548 L905.918 680.548 L905.359 680.548 L904.799 680.548 L904.24 680.548 L903.681 680.548 L903.122 680.548 L902.562 680.548 L902.003 680.548 L901.444 680.548 L900.885 680.548 L900.325 680.548 L899.766 680.548 L899.207 680.548 L898.648 680.548 L898.088 680.548 L897.529 680.548 L896.97 680.548 L896.411 680.548 L895.851 680.548 L895.292 680.548 L894.733 680.548 L894.174 680.548 L893.614 680.548 L893.055 680.548 L892.496 680.548 L891.937 680.548 L891.377 680.548 L890.818 680.548 L890.259 680.548 L889.7 680.548 L889.14 680.548 L888.581 680.548 L888.022 680.548 L887.463 680.548 L886.903 680.548 L886.344 680.548 L885.785 680.548 L885.226 680.548 L884.666 680.548 L884.107 680.548 L883.548 680.548 L882.989 680.548 L882.429 680.548 L881.87 680.548 L881.311 680.548 L880.752 680.548 L880.192 680.548 L879.633 680.548 L879.074 680.548 L878.515 680.548 L877.955 680.548 L877.396 680.548 L876.837 680.548 L876.278 680.548 L875.718 680.548 L875.159 680.548 L874.6 680.548 L874.041 680.548 L873.481 680.548 L872.922 680.548 L872.363 680.548 L871.804 680.548 L871.244 680.548 L870.685 680.548 L870.126 680.548 L869.567 680.548 L869.007 680.548 L868.448 680.548 L867.889 680.548 L867.33 680.548 L866.77 680.548 L866.211 680.548 L865.652 680.548 L865.093 680.548 L864.533 680.548 L863.974 680.548 L863.415 680.548 L862.856 680.548 L862.296 680.548 L861.737 680.548 L861.178 680.548 L860.619 680.548 L860.059 680.548 L859.5 680.548 L858.941 680.548 L858.382 680.548 L857.822 680.548 L857.263 680.548 L856.704 680.548 L856.145 680.548 L855.585 680.548 L855.026 680.548 L854.467 680.548 L853.908 680.548 L853.348 680.548 L852.789 680.548 L852.23 680.548 L851.671 680.548 L851.111 680.548 L850.552 680.548 L849.993 680.548 L849.434 680.548 L848.874 680.548 L848.315 680.548 L847.756 680.548 L847.197 680.548 L846.637 680.548 L846.078 680.548 L845.519 680.548 L844.96 680.548 L844.4 680.548 L843.841 680.548 L843.282 680.548 L842.723 680.548 L842.163 680.548 L841.604 680.548 L841.045 680.548 L840.486 680.548 L839.926 680.548 L839.367 680.548 L838.808 680.548 L838.249 680.548 L837.689 680.548 L837.13 680.548 L836.571 680.548 L836.012 680.548 L835.452 680.548 L834.893 680.548 L834.334 680.548 L833.775 680.548 L833.215 680.548 L832.656 680.548 L832.097 680.548 L831.538 680.548 L830.978 680.548 L830.419 680.548 L829.86 680.548 L829.301 680.548 L828.741 680.548 L828.182 680.548 L827.623 680.548 L827.064 680.548 L826.504 680.548 L825.945 680.548 L825.386 680.548 L824.827 680.548 L824.267 680.548 L823.708 680.548 L823.149 680.548 L822.59 680.548 L822.03 680.548 L821.471 680.548 L820.912 680.548 L820.353 680.548 L819.793 680.548 L819.234 680.548 L818.675 680.548 L818.116 680.548 L817.556 680.548 L816.997 680.548 L816.438 680.548 L815.879 680.548 L815.319 680.548 L814.76 680.548 L814.201 680.548 L813.642 680.548 L813.082 680.548 L812.523 680.548 L811.964 680.548 L811.405 680.548 L810.845 680.548 L810.286 680.548 L809.727 680.548 L809.168 680.548 L808.608 680.548 L808.049 680.548 L807.49 680.548 L806.931 680.548 L806.371 680.548 L805.812 680.548 L805.253 680.548 L804.693 680.548 L804.134 680.548 L803.575 680.548 L803.016 680.548 L802.456 680.548 L801.897 680.548 L801.338 680.548 L800.779 680.548 L800.219 680.548 L799.66 680.548 L799.101 680.548 L798.542 680.548 L797.982 680.548 L797.423 680.548 L796.864 680.548 L796.305 680.548 L795.745 680.548 L795.186 680.548 L794.627 680.548 L794.068 680.548 L793.508 680.548 L792.949 680.548 L792.39 680.548 L791.831 680.548 L791.271 680.548 L790.712 680.548 L790.153 680.548 L789.594 680.548 L789.034 680.548 L788.475 680.548 L787.916 680.548 L787.357 680.548 L786.797 680.548 L786.238 680.548 L785.679 680.548 L785.12 680.548 L784.56 680.548 L784.001 680.548 L783.442 680.548 L782.883 680.548 L782.323 680.548 L781.764 680.548 L781.205 680.548 L780.646 680.548 L780.086 680.548 L779.527 680.548 L778.968 680.548 L778.409 680.548 L777.849 680.548 L777.29 680.548 L776.731 680.548 L776.172 680.548 L775.612 680.548 L775.053 680.548 L774.494 680.548 L773.935 680.548 L773.375 680.548 L772.816 680.548 L772.257 680.548 L771.698 680.548 L771.138 680.548 L770.579 680.548 L770.02 680.548 L769.461 680.548 L768.901 680.548 L768.342 680.548 L767.783 680.548 L767.224 680.548 L766.664 680.548 L766.105 680.548 L765.546 680.548 L764.987 680.548 L764.427 680.548 L763.868 680.548 L763.309 680.548 L762.75 680.548 L762.19 680.548 L761.631 680.548 L761.072 680.548 L760.513 680.548 L759.953 680.548 L759.394 680.548 L758.835 680.548 L758.276 680.548 L757.716 680.548 L757.157 680.548 L756.598 680.548 L756.039 680.548 L755.479 680.548 L754.92 680.548 L754.361 680.548 L753.802 680.548 L753.242 680.548 L752.683 680.548 L752.124 680.548 L751.565 680.548 L751.005 680.548 L750.446 680.548 L749.887 680.548 L749.328 680.548 L748.768 680.548 L748.209 680.548 L747.65 680.548 L747.091 680.548 L746.531 680.548 L745.972 680.548 L745.413 680.548 L744.854 680.548 L744.294 680.548 L743.735 680.548 L743.176 680.548 L742.617 680.548 L742.057 680.548 L741.498 680.548 L740.939 680.548 L740.38 680.548 L739.82 680.548 L739.261 680.548 L738.702 680.548 L738.143 680.548 L737.583 680.548 L737.024 680.548 L736.465 680.548 L735.906 680.548 L735.346 680.548 L734.787 680.548 L734.228 680.548 L733.669 680.548 L733.109 680.548 L732.55 680.548 L731.991 680.548 L731.432 680.548 L730.872 680.548 L730.313 680.548 L729.754 680.548 L729.195 680.548 L728.635 680.548 L728.076 680.548 L727.517 680.548 L726.958 680.548 L726.398 680.548 L725.839 680.548 L725.28 680.548 L724.721 680.548 L724.161 680.548 L723.602 680.548 L723.043 680.548 L722.484 680.548 L721.924 680.548 L721.365 680.548 L720.806 680.548 L720.247 680.548  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.869 720.806,685.869 721.365,685.869 721.924,685.869 722.484,685.869 723.043,685.869 723.602,685.869 724.161,685.869 724.721,685.869 725.28,685.869 725.839,685.869 726.398,685.869 726.958,685.869 727.517,685.869 728.076,685.869 728.635,685.869 729.195,685.869 729.754,685.869 730.313,685.869 730.872,685.869 731.432,685.869 731.991,685.869 732.55,685.869 733.109,685.869 733.669,685.869 734.228,685.869 734.787,685.869 735.346,685.869 735.906,685.869 736.465,685.869 737.024,685.869 737.583,685.869 738.143,685.869 738.702,685.869 739.261,685.869 739.82,685.869 740.38,685.869 740.939,685.869 741.498,685.869 742.057,685.869 742.617,685.869 743.176,685.869 743.735,685.869 744.294,685.869 744.854,685.869 745.413,685.869 745.972,685.869 746.531,685.869 747.091,685.869 747.65,685.869 748.209,685.869 748.768,685.869 749.328,685.869 749.887,685.869 750.446,685.869 751.005,685.869 751.565,685.869 752.124,685.869 752.683,685.869 753.242,685.869 753.802,685.869 754.361,685.869 754.92,685.869 755.479,685.869 756.039,685.869 756.598,685.869 757.157,685.869 757.716,685.869 758.276,685.869 758.835,685.869 759.394,685.869 759.953,685.869 760.513,685.869 761.072,685.869 761.631,685.869 762.19,685.869 762.75,685.869 763.309,685.869 763.868,685.869 764.427,685.869 764.987,685.869 765.546,685.869 766.105,685.869 766.664,685.869 767.224,685.869 767.783,685.869 768.342,685.869 768.901,685.869 769.461,685.869 770.02,685.869 770.579,685.869 771.138,685.869 771.698,685.869 772.257,685.869 772.816,685.869 773.375,685.869 773.935,685.869 774.494,685.869 775.053,685.869 775.612,685.869 776.172,685.869 776.731,685.869 777.29,685.869 777.849,685.869 778.409,685.869 778.968,685.869 779.527,685.869 780.086,685.869 780.646,685.869 781.205,685.869 781.764,685.869 782.323,685.869 782.883,685.869 783.442,685.869 784.001,685.869 784.56,685.869 785.12,685.869 785.679,685.869 786.238,685.869 786.797,685.869 787.357,685.869 787.916,685.869 788.475,685.869 789.034,685.869 789.594,685.869 790.153,685.869 790.712,685.869 791.271,685.869 791.831,685.869 792.39,685.869 792.949,685.869 793.508,685.869 794.068,685.869 794.627,685.869 795.186,685.869 795.745,685.869 796.305,685.869 796.864,685.869 797.423,685.869 797.982,685.869 798.542,685.869 799.101,685.869 799.66,685.869 800.219,685.869 800.779,685.869 801.338,685.869 801.897,685.869 802.456,685.869 803.016,685.869 803.575,685.869 804.134,685.869 804.693,685.869 805.253,685.869 805.812,685.869 806.371,685.869 806.931,685.869 807.49,685.869 808.049,685.869 808.608,685.869 809.168,685.869 809.727,685.869 810.286,685.869 810.845,685.869 811.405,685.869 811.964,685.869 812.523,685.869 813.082,685.869 813.642,685.869 814.201,685.869 814.76,685.869 815.319,685.869 815.879,685.869 816.438,685.869 816.997,685.869 817.556,685.869 818.116,685.869 818.675,685.869 819.234,685.869 819.793,685.869 820.353,685.869 820.912,685.869 821.471,685.869 822.03,685.869 822.59,685.869 823.149,685.869 823.708,685.869 824.267,685.869 824.827,685.869 825.386,685.869 825.945,685.869 826.504,685.869 827.064,685.869 827.623,685.869 828.182,685.869 828.741,685.869 829.301,685.869 829.86,685.869 830.419,685.869 830.978,685.869 831.538,685.869 832.097,685.869 832.656,685.869 833.215,685.869 833.775,685.869 834.334,685.869 834.893,685.869 835.452,685.869 836.012,685.869 836.571,685.869 837.13,685.869 837.689,685.869 838.249,685.869 838.808,685.869 839.367,685.869 839.926,685.869 840.486,685.869 841.045,685.869 841.604,685.869 842.163,685.869 842.723,685.869 843.282,685.869 843.841,685.869 844.4,685.869 844.96,685.869 845.519,685.869 846.078,685.869 846.637,685.869 847.197,685.869 847.756,685.869 848.315,685.869 848.874,685.869 849.434,685.869 849.993,685.869 850.552,685.869 851.111,685.869 851.671,685.869 852.23,685.869 852.789,685.869 853.348,685.869 853.908,685.869 854.467,685.869 855.026,685.869 855.585,685.869 856.145,685.869 856.704,685.869 857.263,685.869 857.822,685.869 858.382,685.869 858.941,685.869 859.5,685.869 860.059,685.869 860.619,685.869 861.178,685.869 861.737,685.869 862.296,685.869 862.856,685.869 863.415,685.869 863.974,685.869 864.533,685.869 865.093,685.869 865.652,685.869 866.211,685.869 866.77,685.869 867.33,685.869 867.889,685.869 868.448,685.869 869.007,685.869 869.567,685.869 870.126,685.869 870.685,685.869 871.244,685.869 871.804,685.869 872.363,685.869 872.922,685.869 873.481,685.869 874.041,685.869 874.6,685.869 875.159,685.869 875.718,685.869 876.278,685.869 876.837,685.869 877.396,685.869 877.955,685.869 878.515,685.869 879.074,685.869 879.633,685.869 880.192,685.869 880.752,685.869 881.311,685.869 881.87,685.869 882.429,685.869 882.989,685.869 883.548,685.869 884.107,685.869 884.666,685.869 885.226,685.869 885.785,685.869 886.344,685.869 886.903,685.869 887.463,685.869 888.022,685.869 888.581,685.869 889.14,685.869 889.7,685.869 890.259,685.869 890.818,685.869 891.377,685.869 891.937,685.869 892.496,685.869 893.055,685.869 893.614,685.869 894.174,685.869 894.733,685.869 895.292,685.869 895.851,685.869 896.411,685.869 896.97,685.869 897.529,685.869 898.088,685.869 898.648,685.869 899.207,685.869 899.766,685.869 900.325,685.869 900.885,685.869 901.444,685.869 902.003,685.869 902.562,685.869 903.122,685.869 903.681,685.869 904.24,685.869 904.799,685.869 905.359,685.869 905.918,685.869 906.477,685.869 907.036,685.869 907.596,685.869 908.155,685.869 908.714,685.869 909.273,685.869 909.833,685.869 910.392,685.869 910.951,685.869 911.51,685.869 912.07,685.869 912.629,685.869 913.188,685.869 913.747,685.869 914.307,685.869 914.866,685.869 915.425,685.869 915.984,685.869 916.544,685.869 917.103,685.869 917.662,685.869 918.221,685.869 918.781,685.869 919.34,685.869 919.899,685.869 920.458,685.869 921.018,685.869 921.577,685.869 922.136,685.869 922.695,685.869 923.255,685.869 923.814,685.869 924.373,685.869 924.932,685.869 925.492,685.869 926.051,685.869 926.61,685.869 927.169,685.869 927.729,685.869 928.288,685.869 928.847,685.869 929.406,685.869 929.966,685.869 930.525,685.869 931.084,685.869 931.644,685.869 932.203,685.869 932.762,685.869 933.321,685.869 933.881,685.869 934.44,685.869 934.999,685.869 935.558,685.869 936.118,685.869 936.677,685.869 937.236,685.869 937.795,685.869 938.355,685.869 938.914,685.869 939.473,685.869 940.032,685.869 940.592,685.869 941.151,685.869 941.71,685.869 942.269,685.869 942.829,685.869 943.388,685.869 943.947,685.869 944.506,685.869 945.066,685.869 945.625,685.869 946.184,685.869 946.743,685.869 947.303,685.869 947.862,685.869 948.421,685.869 948.98,685.869 949.54,685.869 950.099,685.869 950.658,685.869 951.217,685.869 951.777,685.869 952.336,685.869 952.895,685.869 953.454,685.869 954.014,685.869 954.573,685.869 955.132,685.869 955.691,685.869 956.251,685.869 956.81,685.869 957.369,685.869 957.928,685.869 958.488,685.869 959.047,685.869 959.606,685.869 960.165,685.869 960.725,685.869 961.284,685.869 961.843,685.869 962.402,685.869 962.962,685.869 963.521,685.869 964.08,685.869 964.639,685.869 965.199,685.869 965.758,685.869 966.317,685.869 966.876,685.869 967.436,685.869 967.995,685.869 968.554,685.869 969.113,685.869 969.673,685.869 970.232,685.869 970.791,685.869 971.35,685.869 971.91,685.869 972.469,685.869 973.028,685.869 973.587,685.869 974.147,685.869 974.706,685.869 975.265,685.869 975.824,685.869 976.384,685.869 976.943,685.869 977.502,685.869 978.061,685.869 978.621,685.869 979.18,685.869 979.739,685.869 980.298,685.869 980.858,685.869 981.417,685.869 981.976,685.869 982.535,685.869 983.095,685.869 983.654,685.869 984.213,685.869 984.772,685.869 985.332,685.869 985.891,685.869 986.45,685.869 987.009,685.869 987.569,685.869 988.128,685.869 988.687,685.869 989.246,685.869 989.806,685.869 990.365,685.869 990.924,685.869 991.483,685.869 992.043,685.869 992.602,685.869 993.161,685.869 993.72,685.869 994.28,685.869 994.839,685.869 995.398,685.869 995.957,685.869 996.517,685.869 997.076,685.869 997.635,685.869 998.194,685.869 998.754,685.869 999.313,685.869 999.872,685.869 1000.43,685.869 1000.99,685.869 1001.55,685.869 1002.11,685.869 1002.67,685.869 1003.23,685.869 1003.79,685.869 1004.35,685.869 1004.91,685.869 1005.46,685.869 1006.02,685.869 1006.58,685.869 1007.14,685.869 1007.7,685.869 1008.26,685.869 1008.82,685.869 1009.38,685.869 1009.94,685.869 1010.5,685.869 1011.06,685.869 1011.62,685.869 1012.18,685.869 1012.73,685.869 1013.29,685.869 1013.85,685.869 1014.41,685.869 1014.97,685.869 1015.53,685.869 1016.09,685.869 1016.65,685.869 1017.21,685.869 1017.77,685.869 1018.33,685.869 1018.89,685.869 1019.45,685.869 1020.01,685.869 1020.56,685.869 1021.12,685.869 1021.68,685.869 1022.24,685.869 1022.8,685.869 1023.36,685.869 1023.92,685.869 1024.48,685.869 1025.04,685.869 1025.6,685.869 1026.16,685.869 1026.72,685.869 1027.28,685.869 1027.83,685.869 1028.39,685.869 1028.95,685.869 1029.51,685.869 1030.07,685.869 1030.63,685.869 1031.19,685.869 1031.75,685.869 1032.31,685.869 1032.87,685.869 1033.43,685.869 1033.99,685.869 1034.55,685.869 1035.1,685.869 1035.66,685.869 1036.22,685.869 1036.78,685.869 1037.34,685.869 1037.9,685.869 1038.46,685.869 1039.02,685.869 1039.58,685.869 1040.14,685.869 1040.7,685.869 1041.26,685.869 1041.82,685.869 1042.38,685.869 1042.93,685.869 1043.49,685.869 1044.05,685.869 1044.61,685.869 1045.17,685.869 1045.73,685.869 1046.29,685.869 1046.85,685.869 1047.41,685.869 1047.97,685.869 1048.53,685.869 1049.09,685.869 1049.65,685.869 1050.2,685.869 1050.76,685.869 1051.32,685.869 1051.88,685.869 1052.44,685.869 1053,685.869 1053.56,685.869 1054.12,685.869 1054.68,685.869 1055.24,685.869 1055.8,685.869 1056.36,685.869 1056.92,685.869 1057.48,685.869 1058.03,685.869 1058.59,685.869 1059.15,685.869 1059.71,685.869 1060.27,685.869 1060.83,685.869 1061.39,685.869 1061.95,685.869 1062.51,685.869 1063.07,685.869 1063.63,685.869 1064.19,685.869 1064.75,685.869 1065.3,685.869 1065.86,685.869 1066.42,685.869 1066.98,685.869 1067.54,685.869 1068.1,685.869 1068.66,685.869 1069.22,685.869 1069.78,685.869 1070.34,685.869 1070.9,685.869 1071.46,685.869 1072.02,685.869 1072.57,685.869 1073.13,685.869 1073.69,685.869 1074.25,685.869 1074.81,685.869 1075.37,685.869 1075.93,685.869 1076.49,685.869 1077.05,685.869 1077.61,685.869 1078.17,685.869 1078.73,685.869 1079.29,685.869 1079.85,685.869 1080.4,685.869 1080.96,685.869 1081.52,685.869 1082.08,685.869 1082.64,685.869 1083.2,685.869 1083.76,685.869 1084.32,685.869 1084.88,685.869 1085.44,685.869 1086,685.869 1086.56,685.869 1087.12,685.869 1087.67,685.869 1088.23,685.869 1088.79,685.869 1089.35,685.869 1089.91,685.869 1090.47,685.869 1091.03,685.869 1091.59,685.869 1092.15,685.869 1092.71,685.869 1093.27,685.869 1093.83,685.869 1094.39,685.869 1094.94,685.869 1095.5,685.869 1096.06,685.869 1096.62,685.869 1097.18,685.869 1097.74,685.869 1098.3,685.869 1098.86,685.869 1099.42,685.869 1099.98,685.869 1100.54,685.869 1101.1,685.869 1101.66,685.869 1102.22,685.869 1102.77,685.869 1103.33,685.869 1103.89,685.869 1104.45,685.869 1105.01,685.869 1105.57,685.869 1106.13,685.869 1106.69,685.869 1107.25,685.869 1107.81,685.869 1108.37,685.869 1108.93,685.869 1109.49,685.869 1110.04,685.869 1110.6,685.869 1111.16,685.869 1111.72,685.869 1112.28,685.869 1112.84,685.869 1113.4,685.869 1113.96,685.869 1114.52,685.869 1115.08,685.869 1115.64,685.869 1116.2,685.869 1116.76,685.869 1117.31,685.869 1117.87,685.869 1118.43,685.869 1118.99,685.869 1119.55,685.869 1120.11,685.869 1120.67,685.869 1121.23,685.869 1121.79,685.869 1122.35,685.869 1122.91,685.869 1123.47,685.869 1124.03,685.869 1124.59,685.869 1125.14,685.869 1125.7,685.869 1126.26,685.869 1126.82,685.869 1127.38,685.869 1127.94,685.869 1128.5,685.869 1129.06,685.869 1129.62,685.869 1130.18,685.869 1130.74,685.869 1131.3,685.869 1131.86,685.869 1132.41,685.869 1132.97,685.869 1133.53,685.869 1134.09,685.869 1134.65,685.869 1135.21,685.869 1135.77,685.869 1136.33,685.869 1136.89,685.869 1137.45,685.869 1138.01,685.869 1138.57,685.869 1139.13,685.869 1139.68,685.869 1140.24,685.869 1140.8,685.869 1141.36,685.869 1141.92,685.869 1142.48,685.869 1143.04,685.869 1143.6,685.869 1144.16,685.869 1144.72,685.869 1145.28,685.869 1145.84,685.869 1146.4,685.869 1146.96,685.869 1147.51,685.869 1148.07,685.869 1148.63,685.869 1149.19,685.869 1149.75,685.869 1150.31,685.869 1150.87,685.869 1151.43,685.869 1151.99,685.869 1152.55,685.869 1153.11,685.869 1153.67,685.869 1154.23,685.869 1154.78,685.869 1155.34,685.869 1155.9,685.869 1156.46,685.869 1157.02,685.869 1157.58,685.869 1158.14,685.869 1158.7,685.869 1159.26,685.869 1159.82,685.869 1160.38,685.869 1160.94,685.869 1161.5,685.869 1162.05,685.869 1162.61,685.869 1163.17,685.869 1163.73,685.869 1164.29,685.869 1164.85,685.869 1165.41,685.869 1165.97,685.869 1166.53,685.869 1167.09,685.869 1167.65,685.869 1168.21,685.869 1168.77,685.869 1169.33,685.869 1169.88,685.869 1170.44,685.869 1171,685.869 1171.56,685.869 1172.12,685.869 1172.68,685.869 1173.24,685.869 1173.8,685.869 1174.36,685.869 1174.92,685.869 1175.48,685.869 1176.04,685.869 1176.6,685.869 1177.15,685.869 1177.71,685.869 1178.27,685.869 1178.83,685.869 1179.39,685.869 1179.95,685.869 1180.51,685.869 1181.07,685.869 1181.63,685.869 1182.19,685.869 1182.75,685.869 1183.31,685.869 1183.87,685.869 1184.43,685.869 1184.98,685.869 1185.54,685.869 1186.1,685.869 1186.66,685.869 1187.22,685.869 1187.78,685.869 1188.34,685.869 1188.9,685.869 1189.46,685.869 1190.02,685.869 1190.58,685.869 1191.14,685.869 1191.7,685.869 1192.25,685.869 1192.81,685.869 1193.37,685.869 1193.93,685.869 1194.49,685.869 1195.05,685.869 1195.61,685.869 1196.17,685.869 1196.73,685.869 1197.29,685.869 1197.85,685.869 1198.41,685.869 1198.97,685.869 1199.52,685.869 1200.08,685.869 1200.64,685.869 1201.2,685.869 1201.76,685.869 1202.32,685.869 1202.88,685.869 1203.44,685.869 1204,685.869 1204.56,685.869 1205.12,685.869 1205.68,685.869 1206.24,685.869 1206.8,685.869 1207.35,685.869 1207.91,685.869 1208.47,685.869 1209.03,685.869 1209.59,685.869 1210.15,685.869 1210.71,685.869 1211.27,685.869 1211.83,685.869 1212.39,685.869 1212.95,685.869 1213.51,685.869 1214.07,685.869 1214.62,685.869 1215.18,685.869 1215.74,685.869 1216.3,685.869 1216.86,685.869 1217.42,685.869 1217.98,685.869 1218.54,685.869 1219.1,685.869 1219.66,685.869 1220.22,685.869 1220.78,685.869 1221.34,685.869 1221.89,685.869 1222.45,685.869 1223.01,685.869 1223.57,685.869 1224.13,685.869 1224.69,685.869 1225.25,685.869 1225.81,685.869 1226.37,685.869 1226.93,685.869 1227.49,685.869 1228.05,685.869 1228.61,685.869 1229.17,685.869 1229.72,685.869 1230.28,685.869 1230.84,685.869 1231.4,685.869 1231.96,685.869 1232.52,685.869 1233.08,685.869 1233.64,685.869 1234.2,685.869 1234.76,685.869 1235.32,685.869 1235.88,685.869 1236.44,685.869 1236.99,685.869 1237.55,685.869 1238.11,685.869 1238.67,685.869 1239.23,685.869 1239.79,685.869 1240.35,685.869 1240.91,685.869 1241.47,685.869 1242.03,685.869 1242.59,685.869 1243.15,685.869 1243.71,685.869 1244.26,685.869 1244.82,685.869 1245.38,685.869 1245.94,685.869 1246.5,685.869 1247.06,685.869 1247.62,685.869 1248.18,685.869 1248.74,685.869 1249.3,685.869 1249.86,685.869 1250.42,685.869 1250.98,685.869 1251.54,685.869 1252.09,685.869 1252.65,685.869 1253.21,685.869 1253.77,685.869 1254.33,685.869 1254.89,685.869 1255.45,685.869 1256.01,685.869 1256.57,685.869 1257.13,685.869 1257.69,685.869 1258.25,685.869 1258.81,685.869 1259.36,685.869 1259.92,685.869 1260.48,685.869 1261.04,685.869 1261.6,685.869 1262.16,685.869 1262.72,685.869 1263.28,685.869 1263.84,685.869 1264.4,685.869 1264.96,685.869 1265.52,685.869 1266.08,685.869 1266.63,685.869 1267.19,685.869 1267.75,685.869 1268.31,685.869 1268.87,685.869 1269.43,685.869 1269.99,685.869 1270.55,685.869 1271.11,685.869 1271.67,685.869 1272.23,685.869 1272.79,685.869 1273.35,685.869 1273.91,685.869 1274.46,685.869 1275.02,685.869 1275.58,685.869 1276.14,685.869 1276.7,685.869 1277.26,685.869 1277.82,685.869 1278.38,685.869 1278.94,685.869 1279.5,685.869 1280.06,685.869 1280.62,685.869 1281.18,685.869 1281.73,685.869 1282.29,685.869 1282.85,685.869 1283.41,685.869 1283.97,685.869 1284.53,685.869 1285.09,685.869 1285.65,685.869 1286.21,685.869 1286.77,685.869 1287.33,685.869 1287.89,685.869 1288.45,685.869 1289,685.869 1289.56,685.869 1290.12,685.869 1290.68,685.869 1291.24,685.869 1291.8,685.869 1292.36,685.869 1292.92,685.869 1293.48,685.869 1294.04,685.869 1294.6,685.869 1295.16,685.869 1295.72,685.869 1296.28,685.869 1296.83,685.869 1297.39,685.869 1297.95,685.869 1298.51,685.869 1299.07,685.869 1299.63,685.869 1300.19,685.869 1300.75,685.869 1301.31,685.869 1301.87,685.869 1302.43,685.869 1302.99,685.869 1303.55,685.869 1304.1,685.869 1304.66,685.869 1305.22,685.869 1305.78,685.869 1306.34,685.869 1306.9,685.869 1307.46,685.869 1308.02,685.869 1308.58,685.869 1309.14,685.869 1309.7,685.869 1310.26,685.869 1310.82,685.869 1311.38,685.869 1311.93,685.869 1312.49,685.869 1313.05,685.869 1313.61,685.869 1314.17,685.869 1314.73,685.869 1315.29,685.869 1315.85,685.869 1316.41,685.869 1316.97,685.869 1317.53,685.869 1318.09,685.869 1318.65,685.869 1319.2,685.869 1319.76,685.869 1320.32,685.869 1320.88,685.869 1321.44,685.869 1322,685.869 1322.56,685.869 1323.12,685.869 1323.68,685.869 1324.24,685.869 1324.8,685.869 1325.36,685.869 1325.92,685.869 1326.47,685.869 1327.03,685.869 1327.59,685.869 1328.15,685.869 1328.71,685.869 1329.27,685.869 1329.83,685.869 1330.39,685.869 1330.95,685.869 1331.51,685.869 1332.07,685.869 1332.63,685.869 1333.19,685.869 1333.75,685.869 1334.3,685.869 1334.86,685.869 1335.42,685.869 1335.98,685.869 1336.54,685.869 1337.1,685.869 1337.66,685.869 1338.22,685.869 1338.78,685.869 1339.34,685.869 1339.9,685.869 1340.46,685.869 1341.02,685.869 1341.57,685.869 1342.13,685.869 1342.69,685.869 1343.25,685.869 1343.81,685.869 1344.37,685.869 1344.93,685.869 1345.49,685.869 1346.05,685.869 1346.61,685.869 1347.17,685.869 1347.73,685.869 1348.29,685.869 1348.84,685.869 1349.4,685.869 1349.96,685.869 1350.52,685.869 1351.08,685.869 1351.64,685.869 1352.2,685.869 1352.76,685.869 1353.32,685.869 1353.88,685.869 1354.44,685.869 1355,685.869 1355.56,685.869 1356.12,685.869 1356.67,685.869 1357.23,685.869 1357.79,685.869 1358.35,685.869 1358.91,685.869 1359.47,685.869 1360.03,685.869 1360.59,685.869 1361.15,685.869 1361.71,685.869 1362.27,685.869 1362.83,685.869 1363.39,685.869 1363.94,685.869 1364.5,685.869 1365.06,685.869 1365.62,685.869 1366.18,685.869 1366.74,685.869 1367.3,685.869 1367.86,685.869 1368.42,685.869 1368.98,685.869 1369.54,685.869 1370.1,685.869 1370.66,685.869 1371.21,685.869 1371.77,685.869 1372.33,685.869 1372.89,685.869 1373.45,685.869 1374.01,685.869 1374.57,685.869 1375.13,685.869 1375.69,685.869 1376.25,685.869 1376.81,685.869 1377.37,685.869 1377.93,685.869 1378.49,685.869 1379.04,685.869 1379.6,685.869 1380.16,685.869 1380.72,685.869 1381.28,685.869 1381.84,685.869 1382.4,685.869 1382.96,685.869 1383.52,685.869 1384.08,685.869 1384.64,685.869 1385.2,685.869 1385.76,685.869 1386.31,685.869 1386.87,685.869 1387.43,685.869 1387.99,685.869 1388.55,685.869 1389.11,685.869 1389.67,685.869 1390.23,685.869 1390.79,685.869 1391.35,685.869 1391.91,685.869 1392.47,685.869 1393.03,685.869 1393.58,685.869 1394.14,685.869 1394.7,685.869 1395.26,685.869 1395.82,685.869 1396.38,685.869 1396.94,685.869 1397.5,685.869 1398.06,685.869 1398.62,685.869 1399.18,685.869 1399.74,685.869 1400.3,685.869 1400.86,685.869 1401.41,685.869 1401.97,685.869 1402.53,685.869 1403.09,685.869 1403.65,685.869 1404.21,685.869 1404.77,685.869 1405.33,685.869 1405.89,685.869 1406.45,685.869 1407.01,685.869 1407.57,685.869 1408.13,685.869 1408.68,685.869 1409.24,685.869 1409.8,685.869 1410.36,685.869 1410.92,685.869 1411.48,685.869 1412.04,685.869 1412.6,685.869 1413.16,685.869 1413.72,685.869 1414.28,685.869 1414.84,685.869 1415.4,685.869 1415.95,685.869 1416.51,685.869 1417.07,685.869 1417.63,685.869 1418.19,685.869 1418.75,685.869 1419.31,685.869 1419.87,685.869 1420.43,685.869 1420.99,685.869 1421.55,685.869 1422.11,685.869 1422.67,685.869 1423.23,685.869 1423.78,685.869 1424.34,685.869 1424.9,685.869 1425.46,685.869 1426.02,685.869 1426.58,685.869 1427.14,685.869 1427.7,685.869 1428.26,685.869 1428.82,685.869 1429.38,685.869 1429.94,685.869 1430.5,685.869 1431.05,685.869 1431.61,685.869 1432.17,685.869 1432.73,685.869 1433.29,685.869 1433.85,685.869 1434.41,685.869 1434.97,685.869 1435.53,685.869 1436.09,685.869 1436.65,685.869 1437.21,685.869 1437.77,685.869 1438.33,685.869 1438.88,685.869 1439.44,685.869 1440,685.869 1440.56,685.869 1441.12,685.869 1441.68,685.869 1442.24,685.869 1442.8,685.869 1443.36,685.869 1443.92,685.869 1444.48,685.869 1445.04,685.869 1445.6,685.869 1446.15,685.869 1446.71,685.869 1447.27,685.869 1447.83,685.869 1448.39,685.869 1448.95,685.869 1449.51,685.869 1450.07,685.869 1450.63,685.869 1451.19,685.869 1451.75,685.869 1452.31,685.869 1452.87,685.869 1453.42,685.869 1453.98,685.869 1454.54,685.869 1455.1,685.869 1455.66,685.869 1456.22,685.869 1456.78,685.869 1457.34,685.869 1457.9,685.869 1458.46,685.869 1459.02,685.869 1459.58,685.869 1460.14,685.869 1460.7,685.869 1461.25,685.869 1461.81,685.869 1462.37,685.869 1462.93,685.869 1463.49,685.869 1464.05,685.869 1464.61,685.869 1465.17,685.869 1465.73,685.869 1466.29,685.869 1466.85,685.869 1467.41,685.869 1467.97,685.869 1468.52,685.869 1469.08,685.869 1469.64,685.869 1470.2,685.869 1470.76,685.869 1471.32,685.869 1471.88,685.869 1472.44,685.869 1473,685.869 1473.56,685.869 1474.12,685.869 1474.68,685.869 1475.24,685.869 1475.79,685.869 1476.35,685.869 1476.91,685.869 1477.47,685.869 1478.03,685.869 1478.59,685.869 1479.15,685.869 1479.71,685.869 1480.27,685.869 1480.83,685.869 1481.39,685.869 1481.95,685.869 1482.51,685.869 1483.07,685.869 1483.62,685.869 1484.18,685.869 1484.74,685.869 1485.3,685.869 1485.86,685.869 1486.42,685.869 1486.98,685.869 1487.54,685.869 1488.1,685.869 1488.66,685.869 1489.22,685.869 1489.78,685.869 1490.34,685.869 1490.89,685.869 1491.45,685.869 1492.01,685.869 1492.57,685.869 1493.13,685.869 1493.69,685.869 1494.25,685.869 1494.81,685.869 1495.37,685.869 1495.93,685.869 1496.49,685.869 1497.05,685.869 1497.61,685.869 1498.16,685.869 1498.72,685.869 1499.28,685.869 1499.84,685.869 1500.4,685.869 1500.96,685.869 1501.52,685.869 1502.08,685.869 1502.64,685.869 1503.2,685.869 1503.76,685.869 1504.32,685.869 1504.88,685.869 1505.44,685.869 1505.99,685.869 1506.55,685.869 1507.11,685.869 1507.67,685.869 1508.23,685.869 1508.79,685.869 1509.35,685.869 1509.91,685.869 1510.47,685.869 1511.03,685.869 1511.59,685.869 1512.15,685.869 1512.71,685.869 1513.26,685.869 1513.82,685.869 1514.38,685.869 1514.94,685.869 1515.5,685.869 1516.06,685.869 1516.62,685.869 1517.18,685.869 1517.74,685.869 1518.3,685.869 1518.86,685.869 1519.42,685.869 1519.98,685.869 1520.53,685.869 1521.09,685.869 1521.65,685.869 1522.21,685.869 1522.77,685.869 1523.33,685.869 1523.89,685.869 1524.45,685.869 1525.01,685.869 1525.57,685.869 1526.13,685.869 1526.69,685.869 1527.25,685.869 1527.81,685.869 1528.36,685.869 1528.92,685.869 1529.48,685.869 1530.04,685.869 1530.6,685.869 1531.16,685.869 1531.72,685.869 1532.28,685.869 1532.84,685.869 1533.4,685.869 1533.96,685.869 1534.52,685.869 1535.08,685.869 1535.63,685.869 1536.19,685.869 1536.75,685.869 1537.31,685.869 1537.87,685.869 1538.43,685.869 1538.99,685.869 1539.55,685.869 1540.11,685.869 1540.67,685.869 1541.23,685.869 1541.79,685.869 1542.35,685.869 1542.9,685.869 1543.46,685.869 1544.02,685.869 1544.58,685.869 1545.14,685.869 1545.7,685.869 1546.26,685.869 1546.82,685.869 1547.38,685.869 1547.94,685.869 1548.5,685.869 1549.06,685.869 1549.62,685.869 1550.18,685.869 1550.73,685.869 1551.29,685.869 1551.85,685.869 1552.41,685.869 1552.97,685.869 1553.53,685.869 1554.09,685.869 1554.65,685.869 1555.21,685.869 1555.77,685.869 1556.33,685.869 1556.89,685.869 1557.45,685.869 1558,685.869 1558.56,685.869 1559.12,685.869 1559.68,685.869 1560.24,685.869 1560.8,685.869 1561.36,685.869 1561.92,685.869 1562.48,685.869 1563.04,685.869 1563.6,685.869 1564.16,685.869 1564.72,685.869 1565.28,685.869 1565.83,685.869 1566.39,685.869 1566.95,685.869 1567.51,685.869 1568.07,685.869 1568.63,685.869 1569.19,685.869 1569.75,685.869 1570.31,685.869 1570.87,685.869 1571.43,685.869 1571.99,685.869 1572.55,685.869 1573.1,685.869 1573.66,685.869 1574.22,685.869 1574.78,685.869 1575.34,685.869 1575.9,685.869 1576.46,685.869 1577.02,685.869 1577.58,685.869 1578.14,685.869 1578.7,685.869 1579.26,685.869 1579.82,685.869 1580.37,685.869 1580.93,685.869 1581.49,685.869 1582.05,685.869 1582.61,685.869 1583.17,685.869 1583.73,685.869 1584.29,685.869 1584.85,685.869 1585.41,685.869 1585.97,685.869 1586.53,685.869 1587.09,685.869 1587.65,685.869 1588.2,685.869 1588.76,685.869 1589.32,685.869 1589.88,685.869 1590.44,685.869 1591,685.869 1591.56,685.869 1592.12,685.869 1592.68,685.869 1593.24,685.869 1593.8,685.869 1594.36,685.869 1594.92,685.869 1595.47,685.869 1596.03,685.869 1596.59,685.869 1597.15,685.869 1597.71,685.869 1598.27,685.869 1598.83,685.869 1599.39,685.869 1599.95,685.869 1600.51,685.869 1601.07,685.869 1601.63,685.869 1602.19,685.869 1602.74,685.869 1603.3,685.869 1603.86,685.869 1604.42,685.869 1604.98,685.869 1605.54,685.869 1606.1,685.869 1606.66,685.869 1607.22,685.869 1607.78,685.869 1608.34,685.869 1608.9,685.869 1609.46,685.869 1610.02,685.869 1610.57,685.869 1611.13,685.869 1611.69,685.869 1612.25,685.869 1612.81,685.869 1613.37,685.869 1613.93,685.869 1614.49,685.869 1615.05,685.869 1615.61,685.869 1616.17,685.869 1616.73,685.869 1617.29,685.869 1617.84,685.869 1618.4,685.869 1618.96,685.869 1619.52,685.869 1620.08,685.869 1620.64,685.869 1621.2,685.869 1621.76,685.869 1622.32,685.869 1622.88,685.869 1623.44,685.869 1624,685.869 1624.56,685.869 1625.11,685.869 1625.67,685.869 1626.23,685.869 1626.79,685.869 1627.35,685.869 1627.91,685.869 1628.47,685.869 1629.03,685.869 1629.59,685.869 1630.15,685.869 1630.71,685.869 1631.27,685.869 1631.83,685.869 1632.39,685.869 1632.94,685.869 1633.5,685.869 1634.06,685.869 1634.62,685.869 1635.18,685.869 1635.74,685.869 1636.3,685.869 1636.86,685.869 1637.42,685.869 1637.98,685.869 1638.54,685.869 1639.1,685.869 1639.66,685.869 1640.21,685.869 1640.77,685.869 1641.33,685.869 1641.89,685.869 1642.45,685.869 1643.01,685.869 1643.57,685.869 1644.13,685.869 1644.69,685.869 1645.25,685.869 1645.81,685.869 1646.37,685.869 1646.93,685.869 1647.48,685.869 1648.04,685.869 1648.6,685.869 1649.16,685.869 1649.72,685.869 1650.28,685.869 1650.84,685.869 1651.4,685.869 1651.96,685.869 1652.52,685.869 1653.08,685.869 1653.64,685.869 1654.2,685.869 1654.76,685.869 1655.31,685.869 1655.87,685.869 1656.43,685.869 1656.99,685.869 1657.55,685.869 1658.11,685.869 1658.67,685.869 1659.23,685.869 1659.79,685.869 1660.35,685.869 1660.91,685.869 1661.47,685.869 1662.03,685.869 1662.58,685.869 1663.14,685.869 1663.7,685.869 1664.26,685.869 1664.82,685.869 1665.38,685.869 1665.94,685.869 1666.5,685.869 1667.06,685.869 1667.62,685.869 1668.18,685.869 1668.74,685.869 1669.3,685.869 1669.85,685.869 1670.41,685.869 1670.97,685.869 1671.53,685.869 1672.09,685.869 1672.65,685.869 1673.21,685.869 1673.77,685.869 1674.33,685.869 1674.89,685.869 1675.45,685.869 1676.01,685.869 1676.57,685.869 1677.13,685.869 1677.68,685.869 1678.24,685.869 1678.8,685.869 1679.36,685.869 1679.92,685.869 1680.48,685.869 1681.04,685.869 1681.6,685.869 1682.16,685.869 1682.72,685.869 1683.28,685.869 1683.84,685.869 1684.4,685.869 1684.95,685.869 1685.51,685.869 1686.07,685.869 1686.63,685.869 1687.19,685.869 1687.75,685.869 1688.31,685.869 1688.87,685.869 1689.43,685.869 1689.99,685.869 1690.55,685.869 1691.11,685.869 1691.67,685.869 1692.23,685.869 1692.78,685.869 1693.34,685.869 1693.9,685.869 1694.46,685.869 1695.02,685.869 1695.58,685.869 1696.14,685.869 1696.7,685.869 1697.26,685.869 1697.82,685.869 1698.38,685.869 1698.94,685.869 1699.5,685.869 1700.05,685.869 1700.61,685.869 1701.17,685.869 1701.73,685.869 1702.29,685.869 1702.85,685.869 1703.41,685.869 1703.97,685.869 1704.53,685.869 1705.09,685.869 1705.65,685.869 1706.21,685.869 1706.77,685.869 1707.32,685.869 1707.88,685.869 1708.44,685.869 1709,685.869 1709.56,685.869 1710.12,685.869 1710.68,685.869 1711.24,685.869 1711.8,685.869 1712.36,685.869 1712.92,685.869 1713.48,685.869 1714.04,685.869 1714.6,685.869 1715.15,685.869 1715.71,685.869 1716.27,685.869 1716.83,685.869 1717.39,685.869 1717.95,685.869 1718.51,685.869 1719.07,685.869 1719.63,685.869 1720.19,685.869 1720.75,685.869 1721.31,685.869 1721.87,685.869 1722.42,685.869 1722.98,685.869 1723.54,685.869 1724.1,685.869 1724.66,685.869 1725.22,685.869 1725.78,685.869 1726.34,685.869 1726.9,685.869 1727.46,685.869 1728.02,685.869 1728.58,685.869 1729.14,685.869 1729.69,685.869 1730.25,685.869 1730.81,685.869 1731.37,685.869 1731.93,685.869 1732.49,685.869 1733.05,685.869 1733.61,685.869 1734.17,685.869 1734.73,685.869 1735.29,685.869 1735.85,685.869 1736.41,685.869 1736.97,685.869 1737.52,685.869 1738.08,685.869 1738.64,685.869 1739.2,685.869 1739.76,685.869 1740.32,685.869 1740.88,685.869 1741.44,685.869 1742,685.869 1742.56,685.869 1743.12,685.869 1743.68,685.869 1744.24,685.869 1744.79,685.869 1745.35,685.869 1745.91,685.869 1746.47,685.869 1747.03,685.869 1747.59,685.869 1748.15,685.869 1748.71,685.869 1749.27,685.869 1749.83,685.869 1750.39,685.869 1750.95,685.869 1751.51,685.869 1752.06,685.869 1752.62,685.869 1753.18,685.869 1753.74,685.869 1754.3,685.869 1754.86,685.869 1755.42,685.869 1755.98,685.869 1756.54,685.869 1757.1,685.869 1757.66,685.869 1758.22,685.869 1758.78,685.869 1759.34,685.869 1759.89,685.869 1760.45,685.869 1761.01,685.869 1761.57,685.869 1762.13,685.869 1762.69,685.869 1763.25,685.869 1763.81,685.869 1764.37,685.869 1764.93,685.869 1765.49,685.869 1766.05,685.869 1766.61,685.869 1767.16,685.869 1767.72,685.869 1768.28,685.869 1768.84,685.869 1769.4,685.869 1769.96,685.869 1770.52,685.869 1771.08,685.869 1771.64,685.869 1772.2,685.869 1772.76,685.869 1773.32,685.869 1773.88,685.869 1774.43,685.869 1774.99,685.869 1775.55,685.869 1776.11,685.869 1776.67,685.869 1777.23,685.869 1777.79,685.869 1778.35,685.869 1778.91,685.869 1779.47,685.869 1780.03,685.869 1780.59,685.869 1781.15,685.869 1781.71,685.869 1782.26,685.869 1782.82,685.869 1783.38,685.869 1783.94,685.869 1784.5,685.869 1785.06,685.869 1785.62,685.869 1786.18,685.869 1786.74,685.869 1787.3,685.869 1787.86,685.869 1788.42,685.869 1788.98,685.869 1789.53,685.869 1790.09,685.869 1790.65,685.869 1791.21,685.869 1791.77,685.869 1792.33,685.869 1792.89,685.869 1793.45,685.869 1794.01,685.869 1794.57,685.869 1795.13,685.869 1795.69,685.869 1796.25,685.869 1796.8,685.869 1797.36,685.869 1797.92,685.869 1798.48,685.869 1799.04,685.869 1799.6,685.869 1800.16,685.869 1800.72,685.869 1801.28,685.869 1801.84,685.869 1802.4,685.869 1802.96,685.869 1803.52,685.869 1804.08,685.869 1804.63,685.869 1805.19,685.869 1805.75,685.869 1806.31,685.869 1806.87,685.869 1807.43,685.869 1807.99,685.869 1808.55,685.869 1809.11,685.869 1809.67,685.869 1810.23,685.869 1810.79,685.869 1811.35,685.869 1811.9,685.869 1812.46,685.869 1813.02,685.869 1813.58,685.869 1814.14,685.869 1814.7,685.869 1815.26,685.869 1815.82,685.869 1816.38,685.869 1816.94,685.869 1817.5,685.869 1818.06,685.869 1818.62,685.869 1819.18,685.869 1819.73,685.869 1820.29,685.869 1820.85,685.869 1821.41,685.869 1821.97,685.869 1822.53,685.869 1823.09,685.869 1823.65,685.869 1824.21,685.869 1824.77,685.869 1825.33,685.869 1825.89,685.869 1826.45,685.869 1827,685.869 1827.56,685.869 1828.12,685.869 1828.68,685.869 1829.24,685.869 1829.8,685.869 1830.36,685.869 1830.92,685.869 1831.48,685.869 1832.04,685.869 1832.6,685.869 1833.16,685.869 1833.72,685.869 1834.27,685.869 1834.83,685.869 1835.39,685.869 1835.95,685.869 1836.51,685.869 1837.07,685.869 1837.63,685.869 1838.19,685.869 \"/>\n<path clip-path=\"url(#clip243)\" d=\"M720.247 684.65 L720.806 684.65 L721.365 684.65 L721.924 684.65 L722.484 684.65 L723.043 684.65 L723.602 684.65 L724.161 684.65 L724.721 684.65 L725.28 684.65 L725.839 684.65 L726.398 684.65 L726.958 684.65 L727.517 684.65 L728.076 684.65 L728.635 684.65 L729.195 684.65 L729.754 684.65 L730.313 684.65 L730.872 684.65 L731.432 684.65 L731.991 684.65 L732.55 684.65 L733.109 684.65 L733.669 684.65 L734.228 684.65 L734.787 684.65 L735.346 684.65 L735.906 684.65 L736.465 684.65 L737.024 684.65 L737.583 684.65 L738.143 684.65 L738.702 684.65 L739.261 684.65 L739.82 684.65 L740.38 684.65 L740.939 684.65 L741.498 684.65 L742.057 684.65 L742.617 684.65 L743.176 684.65 L743.735 684.65 L744.294 684.65 L744.854 684.65 L745.413 684.65 L745.972 684.65 L746.531 684.65 L747.091 684.65 L747.65 684.65 L748.209 684.65 L748.768 684.65 L749.328 684.65 L749.887 684.65 L750.446 684.65 L751.005 684.65 L751.565 684.65 L752.124 684.65 L752.683 684.65 L753.242 684.65 L753.802 684.65 L754.361 684.65 L754.92 684.65 L755.479 684.65 L756.039 684.65 L756.598 684.65 L757.157 684.65 L757.716 684.65 L758.276 684.65 L758.835 684.65 L759.394 684.65 L759.953 684.65 L760.513 684.65 L761.072 684.65 L761.631 684.65 L762.19 684.65 L762.75 684.65 L763.309 684.65 L763.868 684.65 L764.427 684.65 L764.987 684.65 L765.546 684.65 L766.105 684.65 L766.664 684.65 L767.224 684.65 L767.783 684.65 L768.342 684.65 L768.901 684.65 L769.461 684.65 L770.02 684.65 L770.579 684.65 L771.138 684.65 L771.698 684.65 L772.257 684.65 L772.816 684.65 L773.375 684.65 L773.935 684.65 L774.494 684.65 L775.053 684.65 L775.612 684.65 L776.172 684.65 L776.731 684.65 L777.29 684.65 L777.849 684.65 L778.409 684.65 L778.968 684.65 L779.527 684.65 L780.086 684.65 L780.646 684.65 L781.205 684.65 L781.764 684.65 L782.323 684.65 L782.883 684.65 L783.442 684.65 L784.001 684.65 L784.56 684.65 L785.12 684.65 L785.679 684.65 L786.238 684.65 L786.797 684.65 L787.357 684.65 L787.916 684.65 L788.475 684.65 L789.034 684.65 L789.594 684.65 L790.153 684.65 L790.712 684.65 L791.271 684.65 L791.831 684.65 L792.39 684.65 L792.949 684.65 L793.508 684.65 L794.068 684.65 L794.627 684.65 L795.186 684.65 L795.745 684.65 L796.305 684.65 L796.864 684.65 L797.423 684.65 L797.982 684.65 L798.542 684.65 L799.101 684.65 L799.66 684.65 L800.219 684.65 L800.779 684.65 L801.338 684.65 L801.897 684.65 L802.456 684.65 L803.016 684.65 L803.575 684.65 L804.134 684.65 L804.693 684.65 L805.253 684.65 L805.812 684.65 L806.371 684.65 L806.931 684.65 L807.49 684.65 L808.049 684.65 L808.608 684.65 L809.168 684.65 L809.727 684.65 L810.286 684.65 L810.845 684.65 L811.405 684.65 L811.964 684.65 L812.523 684.65 L813.082 684.65 L813.642 684.65 L814.201 684.65 L814.76 684.65 L815.319 684.65 L815.879 684.65 L816.438 684.65 L816.997 684.65 L817.556 684.65 L818.116 684.65 L818.675 684.65 L819.234 684.65 L819.793 684.65 L820.353 684.65 L820.912 684.65 L821.471 684.65 L822.03 684.65 L822.59 684.65 L823.149 684.65 L823.708 684.65 L824.267 684.65 L824.827 684.65 L825.386 684.65 L825.945 684.65 L826.504 684.65 L827.064 684.65 L827.623 684.65 L828.182 684.65 L828.741 684.65 L829.301 684.65 L829.86 684.65 L830.419 684.65 L830.978 684.65 L831.538 684.65 L832.097 684.65 L832.656 684.65 L833.215 684.65 L833.775 684.65 L834.334 684.65 L834.893 684.65 L835.452 684.65 L836.012 684.65 L836.571 684.65 L837.13 684.65 L837.689 684.65 L838.249 684.65 L838.808 684.65 L839.367 684.65 L839.926 684.65 L840.486 684.65 L841.045 684.65 L841.604 684.65 L842.163 684.65 L842.723 684.65 L843.282 684.65 L843.841 684.65 L844.4 684.65 L844.96 684.65 L845.519 684.65 L846.078 684.65 L846.637 684.65 L847.197 684.65 L847.756 684.65 L848.315 684.65 L848.874 684.65 L849.434 684.65 L849.993 684.65 L850.552 684.65 L851.111 684.65 L851.671 684.65 L852.23 684.65 L852.789 684.65 L853.348 684.65 L853.908 684.65 L854.467 684.65 L855.026 684.65 L855.585 684.65 L856.145 684.65 L856.704 684.65 L857.263 684.65 L857.822 684.65 L858.382 684.65 L858.941 684.65 L859.5 684.65 L860.059 684.65 L860.619 684.65 L861.178 684.65 L861.737 684.65 L862.296 684.65 L862.856 684.65 L863.415 684.65 L863.974 684.65 L864.533 684.65 L865.093 684.65 L865.652 684.65 L866.211 684.65 L866.77 684.65 L867.33 684.65 L867.889 684.65 L868.448 684.65 L869.007 684.65 L869.567 684.65 L870.126 684.65 L870.685 684.65 L871.244 684.65 L871.804 684.65 L872.363 684.65 L872.922 684.65 L873.481 684.65 L874.041 684.65 L874.6 684.65 L875.159 684.65 L875.718 684.65 L876.278 684.65 L876.837 684.65 L877.396 684.65 L877.955 684.65 L878.515 684.65 L879.074 684.65 L879.633 684.65 L880.192 684.65 L880.752 684.65 L881.311 684.65 L881.87 684.65 L882.429 684.65 L882.989 684.65 L883.548 684.65 L884.107 684.65 L884.666 684.65 L885.226 684.65 L885.785 684.65 L886.344 684.65 L886.903 684.65 L887.463 684.65 L888.022 684.65 L888.581 684.65 L889.14 684.65 L889.7 684.65 L890.259 684.65 L890.818 684.65 L891.377 684.65 L891.937 684.65 L892.496 684.65 L893.055 684.65 L893.614 684.65 L894.174 684.65 L894.733 684.65 L895.292 684.65 L895.851 684.65 L896.411 684.65 L896.97 684.65 L897.529 684.65 L898.088 684.65 L898.648 684.65 L899.207 684.65 L899.766 684.65 L900.325 684.65 L900.885 684.65 L901.444 684.65 L902.003 684.65 L902.562 684.65 L903.122 684.65 L903.681 684.65 L904.24 684.65 L904.799 684.65 L905.359 684.65 L905.918 684.65 L906.477 684.65 L907.036 684.65 L907.596 684.65 L908.155 684.65 L908.714 684.65 L909.273 684.65 L909.833 684.65 L910.392 684.65 L910.951 684.65 L911.51 684.65 L912.07 684.65 L912.629 684.65 L913.188 684.65 L913.747 684.65 L914.307 684.65 L914.866 684.65 L915.425 684.65 L915.984 684.65 L916.544 684.65 L917.103 684.65 L917.662 684.65 L918.221 684.65 L918.781 684.65 L919.34 684.65 L919.899 684.65 L920.458 684.65 L921.018 684.65 L921.577 684.65 L922.136 684.65 L922.695 684.65 L923.255 684.65 L923.814 684.65 L924.373 684.65 L924.932 684.65 L925.492 684.65 L926.051 684.65 L926.61 684.65 L927.169 684.65 L927.729 684.65 L928.288 684.65 L928.847 684.65 L929.406 684.65 L929.966 684.65 L930.525 684.65 L931.084 684.65 L931.644 684.65 L932.203 684.65 L932.762 684.65 L933.321 684.65 L933.881 684.65 L934.44 684.65 L934.999 684.65 L935.558 684.65 L936.118 684.65 L936.677 684.65 L937.236 684.65 L937.795 684.65 L938.355 684.65 L938.914 684.65 L939.473 684.65 L940.032 684.65 L940.592 684.65 L941.151 684.65 L941.71 684.65 L942.269 684.65 L942.829 684.65 L943.388 684.65 L943.947 684.65 L944.506 684.65 L945.066 684.65 L945.625 684.65 L946.184 684.65 L946.743 684.65 L947.303 684.65 L947.862 684.65 L948.421 684.65 L948.98 684.65 L949.54 684.65 L950.099 684.65 L950.658 684.65 L951.217 684.65 L951.777 684.65 L952.336 684.65 L952.895 684.65 L953.454 684.65 L954.014 684.65 L954.573 684.65 L955.132 684.65 L955.691 684.65 L956.251 684.65 L956.81 684.65 L957.369 684.65 L957.928 684.65 L958.488 684.65 L959.047 684.65 L959.606 684.65 L960.165 684.65 L960.725 684.65 L961.284 684.65 L961.843 684.65 L962.402 684.65 L962.962 684.65 L963.521 684.65 L964.08 684.65 L964.639 684.65 L965.199 684.65 L965.758 684.65 L966.317 684.65 L966.876 684.65 L967.436 684.65 L967.995 684.65 L968.554 684.65 L969.113 684.65 L969.673 684.65 L970.232 684.65 L970.791 684.65 L971.35 684.65 L971.91 684.65 L972.469 684.65 L973.028 684.65 L973.587 684.65 L974.147 684.65 L974.706 684.65 L975.265 684.65 L975.824 684.65 L976.384 684.65 L976.943 684.65 L977.502 684.65 L978.061 684.65 L978.621 684.65 L979.18 684.65 L979.739 684.65 L980.298 684.65 L980.858 684.65 L981.417 684.65 L981.976 684.65 L982.535 684.65 L983.095 684.65 L983.654 684.65 L984.213 684.65 L984.772 684.65 L985.332 684.65 L985.891 684.65 L986.45 684.65 L987.009 684.65 L987.569 684.65 L988.128 684.65 L988.687 684.65 L989.246 684.65 L989.806 684.65 L990.365 684.65 L990.924 684.65 L991.483 684.65 L992.043 684.65 L992.602 684.65 L993.161 684.65 L993.72 684.65 L994.28 684.65 L994.839 684.65 L995.398 684.65 L995.957 684.65 L996.517 684.65 L997.076 684.65 L997.635 684.65 L998.194 684.65 L998.754 684.65 L999.313 684.65 L999.872 684.65 L1000.43 684.65 L1000.99 684.65 L1001.55 684.65 L1002.11 684.65 L1002.67 684.65 L1003.23 684.65 L1003.79 684.65 L1004.35 684.65 L1004.91 684.65 L1005.46 684.65 L1006.02 684.65 L1006.58 684.65 L1007.14 684.65 L1007.7 684.65 L1008.26 684.65 L1008.82 684.65 L1009.38 684.65 L1009.94 684.65 L1010.5 684.65 L1011.06 684.65 L1011.62 684.65 L1012.18 684.65 L1012.73 684.65 L1013.29 684.65 L1013.85 684.65 L1014.41 684.65 L1014.97 684.65 L1015.53 684.65 L1016.09 684.65 L1016.65 684.65 L1017.21 684.65 L1017.77 684.65 L1018.33 684.65 L1018.89 684.65 L1019.45 684.65 L1020.01 684.65 L1020.56 684.65 L1021.12 684.65 L1021.68 684.65 L1022.24 684.65 L1022.8 684.65 L1023.36 684.65 L1023.92 684.65 L1024.48 684.65 L1025.04 684.65 L1025.6 684.65 L1026.16 684.65 L1026.72 684.65 L1027.28 684.65 L1027.83 684.65 L1028.39 684.65 L1028.95 684.65 L1029.51 684.65 L1030.07 684.65 L1030.63 684.65 L1031.19 684.65 L1031.75 684.65 L1032.31 684.65 L1032.87 684.65 L1033.43 684.65 L1033.99 684.65 L1034.55 684.65 L1035.1 684.65 L1035.66 684.65 L1036.22 684.65 L1036.78 684.65 L1037.34 684.65 L1037.9 684.65 L1038.46 684.65 L1039.02 684.65 L1039.58 684.65 L1040.14 684.65 L1040.7 684.65 L1041.26 684.65 L1041.82 684.65 L1042.38 684.65 L1042.93 684.65 L1043.49 684.65 L1044.05 684.65 L1044.61 684.65 L1045.17 684.65 L1045.73 684.65 L1046.29 684.65 L1046.85 684.65 L1047.41 684.65 L1047.97 684.65 L1048.53 684.65 L1049.09 684.65 L1049.65 684.65 L1050.2 684.65 L1050.76 684.65 L1051.32 684.65 L1051.88 684.65 L1052.44 684.65 L1053 684.65 L1053.56 684.65 L1054.12 684.65 L1054.68 684.65 L1055.24 684.65 L1055.8 684.65 L1056.36 684.65 L1056.92 684.65 L1057.48 684.65 L1058.03 684.65 L1058.59 684.65 L1059.15 684.65 L1059.71 684.65 L1060.27 684.65 L1060.83 684.65 L1061.39 684.65 L1061.95 684.65 L1062.51 684.65 L1063.07 684.65 L1063.63 684.65 L1064.19 684.65 L1064.75 684.65 L1065.3 684.65 L1065.86 684.65 L1066.42 684.65 L1066.98 684.65 L1067.54 684.65 L1068.1 684.65 L1068.66 684.65 L1069.22 684.65 L1069.78 684.65 L1070.34 684.65 L1070.9 684.65 L1071.46 684.65 L1072.02 684.65 L1072.57 684.65 L1073.13 684.65 L1073.69 684.65 L1074.25 684.65 L1074.81 684.65 L1075.37 684.65 L1075.93 684.65 L1076.49 684.65 L1077.05 684.65 L1077.61 684.65 L1078.17 684.65 L1078.73 684.65 L1079.29 684.65 L1079.85 684.65 L1080.4 684.65 L1080.96 684.65 L1081.52 684.65 L1082.08 684.65 L1082.64 684.65 L1083.2 684.65 L1083.76 684.65 L1084.32 684.65 L1084.88 684.65 L1085.44 684.65 L1086 684.65 L1086.56 684.65 L1087.12 684.65 L1087.67 684.65 L1088.23 684.65 L1088.79 684.65 L1089.35 684.65 L1089.91 684.65 L1090.47 684.65 L1091.03 684.65 L1091.59 684.65 L1092.15 684.65 L1092.71 684.65 L1093.27 684.65 L1093.83 684.65 L1094.39 684.65 L1094.94 684.65 L1095.5 684.65 L1096.06 684.65 L1096.62 684.65 L1097.18 684.65 L1097.74 684.65 L1098.3 684.65 L1098.86 684.65 L1099.42 684.65 L1099.98 684.65 L1100.54 684.65 L1101.1 684.65 L1101.66 684.65 L1102.22 684.65 L1102.77 684.65 L1103.33 684.65 L1103.89 684.65 L1104.45 684.65 L1105.01 684.65 L1105.57 684.65 L1106.13 684.65 L1106.69 684.65 L1107.25 684.65 L1107.81 684.65 L1108.37 684.65 L1108.93 684.65 L1109.49 684.65 L1110.04 684.65 L1110.6 684.65 L1111.16 684.65 L1111.72 684.65 L1112.28 684.65 L1112.84 684.65 L1113.4 684.65 L1113.96 684.65 L1114.52 684.65 L1115.08 684.65 L1115.64 684.65 L1116.2 684.65 L1116.76 684.65 L1117.31 684.65 L1117.87 684.65 L1118.43 684.65 L1118.99 684.65 L1119.55 684.65 L1120.11 684.65 L1120.67 684.65 L1121.23 684.65 L1121.79 684.65 L1122.35 684.65 L1122.91 684.65 L1123.47 684.65 L1124.03 684.65 L1124.59 684.65 L1125.14 684.65 L1125.7 684.65 L1126.26 684.65 L1126.82 684.65 L1127.38 684.65 L1127.94 684.65 L1128.5 684.65 L1129.06 684.65 L1129.62 684.65 L1130.18 684.65 L1130.74 684.65 L1131.3 684.65 L1131.86 684.65 L1132.41 684.65 L1132.97 684.65 L1133.53 684.65 L1134.09 684.65 L1134.65 684.65 L1135.21 684.65 L1135.77 684.65 L1136.33 684.65 L1136.89 684.65 L1137.45 684.65 L1138.01 684.65 L1138.57 684.65 L1139.13 684.65 L1139.68 684.65 L1140.24 684.65 L1140.8 684.65 L1141.36 684.65 L1141.92 684.65 L1142.48 684.65 L1143.04 684.65 L1143.6 684.65 L1144.16 684.65 L1144.72 684.65 L1145.28 684.65 L1145.84 684.65 L1146.4 684.65 L1146.96 684.65 L1147.51 684.65 L1148.07 684.65 L1148.63 684.65 L1149.19 684.65 L1149.75 684.65 L1150.31 684.65 L1150.87 684.65 L1151.43 684.65 L1151.99 684.65 L1152.55 684.65 L1153.11 684.65 L1153.67 684.65 L1154.23 684.65 L1154.78 684.65 L1155.34 684.65 L1155.9 684.65 L1156.46 684.65 L1157.02 684.65 L1157.58 684.65 L1158.14 684.65 L1158.7 684.65 L1159.26 684.65 L1159.82 684.65 L1160.38 684.65 L1160.94 684.65 L1161.5 684.65 L1162.05 684.65 L1162.61 684.65 L1163.17 684.65 L1163.73 684.65 L1164.29 684.65 L1164.85 684.65 L1165.41 684.65 L1165.97 684.65 L1166.53 684.65 L1167.09 684.65 L1167.65 684.65 L1168.21 684.65 L1168.77 684.65 L1169.33 684.65 L1169.88 684.65 L1170.44 684.65 L1171 684.65 L1171.56 684.65 L1172.12 684.65 L1172.68 684.65 L1173.24 684.65 L1173.8 684.65 L1174.36 684.65 L1174.92 684.65 L1175.48 684.65 L1176.04 684.65 L1176.6 684.65 L1177.15 684.65 L1177.71 684.65 L1178.27 684.65 L1178.83 684.65 L1179.39 684.65 L1179.95 684.65 L1180.51 684.65 L1181.07 684.65 L1181.63 684.65 L1182.19 684.65 L1182.75 684.65 L1183.31 684.65 L1183.87 684.65 L1184.43 684.65 L1184.98 684.65 L1185.54 684.65 L1186.1 684.65 L1186.66 684.65 L1187.22 684.65 L1187.78 684.65 L1188.34 684.65 L1188.9 684.65 L1189.46 684.65 L1190.02 684.65 L1190.58 684.65 L1191.14 684.65 L1191.7 684.65 L1192.25 684.65 L1192.81 684.65 L1193.37 684.65 L1193.93 684.65 L1194.49 684.65 L1195.05 684.65 L1195.61 684.65 L1196.17 684.65 L1196.73 684.65 L1197.29 684.65 L1197.85 684.65 L1198.41 684.65 L1198.97 684.65 L1199.52 684.65 L1200.08 684.65 L1200.64 684.65 L1201.2 684.65 L1201.76 684.65 L1202.32 684.65 L1202.88 684.65 L1203.44 684.65 L1204 684.65 L1204.56 684.65 L1205.12 684.65 L1205.68 684.65 L1206.24 684.65 L1206.8 684.65 L1207.35 684.65 L1207.91 684.65 L1208.47 684.65 L1209.03 684.65 L1209.59 684.65 L1210.15 684.65 L1210.71 684.65 L1211.27 684.65 L1211.83 684.65 L1212.39 684.65 L1212.95 684.65 L1213.51 684.65 L1214.07 684.65 L1214.62 684.65 L1215.18 684.65 L1215.74 684.65 L1216.3 684.65 L1216.86 684.65 L1217.42 684.65 L1217.98 684.65 L1218.54 684.65 L1219.1 684.65 L1219.66 684.65 L1220.22 684.65 L1220.78 684.65 L1221.34 684.65 L1221.89 684.65 L1222.45 684.65 L1223.01 684.65 L1223.57 684.65 L1224.13 684.65 L1224.69 684.65 L1225.25 684.65 L1225.81 684.65 L1226.37 684.65 L1226.93 684.65 L1227.49 684.65 L1228.05 684.65 L1228.61 684.65 L1229.17 684.65 L1229.72 684.65 L1230.28 684.65 L1230.84 684.65 L1231.4 684.65 L1231.96 684.65 L1232.52 684.65 L1233.08 684.65 L1233.64 684.65 L1234.2 684.65 L1234.76 684.65 L1235.32 684.65 L1235.88 684.65 L1236.44 684.65 L1236.99 684.65 L1237.55 684.65 L1238.11 684.65 L1238.67 684.65 L1239.23 684.65 L1239.79 684.65 L1240.35 684.65 L1240.91 684.65 L1241.47 684.65 L1242.03 684.65 L1242.59 684.65 L1243.15 684.65 L1243.71 684.65 L1244.26 684.65 L1244.82 684.65 L1245.38 684.65 L1245.94 684.65 L1246.5 684.65 L1247.06 684.65 L1247.62 684.65 L1248.18 684.65 L1248.74 684.65 L1249.3 684.65 L1249.86 684.65 L1250.42 684.65 L1250.98 684.65 L1251.54 684.65 L1252.09 684.65 L1252.65 684.65 L1253.21 684.65 L1253.77 684.65 L1254.33 684.65 L1254.89 684.65 L1255.45 684.65 L1256.01 684.65 L1256.57 684.65 L1257.13 684.65 L1257.69 684.65 L1258.25 684.65 L1258.81 684.65 L1259.36 684.65 L1259.92 684.65 L1260.48 684.65 L1261.04 684.65 L1261.6 684.65 L1262.16 684.65 L1262.72 684.65 L1263.28 684.65 L1263.84 684.65 L1264.4 684.65 L1264.96 684.65 L1265.52 684.65 L1266.08 684.65 L1266.63 684.65 L1267.19 684.65 L1267.75 684.65 L1268.31 684.65 L1268.87 684.65 L1269.43 684.65 L1269.99 684.65 L1270.55 684.65 L1271.11 684.65 L1271.67 684.65 L1272.23 684.65 L1272.79 684.65 L1273.35 684.65 L1273.91 684.65 L1274.46 684.65 L1275.02 684.65 L1275.58 684.65 L1276.14 684.65 L1276.7 684.65 L1277.26 684.65 L1277.82 684.65 L1278.38 684.65 L1278.94 684.65 L1279.5 684.65 L1280.06 684.65 L1280.62 684.65 L1281.18 684.65 L1281.73 684.65 L1282.29 684.65 L1282.85 684.65 L1283.41 684.65 L1283.97 684.65 L1284.53 684.65 L1285.09 684.65 L1285.65 684.65 L1286.21 684.65 L1286.77 684.65 L1287.33 684.65 L1287.89 684.65 L1288.45 684.65 L1289 684.65 L1289.56 684.65 L1290.12 684.65 L1290.68 684.65 L1291.24 684.65 L1291.8 684.65 L1292.36 684.65 L1292.92 684.65 L1293.48 684.65 L1294.04 684.65 L1294.6 684.65 L1295.16 684.65 L1295.72 684.65 L1296.28 684.65 L1296.83 684.65 L1297.39 684.65 L1297.95 684.65 L1298.51 684.65 L1299.07 684.65 L1299.63 684.65 L1300.19 684.65 L1300.75 684.65 L1301.31 684.65 L1301.87 684.65 L1302.43 684.65 L1302.99 684.65 L1303.55 684.65 L1304.1 684.65 L1304.66 684.65 L1305.22 684.65 L1305.78 684.65 L1306.34 684.65 L1306.9 684.65 L1307.46 684.65 L1308.02 684.65 L1308.58 684.65 L1309.14 684.65 L1309.7 684.65 L1310.26 684.65 L1310.82 684.65 L1311.38 684.65 L1311.93 684.65 L1312.49 684.65 L1313.05 684.65 L1313.61 684.65 L1314.17 684.65 L1314.73 684.65 L1315.29 684.65 L1315.85 684.65 L1316.41 684.65 L1316.97 684.65 L1317.53 684.65 L1318.09 684.65 L1318.65 684.65 L1319.2 684.65 L1319.76 684.65 L1320.32 684.65 L1320.88 684.65 L1321.44 684.65 L1322 684.65 L1322.56 684.65 L1323.12 684.65 L1323.68 684.65 L1324.24 684.65 L1324.8 684.65 L1325.36 684.65 L1325.92 684.65 L1326.47 684.65 L1327.03 684.65 L1327.59 684.65 L1328.15 684.65 L1328.71 684.65 L1329.27 684.65 L1329.83 684.65 L1330.39 684.65 L1330.95 684.65 L1331.51 684.65 L1332.07 684.65 L1332.63 684.65 L1333.19 684.65 L1333.75 684.65 L1334.3 684.65 L1334.86 684.65 L1335.42 684.65 L1335.98 684.65 L1336.54 684.65 L1337.1 684.65 L1337.66 684.65 L1338.22 684.65 L1338.78 684.65 L1339.34 684.65 L1339.9 684.65 L1340.46 684.65 L1341.02 684.65 L1341.57 684.65 L1342.13 684.65 L1342.69 684.65 L1343.25 684.65 L1343.81 684.65 L1344.37 684.65 L1344.93 684.65 L1345.49 684.65 L1346.05 684.65 L1346.61 684.65 L1347.17 684.65 L1347.73 684.65 L1348.29 684.65 L1348.84 684.65 L1349.4 684.65 L1349.96 684.65 L1350.52 684.65 L1351.08 684.65 L1351.64 684.65 L1352.2 684.65 L1352.76 684.65 L1353.32 684.65 L1353.88 684.65 L1354.44 684.65 L1355 684.65 L1355.56 684.65 L1356.12 684.65 L1356.67 684.65 L1357.23 684.65 L1357.79 684.65 L1358.35 684.65 L1358.91 684.65 L1359.47 684.65 L1360.03 684.65 L1360.59 684.65 L1361.15 684.65 L1361.71 684.65 L1362.27 684.65 L1362.83 684.65 L1363.39 684.65 L1363.94 684.65 L1364.5 684.65 L1365.06 684.65 L1365.62 684.65 L1366.18 684.65 L1366.74 684.65 L1367.3 684.65 L1367.86 684.65 L1368.42 684.65 L1368.98 684.65 L1369.54 684.65 L1370.1 684.65 L1370.66 684.65 L1371.21 684.65 L1371.77 684.65 L1372.33 684.65 L1372.89 684.65 L1373.45 684.65 L1374.01 684.65 L1374.57 684.65 L1375.13 684.65 L1375.69 684.65 L1376.25 684.65 L1376.81 684.65 L1377.37 684.65 L1377.93 684.65 L1378.49 684.65 L1379.04 684.65 L1379.6 684.65 L1380.16 684.65 L1380.72 684.65 L1381.28 684.65 L1381.84 684.65 L1382.4 684.65 L1382.96 684.65 L1383.52 684.65 L1384.08 684.65 L1384.64 684.65 L1385.2 684.65 L1385.76 684.65 L1386.31 684.65 L1386.87 684.65 L1387.43 684.65 L1387.99 684.65 L1388.55 684.65 L1389.11 684.65 L1389.67 684.65 L1390.23 684.65 L1390.79 684.65 L1391.35 684.65 L1391.91 684.65 L1392.47 684.65 L1393.03 684.65 L1393.58 684.65 L1394.14 684.65 L1394.7 684.65 L1395.26 684.65 L1395.82 684.65 L1396.38 684.65 L1396.94 684.65 L1397.5 684.65 L1398.06 684.65 L1398.62 684.65 L1399.18 684.65 L1399.74 684.65 L1400.3 684.65 L1400.86 684.65 L1401.41 684.65 L1401.97 684.65 L1402.53 684.65 L1403.09 684.65 L1403.65 684.65 L1404.21 684.65 L1404.77 684.65 L1405.33 684.65 L1405.89 684.65 L1406.45 684.65 L1407.01 684.65 L1407.57 684.65 L1408.13 684.65 L1408.68 684.65 L1409.24 684.65 L1409.8 684.65 L1410.36 684.65 L1410.92 684.65 L1411.48 684.65 L1412.04 684.65 L1412.6 684.65 L1413.16 684.65 L1413.72 684.65 L1414.28 684.65 L1414.84 684.65 L1415.4 684.65 L1415.95 684.65 L1416.51 684.65 L1417.07 684.65 L1417.63 684.65 L1418.19 684.65 L1418.75 684.65 L1419.31 684.65 L1419.87 684.65 L1420.43 684.65 L1420.99 684.65 L1421.55 684.65 L1422.11 684.65 L1422.67 684.65 L1423.23 684.65 L1423.78 684.65 L1424.34 684.65 L1424.9 684.65 L1425.46 684.65 L1426.02 684.65 L1426.58 684.65 L1427.14 684.65 L1427.7 684.65 L1428.26 684.65 L1428.82 684.65 L1429.38 684.65 L1429.94 684.65 L1430.5 684.65 L1431.05 684.65 L1431.61 684.65 L1432.17 684.65 L1432.73 684.65 L1433.29 684.65 L1433.85 684.65 L1434.41 684.65 L1434.97 684.65 L1435.53 684.65 L1436.09 684.65 L1436.65 684.65 L1437.21 684.65 L1437.77 684.65 L1438.33 684.65 L1438.88 684.65 L1439.44 684.65 L1440 684.65 L1440.56 684.65 L1441.12 684.65 L1441.68 684.65 L1442.24 684.65 L1442.8 684.65 L1443.36 684.65 L1443.92 684.65 L1444.48 684.65 L1445.04 684.65 L1445.6 684.65 L1446.15 684.65 L1446.71 684.65 L1447.27 684.65 L1447.83 684.65 L1448.39 684.65 L1448.95 684.65 L1449.51 684.65 L1450.07 684.65 L1450.63 684.65 L1451.19 684.65 L1451.75 684.65 L1452.31 684.65 L1452.87 684.65 L1453.42 684.65 L1453.98 684.65 L1454.54 684.65 L1455.1 684.65 L1455.66 684.65 L1456.22 684.65 L1456.78 684.65 L1457.34 684.65 L1457.9 684.65 L1458.46 684.65 L1459.02 684.65 L1459.58 684.65 L1460.14 684.65 L1460.7 684.65 L1461.25 684.65 L1461.81 684.65 L1462.37 684.65 L1462.93 684.65 L1463.49 684.65 L1464.05 684.65 L1464.61 684.65 L1465.17 684.65 L1465.73 684.65 L1466.29 684.65 L1466.85 684.65 L1467.41 684.65 L1467.97 684.65 L1468.52 684.65 L1469.08 684.65 L1469.64 684.65 L1470.2 684.65 L1470.76 684.65 L1471.32 684.65 L1471.88 684.65 L1472.44 684.65 L1473 684.65 L1473.56 684.65 L1474.12 684.65 L1474.68 684.65 L1475.24 684.65 L1475.79 684.65 L1476.35 684.65 L1476.91 684.65 L1477.47 684.65 L1478.03 684.65 L1478.59 684.65 L1479.15 684.65 L1479.71 684.65 L1480.27 684.65 L1480.83 684.65 L1481.39 684.65 L1481.95 684.65 L1482.51 684.65 L1483.07 684.65 L1483.62 684.65 L1484.18 684.65 L1484.74 684.65 L1485.3 684.65 L1485.86 684.65 L1486.42 684.65 L1486.98 684.65 L1487.54 684.65 L1488.1 684.65 L1488.66 684.65 L1489.22 684.65 L1489.78 684.65 L1490.34 684.65 L1490.89 684.65 L1491.45 684.65 L1492.01 684.65 L1492.57 684.65 L1493.13 684.65 L1493.69 684.65 L1494.25 684.65 L1494.81 684.65 L1495.37 684.65 L1495.93 684.65 L1496.49 684.65 L1497.05 684.65 L1497.61 684.65 L1498.16 684.65 L1498.72 684.65 L1499.28 684.65 L1499.84 684.65 L1500.4 684.65 L1500.96 684.65 L1501.52 684.65 L1502.08 684.65 L1502.64 684.65 L1503.2 684.65 L1503.76 684.65 L1504.32 684.65 L1504.88 684.65 L1505.44 684.65 L1505.99 684.65 L1506.55 684.65 L1507.11 684.65 L1507.67 684.65 L1508.23 684.65 L1508.79 684.65 L1509.35 684.65 L1509.91 684.65 L1510.47 684.65 L1511.03 684.65 L1511.59 684.65 L1512.15 684.65 L1512.71 684.65 L1513.26 684.65 L1513.82 684.65 L1514.38 684.65 L1514.94 684.65 L1515.5 684.65 L1516.06 684.65 L1516.62 684.65 L1517.18 684.65 L1517.74 684.65 L1518.3 684.65 L1518.86 684.65 L1519.42 684.65 L1519.98 684.65 L1520.53 684.65 L1521.09 684.65 L1521.65 684.65 L1522.21 684.65 L1522.77 684.65 L1523.33 684.65 L1523.89 684.65 L1524.45 684.65 L1525.01 684.65 L1525.57 684.65 L1526.13 684.65 L1526.69 684.65 L1527.25 684.65 L1527.81 684.65 L1528.36 684.65 L1528.92 684.65 L1529.48 684.65 L1530.04 684.65 L1530.6 684.65 L1531.16 684.65 L1531.72 684.65 L1532.28 684.65 L1532.84 684.65 L1533.4 684.65 L1533.96 684.65 L1534.52 684.65 L1535.08 684.65 L1535.63 684.65 L1536.19 684.65 L1536.75 684.65 L1537.31 684.65 L1537.87 684.65 L1538.43 684.65 L1538.99 684.65 L1539.55 684.65 L1540.11 684.65 L1540.67 684.65 L1541.23 684.65 L1541.79 684.65 L1542.35 684.65 L1542.9 684.65 L1543.46 684.65 L1544.02 684.65 L1544.58 684.65 L1545.14 684.65 L1545.7 684.65 L1546.26 684.65 L1546.82 684.65 L1547.38 684.65 L1547.94 684.65 L1548.5 684.65 L1549.06 684.65 L1549.62 684.65 L1550.18 684.65 L1550.73 684.65 L1551.29 684.65 L1551.85 684.65 L1552.41 684.65 L1552.97 684.65 L1553.53 684.65 L1554.09 684.65 L1554.65 684.65 L1555.21 684.65 L1555.77 684.65 L1556.33 684.65 L1556.89 684.65 L1557.45 684.65 L1558 684.65 L1558.56 684.65 L1559.12 684.65 L1559.68 684.65 L1560.24 684.65 L1560.8 684.65 L1561.36 684.65 L1561.92 684.65 L1562.48 684.65 L1563.04 684.65 L1563.6 684.65 L1564.16 684.65 L1564.72 684.65 L1565.28 684.65 L1565.83 684.65 L1566.39 684.65 L1566.95 684.65 L1567.51 684.65 L1568.07 684.65 L1568.63 684.65 L1569.19 684.65 L1569.75 684.65 L1570.31 684.65 L1570.87 684.65 L1571.43 684.65 L1571.99 684.65 L1572.55 684.65 L1573.1 684.65 L1573.66 684.65 L1574.22 684.65 L1574.78 684.65 L1575.34 684.65 L1575.9 684.65 L1576.46 684.65 L1577.02 684.65 L1577.58 684.65 L1578.14 684.65 L1578.7 684.65 L1579.26 684.65 L1579.82 684.65 L1580.37 684.65 L1580.93 684.65 L1581.49 684.65 L1582.05 684.65 L1582.61 684.65 L1583.17 684.65 L1583.73 684.65 L1584.29 684.65 L1584.85 684.65 L1585.41 684.65 L1585.97 684.65 L1586.53 684.65 L1587.09 684.65 L1587.65 684.65 L1588.2 684.65 L1588.76 684.65 L1589.32 684.65 L1589.88 684.65 L1590.44 684.65 L1591 684.65 L1591.56 684.65 L1592.12 684.65 L1592.68 684.65 L1593.24 684.65 L1593.8 684.65 L1594.36 684.65 L1594.92 684.65 L1595.47 684.65 L1596.03 684.65 L1596.59 684.65 L1597.15 684.65 L1597.71 684.65 L1598.27 684.65 L1598.83 684.65 L1599.39 684.65 L1599.95 684.65 L1600.51 684.65 L1601.07 684.65 L1601.63 684.65 L1602.19 684.65 L1602.74 684.65 L1603.3 684.65 L1603.86 684.65 L1604.42 684.65 L1604.98 684.65 L1605.54 684.65 L1606.1 684.65 L1606.66 684.65 L1607.22 684.65 L1607.78 684.65 L1608.34 684.65 L1608.9 684.65 L1609.46 684.65 L1610.02 684.65 L1610.57 684.65 L1611.13 684.65 L1611.69 684.65 L1612.25 684.65 L1612.81 684.65 L1613.37 684.65 L1613.93 684.65 L1614.49 684.65 L1615.05 684.65 L1615.61 684.65 L1616.17 684.65 L1616.73 684.65 L1617.29 684.65 L1617.84 684.65 L1618.4 684.65 L1618.96 684.65 L1619.52 684.65 L1620.08 684.65 L1620.64 684.65 L1621.2 684.65 L1621.76 684.65 L1622.32 684.65 L1622.88 684.65 L1623.44 684.65 L1624 684.65 L1624.56 684.65 L1625.11 684.65 L1625.67 684.65 L1626.23 684.65 L1626.79 684.65 L1627.35 684.65 L1627.91 684.65 L1628.47 684.65 L1629.03 684.65 L1629.59 684.65 L1630.15 684.65 L1630.71 684.65 L1631.27 684.65 L1631.83 684.65 L1632.39 684.65 L1632.94 684.65 L1633.5 684.65 L1634.06 684.65 L1634.62 684.65 L1635.18 684.65 L1635.74 684.65 L1636.3 684.65 L1636.86 684.65 L1637.42 684.65 L1637.98 684.65 L1638.54 684.65 L1639.1 684.65 L1639.66 684.65 L1640.21 684.65 L1640.77 684.65 L1641.33 684.65 L1641.89 684.65 L1642.45 684.65 L1643.01 684.65 L1643.57 684.65 L1644.13 684.65 L1644.69 684.65 L1645.25 684.65 L1645.81 684.65 L1646.37 684.65 L1646.93 684.65 L1647.48 684.65 L1648.04 684.65 L1648.6 684.65 L1649.16 684.65 L1649.72 684.65 L1650.28 684.65 L1650.84 684.65 L1651.4 684.65 L1651.96 684.65 L1652.52 684.65 L1653.08 684.65 L1653.64 684.65 L1654.2 684.65 L1654.76 684.65 L1655.31 684.65 L1655.87 684.65 L1656.43 684.65 L1656.99 684.65 L1657.55 684.65 L1658.11 684.65 L1658.67 684.65 L1659.23 684.65 L1659.79 684.65 L1660.35 684.65 L1660.91 684.65 L1661.47 684.65 L1662.03 684.65 L1662.58 684.65 L1663.14 684.65 L1663.7 684.65 L1664.26 684.65 L1664.82 684.65 L1665.38 684.65 L1665.94 684.65 L1666.5 684.65 L1667.06 684.65 L1667.62 684.65 L1668.18 684.65 L1668.74 684.65 L1669.3 684.65 L1669.85 684.65 L1670.41 684.65 L1670.97 684.65 L1671.53 684.65 L1672.09 684.65 L1672.65 684.65 L1673.21 684.65 L1673.77 684.65 L1674.33 684.65 L1674.89 684.65 L1675.45 684.65 L1676.01 684.65 L1676.57 684.65 L1677.13 684.65 L1677.68 684.65 L1678.24 684.65 L1678.8 684.65 L1679.36 684.65 L1679.92 684.65 L1680.48 684.65 L1681.04 684.65 L1681.6 684.65 L1682.16 684.65 L1682.72 684.65 L1683.28 684.65 L1683.84 684.65 L1684.4 684.65 L1684.95 684.65 L1685.51 684.65 L1686.07 684.65 L1686.63 684.65 L1687.19 684.65 L1687.75 684.65 L1688.31 684.65 L1688.87 684.65 L1689.43 684.65 L1689.99 684.65 L1690.55 684.65 L1691.11 684.65 L1691.67 684.65 L1692.23 684.65 L1692.78 684.65 L1693.34 684.65 L1693.9 684.65 L1694.46 684.65 L1695.02 684.65 L1695.58 684.65 L1696.14 684.65 L1696.7 684.65 L1697.26 684.65 L1697.82 684.65 L1698.38 684.65 L1698.94 684.65 L1699.5 684.65 L1700.05 684.65 L1700.61 684.65 L1701.17 684.65 L1701.73 684.65 L1702.29 684.65 L1702.85 684.65 L1703.41 684.65 L1703.97 684.65 L1704.53 684.65 L1705.09 684.65 L1705.65 684.65 L1706.21 684.65 L1706.77 684.65 L1707.32 684.65 L1707.88 684.65 L1708.44 684.65 L1709 684.65 L1709.56 684.65 L1710.12 684.65 L1710.68 684.65 L1711.24 684.65 L1711.8 684.65 L1712.36 684.65 L1712.92 684.65 L1713.48 684.65 L1714.04 684.65 L1714.6 684.65 L1715.15 684.65 L1715.71 684.65 L1716.27 684.65 L1716.83 684.65 L1717.39 684.65 L1717.95 684.65 L1718.51 684.65 L1719.07 684.65 L1719.63 684.65 L1720.19 684.65 L1720.75 684.65 L1721.31 684.65 L1721.87 684.65 L1722.42 684.65 L1722.98 684.65 L1723.54 684.65 L1724.1 684.65 L1724.66 684.65 L1725.22 684.65 L1725.78 684.65 L1726.34 684.65 L1726.9 684.65 L1727.46 684.65 L1728.02 684.65 L1728.58 684.65 L1729.14 684.65 L1729.69 684.65 L1730.25 684.65 L1730.81 684.65 L1731.37 684.65 L1731.93 684.65 L1732.49 684.65 L1733.05 684.65 L1733.61 684.65 L1734.17 684.65 L1734.73 684.65 L1735.29 684.65 L1735.85 684.65 L1736.41 684.65 L1736.97 684.65 L1737.52 684.65 L1738.08 684.65 L1738.64 684.65 L1739.2 684.65 L1739.76 684.65 L1740.32 684.65 L1740.88 684.65 L1741.44 684.65 L1742 684.65 L1742.56 684.65 L1743.12 684.65 L1743.68 684.65 L1744.24 684.65 L1744.79 684.65 L1745.35 684.65 L1745.91 684.65 L1746.47 684.65 L1747.03 684.65 L1747.59 684.65 L1748.15 684.65 L1748.71 684.65 L1749.27 684.65 L1749.83 684.65 L1750.39 684.65 L1750.95 684.65 L1751.51 684.65 L1752.06 684.65 L1752.62 684.65 L1753.18 684.65 L1753.74 684.65 L1754.3 684.65 L1754.86 684.65 L1755.42 684.65 L1755.98 684.65 L1756.54 684.65 L1757.1 684.65 L1757.66 684.65 L1758.22 684.65 L1758.78 684.65 L1759.34 684.65 L1759.89 684.65 L1760.45 684.65 L1761.01 684.65 L1761.57 684.65 L1762.13 684.65 L1762.69 684.65 L1763.25 684.65 L1763.81 684.65 L1764.37 684.65 L1764.93 684.65 L1765.49 684.65 L1766.05 684.65 L1766.61 684.65 L1767.16 684.65 L1767.72 684.65 L1768.28 684.65 L1768.84 684.65 L1769.4 684.65 L1769.96 684.65 L1770.52 684.65 L1771.08 684.65 L1771.64 684.65 L1772.2 684.65 L1772.76 684.65 L1773.32 684.65 L1773.88 684.65 L1774.43 684.65 L1774.99 684.65 L1775.55 684.65 L1776.11 684.65 L1776.67 684.65 L1777.23 684.65 L1777.79 684.65 L1778.35 684.65 L1778.91 684.65 L1779.47 684.65 L1780.03 684.65 L1780.59 684.65 L1781.15 684.65 L1781.71 684.65 L1782.26 684.65 L1782.82 684.65 L1783.38 684.65 L1783.94 684.65 L1784.5 684.65 L1785.06 684.65 L1785.62 684.65 L1786.18 684.65 L1786.74 684.65 L1787.3 684.65 L1787.86 684.65 L1788.42 684.65 L1788.98 684.65 L1789.53 684.65 L1790.09 684.65 L1790.65 684.65 L1791.21 684.65 L1791.77 684.65 L1792.33 684.65 L1792.89 684.65 L1793.45 684.65 L1794.01 684.65 L1794.57 684.65 L1795.13 684.65 L1795.69 684.65 L1796.25 684.65 L1796.8 684.65 L1797.36 684.65 L1797.92 684.65 L1798.48 684.65 L1799.04 684.65 L1799.6 684.65 L1800.16 684.65 L1800.72 684.65 L1801.28 684.65 L1801.84 684.65 L1802.4 684.65 L1802.96 684.65 L1803.52 684.65 L1804.08 684.65 L1804.63 684.65 L1805.19 684.65 L1805.75 684.65 L1806.31 684.65 L1806.87 684.65 L1807.43 684.65 L1807.99 684.65 L1808.55 684.65 L1809.11 684.65 L1809.67 684.65 L1810.23 684.65 L1810.79 684.65 L1811.35 684.65 L1811.9 684.65 L1812.46 684.65 L1813.02 684.65 L1813.58 684.65 L1814.14 684.65 L1814.7 684.65 L1815.26 684.65 L1815.82 684.65 L1816.38 684.65 L1816.94 684.65 L1817.5 684.65 L1818.06 684.65 L1818.62 684.65 L1819.18 684.65 L1819.73 684.65 L1820.29 684.65 L1820.85 684.65 L1821.41 684.65 L1821.97 684.65 L1822.53 684.65 L1823.09 684.65 L1823.65 684.65 L1824.21 684.65 L1824.77 684.65 L1825.33 684.65 L1825.89 684.65 L1826.45 684.65 L1827 684.65 L1827.56 684.65 L1828.12 684.65 L1828.68 684.65 L1829.24 684.65 L1829.8 684.65 L1830.36 684.65 L1830.92 684.65 L1831.48 684.65 L1832.04 684.65 L1832.6 684.65 L1833.16 684.65 L1833.72 684.65 L1834.27 684.65 L1834.83 684.65 L1835.39 684.65 L1835.95 684.65 L1836.51 684.65 L1837.07 684.65 L1837.63 684.65 L1838.19 684.65 L1838.19 682.72 L1837.63 682.72 L1837.07 682.72 L1836.51 682.72 L1835.95 682.72 L1835.39 682.72 L1834.83 682.72 L1834.27 682.72 L1833.72 682.72 L1833.16 682.72 L1832.6 682.72 L1832.04 682.72 L1831.48 682.72 L1830.92 682.72 L1830.36 682.72 L1829.8 682.72 L1829.24 682.72 L1828.68 682.72 L1828.12 682.72 L1827.56 682.72 L1827 682.72 L1826.45 682.72 L1825.89 682.72 L1825.33 682.72 L1824.77 682.72 L1824.21 682.72 L1823.65 682.72 L1823.09 682.72 L1822.53 682.72 L1821.97 682.72 L1821.41 682.72 L1820.85 682.72 L1820.29 682.72 L1819.73 682.72 L1819.18 682.72 L1818.62 682.72 L1818.06 682.72 L1817.5 682.72 L1816.94 682.72 L1816.38 682.72 L1815.82 682.72 L1815.26 682.72 L1814.7 682.72 L1814.14 682.72 L1813.58 682.72 L1813.02 682.72 L1812.46 682.72 L1811.9 682.72 L1811.35 682.72 L1810.79 682.72 L1810.23 682.72 L1809.67 682.72 L1809.11 682.72 L1808.55 682.72 L1807.99 682.72 L1807.43 682.72 L1806.87 682.72 L1806.31 682.72 L1805.75 682.72 L1805.19 682.72 L1804.63 682.72 L1804.08 682.72 L1803.52 682.72 L1802.96 682.72 L1802.4 682.72 L1801.84 682.72 L1801.28 682.72 L1800.72 682.72 L1800.16 682.72 L1799.6 682.72 L1799.04 682.72 L1798.48 682.72 L1797.92 682.72 L1797.36 682.72 L1796.8 682.72 L1796.25 682.72 L1795.69 682.72 L1795.13 682.72 L1794.57 682.72 L1794.01 682.72 L1793.45 682.72 L1792.89 682.72 L1792.33 682.72 L1791.77 682.72 L1791.21 682.72 L1790.65 682.72 L1790.09 682.72 L1789.53 682.72 L1788.98 682.72 L1788.42 682.72 L1787.86 682.72 L1787.3 682.72 L1786.74 682.72 L1786.18 682.72 L1785.62 682.72 L1785.06 682.72 L1784.5 682.72 L1783.94 682.72 L1783.38 682.72 L1782.82 682.72 L1782.26 682.72 L1781.71 682.72 L1781.15 682.72 L1780.59 682.72 L1780.03 682.72 L1779.47 682.72 L1778.91 682.72 L1778.35 682.72 L1777.79 682.72 L1777.23 682.72 L1776.67 682.72 L1776.11 682.72 L1775.55 682.72 L1774.99 682.72 L1774.43 682.72 L1773.88 682.72 L1773.32 682.72 L1772.76 682.72 L1772.2 682.72 L1771.64 682.72 L1771.08 682.72 L1770.52 682.72 L1769.96 682.72 L1769.4 682.72 L1768.84 682.72 L1768.28 682.72 L1767.72 682.72 L1767.16 682.72 L1766.61 682.72 L1766.05 682.72 L1765.49 682.72 L1764.93 682.72 L1764.37 682.72 L1763.81 682.72 L1763.25 682.72 L1762.69 682.72 L1762.13 682.72 L1761.57 682.72 L1761.01 682.72 L1760.45 682.72 L1759.89 682.72 L1759.34 682.72 L1758.78 682.72 L1758.22 682.72 L1757.66 682.72 L1757.1 682.72 L1756.54 682.72 L1755.98 682.72 L1755.42 682.72 L1754.86 682.72 L1754.3 682.72 L1753.74 682.72 L1753.18 682.72 L1752.62 682.72 L1752.06 682.72 L1751.51 682.72 L1750.95 682.72 L1750.39 682.72 L1749.83 682.72 L1749.27 682.72 L1748.71 682.72 L1748.15 682.72 L1747.59 682.72 L1747.03 682.72 L1746.47 682.72 L1745.91 682.72 L1745.35 682.72 L1744.79 682.72 L1744.24 682.72 L1743.68 682.72 L1743.12 682.72 L1742.56 682.72 L1742 682.72 L1741.44 682.72 L1740.88 682.72 L1740.32 682.72 L1739.76 682.72 L1739.2 682.72 L1738.64 682.72 L1738.08 682.72 L1737.52 682.72 L1736.97 682.72 L1736.41 682.72 L1735.85 682.72 L1735.29 682.72 L1734.73 682.72 L1734.17 682.72 L1733.61 682.72 L1733.05 682.72 L1732.49 682.72 L1731.93 682.72 L1731.37 682.72 L1730.81 682.72 L1730.25 682.72 L1729.69 682.72 L1729.14 682.72 L1728.58 682.72 L1728.02 682.72 L1727.46 682.72 L1726.9 682.72 L1726.34 682.72 L1725.78 682.72 L1725.22 682.72 L1724.66 682.72 L1724.1 682.72 L1723.54 682.72 L1722.98 682.72 L1722.42 682.72 L1721.87 682.72 L1721.31 682.72 L1720.75 682.72 L1720.19 682.72 L1719.63 682.72 L1719.07 682.72 L1718.51 682.72 L1717.95 682.72 L1717.39 682.72 L1716.83 682.72 L1716.27 682.72 L1715.71 682.72 L1715.15 682.72 L1714.6 682.72 L1714.04 682.72 L1713.48 682.72 L1712.92 682.72 L1712.36 682.72 L1711.8 682.72 L1711.24 682.72 L1710.68 682.72 L1710.12 682.72 L1709.56 682.72 L1709 682.72 L1708.44 682.72 L1707.88 682.72 L1707.32 682.72 L1706.77 682.72 L1706.21 682.72 L1705.65 682.72 L1705.09 682.72 L1704.53 682.72 L1703.97 682.72 L1703.41 682.72 L1702.85 682.72 L1702.29 682.72 L1701.73 682.72 L1701.17 682.72 L1700.61 682.72 L1700.05 682.72 L1699.5 682.72 L1698.94 682.72 L1698.38 682.72 L1697.82 682.72 L1697.26 682.72 L1696.7 682.72 L1696.14 682.72 L1695.58 682.72 L1695.02 682.72 L1694.46 682.72 L1693.9 682.72 L1693.34 682.72 L1692.78 682.72 L1692.23 682.72 L1691.67 682.72 L1691.11 682.72 L1690.55 682.72 L1689.99 682.72 L1689.43 682.72 L1688.87 682.72 L1688.31 682.72 L1687.75 682.72 L1687.19 682.72 L1686.63 682.72 L1686.07 682.72 L1685.51 682.72 L1684.95 682.72 L1684.4 682.72 L1683.84 682.72 L1683.28 682.72 L1682.72 682.72 L1682.16 682.72 L1681.6 682.72 L1681.04 682.72 L1680.48 682.72 L1679.92 682.72 L1679.36 682.72 L1678.8 682.72 L1678.24 682.72 L1677.68 682.72 L1677.13 682.72 L1676.57 682.72 L1676.01 682.72 L1675.45 682.72 L1674.89 682.72 L1674.33 682.72 L1673.77 682.72 L1673.21 682.72 L1672.65 682.72 L1672.09 682.72 L1671.53 682.72 L1670.97 682.72 L1670.41 682.72 L1669.85 682.72 L1669.3 682.72 L1668.74 682.72 L1668.18 682.72 L1667.62 682.72 L1667.06 682.72 L1666.5 682.72 L1665.94 682.72 L1665.38 682.72 L1664.82 682.72 L1664.26 682.72 L1663.7 682.72 L1663.14 682.72 L1662.58 682.72 L1662.03 682.72 L1661.47 682.72 L1660.91 682.72 L1660.35 682.72 L1659.79 682.72 L1659.23 682.72 L1658.67 682.72 L1658.11 682.72 L1657.55 682.72 L1656.99 682.72 L1656.43 682.72 L1655.87 682.72 L1655.31 682.72 L1654.76 682.72 L1654.2 682.72 L1653.64 682.72 L1653.08 682.72 L1652.52 682.72 L1651.96 682.72 L1651.4 682.72 L1650.84 682.72 L1650.28 682.72 L1649.72 682.72 L1649.16 682.72 L1648.6 682.72 L1648.04 682.72 L1647.48 682.72 L1646.93 682.72 L1646.37 682.72 L1645.81 682.72 L1645.25 682.72 L1644.69 682.72 L1644.13 682.72 L1643.57 682.72 L1643.01 682.72 L1642.45 682.72 L1641.89 682.72 L1641.33 682.72 L1640.77 682.72 L1640.21 682.72 L1639.66 682.72 L1639.1 682.72 L1638.54 682.72 L1637.98 682.72 L1637.42 682.72 L1636.86 682.72 L1636.3 682.72 L1635.74 682.72 L1635.18 682.72 L1634.62 682.72 L1634.06 682.72 L1633.5 682.72 L1632.94 682.72 L1632.39 682.72 L1631.83 682.72 L1631.27 682.72 L1630.71 682.72 L1630.15 682.72 L1629.59 682.72 L1629.03 682.72 L1628.47 682.72 L1627.91 682.72 L1627.35 682.72 L1626.79 682.72 L1626.23 682.72 L1625.67 682.72 L1625.11 682.72 L1624.56 682.72 L1624 682.72 L1623.44 682.72 L1622.88 682.72 L1622.32 682.72 L1621.76 682.72 L1621.2 682.72 L1620.64 682.72 L1620.08 682.72 L1619.52 682.72 L1618.96 682.72 L1618.4 682.72 L1617.84 682.72 L1617.29 682.72 L1616.73 682.72 L1616.17 682.72 L1615.61 682.72 L1615.05 682.72 L1614.49 682.72 L1613.93 682.72 L1613.37 682.72 L1612.81 682.72 L1612.25 682.72 L1611.69 682.72 L1611.13 682.72 L1610.57 682.72 L1610.02 682.72 L1609.46 682.72 L1608.9 682.72 L1608.34 682.72 L1607.78 682.72 L1607.22 682.72 L1606.66 682.72 L1606.1 682.72 L1605.54 682.72 L1604.98 682.72 L1604.42 682.72 L1603.86 682.72 L1603.3 682.72 L1602.74 682.72 L1602.19 682.72 L1601.63 682.72 L1601.07 682.72 L1600.51 682.72 L1599.95 682.72 L1599.39 682.72 L1598.83 682.72 L1598.27 682.72 L1597.71 682.72 L1597.15 682.72 L1596.59 682.72 L1596.03 682.72 L1595.47 682.72 L1594.92 682.72 L1594.36 682.72 L1593.8 682.72 L1593.24 682.72 L1592.68 682.72 L1592.12 682.72 L1591.56 682.72 L1591 682.72 L1590.44 682.72 L1589.88 682.72 L1589.32 682.72 L1588.76 682.72 L1588.2 682.72 L1587.65 682.72 L1587.09 682.72 L1586.53 682.72 L1585.97 682.72 L1585.41 682.72 L1584.85 682.72 L1584.29 682.72 L1583.73 682.72 L1583.17 682.72 L1582.61 682.72 L1582.05 682.72 L1581.49 682.72 L1580.93 682.72 L1580.37 682.72 L1579.82 682.72 L1579.26 682.72 L1578.7 682.72 L1578.14 682.72 L1577.58 682.72 L1577.02 682.72 L1576.46 682.72 L1575.9 682.72 L1575.34 682.72 L1574.78 682.72 L1574.22 682.72 L1573.66 682.72 L1573.1 682.72 L1572.55 682.72 L1571.99 682.72 L1571.43 682.72 L1570.87 682.72 L1570.31 682.72 L1569.75 682.72 L1569.19 682.72 L1568.63 682.72 L1568.07 682.72 L1567.51 682.72 L1566.95 682.72 L1566.39 682.72 L1565.83 682.72 L1565.28 682.72 L1564.72 682.72 L1564.16 682.72 L1563.6 682.72 L1563.04 682.72 L1562.48 682.72 L1561.92 682.72 L1561.36 682.72 L1560.8 682.72 L1560.24 682.72 L1559.68 682.72 L1559.12 682.72 L1558.56 682.72 L1558 682.72 L1557.45 682.72 L1556.89 682.72 L1556.33 682.72 L1555.77 682.72 L1555.21 682.72 L1554.65 682.72 L1554.09 682.72 L1553.53 682.72 L1552.97 682.72 L1552.41 682.72 L1551.85 682.72 L1551.29 682.72 L1550.73 682.72 L1550.18 682.72 L1549.62 682.72 L1549.06 682.72 L1548.5 682.72 L1547.94 682.72 L1547.38 682.72 L1546.82 682.72 L1546.26 682.72 L1545.7 682.72 L1545.14 682.72 L1544.58 682.72 L1544.02 682.72 L1543.46 682.72 L1542.9 682.72 L1542.35 682.72 L1541.79 682.72 L1541.23 682.72 L1540.67 682.72 L1540.11 682.72 L1539.55 682.72 L1538.99 682.72 L1538.43 682.72 L1537.87 682.72 L1537.31 682.72 L1536.75 682.72 L1536.19 682.72 L1535.63 682.72 L1535.08 682.72 L1534.52 682.72 L1533.96 682.72 L1533.4 682.72 L1532.84 682.72 L1532.28 682.72 L1531.72 682.72 L1531.16 682.72 L1530.6 682.72 L1530.04 682.72 L1529.48 682.72 L1528.92 682.72 L1528.36 682.72 L1527.81 682.72 L1527.25 682.72 L1526.69 682.72 L1526.13 682.72 L1525.57 682.72 L1525.01 682.72 L1524.45 682.72 L1523.89 682.72 L1523.33 682.72 L1522.77 682.72 L1522.21 682.72 L1521.65 682.72 L1521.09 682.72 L1520.53 682.72 L1519.98 682.72 L1519.42 682.72 L1518.86 682.72 L1518.3 682.72 L1517.74 682.72 L1517.18 682.72 L1516.62 682.72 L1516.06 682.72 L1515.5 682.72 L1514.94 682.72 L1514.38 682.72 L1513.82 682.72 L1513.26 682.72 L1512.71 682.72 L1512.15 682.72 L1511.59 682.72 L1511.03 682.72 L1510.47 682.72 L1509.91 682.72 L1509.35 682.72 L1508.79 682.72 L1508.23 682.72 L1507.67 682.72 L1507.11 682.72 L1506.55 682.72 L1505.99 682.72 L1505.44 682.72 L1504.88 682.72 L1504.32 682.72 L1503.76 682.72 L1503.2 682.72 L1502.64 682.72 L1502.08 682.72 L1501.52 682.72 L1500.96 682.72 L1500.4 682.72 L1499.84 682.72 L1499.28 682.72 L1498.72 682.72 L1498.16 682.72 L1497.61 682.72 L1497.05 682.72 L1496.49 682.72 L1495.93 682.72 L1495.37 682.72 L1494.81 682.72 L1494.25 682.72 L1493.69 682.72 L1493.13 682.72 L1492.57 682.72 L1492.01 682.72 L1491.45 682.72 L1490.89 682.72 L1490.34 682.72 L1489.78 682.72 L1489.22 682.72 L1488.66 682.72 L1488.1 682.72 L1487.54 682.72 L1486.98 682.72 L1486.42 682.72 L1485.86 682.72 L1485.3 682.72 L1484.74 682.72 L1484.18 682.72 L1483.62 682.72 L1483.07 682.72 L1482.51 682.72 L1481.95 682.72 L1481.39 682.72 L1480.83 682.72 L1480.27 682.72 L1479.71 682.72 L1479.15 682.72 L1478.59 682.72 L1478.03 682.72 L1477.47 682.72 L1476.91 682.72 L1476.35 682.72 L1475.79 682.72 L1475.24 682.72 L1474.68 682.72 L1474.12 682.72 L1473.56 682.72 L1473 682.72 L1472.44 682.72 L1471.88 682.72 L1471.32 682.72 L1470.76 682.72 L1470.2 682.72 L1469.64 682.72 L1469.08 682.72 L1468.52 682.72 L1467.97 682.72 L1467.41 682.72 L1466.85 682.72 L1466.29 682.72 L1465.73 682.72 L1465.17 682.72 L1464.61 682.72 L1464.05 682.72 L1463.49 682.72 L1462.93 682.72 L1462.37 682.72 L1461.81 682.72 L1461.25 682.72 L1460.7 682.72 L1460.14 682.72 L1459.58 682.72 L1459.02 682.72 L1458.46 682.72 L1457.9 682.72 L1457.34 682.72 L1456.78 682.72 L1456.22 682.72 L1455.66 682.72 L1455.1 682.72 L1454.54 682.72 L1453.98 682.72 L1453.42 682.72 L1452.87 682.72 L1452.31 682.72 L1451.75 682.72 L1451.19 682.72 L1450.63 682.72 L1450.07 682.72 L1449.51 682.72 L1448.95 682.72 L1448.39 682.72 L1447.83 682.72 L1447.27 682.72 L1446.71 682.72 L1446.15 682.72 L1445.6 682.72 L1445.04 682.72 L1444.48 682.72 L1443.92 682.72 L1443.36 682.72 L1442.8 682.72 L1442.24 682.72 L1441.68 682.72 L1441.12 682.72 L1440.56 682.72 L1440 682.72 L1439.44 682.72 L1438.88 682.72 L1438.33 682.72 L1437.77 682.72 L1437.21 682.72 L1436.65 682.72 L1436.09 682.72 L1435.53 682.72 L1434.97 682.72 L1434.41 682.72 L1433.85 682.72 L1433.29 682.72 L1432.73 682.72 L1432.17 682.72 L1431.61 682.72 L1431.05 682.72 L1430.5 682.72 L1429.94 682.72 L1429.38 682.72 L1428.82 682.72 L1428.26 682.72 L1427.7 682.72 L1427.14 682.72 L1426.58 682.72 L1426.02 682.72 L1425.46 682.72 L1424.9 682.72 L1424.34 682.72 L1423.78 682.72 L1423.23 682.72 L1422.67 682.72 L1422.11 682.72 L1421.55 682.72 L1420.99 682.72 L1420.43 682.72 L1419.87 682.72 L1419.31 682.72 L1418.75 682.72 L1418.19 682.72 L1417.63 682.72 L1417.07 682.72 L1416.51 682.72 L1415.95 682.72 L1415.4 682.72 L1414.84 682.72 L1414.28 682.72 L1413.72 682.72 L1413.16 682.72 L1412.6 682.72 L1412.04 682.72 L1411.48 682.72 L1410.92 682.72 L1410.36 682.72 L1409.8 682.72 L1409.24 682.72 L1408.68 682.72 L1408.13 682.72 L1407.57 682.72 L1407.01 682.72 L1406.45 682.72 L1405.89 682.72 L1405.33 682.72 L1404.77 682.72 L1404.21 682.72 L1403.65 682.72 L1403.09 682.72 L1402.53 682.72 L1401.97 682.72 L1401.41 682.72 L1400.86 682.72 L1400.3 682.72 L1399.74 682.72 L1399.18 682.72 L1398.62 682.72 L1398.06 682.72 L1397.5 682.72 L1396.94 682.72 L1396.38 682.72 L1395.82 682.72 L1395.26 682.72 L1394.7 682.72 L1394.14 682.72 L1393.58 682.72 L1393.03 682.72 L1392.47 682.72 L1391.91 682.72 L1391.35 682.72 L1390.79 682.72 L1390.23 682.72 L1389.67 682.72 L1389.11 682.72 L1388.55 682.72 L1387.99 682.72 L1387.43 682.72 L1386.87 682.72 L1386.31 682.72 L1385.76 682.72 L1385.2 682.72 L1384.64 682.72 L1384.08 682.72 L1383.52 682.72 L1382.96 682.72 L1382.4 682.72 L1381.84 682.72 L1381.28 682.72 L1380.72 682.72 L1380.16 682.72 L1379.6 682.72 L1379.04 682.72 L1378.49 682.72 L1377.93 682.72 L1377.37 682.72 L1376.81 682.72 L1376.25 682.72 L1375.69 682.72 L1375.13 682.72 L1374.57 682.72 L1374.01 682.72 L1373.45 682.72 L1372.89 682.72 L1372.33 682.72 L1371.77 682.72 L1371.21 682.72 L1370.66 682.72 L1370.1 682.72 L1369.54 682.72 L1368.98 682.72 L1368.42 682.72 L1367.86 682.72 L1367.3 682.72 L1366.74 682.72 L1366.18 682.72 L1365.62 682.72 L1365.06 682.72 L1364.5 682.72 L1363.94 682.72 L1363.39 682.72 L1362.83 682.72 L1362.27 682.72 L1361.71 682.72 L1361.15 682.72 L1360.59 682.72 L1360.03 682.72 L1359.47 682.72 L1358.91 682.72 L1358.35 682.72 L1357.79 682.72 L1357.23 682.72 L1356.67 682.72 L1356.12 682.72 L1355.56 682.72 L1355 682.72 L1354.44 682.72 L1353.88 682.72 L1353.32 682.72 L1352.76 682.72 L1352.2 682.72 L1351.64 682.72 L1351.08 682.72 L1350.52 682.72 L1349.96 682.72 L1349.4 682.72 L1348.84 682.72 L1348.29 682.72 L1347.73 682.72 L1347.17 682.72 L1346.61 682.72 L1346.05 682.72 L1345.49 682.72 L1344.93 682.72 L1344.37 682.72 L1343.81 682.72 L1343.25 682.72 L1342.69 682.72 L1342.13 682.72 L1341.57 682.72 L1341.02 682.72 L1340.46 682.72 L1339.9 682.72 L1339.34 682.72 L1338.78 682.72 L1338.22 682.72 L1337.66 682.72 L1337.1 682.72 L1336.54 682.72 L1335.98 682.72 L1335.42 682.72 L1334.86 682.72 L1334.3 682.72 L1333.75 682.72 L1333.19 682.72 L1332.63 682.72 L1332.07 682.72 L1331.51 682.72 L1330.95 682.72 L1330.39 682.72 L1329.83 682.72 L1329.27 682.72 L1328.71 682.72 L1328.15 682.72 L1327.59 682.72 L1327.03 682.72 L1326.47 682.72 L1325.92 682.72 L1325.36 682.72 L1324.8 682.72 L1324.24 682.72 L1323.68 682.72 L1323.12 682.72 L1322.56 682.72 L1322 682.72 L1321.44 682.72 L1320.88 682.72 L1320.32 682.72 L1319.76 682.72 L1319.2 682.72 L1318.65 682.72 L1318.09 682.72 L1317.53 682.72 L1316.97 682.72 L1316.41 682.72 L1315.85 682.72 L1315.29 682.72 L1314.73 682.72 L1314.17 682.72 L1313.61 682.72 L1313.05 682.72 L1312.49 682.72 L1311.93 682.72 L1311.38 682.72 L1310.82 682.72 L1310.26 682.72 L1309.7 682.72 L1309.14 682.72 L1308.58 682.72 L1308.02 682.72 L1307.46 682.72 L1306.9 682.72 L1306.34 682.72 L1305.78 682.72 L1305.22 682.72 L1304.66 682.72 L1304.1 682.72 L1303.55 682.72 L1302.99 682.72 L1302.43 682.72 L1301.87 682.72 L1301.31 682.72 L1300.75 682.72 L1300.19 682.72 L1299.63 682.72 L1299.07 682.72 L1298.51 682.72 L1297.95 682.72 L1297.39 682.72 L1296.83 682.72 L1296.28 682.72 L1295.72 682.72 L1295.16 682.72 L1294.6 682.72 L1294.04 682.72 L1293.48 682.72 L1292.92 682.72 L1292.36 682.72 L1291.8 682.72 L1291.24 682.72 L1290.68 682.72 L1290.12 682.72 L1289.56 682.72 L1289 682.72 L1288.45 682.72 L1287.89 682.72 L1287.33 682.72 L1286.77 682.72 L1286.21 682.72 L1285.65 682.72 L1285.09 682.72 L1284.53 682.72 L1283.97 682.72 L1283.41 682.72 L1282.85 682.72 L1282.29 682.72 L1281.73 682.72 L1281.18 682.72 L1280.62 682.72 L1280.06 682.72 L1279.5 682.72 L1278.94 682.72 L1278.38 682.72 L1277.82 682.72 L1277.26 682.72 L1276.7 682.72 L1276.14 682.72 L1275.58 682.72 L1275.02 682.72 L1274.46 682.72 L1273.91 682.72 L1273.35 682.72 L1272.79 682.72 L1272.23 682.72 L1271.67 682.72 L1271.11 682.72 L1270.55 682.72 L1269.99 682.72 L1269.43 682.72 L1268.87 682.72 L1268.31 682.72 L1267.75 682.72 L1267.19 682.72 L1266.63 682.72 L1266.08 682.72 L1265.52 682.72 L1264.96 682.72 L1264.4 682.72 L1263.84 682.72 L1263.28 682.72 L1262.72 682.72 L1262.16 682.72 L1261.6 682.72 L1261.04 682.72 L1260.48 682.72 L1259.92 682.72 L1259.36 682.72 L1258.81 682.72 L1258.25 682.72 L1257.69 682.72 L1257.13 682.72 L1256.57 682.72 L1256.01 682.72 L1255.45 682.72 L1254.89 682.72 L1254.33 682.72 L1253.77 682.72 L1253.21 682.72 L1252.65 682.72 L1252.09 682.72 L1251.54 682.72 L1250.98 682.72 L1250.42 682.72 L1249.86 682.72 L1249.3 682.72 L1248.74 682.72 L1248.18 682.72 L1247.62 682.72 L1247.06 682.72 L1246.5 682.72 L1245.94 682.72 L1245.38 682.72 L1244.82 682.72 L1244.26 682.72 L1243.71 682.72 L1243.15 682.72 L1242.59 682.72 L1242.03 682.72 L1241.47 682.72 L1240.91 682.72 L1240.35 682.72 L1239.79 682.72 L1239.23 682.72 L1238.67 682.72 L1238.11 682.72 L1237.55 682.72 L1236.99 682.72 L1236.44 682.72 L1235.88 682.72 L1235.32 682.72 L1234.76 682.72 L1234.2 682.72 L1233.64 682.72 L1233.08 682.72 L1232.52 682.72 L1231.96 682.72 L1231.4 682.72 L1230.84 682.72 L1230.28 682.72 L1229.72 682.72 L1229.17 682.72 L1228.61 682.72 L1228.05 682.72 L1227.49 682.72 L1226.93 682.72 L1226.37 682.72 L1225.81 682.72 L1225.25 682.72 L1224.69 682.72 L1224.13 682.72 L1223.57 682.72 L1223.01 682.72 L1222.45 682.72 L1221.89 682.72 L1221.34 682.72 L1220.78 682.72 L1220.22 682.72 L1219.66 682.72 L1219.1 682.72 L1218.54 682.72 L1217.98 682.72 L1217.42 682.72 L1216.86 682.72 L1216.3 682.72 L1215.74 682.72 L1215.18 682.72 L1214.62 682.72 L1214.07 682.72 L1213.51 682.72 L1212.95 682.72 L1212.39 682.72 L1211.83 682.72 L1211.27 682.72 L1210.71 682.72 L1210.15 682.72 L1209.59 682.72 L1209.03 682.72 L1208.47 682.72 L1207.91 682.72 L1207.35 682.72 L1206.8 682.72 L1206.24 682.72 L1205.68 682.72 L1205.12 682.72 L1204.56 682.72 L1204 682.72 L1203.44 682.72 L1202.88 682.72 L1202.32 682.72 L1201.76 682.72 L1201.2 682.72 L1200.64 682.72 L1200.08 682.72 L1199.52 682.72 L1198.97 682.72 L1198.41 682.72 L1197.85 682.72 L1197.29 682.72 L1196.73 682.72 L1196.17 682.72 L1195.61 682.72 L1195.05 682.72 L1194.49 682.72 L1193.93 682.72 L1193.37 682.72 L1192.81 682.72 L1192.25 682.72 L1191.7 682.72 L1191.14 682.72 L1190.58 682.72 L1190.02 682.72 L1189.46 682.72 L1188.9 682.72 L1188.34 682.72 L1187.78 682.72 L1187.22 682.72 L1186.66 682.72 L1186.1 682.72 L1185.54 682.72 L1184.98 682.72 L1184.43 682.72 L1183.87 682.72 L1183.31 682.72 L1182.75 682.72 L1182.19 682.72 L1181.63 682.72 L1181.07 682.72 L1180.51 682.72 L1179.95 682.72 L1179.39 682.72 L1178.83 682.72 L1178.27 682.72 L1177.71 682.72 L1177.15 682.72 L1176.6 682.72 L1176.04 682.72 L1175.48 682.72 L1174.92 682.72 L1174.36 682.72 L1173.8 682.72 L1173.24 682.72 L1172.68 682.72 L1172.12 682.72 L1171.56 682.72 L1171 682.72 L1170.44 682.72 L1169.88 682.72 L1169.33 682.72 L1168.77 682.72 L1168.21 682.72 L1167.65 682.72 L1167.09 682.72 L1166.53 682.72 L1165.97 682.72 L1165.41 682.72 L1164.85 682.72 L1164.29 682.72 L1163.73 682.72 L1163.17 682.72 L1162.61 682.72 L1162.05 682.72 L1161.5 682.72 L1160.94 682.72 L1160.38 682.72 L1159.82 682.72 L1159.26 682.72 L1158.7 682.72 L1158.14 682.72 L1157.58 682.72 L1157.02 682.72 L1156.46 682.72 L1155.9 682.72 L1155.34 682.72 L1154.78 682.72 L1154.23 682.72 L1153.67 682.72 L1153.11 682.72 L1152.55 682.72 L1151.99 682.72 L1151.43 682.72 L1150.87 682.72 L1150.31 682.72 L1149.75 682.72 L1149.19 682.72 L1148.63 682.72 L1148.07 682.72 L1147.51 682.72 L1146.96 682.72 L1146.4 682.72 L1145.84 682.72 L1145.28 682.72 L1144.72 682.72 L1144.16 682.72 L1143.6 682.72 L1143.04 682.72 L1142.48 682.72 L1141.92 682.72 L1141.36 682.72 L1140.8 682.72 L1140.24 682.72 L1139.68 682.72 L1139.13 682.72 L1138.57 682.72 L1138.01 682.72 L1137.45 682.72 L1136.89 682.72 L1136.33 682.72 L1135.77 682.72 L1135.21 682.72 L1134.65 682.72 L1134.09 682.72 L1133.53 682.72 L1132.97 682.72 L1132.41 682.72 L1131.86 682.72 L1131.3 682.72 L1130.74 682.72 L1130.18 682.72 L1129.62 682.72 L1129.06 682.72 L1128.5 682.72 L1127.94 682.72 L1127.38 682.72 L1126.82 682.72 L1126.26 682.72 L1125.7 682.72 L1125.14 682.72 L1124.59 682.72 L1124.03 682.72 L1123.47 682.72 L1122.91 682.72 L1122.35 682.72 L1121.79 682.72 L1121.23 682.72 L1120.67 682.72 L1120.11 682.72 L1119.55 682.72 L1118.99 682.72 L1118.43 682.72 L1117.87 682.72 L1117.31 682.72 L1116.76 682.72 L1116.2 682.72 L1115.64 682.72 L1115.08 682.72 L1114.52 682.72 L1113.96 682.72 L1113.4 682.72 L1112.84 682.72 L1112.28 682.72 L1111.72 682.72 L1111.16 682.72 L1110.6 682.72 L1110.04 682.72 L1109.49 682.72 L1108.93 682.72 L1108.37 682.72 L1107.81 682.72 L1107.25 682.72 L1106.69 682.72 L1106.13 682.72 L1105.57 682.72 L1105.01 682.72 L1104.45 682.72 L1103.89 682.72 L1103.33 682.72 L1102.77 682.72 L1102.22 682.72 L1101.66 682.72 L1101.1 682.72 L1100.54 682.72 L1099.98 682.72 L1099.42 682.72 L1098.86 682.72 L1098.3 682.72 L1097.74 682.72 L1097.18 682.72 L1096.62 682.72 L1096.06 682.72 L1095.5 682.72 L1094.94 682.72 L1094.39 682.72 L1093.83 682.72 L1093.27 682.72 L1092.71 682.72 L1092.15 682.72 L1091.59 682.72 L1091.03 682.72 L1090.47 682.72 L1089.91 682.72 L1089.35 682.72 L1088.79 682.72 L1088.23 682.72 L1087.67 682.72 L1087.12 682.72 L1086.56 682.72 L1086 682.72 L1085.44 682.72 L1084.88 682.72 L1084.32 682.72 L1083.76 682.72 L1083.2 682.72 L1082.64 682.72 L1082.08 682.72 L1081.52 682.72 L1080.96 682.72 L1080.4 682.72 L1079.85 682.72 L1079.29 682.72 L1078.73 682.72 L1078.17 682.72 L1077.61 682.72 L1077.05 682.72 L1076.49 682.72 L1075.93 682.72 L1075.37 682.72 L1074.81 682.72 L1074.25 682.72 L1073.69 682.72 L1073.13 682.72 L1072.57 682.72 L1072.02 682.72 L1071.46 682.72 L1070.9 682.72 L1070.34 682.72 L1069.78 682.72 L1069.22 682.72 L1068.66 682.72 L1068.1 682.72 L1067.54 682.72 L1066.98 682.72 L1066.42 682.72 L1065.86 682.72 L1065.3 682.72 L1064.75 682.72 L1064.19 682.72 L1063.63 682.72 L1063.07 682.72 L1062.51 682.72 L1061.95 682.72 L1061.39 682.72 L1060.83 682.72 L1060.27 682.72 L1059.71 682.72 L1059.15 682.72 L1058.59 682.72 L1058.03 682.72 L1057.48 682.72 L1056.92 682.72 L1056.36 682.72 L1055.8 682.72 L1055.24 682.72 L1054.68 682.72 L1054.12 682.72 L1053.56 682.72 L1053 682.72 L1052.44 682.72 L1051.88 682.72 L1051.32 682.72 L1050.76 682.72 L1050.2 682.72 L1049.65 682.72 L1049.09 682.72 L1048.53 682.72 L1047.97 682.72 L1047.41 682.72 L1046.85 682.72 L1046.29 682.72 L1045.73 682.72 L1045.17 682.72 L1044.61 682.72 L1044.05 682.72 L1043.49 682.72 L1042.93 682.72 L1042.38 682.72 L1041.82 682.72 L1041.26 682.72 L1040.7 682.72 L1040.14 682.72 L1039.58 682.72 L1039.02 682.72 L1038.46 682.72 L1037.9 682.72 L1037.34 682.72 L1036.78 682.72 L1036.22 682.72 L1035.66 682.72 L1035.1 682.72 L1034.55 682.72 L1033.99 682.72 L1033.43 682.72 L1032.87 682.72 L1032.31 682.72 L1031.75 682.72 L1031.19 682.72 L1030.63 682.72 L1030.07 682.72 L1029.51 682.72 L1028.95 682.72 L1028.39 682.72 L1027.83 682.72 L1027.28 682.72 L1026.72 682.72 L1026.16 682.72 L1025.6 682.72 L1025.04 682.72 L1024.48 682.72 L1023.92 682.72 L1023.36 682.72 L1022.8 682.72 L1022.24 682.72 L1021.68 682.72 L1021.12 682.72 L1020.56 682.72 L1020.01 682.72 L1019.45 682.72 L1018.89 682.72 L1018.33 682.72 L1017.77 682.72 L1017.21 682.72 L1016.65 682.72 L1016.09 682.72 L1015.53 682.72 L1014.97 682.72 L1014.41 682.72 L1013.85 682.72 L1013.29 682.72 L1012.73 682.72 L1012.18 682.72 L1011.62 682.72 L1011.06 682.72 L1010.5 682.72 L1009.94 682.72 L1009.38 682.72 L1008.82 682.72 L1008.26 682.72 L1007.7 682.72 L1007.14 682.72 L1006.58 682.72 L1006.02 682.72 L1005.46 682.72 L1004.91 682.72 L1004.35 682.72 L1003.79 682.72 L1003.23 682.72 L1002.67 682.72 L1002.11 682.72 L1001.55 682.72 L1000.99 682.72 L1000.43 682.72 L999.872 682.72 L999.313 682.72 L998.754 682.72 L998.194 682.72 L997.635 682.72 L997.076 682.72 L996.517 682.72 L995.957 682.72 L995.398 682.72 L994.839 682.72 L994.28 682.72 L993.72 682.72 L993.161 682.72 L992.602 682.72 L992.043 682.72 L991.483 682.72 L990.924 682.72 L990.365 682.72 L989.806 682.72 L989.246 682.72 L988.687 682.72 L988.128 682.72 L987.569 682.72 L987.009 682.72 L986.45 682.72 L985.891 682.72 L985.332 682.72 L984.772 682.72 L984.213 682.72 L983.654 682.72 L983.095 682.72 L982.535 682.72 L981.976 682.72 L981.417 682.72 L980.858 682.72 L980.298 682.72 L979.739 682.72 L979.18 682.72 L978.621 682.72 L978.061 682.72 L977.502 682.72 L976.943 682.72 L976.384 682.72 L975.824 682.72 L975.265 682.72 L974.706 682.72 L974.147 682.72 L973.587 682.72 L973.028 682.72 L972.469 682.72 L971.91 682.72 L971.35 682.72 L970.791 682.72 L970.232 682.72 L969.673 682.72 L969.113 682.72 L968.554 682.72 L967.995 682.72 L967.436 682.72 L966.876 682.72 L966.317 682.72 L965.758 682.72 L965.199 682.72 L964.639 682.72 L964.08 682.72 L963.521 682.72 L962.962 682.72 L962.402 682.72 L961.843 682.72 L961.284 682.72 L960.725 682.72 L960.165 682.72 L959.606 682.72 L959.047 682.72 L958.488 682.72 L957.928 682.72 L957.369 682.72 L956.81 682.72 L956.251 682.72 L955.691 682.72 L955.132 682.72 L954.573 682.72 L954.014 682.72 L953.454 682.72 L952.895 682.72 L952.336 682.72 L951.777 682.72 L951.217 682.72 L950.658 682.72 L950.099 682.72 L949.54 682.72 L948.98 682.72 L948.421 682.72 L947.862 682.72 L947.303 682.72 L946.743 682.72 L946.184 682.72 L945.625 682.72 L945.066 682.72 L944.506 682.72 L943.947 682.72 L943.388 682.72 L942.829 682.72 L942.269 682.72 L941.71 682.72 L941.151 682.72 L940.592 682.72 L940.032 682.72 L939.473 682.72 L938.914 682.72 L938.355 682.72 L937.795 682.72 L937.236 682.72 L936.677 682.72 L936.118 682.72 L935.558 682.72 L934.999 682.72 L934.44 682.72 L933.881 682.72 L933.321 682.72 L932.762 682.72 L932.203 682.72 L931.644 682.72 L931.084 682.72 L930.525 682.72 L929.966 682.72 L929.406 682.72 L928.847 682.72 L928.288 682.72 L927.729 682.72 L927.169 682.72 L926.61 682.72 L926.051 682.72 L925.492 682.72 L924.932 682.72 L924.373 682.72 L923.814 682.72 L923.255 682.72 L922.695 682.72 L922.136 682.72 L921.577 682.72 L921.018 682.72 L920.458 682.72 L919.899 682.72 L919.34 682.72 L918.781 682.72 L918.221 682.72 L917.662 682.72 L917.103 682.72 L916.544 682.72 L915.984 682.72 L915.425 682.72 L914.866 682.72 L914.307 682.72 L913.747 682.72 L913.188 682.72 L912.629 682.72 L912.07 682.72 L911.51 682.72 L910.951 682.72 L910.392 682.72 L909.833 682.72 L909.273 682.72 L908.714 682.72 L908.155 682.72 L907.596 682.72 L907.036 682.72 L906.477 682.72 L905.918 682.72 L905.359 682.72 L904.799 682.72 L904.24 682.72 L903.681 682.72 L903.122 682.72 L902.562 682.72 L902.003 682.72 L901.444 682.72 L900.885 682.72 L900.325 682.72 L899.766 682.72 L899.207 682.72 L898.648 682.72 L898.088 682.72 L897.529 682.72 L896.97 682.72 L896.411 682.72 L895.851 682.72 L895.292 682.72 L894.733 682.72 L894.174 682.72 L893.614 682.72 L893.055 682.72 L892.496 682.72 L891.937 682.72 L891.377 682.72 L890.818 682.72 L890.259 682.72 L889.7 682.72 L889.14 682.72 L888.581 682.72 L888.022 682.72 L887.463 682.72 L886.903 682.72 L886.344 682.72 L885.785 682.72 L885.226 682.72 L884.666 682.72 L884.107 682.72 L883.548 682.72 L882.989 682.72 L882.429 682.72 L881.87 682.72 L881.311 682.72 L880.752 682.72 L880.192 682.72 L879.633 682.72 L879.074 682.72 L878.515 682.72 L877.955 682.72 L877.396 682.72 L876.837 682.72 L876.278 682.72 L875.718 682.72 L875.159 682.72 L874.6 682.72 L874.041 682.72 L873.481 682.72 L872.922 682.72 L872.363 682.72 L871.804 682.72 L871.244 682.72 L870.685 682.72 L870.126 682.72 L869.567 682.72 L869.007 682.72 L868.448 682.72 L867.889 682.72 L867.33 682.72 L866.77 682.72 L866.211 682.72 L865.652 682.72 L865.093 682.72 L864.533 682.72 L863.974 682.72 L863.415 682.72 L862.856 682.72 L862.296 682.72 L861.737 682.72 L861.178 682.72 L860.619 682.72 L860.059 682.72 L859.5 682.72 L858.941 682.72 L858.382 682.72 L857.822 682.72 L857.263 682.72 L856.704 682.72 L856.145 682.72 L855.585 682.72 L855.026 682.72 L854.467 682.72 L853.908 682.72 L853.348 682.72 L852.789 682.72 L852.23 682.72 L851.671 682.72 L851.111 682.72 L850.552 682.72 L849.993 682.72 L849.434 682.72 L848.874 682.72 L848.315 682.72 L847.756 682.72 L847.197 682.72 L846.637 682.72 L846.078 682.72 L845.519 682.72 L844.96 682.72 L844.4 682.72 L843.841 682.72 L843.282 682.72 L842.723 682.72 L842.163 682.72 L841.604 682.72 L841.045 682.72 L840.486 682.72 L839.926 682.72 L839.367 682.72 L838.808 682.72 L838.249 682.72 L837.689 682.72 L837.13 682.72 L836.571 682.72 L836.012 682.72 L835.452 682.72 L834.893 682.72 L834.334 682.72 L833.775 682.72 L833.215 682.72 L832.656 682.72 L832.097 682.72 L831.538 682.72 L830.978 682.72 L830.419 682.72 L829.86 682.72 L829.301 682.72 L828.741 682.72 L828.182 682.72 L827.623 682.72 L827.064 682.72 L826.504 682.72 L825.945 682.72 L825.386 682.72 L824.827 682.72 L824.267 682.72 L823.708 682.72 L823.149 682.72 L822.59 682.72 L822.03 682.72 L821.471 682.72 L820.912 682.72 L820.353 682.72 L819.793 682.72 L819.234 682.72 L818.675 682.72 L818.116 682.72 L817.556 682.72 L816.997 682.72 L816.438 682.72 L815.879 682.72 L815.319 682.72 L814.76 682.72 L814.201 682.72 L813.642 682.72 L813.082 682.72 L812.523 682.72 L811.964 682.72 L811.405 682.72 L810.845 682.72 L810.286 682.72 L809.727 682.72 L809.168 682.72 L808.608 682.72 L808.049 682.72 L807.49 682.72 L806.931 682.72 L806.371 682.72 L805.812 682.72 L805.253 682.72 L804.693 682.72 L804.134 682.72 L803.575 682.72 L803.016 682.72 L802.456 682.72 L801.897 682.72 L801.338 682.72 L800.779 682.72 L800.219 682.72 L799.66 682.72 L799.101 682.72 L798.542 682.72 L797.982 682.72 L797.423 682.72 L796.864 682.72 L796.305 682.72 L795.745 682.72 L795.186 682.72 L794.627 682.72 L794.068 682.72 L793.508 682.72 L792.949 682.72 L792.39 682.72 L791.831 682.72 L791.271 682.72 L790.712 682.72 L790.153 682.72 L789.594 682.72 L789.034 682.72 L788.475 682.72 L787.916 682.72 L787.357 682.72 L786.797 682.72 L786.238 682.72 L785.679 682.72 L785.12 682.72 L784.56 682.72 L784.001 682.72 L783.442 682.72 L782.883 682.72 L782.323 682.72 L781.764 682.72 L781.205 682.72 L780.646 682.72 L780.086 682.72 L779.527 682.72 L778.968 682.72 L778.409 682.72 L777.849 682.72 L777.29 682.72 L776.731 682.72 L776.172 682.72 L775.612 682.72 L775.053 682.72 L774.494 682.72 L773.935 682.72 L773.375 682.72 L772.816 682.72 L772.257 682.72 L771.698 682.72 L771.138 682.72 L770.579 682.72 L770.02 682.72 L769.461 682.72 L768.901 682.72 L768.342 682.72 L767.783 682.72 L767.224 682.72 L766.664 682.72 L766.105 682.72 L765.546 682.72 L764.987 682.72 L764.427 682.72 L763.868 682.72 L763.309 682.72 L762.75 682.72 L762.19 682.72 L761.631 682.72 L761.072 682.72 L760.513 682.72 L759.953 682.72 L759.394 682.72 L758.835 682.72 L758.276 682.72 L757.716 682.72 L757.157 682.72 L756.598 682.72 L756.039 682.72 L755.479 682.72 L754.92 682.72 L754.361 682.72 L753.802 682.72 L753.242 682.72 L752.683 682.72 L752.124 682.72 L751.565 682.72 L751.005 682.72 L750.446 682.72 L749.887 682.72 L749.328 682.72 L748.768 682.72 L748.209 682.72 L747.65 682.72 L747.091 682.72 L746.531 682.72 L745.972 682.72 L745.413 682.72 L744.854 682.72 L744.294 682.72 L743.735 682.72 L743.176 682.72 L742.617 682.72 L742.057 682.72 L741.498 682.72 L740.939 682.72 L740.38 682.72 L739.82 682.72 L739.261 682.72 L738.702 682.72 L738.143 682.72 L737.583 682.72 L737.024 682.72 L736.465 682.72 L735.906 682.72 L735.346 682.72 L734.787 682.72 L734.228 682.72 L733.669 682.72 L733.109 682.72 L732.55 682.72 L731.991 682.72 L731.432 682.72 L730.872 682.72 L730.313 682.72 L729.754 682.72 L729.195 682.72 L728.635 682.72 L728.076 682.72 L727.517 682.72 L726.958 682.72 L726.398 682.72 L725.839 682.72 L725.28 682.72 L724.721 682.72 L724.161 682.72 L723.602 682.72 L723.043 682.72 L722.484 682.72 L721.924 682.72 L721.365 682.72 L720.806 682.72 L720.247 682.72  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.695 720.806,683.695 721.365,683.695 721.924,683.695 722.484,683.695 723.043,683.695 723.602,683.695 724.161,683.695 724.721,683.695 725.28,683.695 725.839,683.695 726.398,683.695 726.958,683.695 727.517,683.695 728.076,683.695 728.635,683.695 729.195,683.695 729.754,683.695 730.313,683.695 730.872,683.695 731.432,683.695 731.991,683.695 732.55,683.695 733.109,683.695 733.669,683.695 734.228,683.695 734.787,683.695 735.346,683.695 735.906,683.695 736.465,683.695 737.024,683.695 737.583,683.695 738.143,683.695 738.702,683.695 739.261,683.695 739.82,683.695 740.38,683.695 740.939,683.695 741.498,683.695 742.057,683.695 742.617,683.695 743.176,683.695 743.735,683.695 744.294,683.695 744.854,683.695 745.413,683.695 745.972,683.695 746.531,683.695 747.091,683.695 747.65,683.695 748.209,683.695 748.768,683.695 749.328,683.695 749.887,683.695 750.446,683.695 751.005,683.695 751.565,683.695 752.124,683.695 752.683,683.695 753.242,683.695 753.802,683.695 754.361,683.695 754.92,683.695 755.479,683.695 756.039,683.695 756.598,683.695 757.157,683.695 757.716,683.695 758.276,683.695 758.835,683.695 759.394,683.695 759.953,683.695 760.513,683.695 761.072,683.695 761.631,683.695 762.19,683.695 762.75,683.695 763.309,683.695 763.868,683.695 764.427,683.695 764.987,683.695 765.546,683.695 766.105,683.695 766.664,683.695 767.224,683.695 767.783,683.695 768.342,683.695 768.901,683.695 769.461,683.695 770.02,683.695 770.579,683.695 771.138,683.695 771.698,683.695 772.257,683.695 772.816,683.695 773.375,683.695 773.935,683.695 774.494,683.695 775.053,683.695 775.612,683.695 776.172,683.695 776.731,683.695 777.29,683.695 777.849,683.695 778.409,683.695 778.968,683.695 779.527,683.695 780.086,683.695 780.646,683.695 781.205,683.695 781.764,683.695 782.323,683.695 782.883,683.695 783.442,683.695 784.001,683.695 784.56,683.695 785.12,683.695 785.679,683.695 786.238,683.695 786.797,683.695 787.357,683.695 787.916,683.695 788.475,683.695 789.034,683.695 789.594,683.695 790.153,683.695 790.712,683.695 791.271,683.695 791.831,683.695 792.39,683.695 792.949,683.695 793.508,683.695 794.068,683.695 794.627,683.695 795.186,683.695 795.745,683.695 796.305,683.695 796.864,683.695 797.423,683.695 797.982,683.695 798.542,683.695 799.101,683.695 799.66,683.695 800.219,683.695 800.779,683.695 801.338,683.695 801.897,683.695 802.456,683.695 803.016,683.695 803.575,683.695 804.134,683.695 804.693,683.695 805.253,683.695 805.812,683.695 806.371,683.695 806.931,683.695 807.49,683.695 808.049,683.695 808.608,683.695 809.168,683.695 809.727,683.695 810.286,683.695 810.845,683.695 811.405,683.695 811.964,683.695 812.523,683.695 813.082,683.695 813.642,683.695 814.201,683.695 814.76,683.695 815.319,683.695 815.879,683.695 816.438,683.695 816.997,683.695 817.556,683.695 818.116,683.695 818.675,683.695 819.234,683.695 819.793,683.695 820.353,683.695 820.912,683.695 821.471,683.695 822.03,683.695 822.59,683.695 823.149,683.695 823.708,683.695 824.267,683.695 824.827,683.695 825.386,683.695 825.945,683.695 826.504,683.695 827.064,683.695 827.623,683.695 828.182,683.695 828.741,683.695 829.301,683.695 829.86,683.695 830.419,683.695 830.978,683.695 831.538,683.695 832.097,683.695 832.656,683.695 833.215,683.695 833.775,683.695 834.334,683.695 834.893,683.695 835.452,683.695 836.012,683.695 836.571,683.695 837.13,683.695 837.689,683.695 838.249,683.695 838.808,683.695 839.367,683.695 839.926,683.695 840.486,683.695 841.045,683.695 841.604,683.695 842.163,683.695 842.723,683.695 843.282,683.695 843.841,683.695 844.4,683.695 844.96,683.695 845.519,683.695 846.078,683.695 846.637,683.695 847.197,683.695 847.756,683.695 848.315,683.695 848.874,683.695 849.434,683.695 849.993,683.695 850.552,683.695 851.111,683.695 851.671,683.695 852.23,683.695 852.789,683.695 853.348,683.695 853.908,683.695 854.467,683.695 855.026,683.695 855.585,683.695 856.145,683.695 856.704,683.695 857.263,683.695 857.822,683.695 858.382,683.695 858.941,683.695 859.5,683.695 860.059,683.695 860.619,683.695 861.178,683.695 861.737,683.695 862.296,683.695 862.856,683.695 863.415,683.695 863.974,683.695 864.533,683.695 865.093,683.695 865.652,683.695 866.211,683.695 866.77,683.695 867.33,683.695 867.889,683.695 868.448,683.695 869.007,683.695 869.567,683.695 870.126,683.695 870.685,683.695 871.244,683.695 871.804,683.695 872.363,683.695 872.922,683.695 873.481,683.695 874.041,683.695 874.6,683.695 875.159,683.695 875.718,683.695 876.278,683.695 876.837,683.695 877.396,683.695 877.955,683.695 878.515,683.695 879.074,683.695 879.633,683.695 880.192,683.695 880.752,683.695 881.311,683.695 881.87,683.695 882.429,683.695 882.989,683.695 883.548,683.695 884.107,683.695 884.666,683.695 885.226,683.695 885.785,683.695 886.344,683.695 886.903,683.695 887.463,683.695 888.022,683.695 888.581,683.695 889.14,683.695 889.7,683.695 890.259,683.695 890.818,683.695 891.377,683.695 891.937,683.695 892.496,683.695 893.055,683.695 893.614,683.695 894.174,683.695 894.733,683.695 895.292,683.695 895.851,683.695 896.411,683.695 896.97,683.695 897.529,683.695 898.088,683.695 898.648,683.695 899.207,683.695 899.766,683.695 900.325,683.695 900.885,683.695 901.444,683.695 902.003,683.695 902.562,683.695 903.122,683.695 903.681,683.695 904.24,683.695 904.799,683.695 905.359,683.695 905.918,683.695 906.477,683.695 907.036,683.695 907.596,683.695 908.155,683.695 908.714,683.695 909.273,683.695 909.833,683.695 910.392,683.695 910.951,683.695 911.51,683.695 912.07,683.695 912.629,683.695 913.188,683.695 913.747,683.695 914.307,683.695 914.866,683.695 915.425,683.695 915.984,683.695 916.544,683.695 917.103,683.695 917.662,683.695 918.221,683.695 918.781,683.695 919.34,683.695 919.899,683.695 920.458,683.695 921.018,683.695 921.577,683.695 922.136,683.695 922.695,683.695 923.255,683.695 923.814,683.695 924.373,683.695 924.932,683.695 925.492,683.695 926.051,683.695 926.61,683.695 927.169,683.695 927.729,683.695 928.288,683.695 928.847,683.695 929.406,683.695 929.966,683.695 930.525,683.695 931.084,683.695 931.644,683.695 932.203,683.695 932.762,683.695 933.321,683.695 933.881,683.695 934.44,683.695 934.999,683.695 935.558,683.695 936.118,683.695 936.677,683.695 937.236,683.695 937.795,683.695 938.355,683.695 938.914,683.695 939.473,683.695 940.032,683.695 940.592,683.695 941.151,683.695 941.71,683.695 942.269,683.695 942.829,683.695 943.388,683.695 943.947,683.695 944.506,683.695 945.066,683.695 945.625,683.695 946.184,683.695 946.743,683.695 947.303,683.695 947.862,683.695 948.421,683.695 948.98,683.695 949.54,683.695 950.099,683.695 950.658,683.695 951.217,683.695 951.777,683.695 952.336,683.695 952.895,683.695 953.454,683.695 954.014,683.695 954.573,683.695 955.132,683.695 955.691,683.695 956.251,683.695 956.81,683.695 957.369,683.695 957.928,683.695 958.488,683.695 959.047,683.695 959.606,683.695 960.165,683.695 960.725,683.695 961.284,683.695 961.843,683.695 962.402,683.695 962.962,683.695 963.521,683.695 964.08,683.695 964.639,683.695 965.199,683.695 965.758,683.695 966.317,683.695 966.876,683.695 967.436,683.695 967.995,683.695 968.554,683.695 969.113,683.695 969.673,683.695 970.232,683.695 970.791,683.695 971.35,683.695 971.91,683.695 972.469,683.695 973.028,683.695 973.587,683.695 974.147,683.695 974.706,683.695 975.265,683.695 975.824,683.695 976.384,683.695 976.943,683.695 977.502,683.695 978.061,683.695 978.621,683.695 979.18,683.695 979.739,683.695 980.298,683.695 980.858,683.695 981.417,683.695 981.976,683.695 982.535,683.695 983.095,683.695 983.654,683.695 984.213,683.695 984.772,683.695 985.332,683.695 985.891,683.695 986.45,683.695 987.009,683.695 987.569,683.695 988.128,683.695 988.687,683.695 989.246,683.695 989.806,683.695 990.365,683.695 990.924,683.695 991.483,683.695 992.043,683.695 992.602,683.695 993.161,683.695 993.72,683.695 994.28,683.695 994.839,683.695 995.398,683.695 995.957,683.695 996.517,683.695 997.076,683.695 997.635,683.695 998.194,683.695 998.754,683.695 999.313,683.695 999.872,683.695 1000.43,683.695 1000.99,683.695 1001.55,683.695 1002.11,683.695 1002.67,683.695 1003.23,683.695 1003.79,683.695 1004.35,683.695 1004.91,683.695 1005.46,683.695 1006.02,683.695 1006.58,683.695 1007.14,683.695 1007.7,683.695 1008.26,683.695 1008.82,683.695 1009.38,683.695 1009.94,683.695 1010.5,683.695 1011.06,683.695 1011.62,683.695 1012.18,683.695 1012.73,683.695 1013.29,683.695 1013.85,683.695 1014.41,683.695 1014.97,683.695 1015.53,683.695 1016.09,683.695 1016.65,683.695 1017.21,683.695 1017.77,683.695 1018.33,683.695 1018.89,683.695 1019.45,683.695 1020.01,683.695 1020.56,683.695 1021.12,683.695 1021.68,683.695 1022.24,683.695 1022.8,683.695 1023.36,683.695 1023.92,683.695 1024.48,683.695 1025.04,683.695 1025.6,683.695 1026.16,683.695 1026.72,683.695 1027.28,683.695 1027.83,683.695 1028.39,683.695 1028.95,683.695 1029.51,683.695 1030.07,683.695 1030.63,683.695 1031.19,683.695 1031.75,683.695 1032.31,683.695 1032.87,683.695 1033.43,683.695 1033.99,683.695 1034.55,683.695 1035.1,683.695 1035.66,683.695 1036.22,683.695 1036.78,683.695 1037.34,683.695 1037.9,683.695 1038.46,683.695 1039.02,683.695 1039.58,683.695 1040.14,683.695 1040.7,683.695 1041.26,683.695 1041.82,683.695 1042.38,683.695 1042.93,683.695 1043.49,683.695 1044.05,683.695 1044.61,683.695 1045.17,683.695 1045.73,683.695 1046.29,683.695 1046.85,683.695 1047.41,683.695 1047.97,683.695 1048.53,683.695 1049.09,683.695 1049.65,683.695 1050.2,683.695 1050.76,683.695 1051.32,683.695 1051.88,683.695 1052.44,683.695 1053,683.695 1053.56,683.695 1054.12,683.695 1054.68,683.695 1055.24,683.695 1055.8,683.695 1056.36,683.695 1056.92,683.695 1057.48,683.695 1058.03,683.695 1058.59,683.695 1059.15,683.695 1059.71,683.695 1060.27,683.695 1060.83,683.695 1061.39,683.695 1061.95,683.695 1062.51,683.695 1063.07,683.695 1063.63,683.695 1064.19,683.695 1064.75,683.695 1065.3,683.695 1065.86,683.695 1066.42,683.695 1066.98,683.695 1067.54,683.695 1068.1,683.695 1068.66,683.695 1069.22,683.695 1069.78,683.695 1070.34,683.695 1070.9,683.695 1071.46,683.695 1072.02,683.695 1072.57,683.695 1073.13,683.695 1073.69,683.695 1074.25,683.695 1074.81,683.695 1075.37,683.695 1075.93,683.695 1076.49,683.695 1077.05,683.695 1077.61,683.695 1078.17,683.695 1078.73,683.695 1079.29,683.695 1079.85,683.695 1080.4,683.695 1080.96,683.695 1081.52,683.695 1082.08,683.695 1082.64,683.695 1083.2,683.695 1083.76,683.695 1084.32,683.695 1084.88,683.695 1085.44,683.695 1086,683.695 1086.56,683.695 1087.12,683.695 1087.67,683.695 1088.23,683.695 1088.79,683.695 1089.35,683.695 1089.91,683.695 1090.47,683.695 1091.03,683.695 1091.59,683.695 1092.15,683.695 1092.71,683.695 1093.27,683.695 1093.83,683.695 1094.39,683.695 1094.94,683.695 1095.5,683.695 1096.06,683.695 1096.62,683.695 1097.18,683.695 1097.74,683.695 1098.3,683.695 1098.86,683.695 1099.42,683.695 1099.98,683.695 1100.54,683.695 1101.1,683.695 1101.66,683.695 1102.22,683.695 1102.77,683.695 1103.33,683.695 1103.89,683.695 1104.45,683.695 1105.01,683.695 1105.57,683.695 1106.13,683.695 1106.69,683.695 1107.25,683.695 1107.81,683.695 1108.37,683.695 1108.93,683.695 1109.49,683.695 1110.04,683.695 1110.6,683.695 1111.16,683.695 1111.72,683.695 1112.28,683.695 1112.84,683.695 1113.4,683.695 1113.96,683.695 1114.52,683.695 1115.08,683.695 1115.64,683.695 1116.2,683.695 1116.76,683.695 1117.31,683.695 1117.87,683.695 1118.43,683.695 1118.99,683.695 1119.55,683.695 1120.11,683.695 1120.67,683.695 1121.23,683.695 1121.79,683.695 1122.35,683.695 1122.91,683.695 1123.47,683.695 1124.03,683.695 1124.59,683.695 1125.14,683.695 1125.7,683.695 1126.26,683.695 1126.82,683.695 1127.38,683.695 1127.94,683.695 1128.5,683.695 1129.06,683.695 1129.62,683.695 1130.18,683.695 1130.74,683.695 1131.3,683.695 1131.86,683.695 1132.41,683.695 1132.97,683.695 1133.53,683.695 1134.09,683.695 1134.65,683.695 1135.21,683.695 1135.77,683.695 1136.33,683.695 1136.89,683.695 1137.45,683.695 1138.01,683.695 1138.57,683.695 1139.13,683.695 1139.68,683.695 1140.24,683.695 1140.8,683.695 1141.36,683.695 1141.92,683.695 1142.48,683.695 1143.04,683.695 1143.6,683.695 1144.16,683.695 1144.72,683.695 1145.28,683.695 1145.84,683.695 1146.4,683.695 1146.96,683.695 1147.51,683.695 1148.07,683.695 1148.63,683.695 1149.19,683.695 1149.75,683.695 1150.31,683.695 1150.87,683.695 1151.43,683.695 1151.99,683.695 1152.55,683.695 1153.11,683.695 1153.67,683.695 1154.23,683.695 1154.78,683.695 1155.34,683.695 1155.9,683.695 1156.46,683.695 1157.02,683.695 1157.58,683.695 1158.14,683.695 1158.7,683.695 1159.26,683.695 1159.82,683.695 1160.38,683.695 1160.94,683.695 1161.5,683.695 1162.05,683.695 1162.61,683.695 1163.17,683.695 1163.73,683.695 1164.29,683.695 1164.85,683.695 1165.41,683.695 1165.97,683.695 1166.53,683.695 1167.09,683.695 1167.65,683.695 1168.21,683.695 1168.77,683.695 1169.33,683.695 1169.88,683.695 1170.44,683.695 1171,683.695 1171.56,683.695 1172.12,683.695 1172.68,683.695 1173.24,683.695 1173.8,683.695 1174.36,683.695 1174.92,683.695 1175.48,683.695 1176.04,683.695 1176.6,683.695 1177.15,683.695 1177.71,683.695 1178.27,683.695 1178.83,683.695 1179.39,683.695 1179.95,683.695 1180.51,683.695 1181.07,683.695 1181.63,683.695 1182.19,683.695 1182.75,683.695 1183.31,683.695 1183.87,683.695 1184.43,683.695 1184.98,683.695 1185.54,683.695 1186.1,683.695 1186.66,683.695 1187.22,683.695 1187.78,683.695 1188.34,683.695 1188.9,683.695 1189.46,683.695 1190.02,683.695 1190.58,683.695 1191.14,683.695 1191.7,683.695 1192.25,683.695 1192.81,683.695 1193.37,683.695 1193.93,683.695 1194.49,683.695 1195.05,683.695 1195.61,683.695 1196.17,683.695 1196.73,683.695 1197.29,683.695 1197.85,683.695 1198.41,683.695 1198.97,683.695 1199.52,683.695 1200.08,683.695 1200.64,683.695 1201.2,683.695 1201.76,683.695 1202.32,683.695 1202.88,683.695 1203.44,683.695 1204,683.695 1204.56,683.695 1205.12,683.695 1205.68,683.695 1206.24,683.695 1206.8,683.695 1207.35,683.695 1207.91,683.695 1208.47,683.695 1209.03,683.695 1209.59,683.695 1210.15,683.695 1210.71,683.695 1211.27,683.695 1211.83,683.695 1212.39,683.695 1212.95,683.695 1213.51,683.695 1214.07,683.695 1214.62,683.695 1215.18,683.695 1215.74,683.695 1216.3,683.695 1216.86,683.695 1217.42,683.695 1217.98,683.695 1218.54,683.695 1219.1,683.695 1219.66,683.695 1220.22,683.695 1220.78,683.695 1221.34,683.695 1221.89,683.695 1222.45,683.695 1223.01,683.695 1223.57,683.695 1224.13,683.695 1224.69,683.695 1225.25,683.695 1225.81,683.695 1226.37,683.695 1226.93,683.695 1227.49,683.695 1228.05,683.695 1228.61,683.695 1229.17,683.695 1229.72,683.695 1230.28,683.695 1230.84,683.695 1231.4,683.695 1231.96,683.695 1232.52,683.695 1233.08,683.695 1233.64,683.695 1234.2,683.695 1234.76,683.695 1235.32,683.695 1235.88,683.695 1236.44,683.695 1236.99,683.695 1237.55,683.695 1238.11,683.695 1238.67,683.695 1239.23,683.695 1239.79,683.695 1240.35,683.695 1240.91,683.695 1241.47,683.695 1242.03,683.695 1242.59,683.695 1243.15,683.695 1243.71,683.695 1244.26,683.695 1244.82,683.695 1245.38,683.695 1245.94,683.695 1246.5,683.695 1247.06,683.695 1247.62,683.695 1248.18,683.695 1248.74,683.695 1249.3,683.695 1249.86,683.695 1250.42,683.695 1250.98,683.695 1251.54,683.695 1252.09,683.695 1252.65,683.695 1253.21,683.695 1253.77,683.695 1254.33,683.695 1254.89,683.695 1255.45,683.695 1256.01,683.695 1256.57,683.695 1257.13,683.695 1257.69,683.695 1258.25,683.695 1258.81,683.695 1259.36,683.695 1259.92,683.695 1260.48,683.695 1261.04,683.695 1261.6,683.695 1262.16,683.695 1262.72,683.695 1263.28,683.695 1263.84,683.695 1264.4,683.695 1264.96,683.695 1265.52,683.695 1266.08,683.695 1266.63,683.695 1267.19,683.695 1267.75,683.695 1268.31,683.695 1268.87,683.695 1269.43,683.695 1269.99,683.695 1270.55,683.695 1271.11,683.695 1271.67,683.695 1272.23,683.695 1272.79,683.695 1273.35,683.695 1273.91,683.695 1274.46,683.695 1275.02,683.695 1275.58,683.695 1276.14,683.695 1276.7,683.695 1277.26,683.695 1277.82,683.695 1278.38,683.695 1278.94,683.695 1279.5,683.695 1280.06,683.695 1280.62,683.695 1281.18,683.695 1281.73,683.695 1282.29,683.695 1282.85,683.695 1283.41,683.695 1283.97,683.695 1284.53,683.695 1285.09,683.695 1285.65,683.695 1286.21,683.695 1286.77,683.695 1287.33,683.695 1287.89,683.695 1288.45,683.695 1289,683.695 1289.56,683.695 1290.12,683.695 1290.68,683.695 1291.24,683.695 1291.8,683.695 1292.36,683.695 1292.92,683.695 1293.48,683.695 1294.04,683.695 1294.6,683.695 1295.16,683.695 1295.72,683.695 1296.28,683.695 1296.83,683.695 1297.39,683.695 1297.95,683.695 1298.51,683.695 1299.07,683.695 1299.63,683.695 1300.19,683.695 1300.75,683.695 1301.31,683.695 1301.87,683.695 1302.43,683.695 1302.99,683.695 1303.55,683.695 1304.1,683.695 1304.66,683.695 1305.22,683.695 1305.78,683.695 1306.34,683.695 1306.9,683.695 1307.46,683.695 1308.02,683.695 1308.58,683.695 1309.14,683.695 1309.7,683.695 1310.26,683.695 1310.82,683.695 1311.38,683.695 1311.93,683.695 1312.49,683.695 1313.05,683.695 1313.61,683.695 1314.17,683.695 1314.73,683.695 1315.29,683.695 1315.85,683.695 1316.41,683.695 1316.97,683.695 1317.53,683.695 1318.09,683.695 1318.65,683.695 1319.2,683.695 1319.76,683.695 1320.32,683.695 1320.88,683.695 1321.44,683.695 1322,683.695 1322.56,683.695 1323.12,683.695 1323.68,683.695 1324.24,683.695 1324.8,683.695 1325.36,683.695 1325.92,683.695 1326.47,683.695 1327.03,683.695 1327.59,683.695 1328.15,683.695 1328.71,683.695 1329.27,683.695 1329.83,683.695 1330.39,683.695 1330.95,683.695 1331.51,683.695 1332.07,683.695 1332.63,683.695 1333.19,683.695 1333.75,683.695 1334.3,683.695 1334.86,683.695 1335.42,683.695 1335.98,683.695 1336.54,683.695 1337.1,683.695 1337.66,683.695 1338.22,683.695 1338.78,683.695 1339.34,683.695 1339.9,683.695 1340.46,683.695 1341.02,683.695 1341.57,683.695 1342.13,683.695 1342.69,683.695 1343.25,683.695 1343.81,683.695 1344.37,683.695 1344.93,683.695 1345.49,683.695 1346.05,683.695 1346.61,683.695 1347.17,683.695 1347.73,683.695 1348.29,683.695 1348.84,683.695 1349.4,683.695 1349.96,683.695 1350.52,683.695 1351.08,683.695 1351.64,683.695 1352.2,683.695 1352.76,683.695 1353.32,683.695 1353.88,683.695 1354.44,683.695 1355,683.695 1355.56,683.695 1356.12,683.695 1356.67,683.695 1357.23,683.695 1357.79,683.695 1358.35,683.695 1358.91,683.695 1359.47,683.695 1360.03,683.695 1360.59,683.695 1361.15,683.695 1361.71,683.695 1362.27,683.695 1362.83,683.695 1363.39,683.695 1363.94,683.695 1364.5,683.695 1365.06,683.695 1365.62,683.695 1366.18,683.695 1366.74,683.695 1367.3,683.695 1367.86,683.695 1368.42,683.695 1368.98,683.695 1369.54,683.695 1370.1,683.695 1370.66,683.695 1371.21,683.695 1371.77,683.695 1372.33,683.695 1372.89,683.695 1373.45,683.695 1374.01,683.695 1374.57,683.695 1375.13,683.695 1375.69,683.695 1376.25,683.695 1376.81,683.695 1377.37,683.695 1377.93,683.695 1378.49,683.695 1379.04,683.695 1379.6,683.695 1380.16,683.695 1380.72,683.695 1381.28,683.695 1381.84,683.695 1382.4,683.695 1382.96,683.695 1383.52,683.695 1384.08,683.695 1384.64,683.695 1385.2,683.695 1385.76,683.695 1386.31,683.695 1386.87,683.695 1387.43,683.695 1387.99,683.695 1388.55,683.695 1389.11,683.695 1389.67,683.695 1390.23,683.695 1390.79,683.695 1391.35,683.695 1391.91,683.695 1392.47,683.695 1393.03,683.695 1393.58,683.695 1394.14,683.695 1394.7,683.695 1395.26,683.695 1395.82,683.695 1396.38,683.695 1396.94,683.695 1397.5,683.695 1398.06,683.695 1398.62,683.695 1399.18,683.695 1399.74,683.695 1400.3,683.695 1400.86,683.695 1401.41,683.695 1401.97,683.695 1402.53,683.695 1403.09,683.695 1403.65,683.695 1404.21,683.695 1404.77,683.695 1405.33,683.695 1405.89,683.695 1406.45,683.695 1407.01,683.695 1407.57,683.695 1408.13,683.695 1408.68,683.695 1409.24,683.695 1409.8,683.695 1410.36,683.695 1410.92,683.695 1411.48,683.695 1412.04,683.695 1412.6,683.695 1413.16,683.695 1413.72,683.695 1414.28,683.695 1414.84,683.695 1415.4,683.695 1415.95,683.695 1416.51,683.695 1417.07,683.695 1417.63,683.695 1418.19,683.695 1418.75,683.695 1419.31,683.695 1419.87,683.695 1420.43,683.695 1420.99,683.695 1421.55,683.695 1422.11,683.695 1422.67,683.695 1423.23,683.695 1423.78,683.695 1424.34,683.695 1424.9,683.695 1425.46,683.695 1426.02,683.695 1426.58,683.695 1427.14,683.695 1427.7,683.695 1428.26,683.695 1428.82,683.695 1429.38,683.695 1429.94,683.695 1430.5,683.695 1431.05,683.695 1431.61,683.695 1432.17,683.695 1432.73,683.695 1433.29,683.695 1433.85,683.695 1434.41,683.695 1434.97,683.695 1435.53,683.695 1436.09,683.695 1436.65,683.695 1437.21,683.695 1437.77,683.695 1438.33,683.695 1438.88,683.695 1439.44,683.695 1440,683.695 1440.56,683.695 1441.12,683.695 1441.68,683.695 1442.24,683.695 1442.8,683.695 1443.36,683.695 1443.92,683.695 1444.48,683.695 1445.04,683.695 1445.6,683.695 1446.15,683.695 1446.71,683.695 1447.27,683.695 1447.83,683.695 1448.39,683.695 1448.95,683.695 1449.51,683.695 1450.07,683.695 1450.63,683.695 1451.19,683.695 1451.75,683.695 1452.31,683.695 1452.87,683.695 1453.42,683.695 1453.98,683.695 1454.54,683.695 1455.1,683.695 1455.66,683.695 1456.22,683.695 1456.78,683.695 1457.34,683.695 1457.9,683.695 1458.46,683.695 1459.02,683.695 1459.58,683.695 1460.14,683.695 1460.7,683.695 1461.25,683.695 1461.81,683.695 1462.37,683.695 1462.93,683.695 1463.49,683.695 1464.05,683.695 1464.61,683.695 1465.17,683.695 1465.73,683.695 1466.29,683.695 1466.85,683.695 1467.41,683.695 1467.97,683.695 1468.52,683.695 1469.08,683.695 1469.64,683.695 1470.2,683.695 1470.76,683.695 1471.32,683.695 1471.88,683.695 1472.44,683.695 1473,683.695 1473.56,683.695 1474.12,683.695 1474.68,683.695 1475.24,683.695 1475.79,683.695 1476.35,683.695 1476.91,683.695 1477.47,683.695 1478.03,683.695 1478.59,683.695 1479.15,683.695 1479.71,683.695 1480.27,683.695 1480.83,683.695 1481.39,683.695 1481.95,683.695 1482.51,683.695 1483.07,683.695 1483.62,683.695 1484.18,683.695 1484.74,683.695 1485.3,683.695 1485.86,683.695 1486.42,683.695 1486.98,683.695 1487.54,683.695 1488.1,683.695 1488.66,683.695 1489.22,683.695 1489.78,683.695 1490.34,683.695 1490.89,683.695 1491.45,683.695 1492.01,683.695 1492.57,683.695 1493.13,683.695 1493.69,683.695 1494.25,683.695 1494.81,683.695 1495.37,683.695 1495.93,683.695 1496.49,683.695 1497.05,683.695 1497.61,683.695 1498.16,683.695 1498.72,683.695 1499.28,683.695 1499.84,683.695 1500.4,683.695 1500.96,683.695 1501.52,683.695 1502.08,683.695 1502.64,683.695 1503.2,683.695 1503.76,683.695 1504.32,683.695 1504.88,683.695 1505.44,683.695 1505.99,683.695 1506.55,683.695 1507.11,683.695 1507.67,683.695 1508.23,683.695 1508.79,683.695 1509.35,683.695 1509.91,683.695 1510.47,683.695 1511.03,683.695 1511.59,683.695 1512.15,683.695 1512.71,683.695 1513.26,683.695 1513.82,683.695 1514.38,683.695 1514.94,683.695 1515.5,683.695 1516.06,683.695 1516.62,683.695 1517.18,683.695 1517.74,683.695 1518.3,683.695 1518.86,683.695 1519.42,683.695 1519.98,683.695 1520.53,683.695 1521.09,683.695 1521.65,683.695 1522.21,683.695 1522.77,683.695 1523.33,683.695 1523.89,683.695 1524.45,683.695 1525.01,683.695 1525.57,683.695 1526.13,683.695 1526.69,683.695 1527.25,683.695 1527.81,683.695 1528.36,683.695 1528.92,683.695 1529.48,683.695 1530.04,683.695 1530.6,683.695 1531.16,683.695 1531.72,683.695 1532.28,683.695 1532.84,683.695 1533.4,683.695 1533.96,683.695 1534.52,683.695 1535.08,683.695 1535.63,683.695 1536.19,683.695 1536.75,683.695 1537.31,683.695 1537.87,683.695 1538.43,683.695 1538.99,683.695 1539.55,683.695 1540.11,683.695 1540.67,683.695 1541.23,683.695 1541.79,683.695 1542.35,683.695 1542.9,683.695 1543.46,683.695 1544.02,683.695 1544.58,683.695 1545.14,683.695 1545.7,683.695 1546.26,683.695 1546.82,683.695 1547.38,683.695 1547.94,683.695 1548.5,683.695 1549.06,683.695 1549.62,683.695 1550.18,683.695 1550.73,683.695 1551.29,683.695 1551.85,683.695 1552.41,683.695 1552.97,683.695 1553.53,683.695 1554.09,683.695 1554.65,683.695 1555.21,683.695 1555.77,683.695 1556.33,683.695 1556.89,683.695 1557.45,683.695 1558,683.695 1558.56,683.695 1559.12,683.695 1559.68,683.695 1560.24,683.695 1560.8,683.695 1561.36,683.695 1561.92,683.695 1562.48,683.695 1563.04,683.695 1563.6,683.695 1564.16,683.695 1564.72,683.695 1565.28,683.695 1565.83,683.695 1566.39,683.695 1566.95,683.695 1567.51,683.695 1568.07,683.695 1568.63,683.695 1569.19,683.695 1569.75,683.695 1570.31,683.695 1570.87,683.695 1571.43,683.695 1571.99,683.695 1572.55,683.695 1573.1,683.695 1573.66,683.695 1574.22,683.695 1574.78,683.695 1575.34,683.695 1575.9,683.695 1576.46,683.695 1577.02,683.695 1577.58,683.695 1578.14,683.695 1578.7,683.695 1579.26,683.695 1579.82,683.695 1580.37,683.695 1580.93,683.695 1581.49,683.695 1582.05,683.695 1582.61,683.695 1583.17,683.695 1583.73,683.695 1584.29,683.695 1584.85,683.695 1585.41,683.695 1585.97,683.695 1586.53,683.695 1587.09,683.695 1587.65,683.695 1588.2,683.695 1588.76,683.695 1589.32,683.695 1589.88,683.695 1590.44,683.695 1591,683.695 1591.56,683.695 1592.12,683.695 1592.68,683.695 1593.24,683.695 1593.8,683.695 1594.36,683.695 1594.92,683.695 1595.47,683.695 1596.03,683.695 1596.59,683.695 1597.15,683.695 1597.71,683.695 1598.27,683.695 1598.83,683.695 1599.39,683.695 1599.95,683.695 1600.51,683.695 1601.07,683.695 1601.63,683.695 1602.19,683.695 1602.74,683.695 1603.3,683.695 1603.86,683.695 1604.42,683.695 1604.98,683.695 1605.54,683.695 1606.1,683.695 1606.66,683.695 1607.22,683.695 1607.78,683.695 1608.34,683.695 1608.9,683.695 1609.46,683.695 1610.02,683.695 1610.57,683.695 1611.13,683.695 1611.69,683.695 1612.25,683.695 1612.81,683.695 1613.37,683.695 1613.93,683.695 1614.49,683.695 1615.05,683.695 1615.61,683.695 1616.17,683.695 1616.73,683.695 1617.29,683.695 1617.84,683.695 1618.4,683.695 1618.96,683.695 1619.52,683.695 1620.08,683.695 1620.64,683.695 1621.2,683.695 1621.76,683.695 1622.32,683.695 1622.88,683.695 1623.44,683.695 1624,683.695 1624.56,683.695 1625.11,683.695 1625.67,683.695 1626.23,683.695 1626.79,683.695 1627.35,683.695 1627.91,683.695 1628.47,683.695 1629.03,683.695 1629.59,683.695 1630.15,683.695 1630.71,683.695 1631.27,683.695 1631.83,683.695 1632.39,683.695 1632.94,683.695 1633.5,683.695 1634.06,683.695 1634.62,683.695 1635.18,683.695 1635.74,683.695 1636.3,683.695 1636.86,683.695 1637.42,683.695 1637.98,683.695 1638.54,683.695 1639.1,683.695 1639.66,683.695 1640.21,683.695 1640.77,683.695 1641.33,683.695 1641.89,683.695 1642.45,683.695 1643.01,683.695 1643.57,683.695 1644.13,683.695 1644.69,683.695 1645.25,683.695 1645.81,683.695 1646.37,683.695 1646.93,683.695 1647.48,683.695 1648.04,683.695 1648.6,683.695 1649.16,683.695 1649.72,683.695 1650.28,683.695 1650.84,683.695 1651.4,683.695 1651.96,683.695 1652.52,683.695 1653.08,683.695 1653.64,683.695 1654.2,683.695 1654.76,683.695 1655.31,683.695 1655.87,683.695 1656.43,683.695 1656.99,683.695 1657.55,683.695 1658.11,683.695 1658.67,683.695 1659.23,683.695 1659.79,683.695 1660.35,683.695 1660.91,683.695 1661.47,683.695 1662.03,683.695 1662.58,683.695 1663.14,683.695 1663.7,683.695 1664.26,683.695 1664.82,683.695 1665.38,683.695 1665.94,683.695 1666.5,683.695 1667.06,683.695 1667.62,683.695 1668.18,683.695 1668.74,683.695 1669.3,683.695 1669.85,683.695 1670.41,683.695 1670.97,683.695 1671.53,683.695 1672.09,683.695 1672.65,683.695 1673.21,683.695 1673.77,683.695 1674.33,683.695 1674.89,683.695 1675.45,683.695 1676.01,683.695 1676.57,683.695 1677.13,683.695 1677.68,683.695 1678.24,683.695 1678.8,683.695 1679.36,683.695 1679.92,683.695 1680.48,683.695 1681.04,683.695 1681.6,683.695 1682.16,683.695 1682.72,683.695 1683.28,683.695 1683.84,683.695 1684.4,683.695 1684.95,683.695 1685.51,683.695 1686.07,683.695 1686.63,683.695 1687.19,683.695 1687.75,683.695 1688.31,683.695 1688.87,683.695 1689.43,683.695 1689.99,683.695 1690.55,683.695 1691.11,683.695 1691.67,683.695 1692.23,683.695 1692.78,683.695 1693.34,683.695 1693.9,683.695 1694.46,683.695 1695.02,683.695 1695.58,683.695 1696.14,683.695 1696.7,683.695 1697.26,683.695 1697.82,683.695 1698.38,683.695 1698.94,683.695 1699.5,683.695 1700.05,683.695 1700.61,683.695 1701.17,683.695 1701.73,683.695 1702.29,683.695 1702.85,683.695 1703.41,683.695 1703.97,683.695 1704.53,683.695 1705.09,683.695 1705.65,683.695 1706.21,683.695 1706.77,683.695 1707.32,683.695 1707.88,683.695 1708.44,683.695 1709,683.695 1709.56,683.695 1710.12,683.695 1710.68,683.695 1711.24,683.695 1711.8,683.695 1712.36,683.695 1712.92,683.695 1713.48,683.695 1714.04,683.695 1714.6,683.695 1715.15,683.695 1715.71,683.695 1716.27,683.695 1716.83,683.695 1717.39,683.695 1717.95,683.695 1718.51,683.695 1719.07,683.695 1719.63,683.695 1720.19,683.695 1720.75,683.695 1721.31,683.695 1721.87,683.695 1722.42,683.695 1722.98,683.695 1723.54,683.695 1724.1,683.695 1724.66,683.695 1725.22,683.695 1725.78,683.695 1726.34,683.695 1726.9,683.695 1727.46,683.695 1728.02,683.695 1728.58,683.695 1729.14,683.695 1729.69,683.695 1730.25,683.695 1730.81,683.695 1731.37,683.695 1731.93,683.695 1732.49,683.695 1733.05,683.695 1733.61,683.695 1734.17,683.695 1734.73,683.695 1735.29,683.695 1735.85,683.695 1736.41,683.695 1736.97,683.695 1737.52,683.695 1738.08,683.695 1738.64,683.695 1739.2,683.695 1739.76,683.695 1740.32,683.695 1740.88,683.695 1741.44,683.695 1742,683.695 1742.56,683.695 1743.12,683.695 1743.68,683.695 1744.24,683.695 1744.79,683.695 1745.35,683.695 1745.91,683.695 1746.47,683.695 1747.03,683.695 1747.59,683.695 1748.15,683.695 1748.71,683.695 1749.27,683.695 1749.83,683.695 1750.39,683.695 1750.95,683.695 1751.51,683.695 1752.06,683.695 1752.62,683.695 1753.18,683.695 1753.74,683.695 1754.3,683.695 1754.86,683.695 1755.42,683.695 1755.98,683.695 1756.54,683.695 1757.1,683.695 1757.66,683.695 1758.22,683.695 1758.78,683.695 1759.34,683.695 1759.89,683.695 1760.45,683.695 1761.01,683.695 1761.57,683.695 1762.13,683.695 1762.69,683.695 1763.25,683.695 1763.81,683.695 1764.37,683.695 1764.93,683.695 1765.49,683.695 1766.05,683.695 1766.61,683.695 1767.16,683.695 1767.72,683.695 1768.28,683.695 1768.84,683.695 1769.4,683.695 1769.96,683.695 1770.52,683.695 1771.08,683.695 1771.64,683.695 1772.2,683.695 1772.76,683.695 1773.32,683.695 1773.88,683.695 1774.43,683.695 1774.99,683.695 1775.55,683.695 1776.11,683.695 1776.67,683.695 1777.23,683.695 1777.79,683.695 1778.35,683.695 1778.91,683.695 1779.47,683.695 1780.03,683.695 1780.59,683.695 1781.15,683.695 1781.71,683.695 1782.26,683.695 1782.82,683.695 1783.38,683.695 1783.94,683.695 1784.5,683.695 1785.06,683.695 1785.62,683.695 1786.18,683.695 1786.74,683.695 1787.3,683.695 1787.86,683.695 1788.42,683.695 1788.98,683.695 1789.53,683.695 1790.09,683.695 1790.65,683.695 1791.21,683.695 1791.77,683.695 1792.33,683.695 1792.89,683.695 1793.45,683.695 1794.01,683.695 1794.57,683.695 1795.13,683.695 1795.69,683.695 1796.25,683.695 1796.8,683.695 1797.36,683.695 1797.92,683.695 1798.48,683.695 1799.04,683.695 1799.6,683.695 1800.16,683.695 1800.72,683.695 1801.28,683.695 1801.84,683.695 1802.4,683.695 1802.96,683.695 1803.52,683.695 1804.08,683.695 1804.63,683.695 1805.19,683.695 1805.75,683.695 1806.31,683.695 1806.87,683.695 1807.43,683.695 1807.99,683.695 1808.55,683.695 1809.11,683.695 1809.67,683.695 1810.23,683.695 1810.79,683.695 1811.35,683.695 1811.9,683.695 1812.46,683.695 1813.02,683.695 1813.58,683.695 1814.14,683.695 1814.7,683.695 1815.26,683.695 1815.82,683.695 1816.38,683.695 1816.94,683.695 1817.5,683.695 1818.06,683.695 1818.62,683.695 1819.18,683.695 1819.73,683.695 1820.29,683.695 1820.85,683.695 1821.41,683.695 1821.97,683.695 1822.53,683.695 1823.09,683.695 1823.65,683.695 1824.21,683.695 1824.77,683.695 1825.33,683.695 1825.89,683.695 1826.45,683.695 1827,683.695 1827.56,683.695 1828.12,683.695 1828.68,683.695 1829.24,683.695 1829.8,683.695 1830.36,683.695 1830.92,683.695 1831.48,683.695 1832.04,683.695 1832.6,683.695 1833.16,683.695 1833.72,683.695 1834.27,683.695 1834.83,683.695 1835.39,683.695 1835.95,683.695 1836.51,683.695 1837.07,683.695 1837.63,683.695 1838.19,683.695 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.02658410155719 ± 0.02678506861931118\nProjected Energy: -4.015641164350947 ± (0.004807828404358894, 0.004909918973353911)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.514884</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3956e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1021e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0469e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.372e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.845e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.0149e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613371\n -0.7590191922770835\n  0.13584182219621965\n  0.15789998694608265\n  0.8767114411781325\n  1.530592997097334\n  1.5835732611867401\n  3.0728703303258627\n  3.1256726539518445\n  4.862107221562167\n  6.260694850380599\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
