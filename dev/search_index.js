var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21474382137224704 ± 0.001743552485617701\n   G2(1) = 0.9164466192369546 ± 0.0007412565374976239\n   G2(2) = 0.9815938278809173 ± 0.000641762826893606\n   G2(3) = 0.9891752843920094 ± 0.0009156602472618942\n   G2(4) = 0.9815938278809173 ± 0.000641762826893606\n   G2(5) = 0.9164466192369546 ± 0.0007412565374976239\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.976141411201091 ± 0.14139196704680143\n   Replica 2: -4.017993479365148 ± 0.14041001056383806\n   Replica 3: -4.012014986369422 ± 0.1323243724655567\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip670\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip671\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip672\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004 2211.02,1004 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.133 2211.02,746.133 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.262 2211.02,488.262 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.391 2211.02,230.391 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004 423.181,1004 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.133 423.181,746.133 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.262 423.181,488.262 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.391 423.181,230.391 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.24 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.24 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M290.043 1017.35 L306.363 1017.35 L306.363 1021.28 L284.418 1021.28 L284.418 1017.35 Q287.08 1014.59 291.664 1009.96 Q296.27 1005.31 297.451 1003.97 Q299.696 1001.45 300.576 999.71 Q301.478 997.951 301.478 996.261 Q301.478 993.506 299.534 991.77 Q297.613 990.034 294.511 990.034 Q292.312 990.034 289.858 990.798 Q287.427 991.562 284.65 993.113 L284.65 988.39 Q287.474 987.256 289.927 986.678 Q292.381 986.099 294.418 986.099 Q299.789 986.099 302.983 988.784 Q306.177 991.469 306.177 995.96 Q306.177 998.089 305.367 1000.01 Q304.58 1001.91 302.474 1004.5 Q301.895 1005.17 298.793 1008.39 Q295.691 1011.58 290.043 1017.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M316.224 986.724 L334.58 986.724 L334.58 990.659 L320.506 990.659 L320.506 999.131 Q321.524 998.784 322.543 998.622 Q323.562 998.437 324.58 998.437 Q330.367 998.437 333.747 1001.61 Q337.126 1004.78 337.126 1010.2 Q337.126 1015.77 333.654 1018.88 Q330.182 1021.96 323.862 1021.96 Q321.687 1021.96 319.418 1021.58 Q317.173 1021.21 314.765 1020.47 L314.765 1015.77 Q316.849 1016.91 319.071 1017.46 Q321.293 1018.02 323.77 1018.02 Q327.774 1018.02 330.112 1015.91 Q332.45 1013.81 332.45 1010.2 Q332.45 1006.58 330.112 1004.48 Q327.774 1002.37 323.77 1002.37 Q321.895 1002.37 320.02 1002.79 Q318.168 1003.21 316.224 1004.08 L316.224 986.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 989.803 Q352.728 989.803 350.899 993.367 Q349.094 996.909 349.094 1004.04 Q349.094 1011.14 350.899 1014.71 Q352.728 1018.25 356.339 1018.25 Q359.973 1018.25 361.779 1014.71 Q363.608 1011.14 363.608 1004.04 Q363.608 996.909 361.779 993.367 Q359.973 989.803 356.339 989.803 M356.339 986.099 Q362.149 986.099 365.205 990.705 Q368.284 995.289 368.284 1004.04 Q368.284 1012.77 365.205 1017.37 Q362.149 1021.96 356.339 1021.96 Q350.529 1021.96 347.45 1017.37 Q344.395 1012.77 344.395 1004.04 Q344.395 995.289 347.45 990.705 Q350.529 986.099 356.339 986.099 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M286.062 728.853 L304.418 728.853 L304.418 732.788 L290.344 732.788 L290.344 741.26 Q291.363 740.913 292.381 740.751 Q293.4 740.566 294.418 740.566 Q300.205 740.566 303.585 743.737 Q306.964 746.908 306.964 752.325 Q306.964 757.904 303.492 761.005 Q300.02 764.084 293.701 764.084 Q291.525 764.084 289.256 763.714 Q287.011 763.343 284.603 762.603 L284.603 757.904 Q286.687 759.038 288.909 759.593 Q291.131 760.149 293.608 760.149 Q297.613 760.149 299.951 758.042 Q302.288 755.936 302.288 752.325 Q302.288 748.714 299.951 746.607 Q297.613 744.501 293.608 744.501 Q291.733 744.501 289.858 744.917 Q288.006 745.334 286.062 746.214 L286.062 728.853 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M326.177 731.931 Q322.566 731.931 320.737 735.496 Q318.932 739.038 318.932 746.167 Q318.932 753.274 320.737 756.839 Q322.566 760.38 326.177 760.38 Q329.811 760.38 331.617 756.839 Q333.446 753.274 333.446 746.167 Q333.446 739.038 331.617 735.496 Q329.811 731.931 326.177 731.931 M326.177 728.228 Q331.987 728.228 335.043 732.834 Q338.122 737.418 338.122 746.167 Q338.122 754.894 335.043 759.501 Q331.987 764.084 326.177 764.084 Q320.367 764.084 317.288 759.501 Q314.233 754.894 314.233 746.167 Q314.233 737.418 317.288 732.834 Q320.367 728.228 326.177 728.228 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 731.931 Q352.728 731.931 350.899 735.496 Q349.094 739.038 349.094 746.167 Q349.094 753.274 350.899 756.839 Q352.728 760.38 356.339 760.38 Q359.973 760.38 361.779 756.839 Q363.608 753.274 363.608 746.167 Q363.608 739.038 361.779 735.496 Q359.973 731.931 356.339 731.931 M356.339 728.228 Q362.149 728.228 365.205 732.834 Q368.284 737.418 368.284 746.167 Q368.284 754.894 365.205 759.501 Q362.149 764.084 356.339 764.084 Q350.529 764.084 347.45 759.501 Q344.395 754.894 344.395 746.167 Q344.395 737.418 347.45 732.834 Q350.529 728.228 356.339 728.228 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M284.835 470.982 L307.057 470.982 L307.057 472.972 L294.511 505.542 L289.627 505.542 L301.432 474.917 L284.835 474.917 L284.835 470.982 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M316.224 470.982 L334.58 470.982 L334.58 474.917 L320.506 474.917 L320.506 483.389 Q321.524 483.042 322.543 482.88 Q323.562 482.695 324.58 482.695 Q330.367 482.695 333.747 485.866 Q337.126 489.037 337.126 494.454 Q337.126 500.032 333.654 503.134 Q330.182 506.213 323.862 506.213 Q321.687 506.213 319.418 505.843 Q317.173 505.472 314.765 504.731 L314.765 500.032 Q316.849 501.167 319.071 501.722 Q321.293 502.278 323.77 502.278 Q327.774 502.278 330.112 500.171 Q332.45 498.065 332.45 494.454 Q332.45 490.843 330.112 488.736 Q327.774 486.63 323.77 486.63 Q321.895 486.63 320.02 487.046 Q318.168 487.463 316.224 488.343 L316.224 470.982 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 474.06 Q352.728 474.06 350.899 477.625 Q349.094 481.167 349.094 488.296 Q349.094 495.403 350.899 498.968 Q352.728 502.509 356.339 502.509 Q359.973 502.509 361.779 498.968 Q363.608 495.403 363.608 488.296 Q363.608 481.167 361.779 477.625 Q359.973 474.06 356.339 474.06 M356.339 470.357 Q362.149 470.357 365.205 474.963 Q368.284 479.546 368.284 488.296 Q368.284 497.023 365.205 501.63 Q362.149 506.213 356.339 506.213 Q350.529 506.213 347.45 501.63 Q344.395 497.023 344.395 488.296 Q344.395 479.546 347.45 474.963 Q350.529 470.357 356.339 470.357 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M256.664 243.735 L264.303 243.735 L264.303 217.37 L255.992 219.036 L255.992 214.777 L264.256 213.111 L268.932 213.111 L268.932 243.735 L276.571 243.735 L276.571 247.671 L256.664 247.671 L256.664 243.735 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M296.015 216.189 Q292.404 216.189 290.576 219.754 Q288.77 223.296 288.77 230.425 Q288.77 237.532 290.576 241.097 Q292.404 244.638 296.015 244.638 Q299.65 244.638 301.455 241.097 Q303.284 237.532 303.284 230.425 Q303.284 223.296 301.455 219.754 Q299.65 216.189 296.015 216.189 M296.015 212.486 Q301.826 212.486 304.881 217.092 Q307.96 221.675 307.96 230.425 Q307.96 239.152 304.881 243.759 Q301.826 248.342 296.015 248.342 Q290.205 248.342 287.127 243.759 Q284.071 239.152 284.071 230.425 Q284.071 221.675 287.127 217.092 Q290.205 212.486 296.015 212.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M326.177 216.189 Q322.566 216.189 320.737 219.754 Q318.932 223.296 318.932 230.425 Q318.932 237.532 320.737 241.097 Q322.566 244.638 326.177 244.638 Q329.811 244.638 331.617 241.097 Q333.446 237.532 333.446 230.425 Q333.446 223.296 331.617 219.754 Q329.811 216.189 326.177 216.189 M326.177 212.486 Q331.987 212.486 335.043 217.092 Q338.122 221.675 338.122 230.425 Q338.122 239.152 335.043 243.759 Q331.987 248.342 326.177 248.342 Q320.367 248.342 317.288 243.759 Q314.233 239.152 314.233 230.425 Q314.233 221.675 317.288 217.092 Q320.367 212.486 326.177 212.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 216.189 Q352.728 216.189 350.899 219.754 Q349.094 223.296 349.094 230.425 Q349.094 237.532 350.899 241.097 Q352.728 244.638 356.339 244.638 Q359.973 244.638 361.779 241.097 Q363.608 237.532 363.608 230.425 Q363.608 223.296 361.779 219.754 Q359.973 216.189 356.339 216.189 M356.339 212.486 Q362.149 212.486 365.205 217.092 Q368.284 221.675 368.284 230.425 Q368.284 239.152 365.205 243.759 Q362.149 248.342 356.339 248.342 Q350.529 248.342 347.45 243.759 Q344.395 239.152 344.395 230.425 Q344.395 221.675 347.45 217.092 Q350.529 212.486 356.339 212.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip672)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.391 4017.76,230.391 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.43 457.123,1250.29 457.691,1250.03 458.259,1249.74 458.828,1249.35 459.396,1248.92 459.964,1248.41 460.533,1247.84 461.101,1246.15 461.669,1245.44 462.238,1244.64 462.806,1243.76 463.375,1241.75 463.943,1238.64 464.511,1236.47 465.08,1235.26 465.648,1232.87 466.216,1231.45 466.785,1229.89 467.353,1227.18 467.921,1225.39 468.49,1222.44 469.058,1220.34 469.626,1218.14 470.195,1215.81 470.763,1212.27 471.331,1209.6 471.9,1206.81 472.468,1202.82 473.036,1199.67 473.605,1195.24 474.173,1191.64 474.741,1187.85 475.31,1183.94 475.878,1179.79 476.446,1172.31 477.015,1166.73 477.583,1161.09 478.152,1156.12 478.72,1150.94 479.288,1145.55 479.857,1139.99 480.425,1134.22 480.993,1128.16 481.562,1121.89 482.13,1114.35 482.698,1106.59 483.267,1098.67 483.835,1088.59 484.403,1080.39 484.972,1073.03 485.54,1063.4 486.108,1055.62 486.677,1046.69 487.245,1037.58 487.813,1028.39 488.382,1018 488.95,1008.5 489.518,998.874 490.087,988.218 490.655,978.541 491.224,969.747 491.792,959.706 492.36,948.603 492.929,937.425 493.497,928.342 494.065,917.989 494.634,905.589 495.202,892.088 495.77,881.739 496.339,870.266 496.907,857.871 497.475,847.656 498.044,835.393 498.612,822.264 499.18,812.368 499.749,802.34 500.317,793.427 500.885,783.519 501.454,771.517 502.022,759.658 502.59,747.864 503.159,739.295 503.727,727.721 504.295,717.24 504.864,706.81 505.432,696.587 506.001,688.353 506.569,679.239 507.137,669.289 507.706,660.469 508.274,650.583 508.842,642.042 509.411,632.626 509.979,625.143 510.547,615.872 511.116,605.691 511.684,597.73 512.252,589.979 512.821,582.15 513.389,574.455 513.957,565.731 514.526,560.641 515.094,554.14 515.662,546.661 516.231,539.229 516.799,533.156 517.367,523.03 517.936,513.976 518.504,507.295 519.072,499.827 519.641,491.447 520.209,484.422 520.778,477.497 521.346,472.708 521.914,468.018 522.483,462.271 523.051,456.914 523.619,448.463 524.188,443.3 524.756,438.189 525.324,433.282 525.893,428.418 526.461,422.674 527.029,418.106 527.598,413.527 528.166,411.236 528.734,409.749 529.303,405.122 529.871,402.465 530.439,394.908 531.008,393.714 531.576,390.403 532.144,388.082 532.713,383.807 533.281,380.646 533.85,375.547 534.418,370.465 534.986,366.637 535.555,363.983 536.123,361.486 536.691,356.918 537.26,353.487 537.828,348.161 538.396,344.975 538.965,343.006 539.533,337.865 540.101,337.143 540.67,335.156 541.238,333.417 541.806,328.285 542.375,325.718 542.943,324.046 543.511,319.234 544.08,315.81 544.648,312.532 545.216,309.145 545.785,306.941 546.353,305.942 546.921,306.031 547.49,304.921 548.058,302.81 548.627,299.84 549.195,299.061 549.763,298.149 550.332,297.427 550.9,296.757 551.468,293.687 552.037,294.77 552.605,293.768 553.173,291.718 553.742,290.773 554.31,286.713 554.878,284.096 555.447,281.56 556.015,282.276 556.583,282.824 557.152,282.362 557.72,280.825 558.288,279.362 558.857,281.673 559.425,281.237 559.993,278.496 560.562,277.832 561.13,275.995 561.698,275.441 562.267,272.915 562.835,271.364 563.404,270.101 563.972,268.827 564.54,267.492 565.109,269.22 565.677,266.808 566.245,268.47 566.814,265.222 567.382,264.971 567.95,265.76 568.519,266.522 569.087,263.989 569.655,263.688 570.224,264.267 570.792,265.037 571.36,264.633 571.929,262.199 572.497,261.905 573.065,261.588 573.634,261.282 574.202,259.929 574.77,259.823 575.339,260.467 575.907,260.285 576.476,257.884 577.044,257.687 577.612,257.44 578.181,260.298 578.749,258.909 579.317,258.433 579.886,258.968 580.454,257.301 581.022,254.673 581.591,254.48 582.159,255.293 582.727,254.947 583.296,255.556 583.864,255.252 584.432,255.85 585.001,255.338 585.569,253.872 586.137,254.528 586.706,255.053 587.274,254.664 587.842,254.293 588.411,251.693 588.979,252.244 589.547,252.949 590.116,249.52 590.684,246.203 591.253,245.969 591.821,243.793 592.389,242.82 592.958,242.136 593.526,243.622 594.094,241.665 594.663,240.956 595.231,241.244 595.799,243.558 596.368,243.635 596.936,244.83 597.504,244.728 598.073,243.449 598.641,241.652 599.209,239.828 599.778,239.936 600.346,240.107 600.914,238.314 601.483,239.645 602.051,236.749 602.619,237.128 603.188,236.703 603.756,237.271 604.325,236.417 604.893,238.147 605.461,237.462 606.03,236.972 606.598,237.198 607.166,236.25 607.735,234.64 608.303,235.38 608.871,234.771 609.44,234.349 610.008,233.023 610.576,230.635 611.145,230.561 611.713,231.362 612.281,232.267 612.85,233.224 613.418,232.082 613.986,231.858 614.555,232.773 615.123,233.369 615.691,235.395 616.26,235.96 616.828,237.507 617.396,237.003 617.965,237.474 618.533,237.95 619.102,239.202 619.67,240.596 620.238,241.595 620.807,242.957 621.375,244.072 621.943,248.192 622.512,244.705 623.08,244.413 623.648,243.33 624.217,244.274 624.785,242.161 625.353,242.191 625.922,238.886 626.49,238.862 627.058,238.049 627.627,238.223 628.195,239.472 628.763,239.617 629.332,240.527 629.9,240.645 630.468,242.639 631.037,243.512 631.605,244.08 632.173,241.569 632.742,240.364 633.31,238.191 633.879,239.263 634.447,237.253 635.015,235.471 635.584,235.893 636.152,232.074 636.72,234.551 637.289,235.759 637.857,234.11 638.425,234.392 638.994,232.838 639.562,233.232 640.13,234.718 640.699,233.024 641.267,232.305 641.835,232.745 642.404,232.035 642.972,233.583 643.54,236.96 644.109,235.758 644.677,235.755 645.245,235.089 645.814,234.283 646.382,233.305 646.951,232.711 647.519,230.891 648.087,233.362 648.656,232.834 649.224,233.053 649.792,234.564 650.361,234.926 650.929,236.203 651.497,235.529 652.066,233.829 652.634,236.22 653.202,236.515 653.771,234.386 654.339,235.751 654.907,235.997 655.476,234.194 656.044,238.666 656.612,235.639 657.181,234.869 657.749,235.025 658.317,230.824 658.886,231.958 659.454,231.478 660.022,234.15 660.591,234.422 661.159,237.667 661.728,238.781 662.296,238.817 662.864,237.767 663.433,237.971 664.001,236.08 664.569,235.102 665.138,235.452 665.706,235.794 666.274,235.115 666.843,234.184 667.411,234.327 667.979,234.595 668.548,233.976 669.116,231.203 669.684,236.039 670.253,235.173 670.821,232.971 671.389,233.082 671.958,234.188 672.526,234.61 673.094,234.699 673.663,233.074 674.231,234.365 674.799,235.614 675.368,233.474 675.936,231.654 676.505,232.084 677.073,234.456 677.641,235.586 678.21,233.745 678.778,233.932 679.346,231.959 679.915,234.395 680.483,233.559 681.051,233.816 681.62,231.818 682.188,231.038 682.756,229.25 683.325,230.666 683.893,233.066 684.461,234.206 685.03,234.37 685.598,235.458 686.166,236.583 686.735,237.692 687.303,235.804 687.871,237.958 688.44,236.73 689.008,236.804 689.577,235.702 690.145,235.609 690.713,236.652 691.282,239.744 691.85,238.391 692.418,240.065 692.987,241.705 693.555,241.122 694.123,239.64 694.692,240.327 695.26,240.162 695.828,239.867 696.397,239.607 696.965,238.183 697.533,240.025 698.102,237.743 698.67,238.535 699.238,238.399 699.807,236.937 700.375,237.652 700.943,237.454 701.512,236.413 702.08,234.3 702.648,234.309 703.217,233.428 703.785,231.37 704.354,230.493 704.922,230.808 705.49,233.056 706.059,234.106 706.627,231.037 707.195,232.407 707.764,233.384 708.332,233.315 708.9,232.327 709.469,230.339 710.037,233.661 710.605,238.78 711.174,238.549 711.742,237.347 712.31,233.926 712.879,233.8 713.447,232.943 714.015,233.946 714.584,232.919 715.152,231.035 715.72,233.205 716.289,232.038 716.857,233.246 717.425,233.277 717.994,234.257 718.562,235.205 719.131,237.088 719.699,236.866 720.267,237.267 720.836,236.982 721.404,235.671 721.972,235.333 722.541,234.186 723.109,233.921 723.677,235.864 724.246,234.657 724.814,232.386 725.382,231.277 725.951,231.331 726.519,231.57 727.087,231.56 727.656,230.476 728.224,229.488 728.792,232.881 729.361,232.705 729.929,233.758 730.497,234.442 731.066,235.399 731.634,233.979 732.203,231.853 732.771,230.961 733.339,230.987 733.908,229.965 734.476,228.963 735.044,226.958 735.613,230.28 736.181,229.514 736.749,230.714 737.318,231.735 737.886,230.746 738.454,230.955 739.023,231.27 739.591,231.403 740.159,233.623 740.728,232.65 741.296,232.751 741.864,231.845 742.433,233.131 743.001,233.197 743.569,233.037 744.138,230.756 744.706,230.869 745.274,231.875 745.843,231.862 746.411,231.994 746.98,230.886 747.548,232.116 748.116,231.127 748.685,230.188 749.253,231.346 749.821,230.451 750.39,230.499 750.958,230.572 751.526,231.592 752.095,233.417 752.663,233.368 753.231,232.161 753.8,231.191 754.368,230.21 754.936,229.189 755.505,231.566 756.073,232.835 756.641,232.834 757.21,233.747 757.778,235.709 758.346,235.537 758.915,235.301 759.483,233.857 760.052,233.758 760.62,232.698 761.188,230.674 761.757,232.743 762.325,232.66 762.893,231.589 763.462,231.724 764.03,230.892 764.598,231.899 765.167,231.993 765.735,231.868 766.303,232.969 766.872,233.069 767.44,231.963 768.008,233.885 768.577,232.511 769.145,232.514 769.713,233.417 770.282,232.447 770.85,232.486 771.418,231.405 771.987,231.573 772.555,230.533 773.123,231.484 773.692,230.712 774.26,231.768 774.829,231.827 775.397,231.997 775.965,230.004 776.534,226.956 777.102,227.39 777.67,227.562 778.239,226.921 778.807,227.13 779.375,228.667 779.944,229.125 780.512,230.455 781.08,230.483 781.649,228.333 782.217,231.515 782.785,231.589 783.354,232.404 783.922,232.657 784.49,232.466 785.059,233.487 785.627,234.318 786.195,234.145 786.764,234.063 787.332,233.983 787.9,232.928 788.469,232.879 789.037,230.848 789.606,231.807 790.174,232.848 790.742,232.721 791.311,233.666 791.879,232.484 792.447,231.611 793.016,229.571 793.584,227.686 794.152,228.927 794.721,229.225 795.289,229.315 795.857,230.575 796.426,228.468 796.994,226.719 797.562,227.23 798.131,224.524 798.699,222.974 799.267,222.603 799.836,225.374 800.404,226.151 800.972,226.301 801.541,227.561 802.109,228.717 802.678,230.081 803.246,230.344 803.814,230.454 804.383,232.816 804.951,234.975 805.519,231.712 806.088,231.865 806.656,229.794 807.224,229.066 807.793,230.531 808.361,227.505 808.929,229.727 809.498,231.985 810.066,231.095 810.634,232.082 811.203,234.087 811.771,232.917 812.339,233.922 812.908,234.826 813.476,235.523 814.044,234.09 814.613,233.987 815.181,233.834 815.749,232.815 816.318,234.915 816.886,234.775 817.455,235.714 818.023,236.455 818.591,235.139 819.16,233.844 819.728,233.616 820.296,234.653 820.865,233.369 821.433,232.279 822.001,234.271 822.57,233.021 823.138,234.91 823.706,237.703 824.275,238.369 824.843,238.075 825.411,237.535 825.98,238.205 826.548,237.607 827.116,235.959 827.685,234.477 828.253,234.108 828.821,232.944 829.39,231.591 829.958,229.545 830.526,230.627 831.095,228.509 831.663,228.639 832.232,228.729 832.8,227.827 833.368,230.95 833.937,230.868 834.505,230.029 835.073,229.112 835.642,230.169 836.21,232.205 836.778,233.903 837.347,234.707 837.915,236.385 838.483,234.838 839.052,233.422 839.62,232.225 840.188,234.215 840.757,236.102 841.325,235.447 841.893,235.907 842.462,235.353 843.03,232.787 843.598,233.664 844.167,234.45 844.735,233.174 845.304,232.969 845.872,232.596 846.44,233.592 847.009,231.387 847.577,232.258 848.145,230.959 848.714,228.758 849.282,230.733 849.85,231.643 850.419,229.577 850.987,228.456 851.555,229.367 852.124,229.476 852.692,228.452 853.26,228.686 853.829,229.76 854.397,229.877 854.965,229.997 855.534,229.031 856.102,228.099 856.67,228.113 857.239,227.143 857.807,226.057 858.375,225.111 858.944,224.422 859.512,224.133 860.081,224.514 860.649,222.859 861.217,222.477 861.786,223.087 862.354,222.501 862.922,223.212 863.491,221.599 864.059,223.41 864.627,226.047 865.196,226.498 865.764,227.601 866.332,228.01 866.901,226.366 867.469,224.721 868.037,224.315 868.606,224.923 869.174,224.342 869.742,224.698 870.311,227.453 870.879,227.685 871.447,229.118 872.016,230.411 872.584,228.313 873.152,226.579 873.721,227.207 874.289,225.614 874.858,225.152 875.426,224.575 875.994,225.121 876.563,226.77 877.131,229.137 877.699,230.395 878.268,231.736 878.836,230.004 879.404,231.086 879.973,230.37 880.541,230.723 881.109,227.836 881.678,230.184 882.246,230.332 882.814,231.737 883.383,229.922 883.951,232.138 884.519,233.2 885.088,233.301 885.656,234.343 886.224,233.218 886.793,235.295 887.361,234.218 887.93,234.315 888.498,234.305 889.066,235.335 889.635,235.275 890.203,236.082 890.771,236.939 891.34,235.584 891.908,235.386 892.476,236.357 893.045,236.752 893.613,238.499 894.181,238.888 894.75,240.569 895.318,244.066 895.886,244.095 896.455,245.372 897.023,243.421 897.591,241.41 898.16,238.488 898.728,237.723 899.296,236.17 899.865,234.728 900.433,234.419 901.001,233.141 901.57,233.944 902.138,234.881 902.707,232.351 903.275,232.127 903.843,232.839 904.412,232.645 904.98,232.68 905.548,231.445 906.117,231.469 906.685,231.492 907.253,229.525 907.822,229.402 908.39,228.607 908.958,227.654 909.527,227.901 910.095,227.103 910.663,228.434 911.232,229.409 911.8,230.469 912.368,228.42 912.937,227.599 913.505,229.883 914.073,229.9 914.642,232.102 915.21,232.946 915.779,231.817 916.347,231.563 916.915,233.482 917.484,233.094 918.052,233.921 918.62,235.672 919.189,234.362 919.757,232.02 920.325,232.805 920.894,231.46 921.462,232.565 922.03,233.236 922.599,232.897 923.167,233.702 923.735,232.188 924.304,227.822 924.872,226.618 925.44,226.889 926.009,227.256 926.577,227.341 927.145,227.318 927.714,227.709 928.282,225.983 928.85,223.986 929.419,223.386 929.987,223.942 930.556,223.405 931.124,225.906 931.692,223.288 932.261,220.598 932.829,221.182 933.397,221.854 933.966,222.654 934.534,222.003 935.102,221.716 935.671,222.454 936.239,224 936.807,225.332 937.376,224.838 937.944,226.415 938.512,226.986 939.081,227.339 939.649,226.59 940.217,229.941 940.786,228.905 941.354,229.26 941.922,229.616 942.491,232.882 943.059,234.019 943.627,234.623 944.196,236.224 944.764,234.837 945.333,231.515 945.901,230.482 946.469,231.636 947.038,229.504 947.606,227.479 948.174,228.788 948.743,229.291 949.311,229.511 949.879,229.524 950.448,228.719 951.016,229.852 951.584,230.2 952.153,230.339 952.721,231.507 953.289,229.559 953.858,230.795 954.426,230.811 954.994,230.836 955.563,233.144 956.131,231.245 956.699,231.321 957.268,230.566 957.836,229.746 958.405,227.948 958.973,228.402 959.541,226.626 960.11,226.99 960.678,225.452 961.246,225.985 961.815,229.398 962.383,229.705 962.951,230.964 963.52,233.061 964.088,231.027 964.656,230.361 965.225,231.759 965.793,229.831 966.361,228.875 966.93,228.107 967.498,229.586 968.066,229.974 968.635,229.424 969.203,228.647 969.771,228.698 970.34,232.307 970.908,231.552 971.476,230.519 972.045,230.822 972.613,227.753 973.182,229.126 973.75,229.448 974.318,231.784 974.887,232.831 975.455,231.694 976.023,232.666 976.592,232.85 977.16,232.91 977.728,231.84 978.297,231.942 978.865,231.988 979.433,231.942 980.002,230.052 980.57,231.24 981.138,233.402 981.707,233.146 982.275,236.212 982.843,234.845 983.412,235.674 983.98,235.34 984.548,236.019 985.117,234.741 985.685,234.424 986.253,237.317 986.822,237.026 987.39,234.653 987.959,234.307 988.527,233.808 989.095,231.666 989.664,231.556 990.232,229.419 990.8,230.471 991.369,229.436 991.937,231.708 992.505,229.79 993.074,230.014 993.642,232.041 994.21,232.086 994.779,231.882 995.347,231.676 995.915,233.493 996.484,233.474 997.052,233.277 997.62,233.167 998.189,232.804 998.757,233.666 999.325,235.354 999.894,235.095 1000.46,236.09 1001.03,233.723 1001.6,234.587 1002.17,234.592 1002.74,235.444 1003.3,237.117 1003.87,235.496 1004.44,235.226 1005.01,235.083 1005.58,232.772 1006.15,235.565 1006.71,234.887 1007.28,235.643 1007.85,235.381 1008.42,232.001 1008.99,230.604 1009.56,230.742 1010.12,232.781 1010.69,232.437 1011.26,232.376 1011.83,232.077 1012.4,230.846 1012.97,228.643 1013.53,226.837 1014.1,227.974 1014.67,227.749 1015.24,226.841 1015.81,226.765 1016.38,225.936 1016.94,226.376 1017.51,226.476 1018.08,227.724 1018.65,228.701 1019.22,227.946 1019.79,225.305 1020.35,225.712 1020.92,225.049 1021.49,226.337 1022.06,226.648 1022.63,227.083 1023.2,226.434 1023.76,225.756 1024.33,227.009 1024.9,225.468 1025.47,229.963 1026.04,227.139 1026.61,227.275 1027.17,230.609 1027.74,229.565 1028.31,227.696 1028.88,229.885 1029.45,230.814 1030.02,230.691 1030.58,227.626 1031.15,227.752 1031.72,227.927 1032.29,228.101 1032.86,227.397 1033.43,226.385 1033.99,228.964 1034.56,230.53 1035.13,231.516 1035.7,231.518 1036.27,233.704 1036.84,233.332 1037.4,233.307 1037.97,232.373 1038.54,230.107 1039.11,230.179 1039.68,231.212 1040.25,232.195 1040.81,232.121 1041.38,231.034 1041.95,230.063 1042.52,230.273 1043.09,227.338 1043.66,228.43 1044.22,227.622 1044.79,226.773 1045.36,227.926 1045.93,231.271 1046.5,230.292 1047.07,229.277 1047.63,230.349 1048.2,229.557 1048.77,229.768 1049.34,228.986 1049.91,231.407 1050.48,233.351 1051.05,233.129 1051.61,235.206 1052.18,234.938 1052.75,234.522 1053.32,236.189 1053.89,237.953 1054.46,236.306 1055.02,237.079 1055.59,235.698 1056.16,234.373 1056.73,235.094 1057.3,235.948 1057.87,234.455 1058.43,232.184 1059,232.935 1059.57,231.882 1060.14,232.828 1060.71,230.78 1061.28,230.806 1061.84,232.989 1062.41,234.727 1062.98,235.478 1063.55,235.052 1064.12,234.673 1064.69,236.361 1065.25,236.809 1065.82,237.345 1066.39,235.586 1066.96,236.096 1067.53,238.768 1068.1,237.204 1068.66,237.668 1069.23,237.072 1069.8,237.614 1070.37,238.182 1070.94,238.463 1071.51,238.929 1072.07,237.194 1072.64,235.309 1073.21,233.727 1073.78,235.173 1074.35,233.79 1074.92,231.561 1075.48,229.431 1076.05,228.066 1076.62,228.159 1077.19,225.981 1077.76,224.791 1078.33,226.021 1078.89,224.834 1079.46,226.347 1080.03,226.51 1080.6,224.5 1081.17,222.577 1081.74,222.938 1082.3,222.296 1082.87,221.566 1083.44,223.015 1084.01,223.569 1084.58,224.928 1085.15,223.282 1085.71,222.753 1086.28,223.378 1086.85,222.789 1087.42,222.157 1087.99,221.764 1088.56,221.617 1089.12,223.238 1089.69,220.824 1090.26,221.472 1090.83,222.02 1091.4,223.67 1091.97,223.993 1092.53,224.382 1093.1,223.818 1093.67,223.542 1094.24,224.054 1094.81,227.824 1095.38,227.013 1095.94,230.709 1096.51,231.791 1097.08,233.564 1097.65,233.395 1098.22,236.467 1098.79,236.198 1099.35,236.86 1099.92,237.491 1100.49,236.976 1101.06,235.691 1101.63,235.322 1102.2,234.818 1102.76,236.502 1103.33,236.223 1103.9,234.815 1104.47,234.587 1105.04,235.284 1105.61,234.988 1106.17,235.925 1106.74,235.72 1107.31,235.449 1107.88,236.155 1108.45,233.6 1109.02,233.263 1109.58,234.003 1110.15,233.49 1110.72,234.1 1111.29,233.735 1111.86,233.606 1112.43,232.372 1112.99,231.066 1113.56,232.921 1114.13,234.709 1114.7,234.326 1115.27,235.087 1115.84,234.639 1116.4,235.391 1116.97,235.868 1117.54,235.603 1118.11,235.854 1118.68,234.108 1119.25,231.561 1119.81,229.067 1120.38,227.118 1120.95,228.214 1121.52,225.174 1122.09,225.499 1122.66,224.67 1123.23,222.791 1123.79,224.216 1124.36,223.568 1124.93,222.693 1125.5,222.11 1126.07,223.94 1126.64,224.308 1127.2,225.895 1127.77,226.136 1128.34,228.538 1128.91,229.671 1129.48,229.815 1130.05,229.861 1130.61,229.876 1131.18,229.86 1131.75,228.925 1132.32,228.895 1132.89,228.867 1133.46,231.958 1134.02,232.974 1134.59,235.805 1135.16,236.394 1135.73,237.862 1136.3,236.175 1136.87,235.953 1137.43,234.57 1138,232.185 1138.57,232.995 1139.14,232.615 1139.71,232.247 1140.28,230.881 1140.84,229.768 1141.41,229.734 1141.98,229.802 1142.55,228.722 1143.12,228.847 1143.69,225.854 1144.25,225.205 1144.82,226.495 1145.39,226.963 1145.96,226.242 1146.53,225.511 1147.1,226.74 1147.66,226.77 1148.23,224.88 1148.8,226.252 1149.37,228.593 1149.94,226.77 1150.51,227.924 1151.07,229.178 1151.64,230.267 1152.21,230.375 1152.78,231.333 1153.35,230.311 1153.92,231.487 1154.48,230.23 1155.05,230.319 1155.62,229.22 1156.19,229.395 1156.76,228.325 1157.33,229.453 1157.89,229.547 1158.46,229.792 1159.03,228.901 1159.6,229.042 1160.17,227.087 1160.74,228.196 1161.3,228.357 1161.87,228.431 1162.44,228.677 1163.01,226.652 1163.58,226.769 1164.15,229.034 1164.71,229.214 1165.28,230.638 1165.85,231.708 1166.42,230.575 1166.99,231.731 1167.56,231.76 1168.12,232.766 1168.69,232.649 1169.26,232.452 1169.83,232.275 1170.4,231.96 1170.97,232.697 1171.53,232.436 1172.1,233.468 1172.67,235.394 1173.24,234.086 1173.81,233.713 1174.38,233.615 1174.94,233.467 1175.51,233.407 1176.08,231.149 1176.65,230.141 1177.22,230.24 1177.79,231.388 1178.35,231.243 1178.92,229.919 1179.49,231.105 1180.06,228.924 1180.63,230.978 1181.2,229.992 1181.76,229.921 1182.33,229.812 1182.9,229.012 1183.47,229.299 1184.04,228.219 1184.61,230.38 1185.17,230.421 1185.74,231.37 1186.31,232.26 1186.88,233.135 1187.45,233.994 1188.02,233.643 1188.58,231.449 1189.15,231.351 1189.72,231.078 1190.29,230.18 1190.86,228.303 1191.43,229.275 1192,230.285 1192.56,228.15 1193.13,228.298 1193.7,231.665 1194.27,231.718 1194.84,232.622 1195.41,230.4 1195.97,230.399 1196.54,228.371 1197.11,228.354 1197.68,229.379 1198.25,227.621 1198.82,227.675 1199.38,226.784 1199.95,228.04 1200.52,227.169 1201.09,228.564 1201.66,228.779 1202.23,229.024 1202.79,225.02 1203.36,227.521 1203.93,228.609 1204.5,227.676 1205.07,229.053 1205.64,228.242 1206.2,227.484 1206.77,226.78 1207.34,225.949 1207.91,225.195 1208.48,221.462 1209.05,220.056 1209.61,219.895 1210.18,223.742 1210.75,223.277 1211.32,223.019 1211.89,223.509 1212.46,222.099 1213.02,226.054 1213.59,225.359 1214.16,226.013 1214.73,228.519 1215.3,229.815 1215.87,230.101 1216.43,233.368 1217,235.633 1217.57,235.393 1218.14,235.251 1218.71,233.073 1219.28,231.023 1219.84,229.045 1220.41,230.437 1220.98,229.649 1221.55,227.799 1222.12,227.978 1222.69,227.312 1223.25,228.806 1223.82,231.143 1224.39,232.159 1224.96,232.094 1225.53,230.215 1226.1,233.347 1226.66,234.348 1227.23,235.122 1227.8,234.861 1228.37,234.757 1228.94,234.161 1229.51,232.941 1230.07,234.104 1230.64,236.146 1231.21,235.82 1231.78,234.509 1232.35,232.428 1232.92,234.322 1233.48,236.07 1234.05,235.712 1234.62,235.358 1235.19,236.204 1235.76,236.098 1236.33,233.615 1236.89,231.263 1237.46,231.296 1238.03,230.17 1238.6,230.278 1239.17,229.019 1239.74,229.095 1240.3,229.208 1240.87,231.709 1241.44,233.608 1242.01,232.414 1242.58,231.232 1243.15,233.585 1243.71,235.398 1244.28,231.989 1244.85,232.022 1245.42,234.025 1245.99,236.971 1246.56,235.463 1247.12,235.123 1247.69,234.695 1248.26,234.272 1248.83,234.861 1249.4,235.61 1249.97,234.142 1250.53,234.926 1251.1,234.623 1251.67,234.099 1252.24,234.669 1252.81,234.23 1253.38,231.849 1253.94,231.413 1254.51,230.404 1255.08,231.48 1255.65,231.378 1256.22,232.344 1256.79,232.212 1257.35,232.037 1257.92,232.717 1258.49,234.335 1259.06,235.085 1259.63,233.482 1260.2,234.019 1260.76,231.674 1261.33,230.485 1261.9,229.18 1262.47,227.305 1263.04,228.387 1263.61,228.327 1264.18,226 1264.74,225.268 1265.31,224.615 1265.88,225.837 1266.45,228.199 1267.02,230.246 1267.59,229.284 1268.15,229.273 1268.72,228.156 1269.29,228.28 1269.86,228.412 1270.43,227.465 1271,227.639 1271.56,225.825 1272.13,227.174 1272.7,227.638 1273.27,227.682 1273.84,227.899 1274.41,227.115 1274.97,226.361 1275.54,228.556 1276.11,228.606 1276.68,228.444 1277.25,225.465 1277.82,225.643 1278.38,224.855 1278.95,225.13 1279.52,225.516 1280.09,224.957 1280.66,224.178 1281.23,227.641 1281.79,226.114 1282.36,226.445 1282.93,226.823 1283.5,228.204 1284.07,228.436 1284.64,230.615 1285.2,232.714 1285.77,232.543 1286.34,232.436 1286.91,232.159 1287.48,232.068 1288.05,233.961 1288.61,234.612 1289.18,235.447 1289.75,234.301 1290.32,232.978 1290.89,232.673 1291.46,233.369 1292.02,234.167 1292.59,233.898 1293.16,234.842 1293.73,234.521 1294.3,232.405 1294.87,232.064 1295.43,232.932 1296,231.922 1296.57,232.696 1297.14,230.432 1297.71,230.346 1298.28,230.388 1298.84,229.453 1299.41,231.661 1299.98,231.603 1300.55,233.55 1301.12,234.314 1301.69,235.045 1302.25,234.591 1302.82,237.506 1303.39,237.014 1303.96,236.426 1304.53,235.989 1305.1,236.672 1305.66,236.371 1306.23,236.958 1306.8,236.429 1307.37,237.073 1307.94,237.644 1308.51,238.118 1309.07,238.542 1309.64,236.72 1310.21,236.255 1310.78,234.912 1311.35,234.435 1311.92,231.828 1312.48,231.754 1313.05,232.646 1313.62,230.237 1314.19,230.098 1314.76,229.105 1315.33,230.177 1315.89,231.014 1316.46,229.875 1317.03,228.814 1317.6,229.799 1318.17,230.007 1318.74,230.897 1319.3,230.73 1319.87,230.596 1320.44,228.448 1321.01,226.427 1321.58,225.714 1322.15,226.816 1322.71,229.187 1323.28,231.124 1323.85,231.099 1324.42,229.843 1324.99,230 1325.56,229.005 1326.12,231.056 1326.69,230.778 1327.26,232.406 1327.83,229.899 1328.4,229.932 1328.97,230.952 1329.53,230.484 1330.1,229.477 1330.67,228.41 1331.24,228.279 1331.81,225.216 1332.38,226.458 1332.94,224.704 1333.51,225.008 1334.08,225.497 1334.65,224.807 1335.22,225.921 1335.79,228.387 1336.36,228.431 1336.92,230.633 1337.49,231.648 1338.06,232.362 1338.63,234.499 1339.2,232.83 1339.77,231.444 1340.33,232.387 1340.9,230.989 1341.47,230.923 1342.04,229.873 1342.61,230.779 1343.18,230.646 1343.74,231.427 1344.31,230.148 1344.88,230.325 1345.45,232.437 1346.02,232.274 1346.59,231.053 1347.15,230.766 1347.72,230.752 1348.29,231.604 1348.86,231.293 1349.43,231.413 1350,230.093 1350.56,230.189 1351.13,228.988 1351.7,227.995 1352.27,229.857 1352.84,231.02 1353.41,229.857 1353.97,228.778 1354.54,231.015 1355.11,228.707 1355.68,228.499 1356.25,228.603 1356.82,229.789 1357.38,228.868 1357.95,225.718 1358.52,223.848 1359.09,224.38 1359.66,224.651 1360.23,225.172 1360.79,225.589 1361.36,225.795 1361.93,224.873 1362.5,225.942 1363.07,225.222 1363.64,225.644 1364.2,226.032 1364.77,226.471 1365.34,227.648 1365.91,227.713 1366.48,230.149 1367.05,228.188 1367.61,229.489 1368.18,230.808 1368.75,230.918 1369.32,231.939 1369.89,231.871 1370.46,231.922 1371.02,230.871 1371.59,230.789 1372.16,232.562 1372.73,232.344 1373.3,234.24 1373.87,236.045 1374.43,236.724 1375,235.106 1375.57,235.958 1376.14,235.541 1376.71,234.208 1377.28,233.692 1377.84,233.374 1378.41,232.07 1378.98,231.954 1379.55,231.955 1380.12,232.772 1380.69,232.553 1381.25,231.287 1381.82,231.31 1382.39,233.147 1382.96,233.873 1383.53,231.346 1384.1,229.17 1384.66,228.905 1385.23,226.961 1385.8,227.199 1386.37,225.087 1386.94,225.287 1387.51,224.654 1388.07,223.849 1388.64,223.351 1389.21,222.785 1389.78,220.863 1390.35,221.439 1390.92,220.957 1391.48,222.773 1392.05,223.307 1392.62,225.604 1393.19,228.241 1393.76,228.348 1394.33,227.644 1394.89,226.819 1395.46,230.137 1396.03,230.382 1396.6,229.475 1397.17,230.824 1397.74,230.767 1398.3,228.645 1398.87,228.925 1399.44,229.029 1400.01,229.339 1400.58,228.406 1401.15,229.706 1401.71,230.745 1402.28,233.017 1402.85,232.838 1403.42,232.224 1403.99,231.29 1404.56,230.175 1405.13,229.121 1405.69,227.325 1406.26,228.397 1406.83,228.561 1407.4,229.794 1407.97,228.873 1408.54,230.004 1409.1,229.881 1409.67,229.952 1410.24,226.97 1410.81,228.152 1411.38,226.352 1411.95,224.552 1412.51,226.145 1413.08,224.617 1413.65,225.98 1414.22,226.623 1414.79,228.041 1415.36,230.401 1415.92,232.54 1416.49,234.453 1417.06,234.108 1417.63,232.696 1418.2,232.521 1418.77,233.332 1419.33,234.252 1419.9,234.087 1420.47,234.87 1421.04,233.338 1421.61,236.322 1422.18,234.958 1422.74,234.693 1423.31,235.377 1423.88,231.97 1424.45,230.86 1425.02,230.803 1425.59,228.661 1426.15,226.855 1426.72,225.141 1427.29,223.727 1427.86,225.211 1428.43,225.407 1429,225.771 1429.56,225.041 1430.13,225.612 1430.7,227.049 1431.27,228.467 1431.84,228.692 1432.41,229.923 1432.97,232.186 1433.54,234.018 1434.11,234.755 1434.68,235.717 1435.25,235.445 1435.82,237.117 1436.38,236.585 1436.95,237.299 1437.52,238.057 1438.09,236.619 1438.66,236.198 1439.23,236.711 1439.79,235.463 1440.36,235.222 1440.93,238.653 1441.5,239.047 1442.07,237.314 1442.64,236.048 1443.2,235.436 1443.77,235.156 1444.34,234.47 1444.91,234.076 1445.48,233.732 1446.05,234.639 1446.61,234.297 1447.18,232.942 1447.75,232.734 1448.32,233.612 1448.89,234.484 1449.46,235.163 1450.02,236.014 1450.59,235.588 1451.16,233.433 1451.73,233.196 1452.3,232.91 1452.87,231.664 1453.43,231.522 1454,231.229 1454.57,231.185 1455.14,231.155 1455.71,229.883 1456.28,230.972 1456.84,229.776 1457.41,226.779 1457.98,226.917 1458.55,231.096 1459.12,230.942 1459.69,230.736 1460.25,229.609 1460.82,229.481 1461.39,226.451 1461.96,226.701 1462.53,226.703 1463.1,226.774 1463.66,225.067 1464.23,225.286 1464.8,225.506 1465.37,226.805 1465.94,227.792 1466.51,228.027 1467.07,227.993 1467.64,228.989 1468.21,229.135 1468.78,228.131 1469.35,227.196 1469.92,227.523 1470.48,226.582 1471.05,225.944 1471.62,226.455 1472.19,227.359 1472.76,227.569 1473.33,227.587 1473.89,232.071 1474.46,232.792 1475.03,234.783 1475.6,230.304 1476.17,230.182 1476.74,228.136 1477.31,228.535 1477.87,226.845 1478.44,226.009 1479.01,227.394 1479.58,227.469 1480.15,226.79 1480.72,226.799 1481.28,228.038 1481.85,228.242 1482.42,229.293 1482.99,230.876 1483.56,230.83 1484.13,228.718 1484.69,228.695 1485.26,226.598 1485.83,225.849 1486.4,230.294 1486.97,228.453 1487.54,229.774 1488.1,229.814 1488.67,230.021 1489.24,229.087 1489.81,231.394 1490.38,233.474 1490.95,233.406 1491.51,233.198 1492.08,231.072 1492.65,230.087 1493.22,230.271 1493.79,230.229 1494.36,228.185 1494.92,225.177 1495.49,225.653 1496.06,223.87 1496.63,225.431 1497.2,225.872 1497.77,227.469 1498.33,229.707 1498.9,230.888 1499.47,232.003 1500.04,230.887 1500.61,231.7 1501.18,231.622 1501.74,231.584 1502.31,230.325 1502.88,230.489 1503.45,229.6 1504.02,229.646 1504.59,230.76 1505.15,232.842 1505.72,233.719 1506.29,231.396 1506.86,228.324 1507.43,227.392 1508,227.742 1508.56,229.957 1509.13,226.856 1509.7,226.881 1510.27,225.067 1510.84,225.253 1511.41,228.914 1511.97,228.006 1512.54,228.154 1513.11,228.209 1513.68,228.335 1514.25,228.42 1514.82,230.786 1515.38,230.852 1515.95,234.038 1516.52,233.879 1517.09,234.62 1517.66,233.345 1518.23,232.119 1518.79,231.895 1519.36,234.848 1519.93,235.739 1520.5,236.347 1521.07,235.845 1521.64,235.45 1522.2,233.949 1522.77,233.993 1523.34,237.97 1523.91,235.283 1524.48,234.78 1525.05,232.12 1525.61,233.072 1526.18,233.872 1526.75,232.623 1527.32,231.416 1527.89,235.469 1528.46,234.881 1529.02,234.39 1529.59,234.291 1530.16,234.985 1530.73,234.686 1531.3,235.363 1531.87,234.973 1532.43,236.561 1533,236.085 1533.57,233.602 1534.14,232.198 1534.71,232.177 1535.28,232.121 1535.84,233.112 1536.41,232.606 1536.98,232.446 1537.55,233.137 1538.12,231.902 1538.69,233.956 1539.25,234.661 1539.82,236.187 1540.39,235.497 1540.96,230.99 1541.53,229.764 1542.1,229.709 1542.66,227.48 1543.23,228.422 1543.8,226.445 1544.37,227.509 1544.94,227.729 1545.51,227.813 1546.08,229.099 1546.64,228.214 1547.21,229.409 1547.78,228.273 1548.35,228.236 1548.92,227.583 1549.49,225.789 1550.05,228.122 1550.62,227.151 1551.19,229.308 1551.76,228.23 1552.33,229.426 1552.9,230.366 1553.46,229.407 1554.03,228.545 1554.6,228.629 1555.17,228.939 1555.74,228.058 1556.31,228.228 1556.87,228.517 1557.44,228.65 1558.01,229.594 1558.58,230.554 1559.15,229.616 1559.72,230.6 1560.28,229.401 1560.85,230.449 1561.42,229.314 1561.99,229.46 1562.56,231.512 1563.13,231.484 1563.69,232.351 1564.26,234.239 1564.83,231.824 1565.4,230.739 1565.97,230.565 1566.54,231.601 1567.1,231.623 1567.67,232.657 1568.24,232.259 1568.81,233.194 1569.38,232.1 1569.95,233.185 1570.51,232.1 1571.08,231.836 1571.65,232.707 1572.22,232.589 1572.79,231.057 1573.36,230.851 1573.92,233.78 1574.49,233.401 1575.06,234.232 1575.63,233.852 1576.2,232.284 1576.77,232.307 1577.33,232.925 1577.9,231.736 1578.47,229.444 1579.04,230.571 1579.61,230.608 1580.18,232.557 1580.74,230.406 1581.31,228.397 1581.88,228.47 1582.45,228.577 1583.02,227.597 1583.59,229.024 1584.15,228.161 1584.72,228.312 1585.29,226.217 1585.86,225.428 1586.43,225.544 1587,227.041 1587.56,229.263 1588.13,229.287 1588.7,228.254 1589.27,228.48 1589.84,229.551 1590.41,227.569 1590.97,226.704 1591.54,227.001 1592.11,225.898 1592.68,226.345 1593.25,225.563 1593.82,224.935 1594.38,225.367 1594.95,226.953 1595.52,230.436 1596.09,231.432 1596.66,229.505 1597.23,229.829 1597.79,229.887 1598.36,231.155 1598.93,228.915 1599.5,230.237 1600.07,229.312 1600.64,231.438 1601.2,230.301 1601.77,229.081 1602.34,229.327 1602.91,229.221 1603.48,228.36 1604.05,229.45 1604.61,229.435 1605.18,229.606 1605.75,231.817 1606.32,231.608 1606.89,231.708 1607.46,231.674 1608.02,231.507 1608.59,229.615 1609.16,228.439 1609.73,228.759 1610.3,229.986 1610.87,233.149 1611.43,231.947 1612,231.65 1612.57,229.647 1613.14,228.664 1613.71,228.759 1614.28,230.924 1614.84,229.868 1615.41,229.708 1615.98,229.639 1616.55,229.717 1617.12,229.708 1617.69,231.705 1618.26,230.975 1618.82,230.787 1619.39,230.617 1619.96,232.594 1620.53,233.495 1621.1,233.155 1621.67,231.876 1622.23,233.896 1622.8,234.638 1623.37,232.351 1623.94,232.188 1624.51,230.196 1625.08,230.168 1625.64,230.21 1626.21,231.271 1626.78,231.34 1627.35,229.075 1627.92,227.991 1628.49,227.403 1629.05,226.681 1629.62,226.867 1630.19,227.049 1630.76,227.322 1631.33,229.551 1631.9,226.624 1632.46,228.008 1633.03,225.284 1633.6,225.692 1634.17,228.119 1634.74,229.233 1635.31,227.417 1635.87,226.618 1636.44,228.149 1637.01,229.352 1637.58,226.35 1638.15,226.71 1638.72,227.07 1639.28,227.38 1639.85,225.692 1640.42,226.077 1640.99,229.651 1641.56,230.911 1642.13,229.748 1642.69,229.767 1643.26,228.803 1643.83,226.775 1644.4,229.136 1644.97,228.382 1645.54,229.78 1646.1,230.08 1646.67,231.408 1647.24,230.371 1647.81,229.516 1648.38,227.642 1648.95,228.983 1649.51,231.436 1650.08,231.408 1650.65,232.542 1651.22,231.406 1651.79,231.506 1652.36,231.381 1652.92,231.38 1653.49,235.68 1654.06,236.59 1654.63,235.14 1655.2,234.802 1655.77,232.524 1656.33,234.453 1656.9,234.199 1657.47,233.966 1658.04,233.576 1658.61,233.361 1659.18,231.027 1659.74,230.04 1660.31,228.665 1660.88,227.957 1661.45,228.162 1662.02,229.421 1662.59,230.451 1663.15,232.564 1663.72,232.442 1664.29,231.277 1664.86,226.206 1665.43,226.493 1666,229.017 1666.56,228.291 1667.13,226.465 1667.7,230.098 1668.27,230.223 1668.84,231.203 1669.41,231.015 1669.97,230.984 1670.54,230.08 1671.11,228.139 1671.68,226.138 1672.25,230.697 1672.82,230.714 1673.38,229.793 1673.95,229.808 1674.52,228.889 1675.09,226.072 1675.66,227.256 1676.23,230.546 1676.79,230.37 1677.36,232.287 1677.93,233.131 1678.5,234.036 1679.07,234.734 1679.64,233.296 1680.2,233.193 1680.77,231.908 1681.34,231.889 1681.91,230.798 1682.48,230.679 1683.05,233.954 1683.61,231.771 1684.18,231.424 1684.75,230.308 1685.32,231.34 1685.89,232.328 1686.46,231.643 1687.02,229.382 1687.59,229.378 1688.16,229.397 1688.73,229.575 1689.3,230.789 1689.87,229.76 1690.44,226.616 1691,224.659 1691.57,226.158 1692.14,225.54 1692.71,226.982 1693.28,227.238 1693.85,226.409 1694.41,227.849 1694.98,227.174 1695.55,224.368 1696.12,225.854 1696.69,226.243 1697.26,228.782 1697.82,230.066 1698.39,231.187 1698.96,231.265 1699.53,232.326 1700.1,232.156 1700.67,231.213 1701.23,229.086 1701.8,231.105 1702.37,233.403 1702.94,234.324 1703.51,235.22 1704.08,233.884 1704.64,233.861 1705.21,235.639 1705.78,238.311 1706.35,237.77 1706.92,236.119 1707.49,235.775 1708.05,235.798 1708.62,234.538 1709.19,237.397 1709.76,237.174 1710.33,237.645 1710.9,238.317 1711.46,236.427 1712.03,235.637 1712.6,235.346 1713.17,234.981 1713.74,235.65 1714.31,234.997 1714.87,234.455 1715.44,233.817 1716.01,233.289 1716.58,233.045 1717.15,231.939 1717.72,232.843 1718.28,232.615 1718.85,232.26 1719.42,231.006 1719.99,229.603 1720.56,229.537 1721.13,230.482 1721.69,230.431 1722.26,231.17 1722.83,230.057 1723.4,230.179 1723.97,229.936 1724.54,229.746 1725.1,228.781 1725.67,227.933 1726.24,229.174 1726.81,230.206 1727.38,231.138 1727.95,230.923 1728.51,229.894 1729.08,228.72 1729.65,227.712 1730.22,228.9 1730.79,227.842 1731.36,228.866 1731.92,227.657 1732.49,225.604 1733.06,225.671 1733.63,226.111 1734.2,227.294 1734.77,226.522 1735.33,225.906 1735.9,226.027 1736.47,226.062 1737.04,225.431 1737.61,225.661 1738.18,225.239 1738.74,224.549 1739.31,227.096 1739.88,228.516 1740.45,230.921 1741.02,227.9 1741.59,229.062 1742.15,226.111 1742.72,225.349 1743.29,225.925 1743.86,223.307 1744.43,224.783 1745,223.453 1745.56,222.718 1746.13,222.525 1746.7,221.851 1747.27,221.513 1747.84,224.247 1748.41,228.922 1748.97,230.149 1749.54,229.061 1750.11,229.228 1750.68,230.323 1751.25,229.655 1751.82,230.974 1752.38,231.082 1752.95,233.152 1753.52,234.233 1754.09,233.032 1754.66,232.949 1755.23,231.838 1755.79,232.879 1756.36,234.704 1756.93,234.607 1757.5,234.441 1758.07,234.14 1758.64,233.899 1759.21,233.414 1759.77,235.338 1760.34,235.159 1760.91,235.927 1761.48,235.428 1762.05,234.984 1762.62,236.76 1763.18,237.318 1763.75,233.991 1764.32,235.708 1764.89,235.215 1765.46,234.818 1766.03,233.354 1766.59,233.414 1767.16,233.281 1767.73,230.959 1768.3,231.023 1768.87,230.773 1769.44,229.539 1770,229.577 1770.57,230.727 1771.14,229.576 1771.71,229.556 1772.28,232.671 1772.85,232.84 1773.41,231.786 1773.98,230.654 1774.55,229.386 1775.12,230.608 1775.69,229.403 1776.26,230.689 1776.82,229.851 1777.39,230.857 1777.96,232.869 1778.53,230.705 1779.1,230.711 1779.67,229.75 1780.23,229.595 1780.8,228.436 1781.37,228.628 1781.94,230.831 1782.51,229.817 1783.08,228.942 1783.64,228.727 1784.21,226.915 1784.78,225.987 1785.35,228.319 1785.92,227.428 1786.49,228.59 1787.05,231.518 1787.62,230.294 1788.19,230.337 1788.76,228.39 1789.33,225.529 1789.9,224.926 1790.46,227.285 1791.03,226.558 1791.6,225.018 1792.17,225.486 1792.74,225.722 1793.31,226.103 1793.87,226.349 1794.44,226.696 1795.01,227.04 1795.58,226.315 1796.15,228.804 1796.72,228.917 1797.28,231.877 1797.85,233.771 1798.42,235.703 1798.99,233.449 1799.56,233.146 1800.13,233.107 1800.69,233.711 1801.26,233.529 1801.83,234.219 1802.4,231.92 1802.97,232.917 1803.54,233.812 1804.1,232.576 1804.67,234.336 1805.24,233.86 1805.81,234.565 1806.38,234.167 1806.95,233.821 1807.51,234.525 1808.08,232.074 1808.65,227.996 1809.22,227.355 1809.79,227.408 1810.36,227.618 1810.92,226.721 1811.49,226.167 1812.06,227.513 1812.63,228.702 1813.2,228.909 1813.77,229.339 1814.33,230.718 1814.9,229.747 1815.47,229.403 1816.04,229.5 1816.61,230.727 1817.18,230.856 1817.74,230.769 1818.31,230.761 1818.88,231.55 1819.45,231.742 1820.02,230.527 1820.59,229.444 1821.15,230.64 1821.72,232.636 1822.29,230.599 1822.86,229.495 1823.43,228.646 1824,228.631 1824.56,229.729 1825.13,229.797 1825.7,230.725 1826.27,229.672 1826.84,230.647 1827.41,232.609 1827.97,232.333 1828.54,232.271 1829.11,230.285 1829.68,229.224 1830.25,229.482 1830.82,228.618 1831.39,232.837 1831.95,231.724 1832.52,231.726 1833.09,236.871 1833.66,236.301 1834.23,236.791 1834.8,239.585 1835.36,237.949 1835.93,237.421 1836.5,234.848 1837.07,232.426 1837.64,232.157 1838.21,232.053 1838.77,231.967 1839.34,234.749 1839.91,234.475 1840.48,231.916 1841.05,231.428 1841.62,231.135 1842.18,231.033 1842.75,230.863 1843.32,231.763 1843.89,230.416 1844.46,227.268 1845.03,227.513 1845.59,228.716 1846.16,227.746 1846.73,226.945 1847.3,225.954 1847.87,224.223 1848.44,224.623 1849,225.051 1849.57,227.547 1850.14,227.448 1850.71,226.474 1851.28,228.664 1851.85,230.599 1852.41,230.682 1852.98,232.528 1853.55,233.205 1854.12,233.009 1854.69,233.74 1855.26,233.366 1855.82,233.947 1856.39,234.67 1856.96,234.463 1857.53,234.054 1858.1,234.866 1858.67,233.533 1859.23,234.204 1859.8,232.671 1860.37,234.364 1860.94,231.944 1861.51,230.779 1862.08,231.83 1862.64,230.582 1863.21,229.431 1863.78,228.38 1864.35,230.403 1864.92,231.319 1865.49,231.24 1866.05,232.049 1866.62,233.048 1867.19,232.924 1867.76,232.641 1868.33,232.33 1868.9,232.11 1869.46,231.926 1870.03,231.84 1870.6,232.648 1871.17,233.439 1871.74,233.057 1872.31,232.894 1872.87,231.652 1873.44,230.422 1874.01,228.255 1874.58,229.249 1875.15,228.248 1875.72,227.314 1876.28,226.545 1876.85,225.801 1877.42,226.364 1877.99,226.248 1878.56,226.406 1879.13,225.557 1879.69,225.873 1880.26,228.32 1880.83,228.434 1881.4,227.252 1881.97,228.276 1882.54,228.266 1883.1,228.421 1883.67,227.644 1884.24,227.761 1884.81,228.015 1885.38,226.187 1885.95,228.343 1886.51,226.16 1887.08,226.469 1887.65,226.669 1888.22,225.001 1888.79,225.625 1889.36,227.044 1889.92,225.023 1890.49,226.604 1891.06,228.744 1891.63,227.953 1892.2,228.077 1892.77,227.426 1893.33,224.528 1893.9,226.843 1894.47,227.251 1895.04,228.573 1895.61,228.69 1896.18,231.971 1896.74,233.828 1897.31,234.4 1897.88,235.232 1898.45,233.764 1899.02,232.735 1899.59,231.554 1900.16,228.378 1900.72,230.437 1901.29,228.484 1901.86,231.905 1902.43,231.852 1903,232.748 1903.57,232.589 1904.13,233.542 1904.7,232.138 1905.27,231.107 1905.84,231.92 1906.41,230.801 1906.98,231.749 1907.54,231.778 1908.11,233.779 1908.68,232.523 1909.25,233.178 1909.82,234.135 1910.39,230.935 1910.95,230.857 1911.52,230.783 1912.09,232.679 1912.66,232.854 1913.23,232.711 1913.8,231.415 1914.36,230.223 1914.93,229.167 1915.5,229.278 1916.07,230.349 1916.64,230.122 1917.21,234.163 1917.77,233.977 1918.34,233.793 1918.91,231.325 1919.48,230.051 1920.05,229.021 1920.62,228.067 1921.18,225.985 1921.75,228.244 1922.32,227.385 1922.89,225.51 1923.46,225.87 1924.03,227.28 1924.59,227.292 1925.16,228.725 1925.73,228.017 1926.3,229.308 1926.87,227.426 1927.44,227.391 1928,227.637 1928.57,226.855 1929.14,224.975 1929.71,224.436 1930.28,222.716 1930.85,223.48 1931.41,222.804 1931.98,223.291 1932.55,223.673 1933.12,221.184 1933.69,222.96 1934.26,224.621 1934.82,225.319 1935.39,224.727 1935.96,226.254 1936.53,226.532 1937.1,228.025 1937.67,228.21 1938.23,227.229 1938.8,227.497 1939.37,224.922 1939.94,225.44 1940.51,226.983 1941.08,228.736 1941.64,229.81 1942.21,231.967 1942.78,231.016 1943.35,229.989 1943.92,226.898 1944.49,227.365 1945.05,228.668 1945.62,229.052 1946.19,229.341 1946.76,228.631 1947.33,229.926 1947.9,230.207 1948.46,231.414 1949.03,230.299 1949.6,230.668 1950.17,231.801 1950.74,230.928 1951.31,232.129 1951.87,229.145 1952.44,229.351 1953.01,230.565 1953.58,227.541 1954.15,228.007 1954.72,227.182 1955.28,228.593 1955.85,227.817 1956.42,228.117 1956.99,228.483 1957.56,230.737 1958.13,230.815 1958.69,229.96 1959.26,230.944 1959.83,231.108 1960.4,231.021 1960.97,232.179 1961.54,233.309 1962.1,234.117 1962.67,233.914 1963.24,233.823 1963.81,235.089 1964.38,232.844 1964.95,230.592 1965.51,231.491 1966.08,232.593 1966.65,232.68 1967.22,232.761 1967.79,231.608 1968.36,230.605 1968.92,232.043 1969.49,231.989 1970.06,231.063 1970.63,228.257 1971.2,228.606 1971.77,226.942 1972.34,232.641 1972.9,234.824 1973.47,234.433 1974.04,232.186 1974.61,234.039 1975.18,231.842 1975.75,233.99 1976.31,234.924 1976.88,230.531 1977.45,229.544 1978.02,227.556 1978.59,232.913 1979.16,231.893 1979.72,231.942 1980.29,232.073 1980.86,232.077 1981.43,232.042 1982,233.001 1982.57,235.975 1983.13,239.804 1983.7,238.335 1984.27,237.972 1984.84,235.578 1985.41,236.22 1985.98,234.569 1986.54,234.169 1987.11,237.233 1987.68,236.754 1988.25,234.364 1988.82,232.284 1989.39,230.053 1989.95,230.771 1990.52,229.846 1991.09,229.86 1991.66,230.965 1992.23,230.785 1992.8,230.961 1993.36,229.777 1993.93,230.756 1994.5,231.735 1995.07,229.769 1995.64,229.695 1996.21,229.873 1996.77,229.095 1997.34,232.066 1997.91,230.868 1998.48,229.759 1999.05,229.698 1999.62,229.736 2000.18,227.8 2000.75,228.28 2001.32,229.624 2001.89,230.875 2002.46,230.822 2003.03,230.783 2003.59,232.853 2004.16,232.733 2004.73,232.792 2005.3,231.505 2005.87,232.395 2006.44,231.048 2007,233.148 2007.57,233.057 2008.14,235.06 2008.71,235.639 2009.28,235.1 2009.85,234.749 2010.41,233.382 2010.98,233.208 2011.55,233.994 2012.12,236.817 2012.69,236.174 2013.26,234.561 2013.82,237.153 2014.39,234.424 2014.96,233.886 2015.53,231.339 2016.1,229.229 2016.67,228.181 2017.23,229.277 2017.8,231.525 2018.37,232.497 2018.94,232.536 2019.51,231.403 2020.08,232.114 2020.64,230.042 2021.21,230.082 2021.78,229.926 2022.35,231.804 2022.92,231.621 2023.49,228.253 2024.05,226.165 2024.62,225.528 2025.19,223.634 2025.76,225.078 2026.33,226.382 2026.9,227.755 2027.46,227.989 2028.03,226.342 2028.6,226.554 2029.17,226.534 2029.74,226.632 2030.31,225.853 2030.87,224.188 2031.44,227.884 2032.01,229.144 2032.58,229.281 2033.15,230.254 2033.72,229.353 2034.28,229.496 2034.85,230.406 2035.42,230.734 2035.99,230.439 2036.56,230.514 2037.13,230.414 2037.69,233.433 2038.26,234.197 2038.83,234.993 2039.4,233.289 2039.97,231.85 2040.54,231.913 2041.11,233.095 2041.67,232.87 2042.24,233.735 2042.81,233.479 2043.38,234.238 2043.95,232.899 2044.52,234.975 2045.08,234.566 2045.65,235.117 2046.22,233.587 2046.79,234.469 2047.36,233.997 2047.93,231.523 2048.49,231.362 2049.06,229.137 2049.63,228.101 2050.2,227.274 2050.77,230.444 2051.34,231.421 2051.9,231.449 2052.47,231.578 2053.04,233.536 2053.61,232.37 2054.18,231.076 2054.75,230.127 2055.31,230.122 2055.88,232.157 2056.45,232.013 2057.02,234.874 2057.59,233.399 2058.16,232.323 2058.72,233.241 2059.29,234.156 2059.86,233.88 2060.43,231.585 2061,230.136 2061.57,231.098 2062.13,232.256 2062.7,232.129 2063.27,227.845 2063.84,227.984 2064.41,226.241 2064.98,226.369 2065.54,225.619 2066.11,225.743 2066.68,226.927 2067.25,227.142 2067.82,226.383 2068.39,224.684 2068.95,225.064 2069.52,224.402 2070.09,225.778 2070.66,226.392 2071.23,225.725 2071.8,227.21 2072.36,231.895 2072.93,230.888 2073.5,229.887 2074.07,231.034 2074.64,232.931 2075.21,231.619 2075.77,233.628 2076.34,234.534 2076.91,237.115 2077.48,234.495 2078.05,237.161 2078.62,236.513 2079.18,234.928 2079.75,235.631 2080.32,235.042 2080.89,235.779 2081.46,234.329 2082.03,233.971 2082.59,231.695 2083.16,231.466 2083.73,232.245 2084.3,232.21 2084.87,230.883 2085.44,227.533 2086,227.464 2086.57,227.553 2087.14,227.78 2087.71,226.638 2088.28,226.82 2088.85,227.923 2089.41,227.941 2089.98,228.88 2090.55,228.867 2091.12,230.912 2091.69,232.932 2092.26,233.675 2092.82,237.508 2093.39,236.012 2093.96,233.5 2094.53,233.062 2095.1,230.773 2095.67,229.42 2096.23,228.731 2096.8,228.863 2097.37,228.95 2097.94,228.88 2098.51,226.922 2099.08,225.061 2099.64,223.345 2100.21,224.696 2100.78,225.08 2101.35,225.257 2101.92,225.532 2102.49,227.899 2103.05,226.758 2103.62,224.916 2104.19,225.35 2104.76,226.665 2105.33,225.816 2105.9,226.279 2106.46,225.726 2107.03,228.108 2107.6,230.305 2108.17,230.445 2108.74,230.404 2109.31,228.248 2109.87,229.417 2110.44,228.377 2111.01,227.523 2111.58,225.757 2112.15,226.892 2112.72,228.201 2113.29,228.311 2113.85,226.244 2114.42,226.607 2114.99,226.93 2115.56,228.503 2116.13,229.653 2116.7,227.55 2117.26,225.685 2117.83,227.072 2118.4,226.459 2118.97,226.9 2119.54,231.36 2120.11,232.358 2120.67,233.385 2121.24,234.281 2121.81,235.14 2122.38,233.842 2122.95,232.624 2123.52,232.602 2124.08,232.545 2124.65,234.33 2125.22,233.081 2125.79,232.016 2126.36,232.918 2126.93,233.829 2127.49,233.443 2128.06,234.25 2128.63,235.215 2129.2,237.111 2129.77,235.424 2130.34,234.068 2130.9,233.793 2131.47,234.368 2132.04,235.032 2132.61,235.708 2133.18,236.445 2133.75,236.947 2134.31,235.422 2134.88,233.901 2135.45,233.57 2136.02,230.193 2136.59,230.052 2137.16,228.975 2137.72,227.954 2138.29,228.016 2138.86,227.947 2139.43,227.975 2140,227.062 2140.57,227.198 2141.13,229.429 2141.7,231.662 2142.27,230.5 2142.84,231.69 2143.41,231.484 2143.98,233.189 2144.54,232.764 2145.11,230.613 2145.68,232.307 2146.25,232.726 2146.82,232.583 2147.39,231.299 2147.95,232.468 2148.52,231.295 2149.09,231.247 2149.66,232.183 2150.23,234.295 2150.8,232.768 2151.36,233.629 2151.93,234.257 2152.5,233.895 2153.07,234.59 2153.64,233.053 2154.21,233.7 2154.77,232.263 2155.34,231.999 2155.91,230.626 2156.48,230.618 2157.05,228.377 2157.62,229.285 2158.18,228.018 2158.75,228.067 2159.32,227.34 2159.89,225.466 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip670)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.019 ± 0.021\n  with uncertainty of ± 0.0013305446576126088\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01788 ± (0.00176281, 0.00168286) (MC)\n  95% confidence interval: [-4.02111, -4.01443] (MC)\n  linear error propagation: -4.01786 ± 0.00175786\n  |δ_y| = |0.00121195| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01788237861655, val_l = 0.003223064624229721, val_u = 0.0034486635286317124)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip700\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip700)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip701\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip700)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip702\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1139.39 2211.02,1139.39 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,963.29 2211.02,963.29 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,787.186 2211.02,787.186 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,611.082 2211.02,611.082 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,434.978 2211.02,434.978 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,258.874 2211.02,258.874 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1139.39 365.751,1139.39 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,963.29 365.751,963.29 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,787.186 365.751,787.186 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,611.082 365.751,611.082 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,434.978 365.751,434.978 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,258.874 365.751,258.874 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M298.909 1125.19 Q295.298 1125.19 293.469 1128.76 Q291.664 1132.3 291.664 1139.43 Q291.664 1146.53 293.469 1150.1 Q295.298 1153.64 298.909 1153.64 Q302.543 1153.64 304.349 1150.1 Q306.177 1146.53 306.177 1139.43 Q306.177 1132.3 304.349 1128.76 Q302.543 1125.19 298.909 1125.19 M298.909 1121.49 Q304.719 1121.49 307.775 1126.1 Q310.853 1130.68 310.853 1139.43 Q310.853 1148.16 307.775 1152.76 Q304.719 1157.34 298.909 1157.34 Q293.099 1157.34 290.02 1152.76 Q286.964 1148.16 286.964 1139.43 Q286.964 1130.68 290.02 1126.1 Q293.099 1121.49 298.909 1121.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M259.557 976.635 L267.196 976.635 L267.196 950.269 L258.886 951.936 L258.886 947.676 L267.15 946.01 L271.826 946.01 L271.826 976.635 L279.465 976.635 L279.465 980.57 L259.557 980.57 L259.557 976.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 949.089 Q295.298 949.089 293.469 952.653 Q291.664 956.195 291.664 963.325 Q291.664 970.431 293.469 973.996 Q295.298 977.537 298.909 977.537 Q302.543 977.537 304.349 973.996 Q306.177 970.431 306.177 963.325 Q306.177 956.195 304.349 952.653 Q302.543 949.089 298.909 949.089 M298.909 945.385 Q304.719 945.385 307.775 949.991 Q310.853 954.575 310.853 963.325 Q310.853 972.051 307.775 976.658 Q304.719 981.241 298.909 981.241 Q293.099 981.241 290.02 976.658 Q286.964 972.051 286.964 963.325 Q286.964 954.575 290.02 949.991 Q293.099 945.385 298.909 945.385 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M262.775 800.531 L279.094 800.531 L279.094 804.466 L257.15 804.466 L257.15 800.531 Q259.812 797.776 264.395 793.147 Q269.002 788.494 270.182 787.151 Q272.428 784.628 273.307 782.892 Q274.21 781.133 274.21 779.443 Q274.21 776.688 272.266 774.952 Q270.344 773.216 267.242 773.216 Q265.043 773.216 262.59 773.98 Q260.159 774.744 257.381 776.295 L257.381 771.573 Q260.205 770.438 262.659 769.86 Q265.113 769.281 267.15 769.281 Q272.52 769.281 275.715 771.966 Q278.909 774.651 278.909 779.142 Q278.909 781.272 278.099 783.193 Q277.312 785.091 275.205 787.684 Q274.627 788.355 271.525 791.573 Q268.423 794.767 262.775 800.531 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 772.985 Q295.298 772.985 293.469 776.549 Q291.664 780.091 291.664 787.221 Q291.664 794.327 293.469 797.892 Q295.298 801.434 298.909 801.434 Q302.543 801.434 304.349 797.892 Q306.177 794.327 306.177 787.221 Q306.177 780.091 304.349 776.549 Q302.543 772.985 298.909 772.985 M298.909 769.281 Q304.719 769.281 307.775 773.887 Q310.853 778.471 310.853 787.221 Q310.853 795.948 307.775 800.554 Q304.719 805.137 298.909 805.137 Q293.099 805.137 290.02 800.554 Q286.964 795.948 286.964 787.221 Q286.964 778.471 290.02 773.887 Q293.099 769.281 298.909 769.281 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M272.914 609.728 Q276.27 610.446 278.145 612.714 Q280.043 614.983 280.043 618.316 Q280.043 623.432 276.525 626.233 Q273.006 629.033 266.525 629.033 Q264.349 629.033 262.034 628.594 Q259.742 628.177 257.289 627.32 L257.289 622.807 Q259.233 623.941 261.548 624.52 Q263.863 625.098 266.386 625.098 Q270.784 625.098 273.076 623.362 Q275.39 621.626 275.39 618.316 Q275.39 615.26 273.238 613.547 Q271.108 611.811 267.289 611.811 L263.261 611.811 L263.261 607.969 L267.474 607.969 Q270.923 607.969 272.752 606.603 Q274.58 605.214 274.58 602.622 Q274.58 599.96 272.682 598.547 Q270.807 597.112 267.289 597.112 Q265.367 597.112 263.168 597.529 Q260.969 597.946 258.33 598.825 L258.33 594.659 Q260.992 593.918 263.307 593.548 Q265.645 593.177 267.705 593.177 Q273.029 593.177 276.131 595.608 Q279.233 598.015 279.233 602.135 Q279.233 605.006 277.59 606.997 Q275.946 608.964 272.914 609.728 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 596.881 Q295.298 596.881 293.469 600.446 Q291.664 603.987 291.664 611.117 Q291.664 618.223 293.469 621.788 Q295.298 625.33 298.909 625.33 Q302.543 625.33 304.349 621.788 Q306.177 618.223 306.177 611.117 Q306.177 603.987 304.349 600.446 Q302.543 596.881 298.909 596.881 M298.909 593.177 Q304.719 593.177 307.775 597.784 Q310.853 602.367 310.853 611.117 Q310.853 619.844 307.775 624.45 Q304.719 629.033 298.909 629.033 Q293.099 629.033 290.02 624.45 Q286.964 619.844 286.964 611.117 Q286.964 602.367 290.02 597.784 Q293.099 593.177 298.909 593.177 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M271.594 421.772 L259.789 440.221 L271.594 440.221 L271.594 421.772 M270.367 417.698 L276.247 417.698 L276.247 440.221 L281.177 440.221 L281.177 444.11 L276.247 444.11 L276.247 452.258 L271.594 452.258 L271.594 444.11 L255.992 444.11 L255.992 439.596 L270.367 417.698 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 420.777 Q295.298 420.777 293.469 424.342 Q291.664 427.883 291.664 435.013 Q291.664 442.119 293.469 445.684 Q295.298 449.226 298.909 449.226 Q302.543 449.226 304.349 445.684 Q306.177 442.119 306.177 435.013 Q306.177 427.883 304.349 424.342 Q302.543 420.777 298.909 420.777 M298.909 417.073 Q304.719 417.073 307.775 421.68 Q310.853 426.263 310.853 435.013 Q310.853 443.74 307.775 448.346 Q304.719 452.93 298.909 452.93 Q293.099 452.93 290.02 448.346 Q286.964 443.74 286.964 435.013 Q286.964 426.263 290.02 421.68 Q293.099 417.073 298.909 417.073 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M258.793 241.594 L277.15 241.594 L277.15 245.53 L263.076 245.53 L263.076 254.002 Q264.094 253.655 265.113 253.493 Q266.131 253.307 267.15 253.307 Q272.937 253.307 276.316 256.479 Q279.696 259.65 279.696 265.067 Q279.696 270.645 276.224 273.747 Q272.752 276.826 266.432 276.826 Q264.256 276.826 261.988 276.455 Q259.742 276.085 257.335 275.344 L257.335 270.645 Q259.418 271.779 261.641 272.335 Q263.863 272.891 266.34 272.891 Q270.344 272.891 272.682 270.784 Q275.02 268.678 275.02 265.067 Q275.02 261.455 272.682 259.349 Q270.344 257.243 266.34 257.243 Q264.465 257.243 262.59 257.659 Q260.738 258.076 258.793 258.955 L258.793 241.594 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 244.673 Q295.298 244.673 293.469 248.238 Q291.664 251.78 291.664 258.909 Q291.664 266.016 293.469 269.58 Q295.298 273.122 298.909 273.122 Q302.543 273.122 304.349 269.58 Q306.177 266.016 306.177 258.909 Q306.177 251.78 304.349 248.238 Q302.543 244.673 298.909 244.673 M298.909 240.969 Q304.719 240.969 307.775 245.576 Q310.853 250.159 310.853 258.909 Q310.853 267.636 307.775 272.242 Q304.719 276.826 298.909 276.826 Q293.099 276.826 290.02 272.242 Q286.964 267.636 286.964 258.909 Q286.964 250.159 290.02 245.576 Q293.099 240.969 298.909 240.969 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip702)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1146.6 400.199,1020.37 400.786,904.65 401.372,796.055 401.958,700.553 402.545,609.271 403.131,530.217 403.718,454.009 404.304,386.681 404.891,323.795 405.477,366.237 406.063,312.12 406.65,263.457 407.236,219.895 407.823,256.724 408.409,352.64 408.995,373.838 409.582,336.191 410.168,357.077 410.755,325.179 411.341,297.83 411.927,316.543 412.514,293.505 413.1,310.887 413.687,293.525 414.273,277.032 414.86,262.687 415.446,281.509 416.032,271.389 416.619,261.903 417.205,279.889 417.792,274.028 418.378,293.827 418.964,292.224 419.551,292.053 420.137,291.727 420.724,293.453 421.31,347.516 421.896,365.505 422.483,381.11 423.069,384.731 423.656,389.356 424.242,394.641 424.829,400.301 425.415,406.544 426.001,414.355 426.588,422.63 427.174,441.745 427.761,460.583 428.347,478.725 428.933,512.848 429.52,529.068 430.106,537.217 430.693,560.858 431.279,569.662 431.865,585.258 432.452,600.666 433.038,615.349 433.625,636.084 434.211,650.33 434.798,664.379 435.384,682.946 435.97,695.499 436.557,703.013 437.143,716.03 437.73,733.289 438.316,750.092 438.902,757.18 439.489,769.293 440.075,789.246 440.662,812.742 441.248,823.504 441.835,838.105 442.421,855.594 443.007,865.066 443.594,881.284 444.18,899.969 444.767,907.926 445.353,916.228 445.939,921.054 446.526,928.889 447.112,942.846 447.699,956.235 448.285,969.312 448.871,973.444 449.458,985.765 450.044,995.147 450.631,1004.41 451.217,1013.18 451.804,1017.01 452.39,1023.13 452.976,1031.37 453.563,1036.98 454.149,1045.21 454.736,1050.41 455.322,1057.72 455.908,1060.79 456.495,1067.97 457.081,1077.25 457.668,1081.83 458.254,1086.1 458.84,1090.67 459.427,1095.1 460.013,1101.79 460.6,1101.18 461.186,1103.56 461.773,1108.06 462.359,1112.59 462.945,1114.59 463.532,1124.63 464.118,1132.73 464.705,1136.46 465.291,1141.8 465.877,1148.98 466.464,1153.81 467.05,1158.58 467.637,1159.61 468.223,1160.58 468.809,1163.57 469.396,1165.99 469.982,1174.01 470.569,1176.41 471.155,1178.84 471.742,1181.04 472.328,1183.28 472.914,1187.14 473.501,1189.13 474.087,1191.25 474.674,1189.62 475.26,1186.69 475.846,1189.09 476.433,1188.31 477.019,1195.75 477.606,1192.83 478.192,1193.45 478.778,1192.52 479.365,1194.86 479.951,1195.48 480.538,1199.34 481.124,1203.28 481.711,1205.33 482.297,1205.59 482.883,1205.67 483.47,1209.11 484.056,1210.86 484.643,1215.68 485.229,1217.27 485.815,1217.03 486.402,1221.79 486.988,1219.82 487.575,1219.82 488.161,1219.5 488.748,1224.45 489.334,1225.59 489.92,1225.42 490.507,1230.1 491.093,1232.77 491.68,1235.3 492.266,1238.08 492.852,1239.16 493.439,1238.49 494.025,1236.22 494.612,1235.74 495.198,1236.79 495.784,1239.18 496.371,1238.38 496.957,1237.8 497.544,1236.97 498.13,1236.07 498.717,1238.76 499.303,1235.37 499.889,1235.04 500.476,1236.29 501.062,1235.96 501.649,1240.26 502.235,1242.53 502.821,1244.74 503.408,1242.26 503.994,1240 504.581,1239.21 505.167,1240.01 505.753,1240.73 506.34,1235.98 506.926,1235.18 507.513,1237.77 508.099,1237.39 508.686,1238.75 509.272,1238.28 509.858,1240.7 510.445,1241.76 511.031,1242.45 511.618,1243.19 512.204,1244.05 512.79,1240.52 513.377,1242.93 513.963,1239.51 514.55,1243.14 515.136,1242.54 515.722,1240.44 516.309,1238.35 516.895,1241 517.482,1240.5 518.068,1238.74 518.655,1236.69 519.241,1236.31 519.827,1238.87 520.414,1238.4 521,1237.99 521.587,1237.56 522.173,1238.65 522.759,1237.98 523.346,1236.24 523.932,1235.67 524.519,1238.28 525.105,1237.8 525.691,1237.4 526.278,1232.55 526.864,1233.72 527.451,1233.61 528.037,1232.06 528.624,1233.66 529.21,1236.67 529.796,1236.27 530.383,1234.45 530.969,1234.25 531.556,1232.7 532.142,1232.44 532.728,1230.9 533.315,1230.93 533.901,1232.33 534.488,1230.75 535.074,1229.33 535.661,1229.2 536.247,1229.06 536.833,1232.1 537.42,1230.73 538.006,1229.12 538.593,1233.38 539.179,1237.55 539.765,1237.45 540.352,1240.09 540.938,1241.1 541.525,1241.72 542.111,1239.3 542.697,1241.7 543.284,1242.38 543.87,1241.69 544.457,1238.13 545.043,1237.66 545.63,1235.61 546.216,1235.35 546.802,1236.76 547.389,1238.94 547.975,1241.2 548.562,1240.78 549.148,1240.28 549.734,1242.54 550.321,1240.45 550.907,1244.26 551.494,1243.55 552.08,1243.97 552.666,1243 553.253,1244 553.839,1241.41 554.426,1242.16 555.012,1242.66 555.599,1242.16 556.185,1243.3 556.771,1245.39 557.358,1244.24 557.944,1244.96 558.531,1245.43 559.117,1247.17 559.703,1250.43 560.29,1250.53 560.876,1249.41 561.463,1248.12 562.049,1246.73 562.635,1248.25 563.222,1248.51 563.808,1247.2 564.395,1246.3 564.981,1243.38 565.568,1242.46 566.154,1240.13 566.74,1240.65 567.327,1239.8 567.913,1238.94 568.5,1236.98 569.086,1234.78 569.672,1233.09 570.259,1230.86 570.845,1228.94 571.432,1222.74 572.018,1227.18 572.605,1227.2 573.191,1228.34 573.777,1226.66 574.364,1229.26 574.95,1228.89 575.537,1233.22 576.123,1233.02 576.709,1233.93 577.296,1233.47 577.882,1231.5 578.469,1231.05 579.055,1229.52 579.641,1229.07 580.228,1225.98 580.814,1224.41 581.401,1223.25 581.987,1226.42 582.574,1227.8 583.16,1230.58 583.746,1228.86 584.333,1231.44 584.919,1233.75 585.506,1233.02 586.092,1238.21 586.678,1234.7 587.265,1232.9 587.851,1235.06 588.438,1234.56 589.024,1236.63 589.61,1236.01 590.197,1233.85 590.783,1236.1 591.37,1237.03 591.956,1236.37 592.543,1237.29 593.129,1235.09 593.715,1230.27 594.302,1231.78 594.888,1231.64 595.475,1232.42 596.061,1233.42 596.647,1234.68 597.234,1235.43 597.82,1237.9 598.407,1234.44 598.993,1235.1 599.579,1234.73 600.166,1232.54 600.752,1231.92 601.339,1230.01 601.925,1230.79 602.512,1233.03 603.098,1229.59 603.684,1229.02 604.271,1231.83 604.857,1229.81 605.444,1229.32 606.03,1231.69 606.616,1225.32 607.203,1229.34 607.789,1230.27 608.376,1229.93 608.962,1235.67 609.548,1234.08 610.135,1234.7 610.721,1230.94 611.308,1230.46 611.894,1225.8 612.481,1224.04 613.067,1223.76 613.653,1225 614.24,1224.51 614.826,1226.96 615.413,1228.17 615.999,1227.55 616.585,1226.93 617.172,1227.74 617.758,1228.91 618.345,1228.61 618.931,1228.12 619.518,1228.88 620.104,1232.65 620.69,1225.87 621.277,1226.93 621.863,1229.87 622.45,1229.65 623.036,1228.03 623.622,1227.33 624.209,1227.09 624.795,1229.25 625.382,1227.37 625.968,1225.51 626.554,1228.36 627.141,1230.82 627.727,1230.19 628.314,1226.83 628.9,1225.13 629.487,1227.57 630.073,1227.21 630.659,1229.87 631.246,1226.43 631.832,1227.49 632.419,1227.04 633.005,1229.74 633.591,1230.78 634.178,1233.26 634.764,1231.32 635.351,1227.96 635.937,1226.29 636.523,1225.96 637.11,1224.33 637.696,1222.61 638.283,1220.89 638.869,1223.34 639.456,1220.17 640.042,1221.68 640.628,1221.41 641.215,1222.77 641.801,1222.76 642.388,1221.15 642.974,1216.64 643.56,1218.29 644.147,1215.72 644.733,1213.14 645.32,1213.65 645.906,1215.44 646.492,1214.22 647.079,1214.18 647.665,1214.33 648.252,1214.43 648.838,1216.18 649.425,1213.38 650.011,1216.32 650.597,1215.01 651.184,1214.97 651.77,1216.81 652.357,1215.62 652.943,1215.7 653.529,1216.97 654.116,1219.76 654.702,1219.64 655.289,1220.77 655.875,1223.56 656.462,1224.75 657.048,1224.31 657.634,1221.16 658.221,1219.62 658.807,1223.8 659.394,1221.88 659.98,1220.46 660.566,1220.47 661.153,1221.77 661.739,1224.49 662.326,1219.86 662.912,1212.59 663.498,1212.69 664.085,1214.15 664.671,1218.75 665.258,1218.83 665.844,1219.93 666.431,1218.46 667.017,1219.8 667.603,1222.36 668.19,1219.32 668.776,1220.87 669.363,1219.13 669.949,1219.01 670.535,1217.57 671.122,1216.13 671.708,1213.36 672.295,1213.49 672.881,1212.75 673.467,1212.96 674.054,1214.62 674.64,1214.95 675.227,1216.42 675.813,1216.68 676.4,1213.87 676.986,1215.41 677.572,1218.46 678.159,1219.96 678.745,1219.86 679.332,1219.5 679.918,1219.48 680.504,1220.96 681.091,1222.33 681.677,1217.63 682.264,1217.8 682.85,1216.27 683.436,1215.22 684.023,1213.77 684.609,1215.62 685.196,1218.49 685.782,1219.7 686.369,1219.64 686.955,1221.05 687.541,1222.46 688.128,1225.28 688.714,1220.76 689.301,1221.83 689.887,1220.18 690.473,1218.75 691.06,1220.09 691.646,1219.79 692.233,1219.33 692.819,1219.12 693.405,1216 693.992,1217.27 694.578,1217.07 695.165,1218.26 695.751,1216.43 696.338,1216.26 696.924,1216.41 697.51,1219.52 698.097,1219.35 698.683,1217.94 699.27,1217.91 699.856,1217.69 700.442,1219.19 701.029,1217.46 701.615,1218.79 702.202,1220.08 702.788,1218.47 703.375,1219.7 703.961,1219.63 704.547,1219.52 705.134,1218.1 705.72,1215.51 706.307,1215.5 706.893,1217.1 707.479,1218.41 708.066,1219.76 708.652,1221.18 709.239,1217.9 709.825,1216.1 710.411,1216.03 710.998,1214.69 711.584,1211.86 712.171,1211.95 712.757,1212.14 713.344,1214.03 713.93,1214.07 714.516,1215.46 715.103,1218.22 715.689,1215.32 716.276,1215.37 716.862,1216.81 717.448,1216.59 718.035,1217.71 718.621,1216.29 719.208,1216.12 719.794,1216.25 720.38,1214.67 720.967,1214.46 721.553,1215.93 722.14,1213.21 722.726,1215.03 723.313,1214.97 723.899,1213.65 724.485,1214.92 725.072,1214.81 725.658,1216.26 726.245,1216 726.831,1217.42 727.417,1216.09 728.004,1217.13 728.59,1215.65 729.177,1215.53 729.763,1215.25 730.349,1217.99 730.936,1222.24 731.522,1221.73 732.109,1221.57 732.695,1222.54 733.282,1222.34 733.868,1220.3 734.454,1219.71 735.041,1217.89 735.627,1217.85 736.214,1220.84 736.8,1216.46 737.386,1216.33 737.973,1215.16 738.559,1214.75 739.146,1214.96 739.732,1213.47 740.318,1212.23 740.905,1212.36 741.491,1212.37 742.078,1212.38 742.664,1213.76 743.251,1213.76 743.837,1216.53 744.423,1215.18 745.01,1213.68 745.596,1213.79 746.183,1212.41 746.769,1213.97 747.355,1215.13 747.942,1217.94 748.528,1220.59 749.115,1218.93 749.701,1218.56 750.288,1218.47 750.874,1216.74 751.46,1219.67 752.047,1222.15 752.633,1221.54 753.22,1225.38 753.806,1227.69 754.392,1228.4 754.979,1224.78 755.565,1223.84 756.152,1223.74 756.738,1222.11 757.324,1220.58 757.911,1218.72 758.497,1218.37 759.084,1218.21 759.67,1214.92 760.257,1211.83 760.843,1216.27 761.429,1216.02 762.016,1218.86 762.602,1219.89 763.189,1217.89 763.775,1222.09 764.361,1219.08 764.948,1215.95 765.534,1217.15 766.121,1215.76 766.707,1212.91 767.293,1214.44 767.88,1212.97 768.466,1211.61 769.053,1210.51 769.639,1212.38 770.226,1212.42 770.812,1212.53 771.398,1213.86 771.985,1210.86 772.571,1210.93 773.158,1209.5 773.744,1208.32 774.33,1209.99 774.917,1211.67 775.503,1211.9 776.09,1210.36 776.676,1212.04 777.262,1213.48 777.849,1210.64 778.435,1212.28 779.022,1209.57 779.608,1205.53 780.195,1204.4 780.781,1204.59 781.367,1205.14 781.954,1204.01 782.54,1204.63 783.127,1206.74 783.713,1208.66 784.299,1209.07 784.886,1210.59 785.472,1212.41 786.059,1215.23 786.645,1213.75 787.232,1216.69 787.818,1216.56 788.404,1216.48 788.991,1217.78 789.577,1213.5 790.164,1213.6 790.75,1214.76 791.336,1216.04 791.923,1214.61 792.509,1211.78 793.096,1209.35 793.682,1208.13 794.268,1205.67 794.855,1207.67 795.441,1209.53 796.028,1211.12 796.614,1208.28 797.201,1205.54 797.787,1206.3 798.373,1205.52 798.96,1206.14 799.546,1209.59 800.133,1208.3 800.719,1207.11 801.305,1208.79 801.892,1209 802.478,1209.45 803.065,1208 803.651,1210.99 804.237,1209.74 804.824,1211.51 805.41,1214.55 805.997,1211.85 806.583,1210.57 807.17,1213.42 807.756,1215 808.342,1213.78 808.929,1213.66 809.515,1215.11 810.102,1214.84 810.688,1213.39 811.274,1213.24 811.861,1213.09 812.447,1214.44 813.034,1215.78 813.62,1215.82 814.206,1217.23 814.793,1218.83 815.379,1220.26 815.966,1221.35 816.552,1221.92 817.139,1221.56 817.725,1224.01 818.311,1224.74 818.898,1224.12 819.484,1225.13 820.071,1224.36 820.657,1226.78 821.243,1224.52 821.83,1221.05 822.416,1220.55 823.003,1219.12 823.589,1218.63 824.175,1220.98 824.762,1223.37 825.348,1224.08 825.935,1223.41 826.521,1224.36 827.108,1224.03 827.694,1220.37 828.28,1220.12 828.867,1218.21 829.453,1216.44 830.04,1219.36 830.626,1221.82 831.212,1221.06 831.799,1223.35 832.385,1224.13 832.972,1225.07 833.558,1224.47 834.145,1222.33 834.731,1219.13 835.317,1217.42 835.904,1215.55 836.49,1217.92 837.077,1216.43 837.663,1217.41 838.249,1216.92 838.836,1220.92 839.422,1217.73 840.009,1217.53 840.595,1215.57 841.181,1218.06 841.768,1214.99 842.354,1213.45 842.941,1213.24 843.527,1211.7 844.114,1213.17 844.7,1210.18 845.286,1211.56 845.873,1211.32 846.459,1211.22 847.046,1209.67 847.632,1209.62 848.218,1208.36 848.805,1207 849.391,1208.72 849.978,1208.86 850.564,1207.36 851.15,1206.64 851.737,1204.02 852.323,1203.25 852.91,1200.65 853.496,1195.44 854.083,1195.03 854.669,1192.85 855.255,1195.19 855.842,1197.66 856.428,1201.47 857.015,1202.32 857.601,1204.3 858.187,1206.16 858.774,1206.47 859.36,1208.15 859.947,1206.95 860.533,1205.54 861.119,1208.96 861.706,1209.22 862.292,1208.17 862.879,1208.38 863.465,1208.27 864.052,1209.93 864.638,1209.87 865.224,1209.81 865.811,1212.52 866.397,1212.71 866.984,1213.84 867.57,1215.22 868.156,1214.95 868.743,1216.13 869.329,1214.37 869.916,1213.06 870.502,1211.61 871.089,1214.46 871.675,1215.66 872.261,1212.56 872.848,1212.55 873.434,1209.49 874.021,1208.27 874.607,1209.77 875.193,1210.09 875.78,1207.38 876.366,1207.83 876.953,1206.6 877.539,1204.06 878.125,1205.75 878.712,1208.91 879.298,1207.77 879.885,1209.58 880.471,1208.01 881.058,1207.01 881.644,1207.41 882.23,1206.21 882.817,1208.24 883.403,1214.27 883.99,1216.01 884.576,1215.74 885.162,1215.32 885.749,1215.29 886.335,1215.41 886.922,1214.95 887.508,1217.42 888.094,1220.31 888.681,1221.31 889.267,1220.73 889.854,1221.65 890.44,1218.37 891.027,1222.12 891.613,1226.03 892.199,1225.49 892.786,1224.82 893.372,1223.94 893.959,1225.05 894.545,1225.68 895.131,1224.89 895.718,1222.97 896.304,1221.3 896.891,1222.12 897.477,1220.09 898.063,1219.4 898.65,1219 899.236,1220.13 899.823,1215.57 900.409,1217.03 900.996,1216.57 901.582,1216.11 902.168,1211.58 902.755,1209.92 903.341,1208.98 903.928,1206.62 904.514,1208.4 905.1,1212.92 905.687,1214.33 906.273,1212.72 906.86,1215.65 907.446,1218.5 908.032,1216.75 908.619,1216.1 909.205,1215.82 909.792,1215.83 910.378,1216.97 910.965,1215.44 911.551,1214.97 912.137,1214.78 912.724,1213.16 913.31,1215.84 913.897,1214.14 914.483,1214.11 915.069,1214.06 915.656,1210.83 916.242,1213.4 916.829,1213.27 917.415,1214.3 918.002,1215.44 918.588,1217.96 919.174,1217.39 919.761,1219.91 920.347,1219.51 920.934,1221.74 921.52,1221.13 922.106,1216.51 922.693,1216.11 923.279,1214.38 923.866,1211.43 924.452,1214.2 925.038,1215.11 925.625,1213.16 926.211,1215.81 926.798,1217.16 927.384,1218.27 927.971,1216.27 928.557,1215.75 929.143,1216.53 929.73,1217.64 930.316,1217.62 930.903,1212.63 931.489,1213.63 932.075,1215.04 932.662,1214.62 933.248,1218.87 933.835,1217.04 934.421,1216.62 935.007,1213.4 935.594,1211.9 936.18,1213.42 936.767,1212.02 937.353,1211.7 937.94,1211.55 938.526,1212.98 939.112,1212.8 939.699,1212.69 940.285,1212.71 940.872,1215.3 941.458,1213.66 942.044,1210.62 942.631,1210.89 943.217,1206.53 943.804,1208.28 944.39,1207 944.976,1207.32 945.563,1206.23 946.149,1207.87 946.736,1208.19 947.322,1204.03 947.909,1204.25 948.495,1207.39 949.081,1207.76 949.668,1208.35 950.254,1211.25 950.841,1211.37 951.427,1214.31 952.013,1212.87 952.6,1214.31 953.186,1211.17 953.773,1213.81 954.359,1213.51 954.945,1210.7 955.532,1210.59 956.118,1210.83 956.705,1211.07 957.291,1208.5 957.878,1208.45 958.464,1208.64 959.05,1208.71 959.637,1209.14 960.223,1207.87 960.81,1205.42 961.396,1205.65 961.982,1204.13 962.569,1207.28 963.155,1205.98 963.742,1205.86 964.328,1204.55 964.915,1202.07 965.501,1204.16 966.087,1204.39 966.674,1204.46 967.26,1207.57 967.847,1203.59 968.433,1204.4 969.019,1203.22 969.606,1203.44 970.192,1208.03 970.779,1209.93 971.365,1209.74 971.951,1206.88 972.538,1207.3 973.124,1207.33 973.711,1207.69 974.297,1209.36 974.884,1212.41 975.47,1214.97 976.056,1213.49 976.643,1213.87 977.229,1215.2 977.816,1215.4 978.402,1216.65 978.988,1216.16 979.575,1216.14 980.161,1214.51 980.748,1213.22 981.334,1214.32 981.92,1218.05 982.507,1217.63 983.093,1218.67 983.68,1217.03 984.266,1216.71 984.853,1216.21 985.439,1217.2 986.025,1218.25 986.612,1216.64 987.198,1218.87 987.785,1212.75 988.371,1216.69 988.957,1216.59 989.544,1212.04 990.13,1213.49 990.717,1216.11 991.303,1213.14 991.889,1211.86 992.476,1212.02 993.062,1216.27 993.649,1216.18 994.235,1216 994.822,1215.83 995.408,1216.87 995.994,1218.36 996.581,1214.88 997.167,1212.74 997.754,1211.36 998.34,1211.33 998.926,1208.25 999.513,1208.68 1000.1,1208.63 1000.69,1209.86 1001.27,1212.96 1001.86,1212.87 1002.44,1211.43 1003.03,1210.04 1003.62,1210.09 1004.2,1211.56 1004.79,1212.9 1005.38,1212.61 1005.96,1216.7 1006.55,1215.27 1007.14,1216.44 1007.72,1217.7 1008.31,1216.19 1008.9,1211.61 1009.48,1212.95 1010.07,1214.36 1010.65,1212.9 1011.24,1214 1011.83,1213.73 1012.41,1214.84 1013,1211.5 1013.59,1208.76 1014.17,1208.99 1014.76,1206.01 1015.35,1206.26 1015.93,1206.71 1016.52,1204.27 1017.11,1201.63 1017.69,1203.74 1018.28,1202.49 1018.86,1204.24 1019.45,1205.95 1020.04,1204.83 1020.62,1203.51 1021.21,1205.45 1021.8,1208.51 1022.38,1207.41 1022.97,1208.81 1023.56,1207.45 1024.14,1210.24 1024.73,1210.19 1025.32,1207.14 1025.9,1204.64 1026.49,1203.47 1027.07,1203.92 1027.66,1204.33 1028.25,1201.85 1028.83,1201.05 1029.42,1200.13 1030.01,1202.4 1030.59,1201.54 1031.18,1197.64 1031.77,1199.61 1032.35,1198.77 1032.94,1199.4 1033.52,1198.46 1034.11,1197.47 1034.7,1196.86 1035.28,1195.98 1035.87,1198.18 1036.46,1200.64 1037.04,1202.72 1037.63,1200.6 1038.22,1202.4 1038.8,1205.43 1039.39,1208.36 1039.98,1210.28 1040.56,1210.22 1041.15,1213.3 1041.73,1215.07 1042.32,1213.52 1042.91,1215.29 1043.49,1213.34 1044.08,1213.22 1044.67,1216.12 1045.25,1218.94 1045.84,1218.65 1046.43,1219.74 1047.01,1220.97 1047.6,1219.21 1048.19,1218.64 1048.77,1216.95 1049.36,1219.38 1049.94,1220.3 1050.53,1219.64 1051.12,1220.65 1051.7,1221.73 1052.29,1222.5 1052.88,1222.93 1053.46,1220.93 1054.05,1224.46 1054.64,1223.83 1055.22,1223.31 1055.81,1221.26 1056.39,1221 1056.98,1220.63 1057.57,1221.58 1058.15,1222.14 1058.74,1221.61 1059.33,1216.56 1059.91,1217.75 1060.5,1212.7 1061.09,1211.19 1061.67,1208.67 1062.26,1208.82 1062.85,1204.44 1063.43,1204.65 1064.02,1203.56 1064.6,1202.5 1065.19,1203.03 1065.78,1204.65 1066.36,1205.02 1066.95,1205.59 1067.54,1203.11 1068.12,1203.34 1068.71,1205.15 1069.3,1205.35 1069.88,1204.26 1070.47,1204.54 1071.06,1203.1 1071.64,1203.23 1072.23,1203.47 1072.81,1202.34 1073.4,1205.76 1073.99,1206.14 1074.57,1205.03 1075.16,1205.65 1075.75,1204.71 1076.33,1205.12 1076.92,1205.21 1077.51,1206.84 1078.09,1208.61 1078.68,1206 1079.26,1203.43 1079.85,1203.85 1080.44,1202.68 1081.02,1203.18 1081.61,1202.01 1082.2,1201.2 1082.78,1201.43 1083.37,1200.93 1083.96,1203.22 1084.54,1206.68 1085.13,1210.12 1085.72,1212.87 1086.3,1211.43 1086.89,1215.71 1087.47,1215.4 1088.06,1216.69 1088.65,1219.44 1089.23,1217.68 1089.82,1218.74 1090.41,1220.14 1090.99,1221.16 1091.58,1218.85 1092.17,1218.52 1092.75,1216.48 1093.34,1216.27 1093.93,1213.05 1094.51,1211.52 1095.1,1211.34 1095.68,1211.29 1096.27,1211.29 1096.86,1211.32 1097.44,1212.64 1098.03,1212.72 1098.62,1212.8 1099.2,1208.54 1099.79,1207.07 1100.38,1203.05 1100.96,1202.07 1101.55,1199.85 1102.14,1202.01 1102.72,1202.16 1103.31,1203.95 1103.89,1207.16 1104.48,1205.98 1105.07,1206.44 1105.65,1206.9 1106.24,1208.75 1106.83,1210.29 1107.41,1210.35 1108,1210.28 1108.59,1211.79 1109.17,1211.66 1109.76,1215.87 1110.34,1216.89 1110.93,1215.24 1111.52,1214.7 1112.1,1215.79 1112.69,1216.92 1113.28,1215.35 1113.86,1215.4 1114.45,1218.12 1115.04,1216.37 1115.62,1213.23 1116.21,1215.82 1116.8,1214.31 1117.38,1212.63 1117.97,1211.15 1118.55,1211 1119.14,1209.67 1119.73,1211.07 1120.31,1209.43 1120.9,1211.15 1121.49,1211.03 1122.07,1212.56 1122.66,1212.35 1123.25,1213.87 1123.83,1212.36 1124.42,1212.25 1125.01,1211.93 1125.59,1213.19 1126.18,1213.03 1126.76,1215.79 1127.35,1214.34 1127.94,1214.17 1128.52,1214.13 1129.11,1213.84 1129.7,1216.7 1130.28,1216.64 1130.87,1213.59 1131.46,1213.37 1132.04,1211.42 1132.63,1209.93 1133.21,1211.47 1133.8,1209.85 1134.39,1209.78 1134.97,1208.33 1135.56,1208.43 1136.15,1208.65 1136.73,1208.84 1137.32,1209.22 1137.91,1208.15 1138.49,1208.45 1139.08,1206.96 1139.67,1204.18 1140.25,1205.87 1140.84,1206.29 1141.42,1206.34 1142.01,1206.46 1142.6,1206.46 1143.18,1209.53 1143.77,1210.91 1144.36,1210.78 1144.94,1209.18 1145.53,1209.36 1146.12,1211.18 1146.7,1209.54 1147.29,1212.56 1147.88,1209.74 1148.46,1211.09 1149.05,1211.2 1149.63,1211.37 1150.22,1212.5 1150.81,1212.14 1151.39,1213.67 1151.98,1210.72 1152.57,1210.66 1153.15,1209.34 1153.74,1208.07 1154.33,1206.8 1154.91,1205.52 1155.5,1205.91 1156.09,1208.89 1156.67,1209 1157.26,1209.35 1157.84,1210.58 1158.43,1213.2 1159.02,1211.91 1159.6,1210.53 1160.19,1213.51 1160.78,1213.36 1161.36,1208.73 1161.95,1208.62 1162.54,1207.32 1163.12,1210.36 1163.71,1210.36 1164.29,1213.18 1164.88,1213.26 1165.47,1211.89 1166.05,1214.36 1166.64,1214.36 1167.23,1215.68 1167.81,1214.03 1168.4,1215.3 1168.99,1213.45 1169.57,1213.2 1170.16,1212.91 1170.75,1218.5 1171.33,1215.18 1171.92,1213.75 1172.5,1215.09 1173.09,1213.25 1173.68,1214.42 1174.26,1215.53 1174.85,1216.58 1175.44,1217.84 1176.02,1219 1176.61,1224.31 1177.2,1226.49 1177.78,1227 1178.37,1221.97 1178.96,1222.79 1179.54,1223.34 1180.13,1222.86 1180.71,1225 1181.3,1219.75 1181.89,1220.83 1182.47,1220.06 1183.06,1216.7 1183.65,1214.95 1184.23,1214.57 1184.82,1210.02 1185.41,1206.77 1185.99,1206.96 1186.58,1207.02 1187.16,1209.93 1187.75,1212.72 1188.34,1215.46 1188.92,1213.56 1189.51,1214.65 1190.1,1217.25 1190.68,1217.07 1191.27,1218.06 1191.86,1216.07 1192.44,1212.86 1193.03,1211.42 1193.62,1211.46 1194.2,1214.03 1194.79,1209.67 1195.37,1208.19 1195.96,1207 1196.55,1207.23 1197.13,1207.26 1197.72,1207.97 1198.31,1209.57 1198.89,1207.88 1199.48,1204.92 1200.07,1205.22 1200.65,1206.9 1201.24,1209.7 1201.83,1207 1202.41,1204.44 1203,1204.79 1203.58,1205.14 1204.17,1203.82 1204.76,1203.81 1205.34,1207.12 1205.93,1210.32 1206.52,1210.25 1207.1,1211.79 1207.69,1211.65 1208.28,1213.41 1208.86,1213.34 1209.45,1213.21 1210.03,1209.76 1210.62,1207.08 1211.21,1208.66 1211.79,1210.25 1212.38,1206.94 1212.97,1204.32 1213.55,1208.95 1214.14,1208.86 1214.73,1206.01 1215.31,1201.79 1215.9,1203.72 1216.49,1204.06 1217.07,1204.53 1217.66,1205 1218.24,1204.07 1218.83,1202.9 1219.42,1204.81 1220,1203.61 1220.59,1203.91 1221.18,1204.53 1221.76,1203.63 1222.35,1204.13 1222.94,1207.35 1223.52,1207.92 1224.11,1209.3 1224.7,1207.8 1225.28,1207.91 1225.87,1206.53 1226.45,1206.66 1227.04,1206.86 1227.63,1205.86 1228.21,1203.54 1228.8,1202.38 1229.39,1204.5 1229.97,1203.66 1230.56,1206.84 1231.15,1208.46 1231.73,1210.27 1232.32,1212.91 1232.91,1211.49 1233.49,1211.63 1234.08,1214.92 1234.66,1216.05 1235.25,1217.1 1235.84,1215.56 1236.42,1212.41 1237.01,1209.62 1237.6,1210.96 1238.18,1211.01 1238.77,1212.59 1239.36,1212.48 1239.94,1212.35 1240.53,1213.72 1241.11,1213.56 1241.7,1216.16 1242.29,1214.41 1242.87,1213.85 1243.46,1213.86 1244.05,1213.64 1244.63,1214.79 1245.22,1215.93 1245.81,1212.99 1246.39,1212.97 1246.98,1213.24 1247.57,1217.43 1248.15,1217.32 1248.74,1218.54 1249.32,1218.31 1249.91,1217.92 1250.5,1218.83 1251.08,1220.06 1251.67,1215.42 1252.26,1217.62 1252.84,1217.27 1253.43,1216.86 1254.02,1215.04 1254.6,1214.77 1255.19,1211.79 1255.78,1208.86 1256.36,1209.03 1256.95,1209.12 1257.53,1209.46 1258.12,1209.53 1258.71,1206.84 1259.29,1205.84 1259.88,1204.55 1260.47,1206.02 1261.05,1207.76 1261.64,1208.11 1262.23,1207.08 1262.81,1205.88 1263.4,1206.16 1263.98,1204.74 1264.57,1205.07 1265.16,1207.91 1265.74,1208.33 1266.33,1207.07 1266.92,1208.41 1267.5,1207.29 1268.09,1210.39 1268.68,1210.51 1269.26,1210.45 1269.85,1211.75 1270.44,1208.7 1271.02,1208.75 1271.61,1205.99 1272.19,1204.84 1272.78,1203.71 1273.37,1204.22 1273.95,1200.02 1274.54,1200.51 1275.13,1201.16 1275.71,1201.6 1276.3,1200.49 1276.89,1200.74 1277.47,1199.76 1278.06,1200.32 1278.65,1199.25 1279.23,1198.26 1279.82,1197.4 1280.4,1196.59 1280.99,1198.93 1281.58,1199.4 1282.16,1201.12 1282.75,1201.67 1283.34,1205.2 1283.92,1205.26 1284.51,1203.98 1285.1,1207.28 1285.68,1207.48 1286.27,1208.87 1286.86,1207.41 1287.44,1206.25 1288.03,1207.82 1288.61,1209.31 1289.2,1207.98 1289.79,1207.71 1290.37,1206.48 1290.96,1206.7 1291.55,1206.88 1292.13,1209.86 1292.72,1212.72 1293.31,1213.82 1293.89,1212.42 1294.48,1209.22 1295.06,1206.55 1295.65,1206.57 1296.24,1208.3 1296.82,1208.1 1297.41,1209.49 1298,1206.67 1298.58,1207.04 1299.17,1204.76 1299.76,1208.2 1300.34,1208.17 1300.93,1206.76 1301.52,1207.4 1302.1,1208.8 1302.69,1210.31 1303.27,1210.54 1303.86,1214.85 1304.45,1213.27 1305.03,1215.81 1305.62,1215.54 1306.21,1215.01 1306.79,1216.1 1307.38,1214.71 1307.97,1211.4 1308.55,1211.4 1309.14,1208.39 1309.73,1206.97 1310.31,1205.93 1310.9,1202.9 1311.48,1205.12 1312.07,1206.98 1312.66,1205.64 1313.24,1207.53 1313.83,1207.61 1314.42,1209.06 1315,1207.81 1315.59,1207.98 1316.18,1206.89 1316.76,1208.64 1317.35,1208.4 1317.93,1205.46 1318.52,1205.63 1319.11,1207.28 1319.69,1207.66 1320.28,1207.67 1320.87,1206.48 1321.45,1206.88 1322.04,1206.68 1322.63,1208.5 1323.21,1208.37 1323.8,1210.05 1324.39,1211.47 1324.97,1208.94 1325.56,1207.34 1326.14,1208.94 1326.73,1210.46 1327.32,1207.38 1327.9,1210.58 1328.49,1210.92 1329.08,1210.82 1329.66,1209.22 1330.25,1210.52 1330.84,1214.94 1331.42,1217.66 1332.01,1217.1 1332.6,1216.89 1333.18,1216.32 1333.77,1215.88 1334.35,1215.73 1334.94,1217.13 1335.53,1215.8 1336.11,1216.92 1336.7,1216.48 1337.29,1216.07 1337.87,1215.58 1338.46,1214.05 1339.05,1214.03 1339.63,1210.72 1340.22,1213.45 1340.8,1211.7 1341.39,1209.89 1341.98,1209.73 1342.56,1208.29 1343.15,1208.34 1343.74,1208.23 1344.32,1209.65 1344.91,1209.75 1345.5,1207.27 1346.08,1207.52 1346.67,1204.81 1347.26,1202.18 1347.84,1201.07 1348.43,1203.17 1349.01,1201.85 1349.6,1202.28 1350.19,1204 1350.77,1204.62 1351.36,1204.97 1351.95,1206.71 1352.53,1206.83 1353.12,1206.78 1353.71,1205.6 1354.29,1205.84 1354.88,1207.55 1355.47,1207.49 1356.05,1204.9 1356.64,1203.81 1357.22,1207.25 1357.81,1210.25 1358.4,1210.65 1358.98,1213.4 1359.57,1213.16 1360.16,1216.18 1360.74,1216.04 1361.33,1217.06 1361.92,1218.33 1362.5,1219.2 1363.09,1220.17 1363.68,1223.03 1364.26,1222.5 1364.85,1223.41 1365.43,1221.15 1366.02,1220.62 1366.61,1217.63 1367.19,1214.1 1367.78,1214.01 1368.37,1215.05 1368.95,1216.27 1369.54,1211.75 1370.13,1211.42 1370.71,1212.68 1371.3,1210.83 1371.88,1210.89 1372.47,1213.84 1373.06,1213.5 1373.64,1213.39 1374.23,1213 1374.82,1214.32 1375.4,1212.57 1375.99,1211.14 1376.58,1207.96 1377.16,1208.14 1377.75,1208.93 1378.34,1210.18 1378.92,1211.71 1379.51,1213.19 1380.09,1215.72 1380.68,1214.31 1381.27,1214.14 1381.85,1212.47 1382.44,1213.77 1383.03,1212.24 1383.61,1212.42 1384.2,1212.33 1384.79,1216.49 1385.37,1214.94 1385.96,1217.5 1386.55,1220.11 1387.13,1218.06 1387.72,1220.29 1388.3,1218.56 1388.89,1217.79 1389.48,1215.92 1390.06,1212.7 1390.65,1209.72 1391.24,1206.99 1391.82,1207.36 1392.41,1209.23 1393,1209.41 1393.58,1208.22 1394.17,1206.85 1394.75,1206.98 1395.34,1205.78 1395.93,1207.8 1396.51,1203.55 1397.1,1205.29 1397.69,1205.54 1398.27,1204.47 1398.86,1209.09 1399.45,1210.6 1400.03,1210.66 1400.62,1213.63 1401.21,1216.19 1401.79,1218.66 1402.38,1220.76 1402.96,1218.89 1403.55,1218.76 1404.14,1218.39 1404.72,1219.53 1405.31,1218.88 1405.9,1217.02 1406.48,1215.14 1407.07,1214.88 1407.66,1213.21 1408.24,1210.07 1408.83,1207.46 1409.42,1206.33 1410,1204.87 1410.59,1205.1 1411.17,1202.62 1411.76,1203.18 1412.35,1202.01 1412.93,1200.76 1413.52,1202.56 1414.11,1202.98 1414.69,1202.11 1415.28,1203.68 1415.87,1203.88 1416.45,1198.94 1417.04,1198.16 1417.63,1200.35 1418.21,1201.94 1418.8,1202.64 1419.38,1202.89 1419.97,1203.72 1420.56,1204.16 1421.14,1204.54 1421.73,1203.18 1422.32,1203.54 1422.9,1205.33 1423.49,1205.55 1424.08,1204.26 1424.66,1202.95 1425.25,1201.89 1425.83,1200.57 1426.42,1201.01 1427.01,1203.88 1427.59,1204.13 1428.18,1204.45 1428.77,1206.12 1429.35,1206.29 1429.94,1206.67 1430.53,1206.7 1431.11,1206.72 1431.7,1208.48 1432.29,1206.97 1432.87,1208.62 1433.46,1212.81 1434.04,1212.71 1434.63,1206.99 1435.22,1207.19 1435.8,1207.46 1436.39,1209.02 1436.98,1209.22 1437.56,1213.46 1438.15,1213.22 1438.74,1213.32 1439.32,1213.32 1439.91,1215.78 1440.5,1215.63 1441.08,1215.46 1441.67,1213.79 1442.25,1212.52 1442.84,1212.26 1443.43,1212.37 1444.01,1211.05 1444.6,1210.89 1445.19,1212.32 1445.77,1213.68 1446.36,1213.31 1446.95,1214.7 1447.53,1215.69 1448.12,1215.1 1448.7,1213.95 1449.29,1213.74 1449.88,1213.79 1450.46,1207.63 1451.05,1206.58 1451.64,1203.73 1452.22,1209.86 1452.81,1210.03 1453.4,1212.88 1453.98,1212.39 1454.57,1214.79 1455.16,1216.05 1455.74,1214.24 1456.33,1214.22 1456.91,1215.24 1457.5,1215.33 1458.09,1213.71 1458.67,1213.49 1459.26,1212.08 1459.85,1209.91 1460.43,1209.96 1461.02,1212.89 1461.61,1212.97 1462.19,1215.93 1462.78,1217.07 1463.37,1211.01 1463.95,1213.58 1464.54,1211.79 1465.12,1211.75 1465.71,1211.48 1466.3,1212.79 1466.88,1209.61 1467.47,1206.68 1468.06,1206.69 1468.64,1206.9 1469.23,1209.79 1469.82,1211.15 1470.4,1210.9 1470.99,1210.96 1471.57,1213.81 1472.16,1218.04 1472.75,1217.53 1473.33,1220.13 1473.92,1218.14 1474.51,1217.66 1475.09,1215.57 1475.68,1212.54 1476.27,1210.91 1476.85,1209.34 1477.44,1210.86 1478.03,1209.71 1478.61,1209.78 1479.2,1209.8 1479.78,1211.52 1480.37,1211.3 1480.96,1212.53 1481.54,1212.49 1482.13,1210.96 1482.72,1208.04 1483.3,1206.75 1483.89,1209.9 1484.48,1214.15 1485.06,1215.5 1485.65,1215.1 1486.24,1212.09 1486.82,1216.42 1487.41,1216.48 1487.99,1219.09 1488.58,1218.98 1489.17,1214.03 1489.75,1215.34 1490.34,1215.19 1490.93,1215.18 1491.51,1215.06 1492.1,1215 1492.69,1211.76 1493.27,1211.66 1493.86,1207.2 1494.45,1207.32 1495.03,1206.19 1495.62,1207.86 1496.2,1209.49 1496.79,1209.75 1497.38,1205.59 1497.96,1204.22 1498.55,1203.22 1499.14,1203.76 1499.72,1204.16 1500.31,1206.12 1500.9,1205.96 1501.48,1200.29 1502.07,1203.85 1502.65,1204.42 1503.24,1208.02 1503.83,1206.64 1504.41,1205.45 1505,1207.1 1505.59,1208.72 1506.17,1203.03 1506.76,1203.72 1507.35,1204.28 1507.93,1204.31 1508.52,1203.23 1509.11,1203.53 1509.69,1202.46 1510.28,1202.87 1510.86,1200.52 1511.45,1201.02 1512.04,1204.34 1512.62,1206.21 1513.21,1206.19 1513.8,1206.22 1514.38,1204.79 1514.97,1205.42 1515.56,1205.58 1516.14,1204.56 1516.73,1206.21 1517.32,1203.3 1517.9,1202.22 1518.49,1199.96 1519.07,1200.77 1519.66,1206.93 1520.25,1208.62 1520.83,1208.71 1521.42,1211.83 1522.01,1210.6 1522.59,1213.4 1523.18,1212.03 1523.77,1211.81 1524.35,1211.76 1524.94,1210.04 1525.52,1211.31 1526.11,1209.71 1526.7,1211.31 1527.28,1211.42 1527.87,1212.39 1528.46,1214.96 1529.04,1211.84 1529.63,1213.25 1530.22,1210.34 1530.8,1211.87 1531.39,1210.27 1531.98,1208.99 1532.56,1210.32 1533.15,1211.55 1533.73,1211.48 1534.32,1211.1 1534.91,1212.36 1535.49,1212.19 1536.08,1211.85 1536.67,1211.71 1537.25,1210.45 1537.84,1209.13 1538.43,1210.43 1539.01,1209.08 1539.6,1210.75 1540.19,1209.32 1540.77,1210.89 1541.36,1210.72 1541.94,1207.89 1542.53,1207.9 1543.12,1206.66 1543.7,1203.96 1544.29,1207.23 1544.88,1208.71 1545.46,1208.94 1546.05,1207.49 1546.64,1207.43 1547.22,1205.95 1547.81,1206.44 1548.4,1205.09 1548.98,1206.54 1549.57,1204.98 1550.15,1206.41 1550.74,1206.74 1551.33,1205.48 1551.91,1205.58 1552.5,1207.66 1553.09,1207.93 1553.67,1203.83 1554.26,1204.26 1554.85,1203.02 1555.43,1203.45 1556.02,1205.54 1556.6,1205.46 1557.19,1204.54 1557.78,1206.13 1558.36,1209.29 1558.95,1207.75 1559.54,1207.69 1560.12,1204.97 1560.71,1207.91 1561.3,1210.7 1561.88,1210.66 1562.47,1210.56 1563.06,1211.97 1563.64,1210.06 1564.23,1211.3 1564.81,1211.15 1565.4,1214.12 1565.99,1215.33 1566.57,1215.3 1567.16,1213.36 1567.75,1210.36 1568.33,1210.35 1568.92,1211.82 1569.51,1211.57 1570.09,1210.13 1570.68,1212.91 1571.27,1214.19 1571.85,1213.87 1572.44,1215.5 1573.02,1215 1573.61,1216.19 1574.2,1217.2 1574.78,1216.75 1575.37,1214.68 1575.96,1209.93 1576.54,1208.54 1577.13,1211.2 1577.72,1210.77 1578.3,1210.71 1578.89,1208.95 1579.47,1212.05 1580.06,1210.25 1580.65,1211.54 1581.23,1208.61 1581.82,1210.17 1582.41,1211.87 1582.99,1211.56 1583.58,1211.74 1584.17,1212.97 1584.75,1211.51 1585.34,1211.55 1585.93,1211.34 1586.51,1208.28 1587.1,1208.53 1587.68,1208.36 1588.27,1208.37 1588.86,1208.57 1589.44,1211.18 1590.03,1212.83 1590.62,1212.44 1591.2,1210.78 1591.79,1206.38 1592.38,1207.98 1592.96,1208.35 1593.55,1211.11 1594.14,1212.5 1594.72,1212.41 1595.31,1209.44 1595.89,1210.9 1596.48,1211.14 1597.07,1211.25 1597.65,1211.16 1598.24,1211.19 1598.83,1208.43 1599.41,1209.41 1600,1209.66 1600.59,1209.88 1601.17,1207.12 1601.76,1205.8 1602.34,1206.19 1602.93,1207.9 1603.52,1205.04 1604.1,1203.91 1604.69,1206.99 1605.28,1207.16 1605.86,1209.89 1606.45,1209.93 1607.04,1209.88 1607.62,1208.41 1608.21,1208.29 1608.8,1211.42 1609.38,1212.96 1609.97,1213.84 1610.55,1214.93 1611.14,1214.77 1611.73,1214.61 1612.31,1214.32 1612.9,1211.31 1613.49,1215.4 1614.07,1213.58 1614.66,1217.43 1615.25,1217 1615.83,1213.76 1616.42,1212.27 1617.01,1214.83 1617.59,1216.02 1618.18,1213.99 1618.76,1212.38 1619.35,1216.58 1619.94,1216.19 1620.52,1215.79 1621.11,1215.45 1621.7,1217.88 1622.28,1217.47 1622.87,1212.62 1623.46,1210.89 1624.04,1212.49 1624.63,1212.48 1625.22,1213.84 1625.8,1216.7 1626.39,1213.52 1626.97,1214.61 1627.56,1212.71 1628.15,1212.31 1628.73,1210.47 1629.32,1211.89 1629.91,1213.08 1630.49,1215.71 1631.08,1213.92 1631.67,1210.54 1632.25,1210.55 1632.84,1208.94 1633.42,1210.47 1634.01,1210.3 1634.6,1210.44 1635.18,1210.42 1635.77,1204.38 1636.36,1202.96 1636.94,1204.83 1637.53,1205.17 1638.12,1208.23 1638.7,1205.48 1639.29,1205.72 1639.88,1205.94 1640.46,1206.39 1641.05,1206.6 1641.63,1209.78 1642.22,1211.14 1642.81,1213.06 1643.39,1214.09 1643.98,1213.87 1644.57,1212.18 1645.15,1210.78 1645.74,1207.83 1646.33,1207.94 1646.91,1209.51 1647.5,1216.54 1648.09,1216.25 1648.67,1212.85 1649.26,1213.9 1649.84,1216.49 1650.43,1211.55 1651.02,1211.38 1651.6,1210.02 1652.19,1210.26 1652.78,1210.29 1653.36,1211.53 1653.95,1214.24 1654.54,1217.08 1655.12,1210.86 1655.71,1210.82 1656.29,1212.1 1656.88,1212.09 1657.47,1213.39 1658.05,1217.34 1658.64,1215.82 1659.23,1211.33 1659.81,1211.57 1660.4,1208.89 1660.99,1207.66 1661.57,1206.32 1662.16,1205.25 1662.75,1207.14 1663.33,1207.2 1663.92,1208.92 1664.5,1208.91 1665.09,1210.39 1665.68,1210.54 1666.26,1205.96 1666.85,1208.91 1667.44,1209.36 1668.02,1210.89 1668.61,1209.45 1669.2,1208.05 1669.78,1208.95 1670.37,1212.07 1670.96,1212.1 1671.54,1212.1 1672.13,1211.88 1672.71,1210.21 1673.3,1211.63 1673.89,1216.02 1674.47,1218.84 1675.06,1216.92 1675.65,1217.89 1676.23,1216.02 1676.82,1215.76 1677.41,1216.99 1677.99,1215.1 1678.58,1216.11 1679.17,1220.09 1679.75,1218.19 1680.34,1217.78 1680.92,1214.36 1681.51,1212.62 1682.1,1211.07 1682.68,1210.94 1683.27,1209.43 1683.86,1209.62 1684.44,1210.88 1685.03,1213.82 1685.62,1211.05 1686.2,1207.82 1686.79,1206.45 1687.37,1205.09 1687.96,1206.83 1688.55,1206.76 1689.13,1204.18 1689.72,1200.29 1690.31,1200.83 1690.89,1202.94 1691.48,1203.27 1692.07,1203.09 1692.65,1204.71 1693.24,1200.59 1693.83,1200.71 1694.41,1199.86 1695,1198.72 1695.58,1201.15 1696.17,1202.09 1696.76,1202.36 1697.34,1202.73 1697.93,1201.67 1698.52,1202.44 1699.1,1203.07 1699.69,1203.85 1700.28,1204.5 1700.86,1204.76 1701.45,1206.23 1702.04,1204.93 1702.62,1205.18 1703.21,1205.61 1703.79,1207.31 1704.38,1209.25 1704.97,1209.36 1705.55,1208.07 1706.14,1208.14 1706.73,1207.11 1707.31,1208.64 1707.9,1208.47 1708.49,1208.82 1709.07,1209.1 1709.66,1210.46 1710.24,1211.68 1710.83,1210.02 1711.42,1208.62 1712,1207.32 1712.59,1207.6 1713.18,1209.02 1713.76,1210.67 1714.35,1212.12 1714.94,1210.54 1715.52,1212.05 1716.11,1210.69 1716.7,1212.42 1717.28,1215.34 1717.87,1215.38 1718.45,1214.9 1719.04,1213.37 1719.63,1214.53 1720.21,1215.49 1720.8,1215.44 1721.39,1215.51 1721.97,1216.51 1722.56,1216.32 1723.15,1217.04 1723.73,1218.13 1724.32,1214.76 1724.91,1212.88 1725.49,1209.58 1726.08,1213.77 1726.66,1212.22 1727.25,1216.36 1727.84,1217.53 1728.42,1216.87 1729.01,1220.62 1729.6,1218.77 1730.18,1220.76 1730.77,1221.97 1731.36,1222.44 1731.94,1223.59 1732.53,1224.29 1733.11,1220.75 1733.7,1214.43 1734.29,1212.76 1734.87,1214.28 1735.46,1214.08 1736.05,1212.59 1736.63,1213.52 1737.22,1211.71 1737.81,1211.54 1738.39,1208.63 1738.98,1207.04 1739.57,1208.62 1740.15,1208.66 1740.74,1210.14 1741.32,1208.65 1741.91,1206.03 1742.5,1206.05 1743.08,1206.17 1743.67,1206.48 1744.26,1206.71 1744.84,1207.29 1745.43,1204.52 1746.02,1204.63 1746.6,1203.43 1747.19,1203.97 1747.78,1204.46 1748.36,1201.84 1748.95,1200.89 1749.53,1205.36 1750.12,1202.86 1750.71,1203.4 1751.29,1203.82 1751.88,1205.75 1752.47,1205.59 1753.05,1205.69 1753.64,1208.85 1754.23,1208.74 1754.81,1209.08 1755.4,1210.78 1755.99,1210.75 1756.57,1209.18 1757.16,1210.77 1757.74,1210.82 1758.33,1206.5 1758.92,1206.2 1759.5,1207.61 1760.09,1209.15 1760.68,1210.9 1761.26,1209.23 1761.85,1210.9 1762.44,1209.14 1763.02,1210.3 1763.61,1208.91 1764.19,1206.09 1764.78,1209.04 1765.37,1209.02 1765.95,1210.36 1766.54,1210.59 1767.13,1212.22 1767.71,1212.01 1768.3,1208.99 1768.89,1210.39 1769.47,1211.62 1770.06,1211.96 1770.65,1214.52 1771.23,1215.91 1771.82,1212.79 1772.4,1214.08 1772.99,1212.55 1773.58,1208.52 1774.16,1210.2 1774.75,1210.14 1775.34,1212.85 1775.92,1216.88 1776.51,1217.85 1777.1,1214.72 1777.68,1215.82 1778.27,1218.06 1778.86,1217.55 1779.44,1217.36 1780.03,1216.96 1780.61,1216.73 1781.2,1216.36 1781.79,1215.99 1782.37,1217.08 1782.96,1213.74 1783.55,1213.62 1784.13,1209.54 1784.72,1206.86 1785.31,1204.06 1785.89,1207.07 1786.48,1207.41 1787.06,1207.39 1787.65,1206.47 1788.24,1206.63 1788.82,1205.58 1789.41,1208.69 1790,1207.25 1790.58,1205.93 1791.17,1207.57 1791.76,1205.05 1792.34,1205.61 1792.93,1204.52 1793.52,1204.97 1794.1,1205.35 1794.69,1204.27 1795.27,1207.58 1795.86,1213.21 1796.45,1214.17 1797.03,1214.18 1797.62,1213.97 1798.21,1215.29 1798.79,1216.16 1799.38,1214.4 1799.97,1212.83 1800.55,1212.59 1801.14,1212.03 1801.73,1210.14 1802.31,1211.48 1802.9,1211.98 1803.48,1211.87 1804.07,1210.19 1804.66,1210 1805.24,1210.11 1805.83,1210.11 1806.42,1209 1807,1208.7 1807.59,1210.35 1808.18,1211.86 1808.76,1210.22 1809.35,1207.43 1809.94,1210.21 1810.52,1211.74 1811.11,1212.95 1811.69,1213.01 1812.28,1211.53 1812.87,1211.46 1813.45,1210.18 1814.04,1211.64 1814.63,1210.3 1815.21,1207.56 1815.8,1207.88 1816.39,1207.91 1816.97,1210.63 1817.56,1212.11 1818.14,1211.78 1818.73,1213.01 1819.32,1207.18 1819.9,1208.67 1820.49,1208.63 1821.08,1201.4 1821.66,1202.02 1822.25,1201.17 1822.84,1197.07 1823.42,1199.12 1824.01,1199.65 1824.6,1203.06 1825.18,1206.33 1825.77,1206.64 1826.35,1206.74 1826.94,1206.82 1827.53,1202.89 1828.11,1203.15 1828.7,1206.61 1829.29,1207.25 1829.87,1207.63 1830.46,1207.75 1831.05,1207.97 1831.63,1206.71 1832.22,1208.55 1832.81,1212.93 1833.39,1212.67 1833.98,1211.08 1834.56,1212.47 1835.15,1213.66 1835.74,1215.12 1836.32,1217.64 1836.91,1217.26 1837.5,1216.82 1838.08,1213.5 1838.67,1213.72 1839.26,1215.15 1839.84,1212.22 1840.43,1209.57 1841.01,1209.45 1841.6,1206.87 1842.19,1205.86 1842.77,1206.06 1843.36,1204.97 1843.95,1205.4 1844.53,1204.5 1845.12,1203.39 1845.71,1203.57 1846.29,1204.03 1846.88,1202.79 1847.47,1204.53 1848.05,1203.51 1848.64,1205.55 1849.22,1203.12 1849.81,1206.39 1850.4,1207.97 1850.98,1206.5 1851.57,1208.2 1852.16,1209.79 1852.74,1211.28 1853.33,1208.52 1853.92,1207.25 1854.5,1207.33 1855.09,1206.18 1855.68,1204.74 1856.26,1204.84 1856.85,1205.17 1857.43,1205.54 1858.02,1205.79 1858.61,1206 1859.19,1206.08 1859.78,1204.91 1860.37,1203.75 1860.95,1204.2 1861.54,1204.35 1862.13,1206.02 1862.71,1207.69 1863.3,1210.71 1863.88,1209.39 1864.47,1210.81 1865.06,1212.17 1865.64,1213.32 1866.23,1214.46 1866.82,1213.8 1867.4,1214.07 1867.99,1213.96 1868.58,1215.25 1869.16,1214.94 1869.75,1211.67 1870.34,1211.57 1870.92,1213.26 1871.51,1211.92 1872.09,1212 1872.68,1211.84 1873.27,1212.97 1873.85,1212.88 1874.44,1212.6 1875.03,1215.21 1875.61,1212.33 1876.2,1215.42 1876.79,1215.1 1877.37,1214.93 1877.96,1217.35 1878.55,1216.63 1879.13,1214.79 1879.72,1217.68 1880.3,1215.64 1880.89,1212.77 1881.48,1213.91 1882.06,1213.8 1882.65,1214.77 1883.24,1218.87 1883.82,1215.82 1884.41,1215.35 1885,1213.6 1885.58,1213.49 1886.17,1208.96 1886.76,1206.33 1887.34,1205.43 1887.93,1204.16 1888.51,1206.08 1889.1,1207.43 1889.69,1209.01 1890.27,1213.4 1890.86,1210.59 1891.45,1213.31 1892.03,1208.59 1892.62,1208.63 1893.21,1207.34 1893.79,1207.49 1894.38,1206.1 1894.96,1207.98 1895.55,1209.37 1896.14,1208.21 1896.72,1209.73 1897.31,1208.4 1897.9,1208.32 1898.48,1205.49 1899.07,1207.15 1899.66,1206.18 1900.24,1204.76 1900.83,1209.13 1901.42,1209.22 1902,1209.31 1902.59,1206.66 1903.17,1206.35 1903.76,1206.48 1904.35,1208.23 1904.93,1209.86 1905.52,1211.34 1906.11,1211.22 1906.69,1209.76 1907.28,1210.07 1907.87,1204.44 1908.45,1204.6 1909.04,1204.76 1909.63,1208.11 1910.21,1209.86 1910.8,1211.3 1911.38,1212.67 1911.97,1215.62 1912.56,1212.6 1913.14,1213.86 1913.73,1216.54 1914.32,1216.17 1914.9,1214.34 1915.49,1214.41 1916.08,1212.5 1916.66,1213.53 1917.25,1211.8 1917.83,1214.45 1918.42,1214.58 1919.01,1214.32 1919.59,1215.48 1920.18,1218.18 1920.77,1219.08 1921.35,1221.62 1921.94,1220.77 1922.53,1221.89 1923.11,1221.43 1923.7,1221.09 1924.29,1224.71 1924.87,1222.51 1925.46,1220.41 1926.04,1219.6 1926.63,1220.56 1927.22,1218.6 1927.8,1218.33 1928.39,1216.36 1928.98,1216.16 1929.56,1217.59 1930.15,1217.3 1930.74,1220.95 1931.32,1220.38 1931.91,1218.38 1932.5,1216.04 1933.08,1214.59 1933.67,1211.59 1934.25,1212.88 1934.84,1214.29 1935.43,1218.6 1936.01,1218.05 1936.6,1216.32 1937.19,1215.83 1937.77,1215.47 1938.36,1216.48 1938.95,1214.73 1939.53,1214.35 1940.12,1212.67 1940.71,1214.2 1941.29,1213.69 1941.88,1212.1 1942.46,1213.28 1943.05,1211.59 1943.64,1215.7 1944.22,1215.45 1944.81,1213.78 1945.4,1217.99 1945.98,1217.42 1946.57,1218.63 1947.16,1216.76 1947.74,1217.88 1948.33,1217.54 1948.91,1217.09 1949.5,1214 1950.09,1213.89 1950.67,1215.06 1951.26,1213.71 1951.85,1213.46 1952.43,1213.56 1953.02,1211.93 1953.61,1210.31 1954.19,1209.1 1954.78,1209.28 1955.37,1209.31 1955.95,1207.44 1956.54,1210.45 1957.12,1213.53 1957.71,1212.27 1958.3,1210.7 1958.88,1210.52 1959.47,1210.34 1960.06,1211.89 1960.64,1213.25 1961.23,1211.24 1961.82,1211.27 1962.4,1212.52 1962.99,1216.41 1963.58,1215.98 1964.16,1218.34 1964.75,1210.5 1965.33,1207.39 1965.92,1207.81 1966.51,1210.84 1967.09,1208.21 1967.68,1211.17 1968.27,1208.13 1968.85,1206.73 1969.44,1212.74 1970.03,1214.11 1970.61,1216.9 1971.2,1209.51 1971.78,1210.87 1972.37,1210.76 1972.96,1210.53 1973.54,1210.48 1974.13,1210.49 1974.72,1209.1 1975.3,1204.87 1975.89,1199.34 1976.48,1201.15 1977.06,1201.44 1977.65,1204.59 1978.24,1203.55 1978.82,1205.7 1979.41,1206.14 1979.99,1201.75 1980.58,1202.23 1981.17,1205.41 1981.75,1208.2 1982.34,1211.26 1982.93,1210.27 1983.51,1211.55 1984.1,1211.55 1984.69,1210.02 1985.27,1210.26 1985.86,1210 1986.45,1211.63 1987.03,1210.29 1987.62,1208.91 1988.2,1211.61 1988.79,1211.73 1989.38,1211.5 1989.96,1212.6 1990.55,1208.5 1991.14,1210.12 1991.72,1211.65 1992.31,1211.76 1992.9,1211.72 1993.48,1214.43 1994.07,1213.84 1994.65,1212.02 1995.24,1210.3 1995.83,1210.36 1996.41,1210.41 1997,1207.51 1997.59,1207.61 1998.17,1207.46 1998.76,1209.19 1999.35,1207.92 1999.93,1209.74 2000.52,1206.8 2001.11,1206.85 2001.69,1203.97 2002.28,1203.04 2002.86,1203.65 2003.45,1204.01 2004.04,1205.8 2004.62,1205.96 2005.21,1204.79 2005.8,1200.74 2006.38,1201.46 2006.97,1203.56 2007.56,1199.82 2008.14,1203.45 2008.73,1204.09 2009.32,1207.55 2009.9,1210.47 2010.49,1211.96 2011.07,1210.49 2011.66,1207.39 2012.25,1206 2012.83,1205.89 2013.42,1207.41 2014.01,1206.4 2014.59,1209.24 2015.18,1209.19 2015.77,1209.42 2016.35,1206.81 2016.94,1207.03 2017.53,1211.68 2018.11,1214.64 2018.7,1215.64 2019.28,1218.4 2019.87,1216.58 2020.46,1214.92 2021.04,1213.12 2021.63,1212.87 2022.22,1215.22 2022.8,1215.04 2023.39,1215.17 2023.98,1215.14 2024.56,1216.32 2025.15,1218.75 2025.73,1213.79 2026.32,1212.11 2026.91,1211.95 2027.49,1210.63 2028.08,1211.89 2028.67,1211.72 2029.25,1210.47 2029.84,1210.02 2030.43,1210.42 2031.01,1210.31 2031.6,1210.45 2032.19,1206.24 2032.77,1205.08 2033.36,1203.87 2033.94,1206.12 2034.53,1208.05 2035.12,1207.92 2035.7,1206.23 2036.29,1206.47 2036.88,1205.2 2037.46,1205.46 2038.05,1204.32 2038.64,1206.08 2039.22,1203.11 2039.81,1203.56 2040.4,1202.67 2040.98,1204.68 2041.57,1203.36 2042.15,1203.91 2042.74,1207.27 2043.33,1207.46 2043.91,1210.53 2044.5,1212.01 2045.09,1213.22 2045.67,1208.9 2046.26,1207.53 2046.85,1207.47 2047.43,1207.26 2048.02,1204.49 2048.6,1206.03 2049.19,1207.78 2049.78,1209.09 2050.36,1209.1 2050.95,1206.27 2051.54,1206.43 2052.12,1202.38 2052.71,1204.32 2053.3,1205.74 2053.88,1204.41 2054.47,1203.05 2055.06,1203.34 2055.64,1206.44 2056.23,1208.43 2056.81,1207.1 2057.4,1205.46 2057.99,1205.59 2058.57,1211.51 2059.16,1211.38 2059.75,1213.87 2060.33,1213.81 2060.92,1214.95 2061.51,1214.91 2062.09,1213.4 2062.68,1213.19 2063.27,1214.34 2063.85,1216.8 2064.44,1216.43 2065.02,1217.49 2065.61,1215.75 2066.2,1215.02 2066.78,1216.06 2067.37,1214.12 2067.96,1207.69 2068.54,1209.05 2069.13,1210.43 2069.72,1208.85 2070.3,1206.18 2070.89,1207.94 2071.48,1205.11 2072.06,1203.75 2072.65,1200.02 2073.23,1203.51 2073.82,1199.66 2074.41,1200.38 2074.99,1202.44 2075.58,1201.33 2076.17,1202.01 2076.75,1200.85 2077.34,1202.73 2077.93,1203.12 2078.51,1206.2 2079.1,1206.49 2079.68,1205.37 2080.27,1205.37 2080.86,1207.17 2081.44,1211.82 2082.03,1211.99 2082.62,1211.95 2083.2,1211.71 2083.79,1213.37 2084.38,1213.22 2084.96,1211.78 2085.55,1211.83 2086.14,1210.59 2086.72,1210.65 2087.31,1207.84 2087.89,1205.01 2088.48,1203.9 2089.07,1198.44 2089.65,1200.34 2090.24,1203.71 2090.83,1204.23 2091.41,1207.35 2092,1209.23 2092.59,1210.21 2093.17,1210.07 2093.76,1209.99 2094.35,1210.13 2094.93,1212.89 2095.52,1215.57 2096.1,1218.09 2096.69,1216.41 2097.28,1216.04 2097.86,1215.93 2098.45,1215.69 2099.04,1212.54 2099.62,1214.19 2100.21,1216.85 2100.8,1216.39 2101.38,1214.71 2101.97,1215.99 2102.55,1215.47 2103.14,1216.35 2103.73,1213.17 2104.31,1210.17 2104.9,1209.98 2105.49,1210.04 2106.07,1213.04 2106.66,1211.47 2107.25,1212.94 2107.83,1214.18 2108.42,1216.71 2109.01,1215.26 2109.59,1213.54 2110.18,1213.45 2110.76,1216.38 2111.35,1215.99 2111.94,1215.64 2112.52,1213.55 2113.11,1212 2113.7,1214.95 2114.28,1217.61 2114.87,1215.81 2115.46,1216.76 2116.04,1216.25 2116.63,1210.14 2117.22,1208.72 2117.8,1207.23 2118.39,1205.9 2118.97,1204.59 2119.56,1206.28 2120.15,1207.88 2120.73,1207.85 2121.32,1207.87 2121.91,1205.32 2122.49,1206.96 2123.08,1208.37 2123.67,1207.07 2124.25,1205.73 2124.84,1206.17 2125.42,1204.96 2126.01,1203.5 2126.6,1200.72 2127.18,1202.9 2127.77,1204.65 2128.36,1204.94 2128.94,1204.04 2129.53,1203 2130.12,1201.93 2130.7,1200.75 2131.29,1199.88 2131.88,1201.84 2132.46,1203.83 2133.05,1204.2 2133.63,1208.82 2134.22,1209.02 2134.81,1210.53 2135.39,1211.99 2135.98,1211.97 2136.57,1212.13 2137.15,1212.16 2137.74,1213.49 2138.33,1213.39 2138.91,1210.38 2139.5,1207.29 2140.09,1208.88 2140.67,1207.22 2141.26,1207.47 2141.84,1205.06 2142.43,1205.58 2143.02,1208.51 2143.6,1206.14 2144.19,1205.51 2144.78,1205.64 2145.36,1207.37 2145.95,1205.72 2146.54,1207.3 2147.12,1207.34 2147.71,1206.01 2148.3,1203.01 2148.88,1205.04 2149.47,1203.77 2150.05,1202.8 2150.64,1203.2 2151.23,1202.14 2151.81,1204.17 2152.4,1203.19 2152.99,1205.11 2153.57,1205.43 2154.16,1207.3 2154.75,1207.3 2155.33,1210.41 2155.92,1209.21 2156.5,1211 2157.09,1211 2157.68,1212.07 2158.26,1214.75 \"/>\n<path clip-path=\"url(#clip702)\" d=\"M986.025 1210.54 L986.612 1210.54 L987.198 1210.54 L987.785 1210.54 L988.371 1210.54 L988.957 1210.54 L989.544 1210.54 L990.13 1210.54 L990.717 1210.54 L991.303 1210.54 L991.889 1210.54 L992.476 1210.54 L993.062 1210.54 L993.649 1210.54 L994.235 1210.54 L994.822 1210.54 L995.408 1210.54 L995.994 1210.54 L996.581 1210.54 L997.167 1210.54 L997.754 1210.54 L998.34 1210.54 L998.926 1210.54 L999.513 1210.54 L1000.1 1210.54 L1000.69 1210.54 L1001.27 1210.54 L1001.86 1210.54 L1002.44 1210.54 L1003.03 1210.54 L1003.62 1210.54 L1004.2 1210.54 L1004.79 1210.54 L1005.38 1210.54 L1005.96 1210.54 L1006.55 1210.54 L1007.14 1210.54 L1007.72 1210.54 L1008.31 1210.54 L1008.9 1210.54 L1009.48 1210.54 L1010.07 1210.54 L1010.65 1210.54 L1011.24 1210.54 L1011.83 1210.54 L1012.41 1210.54 L1013 1210.54 L1013.59 1210.54 L1014.17 1210.54 L1014.76 1210.54 L1015.35 1210.54 L1015.93 1210.54 L1016.52 1210.54 L1017.11 1210.54 L1017.69 1210.54 L1018.28 1210.54 L1018.86 1210.54 L1019.45 1210.54 L1020.04 1210.54 L1020.62 1210.54 L1021.21 1210.54 L1021.8 1210.54 L1022.38 1210.54 L1022.97 1210.54 L1023.56 1210.54 L1024.14 1210.54 L1024.73 1210.54 L1025.32 1210.54 L1025.9 1210.54 L1026.49 1210.54 L1027.07 1210.54 L1027.66 1210.54 L1028.25 1210.54 L1028.83 1210.54 L1029.42 1210.54 L1030.01 1210.54 L1030.59 1210.54 L1031.18 1210.54 L1031.77 1210.54 L1032.35 1210.54 L1032.94 1210.54 L1033.52 1210.54 L1034.11 1210.54 L1034.7 1210.54 L1035.28 1210.54 L1035.87 1210.54 L1036.46 1210.54 L1037.04 1210.54 L1037.63 1210.54 L1038.22 1210.54 L1038.8 1210.54 L1039.39 1210.54 L1039.98 1210.54 L1040.56 1210.54 L1041.15 1210.54 L1041.73 1210.54 L1042.32 1210.54 L1042.91 1210.54 L1043.49 1210.54 L1044.08 1210.54 L1044.67 1210.54 L1045.25 1210.54 L1045.84 1210.54 L1046.43 1210.54 L1047.01 1210.54 L1047.6 1210.54 L1048.19 1210.54 L1048.77 1210.54 L1049.36 1210.54 L1049.94 1210.54 L1050.53 1210.54 L1051.12 1210.54 L1051.7 1210.54 L1052.29 1210.54 L1052.88 1210.54 L1053.46 1210.54 L1054.05 1210.54 L1054.64 1210.54 L1055.22 1210.54 L1055.81 1210.54 L1056.39 1210.54 L1056.98 1210.54 L1057.57 1210.54 L1058.15 1210.54 L1058.74 1210.54 L1059.33 1210.54 L1059.91 1210.54 L1060.5 1210.54 L1061.09 1210.54 L1061.67 1210.54 L1062.26 1210.54 L1062.85 1210.54 L1063.43 1210.54 L1064.02 1210.54 L1064.6 1210.54 L1065.19 1210.54 L1065.78 1210.54 L1066.36 1210.54 L1066.95 1210.54 L1067.54 1210.54 L1068.12 1210.54 L1068.71 1210.54 L1069.3 1210.54 L1069.88 1210.54 L1070.47 1210.54 L1071.06 1210.54 L1071.64 1210.54 L1072.23 1210.54 L1072.81 1210.54 L1073.4 1210.54 L1073.99 1210.54 L1074.57 1210.54 L1075.16 1210.54 L1075.75 1210.54 L1076.33 1210.54 L1076.92 1210.54 L1077.51 1210.54 L1078.09 1210.54 L1078.68 1210.54 L1079.26 1210.54 L1079.85 1210.54 L1080.44 1210.54 L1081.02 1210.54 L1081.61 1210.54 L1082.2 1210.54 L1082.78 1210.54 L1083.37 1210.54 L1083.96 1210.54 L1084.54 1210.54 L1085.13 1210.54 L1085.72 1210.54 L1086.3 1210.54 L1086.89 1210.54 L1087.47 1210.54 L1088.06 1210.54 L1088.65 1210.54 L1089.23 1210.54 L1089.82 1210.54 L1090.41 1210.54 L1090.99 1210.54 L1091.58 1210.54 L1092.17 1210.54 L1092.75 1210.54 L1093.34 1210.54 L1093.93 1210.54 L1094.51 1210.54 L1095.1 1210.54 L1095.68 1210.54 L1096.27 1210.54 L1096.86 1210.54 L1097.44 1210.54 L1098.03 1210.54 L1098.62 1210.54 L1099.2 1210.54 L1099.79 1210.54 L1100.38 1210.54 L1100.96 1210.54 L1101.55 1210.54 L1102.14 1210.54 L1102.72 1210.54 L1103.31 1210.54 L1103.89 1210.54 L1104.48 1210.54 L1105.07 1210.54 L1105.65 1210.54 L1106.24 1210.54 L1106.83 1210.54 L1107.41 1210.54 L1108 1210.54 L1108.59 1210.54 L1109.17 1210.54 L1109.76 1210.54 L1110.34 1210.54 L1110.93 1210.54 L1111.52 1210.54 L1112.1 1210.54 L1112.69 1210.54 L1113.28 1210.54 L1113.86 1210.54 L1114.45 1210.54 L1115.04 1210.54 L1115.62 1210.54 L1116.21 1210.54 L1116.8 1210.54 L1117.38 1210.54 L1117.97 1210.54 L1118.55 1210.54 L1119.14 1210.54 L1119.73 1210.54 L1120.31 1210.54 L1120.9 1210.54 L1121.49 1210.54 L1122.07 1210.54 L1122.66 1210.54 L1123.25 1210.54 L1123.83 1210.54 L1124.42 1210.54 L1125.01 1210.54 L1125.59 1210.54 L1126.18 1210.54 L1126.76 1210.54 L1127.35 1210.54 L1127.94 1210.54 L1128.52 1210.54 L1129.11 1210.54 L1129.7 1210.54 L1130.28 1210.54 L1130.87 1210.54 L1131.46 1210.54 L1132.04 1210.54 L1132.63 1210.54 L1133.21 1210.54 L1133.8 1210.54 L1134.39 1210.54 L1134.97 1210.54 L1135.56 1210.54 L1136.15 1210.54 L1136.73 1210.54 L1137.32 1210.54 L1137.91 1210.54 L1138.49 1210.54 L1139.08 1210.54 L1139.67 1210.54 L1140.25 1210.54 L1140.84 1210.54 L1141.42 1210.54 L1142.01 1210.54 L1142.6 1210.54 L1143.18 1210.54 L1143.77 1210.54 L1144.36 1210.54 L1144.94 1210.54 L1145.53 1210.54 L1146.12 1210.54 L1146.7 1210.54 L1147.29 1210.54 L1147.88 1210.54 L1148.46 1210.54 L1149.05 1210.54 L1149.63 1210.54 L1150.22 1210.54 L1150.81 1210.54 L1151.39 1210.54 L1151.98 1210.54 L1152.57 1210.54 L1153.15 1210.54 L1153.74 1210.54 L1154.33 1210.54 L1154.91 1210.54 L1155.5 1210.54 L1156.09 1210.54 L1156.67 1210.54 L1157.26 1210.54 L1157.84 1210.54 L1158.43 1210.54 L1159.02 1210.54 L1159.6 1210.54 L1160.19 1210.54 L1160.78 1210.54 L1161.36 1210.54 L1161.95 1210.54 L1162.54 1210.54 L1163.12 1210.54 L1163.71 1210.54 L1164.29 1210.54 L1164.88 1210.54 L1165.47 1210.54 L1166.05 1210.54 L1166.64 1210.54 L1167.23 1210.54 L1167.81 1210.54 L1168.4 1210.54 L1168.99 1210.54 L1169.57 1210.54 L1170.16 1210.54 L1170.75 1210.54 L1171.33 1210.54 L1171.92 1210.54 L1172.5 1210.54 L1173.09 1210.54 L1173.68 1210.54 L1174.26 1210.54 L1174.85 1210.54 L1175.44 1210.54 L1176.02 1210.54 L1176.61 1210.54 L1177.2 1210.54 L1177.78 1210.54 L1178.37 1210.54 L1178.96 1210.54 L1179.54 1210.54 L1180.13 1210.54 L1180.71 1210.54 L1181.3 1210.54 L1181.89 1210.54 L1182.47 1210.54 L1183.06 1210.54 L1183.65 1210.54 L1184.23 1210.54 L1184.82 1210.54 L1185.41 1210.54 L1185.99 1210.54 L1186.58 1210.54 L1187.16 1210.54 L1187.75 1210.54 L1188.34 1210.54 L1188.92 1210.54 L1189.51 1210.54 L1190.1 1210.54 L1190.68 1210.54 L1191.27 1210.54 L1191.86 1210.54 L1192.44 1210.54 L1193.03 1210.54 L1193.62 1210.54 L1194.2 1210.54 L1194.79 1210.54 L1195.37 1210.54 L1195.96 1210.54 L1196.55 1210.54 L1197.13 1210.54 L1197.72 1210.54 L1198.31 1210.54 L1198.89 1210.54 L1199.48 1210.54 L1200.07 1210.54 L1200.65 1210.54 L1201.24 1210.54 L1201.83 1210.54 L1202.41 1210.54 L1203 1210.54 L1203.58 1210.54 L1204.17 1210.54 L1204.76 1210.54 L1205.34 1210.54 L1205.93 1210.54 L1206.52 1210.54 L1207.1 1210.54 L1207.69 1210.54 L1208.28 1210.54 L1208.86 1210.54 L1209.45 1210.54 L1210.03 1210.54 L1210.62 1210.54 L1211.21 1210.54 L1211.79 1210.54 L1212.38 1210.54 L1212.97 1210.54 L1213.55 1210.54 L1214.14 1210.54 L1214.73 1210.54 L1215.31 1210.54 L1215.9 1210.54 L1216.49 1210.54 L1217.07 1210.54 L1217.66 1210.54 L1218.24 1210.54 L1218.83 1210.54 L1219.42 1210.54 L1220 1210.54 L1220.59 1210.54 L1221.18 1210.54 L1221.76 1210.54 L1222.35 1210.54 L1222.94 1210.54 L1223.52 1210.54 L1224.11 1210.54 L1224.7 1210.54 L1225.28 1210.54 L1225.87 1210.54 L1226.45 1210.54 L1227.04 1210.54 L1227.63 1210.54 L1228.21 1210.54 L1228.8 1210.54 L1229.39 1210.54 L1229.97 1210.54 L1230.56 1210.54 L1231.15 1210.54 L1231.73 1210.54 L1232.32 1210.54 L1232.91 1210.54 L1233.49 1210.54 L1234.08 1210.54 L1234.66 1210.54 L1235.25 1210.54 L1235.84 1210.54 L1236.42 1210.54 L1237.01 1210.54 L1237.6 1210.54 L1238.18 1210.54 L1238.77 1210.54 L1239.36 1210.54 L1239.94 1210.54 L1240.53 1210.54 L1241.11 1210.54 L1241.7 1210.54 L1242.29 1210.54 L1242.87 1210.54 L1243.46 1210.54 L1244.05 1210.54 L1244.63 1210.54 L1245.22 1210.54 L1245.81 1210.54 L1246.39 1210.54 L1246.98 1210.54 L1247.57 1210.54 L1248.15 1210.54 L1248.74 1210.54 L1249.32 1210.54 L1249.91 1210.54 L1250.5 1210.54 L1251.08 1210.54 L1251.67 1210.54 L1252.26 1210.54 L1252.84 1210.54 L1253.43 1210.54 L1254.02 1210.54 L1254.6 1210.54 L1255.19 1210.54 L1255.78 1210.54 L1256.36 1210.54 L1256.95 1210.54 L1257.53 1210.54 L1258.12 1210.54 L1258.71 1210.54 L1259.29 1210.54 L1259.88 1210.54 L1260.47 1210.54 L1261.05 1210.54 L1261.64 1210.54 L1262.23 1210.54 L1262.81 1210.54 L1263.4 1210.54 L1263.98 1210.54 L1264.57 1210.54 L1265.16 1210.54 L1265.74 1210.54 L1266.33 1210.54 L1266.92 1210.54 L1267.5 1210.54 L1268.09 1210.54 L1268.68 1210.54 L1269.26 1210.54 L1269.85 1210.54 L1270.44 1210.54 L1271.02 1210.54 L1271.61 1210.54 L1272.19 1210.54 L1272.78 1210.54 L1273.37 1210.54 L1273.95 1210.54 L1274.54 1210.54 L1275.13 1210.54 L1275.71 1210.54 L1276.3 1210.54 L1276.89 1210.54 L1277.47 1210.54 L1278.06 1210.54 L1278.65 1210.54 L1279.23 1210.54 L1279.82 1210.54 L1280.4 1210.54 L1280.99 1210.54 L1281.58 1210.54 L1282.16 1210.54 L1282.75 1210.54 L1283.34 1210.54 L1283.92 1210.54 L1284.51 1210.54 L1285.1 1210.54 L1285.68 1210.54 L1286.27 1210.54 L1286.86 1210.54 L1287.44 1210.54 L1288.03 1210.54 L1288.61 1210.54 L1289.2 1210.54 L1289.79 1210.54 L1290.37 1210.54 L1290.96 1210.54 L1291.55 1210.54 L1292.13 1210.54 L1292.72 1210.54 L1293.31 1210.54 L1293.89 1210.54 L1294.48 1210.54 L1295.06 1210.54 L1295.65 1210.54 L1296.24 1210.54 L1296.82 1210.54 L1297.41 1210.54 L1298 1210.54 L1298.58 1210.54 L1299.17 1210.54 L1299.76 1210.54 L1300.34 1210.54 L1300.93 1210.54 L1301.52 1210.54 L1302.1 1210.54 L1302.69 1210.54 L1303.27 1210.54 L1303.86 1210.54 L1304.45 1210.54 L1305.03 1210.54 L1305.62 1210.54 L1306.21 1210.54 L1306.79 1210.54 L1307.38 1210.54 L1307.97 1210.54 L1308.55 1210.54 L1309.14 1210.54 L1309.73 1210.54 L1310.31 1210.54 L1310.9 1210.54 L1311.48 1210.54 L1312.07 1210.54 L1312.66 1210.54 L1313.24 1210.54 L1313.83 1210.54 L1314.42 1210.54 L1315 1210.54 L1315.59 1210.54 L1316.18 1210.54 L1316.76 1210.54 L1317.35 1210.54 L1317.93 1210.54 L1318.52 1210.54 L1319.11 1210.54 L1319.69 1210.54 L1320.28 1210.54 L1320.87 1210.54 L1321.45 1210.54 L1322.04 1210.54 L1322.63 1210.54 L1323.21 1210.54 L1323.8 1210.54 L1324.39 1210.54 L1324.97 1210.54 L1325.56 1210.54 L1326.14 1210.54 L1326.73 1210.54 L1327.32 1210.54 L1327.9 1210.54 L1328.49 1210.54 L1329.08 1210.54 L1329.66 1210.54 L1330.25 1210.54 L1330.84 1210.54 L1331.42 1210.54 L1332.01 1210.54 L1332.6 1210.54 L1333.18 1210.54 L1333.77 1210.54 L1334.35 1210.54 L1334.94 1210.54 L1335.53 1210.54 L1336.11 1210.54 L1336.7 1210.54 L1337.29 1210.54 L1337.87 1210.54 L1338.46 1210.54 L1339.05 1210.54 L1339.63 1210.54 L1340.22 1210.54 L1340.8 1210.54 L1341.39 1210.54 L1341.98 1210.54 L1342.56 1210.54 L1343.15 1210.54 L1343.74 1210.54 L1344.32 1210.54 L1344.91 1210.54 L1345.5 1210.54 L1346.08 1210.54 L1346.67 1210.54 L1347.26 1210.54 L1347.84 1210.54 L1348.43 1210.54 L1349.01 1210.54 L1349.6 1210.54 L1350.19 1210.54 L1350.77 1210.54 L1351.36 1210.54 L1351.95 1210.54 L1352.53 1210.54 L1353.12 1210.54 L1353.71 1210.54 L1354.29 1210.54 L1354.88 1210.54 L1355.47 1210.54 L1356.05 1210.54 L1356.64 1210.54 L1357.22 1210.54 L1357.81 1210.54 L1358.4 1210.54 L1358.98 1210.54 L1359.57 1210.54 L1360.16 1210.54 L1360.74 1210.54 L1361.33 1210.54 L1361.92 1210.54 L1362.5 1210.54 L1363.09 1210.54 L1363.68 1210.54 L1364.26 1210.54 L1364.85 1210.54 L1365.43 1210.54 L1366.02 1210.54 L1366.61 1210.54 L1367.19 1210.54 L1367.78 1210.54 L1368.37 1210.54 L1368.95 1210.54 L1369.54 1210.54 L1370.13 1210.54 L1370.71 1210.54 L1371.3 1210.54 L1371.88 1210.54 L1372.47 1210.54 L1373.06 1210.54 L1373.64 1210.54 L1374.23 1210.54 L1374.82 1210.54 L1375.4 1210.54 L1375.99 1210.54 L1376.58 1210.54 L1377.16 1210.54 L1377.75 1210.54 L1378.34 1210.54 L1378.92 1210.54 L1379.51 1210.54 L1380.09 1210.54 L1380.68 1210.54 L1381.27 1210.54 L1381.85 1210.54 L1382.44 1210.54 L1383.03 1210.54 L1383.61 1210.54 L1384.2 1210.54 L1384.79 1210.54 L1385.37 1210.54 L1385.96 1210.54 L1386.55 1210.54 L1387.13 1210.54 L1387.72 1210.54 L1388.3 1210.54 L1388.89 1210.54 L1389.48 1210.54 L1390.06 1210.54 L1390.65 1210.54 L1391.24 1210.54 L1391.82 1210.54 L1392.41 1210.54 L1393 1210.54 L1393.58 1210.54 L1394.17 1210.54 L1394.75 1210.54 L1395.34 1210.54 L1395.93 1210.54 L1396.51 1210.54 L1397.1 1210.54 L1397.69 1210.54 L1398.27 1210.54 L1398.86 1210.54 L1399.45 1210.54 L1400.03 1210.54 L1400.62 1210.54 L1401.21 1210.54 L1401.79 1210.54 L1402.38 1210.54 L1402.96 1210.54 L1403.55 1210.54 L1404.14 1210.54 L1404.72 1210.54 L1405.31 1210.54 L1405.9 1210.54 L1406.48 1210.54 L1407.07 1210.54 L1407.66 1210.54 L1408.24 1210.54 L1408.83 1210.54 L1409.42 1210.54 L1410 1210.54 L1410.59 1210.54 L1411.17 1210.54 L1411.76 1210.54 L1412.35 1210.54 L1412.93 1210.54 L1413.52 1210.54 L1414.11 1210.54 L1414.69 1210.54 L1415.28 1210.54 L1415.87 1210.54 L1416.45 1210.54 L1417.04 1210.54 L1417.63 1210.54 L1418.21 1210.54 L1418.8 1210.54 L1419.38 1210.54 L1419.97 1210.54 L1420.56 1210.54 L1421.14 1210.54 L1421.73 1210.54 L1422.32 1210.54 L1422.9 1210.54 L1423.49 1210.54 L1424.08 1210.54 L1424.66 1210.54 L1425.25 1210.54 L1425.83 1210.54 L1426.42 1210.54 L1427.01 1210.54 L1427.59 1210.54 L1428.18 1210.54 L1428.77 1210.54 L1429.35 1210.54 L1429.94 1210.54 L1430.53 1210.54 L1431.11 1210.54 L1431.7 1210.54 L1432.29 1210.54 L1432.87 1210.54 L1433.46 1210.54 L1434.04 1210.54 L1434.63 1210.54 L1435.22 1210.54 L1435.8 1210.54 L1436.39 1210.54 L1436.98 1210.54 L1437.56 1210.54 L1438.15 1210.54 L1438.74 1210.54 L1439.32 1210.54 L1439.91 1210.54 L1440.5 1210.54 L1441.08 1210.54 L1441.67 1210.54 L1442.25 1210.54 L1442.84 1210.54 L1443.43 1210.54 L1444.01 1210.54 L1444.6 1210.54 L1445.19 1210.54 L1445.77 1210.54 L1446.36 1210.54 L1446.95 1210.54 L1447.53 1210.54 L1448.12 1210.54 L1448.7 1210.54 L1449.29 1210.54 L1449.88 1210.54 L1450.46 1210.54 L1451.05 1210.54 L1451.64 1210.54 L1452.22 1210.54 L1452.81 1210.54 L1453.4 1210.54 L1453.98 1210.54 L1454.57 1210.54 L1455.16 1210.54 L1455.74 1210.54 L1456.33 1210.54 L1456.91 1210.54 L1457.5 1210.54 L1458.09 1210.54 L1458.67 1210.54 L1459.26 1210.54 L1459.85 1210.54 L1460.43 1210.54 L1461.02 1210.54 L1461.61 1210.54 L1462.19 1210.54 L1462.78 1210.54 L1463.37 1210.54 L1463.95 1210.54 L1464.54 1210.54 L1465.12 1210.54 L1465.71 1210.54 L1466.3 1210.54 L1466.88 1210.54 L1467.47 1210.54 L1468.06 1210.54 L1468.64 1210.54 L1469.23 1210.54 L1469.82 1210.54 L1470.4 1210.54 L1470.99 1210.54 L1471.57 1210.54 L1472.16 1210.54 L1472.75 1210.54 L1473.33 1210.54 L1473.92 1210.54 L1474.51 1210.54 L1475.09 1210.54 L1475.68 1210.54 L1476.27 1210.54 L1476.85 1210.54 L1477.44 1210.54 L1478.03 1210.54 L1478.61 1210.54 L1479.2 1210.54 L1479.78 1210.54 L1480.37 1210.54 L1480.96 1210.54 L1481.54 1210.54 L1482.13 1210.54 L1482.72 1210.54 L1483.3 1210.54 L1483.89 1210.54 L1484.48 1210.54 L1485.06 1210.54 L1485.65 1210.54 L1486.24 1210.54 L1486.82 1210.54 L1487.41 1210.54 L1487.99 1210.54 L1488.58 1210.54 L1489.17 1210.54 L1489.75 1210.54 L1490.34 1210.54 L1490.93 1210.54 L1491.51 1210.54 L1492.1 1210.54 L1492.69 1210.54 L1493.27 1210.54 L1493.86 1210.54 L1494.45 1210.54 L1495.03 1210.54 L1495.62 1210.54 L1496.2 1210.54 L1496.79 1210.54 L1497.38 1210.54 L1497.96 1210.54 L1498.55 1210.54 L1499.14 1210.54 L1499.72 1210.54 L1500.31 1210.54 L1500.9 1210.54 L1501.48 1210.54 L1502.07 1210.54 L1502.65 1210.54 L1503.24 1210.54 L1503.83 1210.54 L1504.41 1210.54 L1505 1210.54 L1505.59 1210.54 L1506.17 1210.54 L1506.76 1210.54 L1507.35 1210.54 L1507.93 1210.54 L1508.52 1210.54 L1509.11 1210.54 L1509.69 1210.54 L1510.28 1210.54 L1510.86 1210.54 L1511.45 1210.54 L1512.04 1210.54 L1512.62 1210.54 L1513.21 1210.54 L1513.8 1210.54 L1514.38 1210.54 L1514.97 1210.54 L1515.56 1210.54 L1516.14 1210.54 L1516.73 1210.54 L1517.32 1210.54 L1517.9 1210.54 L1518.49 1210.54 L1519.07 1210.54 L1519.66 1210.54 L1520.25 1210.54 L1520.83 1210.54 L1521.42 1210.54 L1522.01 1210.54 L1522.59 1210.54 L1523.18 1210.54 L1523.77 1210.54 L1524.35 1210.54 L1524.94 1210.54 L1525.52 1210.54 L1526.11 1210.54 L1526.7 1210.54 L1527.28 1210.54 L1527.87 1210.54 L1528.46 1210.54 L1529.04 1210.54 L1529.63 1210.54 L1530.22 1210.54 L1530.8 1210.54 L1531.39 1210.54 L1531.98 1210.54 L1532.56 1210.54 L1533.15 1210.54 L1533.73 1210.54 L1534.32 1210.54 L1534.91 1210.54 L1535.49 1210.54 L1536.08 1210.54 L1536.67 1210.54 L1537.25 1210.54 L1537.84 1210.54 L1538.43 1210.54 L1539.01 1210.54 L1539.6 1210.54 L1540.19 1210.54 L1540.77 1210.54 L1541.36 1210.54 L1541.94 1210.54 L1542.53 1210.54 L1543.12 1210.54 L1543.7 1210.54 L1544.29 1210.54 L1544.88 1210.54 L1545.46 1210.54 L1546.05 1210.54 L1546.64 1210.54 L1547.22 1210.54 L1547.81 1210.54 L1548.4 1210.54 L1548.98 1210.54 L1549.57 1210.54 L1550.15 1210.54 L1550.74 1210.54 L1551.33 1210.54 L1551.91 1210.54 L1552.5 1210.54 L1553.09 1210.54 L1553.67 1210.54 L1554.26 1210.54 L1554.85 1210.54 L1555.43 1210.54 L1556.02 1210.54 L1556.6 1210.54 L1557.19 1210.54 L1557.78 1210.54 L1558.36 1210.54 L1558.95 1210.54 L1559.54 1210.54 L1560.12 1210.54 L1560.71 1210.54 L1561.3 1210.54 L1561.88 1210.54 L1562.47 1210.54 L1563.06 1210.54 L1563.64 1210.54 L1564.23 1210.54 L1564.81 1210.54 L1565.4 1210.54 L1565.99 1210.54 L1566.57 1210.54 L1567.16 1210.54 L1567.75 1210.54 L1568.33 1210.54 L1568.92 1210.54 L1569.51 1210.54 L1570.09 1210.54 L1570.68 1210.54 L1571.27 1210.54 L1571.85 1210.54 L1572.44 1210.54 L1573.02 1210.54 L1573.61 1210.54 L1574.2 1210.54 L1574.78 1210.54 L1575.37 1210.54 L1575.96 1210.54 L1576.54 1210.54 L1577.13 1210.54 L1577.72 1210.54 L1578.3 1210.54 L1578.89 1210.54 L1579.47 1210.54 L1580.06 1210.54 L1580.65 1210.54 L1581.23 1210.54 L1581.82 1210.54 L1582.41 1210.54 L1582.99 1210.54 L1583.58 1210.54 L1584.17 1210.54 L1584.75 1210.54 L1585.34 1210.54 L1585.93 1210.54 L1586.51 1210.54 L1587.1 1210.54 L1587.68 1210.54 L1588.27 1210.54 L1588.86 1210.54 L1589.44 1210.54 L1590.03 1210.54 L1590.62 1210.54 L1591.2 1210.54 L1591.79 1210.54 L1592.38 1210.54 L1592.96 1210.54 L1593.55 1210.54 L1594.14 1210.54 L1594.72 1210.54 L1595.31 1210.54 L1595.89 1210.54 L1596.48 1210.54 L1597.07 1210.54 L1597.65 1210.54 L1598.24 1210.54 L1598.83 1210.54 L1599.41 1210.54 L1600 1210.54 L1600.59 1210.54 L1601.17 1210.54 L1601.76 1210.54 L1602.34 1210.54 L1602.93 1210.54 L1603.52 1210.54 L1604.1 1210.54 L1604.69 1210.54 L1605.28 1210.54 L1605.86 1210.54 L1606.45 1210.54 L1607.04 1210.54 L1607.62 1210.54 L1608.21 1210.54 L1608.8 1210.54 L1609.38 1210.54 L1609.97 1210.54 L1610.55 1210.54 L1611.14 1210.54 L1611.73 1210.54 L1612.31 1210.54 L1612.9 1210.54 L1613.49 1210.54 L1614.07 1210.54 L1614.66 1210.54 L1615.25 1210.54 L1615.83 1210.54 L1616.42 1210.54 L1617.01 1210.54 L1617.59 1210.54 L1618.18 1210.54 L1618.76 1210.54 L1619.35 1210.54 L1619.94 1210.54 L1620.52 1210.54 L1621.11 1210.54 L1621.7 1210.54 L1622.28 1210.54 L1622.87 1210.54 L1623.46 1210.54 L1624.04 1210.54 L1624.63 1210.54 L1625.22 1210.54 L1625.8 1210.54 L1626.39 1210.54 L1626.97 1210.54 L1627.56 1210.54 L1628.15 1210.54 L1628.73 1210.54 L1629.32 1210.54 L1629.91 1210.54 L1630.49 1210.54 L1631.08 1210.54 L1631.67 1210.54 L1632.25 1210.54 L1632.84 1210.54 L1633.42 1210.54 L1634.01 1210.54 L1634.6 1210.54 L1635.18 1210.54 L1635.77 1210.54 L1636.36 1210.54 L1636.94 1210.54 L1637.53 1210.54 L1638.12 1210.54 L1638.7 1210.54 L1639.29 1210.54 L1639.88 1210.54 L1640.46 1210.54 L1641.05 1210.54 L1641.63 1210.54 L1642.22 1210.54 L1642.81 1210.54 L1643.39 1210.54 L1643.98 1210.54 L1644.57 1210.54 L1645.15 1210.54 L1645.74 1210.54 L1646.33 1210.54 L1646.91 1210.54 L1647.5 1210.54 L1648.09 1210.54 L1648.67 1210.54 L1649.26 1210.54 L1649.84 1210.54 L1650.43 1210.54 L1651.02 1210.54 L1651.6 1210.54 L1652.19 1210.54 L1652.78 1210.54 L1653.36 1210.54 L1653.95 1210.54 L1654.54 1210.54 L1655.12 1210.54 L1655.71 1210.54 L1656.29 1210.54 L1656.88 1210.54 L1657.47 1210.54 L1658.05 1210.54 L1658.64 1210.54 L1659.23 1210.54 L1659.81 1210.54 L1660.4 1210.54 L1660.99 1210.54 L1661.57 1210.54 L1662.16 1210.54 L1662.75 1210.54 L1663.33 1210.54 L1663.92 1210.54 L1664.5 1210.54 L1665.09 1210.54 L1665.68 1210.54 L1666.26 1210.54 L1666.85 1210.54 L1667.44 1210.54 L1668.02 1210.54 L1668.61 1210.54 L1669.2 1210.54 L1669.78 1210.54 L1670.37 1210.54 L1670.96 1210.54 L1671.54 1210.54 L1672.13 1210.54 L1672.71 1210.54 L1673.3 1210.54 L1673.89 1210.54 L1674.47 1210.54 L1675.06 1210.54 L1675.65 1210.54 L1676.23 1210.54 L1676.82 1210.54 L1677.41 1210.54 L1677.99 1210.54 L1678.58 1210.54 L1679.17 1210.54 L1679.75 1210.54 L1680.34 1210.54 L1680.92 1210.54 L1681.51 1210.54 L1682.1 1210.54 L1682.68 1210.54 L1683.27 1210.54 L1683.86 1210.54 L1684.44 1210.54 L1685.03 1210.54 L1685.62 1210.54 L1686.2 1210.54 L1686.79 1210.54 L1687.37 1210.54 L1687.96 1210.54 L1688.55 1210.54 L1689.13 1210.54 L1689.72 1210.54 L1690.31 1210.54 L1690.89 1210.54 L1691.48 1210.54 L1692.07 1210.54 L1692.65 1210.54 L1693.24 1210.54 L1693.83 1210.54 L1694.41 1210.54 L1695 1210.54 L1695.58 1210.54 L1696.17 1210.54 L1696.76 1210.54 L1697.34 1210.54 L1697.93 1210.54 L1698.52 1210.54 L1699.1 1210.54 L1699.69 1210.54 L1700.28 1210.54 L1700.86 1210.54 L1701.45 1210.54 L1702.04 1210.54 L1702.62 1210.54 L1703.21 1210.54 L1703.79 1210.54 L1704.38 1210.54 L1704.97 1210.54 L1705.55 1210.54 L1706.14 1210.54 L1706.73 1210.54 L1707.31 1210.54 L1707.9 1210.54 L1708.49 1210.54 L1709.07 1210.54 L1709.66 1210.54 L1710.24 1210.54 L1710.83 1210.54 L1711.42 1210.54 L1712 1210.54 L1712.59 1210.54 L1713.18 1210.54 L1713.76 1210.54 L1714.35 1210.54 L1714.94 1210.54 L1715.52 1210.54 L1716.11 1210.54 L1716.7 1210.54 L1717.28 1210.54 L1717.87 1210.54 L1718.45 1210.54 L1719.04 1210.54 L1719.63 1210.54 L1720.21 1210.54 L1720.8 1210.54 L1721.39 1210.54 L1721.97 1210.54 L1722.56 1210.54 L1723.15 1210.54 L1723.73 1210.54 L1724.32 1210.54 L1724.91 1210.54 L1725.49 1210.54 L1726.08 1210.54 L1726.66 1210.54 L1727.25 1210.54 L1727.84 1210.54 L1728.42 1210.54 L1729.01 1210.54 L1729.6 1210.54 L1730.18 1210.54 L1730.77 1210.54 L1731.36 1210.54 L1731.94 1210.54 L1732.53 1210.54 L1733.11 1210.54 L1733.7 1210.54 L1734.29 1210.54 L1734.87 1210.54 L1735.46 1210.54 L1736.05 1210.54 L1736.63 1210.54 L1737.22 1210.54 L1737.81 1210.54 L1738.39 1210.54 L1738.98 1210.54 L1739.57 1210.54 L1740.15 1210.54 L1740.74 1210.54 L1741.32 1210.54 L1741.91 1210.54 L1742.5 1210.54 L1743.08 1210.54 L1743.67 1210.54 L1744.26 1210.54 L1744.84 1210.54 L1745.43 1210.54 L1746.02 1210.54 L1746.6 1210.54 L1747.19 1210.54 L1747.78 1210.54 L1748.36 1210.54 L1748.95 1210.54 L1749.53 1210.54 L1750.12 1210.54 L1750.71 1210.54 L1751.29 1210.54 L1751.88 1210.54 L1752.47 1210.54 L1753.05 1210.54 L1753.64 1210.54 L1754.23 1210.54 L1754.81 1210.54 L1755.4 1210.54 L1755.99 1210.54 L1756.57 1210.54 L1757.16 1210.54 L1757.74 1210.54 L1758.33 1210.54 L1758.92 1210.54 L1759.5 1210.54 L1760.09 1210.54 L1760.68 1210.54 L1761.26 1210.54 L1761.85 1210.54 L1762.44 1210.54 L1763.02 1210.54 L1763.61 1210.54 L1764.19 1210.54 L1764.78 1210.54 L1765.37 1210.54 L1765.95 1210.54 L1766.54 1210.54 L1767.13 1210.54 L1767.71 1210.54 L1768.3 1210.54 L1768.89 1210.54 L1769.47 1210.54 L1770.06 1210.54 L1770.65 1210.54 L1771.23 1210.54 L1771.82 1210.54 L1772.4 1210.54 L1772.99 1210.54 L1773.58 1210.54 L1774.16 1210.54 L1774.75 1210.54 L1775.34 1210.54 L1775.92 1210.54 L1776.51 1210.54 L1777.1 1210.54 L1777.68 1210.54 L1778.27 1210.54 L1778.86 1210.54 L1779.44 1210.54 L1780.03 1210.54 L1780.61 1210.54 L1781.2 1210.54 L1781.79 1210.54 L1782.37 1210.54 L1782.96 1210.54 L1783.55 1210.54 L1784.13 1210.54 L1784.72 1210.54 L1785.31 1210.54 L1785.89 1210.54 L1786.48 1210.54 L1787.06 1210.54 L1787.65 1210.54 L1788.24 1210.54 L1788.82 1210.54 L1789.41 1210.54 L1790 1210.54 L1790.58 1210.54 L1791.17 1210.54 L1791.76 1210.54 L1792.34 1210.54 L1792.93 1210.54 L1793.52 1210.54 L1794.1 1210.54 L1794.69 1210.54 L1795.27 1210.54 L1795.86 1210.54 L1796.45 1210.54 L1797.03 1210.54 L1797.62 1210.54 L1798.21 1210.54 L1798.79 1210.54 L1799.38 1210.54 L1799.97 1210.54 L1800.55 1210.54 L1801.14 1210.54 L1801.73 1210.54 L1802.31 1210.54 L1802.9 1210.54 L1803.48 1210.54 L1804.07 1210.54 L1804.66 1210.54 L1805.24 1210.54 L1805.83 1210.54 L1806.42 1210.54 L1807 1210.54 L1807.59 1210.54 L1808.18 1210.54 L1808.76 1210.54 L1809.35 1210.54 L1809.94 1210.54 L1810.52 1210.54 L1811.11 1210.54 L1811.69 1210.54 L1812.28 1210.54 L1812.87 1210.54 L1813.45 1210.54 L1814.04 1210.54 L1814.63 1210.54 L1815.21 1210.54 L1815.8 1210.54 L1816.39 1210.54 L1816.97 1210.54 L1817.56 1210.54 L1818.14 1210.54 L1818.73 1210.54 L1819.32 1210.54 L1819.9 1210.54 L1820.49 1210.54 L1821.08 1210.54 L1821.66 1210.54 L1822.25 1210.54 L1822.84 1210.54 L1823.42 1210.54 L1824.01 1210.54 L1824.6 1210.54 L1825.18 1210.54 L1825.77 1210.54 L1826.35 1210.54 L1826.94 1210.54 L1827.53 1210.54 L1828.11 1210.54 L1828.7 1210.54 L1829.29 1210.54 L1829.87 1210.54 L1830.46 1210.54 L1831.05 1210.54 L1831.63 1210.54 L1832.22 1210.54 L1832.81 1210.54 L1833.39 1210.54 L1833.98 1210.54 L1834.56 1210.54 L1835.15 1210.54 L1835.74 1210.54 L1836.32 1210.54 L1836.91 1210.54 L1837.5 1210.54 L1838.08 1210.54 L1838.67 1210.54 L1839.26 1210.54 L1839.84 1210.54 L1840.43 1210.54 L1841.01 1210.54 L1841.6 1210.54 L1842.19 1210.54 L1842.77 1210.54 L1843.36 1210.54 L1843.95 1210.54 L1844.53 1210.54 L1845.12 1210.54 L1845.71 1210.54 L1846.29 1210.54 L1846.88 1210.54 L1847.47 1210.54 L1848.05 1210.54 L1848.64 1210.54 L1849.22 1210.54 L1849.81 1210.54 L1850.4 1210.54 L1850.98 1210.54 L1851.57 1210.54 L1852.16 1210.54 L1852.74 1210.54 L1853.33 1210.54 L1853.92 1210.54 L1854.5 1210.54 L1855.09 1210.54 L1855.68 1210.54 L1856.26 1210.54 L1856.85 1210.54 L1857.43 1210.54 L1858.02 1210.54 L1858.61 1210.54 L1859.19 1210.54 L1859.78 1210.54 L1860.37 1210.54 L1860.95 1210.54 L1861.54 1210.54 L1862.13 1210.54 L1862.71 1210.54 L1863.3 1210.54 L1863.88 1210.54 L1864.47 1210.54 L1865.06 1210.54 L1865.64 1210.54 L1866.23 1210.54 L1866.82 1210.54 L1867.4 1210.54 L1867.99 1210.54 L1868.58 1210.54 L1869.16 1210.54 L1869.75 1210.54 L1870.34 1210.54 L1870.92 1210.54 L1871.51 1210.54 L1872.09 1210.54 L1872.68 1210.54 L1873.27 1210.54 L1873.85 1210.54 L1874.44 1210.54 L1875.03 1210.54 L1875.61 1210.54 L1876.2 1210.54 L1876.79 1210.54 L1877.37 1210.54 L1877.96 1210.54 L1878.55 1210.54 L1879.13 1210.54 L1879.72 1210.54 L1880.3 1210.54 L1880.89 1210.54 L1881.48 1210.54 L1882.06 1210.54 L1882.65 1210.54 L1883.24 1210.54 L1883.82 1210.54 L1884.41 1210.54 L1885 1210.54 L1885.58 1210.54 L1886.17 1210.54 L1886.76 1210.54 L1887.34 1210.54 L1887.93 1210.54 L1888.51 1210.54 L1889.1 1210.54 L1889.69 1210.54 L1890.27 1210.54 L1890.86 1210.54 L1891.45 1210.54 L1892.03 1210.54 L1892.62 1210.54 L1893.21 1210.54 L1893.79 1210.54 L1894.38 1210.54 L1894.96 1210.54 L1895.55 1210.54 L1896.14 1210.54 L1896.72 1210.54 L1897.31 1210.54 L1897.9 1210.54 L1898.48 1210.54 L1899.07 1210.54 L1899.66 1210.54 L1900.24 1210.54 L1900.83 1210.54 L1901.42 1210.54 L1902 1210.54 L1902.59 1210.54 L1903.17 1210.54 L1903.76 1210.54 L1904.35 1210.54 L1904.93 1210.54 L1905.52 1210.54 L1906.11 1210.54 L1906.69 1210.54 L1907.28 1210.54 L1907.87 1210.54 L1908.45 1210.54 L1909.04 1210.54 L1909.63 1210.54 L1910.21 1210.54 L1910.8 1210.54 L1911.38 1210.54 L1911.97 1210.54 L1912.56 1210.54 L1913.14 1210.54 L1913.73 1210.54 L1914.32 1210.54 L1914.9 1210.54 L1915.49 1210.54 L1916.08 1210.54 L1916.66 1210.54 L1917.25 1210.54 L1917.83 1210.54 L1918.42 1210.54 L1919.01 1210.54 L1919.59 1210.54 L1920.18 1210.54 L1920.77 1210.54 L1921.35 1210.54 L1921.94 1210.54 L1922.53 1210.54 L1923.11 1210.54 L1923.7 1210.54 L1924.29 1210.54 L1924.87 1210.54 L1925.46 1210.54 L1926.04 1210.54 L1926.63 1210.54 L1927.22 1210.54 L1927.8 1210.54 L1928.39 1210.54 L1928.98 1210.54 L1929.56 1210.54 L1930.15 1210.54 L1930.74 1210.54 L1931.32 1210.54 L1931.91 1210.54 L1932.5 1210.54 L1933.08 1210.54 L1933.67 1210.54 L1934.25 1210.54 L1934.84 1210.54 L1935.43 1210.54 L1936.01 1210.54 L1936.6 1210.54 L1937.19 1210.54 L1937.77 1210.54 L1938.36 1210.54 L1938.95 1210.54 L1939.53 1210.54 L1940.12 1210.54 L1940.71 1210.54 L1941.29 1210.54 L1941.88 1210.54 L1942.46 1210.54 L1943.05 1210.54 L1943.64 1210.54 L1944.22 1210.54 L1944.81 1210.54 L1945.4 1210.54 L1945.98 1210.54 L1946.57 1210.54 L1947.16 1210.54 L1947.74 1210.54 L1948.33 1210.54 L1948.91 1210.54 L1949.5 1210.54 L1950.09 1210.54 L1950.67 1210.54 L1951.26 1210.54 L1951.85 1210.54 L1952.43 1210.54 L1953.02 1210.54 L1953.61 1210.54 L1954.19 1210.54 L1954.78 1210.54 L1955.37 1210.54 L1955.95 1210.54 L1956.54 1210.54 L1957.12 1210.54 L1957.71 1210.54 L1958.3 1210.54 L1958.88 1210.54 L1959.47 1210.54 L1960.06 1210.54 L1960.64 1210.54 L1961.23 1210.54 L1961.82 1210.54 L1962.4 1210.54 L1962.99 1210.54 L1963.58 1210.54 L1964.16 1210.54 L1964.75 1210.54 L1965.33 1210.54 L1965.92 1210.54 L1966.51 1210.54 L1967.09 1210.54 L1967.68 1210.54 L1968.27 1210.54 L1968.85 1210.54 L1969.44 1210.54 L1970.03 1210.54 L1970.61 1210.54 L1971.2 1210.54 L1971.78 1210.54 L1972.37 1210.54 L1972.96 1210.54 L1973.54 1210.54 L1974.13 1210.54 L1974.72 1210.54 L1975.3 1210.54 L1975.89 1210.54 L1976.48 1210.54 L1977.06 1210.54 L1977.65 1210.54 L1978.24 1210.54 L1978.82 1210.54 L1979.41 1210.54 L1979.99 1210.54 L1980.58 1210.54 L1981.17 1210.54 L1981.75 1210.54 L1982.34 1210.54 L1982.93 1210.54 L1983.51 1210.54 L1984.1 1210.54 L1984.69 1210.54 L1985.27 1210.54 L1985.86 1210.54 L1986.45 1210.54 L1987.03 1210.54 L1987.62 1210.54 L1988.2 1210.54 L1988.79 1210.54 L1989.38 1210.54 L1989.96 1210.54 L1990.55 1210.54 L1991.14 1210.54 L1991.72 1210.54 L1992.31 1210.54 L1992.9 1210.54 L1993.48 1210.54 L1994.07 1210.54 L1994.65 1210.54 L1995.24 1210.54 L1995.83 1210.54 L1996.41 1210.54 L1997 1210.54 L1997.59 1210.54 L1998.17 1210.54 L1998.76 1210.54 L1999.35 1210.54 L1999.93 1210.54 L2000.52 1210.54 L2001.11 1210.54 L2001.69 1210.54 L2002.28 1210.54 L2002.86 1210.54 L2003.45 1210.54 L2004.04 1210.54 L2004.62 1210.54 L2005.21 1210.54 L2005.8 1210.54 L2006.38 1210.54 L2006.97 1210.54 L2007.56 1210.54 L2008.14 1210.54 L2008.73 1210.54 L2009.32 1210.54 L2009.9 1210.54 L2010.49 1210.54 L2011.07 1210.54 L2011.66 1210.54 L2012.25 1210.54 L2012.83 1210.54 L2013.42 1210.54 L2014.01 1210.54 L2014.59 1210.54 L2015.18 1210.54 L2015.77 1210.54 L2016.35 1210.54 L2016.94 1210.54 L2017.53 1210.54 L2018.11 1210.54 L2018.7 1210.54 L2019.28 1210.54 L2019.87 1210.54 L2020.46 1210.54 L2021.04 1210.54 L2021.63 1210.54 L2022.22 1210.54 L2022.8 1210.54 L2023.39 1210.54 L2023.98 1210.54 L2024.56 1210.54 L2025.15 1210.54 L2025.73 1210.54 L2026.32 1210.54 L2026.91 1210.54 L2027.49 1210.54 L2028.08 1210.54 L2028.67 1210.54 L2029.25 1210.54 L2029.84 1210.54 L2030.43 1210.54 L2031.01 1210.54 L2031.6 1210.54 L2032.19 1210.54 L2032.77 1210.54 L2033.36 1210.54 L2033.94 1210.54 L2034.53 1210.54 L2035.12 1210.54 L2035.7 1210.54 L2036.29 1210.54 L2036.88 1210.54 L2037.46 1210.54 L2038.05 1210.54 L2038.64 1210.54 L2039.22 1210.54 L2039.81 1210.54 L2040.4 1210.54 L2040.98 1210.54 L2041.57 1210.54 L2042.15 1210.54 L2042.74 1210.54 L2043.33 1210.54 L2043.91 1210.54 L2044.5 1210.54 L2045.09 1210.54 L2045.67 1210.54 L2046.26 1210.54 L2046.85 1210.54 L2047.43 1210.54 L2048.02 1210.54 L2048.6 1210.54 L2049.19 1210.54 L2049.78 1210.54 L2050.36 1210.54 L2050.95 1210.54 L2051.54 1210.54 L2052.12 1210.54 L2052.71 1210.54 L2053.3 1210.54 L2053.88 1210.54 L2054.47 1210.54 L2055.06 1210.54 L2055.64 1210.54 L2056.23 1210.54 L2056.81 1210.54 L2057.4 1210.54 L2057.99 1210.54 L2058.57 1210.54 L2059.16 1210.54 L2059.75 1210.54 L2060.33 1210.54 L2060.92 1210.54 L2061.51 1210.54 L2062.09 1210.54 L2062.68 1210.54 L2063.27 1210.54 L2063.85 1210.54 L2064.44 1210.54 L2065.02 1210.54 L2065.61 1210.54 L2066.2 1210.54 L2066.78 1210.54 L2067.37 1210.54 L2067.96 1210.54 L2068.54 1210.54 L2069.13 1210.54 L2069.72 1210.54 L2070.3 1210.54 L2070.89 1210.54 L2071.48 1210.54 L2072.06 1210.54 L2072.65 1210.54 L2073.23 1210.54 L2073.82 1210.54 L2074.41 1210.54 L2074.99 1210.54 L2075.58 1210.54 L2076.17 1210.54 L2076.75 1210.54 L2077.34 1210.54 L2077.93 1210.54 L2078.51 1210.54 L2079.1 1210.54 L2079.68 1210.54 L2080.27 1210.54 L2080.86 1210.54 L2081.44 1210.54 L2082.03 1210.54 L2082.62 1210.54 L2083.2 1210.54 L2083.79 1210.54 L2084.38 1210.54 L2084.96 1210.54 L2085.55 1210.54 L2086.14 1210.54 L2086.72 1210.54 L2087.31 1210.54 L2087.89 1210.54 L2088.48 1210.54 L2089.07 1210.54 L2089.65 1210.54 L2090.24 1210.54 L2090.83 1210.54 L2091.41 1210.54 L2092 1210.54 L2092.59 1210.54 L2093.17 1210.54 L2093.76 1210.54 L2094.35 1210.54 L2094.93 1210.54 L2095.52 1210.54 L2096.1 1210.54 L2096.69 1210.54 L2097.28 1210.54 L2097.86 1210.54 L2098.45 1210.54 L2099.04 1210.54 L2099.62 1210.54 L2100.21 1210.54 L2100.8 1210.54 L2101.38 1210.54 L2101.97 1210.54 L2102.55 1210.54 L2103.14 1210.54 L2103.73 1210.54 L2104.31 1210.54 L2104.9 1210.54 L2105.49 1210.54 L2106.07 1210.54 L2106.66 1210.54 L2107.25 1210.54 L2107.83 1210.54 L2108.42 1210.54 L2109.01 1210.54 L2109.59 1210.54 L2110.18 1210.54 L2110.76 1210.54 L2111.35 1210.54 L2111.94 1210.54 L2112.52 1210.54 L2113.11 1210.54 L2113.7 1210.54 L2114.28 1210.54 L2114.87 1210.54 L2115.46 1210.54 L2116.04 1210.54 L2116.63 1210.54 L2117.22 1210.54 L2117.8 1210.54 L2118.39 1210.54 L2118.97 1210.54 L2119.56 1210.54 L2120.15 1210.54 L2120.73 1210.54 L2121.32 1210.54 L2121.91 1210.54 L2122.49 1210.54 L2123.08 1210.54 L2123.67 1210.54 L2124.25 1210.54 L2124.84 1210.54 L2125.42 1210.54 L2126.01 1210.54 L2126.6 1210.54 L2127.18 1210.54 L2127.77 1210.54 L2128.36 1210.54 L2128.94 1210.54 L2129.53 1210.54 L2130.12 1210.54 L2130.7 1210.54 L2131.29 1210.54 L2131.88 1210.54 L2132.46 1210.54 L2133.05 1210.54 L2133.63 1210.54 L2134.22 1210.54 L2134.81 1210.54 L2135.39 1210.54 L2135.98 1210.54 L2136.57 1210.54 L2137.15 1210.54 L2137.74 1210.54 L2138.33 1210.54 L2138.91 1210.54 L2139.5 1210.54 L2140.09 1210.54 L2140.67 1210.54 L2141.26 1210.54 L2141.84 1210.54 L2142.43 1210.54 L2143.02 1210.54 L2143.6 1210.54 L2144.19 1210.54 L2144.78 1210.54 L2145.36 1210.54 L2145.95 1210.54 L2146.54 1210.54 L2147.12 1210.54 L2147.71 1210.54 L2148.3 1210.54 L2148.88 1210.54 L2149.47 1210.54 L2150.05 1210.54 L2150.64 1210.54 L2151.23 1210.54 L2151.81 1210.54 L2152.4 1210.54 L2152.99 1210.54 L2153.57 1210.54 L2154.16 1210.54 L2154.75 1210.54 L2155.33 1210.54 L2155.92 1210.54 L2156.5 1210.54 L2157.09 1210.54 L2157.68 1210.54 L2158.26 1210.54 L2158.26 1209.8 L2157.68 1209.8 L2157.09 1209.8 L2156.5 1209.8 L2155.92 1209.8 L2155.33 1209.8 L2154.75 1209.8 L2154.16 1209.8 L2153.57 1209.8 L2152.99 1209.8 L2152.4 1209.8 L2151.81 1209.8 L2151.23 1209.8 L2150.64 1209.8 L2150.05 1209.8 L2149.47 1209.8 L2148.88 1209.8 L2148.3 1209.8 L2147.71 1209.8 L2147.12 1209.8 L2146.54 1209.8 L2145.95 1209.8 L2145.36 1209.8 L2144.78 1209.8 L2144.19 1209.8 L2143.6 1209.8 L2143.02 1209.8 L2142.43 1209.8 L2141.84 1209.8 L2141.26 1209.8 L2140.67 1209.8 L2140.09 1209.8 L2139.5 1209.8 L2138.91 1209.8 L2138.33 1209.8 L2137.74 1209.8 L2137.15 1209.8 L2136.57 1209.8 L2135.98 1209.8 L2135.39 1209.8 L2134.81 1209.8 L2134.22 1209.8 L2133.63 1209.8 L2133.05 1209.8 L2132.46 1209.8 L2131.88 1209.8 L2131.29 1209.8 L2130.7 1209.8 L2130.12 1209.8 L2129.53 1209.8 L2128.94 1209.8 L2128.36 1209.8 L2127.77 1209.8 L2127.18 1209.8 L2126.6 1209.8 L2126.01 1209.8 L2125.42 1209.8 L2124.84 1209.8 L2124.25 1209.8 L2123.67 1209.8 L2123.08 1209.8 L2122.49 1209.8 L2121.91 1209.8 L2121.32 1209.8 L2120.73 1209.8 L2120.15 1209.8 L2119.56 1209.8 L2118.97 1209.8 L2118.39 1209.8 L2117.8 1209.8 L2117.22 1209.8 L2116.63 1209.8 L2116.04 1209.8 L2115.46 1209.8 L2114.87 1209.8 L2114.28 1209.8 L2113.7 1209.8 L2113.11 1209.8 L2112.52 1209.8 L2111.94 1209.8 L2111.35 1209.8 L2110.76 1209.8 L2110.18 1209.8 L2109.59 1209.8 L2109.01 1209.8 L2108.42 1209.8 L2107.83 1209.8 L2107.25 1209.8 L2106.66 1209.8 L2106.07 1209.8 L2105.49 1209.8 L2104.9 1209.8 L2104.31 1209.8 L2103.73 1209.8 L2103.14 1209.8 L2102.55 1209.8 L2101.97 1209.8 L2101.38 1209.8 L2100.8 1209.8 L2100.21 1209.8 L2099.62 1209.8 L2099.04 1209.8 L2098.45 1209.8 L2097.86 1209.8 L2097.28 1209.8 L2096.69 1209.8 L2096.1 1209.8 L2095.52 1209.8 L2094.93 1209.8 L2094.35 1209.8 L2093.76 1209.8 L2093.17 1209.8 L2092.59 1209.8 L2092 1209.8 L2091.41 1209.8 L2090.83 1209.8 L2090.24 1209.8 L2089.65 1209.8 L2089.07 1209.8 L2088.48 1209.8 L2087.89 1209.8 L2087.31 1209.8 L2086.72 1209.8 L2086.14 1209.8 L2085.55 1209.8 L2084.96 1209.8 L2084.38 1209.8 L2083.79 1209.8 L2083.2 1209.8 L2082.62 1209.8 L2082.03 1209.8 L2081.44 1209.8 L2080.86 1209.8 L2080.27 1209.8 L2079.68 1209.8 L2079.1 1209.8 L2078.51 1209.8 L2077.93 1209.8 L2077.34 1209.8 L2076.75 1209.8 L2076.17 1209.8 L2075.58 1209.8 L2074.99 1209.8 L2074.41 1209.8 L2073.82 1209.8 L2073.23 1209.8 L2072.65 1209.8 L2072.06 1209.8 L2071.48 1209.8 L2070.89 1209.8 L2070.3 1209.8 L2069.72 1209.8 L2069.13 1209.8 L2068.54 1209.8 L2067.96 1209.8 L2067.37 1209.8 L2066.78 1209.8 L2066.2 1209.8 L2065.61 1209.8 L2065.02 1209.8 L2064.44 1209.8 L2063.85 1209.8 L2063.27 1209.8 L2062.68 1209.8 L2062.09 1209.8 L2061.51 1209.8 L2060.92 1209.8 L2060.33 1209.8 L2059.75 1209.8 L2059.16 1209.8 L2058.57 1209.8 L2057.99 1209.8 L2057.4 1209.8 L2056.81 1209.8 L2056.23 1209.8 L2055.64 1209.8 L2055.06 1209.8 L2054.47 1209.8 L2053.88 1209.8 L2053.3 1209.8 L2052.71 1209.8 L2052.12 1209.8 L2051.54 1209.8 L2050.95 1209.8 L2050.36 1209.8 L2049.78 1209.8 L2049.19 1209.8 L2048.6 1209.8 L2048.02 1209.8 L2047.43 1209.8 L2046.85 1209.8 L2046.26 1209.8 L2045.67 1209.8 L2045.09 1209.8 L2044.5 1209.8 L2043.91 1209.8 L2043.33 1209.8 L2042.74 1209.8 L2042.15 1209.8 L2041.57 1209.8 L2040.98 1209.8 L2040.4 1209.8 L2039.81 1209.8 L2039.22 1209.8 L2038.64 1209.8 L2038.05 1209.8 L2037.46 1209.8 L2036.88 1209.8 L2036.29 1209.8 L2035.7 1209.8 L2035.12 1209.8 L2034.53 1209.8 L2033.94 1209.8 L2033.36 1209.8 L2032.77 1209.8 L2032.19 1209.8 L2031.6 1209.8 L2031.01 1209.8 L2030.43 1209.8 L2029.84 1209.8 L2029.25 1209.8 L2028.67 1209.8 L2028.08 1209.8 L2027.49 1209.8 L2026.91 1209.8 L2026.32 1209.8 L2025.73 1209.8 L2025.15 1209.8 L2024.56 1209.8 L2023.98 1209.8 L2023.39 1209.8 L2022.8 1209.8 L2022.22 1209.8 L2021.63 1209.8 L2021.04 1209.8 L2020.46 1209.8 L2019.87 1209.8 L2019.28 1209.8 L2018.7 1209.8 L2018.11 1209.8 L2017.53 1209.8 L2016.94 1209.8 L2016.35 1209.8 L2015.77 1209.8 L2015.18 1209.8 L2014.59 1209.8 L2014.01 1209.8 L2013.42 1209.8 L2012.83 1209.8 L2012.25 1209.8 L2011.66 1209.8 L2011.07 1209.8 L2010.49 1209.8 L2009.9 1209.8 L2009.32 1209.8 L2008.73 1209.8 L2008.14 1209.8 L2007.56 1209.8 L2006.97 1209.8 L2006.38 1209.8 L2005.8 1209.8 L2005.21 1209.8 L2004.62 1209.8 L2004.04 1209.8 L2003.45 1209.8 L2002.86 1209.8 L2002.28 1209.8 L2001.69 1209.8 L2001.11 1209.8 L2000.52 1209.8 L1999.93 1209.8 L1999.35 1209.8 L1998.76 1209.8 L1998.17 1209.8 L1997.59 1209.8 L1997 1209.8 L1996.41 1209.8 L1995.83 1209.8 L1995.24 1209.8 L1994.65 1209.8 L1994.07 1209.8 L1993.48 1209.8 L1992.9 1209.8 L1992.31 1209.8 L1991.72 1209.8 L1991.14 1209.8 L1990.55 1209.8 L1989.96 1209.8 L1989.38 1209.8 L1988.79 1209.8 L1988.2 1209.8 L1987.62 1209.8 L1987.03 1209.8 L1986.45 1209.8 L1985.86 1209.8 L1985.27 1209.8 L1984.69 1209.8 L1984.1 1209.8 L1983.51 1209.8 L1982.93 1209.8 L1982.34 1209.8 L1981.75 1209.8 L1981.17 1209.8 L1980.58 1209.8 L1979.99 1209.8 L1979.41 1209.8 L1978.82 1209.8 L1978.24 1209.8 L1977.65 1209.8 L1977.06 1209.8 L1976.48 1209.8 L1975.89 1209.8 L1975.3 1209.8 L1974.72 1209.8 L1974.13 1209.8 L1973.54 1209.8 L1972.96 1209.8 L1972.37 1209.8 L1971.78 1209.8 L1971.2 1209.8 L1970.61 1209.8 L1970.03 1209.8 L1969.44 1209.8 L1968.85 1209.8 L1968.27 1209.8 L1967.68 1209.8 L1967.09 1209.8 L1966.51 1209.8 L1965.92 1209.8 L1965.33 1209.8 L1964.75 1209.8 L1964.16 1209.8 L1963.58 1209.8 L1962.99 1209.8 L1962.4 1209.8 L1961.82 1209.8 L1961.23 1209.8 L1960.64 1209.8 L1960.06 1209.8 L1959.47 1209.8 L1958.88 1209.8 L1958.3 1209.8 L1957.71 1209.8 L1957.12 1209.8 L1956.54 1209.8 L1955.95 1209.8 L1955.37 1209.8 L1954.78 1209.8 L1954.19 1209.8 L1953.61 1209.8 L1953.02 1209.8 L1952.43 1209.8 L1951.85 1209.8 L1951.26 1209.8 L1950.67 1209.8 L1950.09 1209.8 L1949.5 1209.8 L1948.91 1209.8 L1948.33 1209.8 L1947.74 1209.8 L1947.16 1209.8 L1946.57 1209.8 L1945.98 1209.8 L1945.4 1209.8 L1944.81 1209.8 L1944.22 1209.8 L1943.64 1209.8 L1943.05 1209.8 L1942.46 1209.8 L1941.88 1209.8 L1941.29 1209.8 L1940.71 1209.8 L1940.12 1209.8 L1939.53 1209.8 L1938.95 1209.8 L1938.36 1209.8 L1937.77 1209.8 L1937.19 1209.8 L1936.6 1209.8 L1936.01 1209.8 L1935.43 1209.8 L1934.84 1209.8 L1934.25 1209.8 L1933.67 1209.8 L1933.08 1209.8 L1932.5 1209.8 L1931.91 1209.8 L1931.32 1209.8 L1930.74 1209.8 L1930.15 1209.8 L1929.56 1209.8 L1928.98 1209.8 L1928.39 1209.8 L1927.8 1209.8 L1927.22 1209.8 L1926.63 1209.8 L1926.04 1209.8 L1925.46 1209.8 L1924.87 1209.8 L1924.29 1209.8 L1923.7 1209.8 L1923.11 1209.8 L1922.53 1209.8 L1921.94 1209.8 L1921.35 1209.8 L1920.77 1209.8 L1920.18 1209.8 L1919.59 1209.8 L1919.01 1209.8 L1918.42 1209.8 L1917.83 1209.8 L1917.25 1209.8 L1916.66 1209.8 L1916.08 1209.8 L1915.49 1209.8 L1914.9 1209.8 L1914.32 1209.8 L1913.73 1209.8 L1913.14 1209.8 L1912.56 1209.8 L1911.97 1209.8 L1911.38 1209.8 L1910.8 1209.8 L1910.21 1209.8 L1909.63 1209.8 L1909.04 1209.8 L1908.45 1209.8 L1907.87 1209.8 L1907.28 1209.8 L1906.69 1209.8 L1906.11 1209.8 L1905.52 1209.8 L1904.93 1209.8 L1904.35 1209.8 L1903.76 1209.8 L1903.17 1209.8 L1902.59 1209.8 L1902 1209.8 L1901.42 1209.8 L1900.83 1209.8 L1900.24 1209.8 L1899.66 1209.8 L1899.07 1209.8 L1898.48 1209.8 L1897.9 1209.8 L1897.31 1209.8 L1896.72 1209.8 L1896.14 1209.8 L1895.55 1209.8 L1894.96 1209.8 L1894.38 1209.8 L1893.79 1209.8 L1893.21 1209.8 L1892.62 1209.8 L1892.03 1209.8 L1891.45 1209.8 L1890.86 1209.8 L1890.27 1209.8 L1889.69 1209.8 L1889.1 1209.8 L1888.51 1209.8 L1887.93 1209.8 L1887.34 1209.8 L1886.76 1209.8 L1886.17 1209.8 L1885.58 1209.8 L1885 1209.8 L1884.41 1209.8 L1883.82 1209.8 L1883.24 1209.8 L1882.65 1209.8 L1882.06 1209.8 L1881.48 1209.8 L1880.89 1209.8 L1880.3 1209.8 L1879.72 1209.8 L1879.13 1209.8 L1878.55 1209.8 L1877.96 1209.8 L1877.37 1209.8 L1876.79 1209.8 L1876.2 1209.8 L1875.61 1209.8 L1875.03 1209.8 L1874.44 1209.8 L1873.85 1209.8 L1873.27 1209.8 L1872.68 1209.8 L1872.09 1209.8 L1871.51 1209.8 L1870.92 1209.8 L1870.34 1209.8 L1869.75 1209.8 L1869.16 1209.8 L1868.58 1209.8 L1867.99 1209.8 L1867.4 1209.8 L1866.82 1209.8 L1866.23 1209.8 L1865.64 1209.8 L1865.06 1209.8 L1864.47 1209.8 L1863.88 1209.8 L1863.3 1209.8 L1862.71 1209.8 L1862.13 1209.8 L1861.54 1209.8 L1860.95 1209.8 L1860.37 1209.8 L1859.78 1209.8 L1859.19 1209.8 L1858.61 1209.8 L1858.02 1209.8 L1857.43 1209.8 L1856.85 1209.8 L1856.26 1209.8 L1855.68 1209.8 L1855.09 1209.8 L1854.5 1209.8 L1853.92 1209.8 L1853.33 1209.8 L1852.74 1209.8 L1852.16 1209.8 L1851.57 1209.8 L1850.98 1209.8 L1850.4 1209.8 L1849.81 1209.8 L1849.22 1209.8 L1848.64 1209.8 L1848.05 1209.8 L1847.47 1209.8 L1846.88 1209.8 L1846.29 1209.8 L1845.71 1209.8 L1845.12 1209.8 L1844.53 1209.8 L1843.95 1209.8 L1843.36 1209.8 L1842.77 1209.8 L1842.19 1209.8 L1841.6 1209.8 L1841.01 1209.8 L1840.43 1209.8 L1839.84 1209.8 L1839.26 1209.8 L1838.67 1209.8 L1838.08 1209.8 L1837.5 1209.8 L1836.91 1209.8 L1836.32 1209.8 L1835.74 1209.8 L1835.15 1209.8 L1834.56 1209.8 L1833.98 1209.8 L1833.39 1209.8 L1832.81 1209.8 L1832.22 1209.8 L1831.63 1209.8 L1831.05 1209.8 L1830.46 1209.8 L1829.87 1209.8 L1829.29 1209.8 L1828.7 1209.8 L1828.11 1209.8 L1827.53 1209.8 L1826.94 1209.8 L1826.35 1209.8 L1825.77 1209.8 L1825.18 1209.8 L1824.6 1209.8 L1824.01 1209.8 L1823.42 1209.8 L1822.84 1209.8 L1822.25 1209.8 L1821.66 1209.8 L1821.08 1209.8 L1820.49 1209.8 L1819.9 1209.8 L1819.32 1209.8 L1818.73 1209.8 L1818.14 1209.8 L1817.56 1209.8 L1816.97 1209.8 L1816.39 1209.8 L1815.8 1209.8 L1815.21 1209.8 L1814.63 1209.8 L1814.04 1209.8 L1813.45 1209.8 L1812.87 1209.8 L1812.28 1209.8 L1811.69 1209.8 L1811.11 1209.8 L1810.52 1209.8 L1809.94 1209.8 L1809.35 1209.8 L1808.76 1209.8 L1808.18 1209.8 L1807.59 1209.8 L1807 1209.8 L1806.42 1209.8 L1805.83 1209.8 L1805.24 1209.8 L1804.66 1209.8 L1804.07 1209.8 L1803.48 1209.8 L1802.9 1209.8 L1802.31 1209.8 L1801.73 1209.8 L1801.14 1209.8 L1800.55 1209.8 L1799.97 1209.8 L1799.38 1209.8 L1798.79 1209.8 L1798.21 1209.8 L1797.62 1209.8 L1797.03 1209.8 L1796.45 1209.8 L1795.86 1209.8 L1795.27 1209.8 L1794.69 1209.8 L1794.1 1209.8 L1793.52 1209.8 L1792.93 1209.8 L1792.34 1209.8 L1791.76 1209.8 L1791.17 1209.8 L1790.58 1209.8 L1790 1209.8 L1789.41 1209.8 L1788.82 1209.8 L1788.24 1209.8 L1787.65 1209.8 L1787.06 1209.8 L1786.48 1209.8 L1785.89 1209.8 L1785.31 1209.8 L1784.72 1209.8 L1784.13 1209.8 L1783.55 1209.8 L1782.96 1209.8 L1782.37 1209.8 L1781.79 1209.8 L1781.2 1209.8 L1780.61 1209.8 L1780.03 1209.8 L1779.44 1209.8 L1778.86 1209.8 L1778.27 1209.8 L1777.68 1209.8 L1777.1 1209.8 L1776.51 1209.8 L1775.92 1209.8 L1775.34 1209.8 L1774.75 1209.8 L1774.16 1209.8 L1773.58 1209.8 L1772.99 1209.8 L1772.4 1209.8 L1771.82 1209.8 L1771.23 1209.8 L1770.65 1209.8 L1770.06 1209.8 L1769.47 1209.8 L1768.89 1209.8 L1768.3 1209.8 L1767.71 1209.8 L1767.13 1209.8 L1766.54 1209.8 L1765.95 1209.8 L1765.37 1209.8 L1764.78 1209.8 L1764.19 1209.8 L1763.61 1209.8 L1763.02 1209.8 L1762.44 1209.8 L1761.85 1209.8 L1761.26 1209.8 L1760.68 1209.8 L1760.09 1209.8 L1759.5 1209.8 L1758.92 1209.8 L1758.33 1209.8 L1757.74 1209.8 L1757.16 1209.8 L1756.57 1209.8 L1755.99 1209.8 L1755.4 1209.8 L1754.81 1209.8 L1754.23 1209.8 L1753.64 1209.8 L1753.05 1209.8 L1752.47 1209.8 L1751.88 1209.8 L1751.29 1209.8 L1750.71 1209.8 L1750.12 1209.8 L1749.53 1209.8 L1748.95 1209.8 L1748.36 1209.8 L1747.78 1209.8 L1747.19 1209.8 L1746.6 1209.8 L1746.02 1209.8 L1745.43 1209.8 L1744.84 1209.8 L1744.26 1209.8 L1743.67 1209.8 L1743.08 1209.8 L1742.5 1209.8 L1741.91 1209.8 L1741.32 1209.8 L1740.74 1209.8 L1740.15 1209.8 L1739.57 1209.8 L1738.98 1209.8 L1738.39 1209.8 L1737.81 1209.8 L1737.22 1209.8 L1736.63 1209.8 L1736.05 1209.8 L1735.46 1209.8 L1734.87 1209.8 L1734.29 1209.8 L1733.7 1209.8 L1733.11 1209.8 L1732.53 1209.8 L1731.94 1209.8 L1731.36 1209.8 L1730.77 1209.8 L1730.18 1209.8 L1729.6 1209.8 L1729.01 1209.8 L1728.42 1209.8 L1727.84 1209.8 L1727.25 1209.8 L1726.66 1209.8 L1726.08 1209.8 L1725.49 1209.8 L1724.91 1209.8 L1724.32 1209.8 L1723.73 1209.8 L1723.15 1209.8 L1722.56 1209.8 L1721.97 1209.8 L1721.39 1209.8 L1720.8 1209.8 L1720.21 1209.8 L1719.63 1209.8 L1719.04 1209.8 L1718.45 1209.8 L1717.87 1209.8 L1717.28 1209.8 L1716.7 1209.8 L1716.11 1209.8 L1715.52 1209.8 L1714.94 1209.8 L1714.35 1209.8 L1713.76 1209.8 L1713.18 1209.8 L1712.59 1209.8 L1712 1209.8 L1711.42 1209.8 L1710.83 1209.8 L1710.24 1209.8 L1709.66 1209.8 L1709.07 1209.8 L1708.49 1209.8 L1707.9 1209.8 L1707.31 1209.8 L1706.73 1209.8 L1706.14 1209.8 L1705.55 1209.8 L1704.97 1209.8 L1704.38 1209.8 L1703.79 1209.8 L1703.21 1209.8 L1702.62 1209.8 L1702.04 1209.8 L1701.45 1209.8 L1700.86 1209.8 L1700.28 1209.8 L1699.69 1209.8 L1699.1 1209.8 L1698.52 1209.8 L1697.93 1209.8 L1697.34 1209.8 L1696.76 1209.8 L1696.17 1209.8 L1695.58 1209.8 L1695 1209.8 L1694.41 1209.8 L1693.83 1209.8 L1693.24 1209.8 L1692.65 1209.8 L1692.07 1209.8 L1691.48 1209.8 L1690.89 1209.8 L1690.31 1209.8 L1689.72 1209.8 L1689.13 1209.8 L1688.55 1209.8 L1687.96 1209.8 L1687.37 1209.8 L1686.79 1209.8 L1686.2 1209.8 L1685.62 1209.8 L1685.03 1209.8 L1684.44 1209.8 L1683.86 1209.8 L1683.27 1209.8 L1682.68 1209.8 L1682.1 1209.8 L1681.51 1209.8 L1680.92 1209.8 L1680.34 1209.8 L1679.75 1209.8 L1679.17 1209.8 L1678.58 1209.8 L1677.99 1209.8 L1677.41 1209.8 L1676.82 1209.8 L1676.23 1209.8 L1675.65 1209.8 L1675.06 1209.8 L1674.47 1209.8 L1673.89 1209.8 L1673.3 1209.8 L1672.71 1209.8 L1672.13 1209.8 L1671.54 1209.8 L1670.96 1209.8 L1670.37 1209.8 L1669.78 1209.8 L1669.2 1209.8 L1668.61 1209.8 L1668.02 1209.8 L1667.44 1209.8 L1666.85 1209.8 L1666.26 1209.8 L1665.68 1209.8 L1665.09 1209.8 L1664.5 1209.8 L1663.92 1209.8 L1663.33 1209.8 L1662.75 1209.8 L1662.16 1209.8 L1661.57 1209.8 L1660.99 1209.8 L1660.4 1209.8 L1659.81 1209.8 L1659.23 1209.8 L1658.64 1209.8 L1658.05 1209.8 L1657.47 1209.8 L1656.88 1209.8 L1656.29 1209.8 L1655.71 1209.8 L1655.12 1209.8 L1654.54 1209.8 L1653.95 1209.8 L1653.36 1209.8 L1652.78 1209.8 L1652.19 1209.8 L1651.6 1209.8 L1651.02 1209.8 L1650.43 1209.8 L1649.84 1209.8 L1649.26 1209.8 L1648.67 1209.8 L1648.09 1209.8 L1647.5 1209.8 L1646.91 1209.8 L1646.33 1209.8 L1645.74 1209.8 L1645.15 1209.8 L1644.57 1209.8 L1643.98 1209.8 L1643.39 1209.8 L1642.81 1209.8 L1642.22 1209.8 L1641.63 1209.8 L1641.05 1209.8 L1640.46 1209.8 L1639.88 1209.8 L1639.29 1209.8 L1638.7 1209.8 L1638.12 1209.8 L1637.53 1209.8 L1636.94 1209.8 L1636.36 1209.8 L1635.77 1209.8 L1635.18 1209.8 L1634.6 1209.8 L1634.01 1209.8 L1633.42 1209.8 L1632.84 1209.8 L1632.25 1209.8 L1631.67 1209.8 L1631.08 1209.8 L1630.49 1209.8 L1629.91 1209.8 L1629.32 1209.8 L1628.73 1209.8 L1628.15 1209.8 L1627.56 1209.8 L1626.97 1209.8 L1626.39 1209.8 L1625.8 1209.8 L1625.22 1209.8 L1624.63 1209.8 L1624.04 1209.8 L1623.46 1209.8 L1622.87 1209.8 L1622.28 1209.8 L1621.7 1209.8 L1621.11 1209.8 L1620.52 1209.8 L1619.94 1209.8 L1619.35 1209.8 L1618.76 1209.8 L1618.18 1209.8 L1617.59 1209.8 L1617.01 1209.8 L1616.42 1209.8 L1615.83 1209.8 L1615.25 1209.8 L1614.66 1209.8 L1614.07 1209.8 L1613.49 1209.8 L1612.9 1209.8 L1612.31 1209.8 L1611.73 1209.8 L1611.14 1209.8 L1610.55 1209.8 L1609.97 1209.8 L1609.38 1209.8 L1608.8 1209.8 L1608.21 1209.8 L1607.62 1209.8 L1607.04 1209.8 L1606.45 1209.8 L1605.86 1209.8 L1605.28 1209.8 L1604.69 1209.8 L1604.1 1209.8 L1603.52 1209.8 L1602.93 1209.8 L1602.34 1209.8 L1601.76 1209.8 L1601.17 1209.8 L1600.59 1209.8 L1600 1209.8 L1599.41 1209.8 L1598.83 1209.8 L1598.24 1209.8 L1597.65 1209.8 L1597.07 1209.8 L1596.48 1209.8 L1595.89 1209.8 L1595.31 1209.8 L1594.72 1209.8 L1594.14 1209.8 L1593.55 1209.8 L1592.96 1209.8 L1592.38 1209.8 L1591.79 1209.8 L1591.2 1209.8 L1590.62 1209.8 L1590.03 1209.8 L1589.44 1209.8 L1588.86 1209.8 L1588.27 1209.8 L1587.68 1209.8 L1587.1 1209.8 L1586.51 1209.8 L1585.93 1209.8 L1585.34 1209.8 L1584.75 1209.8 L1584.17 1209.8 L1583.58 1209.8 L1582.99 1209.8 L1582.41 1209.8 L1581.82 1209.8 L1581.23 1209.8 L1580.65 1209.8 L1580.06 1209.8 L1579.47 1209.8 L1578.89 1209.8 L1578.3 1209.8 L1577.72 1209.8 L1577.13 1209.8 L1576.54 1209.8 L1575.96 1209.8 L1575.37 1209.8 L1574.78 1209.8 L1574.2 1209.8 L1573.61 1209.8 L1573.02 1209.8 L1572.44 1209.8 L1571.85 1209.8 L1571.27 1209.8 L1570.68 1209.8 L1570.09 1209.8 L1569.51 1209.8 L1568.92 1209.8 L1568.33 1209.8 L1567.75 1209.8 L1567.16 1209.8 L1566.57 1209.8 L1565.99 1209.8 L1565.4 1209.8 L1564.81 1209.8 L1564.23 1209.8 L1563.64 1209.8 L1563.06 1209.8 L1562.47 1209.8 L1561.88 1209.8 L1561.3 1209.8 L1560.71 1209.8 L1560.12 1209.8 L1559.54 1209.8 L1558.95 1209.8 L1558.36 1209.8 L1557.78 1209.8 L1557.19 1209.8 L1556.6 1209.8 L1556.02 1209.8 L1555.43 1209.8 L1554.85 1209.8 L1554.26 1209.8 L1553.67 1209.8 L1553.09 1209.8 L1552.5 1209.8 L1551.91 1209.8 L1551.33 1209.8 L1550.74 1209.8 L1550.15 1209.8 L1549.57 1209.8 L1548.98 1209.8 L1548.4 1209.8 L1547.81 1209.8 L1547.22 1209.8 L1546.64 1209.8 L1546.05 1209.8 L1545.46 1209.8 L1544.88 1209.8 L1544.29 1209.8 L1543.7 1209.8 L1543.12 1209.8 L1542.53 1209.8 L1541.94 1209.8 L1541.36 1209.8 L1540.77 1209.8 L1540.19 1209.8 L1539.6 1209.8 L1539.01 1209.8 L1538.43 1209.8 L1537.84 1209.8 L1537.25 1209.8 L1536.67 1209.8 L1536.08 1209.8 L1535.49 1209.8 L1534.91 1209.8 L1534.32 1209.8 L1533.73 1209.8 L1533.15 1209.8 L1532.56 1209.8 L1531.98 1209.8 L1531.39 1209.8 L1530.8 1209.8 L1530.22 1209.8 L1529.63 1209.8 L1529.04 1209.8 L1528.46 1209.8 L1527.87 1209.8 L1527.28 1209.8 L1526.7 1209.8 L1526.11 1209.8 L1525.52 1209.8 L1524.94 1209.8 L1524.35 1209.8 L1523.77 1209.8 L1523.18 1209.8 L1522.59 1209.8 L1522.01 1209.8 L1521.42 1209.8 L1520.83 1209.8 L1520.25 1209.8 L1519.66 1209.8 L1519.07 1209.8 L1518.49 1209.8 L1517.9 1209.8 L1517.32 1209.8 L1516.73 1209.8 L1516.14 1209.8 L1515.56 1209.8 L1514.97 1209.8 L1514.38 1209.8 L1513.8 1209.8 L1513.21 1209.8 L1512.62 1209.8 L1512.04 1209.8 L1511.45 1209.8 L1510.86 1209.8 L1510.28 1209.8 L1509.69 1209.8 L1509.11 1209.8 L1508.52 1209.8 L1507.93 1209.8 L1507.35 1209.8 L1506.76 1209.8 L1506.17 1209.8 L1505.59 1209.8 L1505 1209.8 L1504.41 1209.8 L1503.83 1209.8 L1503.24 1209.8 L1502.65 1209.8 L1502.07 1209.8 L1501.48 1209.8 L1500.9 1209.8 L1500.31 1209.8 L1499.72 1209.8 L1499.14 1209.8 L1498.55 1209.8 L1497.96 1209.8 L1497.38 1209.8 L1496.79 1209.8 L1496.2 1209.8 L1495.62 1209.8 L1495.03 1209.8 L1494.45 1209.8 L1493.86 1209.8 L1493.27 1209.8 L1492.69 1209.8 L1492.1 1209.8 L1491.51 1209.8 L1490.93 1209.8 L1490.34 1209.8 L1489.75 1209.8 L1489.17 1209.8 L1488.58 1209.8 L1487.99 1209.8 L1487.41 1209.8 L1486.82 1209.8 L1486.24 1209.8 L1485.65 1209.8 L1485.06 1209.8 L1484.48 1209.8 L1483.89 1209.8 L1483.3 1209.8 L1482.72 1209.8 L1482.13 1209.8 L1481.54 1209.8 L1480.96 1209.8 L1480.37 1209.8 L1479.78 1209.8 L1479.2 1209.8 L1478.61 1209.8 L1478.03 1209.8 L1477.44 1209.8 L1476.85 1209.8 L1476.27 1209.8 L1475.68 1209.8 L1475.09 1209.8 L1474.51 1209.8 L1473.92 1209.8 L1473.33 1209.8 L1472.75 1209.8 L1472.16 1209.8 L1471.57 1209.8 L1470.99 1209.8 L1470.4 1209.8 L1469.82 1209.8 L1469.23 1209.8 L1468.64 1209.8 L1468.06 1209.8 L1467.47 1209.8 L1466.88 1209.8 L1466.3 1209.8 L1465.71 1209.8 L1465.12 1209.8 L1464.54 1209.8 L1463.95 1209.8 L1463.37 1209.8 L1462.78 1209.8 L1462.19 1209.8 L1461.61 1209.8 L1461.02 1209.8 L1460.43 1209.8 L1459.85 1209.8 L1459.26 1209.8 L1458.67 1209.8 L1458.09 1209.8 L1457.5 1209.8 L1456.91 1209.8 L1456.33 1209.8 L1455.74 1209.8 L1455.16 1209.8 L1454.57 1209.8 L1453.98 1209.8 L1453.4 1209.8 L1452.81 1209.8 L1452.22 1209.8 L1451.64 1209.8 L1451.05 1209.8 L1450.46 1209.8 L1449.88 1209.8 L1449.29 1209.8 L1448.7 1209.8 L1448.12 1209.8 L1447.53 1209.8 L1446.95 1209.8 L1446.36 1209.8 L1445.77 1209.8 L1445.19 1209.8 L1444.6 1209.8 L1444.01 1209.8 L1443.43 1209.8 L1442.84 1209.8 L1442.25 1209.8 L1441.67 1209.8 L1441.08 1209.8 L1440.5 1209.8 L1439.91 1209.8 L1439.32 1209.8 L1438.74 1209.8 L1438.15 1209.8 L1437.56 1209.8 L1436.98 1209.8 L1436.39 1209.8 L1435.8 1209.8 L1435.22 1209.8 L1434.63 1209.8 L1434.04 1209.8 L1433.46 1209.8 L1432.87 1209.8 L1432.29 1209.8 L1431.7 1209.8 L1431.11 1209.8 L1430.53 1209.8 L1429.94 1209.8 L1429.35 1209.8 L1428.77 1209.8 L1428.18 1209.8 L1427.59 1209.8 L1427.01 1209.8 L1426.42 1209.8 L1425.83 1209.8 L1425.25 1209.8 L1424.66 1209.8 L1424.08 1209.8 L1423.49 1209.8 L1422.9 1209.8 L1422.32 1209.8 L1421.73 1209.8 L1421.14 1209.8 L1420.56 1209.8 L1419.97 1209.8 L1419.38 1209.8 L1418.8 1209.8 L1418.21 1209.8 L1417.63 1209.8 L1417.04 1209.8 L1416.45 1209.8 L1415.87 1209.8 L1415.28 1209.8 L1414.69 1209.8 L1414.11 1209.8 L1413.52 1209.8 L1412.93 1209.8 L1412.35 1209.8 L1411.76 1209.8 L1411.17 1209.8 L1410.59 1209.8 L1410 1209.8 L1409.42 1209.8 L1408.83 1209.8 L1408.24 1209.8 L1407.66 1209.8 L1407.07 1209.8 L1406.48 1209.8 L1405.9 1209.8 L1405.31 1209.8 L1404.72 1209.8 L1404.14 1209.8 L1403.55 1209.8 L1402.96 1209.8 L1402.38 1209.8 L1401.79 1209.8 L1401.21 1209.8 L1400.62 1209.8 L1400.03 1209.8 L1399.45 1209.8 L1398.86 1209.8 L1398.27 1209.8 L1397.69 1209.8 L1397.1 1209.8 L1396.51 1209.8 L1395.93 1209.8 L1395.34 1209.8 L1394.75 1209.8 L1394.17 1209.8 L1393.58 1209.8 L1393 1209.8 L1392.41 1209.8 L1391.82 1209.8 L1391.24 1209.8 L1390.65 1209.8 L1390.06 1209.8 L1389.48 1209.8 L1388.89 1209.8 L1388.3 1209.8 L1387.72 1209.8 L1387.13 1209.8 L1386.55 1209.8 L1385.96 1209.8 L1385.37 1209.8 L1384.79 1209.8 L1384.2 1209.8 L1383.61 1209.8 L1383.03 1209.8 L1382.44 1209.8 L1381.85 1209.8 L1381.27 1209.8 L1380.68 1209.8 L1380.09 1209.8 L1379.51 1209.8 L1378.92 1209.8 L1378.34 1209.8 L1377.75 1209.8 L1377.16 1209.8 L1376.58 1209.8 L1375.99 1209.8 L1375.4 1209.8 L1374.82 1209.8 L1374.23 1209.8 L1373.64 1209.8 L1373.06 1209.8 L1372.47 1209.8 L1371.88 1209.8 L1371.3 1209.8 L1370.71 1209.8 L1370.13 1209.8 L1369.54 1209.8 L1368.95 1209.8 L1368.37 1209.8 L1367.78 1209.8 L1367.19 1209.8 L1366.61 1209.8 L1366.02 1209.8 L1365.43 1209.8 L1364.85 1209.8 L1364.26 1209.8 L1363.68 1209.8 L1363.09 1209.8 L1362.5 1209.8 L1361.92 1209.8 L1361.33 1209.8 L1360.74 1209.8 L1360.16 1209.8 L1359.57 1209.8 L1358.98 1209.8 L1358.4 1209.8 L1357.81 1209.8 L1357.22 1209.8 L1356.64 1209.8 L1356.05 1209.8 L1355.47 1209.8 L1354.88 1209.8 L1354.29 1209.8 L1353.71 1209.8 L1353.12 1209.8 L1352.53 1209.8 L1351.95 1209.8 L1351.36 1209.8 L1350.77 1209.8 L1350.19 1209.8 L1349.6 1209.8 L1349.01 1209.8 L1348.43 1209.8 L1347.84 1209.8 L1347.26 1209.8 L1346.67 1209.8 L1346.08 1209.8 L1345.5 1209.8 L1344.91 1209.8 L1344.32 1209.8 L1343.74 1209.8 L1343.15 1209.8 L1342.56 1209.8 L1341.98 1209.8 L1341.39 1209.8 L1340.8 1209.8 L1340.22 1209.8 L1339.63 1209.8 L1339.05 1209.8 L1338.46 1209.8 L1337.87 1209.8 L1337.29 1209.8 L1336.7 1209.8 L1336.11 1209.8 L1335.53 1209.8 L1334.94 1209.8 L1334.35 1209.8 L1333.77 1209.8 L1333.18 1209.8 L1332.6 1209.8 L1332.01 1209.8 L1331.42 1209.8 L1330.84 1209.8 L1330.25 1209.8 L1329.66 1209.8 L1329.08 1209.8 L1328.49 1209.8 L1327.9 1209.8 L1327.32 1209.8 L1326.73 1209.8 L1326.14 1209.8 L1325.56 1209.8 L1324.97 1209.8 L1324.39 1209.8 L1323.8 1209.8 L1323.21 1209.8 L1322.63 1209.8 L1322.04 1209.8 L1321.45 1209.8 L1320.87 1209.8 L1320.28 1209.8 L1319.69 1209.8 L1319.11 1209.8 L1318.52 1209.8 L1317.93 1209.8 L1317.35 1209.8 L1316.76 1209.8 L1316.18 1209.8 L1315.59 1209.8 L1315 1209.8 L1314.42 1209.8 L1313.83 1209.8 L1313.24 1209.8 L1312.66 1209.8 L1312.07 1209.8 L1311.48 1209.8 L1310.9 1209.8 L1310.31 1209.8 L1309.73 1209.8 L1309.14 1209.8 L1308.55 1209.8 L1307.97 1209.8 L1307.38 1209.8 L1306.79 1209.8 L1306.21 1209.8 L1305.62 1209.8 L1305.03 1209.8 L1304.45 1209.8 L1303.86 1209.8 L1303.27 1209.8 L1302.69 1209.8 L1302.1 1209.8 L1301.52 1209.8 L1300.93 1209.8 L1300.34 1209.8 L1299.76 1209.8 L1299.17 1209.8 L1298.58 1209.8 L1298 1209.8 L1297.41 1209.8 L1296.82 1209.8 L1296.24 1209.8 L1295.65 1209.8 L1295.06 1209.8 L1294.48 1209.8 L1293.89 1209.8 L1293.31 1209.8 L1292.72 1209.8 L1292.13 1209.8 L1291.55 1209.8 L1290.96 1209.8 L1290.37 1209.8 L1289.79 1209.8 L1289.2 1209.8 L1288.61 1209.8 L1288.03 1209.8 L1287.44 1209.8 L1286.86 1209.8 L1286.27 1209.8 L1285.68 1209.8 L1285.1 1209.8 L1284.51 1209.8 L1283.92 1209.8 L1283.34 1209.8 L1282.75 1209.8 L1282.16 1209.8 L1281.58 1209.8 L1280.99 1209.8 L1280.4 1209.8 L1279.82 1209.8 L1279.23 1209.8 L1278.65 1209.8 L1278.06 1209.8 L1277.47 1209.8 L1276.89 1209.8 L1276.3 1209.8 L1275.71 1209.8 L1275.13 1209.8 L1274.54 1209.8 L1273.95 1209.8 L1273.37 1209.8 L1272.78 1209.8 L1272.19 1209.8 L1271.61 1209.8 L1271.02 1209.8 L1270.44 1209.8 L1269.85 1209.8 L1269.26 1209.8 L1268.68 1209.8 L1268.09 1209.8 L1267.5 1209.8 L1266.92 1209.8 L1266.33 1209.8 L1265.74 1209.8 L1265.16 1209.8 L1264.57 1209.8 L1263.98 1209.8 L1263.4 1209.8 L1262.81 1209.8 L1262.23 1209.8 L1261.64 1209.8 L1261.05 1209.8 L1260.47 1209.8 L1259.88 1209.8 L1259.29 1209.8 L1258.71 1209.8 L1258.12 1209.8 L1257.53 1209.8 L1256.95 1209.8 L1256.36 1209.8 L1255.78 1209.8 L1255.19 1209.8 L1254.6 1209.8 L1254.02 1209.8 L1253.43 1209.8 L1252.84 1209.8 L1252.26 1209.8 L1251.67 1209.8 L1251.08 1209.8 L1250.5 1209.8 L1249.91 1209.8 L1249.32 1209.8 L1248.74 1209.8 L1248.15 1209.8 L1247.57 1209.8 L1246.98 1209.8 L1246.39 1209.8 L1245.81 1209.8 L1245.22 1209.8 L1244.63 1209.8 L1244.05 1209.8 L1243.46 1209.8 L1242.87 1209.8 L1242.29 1209.8 L1241.7 1209.8 L1241.11 1209.8 L1240.53 1209.8 L1239.94 1209.8 L1239.36 1209.8 L1238.77 1209.8 L1238.18 1209.8 L1237.6 1209.8 L1237.01 1209.8 L1236.42 1209.8 L1235.84 1209.8 L1235.25 1209.8 L1234.66 1209.8 L1234.08 1209.8 L1233.49 1209.8 L1232.91 1209.8 L1232.32 1209.8 L1231.73 1209.8 L1231.15 1209.8 L1230.56 1209.8 L1229.97 1209.8 L1229.39 1209.8 L1228.8 1209.8 L1228.21 1209.8 L1227.63 1209.8 L1227.04 1209.8 L1226.45 1209.8 L1225.87 1209.8 L1225.28 1209.8 L1224.7 1209.8 L1224.11 1209.8 L1223.52 1209.8 L1222.94 1209.8 L1222.35 1209.8 L1221.76 1209.8 L1221.18 1209.8 L1220.59 1209.8 L1220 1209.8 L1219.42 1209.8 L1218.83 1209.8 L1218.24 1209.8 L1217.66 1209.8 L1217.07 1209.8 L1216.49 1209.8 L1215.9 1209.8 L1215.31 1209.8 L1214.73 1209.8 L1214.14 1209.8 L1213.55 1209.8 L1212.97 1209.8 L1212.38 1209.8 L1211.79 1209.8 L1211.21 1209.8 L1210.62 1209.8 L1210.03 1209.8 L1209.45 1209.8 L1208.86 1209.8 L1208.28 1209.8 L1207.69 1209.8 L1207.1 1209.8 L1206.52 1209.8 L1205.93 1209.8 L1205.34 1209.8 L1204.76 1209.8 L1204.17 1209.8 L1203.58 1209.8 L1203 1209.8 L1202.41 1209.8 L1201.83 1209.8 L1201.24 1209.8 L1200.65 1209.8 L1200.07 1209.8 L1199.48 1209.8 L1198.89 1209.8 L1198.31 1209.8 L1197.72 1209.8 L1197.13 1209.8 L1196.55 1209.8 L1195.96 1209.8 L1195.37 1209.8 L1194.79 1209.8 L1194.2 1209.8 L1193.62 1209.8 L1193.03 1209.8 L1192.44 1209.8 L1191.86 1209.8 L1191.27 1209.8 L1190.68 1209.8 L1190.1 1209.8 L1189.51 1209.8 L1188.92 1209.8 L1188.34 1209.8 L1187.75 1209.8 L1187.16 1209.8 L1186.58 1209.8 L1185.99 1209.8 L1185.41 1209.8 L1184.82 1209.8 L1184.23 1209.8 L1183.65 1209.8 L1183.06 1209.8 L1182.47 1209.8 L1181.89 1209.8 L1181.3 1209.8 L1180.71 1209.8 L1180.13 1209.8 L1179.54 1209.8 L1178.96 1209.8 L1178.37 1209.8 L1177.78 1209.8 L1177.2 1209.8 L1176.61 1209.8 L1176.02 1209.8 L1175.44 1209.8 L1174.85 1209.8 L1174.26 1209.8 L1173.68 1209.8 L1173.09 1209.8 L1172.5 1209.8 L1171.92 1209.8 L1171.33 1209.8 L1170.75 1209.8 L1170.16 1209.8 L1169.57 1209.8 L1168.99 1209.8 L1168.4 1209.8 L1167.81 1209.8 L1167.23 1209.8 L1166.64 1209.8 L1166.05 1209.8 L1165.47 1209.8 L1164.88 1209.8 L1164.29 1209.8 L1163.71 1209.8 L1163.12 1209.8 L1162.54 1209.8 L1161.95 1209.8 L1161.36 1209.8 L1160.78 1209.8 L1160.19 1209.8 L1159.6 1209.8 L1159.02 1209.8 L1158.43 1209.8 L1157.84 1209.8 L1157.26 1209.8 L1156.67 1209.8 L1156.09 1209.8 L1155.5 1209.8 L1154.91 1209.8 L1154.33 1209.8 L1153.74 1209.8 L1153.15 1209.8 L1152.57 1209.8 L1151.98 1209.8 L1151.39 1209.8 L1150.81 1209.8 L1150.22 1209.8 L1149.63 1209.8 L1149.05 1209.8 L1148.46 1209.8 L1147.88 1209.8 L1147.29 1209.8 L1146.7 1209.8 L1146.12 1209.8 L1145.53 1209.8 L1144.94 1209.8 L1144.36 1209.8 L1143.77 1209.8 L1143.18 1209.8 L1142.6 1209.8 L1142.01 1209.8 L1141.42 1209.8 L1140.84 1209.8 L1140.25 1209.8 L1139.67 1209.8 L1139.08 1209.8 L1138.49 1209.8 L1137.91 1209.8 L1137.32 1209.8 L1136.73 1209.8 L1136.15 1209.8 L1135.56 1209.8 L1134.97 1209.8 L1134.39 1209.8 L1133.8 1209.8 L1133.21 1209.8 L1132.63 1209.8 L1132.04 1209.8 L1131.46 1209.8 L1130.87 1209.8 L1130.28 1209.8 L1129.7 1209.8 L1129.11 1209.8 L1128.52 1209.8 L1127.94 1209.8 L1127.35 1209.8 L1126.76 1209.8 L1126.18 1209.8 L1125.59 1209.8 L1125.01 1209.8 L1124.42 1209.8 L1123.83 1209.8 L1123.25 1209.8 L1122.66 1209.8 L1122.07 1209.8 L1121.49 1209.8 L1120.9 1209.8 L1120.31 1209.8 L1119.73 1209.8 L1119.14 1209.8 L1118.55 1209.8 L1117.97 1209.8 L1117.38 1209.8 L1116.8 1209.8 L1116.21 1209.8 L1115.62 1209.8 L1115.04 1209.8 L1114.45 1209.8 L1113.86 1209.8 L1113.28 1209.8 L1112.69 1209.8 L1112.1 1209.8 L1111.52 1209.8 L1110.93 1209.8 L1110.34 1209.8 L1109.76 1209.8 L1109.17 1209.8 L1108.59 1209.8 L1108 1209.8 L1107.41 1209.8 L1106.83 1209.8 L1106.24 1209.8 L1105.65 1209.8 L1105.07 1209.8 L1104.48 1209.8 L1103.89 1209.8 L1103.31 1209.8 L1102.72 1209.8 L1102.14 1209.8 L1101.55 1209.8 L1100.96 1209.8 L1100.38 1209.8 L1099.79 1209.8 L1099.2 1209.8 L1098.62 1209.8 L1098.03 1209.8 L1097.44 1209.8 L1096.86 1209.8 L1096.27 1209.8 L1095.68 1209.8 L1095.1 1209.8 L1094.51 1209.8 L1093.93 1209.8 L1093.34 1209.8 L1092.75 1209.8 L1092.17 1209.8 L1091.58 1209.8 L1090.99 1209.8 L1090.41 1209.8 L1089.82 1209.8 L1089.23 1209.8 L1088.65 1209.8 L1088.06 1209.8 L1087.47 1209.8 L1086.89 1209.8 L1086.3 1209.8 L1085.72 1209.8 L1085.13 1209.8 L1084.54 1209.8 L1083.96 1209.8 L1083.37 1209.8 L1082.78 1209.8 L1082.2 1209.8 L1081.61 1209.8 L1081.02 1209.8 L1080.44 1209.8 L1079.85 1209.8 L1079.26 1209.8 L1078.68 1209.8 L1078.09 1209.8 L1077.51 1209.8 L1076.92 1209.8 L1076.33 1209.8 L1075.75 1209.8 L1075.16 1209.8 L1074.57 1209.8 L1073.99 1209.8 L1073.4 1209.8 L1072.81 1209.8 L1072.23 1209.8 L1071.64 1209.8 L1071.06 1209.8 L1070.47 1209.8 L1069.88 1209.8 L1069.3 1209.8 L1068.71 1209.8 L1068.12 1209.8 L1067.54 1209.8 L1066.95 1209.8 L1066.36 1209.8 L1065.78 1209.8 L1065.19 1209.8 L1064.6 1209.8 L1064.02 1209.8 L1063.43 1209.8 L1062.85 1209.8 L1062.26 1209.8 L1061.67 1209.8 L1061.09 1209.8 L1060.5 1209.8 L1059.91 1209.8 L1059.33 1209.8 L1058.74 1209.8 L1058.15 1209.8 L1057.57 1209.8 L1056.98 1209.8 L1056.39 1209.8 L1055.81 1209.8 L1055.22 1209.8 L1054.64 1209.8 L1054.05 1209.8 L1053.46 1209.8 L1052.88 1209.8 L1052.29 1209.8 L1051.7 1209.8 L1051.12 1209.8 L1050.53 1209.8 L1049.94 1209.8 L1049.36 1209.8 L1048.77 1209.8 L1048.19 1209.8 L1047.6 1209.8 L1047.01 1209.8 L1046.43 1209.8 L1045.84 1209.8 L1045.25 1209.8 L1044.67 1209.8 L1044.08 1209.8 L1043.49 1209.8 L1042.91 1209.8 L1042.32 1209.8 L1041.73 1209.8 L1041.15 1209.8 L1040.56 1209.8 L1039.98 1209.8 L1039.39 1209.8 L1038.8 1209.8 L1038.22 1209.8 L1037.63 1209.8 L1037.04 1209.8 L1036.46 1209.8 L1035.87 1209.8 L1035.28 1209.8 L1034.7 1209.8 L1034.11 1209.8 L1033.52 1209.8 L1032.94 1209.8 L1032.35 1209.8 L1031.77 1209.8 L1031.18 1209.8 L1030.59 1209.8 L1030.01 1209.8 L1029.42 1209.8 L1028.83 1209.8 L1028.25 1209.8 L1027.66 1209.8 L1027.07 1209.8 L1026.49 1209.8 L1025.9 1209.8 L1025.32 1209.8 L1024.73 1209.8 L1024.14 1209.8 L1023.56 1209.8 L1022.97 1209.8 L1022.38 1209.8 L1021.8 1209.8 L1021.21 1209.8 L1020.62 1209.8 L1020.04 1209.8 L1019.45 1209.8 L1018.86 1209.8 L1018.28 1209.8 L1017.69 1209.8 L1017.11 1209.8 L1016.52 1209.8 L1015.93 1209.8 L1015.35 1209.8 L1014.76 1209.8 L1014.17 1209.8 L1013.59 1209.8 L1013 1209.8 L1012.41 1209.8 L1011.83 1209.8 L1011.24 1209.8 L1010.65 1209.8 L1010.07 1209.8 L1009.48 1209.8 L1008.9 1209.8 L1008.31 1209.8 L1007.72 1209.8 L1007.14 1209.8 L1006.55 1209.8 L1005.96 1209.8 L1005.38 1209.8 L1004.79 1209.8 L1004.2 1209.8 L1003.62 1209.8 L1003.03 1209.8 L1002.44 1209.8 L1001.86 1209.8 L1001.27 1209.8 L1000.69 1209.8 L1000.1 1209.8 L999.513 1209.8 L998.926 1209.8 L998.34 1209.8 L997.754 1209.8 L997.167 1209.8 L996.581 1209.8 L995.994 1209.8 L995.408 1209.8 L994.822 1209.8 L994.235 1209.8 L993.649 1209.8 L993.062 1209.8 L992.476 1209.8 L991.889 1209.8 L991.303 1209.8 L990.717 1209.8 L990.13 1209.8 L989.544 1209.8 L988.957 1209.8 L988.371 1209.8 L987.785 1209.8 L987.198 1209.8 L986.612 1209.8 L986.025 1209.8  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.17 986.612,1210.17 987.198,1210.17 987.785,1210.17 988.371,1210.17 988.957,1210.17 989.544,1210.17 990.13,1210.17 990.717,1210.17 991.303,1210.17 991.889,1210.17 992.476,1210.17 993.062,1210.17 993.649,1210.17 994.235,1210.17 994.822,1210.17 995.408,1210.17 995.994,1210.17 996.581,1210.17 997.167,1210.17 997.754,1210.17 998.34,1210.17 998.926,1210.17 999.513,1210.17 1000.1,1210.17 1000.69,1210.17 1001.27,1210.17 1001.86,1210.17 1002.44,1210.17 1003.03,1210.17 1003.62,1210.17 1004.2,1210.17 1004.79,1210.17 1005.38,1210.17 1005.96,1210.17 1006.55,1210.17 1007.14,1210.17 1007.72,1210.17 1008.31,1210.17 1008.9,1210.17 1009.48,1210.17 1010.07,1210.17 1010.65,1210.17 1011.24,1210.17 1011.83,1210.17 1012.41,1210.17 1013,1210.17 1013.59,1210.17 1014.17,1210.17 1014.76,1210.17 1015.35,1210.17 1015.93,1210.17 1016.52,1210.17 1017.11,1210.17 1017.69,1210.17 1018.28,1210.17 1018.86,1210.17 1019.45,1210.17 1020.04,1210.17 1020.62,1210.17 1021.21,1210.17 1021.8,1210.17 1022.38,1210.17 1022.97,1210.17 1023.56,1210.17 1024.14,1210.17 1024.73,1210.17 1025.32,1210.17 1025.9,1210.17 1026.49,1210.17 1027.07,1210.17 1027.66,1210.17 1028.25,1210.17 1028.83,1210.17 1029.42,1210.17 1030.01,1210.17 1030.59,1210.17 1031.18,1210.17 1031.77,1210.17 1032.35,1210.17 1032.94,1210.17 1033.52,1210.17 1034.11,1210.17 1034.7,1210.17 1035.28,1210.17 1035.87,1210.17 1036.46,1210.17 1037.04,1210.17 1037.63,1210.17 1038.22,1210.17 1038.8,1210.17 1039.39,1210.17 1039.98,1210.17 1040.56,1210.17 1041.15,1210.17 1041.73,1210.17 1042.32,1210.17 1042.91,1210.17 1043.49,1210.17 1044.08,1210.17 1044.67,1210.17 1045.25,1210.17 1045.84,1210.17 1046.43,1210.17 1047.01,1210.17 1047.6,1210.17 1048.19,1210.17 1048.77,1210.17 1049.36,1210.17 1049.94,1210.17 1050.53,1210.17 1051.12,1210.17 1051.7,1210.17 1052.29,1210.17 1052.88,1210.17 1053.46,1210.17 1054.05,1210.17 1054.64,1210.17 1055.22,1210.17 1055.81,1210.17 1056.39,1210.17 1056.98,1210.17 1057.57,1210.17 1058.15,1210.17 1058.74,1210.17 1059.33,1210.17 1059.91,1210.17 1060.5,1210.17 1061.09,1210.17 1061.67,1210.17 1062.26,1210.17 1062.85,1210.17 1063.43,1210.17 1064.02,1210.17 1064.6,1210.17 1065.19,1210.17 1065.78,1210.17 1066.36,1210.17 1066.95,1210.17 1067.54,1210.17 1068.12,1210.17 1068.71,1210.17 1069.3,1210.17 1069.88,1210.17 1070.47,1210.17 1071.06,1210.17 1071.64,1210.17 1072.23,1210.17 1072.81,1210.17 1073.4,1210.17 1073.99,1210.17 1074.57,1210.17 1075.16,1210.17 1075.75,1210.17 1076.33,1210.17 1076.92,1210.17 1077.51,1210.17 1078.09,1210.17 1078.68,1210.17 1079.26,1210.17 1079.85,1210.17 1080.44,1210.17 1081.02,1210.17 1081.61,1210.17 1082.2,1210.17 1082.78,1210.17 1083.37,1210.17 1083.96,1210.17 1084.54,1210.17 1085.13,1210.17 1085.72,1210.17 1086.3,1210.17 1086.89,1210.17 1087.47,1210.17 1088.06,1210.17 1088.65,1210.17 1089.23,1210.17 1089.82,1210.17 1090.41,1210.17 1090.99,1210.17 1091.58,1210.17 1092.17,1210.17 1092.75,1210.17 1093.34,1210.17 1093.93,1210.17 1094.51,1210.17 1095.1,1210.17 1095.68,1210.17 1096.27,1210.17 1096.86,1210.17 1097.44,1210.17 1098.03,1210.17 1098.62,1210.17 1099.2,1210.17 1099.79,1210.17 1100.38,1210.17 1100.96,1210.17 1101.55,1210.17 1102.14,1210.17 1102.72,1210.17 1103.31,1210.17 1103.89,1210.17 1104.48,1210.17 1105.07,1210.17 1105.65,1210.17 1106.24,1210.17 1106.83,1210.17 1107.41,1210.17 1108,1210.17 1108.59,1210.17 1109.17,1210.17 1109.76,1210.17 1110.34,1210.17 1110.93,1210.17 1111.52,1210.17 1112.1,1210.17 1112.69,1210.17 1113.28,1210.17 1113.86,1210.17 1114.45,1210.17 1115.04,1210.17 1115.62,1210.17 1116.21,1210.17 1116.8,1210.17 1117.38,1210.17 1117.97,1210.17 1118.55,1210.17 1119.14,1210.17 1119.73,1210.17 1120.31,1210.17 1120.9,1210.17 1121.49,1210.17 1122.07,1210.17 1122.66,1210.17 1123.25,1210.17 1123.83,1210.17 1124.42,1210.17 1125.01,1210.17 1125.59,1210.17 1126.18,1210.17 1126.76,1210.17 1127.35,1210.17 1127.94,1210.17 1128.52,1210.17 1129.11,1210.17 1129.7,1210.17 1130.28,1210.17 1130.87,1210.17 1131.46,1210.17 1132.04,1210.17 1132.63,1210.17 1133.21,1210.17 1133.8,1210.17 1134.39,1210.17 1134.97,1210.17 1135.56,1210.17 1136.15,1210.17 1136.73,1210.17 1137.32,1210.17 1137.91,1210.17 1138.49,1210.17 1139.08,1210.17 1139.67,1210.17 1140.25,1210.17 1140.84,1210.17 1141.42,1210.17 1142.01,1210.17 1142.6,1210.17 1143.18,1210.17 1143.77,1210.17 1144.36,1210.17 1144.94,1210.17 1145.53,1210.17 1146.12,1210.17 1146.7,1210.17 1147.29,1210.17 1147.88,1210.17 1148.46,1210.17 1149.05,1210.17 1149.63,1210.17 1150.22,1210.17 1150.81,1210.17 1151.39,1210.17 1151.98,1210.17 1152.57,1210.17 1153.15,1210.17 1153.74,1210.17 1154.33,1210.17 1154.91,1210.17 1155.5,1210.17 1156.09,1210.17 1156.67,1210.17 1157.26,1210.17 1157.84,1210.17 1158.43,1210.17 1159.02,1210.17 1159.6,1210.17 1160.19,1210.17 1160.78,1210.17 1161.36,1210.17 1161.95,1210.17 1162.54,1210.17 1163.12,1210.17 1163.71,1210.17 1164.29,1210.17 1164.88,1210.17 1165.47,1210.17 1166.05,1210.17 1166.64,1210.17 1167.23,1210.17 1167.81,1210.17 1168.4,1210.17 1168.99,1210.17 1169.57,1210.17 1170.16,1210.17 1170.75,1210.17 1171.33,1210.17 1171.92,1210.17 1172.5,1210.17 1173.09,1210.17 1173.68,1210.17 1174.26,1210.17 1174.85,1210.17 1175.44,1210.17 1176.02,1210.17 1176.61,1210.17 1177.2,1210.17 1177.78,1210.17 1178.37,1210.17 1178.96,1210.17 1179.54,1210.17 1180.13,1210.17 1180.71,1210.17 1181.3,1210.17 1181.89,1210.17 1182.47,1210.17 1183.06,1210.17 1183.65,1210.17 1184.23,1210.17 1184.82,1210.17 1185.41,1210.17 1185.99,1210.17 1186.58,1210.17 1187.16,1210.17 1187.75,1210.17 1188.34,1210.17 1188.92,1210.17 1189.51,1210.17 1190.1,1210.17 1190.68,1210.17 1191.27,1210.17 1191.86,1210.17 1192.44,1210.17 1193.03,1210.17 1193.62,1210.17 1194.2,1210.17 1194.79,1210.17 1195.37,1210.17 1195.96,1210.17 1196.55,1210.17 1197.13,1210.17 1197.72,1210.17 1198.31,1210.17 1198.89,1210.17 1199.48,1210.17 1200.07,1210.17 1200.65,1210.17 1201.24,1210.17 1201.83,1210.17 1202.41,1210.17 1203,1210.17 1203.58,1210.17 1204.17,1210.17 1204.76,1210.17 1205.34,1210.17 1205.93,1210.17 1206.52,1210.17 1207.1,1210.17 1207.69,1210.17 1208.28,1210.17 1208.86,1210.17 1209.45,1210.17 1210.03,1210.17 1210.62,1210.17 1211.21,1210.17 1211.79,1210.17 1212.38,1210.17 1212.97,1210.17 1213.55,1210.17 1214.14,1210.17 1214.73,1210.17 1215.31,1210.17 1215.9,1210.17 1216.49,1210.17 1217.07,1210.17 1217.66,1210.17 1218.24,1210.17 1218.83,1210.17 1219.42,1210.17 1220,1210.17 1220.59,1210.17 1221.18,1210.17 1221.76,1210.17 1222.35,1210.17 1222.94,1210.17 1223.52,1210.17 1224.11,1210.17 1224.7,1210.17 1225.28,1210.17 1225.87,1210.17 1226.45,1210.17 1227.04,1210.17 1227.63,1210.17 1228.21,1210.17 1228.8,1210.17 1229.39,1210.17 1229.97,1210.17 1230.56,1210.17 1231.15,1210.17 1231.73,1210.17 1232.32,1210.17 1232.91,1210.17 1233.49,1210.17 1234.08,1210.17 1234.66,1210.17 1235.25,1210.17 1235.84,1210.17 1236.42,1210.17 1237.01,1210.17 1237.6,1210.17 1238.18,1210.17 1238.77,1210.17 1239.36,1210.17 1239.94,1210.17 1240.53,1210.17 1241.11,1210.17 1241.7,1210.17 1242.29,1210.17 1242.87,1210.17 1243.46,1210.17 1244.05,1210.17 1244.63,1210.17 1245.22,1210.17 1245.81,1210.17 1246.39,1210.17 1246.98,1210.17 1247.57,1210.17 1248.15,1210.17 1248.74,1210.17 1249.32,1210.17 1249.91,1210.17 1250.5,1210.17 1251.08,1210.17 1251.67,1210.17 1252.26,1210.17 1252.84,1210.17 1253.43,1210.17 1254.02,1210.17 1254.6,1210.17 1255.19,1210.17 1255.78,1210.17 1256.36,1210.17 1256.95,1210.17 1257.53,1210.17 1258.12,1210.17 1258.71,1210.17 1259.29,1210.17 1259.88,1210.17 1260.47,1210.17 1261.05,1210.17 1261.64,1210.17 1262.23,1210.17 1262.81,1210.17 1263.4,1210.17 1263.98,1210.17 1264.57,1210.17 1265.16,1210.17 1265.74,1210.17 1266.33,1210.17 1266.92,1210.17 1267.5,1210.17 1268.09,1210.17 1268.68,1210.17 1269.26,1210.17 1269.85,1210.17 1270.44,1210.17 1271.02,1210.17 1271.61,1210.17 1272.19,1210.17 1272.78,1210.17 1273.37,1210.17 1273.95,1210.17 1274.54,1210.17 1275.13,1210.17 1275.71,1210.17 1276.3,1210.17 1276.89,1210.17 1277.47,1210.17 1278.06,1210.17 1278.65,1210.17 1279.23,1210.17 1279.82,1210.17 1280.4,1210.17 1280.99,1210.17 1281.58,1210.17 1282.16,1210.17 1282.75,1210.17 1283.34,1210.17 1283.92,1210.17 1284.51,1210.17 1285.1,1210.17 1285.68,1210.17 1286.27,1210.17 1286.86,1210.17 1287.44,1210.17 1288.03,1210.17 1288.61,1210.17 1289.2,1210.17 1289.79,1210.17 1290.37,1210.17 1290.96,1210.17 1291.55,1210.17 1292.13,1210.17 1292.72,1210.17 1293.31,1210.17 1293.89,1210.17 1294.48,1210.17 1295.06,1210.17 1295.65,1210.17 1296.24,1210.17 1296.82,1210.17 1297.41,1210.17 1298,1210.17 1298.58,1210.17 1299.17,1210.17 1299.76,1210.17 1300.34,1210.17 1300.93,1210.17 1301.52,1210.17 1302.1,1210.17 1302.69,1210.17 1303.27,1210.17 1303.86,1210.17 1304.45,1210.17 1305.03,1210.17 1305.62,1210.17 1306.21,1210.17 1306.79,1210.17 1307.38,1210.17 1307.97,1210.17 1308.55,1210.17 1309.14,1210.17 1309.73,1210.17 1310.31,1210.17 1310.9,1210.17 1311.48,1210.17 1312.07,1210.17 1312.66,1210.17 1313.24,1210.17 1313.83,1210.17 1314.42,1210.17 1315,1210.17 1315.59,1210.17 1316.18,1210.17 1316.76,1210.17 1317.35,1210.17 1317.93,1210.17 1318.52,1210.17 1319.11,1210.17 1319.69,1210.17 1320.28,1210.17 1320.87,1210.17 1321.45,1210.17 1322.04,1210.17 1322.63,1210.17 1323.21,1210.17 1323.8,1210.17 1324.39,1210.17 1324.97,1210.17 1325.56,1210.17 1326.14,1210.17 1326.73,1210.17 1327.32,1210.17 1327.9,1210.17 1328.49,1210.17 1329.08,1210.17 1329.66,1210.17 1330.25,1210.17 1330.84,1210.17 1331.42,1210.17 1332.01,1210.17 1332.6,1210.17 1333.18,1210.17 1333.77,1210.17 1334.35,1210.17 1334.94,1210.17 1335.53,1210.17 1336.11,1210.17 1336.7,1210.17 1337.29,1210.17 1337.87,1210.17 1338.46,1210.17 1339.05,1210.17 1339.63,1210.17 1340.22,1210.17 1340.8,1210.17 1341.39,1210.17 1341.98,1210.17 1342.56,1210.17 1343.15,1210.17 1343.74,1210.17 1344.32,1210.17 1344.91,1210.17 1345.5,1210.17 1346.08,1210.17 1346.67,1210.17 1347.26,1210.17 1347.84,1210.17 1348.43,1210.17 1349.01,1210.17 1349.6,1210.17 1350.19,1210.17 1350.77,1210.17 1351.36,1210.17 1351.95,1210.17 1352.53,1210.17 1353.12,1210.17 1353.71,1210.17 1354.29,1210.17 1354.88,1210.17 1355.47,1210.17 1356.05,1210.17 1356.64,1210.17 1357.22,1210.17 1357.81,1210.17 1358.4,1210.17 1358.98,1210.17 1359.57,1210.17 1360.16,1210.17 1360.74,1210.17 1361.33,1210.17 1361.92,1210.17 1362.5,1210.17 1363.09,1210.17 1363.68,1210.17 1364.26,1210.17 1364.85,1210.17 1365.43,1210.17 1366.02,1210.17 1366.61,1210.17 1367.19,1210.17 1367.78,1210.17 1368.37,1210.17 1368.95,1210.17 1369.54,1210.17 1370.13,1210.17 1370.71,1210.17 1371.3,1210.17 1371.88,1210.17 1372.47,1210.17 1373.06,1210.17 1373.64,1210.17 1374.23,1210.17 1374.82,1210.17 1375.4,1210.17 1375.99,1210.17 1376.58,1210.17 1377.16,1210.17 1377.75,1210.17 1378.34,1210.17 1378.92,1210.17 1379.51,1210.17 1380.09,1210.17 1380.68,1210.17 1381.27,1210.17 1381.85,1210.17 1382.44,1210.17 1383.03,1210.17 1383.61,1210.17 1384.2,1210.17 1384.79,1210.17 1385.37,1210.17 1385.96,1210.17 1386.55,1210.17 1387.13,1210.17 1387.72,1210.17 1388.3,1210.17 1388.89,1210.17 1389.48,1210.17 1390.06,1210.17 1390.65,1210.17 1391.24,1210.17 1391.82,1210.17 1392.41,1210.17 1393,1210.17 1393.58,1210.17 1394.17,1210.17 1394.75,1210.17 1395.34,1210.17 1395.93,1210.17 1396.51,1210.17 1397.1,1210.17 1397.69,1210.17 1398.27,1210.17 1398.86,1210.17 1399.45,1210.17 1400.03,1210.17 1400.62,1210.17 1401.21,1210.17 1401.79,1210.17 1402.38,1210.17 1402.96,1210.17 1403.55,1210.17 1404.14,1210.17 1404.72,1210.17 1405.31,1210.17 1405.9,1210.17 1406.48,1210.17 1407.07,1210.17 1407.66,1210.17 1408.24,1210.17 1408.83,1210.17 1409.42,1210.17 1410,1210.17 1410.59,1210.17 1411.17,1210.17 1411.76,1210.17 1412.35,1210.17 1412.93,1210.17 1413.52,1210.17 1414.11,1210.17 1414.69,1210.17 1415.28,1210.17 1415.87,1210.17 1416.45,1210.17 1417.04,1210.17 1417.63,1210.17 1418.21,1210.17 1418.8,1210.17 1419.38,1210.17 1419.97,1210.17 1420.56,1210.17 1421.14,1210.17 1421.73,1210.17 1422.32,1210.17 1422.9,1210.17 1423.49,1210.17 1424.08,1210.17 1424.66,1210.17 1425.25,1210.17 1425.83,1210.17 1426.42,1210.17 1427.01,1210.17 1427.59,1210.17 1428.18,1210.17 1428.77,1210.17 1429.35,1210.17 1429.94,1210.17 1430.53,1210.17 1431.11,1210.17 1431.7,1210.17 1432.29,1210.17 1432.87,1210.17 1433.46,1210.17 1434.04,1210.17 1434.63,1210.17 1435.22,1210.17 1435.8,1210.17 1436.39,1210.17 1436.98,1210.17 1437.56,1210.17 1438.15,1210.17 1438.74,1210.17 1439.32,1210.17 1439.91,1210.17 1440.5,1210.17 1441.08,1210.17 1441.67,1210.17 1442.25,1210.17 1442.84,1210.17 1443.43,1210.17 1444.01,1210.17 1444.6,1210.17 1445.19,1210.17 1445.77,1210.17 1446.36,1210.17 1446.95,1210.17 1447.53,1210.17 1448.12,1210.17 1448.7,1210.17 1449.29,1210.17 1449.88,1210.17 1450.46,1210.17 1451.05,1210.17 1451.64,1210.17 1452.22,1210.17 1452.81,1210.17 1453.4,1210.17 1453.98,1210.17 1454.57,1210.17 1455.16,1210.17 1455.74,1210.17 1456.33,1210.17 1456.91,1210.17 1457.5,1210.17 1458.09,1210.17 1458.67,1210.17 1459.26,1210.17 1459.85,1210.17 1460.43,1210.17 1461.02,1210.17 1461.61,1210.17 1462.19,1210.17 1462.78,1210.17 1463.37,1210.17 1463.95,1210.17 1464.54,1210.17 1465.12,1210.17 1465.71,1210.17 1466.3,1210.17 1466.88,1210.17 1467.47,1210.17 1468.06,1210.17 1468.64,1210.17 1469.23,1210.17 1469.82,1210.17 1470.4,1210.17 1470.99,1210.17 1471.57,1210.17 1472.16,1210.17 1472.75,1210.17 1473.33,1210.17 1473.92,1210.17 1474.51,1210.17 1475.09,1210.17 1475.68,1210.17 1476.27,1210.17 1476.85,1210.17 1477.44,1210.17 1478.03,1210.17 1478.61,1210.17 1479.2,1210.17 1479.78,1210.17 1480.37,1210.17 1480.96,1210.17 1481.54,1210.17 1482.13,1210.17 1482.72,1210.17 1483.3,1210.17 1483.89,1210.17 1484.48,1210.17 1485.06,1210.17 1485.65,1210.17 1486.24,1210.17 1486.82,1210.17 1487.41,1210.17 1487.99,1210.17 1488.58,1210.17 1489.17,1210.17 1489.75,1210.17 1490.34,1210.17 1490.93,1210.17 1491.51,1210.17 1492.1,1210.17 1492.69,1210.17 1493.27,1210.17 1493.86,1210.17 1494.45,1210.17 1495.03,1210.17 1495.62,1210.17 1496.2,1210.17 1496.79,1210.17 1497.38,1210.17 1497.96,1210.17 1498.55,1210.17 1499.14,1210.17 1499.72,1210.17 1500.31,1210.17 1500.9,1210.17 1501.48,1210.17 1502.07,1210.17 1502.65,1210.17 1503.24,1210.17 1503.83,1210.17 1504.41,1210.17 1505,1210.17 1505.59,1210.17 1506.17,1210.17 1506.76,1210.17 1507.35,1210.17 1507.93,1210.17 1508.52,1210.17 1509.11,1210.17 1509.69,1210.17 1510.28,1210.17 1510.86,1210.17 1511.45,1210.17 1512.04,1210.17 1512.62,1210.17 1513.21,1210.17 1513.8,1210.17 1514.38,1210.17 1514.97,1210.17 1515.56,1210.17 1516.14,1210.17 1516.73,1210.17 1517.32,1210.17 1517.9,1210.17 1518.49,1210.17 1519.07,1210.17 1519.66,1210.17 1520.25,1210.17 1520.83,1210.17 1521.42,1210.17 1522.01,1210.17 1522.59,1210.17 1523.18,1210.17 1523.77,1210.17 1524.35,1210.17 1524.94,1210.17 1525.52,1210.17 1526.11,1210.17 1526.7,1210.17 1527.28,1210.17 1527.87,1210.17 1528.46,1210.17 1529.04,1210.17 1529.63,1210.17 1530.22,1210.17 1530.8,1210.17 1531.39,1210.17 1531.98,1210.17 1532.56,1210.17 1533.15,1210.17 1533.73,1210.17 1534.32,1210.17 1534.91,1210.17 1535.49,1210.17 1536.08,1210.17 1536.67,1210.17 1537.25,1210.17 1537.84,1210.17 1538.43,1210.17 1539.01,1210.17 1539.6,1210.17 1540.19,1210.17 1540.77,1210.17 1541.36,1210.17 1541.94,1210.17 1542.53,1210.17 1543.12,1210.17 1543.7,1210.17 1544.29,1210.17 1544.88,1210.17 1545.46,1210.17 1546.05,1210.17 1546.64,1210.17 1547.22,1210.17 1547.81,1210.17 1548.4,1210.17 1548.98,1210.17 1549.57,1210.17 1550.15,1210.17 1550.74,1210.17 1551.33,1210.17 1551.91,1210.17 1552.5,1210.17 1553.09,1210.17 1553.67,1210.17 1554.26,1210.17 1554.85,1210.17 1555.43,1210.17 1556.02,1210.17 1556.6,1210.17 1557.19,1210.17 1557.78,1210.17 1558.36,1210.17 1558.95,1210.17 1559.54,1210.17 1560.12,1210.17 1560.71,1210.17 1561.3,1210.17 1561.88,1210.17 1562.47,1210.17 1563.06,1210.17 1563.64,1210.17 1564.23,1210.17 1564.81,1210.17 1565.4,1210.17 1565.99,1210.17 1566.57,1210.17 1567.16,1210.17 1567.75,1210.17 1568.33,1210.17 1568.92,1210.17 1569.51,1210.17 1570.09,1210.17 1570.68,1210.17 1571.27,1210.17 1571.85,1210.17 1572.44,1210.17 1573.02,1210.17 1573.61,1210.17 1574.2,1210.17 1574.78,1210.17 1575.37,1210.17 1575.96,1210.17 1576.54,1210.17 1577.13,1210.17 1577.72,1210.17 1578.3,1210.17 1578.89,1210.17 1579.47,1210.17 1580.06,1210.17 1580.65,1210.17 1581.23,1210.17 1581.82,1210.17 1582.41,1210.17 1582.99,1210.17 1583.58,1210.17 1584.17,1210.17 1584.75,1210.17 1585.34,1210.17 1585.93,1210.17 1586.51,1210.17 1587.1,1210.17 1587.68,1210.17 1588.27,1210.17 1588.86,1210.17 1589.44,1210.17 1590.03,1210.17 1590.62,1210.17 1591.2,1210.17 1591.79,1210.17 1592.38,1210.17 1592.96,1210.17 1593.55,1210.17 1594.14,1210.17 1594.72,1210.17 1595.31,1210.17 1595.89,1210.17 1596.48,1210.17 1597.07,1210.17 1597.65,1210.17 1598.24,1210.17 1598.83,1210.17 1599.41,1210.17 1600,1210.17 1600.59,1210.17 1601.17,1210.17 1601.76,1210.17 1602.34,1210.17 1602.93,1210.17 1603.52,1210.17 1604.1,1210.17 1604.69,1210.17 1605.28,1210.17 1605.86,1210.17 1606.45,1210.17 1607.04,1210.17 1607.62,1210.17 1608.21,1210.17 1608.8,1210.17 1609.38,1210.17 1609.97,1210.17 1610.55,1210.17 1611.14,1210.17 1611.73,1210.17 1612.31,1210.17 1612.9,1210.17 1613.49,1210.17 1614.07,1210.17 1614.66,1210.17 1615.25,1210.17 1615.83,1210.17 1616.42,1210.17 1617.01,1210.17 1617.59,1210.17 1618.18,1210.17 1618.76,1210.17 1619.35,1210.17 1619.94,1210.17 1620.52,1210.17 1621.11,1210.17 1621.7,1210.17 1622.28,1210.17 1622.87,1210.17 1623.46,1210.17 1624.04,1210.17 1624.63,1210.17 1625.22,1210.17 1625.8,1210.17 1626.39,1210.17 1626.97,1210.17 1627.56,1210.17 1628.15,1210.17 1628.73,1210.17 1629.32,1210.17 1629.91,1210.17 1630.49,1210.17 1631.08,1210.17 1631.67,1210.17 1632.25,1210.17 1632.84,1210.17 1633.42,1210.17 1634.01,1210.17 1634.6,1210.17 1635.18,1210.17 1635.77,1210.17 1636.36,1210.17 1636.94,1210.17 1637.53,1210.17 1638.12,1210.17 1638.7,1210.17 1639.29,1210.17 1639.88,1210.17 1640.46,1210.17 1641.05,1210.17 1641.63,1210.17 1642.22,1210.17 1642.81,1210.17 1643.39,1210.17 1643.98,1210.17 1644.57,1210.17 1645.15,1210.17 1645.74,1210.17 1646.33,1210.17 1646.91,1210.17 1647.5,1210.17 1648.09,1210.17 1648.67,1210.17 1649.26,1210.17 1649.84,1210.17 1650.43,1210.17 1651.02,1210.17 1651.6,1210.17 1652.19,1210.17 1652.78,1210.17 1653.36,1210.17 1653.95,1210.17 1654.54,1210.17 1655.12,1210.17 1655.71,1210.17 1656.29,1210.17 1656.88,1210.17 1657.47,1210.17 1658.05,1210.17 1658.64,1210.17 1659.23,1210.17 1659.81,1210.17 1660.4,1210.17 1660.99,1210.17 1661.57,1210.17 1662.16,1210.17 1662.75,1210.17 1663.33,1210.17 1663.92,1210.17 1664.5,1210.17 1665.09,1210.17 1665.68,1210.17 1666.26,1210.17 1666.85,1210.17 1667.44,1210.17 1668.02,1210.17 1668.61,1210.17 1669.2,1210.17 1669.78,1210.17 1670.37,1210.17 1670.96,1210.17 1671.54,1210.17 1672.13,1210.17 1672.71,1210.17 1673.3,1210.17 1673.89,1210.17 1674.47,1210.17 1675.06,1210.17 1675.65,1210.17 1676.23,1210.17 1676.82,1210.17 1677.41,1210.17 1677.99,1210.17 1678.58,1210.17 1679.17,1210.17 1679.75,1210.17 1680.34,1210.17 1680.92,1210.17 1681.51,1210.17 1682.1,1210.17 1682.68,1210.17 1683.27,1210.17 1683.86,1210.17 1684.44,1210.17 1685.03,1210.17 1685.62,1210.17 1686.2,1210.17 1686.79,1210.17 1687.37,1210.17 1687.96,1210.17 1688.55,1210.17 1689.13,1210.17 1689.72,1210.17 1690.31,1210.17 1690.89,1210.17 1691.48,1210.17 1692.07,1210.17 1692.65,1210.17 1693.24,1210.17 1693.83,1210.17 1694.41,1210.17 1695,1210.17 1695.58,1210.17 1696.17,1210.17 1696.76,1210.17 1697.34,1210.17 1697.93,1210.17 1698.52,1210.17 1699.1,1210.17 1699.69,1210.17 1700.28,1210.17 1700.86,1210.17 1701.45,1210.17 1702.04,1210.17 1702.62,1210.17 1703.21,1210.17 1703.79,1210.17 1704.38,1210.17 1704.97,1210.17 1705.55,1210.17 1706.14,1210.17 1706.73,1210.17 1707.31,1210.17 1707.9,1210.17 1708.49,1210.17 1709.07,1210.17 1709.66,1210.17 1710.24,1210.17 1710.83,1210.17 1711.42,1210.17 1712,1210.17 1712.59,1210.17 1713.18,1210.17 1713.76,1210.17 1714.35,1210.17 1714.94,1210.17 1715.52,1210.17 1716.11,1210.17 1716.7,1210.17 1717.28,1210.17 1717.87,1210.17 1718.45,1210.17 1719.04,1210.17 1719.63,1210.17 1720.21,1210.17 1720.8,1210.17 1721.39,1210.17 1721.97,1210.17 1722.56,1210.17 1723.15,1210.17 1723.73,1210.17 1724.32,1210.17 1724.91,1210.17 1725.49,1210.17 1726.08,1210.17 1726.66,1210.17 1727.25,1210.17 1727.84,1210.17 1728.42,1210.17 1729.01,1210.17 1729.6,1210.17 1730.18,1210.17 1730.77,1210.17 1731.36,1210.17 1731.94,1210.17 1732.53,1210.17 1733.11,1210.17 1733.7,1210.17 1734.29,1210.17 1734.87,1210.17 1735.46,1210.17 1736.05,1210.17 1736.63,1210.17 1737.22,1210.17 1737.81,1210.17 1738.39,1210.17 1738.98,1210.17 1739.57,1210.17 1740.15,1210.17 1740.74,1210.17 1741.32,1210.17 1741.91,1210.17 1742.5,1210.17 1743.08,1210.17 1743.67,1210.17 1744.26,1210.17 1744.84,1210.17 1745.43,1210.17 1746.02,1210.17 1746.6,1210.17 1747.19,1210.17 1747.78,1210.17 1748.36,1210.17 1748.95,1210.17 1749.53,1210.17 1750.12,1210.17 1750.71,1210.17 1751.29,1210.17 1751.88,1210.17 1752.47,1210.17 1753.05,1210.17 1753.64,1210.17 1754.23,1210.17 1754.81,1210.17 1755.4,1210.17 1755.99,1210.17 1756.57,1210.17 1757.16,1210.17 1757.74,1210.17 1758.33,1210.17 1758.92,1210.17 1759.5,1210.17 1760.09,1210.17 1760.68,1210.17 1761.26,1210.17 1761.85,1210.17 1762.44,1210.17 1763.02,1210.17 1763.61,1210.17 1764.19,1210.17 1764.78,1210.17 1765.37,1210.17 1765.95,1210.17 1766.54,1210.17 1767.13,1210.17 1767.71,1210.17 1768.3,1210.17 1768.89,1210.17 1769.47,1210.17 1770.06,1210.17 1770.65,1210.17 1771.23,1210.17 1771.82,1210.17 1772.4,1210.17 1772.99,1210.17 1773.58,1210.17 1774.16,1210.17 1774.75,1210.17 1775.34,1210.17 1775.92,1210.17 1776.51,1210.17 1777.1,1210.17 1777.68,1210.17 1778.27,1210.17 1778.86,1210.17 1779.44,1210.17 1780.03,1210.17 1780.61,1210.17 1781.2,1210.17 1781.79,1210.17 1782.37,1210.17 1782.96,1210.17 1783.55,1210.17 1784.13,1210.17 1784.72,1210.17 1785.31,1210.17 1785.89,1210.17 1786.48,1210.17 1787.06,1210.17 1787.65,1210.17 1788.24,1210.17 1788.82,1210.17 1789.41,1210.17 1790,1210.17 1790.58,1210.17 1791.17,1210.17 1791.76,1210.17 1792.34,1210.17 1792.93,1210.17 1793.52,1210.17 1794.1,1210.17 1794.69,1210.17 1795.27,1210.17 1795.86,1210.17 1796.45,1210.17 1797.03,1210.17 1797.62,1210.17 1798.21,1210.17 1798.79,1210.17 1799.38,1210.17 1799.97,1210.17 1800.55,1210.17 1801.14,1210.17 1801.73,1210.17 1802.31,1210.17 1802.9,1210.17 1803.48,1210.17 1804.07,1210.17 1804.66,1210.17 1805.24,1210.17 1805.83,1210.17 1806.42,1210.17 1807,1210.17 1807.59,1210.17 1808.18,1210.17 1808.76,1210.17 1809.35,1210.17 1809.94,1210.17 1810.52,1210.17 1811.11,1210.17 1811.69,1210.17 1812.28,1210.17 1812.87,1210.17 1813.45,1210.17 1814.04,1210.17 1814.63,1210.17 1815.21,1210.17 1815.8,1210.17 1816.39,1210.17 1816.97,1210.17 1817.56,1210.17 1818.14,1210.17 1818.73,1210.17 1819.32,1210.17 1819.9,1210.17 1820.49,1210.17 1821.08,1210.17 1821.66,1210.17 1822.25,1210.17 1822.84,1210.17 1823.42,1210.17 1824.01,1210.17 1824.6,1210.17 1825.18,1210.17 1825.77,1210.17 1826.35,1210.17 1826.94,1210.17 1827.53,1210.17 1828.11,1210.17 1828.7,1210.17 1829.29,1210.17 1829.87,1210.17 1830.46,1210.17 1831.05,1210.17 1831.63,1210.17 1832.22,1210.17 1832.81,1210.17 1833.39,1210.17 1833.98,1210.17 1834.56,1210.17 1835.15,1210.17 1835.74,1210.17 1836.32,1210.17 1836.91,1210.17 1837.5,1210.17 1838.08,1210.17 1838.67,1210.17 1839.26,1210.17 1839.84,1210.17 1840.43,1210.17 1841.01,1210.17 1841.6,1210.17 1842.19,1210.17 1842.77,1210.17 1843.36,1210.17 1843.95,1210.17 1844.53,1210.17 1845.12,1210.17 1845.71,1210.17 1846.29,1210.17 1846.88,1210.17 1847.47,1210.17 1848.05,1210.17 1848.64,1210.17 1849.22,1210.17 1849.81,1210.17 1850.4,1210.17 1850.98,1210.17 1851.57,1210.17 1852.16,1210.17 1852.74,1210.17 1853.33,1210.17 1853.92,1210.17 1854.5,1210.17 1855.09,1210.17 1855.68,1210.17 1856.26,1210.17 1856.85,1210.17 1857.43,1210.17 1858.02,1210.17 1858.61,1210.17 1859.19,1210.17 1859.78,1210.17 1860.37,1210.17 1860.95,1210.17 1861.54,1210.17 1862.13,1210.17 1862.71,1210.17 1863.3,1210.17 1863.88,1210.17 1864.47,1210.17 1865.06,1210.17 1865.64,1210.17 1866.23,1210.17 1866.82,1210.17 1867.4,1210.17 1867.99,1210.17 1868.58,1210.17 1869.16,1210.17 1869.75,1210.17 1870.34,1210.17 1870.92,1210.17 1871.51,1210.17 1872.09,1210.17 1872.68,1210.17 1873.27,1210.17 1873.85,1210.17 1874.44,1210.17 1875.03,1210.17 1875.61,1210.17 1876.2,1210.17 1876.79,1210.17 1877.37,1210.17 1877.96,1210.17 1878.55,1210.17 1879.13,1210.17 1879.72,1210.17 1880.3,1210.17 1880.89,1210.17 1881.48,1210.17 1882.06,1210.17 1882.65,1210.17 1883.24,1210.17 1883.82,1210.17 1884.41,1210.17 1885,1210.17 1885.58,1210.17 1886.17,1210.17 1886.76,1210.17 1887.34,1210.17 1887.93,1210.17 1888.51,1210.17 1889.1,1210.17 1889.69,1210.17 1890.27,1210.17 1890.86,1210.17 1891.45,1210.17 1892.03,1210.17 1892.62,1210.17 1893.21,1210.17 1893.79,1210.17 1894.38,1210.17 1894.96,1210.17 1895.55,1210.17 1896.14,1210.17 1896.72,1210.17 1897.31,1210.17 1897.9,1210.17 1898.48,1210.17 1899.07,1210.17 1899.66,1210.17 1900.24,1210.17 1900.83,1210.17 1901.42,1210.17 1902,1210.17 1902.59,1210.17 1903.17,1210.17 1903.76,1210.17 1904.35,1210.17 1904.93,1210.17 1905.52,1210.17 1906.11,1210.17 1906.69,1210.17 1907.28,1210.17 1907.87,1210.17 1908.45,1210.17 1909.04,1210.17 1909.63,1210.17 1910.21,1210.17 1910.8,1210.17 1911.38,1210.17 1911.97,1210.17 1912.56,1210.17 1913.14,1210.17 1913.73,1210.17 1914.32,1210.17 1914.9,1210.17 1915.49,1210.17 1916.08,1210.17 1916.66,1210.17 1917.25,1210.17 1917.83,1210.17 1918.42,1210.17 1919.01,1210.17 1919.59,1210.17 1920.18,1210.17 1920.77,1210.17 1921.35,1210.17 1921.94,1210.17 1922.53,1210.17 1923.11,1210.17 1923.7,1210.17 1924.29,1210.17 1924.87,1210.17 1925.46,1210.17 1926.04,1210.17 1926.63,1210.17 1927.22,1210.17 1927.8,1210.17 1928.39,1210.17 1928.98,1210.17 1929.56,1210.17 1930.15,1210.17 1930.74,1210.17 1931.32,1210.17 1931.91,1210.17 1932.5,1210.17 1933.08,1210.17 1933.67,1210.17 1934.25,1210.17 1934.84,1210.17 1935.43,1210.17 1936.01,1210.17 1936.6,1210.17 1937.19,1210.17 1937.77,1210.17 1938.36,1210.17 1938.95,1210.17 1939.53,1210.17 1940.12,1210.17 1940.71,1210.17 1941.29,1210.17 1941.88,1210.17 1942.46,1210.17 1943.05,1210.17 1943.64,1210.17 1944.22,1210.17 1944.81,1210.17 1945.4,1210.17 1945.98,1210.17 1946.57,1210.17 1947.16,1210.17 1947.74,1210.17 1948.33,1210.17 1948.91,1210.17 1949.5,1210.17 1950.09,1210.17 1950.67,1210.17 1951.26,1210.17 1951.85,1210.17 1952.43,1210.17 1953.02,1210.17 1953.61,1210.17 1954.19,1210.17 1954.78,1210.17 1955.37,1210.17 1955.95,1210.17 1956.54,1210.17 1957.12,1210.17 1957.71,1210.17 1958.3,1210.17 1958.88,1210.17 1959.47,1210.17 1960.06,1210.17 1960.64,1210.17 1961.23,1210.17 1961.82,1210.17 1962.4,1210.17 1962.99,1210.17 1963.58,1210.17 1964.16,1210.17 1964.75,1210.17 1965.33,1210.17 1965.92,1210.17 1966.51,1210.17 1967.09,1210.17 1967.68,1210.17 1968.27,1210.17 1968.85,1210.17 1969.44,1210.17 1970.03,1210.17 1970.61,1210.17 1971.2,1210.17 1971.78,1210.17 1972.37,1210.17 1972.96,1210.17 1973.54,1210.17 1974.13,1210.17 1974.72,1210.17 1975.3,1210.17 1975.89,1210.17 1976.48,1210.17 1977.06,1210.17 1977.65,1210.17 1978.24,1210.17 1978.82,1210.17 1979.41,1210.17 1979.99,1210.17 1980.58,1210.17 1981.17,1210.17 1981.75,1210.17 1982.34,1210.17 1982.93,1210.17 1983.51,1210.17 1984.1,1210.17 1984.69,1210.17 1985.27,1210.17 1985.86,1210.17 1986.45,1210.17 1987.03,1210.17 1987.62,1210.17 1988.2,1210.17 1988.79,1210.17 1989.38,1210.17 1989.96,1210.17 1990.55,1210.17 1991.14,1210.17 1991.72,1210.17 1992.31,1210.17 1992.9,1210.17 1993.48,1210.17 1994.07,1210.17 1994.65,1210.17 1995.24,1210.17 1995.83,1210.17 1996.41,1210.17 1997,1210.17 1997.59,1210.17 1998.17,1210.17 1998.76,1210.17 1999.35,1210.17 1999.93,1210.17 2000.52,1210.17 2001.11,1210.17 2001.69,1210.17 2002.28,1210.17 2002.86,1210.17 2003.45,1210.17 2004.04,1210.17 2004.62,1210.17 2005.21,1210.17 2005.8,1210.17 2006.38,1210.17 2006.97,1210.17 2007.56,1210.17 2008.14,1210.17 2008.73,1210.17 2009.32,1210.17 2009.9,1210.17 2010.49,1210.17 2011.07,1210.17 2011.66,1210.17 2012.25,1210.17 2012.83,1210.17 2013.42,1210.17 2014.01,1210.17 2014.59,1210.17 2015.18,1210.17 2015.77,1210.17 2016.35,1210.17 2016.94,1210.17 2017.53,1210.17 2018.11,1210.17 2018.7,1210.17 2019.28,1210.17 2019.87,1210.17 2020.46,1210.17 2021.04,1210.17 2021.63,1210.17 2022.22,1210.17 2022.8,1210.17 2023.39,1210.17 2023.98,1210.17 2024.56,1210.17 2025.15,1210.17 2025.73,1210.17 2026.32,1210.17 2026.91,1210.17 2027.49,1210.17 2028.08,1210.17 2028.67,1210.17 2029.25,1210.17 2029.84,1210.17 2030.43,1210.17 2031.01,1210.17 2031.6,1210.17 2032.19,1210.17 2032.77,1210.17 2033.36,1210.17 2033.94,1210.17 2034.53,1210.17 2035.12,1210.17 2035.7,1210.17 2036.29,1210.17 2036.88,1210.17 2037.46,1210.17 2038.05,1210.17 2038.64,1210.17 2039.22,1210.17 2039.81,1210.17 2040.4,1210.17 2040.98,1210.17 2041.57,1210.17 2042.15,1210.17 2042.74,1210.17 2043.33,1210.17 2043.91,1210.17 2044.5,1210.17 2045.09,1210.17 2045.67,1210.17 2046.26,1210.17 2046.85,1210.17 2047.43,1210.17 2048.02,1210.17 2048.6,1210.17 2049.19,1210.17 2049.78,1210.17 2050.36,1210.17 2050.95,1210.17 2051.54,1210.17 2052.12,1210.17 2052.71,1210.17 2053.3,1210.17 2053.88,1210.17 2054.47,1210.17 2055.06,1210.17 2055.64,1210.17 2056.23,1210.17 2056.81,1210.17 2057.4,1210.17 2057.99,1210.17 2058.57,1210.17 2059.16,1210.17 2059.75,1210.17 2060.33,1210.17 2060.92,1210.17 2061.51,1210.17 2062.09,1210.17 2062.68,1210.17 2063.27,1210.17 2063.85,1210.17 2064.44,1210.17 2065.02,1210.17 2065.61,1210.17 2066.2,1210.17 2066.78,1210.17 2067.37,1210.17 2067.96,1210.17 2068.54,1210.17 2069.13,1210.17 2069.72,1210.17 2070.3,1210.17 2070.89,1210.17 2071.48,1210.17 2072.06,1210.17 2072.65,1210.17 2073.23,1210.17 2073.82,1210.17 2074.41,1210.17 2074.99,1210.17 2075.58,1210.17 2076.17,1210.17 2076.75,1210.17 2077.34,1210.17 2077.93,1210.17 2078.51,1210.17 2079.1,1210.17 2079.68,1210.17 2080.27,1210.17 2080.86,1210.17 2081.44,1210.17 2082.03,1210.17 2082.62,1210.17 2083.2,1210.17 2083.79,1210.17 2084.38,1210.17 2084.96,1210.17 2085.55,1210.17 2086.14,1210.17 2086.72,1210.17 2087.31,1210.17 2087.89,1210.17 2088.48,1210.17 2089.07,1210.17 2089.65,1210.17 2090.24,1210.17 2090.83,1210.17 2091.41,1210.17 2092,1210.17 2092.59,1210.17 2093.17,1210.17 2093.76,1210.17 2094.35,1210.17 2094.93,1210.17 2095.52,1210.17 2096.1,1210.17 2096.69,1210.17 2097.28,1210.17 2097.86,1210.17 2098.45,1210.17 2099.04,1210.17 2099.62,1210.17 2100.21,1210.17 2100.8,1210.17 2101.38,1210.17 2101.97,1210.17 2102.55,1210.17 2103.14,1210.17 2103.73,1210.17 2104.31,1210.17 2104.9,1210.17 2105.49,1210.17 2106.07,1210.17 2106.66,1210.17 2107.25,1210.17 2107.83,1210.17 2108.42,1210.17 2109.01,1210.17 2109.59,1210.17 2110.18,1210.17 2110.76,1210.17 2111.35,1210.17 2111.94,1210.17 2112.52,1210.17 2113.11,1210.17 2113.7,1210.17 2114.28,1210.17 2114.87,1210.17 2115.46,1210.17 2116.04,1210.17 2116.63,1210.17 2117.22,1210.17 2117.8,1210.17 2118.39,1210.17 2118.97,1210.17 2119.56,1210.17 2120.15,1210.17 2120.73,1210.17 2121.32,1210.17 2121.91,1210.17 2122.49,1210.17 2123.08,1210.17 2123.67,1210.17 2124.25,1210.17 2124.84,1210.17 2125.42,1210.17 2126.01,1210.17 2126.6,1210.17 2127.18,1210.17 2127.77,1210.17 2128.36,1210.17 2128.94,1210.17 2129.53,1210.17 2130.12,1210.17 2130.7,1210.17 2131.29,1210.17 2131.88,1210.17 2132.46,1210.17 2133.05,1210.17 2133.63,1210.17 2134.22,1210.17 2134.81,1210.17 2135.39,1210.17 2135.98,1210.17 2136.57,1210.17 2137.15,1210.17 2137.74,1210.17 2138.33,1210.17 2138.91,1210.17 2139.5,1210.17 2140.09,1210.17 2140.67,1210.17 2141.26,1210.17 2141.84,1210.17 2142.43,1210.17 2143.02,1210.17 2143.6,1210.17 2144.19,1210.17 2144.78,1210.17 2145.36,1210.17 2145.95,1210.17 2146.54,1210.17 2147.12,1210.17 2147.71,1210.17 2148.3,1210.17 2148.88,1210.17 2149.47,1210.17 2150.05,1210.17 2150.64,1210.17 2151.23,1210.17 2151.81,1210.17 2152.4,1210.17 2152.99,1210.17 2153.57,1210.17 2154.16,1210.17 2154.75,1210.17 2155.33,1210.17 2155.92,1210.17 2156.5,1210.17 2157.09,1210.17 2157.68,1210.17 2158.26,1210.17 \"/>\n<path clip-path=\"url(#clip702)\" d=\"M986.025 1210.21 L986.612 1210.21 L987.198 1210.21 L987.785 1210.21 L988.371 1210.21 L988.957 1210.21 L989.544 1210.21 L990.13 1210.21 L990.717 1210.21 L991.303 1210.21 L991.889 1210.21 L992.476 1210.21 L993.062 1210.21 L993.649 1210.21 L994.235 1210.21 L994.822 1210.21 L995.408 1210.21 L995.994 1210.21 L996.581 1210.21 L997.167 1210.21 L997.754 1210.21 L998.34 1210.21 L998.926 1210.21 L999.513 1210.21 L1000.1 1210.21 L1000.69 1210.21 L1001.27 1210.21 L1001.86 1210.21 L1002.44 1210.21 L1003.03 1210.21 L1003.62 1210.21 L1004.2 1210.21 L1004.79 1210.21 L1005.38 1210.21 L1005.96 1210.21 L1006.55 1210.21 L1007.14 1210.21 L1007.72 1210.21 L1008.31 1210.21 L1008.9 1210.21 L1009.48 1210.21 L1010.07 1210.21 L1010.65 1210.21 L1011.24 1210.21 L1011.83 1210.21 L1012.41 1210.21 L1013 1210.21 L1013.59 1210.21 L1014.17 1210.21 L1014.76 1210.21 L1015.35 1210.21 L1015.93 1210.21 L1016.52 1210.21 L1017.11 1210.21 L1017.69 1210.21 L1018.28 1210.21 L1018.86 1210.21 L1019.45 1210.21 L1020.04 1210.21 L1020.62 1210.21 L1021.21 1210.21 L1021.8 1210.21 L1022.38 1210.21 L1022.97 1210.21 L1023.56 1210.21 L1024.14 1210.21 L1024.73 1210.21 L1025.32 1210.21 L1025.9 1210.21 L1026.49 1210.21 L1027.07 1210.21 L1027.66 1210.21 L1028.25 1210.21 L1028.83 1210.21 L1029.42 1210.21 L1030.01 1210.21 L1030.59 1210.21 L1031.18 1210.21 L1031.77 1210.21 L1032.35 1210.21 L1032.94 1210.21 L1033.52 1210.21 L1034.11 1210.21 L1034.7 1210.21 L1035.28 1210.21 L1035.87 1210.21 L1036.46 1210.21 L1037.04 1210.21 L1037.63 1210.21 L1038.22 1210.21 L1038.8 1210.21 L1039.39 1210.21 L1039.98 1210.21 L1040.56 1210.21 L1041.15 1210.21 L1041.73 1210.21 L1042.32 1210.21 L1042.91 1210.21 L1043.49 1210.21 L1044.08 1210.21 L1044.67 1210.21 L1045.25 1210.21 L1045.84 1210.21 L1046.43 1210.21 L1047.01 1210.21 L1047.6 1210.21 L1048.19 1210.21 L1048.77 1210.21 L1049.36 1210.21 L1049.94 1210.21 L1050.53 1210.21 L1051.12 1210.21 L1051.7 1210.21 L1052.29 1210.21 L1052.88 1210.21 L1053.46 1210.21 L1054.05 1210.21 L1054.64 1210.21 L1055.22 1210.21 L1055.81 1210.21 L1056.39 1210.21 L1056.98 1210.21 L1057.57 1210.21 L1058.15 1210.21 L1058.74 1210.21 L1059.33 1210.21 L1059.91 1210.21 L1060.5 1210.21 L1061.09 1210.21 L1061.67 1210.21 L1062.26 1210.21 L1062.85 1210.21 L1063.43 1210.21 L1064.02 1210.21 L1064.6 1210.21 L1065.19 1210.21 L1065.78 1210.21 L1066.36 1210.21 L1066.95 1210.21 L1067.54 1210.21 L1068.12 1210.21 L1068.71 1210.21 L1069.3 1210.21 L1069.88 1210.21 L1070.47 1210.21 L1071.06 1210.21 L1071.64 1210.21 L1072.23 1210.21 L1072.81 1210.21 L1073.4 1210.21 L1073.99 1210.21 L1074.57 1210.21 L1075.16 1210.21 L1075.75 1210.21 L1076.33 1210.21 L1076.92 1210.21 L1077.51 1210.21 L1078.09 1210.21 L1078.68 1210.21 L1079.26 1210.21 L1079.85 1210.21 L1080.44 1210.21 L1081.02 1210.21 L1081.61 1210.21 L1082.2 1210.21 L1082.78 1210.21 L1083.37 1210.21 L1083.96 1210.21 L1084.54 1210.21 L1085.13 1210.21 L1085.72 1210.21 L1086.3 1210.21 L1086.89 1210.21 L1087.47 1210.21 L1088.06 1210.21 L1088.65 1210.21 L1089.23 1210.21 L1089.82 1210.21 L1090.41 1210.21 L1090.99 1210.21 L1091.58 1210.21 L1092.17 1210.21 L1092.75 1210.21 L1093.34 1210.21 L1093.93 1210.21 L1094.51 1210.21 L1095.1 1210.21 L1095.68 1210.21 L1096.27 1210.21 L1096.86 1210.21 L1097.44 1210.21 L1098.03 1210.21 L1098.62 1210.21 L1099.2 1210.21 L1099.79 1210.21 L1100.38 1210.21 L1100.96 1210.21 L1101.55 1210.21 L1102.14 1210.21 L1102.72 1210.21 L1103.31 1210.21 L1103.89 1210.21 L1104.48 1210.21 L1105.07 1210.21 L1105.65 1210.21 L1106.24 1210.21 L1106.83 1210.21 L1107.41 1210.21 L1108 1210.21 L1108.59 1210.21 L1109.17 1210.21 L1109.76 1210.21 L1110.34 1210.21 L1110.93 1210.21 L1111.52 1210.21 L1112.1 1210.21 L1112.69 1210.21 L1113.28 1210.21 L1113.86 1210.21 L1114.45 1210.21 L1115.04 1210.21 L1115.62 1210.21 L1116.21 1210.21 L1116.8 1210.21 L1117.38 1210.21 L1117.97 1210.21 L1118.55 1210.21 L1119.14 1210.21 L1119.73 1210.21 L1120.31 1210.21 L1120.9 1210.21 L1121.49 1210.21 L1122.07 1210.21 L1122.66 1210.21 L1123.25 1210.21 L1123.83 1210.21 L1124.42 1210.21 L1125.01 1210.21 L1125.59 1210.21 L1126.18 1210.21 L1126.76 1210.21 L1127.35 1210.21 L1127.94 1210.21 L1128.52 1210.21 L1129.11 1210.21 L1129.7 1210.21 L1130.28 1210.21 L1130.87 1210.21 L1131.46 1210.21 L1132.04 1210.21 L1132.63 1210.21 L1133.21 1210.21 L1133.8 1210.21 L1134.39 1210.21 L1134.97 1210.21 L1135.56 1210.21 L1136.15 1210.21 L1136.73 1210.21 L1137.32 1210.21 L1137.91 1210.21 L1138.49 1210.21 L1139.08 1210.21 L1139.67 1210.21 L1140.25 1210.21 L1140.84 1210.21 L1141.42 1210.21 L1142.01 1210.21 L1142.6 1210.21 L1143.18 1210.21 L1143.77 1210.21 L1144.36 1210.21 L1144.94 1210.21 L1145.53 1210.21 L1146.12 1210.21 L1146.7 1210.21 L1147.29 1210.21 L1147.88 1210.21 L1148.46 1210.21 L1149.05 1210.21 L1149.63 1210.21 L1150.22 1210.21 L1150.81 1210.21 L1151.39 1210.21 L1151.98 1210.21 L1152.57 1210.21 L1153.15 1210.21 L1153.74 1210.21 L1154.33 1210.21 L1154.91 1210.21 L1155.5 1210.21 L1156.09 1210.21 L1156.67 1210.21 L1157.26 1210.21 L1157.84 1210.21 L1158.43 1210.21 L1159.02 1210.21 L1159.6 1210.21 L1160.19 1210.21 L1160.78 1210.21 L1161.36 1210.21 L1161.95 1210.21 L1162.54 1210.21 L1163.12 1210.21 L1163.71 1210.21 L1164.29 1210.21 L1164.88 1210.21 L1165.47 1210.21 L1166.05 1210.21 L1166.64 1210.21 L1167.23 1210.21 L1167.81 1210.21 L1168.4 1210.21 L1168.99 1210.21 L1169.57 1210.21 L1170.16 1210.21 L1170.75 1210.21 L1171.33 1210.21 L1171.92 1210.21 L1172.5 1210.21 L1173.09 1210.21 L1173.68 1210.21 L1174.26 1210.21 L1174.85 1210.21 L1175.44 1210.21 L1176.02 1210.21 L1176.61 1210.21 L1177.2 1210.21 L1177.78 1210.21 L1178.37 1210.21 L1178.96 1210.21 L1179.54 1210.21 L1180.13 1210.21 L1180.71 1210.21 L1181.3 1210.21 L1181.89 1210.21 L1182.47 1210.21 L1183.06 1210.21 L1183.65 1210.21 L1184.23 1210.21 L1184.82 1210.21 L1185.41 1210.21 L1185.99 1210.21 L1186.58 1210.21 L1187.16 1210.21 L1187.75 1210.21 L1188.34 1210.21 L1188.92 1210.21 L1189.51 1210.21 L1190.1 1210.21 L1190.68 1210.21 L1191.27 1210.21 L1191.86 1210.21 L1192.44 1210.21 L1193.03 1210.21 L1193.62 1210.21 L1194.2 1210.21 L1194.79 1210.21 L1195.37 1210.21 L1195.96 1210.21 L1196.55 1210.21 L1197.13 1210.21 L1197.72 1210.21 L1198.31 1210.21 L1198.89 1210.21 L1199.48 1210.21 L1200.07 1210.21 L1200.65 1210.21 L1201.24 1210.21 L1201.83 1210.21 L1202.41 1210.21 L1203 1210.21 L1203.58 1210.21 L1204.17 1210.21 L1204.76 1210.21 L1205.34 1210.21 L1205.93 1210.21 L1206.52 1210.21 L1207.1 1210.21 L1207.69 1210.21 L1208.28 1210.21 L1208.86 1210.21 L1209.45 1210.21 L1210.03 1210.21 L1210.62 1210.21 L1211.21 1210.21 L1211.79 1210.21 L1212.38 1210.21 L1212.97 1210.21 L1213.55 1210.21 L1214.14 1210.21 L1214.73 1210.21 L1215.31 1210.21 L1215.9 1210.21 L1216.49 1210.21 L1217.07 1210.21 L1217.66 1210.21 L1218.24 1210.21 L1218.83 1210.21 L1219.42 1210.21 L1220 1210.21 L1220.59 1210.21 L1221.18 1210.21 L1221.76 1210.21 L1222.35 1210.21 L1222.94 1210.21 L1223.52 1210.21 L1224.11 1210.21 L1224.7 1210.21 L1225.28 1210.21 L1225.87 1210.21 L1226.45 1210.21 L1227.04 1210.21 L1227.63 1210.21 L1228.21 1210.21 L1228.8 1210.21 L1229.39 1210.21 L1229.97 1210.21 L1230.56 1210.21 L1231.15 1210.21 L1231.73 1210.21 L1232.32 1210.21 L1232.91 1210.21 L1233.49 1210.21 L1234.08 1210.21 L1234.66 1210.21 L1235.25 1210.21 L1235.84 1210.21 L1236.42 1210.21 L1237.01 1210.21 L1237.6 1210.21 L1238.18 1210.21 L1238.77 1210.21 L1239.36 1210.21 L1239.94 1210.21 L1240.53 1210.21 L1241.11 1210.21 L1241.7 1210.21 L1242.29 1210.21 L1242.87 1210.21 L1243.46 1210.21 L1244.05 1210.21 L1244.63 1210.21 L1245.22 1210.21 L1245.81 1210.21 L1246.39 1210.21 L1246.98 1210.21 L1247.57 1210.21 L1248.15 1210.21 L1248.74 1210.21 L1249.32 1210.21 L1249.91 1210.21 L1250.5 1210.21 L1251.08 1210.21 L1251.67 1210.21 L1252.26 1210.21 L1252.84 1210.21 L1253.43 1210.21 L1254.02 1210.21 L1254.6 1210.21 L1255.19 1210.21 L1255.78 1210.21 L1256.36 1210.21 L1256.95 1210.21 L1257.53 1210.21 L1258.12 1210.21 L1258.71 1210.21 L1259.29 1210.21 L1259.88 1210.21 L1260.47 1210.21 L1261.05 1210.21 L1261.64 1210.21 L1262.23 1210.21 L1262.81 1210.21 L1263.4 1210.21 L1263.98 1210.21 L1264.57 1210.21 L1265.16 1210.21 L1265.74 1210.21 L1266.33 1210.21 L1266.92 1210.21 L1267.5 1210.21 L1268.09 1210.21 L1268.68 1210.21 L1269.26 1210.21 L1269.85 1210.21 L1270.44 1210.21 L1271.02 1210.21 L1271.61 1210.21 L1272.19 1210.21 L1272.78 1210.21 L1273.37 1210.21 L1273.95 1210.21 L1274.54 1210.21 L1275.13 1210.21 L1275.71 1210.21 L1276.3 1210.21 L1276.89 1210.21 L1277.47 1210.21 L1278.06 1210.21 L1278.65 1210.21 L1279.23 1210.21 L1279.82 1210.21 L1280.4 1210.21 L1280.99 1210.21 L1281.58 1210.21 L1282.16 1210.21 L1282.75 1210.21 L1283.34 1210.21 L1283.92 1210.21 L1284.51 1210.21 L1285.1 1210.21 L1285.68 1210.21 L1286.27 1210.21 L1286.86 1210.21 L1287.44 1210.21 L1288.03 1210.21 L1288.61 1210.21 L1289.2 1210.21 L1289.79 1210.21 L1290.37 1210.21 L1290.96 1210.21 L1291.55 1210.21 L1292.13 1210.21 L1292.72 1210.21 L1293.31 1210.21 L1293.89 1210.21 L1294.48 1210.21 L1295.06 1210.21 L1295.65 1210.21 L1296.24 1210.21 L1296.82 1210.21 L1297.41 1210.21 L1298 1210.21 L1298.58 1210.21 L1299.17 1210.21 L1299.76 1210.21 L1300.34 1210.21 L1300.93 1210.21 L1301.52 1210.21 L1302.1 1210.21 L1302.69 1210.21 L1303.27 1210.21 L1303.86 1210.21 L1304.45 1210.21 L1305.03 1210.21 L1305.62 1210.21 L1306.21 1210.21 L1306.79 1210.21 L1307.38 1210.21 L1307.97 1210.21 L1308.55 1210.21 L1309.14 1210.21 L1309.73 1210.21 L1310.31 1210.21 L1310.9 1210.21 L1311.48 1210.21 L1312.07 1210.21 L1312.66 1210.21 L1313.24 1210.21 L1313.83 1210.21 L1314.42 1210.21 L1315 1210.21 L1315.59 1210.21 L1316.18 1210.21 L1316.76 1210.21 L1317.35 1210.21 L1317.93 1210.21 L1318.52 1210.21 L1319.11 1210.21 L1319.69 1210.21 L1320.28 1210.21 L1320.87 1210.21 L1321.45 1210.21 L1322.04 1210.21 L1322.63 1210.21 L1323.21 1210.21 L1323.8 1210.21 L1324.39 1210.21 L1324.97 1210.21 L1325.56 1210.21 L1326.14 1210.21 L1326.73 1210.21 L1327.32 1210.21 L1327.9 1210.21 L1328.49 1210.21 L1329.08 1210.21 L1329.66 1210.21 L1330.25 1210.21 L1330.84 1210.21 L1331.42 1210.21 L1332.01 1210.21 L1332.6 1210.21 L1333.18 1210.21 L1333.77 1210.21 L1334.35 1210.21 L1334.94 1210.21 L1335.53 1210.21 L1336.11 1210.21 L1336.7 1210.21 L1337.29 1210.21 L1337.87 1210.21 L1338.46 1210.21 L1339.05 1210.21 L1339.63 1210.21 L1340.22 1210.21 L1340.8 1210.21 L1341.39 1210.21 L1341.98 1210.21 L1342.56 1210.21 L1343.15 1210.21 L1343.74 1210.21 L1344.32 1210.21 L1344.91 1210.21 L1345.5 1210.21 L1346.08 1210.21 L1346.67 1210.21 L1347.26 1210.21 L1347.84 1210.21 L1348.43 1210.21 L1349.01 1210.21 L1349.6 1210.21 L1350.19 1210.21 L1350.77 1210.21 L1351.36 1210.21 L1351.95 1210.21 L1352.53 1210.21 L1353.12 1210.21 L1353.71 1210.21 L1354.29 1210.21 L1354.88 1210.21 L1355.47 1210.21 L1356.05 1210.21 L1356.64 1210.21 L1357.22 1210.21 L1357.81 1210.21 L1358.4 1210.21 L1358.98 1210.21 L1359.57 1210.21 L1360.16 1210.21 L1360.74 1210.21 L1361.33 1210.21 L1361.92 1210.21 L1362.5 1210.21 L1363.09 1210.21 L1363.68 1210.21 L1364.26 1210.21 L1364.85 1210.21 L1365.43 1210.21 L1366.02 1210.21 L1366.61 1210.21 L1367.19 1210.21 L1367.78 1210.21 L1368.37 1210.21 L1368.95 1210.21 L1369.54 1210.21 L1370.13 1210.21 L1370.71 1210.21 L1371.3 1210.21 L1371.88 1210.21 L1372.47 1210.21 L1373.06 1210.21 L1373.64 1210.21 L1374.23 1210.21 L1374.82 1210.21 L1375.4 1210.21 L1375.99 1210.21 L1376.58 1210.21 L1377.16 1210.21 L1377.75 1210.21 L1378.34 1210.21 L1378.92 1210.21 L1379.51 1210.21 L1380.09 1210.21 L1380.68 1210.21 L1381.27 1210.21 L1381.85 1210.21 L1382.44 1210.21 L1383.03 1210.21 L1383.61 1210.21 L1384.2 1210.21 L1384.79 1210.21 L1385.37 1210.21 L1385.96 1210.21 L1386.55 1210.21 L1387.13 1210.21 L1387.72 1210.21 L1388.3 1210.21 L1388.89 1210.21 L1389.48 1210.21 L1390.06 1210.21 L1390.65 1210.21 L1391.24 1210.21 L1391.82 1210.21 L1392.41 1210.21 L1393 1210.21 L1393.58 1210.21 L1394.17 1210.21 L1394.75 1210.21 L1395.34 1210.21 L1395.93 1210.21 L1396.51 1210.21 L1397.1 1210.21 L1397.69 1210.21 L1398.27 1210.21 L1398.86 1210.21 L1399.45 1210.21 L1400.03 1210.21 L1400.62 1210.21 L1401.21 1210.21 L1401.79 1210.21 L1402.38 1210.21 L1402.96 1210.21 L1403.55 1210.21 L1404.14 1210.21 L1404.72 1210.21 L1405.31 1210.21 L1405.9 1210.21 L1406.48 1210.21 L1407.07 1210.21 L1407.66 1210.21 L1408.24 1210.21 L1408.83 1210.21 L1409.42 1210.21 L1410 1210.21 L1410.59 1210.21 L1411.17 1210.21 L1411.76 1210.21 L1412.35 1210.21 L1412.93 1210.21 L1413.52 1210.21 L1414.11 1210.21 L1414.69 1210.21 L1415.28 1210.21 L1415.87 1210.21 L1416.45 1210.21 L1417.04 1210.21 L1417.63 1210.21 L1418.21 1210.21 L1418.8 1210.21 L1419.38 1210.21 L1419.97 1210.21 L1420.56 1210.21 L1421.14 1210.21 L1421.73 1210.21 L1422.32 1210.21 L1422.9 1210.21 L1423.49 1210.21 L1424.08 1210.21 L1424.66 1210.21 L1425.25 1210.21 L1425.83 1210.21 L1426.42 1210.21 L1427.01 1210.21 L1427.59 1210.21 L1428.18 1210.21 L1428.77 1210.21 L1429.35 1210.21 L1429.94 1210.21 L1430.53 1210.21 L1431.11 1210.21 L1431.7 1210.21 L1432.29 1210.21 L1432.87 1210.21 L1433.46 1210.21 L1434.04 1210.21 L1434.63 1210.21 L1435.22 1210.21 L1435.8 1210.21 L1436.39 1210.21 L1436.98 1210.21 L1437.56 1210.21 L1438.15 1210.21 L1438.74 1210.21 L1439.32 1210.21 L1439.91 1210.21 L1440.5 1210.21 L1441.08 1210.21 L1441.67 1210.21 L1442.25 1210.21 L1442.84 1210.21 L1443.43 1210.21 L1444.01 1210.21 L1444.6 1210.21 L1445.19 1210.21 L1445.77 1210.21 L1446.36 1210.21 L1446.95 1210.21 L1447.53 1210.21 L1448.12 1210.21 L1448.7 1210.21 L1449.29 1210.21 L1449.88 1210.21 L1450.46 1210.21 L1451.05 1210.21 L1451.64 1210.21 L1452.22 1210.21 L1452.81 1210.21 L1453.4 1210.21 L1453.98 1210.21 L1454.57 1210.21 L1455.16 1210.21 L1455.74 1210.21 L1456.33 1210.21 L1456.91 1210.21 L1457.5 1210.21 L1458.09 1210.21 L1458.67 1210.21 L1459.26 1210.21 L1459.85 1210.21 L1460.43 1210.21 L1461.02 1210.21 L1461.61 1210.21 L1462.19 1210.21 L1462.78 1210.21 L1463.37 1210.21 L1463.95 1210.21 L1464.54 1210.21 L1465.12 1210.21 L1465.71 1210.21 L1466.3 1210.21 L1466.88 1210.21 L1467.47 1210.21 L1468.06 1210.21 L1468.64 1210.21 L1469.23 1210.21 L1469.82 1210.21 L1470.4 1210.21 L1470.99 1210.21 L1471.57 1210.21 L1472.16 1210.21 L1472.75 1210.21 L1473.33 1210.21 L1473.92 1210.21 L1474.51 1210.21 L1475.09 1210.21 L1475.68 1210.21 L1476.27 1210.21 L1476.85 1210.21 L1477.44 1210.21 L1478.03 1210.21 L1478.61 1210.21 L1479.2 1210.21 L1479.78 1210.21 L1480.37 1210.21 L1480.96 1210.21 L1481.54 1210.21 L1482.13 1210.21 L1482.72 1210.21 L1483.3 1210.21 L1483.89 1210.21 L1484.48 1210.21 L1485.06 1210.21 L1485.65 1210.21 L1486.24 1210.21 L1486.82 1210.21 L1487.41 1210.21 L1487.99 1210.21 L1488.58 1210.21 L1489.17 1210.21 L1489.75 1210.21 L1490.34 1210.21 L1490.93 1210.21 L1491.51 1210.21 L1492.1 1210.21 L1492.69 1210.21 L1493.27 1210.21 L1493.86 1210.21 L1494.45 1210.21 L1495.03 1210.21 L1495.62 1210.21 L1496.2 1210.21 L1496.79 1210.21 L1497.38 1210.21 L1497.96 1210.21 L1498.55 1210.21 L1499.14 1210.21 L1499.72 1210.21 L1500.31 1210.21 L1500.9 1210.21 L1501.48 1210.21 L1502.07 1210.21 L1502.65 1210.21 L1503.24 1210.21 L1503.83 1210.21 L1504.41 1210.21 L1505 1210.21 L1505.59 1210.21 L1506.17 1210.21 L1506.76 1210.21 L1507.35 1210.21 L1507.93 1210.21 L1508.52 1210.21 L1509.11 1210.21 L1509.69 1210.21 L1510.28 1210.21 L1510.86 1210.21 L1511.45 1210.21 L1512.04 1210.21 L1512.62 1210.21 L1513.21 1210.21 L1513.8 1210.21 L1514.38 1210.21 L1514.97 1210.21 L1515.56 1210.21 L1516.14 1210.21 L1516.73 1210.21 L1517.32 1210.21 L1517.9 1210.21 L1518.49 1210.21 L1519.07 1210.21 L1519.66 1210.21 L1520.25 1210.21 L1520.83 1210.21 L1521.42 1210.21 L1522.01 1210.21 L1522.59 1210.21 L1523.18 1210.21 L1523.77 1210.21 L1524.35 1210.21 L1524.94 1210.21 L1525.52 1210.21 L1526.11 1210.21 L1526.7 1210.21 L1527.28 1210.21 L1527.87 1210.21 L1528.46 1210.21 L1529.04 1210.21 L1529.63 1210.21 L1530.22 1210.21 L1530.8 1210.21 L1531.39 1210.21 L1531.98 1210.21 L1532.56 1210.21 L1533.15 1210.21 L1533.73 1210.21 L1534.32 1210.21 L1534.91 1210.21 L1535.49 1210.21 L1536.08 1210.21 L1536.67 1210.21 L1537.25 1210.21 L1537.84 1210.21 L1538.43 1210.21 L1539.01 1210.21 L1539.6 1210.21 L1540.19 1210.21 L1540.77 1210.21 L1541.36 1210.21 L1541.94 1210.21 L1542.53 1210.21 L1543.12 1210.21 L1543.7 1210.21 L1544.29 1210.21 L1544.88 1210.21 L1545.46 1210.21 L1546.05 1210.21 L1546.64 1210.21 L1547.22 1210.21 L1547.81 1210.21 L1548.4 1210.21 L1548.98 1210.21 L1549.57 1210.21 L1550.15 1210.21 L1550.74 1210.21 L1551.33 1210.21 L1551.91 1210.21 L1552.5 1210.21 L1553.09 1210.21 L1553.67 1210.21 L1554.26 1210.21 L1554.85 1210.21 L1555.43 1210.21 L1556.02 1210.21 L1556.6 1210.21 L1557.19 1210.21 L1557.78 1210.21 L1558.36 1210.21 L1558.95 1210.21 L1559.54 1210.21 L1560.12 1210.21 L1560.71 1210.21 L1561.3 1210.21 L1561.88 1210.21 L1562.47 1210.21 L1563.06 1210.21 L1563.64 1210.21 L1564.23 1210.21 L1564.81 1210.21 L1565.4 1210.21 L1565.99 1210.21 L1566.57 1210.21 L1567.16 1210.21 L1567.75 1210.21 L1568.33 1210.21 L1568.92 1210.21 L1569.51 1210.21 L1570.09 1210.21 L1570.68 1210.21 L1571.27 1210.21 L1571.85 1210.21 L1572.44 1210.21 L1573.02 1210.21 L1573.61 1210.21 L1574.2 1210.21 L1574.78 1210.21 L1575.37 1210.21 L1575.96 1210.21 L1576.54 1210.21 L1577.13 1210.21 L1577.72 1210.21 L1578.3 1210.21 L1578.89 1210.21 L1579.47 1210.21 L1580.06 1210.21 L1580.65 1210.21 L1581.23 1210.21 L1581.82 1210.21 L1582.41 1210.21 L1582.99 1210.21 L1583.58 1210.21 L1584.17 1210.21 L1584.75 1210.21 L1585.34 1210.21 L1585.93 1210.21 L1586.51 1210.21 L1587.1 1210.21 L1587.68 1210.21 L1588.27 1210.21 L1588.86 1210.21 L1589.44 1210.21 L1590.03 1210.21 L1590.62 1210.21 L1591.2 1210.21 L1591.79 1210.21 L1592.38 1210.21 L1592.96 1210.21 L1593.55 1210.21 L1594.14 1210.21 L1594.72 1210.21 L1595.31 1210.21 L1595.89 1210.21 L1596.48 1210.21 L1597.07 1210.21 L1597.65 1210.21 L1598.24 1210.21 L1598.83 1210.21 L1599.41 1210.21 L1600 1210.21 L1600.59 1210.21 L1601.17 1210.21 L1601.76 1210.21 L1602.34 1210.21 L1602.93 1210.21 L1603.52 1210.21 L1604.1 1210.21 L1604.69 1210.21 L1605.28 1210.21 L1605.86 1210.21 L1606.45 1210.21 L1607.04 1210.21 L1607.62 1210.21 L1608.21 1210.21 L1608.8 1210.21 L1609.38 1210.21 L1609.97 1210.21 L1610.55 1210.21 L1611.14 1210.21 L1611.73 1210.21 L1612.31 1210.21 L1612.9 1210.21 L1613.49 1210.21 L1614.07 1210.21 L1614.66 1210.21 L1615.25 1210.21 L1615.83 1210.21 L1616.42 1210.21 L1617.01 1210.21 L1617.59 1210.21 L1618.18 1210.21 L1618.76 1210.21 L1619.35 1210.21 L1619.94 1210.21 L1620.52 1210.21 L1621.11 1210.21 L1621.7 1210.21 L1622.28 1210.21 L1622.87 1210.21 L1623.46 1210.21 L1624.04 1210.21 L1624.63 1210.21 L1625.22 1210.21 L1625.8 1210.21 L1626.39 1210.21 L1626.97 1210.21 L1627.56 1210.21 L1628.15 1210.21 L1628.73 1210.21 L1629.32 1210.21 L1629.91 1210.21 L1630.49 1210.21 L1631.08 1210.21 L1631.67 1210.21 L1632.25 1210.21 L1632.84 1210.21 L1633.42 1210.21 L1634.01 1210.21 L1634.6 1210.21 L1635.18 1210.21 L1635.77 1210.21 L1636.36 1210.21 L1636.94 1210.21 L1637.53 1210.21 L1638.12 1210.21 L1638.7 1210.21 L1639.29 1210.21 L1639.88 1210.21 L1640.46 1210.21 L1641.05 1210.21 L1641.63 1210.21 L1642.22 1210.21 L1642.81 1210.21 L1643.39 1210.21 L1643.98 1210.21 L1644.57 1210.21 L1645.15 1210.21 L1645.74 1210.21 L1646.33 1210.21 L1646.91 1210.21 L1647.5 1210.21 L1648.09 1210.21 L1648.67 1210.21 L1649.26 1210.21 L1649.84 1210.21 L1650.43 1210.21 L1651.02 1210.21 L1651.6 1210.21 L1652.19 1210.21 L1652.78 1210.21 L1653.36 1210.21 L1653.95 1210.21 L1654.54 1210.21 L1655.12 1210.21 L1655.71 1210.21 L1656.29 1210.21 L1656.88 1210.21 L1657.47 1210.21 L1658.05 1210.21 L1658.64 1210.21 L1659.23 1210.21 L1659.81 1210.21 L1660.4 1210.21 L1660.99 1210.21 L1661.57 1210.21 L1662.16 1210.21 L1662.75 1210.21 L1663.33 1210.21 L1663.92 1210.21 L1664.5 1210.21 L1665.09 1210.21 L1665.68 1210.21 L1666.26 1210.21 L1666.85 1210.21 L1667.44 1210.21 L1668.02 1210.21 L1668.61 1210.21 L1669.2 1210.21 L1669.78 1210.21 L1670.37 1210.21 L1670.96 1210.21 L1671.54 1210.21 L1672.13 1210.21 L1672.71 1210.21 L1673.3 1210.21 L1673.89 1210.21 L1674.47 1210.21 L1675.06 1210.21 L1675.65 1210.21 L1676.23 1210.21 L1676.82 1210.21 L1677.41 1210.21 L1677.99 1210.21 L1678.58 1210.21 L1679.17 1210.21 L1679.75 1210.21 L1680.34 1210.21 L1680.92 1210.21 L1681.51 1210.21 L1682.1 1210.21 L1682.68 1210.21 L1683.27 1210.21 L1683.86 1210.21 L1684.44 1210.21 L1685.03 1210.21 L1685.62 1210.21 L1686.2 1210.21 L1686.79 1210.21 L1687.37 1210.21 L1687.96 1210.21 L1688.55 1210.21 L1689.13 1210.21 L1689.72 1210.21 L1690.31 1210.21 L1690.89 1210.21 L1691.48 1210.21 L1692.07 1210.21 L1692.65 1210.21 L1693.24 1210.21 L1693.83 1210.21 L1694.41 1210.21 L1695 1210.21 L1695.58 1210.21 L1696.17 1210.21 L1696.76 1210.21 L1697.34 1210.21 L1697.93 1210.21 L1698.52 1210.21 L1699.1 1210.21 L1699.69 1210.21 L1700.28 1210.21 L1700.86 1210.21 L1701.45 1210.21 L1702.04 1210.21 L1702.62 1210.21 L1703.21 1210.21 L1703.79 1210.21 L1704.38 1210.21 L1704.97 1210.21 L1705.55 1210.21 L1706.14 1210.21 L1706.73 1210.21 L1707.31 1210.21 L1707.9 1210.21 L1708.49 1210.21 L1709.07 1210.21 L1709.66 1210.21 L1710.24 1210.21 L1710.83 1210.21 L1711.42 1210.21 L1712 1210.21 L1712.59 1210.21 L1713.18 1210.21 L1713.76 1210.21 L1714.35 1210.21 L1714.94 1210.21 L1715.52 1210.21 L1716.11 1210.21 L1716.7 1210.21 L1717.28 1210.21 L1717.87 1210.21 L1718.45 1210.21 L1719.04 1210.21 L1719.63 1210.21 L1720.21 1210.21 L1720.8 1210.21 L1721.39 1210.21 L1721.97 1210.21 L1722.56 1210.21 L1723.15 1210.21 L1723.73 1210.21 L1724.32 1210.21 L1724.91 1210.21 L1725.49 1210.21 L1726.08 1210.21 L1726.66 1210.21 L1727.25 1210.21 L1727.84 1210.21 L1728.42 1210.21 L1729.01 1210.21 L1729.6 1210.21 L1730.18 1210.21 L1730.77 1210.21 L1731.36 1210.21 L1731.94 1210.21 L1732.53 1210.21 L1733.11 1210.21 L1733.7 1210.21 L1734.29 1210.21 L1734.87 1210.21 L1735.46 1210.21 L1736.05 1210.21 L1736.63 1210.21 L1737.22 1210.21 L1737.81 1210.21 L1738.39 1210.21 L1738.98 1210.21 L1739.57 1210.21 L1740.15 1210.21 L1740.74 1210.21 L1741.32 1210.21 L1741.91 1210.21 L1742.5 1210.21 L1743.08 1210.21 L1743.67 1210.21 L1744.26 1210.21 L1744.84 1210.21 L1745.43 1210.21 L1746.02 1210.21 L1746.6 1210.21 L1747.19 1210.21 L1747.78 1210.21 L1748.36 1210.21 L1748.95 1210.21 L1749.53 1210.21 L1750.12 1210.21 L1750.71 1210.21 L1751.29 1210.21 L1751.88 1210.21 L1752.47 1210.21 L1753.05 1210.21 L1753.64 1210.21 L1754.23 1210.21 L1754.81 1210.21 L1755.4 1210.21 L1755.99 1210.21 L1756.57 1210.21 L1757.16 1210.21 L1757.74 1210.21 L1758.33 1210.21 L1758.92 1210.21 L1759.5 1210.21 L1760.09 1210.21 L1760.68 1210.21 L1761.26 1210.21 L1761.85 1210.21 L1762.44 1210.21 L1763.02 1210.21 L1763.61 1210.21 L1764.19 1210.21 L1764.78 1210.21 L1765.37 1210.21 L1765.95 1210.21 L1766.54 1210.21 L1767.13 1210.21 L1767.71 1210.21 L1768.3 1210.21 L1768.89 1210.21 L1769.47 1210.21 L1770.06 1210.21 L1770.65 1210.21 L1771.23 1210.21 L1771.82 1210.21 L1772.4 1210.21 L1772.99 1210.21 L1773.58 1210.21 L1774.16 1210.21 L1774.75 1210.21 L1775.34 1210.21 L1775.92 1210.21 L1776.51 1210.21 L1777.1 1210.21 L1777.68 1210.21 L1778.27 1210.21 L1778.86 1210.21 L1779.44 1210.21 L1780.03 1210.21 L1780.61 1210.21 L1781.2 1210.21 L1781.79 1210.21 L1782.37 1210.21 L1782.96 1210.21 L1783.55 1210.21 L1784.13 1210.21 L1784.72 1210.21 L1785.31 1210.21 L1785.89 1210.21 L1786.48 1210.21 L1787.06 1210.21 L1787.65 1210.21 L1788.24 1210.21 L1788.82 1210.21 L1789.41 1210.21 L1790 1210.21 L1790.58 1210.21 L1791.17 1210.21 L1791.76 1210.21 L1792.34 1210.21 L1792.93 1210.21 L1793.52 1210.21 L1794.1 1210.21 L1794.69 1210.21 L1795.27 1210.21 L1795.86 1210.21 L1796.45 1210.21 L1797.03 1210.21 L1797.62 1210.21 L1798.21 1210.21 L1798.79 1210.21 L1799.38 1210.21 L1799.97 1210.21 L1800.55 1210.21 L1801.14 1210.21 L1801.73 1210.21 L1802.31 1210.21 L1802.9 1210.21 L1803.48 1210.21 L1804.07 1210.21 L1804.66 1210.21 L1805.24 1210.21 L1805.83 1210.21 L1806.42 1210.21 L1807 1210.21 L1807.59 1210.21 L1808.18 1210.21 L1808.76 1210.21 L1809.35 1210.21 L1809.94 1210.21 L1810.52 1210.21 L1811.11 1210.21 L1811.69 1210.21 L1812.28 1210.21 L1812.87 1210.21 L1813.45 1210.21 L1814.04 1210.21 L1814.63 1210.21 L1815.21 1210.21 L1815.8 1210.21 L1816.39 1210.21 L1816.97 1210.21 L1817.56 1210.21 L1818.14 1210.21 L1818.73 1210.21 L1819.32 1210.21 L1819.9 1210.21 L1820.49 1210.21 L1821.08 1210.21 L1821.66 1210.21 L1822.25 1210.21 L1822.84 1210.21 L1823.42 1210.21 L1824.01 1210.21 L1824.6 1210.21 L1825.18 1210.21 L1825.77 1210.21 L1826.35 1210.21 L1826.94 1210.21 L1827.53 1210.21 L1828.11 1210.21 L1828.7 1210.21 L1829.29 1210.21 L1829.87 1210.21 L1830.46 1210.21 L1831.05 1210.21 L1831.63 1210.21 L1832.22 1210.21 L1832.81 1210.21 L1833.39 1210.21 L1833.98 1210.21 L1834.56 1210.21 L1835.15 1210.21 L1835.74 1210.21 L1836.32 1210.21 L1836.91 1210.21 L1837.5 1210.21 L1838.08 1210.21 L1838.67 1210.21 L1839.26 1210.21 L1839.84 1210.21 L1840.43 1210.21 L1841.01 1210.21 L1841.6 1210.21 L1842.19 1210.21 L1842.77 1210.21 L1843.36 1210.21 L1843.95 1210.21 L1844.53 1210.21 L1845.12 1210.21 L1845.71 1210.21 L1846.29 1210.21 L1846.88 1210.21 L1847.47 1210.21 L1848.05 1210.21 L1848.64 1210.21 L1849.22 1210.21 L1849.81 1210.21 L1850.4 1210.21 L1850.98 1210.21 L1851.57 1210.21 L1852.16 1210.21 L1852.74 1210.21 L1853.33 1210.21 L1853.92 1210.21 L1854.5 1210.21 L1855.09 1210.21 L1855.68 1210.21 L1856.26 1210.21 L1856.85 1210.21 L1857.43 1210.21 L1858.02 1210.21 L1858.61 1210.21 L1859.19 1210.21 L1859.78 1210.21 L1860.37 1210.21 L1860.95 1210.21 L1861.54 1210.21 L1862.13 1210.21 L1862.71 1210.21 L1863.3 1210.21 L1863.88 1210.21 L1864.47 1210.21 L1865.06 1210.21 L1865.64 1210.21 L1866.23 1210.21 L1866.82 1210.21 L1867.4 1210.21 L1867.99 1210.21 L1868.58 1210.21 L1869.16 1210.21 L1869.75 1210.21 L1870.34 1210.21 L1870.92 1210.21 L1871.51 1210.21 L1872.09 1210.21 L1872.68 1210.21 L1873.27 1210.21 L1873.85 1210.21 L1874.44 1210.21 L1875.03 1210.21 L1875.61 1210.21 L1876.2 1210.21 L1876.79 1210.21 L1877.37 1210.21 L1877.96 1210.21 L1878.55 1210.21 L1879.13 1210.21 L1879.72 1210.21 L1880.3 1210.21 L1880.89 1210.21 L1881.48 1210.21 L1882.06 1210.21 L1882.65 1210.21 L1883.24 1210.21 L1883.82 1210.21 L1884.41 1210.21 L1885 1210.21 L1885.58 1210.21 L1886.17 1210.21 L1886.76 1210.21 L1887.34 1210.21 L1887.93 1210.21 L1888.51 1210.21 L1889.1 1210.21 L1889.69 1210.21 L1890.27 1210.21 L1890.86 1210.21 L1891.45 1210.21 L1892.03 1210.21 L1892.62 1210.21 L1893.21 1210.21 L1893.79 1210.21 L1894.38 1210.21 L1894.96 1210.21 L1895.55 1210.21 L1896.14 1210.21 L1896.72 1210.21 L1897.31 1210.21 L1897.9 1210.21 L1898.48 1210.21 L1899.07 1210.21 L1899.66 1210.21 L1900.24 1210.21 L1900.83 1210.21 L1901.42 1210.21 L1902 1210.21 L1902.59 1210.21 L1903.17 1210.21 L1903.76 1210.21 L1904.35 1210.21 L1904.93 1210.21 L1905.52 1210.21 L1906.11 1210.21 L1906.69 1210.21 L1907.28 1210.21 L1907.87 1210.21 L1908.45 1210.21 L1909.04 1210.21 L1909.63 1210.21 L1910.21 1210.21 L1910.8 1210.21 L1911.38 1210.21 L1911.97 1210.21 L1912.56 1210.21 L1913.14 1210.21 L1913.73 1210.21 L1914.32 1210.21 L1914.9 1210.21 L1915.49 1210.21 L1916.08 1210.21 L1916.66 1210.21 L1917.25 1210.21 L1917.83 1210.21 L1918.42 1210.21 L1919.01 1210.21 L1919.59 1210.21 L1920.18 1210.21 L1920.77 1210.21 L1921.35 1210.21 L1921.94 1210.21 L1922.53 1210.21 L1923.11 1210.21 L1923.7 1210.21 L1924.29 1210.21 L1924.87 1210.21 L1925.46 1210.21 L1926.04 1210.21 L1926.63 1210.21 L1927.22 1210.21 L1927.8 1210.21 L1928.39 1210.21 L1928.98 1210.21 L1929.56 1210.21 L1930.15 1210.21 L1930.74 1210.21 L1931.32 1210.21 L1931.91 1210.21 L1932.5 1210.21 L1933.08 1210.21 L1933.67 1210.21 L1934.25 1210.21 L1934.84 1210.21 L1935.43 1210.21 L1936.01 1210.21 L1936.6 1210.21 L1937.19 1210.21 L1937.77 1210.21 L1938.36 1210.21 L1938.95 1210.21 L1939.53 1210.21 L1940.12 1210.21 L1940.71 1210.21 L1941.29 1210.21 L1941.88 1210.21 L1942.46 1210.21 L1943.05 1210.21 L1943.64 1210.21 L1944.22 1210.21 L1944.81 1210.21 L1945.4 1210.21 L1945.98 1210.21 L1946.57 1210.21 L1947.16 1210.21 L1947.74 1210.21 L1948.33 1210.21 L1948.91 1210.21 L1949.5 1210.21 L1950.09 1210.21 L1950.67 1210.21 L1951.26 1210.21 L1951.85 1210.21 L1952.43 1210.21 L1953.02 1210.21 L1953.61 1210.21 L1954.19 1210.21 L1954.78 1210.21 L1955.37 1210.21 L1955.95 1210.21 L1956.54 1210.21 L1957.12 1210.21 L1957.71 1210.21 L1958.3 1210.21 L1958.88 1210.21 L1959.47 1210.21 L1960.06 1210.21 L1960.64 1210.21 L1961.23 1210.21 L1961.82 1210.21 L1962.4 1210.21 L1962.99 1210.21 L1963.58 1210.21 L1964.16 1210.21 L1964.75 1210.21 L1965.33 1210.21 L1965.92 1210.21 L1966.51 1210.21 L1967.09 1210.21 L1967.68 1210.21 L1968.27 1210.21 L1968.85 1210.21 L1969.44 1210.21 L1970.03 1210.21 L1970.61 1210.21 L1971.2 1210.21 L1971.78 1210.21 L1972.37 1210.21 L1972.96 1210.21 L1973.54 1210.21 L1974.13 1210.21 L1974.72 1210.21 L1975.3 1210.21 L1975.89 1210.21 L1976.48 1210.21 L1977.06 1210.21 L1977.65 1210.21 L1978.24 1210.21 L1978.82 1210.21 L1979.41 1210.21 L1979.99 1210.21 L1980.58 1210.21 L1981.17 1210.21 L1981.75 1210.21 L1982.34 1210.21 L1982.93 1210.21 L1983.51 1210.21 L1984.1 1210.21 L1984.69 1210.21 L1985.27 1210.21 L1985.86 1210.21 L1986.45 1210.21 L1987.03 1210.21 L1987.62 1210.21 L1988.2 1210.21 L1988.79 1210.21 L1989.38 1210.21 L1989.96 1210.21 L1990.55 1210.21 L1991.14 1210.21 L1991.72 1210.21 L1992.31 1210.21 L1992.9 1210.21 L1993.48 1210.21 L1994.07 1210.21 L1994.65 1210.21 L1995.24 1210.21 L1995.83 1210.21 L1996.41 1210.21 L1997 1210.21 L1997.59 1210.21 L1998.17 1210.21 L1998.76 1210.21 L1999.35 1210.21 L1999.93 1210.21 L2000.52 1210.21 L2001.11 1210.21 L2001.69 1210.21 L2002.28 1210.21 L2002.86 1210.21 L2003.45 1210.21 L2004.04 1210.21 L2004.62 1210.21 L2005.21 1210.21 L2005.8 1210.21 L2006.38 1210.21 L2006.97 1210.21 L2007.56 1210.21 L2008.14 1210.21 L2008.73 1210.21 L2009.32 1210.21 L2009.9 1210.21 L2010.49 1210.21 L2011.07 1210.21 L2011.66 1210.21 L2012.25 1210.21 L2012.83 1210.21 L2013.42 1210.21 L2014.01 1210.21 L2014.59 1210.21 L2015.18 1210.21 L2015.77 1210.21 L2016.35 1210.21 L2016.94 1210.21 L2017.53 1210.21 L2018.11 1210.21 L2018.7 1210.21 L2019.28 1210.21 L2019.87 1210.21 L2020.46 1210.21 L2021.04 1210.21 L2021.63 1210.21 L2022.22 1210.21 L2022.8 1210.21 L2023.39 1210.21 L2023.98 1210.21 L2024.56 1210.21 L2025.15 1210.21 L2025.73 1210.21 L2026.32 1210.21 L2026.91 1210.21 L2027.49 1210.21 L2028.08 1210.21 L2028.67 1210.21 L2029.25 1210.21 L2029.84 1210.21 L2030.43 1210.21 L2031.01 1210.21 L2031.6 1210.21 L2032.19 1210.21 L2032.77 1210.21 L2033.36 1210.21 L2033.94 1210.21 L2034.53 1210.21 L2035.12 1210.21 L2035.7 1210.21 L2036.29 1210.21 L2036.88 1210.21 L2037.46 1210.21 L2038.05 1210.21 L2038.64 1210.21 L2039.22 1210.21 L2039.81 1210.21 L2040.4 1210.21 L2040.98 1210.21 L2041.57 1210.21 L2042.15 1210.21 L2042.74 1210.21 L2043.33 1210.21 L2043.91 1210.21 L2044.5 1210.21 L2045.09 1210.21 L2045.67 1210.21 L2046.26 1210.21 L2046.85 1210.21 L2047.43 1210.21 L2048.02 1210.21 L2048.6 1210.21 L2049.19 1210.21 L2049.78 1210.21 L2050.36 1210.21 L2050.95 1210.21 L2051.54 1210.21 L2052.12 1210.21 L2052.71 1210.21 L2053.3 1210.21 L2053.88 1210.21 L2054.47 1210.21 L2055.06 1210.21 L2055.64 1210.21 L2056.23 1210.21 L2056.81 1210.21 L2057.4 1210.21 L2057.99 1210.21 L2058.57 1210.21 L2059.16 1210.21 L2059.75 1210.21 L2060.33 1210.21 L2060.92 1210.21 L2061.51 1210.21 L2062.09 1210.21 L2062.68 1210.21 L2063.27 1210.21 L2063.85 1210.21 L2064.44 1210.21 L2065.02 1210.21 L2065.61 1210.21 L2066.2 1210.21 L2066.78 1210.21 L2067.37 1210.21 L2067.96 1210.21 L2068.54 1210.21 L2069.13 1210.21 L2069.72 1210.21 L2070.3 1210.21 L2070.89 1210.21 L2071.48 1210.21 L2072.06 1210.21 L2072.65 1210.21 L2073.23 1210.21 L2073.82 1210.21 L2074.41 1210.21 L2074.99 1210.21 L2075.58 1210.21 L2076.17 1210.21 L2076.75 1210.21 L2077.34 1210.21 L2077.93 1210.21 L2078.51 1210.21 L2079.1 1210.21 L2079.68 1210.21 L2080.27 1210.21 L2080.86 1210.21 L2081.44 1210.21 L2082.03 1210.21 L2082.62 1210.21 L2083.2 1210.21 L2083.79 1210.21 L2084.38 1210.21 L2084.96 1210.21 L2085.55 1210.21 L2086.14 1210.21 L2086.72 1210.21 L2087.31 1210.21 L2087.89 1210.21 L2088.48 1210.21 L2089.07 1210.21 L2089.65 1210.21 L2090.24 1210.21 L2090.83 1210.21 L2091.41 1210.21 L2092 1210.21 L2092.59 1210.21 L2093.17 1210.21 L2093.76 1210.21 L2094.35 1210.21 L2094.93 1210.21 L2095.52 1210.21 L2096.1 1210.21 L2096.69 1210.21 L2097.28 1210.21 L2097.86 1210.21 L2098.45 1210.21 L2099.04 1210.21 L2099.62 1210.21 L2100.21 1210.21 L2100.8 1210.21 L2101.38 1210.21 L2101.97 1210.21 L2102.55 1210.21 L2103.14 1210.21 L2103.73 1210.21 L2104.31 1210.21 L2104.9 1210.21 L2105.49 1210.21 L2106.07 1210.21 L2106.66 1210.21 L2107.25 1210.21 L2107.83 1210.21 L2108.42 1210.21 L2109.01 1210.21 L2109.59 1210.21 L2110.18 1210.21 L2110.76 1210.21 L2111.35 1210.21 L2111.94 1210.21 L2112.52 1210.21 L2113.11 1210.21 L2113.7 1210.21 L2114.28 1210.21 L2114.87 1210.21 L2115.46 1210.21 L2116.04 1210.21 L2116.63 1210.21 L2117.22 1210.21 L2117.8 1210.21 L2118.39 1210.21 L2118.97 1210.21 L2119.56 1210.21 L2120.15 1210.21 L2120.73 1210.21 L2121.32 1210.21 L2121.91 1210.21 L2122.49 1210.21 L2123.08 1210.21 L2123.67 1210.21 L2124.25 1210.21 L2124.84 1210.21 L2125.42 1210.21 L2126.01 1210.21 L2126.6 1210.21 L2127.18 1210.21 L2127.77 1210.21 L2128.36 1210.21 L2128.94 1210.21 L2129.53 1210.21 L2130.12 1210.21 L2130.7 1210.21 L2131.29 1210.21 L2131.88 1210.21 L2132.46 1210.21 L2133.05 1210.21 L2133.63 1210.21 L2134.22 1210.21 L2134.81 1210.21 L2135.39 1210.21 L2135.98 1210.21 L2136.57 1210.21 L2137.15 1210.21 L2137.74 1210.21 L2138.33 1210.21 L2138.91 1210.21 L2139.5 1210.21 L2140.09 1210.21 L2140.67 1210.21 L2141.26 1210.21 L2141.84 1210.21 L2142.43 1210.21 L2143.02 1210.21 L2143.6 1210.21 L2144.19 1210.21 L2144.78 1210.21 L2145.36 1210.21 L2145.95 1210.21 L2146.54 1210.21 L2147.12 1210.21 L2147.71 1210.21 L2148.3 1210.21 L2148.88 1210.21 L2149.47 1210.21 L2150.05 1210.21 L2150.64 1210.21 L2151.23 1210.21 L2151.81 1210.21 L2152.4 1210.21 L2152.99 1210.21 L2153.57 1210.21 L2154.16 1210.21 L2154.75 1210.21 L2155.33 1210.21 L2155.92 1210.21 L2156.5 1210.21 L2157.09 1210.21 L2157.68 1210.21 L2158.26 1210.21 L2158.26 1210.09 L2157.68 1210.09 L2157.09 1210.09 L2156.5 1210.09 L2155.92 1210.09 L2155.33 1210.09 L2154.75 1210.09 L2154.16 1210.09 L2153.57 1210.09 L2152.99 1210.09 L2152.4 1210.09 L2151.81 1210.09 L2151.23 1210.09 L2150.64 1210.09 L2150.05 1210.09 L2149.47 1210.09 L2148.88 1210.09 L2148.3 1210.09 L2147.71 1210.09 L2147.12 1210.09 L2146.54 1210.09 L2145.95 1210.09 L2145.36 1210.09 L2144.78 1210.09 L2144.19 1210.09 L2143.6 1210.09 L2143.02 1210.09 L2142.43 1210.09 L2141.84 1210.09 L2141.26 1210.09 L2140.67 1210.09 L2140.09 1210.09 L2139.5 1210.09 L2138.91 1210.09 L2138.33 1210.09 L2137.74 1210.09 L2137.15 1210.09 L2136.57 1210.09 L2135.98 1210.09 L2135.39 1210.09 L2134.81 1210.09 L2134.22 1210.09 L2133.63 1210.09 L2133.05 1210.09 L2132.46 1210.09 L2131.88 1210.09 L2131.29 1210.09 L2130.7 1210.09 L2130.12 1210.09 L2129.53 1210.09 L2128.94 1210.09 L2128.36 1210.09 L2127.77 1210.09 L2127.18 1210.09 L2126.6 1210.09 L2126.01 1210.09 L2125.42 1210.09 L2124.84 1210.09 L2124.25 1210.09 L2123.67 1210.09 L2123.08 1210.09 L2122.49 1210.09 L2121.91 1210.09 L2121.32 1210.09 L2120.73 1210.09 L2120.15 1210.09 L2119.56 1210.09 L2118.97 1210.09 L2118.39 1210.09 L2117.8 1210.09 L2117.22 1210.09 L2116.63 1210.09 L2116.04 1210.09 L2115.46 1210.09 L2114.87 1210.09 L2114.28 1210.09 L2113.7 1210.09 L2113.11 1210.09 L2112.52 1210.09 L2111.94 1210.09 L2111.35 1210.09 L2110.76 1210.09 L2110.18 1210.09 L2109.59 1210.09 L2109.01 1210.09 L2108.42 1210.09 L2107.83 1210.09 L2107.25 1210.09 L2106.66 1210.09 L2106.07 1210.09 L2105.49 1210.09 L2104.9 1210.09 L2104.31 1210.09 L2103.73 1210.09 L2103.14 1210.09 L2102.55 1210.09 L2101.97 1210.09 L2101.38 1210.09 L2100.8 1210.09 L2100.21 1210.09 L2099.62 1210.09 L2099.04 1210.09 L2098.45 1210.09 L2097.86 1210.09 L2097.28 1210.09 L2096.69 1210.09 L2096.1 1210.09 L2095.52 1210.09 L2094.93 1210.09 L2094.35 1210.09 L2093.76 1210.09 L2093.17 1210.09 L2092.59 1210.09 L2092 1210.09 L2091.41 1210.09 L2090.83 1210.09 L2090.24 1210.09 L2089.65 1210.09 L2089.07 1210.09 L2088.48 1210.09 L2087.89 1210.09 L2087.31 1210.09 L2086.72 1210.09 L2086.14 1210.09 L2085.55 1210.09 L2084.96 1210.09 L2084.38 1210.09 L2083.79 1210.09 L2083.2 1210.09 L2082.62 1210.09 L2082.03 1210.09 L2081.44 1210.09 L2080.86 1210.09 L2080.27 1210.09 L2079.68 1210.09 L2079.1 1210.09 L2078.51 1210.09 L2077.93 1210.09 L2077.34 1210.09 L2076.75 1210.09 L2076.17 1210.09 L2075.58 1210.09 L2074.99 1210.09 L2074.41 1210.09 L2073.82 1210.09 L2073.23 1210.09 L2072.65 1210.09 L2072.06 1210.09 L2071.48 1210.09 L2070.89 1210.09 L2070.3 1210.09 L2069.72 1210.09 L2069.13 1210.09 L2068.54 1210.09 L2067.96 1210.09 L2067.37 1210.09 L2066.78 1210.09 L2066.2 1210.09 L2065.61 1210.09 L2065.02 1210.09 L2064.44 1210.09 L2063.85 1210.09 L2063.27 1210.09 L2062.68 1210.09 L2062.09 1210.09 L2061.51 1210.09 L2060.92 1210.09 L2060.33 1210.09 L2059.75 1210.09 L2059.16 1210.09 L2058.57 1210.09 L2057.99 1210.09 L2057.4 1210.09 L2056.81 1210.09 L2056.23 1210.09 L2055.64 1210.09 L2055.06 1210.09 L2054.47 1210.09 L2053.88 1210.09 L2053.3 1210.09 L2052.71 1210.09 L2052.12 1210.09 L2051.54 1210.09 L2050.95 1210.09 L2050.36 1210.09 L2049.78 1210.09 L2049.19 1210.09 L2048.6 1210.09 L2048.02 1210.09 L2047.43 1210.09 L2046.85 1210.09 L2046.26 1210.09 L2045.67 1210.09 L2045.09 1210.09 L2044.5 1210.09 L2043.91 1210.09 L2043.33 1210.09 L2042.74 1210.09 L2042.15 1210.09 L2041.57 1210.09 L2040.98 1210.09 L2040.4 1210.09 L2039.81 1210.09 L2039.22 1210.09 L2038.64 1210.09 L2038.05 1210.09 L2037.46 1210.09 L2036.88 1210.09 L2036.29 1210.09 L2035.7 1210.09 L2035.12 1210.09 L2034.53 1210.09 L2033.94 1210.09 L2033.36 1210.09 L2032.77 1210.09 L2032.19 1210.09 L2031.6 1210.09 L2031.01 1210.09 L2030.43 1210.09 L2029.84 1210.09 L2029.25 1210.09 L2028.67 1210.09 L2028.08 1210.09 L2027.49 1210.09 L2026.91 1210.09 L2026.32 1210.09 L2025.73 1210.09 L2025.15 1210.09 L2024.56 1210.09 L2023.98 1210.09 L2023.39 1210.09 L2022.8 1210.09 L2022.22 1210.09 L2021.63 1210.09 L2021.04 1210.09 L2020.46 1210.09 L2019.87 1210.09 L2019.28 1210.09 L2018.7 1210.09 L2018.11 1210.09 L2017.53 1210.09 L2016.94 1210.09 L2016.35 1210.09 L2015.77 1210.09 L2015.18 1210.09 L2014.59 1210.09 L2014.01 1210.09 L2013.42 1210.09 L2012.83 1210.09 L2012.25 1210.09 L2011.66 1210.09 L2011.07 1210.09 L2010.49 1210.09 L2009.9 1210.09 L2009.32 1210.09 L2008.73 1210.09 L2008.14 1210.09 L2007.56 1210.09 L2006.97 1210.09 L2006.38 1210.09 L2005.8 1210.09 L2005.21 1210.09 L2004.62 1210.09 L2004.04 1210.09 L2003.45 1210.09 L2002.86 1210.09 L2002.28 1210.09 L2001.69 1210.09 L2001.11 1210.09 L2000.52 1210.09 L1999.93 1210.09 L1999.35 1210.09 L1998.76 1210.09 L1998.17 1210.09 L1997.59 1210.09 L1997 1210.09 L1996.41 1210.09 L1995.83 1210.09 L1995.24 1210.09 L1994.65 1210.09 L1994.07 1210.09 L1993.48 1210.09 L1992.9 1210.09 L1992.31 1210.09 L1991.72 1210.09 L1991.14 1210.09 L1990.55 1210.09 L1989.96 1210.09 L1989.38 1210.09 L1988.79 1210.09 L1988.2 1210.09 L1987.62 1210.09 L1987.03 1210.09 L1986.45 1210.09 L1985.86 1210.09 L1985.27 1210.09 L1984.69 1210.09 L1984.1 1210.09 L1983.51 1210.09 L1982.93 1210.09 L1982.34 1210.09 L1981.75 1210.09 L1981.17 1210.09 L1980.58 1210.09 L1979.99 1210.09 L1979.41 1210.09 L1978.82 1210.09 L1978.24 1210.09 L1977.65 1210.09 L1977.06 1210.09 L1976.48 1210.09 L1975.89 1210.09 L1975.3 1210.09 L1974.72 1210.09 L1974.13 1210.09 L1973.54 1210.09 L1972.96 1210.09 L1972.37 1210.09 L1971.78 1210.09 L1971.2 1210.09 L1970.61 1210.09 L1970.03 1210.09 L1969.44 1210.09 L1968.85 1210.09 L1968.27 1210.09 L1967.68 1210.09 L1967.09 1210.09 L1966.51 1210.09 L1965.92 1210.09 L1965.33 1210.09 L1964.75 1210.09 L1964.16 1210.09 L1963.58 1210.09 L1962.99 1210.09 L1962.4 1210.09 L1961.82 1210.09 L1961.23 1210.09 L1960.64 1210.09 L1960.06 1210.09 L1959.47 1210.09 L1958.88 1210.09 L1958.3 1210.09 L1957.71 1210.09 L1957.12 1210.09 L1956.54 1210.09 L1955.95 1210.09 L1955.37 1210.09 L1954.78 1210.09 L1954.19 1210.09 L1953.61 1210.09 L1953.02 1210.09 L1952.43 1210.09 L1951.85 1210.09 L1951.26 1210.09 L1950.67 1210.09 L1950.09 1210.09 L1949.5 1210.09 L1948.91 1210.09 L1948.33 1210.09 L1947.74 1210.09 L1947.16 1210.09 L1946.57 1210.09 L1945.98 1210.09 L1945.4 1210.09 L1944.81 1210.09 L1944.22 1210.09 L1943.64 1210.09 L1943.05 1210.09 L1942.46 1210.09 L1941.88 1210.09 L1941.29 1210.09 L1940.71 1210.09 L1940.12 1210.09 L1939.53 1210.09 L1938.95 1210.09 L1938.36 1210.09 L1937.77 1210.09 L1937.19 1210.09 L1936.6 1210.09 L1936.01 1210.09 L1935.43 1210.09 L1934.84 1210.09 L1934.25 1210.09 L1933.67 1210.09 L1933.08 1210.09 L1932.5 1210.09 L1931.91 1210.09 L1931.32 1210.09 L1930.74 1210.09 L1930.15 1210.09 L1929.56 1210.09 L1928.98 1210.09 L1928.39 1210.09 L1927.8 1210.09 L1927.22 1210.09 L1926.63 1210.09 L1926.04 1210.09 L1925.46 1210.09 L1924.87 1210.09 L1924.29 1210.09 L1923.7 1210.09 L1923.11 1210.09 L1922.53 1210.09 L1921.94 1210.09 L1921.35 1210.09 L1920.77 1210.09 L1920.18 1210.09 L1919.59 1210.09 L1919.01 1210.09 L1918.42 1210.09 L1917.83 1210.09 L1917.25 1210.09 L1916.66 1210.09 L1916.08 1210.09 L1915.49 1210.09 L1914.9 1210.09 L1914.32 1210.09 L1913.73 1210.09 L1913.14 1210.09 L1912.56 1210.09 L1911.97 1210.09 L1911.38 1210.09 L1910.8 1210.09 L1910.21 1210.09 L1909.63 1210.09 L1909.04 1210.09 L1908.45 1210.09 L1907.87 1210.09 L1907.28 1210.09 L1906.69 1210.09 L1906.11 1210.09 L1905.52 1210.09 L1904.93 1210.09 L1904.35 1210.09 L1903.76 1210.09 L1903.17 1210.09 L1902.59 1210.09 L1902 1210.09 L1901.42 1210.09 L1900.83 1210.09 L1900.24 1210.09 L1899.66 1210.09 L1899.07 1210.09 L1898.48 1210.09 L1897.9 1210.09 L1897.31 1210.09 L1896.72 1210.09 L1896.14 1210.09 L1895.55 1210.09 L1894.96 1210.09 L1894.38 1210.09 L1893.79 1210.09 L1893.21 1210.09 L1892.62 1210.09 L1892.03 1210.09 L1891.45 1210.09 L1890.86 1210.09 L1890.27 1210.09 L1889.69 1210.09 L1889.1 1210.09 L1888.51 1210.09 L1887.93 1210.09 L1887.34 1210.09 L1886.76 1210.09 L1886.17 1210.09 L1885.58 1210.09 L1885 1210.09 L1884.41 1210.09 L1883.82 1210.09 L1883.24 1210.09 L1882.65 1210.09 L1882.06 1210.09 L1881.48 1210.09 L1880.89 1210.09 L1880.3 1210.09 L1879.72 1210.09 L1879.13 1210.09 L1878.55 1210.09 L1877.96 1210.09 L1877.37 1210.09 L1876.79 1210.09 L1876.2 1210.09 L1875.61 1210.09 L1875.03 1210.09 L1874.44 1210.09 L1873.85 1210.09 L1873.27 1210.09 L1872.68 1210.09 L1872.09 1210.09 L1871.51 1210.09 L1870.92 1210.09 L1870.34 1210.09 L1869.75 1210.09 L1869.16 1210.09 L1868.58 1210.09 L1867.99 1210.09 L1867.4 1210.09 L1866.82 1210.09 L1866.23 1210.09 L1865.64 1210.09 L1865.06 1210.09 L1864.47 1210.09 L1863.88 1210.09 L1863.3 1210.09 L1862.71 1210.09 L1862.13 1210.09 L1861.54 1210.09 L1860.95 1210.09 L1860.37 1210.09 L1859.78 1210.09 L1859.19 1210.09 L1858.61 1210.09 L1858.02 1210.09 L1857.43 1210.09 L1856.85 1210.09 L1856.26 1210.09 L1855.68 1210.09 L1855.09 1210.09 L1854.5 1210.09 L1853.92 1210.09 L1853.33 1210.09 L1852.74 1210.09 L1852.16 1210.09 L1851.57 1210.09 L1850.98 1210.09 L1850.4 1210.09 L1849.81 1210.09 L1849.22 1210.09 L1848.64 1210.09 L1848.05 1210.09 L1847.47 1210.09 L1846.88 1210.09 L1846.29 1210.09 L1845.71 1210.09 L1845.12 1210.09 L1844.53 1210.09 L1843.95 1210.09 L1843.36 1210.09 L1842.77 1210.09 L1842.19 1210.09 L1841.6 1210.09 L1841.01 1210.09 L1840.43 1210.09 L1839.84 1210.09 L1839.26 1210.09 L1838.67 1210.09 L1838.08 1210.09 L1837.5 1210.09 L1836.91 1210.09 L1836.32 1210.09 L1835.74 1210.09 L1835.15 1210.09 L1834.56 1210.09 L1833.98 1210.09 L1833.39 1210.09 L1832.81 1210.09 L1832.22 1210.09 L1831.63 1210.09 L1831.05 1210.09 L1830.46 1210.09 L1829.87 1210.09 L1829.29 1210.09 L1828.7 1210.09 L1828.11 1210.09 L1827.53 1210.09 L1826.94 1210.09 L1826.35 1210.09 L1825.77 1210.09 L1825.18 1210.09 L1824.6 1210.09 L1824.01 1210.09 L1823.42 1210.09 L1822.84 1210.09 L1822.25 1210.09 L1821.66 1210.09 L1821.08 1210.09 L1820.49 1210.09 L1819.9 1210.09 L1819.32 1210.09 L1818.73 1210.09 L1818.14 1210.09 L1817.56 1210.09 L1816.97 1210.09 L1816.39 1210.09 L1815.8 1210.09 L1815.21 1210.09 L1814.63 1210.09 L1814.04 1210.09 L1813.45 1210.09 L1812.87 1210.09 L1812.28 1210.09 L1811.69 1210.09 L1811.11 1210.09 L1810.52 1210.09 L1809.94 1210.09 L1809.35 1210.09 L1808.76 1210.09 L1808.18 1210.09 L1807.59 1210.09 L1807 1210.09 L1806.42 1210.09 L1805.83 1210.09 L1805.24 1210.09 L1804.66 1210.09 L1804.07 1210.09 L1803.48 1210.09 L1802.9 1210.09 L1802.31 1210.09 L1801.73 1210.09 L1801.14 1210.09 L1800.55 1210.09 L1799.97 1210.09 L1799.38 1210.09 L1798.79 1210.09 L1798.21 1210.09 L1797.62 1210.09 L1797.03 1210.09 L1796.45 1210.09 L1795.86 1210.09 L1795.27 1210.09 L1794.69 1210.09 L1794.1 1210.09 L1793.52 1210.09 L1792.93 1210.09 L1792.34 1210.09 L1791.76 1210.09 L1791.17 1210.09 L1790.58 1210.09 L1790 1210.09 L1789.41 1210.09 L1788.82 1210.09 L1788.24 1210.09 L1787.65 1210.09 L1787.06 1210.09 L1786.48 1210.09 L1785.89 1210.09 L1785.31 1210.09 L1784.72 1210.09 L1784.13 1210.09 L1783.55 1210.09 L1782.96 1210.09 L1782.37 1210.09 L1781.79 1210.09 L1781.2 1210.09 L1780.61 1210.09 L1780.03 1210.09 L1779.44 1210.09 L1778.86 1210.09 L1778.27 1210.09 L1777.68 1210.09 L1777.1 1210.09 L1776.51 1210.09 L1775.92 1210.09 L1775.34 1210.09 L1774.75 1210.09 L1774.16 1210.09 L1773.58 1210.09 L1772.99 1210.09 L1772.4 1210.09 L1771.82 1210.09 L1771.23 1210.09 L1770.65 1210.09 L1770.06 1210.09 L1769.47 1210.09 L1768.89 1210.09 L1768.3 1210.09 L1767.71 1210.09 L1767.13 1210.09 L1766.54 1210.09 L1765.95 1210.09 L1765.37 1210.09 L1764.78 1210.09 L1764.19 1210.09 L1763.61 1210.09 L1763.02 1210.09 L1762.44 1210.09 L1761.85 1210.09 L1761.26 1210.09 L1760.68 1210.09 L1760.09 1210.09 L1759.5 1210.09 L1758.92 1210.09 L1758.33 1210.09 L1757.74 1210.09 L1757.16 1210.09 L1756.57 1210.09 L1755.99 1210.09 L1755.4 1210.09 L1754.81 1210.09 L1754.23 1210.09 L1753.64 1210.09 L1753.05 1210.09 L1752.47 1210.09 L1751.88 1210.09 L1751.29 1210.09 L1750.71 1210.09 L1750.12 1210.09 L1749.53 1210.09 L1748.95 1210.09 L1748.36 1210.09 L1747.78 1210.09 L1747.19 1210.09 L1746.6 1210.09 L1746.02 1210.09 L1745.43 1210.09 L1744.84 1210.09 L1744.26 1210.09 L1743.67 1210.09 L1743.08 1210.09 L1742.5 1210.09 L1741.91 1210.09 L1741.32 1210.09 L1740.74 1210.09 L1740.15 1210.09 L1739.57 1210.09 L1738.98 1210.09 L1738.39 1210.09 L1737.81 1210.09 L1737.22 1210.09 L1736.63 1210.09 L1736.05 1210.09 L1735.46 1210.09 L1734.87 1210.09 L1734.29 1210.09 L1733.7 1210.09 L1733.11 1210.09 L1732.53 1210.09 L1731.94 1210.09 L1731.36 1210.09 L1730.77 1210.09 L1730.18 1210.09 L1729.6 1210.09 L1729.01 1210.09 L1728.42 1210.09 L1727.84 1210.09 L1727.25 1210.09 L1726.66 1210.09 L1726.08 1210.09 L1725.49 1210.09 L1724.91 1210.09 L1724.32 1210.09 L1723.73 1210.09 L1723.15 1210.09 L1722.56 1210.09 L1721.97 1210.09 L1721.39 1210.09 L1720.8 1210.09 L1720.21 1210.09 L1719.63 1210.09 L1719.04 1210.09 L1718.45 1210.09 L1717.87 1210.09 L1717.28 1210.09 L1716.7 1210.09 L1716.11 1210.09 L1715.52 1210.09 L1714.94 1210.09 L1714.35 1210.09 L1713.76 1210.09 L1713.18 1210.09 L1712.59 1210.09 L1712 1210.09 L1711.42 1210.09 L1710.83 1210.09 L1710.24 1210.09 L1709.66 1210.09 L1709.07 1210.09 L1708.49 1210.09 L1707.9 1210.09 L1707.31 1210.09 L1706.73 1210.09 L1706.14 1210.09 L1705.55 1210.09 L1704.97 1210.09 L1704.38 1210.09 L1703.79 1210.09 L1703.21 1210.09 L1702.62 1210.09 L1702.04 1210.09 L1701.45 1210.09 L1700.86 1210.09 L1700.28 1210.09 L1699.69 1210.09 L1699.1 1210.09 L1698.52 1210.09 L1697.93 1210.09 L1697.34 1210.09 L1696.76 1210.09 L1696.17 1210.09 L1695.58 1210.09 L1695 1210.09 L1694.41 1210.09 L1693.83 1210.09 L1693.24 1210.09 L1692.65 1210.09 L1692.07 1210.09 L1691.48 1210.09 L1690.89 1210.09 L1690.31 1210.09 L1689.72 1210.09 L1689.13 1210.09 L1688.55 1210.09 L1687.96 1210.09 L1687.37 1210.09 L1686.79 1210.09 L1686.2 1210.09 L1685.62 1210.09 L1685.03 1210.09 L1684.44 1210.09 L1683.86 1210.09 L1683.27 1210.09 L1682.68 1210.09 L1682.1 1210.09 L1681.51 1210.09 L1680.92 1210.09 L1680.34 1210.09 L1679.75 1210.09 L1679.17 1210.09 L1678.58 1210.09 L1677.99 1210.09 L1677.41 1210.09 L1676.82 1210.09 L1676.23 1210.09 L1675.65 1210.09 L1675.06 1210.09 L1674.47 1210.09 L1673.89 1210.09 L1673.3 1210.09 L1672.71 1210.09 L1672.13 1210.09 L1671.54 1210.09 L1670.96 1210.09 L1670.37 1210.09 L1669.78 1210.09 L1669.2 1210.09 L1668.61 1210.09 L1668.02 1210.09 L1667.44 1210.09 L1666.85 1210.09 L1666.26 1210.09 L1665.68 1210.09 L1665.09 1210.09 L1664.5 1210.09 L1663.92 1210.09 L1663.33 1210.09 L1662.75 1210.09 L1662.16 1210.09 L1661.57 1210.09 L1660.99 1210.09 L1660.4 1210.09 L1659.81 1210.09 L1659.23 1210.09 L1658.64 1210.09 L1658.05 1210.09 L1657.47 1210.09 L1656.88 1210.09 L1656.29 1210.09 L1655.71 1210.09 L1655.12 1210.09 L1654.54 1210.09 L1653.95 1210.09 L1653.36 1210.09 L1652.78 1210.09 L1652.19 1210.09 L1651.6 1210.09 L1651.02 1210.09 L1650.43 1210.09 L1649.84 1210.09 L1649.26 1210.09 L1648.67 1210.09 L1648.09 1210.09 L1647.5 1210.09 L1646.91 1210.09 L1646.33 1210.09 L1645.74 1210.09 L1645.15 1210.09 L1644.57 1210.09 L1643.98 1210.09 L1643.39 1210.09 L1642.81 1210.09 L1642.22 1210.09 L1641.63 1210.09 L1641.05 1210.09 L1640.46 1210.09 L1639.88 1210.09 L1639.29 1210.09 L1638.7 1210.09 L1638.12 1210.09 L1637.53 1210.09 L1636.94 1210.09 L1636.36 1210.09 L1635.77 1210.09 L1635.18 1210.09 L1634.6 1210.09 L1634.01 1210.09 L1633.42 1210.09 L1632.84 1210.09 L1632.25 1210.09 L1631.67 1210.09 L1631.08 1210.09 L1630.49 1210.09 L1629.91 1210.09 L1629.32 1210.09 L1628.73 1210.09 L1628.15 1210.09 L1627.56 1210.09 L1626.97 1210.09 L1626.39 1210.09 L1625.8 1210.09 L1625.22 1210.09 L1624.63 1210.09 L1624.04 1210.09 L1623.46 1210.09 L1622.87 1210.09 L1622.28 1210.09 L1621.7 1210.09 L1621.11 1210.09 L1620.52 1210.09 L1619.94 1210.09 L1619.35 1210.09 L1618.76 1210.09 L1618.18 1210.09 L1617.59 1210.09 L1617.01 1210.09 L1616.42 1210.09 L1615.83 1210.09 L1615.25 1210.09 L1614.66 1210.09 L1614.07 1210.09 L1613.49 1210.09 L1612.9 1210.09 L1612.31 1210.09 L1611.73 1210.09 L1611.14 1210.09 L1610.55 1210.09 L1609.97 1210.09 L1609.38 1210.09 L1608.8 1210.09 L1608.21 1210.09 L1607.62 1210.09 L1607.04 1210.09 L1606.45 1210.09 L1605.86 1210.09 L1605.28 1210.09 L1604.69 1210.09 L1604.1 1210.09 L1603.52 1210.09 L1602.93 1210.09 L1602.34 1210.09 L1601.76 1210.09 L1601.17 1210.09 L1600.59 1210.09 L1600 1210.09 L1599.41 1210.09 L1598.83 1210.09 L1598.24 1210.09 L1597.65 1210.09 L1597.07 1210.09 L1596.48 1210.09 L1595.89 1210.09 L1595.31 1210.09 L1594.72 1210.09 L1594.14 1210.09 L1593.55 1210.09 L1592.96 1210.09 L1592.38 1210.09 L1591.79 1210.09 L1591.2 1210.09 L1590.62 1210.09 L1590.03 1210.09 L1589.44 1210.09 L1588.86 1210.09 L1588.27 1210.09 L1587.68 1210.09 L1587.1 1210.09 L1586.51 1210.09 L1585.93 1210.09 L1585.34 1210.09 L1584.75 1210.09 L1584.17 1210.09 L1583.58 1210.09 L1582.99 1210.09 L1582.41 1210.09 L1581.82 1210.09 L1581.23 1210.09 L1580.65 1210.09 L1580.06 1210.09 L1579.47 1210.09 L1578.89 1210.09 L1578.3 1210.09 L1577.72 1210.09 L1577.13 1210.09 L1576.54 1210.09 L1575.96 1210.09 L1575.37 1210.09 L1574.78 1210.09 L1574.2 1210.09 L1573.61 1210.09 L1573.02 1210.09 L1572.44 1210.09 L1571.85 1210.09 L1571.27 1210.09 L1570.68 1210.09 L1570.09 1210.09 L1569.51 1210.09 L1568.92 1210.09 L1568.33 1210.09 L1567.75 1210.09 L1567.16 1210.09 L1566.57 1210.09 L1565.99 1210.09 L1565.4 1210.09 L1564.81 1210.09 L1564.23 1210.09 L1563.64 1210.09 L1563.06 1210.09 L1562.47 1210.09 L1561.88 1210.09 L1561.3 1210.09 L1560.71 1210.09 L1560.12 1210.09 L1559.54 1210.09 L1558.95 1210.09 L1558.36 1210.09 L1557.78 1210.09 L1557.19 1210.09 L1556.6 1210.09 L1556.02 1210.09 L1555.43 1210.09 L1554.85 1210.09 L1554.26 1210.09 L1553.67 1210.09 L1553.09 1210.09 L1552.5 1210.09 L1551.91 1210.09 L1551.33 1210.09 L1550.74 1210.09 L1550.15 1210.09 L1549.57 1210.09 L1548.98 1210.09 L1548.4 1210.09 L1547.81 1210.09 L1547.22 1210.09 L1546.64 1210.09 L1546.05 1210.09 L1545.46 1210.09 L1544.88 1210.09 L1544.29 1210.09 L1543.7 1210.09 L1543.12 1210.09 L1542.53 1210.09 L1541.94 1210.09 L1541.36 1210.09 L1540.77 1210.09 L1540.19 1210.09 L1539.6 1210.09 L1539.01 1210.09 L1538.43 1210.09 L1537.84 1210.09 L1537.25 1210.09 L1536.67 1210.09 L1536.08 1210.09 L1535.49 1210.09 L1534.91 1210.09 L1534.32 1210.09 L1533.73 1210.09 L1533.15 1210.09 L1532.56 1210.09 L1531.98 1210.09 L1531.39 1210.09 L1530.8 1210.09 L1530.22 1210.09 L1529.63 1210.09 L1529.04 1210.09 L1528.46 1210.09 L1527.87 1210.09 L1527.28 1210.09 L1526.7 1210.09 L1526.11 1210.09 L1525.52 1210.09 L1524.94 1210.09 L1524.35 1210.09 L1523.77 1210.09 L1523.18 1210.09 L1522.59 1210.09 L1522.01 1210.09 L1521.42 1210.09 L1520.83 1210.09 L1520.25 1210.09 L1519.66 1210.09 L1519.07 1210.09 L1518.49 1210.09 L1517.9 1210.09 L1517.32 1210.09 L1516.73 1210.09 L1516.14 1210.09 L1515.56 1210.09 L1514.97 1210.09 L1514.38 1210.09 L1513.8 1210.09 L1513.21 1210.09 L1512.62 1210.09 L1512.04 1210.09 L1511.45 1210.09 L1510.86 1210.09 L1510.28 1210.09 L1509.69 1210.09 L1509.11 1210.09 L1508.52 1210.09 L1507.93 1210.09 L1507.35 1210.09 L1506.76 1210.09 L1506.17 1210.09 L1505.59 1210.09 L1505 1210.09 L1504.41 1210.09 L1503.83 1210.09 L1503.24 1210.09 L1502.65 1210.09 L1502.07 1210.09 L1501.48 1210.09 L1500.9 1210.09 L1500.31 1210.09 L1499.72 1210.09 L1499.14 1210.09 L1498.55 1210.09 L1497.96 1210.09 L1497.38 1210.09 L1496.79 1210.09 L1496.2 1210.09 L1495.62 1210.09 L1495.03 1210.09 L1494.45 1210.09 L1493.86 1210.09 L1493.27 1210.09 L1492.69 1210.09 L1492.1 1210.09 L1491.51 1210.09 L1490.93 1210.09 L1490.34 1210.09 L1489.75 1210.09 L1489.17 1210.09 L1488.58 1210.09 L1487.99 1210.09 L1487.41 1210.09 L1486.82 1210.09 L1486.24 1210.09 L1485.65 1210.09 L1485.06 1210.09 L1484.48 1210.09 L1483.89 1210.09 L1483.3 1210.09 L1482.72 1210.09 L1482.13 1210.09 L1481.54 1210.09 L1480.96 1210.09 L1480.37 1210.09 L1479.78 1210.09 L1479.2 1210.09 L1478.61 1210.09 L1478.03 1210.09 L1477.44 1210.09 L1476.85 1210.09 L1476.27 1210.09 L1475.68 1210.09 L1475.09 1210.09 L1474.51 1210.09 L1473.92 1210.09 L1473.33 1210.09 L1472.75 1210.09 L1472.16 1210.09 L1471.57 1210.09 L1470.99 1210.09 L1470.4 1210.09 L1469.82 1210.09 L1469.23 1210.09 L1468.64 1210.09 L1468.06 1210.09 L1467.47 1210.09 L1466.88 1210.09 L1466.3 1210.09 L1465.71 1210.09 L1465.12 1210.09 L1464.54 1210.09 L1463.95 1210.09 L1463.37 1210.09 L1462.78 1210.09 L1462.19 1210.09 L1461.61 1210.09 L1461.02 1210.09 L1460.43 1210.09 L1459.85 1210.09 L1459.26 1210.09 L1458.67 1210.09 L1458.09 1210.09 L1457.5 1210.09 L1456.91 1210.09 L1456.33 1210.09 L1455.74 1210.09 L1455.16 1210.09 L1454.57 1210.09 L1453.98 1210.09 L1453.4 1210.09 L1452.81 1210.09 L1452.22 1210.09 L1451.64 1210.09 L1451.05 1210.09 L1450.46 1210.09 L1449.88 1210.09 L1449.29 1210.09 L1448.7 1210.09 L1448.12 1210.09 L1447.53 1210.09 L1446.95 1210.09 L1446.36 1210.09 L1445.77 1210.09 L1445.19 1210.09 L1444.6 1210.09 L1444.01 1210.09 L1443.43 1210.09 L1442.84 1210.09 L1442.25 1210.09 L1441.67 1210.09 L1441.08 1210.09 L1440.5 1210.09 L1439.91 1210.09 L1439.32 1210.09 L1438.74 1210.09 L1438.15 1210.09 L1437.56 1210.09 L1436.98 1210.09 L1436.39 1210.09 L1435.8 1210.09 L1435.22 1210.09 L1434.63 1210.09 L1434.04 1210.09 L1433.46 1210.09 L1432.87 1210.09 L1432.29 1210.09 L1431.7 1210.09 L1431.11 1210.09 L1430.53 1210.09 L1429.94 1210.09 L1429.35 1210.09 L1428.77 1210.09 L1428.18 1210.09 L1427.59 1210.09 L1427.01 1210.09 L1426.42 1210.09 L1425.83 1210.09 L1425.25 1210.09 L1424.66 1210.09 L1424.08 1210.09 L1423.49 1210.09 L1422.9 1210.09 L1422.32 1210.09 L1421.73 1210.09 L1421.14 1210.09 L1420.56 1210.09 L1419.97 1210.09 L1419.38 1210.09 L1418.8 1210.09 L1418.21 1210.09 L1417.63 1210.09 L1417.04 1210.09 L1416.45 1210.09 L1415.87 1210.09 L1415.28 1210.09 L1414.69 1210.09 L1414.11 1210.09 L1413.52 1210.09 L1412.93 1210.09 L1412.35 1210.09 L1411.76 1210.09 L1411.17 1210.09 L1410.59 1210.09 L1410 1210.09 L1409.42 1210.09 L1408.83 1210.09 L1408.24 1210.09 L1407.66 1210.09 L1407.07 1210.09 L1406.48 1210.09 L1405.9 1210.09 L1405.31 1210.09 L1404.72 1210.09 L1404.14 1210.09 L1403.55 1210.09 L1402.96 1210.09 L1402.38 1210.09 L1401.79 1210.09 L1401.21 1210.09 L1400.62 1210.09 L1400.03 1210.09 L1399.45 1210.09 L1398.86 1210.09 L1398.27 1210.09 L1397.69 1210.09 L1397.1 1210.09 L1396.51 1210.09 L1395.93 1210.09 L1395.34 1210.09 L1394.75 1210.09 L1394.17 1210.09 L1393.58 1210.09 L1393 1210.09 L1392.41 1210.09 L1391.82 1210.09 L1391.24 1210.09 L1390.65 1210.09 L1390.06 1210.09 L1389.48 1210.09 L1388.89 1210.09 L1388.3 1210.09 L1387.72 1210.09 L1387.13 1210.09 L1386.55 1210.09 L1385.96 1210.09 L1385.37 1210.09 L1384.79 1210.09 L1384.2 1210.09 L1383.61 1210.09 L1383.03 1210.09 L1382.44 1210.09 L1381.85 1210.09 L1381.27 1210.09 L1380.68 1210.09 L1380.09 1210.09 L1379.51 1210.09 L1378.92 1210.09 L1378.34 1210.09 L1377.75 1210.09 L1377.16 1210.09 L1376.58 1210.09 L1375.99 1210.09 L1375.4 1210.09 L1374.82 1210.09 L1374.23 1210.09 L1373.64 1210.09 L1373.06 1210.09 L1372.47 1210.09 L1371.88 1210.09 L1371.3 1210.09 L1370.71 1210.09 L1370.13 1210.09 L1369.54 1210.09 L1368.95 1210.09 L1368.37 1210.09 L1367.78 1210.09 L1367.19 1210.09 L1366.61 1210.09 L1366.02 1210.09 L1365.43 1210.09 L1364.85 1210.09 L1364.26 1210.09 L1363.68 1210.09 L1363.09 1210.09 L1362.5 1210.09 L1361.92 1210.09 L1361.33 1210.09 L1360.74 1210.09 L1360.16 1210.09 L1359.57 1210.09 L1358.98 1210.09 L1358.4 1210.09 L1357.81 1210.09 L1357.22 1210.09 L1356.64 1210.09 L1356.05 1210.09 L1355.47 1210.09 L1354.88 1210.09 L1354.29 1210.09 L1353.71 1210.09 L1353.12 1210.09 L1352.53 1210.09 L1351.95 1210.09 L1351.36 1210.09 L1350.77 1210.09 L1350.19 1210.09 L1349.6 1210.09 L1349.01 1210.09 L1348.43 1210.09 L1347.84 1210.09 L1347.26 1210.09 L1346.67 1210.09 L1346.08 1210.09 L1345.5 1210.09 L1344.91 1210.09 L1344.32 1210.09 L1343.74 1210.09 L1343.15 1210.09 L1342.56 1210.09 L1341.98 1210.09 L1341.39 1210.09 L1340.8 1210.09 L1340.22 1210.09 L1339.63 1210.09 L1339.05 1210.09 L1338.46 1210.09 L1337.87 1210.09 L1337.29 1210.09 L1336.7 1210.09 L1336.11 1210.09 L1335.53 1210.09 L1334.94 1210.09 L1334.35 1210.09 L1333.77 1210.09 L1333.18 1210.09 L1332.6 1210.09 L1332.01 1210.09 L1331.42 1210.09 L1330.84 1210.09 L1330.25 1210.09 L1329.66 1210.09 L1329.08 1210.09 L1328.49 1210.09 L1327.9 1210.09 L1327.32 1210.09 L1326.73 1210.09 L1326.14 1210.09 L1325.56 1210.09 L1324.97 1210.09 L1324.39 1210.09 L1323.8 1210.09 L1323.21 1210.09 L1322.63 1210.09 L1322.04 1210.09 L1321.45 1210.09 L1320.87 1210.09 L1320.28 1210.09 L1319.69 1210.09 L1319.11 1210.09 L1318.52 1210.09 L1317.93 1210.09 L1317.35 1210.09 L1316.76 1210.09 L1316.18 1210.09 L1315.59 1210.09 L1315 1210.09 L1314.42 1210.09 L1313.83 1210.09 L1313.24 1210.09 L1312.66 1210.09 L1312.07 1210.09 L1311.48 1210.09 L1310.9 1210.09 L1310.31 1210.09 L1309.73 1210.09 L1309.14 1210.09 L1308.55 1210.09 L1307.97 1210.09 L1307.38 1210.09 L1306.79 1210.09 L1306.21 1210.09 L1305.62 1210.09 L1305.03 1210.09 L1304.45 1210.09 L1303.86 1210.09 L1303.27 1210.09 L1302.69 1210.09 L1302.1 1210.09 L1301.52 1210.09 L1300.93 1210.09 L1300.34 1210.09 L1299.76 1210.09 L1299.17 1210.09 L1298.58 1210.09 L1298 1210.09 L1297.41 1210.09 L1296.82 1210.09 L1296.24 1210.09 L1295.65 1210.09 L1295.06 1210.09 L1294.48 1210.09 L1293.89 1210.09 L1293.31 1210.09 L1292.72 1210.09 L1292.13 1210.09 L1291.55 1210.09 L1290.96 1210.09 L1290.37 1210.09 L1289.79 1210.09 L1289.2 1210.09 L1288.61 1210.09 L1288.03 1210.09 L1287.44 1210.09 L1286.86 1210.09 L1286.27 1210.09 L1285.68 1210.09 L1285.1 1210.09 L1284.51 1210.09 L1283.92 1210.09 L1283.34 1210.09 L1282.75 1210.09 L1282.16 1210.09 L1281.58 1210.09 L1280.99 1210.09 L1280.4 1210.09 L1279.82 1210.09 L1279.23 1210.09 L1278.65 1210.09 L1278.06 1210.09 L1277.47 1210.09 L1276.89 1210.09 L1276.3 1210.09 L1275.71 1210.09 L1275.13 1210.09 L1274.54 1210.09 L1273.95 1210.09 L1273.37 1210.09 L1272.78 1210.09 L1272.19 1210.09 L1271.61 1210.09 L1271.02 1210.09 L1270.44 1210.09 L1269.85 1210.09 L1269.26 1210.09 L1268.68 1210.09 L1268.09 1210.09 L1267.5 1210.09 L1266.92 1210.09 L1266.33 1210.09 L1265.74 1210.09 L1265.16 1210.09 L1264.57 1210.09 L1263.98 1210.09 L1263.4 1210.09 L1262.81 1210.09 L1262.23 1210.09 L1261.64 1210.09 L1261.05 1210.09 L1260.47 1210.09 L1259.88 1210.09 L1259.29 1210.09 L1258.71 1210.09 L1258.12 1210.09 L1257.53 1210.09 L1256.95 1210.09 L1256.36 1210.09 L1255.78 1210.09 L1255.19 1210.09 L1254.6 1210.09 L1254.02 1210.09 L1253.43 1210.09 L1252.84 1210.09 L1252.26 1210.09 L1251.67 1210.09 L1251.08 1210.09 L1250.5 1210.09 L1249.91 1210.09 L1249.32 1210.09 L1248.74 1210.09 L1248.15 1210.09 L1247.57 1210.09 L1246.98 1210.09 L1246.39 1210.09 L1245.81 1210.09 L1245.22 1210.09 L1244.63 1210.09 L1244.05 1210.09 L1243.46 1210.09 L1242.87 1210.09 L1242.29 1210.09 L1241.7 1210.09 L1241.11 1210.09 L1240.53 1210.09 L1239.94 1210.09 L1239.36 1210.09 L1238.77 1210.09 L1238.18 1210.09 L1237.6 1210.09 L1237.01 1210.09 L1236.42 1210.09 L1235.84 1210.09 L1235.25 1210.09 L1234.66 1210.09 L1234.08 1210.09 L1233.49 1210.09 L1232.91 1210.09 L1232.32 1210.09 L1231.73 1210.09 L1231.15 1210.09 L1230.56 1210.09 L1229.97 1210.09 L1229.39 1210.09 L1228.8 1210.09 L1228.21 1210.09 L1227.63 1210.09 L1227.04 1210.09 L1226.45 1210.09 L1225.87 1210.09 L1225.28 1210.09 L1224.7 1210.09 L1224.11 1210.09 L1223.52 1210.09 L1222.94 1210.09 L1222.35 1210.09 L1221.76 1210.09 L1221.18 1210.09 L1220.59 1210.09 L1220 1210.09 L1219.42 1210.09 L1218.83 1210.09 L1218.24 1210.09 L1217.66 1210.09 L1217.07 1210.09 L1216.49 1210.09 L1215.9 1210.09 L1215.31 1210.09 L1214.73 1210.09 L1214.14 1210.09 L1213.55 1210.09 L1212.97 1210.09 L1212.38 1210.09 L1211.79 1210.09 L1211.21 1210.09 L1210.62 1210.09 L1210.03 1210.09 L1209.45 1210.09 L1208.86 1210.09 L1208.28 1210.09 L1207.69 1210.09 L1207.1 1210.09 L1206.52 1210.09 L1205.93 1210.09 L1205.34 1210.09 L1204.76 1210.09 L1204.17 1210.09 L1203.58 1210.09 L1203 1210.09 L1202.41 1210.09 L1201.83 1210.09 L1201.24 1210.09 L1200.65 1210.09 L1200.07 1210.09 L1199.48 1210.09 L1198.89 1210.09 L1198.31 1210.09 L1197.72 1210.09 L1197.13 1210.09 L1196.55 1210.09 L1195.96 1210.09 L1195.37 1210.09 L1194.79 1210.09 L1194.2 1210.09 L1193.62 1210.09 L1193.03 1210.09 L1192.44 1210.09 L1191.86 1210.09 L1191.27 1210.09 L1190.68 1210.09 L1190.1 1210.09 L1189.51 1210.09 L1188.92 1210.09 L1188.34 1210.09 L1187.75 1210.09 L1187.16 1210.09 L1186.58 1210.09 L1185.99 1210.09 L1185.41 1210.09 L1184.82 1210.09 L1184.23 1210.09 L1183.65 1210.09 L1183.06 1210.09 L1182.47 1210.09 L1181.89 1210.09 L1181.3 1210.09 L1180.71 1210.09 L1180.13 1210.09 L1179.54 1210.09 L1178.96 1210.09 L1178.37 1210.09 L1177.78 1210.09 L1177.2 1210.09 L1176.61 1210.09 L1176.02 1210.09 L1175.44 1210.09 L1174.85 1210.09 L1174.26 1210.09 L1173.68 1210.09 L1173.09 1210.09 L1172.5 1210.09 L1171.92 1210.09 L1171.33 1210.09 L1170.75 1210.09 L1170.16 1210.09 L1169.57 1210.09 L1168.99 1210.09 L1168.4 1210.09 L1167.81 1210.09 L1167.23 1210.09 L1166.64 1210.09 L1166.05 1210.09 L1165.47 1210.09 L1164.88 1210.09 L1164.29 1210.09 L1163.71 1210.09 L1163.12 1210.09 L1162.54 1210.09 L1161.95 1210.09 L1161.36 1210.09 L1160.78 1210.09 L1160.19 1210.09 L1159.6 1210.09 L1159.02 1210.09 L1158.43 1210.09 L1157.84 1210.09 L1157.26 1210.09 L1156.67 1210.09 L1156.09 1210.09 L1155.5 1210.09 L1154.91 1210.09 L1154.33 1210.09 L1153.74 1210.09 L1153.15 1210.09 L1152.57 1210.09 L1151.98 1210.09 L1151.39 1210.09 L1150.81 1210.09 L1150.22 1210.09 L1149.63 1210.09 L1149.05 1210.09 L1148.46 1210.09 L1147.88 1210.09 L1147.29 1210.09 L1146.7 1210.09 L1146.12 1210.09 L1145.53 1210.09 L1144.94 1210.09 L1144.36 1210.09 L1143.77 1210.09 L1143.18 1210.09 L1142.6 1210.09 L1142.01 1210.09 L1141.42 1210.09 L1140.84 1210.09 L1140.25 1210.09 L1139.67 1210.09 L1139.08 1210.09 L1138.49 1210.09 L1137.91 1210.09 L1137.32 1210.09 L1136.73 1210.09 L1136.15 1210.09 L1135.56 1210.09 L1134.97 1210.09 L1134.39 1210.09 L1133.8 1210.09 L1133.21 1210.09 L1132.63 1210.09 L1132.04 1210.09 L1131.46 1210.09 L1130.87 1210.09 L1130.28 1210.09 L1129.7 1210.09 L1129.11 1210.09 L1128.52 1210.09 L1127.94 1210.09 L1127.35 1210.09 L1126.76 1210.09 L1126.18 1210.09 L1125.59 1210.09 L1125.01 1210.09 L1124.42 1210.09 L1123.83 1210.09 L1123.25 1210.09 L1122.66 1210.09 L1122.07 1210.09 L1121.49 1210.09 L1120.9 1210.09 L1120.31 1210.09 L1119.73 1210.09 L1119.14 1210.09 L1118.55 1210.09 L1117.97 1210.09 L1117.38 1210.09 L1116.8 1210.09 L1116.21 1210.09 L1115.62 1210.09 L1115.04 1210.09 L1114.45 1210.09 L1113.86 1210.09 L1113.28 1210.09 L1112.69 1210.09 L1112.1 1210.09 L1111.52 1210.09 L1110.93 1210.09 L1110.34 1210.09 L1109.76 1210.09 L1109.17 1210.09 L1108.59 1210.09 L1108 1210.09 L1107.41 1210.09 L1106.83 1210.09 L1106.24 1210.09 L1105.65 1210.09 L1105.07 1210.09 L1104.48 1210.09 L1103.89 1210.09 L1103.31 1210.09 L1102.72 1210.09 L1102.14 1210.09 L1101.55 1210.09 L1100.96 1210.09 L1100.38 1210.09 L1099.79 1210.09 L1099.2 1210.09 L1098.62 1210.09 L1098.03 1210.09 L1097.44 1210.09 L1096.86 1210.09 L1096.27 1210.09 L1095.68 1210.09 L1095.1 1210.09 L1094.51 1210.09 L1093.93 1210.09 L1093.34 1210.09 L1092.75 1210.09 L1092.17 1210.09 L1091.58 1210.09 L1090.99 1210.09 L1090.41 1210.09 L1089.82 1210.09 L1089.23 1210.09 L1088.65 1210.09 L1088.06 1210.09 L1087.47 1210.09 L1086.89 1210.09 L1086.3 1210.09 L1085.72 1210.09 L1085.13 1210.09 L1084.54 1210.09 L1083.96 1210.09 L1083.37 1210.09 L1082.78 1210.09 L1082.2 1210.09 L1081.61 1210.09 L1081.02 1210.09 L1080.44 1210.09 L1079.85 1210.09 L1079.26 1210.09 L1078.68 1210.09 L1078.09 1210.09 L1077.51 1210.09 L1076.92 1210.09 L1076.33 1210.09 L1075.75 1210.09 L1075.16 1210.09 L1074.57 1210.09 L1073.99 1210.09 L1073.4 1210.09 L1072.81 1210.09 L1072.23 1210.09 L1071.64 1210.09 L1071.06 1210.09 L1070.47 1210.09 L1069.88 1210.09 L1069.3 1210.09 L1068.71 1210.09 L1068.12 1210.09 L1067.54 1210.09 L1066.95 1210.09 L1066.36 1210.09 L1065.78 1210.09 L1065.19 1210.09 L1064.6 1210.09 L1064.02 1210.09 L1063.43 1210.09 L1062.85 1210.09 L1062.26 1210.09 L1061.67 1210.09 L1061.09 1210.09 L1060.5 1210.09 L1059.91 1210.09 L1059.33 1210.09 L1058.74 1210.09 L1058.15 1210.09 L1057.57 1210.09 L1056.98 1210.09 L1056.39 1210.09 L1055.81 1210.09 L1055.22 1210.09 L1054.64 1210.09 L1054.05 1210.09 L1053.46 1210.09 L1052.88 1210.09 L1052.29 1210.09 L1051.7 1210.09 L1051.12 1210.09 L1050.53 1210.09 L1049.94 1210.09 L1049.36 1210.09 L1048.77 1210.09 L1048.19 1210.09 L1047.6 1210.09 L1047.01 1210.09 L1046.43 1210.09 L1045.84 1210.09 L1045.25 1210.09 L1044.67 1210.09 L1044.08 1210.09 L1043.49 1210.09 L1042.91 1210.09 L1042.32 1210.09 L1041.73 1210.09 L1041.15 1210.09 L1040.56 1210.09 L1039.98 1210.09 L1039.39 1210.09 L1038.8 1210.09 L1038.22 1210.09 L1037.63 1210.09 L1037.04 1210.09 L1036.46 1210.09 L1035.87 1210.09 L1035.28 1210.09 L1034.7 1210.09 L1034.11 1210.09 L1033.52 1210.09 L1032.94 1210.09 L1032.35 1210.09 L1031.77 1210.09 L1031.18 1210.09 L1030.59 1210.09 L1030.01 1210.09 L1029.42 1210.09 L1028.83 1210.09 L1028.25 1210.09 L1027.66 1210.09 L1027.07 1210.09 L1026.49 1210.09 L1025.9 1210.09 L1025.32 1210.09 L1024.73 1210.09 L1024.14 1210.09 L1023.56 1210.09 L1022.97 1210.09 L1022.38 1210.09 L1021.8 1210.09 L1021.21 1210.09 L1020.62 1210.09 L1020.04 1210.09 L1019.45 1210.09 L1018.86 1210.09 L1018.28 1210.09 L1017.69 1210.09 L1017.11 1210.09 L1016.52 1210.09 L1015.93 1210.09 L1015.35 1210.09 L1014.76 1210.09 L1014.17 1210.09 L1013.59 1210.09 L1013 1210.09 L1012.41 1210.09 L1011.83 1210.09 L1011.24 1210.09 L1010.65 1210.09 L1010.07 1210.09 L1009.48 1210.09 L1008.9 1210.09 L1008.31 1210.09 L1007.72 1210.09 L1007.14 1210.09 L1006.55 1210.09 L1005.96 1210.09 L1005.38 1210.09 L1004.79 1210.09 L1004.2 1210.09 L1003.62 1210.09 L1003.03 1210.09 L1002.44 1210.09 L1001.86 1210.09 L1001.27 1210.09 L1000.69 1210.09 L1000.1 1210.09 L999.513 1210.09 L998.926 1210.09 L998.34 1210.09 L997.754 1210.09 L997.167 1210.09 L996.581 1210.09 L995.994 1210.09 L995.408 1210.09 L994.822 1210.09 L994.235 1210.09 L993.649 1210.09 L993.062 1210.09 L992.476 1210.09 L991.889 1210.09 L991.303 1210.09 L990.717 1210.09 L990.13 1210.09 L989.544 1210.09 L988.957 1210.09 L988.371 1210.09 L987.785 1210.09 L987.198 1210.09 L986.612 1210.09 L986.025 1210.09  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.15 986.612,1210.15 987.198,1210.15 987.785,1210.15 988.371,1210.15 988.957,1210.15 989.544,1210.15 990.13,1210.15 990.717,1210.15 991.303,1210.15 991.889,1210.15 992.476,1210.15 993.062,1210.15 993.649,1210.15 994.235,1210.15 994.822,1210.15 995.408,1210.15 995.994,1210.15 996.581,1210.15 997.167,1210.15 997.754,1210.15 998.34,1210.15 998.926,1210.15 999.513,1210.15 1000.1,1210.15 1000.69,1210.15 1001.27,1210.15 1001.86,1210.15 1002.44,1210.15 1003.03,1210.15 1003.62,1210.15 1004.2,1210.15 1004.79,1210.15 1005.38,1210.15 1005.96,1210.15 1006.55,1210.15 1007.14,1210.15 1007.72,1210.15 1008.31,1210.15 1008.9,1210.15 1009.48,1210.15 1010.07,1210.15 1010.65,1210.15 1011.24,1210.15 1011.83,1210.15 1012.41,1210.15 1013,1210.15 1013.59,1210.15 1014.17,1210.15 1014.76,1210.15 1015.35,1210.15 1015.93,1210.15 1016.52,1210.15 1017.11,1210.15 1017.69,1210.15 1018.28,1210.15 1018.86,1210.15 1019.45,1210.15 1020.04,1210.15 1020.62,1210.15 1021.21,1210.15 1021.8,1210.15 1022.38,1210.15 1022.97,1210.15 1023.56,1210.15 1024.14,1210.15 1024.73,1210.15 1025.32,1210.15 1025.9,1210.15 1026.49,1210.15 1027.07,1210.15 1027.66,1210.15 1028.25,1210.15 1028.83,1210.15 1029.42,1210.15 1030.01,1210.15 1030.59,1210.15 1031.18,1210.15 1031.77,1210.15 1032.35,1210.15 1032.94,1210.15 1033.52,1210.15 1034.11,1210.15 1034.7,1210.15 1035.28,1210.15 1035.87,1210.15 1036.46,1210.15 1037.04,1210.15 1037.63,1210.15 1038.22,1210.15 1038.8,1210.15 1039.39,1210.15 1039.98,1210.15 1040.56,1210.15 1041.15,1210.15 1041.73,1210.15 1042.32,1210.15 1042.91,1210.15 1043.49,1210.15 1044.08,1210.15 1044.67,1210.15 1045.25,1210.15 1045.84,1210.15 1046.43,1210.15 1047.01,1210.15 1047.6,1210.15 1048.19,1210.15 1048.77,1210.15 1049.36,1210.15 1049.94,1210.15 1050.53,1210.15 1051.12,1210.15 1051.7,1210.15 1052.29,1210.15 1052.88,1210.15 1053.46,1210.15 1054.05,1210.15 1054.64,1210.15 1055.22,1210.15 1055.81,1210.15 1056.39,1210.15 1056.98,1210.15 1057.57,1210.15 1058.15,1210.15 1058.74,1210.15 1059.33,1210.15 1059.91,1210.15 1060.5,1210.15 1061.09,1210.15 1061.67,1210.15 1062.26,1210.15 1062.85,1210.15 1063.43,1210.15 1064.02,1210.15 1064.6,1210.15 1065.19,1210.15 1065.78,1210.15 1066.36,1210.15 1066.95,1210.15 1067.54,1210.15 1068.12,1210.15 1068.71,1210.15 1069.3,1210.15 1069.88,1210.15 1070.47,1210.15 1071.06,1210.15 1071.64,1210.15 1072.23,1210.15 1072.81,1210.15 1073.4,1210.15 1073.99,1210.15 1074.57,1210.15 1075.16,1210.15 1075.75,1210.15 1076.33,1210.15 1076.92,1210.15 1077.51,1210.15 1078.09,1210.15 1078.68,1210.15 1079.26,1210.15 1079.85,1210.15 1080.44,1210.15 1081.02,1210.15 1081.61,1210.15 1082.2,1210.15 1082.78,1210.15 1083.37,1210.15 1083.96,1210.15 1084.54,1210.15 1085.13,1210.15 1085.72,1210.15 1086.3,1210.15 1086.89,1210.15 1087.47,1210.15 1088.06,1210.15 1088.65,1210.15 1089.23,1210.15 1089.82,1210.15 1090.41,1210.15 1090.99,1210.15 1091.58,1210.15 1092.17,1210.15 1092.75,1210.15 1093.34,1210.15 1093.93,1210.15 1094.51,1210.15 1095.1,1210.15 1095.68,1210.15 1096.27,1210.15 1096.86,1210.15 1097.44,1210.15 1098.03,1210.15 1098.62,1210.15 1099.2,1210.15 1099.79,1210.15 1100.38,1210.15 1100.96,1210.15 1101.55,1210.15 1102.14,1210.15 1102.72,1210.15 1103.31,1210.15 1103.89,1210.15 1104.48,1210.15 1105.07,1210.15 1105.65,1210.15 1106.24,1210.15 1106.83,1210.15 1107.41,1210.15 1108,1210.15 1108.59,1210.15 1109.17,1210.15 1109.76,1210.15 1110.34,1210.15 1110.93,1210.15 1111.52,1210.15 1112.1,1210.15 1112.69,1210.15 1113.28,1210.15 1113.86,1210.15 1114.45,1210.15 1115.04,1210.15 1115.62,1210.15 1116.21,1210.15 1116.8,1210.15 1117.38,1210.15 1117.97,1210.15 1118.55,1210.15 1119.14,1210.15 1119.73,1210.15 1120.31,1210.15 1120.9,1210.15 1121.49,1210.15 1122.07,1210.15 1122.66,1210.15 1123.25,1210.15 1123.83,1210.15 1124.42,1210.15 1125.01,1210.15 1125.59,1210.15 1126.18,1210.15 1126.76,1210.15 1127.35,1210.15 1127.94,1210.15 1128.52,1210.15 1129.11,1210.15 1129.7,1210.15 1130.28,1210.15 1130.87,1210.15 1131.46,1210.15 1132.04,1210.15 1132.63,1210.15 1133.21,1210.15 1133.8,1210.15 1134.39,1210.15 1134.97,1210.15 1135.56,1210.15 1136.15,1210.15 1136.73,1210.15 1137.32,1210.15 1137.91,1210.15 1138.49,1210.15 1139.08,1210.15 1139.67,1210.15 1140.25,1210.15 1140.84,1210.15 1141.42,1210.15 1142.01,1210.15 1142.6,1210.15 1143.18,1210.15 1143.77,1210.15 1144.36,1210.15 1144.94,1210.15 1145.53,1210.15 1146.12,1210.15 1146.7,1210.15 1147.29,1210.15 1147.88,1210.15 1148.46,1210.15 1149.05,1210.15 1149.63,1210.15 1150.22,1210.15 1150.81,1210.15 1151.39,1210.15 1151.98,1210.15 1152.57,1210.15 1153.15,1210.15 1153.74,1210.15 1154.33,1210.15 1154.91,1210.15 1155.5,1210.15 1156.09,1210.15 1156.67,1210.15 1157.26,1210.15 1157.84,1210.15 1158.43,1210.15 1159.02,1210.15 1159.6,1210.15 1160.19,1210.15 1160.78,1210.15 1161.36,1210.15 1161.95,1210.15 1162.54,1210.15 1163.12,1210.15 1163.71,1210.15 1164.29,1210.15 1164.88,1210.15 1165.47,1210.15 1166.05,1210.15 1166.64,1210.15 1167.23,1210.15 1167.81,1210.15 1168.4,1210.15 1168.99,1210.15 1169.57,1210.15 1170.16,1210.15 1170.75,1210.15 1171.33,1210.15 1171.92,1210.15 1172.5,1210.15 1173.09,1210.15 1173.68,1210.15 1174.26,1210.15 1174.85,1210.15 1175.44,1210.15 1176.02,1210.15 1176.61,1210.15 1177.2,1210.15 1177.78,1210.15 1178.37,1210.15 1178.96,1210.15 1179.54,1210.15 1180.13,1210.15 1180.71,1210.15 1181.3,1210.15 1181.89,1210.15 1182.47,1210.15 1183.06,1210.15 1183.65,1210.15 1184.23,1210.15 1184.82,1210.15 1185.41,1210.15 1185.99,1210.15 1186.58,1210.15 1187.16,1210.15 1187.75,1210.15 1188.34,1210.15 1188.92,1210.15 1189.51,1210.15 1190.1,1210.15 1190.68,1210.15 1191.27,1210.15 1191.86,1210.15 1192.44,1210.15 1193.03,1210.15 1193.62,1210.15 1194.2,1210.15 1194.79,1210.15 1195.37,1210.15 1195.96,1210.15 1196.55,1210.15 1197.13,1210.15 1197.72,1210.15 1198.31,1210.15 1198.89,1210.15 1199.48,1210.15 1200.07,1210.15 1200.65,1210.15 1201.24,1210.15 1201.83,1210.15 1202.41,1210.15 1203,1210.15 1203.58,1210.15 1204.17,1210.15 1204.76,1210.15 1205.34,1210.15 1205.93,1210.15 1206.52,1210.15 1207.1,1210.15 1207.69,1210.15 1208.28,1210.15 1208.86,1210.15 1209.45,1210.15 1210.03,1210.15 1210.62,1210.15 1211.21,1210.15 1211.79,1210.15 1212.38,1210.15 1212.97,1210.15 1213.55,1210.15 1214.14,1210.15 1214.73,1210.15 1215.31,1210.15 1215.9,1210.15 1216.49,1210.15 1217.07,1210.15 1217.66,1210.15 1218.24,1210.15 1218.83,1210.15 1219.42,1210.15 1220,1210.15 1220.59,1210.15 1221.18,1210.15 1221.76,1210.15 1222.35,1210.15 1222.94,1210.15 1223.52,1210.15 1224.11,1210.15 1224.7,1210.15 1225.28,1210.15 1225.87,1210.15 1226.45,1210.15 1227.04,1210.15 1227.63,1210.15 1228.21,1210.15 1228.8,1210.15 1229.39,1210.15 1229.97,1210.15 1230.56,1210.15 1231.15,1210.15 1231.73,1210.15 1232.32,1210.15 1232.91,1210.15 1233.49,1210.15 1234.08,1210.15 1234.66,1210.15 1235.25,1210.15 1235.84,1210.15 1236.42,1210.15 1237.01,1210.15 1237.6,1210.15 1238.18,1210.15 1238.77,1210.15 1239.36,1210.15 1239.94,1210.15 1240.53,1210.15 1241.11,1210.15 1241.7,1210.15 1242.29,1210.15 1242.87,1210.15 1243.46,1210.15 1244.05,1210.15 1244.63,1210.15 1245.22,1210.15 1245.81,1210.15 1246.39,1210.15 1246.98,1210.15 1247.57,1210.15 1248.15,1210.15 1248.74,1210.15 1249.32,1210.15 1249.91,1210.15 1250.5,1210.15 1251.08,1210.15 1251.67,1210.15 1252.26,1210.15 1252.84,1210.15 1253.43,1210.15 1254.02,1210.15 1254.6,1210.15 1255.19,1210.15 1255.78,1210.15 1256.36,1210.15 1256.95,1210.15 1257.53,1210.15 1258.12,1210.15 1258.71,1210.15 1259.29,1210.15 1259.88,1210.15 1260.47,1210.15 1261.05,1210.15 1261.64,1210.15 1262.23,1210.15 1262.81,1210.15 1263.4,1210.15 1263.98,1210.15 1264.57,1210.15 1265.16,1210.15 1265.74,1210.15 1266.33,1210.15 1266.92,1210.15 1267.5,1210.15 1268.09,1210.15 1268.68,1210.15 1269.26,1210.15 1269.85,1210.15 1270.44,1210.15 1271.02,1210.15 1271.61,1210.15 1272.19,1210.15 1272.78,1210.15 1273.37,1210.15 1273.95,1210.15 1274.54,1210.15 1275.13,1210.15 1275.71,1210.15 1276.3,1210.15 1276.89,1210.15 1277.47,1210.15 1278.06,1210.15 1278.65,1210.15 1279.23,1210.15 1279.82,1210.15 1280.4,1210.15 1280.99,1210.15 1281.58,1210.15 1282.16,1210.15 1282.75,1210.15 1283.34,1210.15 1283.92,1210.15 1284.51,1210.15 1285.1,1210.15 1285.68,1210.15 1286.27,1210.15 1286.86,1210.15 1287.44,1210.15 1288.03,1210.15 1288.61,1210.15 1289.2,1210.15 1289.79,1210.15 1290.37,1210.15 1290.96,1210.15 1291.55,1210.15 1292.13,1210.15 1292.72,1210.15 1293.31,1210.15 1293.89,1210.15 1294.48,1210.15 1295.06,1210.15 1295.65,1210.15 1296.24,1210.15 1296.82,1210.15 1297.41,1210.15 1298,1210.15 1298.58,1210.15 1299.17,1210.15 1299.76,1210.15 1300.34,1210.15 1300.93,1210.15 1301.52,1210.15 1302.1,1210.15 1302.69,1210.15 1303.27,1210.15 1303.86,1210.15 1304.45,1210.15 1305.03,1210.15 1305.62,1210.15 1306.21,1210.15 1306.79,1210.15 1307.38,1210.15 1307.97,1210.15 1308.55,1210.15 1309.14,1210.15 1309.73,1210.15 1310.31,1210.15 1310.9,1210.15 1311.48,1210.15 1312.07,1210.15 1312.66,1210.15 1313.24,1210.15 1313.83,1210.15 1314.42,1210.15 1315,1210.15 1315.59,1210.15 1316.18,1210.15 1316.76,1210.15 1317.35,1210.15 1317.93,1210.15 1318.52,1210.15 1319.11,1210.15 1319.69,1210.15 1320.28,1210.15 1320.87,1210.15 1321.45,1210.15 1322.04,1210.15 1322.63,1210.15 1323.21,1210.15 1323.8,1210.15 1324.39,1210.15 1324.97,1210.15 1325.56,1210.15 1326.14,1210.15 1326.73,1210.15 1327.32,1210.15 1327.9,1210.15 1328.49,1210.15 1329.08,1210.15 1329.66,1210.15 1330.25,1210.15 1330.84,1210.15 1331.42,1210.15 1332.01,1210.15 1332.6,1210.15 1333.18,1210.15 1333.77,1210.15 1334.35,1210.15 1334.94,1210.15 1335.53,1210.15 1336.11,1210.15 1336.7,1210.15 1337.29,1210.15 1337.87,1210.15 1338.46,1210.15 1339.05,1210.15 1339.63,1210.15 1340.22,1210.15 1340.8,1210.15 1341.39,1210.15 1341.98,1210.15 1342.56,1210.15 1343.15,1210.15 1343.74,1210.15 1344.32,1210.15 1344.91,1210.15 1345.5,1210.15 1346.08,1210.15 1346.67,1210.15 1347.26,1210.15 1347.84,1210.15 1348.43,1210.15 1349.01,1210.15 1349.6,1210.15 1350.19,1210.15 1350.77,1210.15 1351.36,1210.15 1351.95,1210.15 1352.53,1210.15 1353.12,1210.15 1353.71,1210.15 1354.29,1210.15 1354.88,1210.15 1355.47,1210.15 1356.05,1210.15 1356.64,1210.15 1357.22,1210.15 1357.81,1210.15 1358.4,1210.15 1358.98,1210.15 1359.57,1210.15 1360.16,1210.15 1360.74,1210.15 1361.33,1210.15 1361.92,1210.15 1362.5,1210.15 1363.09,1210.15 1363.68,1210.15 1364.26,1210.15 1364.85,1210.15 1365.43,1210.15 1366.02,1210.15 1366.61,1210.15 1367.19,1210.15 1367.78,1210.15 1368.37,1210.15 1368.95,1210.15 1369.54,1210.15 1370.13,1210.15 1370.71,1210.15 1371.3,1210.15 1371.88,1210.15 1372.47,1210.15 1373.06,1210.15 1373.64,1210.15 1374.23,1210.15 1374.82,1210.15 1375.4,1210.15 1375.99,1210.15 1376.58,1210.15 1377.16,1210.15 1377.75,1210.15 1378.34,1210.15 1378.92,1210.15 1379.51,1210.15 1380.09,1210.15 1380.68,1210.15 1381.27,1210.15 1381.85,1210.15 1382.44,1210.15 1383.03,1210.15 1383.61,1210.15 1384.2,1210.15 1384.79,1210.15 1385.37,1210.15 1385.96,1210.15 1386.55,1210.15 1387.13,1210.15 1387.72,1210.15 1388.3,1210.15 1388.89,1210.15 1389.48,1210.15 1390.06,1210.15 1390.65,1210.15 1391.24,1210.15 1391.82,1210.15 1392.41,1210.15 1393,1210.15 1393.58,1210.15 1394.17,1210.15 1394.75,1210.15 1395.34,1210.15 1395.93,1210.15 1396.51,1210.15 1397.1,1210.15 1397.69,1210.15 1398.27,1210.15 1398.86,1210.15 1399.45,1210.15 1400.03,1210.15 1400.62,1210.15 1401.21,1210.15 1401.79,1210.15 1402.38,1210.15 1402.96,1210.15 1403.55,1210.15 1404.14,1210.15 1404.72,1210.15 1405.31,1210.15 1405.9,1210.15 1406.48,1210.15 1407.07,1210.15 1407.66,1210.15 1408.24,1210.15 1408.83,1210.15 1409.42,1210.15 1410,1210.15 1410.59,1210.15 1411.17,1210.15 1411.76,1210.15 1412.35,1210.15 1412.93,1210.15 1413.52,1210.15 1414.11,1210.15 1414.69,1210.15 1415.28,1210.15 1415.87,1210.15 1416.45,1210.15 1417.04,1210.15 1417.63,1210.15 1418.21,1210.15 1418.8,1210.15 1419.38,1210.15 1419.97,1210.15 1420.56,1210.15 1421.14,1210.15 1421.73,1210.15 1422.32,1210.15 1422.9,1210.15 1423.49,1210.15 1424.08,1210.15 1424.66,1210.15 1425.25,1210.15 1425.83,1210.15 1426.42,1210.15 1427.01,1210.15 1427.59,1210.15 1428.18,1210.15 1428.77,1210.15 1429.35,1210.15 1429.94,1210.15 1430.53,1210.15 1431.11,1210.15 1431.7,1210.15 1432.29,1210.15 1432.87,1210.15 1433.46,1210.15 1434.04,1210.15 1434.63,1210.15 1435.22,1210.15 1435.8,1210.15 1436.39,1210.15 1436.98,1210.15 1437.56,1210.15 1438.15,1210.15 1438.74,1210.15 1439.32,1210.15 1439.91,1210.15 1440.5,1210.15 1441.08,1210.15 1441.67,1210.15 1442.25,1210.15 1442.84,1210.15 1443.43,1210.15 1444.01,1210.15 1444.6,1210.15 1445.19,1210.15 1445.77,1210.15 1446.36,1210.15 1446.95,1210.15 1447.53,1210.15 1448.12,1210.15 1448.7,1210.15 1449.29,1210.15 1449.88,1210.15 1450.46,1210.15 1451.05,1210.15 1451.64,1210.15 1452.22,1210.15 1452.81,1210.15 1453.4,1210.15 1453.98,1210.15 1454.57,1210.15 1455.16,1210.15 1455.74,1210.15 1456.33,1210.15 1456.91,1210.15 1457.5,1210.15 1458.09,1210.15 1458.67,1210.15 1459.26,1210.15 1459.85,1210.15 1460.43,1210.15 1461.02,1210.15 1461.61,1210.15 1462.19,1210.15 1462.78,1210.15 1463.37,1210.15 1463.95,1210.15 1464.54,1210.15 1465.12,1210.15 1465.71,1210.15 1466.3,1210.15 1466.88,1210.15 1467.47,1210.15 1468.06,1210.15 1468.64,1210.15 1469.23,1210.15 1469.82,1210.15 1470.4,1210.15 1470.99,1210.15 1471.57,1210.15 1472.16,1210.15 1472.75,1210.15 1473.33,1210.15 1473.92,1210.15 1474.51,1210.15 1475.09,1210.15 1475.68,1210.15 1476.27,1210.15 1476.85,1210.15 1477.44,1210.15 1478.03,1210.15 1478.61,1210.15 1479.2,1210.15 1479.78,1210.15 1480.37,1210.15 1480.96,1210.15 1481.54,1210.15 1482.13,1210.15 1482.72,1210.15 1483.3,1210.15 1483.89,1210.15 1484.48,1210.15 1485.06,1210.15 1485.65,1210.15 1486.24,1210.15 1486.82,1210.15 1487.41,1210.15 1487.99,1210.15 1488.58,1210.15 1489.17,1210.15 1489.75,1210.15 1490.34,1210.15 1490.93,1210.15 1491.51,1210.15 1492.1,1210.15 1492.69,1210.15 1493.27,1210.15 1493.86,1210.15 1494.45,1210.15 1495.03,1210.15 1495.62,1210.15 1496.2,1210.15 1496.79,1210.15 1497.38,1210.15 1497.96,1210.15 1498.55,1210.15 1499.14,1210.15 1499.72,1210.15 1500.31,1210.15 1500.9,1210.15 1501.48,1210.15 1502.07,1210.15 1502.65,1210.15 1503.24,1210.15 1503.83,1210.15 1504.41,1210.15 1505,1210.15 1505.59,1210.15 1506.17,1210.15 1506.76,1210.15 1507.35,1210.15 1507.93,1210.15 1508.52,1210.15 1509.11,1210.15 1509.69,1210.15 1510.28,1210.15 1510.86,1210.15 1511.45,1210.15 1512.04,1210.15 1512.62,1210.15 1513.21,1210.15 1513.8,1210.15 1514.38,1210.15 1514.97,1210.15 1515.56,1210.15 1516.14,1210.15 1516.73,1210.15 1517.32,1210.15 1517.9,1210.15 1518.49,1210.15 1519.07,1210.15 1519.66,1210.15 1520.25,1210.15 1520.83,1210.15 1521.42,1210.15 1522.01,1210.15 1522.59,1210.15 1523.18,1210.15 1523.77,1210.15 1524.35,1210.15 1524.94,1210.15 1525.52,1210.15 1526.11,1210.15 1526.7,1210.15 1527.28,1210.15 1527.87,1210.15 1528.46,1210.15 1529.04,1210.15 1529.63,1210.15 1530.22,1210.15 1530.8,1210.15 1531.39,1210.15 1531.98,1210.15 1532.56,1210.15 1533.15,1210.15 1533.73,1210.15 1534.32,1210.15 1534.91,1210.15 1535.49,1210.15 1536.08,1210.15 1536.67,1210.15 1537.25,1210.15 1537.84,1210.15 1538.43,1210.15 1539.01,1210.15 1539.6,1210.15 1540.19,1210.15 1540.77,1210.15 1541.36,1210.15 1541.94,1210.15 1542.53,1210.15 1543.12,1210.15 1543.7,1210.15 1544.29,1210.15 1544.88,1210.15 1545.46,1210.15 1546.05,1210.15 1546.64,1210.15 1547.22,1210.15 1547.81,1210.15 1548.4,1210.15 1548.98,1210.15 1549.57,1210.15 1550.15,1210.15 1550.74,1210.15 1551.33,1210.15 1551.91,1210.15 1552.5,1210.15 1553.09,1210.15 1553.67,1210.15 1554.26,1210.15 1554.85,1210.15 1555.43,1210.15 1556.02,1210.15 1556.6,1210.15 1557.19,1210.15 1557.78,1210.15 1558.36,1210.15 1558.95,1210.15 1559.54,1210.15 1560.12,1210.15 1560.71,1210.15 1561.3,1210.15 1561.88,1210.15 1562.47,1210.15 1563.06,1210.15 1563.64,1210.15 1564.23,1210.15 1564.81,1210.15 1565.4,1210.15 1565.99,1210.15 1566.57,1210.15 1567.16,1210.15 1567.75,1210.15 1568.33,1210.15 1568.92,1210.15 1569.51,1210.15 1570.09,1210.15 1570.68,1210.15 1571.27,1210.15 1571.85,1210.15 1572.44,1210.15 1573.02,1210.15 1573.61,1210.15 1574.2,1210.15 1574.78,1210.15 1575.37,1210.15 1575.96,1210.15 1576.54,1210.15 1577.13,1210.15 1577.72,1210.15 1578.3,1210.15 1578.89,1210.15 1579.47,1210.15 1580.06,1210.15 1580.65,1210.15 1581.23,1210.15 1581.82,1210.15 1582.41,1210.15 1582.99,1210.15 1583.58,1210.15 1584.17,1210.15 1584.75,1210.15 1585.34,1210.15 1585.93,1210.15 1586.51,1210.15 1587.1,1210.15 1587.68,1210.15 1588.27,1210.15 1588.86,1210.15 1589.44,1210.15 1590.03,1210.15 1590.62,1210.15 1591.2,1210.15 1591.79,1210.15 1592.38,1210.15 1592.96,1210.15 1593.55,1210.15 1594.14,1210.15 1594.72,1210.15 1595.31,1210.15 1595.89,1210.15 1596.48,1210.15 1597.07,1210.15 1597.65,1210.15 1598.24,1210.15 1598.83,1210.15 1599.41,1210.15 1600,1210.15 1600.59,1210.15 1601.17,1210.15 1601.76,1210.15 1602.34,1210.15 1602.93,1210.15 1603.52,1210.15 1604.1,1210.15 1604.69,1210.15 1605.28,1210.15 1605.86,1210.15 1606.45,1210.15 1607.04,1210.15 1607.62,1210.15 1608.21,1210.15 1608.8,1210.15 1609.38,1210.15 1609.97,1210.15 1610.55,1210.15 1611.14,1210.15 1611.73,1210.15 1612.31,1210.15 1612.9,1210.15 1613.49,1210.15 1614.07,1210.15 1614.66,1210.15 1615.25,1210.15 1615.83,1210.15 1616.42,1210.15 1617.01,1210.15 1617.59,1210.15 1618.18,1210.15 1618.76,1210.15 1619.35,1210.15 1619.94,1210.15 1620.52,1210.15 1621.11,1210.15 1621.7,1210.15 1622.28,1210.15 1622.87,1210.15 1623.46,1210.15 1624.04,1210.15 1624.63,1210.15 1625.22,1210.15 1625.8,1210.15 1626.39,1210.15 1626.97,1210.15 1627.56,1210.15 1628.15,1210.15 1628.73,1210.15 1629.32,1210.15 1629.91,1210.15 1630.49,1210.15 1631.08,1210.15 1631.67,1210.15 1632.25,1210.15 1632.84,1210.15 1633.42,1210.15 1634.01,1210.15 1634.6,1210.15 1635.18,1210.15 1635.77,1210.15 1636.36,1210.15 1636.94,1210.15 1637.53,1210.15 1638.12,1210.15 1638.7,1210.15 1639.29,1210.15 1639.88,1210.15 1640.46,1210.15 1641.05,1210.15 1641.63,1210.15 1642.22,1210.15 1642.81,1210.15 1643.39,1210.15 1643.98,1210.15 1644.57,1210.15 1645.15,1210.15 1645.74,1210.15 1646.33,1210.15 1646.91,1210.15 1647.5,1210.15 1648.09,1210.15 1648.67,1210.15 1649.26,1210.15 1649.84,1210.15 1650.43,1210.15 1651.02,1210.15 1651.6,1210.15 1652.19,1210.15 1652.78,1210.15 1653.36,1210.15 1653.95,1210.15 1654.54,1210.15 1655.12,1210.15 1655.71,1210.15 1656.29,1210.15 1656.88,1210.15 1657.47,1210.15 1658.05,1210.15 1658.64,1210.15 1659.23,1210.15 1659.81,1210.15 1660.4,1210.15 1660.99,1210.15 1661.57,1210.15 1662.16,1210.15 1662.75,1210.15 1663.33,1210.15 1663.92,1210.15 1664.5,1210.15 1665.09,1210.15 1665.68,1210.15 1666.26,1210.15 1666.85,1210.15 1667.44,1210.15 1668.02,1210.15 1668.61,1210.15 1669.2,1210.15 1669.78,1210.15 1670.37,1210.15 1670.96,1210.15 1671.54,1210.15 1672.13,1210.15 1672.71,1210.15 1673.3,1210.15 1673.89,1210.15 1674.47,1210.15 1675.06,1210.15 1675.65,1210.15 1676.23,1210.15 1676.82,1210.15 1677.41,1210.15 1677.99,1210.15 1678.58,1210.15 1679.17,1210.15 1679.75,1210.15 1680.34,1210.15 1680.92,1210.15 1681.51,1210.15 1682.1,1210.15 1682.68,1210.15 1683.27,1210.15 1683.86,1210.15 1684.44,1210.15 1685.03,1210.15 1685.62,1210.15 1686.2,1210.15 1686.79,1210.15 1687.37,1210.15 1687.96,1210.15 1688.55,1210.15 1689.13,1210.15 1689.72,1210.15 1690.31,1210.15 1690.89,1210.15 1691.48,1210.15 1692.07,1210.15 1692.65,1210.15 1693.24,1210.15 1693.83,1210.15 1694.41,1210.15 1695,1210.15 1695.58,1210.15 1696.17,1210.15 1696.76,1210.15 1697.34,1210.15 1697.93,1210.15 1698.52,1210.15 1699.1,1210.15 1699.69,1210.15 1700.28,1210.15 1700.86,1210.15 1701.45,1210.15 1702.04,1210.15 1702.62,1210.15 1703.21,1210.15 1703.79,1210.15 1704.38,1210.15 1704.97,1210.15 1705.55,1210.15 1706.14,1210.15 1706.73,1210.15 1707.31,1210.15 1707.9,1210.15 1708.49,1210.15 1709.07,1210.15 1709.66,1210.15 1710.24,1210.15 1710.83,1210.15 1711.42,1210.15 1712,1210.15 1712.59,1210.15 1713.18,1210.15 1713.76,1210.15 1714.35,1210.15 1714.94,1210.15 1715.52,1210.15 1716.11,1210.15 1716.7,1210.15 1717.28,1210.15 1717.87,1210.15 1718.45,1210.15 1719.04,1210.15 1719.63,1210.15 1720.21,1210.15 1720.8,1210.15 1721.39,1210.15 1721.97,1210.15 1722.56,1210.15 1723.15,1210.15 1723.73,1210.15 1724.32,1210.15 1724.91,1210.15 1725.49,1210.15 1726.08,1210.15 1726.66,1210.15 1727.25,1210.15 1727.84,1210.15 1728.42,1210.15 1729.01,1210.15 1729.6,1210.15 1730.18,1210.15 1730.77,1210.15 1731.36,1210.15 1731.94,1210.15 1732.53,1210.15 1733.11,1210.15 1733.7,1210.15 1734.29,1210.15 1734.87,1210.15 1735.46,1210.15 1736.05,1210.15 1736.63,1210.15 1737.22,1210.15 1737.81,1210.15 1738.39,1210.15 1738.98,1210.15 1739.57,1210.15 1740.15,1210.15 1740.74,1210.15 1741.32,1210.15 1741.91,1210.15 1742.5,1210.15 1743.08,1210.15 1743.67,1210.15 1744.26,1210.15 1744.84,1210.15 1745.43,1210.15 1746.02,1210.15 1746.6,1210.15 1747.19,1210.15 1747.78,1210.15 1748.36,1210.15 1748.95,1210.15 1749.53,1210.15 1750.12,1210.15 1750.71,1210.15 1751.29,1210.15 1751.88,1210.15 1752.47,1210.15 1753.05,1210.15 1753.64,1210.15 1754.23,1210.15 1754.81,1210.15 1755.4,1210.15 1755.99,1210.15 1756.57,1210.15 1757.16,1210.15 1757.74,1210.15 1758.33,1210.15 1758.92,1210.15 1759.5,1210.15 1760.09,1210.15 1760.68,1210.15 1761.26,1210.15 1761.85,1210.15 1762.44,1210.15 1763.02,1210.15 1763.61,1210.15 1764.19,1210.15 1764.78,1210.15 1765.37,1210.15 1765.95,1210.15 1766.54,1210.15 1767.13,1210.15 1767.71,1210.15 1768.3,1210.15 1768.89,1210.15 1769.47,1210.15 1770.06,1210.15 1770.65,1210.15 1771.23,1210.15 1771.82,1210.15 1772.4,1210.15 1772.99,1210.15 1773.58,1210.15 1774.16,1210.15 1774.75,1210.15 1775.34,1210.15 1775.92,1210.15 1776.51,1210.15 1777.1,1210.15 1777.68,1210.15 1778.27,1210.15 1778.86,1210.15 1779.44,1210.15 1780.03,1210.15 1780.61,1210.15 1781.2,1210.15 1781.79,1210.15 1782.37,1210.15 1782.96,1210.15 1783.55,1210.15 1784.13,1210.15 1784.72,1210.15 1785.31,1210.15 1785.89,1210.15 1786.48,1210.15 1787.06,1210.15 1787.65,1210.15 1788.24,1210.15 1788.82,1210.15 1789.41,1210.15 1790,1210.15 1790.58,1210.15 1791.17,1210.15 1791.76,1210.15 1792.34,1210.15 1792.93,1210.15 1793.52,1210.15 1794.1,1210.15 1794.69,1210.15 1795.27,1210.15 1795.86,1210.15 1796.45,1210.15 1797.03,1210.15 1797.62,1210.15 1798.21,1210.15 1798.79,1210.15 1799.38,1210.15 1799.97,1210.15 1800.55,1210.15 1801.14,1210.15 1801.73,1210.15 1802.31,1210.15 1802.9,1210.15 1803.48,1210.15 1804.07,1210.15 1804.66,1210.15 1805.24,1210.15 1805.83,1210.15 1806.42,1210.15 1807,1210.15 1807.59,1210.15 1808.18,1210.15 1808.76,1210.15 1809.35,1210.15 1809.94,1210.15 1810.52,1210.15 1811.11,1210.15 1811.69,1210.15 1812.28,1210.15 1812.87,1210.15 1813.45,1210.15 1814.04,1210.15 1814.63,1210.15 1815.21,1210.15 1815.8,1210.15 1816.39,1210.15 1816.97,1210.15 1817.56,1210.15 1818.14,1210.15 1818.73,1210.15 1819.32,1210.15 1819.9,1210.15 1820.49,1210.15 1821.08,1210.15 1821.66,1210.15 1822.25,1210.15 1822.84,1210.15 1823.42,1210.15 1824.01,1210.15 1824.6,1210.15 1825.18,1210.15 1825.77,1210.15 1826.35,1210.15 1826.94,1210.15 1827.53,1210.15 1828.11,1210.15 1828.7,1210.15 1829.29,1210.15 1829.87,1210.15 1830.46,1210.15 1831.05,1210.15 1831.63,1210.15 1832.22,1210.15 1832.81,1210.15 1833.39,1210.15 1833.98,1210.15 1834.56,1210.15 1835.15,1210.15 1835.74,1210.15 1836.32,1210.15 1836.91,1210.15 1837.5,1210.15 1838.08,1210.15 1838.67,1210.15 1839.26,1210.15 1839.84,1210.15 1840.43,1210.15 1841.01,1210.15 1841.6,1210.15 1842.19,1210.15 1842.77,1210.15 1843.36,1210.15 1843.95,1210.15 1844.53,1210.15 1845.12,1210.15 1845.71,1210.15 1846.29,1210.15 1846.88,1210.15 1847.47,1210.15 1848.05,1210.15 1848.64,1210.15 1849.22,1210.15 1849.81,1210.15 1850.4,1210.15 1850.98,1210.15 1851.57,1210.15 1852.16,1210.15 1852.74,1210.15 1853.33,1210.15 1853.92,1210.15 1854.5,1210.15 1855.09,1210.15 1855.68,1210.15 1856.26,1210.15 1856.85,1210.15 1857.43,1210.15 1858.02,1210.15 1858.61,1210.15 1859.19,1210.15 1859.78,1210.15 1860.37,1210.15 1860.95,1210.15 1861.54,1210.15 1862.13,1210.15 1862.71,1210.15 1863.3,1210.15 1863.88,1210.15 1864.47,1210.15 1865.06,1210.15 1865.64,1210.15 1866.23,1210.15 1866.82,1210.15 1867.4,1210.15 1867.99,1210.15 1868.58,1210.15 1869.16,1210.15 1869.75,1210.15 1870.34,1210.15 1870.92,1210.15 1871.51,1210.15 1872.09,1210.15 1872.68,1210.15 1873.27,1210.15 1873.85,1210.15 1874.44,1210.15 1875.03,1210.15 1875.61,1210.15 1876.2,1210.15 1876.79,1210.15 1877.37,1210.15 1877.96,1210.15 1878.55,1210.15 1879.13,1210.15 1879.72,1210.15 1880.3,1210.15 1880.89,1210.15 1881.48,1210.15 1882.06,1210.15 1882.65,1210.15 1883.24,1210.15 1883.82,1210.15 1884.41,1210.15 1885,1210.15 1885.58,1210.15 1886.17,1210.15 1886.76,1210.15 1887.34,1210.15 1887.93,1210.15 1888.51,1210.15 1889.1,1210.15 1889.69,1210.15 1890.27,1210.15 1890.86,1210.15 1891.45,1210.15 1892.03,1210.15 1892.62,1210.15 1893.21,1210.15 1893.79,1210.15 1894.38,1210.15 1894.96,1210.15 1895.55,1210.15 1896.14,1210.15 1896.72,1210.15 1897.31,1210.15 1897.9,1210.15 1898.48,1210.15 1899.07,1210.15 1899.66,1210.15 1900.24,1210.15 1900.83,1210.15 1901.42,1210.15 1902,1210.15 1902.59,1210.15 1903.17,1210.15 1903.76,1210.15 1904.35,1210.15 1904.93,1210.15 1905.52,1210.15 1906.11,1210.15 1906.69,1210.15 1907.28,1210.15 1907.87,1210.15 1908.45,1210.15 1909.04,1210.15 1909.63,1210.15 1910.21,1210.15 1910.8,1210.15 1911.38,1210.15 1911.97,1210.15 1912.56,1210.15 1913.14,1210.15 1913.73,1210.15 1914.32,1210.15 1914.9,1210.15 1915.49,1210.15 1916.08,1210.15 1916.66,1210.15 1917.25,1210.15 1917.83,1210.15 1918.42,1210.15 1919.01,1210.15 1919.59,1210.15 1920.18,1210.15 1920.77,1210.15 1921.35,1210.15 1921.94,1210.15 1922.53,1210.15 1923.11,1210.15 1923.7,1210.15 1924.29,1210.15 1924.87,1210.15 1925.46,1210.15 1926.04,1210.15 1926.63,1210.15 1927.22,1210.15 1927.8,1210.15 1928.39,1210.15 1928.98,1210.15 1929.56,1210.15 1930.15,1210.15 1930.74,1210.15 1931.32,1210.15 1931.91,1210.15 1932.5,1210.15 1933.08,1210.15 1933.67,1210.15 1934.25,1210.15 1934.84,1210.15 1935.43,1210.15 1936.01,1210.15 1936.6,1210.15 1937.19,1210.15 1937.77,1210.15 1938.36,1210.15 1938.95,1210.15 1939.53,1210.15 1940.12,1210.15 1940.71,1210.15 1941.29,1210.15 1941.88,1210.15 1942.46,1210.15 1943.05,1210.15 1943.64,1210.15 1944.22,1210.15 1944.81,1210.15 1945.4,1210.15 1945.98,1210.15 1946.57,1210.15 1947.16,1210.15 1947.74,1210.15 1948.33,1210.15 1948.91,1210.15 1949.5,1210.15 1950.09,1210.15 1950.67,1210.15 1951.26,1210.15 1951.85,1210.15 1952.43,1210.15 1953.02,1210.15 1953.61,1210.15 1954.19,1210.15 1954.78,1210.15 1955.37,1210.15 1955.95,1210.15 1956.54,1210.15 1957.12,1210.15 1957.71,1210.15 1958.3,1210.15 1958.88,1210.15 1959.47,1210.15 1960.06,1210.15 1960.64,1210.15 1961.23,1210.15 1961.82,1210.15 1962.4,1210.15 1962.99,1210.15 1963.58,1210.15 1964.16,1210.15 1964.75,1210.15 1965.33,1210.15 1965.92,1210.15 1966.51,1210.15 1967.09,1210.15 1967.68,1210.15 1968.27,1210.15 1968.85,1210.15 1969.44,1210.15 1970.03,1210.15 1970.61,1210.15 1971.2,1210.15 1971.78,1210.15 1972.37,1210.15 1972.96,1210.15 1973.54,1210.15 1974.13,1210.15 1974.72,1210.15 1975.3,1210.15 1975.89,1210.15 1976.48,1210.15 1977.06,1210.15 1977.65,1210.15 1978.24,1210.15 1978.82,1210.15 1979.41,1210.15 1979.99,1210.15 1980.58,1210.15 1981.17,1210.15 1981.75,1210.15 1982.34,1210.15 1982.93,1210.15 1983.51,1210.15 1984.1,1210.15 1984.69,1210.15 1985.27,1210.15 1985.86,1210.15 1986.45,1210.15 1987.03,1210.15 1987.62,1210.15 1988.2,1210.15 1988.79,1210.15 1989.38,1210.15 1989.96,1210.15 1990.55,1210.15 1991.14,1210.15 1991.72,1210.15 1992.31,1210.15 1992.9,1210.15 1993.48,1210.15 1994.07,1210.15 1994.65,1210.15 1995.24,1210.15 1995.83,1210.15 1996.41,1210.15 1997,1210.15 1997.59,1210.15 1998.17,1210.15 1998.76,1210.15 1999.35,1210.15 1999.93,1210.15 2000.52,1210.15 2001.11,1210.15 2001.69,1210.15 2002.28,1210.15 2002.86,1210.15 2003.45,1210.15 2004.04,1210.15 2004.62,1210.15 2005.21,1210.15 2005.8,1210.15 2006.38,1210.15 2006.97,1210.15 2007.56,1210.15 2008.14,1210.15 2008.73,1210.15 2009.32,1210.15 2009.9,1210.15 2010.49,1210.15 2011.07,1210.15 2011.66,1210.15 2012.25,1210.15 2012.83,1210.15 2013.42,1210.15 2014.01,1210.15 2014.59,1210.15 2015.18,1210.15 2015.77,1210.15 2016.35,1210.15 2016.94,1210.15 2017.53,1210.15 2018.11,1210.15 2018.7,1210.15 2019.28,1210.15 2019.87,1210.15 2020.46,1210.15 2021.04,1210.15 2021.63,1210.15 2022.22,1210.15 2022.8,1210.15 2023.39,1210.15 2023.98,1210.15 2024.56,1210.15 2025.15,1210.15 2025.73,1210.15 2026.32,1210.15 2026.91,1210.15 2027.49,1210.15 2028.08,1210.15 2028.67,1210.15 2029.25,1210.15 2029.84,1210.15 2030.43,1210.15 2031.01,1210.15 2031.6,1210.15 2032.19,1210.15 2032.77,1210.15 2033.36,1210.15 2033.94,1210.15 2034.53,1210.15 2035.12,1210.15 2035.7,1210.15 2036.29,1210.15 2036.88,1210.15 2037.46,1210.15 2038.05,1210.15 2038.64,1210.15 2039.22,1210.15 2039.81,1210.15 2040.4,1210.15 2040.98,1210.15 2041.57,1210.15 2042.15,1210.15 2042.74,1210.15 2043.33,1210.15 2043.91,1210.15 2044.5,1210.15 2045.09,1210.15 2045.67,1210.15 2046.26,1210.15 2046.85,1210.15 2047.43,1210.15 2048.02,1210.15 2048.6,1210.15 2049.19,1210.15 2049.78,1210.15 2050.36,1210.15 2050.95,1210.15 2051.54,1210.15 2052.12,1210.15 2052.71,1210.15 2053.3,1210.15 2053.88,1210.15 2054.47,1210.15 2055.06,1210.15 2055.64,1210.15 2056.23,1210.15 2056.81,1210.15 2057.4,1210.15 2057.99,1210.15 2058.57,1210.15 2059.16,1210.15 2059.75,1210.15 2060.33,1210.15 2060.92,1210.15 2061.51,1210.15 2062.09,1210.15 2062.68,1210.15 2063.27,1210.15 2063.85,1210.15 2064.44,1210.15 2065.02,1210.15 2065.61,1210.15 2066.2,1210.15 2066.78,1210.15 2067.37,1210.15 2067.96,1210.15 2068.54,1210.15 2069.13,1210.15 2069.72,1210.15 2070.3,1210.15 2070.89,1210.15 2071.48,1210.15 2072.06,1210.15 2072.65,1210.15 2073.23,1210.15 2073.82,1210.15 2074.41,1210.15 2074.99,1210.15 2075.58,1210.15 2076.17,1210.15 2076.75,1210.15 2077.34,1210.15 2077.93,1210.15 2078.51,1210.15 2079.1,1210.15 2079.68,1210.15 2080.27,1210.15 2080.86,1210.15 2081.44,1210.15 2082.03,1210.15 2082.62,1210.15 2083.2,1210.15 2083.79,1210.15 2084.38,1210.15 2084.96,1210.15 2085.55,1210.15 2086.14,1210.15 2086.72,1210.15 2087.31,1210.15 2087.89,1210.15 2088.48,1210.15 2089.07,1210.15 2089.65,1210.15 2090.24,1210.15 2090.83,1210.15 2091.41,1210.15 2092,1210.15 2092.59,1210.15 2093.17,1210.15 2093.76,1210.15 2094.35,1210.15 2094.93,1210.15 2095.52,1210.15 2096.1,1210.15 2096.69,1210.15 2097.28,1210.15 2097.86,1210.15 2098.45,1210.15 2099.04,1210.15 2099.62,1210.15 2100.21,1210.15 2100.8,1210.15 2101.38,1210.15 2101.97,1210.15 2102.55,1210.15 2103.14,1210.15 2103.73,1210.15 2104.31,1210.15 2104.9,1210.15 2105.49,1210.15 2106.07,1210.15 2106.66,1210.15 2107.25,1210.15 2107.83,1210.15 2108.42,1210.15 2109.01,1210.15 2109.59,1210.15 2110.18,1210.15 2110.76,1210.15 2111.35,1210.15 2111.94,1210.15 2112.52,1210.15 2113.11,1210.15 2113.7,1210.15 2114.28,1210.15 2114.87,1210.15 2115.46,1210.15 2116.04,1210.15 2116.63,1210.15 2117.22,1210.15 2117.8,1210.15 2118.39,1210.15 2118.97,1210.15 2119.56,1210.15 2120.15,1210.15 2120.73,1210.15 2121.32,1210.15 2121.91,1210.15 2122.49,1210.15 2123.08,1210.15 2123.67,1210.15 2124.25,1210.15 2124.84,1210.15 2125.42,1210.15 2126.01,1210.15 2126.6,1210.15 2127.18,1210.15 2127.77,1210.15 2128.36,1210.15 2128.94,1210.15 2129.53,1210.15 2130.12,1210.15 2130.7,1210.15 2131.29,1210.15 2131.88,1210.15 2132.46,1210.15 2133.05,1210.15 2133.63,1210.15 2134.22,1210.15 2134.81,1210.15 2135.39,1210.15 2135.98,1210.15 2136.57,1210.15 2137.15,1210.15 2137.74,1210.15 2138.33,1210.15 2138.91,1210.15 2139.5,1210.15 2140.09,1210.15 2140.67,1210.15 2141.26,1210.15 2141.84,1210.15 2142.43,1210.15 2143.02,1210.15 2143.6,1210.15 2144.19,1210.15 2144.78,1210.15 2145.36,1210.15 2145.95,1210.15 2146.54,1210.15 2147.12,1210.15 2147.71,1210.15 2148.3,1210.15 2148.88,1210.15 2149.47,1210.15 2150.05,1210.15 2150.64,1210.15 2151.23,1210.15 2151.81,1210.15 2152.4,1210.15 2152.99,1210.15 2153.57,1210.15 2154.16,1210.15 2154.75,1210.15 2155.33,1210.15 2155.92,1210.15 2156.5,1210.15 2157.09,1210.15 2157.68,1210.15 2158.26,1210.15 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.13,1190.46 1399.86,899.083 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.21 985.439,1190.46 2158.26,1190.46 2158.26,1229.21 985.439,1229.21 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip703\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip703)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2761.65 162.673,-3986.53 163.232,-5063.71 163.792,-6093.3 164.351,-6984.97 164.91,-7844.53 165.469,-8603.94 166.029,-9313.24 166.588,-8834.53 167.147,-9444.92 167.706,-9993.8 168.266,-10485.1 168.825,-10069.8 169.384,-8987.89 169.943,-8748.79 170.503,-9173.42 171.062,-8937.85 171.621,-9297.63 172.18,-9606.11 172.74,-9395.04 173.299,-9654.88 173.858,-9458.83 174.417,-9654.66 174.977,-9840.69 175.536,-10002.5 176.095,-9790.19 176.655,-9904.34 177.214,-10011.3 177.773,-9808.47 178.332,-9874.57 178.892,-9651.25 179.451,-9669.33 180.01,-9671.27 180.569,-9674.95 181.129,-9655.48 181.688,-9045.69 182.247,-8842.78 182.806,-8666.77 183.366,-8625.93 183.925,-8573.77 184.484,-8514.15 185.043,-8450.32 185.603,-8379.89 186.162,-8291.8 186.721,-8198.46 187.28,-7982.86 187.84,-7770.38 188.399,-7565.75 188.958,-7180.87 189.517,-6997.92 190.077,-6906.01 190.636,-6639.36 191.195,-6540.06 191.754,-6364.14 192.314,-6190.35 192.873,-6024.74 193.432,-5790.87 193.991,-5630.19 194.551,-5471.72 195.11,-5262.31 195.669,-5120.72 196.228,-5035.96 196.788,-4889.14 197.347,-4694.47 197.906,-4504.95 198.465,-4425 199.025,-4288.38 199.584,-4063.32 200.143,-3798.31 200.702,-3676.92 201.262,-3512.23 201.821,-3314.97 202.38,-3208.14 202.939,-3025.21 203.499,-2814.46 204.058,-2724.7 204.617,-2631.07 205.176,-2576.64 205.736,-2488.26 206.295,-2330.83 206.854,-2179.82 207.413,-2032.33 207.973,-1985.72 208.532,-1846.75 209.091,-1740.93 209.65,-1636.44 210.21,-1537.56 210.769,-1494.31 211.328,-1425.33 211.887,-1332.38 212.447,-1269.08 213.006,-1176.26 213.565,-1117.64 214.124,-1035.13 214.684,-1000.58 215.243,-919.587 215.802,-814.874 216.361,-763.157 216.921,-715.006 217.48,-663.471 218.039,-613.552 218.598,-538.122 219.158,-545.01 219.717,-518.078 220.276,-467.407 220.835,-416.234 221.395,-393.665 221.954,-280.426 222.513,-189.064 223.072,-147.08 223.632,-86.793 224.191,-5.75792 224.75,48.622 225.309,102.499 225.869,114.135 226.428,125.074 226.987,158.772 227.546,186.067 228.106,276.537 228.665,303.607 229.224,331.015 229.783,355.797 230.343,381.053 230.902,424.621 231.461,447.04 232.02,470.929 232.58,452.523 233.139,419.578 233.698,446.636 234.257,437.828 234.817,521.736 235.376,488.824 235.935,495.726 236.494,485.263 237.054,511.649 237.613,518.71 238.172,562.195 238.731,606.658 239.291,629.725 239.85,632.685 240.409,633.617 240.968,672.438 241.528,692.192 242.087,746.547 242.646,764.449 243.205,761.781 243.765,815.474 244.324,793.174 244.883,793.233 245.442,789.583 246.002,845.487 246.561,858.292 247.12,856.406 247.679,909.112 248.239,939.239 248.798,967.837 249.357,999.193 249.916,1011.39 250.476,1003.84 251.035,978.148 251.594,972.765 252.153,984.642 252.713,1011.63 253.272,1002.58 253.831,996.044 254.39,986.592 254.95,976.487 255.509,1006.83 256.068,968.559 256.627,964.869 257.187,978.997 257.746,975.293 258.305,1023.74 258.864,1049.34 259.424,1074.33 259.983,1046.32 260.542,1020.85 261.101,1011.92 261.661,1020.9 262.22,1029.11 262.779,975.493 263.338,966.483 263.898,995.671 264.457,991.431 265.016,1006.69 265.575,1001.43 266.135,1028.68 266.694,1040.71 267.253,1048.47 267.812,1056.81 268.372,1066.52 268.931,1026.68 269.49,1053.82 270.049,1015.31 270.609,1056.25 271.168,1049.43 271.727,1025.75 272.286,1002.26 272.846,1032.11 273.405,1026.49 273.964,1006.65 274.523,983.526 275.083,979.24 275.642,1008.02 276.201,1002.83 276.76,998.101 277.32,993.293 277.879,1005.54 278.438,998.022 278.997,978.393 279.557,971.938 280.116,1001.4 280.675,995.996 281.234,991.459 281.794,936.834 282.353,949.942 282.912,948.713 283.471,931.312 284.031,949.304 284.59,983.256 285.149,978.782 285.708,958.192 286.268,955.997 286.827,938.529 287.386,935.572 287.945,918.196 288.505,918.489 289.064,934.308 289.623,916.438 290.182,900.451 290.742,899.031 291.301,897.433 291.86,931.75 292.419,916.276 292.979,898.14 293.538,946.106 294.097,993.177 294.656,992.01 295.216,1021.85 295.775,1033.18 296.334,1040.2 296.893,1012.92 297.453,1039.95 298.012,1047.7 298.571,1039.87 299.13,999.705 299.69,994.409 300.249,971.267 300.808,968.41 301.368,984.323 301.927,1008.85 302.486,1034.32 303.045,1029.67 303.605,1024.01 304.164,1049.42 304.723,1025.89 305.282,1068.87 305.842,1060.92 306.401,1065.55 306.96,1054.62 307.519,1065.99 308.079,1036.76 308.638,1045.21 309.197,1050.78 309.756,1045.16 310.316,1058.05 310.875,1081.67 311.434,1068.68 311.993,1076.75 312.553,1082.04 313.112,1101.73 313.671,1138.49 314.23,1139.58 314.79,1126.94 315.349,1112.39 315.908,1096.74 316.467,1113.85 317.027,1116.85 317.586,1102.01 318.145,1091.88 318.704,1059 319.264,1048.52 319.823,1022.34 320.382,1028.12 320.941,1018.62 321.501,1008.9 322.06,986.729 322.619,961.901 323.178,942.878 323.738,917.754 324.297,896.103 324.856,826.117 325.415,876.245 325.975,876.456 326.534,889.358 327.093,870.318 327.652,899.636 328.212,895.505 328.771,944.3 329.33,942.048 329.889,952.308 330.449,947.185 331.008,924.969 331.567,919.862 332.126,902.57 332.686,897.555 333.245,862.701 333.804,845.025 334.363,831.906 334.923,867.598 335.482,883.271 336.041,914.625 336.6,895.225 337.16,924.311 337.719,950.349 338.278,942.116 338.837,1000.64 339.397,961.08 339.956,940.739 340.515,965.098 341.074,959.5 341.634,982.76 342.193,975.802 342.752,951.5 343.311,976.87 343.871,987.369 344.43,979.863 344.989,990.308 345.548,965.426 346.108,911.12 346.667,928.081 347.226,926.482 347.785,935.332 348.345,946.606 348.904,960.812 349.463,969.279 350.022,997.193 350.582,958.155 351.141,965.551 351.7,961.35 352.259,936.711 352.819,929.712 353.378,908.145 353.937,916.983 354.496,942.225 355.056,903.422 355.615,896.969 356.174,928.681 356.733,905.911 357.293,900.363 357.852,927.088 358.411,855.23 358.97,900.555 359.53,911.09 360.089,907.24 360.648,971.993 361.207,954.02 361.767,961.082 362.326,918.662 362.885,913.21 363.444,860.699 364.004,840.819 364.563,837.65 365.122,851.671 365.681,846.156 366.241,873.72 366.8,887.402 367.359,880.43 367.918,873.457 368.478,882.506 369.037,895.739 369.596,892.318 370.155,886.874 370.715,895.344 371.274,937.901 371.833,861.414 372.392,873.36 372.952,906.601 373.511,904.06 374.07,885.794 374.629,877.968 375.189,875.263 375.748,899.549 376.307,878.372 376.866,857.426 377.426,889.577 377.985,917.289 378.544,910.128 379.103,872.227 379.663,853.139 380.222,880.578 380.781,876.592 381.34,906.58 381.9,867.724 382.459,879.673 383.018,874.636 383.577,905.046 384.137,916.873 384.696,944.766 385.255,922.87 385.814,885.028 386.374,866.228 386.933,862.466 387.492,844.067 388.051,824.728 388.611,805.278 389.17,832.868 389.729,797.124 390.288,814.214 390.848,811.091 391.407,826.528 391.966,826.357 392.525,808.264 393.085,757.367 393.644,775.913 394.203,746.912 394.762,717.87 395.322,723.624 395.881,743.819 396.44,730.057 396.999,729.609 397.559,731.265 398.118,732.452 398.677,752.15 399.236,720.559 399.796,753.727 400.355,738.924 400.914,738.547 401.473,759.213 402.033,745.873 402.592,746.77 403.151,761.036 403.71,792.551 404.27,791.196 404.829,803.877 405.388,835.348 405.947,848.824 406.507,843.842 407.066,808.333 407.625,790.973 408.184,838.14 408.744,816.398 409.303,800.38 409.862,800.552 410.421,815.2 410.981,845.878 411.54,793.605 412.099,711.697 412.658,712.773 413.218,729.271 413.777,781.152 414.336,782.049 414.895,794.498 415.455,777.905 416.014,792.995 416.573,821.859 417.132,787.516 417.692,805.024 418.251,785.479 418.81,784.112 419.369,767.777 419.929,751.625 420.488,720.389 421.047,721.823 421.606,713.486 422.166,715.857 422.725,734.548 423.284,738.242 423.843,754.827 424.403,757.836 424.962,726.079 425.521,743.449 426.08,777.923 426.64,794.757 427.199,793.635 427.758,789.583 428.318,789.38 428.877,806.059 429.436,821.55 429.995,768.48 430.555,770.474 431.114,753.168 431.673,741.34 432.232,724.988 432.792,745.853 433.351,778.236 433.91,791.808 434.469,791.228 435.029,807.104 435.588,822.969 436.147,854.836 436.706,803.787 437.266,815.847 437.825,797.264 438.384,781.108 438.943,796.247 439.503,792.859 440.062,787.725 440.621,785.357 441.18,750.087 441.74,764.426 442.299,762.145 442.858,775.668 443.417,754.973 443.977,753.084 444.536,754.748 445.095,789.818 445.654,787.942 446.214,771.972 446.773,771.719 447.332,769.177 447.891,786.109 448.451,766.622 449.01,781.646 449.569,796.171 450.128,778.035 450.688,791.813 451.247,791.035 451.806,789.856 452.365,773.755 452.925,744.649 453.484,744.486 454.043,762.582 454.602,777.3 455.162,792.476 455.721,808.559 456.28,771.576 456.839,751.239 457.399,750.498 457.958,735.368 458.517,703.37 459.076,704.433 459.636,706.577 460.195,727.85 460.754,728.328 461.313,743.99 461.873,775.125 462.432,742.491 462.991,743.067 463.55,759.23 464.11,756.742 464.669,769.405 465.228,753.42 465.787,751.471 466.347,752.942 466.906,735.16 467.465,732.78 468.024,749.373 468.584,718.61 469.143,739.181 469.702,738.475 470.261,723.604 470.821,737.94 471.38,736.703 471.939,753.06 472.498,750.103 473.058,766.099 473.617,751.1 474.176,762.896 474.735,746.2 475.295,744.848 475.854,741.719 476.413,772.566 476.972,820.491 477.532,814.742 478.091,812.978 478.65,823.894 479.209,821.677 479.769,798.595 480.328,791.931 480.887,771.446 481.446,770.978 482.006,804.698 482.565,755.366 483.124,753.843 483.683,740.656 484.243,736.046 484.802,738.36 485.361,721.636 485.92,707.568 486.48,709.095 487.039,709.219 487.598,709.346 488.157,724.871 488.717,724.853 489.276,756.057 489.835,740.826 490.394,724.005 490.954,725.241 491.513,709.629 492.072,727.243 492.631,740.336 493.191,772.025 493.75,801.854 494.309,783.216 494.868,778.989 495.428,777.941 495.987,758.486 496.546,791.511 497.105,819.511 497.665,812.631 498.224,855.945 498.783,881.946 499.342,889.999 499.902,849.12 500.461,838.504 501.02,837.473 501.579,818.991 502.139,801.732 502.698,780.835 503.257,776.799 503.816,775.081 504.376,737.913 504.935,703.116 505.494,753.12 506.053,750.307 506.613,782.41 507.172,794.02 507.731,771.426 508.29,818.862 508.85,784.902 509.409,749.61 509.968,763.119 510.527,747.364 511.087,715.258 511.646,732.556 512.205,715.946 512.764,700.587 513.324,688.221 513.883,709.243 514.442,709.736 515.001,711.035 515.561,726.032 516.12,692.169 516.679,692.987 517.238,676.805 517.798,663.444 518.357,682.365 518.916,701.337 519.475,703.855 520.035,686.509 520.594,705.435 521.153,721.687 521.712,689.713 522.272,708.218 522.831,677.632 523.39,632.081 523.949,619.283 524.509,621.478 525.068,627.637 525.627,614.83 526.186,621.88 526.746,645.699 527.305,667.379 527.864,671.944 528.423,689.134 528.983,709.648 529.542,741.441 530.101,724.69 530.66,757.879 531.22,756.412 531.779,755.546 532.338,770.205 532.897,721.964 533.457,723.085 534.016,736.117 534.575,750.624 535.134,734.424 535.694,702.481 536.253,675.159 536.812,661.393 537.371,633.572 537.931,656.143 538.49,677.099 539.049,695.027 539.608,663.098 540.168,632.137 540.727,640.721 541.286,631.887 541.845,638.933 542.405,677.861 542.964,663.307 543.523,649.902 544.082,668.763 544.642,671.131 545.201,676.223 545.76,659.851 546.319,693.569 546.879,679.56 547.438,699.43 547.997,733.812 548.556,703.311 549.116,688.881 549.675,720.971 550.234,738.817 550.793,725.112 551.353,723.721 551.912,740.065 552.471,736.996 553.031,720.661 553.59,719.025 554.149,717.293 554.708,732.583 555.268,747.621 555.827,748.108 556.386,764.011 556.945,782.015 557.505,798.137 558.064,810.522 558.623,816.873 559.182,812.845 559.742,840.487 560.301,848.757 560.86,841.679 561.419,853.06 561.979,844.395 562.538,871.75 563.097,846.202 563.656,807.129 564.216,801.404 564.775,785.333 565.334,779.776 565.893,806.267 566.453,833.235 567.012,841.311 567.571,833.678 568.13,844.44 568.69,840.74 569.249,799.375 569.808,796.644 570.367,775.004 570.927,755.091 571.486,788.019 572.045,815.82 572.604,807.17 573.164,833.076 573.723,841.775 574.282,852.391 574.841,845.655 575.401,821.467 575.96,785.479 576.519,766.102 577.078,745.015 577.638,771.834 578.197,754.942 578.756,765.989 579.315,760.448 579.875,805.663 580.434,769.608 580.993,767.337 581.552,745.262 582.112,773.39 582.671,738.69 583.23,721.415 583.789,718.97 584.349,701.63 584.908,718.15 585.467,684.518 586.026,700 586.586,697.289 587.145,696.232 587.704,678.779 588.263,678.201 588.823,663.933 589.382,648.632 589.941,668.029 590.5,669.547 591.06,652.669 591.619,644.571 592.178,614.962 592.737,606.298 593.297,577.008 593.856,518.258 594.415,513.554 594.974,488.959 595.534,515.391 596.093,543.315 596.652,586.247 597.211,595.856 597.771,618.147 598.33,639.132 598.889,642.668 599.448,661.582 600.008,648.071 600.567,632.188 601.126,670.685 601.685,673.615 602.245,661.86 602.804,664.159 603.363,662.923 603.922,681.656 604.482,680.948 605.041,680.248 605.6,710.822 606.159,713.018 606.719,725.802 607.278,741.3 607.837,738.263 608.396,751.534 608.956,731.682 609.515,716.982 610.074,700.648 610.633,732.789 611.193,746.256 611.752,711.292 612.311,711.17 612.87,676.703 613.43,662.89 613.989,679.879 614.548,683.439 615.107,652.851 615.667,658.007 616.226,644.142 616.785,615.431 617.344,634.47 617.904,670.14 618.463,657.288 619.022,677.712 619.581,659.984 620.141,648.756 620.7,653.217 621.259,639.752 621.818,662.586 622.378,730.598 622.937,750.259 623.496,747.173 624.055,742.508 624.615,742.139 625.174,743.428 625.733,738.252 626.292,766.11 626.852,798.685 627.411,810.008 627.97,803.484 628.529,813.848 629.089,776.904 629.648,819.202 630.207,863.298 630.766,857.218 631.326,849.57 631.885,839.722 632.444,852.248 633.003,859.285 633.563,850.448 634.122,828.752 634.681,809.911 635.24,819.189 635.8,796.229 636.359,788.498 636.918,784.015 637.477,796.692 638.037,745.317 638.596,761.718 639.155,756.606 639.714,751.356 640.274,700.233 640.833,681.542 641.392,670.907 641.951,644.307 642.511,664.407 643.07,715.375 643.629,731.27 644.188,713.102 644.748,746.227 645.307,778.264 645.866,758.626 646.425,751.227 646.985,748.121 647.544,748.189 648.103,761.087 648.662,743.817 649.222,738.509 649.781,736.395 650.34,718.051 650.899,748.32 651.459,729.158 652.018,728.782 652.577,728.259 653.136,691.785 653.696,720.831 654.255,719.384 654.814,730.957 655.373,743.782 655.933,772.201 656.492,765.826 657.051,794.277 657.61,789.736 658.17,814.841 658.729,808.023 659.288,755.891 659.847,751.378 660.407,731.805 660.966,698.63 661.525,729.816 662.084,740.087 662.644,718.11 663.203,748.005 663.762,763.186 664.321,775.694 664.881,753.188 665.44,747.338 665.999,756.101 666.558,768.597 667.118,768.338 667.677,712.136 668.236,723.433 668.795,739.31 669.355,734.509 669.914,782.546 670.473,761.836 671.032,757.17 671.592,720.744 672.151,703.823 672.71,720.98 673.269,705.278 673.829,701.677 674.388,699.964 674.947,716.041 675.506,713.98 676.066,712.788 676.625,713.01 677.184,742.253 677.743,723.682 678.303,689.393 678.862,692.488 679.421,643.265 679.981,663.057 680.54,648.591 681.099,652.235 681.658,639.978 682.218,658.417 682.777,662.075 683.336,615.122 683.895,617.585 684.455,653.02 685.014,657.17 685.573,663.824 686.132,696.513 686.692,697.851 687.251,731.067 687.81,714.844 688.369,731.071 688.929,695.67 689.488,725.412 690.047,722.071 690.606,690.321 691.166,689.103 691.725,691.785 692.284,694.567 692.843,665.559 693.403,664.91 693.962,667.054 694.521,667.895 695.08,672.758 695.64,658.433 696.199,630.787 696.758,633.354 697.317,616.187 697.877,651.777 698.436,637.117 698.995,635.751 699.554,620.996 700.114,593.003 700.673,616.539 701.232,619.226 701.791,619.997 702.351,654.99 702.91,610.195 703.469,619.301 704.028,605.984 704.588,608.497 705.147,660.234 705.706,681.712 706.265,679.476 706.825,647.284 707.384,651.971 707.943,652.288 708.502,656.394 709.062,675.235 709.621,709.685 710.18,738.531 710.739,721.803 711.299,726.079 711.858,741.122 712.417,743.399 712.976,757.484 713.536,751.97 714.095,751.651 714.654,733.307 715.213,718.798 715.773,731.159 716.332,773.261 716.891,768.459 717.45,780.273 718.01,761.757 718.569,758.138 719.128,752.475 719.687,763.652 720.247,775.48 720.806,757.302 721.365,782.46 721.924,713.518 722.484,757.949 723.043,756.817 723.602,705.462 724.161,721.789 724.721,751.367 725.28,717.841 725.839,703.408 726.398,705.205 726.958,753.216 727.517,752.104 728.076,750.168 728.635,748.203 729.195,759.939 729.754,776.711 730.313,737.516 730.872,713.369 731.432,697.82 731.991,697.447 732.55,662.671 733.109,667.505 733.669,666.999 734.228,680.814 734.787,715.835 735.346,714.784 735.906,698.623 736.465,682.899 737.024,683.502 737.583,700.065 738.143,715.135 738.702,711.94 739.261,758.018 739.82,741.842 740.38,755.11 740.939,769.264 741.498,752.312 742.057,700.557 742.617,715.675 743.176,731.636 743.735,715.152 744.294,727.601 744.854,724.548 745.413,737.013 745.972,699.409 746.531,668.488 747.091,671.072 747.65,637.467 748.209,640.207 748.768,645.377 749.328,617.783 749.887,588.082 750.446,611.794 751.005,597.749 751.565,617.509 752.124,636.79 752.683,624.17 753.242,609.242 753.802,631.097 754.361,665.63 754.92,653.246 755.479,669.042 756.039,653.692 756.598,685.153 757.157,684.638 757.716,650.147 758.276,621.953 758.835,608.758 759.394,613.915 759.953,618.454 760.513,590.469 761.072,581.541 761.631,571.09 762.19,596.743 762.75,587.075 763.309,543.041 763.868,565.21 764.427,555.749 764.987,562.93 765.546,552.292 766.105,541.072 766.664,534.207 767.224,524.329 767.783,549.158 768.342,576.842 768.901,600.283 769.461,576.451 770.02,596.778 770.579,630.845 771.138,663.954 771.698,685.656 772.257,684.917 772.816,719.72 773.375,739.679 773.935,722.164 774.494,742.076 775.053,720.126 775.612,718.81 776.172,751.44 776.731,783.267 777.29,780.029 777.849,792.338 778.409,806.19 778.968,786.314 779.527,779.925 780.086,760.795 780.646,788.192 781.205,798.623 781.764,791.216 782.323,802.553 782.883,814.739 783.442,823.404 784.001,828.337 784.56,805.748 785.12,845.576 785.679,838.413 786.238,832.607 786.797,809.439 787.357,806.464 787.916,802.356 788.475,813.011 789.034,819.34 789.594,813.445 790.153,756.398 790.712,769.904 791.271,712.945 791.831,695.834 792.39,667.481 792.949,669.161 793.508,619.759 794.068,622.12 794.627,609.865 795.186,597.888 795.745,603.832 796.305,622.112 796.864,626.297 797.423,632.733 797.982,604.77 798.542,607.283 799.101,627.721 799.66,629.96 800.219,617.654 800.779,620.813 801.338,604.597 801.897,606.126 802.456,608.766 803.016,596.058 803.575,634.601 804.134,638.915 804.693,626.367 805.253,633.328 805.812,622.763 806.371,627.378 806.931,628.37 807.49,646.819 808.049,666.759 808.608,637.349 809.168,608.389 809.727,613.1 810.286,599.879 810.845,605.498 811.405,592.315 811.964,583.241 812.523,585.729 813.082,580.159 813.642,606.03 814.201,644.991 814.76,683.826 815.319,714.791 815.879,698.61 816.438,746.885 816.997,743.401 817.556,757.869 818.116,788.962 818.675,769.047 819.234,781.065 819.793,796.819 820.353,808.268 820.912,782.252 821.471,778.499 822.03,755.546 822.59,753.156 823.149,716.829 823.708,699.626 824.267,697.591 824.827,697.045 825.386,696.961 825.945,697.38 826.504,712.225 827.064,713.146 827.623,714.035 828.182,665.934 828.741,649.453 829.301,604.001 829.86,593.016 830.419,567.943 830.978,592.326 831.538,594.036 832.097,614.155 832.656,650.444 833.215,637.137 833.775,642.319 834.334,647.434 834.893,668.343 835.452,685.69 836.012,686.408 836.571,685.553 837.13,702.684 837.689,701.225 838.249,748.601 838.808,760.144 839.367,741.555 839.926,735.432 840.486,747.768 841.045,760.482 841.604,742.754 842.163,743.395 842.723,774.089 843.282,754.314 843.841,718.918 844.4,748.038 844.96,731.062 845.519,712.152 846.078,695.436 846.637,693.777 847.197,678.708 847.756,694.495 848.315,676.025 848.874,695.451 849.434,694.095 849.993,711.376 850.552,708.999 851.111,726.092 851.671,709.031 852.23,707.842 852.789,704.259 853.348,718.42 853.908,716.676 854.467,747.742 855.026,731.375 855.585,729.518 856.145,728.993 856.704,725.737 857.263,757.994 857.822,757.309 858.382,722.917 858.941,720.514 859.5,698.512 860.059,681.604 860.619,699.017 861.178,680.779 861.737,679.913 862.296,663.656 862.856,664.765 863.415,667.174 863.974,669.324 864.533,673.694 865.093,661.607 865.652,665.014 866.211,648.118 866.77,616.792 867.33,635.893 867.889,640.63 868.448,641.148 869.007,642.49 869.567,642.48 870.126,677.102 870.685,692.713 871.244,691.223 871.804,673.232 872.363,675.199 872.922,695.753 873.481,677.252 874.041,711.286 874.6,679.479 875.159,694.791 875.718,696.033 876.278,697.894 876.837,710.632 877.396,706.55 877.955,723.825 878.515,690.572 879.074,689.933 879.633,675.011 880.192,660.702 880.752,646.339 881.311,631.957 881.87,636.369 882.429,669.913 882.989,671.141 883.548,675.138 884.107,689.037 884.666,718.566 885.226,703.947 885.785,688.441 886.344,721.982 886.903,720.344 887.463,668.108 888.022,666.877 888.581,652.234 889.14,686.503 889.7,686.513 890.259,718.345 890.818,719.238 891.377,703.79 891.937,731.667 892.496,731.668 893.055,746.47 893.614,727.901 894.174,742.271 894.733,721.397 895.292,718.591 895.851,715.244 896.411,778.373 896.97,740.875 897.529,724.699 898.088,739.887 898.648,719.122 899.207,732.26 899.766,744.791 900.325,756.717 900.885,770.834 901.444,783.989 902.003,843.857 902.562,868.483 903.122,874.147 903.681,817.424 904.24,826.716 904.799,832.933 905.359,827.551 905.918,851.658 906.477,792.436 907.036,804.633 907.596,795.953 908.155,758.035 908.714,738.272 909.273,733.962 909.833,682.644 910.392,645.993 910.951,648.154 911.51,648.857 912.07,681.701 912.629,713.142 913.188,744.014 913.747,722.574 914.307,734.931 914.866,764.184 915.425,762.188 915.984,773.365 916.544,750.889 917.103,714.66 917.662,698.447 918.221,698.931 918.781,727.947 919.34,678.717 919.899,662.03 920.458,648.586 921.018,651.255 921.577,651.505 922.136,659.56 922.695,677.634 923.255,658.519 923.814,625.13 924.373,628.5 924.932,647.532 925.492,679.056 926.051,648.577 926.61,619.759 927.169,623.659 927.729,627.605 928.288,612.709 928.847,612.586 929.406,650.015 929.966,686.045 930.525,685.26 931.084,702.679 931.644,701.063 932.203,720.856 932.762,720.092 933.321,718.708 933.881,679.78 934.44,649.458 934.999,667.277 935.558,685.263 936.118,647.956 936.677,618.363 937.236,670.562 937.795,669.54 938.355,637.491 938.914,589.846 939.473,611.64 940.032,615.447 940.592,620.741 941.151,626.072 941.71,615.586 942.269,602.379 942.829,623.934 943.388,610.406 943.947,613.785 944.506,620.743 945.066,610.612 945.625,616.214 946.184,652.549 946.743,658.95 947.303,674.506 947.862,657.585 948.421,658.847 948.98,643.349 949.54,644.827 950.099,647.018 950.658,635.793 951.217,609.582 951.777,596.52 952.336,620.356 952.895,610.94 953.454,646.764 954.014,665.054 954.573,685.526 955.132,715.304 955.691,699.292 956.251,700.84 956.81,737.933 957.369,750.73 957.928,762.511 958.488,745.176 959.047,709.586 959.606,678.136 960.165,693.287 960.725,693.792 961.284,711.667 961.843,710.41 962.402,708.993 962.962,724.439 963.521,722.615 964.08,751.871 964.639,732.151 965.199,725.866 965.758,726.025 966.317,723.466 966.876,736.506 967.436,749.33 967.995,716.166 968.554,715.948 969.113,719.04 969.673,766.292 970.232,765.028 970.791,778.81 971.35,776.207 971.91,771.79 972.469,782.037 973.028,795.87 973.587,743.593 974.147,768.362 974.706,764.491 975.265,759.794 975.824,739.242 976.384,736.283 976.943,702.676 977.502,669.576 978.061,671.552 978.621,672.571 979.18,676.303 979.739,677.197 980.298,646.848 980.858,635.479 981.417,621.004 981.976,637.527 982.535,657.168 983.095,661.179 983.654,649.501 984.213,636.015 984.772,639.082 985.332,623.105 985.891,626.809 986.45,658.881 987.009,663.624 987.569,649.435 988.128,664.557 988.687,651.903 989.246,686.8 989.806,688.15 990.365,687.493 990.924,702.187 991.483,667.767 992.043,668.293 992.602,637.259 993.161,624.244 993.72,611.492 994.28,617.217 994.839,569.86 995.398,575.441 995.957,582.692 996.517,587.744 997.076,575.211 997.635,578.031 998.194,566.897 998.754,573.232 999.313,561.19 999.872,550.08 1000.43,540.341 1000.99,531.234 1001.55,557.551 1002.11,562.939 1002.67,582.343 1003.23,588.478 1003.79,628.305 1004.35,629.013 1004.91,614.551 1005.46,651.759 1006.02,653.993 1006.58,669.664 1007.14,653.235 1007.7,640.143 1008.26,657.845 1008.82,674.655 1009.38,659.69 1009.94,656.597 1010.5,642.729 1011.06,645.195 1011.62,647.199 1012.18,680.86 1012.73,713.131 1013.29,725.509 1013.85,709.691 1014.41,673.629 1014.97,643.562 1015.53,643.736 1016.09,663.251 1016.65,660.961 1017.21,676.689 1017.77,644.908 1018.33,649.078 1018.89,623.337 1019.45,662.143 1020.01,661.773 1020.56,645.893 1021.12,653.072 1021.68,668.867 1022.24,685.891 1022.8,688.541 1023.36,737.166 1023.92,719.314 1024.48,747.959 1025.04,744.962 1025.6,738.963 1026.16,751.252 1026.72,735.552 1027.28,698.293 1027.83,698.218 1028.39,664.257 1028.95,648.217 1029.51,636.596 1030.07,602.315 1030.63,627.356 1031.19,648.42 1031.75,633.251 1032.31,654.629 1032.87,655.489 1033.43,671.823 1033.99,657.745 1034.55,659.707 1035.1,647.35 1035.66,667.142 1036.22,664.437 1036.78,631.23 1037.34,633.17 1037.9,651.803 1038.46,656.1 1039.02,656.213 1039.58,642.708 1040.14,647.226 1040.7,645.05 1041.26,665.489 1041.82,664.075 1042.38,682.995 1042.93,699.001 1043.49,670.524 1044.05,652.404 1044.61,670.485 1045.17,687.593 1045.73,652.948 1046.29,689.001 1046.85,692.793 1047.41,691.748 1047.97,673.673 1048.53,688.312 1049.09,738.138 1049.65,768.797 1050.2,762.503 1050.76,760.111 1051.32,753.738 1051.88,748.817 1052.44,747.069 1053,762.897 1053.56,747.871 1054.12,760.508 1054.68,755.5 1055.24,750.885 1055.8,745.355 1056.36,728.127 1056.92,727.943 1057.48,690.546 1058.03,721.396 1058.59,701.672 1059.15,681.225 1059.71,679.369 1060.27,663.149 1060.83,663.735 1061.39,662.479 1061.95,678.53 1062.51,679.679 1063.07,651.658 1063.63,654.424 1064.19,623.94 1064.75,594.26 1065.3,581.777 1065.86,605.381 1066.42,590.469 1066.98,595.347 1067.54,614.78 1068.1,621.751 1068.66,625.74 1069.22,645.358 1069.78,646.662 1070.34,646.167 1070.9,632.817 1071.46,635.536 1072.02,654.784 1072.57,654.156 1073.13,624.943 1073.69,612.658 1074.25,651.382 1074.81,685.276 1075.37,689.8 1075.93,720.744 1076.49,718.069 1077.05,752.096 1077.61,750.601 1078.17,762.06 1078.73,776.405 1079.29,786.189 1079.85,797.17 1080.4,829.458 1080.96,823.421 1081.52,833.663 1082.08,808.253 1082.64,802.265 1083.2,768.559 1083.76,728.735 1084.32,727.715 1084.88,739.371 1085.44,753.139 1086,702.197 1086.56,698.427 1087.12,712.684 1087.67,691.768 1088.23,692.525 1088.79,725.734 1089.35,721.887 1089.91,720.702 1090.47,716.257 1091.03,731.218 1091.59,711.432 1092.15,695.309 1092.71,659.457 1093.27,661.456 1093.83,670.372 1094.39,684.513 1094.94,701.76 1095.5,718.375 1096.06,746.92 1096.62,731.06 1097.18,729.109 1097.74,710.313 1098.3,724.953 1098.86,707.663 1099.42,709.719 1099.98,708.765 1100.54,755.673 1101.1,738.2 1101.66,767.088 1102.22,796.473 1102.77,773.361 1103.33,798.561 1103.89,779.03 1104.45,770.322 1105.01,749.261 1105.57,712.941 1106.13,679.29 1106.69,648.472 1107.25,652.661 1107.81,673.767 1108.37,675.81 1108.93,662.385 1109.49,646.967 1110.04,648.373 1110.6,634.887 1111.16,657.657 1111.72,609.661 1112.28,629.364 1112.84,632.147 1113.4,620.017 1113.96,672.182 1114.52,689.158 1115.08,689.911 1115.64,723.419 1116.2,752.262 1116.76,780.165 1117.31,803.867 1117.87,782.724 1118.43,781.251 1118.99,777.102 1119.55,789.932 1120.11,782.639 1120.67,761.623 1121.23,740.424 1121.79,737.49 1122.35,718.686 1122.91,683.248 1123.47,653.834 1124.03,641.08 1124.59,624.546 1125.14,627.203 1125.7,599.21 1126.26,605.543 1126.82,592.343 1127.38,578.211 1127.94,598.584 1128.5,603.318 1129.06,593.416 1129.62,611.176 1130.18,613.427 1130.74,557.678 1131.3,548.872 1131.86,573.639 1132.41,591.509 1132.97,599.432 1133.53,602.298 1134.09,611.639 1134.65,616.597 1135.21,620.887 1135.77,605.553 1136.33,609.631 1136.89,629.78 1137.45,632.279 1138.01,617.727 1138.57,602.979 1139.13,590.998 1139.68,576.088 1140.24,581.076 1140.8,613.471 1141.36,616.257 1141.92,619.901 1142.48,638.736 1143.04,640.581 1143.6,644.836 1144.16,645.275 1144.72,645.499 1145.28,665.255 1145.84,648.296 1146.4,666.917 1146.96,714.1 1147.51,713.044 1148.07,648.536 1148.63,650.749 1149.19,653.813 1149.75,671.409 1150.31,673.667 1150.87,721.44 1151.43,718.734 1151.99,719.844 1152.55,719.865 1153.11,747.682 1153.67,745.899 1154.23,744.032 1154.78,725.202 1155.34,710.84 1155.9,707.957 1156.46,709.212 1157.02,694.336 1157.58,692.474 1158.14,708.61 1158.7,723.962 1159.26,719.821 1159.82,735.445 1160.38,746.594 1160.94,739.962 1161.5,727.023 1162.05,724.66 1162.61,725.248 1163.17,655.683 1163.73,643.816 1164.29,611.683 1164.85,680.851 1165.41,682.808 1165.97,714.984 1166.53,709.407 1167.09,736.479 1167.65,750.644 1168.21,730.309 1168.77,730.06 1169.33,741.596 1169.88,742.565 1170.44,724.256 1171,721.77 1171.56,705.943 1172.12,681.412 1172.68,681.991 1173.24,715.029 1173.8,715.908 1174.36,749.289 1174.92,762.17 1175.48,693.879 1176.04,722.806 1176.6,702.681 1177.15,702.234 1177.71,699.163 1178.27,713.947 1178.83,678.101 1179.39,645.045 1179.95,645.166 1180.51,647.504 1181.07,680.103 1181.63,695.376 1182.19,692.583 1182.75,693.281 1183.31,725.398 1183.87,773.181 1184.43,767.346 1184.98,796.658 1185.54,774.269 1186.1,768.896 1186.66,745.285 1187.22,711.073 1187.78,692.735 1188.34,675.035 1188.9,692.097 1189.46,679.156 1190.02,679.985 1190.58,680.199 1191.14,699.628 1191.7,697.065 1192.25,711 1192.81,710.531 1193.37,693.254 1193.93,660.376 1194.49,645.807 1195.05,681.346 1195.61,729.296 1196.17,744.534 1196.73,739.969 1197.29,706.029 1197.85,754.807 1198.41,755.5 1198.97,784.954 1199.52,783.688 1200.08,727.925 1200.64,742.627 1201.2,741.028 1201.76,740.857 1202.32,739.557 1202.88,738.858 1203.44,702.314 1204,701.159 1204.56,650.853 1205.12,652.235 1205.68,639.467 1206.24,658.266 1206.8,676.653 1207.35,679.658 1207.91,632.656 1208.47,617.209 1209.03,605.942 1209.59,612.039 1210.15,616.59 1210.71,638.714 1211.27,636.933 1211.83,572.973 1212.39,613.111 1212.95,619.547 1213.51,660.108 1214.07,644.581 1214.62,631.143 1215.18,649.753 1215.74,668.058 1216.3,603.867 1216.86,611.591 1217.42,617.95 1217.98,618.275 1218.54,606.122 1219.1,609.419 1219.66,597.413 1220.22,602.033 1220.78,575.534 1221.34,581.143 1221.89,618.576 1222.45,639.704 1223.01,639.475 1223.57,639.803 1224.13,623.658 1224.69,630.796 1225.25,632.634 1225.81,621.116 1226.37,639.705 1226.93,606.888 1227.49,594.661 1228.05,569.256 1228.61,578.361 1229.17,647.795 1229.72,666.879 1230.28,667.935 1230.84,703.108 1231.4,689.238 1231.96,720.821 1232.52,705.379 1233.08,702.812 1233.64,702.316 1234.2,682.935 1234.76,697.216 1235.32,679.141 1235.88,697.264 1236.44,698.492 1236.99,709.399 1237.55,738.351 1238.11,703.227 1238.67,719.138 1239.23,686.312 1239.79,703.554 1240.35,685.469 1240.91,671.001 1241.47,686.062 1242.03,699.89 1242.59,699.149 1243.15,694.822 1243.71,709.096 1244.26,707.146 1244.82,703.278 1245.38,701.767 1245.94,687.489 1246.5,672.647 1247.06,687.34 1247.62,672.114 1248.18,690.883 1248.74,674.733 1249.3,692.533 1249.86,690.581 1250.42,658.618 1250.98,658.714 1251.54,644.727 1252.09,614.367 1252.65,651.234 1253.21,667.858 1253.77,670.478 1254.33,654.14 1254.89,653.418 1255.45,636.767 1256.01,642.324 1256.57,627.023 1257.13,643.396 1257.69,625.784 1258.25,642.009 1258.81,645.63 1259.36,631.476 1259.92,632.611 1260.48,656.05 1261.04,659.087 1261.6,612.828 1262.16,617.754 1262.72,603.731 1263.28,608.528 1263.84,632.164 1264.4,631.215 1264.96,620.903 1265.52,638.839 1266.08,674.442 1266.63,657.029 1267.19,656.39 1267.75,625.666 1268.31,658.829 1268.87,690.365 1269.43,689.842 1269.99,688.746 1270.55,704.676 1271.11,683.151 1271.67,697.103 1272.23,695.429 1272.79,728.89 1273.35,742.509 1273.91,742.22 1274.46,720.294 1275.02,686.481 1275.58,686.444 1276.14,702.996 1276.7,700.104 1277.26,683.882 1277.82,715.239 1278.38,729.659 1278.94,726.129 1279.5,744.437 1280.06,738.83 1280.62,752.313 1281.18,763.621 1281.73,758.535 1282.29,735.257 1282.85,681.677 1283.41,666.004 1283.97,695.962 1284.53,691.158 1285.09,690.408 1285.65,670.645 1286.21,705.593 1286.77,685.281 1287.33,699.866 1287.89,666.789 1288.45,684.341 1289,703.52 1289.56,700.069 1290.12,702.064 1290.68,715.925 1291.24,699.444 1291.8,699.972 1292.36,697.589 1292.92,663.072 1293.48,665.915 1294.04,663.966 1294.6,664.095 1295.16,666.339 1295.72,695.726 1296.28,714.413 1296.83,710.005 1297.39,691.238 1297.95,641.61 1298.51,659.683 1299.07,663.867 1299.63,694.973 1300.19,710.628 1300.75,709.666 1301.31,676.163 1301.87,692.596 1302.43,695.27 1302.99,696.557 1303.55,695.565 1304.1,695.921 1304.66,664.743 1305.22,675.823 1305.78,678.598 1306.34,681.137 1306.9,649.965 1307.46,635.091 1308.02,639.493 1308.58,658.784 1309.14,626.509 1309.7,613.721 1310.26,648.452 1310.82,650.422 1311.38,681.183 1311.93,681.683 1312.49,681.098 1313.05,664.468 1313.61,663.12 1314.17,698.411 1314.73,715.811 1315.29,725.776 1315.85,738.003 1316.41,736.221 1316.97,734.452 1317.53,731.206 1318.09,697.188 1318.65,743.344 1319.2,722.813 1319.76,766.198 1320.32,761.399 1320.88,724.834 1321.44,708.044 1322,736.885 1322.56,750.314 1323.12,727.495 1323.68,709.309 1324.24,756.687 1324.8,752.282 1325.36,747.788 1325.92,743.941 1326.47,771.297 1327.03,766.717 1327.59,712.029 1328.15,692.454 1328.71,710.562 1329.27,710.468 1329.83,725.783 1330.39,758.069 1330.95,722.159 1331.51,734.389 1332.07,713.054 1332.63,708.538 1333.19,687.75 1333.75,703.746 1334.3,717.187 1334.86,746.848 1335.42,726.668 1335.98,688.554 1336.54,688.674 1337.1,670.516 1337.66,687.736 1338.22,685.842 1338.78,687.46 1339.34,687.18 1339.9,619.091 1340.46,603.077 1341.02,624.081 1341.57,627.937 1342.13,662.485 1342.69,631.421 1343.25,634.182 1343.81,636.675 1344.37,641.719 1344.93,644.13 1345.49,679.951 1346.05,695.266 1346.61,716.958 1347.17,728.589 1347.73,726.137 1348.29,707.056 1348.84,691.19 1349.4,657.93 1349.96,659.17 1350.52,676.873 1351.08,756.162 1351.64,752.953 1352.2,714.6 1352.76,726.398 1353.32,755.658 1353.88,699.894 1354.44,698.023 1355,682.678 1355.56,685.375 1356.12,685.669 1356.67,699.693 1357.23,730.254 1357.79,762.294 1358.35,692.091 1358.91,691.73 1359.47,706.104 1360.03,706.051 1360.59,720.652 1361.15,765.261 1361.71,748.045 1362.27,697.392 1362.83,700.11 1363.39,669.97 1363.94,656.09 1364.5,640.984 1365.06,628.839 1365.62,650.184 1366.18,650.906 1366.74,670.267 1367.3,670.102 1367.86,686.811 1368.42,688.551 1368.98,636.902 1369.54,670.183 1370.1,675.225 1370.66,692.444 1371.21,676.246 1371.77,660.402 1372.33,670.589 1372.89,705.741 1373.45,706.115 1374.01,706.122 1374.57,703.643 1375.13,684.819 1375.69,700.864 1376.25,750.356 1376.81,782.123 1377.37,760.451 1377.93,771.411 1378.49,750.343 1379.04,747.379 1379.6,761.324 1380.16,739.995 1380.72,751.352 1381.28,796.242 1381.84,774.85 1382.4,770.159 1382.96,731.651 1383.52,711.989 1384.08,694.475 1384.64,693.009 1385.2,676.039 1385.76,678.109 1386.31,692.413 1386.87,725.577 1387.43,694.253 1387.99,657.863 1388.55,642.41 1389.11,627.055 1389.67,646.637 1390.23,645.928 1390.79,616.795 1391.35,572.917 1391.91,579.038 1392.47,602.866 1393.03,606.525 1393.58,604.505 1394.14,622.728 1394.7,576.273 1395.26,577.637 1395.82,568.085 1396.38,555.207 1396.94,582.657 1397.5,593.275 1398.06,596.239 1398.62,600.473 1399.18,588.491 1399.74,597.187 1400.3,604.306 1400.86,613.124 1401.41,620.377 1401.97,623.333 1402.53,639.926 1403.09,625.219 1403.65,628.056 1404.21,632.953 1404.77,652.105 1405.33,673.965 1405.89,675.243 1406.45,660.658 1407.01,661.431 1407.57,649.808 1408.13,667.061 1408.68,665.24 1409.24,669.123 1409.8,672.258 1410.36,687.601 1410.92,701.396 1411.48,682.689 1412.04,666.85 1412.6,652.261 1413.16,655.416 1413.72,671.418 1414.28,689.998 1414.84,706.311 1415.4,688.508 1415.95,705.559 1416.51,690.284 1417.07,709.708 1417.63,742.7 1418.19,743.123 1418.75,737.682 1419.31,720.483 1419.87,733.527 1420.43,744.348 1420.99,743.846 1421.55,744.628 1422.11,755.84 1422.67,753.767 1423.23,761.812 1423.78,774.183 1424.34,736.133 1424.9,714.891 1425.46,677.695 1426.02,724.962 1426.58,707.496 1427.14,754.15 1427.7,767.394 1428.26,759.938 1428.82,802.22 1429.38,781.344 1429.94,803.832 1430.5,817.429 1431.05,822.796 1431.61,835.724 1432.17,843.613 1432.73,803.681 1433.29,732.376 1433.85,713.572 1434.41,730.728 1434.97,728.515 1435.53,711.67 1436.09,722.18 1436.65,701.693 1437.21,699.813 1437.77,667.014 1438.33,649.115 1438.88,666.867 1439.44,667.356 1440,684.069 1440.56,667.231 1441.12,637.688 1441.68,637.894 1442.24,639.201 1442.8,642.701 1443.36,645.337 1443.92,651.908 1444.48,620.622 1445.04,621.919 1445.6,608.316 1446.15,614.489 1446.71,619.946 1447.27,590.463 1447.83,579.672 1448.39,630.089 1448.95,601.874 1449.51,608.014 1450.07,612.785 1450.63,634.514 1451.19,632.657 1451.75,633.816 1452.31,669.467 1452.87,668.29 1453.42,672.029 1453.98,691.287 1454.54,690.962 1455.1,673.149 1455.66,691.123 1456.22,691.682 1456.78,642.955 1457.34,639.601 1457.9,655.439 1458.46,672.809 1459.02,692.635 1459.58,673.752 1460.14,692.626 1460.7,672.716 1461.25,685.789 1461.81,670.16 1462.37,638.358 1462.93,671.635 1463.49,671.44 1464.05,686.451 1464.61,689.069 1465.17,707.511 1465.73,705.1 1466.29,671.042 1466.85,686.844 1467.41,700.763 1467.97,704.568 1468.52,733.484 1469.08,749.089 1469.64,713.913 1470.2,728.52 1470.76,711.21 1471.32,665.766 1471.88,684.661 1472.44,684.019 1473,714.602 1473.56,760.023 1474.12,770.948 1474.68,735.704 1475.24,748.049 1475.79,773.324 1476.35,767.655 1476.91,765.469 1477.47,760.938 1478.03,758.41 1478.59,754.221 1479.15,749.977 1479.71,762.347 1480.27,724.605 1480.83,723.313 1481.39,677.253 1481.95,646.976 1482.51,615.442 1483.07,649.361 1483.62,653.198 1484.18,652.958 1484.74,642.603 1485.3,644.45 1485.86,632.598 1486.42,667.628 1486.98,651.472 1487.54,636.585 1488.1,655.009 1488.66,626.582 1489.22,632.881 1489.78,620.685 1490.34,625.669 1490.89,629.959 1491.45,617.797 1492.01,655.157 1492.57,718.687 1493.13,729.471 1493.69,729.573 1494.25,727.199 1494.81,742.101 1495.37,751.904 1495.93,732.122 1496.49,714.375 1497.05,711.649 1497.61,705.359 1498.16,684.013 1498.72,699.17 1499.28,704.766 1499.84,703.551 1500.4,684.547 1500.96,682.418 1501.52,683.644 1502.08,683.646 1502.64,671.13 1503.2,667.758 1503.76,686.437 1504.32,703.402 1504.88,684.913 1505.44,653.431 1505.99,684.785 1506.55,702.061 1507.11,715.67 1507.67,716.444 1508.23,699.745 1508.79,698.882 1509.35,684.492 1509.91,700.928 1510.47,685.829 1511.03,654.876 1511.59,658.548 1512.15,658.916 1512.71,689.578 1513.26,706.262 1513.82,702.576 1514.38,716.419 1514.94,650.652 1515.5,667.417 1516.06,666.97 1516.62,585.407 1517.18,592.416 1517.74,582.844 1518.3,536.631 1518.86,559.703 1519.42,565.718 1519.98,604.2 1520.53,640.997 1521.09,644.604 1521.65,645.706 1522.21,646.545 1522.77,602.207 1523.33,605.19 1523.89,644.251 1524.45,651.461 1525.01,655.753 1525.57,657.123 1526.13,659.602 1526.69,645.292 1527.25,666.057 1527.81,715.445 1528.36,712.556 1528.92,694.587 1529.48,710.315 1530.04,723.675 1530.6,740.244 1531.16,768.673 1531.72,764.317 1532.28,759.397 1532.84,721.97 1533.4,724.407 1533.96,740.562 1534.52,707.451 1535.08,677.6 1535.63,676.23 1536.19,647.094 1536.75,635.775 1537.31,637.987 1537.87,625.658 1538.43,630.53 1538.99,620.453 1539.55,607.939 1540.11,609.893 1540.67,615.087 1541.23,601.149 1541.79,620.786 1542.35,609.235 1542.9,632.218 1543.46,604.832 1544.02,641.735 1544.58,659.576 1545.14,642.936 1545.7,662.113 1546.26,680.131 1546.82,696.917 1547.38,665.775 1547.94,651.382 1548.5,652.332 1549.06,639.347 1549.62,623.095 1550.18,624.232 1550.73,627.913 1551.29,632.12 1551.85,634.977 1552.41,637.351 1552.97,638.225 1553.53,625.052 1554.09,611.899 1554.65,616.982 1555.21,618.723 1555.77,637.501 1556.33,656.448 1556.89,690.453 1557.45,675.53 1558,691.574 1558.56,706.874 1559.12,719.869 1559.68,732.699 1560.24,725.293 1560.8,728.348 1561.36,727.145 1561.92,741.657 1562.48,738.198 1563.04,701.267 1563.6,700.117 1564.16,719.234 1564.72,704.155 1565.28,704.968 1565.83,703.189 1566.39,715.97 1566.95,714.982 1567.51,711.811 1568.07,741.185 1568.63,708.689 1569.19,743.529 1569.75,739.994 1570.31,738.066 1570.87,765.31 1571.43,757.2 1571.99,736.456 1572.55,769.106 1573.1,746.032 1573.66,713.655 1574.22,726.558 1574.78,725.363 1575.34,736.285 1575.9,782.536 1576.46,748.138 1577.02,742.838 1577.58,723.081 1578.14,721.792 1578.7,670.77 1579.26,641.029 1579.82,630.951 1580.37,616.577 1580.93,638.241 1581.49,653.415 1582.05,671.283 1582.61,720.819 1583.17,689.112 1583.73,719.761 1584.29,666.588 1584.85,666.963 1585.41,652.399 1585.97,654.184 1586.53,638.493 1587.09,659.626 1587.65,675.32 1588.2,662.309 1588.76,679.434 1589.32,664.39 1589.88,663.518 1590.44,631.58 1591,650.324 1591.56,639.35 1592.12,623.4 1592.68,672.637 1593.24,673.689 1593.8,674.713 1594.36,644.753 1594.92,641.301 1595.47,642.784 1596.03,662.472 1596.59,680.899 1597.15,697.523 1597.71,696.164 1598.27,679.686 1598.83,683.266 1599.39,619.735 1599.95,621.512 1600.51,623.31 1601.07,661.119 1601.63,680.853 1602.19,697.123 1602.74,712.516 1603.3,745.846 1603.86,711.817 1604.42,725.937 1604.98,756.215 1605.54,752.087 1606.1,731.4 1606.66,732.161 1607.22,710.645 1607.78,722.261 1608.34,702.74 1608.9,732.589 1609.46,734.061 1610.02,731.123 1610.57,744.216 1611.13,774.725 1611.69,784.816 1612.25,813.488 1612.81,803.924 1613.37,816.594 1613.93,811.33 1614.49,807.546 1615.05,848.414 1615.61,823.552 1616.17,799.904 1616.73,790.767 1617.29,801.58 1617.84,779.436 1618.4,776.364 1618.96,754.15 1619.52,751.98 1620.08,768.03 1620.64,764.803 1621.2,805.996 1621.76,799.566 1622.32,776.943 1622.88,750.522 1623.44,734.17 1624,700.433 1624.56,714.912 1625.11,730.853 1625.67,779.46 1626.23,773.216 1626.79,753.721 1627.35,748.234 1627.91,744.098 1628.47,755.572 1629.03,735.787 1629.59,731.513 1630.15,712.595 1630.71,729.804 1631.27,724.042 1631.83,706.126 1632.39,719.425 1632.94,700.363 1633.5,746.736 1634.06,743.878 1634.62,725.13 1635.18,772.54 1635.74,766.117 1636.3,779.775 1636.86,758.65 1637.42,771.365 1637.98,767.447 1638.54,762.408 1639.1,727.61 1639.66,726.275 1640.21,739.574 1640.77,724.245 1641.33,721.507 1641.89,722.645 1642.45,704.241 1643.01,685.893 1643.57,672.253 1644.13,674.296 1644.69,674.645 1645.25,653.619 1645.81,687.573 1646.37,722.238 1646.93,708.045 1647.48,690.358 1648.04,688.312 1648.6,686.326 1649.16,703.752 1649.72,719.141 1650.28,696.46 1650.84,696.795 1651.4,710.872 1651.96,754.722 1652.52,749.91 1653.08,776.54 1653.64,688.108 1654.2,652.995 1654.76,657.79 1655.31,691.957 1655.87,662.208 1656.43,695.692 1656.99,661.405 1657.55,645.568 1658.11,713.345 1658.67,728.808 1659.23,760.257 1659.79,676.96 1660.35,692.237 1660.91,691.008 1661.47,688.466 1662.03,687.886 1662.58,687.923 1663.14,672.301 1663.7,624.579 1664.26,562.255 1664.82,582.616 1665.38,585.898 1665.94,621.414 1666.5,609.664 1667.06,633.939 1667.62,638.958 1668.18,589.392 1668.74,594.854 1669.3,630.633 1669.85,662.189 1670.41,696.677 1670.97,685.502 1671.53,699.925 1672.09,699.876 1672.65,682.67 1673.21,685.324 1673.77,682.434 1674.33,700.862 1674.89,685.675 1675.45,670.152 1676.01,700.647 1676.57,702.005 1677.13,699.419 1677.68,711.788 1678.24,665.499 1678.8,683.825 1679.36,701.104 1679.92,702.264 1680.48,701.876 1681.04,732.455 1681.6,725.728 1682.16,705.277 1682.72,685.865 1683.28,686.54 1683.84,687.023 1684.4,654.327 1684.95,655.464 1685.51,653.815 1686.07,673.337 1686.63,658.976 1687.19,679.557 1687.75,646.3 1688.31,646.88 1688.87,614.469 1689.43,603.897 1689.99,610.782 1690.55,614.864 1691.11,635.078 1691.67,636.899 1692.23,623.635 1692.78,577.952 1693.34,586.126 1693.9,609.813 1694.46,567.571 1695.02,608.585 1695.58,615.833 1696.14,654.867 1696.7,687.725 1697.26,704.514 1697.82,688 1698.38,653.023 1698.94,637.375 1699.5,636.116 1700.05,653.281 1700.61,641.786 1701.17,673.832 1701.73,673.318 1702.29,675.861 1702.85,646.468 1703.41,648.923 1703.97,701.437 1704.53,734.812 1705.09,746.071 1705.65,777.168 1706.21,756.683 1706.77,737.913 1707.32,717.636 1707.88,714.778 1708.44,741.321 1709,739.245 1709.56,740.744 1710.12,740.399 1710.68,753.747 1711.24,781.162 1711.8,725.239 1712.36,706.246 1712.92,704.482 1713.48,689.533 1714.04,703.737 1714.6,701.799 1715.15,687.783 1715.71,682.63 1716.27,687.162 1716.83,685.968 1717.39,687.495 1717.95,639.986 1718.51,627.001 1719.07,613.271 1719.63,638.712 1720.19,660.473 1720.75,659.033 1721.31,639.966 1721.87,642.674 1722.42,628.267 1722.98,631.282 1723.54,618.361 1724.1,638.27 1724.66,604.765 1725.22,609.809 1725.78,599.824 1726.34,622.493 1726.9,607.594 1727.46,613.792 1728.02,651.64 1728.58,653.821 1729.14,688.474 1729.69,705.116 1730.25,718.78 1730.81,670.01 1731.37,654.625 1731.93,653.864 1732.49,651.508 1733.05,620.315 1733.61,637.714 1734.17,657.46 1734.73,672.157 1735.29,672.33 1735.85,640.414 1736.41,642.136 1736.97,596.539 1737.52,618.415 1738.08,634.434 1738.64,619.386 1739.2,604.083 1739.76,607.272 1740.32,642.336 1740.88,664.74 1741.44,649.702 1742,631.277 1742.56,632.696 1743.12,699.45 1743.68,698.057 1744.24,726.1 1744.79,725.365 1745.35,738.332 1745.91,737.864 1746.47,720.77 1747.03,718.455 1747.59,731.343 1748.15,759.15 1748.71,754.958 1749.27,766.953 1749.83,747.278 1750.39,739.087 1750.95,750.757 1751.51,728.935 1752.06,656.366 1752.62,671.734 1753.18,687.305 1753.74,669.441 1754.3,639.391 1754.86,659.264 1755.42,627.244 1755.98,611.963 1756.54,569.91 1757.1,609.213 1757.66,565.827 1758.22,573.979 1758.78,597.134 1759.34,584.629 1759.89,592.313 1760.45,579.242 1761.01,600.453 1761.57,604.891 1762.13,639.626 1762.69,642.83 1763.25,630.244 1763.81,630.225 1764.37,650.536 1764.93,702.973 1765.49,704.933 1766.05,704.439 1766.61,701.741 1767.16,720.447 1767.72,718.742 1768.28,702.565 1768.84,703.044 1769.4,689.068 1769.96,689.737 1770.52,658.085 1771.08,626.134 1771.64,613.644 1772.2,552.098 1772.76,573.541 1773.32,611.451 1773.88,617.401 1774.43,652.598 1774.99,673.722 1775.55,684.839 1776.11,683.284 1776.67,682.384 1777.23,683.922 1777.79,715.088 1778.35,745.276 1778.91,773.706 1779.47,754.782 1780.03,750.532 1780.59,749.387 1781.15,746.67 1781.71,711.099 1782.26,729.736 1782.82,759.675 1783.38,754.573 1783.94,735.548 1784.5,749.985 1785.06,744.143 1785.62,754.053 1786.18,718.182 1786.74,684.411 1787.3,682.242 1787.86,682.867 1788.42,716.698 1788.98,699.022 1789.53,715.634 1790.09,729.641 1790.65,758.177 1791.21,741.83 1791.77,722.405 1792.33,721.354 1792.89,754.369 1793.45,749.958 1794.01,746.072 1794.57,722.475 1795.13,705.016 1795.69,738.225 1796.25,768.309 1796.8,748.034 1797.36,758.656 1797.92,752.965 1798.48,684.043 1799.04,668.033 1799.6,651.255 1800.16,636.204 1800.72,621.44 1801.28,640.46 1801.84,658.58 1802.4,658.235 1802.96,658.452 1803.52,629.653 1804.08,648.135 1804.63,664.078 1805.19,649.375 1805.75,634.241 1806.31,639.257 1806.87,625.595 1807.43,609.179 1807.99,577.72 1808.55,602.314 1809.11,622.145 1809.67,625.354 1810.23,615.23 1810.79,603.535 1811.35,591.424 1811.9,578.13 1812.46,568.328 1813.02,590.404 1813.58,612.851 1814.14,616.984 1814.7,669.132 1815.26,671.413 1815.82,688.427 1816.38,704.882 1816.94,704.655 1817.5,706.465 1818.06,706.789 1818.62,721.829 1819.18,720.725 1819.73,686.715 1820.29,651.921 1820.85,669.802 1821.41,651.056 1821.97,653.889 1822.53,626.723 1823.09,632.546 1823.65,665.662 1824.21,638.946 1824.77,631.758 1825.33,633.285 1825.89,652.818 1826.45,634.149 1827,651.954 1827.56,652.437 1828.12,637.452 1828.68,603.615 1829.24,626.483 1829.8,612.169 1830.36,601.277 1830.92,605.786 1831.48,593.754 1832.04,616.686 1832.6,605.66 1833.16,627.275 1833.72,630.862 1834.27,651.955 1834.83,652.008 1835.39,687.12 1835.95,673.497 1836.51,693.709 1837.07,693.681 1837.63,705.78 1838.19,736.061 \"/>\n<path clip-path=\"url(#clip703)\" d=\"M720.247 688.566 L720.806 688.566 L721.365 688.566 L721.924 688.566 L722.484 688.566 L723.043 688.566 L723.602 688.566 L724.161 688.566 L724.721 688.566 L725.28 688.566 L725.839 688.566 L726.398 688.566 L726.958 688.566 L727.517 688.566 L728.076 688.566 L728.635 688.566 L729.195 688.566 L729.754 688.566 L730.313 688.566 L730.872 688.566 L731.432 688.566 L731.991 688.566 L732.55 688.566 L733.109 688.566 L733.669 688.566 L734.228 688.566 L734.787 688.566 L735.346 688.566 L735.906 688.566 L736.465 688.566 L737.024 688.566 L737.583 688.566 L738.143 688.566 L738.702 688.566 L739.261 688.566 L739.82 688.566 L740.38 688.566 L740.939 688.566 L741.498 688.566 L742.057 688.566 L742.617 688.566 L743.176 688.566 L743.735 688.566 L744.294 688.566 L744.854 688.566 L745.413 688.566 L745.972 688.566 L746.531 688.566 L747.091 688.566 L747.65 688.566 L748.209 688.566 L748.768 688.566 L749.328 688.566 L749.887 688.566 L750.446 688.566 L751.005 688.566 L751.565 688.566 L752.124 688.566 L752.683 688.566 L753.242 688.566 L753.802 688.566 L754.361 688.566 L754.92 688.566 L755.479 688.566 L756.039 688.566 L756.598 688.566 L757.157 688.566 L757.716 688.566 L758.276 688.566 L758.835 688.566 L759.394 688.566 L759.953 688.566 L760.513 688.566 L761.072 688.566 L761.631 688.566 L762.19 688.566 L762.75 688.566 L763.309 688.566 L763.868 688.566 L764.427 688.566 L764.987 688.566 L765.546 688.566 L766.105 688.566 L766.664 688.566 L767.224 688.566 L767.783 688.566 L768.342 688.566 L768.901 688.566 L769.461 688.566 L770.02 688.566 L770.579 688.566 L771.138 688.566 L771.698 688.566 L772.257 688.566 L772.816 688.566 L773.375 688.566 L773.935 688.566 L774.494 688.566 L775.053 688.566 L775.612 688.566 L776.172 688.566 L776.731 688.566 L777.29 688.566 L777.849 688.566 L778.409 688.566 L778.968 688.566 L779.527 688.566 L780.086 688.566 L780.646 688.566 L781.205 688.566 L781.764 688.566 L782.323 688.566 L782.883 688.566 L783.442 688.566 L784.001 688.566 L784.56 688.566 L785.12 688.566 L785.679 688.566 L786.238 688.566 L786.797 688.566 L787.357 688.566 L787.916 688.566 L788.475 688.566 L789.034 688.566 L789.594 688.566 L790.153 688.566 L790.712 688.566 L791.271 688.566 L791.831 688.566 L792.39 688.566 L792.949 688.566 L793.508 688.566 L794.068 688.566 L794.627 688.566 L795.186 688.566 L795.745 688.566 L796.305 688.566 L796.864 688.566 L797.423 688.566 L797.982 688.566 L798.542 688.566 L799.101 688.566 L799.66 688.566 L800.219 688.566 L800.779 688.566 L801.338 688.566 L801.897 688.566 L802.456 688.566 L803.016 688.566 L803.575 688.566 L804.134 688.566 L804.693 688.566 L805.253 688.566 L805.812 688.566 L806.371 688.566 L806.931 688.566 L807.49 688.566 L808.049 688.566 L808.608 688.566 L809.168 688.566 L809.727 688.566 L810.286 688.566 L810.845 688.566 L811.405 688.566 L811.964 688.566 L812.523 688.566 L813.082 688.566 L813.642 688.566 L814.201 688.566 L814.76 688.566 L815.319 688.566 L815.879 688.566 L816.438 688.566 L816.997 688.566 L817.556 688.566 L818.116 688.566 L818.675 688.566 L819.234 688.566 L819.793 688.566 L820.353 688.566 L820.912 688.566 L821.471 688.566 L822.03 688.566 L822.59 688.566 L823.149 688.566 L823.708 688.566 L824.267 688.566 L824.827 688.566 L825.386 688.566 L825.945 688.566 L826.504 688.566 L827.064 688.566 L827.623 688.566 L828.182 688.566 L828.741 688.566 L829.301 688.566 L829.86 688.566 L830.419 688.566 L830.978 688.566 L831.538 688.566 L832.097 688.566 L832.656 688.566 L833.215 688.566 L833.775 688.566 L834.334 688.566 L834.893 688.566 L835.452 688.566 L836.012 688.566 L836.571 688.566 L837.13 688.566 L837.689 688.566 L838.249 688.566 L838.808 688.566 L839.367 688.566 L839.926 688.566 L840.486 688.566 L841.045 688.566 L841.604 688.566 L842.163 688.566 L842.723 688.566 L843.282 688.566 L843.841 688.566 L844.4 688.566 L844.96 688.566 L845.519 688.566 L846.078 688.566 L846.637 688.566 L847.197 688.566 L847.756 688.566 L848.315 688.566 L848.874 688.566 L849.434 688.566 L849.993 688.566 L850.552 688.566 L851.111 688.566 L851.671 688.566 L852.23 688.566 L852.789 688.566 L853.348 688.566 L853.908 688.566 L854.467 688.566 L855.026 688.566 L855.585 688.566 L856.145 688.566 L856.704 688.566 L857.263 688.566 L857.822 688.566 L858.382 688.566 L858.941 688.566 L859.5 688.566 L860.059 688.566 L860.619 688.566 L861.178 688.566 L861.737 688.566 L862.296 688.566 L862.856 688.566 L863.415 688.566 L863.974 688.566 L864.533 688.566 L865.093 688.566 L865.652 688.566 L866.211 688.566 L866.77 688.566 L867.33 688.566 L867.889 688.566 L868.448 688.566 L869.007 688.566 L869.567 688.566 L870.126 688.566 L870.685 688.566 L871.244 688.566 L871.804 688.566 L872.363 688.566 L872.922 688.566 L873.481 688.566 L874.041 688.566 L874.6 688.566 L875.159 688.566 L875.718 688.566 L876.278 688.566 L876.837 688.566 L877.396 688.566 L877.955 688.566 L878.515 688.566 L879.074 688.566 L879.633 688.566 L880.192 688.566 L880.752 688.566 L881.311 688.566 L881.87 688.566 L882.429 688.566 L882.989 688.566 L883.548 688.566 L884.107 688.566 L884.666 688.566 L885.226 688.566 L885.785 688.566 L886.344 688.566 L886.903 688.566 L887.463 688.566 L888.022 688.566 L888.581 688.566 L889.14 688.566 L889.7 688.566 L890.259 688.566 L890.818 688.566 L891.377 688.566 L891.937 688.566 L892.496 688.566 L893.055 688.566 L893.614 688.566 L894.174 688.566 L894.733 688.566 L895.292 688.566 L895.851 688.566 L896.411 688.566 L896.97 688.566 L897.529 688.566 L898.088 688.566 L898.648 688.566 L899.207 688.566 L899.766 688.566 L900.325 688.566 L900.885 688.566 L901.444 688.566 L902.003 688.566 L902.562 688.566 L903.122 688.566 L903.681 688.566 L904.24 688.566 L904.799 688.566 L905.359 688.566 L905.918 688.566 L906.477 688.566 L907.036 688.566 L907.596 688.566 L908.155 688.566 L908.714 688.566 L909.273 688.566 L909.833 688.566 L910.392 688.566 L910.951 688.566 L911.51 688.566 L912.07 688.566 L912.629 688.566 L913.188 688.566 L913.747 688.566 L914.307 688.566 L914.866 688.566 L915.425 688.566 L915.984 688.566 L916.544 688.566 L917.103 688.566 L917.662 688.566 L918.221 688.566 L918.781 688.566 L919.34 688.566 L919.899 688.566 L920.458 688.566 L921.018 688.566 L921.577 688.566 L922.136 688.566 L922.695 688.566 L923.255 688.566 L923.814 688.566 L924.373 688.566 L924.932 688.566 L925.492 688.566 L926.051 688.566 L926.61 688.566 L927.169 688.566 L927.729 688.566 L928.288 688.566 L928.847 688.566 L929.406 688.566 L929.966 688.566 L930.525 688.566 L931.084 688.566 L931.644 688.566 L932.203 688.566 L932.762 688.566 L933.321 688.566 L933.881 688.566 L934.44 688.566 L934.999 688.566 L935.558 688.566 L936.118 688.566 L936.677 688.566 L937.236 688.566 L937.795 688.566 L938.355 688.566 L938.914 688.566 L939.473 688.566 L940.032 688.566 L940.592 688.566 L941.151 688.566 L941.71 688.566 L942.269 688.566 L942.829 688.566 L943.388 688.566 L943.947 688.566 L944.506 688.566 L945.066 688.566 L945.625 688.566 L946.184 688.566 L946.743 688.566 L947.303 688.566 L947.862 688.566 L948.421 688.566 L948.98 688.566 L949.54 688.566 L950.099 688.566 L950.658 688.566 L951.217 688.566 L951.777 688.566 L952.336 688.566 L952.895 688.566 L953.454 688.566 L954.014 688.566 L954.573 688.566 L955.132 688.566 L955.691 688.566 L956.251 688.566 L956.81 688.566 L957.369 688.566 L957.928 688.566 L958.488 688.566 L959.047 688.566 L959.606 688.566 L960.165 688.566 L960.725 688.566 L961.284 688.566 L961.843 688.566 L962.402 688.566 L962.962 688.566 L963.521 688.566 L964.08 688.566 L964.639 688.566 L965.199 688.566 L965.758 688.566 L966.317 688.566 L966.876 688.566 L967.436 688.566 L967.995 688.566 L968.554 688.566 L969.113 688.566 L969.673 688.566 L970.232 688.566 L970.791 688.566 L971.35 688.566 L971.91 688.566 L972.469 688.566 L973.028 688.566 L973.587 688.566 L974.147 688.566 L974.706 688.566 L975.265 688.566 L975.824 688.566 L976.384 688.566 L976.943 688.566 L977.502 688.566 L978.061 688.566 L978.621 688.566 L979.18 688.566 L979.739 688.566 L980.298 688.566 L980.858 688.566 L981.417 688.566 L981.976 688.566 L982.535 688.566 L983.095 688.566 L983.654 688.566 L984.213 688.566 L984.772 688.566 L985.332 688.566 L985.891 688.566 L986.45 688.566 L987.009 688.566 L987.569 688.566 L988.128 688.566 L988.687 688.566 L989.246 688.566 L989.806 688.566 L990.365 688.566 L990.924 688.566 L991.483 688.566 L992.043 688.566 L992.602 688.566 L993.161 688.566 L993.72 688.566 L994.28 688.566 L994.839 688.566 L995.398 688.566 L995.957 688.566 L996.517 688.566 L997.076 688.566 L997.635 688.566 L998.194 688.566 L998.754 688.566 L999.313 688.566 L999.872 688.566 L1000.43 688.566 L1000.99 688.566 L1001.55 688.566 L1002.11 688.566 L1002.67 688.566 L1003.23 688.566 L1003.79 688.566 L1004.35 688.566 L1004.91 688.566 L1005.46 688.566 L1006.02 688.566 L1006.58 688.566 L1007.14 688.566 L1007.7 688.566 L1008.26 688.566 L1008.82 688.566 L1009.38 688.566 L1009.94 688.566 L1010.5 688.566 L1011.06 688.566 L1011.62 688.566 L1012.18 688.566 L1012.73 688.566 L1013.29 688.566 L1013.85 688.566 L1014.41 688.566 L1014.97 688.566 L1015.53 688.566 L1016.09 688.566 L1016.65 688.566 L1017.21 688.566 L1017.77 688.566 L1018.33 688.566 L1018.89 688.566 L1019.45 688.566 L1020.01 688.566 L1020.56 688.566 L1021.12 688.566 L1021.68 688.566 L1022.24 688.566 L1022.8 688.566 L1023.36 688.566 L1023.92 688.566 L1024.48 688.566 L1025.04 688.566 L1025.6 688.566 L1026.16 688.566 L1026.72 688.566 L1027.28 688.566 L1027.83 688.566 L1028.39 688.566 L1028.95 688.566 L1029.51 688.566 L1030.07 688.566 L1030.63 688.566 L1031.19 688.566 L1031.75 688.566 L1032.31 688.566 L1032.87 688.566 L1033.43 688.566 L1033.99 688.566 L1034.55 688.566 L1035.1 688.566 L1035.66 688.566 L1036.22 688.566 L1036.78 688.566 L1037.34 688.566 L1037.9 688.566 L1038.46 688.566 L1039.02 688.566 L1039.58 688.566 L1040.14 688.566 L1040.7 688.566 L1041.26 688.566 L1041.82 688.566 L1042.38 688.566 L1042.93 688.566 L1043.49 688.566 L1044.05 688.566 L1044.61 688.566 L1045.17 688.566 L1045.73 688.566 L1046.29 688.566 L1046.85 688.566 L1047.41 688.566 L1047.97 688.566 L1048.53 688.566 L1049.09 688.566 L1049.65 688.566 L1050.2 688.566 L1050.76 688.566 L1051.32 688.566 L1051.88 688.566 L1052.44 688.566 L1053 688.566 L1053.56 688.566 L1054.12 688.566 L1054.68 688.566 L1055.24 688.566 L1055.8 688.566 L1056.36 688.566 L1056.92 688.566 L1057.48 688.566 L1058.03 688.566 L1058.59 688.566 L1059.15 688.566 L1059.71 688.566 L1060.27 688.566 L1060.83 688.566 L1061.39 688.566 L1061.95 688.566 L1062.51 688.566 L1063.07 688.566 L1063.63 688.566 L1064.19 688.566 L1064.75 688.566 L1065.3 688.566 L1065.86 688.566 L1066.42 688.566 L1066.98 688.566 L1067.54 688.566 L1068.1 688.566 L1068.66 688.566 L1069.22 688.566 L1069.78 688.566 L1070.34 688.566 L1070.9 688.566 L1071.46 688.566 L1072.02 688.566 L1072.57 688.566 L1073.13 688.566 L1073.69 688.566 L1074.25 688.566 L1074.81 688.566 L1075.37 688.566 L1075.93 688.566 L1076.49 688.566 L1077.05 688.566 L1077.61 688.566 L1078.17 688.566 L1078.73 688.566 L1079.29 688.566 L1079.85 688.566 L1080.4 688.566 L1080.96 688.566 L1081.52 688.566 L1082.08 688.566 L1082.64 688.566 L1083.2 688.566 L1083.76 688.566 L1084.32 688.566 L1084.88 688.566 L1085.44 688.566 L1086 688.566 L1086.56 688.566 L1087.12 688.566 L1087.67 688.566 L1088.23 688.566 L1088.79 688.566 L1089.35 688.566 L1089.91 688.566 L1090.47 688.566 L1091.03 688.566 L1091.59 688.566 L1092.15 688.566 L1092.71 688.566 L1093.27 688.566 L1093.83 688.566 L1094.39 688.566 L1094.94 688.566 L1095.5 688.566 L1096.06 688.566 L1096.62 688.566 L1097.18 688.566 L1097.74 688.566 L1098.3 688.566 L1098.86 688.566 L1099.42 688.566 L1099.98 688.566 L1100.54 688.566 L1101.1 688.566 L1101.66 688.566 L1102.22 688.566 L1102.77 688.566 L1103.33 688.566 L1103.89 688.566 L1104.45 688.566 L1105.01 688.566 L1105.57 688.566 L1106.13 688.566 L1106.69 688.566 L1107.25 688.566 L1107.81 688.566 L1108.37 688.566 L1108.93 688.566 L1109.49 688.566 L1110.04 688.566 L1110.6 688.566 L1111.16 688.566 L1111.72 688.566 L1112.28 688.566 L1112.84 688.566 L1113.4 688.566 L1113.96 688.566 L1114.52 688.566 L1115.08 688.566 L1115.64 688.566 L1116.2 688.566 L1116.76 688.566 L1117.31 688.566 L1117.87 688.566 L1118.43 688.566 L1118.99 688.566 L1119.55 688.566 L1120.11 688.566 L1120.67 688.566 L1121.23 688.566 L1121.79 688.566 L1122.35 688.566 L1122.91 688.566 L1123.47 688.566 L1124.03 688.566 L1124.59 688.566 L1125.14 688.566 L1125.7 688.566 L1126.26 688.566 L1126.82 688.566 L1127.38 688.566 L1127.94 688.566 L1128.5 688.566 L1129.06 688.566 L1129.62 688.566 L1130.18 688.566 L1130.74 688.566 L1131.3 688.566 L1131.86 688.566 L1132.41 688.566 L1132.97 688.566 L1133.53 688.566 L1134.09 688.566 L1134.65 688.566 L1135.21 688.566 L1135.77 688.566 L1136.33 688.566 L1136.89 688.566 L1137.45 688.566 L1138.01 688.566 L1138.57 688.566 L1139.13 688.566 L1139.68 688.566 L1140.24 688.566 L1140.8 688.566 L1141.36 688.566 L1141.92 688.566 L1142.48 688.566 L1143.04 688.566 L1143.6 688.566 L1144.16 688.566 L1144.72 688.566 L1145.28 688.566 L1145.84 688.566 L1146.4 688.566 L1146.96 688.566 L1147.51 688.566 L1148.07 688.566 L1148.63 688.566 L1149.19 688.566 L1149.75 688.566 L1150.31 688.566 L1150.87 688.566 L1151.43 688.566 L1151.99 688.566 L1152.55 688.566 L1153.11 688.566 L1153.67 688.566 L1154.23 688.566 L1154.78 688.566 L1155.34 688.566 L1155.9 688.566 L1156.46 688.566 L1157.02 688.566 L1157.58 688.566 L1158.14 688.566 L1158.7 688.566 L1159.26 688.566 L1159.82 688.566 L1160.38 688.566 L1160.94 688.566 L1161.5 688.566 L1162.05 688.566 L1162.61 688.566 L1163.17 688.566 L1163.73 688.566 L1164.29 688.566 L1164.85 688.566 L1165.41 688.566 L1165.97 688.566 L1166.53 688.566 L1167.09 688.566 L1167.65 688.566 L1168.21 688.566 L1168.77 688.566 L1169.33 688.566 L1169.88 688.566 L1170.44 688.566 L1171 688.566 L1171.56 688.566 L1172.12 688.566 L1172.68 688.566 L1173.24 688.566 L1173.8 688.566 L1174.36 688.566 L1174.92 688.566 L1175.48 688.566 L1176.04 688.566 L1176.6 688.566 L1177.15 688.566 L1177.71 688.566 L1178.27 688.566 L1178.83 688.566 L1179.39 688.566 L1179.95 688.566 L1180.51 688.566 L1181.07 688.566 L1181.63 688.566 L1182.19 688.566 L1182.75 688.566 L1183.31 688.566 L1183.87 688.566 L1184.43 688.566 L1184.98 688.566 L1185.54 688.566 L1186.1 688.566 L1186.66 688.566 L1187.22 688.566 L1187.78 688.566 L1188.34 688.566 L1188.9 688.566 L1189.46 688.566 L1190.02 688.566 L1190.58 688.566 L1191.14 688.566 L1191.7 688.566 L1192.25 688.566 L1192.81 688.566 L1193.37 688.566 L1193.93 688.566 L1194.49 688.566 L1195.05 688.566 L1195.61 688.566 L1196.17 688.566 L1196.73 688.566 L1197.29 688.566 L1197.85 688.566 L1198.41 688.566 L1198.97 688.566 L1199.52 688.566 L1200.08 688.566 L1200.64 688.566 L1201.2 688.566 L1201.76 688.566 L1202.32 688.566 L1202.88 688.566 L1203.44 688.566 L1204 688.566 L1204.56 688.566 L1205.12 688.566 L1205.68 688.566 L1206.24 688.566 L1206.8 688.566 L1207.35 688.566 L1207.91 688.566 L1208.47 688.566 L1209.03 688.566 L1209.59 688.566 L1210.15 688.566 L1210.71 688.566 L1211.27 688.566 L1211.83 688.566 L1212.39 688.566 L1212.95 688.566 L1213.51 688.566 L1214.07 688.566 L1214.62 688.566 L1215.18 688.566 L1215.74 688.566 L1216.3 688.566 L1216.86 688.566 L1217.42 688.566 L1217.98 688.566 L1218.54 688.566 L1219.1 688.566 L1219.66 688.566 L1220.22 688.566 L1220.78 688.566 L1221.34 688.566 L1221.89 688.566 L1222.45 688.566 L1223.01 688.566 L1223.57 688.566 L1224.13 688.566 L1224.69 688.566 L1225.25 688.566 L1225.81 688.566 L1226.37 688.566 L1226.93 688.566 L1227.49 688.566 L1228.05 688.566 L1228.61 688.566 L1229.17 688.566 L1229.72 688.566 L1230.28 688.566 L1230.84 688.566 L1231.4 688.566 L1231.96 688.566 L1232.52 688.566 L1233.08 688.566 L1233.64 688.566 L1234.2 688.566 L1234.76 688.566 L1235.32 688.566 L1235.88 688.566 L1236.44 688.566 L1236.99 688.566 L1237.55 688.566 L1238.11 688.566 L1238.67 688.566 L1239.23 688.566 L1239.79 688.566 L1240.35 688.566 L1240.91 688.566 L1241.47 688.566 L1242.03 688.566 L1242.59 688.566 L1243.15 688.566 L1243.71 688.566 L1244.26 688.566 L1244.82 688.566 L1245.38 688.566 L1245.94 688.566 L1246.5 688.566 L1247.06 688.566 L1247.62 688.566 L1248.18 688.566 L1248.74 688.566 L1249.3 688.566 L1249.86 688.566 L1250.42 688.566 L1250.98 688.566 L1251.54 688.566 L1252.09 688.566 L1252.65 688.566 L1253.21 688.566 L1253.77 688.566 L1254.33 688.566 L1254.89 688.566 L1255.45 688.566 L1256.01 688.566 L1256.57 688.566 L1257.13 688.566 L1257.69 688.566 L1258.25 688.566 L1258.81 688.566 L1259.36 688.566 L1259.92 688.566 L1260.48 688.566 L1261.04 688.566 L1261.6 688.566 L1262.16 688.566 L1262.72 688.566 L1263.28 688.566 L1263.84 688.566 L1264.4 688.566 L1264.96 688.566 L1265.52 688.566 L1266.08 688.566 L1266.63 688.566 L1267.19 688.566 L1267.75 688.566 L1268.31 688.566 L1268.87 688.566 L1269.43 688.566 L1269.99 688.566 L1270.55 688.566 L1271.11 688.566 L1271.67 688.566 L1272.23 688.566 L1272.79 688.566 L1273.35 688.566 L1273.91 688.566 L1274.46 688.566 L1275.02 688.566 L1275.58 688.566 L1276.14 688.566 L1276.7 688.566 L1277.26 688.566 L1277.82 688.566 L1278.38 688.566 L1278.94 688.566 L1279.5 688.566 L1280.06 688.566 L1280.62 688.566 L1281.18 688.566 L1281.73 688.566 L1282.29 688.566 L1282.85 688.566 L1283.41 688.566 L1283.97 688.566 L1284.53 688.566 L1285.09 688.566 L1285.65 688.566 L1286.21 688.566 L1286.77 688.566 L1287.33 688.566 L1287.89 688.566 L1288.45 688.566 L1289 688.566 L1289.56 688.566 L1290.12 688.566 L1290.68 688.566 L1291.24 688.566 L1291.8 688.566 L1292.36 688.566 L1292.92 688.566 L1293.48 688.566 L1294.04 688.566 L1294.6 688.566 L1295.16 688.566 L1295.72 688.566 L1296.28 688.566 L1296.83 688.566 L1297.39 688.566 L1297.95 688.566 L1298.51 688.566 L1299.07 688.566 L1299.63 688.566 L1300.19 688.566 L1300.75 688.566 L1301.31 688.566 L1301.87 688.566 L1302.43 688.566 L1302.99 688.566 L1303.55 688.566 L1304.1 688.566 L1304.66 688.566 L1305.22 688.566 L1305.78 688.566 L1306.34 688.566 L1306.9 688.566 L1307.46 688.566 L1308.02 688.566 L1308.58 688.566 L1309.14 688.566 L1309.7 688.566 L1310.26 688.566 L1310.82 688.566 L1311.38 688.566 L1311.93 688.566 L1312.49 688.566 L1313.05 688.566 L1313.61 688.566 L1314.17 688.566 L1314.73 688.566 L1315.29 688.566 L1315.85 688.566 L1316.41 688.566 L1316.97 688.566 L1317.53 688.566 L1318.09 688.566 L1318.65 688.566 L1319.2 688.566 L1319.76 688.566 L1320.32 688.566 L1320.88 688.566 L1321.44 688.566 L1322 688.566 L1322.56 688.566 L1323.12 688.566 L1323.68 688.566 L1324.24 688.566 L1324.8 688.566 L1325.36 688.566 L1325.92 688.566 L1326.47 688.566 L1327.03 688.566 L1327.59 688.566 L1328.15 688.566 L1328.71 688.566 L1329.27 688.566 L1329.83 688.566 L1330.39 688.566 L1330.95 688.566 L1331.51 688.566 L1332.07 688.566 L1332.63 688.566 L1333.19 688.566 L1333.75 688.566 L1334.3 688.566 L1334.86 688.566 L1335.42 688.566 L1335.98 688.566 L1336.54 688.566 L1337.1 688.566 L1337.66 688.566 L1338.22 688.566 L1338.78 688.566 L1339.34 688.566 L1339.9 688.566 L1340.46 688.566 L1341.02 688.566 L1341.57 688.566 L1342.13 688.566 L1342.69 688.566 L1343.25 688.566 L1343.81 688.566 L1344.37 688.566 L1344.93 688.566 L1345.49 688.566 L1346.05 688.566 L1346.61 688.566 L1347.17 688.566 L1347.73 688.566 L1348.29 688.566 L1348.84 688.566 L1349.4 688.566 L1349.96 688.566 L1350.52 688.566 L1351.08 688.566 L1351.64 688.566 L1352.2 688.566 L1352.76 688.566 L1353.32 688.566 L1353.88 688.566 L1354.44 688.566 L1355 688.566 L1355.56 688.566 L1356.12 688.566 L1356.67 688.566 L1357.23 688.566 L1357.79 688.566 L1358.35 688.566 L1358.91 688.566 L1359.47 688.566 L1360.03 688.566 L1360.59 688.566 L1361.15 688.566 L1361.71 688.566 L1362.27 688.566 L1362.83 688.566 L1363.39 688.566 L1363.94 688.566 L1364.5 688.566 L1365.06 688.566 L1365.62 688.566 L1366.18 688.566 L1366.74 688.566 L1367.3 688.566 L1367.86 688.566 L1368.42 688.566 L1368.98 688.566 L1369.54 688.566 L1370.1 688.566 L1370.66 688.566 L1371.21 688.566 L1371.77 688.566 L1372.33 688.566 L1372.89 688.566 L1373.45 688.566 L1374.01 688.566 L1374.57 688.566 L1375.13 688.566 L1375.69 688.566 L1376.25 688.566 L1376.81 688.566 L1377.37 688.566 L1377.93 688.566 L1378.49 688.566 L1379.04 688.566 L1379.6 688.566 L1380.16 688.566 L1380.72 688.566 L1381.28 688.566 L1381.84 688.566 L1382.4 688.566 L1382.96 688.566 L1383.52 688.566 L1384.08 688.566 L1384.64 688.566 L1385.2 688.566 L1385.76 688.566 L1386.31 688.566 L1386.87 688.566 L1387.43 688.566 L1387.99 688.566 L1388.55 688.566 L1389.11 688.566 L1389.67 688.566 L1390.23 688.566 L1390.79 688.566 L1391.35 688.566 L1391.91 688.566 L1392.47 688.566 L1393.03 688.566 L1393.58 688.566 L1394.14 688.566 L1394.7 688.566 L1395.26 688.566 L1395.82 688.566 L1396.38 688.566 L1396.94 688.566 L1397.5 688.566 L1398.06 688.566 L1398.62 688.566 L1399.18 688.566 L1399.74 688.566 L1400.3 688.566 L1400.86 688.566 L1401.41 688.566 L1401.97 688.566 L1402.53 688.566 L1403.09 688.566 L1403.65 688.566 L1404.21 688.566 L1404.77 688.566 L1405.33 688.566 L1405.89 688.566 L1406.45 688.566 L1407.01 688.566 L1407.57 688.566 L1408.13 688.566 L1408.68 688.566 L1409.24 688.566 L1409.8 688.566 L1410.36 688.566 L1410.92 688.566 L1411.48 688.566 L1412.04 688.566 L1412.6 688.566 L1413.16 688.566 L1413.72 688.566 L1414.28 688.566 L1414.84 688.566 L1415.4 688.566 L1415.95 688.566 L1416.51 688.566 L1417.07 688.566 L1417.63 688.566 L1418.19 688.566 L1418.75 688.566 L1419.31 688.566 L1419.87 688.566 L1420.43 688.566 L1420.99 688.566 L1421.55 688.566 L1422.11 688.566 L1422.67 688.566 L1423.23 688.566 L1423.78 688.566 L1424.34 688.566 L1424.9 688.566 L1425.46 688.566 L1426.02 688.566 L1426.58 688.566 L1427.14 688.566 L1427.7 688.566 L1428.26 688.566 L1428.82 688.566 L1429.38 688.566 L1429.94 688.566 L1430.5 688.566 L1431.05 688.566 L1431.61 688.566 L1432.17 688.566 L1432.73 688.566 L1433.29 688.566 L1433.85 688.566 L1434.41 688.566 L1434.97 688.566 L1435.53 688.566 L1436.09 688.566 L1436.65 688.566 L1437.21 688.566 L1437.77 688.566 L1438.33 688.566 L1438.88 688.566 L1439.44 688.566 L1440 688.566 L1440.56 688.566 L1441.12 688.566 L1441.68 688.566 L1442.24 688.566 L1442.8 688.566 L1443.36 688.566 L1443.92 688.566 L1444.48 688.566 L1445.04 688.566 L1445.6 688.566 L1446.15 688.566 L1446.71 688.566 L1447.27 688.566 L1447.83 688.566 L1448.39 688.566 L1448.95 688.566 L1449.51 688.566 L1450.07 688.566 L1450.63 688.566 L1451.19 688.566 L1451.75 688.566 L1452.31 688.566 L1452.87 688.566 L1453.42 688.566 L1453.98 688.566 L1454.54 688.566 L1455.1 688.566 L1455.66 688.566 L1456.22 688.566 L1456.78 688.566 L1457.34 688.566 L1457.9 688.566 L1458.46 688.566 L1459.02 688.566 L1459.58 688.566 L1460.14 688.566 L1460.7 688.566 L1461.25 688.566 L1461.81 688.566 L1462.37 688.566 L1462.93 688.566 L1463.49 688.566 L1464.05 688.566 L1464.61 688.566 L1465.17 688.566 L1465.73 688.566 L1466.29 688.566 L1466.85 688.566 L1467.41 688.566 L1467.97 688.566 L1468.52 688.566 L1469.08 688.566 L1469.64 688.566 L1470.2 688.566 L1470.76 688.566 L1471.32 688.566 L1471.88 688.566 L1472.44 688.566 L1473 688.566 L1473.56 688.566 L1474.12 688.566 L1474.68 688.566 L1475.24 688.566 L1475.79 688.566 L1476.35 688.566 L1476.91 688.566 L1477.47 688.566 L1478.03 688.566 L1478.59 688.566 L1479.15 688.566 L1479.71 688.566 L1480.27 688.566 L1480.83 688.566 L1481.39 688.566 L1481.95 688.566 L1482.51 688.566 L1483.07 688.566 L1483.62 688.566 L1484.18 688.566 L1484.74 688.566 L1485.3 688.566 L1485.86 688.566 L1486.42 688.566 L1486.98 688.566 L1487.54 688.566 L1488.1 688.566 L1488.66 688.566 L1489.22 688.566 L1489.78 688.566 L1490.34 688.566 L1490.89 688.566 L1491.45 688.566 L1492.01 688.566 L1492.57 688.566 L1493.13 688.566 L1493.69 688.566 L1494.25 688.566 L1494.81 688.566 L1495.37 688.566 L1495.93 688.566 L1496.49 688.566 L1497.05 688.566 L1497.61 688.566 L1498.16 688.566 L1498.72 688.566 L1499.28 688.566 L1499.84 688.566 L1500.4 688.566 L1500.96 688.566 L1501.52 688.566 L1502.08 688.566 L1502.64 688.566 L1503.2 688.566 L1503.76 688.566 L1504.32 688.566 L1504.88 688.566 L1505.44 688.566 L1505.99 688.566 L1506.55 688.566 L1507.11 688.566 L1507.67 688.566 L1508.23 688.566 L1508.79 688.566 L1509.35 688.566 L1509.91 688.566 L1510.47 688.566 L1511.03 688.566 L1511.59 688.566 L1512.15 688.566 L1512.71 688.566 L1513.26 688.566 L1513.82 688.566 L1514.38 688.566 L1514.94 688.566 L1515.5 688.566 L1516.06 688.566 L1516.62 688.566 L1517.18 688.566 L1517.74 688.566 L1518.3 688.566 L1518.86 688.566 L1519.42 688.566 L1519.98 688.566 L1520.53 688.566 L1521.09 688.566 L1521.65 688.566 L1522.21 688.566 L1522.77 688.566 L1523.33 688.566 L1523.89 688.566 L1524.45 688.566 L1525.01 688.566 L1525.57 688.566 L1526.13 688.566 L1526.69 688.566 L1527.25 688.566 L1527.81 688.566 L1528.36 688.566 L1528.92 688.566 L1529.48 688.566 L1530.04 688.566 L1530.6 688.566 L1531.16 688.566 L1531.72 688.566 L1532.28 688.566 L1532.84 688.566 L1533.4 688.566 L1533.96 688.566 L1534.52 688.566 L1535.08 688.566 L1535.63 688.566 L1536.19 688.566 L1536.75 688.566 L1537.31 688.566 L1537.87 688.566 L1538.43 688.566 L1538.99 688.566 L1539.55 688.566 L1540.11 688.566 L1540.67 688.566 L1541.23 688.566 L1541.79 688.566 L1542.35 688.566 L1542.9 688.566 L1543.46 688.566 L1544.02 688.566 L1544.58 688.566 L1545.14 688.566 L1545.7 688.566 L1546.26 688.566 L1546.82 688.566 L1547.38 688.566 L1547.94 688.566 L1548.5 688.566 L1549.06 688.566 L1549.62 688.566 L1550.18 688.566 L1550.73 688.566 L1551.29 688.566 L1551.85 688.566 L1552.41 688.566 L1552.97 688.566 L1553.53 688.566 L1554.09 688.566 L1554.65 688.566 L1555.21 688.566 L1555.77 688.566 L1556.33 688.566 L1556.89 688.566 L1557.45 688.566 L1558 688.566 L1558.56 688.566 L1559.12 688.566 L1559.68 688.566 L1560.24 688.566 L1560.8 688.566 L1561.36 688.566 L1561.92 688.566 L1562.48 688.566 L1563.04 688.566 L1563.6 688.566 L1564.16 688.566 L1564.72 688.566 L1565.28 688.566 L1565.83 688.566 L1566.39 688.566 L1566.95 688.566 L1567.51 688.566 L1568.07 688.566 L1568.63 688.566 L1569.19 688.566 L1569.75 688.566 L1570.31 688.566 L1570.87 688.566 L1571.43 688.566 L1571.99 688.566 L1572.55 688.566 L1573.1 688.566 L1573.66 688.566 L1574.22 688.566 L1574.78 688.566 L1575.34 688.566 L1575.9 688.566 L1576.46 688.566 L1577.02 688.566 L1577.58 688.566 L1578.14 688.566 L1578.7 688.566 L1579.26 688.566 L1579.82 688.566 L1580.37 688.566 L1580.93 688.566 L1581.49 688.566 L1582.05 688.566 L1582.61 688.566 L1583.17 688.566 L1583.73 688.566 L1584.29 688.566 L1584.85 688.566 L1585.41 688.566 L1585.97 688.566 L1586.53 688.566 L1587.09 688.566 L1587.65 688.566 L1588.2 688.566 L1588.76 688.566 L1589.32 688.566 L1589.88 688.566 L1590.44 688.566 L1591 688.566 L1591.56 688.566 L1592.12 688.566 L1592.68 688.566 L1593.24 688.566 L1593.8 688.566 L1594.36 688.566 L1594.92 688.566 L1595.47 688.566 L1596.03 688.566 L1596.59 688.566 L1597.15 688.566 L1597.71 688.566 L1598.27 688.566 L1598.83 688.566 L1599.39 688.566 L1599.95 688.566 L1600.51 688.566 L1601.07 688.566 L1601.63 688.566 L1602.19 688.566 L1602.74 688.566 L1603.3 688.566 L1603.86 688.566 L1604.42 688.566 L1604.98 688.566 L1605.54 688.566 L1606.1 688.566 L1606.66 688.566 L1607.22 688.566 L1607.78 688.566 L1608.34 688.566 L1608.9 688.566 L1609.46 688.566 L1610.02 688.566 L1610.57 688.566 L1611.13 688.566 L1611.69 688.566 L1612.25 688.566 L1612.81 688.566 L1613.37 688.566 L1613.93 688.566 L1614.49 688.566 L1615.05 688.566 L1615.61 688.566 L1616.17 688.566 L1616.73 688.566 L1617.29 688.566 L1617.84 688.566 L1618.4 688.566 L1618.96 688.566 L1619.52 688.566 L1620.08 688.566 L1620.64 688.566 L1621.2 688.566 L1621.76 688.566 L1622.32 688.566 L1622.88 688.566 L1623.44 688.566 L1624 688.566 L1624.56 688.566 L1625.11 688.566 L1625.67 688.566 L1626.23 688.566 L1626.79 688.566 L1627.35 688.566 L1627.91 688.566 L1628.47 688.566 L1629.03 688.566 L1629.59 688.566 L1630.15 688.566 L1630.71 688.566 L1631.27 688.566 L1631.83 688.566 L1632.39 688.566 L1632.94 688.566 L1633.5 688.566 L1634.06 688.566 L1634.62 688.566 L1635.18 688.566 L1635.74 688.566 L1636.3 688.566 L1636.86 688.566 L1637.42 688.566 L1637.98 688.566 L1638.54 688.566 L1639.1 688.566 L1639.66 688.566 L1640.21 688.566 L1640.77 688.566 L1641.33 688.566 L1641.89 688.566 L1642.45 688.566 L1643.01 688.566 L1643.57 688.566 L1644.13 688.566 L1644.69 688.566 L1645.25 688.566 L1645.81 688.566 L1646.37 688.566 L1646.93 688.566 L1647.48 688.566 L1648.04 688.566 L1648.6 688.566 L1649.16 688.566 L1649.72 688.566 L1650.28 688.566 L1650.84 688.566 L1651.4 688.566 L1651.96 688.566 L1652.52 688.566 L1653.08 688.566 L1653.64 688.566 L1654.2 688.566 L1654.76 688.566 L1655.31 688.566 L1655.87 688.566 L1656.43 688.566 L1656.99 688.566 L1657.55 688.566 L1658.11 688.566 L1658.67 688.566 L1659.23 688.566 L1659.79 688.566 L1660.35 688.566 L1660.91 688.566 L1661.47 688.566 L1662.03 688.566 L1662.58 688.566 L1663.14 688.566 L1663.7 688.566 L1664.26 688.566 L1664.82 688.566 L1665.38 688.566 L1665.94 688.566 L1666.5 688.566 L1667.06 688.566 L1667.62 688.566 L1668.18 688.566 L1668.74 688.566 L1669.3 688.566 L1669.85 688.566 L1670.41 688.566 L1670.97 688.566 L1671.53 688.566 L1672.09 688.566 L1672.65 688.566 L1673.21 688.566 L1673.77 688.566 L1674.33 688.566 L1674.89 688.566 L1675.45 688.566 L1676.01 688.566 L1676.57 688.566 L1677.13 688.566 L1677.68 688.566 L1678.24 688.566 L1678.8 688.566 L1679.36 688.566 L1679.92 688.566 L1680.48 688.566 L1681.04 688.566 L1681.6 688.566 L1682.16 688.566 L1682.72 688.566 L1683.28 688.566 L1683.84 688.566 L1684.4 688.566 L1684.95 688.566 L1685.51 688.566 L1686.07 688.566 L1686.63 688.566 L1687.19 688.566 L1687.75 688.566 L1688.31 688.566 L1688.87 688.566 L1689.43 688.566 L1689.99 688.566 L1690.55 688.566 L1691.11 688.566 L1691.67 688.566 L1692.23 688.566 L1692.78 688.566 L1693.34 688.566 L1693.9 688.566 L1694.46 688.566 L1695.02 688.566 L1695.58 688.566 L1696.14 688.566 L1696.7 688.566 L1697.26 688.566 L1697.82 688.566 L1698.38 688.566 L1698.94 688.566 L1699.5 688.566 L1700.05 688.566 L1700.61 688.566 L1701.17 688.566 L1701.73 688.566 L1702.29 688.566 L1702.85 688.566 L1703.41 688.566 L1703.97 688.566 L1704.53 688.566 L1705.09 688.566 L1705.65 688.566 L1706.21 688.566 L1706.77 688.566 L1707.32 688.566 L1707.88 688.566 L1708.44 688.566 L1709 688.566 L1709.56 688.566 L1710.12 688.566 L1710.68 688.566 L1711.24 688.566 L1711.8 688.566 L1712.36 688.566 L1712.92 688.566 L1713.48 688.566 L1714.04 688.566 L1714.6 688.566 L1715.15 688.566 L1715.71 688.566 L1716.27 688.566 L1716.83 688.566 L1717.39 688.566 L1717.95 688.566 L1718.51 688.566 L1719.07 688.566 L1719.63 688.566 L1720.19 688.566 L1720.75 688.566 L1721.31 688.566 L1721.87 688.566 L1722.42 688.566 L1722.98 688.566 L1723.54 688.566 L1724.1 688.566 L1724.66 688.566 L1725.22 688.566 L1725.78 688.566 L1726.34 688.566 L1726.9 688.566 L1727.46 688.566 L1728.02 688.566 L1728.58 688.566 L1729.14 688.566 L1729.69 688.566 L1730.25 688.566 L1730.81 688.566 L1731.37 688.566 L1731.93 688.566 L1732.49 688.566 L1733.05 688.566 L1733.61 688.566 L1734.17 688.566 L1734.73 688.566 L1735.29 688.566 L1735.85 688.566 L1736.41 688.566 L1736.97 688.566 L1737.52 688.566 L1738.08 688.566 L1738.64 688.566 L1739.2 688.566 L1739.76 688.566 L1740.32 688.566 L1740.88 688.566 L1741.44 688.566 L1742 688.566 L1742.56 688.566 L1743.12 688.566 L1743.68 688.566 L1744.24 688.566 L1744.79 688.566 L1745.35 688.566 L1745.91 688.566 L1746.47 688.566 L1747.03 688.566 L1747.59 688.566 L1748.15 688.566 L1748.71 688.566 L1749.27 688.566 L1749.83 688.566 L1750.39 688.566 L1750.95 688.566 L1751.51 688.566 L1752.06 688.566 L1752.62 688.566 L1753.18 688.566 L1753.74 688.566 L1754.3 688.566 L1754.86 688.566 L1755.42 688.566 L1755.98 688.566 L1756.54 688.566 L1757.1 688.566 L1757.66 688.566 L1758.22 688.566 L1758.78 688.566 L1759.34 688.566 L1759.89 688.566 L1760.45 688.566 L1761.01 688.566 L1761.57 688.566 L1762.13 688.566 L1762.69 688.566 L1763.25 688.566 L1763.81 688.566 L1764.37 688.566 L1764.93 688.566 L1765.49 688.566 L1766.05 688.566 L1766.61 688.566 L1767.16 688.566 L1767.72 688.566 L1768.28 688.566 L1768.84 688.566 L1769.4 688.566 L1769.96 688.566 L1770.52 688.566 L1771.08 688.566 L1771.64 688.566 L1772.2 688.566 L1772.76 688.566 L1773.32 688.566 L1773.88 688.566 L1774.43 688.566 L1774.99 688.566 L1775.55 688.566 L1776.11 688.566 L1776.67 688.566 L1777.23 688.566 L1777.79 688.566 L1778.35 688.566 L1778.91 688.566 L1779.47 688.566 L1780.03 688.566 L1780.59 688.566 L1781.15 688.566 L1781.71 688.566 L1782.26 688.566 L1782.82 688.566 L1783.38 688.566 L1783.94 688.566 L1784.5 688.566 L1785.06 688.566 L1785.62 688.566 L1786.18 688.566 L1786.74 688.566 L1787.3 688.566 L1787.86 688.566 L1788.42 688.566 L1788.98 688.566 L1789.53 688.566 L1790.09 688.566 L1790.65 688.566 L1791.21 688.566 L1791.77 688.566 L1792.33 688.566 L1792.89 688.566 L1793.45 688.566 L1794.01 688.566 L1794.57 688.566 L1795.13 688.566 L1795.69 688.566 L1796.25 688.566 L1796.8 688.566 L1797.36 688.566 L1797.92 688.566 L1798.48 688.566 L1799.04 688.566 L1799.6 688.566 L1800.16 688.566 L1800.72 688.566 L1801.28 688.566 L1801.84 688.566 L1802.4 688.566 L1802.96 688.566 L1803.52 688.566 L1804.08 688.566 L1804.63 688.566 L1805.19 688.566 L1805.75 688.566 L1806.31 688.566 L1806.87 688.566 L1807.43 688.566 L1807.99 688.566 L1808.55 688.566 L1809.11 688.566 L1809.67 688.566 L1810.23 688.566 L1810.79 688.566 L1811.35 688.566 L1811.9 688.566 L1812.46 688.566 L1813.02 688.566 L1813.58 688.566 L1814.14 688.566 L1814.7 688.566 L1815.26 688.566 L1815.82 688.566 L1816.38 688.566 L1816.94 688.566 L1817.5 688.566 L1818.06 688.566 L1818.62 688.566 L1819.18 688.566 L1819.73 688.566 L1820.29 688.566 L1820.85 688.566 L1821.41 688.566 L1821.97 688.566 L1822.53 688.566 L1823.09 688.566 L1823.65 688.566 L1824.21 688.566 L1824.77 688.566 L1825.33 688.566 L1825.89 688.566 L1826.45 688.566 L1827 688.566 L1827.56 688.566 L1828.12 688.566 L1828.68 688.566 L1829.24 688.566 L1829.8 688.566 L1830.36 688.566 L1830.92 688.566 L1831.48 688.566 L1832.04 688.566 L1832.6 688.566 L1833.16 688.566 L1833.72 688.566 L1834.27 688.566 L1834.83 688.566 L1835.39 688.566 L1835.95 688.566 L1836.51 688.566 L1837.07 688.566 L1837.63 688.566 L1838.19 688.566 L1838.19 680.242 L1837.63 680.242 L1837.07 680.242 L1836.51 680.242 L1835.95 680.242 L1835.39 680.242 L1834.83 680.242 L1834.27 680.242 L1833.72 680.242 L1833.16 680.242 L1832.6 680.242 L1832.04 680.242 L1831.48 680.242 L1830.92 680.242 L1830.36 680.242 L1829.8 680.242 L1829.24 680.242 L1828.68 680.242 L1828.12 680.242 L1827.56 680.242 L1827 680.242 L1826.45 680.242 L1825.89 680.242 L1825.33 680.242 L1824.77 680.242 L1824.21 680.242 L1823.65 680.242 L1823.09 680.242 L1822.53 680.242 L1821.97 680.242 L1821.41 680.242 L1820.85 680.242 L1820.29 680.242 L1819.73 680.242 L1819.18 680.242 L1818.62 680.242 L1818.06 680.242 L1817.5 680.242 L1816.94 680.242 L1816.38 680.242 L1815.82 680.242 L1815.26 680.242 L1814.7 680.242 L1814.14 680.242 L1813.58 680.242 L1813.02 680.242 L1812.46 680.242 L1811.9 680.242 L1811.35 680.242 L1810.79 680.242 L1810.23 680.242 L1809.67 680.242 L1809.11 680.242 L1808.55 680.242 L1807.99 680.242 L1807.43 680.242 L1806.87 680.242 L1806.31 680.242 L1805.75 680.242 L1805.19 680.242 L1804.63 680.242 L1804.08 680.242 L1803.52 680.242 L1802.96 680.242 L1802.4 680.242 L1801.84 680.242 L1801.28 680.242 L1800.72 680.242 L1800.16 680.242 L1799.6 680.242 L1799.04 680.242 L1798.48 680.242 L1797.92 680.242 L1797.36 680.242 L1796.8 680.242 L1796.25 680.242 L1795.69 680.242 L1795.13 680.242 L1794.57 680.242 L1794.01 680.242 L1793.45 680.242 L1792.89 680.242 L1792.33 680.242 L1791.77 680.242 L1791.21 680.242 L1790.65 680.242 L1790.09 680.242 L1789.53 680.242 L1788.98 680.242 L1788.42 680.242 L1787.86 680.242 L1787.3 680.242 L1786.74 680.242 L1786.18 680.242 L1785.62 680.242 L1785.06 680.242 L1784.5 680.242 L1783.94 680.242 L1783.38 680.242 L1782.82 680.242 L1782.26 680.242 L1781.71 680.242 L1781.15 680.242 L1780.59 680.242 L1780.03 680.242 L1779.47 680.242 L1778.91 680.242 L1778.35 680.242 L1777.79 680.242 L1777.23 680.242 L1776.67 680.242 L1776.11 680.242 L1775.55 680.242 L1774.99 680.242 L1774.43 680.242 L1773.88 680.242 L1773.32 680.242 L1772.76 680.242 L1772.2 680.242 L1771.64 680.242 L1771.08 680.242 L1770.52 680.242 L1769.96 680.242 L1769.4 680.242 L1768.84 680.242 L1768.28 680.242 L1767.72 680.242 L1767.16 680.242 L1766.61 680.242 L1766.05 680.242 L1765.49 680.242 L1764.93 680.242 L1764.37 680.242 L1763.81 680.242 L1763.25 680.242 L1762.69 680.242 L1762.13 680.242 L1761.57 680.242 L1761.01 680.242 L1760.45 680.242 L1759.89 680.242 L1759.34 680.242 L1758.78 680.242 L1758.22 680.242 L1757.66 680.242 L1757.1 680.242 L1756.54 680.242 L1755.98 680.242 L1755.42 680.242 L1754.86 680.242 L1754.3 680.242 L1753.74 680.242 L1753.18 680.242 L1752.62 680.242 L1752.06 680.242 L1751.51 680.242 L1750.95 680.242 L1750.39 680.242 L1749.83 680.242 L1749.27 680.242 L1748.71 680.242 L1748.15 680.242 L1747.59 680.242 L1747.03 680.242 L1746.47 680.242 L1745.91 680.242 L1745.35 680.242 L1744.79 680.242 L1744.24 680.242 L1743.68 680.242 L1743.12 680.242 L1742.56 680.242 L1742 680.242 L1741.44 680.242 L1740.88 680.242 L1740.32 680.242 L1739.76 680.242 L1739.2 680.242 L1738.64 680.242 L1738.08 680.242 L1737.52 680.242 L1736.97 680.242 L1736.41 680.242 L1735.85 680.242 L1735.29 680.242 L1734.73 680.242 L1734.17 680.242 L1733.61 680.242 L1733.05 680.242 L1732.49 680.242 L1731.93 680.242 L1731.37 680.242 L1730.81 680.242 L1730.25 680.242 L1729.69 680.242 L1729.14 680.242 L1728.58 680.242 L1728.02 680.242 L1727.46 680.242 L1726.9 680.242 L1726.34 680.242 L1725.78 680.242 L1725.22 680.242 L1724.66 680.242 L1724.1 680.242 L1723.54 680.242 L1722.98 680.242 L1722.42 680.242 L1721.87 680.242 L1721.31 680.242 L1720.75 680.242 L1720.19 680.242 L1719.63 680.242 L1719.07 680.242 L1718.51 680.242 L1717.95 680.242 L1717.39 680.242 L1716.83 680.242 L1716.27 680.242 L1715.71 680.242 L1715.15 680.242 L1714.6 680.242 L1714.04 680.242 L1713.48 680.242 L1712.92 680.242 L1712.36 680.242 L1711.8 680.242 L1711.24 680.242 L1710.68 680.242 L1710.12 680.242 L1709.56 680.242 L1709 680.242 L1708.44 680.242 L1707.88 680.242 L1707.32 680.242 L1706.77 680.242 L1706.21 680.242 L1705.65 680.242 L1705.09 680.242 L1704.53 680.242 L1703.97 680.242 L1703.41 680.242 L1702.85 680.242 L1702.29 680.242 L1701.73 680.242 L1701.17 680.242 L1700.61 680.242 L1700.05 680.242 L1699.5 680.242 L1698.94 680.242 L1698.38 680.242 L1697.82 680.242 L1697.26 680.242 L1696.7 680.242 L1696.14 680.242 L1695.58 680.242 L1695.02 680.242 L1694.46 680.242 L1693.9 680.242 L1693.34 680.242 L1692.78 680.242 L1692.23 680.242 L1691.67 680.242 L1691.11 680.242 L1690.55 680.242 L1689.99 680.242 L1689.43 680.242 L1688.87 680.242 L1688.31 680.242 L1687.75 680.242 L1687.19 680.242 L1686.63 680.242 L1686.07 680.242 L1685.51 680.242 L1684.95 680.242 L1684.4 680.242 L1683.84 680.242 L1683.28 680.242 L1682.72 680.242 L1682.16 680.242 L1681.6 680.242 L1681.04 680.242 L1680.48 680.242 L1679.92 680.242 L1679.36 680.242 L1678.8 680.242 L1678.24 680.242 L1677.68 680.242 L1677.13 680.242 L1676.57 680.242 L1676.01 680.242 L1675.45 680.242 L1674.89 680.242 L1674.33 680.242 L1673.77 680.242 L1673.21 680.242 L1672.65 680.242 L1672.09 680.242 L1671.53 680.242 L1670.97 680.242 L1670.41 680.242 L1669.85 680.242 L1669.3 680.242 L1668.74 680.242 L1668.18 680.242 L1667.62 680.242 L1667.06 680.242 L1666.5 680.242 L1665.94 680.242 L1665.38 680.242 L1664.82 680.242 L1664.26 680.242 L1663.7 680.242 L1663.14 680.242 L1662.58 680.242 L1662.03 680.242 L1661.47 680.242 L1660.91 680.242 L1660.35 680.242 L1659.79 680.242 L1659.23 680.242 L1658.67 680.242 L1658.11 680.242 L1657.55 680.242 L1656.99 680.242 L1656.43 680.242 L1655.87 680.242 L1655.31 680.242 L1654.76 680.242 L1654.2 680.242 L1653.64 680.242 L1653.08 680.242 L1652.52 680.242 L1651.96 680.242 L1651.4 680.242 L1650.84 680.242 L1650.28 680.242 L1649.72 680.242 L1649.16 680.242 L1648.6 680.242 L1648.04 680.242 L1647.48 680.242 L1646.93 680.242 L1646.37 680.242 L1645.81 680.242 L1645.25 680.242 L1644.69 680.242 L1644.13 680.242 L1643.57 680.242 L1643.01 680.242 L1642.45 680.242 L1641.89 680.242 L1641.33 680.242 L1640.77 680.242 L1640.21 680.242 L1639.66 680.242 L1639.1 680.242 L1638.54 680.242 L1637.98 680.242 L1637.42 680.242 L1636.86 680.242 L1636.3 680.242 L1635.74 680.242 L1635.18 680.242 L1634.62 680.242 L1634.06 680.242 L1633.5 680.242 L1632.94 680.242 L1632.39 680.242 L1631.83 680.242 L1631.27 680.242 L1630.71 680.242 L1630.15 680.242 L1629.59 680.242 L1629.03 680.242 L1628.47 680.242 L1627.91 680.242 L1627.35 680.242 L1626.79 680.242 L1626.23 680.242 L1625.67 680.242 L1625.11 680.242 L1624.56 680.242 L1624 680.242 L1623.44 680.242 L1622.88 680.242 L1622.32 680.242 L1621.76 680.242 L1621.2 680.242 L1620.64 680.242 L1620.08 680.242 L1619.52 680.242 L1618.96 680.242 L1618.4 680.242 L1617.84 680.242 L1617.29 680.242 L1616.73 680.242 L1616.17 680.242 L1615.61 680.242 L1615.05 680.242 L1614.49 680.242 L1613.93 680.242 L1613.37 680.242 L1612.81 680.242 L1612.25 680.242 L1611.69 680.242 L1611.13 680.242 L1610.57 680.242 L1610.02 680.242 L1609.46 680.242 L1608.9 680.242 L1608.34 680.242 L1607.78 680.242 L1607.22 680.242 L1606.66 680.242 L1606.1 680.242 L1605.54 680.242 L1604.98 680.242 L1604.42 680.242 L1603.86 680.242 L1603.3 680.242 L1602.74 680.242 L1602.19 680.242 L1601.63 680.242 L1601.07 680.242 L1600.51 680.242 L1599.95 680.242 L1599.39 680.242 L1598.83 680.242 L1598.27 680.242 L1597.71 680.242 L1597.15 680.242 L1596.59 680.242 L1596.03 680.242 L1595.47 680.242 L1594.92 680.242 L1594.36 680.242 L1593.8 680.242 L1593.24 680.242 L1592.68 680.242 L1592.12 680.242 L1591.56 680.242 L1591 680.242 L1590.44 680.242 L1589.88 680.242 L1589.32 680.242 L1588.76 680.242 L1588.2 680.242 L1587.65 680.242 L1587.09 680.242 L1586.53 680.242 L1585.97 680.242 L1585.41 680.242 L1584.85 680.242 L1584.29 680.242 L1583.73 680.242 L1583.17 680.242 L1582.61 680.242 L1582.05 680.242 L1581.49 680.242 L1580.93 680.242 L1580.37 680.242 L1579.82 680.242 L1579.26 680.242 L1578.7 680.242 L1578.14 680.242 L1577.58 680.242 L1577.02 680.242 L1576.46 680.242 L1575.9 680.242 L1575.34 680.242 L1574.78 680.242 L1574.22 680.242 L1573.66 680.242 L1573.1 680.242 L1572.55 680.242 L1571.99 680.242 L1571.43 680.242 L1570.87 680.242 L1570.31 680.242 L1569.75 680.242 L1569.19 680.242 L1568.63 680.242 L1568.07 680.242 L1567.51 680.242 L1566.95 680.242 L1566.39 680.242 L1565.83 680.242 L1565.28 680.242 L1564.72 680.242 L1564.16 680.242 L1563.6 680.242 L1563.04 680.242 L1562.48 680.242 L1561.92 680.242 L1561.36 680.242 L1560.8 680.242 L1560.24 680.242 L1559.68 680.242 L1559.12 680.242 L1558.56 680.242 L1558 680.242 L1557.45 680.242 L1556.89 680.242 L1556.33 680.242 L1555.77 680.242 L1555.21 680.242 L1554.65 680.242 L1554.09 680.242 L1553.53 680.242 L1552.97 680.242 L1552.41 680.242 L1551.85 680.242 L1551.29 680.242 L1550.73 680.242 L1550.18 680.242 L1549.62 680.242 L1549.06 680.242 L1548.5 680.242 L1547.94 680.242 L1547.38 680.242 L1546.82 680.242 L1546.26 680.242 L1545.7 680.242 L1545.14 680.242 L1544.58 680.242 L1544.02 680.242 L1543.46 680.242 L1542.9 680.242 L1542.35 680.242 L1541.79 680.242 L1541.23 680.242 L1540.67 680.242 L1540.11 680.242 L1539.55 680.242 L1538.99 680.242 L1538.43 680.242 L1537.87 680.242 L1537.31 680.242 L1536.75 680.242 L1536.19 680.242 L1535.63 680.242 L1535.08 680.242 L1534.52 680.242 L1533.96 680.242 L1533.4 680.242 L1532.84 680.242 L1532.28 680.242 L1531.72 680.242 L1531.16 680.242 L1530.6 680.242 L1530.04 680.242 L1529.48 680.242 L1528.92 680.242 L1528.36 680.242 L1527.81 680.242 L1527.25 680.242 L1526.69 680.242 L1526.13 680.242 L1525.57 680.242 L1525.01 680.242 L1524.45 680.242 L1523.89 680.242 L1523.33 680.242 L1522.77 680.242 L1522.21 680.242 L1521.65 680.242 L1521.09 680.242 L1520.53 680.242 L1519.98 680.242 L1519.42 680.242 L1518.86 680.242 L1518.3 680.242 L1517.74 680.242 L1517.18 680.242 L1516.62 680.242 L1516.06 680.242 L1515.5 680.242 L1514.94 680.242 L1514.38 680.242 L1513.82 680.242 L1513.26 680.242 L1512.71 680.242 L1512.15 680.242 L1511.59 680.242 L1511.03 680.242 L1510.47 680.242 L1509.91 680.242 L1509.35 680.242 L1508.79 680.242 L1508.23 680.242 L1507.67 680.242 L1507.11 680.242 L1506.55 680.242 L1505.99 680.242 L1505.44 680.242 L1504.88 680.242 L1504.32 680.242 L1503.76 680.242 L1503.2 680.242 L1502.64 680.242 L1502.08 680.242 L1501.52 680.242 L1500.96 680.242 L1500.4 680.242 L1499.84 680.242 L1499.28 680.242 L1498.72 680.242 L1498.16 680.242 L1497.61 680.242 L1497.05 680.242 L1496.49 680.242 L1495.93 680.242 L1495.37 680.242 L1494.81 680.242 L1494.25 680.242 L1493.69 680.242 L1493.13 680.242 L1492.57 680.242 L1492.01 680.242 L1491.45 680.242 L1490.89 680.242 L1490.34 680.242 L1489.78 680.242 L1489.22 680.242 L1488.66 680.242 L1488.1 680.242 L1487.54 680.242 L1486.98 680.242 L1486.42 680.242 L1485.86 680.242 L1485.3 680.242 L1484.74 680.242 L1484.18 680.242 L1483.62 680.242 L1483.07 680.242 L1482.51 680.242 L1481.95 680.242 L1481.39 680.242 L1480.83 680.242 L1480.27 680.242 L1479.71 680.242 L1479.15 680.242 L1478.59 680.242 L1478.03 680.242 L1477.47 680.242 L1476.91 680.242 L1476.35 680.242 L1475.79 680.242 L1475.24 680.242 L1474.68 680.242 L1474.12 680.242 L1473.56 680.242 L1473 680.242 L1472.44 680.242 L1471.88 680.242 L1471.32 680.242 L1470.76 680.242 L1470.2 680.242 L1469.64 680.242 L1469.08 680.242 L1468.52 680.242 L1467.97 680.242 L1467.41 680.242 L1466.85 680.242 L1466.29 680.242 L1465.73 680.242 L1465.17 680.242 L1464.61 680.242 L1464.05 680.242 L1463.49 680.242 L1462.93 680.242 L1462.37 680.242 L1461.81 680.242 L1461.25 680.242 L1460.7 680.242 L1460.14 680.242 L1459.58 680.242 L1459.02 680.242 L1458.46 680.242 L1457.9 680.242 L1457.34 680.242 L1456.78 680.242 L1456.22 680.242 L1455.66 680.242 L1455.1 680.242 L1454.54 680.242 L1453.98 680.242 L1453.42 680.242 L1452.87 680.242 L1452.31 680.242 L1451.75 680.242 L1451.19 680.242 L1450.63 680.242 L1450.07 680.242 L1449.51 680.242 L1448.95 680.242 L1448.39 680.242 L1447.83 680.242 L1447.27 680.242 L1446.71 680.242 L1446.15 680.242 L1445.6 680.242 L1445.04 680.242 L1444.48 680.242 L1443.92 680.242 L1443.36 680.242 L1442.8 680.242 L1442.24 680.242 L1441.68 680.242 L1441.12 680.242 L1440.56 680.242 L1440 680.242 L1439.44 680.242 L1438.88 680.242 L1438.33 680.242 L1437.77 680.242 L1437.21 680.242 L1436.65 680.242 L1436.09 680.242 L1435.53 680.242 L1434.97 680.242 L1434.41 680.242 L1433.85 680.242 L1433.29 680.242 L1432.73 680.242 L1432.17 680.242 L1431.61 680.242 L1431.05 680.242 L1430.5 680.242 L1429.94 680.242 L1429.38 680.242 L1428.82 680.242 L1428.26 680.242 L1427.7 680.242 L1427.14 680.242 L1426.58 680.242 L1426.02 680.242 L1425.46 680.242 L1424.9 680.242 L1424.34 680.242 L1423.78 680.242 L1423.23 680.242 L1422.67 680.242 L1422.11 680.242 L1421.55 680.242 L1420.99 680.242 L1420.43 680.242 L1419.87 680.242 L1419.31 680.242 L1418.75 680.242 L1418.19 680.242 L1417.63 680.242 L1417.07 680.242 L1416.51 680.242 L1415.95 680.242 L1415.4 680.242 L1414.84 680.242 L1414.28 680.242 L1413.72 680.242 L1413.16 680.242 L1412.6 680.242 L1412.04 680.242 L1411.48 680.242 L1410.92 680.242 L1410.36 680.242 L1409.8 680.242 L1409.24 680.242 L1408.68 680.242 L1408.13 680.242 L1407.57 680.242 L1407.01 680.242 L1406.45 680.242 L1405.89 680.242 L1405.33 680.242 L1404.77 680.242 L1404.21 680.242 L1403.65 680.242 L1403.09 680.242 L1402.53 680.242 L1401.97 680.242 L1401.41 680.242 L1400.86 680.242 L1400.3 680.242 L1399.74 680.242 L1399.18 680.242 L1398.62 680.242 L1398.06 680.242 L1397.5 680.242 L1396.94 680.242 L1396.38 680.242 L1395.82 680.242 L1395.26 680.242 L1394.7 680.242 L1394.14 680.242 L1393.58 680.242 L1393.03 680.242 L1392.47 680.242 L1391.91 680.242 L1391.35 680.242 L1390.79 680.242 L1390.23 680.242 L1389.67 680.242 L1389.11 680.242 L1388.55 680.242 L1387.99 680.242 L1387.43 680.242 L1386.87 680.242 L1386.31 680.242 L1385.76 680.242 L1385.2 680.242 L1384.64 680.242 L1384.08 680.242 L1383.52 680.242 L1382.96 680.242 L1382.4 680.242 L1381.84 680.242 L1381.28 680.242 L1380.72 680.242 L1380.16 680.242 L1379.6 680.242 L1379.04 680.242 L1378.49 680.242 L1377.93 680.242 L1377.37 680.242 L1376.81 680.242 L1376.25 680.242 L1375.69 680.242 L1375.13 680.242 L1374.57 680.242 L1374.01 680.242 L1373.45 680.242 L1372.89 680.242 L1372.33 680.242 L1371.77 680.242 L1371.21 680.242 L1370.66 680.242 L1370.1 680.242 L1369.54 680.242 L1368.98 680.242 L1368.42 680.242 L1367.86 680.242 L1367.3 680.242 L1366.74 680.242 L1366.18 680.242 L1365.62 680.242 L1365.06 680.242 L1364.5 680.242 L1363.94 680.242 L1363.39 680.242 L1362.83 680.242 L1362.27 680.242 L1361.71 680.242 L1361.15 680.242 L1360.59 680.242 L1360.03 680.242 L1359.47 680.242 L1358.91 680.242 L1358.35 680.242 L1357.79 680.242 L1357.23 680.242 L1356.67 680.242 L1356.12 680.242 L1355.56 680.242 L1355 680.242 L1354.44 680.242 L1353.88 680.242 L1353.32 680.242 L1352.76 680.242 L1352.2 680.242 L1351.64 680.242 L1351.08 680.242 L1350.52 680.242 L1349.96 680.242 L1349.4 680.242 L1348.84 680.242 L1348.29 680.242 L1347.73 680.242 L1347.17 680.242 L1346.61 680.242 L1346.05 680.242 L1345.49 680.242 L1344.93 680.242 L1344.37 680.242 L1343.81 680.242 L1343.25 680.242 L1342.69 680.242 L1342.13 680.242 L1341.57 680.242 L1341.02 680.242 L1340.46 680.242 L1339.9 680.242 L1339.34 680.242 L1338.78 680.242 L1338.22 680.242 L1337.66 680.242 L1337.1 680.242 L1336.54 680.242 L1335.98 680.242 L1335.42 680.242 L1334.86 680.242 L1334.3 680.242 L1333.75 680.242 L1333.19 680.242 L1332.63 680.242 L1332.07 680.242 L1331.51 680.242 L1330.95 680.242 L1330.39 680.242 L1329.83 680.242 L1329.27 680.242 L1328.71 680.242 L1328.15 680.242 L1327.59 680.242 L1327.03 680.242 L1326.47 680.242 L1325.92 680.242 L1325.36 680.242 L1324.8 680.242 L1324.24 680.242 L1323.68 680.242 L1323.12 680.242 L1322.56 680.242 L1322 680.242 L1321.44 680.242 L1320.88 680.242 L1320.32 680.242 L1319.76 680.242 L1319.2 680.242 L1318.65 680.242 L1318.09 680.242 L1317.53 680.242 L1316.97 680.242 L1316.41 680.242 L1315.85 680.242 L1315.29 680.242 L1314.73 680.242 L1314.17 680.242 L1313.61 680.242 L1313.05 680.242 L1312.49 680.242 L1311.93 680.242 L1311.38 680.242 L1310.82 680.242 L1310.26 680.242 L1309.7 680.242 L1309.14 680.242 L1308.58 680.242 L1308.02 680.242 L1307.46 680.242 L1306.9 680.242 L1306.34 680.242 L1305.78 680.242 L1305.22 680.242 L1304.66 680.242 L1304.1 680.242 L1303.55 680.242 L1302.99 680.242 L1302.43 680.242 L1301.87 680.242 L1301.31 680.242 L1300.75 680.242 L1300.19 680.242 L1299.63 680.242 L1299.07 680.242 L1298.51 680.242 L1297.95 680.242 L1297.39 680.242 L1296.83 680.242 L1296.28 680.242 L1295.72 680.242 L1295.16 680.242 L1294.6 680.242 L1294.04 680.242 L1293.48 680.242 L1292.92 680.242 L1292.36 680.242 L1291.8 680.242 L1291.24 680.242 L1290.68 680.242 L1290.12 680.242 L1289.56 680.242 L1289 680.242 L1288.45 680.242 L1287.89 680.242 L1287.33 680.242 L1286.77 680.242 L1286.21 680.242 L1285.65 680.242 L1285.09 680.242 L1284.53 680.242 L1283.97 680.242 L1283.41 680.242 L1282.85 680.242 L1282.29 680.242 L1281.73 680.242 L1281.18 680.242 L1280.62 680.242 L1280.06 680.242 L1279.5 680.242 L1278.94 680.242 L1278.38 680.242 L1277.82 680.242 L1277.26 680.242 L1276.7 680.242 L1276.14 680.242 L1275.58 680.242 L1275.02 680.242 L1274.46 680.242 L1273.91 680.242 L1273.35 680.242 L1272.79 680.242 L1272.23 680.242 L1271.67 680.242 L1271.11 680.242 L1270.55 680.242 L1269.99 680.242 L1269.43 680.242 L1268.87 680.242 L1268.31 680.242 L1267.75 680.242 L1267.19 680.242 L1266.63 680.242 L1266.08 680.242 L1265.52 680.242 L1264.96 680.242 L1264.4 680.242 L1263.84 680.242 L1263.28 680.242 L1262.72 680.242 L1262.16 680.242 L1261.6 680.242 L1261.04 680.242 L1260.48 680.242 L1259.92 680.242 L1259.36 680.242 L1258.81 680.242 L1258.25 680.242 L1257.69 680.242 L1257.13 680.242 L1256.57 680.242 L1256.01 680.242 L1255.45 680.242 L1254.89 680.242 L1254.33 680.242 L1253.77 680.242 L1253.21 680.242 L1252.65 680.242 L1252.09 680.242 L1251.54 680.242 L1250.98 680.242 L1250.42 680.242 L1249.86 680.242 L1249.3 680.242 L1248.74 680.242 L1248.18 680.242 L1247.62 680.242 L1247.06 680.242 L1246.5 680.242 L1245.94 680.242 L1245.38 680.242 L1244.82 680.242 L1244.26 680.242 L1243.71 680.242 L1243.15 680.242 L1242.59 680.242 L1242.03 680.242 L1241.47 680.242 L1240.91 680.242 L1240.35 680.242 L1239.79 680.242 L1239.23 680.242 L1238.67 680.242 L1238.11 680.242 L1237.55 680.242 L1236.99 680.242 L1236.44 680.242 L1235.88 680.242 L1235.32 680.242 L1234.76 680.242 L1234.2 680.242 L1233.64 680.242 L1233.08 680.242 L1232.52 680.242 L1231.96 680.242 L1231.4 680.242 L1230.84 680.242 L1230.28 680.242 L1229.72 680.242 L1229.17 680.242 L1228.61 680.242 L1228.05 680.242 L1227.49 680.242 L1226.93 680.242 L1226.37 680.242 L1225.81 680.242 L1225.25 680.242 L1224.69 680.242 L1224.13 680.242 L1223.57 680.242 L1223.01 680.242 L1222.45 680.242 L1221.89 680.242 L1221.34 680.242 L1220.78 680.242 L1220.22 680.242 L1219.66 680.242 L1219.1 680.242 L1218.54 680.242 L1217.98 680.242 L1217.42 680.242 L1216.86 680.242 L1216.3 680.242 L1215.74 680.242 L1215.18 680.242 L1214.62 680.242 L1214.07 680.242 L1213.51 680.242 L1212.95 680.242 L1212.39 680.242 L1211.83 680.242 L1211.27 680.242 L1210.71 680.242 L1210.15 680.242 L1209.59 680.242 L1209.03 680.242 L1208.47 680.242 L1207.91 680.242 L1207.35 680.242 L1206.8 680.242 L1206.24 680.242 L1205.68 680.242 L1205.12 680.242 L1204.56 680.242 L1204 680.242 L1203.44 680.242 L1202.88 680.242 L1202.32 680.242 L1201.76 680.242 L1201.2 680.242 L1200.64 680.242 L1200.08 680.242 L1199.52 680.242 L1198.97 680.242 L1198.41 680.242 L1197.85 680.242 L1197.29 680.242 L1196.73 680.242 L1196.17 680.242 L1195.61 680.242 L1195.05 680.242 L1194.49 680.242 L1193.93 680.242 L1193.37 680.242 L1192.81 680.242 L1192.25 680.242 L1191.7 680.242 L1191.14 680.242 L1190.58 680.242 L1190.02 680.242 L1189.46 680.242 L1188.9 680.242 L1188.34 680.242 L1187.78 680.242 L1187.22 680.242 L1186.66 680.242 L1186.1 680.242 L1185.54 680.242 L1184.98 680.242 L1184.43 680.242 L1183.87 680.242 L1183.31 680.242 L1182.75 680.242 L1182.19 680.242 L1181.63 680.242 L1181.07 680.242 L1180.51 680.242 L1179.95 680.242 L1179.39 680.242 L1178.83 680.242 L1178.27 680.242 L1177.71 680.242 L1177.15 680.242 L1176.6 680.242 L1176.04 680.242 L1175.48 680.242 L1174.92 680.242 L1174.36 680.242 L1173.8 680.242 L1173.24 680.242 L1172.68 680.242 L1172.12 680.242 L1171.56 680.242 L1171 680.242 L1170.44 680.242 L1169.88 680.242 L1169.33 680.242 L1168.77 680.242 L1168.21 680.242 L1167.65 680.242 L1167.09 680.242 L1166.53 680.242 L1165.97 680.242 L1165.41 680.242 L1164.85 680.242 L1164.29 680.242 L1163.73 680.242 L1163.17 680.242 L1162.61 680.242 L1162.05 680.242 L1161.5 680.242 L1160.94 680.242 L1160.38 680.242 L1159.82 680.242 L1159.26 680.242 L1158.7 680.242 L1158.14 680.242 L1157.58 680.242 L1157.02 680.242 L1156.46 680.242 L1155.9 680.242 L1155.34 680.242 L1154.78 680.242 L1154.23 680.242 L1153.67 680.242 L1153.11 680.242 L1152.55 680.242 L1151.99 680.242 L1151.43 680.242 L1150.87 680.242 L1150.31 680.242 L1149.75 680.242 L1149.19 680.242 L1148.63 680.242 L1148.07 680.242 L1147.51 680.242 L1146.96 680.242 L1146.4 680.242 L1145.84 680.242 L1145.28 680.242 L1144.72 680.242 L1144.16 680.242 L1143.6 680.242 L1143.04 680.242 L1142.48 680.242 L1141.92 680.242 L1141.36 680.242 L1140.8 680.242 L1140.24 680.242 L1139.68 680.242 L1139.13 680.242 L1138.57 680.242 L1138.01 680.242 L1137.45 680.242 L1136.89 680.242 L1136.33 680.242 L1135.77 680.242 L1135.21 680.242 L1134.65 680.242 L1134.09 680.242 L1133.53 680.242 L1132.97 680.242 L1132.41 680.242 L1131.86 680.242 L1131.3 680.242 L1130.74 680.242 L1130.18 680.242 L1129.62 680.242 L1129.06 680.242 L1128.5 680.242 L1127.94 680.242 L1127.38 680.242 L1126.82 680.242 L1126.26 680.242 L1125.7 680.242 L1125.14 680.242 L1124.59 680.242 L1124.03 680.242 L1123.47 680.242 L1122.91 680.242 L1122.35 680.242 L1121.79 680.242 L1121.23 680.242 L1120.67 680.242 L1120.11 680.242 L1119.55 680.242 L1118.99 680.242 L1118.43 680.242 L1117.87 680.242 L1117.31 680.242 L1116.76 680.242 L1116.2 680.242 L1115.64 680.242 L1115.08 680.242 L1114.52 680.242 L1113.96 680.242 L1113.4 680.242 L1112.84 680.242 L1112.28 680.242 L1111.72 680.242 L1111.16 680.242 L1110.6 680.242 L1110.04 680.242 L1109.49 680.242 L1108.93 680.242 L1108.37 680.242 L1107.81 680.242 L1107.25 680.242 L1106.69 680.242 L1106.13 680.242 L1105.57 680.242 L1105.01 680.242 L1104.45 680.242 L1103.89 680.242 L1103.33 680.242 L1102.77 680.242 L1102.22 680.242 L1101.66 680.242 L1101.1 680.242 L1100.54 680.242 L1099.98 680.242 L1099.42 680.242 L1098.86 680.242 L1098.3 680.242 L1097.74 680.242 L1097.18 680.242 L1096.62 680.242 L1096.06 680.242 L1095.5 680.242 L1094.94 680.242 L1094.39 680.242 L1093.83 680.242 L1093.27 680.242 L1092.71 680.242 L1092.15 680.242 L1091.59 680.242 L1091.03 680.242 L1090.47 680.242 L1089.91 680.242 L1089.35 680.242 L1088.79 680.242 L1088.23 680.242 L1087.67 680.242 L1087.12 680.242 L1086.56 680.242 L1086 680.242 L1085.44 680.242 L1084.88 680.242 L1084.32 680.242 L1083.76 680.242 L1083.2 680.242 L1082.64 680.242 L1082.08 680.242 L1081.52 680.242 L1080.96 680.242 L1080.4 680.242 L1079.85 680.242 L1079.29 680.242 L1078.73 680.242 L1078.17 680.242 L1077.61 680.242 L1077.05 680.242 L1076.49 680.242 L1075.93 680.242 L1075.37 680.242 L1074.81 680.242 L1074.25 680.242 L1073.69 680.242 L1073.13 680.242 L1072.57 680.242 L1072.02 680.242 L1071.46 680.242 L1070.9 680.242 L1070.34 680.242 L1069.78 680.242 L1069.22 680.242 L1068.66 680.242 L1068.1 680.242 L1067.54 680.242 L1066.98 680.242 L1066.42 680.242 L1065.86 680.242 L1065.3 680.242 L1064.75 680.242 L1064.19 680.242 L1063.63 680.242 L1063.07 680.242 L1062.51 680.242 L1061.95 680.242 L1061.39 680.242 L1060.83 680.242 L1060.27 680.242 L1059.71 680.242 L1059.15 680.242 L1058.59 680.242 L1058.03 680.242 L1057.48 680.242 L1056.92 680.242 L1056.36 680.242 L1055.8 680.242 L1055.24 680.242 L1054.68 680.242 L1054.12 680.242 L1053.56 680.242 L1053 680.242 L1052.44 680.242 L1051.88 680.242 L1051.32 680.242 L1050.76 680.242 L1050.2 680.242 L1049.65 680.242 L1049.09 680.242 L1048.53 680.242 L1047.97 680.242 L1047.41 680.242 L1046.85 680.242 L1046.29 680.242 L1045.73 680.242 L1045.17 680.242 L1044.61 680.242 L1044.05 680.242 L1043.49 680.242 L1042.93 680.242 L1042.38 680.242 L1041.82 680.242 L1041.26 680.242 L1040.7 680.242 L1040.14 680.242 L1039.58 680.242 L1039.02 680.242 L1038.46 680.242 L1037.9 680.242 L1037.34 680.242 L1036.78 680.242 L1036.22 680.242 L1035.66 680.242 L1035.1 680.242 L1034.55 680.242 L1033.99 680.242 L1033.43 680.242 L1032.87 680.242 L1032.31 680.242 L1031.75 680.242 L1031.19 680.242 L1030.63 680.242 L1030.07 680.242 L1029.51 680.242 L1028.95 680.242 L1028.39 680.242 L1027.83 680.242 L1027.28 680.242 L1026.72 680.242 L1026.16 680.242 L1025.6 680.242 L1025.04 680.242 L1024.48 680.242 L1023.92 680.242 L1023.36 680.242 L1022.8 680.242 L1022.24 680.242 L1021.68 680.242 L1021.12 680.242 L1020.56 680.242 L1020.01 680.242 L1019.45 680.242 L1018.89 680.242 L1018.33 680.242 L1017.77 680.242 L1017.21 680.242 L1016.65 680.242 L1016.09 680.242 L1015.53 680.242 L1014.97 680.242 L1014.41 680.242 L1013.85 680.242 L1013.29 680.242 L1012.73 680.242 L1012.18 680.242 L1011.62 680.242 L1011.06 680.242 L1010.5 680.242 L1009.94 680.242 L1009.38 680.242 L1008.82 680.242 L1008.26 680.242 L1007.7 680.242 L1007.14 680.242 L1006.58 680.242 L1006.02 680.242 L1005.46 680.242 L1004.91 680.242 L1004.35 680.242 L1003.79 680.242 L1003.23 680.242 L1002.67 680.242 L1002.11 680.242 L1001.55 680.242 L1000.99 680.242 L1000.43 680.242 L999.872 680.242 L999.313 680.242 L998.754 680.242 L998.194 680.242 L997.635 680.242 L997.076 680.242 L996.517 680.242 L995.957 680.242 L995.398 680.242 L994.839 680.242 L994.28 680.242 L993.72 680.242 L993.161 680.242 L992.602 680.242 L992.043 680.242 L991.483 680.242 L990.924 680.242 L990.365 680.242 L989.806 680.242 L989.246 680.242 L988.687 680.242 L988.128 680.242 L987.569 680.242 L987.009 680.242 L986.45 680.242 L985.891 680.242 L985.332 680.242 L984.772 680.242 L984.213 680.242 L983.654 680.242 L983.095 680.242 L982.535 680.242 L981.976 680.242 L981.417 680.242 L980.858 680.242 L980.298 680.242 L979.739 680.242 L979.18 680.242 L978.621 680.242 L978.061 680.242 L977.502 680.242 L976.943 680.242 L976.384 680.242 L975.824 680.242 L975.265 680.242 L974.706 680.242 L974.147 680.242 L973.587 680.242 L973.028 680.242 L972.469 680.242 L971.91 680.242 L971.35 680.242 L970.791 680.242 L970.232 680.242 L969.673 680.242 L969.113 680.242 L968.554 680.242 L967.995 680.242 L967.436 680.242 L966.876 680.242 L966.317 680.242 L965.758 680.242 L965.199 680.242 L964.639 680.242 L964.08 680.242 L963.521 680.242 L962.962 680.242 L962.402 680.242 L961.843 680.242 L961.284 680.242 L960.725 680.242 L960.165 680.242 L959.606 680.242 L959.047 680.242 L958.488 680.242 L957.928 680.242 L957.369 680.242 L956.81 680.242 L956.251 680.242 L955.691 680.242 L955.132 680.242 L954.573 680.242 L954.014 680.242 L953.454 680.242 L952.895 680.242 L952.336 680.242 L951.777 680.242 L951.217 680.242 L950.658 680.242 L950.099 680.242 L949.54 680.242 L948.98 680.242 L948.421 680.242 L947.862 680.242 L947.303 680.242 L946.743 680.242 L946.184 680.242 L945.625 680.242 L945.066 680.242 L944.506 680.242 L943.947 680.242 L943.388 680.242 L942.829 680.242 L942.269 680.242 L941.71 680.242 L941.151 680.242 L940.592 680.242 L940.032 680.242 L939.473 680.242 L938.914 680.242 L938.355 680.242 L937.795 680.242 L937.236 680.242 L936.677 680.242 L936.118 680.242 L935.558 680.242 L934.999 680.242 L934.44 680.242 L933.881 680.242 L933.321 680.242 L932.762 680.242 L932.203 680.242 L931.644 680.242 L931.084 680.242 L930.525 680.242 L929.966 680.242 L929.406 680.242 L928.847 680.242 L928.288 680.242 L927.729 680.242 L927.169 680.242 L926.61 680.242 L926.051 680.242 L925.492 680.242 L924.932 680.242 L924.373 680.242 L923.814 680.242 L923.255 680.242 L922.695 680.242 L922.136 680.242 L921.577 680.242 L921.018 680.242 L920.458 680.242 L919.899 680.242 L919.34 680.242 L918.781 680.242 L918.221 680.242 L917.662 680.242 L917.103 680.242 L916.544 680.242 L915.984 680.242 L915.425 680.242 L914.866 680.242 L914.307 680.242 L913.747 680.242 L913.188 680.242 L912.629 680.242 L912.07 680.242 L911.51 680.242 L910.951 680.242 L910.392 680.242 L909.833 680.242 L909.273 680.242 L908.714 680.242 L908.155 680.242 L907.596 680.242 L907.036 680.242 L906.477 680.242 L905.918 680.242 L905.359 680.242 L904.799 680.242 L904.24 680.242 L903.681 680.242 L903.122 680.242 L902.562 680.242 L902.003 680.242 L901.444 680.242 L900.885 680.242 L900.325 680.242 L899.766 680.242 L899.207 680.242 L898.648 680.242 L898.088 680.242 L897.529 680.242 L896.97 680.242 L896.411 680.242 L895.851 680.242 L895.292 680.242 L894.733 680.242 L894.174 680.242 L893.614 680.242 L893.055 680.242 L892.496 680.242 L891.937 680.242 L891.377 680.242 L890.818 680.242 L890.259 680.242 L889.7 680.242 L889.14 680.242 L888.581 680.242 L888.022 680.242 L887.463 680.242 L886.903 680.242 L886.344 680.242 L885.785 680.242 L885.226 680.242 L884.666 680.242 L884.107 680.242 L883.548 680.242 L882.989 680.242 L882.429 680.242 L881.87 680.242 L881.311 680.242 L880.752 680.242 L880.192 680.242 L879.633 680.242 L879.074 680.242 L878.515 680.242 L877.955 680.242 L877.396 680.242 L876.837 680.242 L876.278 680.242 L875.718 680.242 L875.159 680.242 L874.6 680.242 L874.041 680.242 L873.481 680.242 L872.922 680.242 L872.363 680.242 L871.804 680.242 L871.244 680.242 L870.685 680.242 L870.126 680.242 L869.567 680.242 L869.007 680.242 L868.448 680.242 L867.889 680.242 L867.33 680.242 L866.77 680.242 L866.211 680.242 L865.652 680.242 L865.093 680.242 L864.533 680.242 L863.974 680.242 L863.415 680.242 L862.856 680.242 L862.296 680.242 L861.737 680.242 L861.178 680.242 L860.619 680.242 L860.059 680.242 L859.5 680.242 L858.941 680.242 L858.382 680.242 L857.822 680.242 L857.263 680.242 L856.704 680.242 L856.145 680.242 L855.585 680.242 L855.026 680.242 L854.467 680.242 L853.908 680.242 L853.348 680.242 L852.789 680.242 L852.23 680.242 L851.671 680.242 L851.111 680.242 L850.552 680.242 L849.993 680.242 L849.434 680.242 L848.874 680.242 L848.315 680.242 L847.756 680.242 L847.197 680.242 L846.637 680.242 L846.078 680.242 L845.519 680.242 L844.96 680.242 L844.4 680.242 L843.841 680.242 L843.282 680.242 L842.723 680.242 L842.163 680.242 L841.604 680.242 L841.045 680.242 L840.486 680.242 L839.926 680.242 L839.367 680.242 L838.808 680.242 L838.249 680.242 L837.689 680.242 L837.13 680.242 L836.571 680.242 L836.012 680.242 L835.452 680.242 L834.893 680.242 L834.334 680.242 L833.775 680.242 L833.215 680.242 L832.656 680.242 L832.097 680.242 L831.538 680.242 L830.978 680.242 L830.419 680.242 L829.86 680.242 L829.301 680.242 L828.741 680.242 L828.182 680.242 L827.623 680.242 L827.064 680.242 L826.504 680.242 L825.945 680.242 L825.386 680.242 L824.827 680.242 L824.267 680.242 L823.708 680.242 L823.149 680.242 L822.59 680.242 L822.03 680.242 L821.471 680.242 L820.912 680.242 L820.353 680.242 L819.793 680.242 L819.234 680.242 L818.675 680.242 L818.116 680.242 L817.556 680.242 L816.997 680.242 L816.438 680.242 L815.879 680.242 L815.319 680.242 L814.76 680.242 L814.201 680.242 L813.642 680.242 L813.082 680.242 L812.523 680.242 L811.964 680.242 L811.405 680.242 L810.845 680.242 L810.286 680.242 L809.727 680.242 L809.168 680.242 L808.608 680.242 L808.049 680.242 L807.49 680.242 L806.931 680.242 L806.371 680.242 L805.812 680.242 L805.253 680.242 L804.693 680.242 L804.134 680.242 L803.575 680.242 L803.016 680.242 L802.456 680.242 L801.897 680.242 L801.338 680.242 L800.779 680.242 L800.219 680.242 L799.66 680.242 L799.101 680.242 L798.542 680.242 L797.982 680.242 L797.423 680.242 L796.864 680.242 L796.305 680.242 L795.745 680.242 L795.186 680.242 L794.627 680.242 L794.068 680.242 L793.508 680.242 L792.949 680.242 L792.39 680.242 L791.831 680.242 L791.271 680.242 L790.712 680.242 L790.153 680.242 L789.594 680.242 L789.034 680.242 L788.475 680.242 L787.916 680.242 L787.357 680.242 L786.797 680.242 L786.238 680.242 L785.679 680.242 L785.12 680.242 L784.56 680.242 L784.001 680.242 L783.442 680.242 L782.883 680.242 L782.323 680.242 L781.764 680.242 L781.205 680.242 L780.646 680.242 L780.086 680.242 L779.527 680.242 L778.968 680.242 L778.409 680.242 L777.849 680.242 L777.29 680.242 L776.731 680.242 L776.172 680.242 L775.612 680.242 L775.053 680.242 L774.494 680.242 L773.935 680.242 L773.375 680.242 L772.816 680.242 L772.257 680.242 L771.698 680.242 L771.138 680.242 L770.579 680.242 L770.02 680.242 L769.461 680.242 L768.901 680.242 L768.342 680.242 L767.783 680.242 L767.224 680.242 L766.664 680.242 L766.105 680.242 L765.546 680.242 L764.987 680.242 L764.427 680.242 L763.868 680.242 L763.309 680.242 L762.75 680.242 L762.19 680.242 L761.631 680.242 L761.072 680.242 L760.513 680.242 L759.953 680.242 L759.394 680.242 L758.835 680.242 L758.276 680.242 L757.716 680.242 L757.157 680.242 L756.598 680.242 L756.039 680.242 L755.479 680.242 L754.92 680.242 L754.361 680.242 L753.802 680.242 L753.242 680.242 L752.683 680.242 L752.124 680.242 L751.565 680.242 L751.005 680.242 L750.446 680.242 L749.887 680.242 L749.328 680.242 L748.768 680.242 L748.209 680.242 L747.65 680.242 L747.091 680.242 L746.531 680.242 L745.972 680.242 L745.413 680.242 L744.854 680.242 L744.294 680.242 L743.735 680.242 L743.176 680.242 L742.617 680.242 L742.057 680.242 L741.498 680.242 L740.939 680.242 L740.38 680.242 L739.82 680.242 L739.261 680.242 L738.702 680.242 L738.143 680.242 L737.583 680.242 L737.024 680.242 L736.465 680.242 L735.906 680.242 L735.346 680.242 L734.787 680.242 L734.228 680.242 L733.669 680.242 L733.109 680.242 L732.55 680.242 L731.991 680.242 L731.432 680.242 L730.872 680.242 L730.313 680.242 L729.754 680.242 L729.195 680.242 L728.635 680.242 L728.076 680.242 L727.517 680.242 L726.958 680.242 L726.398 680.242 L725.839 680.242 L725.28 680.242 L724.721 680.242 L724.161 680.242 L723.602 680.242 L723.043 680.242 L722.484 680.242 L721.924 680.242 L721.365 680.242 L720.806 680.242 L720.247 680.242  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.404 720.806,684.404 721.365,684.404 721.924,684.404 722.484,684.404 723.043,684.404 723.602,684.404 724.161,684.404 724.721,684.404 725.28,684.404 725.839,684.404 726.398,684.404 726.958,684.404 727.517,684.404 728.076,684.404 728.635,684.404 729.195,684.404 729.754,684.404 730.313,684.404 730.872,684.404 731.432,684.404 731.991,684.404 732.55,684.404 733.109,684.404 733.669,684.404 734.228,684.404 734.787,684.404 735.346,684.404 735.906,684.404 736.465,684.404 737.024,684.404 737.583,684.404 738.143,684.404 738.702,684.404 739.261,684.404 739.82,684.404 740.38,684.404 740.939,684.404 741.498,684.404 742.057,684.404 742.617,684.404 743.176,684.404 743.735,684.404 744.294,684.404 744.854,684.404 745.413,684.404 745.972,684.404 746.531,684.404 747.091,684.404 747.65,684.404 748.209,684.404 748.768,684.404 749.328,684.404 749.887,684.404 750.446,684.404 751.005,684.404 751.565,684.404 752.124,684.404 752.683,684.404 753.242,684.404 753.802,684.404 754.361,684.404 754.92,684.404 755.479,684.404 756.039,684.404 756.598,684.404 757.157,684.404 757.716,684.404 758.276,684.404 758.835,684.404 759.394,684.404 759.953,684.404 760.513,684.404 761.072,684.404 761.631,684.404 762.19,684.404 762.75,684.404 763.309,684.404 763.868,684.404 764.427,684.404 764.987,684.404 765.546,684.404 766.105,684.404 766.664,684.404 767.224,684.404 767.783,684.404 768.342,684.404 768.901,684.404 769.461,684.404 770.02,684.404 770.579,684.404 771.138,684.404 771.698,684.404 772.257,684.404 772.816,684.404 773.375,684.404 773.935,684.404 774.494,684.404 775.053,684.404 775.612,684.404 776.172,684.404 776.731,684.404 777.29,684.404 777.849,684.404 778.409,684.404 778.968,684.404 779.527,684.404 780.086,684.404 780.646,684.404 781.205,684.404 781.764,684.404 782.323,684.404 782.883,684.404 783.442,684.404 784.001,684.404 784.56,684.404 785.12,684.404 785.679,684.404 786.238,684.404 786.797,684.404 787.357,684.404 787.916,684.404 788.475,684.404 789.034,684.404 789.594,684.404 790.153,684.404 790.712,684.404 791.271,684.404 791.831,684.404 792.39,684.404 792.949,684.404 793.508,684.404 794.068,684.404 794.627,684.404 795.186,684.404 795.745,684.404 796.305,684.404 796.864,684.404 797.423,684.404 797.982,684.404 798.542,684.404 799.101,684.404 799.66,684.404 800.219,684.404 800.779,684.404 801.338,684.404 801.897,684.404 802.456,684.404 803.016,684.404 803.575,684.404 804.134,684.404 804.693,684.404 805.253,684.404 805.812,684.404 806.371,684.404 806.931,684.404 807.49,684.404 808.049,684.404 808.608,684.404 809.168,684.404 809.727,684.404 810.286,684.404 810.845,684.404 811.405,684.404 811.964,684.404 812.523,684.404 813.082,684.404 813.642,684.404 814.201,684.404 814.76,684.404 815.319,684.404 815.879,684.404 816.438,684.404 816.997,684.404 817.556,684.404 818.116,684.404 818.675,684.404 819.234,684.404 819.793,684.404 820.353,684.404 820.912,684.404 821.471,684.404 822.03,684.404 822.59,684.404 823.149,684.404 823.708,684.404 824.267,684.404 824.827,684.404 825.386,684.404 825.945,684.404 826.504,684.404 827.064,684.404 827.623,684.404 828.182,684.404 828.741,684.404 829.301,684.404 829.86,684.404 830.419,684.404 830.978,684.404 831.538,684.404 832.097,684.404 832.656,684.404 833.215,684.404 833.775,684.404 834.334,684.404 834.893,684.404 835.452,684.404 836.012,684.404 836.571,684.404 837.13,684.404 837.689,684.404 838.249,684.404 838.808,684.404 839.367,684.404 839.926,684.404 840.486,684.404 841.045,684.404 841.604,684.404 842.163,684.404 842.723,684.404 843.282,684.404 843.841,684.404 844.4,684.404 844.96,684.404 845.519,684.404 846.078,684.404 846.637,684.404 847.197,684.404 847.756,684.404 848.315,684.404 848.874,684.404 849.434,684.404 849.993,684.404 850.552,684.404 851.111,684.404 851.671,684.404 852.23,684.404 852.789,684.404 853.348,684.404 853.908,684.404 854.467,684.404 855.026,684.404 855.585,684.404 856.145,684.404 856.704,684.404 857.263,684.404 857.822,684.404 858.382,684.404 858.941,684.404 859.5,684.404 860.059,684.404 860.619,684.404 861.178,684.404 861.737,684.404 862.296,684.404 862.856,684.404 863.415,684.404 863.974,684.404 864.533,684.404 865.093,684.404 865.652,684.404 866.211,684.404 866.77,684.404 867.33,684.404 867.889,684.404 868.448,684.404 869.007,684.404 869.567,684.404 870.126,684.404 870.685,684.404 871.244,684.404 871.804,684.404 872.363,684.404 872.922,684.404 873.481,684.404 874.041,684.404 874.6,684.404 875.159,684.404 875.718,684.404 876.278,684.404 876.837,684.404 877.396,684.404 877.955,684.404 878.515,684.404 879.074,684.404 879.633,684.404 880.192,684.404 880.752,684.404 881.311,684.404 881.87,684.404 882.429,684.404 882.989,684.404 883.548,684.404 884.107,684.404 884.666,684.404 885.226,684.404 885.785,684.404 886.344,684.404 886.903,684.404 887.463,684.404 888.022,684.404 888.581,684.404 889.14,684.404 889.7,684.404 890.259,684.404 890.818,684.404 891.377,684.404 891.937,684.404 892.496,684.404 893.055,684.404 893.614,684.404 894.174,684.404 894.733,684.404 895.292,684.404 895.851,684.404 896.411,684.404 896.97,684.404 897.529,684.404 898.088,684.404 898.648,684.404 899.207,684.404 899.766,684.404 900.325,684.404 900.885,684.404 901.444,684.404 902.003,684.404 902.562,684.404 903.122,684.404 903.681,684.404 904.24,684.404 904.799,684.404 905.359,684.404 905.918,684.404 906.477,684.404 907.036,684.404 907.596,684.404 908.155,684.404 908.714,684.404 909.273,684.404 909.833,684.404 910.392,684.404 910.951,684.404 911.51,684.404 912.07,684.404 912.629,684.404 913.188,684.404 913.747,684.404 914.307,684.404 914.866,684.404 915.425,684.404 915.984,684.404 916.544,684.404 917.103,684.404 917.662,684.404 918.221,684.404 918.781,684.404 919.34,684.404 919.899,684.404 920.458,684.404 921.018,684.404 921.577,684.404 922.136,684.404 922.695,684.404 923.255,684.404 923.814,684.404 924.373,684.404 924.932,684.404 925.492,684.404 926.051,684.404 926.61,684.404 927.169,684.404 927.729,684.404 928.288,684.404 928.847,684.404 929.406,684.404 929.966,684.404 930.525,684.404 931.084,684.404 931.644,684.404 932.203,684.404 932.762,684.404 933.321,684.404 933.881,684.404 934.44,684.404 934.999,684.404 935.558,684.404 936.118,684.404 936.677,684.404 937.236,684.404 937.795,684.404 938.355,684.404 938.914,684.404 939.473,684.404 940.032,684.404 940.592,684.404 941.151,684.404 941.71,684.404 942.269,684.404 942.829,684.404 943.388,684.404 943.947,684.404 944.506,684.404 945.066,684.404 945.625,684.404 946.184,684.404 946.743,684.404 947.303,684.404 947.862,684.404 948.421,684.404 948.98,684.404 949.54,684.404 950.099,684.404 950.658,684.404 951.217,684.404 951.777,684.404 952.336,684.404 952.895,684.404 953.454,684.404 954.014,684.404 954.573,684.404 955.132,684.404 955.691,684.404 956.251,684.404 956.81,684.404 957.369,684.404 957.928,684.404 958.488,684.404 959.047,684.404 959.606,684.404 960.165,684.404 960.725,684.404 961.284,684.404 961.843,684.404 962.402,684.404 962.962,684.404 963.521,684.404 964.08,684.404 964.639,684.404 965.199,684.404 965.758,684.404 966.317,684.404 966.876,684.404 967.436,684.404 967.995,684.404 968.554,684.404 969.113,684.404 969.673,684.404 970.232,684.404 970.791,684.404 971.35,684.404 971.91,684.404 972.469,684.404 973.028,684.404 973.587,684.404 974.147,684.404 974.706,684.404 975.265,684.404 975.824,684.404 976.384,684.404 976.943,684.404 977.502,684.404 978.061,684.404 978.621,684.404 979.18,684.404 979.739,684.404 980.298,684.404 980.858,684.404 981.417,684.404 981.976,684.404 982.535,684.404 983.095,684.404 983.654,684.404 984.213,684.404 984.772,684.404 985.332,684.404 985.891,684.404 986.45,684.404 987.009,684.404 987.569,684.404 988.128,684.404 988.687,684.404 989.246,684.404 989.806,684.404 990.365,684.404 990.924,684.404 991.483,684.404 992.043,684.404 992.602,684.404 993.161,684.404 993.72,684.404 994.28,684.404 994.839,684.404 995.398,684.404 995.957,684.404 996.517,684.404 997.076,684.404 997.635,684.404 998.194,684.404 998.754,684.404 999.313,684.404 999.872,684.404 1000.43,684.404 1000.99,684.404 1001.55,684.404 1002.11,684.404 1002.67,684.404 1003.23,684.404 1003.79,684.404 1004.35,684.404 1004.91,684.404 1005.46,684.404 1006.02,684.404 1006.58,684.404 1007.14,684.404 1007.7,684.404 1008.26,684.404 1008.82,684.404 1009.38,684.404 1009.94,684.404 1010.5,684.404 1011.06,684.404 1011.62,684.404 1012.18,684.404 1012.73,684.404 1013.29,684.404 1013.85,684.404 1014.41,684.404 1014.97,684.404 1015.53,684.404 1016.09,684.404 1016.65,684.404 1017.21,684.404 1017.77,684.404 1018.33,684.404 1018.89,684.404 1019.45,684.404 1020.01,684.404 1020.56,684.404 1021.12,684.404 1021.68,684.404 1022.24,684.404 1022.8,684.404 1023.36,684.404 1023.92,684.404 1024.48,684.404 1025.04,684.404 1025.6,684.404 1026.16,684.404 1026.72,684.404 1027.28,684.404 1027.83,684.404 1028.39,684.404 1028.95,684.404 1029.51,684.404 1030.07,684.404 1030.63,684.404 1031.19,684.404 1031.75,684.404 1032.31,684.404 1032.87,684.404 1033.43,684.404 1033.99,684.404 1034.55,684.404 1035.1,684.404 1035.66,684.404 1036.22,684.404 1036.78,684.404 1037.34,684.404 1037.9,684.404 1038.46,684.404 1039.02,684.404 1039.58,684.404 1040.14,684.404 1040.7,684.404 1041.26,684.404 1041.82,684.404 1042.38,684.404 1042.93,684.404 1043.49,684.404 1044.05,684.404 1044.61,684.404 1045.17,684.404 1045.73,684.404 1046.29,684.404 1046.85,684.404 1047.41,684.404 1047.97,684.404 1048.53,684.404 1049.09,684.404 1049.65,684.404 1050.2,684.404 1050.76,684.404 1051.32,684.404 1051.88,684.404 1052.44,684.404 1053,684.404 1053.56,684.404 1054.12,684.404 1054.68,684.404 1055.24,684.404 1055.8,684.404 1056.36,684.404 1056.92,684.404 1057.48,684.404 1058.03,684.404 1058.59,684.404 1059.15,684.404 1059.71,684.404 1060.27,684.404 1060.83,684.404 1061.39,684.404 1061.95,684.404 1062.51,684.404 1063.07,684.404 1063.63,684.404 1064.19,684.404 1064.75,684.404 1065.3,684.404 1065.86,684.404 1066.42,684.404 1066.98,684.404 1067.54,684.404 1068.1,684.404 1068.66,684.404 1069.22,684.404 1069.78,684.404 1070.34,684.404 1070.9,684.404 1071.46,684.404 1072.02,684.404 1072.57,684.404 1073.13,684.404 1073.69,684.404 1074.25,684.404 1074.81,684.404 1075.37,684.404 1075.93,684.404 1076.49,684.404 1077.05,684.404 1077.61,684.404 1078.17,684.404 1078.73,684.404 1079.29,684.404 1079.85,684.404 1080.4,684.404 1080.96,684.404 1081.52,684.404 1082.08,684.404 1082.64,684.404 1083.2,684.404 1083.76,684.404 1084.32,684.404 1084.88,684.404 1085.44,684.404 1086,684.404 1086.56,684.404 1087.12,684.404 1087.67,684.404 1088.23,684.404 1088.79,684.404 1089.35,684.404 1089.91,684.404 1090.47,684.404 1091.03,684.404 1091.59,684.404 1092.15,684.404 1092.71,684.404 1093.27,684.404 1093.83,684.404 1094.39,684.404 1094.94,684.404 1095.5,684.404 1096.06,684.404 1096.62,684.404 1097.18,684.404 1097.74,684.404 1098.3,684.404 1098.86,684.404 1099.42,684.404 1099.98,684.404 1100.54,684.404 1101.1,684.404 1101.66,684.404 1102.22,684.404 1102.77,684.404 1103.33,684.404 1103.89,684.404 1104.45,684.404 1105.01,684.404 1105.57,684.404 1106.13,684.404 1106.69,684.404 1107.25,684.404 1107.81,684.404 1108.37,684.404 1108.93,684.404 1109.49,684.404 1110.04,684.404 1110.6,684.404 1111.16,684.404 1111.72,684.404 1112.28,684.404 1112.84,684.404 1113.4,684.404 1113.96,684.404 1114.52,684.404 1115.08,684.404 1115.64,684.404 1116.2,684.404 1116.76,684.404 1117.31,684.404 1117.87,684.404 1118.43,684.404 1118.99,684.404 1119.55,684.404 1120.11,684.404 1120.67,684.404 1121.23,684.404 1121.79,684.404 1122.35,684.404 1122.91,684.404 1123.47,684.404 1124.03,684.404 1124.59,684.404 1125.14,684.404 1125.7,684.404 1126.26,684.404 1126.82,684.404 1127.38,684.404 1127.94,684.404 1128.5,684.404 1129.06,684.404 1129.62,684.404 1130.18,684.404 1130.74,684.404 1131.3,684.404 1131.86,684.404 1132.41,684.404 1132.97,684.404 1133.53,684.404 1134.09,684.404 1134.65,684.404 1135.21,684.404 1135.77,684.404 1136.33,684.404 1136.89,684.404 1137.45,684.404 1138.01,684.404 1138.57,684.404 1139.13,684.404 1139.68,684.404 1140.24,684.404 1140.8,684.404 1141.36,684.404 1141.92,684.404 1142.48,684.404 1143.04,684.404 1143.6,684.404 1144.16,684.404 1144.72,684.404 1145.28,684.404 1145.84,684.404 1146.4,684.404 1146.96,684.404 1147.51,684.404 1148.07,684.404 1148.63,684.404 1149.19,684.404 1149.75,684.404 1150.31,684.404 1150.87,684.404 1151.43,684.404 1151.99,684.404 1152.55,684.404 1153.11,684.404 1153.67,684.404 1154.23,684.404 1154.78,684.404 1155.34,684.404 1155.9,684.404 1156.46,684.404 1157.02,684.404 1157.58,684.404 1158.14,684.404 1158.7,684.404 1159.26,684.404 1159.82,684.404 1160.38,684.404 1160.94,684.404 1161.5,684.404 1162.05,684.404 1162.61,684.404 1163.17,684.404 1163.73,684.404 1164.29,684.404 1164.85,684.404 1165.41,684.404 1165.97,684.404 1166.53,684.404 1167.09,684.404 1167.65,684.404 1168.21,684.404 1168.77,684.404 1169.33,684.404 1169.88,684.404 1170.44,684.404 1171,684.404 1171.56,684.404 1172.12,684.404 1172.68,684.404 1173.24,684.404 1173.8,684.404 1174.36,684.404 1174.92,684.404 1175.48,684.404 1176.04,684.404 1176.6,684.404 1177.15,684.404 1177.71,684.404 1178.27,684.404 1178.83,684.404 1179.39,684.404 1179.95,684.404 1180.51,684.404 1181.07,684.404 1181.63,684.404 1182.19,684.404 1182.75,684.404 1183.31,684.404 1183.87,684.404 1184.43,684.404 1184.98,684.404 1185.54,684.404 1186.1,684.404 1186.66,684.404 1187.22,684.404 1187.78,684.404 1188.34,684.404 1188.9,684.404 1189.46,684.404 1190.02,684.404 1190.58,684.404 1191.14,684.404 1191.7,684.404 1192.25,684.404 1192.81,684.404 1193.37,684.404 1193.93,684.404 1194.49,684.404 1195.05,684.404 1195.61,684.404 1196.17,684.404 1196.73,684.404 1197.29,684.404 1197.85,684.404 1198.41,684.404 1198.97,684.404 1199.52,684.404 1200.08,684.404 1200.64,684.404 1201.2,684.404 1201.76,684.404 1202.32,684.404 1202.88,684.404 1203.44,684.404 1204,684.404 1204.56,684.404 1205.12,684.404 1205.68,684.404 1206.24,684.404 1206.8,684.404 1207.35,684.404 1207.91,684.404 1208.47,684.404 1209.03,684.404 1209.59,684.404 1210.15,684.404 1210.71,684.404 1211.27,684.404 1211.83,684.404 1212.39,684.404 1212.95,684.404 1213.51,684.404 1214.07,684.404 1214.62,684.404 1215.18,684.404 1215.74,684.404 1216.3,684.404 1216.86,684.404 1217.42,684.404 1217.98,684.404 1218.54,684.404 1219.1,684.404 1219.66,684.404 1220.22,684.404 1220.78,684.404 1221.34,684.404 1221.89,684.404 1222.45,684.404 1223.01,684.404 1223.57,684.404 1224.13,684.404 1224.69,684.404 1225.25,684.404 1225.81,684.404 1226.37,684.404 1226.93,684.404 1227.49,684.404 1228.05,684.404 1228.61,684.404 1229.17,684.404 1229.72,684.404 1230.28,684.404 1230.84,684.404 1231.4,684.404 1231.96,684.404 1232.52,684.404 1233.08,684.404 1233.64,684.404 1234.2,684.404 1234.76,684.404 1235.32,684.404 1235.88,684.404 1236.44,684.404 1236.99,684.404 1237.55,684.404 1238.11,684.404 1238.67,684.404 1239.23,684.404 1239.79,684.404 1240.35,684.404 1240.91,684.404 1241.47,684.404 1242.03,684.404 1242.59,684.404 1243.15,684.404 1243.71,684.404 1244.26,684.404 1244.82,684.404 1245.38,684.404 1245.94,684.404 1246.5,684.404 1247.06,684.404 1247.62,684.404 1248.18,684.404 1248.74,684.404 1249.3,684.404 1249.86,684.404 1250.42,684.404 1250.98,684.404 1251.54,684.404 1252.09,684.404 1252.65,684.404 1253.21,684.404 1253.77,684.404 1254.33,684.404 1254.89,684.404 1255.45,684.404 1256.01,684.404 1256.57,684.404 1257.13,684.404 1257.69,684.404 1258.25,684.404 1258.81,684.404 1259.36,684.404 1259.92,684.404 1260.48,684.404 1261.04,684.404 1261.6,684.404 1262.16,684.404 1262.72,684.404 1263.28,684.404 1263.84,684.404 1264.4,684.404 1264.96,684.404 1265.52,684.404 1266.08,684.404 1266.63,684.404 1267.19,684.404 1267.75,684.404 1268.31,684.404 1268.87,684.404 1269.43,684.404 1269.99,684.404 1270.55,684.404 1271.11,684.404 1271.67,684.404 1272.23,684.404 1272.79,684.404 1273.35,684.404 1273.91,684.404 1274.46,684.404 1275.02,684.404 1275.58,684.404 1276.14,684.404 1276.7,684.404 1277.26,684.404 1277.82,684.404 1278.38,684.404 1278.94,684.404 1279.5,684.404 1280.06,684.404 1280.62,684.404 1281.18,684.404 1281.73,684.404 1282.29,684.404 1282.85,684.404 1283.41,684.404 1283.97,684.404 1284.53,684.404 1285.09,684.404 1285.65,684.404 1286.21,684.404 1286.77,684.404 1287.33,684.404 1287.89,684.404 1288.45,684.404 1289,684.404 1289.56,684.404 1290.12,684.404 1290.68,684.404 1291.24,684.404 1291.8,684.404 1292.36,684.404 1292.92,684.404 1293.48,684.404 1294.04,684.404 1294.6,684.404 1295.16,684.404 1295.72,684.404 1296.28,684.404 1296.83,684.404 1297.39,684.404 1297.95,684.404 1298.51,684.404 1299.07,684.404 1299.63,684.404 1300.19,684.404 1300.75,684.404 1301.31,684.404 1301.87,684.404 1302.43,684.404 1302.99,684.404 1303.55,684.404 1304.1,684.404 1304.66,684.404 1305.22,684.404 1305.78,684.404 1306.34,684.404 1306.9,684.404 1307.46,684.404 1308.02,684.404 1308.58,684.404 1309.14,684.404 1309.7,684.404 1310.26,684.404 1310.82,684.404 1311.38,684.404 1311.93,684.404 1312.49,684.404 1313.05,684.404 1313.61,684.404 1314.17,684.404 1314.73,684.404 1315.29,684.404 1315.85,684.404 1316.41,684.404 1316.97,684.404 1317.53,684.404 1318.09,684.404 1318.65,684.404 1319.2,684.404 1319.76,684.404 1320.32,684.404 1320.88,684.404 1321.44,684.404 1322,684.404 1322.56,684.404 1323.12,684.404 1323.68,684.404 1324.24,684.404 1324.8,684.404 1325.36,684.404 1325.92,684.404 1326.47,684.404 1327.03,684.404 1327.59,684.404 1328.15,684.404 1328.71,684.404 1329.27,684.404 1329.83,684.404 1330.39,684.404 1330.95,684.404 1331.51,684.404 1332.07,684.404 1332.63,684.404 1333.19,684.404 1333.75,684.404 1334.3,684.404 1334.86,684.404 1335.42,684.404 1335.98,684.404 1336.54,684.404 1337.1,684.404 1337.66,684.404 1338.22,684.404 1338.78,684.404 1339.34,684.404 1339.9,684.404 1340.46,684.404 1341.02,684.404 1341.57,684.404 1342.13,684.404 1342.69,684.404 1343.25,684.404 1343.81,684.404 1344.37,684.404 1344.93,684.404 1345.49,684.404 1346.05,684.404 1346.61,684.404 1347.17,684.404 1347.73,684.404 1348.29,684.404 1348.84,684.404 1349.4,684.404 1349.96,684.404 1350.52,684.404 1351.08,684.404 1351.64,684.404 1352.2,684.404 1352.76,684.404 1353.32,684.404 1353.88,684.404 1354.44,684.404 1355,684.404 1355.56,684.404 1356.12,684.404 1356.67,684.404 1357.23,684.404 1357.79,684.404 1358.35,684.404 1358.91,684.404 1359.47,684.404 1360.03,684.404 1360.59,684.404 1361.15,684.404 1361.71,684.404 1362.27,684.404 1362.83,684.404 1363.39,684.404 1363.94,684.404 1364.5,684.404 1365.06,684.404 1365.62,684.404 1366.18,684.404 1366.74,684.404 1367.3,684.404 1367.86,684.404 1368.42,684.404 1368.98,684.404 1369.54,684.404 1370.1,684.404 1370.66,684.404 1371.21,684.404 1371.77,684.404 1372.33,684.404 1372.89,684.404 1373.45,684.404 1374.01,684.404 1374.57,684.404 1375.13,684.404 1375.69,684.404 1376.25,684.404 1376.81,684.404 1377.37,684.404 1377.93,684.404 1378.49,684.404 1379.04,684.404 1379.6,684.404 1380.16,684.404 1380.72,684.404 1381.28,684.404 1381.84,684.404 1382.4,684.404 1382.96,684.404 1383.52,684.404 1384.08,684.404 1384.64,684.404 1385.2,684.404 1385.76,684.404 1386.31,684.404 1386.87,684.404 1387.43,684.404 1387.99,684.404 1388.55,684.404 1389.11,684.404 1389.67,684.404 1390.23,684.404 1390.79,684.404 1391.35,684.404 1391.91,684.404 1392.47,684.404 1393.03,684.404 1393.58,684.404 1394.14,684.404 1394.7,684.404 1395.26,684.404 1395.82,684.404 1396.38,684.404 1396.94,684.404 1397.5,684.404 1398.06,684.404 1398.62,684.404 1399.18,684.404 1399.74,684.404 1400.3,684.404 1400.86,684.404 1401.41,684.404 1401.97,684.404 1402.53,684.404 1403.09,684.404 1403.65,684.404 1404.21,684.404 1404.77,684.404 1405.33,684.404 1405.89,684.404 1406.45,684.404 1407.01,684.404 1407.57,684.404 1408.13,684.404 1408.68,684.404 1409.24,684.404 1409.8,684.404 1410.36,684.404 1410.92,684.404 1411.48,684.404 1412.04,684.404 1412.6,684.404 1413.16,684.404 1413.72,684.404 1414.28,684.404 1414.84,684.404 1415.4,684.404 1415.95,684.404 1416.51,684.404 1417.07,684.404 1417.63,684.404 1418.19,684.404 1418.75,684.404 1419.31,684.404 1419.87,684.404 1420.43,684.404 1420.99,684.404 1421.55,684.404 1422.11,684.404 1422.67,684.404 1423.23,684.404 1423.78,684.404 1424.34,684.404 1424.9,684.404 1425.46,684.404 1426.02,684.404 1426.58,684.404 1427.14,684.404 1427.7,684.404 1428.26,684.404 1428.82,684.404 1429.38,684.404 1429.94,684.404 1430.5,684.404 1431.05,684.404 1431.61,684.404 1432.17,684.404 1432.73,684.404 1433.29,684.404 1433.85,684.404 1434.41,684.404 1434.97,684.404 1435.53,684.404 1436.09,684.404 1436.65,684.404 1437.21,684.404 1437.77,684.404 1438.33,684.404 1438.88,684.404 1439.44,684.404 1440,684.404 1440.56,684.404 1441.12,684.404 1441.68,684.404 1442.24,684.404 1442.8,684.404 1443.36,684.404 1443.92,684.404 1444.48,684.404 1445.04,684.404 1445.6,684.404 1446.15,684.404 1446.71,684.404 1447.27,684.404 1447.83,684.404 1448.39,684.404 1448.95,684.404 1449.51,684.404 1450.07,684.404 1450.63,684.404 1451.19,684.404 1451.75,684.404 1452.31,684.404 1452.87,684.404 1453.42,684.404 1453.98,684.404 1454.54,684.404 1455.1,684.404 1455.66,684.404 1456.22,684.404 1456.78,684.404 1457.34,684.404 1457.9,684.404 1458.46,684.404 1459.02,684.404 1459.58,684.404 1460.14,684.404 1460.7,684.404 1461.25,684.404 1461.81,684.404 1462.37,684.404 1462.93,684.404 1463.49,684.404 1464.05,684.404 1464.61,684.404 1465.17,684.404 1465.73,684.404 1466.29,684.404 1466.85,684.404 1467.41,684.404 1467.97,684.404 1468.52,684.404 1469.08,684.404 1469.64,684.404 1470.2,684.404 1470.76,684.404 1471.32,684.404 1471.88,684.404 1472.44,684.404 1473,684.404 1473.56,684.404 1474.12,684.404 1474.68,684.404 1475.24,684.404 1475.79,684.404 1476.35,684.404 1476.91,684.404 1477.47,684.404 1478.03,684.404 1478.59,684.404 1479.15,684.404 1479.71,684.404 1480.27,684.404 1480.83,684.404 1481.39,684.404 1481.95,684.404 1482.51,684.404 1483.07,684.404 1483.62,684.404 1484.18,684.404 1484.74,684.404 1485.3,684.404 1485.86,684.404 1486.42,684.404 1486.98,684.404 1487.54,684.404 1488.1,684.404 1488.66,684.404 1489.22,684.404 1489.78,684.404 1490.34,684.404 1490.89,684.404 1491.45,684.404 1492.01,684.404 1492.57,684.404 1493.13,684.404 1493.69,684.404 1494.25,684.404 1494.81,684.404 1495.37,684.404 1495.93,684.404 1496.49,684.404 1497.05,684.404 1497.61,684.404 1498.16,684.404 1498.72,684.404 1499.28,684.404 1499.84,684.404 1500.4,684.404 1500.96,684.404 1501.52,684.404 1502.08,684.404 1502.64,684.404 1503.2,684.404 1503.76,684.404 1504.32,684.404 1504.88,684.404 1505.44,684.404 1505.99,684.404 1506.55,684.404 1507.11,684.404 1507.67,684.404 1508.23,684.404 1508.79,684.404 1509.35,684.404 1509.91,684.404 1510.47,684.404 1511.03,684.404 1511.59,684.404 1512.15,684.404 1512.71,684.404 1513.26,684.404 1513.82,684.404 1514.38,684.404 1514.94,684.404 1515.5,684.404 1516.06,684.404 1516.62,684.404 1517.18,684.404 1517.74,684.404 1518.3,684.404 1518.86,684.404 1519.42,684.404 1519.98,684.404 1520.53,684.404 1521.09,684.404 1521.65,684.404 1522.21,684.404 1522.77,684.404 1523.33,684.404 1523.89,684.404 1524.45,684.404 1525.01,684.404 1525.57,684.404 1526.13,684.404 1526.69,684.404 1527.25,684.404 1527.81,684.404 1528.36,684.404 1528.92,684.404 1529.48,684.404 1530.04,684.404 1530.6,684.404 1531.16,684.404 1531.72,684.404 1532.28,684.404 1532.84,684.404 1533.4,684.404 1533.96,684.404 1534.52,684.404 1535.08,684.404 1535.63,684.404 1536.19,684.404 1536.75,684.404 1537.31,684.404 1537.87,684.404 1538.43,684.404 1538.99,684.404 1539.55,684.404 1540.11,684.404 1540.67,684.404 1541.23,684.404 1541.79,684.404 1542.35,684.404 1542.9,684.404 1543.46,684.404 1544.02,684.404 1544.58,684.404 1545.14,684.404 1545.7,684.404 1546.26,684.404 1546.82,684.404 1547.38,684.404 1547.94,684.404 1548.5,684.404 1549.06,684.404 1549.62,684.404 1550.18,684.404 1550.73,684.404 1551.29,684.404 1551.85,684.404 1552.41,684.404 1552.97,684.404 1553.53,684.404 1554.09,684.404 1554.65,684.404 1555.21,684.404 1555.77,684.404 1556.33,684.404 1556.89,684.404 1557.45,684.404 1558,684.404 1558.56,684.404 1559.12,684.404 1559.68,684.404 1560.24,684.404 1560.8,684.404 1561.36,684.404 1561.92,684.404 1562.48,684.404 1563.04,684.404 1563.6,684.404 1564.16,684.404 1564.72,684.404 1565.28,684.404 1565.83,684.404 1566.39,684.404 1566.95,684.404 1567.51,684.404 1568.07,684.404 1568.63,684.404 1569.19,684.404 1569.75,684.404 1570.31,684.404 1570.87,684.404 1571.43,684.404 1571.99,684.404 1572.55,684.404 1573.1,684.404 1573.66,684.404 1574.22,684.404 1574.78,684.404 1575.34,684.404 1575.9,684.404 1576.46,684.404 1577.02,684.404 1577.58,684.404 1578.14,684.404 1578.7,684.404 1579.26,684.404 1579.82,684.404 1580.37,684.404 1580.93,684.404 1581.49,684.404 1582.05,684.404 1582.61,684.404 1583.17,684.404 1583.73,684.404 1584.29,684.404 1584.85,684.404 1585.41,684.404 1585.97,684.404 1586.53,684.404 1587.09,684.404 1587.65,684.404 1588.2,684.404 1588.76,684.404 1589.32,684.404 1589.88,684.404 1590.44,684.404 1591,684.404 1591.56,684.404 1592.12,684.404 1592.68,684.404 1593.24,684.404 1593.8,684.404 1594.36,684.404 1594.92,684.404 1595.47,684.404 1596.03,684.404 1596.59,684.404 1597.15,684.404 1597.71,684.404 1598.27,684.404 1598.83,684.404 1599.39,684.404 1599.95,684.404 1600.51,684.404 1601.07,684.404 1601.63,684.404 1602.19,684.404 1602.74,684.404 1603.3,684.404 1603.86,684.404 1604.42,684.404 1604.98,684.404 1605.54,684.404 1606.1,684.404 1606.66,684.404 1607.22,684.404 1607.78,684.404 1608.34,684.404 1608.9,684.404 1609.46,684.404 1610.02,684.404 1610.57,684.404 1611.13,684.404 1611.69,684.404 1612.25,684.404 1612.81,684.404 1613.37,684.404 1613.93,684.404 1614.49,684.404 1615.05,684.404 1615.61,684.404 1616.17,684.404 1616.73,684.404 1617.29,684.404 1617.84,684.404 1618.4,684.404 1618.96,684.404 1619.52,684.404 1620.08,684.404 1620.64,684.404 1621.2,684.404 1621.76,684.404 1622.32,684.404 1622.88,684.404 1623.44,684.404 1624,684.404 1624.56,684.404 1625.11,684.404 1625.67,684.404 1626.23,684.404 1626.79,684.404 1627.35,684.404 1627.91,684.404 1628.47,684.404 1629.03,684.404 1629.59,684.404 1630.15,684.404 1630.71,684.404 1631.27,684.404 1631.83,684.404 1632.39,684.404 1632.94,684.404 1633.5,684.404 1634.06,684.404 1634.62,684.404 1635.18,684.404 1635.74,684.404 1636.3,684.404 1636.86,684.404 1637.42,684.404 1637.98,684.404 1638.54,684.404 1639.1,684.404 1639.66,684.404 1640.21,684.404 1640.77,684.404 1641.33,684.404 1641.89,684.404 1642.45,684.404 1643.01,684.404 1643.57,684.404 1644.13,684.404 1644.69,684.404 1645.25,684.404 1645.81,684.404 1646.37,684.404 1646.93,684.404 1647.48,684.404 1648.04,684.404 1648.6,684.404 1649.16,684.404 1649.72,684.404 1650.28,684.404 1650.84,684.404 1651.4,684.404 1651.96,684.404 1652.52,684.404 1653.08,684.404 1653.64,684.404 1654.2,684.404 1654.76,684.404 1655.31,684.404 1655.87,684.404 1656.43,684.404 1656.99,684.404 1657.55,684.404 1658.11,684.404 1658.67,684.404 1659.23,684.404 1659.79,684.404 1660.35,684.404 1660.91,684.404 1661.47,684.404 1662.03,684.404 1662.58,684.404 1663.14,684.404 1663.7,684.404 1664.26,684.404 1664.82,684.404 1665.38,684.404 1665.94,684.404 1666.5,684.404 1667.06,684.404 1667.62,684.404 1668.18,684.404 1668.74,684.404 1669.3,684.404 1669.85,684.404 1670.41,684.404 1670.97,684.404 1671.53,684.404 1672.09,684.404 1672.65,684.404 1673.21,684.404 1673.77,684.404 1674.33,684.404 1674.89,684.404 1675.45,684.404 1676.01,684.404 1676.57,684.404 1677.13,684.404 1677.68,684.404 1678.24,684.404 1678.8,684.404 1679.36,684.404 1679.92,684.404 1680.48,684.404 1681.04,684.404 1681.6,684.404 1682.16,684.404 1682.72,684.404 1683.28,684.404 1683.84,684.404 1684.4,684.404 1684.95,684.404 1685.51,684.404 1686.07,684.404 1686.63,684.404 1687.19,684.404 1687.75,684.404 1688.31,684.404 1688.87,684.404 1689.43,684.404 1689.99,684.404 1690.55,684.404 1691.11,684.404 1691.67,684.404 1692.23,684.404 1692.78,684.404 1693.34,684.404 1693.9,684.404 1694.46,684.404 1695.02,684.404 1695.58,684.404 1696.14,684.404 1696.7,684.404 1697.26,684.404 1697.82,684.404 1698.38,684.404 1698.94,684.404 1699.5,684.404 1700.05,684.404 1700.61,684.404 1701.17,684.404 1701.73,684.404 1702.29,684.404 1702.85,684.404 1703.41,684.404 1703.97,684.404 1704.53,684.404 1705.09,684.404 1705.65,684.404 1706.21,684.404 1706.77,684.404 1707.32,684.404 1707.88,684.404 1708.44,684.404 1709,684.404 1709.56,684.404 1710.12,684.404 1710.68,684.404 1711.24,684.404 1711.8,684.404 1712.36,684.404 1712.92,684.404 1713.48,684.404 1714.04,684.404 1714.6,684.404 1715.15,684.404 1715.71,684.404 1716.27,684.404 1716.83,684.404 1717.39,684.404 1717.95,684.404 1718.51,684.404 1719.07,684.404 1719.63,684.404 1720.19,684.404 1720.75,684.404 1721.31,684.404 1721.87,684.404 1722.42,684.404 1722.98,684.404 1723.54,684.404 1724.1,684.404 1724.66,684.404 1725.22,684.404 1725.78,684.404 1726.34,684.404 1726.9,684.404 1727.46,684.404 1728.02,684.404 1728.58,684.404 1729.14,684.404 1729.69,684.404 1730.25,684.404 1730.81,684.404 1731.37,684.404 1731.93,684.404 1732.49,684.404 1733.05,684.404 1733.61,684.404 1734.17,684.404 1734.73,684.404 1735.29,684.404 1735.85,684.404 1736.41,684.404 1736.97,684.404 1737.52,684.404 1738.08,684.404 1738.64,684.404 1739.2,684.404 1739.76,684.404 1740.32,684.404 1740.88,684.404 1741.44,684.404 1742,684.404 1742.56,684.404 1743.12,684.404 1743.68,684.404 1744.24,684.404 1744.79,684.404 1745.35,684.404 1745.91,684.404 1746.47,684.404 1747.03,684.404 1747.59,684.404 1748.15,684.404 1748.71,684.404 1749.27,684.404 1749.83,684.404 1750.39,684.404 1750.95,684.404 1751.51,684.404 1752.06,684.404 1752.62,684.404 1753.18,684.404 1753.74,684.404 1754.3,684.404 1754.86,684.404 1755.42,684.404 1755.98,684.404 1756.54,684.404 1757.1,684.404 1757.66,684.404 1758.22,684.404 1758.78,684.404 1759.34,684.404 1759.89,684.404 1760.45,684.404 1761.01,684.404 1761.57,684.404 1762.13,684.404 1762.69,684.404 1763.25,684.404 1763.81,684.404 1764.37,684.404 1764.93,684.404 1765.49,684.404 1766.05,684.404 1766.61,684.404 1767.16,684.404 1767.72,684.404 1768.28,684.404 1768.84,684.404 1769.4,684.404 1769.96,684.404 1770.52,684.404 1771.08,684.404 1771.64,684.404 1772.2,684.404 1772.76,684.404 1773.32,684.404 1773.88,684.404 1774.43,684.404 1774.99,684.404 1775.55,684.404 1776.11,684.404 1776.67,684.404 1777.23,684.404 1777.79,684.404 1778.35,684.404 1778.91,684.404 1779.47,684.404 1780.03,684.404 1780.59,684.404 1781.15,684.404 1781.71,684.404 1782.26,684.404 1782.82,684.404 1783.38,684.404 1783.94,684.404 1784.5,684.404 1785.06,684.404 1785.62,684.404 1786.18,684.404 1786.74,684.404 1787.3,684.404 1787.86,684.404 1788.42,684.404 1788.98,684.404 1789.53,684.404 1790.09,684.404 1790.65,684.404 1791.21,684.404 1791.77,684.404 1792.33,684.404 1792.89,684.404 1793.45,684.404 1794.01,684.404 1794.57,684.404 1795.13,684.404 1795.69,684.404 1796.25,684.404 1796.8,684.404 1797.36,684.404 1797.92,684.404 1798.48,684.404 1799.04,684.404 1799.6,684.404 1800.16,684.404 1800.72,684.404 1801.28,684.404 1801.84,684.404 1802.4,684.404 1802.96,684.404 1803.52,684.404 1804.08,684.404 1804.63,684.404 1805.19,684.404 1805.75,684.404 1806.31,684.404 1806.87,684.404 1807.43,684.404 1807.99,684.404 1808.55,684.404 1809.11,684.404 1809.67,684.404 1810.23,684.404 1810.79,684.404 1811.35,684.404 1811.9,684.404 1812.46,684.404 1813.02,684.404 1813.58,684.404 1814.14,684.404 1814.7,684.404 1815.26,684.404 1815.82,684.404 1816.38,684.404 1816.94,684.404 1817.5,684.404 1818.06,684.404 1818.62,684.404 1819.18,684.404 1819.73,684.404 1820.29,684.404 1820.85,684.404 1821.41,684.404 1821.97,684.404 1822.53,684.404 1823.09,684.404 1823.65,684.404 1824.21,684.404 1824.77,684.404 1825.33,684.404 1825.89,684.404 1826.45,684.404 1827,684.404 1827.56,684.404 1828.12,684.404 1828.68,684.404 1829.24,684.404 1829.8,684.404 1830.36,684.404 1830.92,684.404 1831.48,684.404 1832.04,684.404 1832.6,684.404 1833.16,684.404 1833.72,684.404 1834.27,684.404 1834.83,684.404 1835.39,684.404 1835.95,684.404 1836.51,684.404 1837.07,684.404 1837.63,684.404 1838.19,684.404 \"/>\n<path clip-path=\"url(#clip703)\" d=\"M720.247 684.781 L720.806 684.781 L721.365 684.781 L721.924 684.781 L722.484 684.781 L723.043 684.781 L723.602 684.781 L724.161 684.781 L724.721 684.781 L725.28 684.781 L725.839 684.781 L726.398 684.781 L726.958 684.781 L727.517 684.781 L728.076 684.781 L728.635 684.781 L729.195 684.781 L729.754 684.781 L730.313 684.781 L730.872 684.781 L731.432 684.781 L731.991 684.781 L732.55 684.781 L733.109 684.781 L733.669 684.781 L734.228 684.781 L734.787 684.781 L735.346 684.781 L735.906 684.781 L736.465 684.781 L737.024 684.781 L737.583 684.781 L738.143 684.781 L738.702 684.781 L739.261 684.781 L739.82 684.781 L740.38 684.781 L740.939 684.781 L741.498 684.781 L742.057 684.781 L742.617 684.781 L743.176 684.781 L743.735 684.781 L744.294 684.781 L744.854 684.781 L745.413 684.781 L745.972 684.781 L746.531 684.781 L747.091 684.781 L747.65 684.781 L748.209 684.781 L748.768 684.781 L749.328 684.781 L749.887 684.781 L750.446 684.781 L751.005 684.781 L751.565 684.781 L752.124 684.781 L752.683 684.781 L753.242 684.781 L753.802 684.781 L754.361 684.781 L754.92 684.781 L755.479 684.781 L756.039 684.781 L756.598 684.781 L757.157 684.781 L757.716 684.781 L758.276 684.781 L758.835 684.781 L759.394 684.781 L759.953 684.781 L760.513 684.781 L761.072 684.781 L761.631 684.781 L762.19 684.781 L762.75 684.781 L763.309 684.781 L763.868 684.781 L764.427 684.781 L764.987 684.781 L765.546 684.781 L766.105 684.781 L766.664 684.781 L767.224 684.781 L767.783 684.781 L768.342 684.781 L768.901 684.781 L769.461 684.781 L770.02 684.781 L770.579 684.781 L771.138 684.781 L771.698 684.781 L772.257 684.781 L772.816 684.781 L773.375 684.781 L773.935 684.781 L774.494 684.781 L775.053 684.781 L775.612 684.781 L776.172 684.781 L776.731 684.781 L777.29 684.781 L777.849 684.781 L778.409 684.781 L778.968 684.781 L779.527 684.781 L780.086 684.781 L780.646 684.781 L781.205 684.781 L781.764 684.781 L782.323 684.781 L782.883 684.781 L783.442 684.781 L784.001 684.781 L784.56 684.781 L785.12 684.781 L785.679 684.781 L786.238 684.781 L786.797 684.781 L787.357 684.781 L787.916 684.781 L788.475 684.781 L789.034 684.781 L789.594 684.781 L790.153 684.781 L790.712 684.781 L791.271 684.781 L791.831 684.781 L792.39 684.781 L792.949 684.781 L793.508 684.781 L794.068 684.781 L794.627 684.781 L795.186 684.781 L795.745 684.781 L796.305 684.781 L796.864 684.781 L797.423 684.781 L797.982 684.781 L798.542 684.781 L799.101 684.781 L799.66 684.781 L800.219 684.781 L800.779 684.781 L801.338 684.781 L801.897 684.781 L802.456 684.781 L803.016 684.781 L803.575 684.781 L804.134 684.781 L804.693 684.781 L805.253 684.781 L805.812 684.781 L806.371 684.781 L806.931 684.781 L807.49 684.781 L808.049 684.781 L808.608 684.781 L809.168 684.781 L809.727 684.781 L810.286 684.781 L810.845 684.781 L811.405 684.781 L811.964 684.781 L812.523 684.781 L813.082 684.781 L813.642 684.781 L814.201 684.781 L814.76 684.781 L815.319 684.781 L815.879 684.781 L816.438 684.781 L816.997 684.781 L817.556 684.781 L818.116 684.781 L818.675 684.781 L819.234 684.781 L819.793 684.781 L820.353 684.781 L820.912 684.781 L821.471 684.781 L822.03 684.781 L822.59 684.781 L823.149 684.781 L823.708 684.781 L824.267 684.781 L824.827 684.781 L825.386 684.781 L825.945 684.781 L826.504 684.781 L827.064 684.781 L827.623 684.781 L828.182 684.781 L828.741 684.781 L829.301 684.781 L829.86 684.781 L830.419 684.781 L830.978 684.781 L831.538 684.781 L832.097 684.781 L832.656 684.781 L833.215 684.781 L833.775 684.781 L834.334 684.781 L834.893 684.781 L835.452 684.781 L836.012 684.781 L836.571 684.781 L837.13 684.781 L837.689 684.781 L838.249 684.781 L838.808 684.781 L839.367 684.781 L839.926 684.781 L840.486 684.781 L841.045 684.781 L841.604 684.781 L842.163 684.781 L842.723 684.781 L843.282 684.781 L843.841 684.781 L844.4 684.781 L844.96 684.781 L845.519 684.781 L846.078 684.781 L846.637 684.781 L847.197 684.781 L847.756 684.781 L848.315 684.781 L848.874 684.781 L849.434 684.781 L849.993 684.781 L850.552 684.781 L851.111 684.781 L851.671 684.781 L852.23 684.781 L852.789 684.781 L853.348 684.781 L853.908 684.781 L854.467 684.781 L855.026 684.781 L855.585 684.781 L856.145 684.781 L856.704 684.781 L857.263 684.781 L857.822 684.781 L858.382 684.781 L858.941 684.781 L859.5 684.781 L860.059 684.781 L860.619 684.781 L861.178 684.781 L861.737 684.781 L862.296 684.781 L862.856 684.781 L863.415 684.781 L863.974 684.781 L864.533 684.781 L865.093 684.781 L865.652 684.781 L866.211 684.781 L866.77 684.781 L867.33 684.781 L867.889 684.781 L868.448 684.781 L869.007 684.781 L869.567 684.781 L870.126 684.781 L870.685 684.781 L871.244 684.781 L871.804 684.781 L872.363 684.781 L872.922 684.781 L873.481 684.781 L874.041 684.781 L874.6 684.781 L875.159 684.781 L875.718 684.781 L876.278 684.781 L876.837 684.781 L877.396 684.781 L877.955 684.781 L878.515 684.781 L879.074 684.781 L879.633 684.781 L880.192 684.781 L880.752 684.781 L881.311 684.781 L881.87 684.781 L882.429 684.781 L882.989 684.781 L883.548 684.781 L884.107 684.781 L884.666 684.781 L885.226 684.781 L885.785 684.781 L886.344 684.781 L886.903 684.781 L887.463 684.781 L888.022 684.781 L888.581 684.781 L889.14 684.781 L889.7 684.781 L890.259 684.781 L890.818 684.781 L891.377 684.781 L891.937 684.781 L892.496 684.781 L893.055 684.781 L893.614 684.781 L894.174 684.781 L894.733 684.781 L895.292 684.781 L895.851 684.781 L896.411 684.781 L896.97 684.781 L897.529 684.781 L898.088 684.781 L898.648 684.781 L899.207 684.781 L899.766 684.781 L900.325 684.781 L900.885 684.781 L901.444 684.781 L902.003 684.781 L902.562 684.781 L903.122 684.781 L903.681 684.781 L904.24 684.781 L904.799 684.781 L905.359 684.781 L905.918 684.781 L906.477 684.781 L907.036 684.781 L907.596 684.781 L908.155 684.781 L908.714 684.781 L909.273 684.781 L909.833 684.781 L910.392 684.781 L910.951 684.781 L911.51 684.781 L912.07 684.781 L912.629 684.781 L913.188 684.781 L913.747 684.781 L914.307 684.781 L914.866 684.781 L915.425 684.781 L915.984 684.781 L916.544 684.781 L917.103 684.781 L917.662 684.781 L918.221 684.781 L918.781 684.781 L919.34 684.781 L919.899 684.781 L920.458 684.781 L921.018 684.781 L921.577 684.781 L922.136 684.781 L922.695 684.781 L923.255 684.781 L923.814 684.781 L924.373 684.781 L924.932 684.781 L925.492 684.781 L926.051 684.781 L926.61 684.781 L927.169 684.781 L927.729 684.781 L928.288 684.781 L928.847 684.781 L929.406 684.781 L929.966 684.781 L930.525 684.781 L931.084 684.781 L931.644 684.781 L932.203 684.781 L932.762 684.781 L933.321 684.781 L933.881 684.781 L934.44 684.781 L934.999 684.781 L935.558 684.781 L936.118 684.781 L936.677 684.781 L937.236 684.781 L937.795 684.781 L938.355 684.781 L938.914 684.781 L939.473 684.781 L940.032 684.781 L940.592 684.781 L941.151 684.781 L941.71 684.781 L942.269 684.781 L942.829 684.781 L943.388 684.781 L943.947 684.781 L944.506 684.781 L945.066 684.781 L945.625 684.781 L946.184 684.781 L946.743 684.781 L947.303 684.781 L947.862 684.781 L948.421 684.781 L948.98 684.781 L949.54 684.781 L950.099 684.781 L950.658 684.781 L951.217 684.781 L951.777 684.781 L952.336 684.781 L952.895 684.781 L953.454 684.781 L954.014 684.781 L954.573 684.781 L955.132 684.781 L955.691 684.781 L956.251 684.781 L956.81 684.781 L957.369 684.781 L957.928 684.781 L958.488 684.781 L959.047 684.781 L959.606 684.781 L960.165 684.781 L960.725 684.781 L961.284 684.781 L961.843 684.781 L962.402 684.781 L962.962 684.781 L963.521 684.781 L964.08 684.781 L964.639 684.781 L965.199 684.781 L965.758 684.781 L966.317 684.781 L966.876 684.781 L967.436 684.781 L967.995 684.781 L968.554 684.781 L969.113 684.781 L969.673 684.781 L970.232 684.781 L970.791 684.781 L971.35 684.781 L971.91 684.781 L972.469 684.781 L973.028 684.781 L973.587 684.781 L974.147 684.781 L974.706 684.781 L975.265 684.781 L975.824 684.781 L976.384 684.781 L976.943 684.781 L977.502 684.781 L978.061 684.781 L978.621 684.781 L979.18 684.781 L979.739 684.781 L980.298 684.781 L980.858 684.781 L981.417 684.781 L981.976 684.781 L982.535 684.781 L983.095 684.781 L983.654 684.781 L984.213 684.781 L984.772 684.781 L985.332 684.781 L985.891 684.781 L986.45 684.781 L987.009 684.781 L987.569 684.781 L988.128 684.781 L988.687 684.781 L989.246 684.781 L989.806 684.781 L990.365 684.781 L990.924 684.781 L991.483 684.781 L992.043 684.781 L992.602 684.781 L993.161 684.781 L993.72 684.781 L994.28 684.781 L994.839 684.781 L995.398 684.781 L995.957 684.781 L996.517 684.781 L997.076 684.781 L997.635 684.781 L998.194 684.781 L998.754 684.781 L999.313 684.781 L999.872 684.781 L1000.43 684.781 L1000.99 684.781 L1001.55 684.781 L1002.11 684.781 L1002.67 684.781 L1003.23 684.781 L1003.79 684.781 L1004.35 684.781 L1004.91 684.781 L1005.46 684.781 L1006.02 684.781 L1006.58 684.781 L1007.14 684.781 L1007.7 684.781 L1008.26 684.781 L1008.82 684.781 L1009.38 684.781 L1009.94 684.781 L1010.5 684.781 L1011.06 684.781 L1011.62 684.781 L1012.18 684.781 L1012.73 684.781 L1013.29 684.781 L1013.85 684.781 L1014.41 684.781 L1014.97 684.781 L1015.53 684.781 L1016.09 684.781 L1016.65 684.781 L1017.21 684.781 L1017.77 684.781 L1018.33 684.781 L1018.89 684.781 L1019.45 684.781 L1020.01 684.781 L1020.56 684.781 L1021.12 684.781 L1021.68 684.781 L1022.24 684.781 L1022.8 684.781 L1023.36 684.781 L1023.92 684.781 L1024.48 684.781 L1025.04 684.781 L1025.6 684.781 L1026.16 684.781 L1026.72 684.781 L1027.28 684.781 L1027.83 684.781 L1028.39 684.781 L1028.95 684.781 L1029.51 684.781 L1030.07 684.781 L1030.63 684.781 L1031.19 684.781 L1031.75 684.781 L1032.31 684.781 L1032.87 684.781 L1033.43 684.781 L1033.99 684.781 L1034.55 684.781 L1035.1 684.781 L1035.66 684.781 L1036.22 684.781 L1036.78 684.781 L1037.34 684.781 L1037.9 684.781 L1038.46 684.781 L1039.02 684.781 L1039.58 684.781 L1040.14 684.781 L1040.7 684.781 L1041.26 684.781 L1041.82 684.781 L1042.38 684.781 L1042.93 684.781 L1043.49 684.781 L1044.05 684.781 L1044.61 684.781 L1045.17 684.781 L1045.73 684.781 L1046.29 684.781 L1046.85 684.781 L1047.41 684.781 L1047.97 684.781 L1048.53 684.781 L1049.09 684.781 L1049.65 684.781 L1050.2 684.781 L1050.76 684.781 L1051.32 684.781 L1051.88 684.781 L1052.44 684.781 L1053 684.781 L1053.56 684.781 L1054.12 684.781 L1054.68 684.781 L1055.24 684.781 L1055.8 684.781 L1056.36 684.781 L1056.92 684.781 L1057.48 684.781 L1058.03 684.781 L1058.59 684.781 L1059.15 684.781 L1059.71 684.781 L1060.27 684.781 L1060.83 684.781 L1061.39 684.781 L1061.95 684.781 L1062.51 684.781 L1063.07 684.781 L1063.63 684.781 L1064.19 684.781 L1064.75 684.781 L1065.3 684.781 L1065.86 684.781 L1066.42 684.781 L1066.98 684.781 L1067.54 684.781 L1068.1 684.781 L1068.66 684.781 L1069.22 684.781 L1069.78 684.781 L1070.34 684.781 L1070.9 684.781 L1071.46 684.781 L1072.02 684.781 L1072.57 684.781 L1073.13 684.781 L1073.69 684.781 L1074.25 684.781 L1074.81 684.781 L1075.37 684.781 L1075.93 684.781 L1076.49 684.781 L1077.05 684.781 L1077.61 684.781 L1078.17 684.781 L1078.73 684.781 L1079.29 684.781 L1079.85 684.781 L1080.4 684.781 L1080.96 684.781 L1081.52 684.781 L1082.08 684.781 L1082.64 684.781 L1083.2 684.781 L1083.76 684.781 L1084.32 684.781 L1084.88 684.781 L1085.44 684.781 L1086 684.781 L1086.56 684.781 L1087.12 684.781 L1087.67 684.781 L1088.23 684.781 L1088.79 684.781 L1089.35 684.781 L1089.91 684.781 L1090.47 684.781 L1091.03 684.781 L1091.59 684.781 L1092.15 684.781 L1092.71 684.781 L1093.27 684.781 L1093.83 684.781 L1094.39 684.781 L1094.94 684.781 L1095.5 684.781 L1096.06 684.781 L1096.62 684.781 L1097.18 684.781 L1097.74 684.781 L1098.3 684.781 L1098.86 684.781 L1099.42 684.781 L1099.98 684.781 L1100.54 684.781 L1101.1 684.781 L1101.66 684.781 L1102.22 684.781 L1102.77 684.781 L1103.33 684.781 L1103.89 684.781 L1104.45 684.781 L1105.01 684.781 L1105.57 684.781 L1106.13 684.781 L1106.69 684.781 L1107.25 684.781 L1107.81 684.781 L1108.37 684.781 L1108.93 684.781 L1109.49 684.781 L1110.04 684.781 L1110.6 684.781 L1111.16 684.781 L1111.72 684.781 L1112.28 684.781 L1112.84 684.781 L1113.4 684.781 L1113.96 684.781 L1114.52 684.781 L1115.08 684.781 L1115.64 684.781 L1116.2 684.781 L1116.76 684.781 L1117.31 684.781 L1117.87 684.781 L1118.43 684.781 L1118.99 684.781 L1119.55 684.781 L1120.11 684.781 L1120.67 684.781 L1121.23 684.781 L1121.79 684.781 L1122.35 684.781 L1122.91 684.781 L1123.47 684.781 L1124.03 684.781 L1124.59 684.781 L1125.14 684.781 L1125.7 684.781 L1126.26 684.781 L1126.82 684.781 L1127.38 684.781 L1127.94 684.781 L1128.5 684.781 L1129.06 684.781 L1129.62 684.781 L1130.18 684.781 L1130.74 684.781 L1131.3 684.781 L1131.86 684.781 L1132.41 684.781 L1132.97 684.781 L1133.53 684.781 L1134.09 684.781 L1134.65 684.781 L1135.21 684.781 L1135.77 684.781 L1136.33 684.781 L1136.89 684.781 L1137.45 684.781 L1138.01 684.781 L1138.57 684.781 L1139.13 684.781 L1139.68 684.781 L1140.24 684.781 L1140.8 684.781 L1141.36 684.781 L1141.92 684.781 L1142.48 684.781 L1143.04 684.781 L1143.6 684.781 L1144.16 684.781 L1144.72 684.781 L1145.28 684.781 L1145.84 684.781 L1146.4 684.781 L1146.96 684.781 L1147.51 684.781 L1148.07 684.781 L1148.63 684.781 L1149.19 684.781 L1149.75 684.781 L1150.31 684.781 L1150.87 684.781 L1151.43 684.781 L1151.99 684.781 L1152.55 684.781 L1153.11 684.781 L1153.67 684.781 L1154.23 684.781 L1154.78 684.781 L1155.34 684.781 L1155.9 684.781 L1156.46 684.781 L1157.02 684.781 L1157.58 684.781 L1158.14 684.781 L1158.7 684.781 L1159.26 684.781 L1159.82 684.781 L1160.38 684.781 L1160.94 684.781 L1161.5 684.781 L1162.05 684.781 L1162.61 684.781 L1163.17 684.781 L1163.73 684.781 L1164.29 684.781 L1164.85 684.781 L1165.41 684.781 L1165.97 684.781 L1166.53 684.781 L1167.09 684.781 L1167.65 684.781 L1168.21 684.781 L1168.77 684.781 L1169.33 684.781 L1169.88 684.781 L1170.44 684.781 L1171 684.781 L1171.56 684.781 L1172.12 684.781 L1172.68 684.781 L1173.24 684.781 L1173.8 684.781 L1174.36 684.781 L1174.92 684.781 L1175.48 684.781 L1176.04 684.781 L1176.6 684.781 L1177.15 684.781 L1177.71 684.781 L1178.27 684.781 L1178.83 684.781 L1179.39 684.781 L1179.95 684.781 L1180.51 684.781 L1181.07 684.781 L1181.63 684.781 L1182.19 684.781 L1182.75 684.781 L1183.31 684.781 L1183.87 684.781 L1184.43 684.781 L1184.98 684.781 L1185.54 684.781 L1186.1 684.781 L1186.66 684.781 L1187.22 684.781 L1187.78 684.781 L1188.34 684.781 L1188.9 684.781 L1189.46 684.781 L1190.02 684.781 L1190.58 684.781 L1191.14 684.781 L1191.7 684.781 L1192.25 684.781 L1192.81 684.781 L1193.37 684.781 L1193.93 684.781 L1194.49 684.781 L1195.05 684.781 L1195.61 684.781 L1196.17 684.781 L1196.73 684.781 L1197.29 684.781 L1197.85 684.781 L1198.41 684.781 L1198.97 684.781 L1199.52 684.781 L1200.08 684.781 L1200.64 684.781 L1201.2 684.781 L1201.76 684.781 L1202.32 684.781 L1202.88 684.781 L1203.44 684.781 L1204 684.781 L1204.56 684.781 L1205.12 684.781 L1205.68 684.781 L1206.24 684.781 L1206.8 684.781 L1207.35 684.781 L1207.91 684.781 L1208.47 684.781 L1209.03 684.781 L1209.59 684.781 L1210.15 684.781 L1210.71 684.781 L1211.27 684.781 L1211.83 684.781 L1212.39 684.781 L1212.95 684.781 L1213.51 684.781 L1214.07 684.781 L1214.62 684.781 L1215.18 684.781 L1215.74 684.781 L1216.3 684.781 L1216.86 684.781 L1217.42 684.781 L1217.98 684.781 L1218.54 684.781 L1219.1 684.781 L1219.66 684.781 L1220.22 684.781 L1220.78 684.781 L1221.34 684.781 L1221.89 684.781 L1222.45 684.781 L1223.01 684.781 L1223.57 684.781 L1224.13 684.781 L1224.69 684.781 L1225.25 684.781 L1225.81 684.781 L1226.37 684.781 L1226.93 684.781 L1227.49 684.781 L1228.05 684.781 L1228.61 684.781 L1229.17 684.781 L1229.72 684.781 L1230.28 684.781 L1230.84 684.781 L1231.4 684.781 L1231.96 684.781 L1232.52 684.781 L1233.08 684.781 L1233.64 684.781 L1234.2 684.781 L1234.76 684.781 L1235.32 684.781 L1235.88 684.781 L1236.44 684.781 L1236.99 684.781 L1237.55 684.781 L1238.11 684.781 L1238.67 684.781 L1239.23 684.781 L1239.79 684.781 L1240.35 684.781 L1240.91 684.781 L1241.47 684.781 L1242.03 684.781 L1242.59 684.781 L1243.15 684.781 L1243.71 684.781 L1244.26 684.781 L1244.82 684.781 L1245.38 684.781 L1245.94 684.781 L1246.5 684.781 L1247.06 684.781 L1247.62 684.781 L1248.18 684.781 L1248.74 684.781 L1249.3 684.781 L1249.86 684.781 L1250.42 684.781 L1250.98 684.781 L1251.54 684.781 L1252.09 684.781 L1252.65 684.781 L1253.21 684.781 L1253.77 684.781 L1254.33 684.781 L1254.89 684.781 L1255.45 684.781 L1256.01 684.781 L1256.57 684.781 L1257.13 684.781 L1257.69 684.781 L1258.25 684.781 L1258.81 684.781 L1259.36 684.781 L1259.92 684.781 L1260.48 684.781 L1261.04 684.781 L1261.6 684.781 L1262.16 684.781 L1262.72 684.781 L1263.28 684.781 L1263.84 684.781 L1264.4 684.781 L1264.96 684.781 L1265.52 684.781 L1266.08 684.781 L1266.63 684.781 L1267.19 684.781 L1267.75 684.781 L1268.31 684.781 L1268.87 684.781 L1269.43 684.781 L1269.99 684.781 L1270.55 684.781 L1271.11 684.781 L1271.67 684.781 L1272.23 684.781 L1272.79 684.781 L1273.35 684.781 L1273.91 684.781 L1274.46 684.781 L1275.02 684.781 L1275.58 684.781 L1276.14 684.781 L1276.7 684.781 L1277.26 684.781 L1277.82 684.781 L1278.38 684.781 L1278.94 684.781 L1279.5 684.781 L1280.06 684.781 L1280.62 684.781 L1281.18 684.781 L1281.73 684.781 L1282.29 684.781 L1282.85 684.781 L1283.41 684.781 L1283.97 684.781 L1284.53 684.781 L1285.09 684.781 L1285.65 684.781 L1286.21 684.781 L1286.77 684.781 L1287.33 684.781 L1287.89 684.781 L1288.45 684.781 L1289 684.781 L1289.56 684.781 L1290.12 684.781 L1290.68 684.781 L1291.24 684.781 L1291.8 684.781 L1292.36 684.781 L1292.92 684.781 L1293.48 684.781 L1294.04 684.781 L1294.6 684.781 L1295.16 684.781 L1295.72 684.781 L1296.28 684.781 L1296.83 684.781 L1297.39 684.781 L1297.95 684.781 L1298.51 684.781 L1299.07 684.781 L1299.63 684.781 L1300.19 684.781 L1300.75 684.781 L1301.31 684.781 L1301.87 684.781 L1302.43 684.781 L1302.99 684.781 L1303.55 684.781 L1304.1 684.781 L1304.66 684.781 L1305.22 684.781 L1305.78 684.781 L1306.34 684.781 L1306.9 684.781 L1307.46 684.781 L1308.02 684.781 L1308.58 684.781 L1309.14 684.781 L1309.7 684.781 L1310.26 684.781 L1310.82 684.781 L1311.38 684.781 L1311.93 684.781 L1312.49 684.781 L1313.05 684.781 L1313.61 684.781 L1314.17 684.781 L1314.73 684.781 L1315.29 684.781 L1315.85 684.781 L1316.41 684.781 L1316.97 684.781 L1317.53 684.781 L1318.09 684.781 L1318.65 684.781 L1319.2 684.781 L1319.76 684.781 L1320.32 684.781 L1320.88 684.781 L1321.44 684.781 L1322 684.781 L1322.56 684.781 L1323.12 684.781 L1323.68 684.781 L1324.24 684.781 L1324.8 684.781 L1325.36 684.781 L1325.92 684.781 L1326.47 684.781 L1327.03 684.781 L1327.59 684.781 L1328.15 684.781 L1328.71 684.781 L1329.27 684.781 L1329.83 684.781 L1330.39 684.781 L1330.95 684.781 L1331.51 684.781 L1332.07 684.781 L1332.63 684.781 L1333.19 684.781 L1333.75 684.781 L1334.3 684.781 L1334.86 684.781 L1335.42 684.781 L1335.98 684.781 L1336.54 684.781 L1337.1 684.781 L1337.66 684.781 L1338.22 684.781 L1338.78 684.781 L1339.34 684.781 L1339.9 684.781 L1340.46 684.781 L1341.02 684.781 L1341.57 684.781 L1342.13 684.781 L1342.69 684.781 L1343.25 684.781 L1343.81 684.781 L1344.37 684.781 L1344.93 684.781 L1345.49 684.781 L1346.05 684.781 L1346.61 684.781 L1347.17 684.781 L1347.73 684.781 L1348.29 684.781 L1348.84 684.781 L1349.4 684.781 L1349.96 684.781 L1350.52 684.781 L1351.08 684.781 L1351.64 684.781 L1352.2 684.781 L1352.76 684.781 L1353.32 684.781 L1353.88 684.781 L1354.44 684.781 L1355 684.781 L1355.56 684.781 L1356.12 684.781 L1356.67 684.781 L1357.23 684.781 L1357.79 684.781 L1358.35 684.781 L1358.91 684.781 L1359.47 684.781 L1360.03 684.781 L1360.59 684.781 L1361.15 684.781 L1361.71 684.781 L1362.27 684.781 L1362.83 684.781 L1363.39 684.781 L1363.94 684.781 L1364.5 684.781 L1365.06 684.781 L1365.62 684.781 L1366.18 684.781 L1366.74 684.781 L1367.3 684.781 L1367.86 684.781 L1368.42 684.781 L1368.98 684.781 L1369.54 684.781 L1370.1 684.781 L1370.66 684.781 L1371.21 684.781 L1371.77 684.781 L1372.33 684.781 L1372.89 684.781 L1373.45 684.781 L1374.01 684.781 L1374.57 684.781 L1375.13 684.781 L1375.69 684.781 L1376.25 684.781 L1376.81 684.781 L1377.37 684.781 L1377.93 684.781 L1378.49 684.781 L1379.04 684.781 L1379.6 684.781 L1380.16 684.781 L1380.72 684.781 L1381.28 684.781 L1381.84 684.781 L1382.4 684.781 L1382.96 684.781 L1383.52 684.781 L1384.08 684.781 L1384.64 684.781 L1385.2 684.781 L1385.76 684.781 L1386.31 684.781 L1386.87 684.781 L1387.43 684.781 L1387.99 684.781 L1388.55 684.781 L1389.11 684.781 L1389.67 684.781 L1390.23 684.781 L1390.79 684.781 L1391.35 684.781 L1391.91 684.781 L1392.47 684.781 L1393.03 684.781 L1393.58 684.781 L1394.14 684.781 L1394.7 684.781 L1395.26 684.781 L1395.82 684.781 L1396.38 684.781 L1396.94 684.781 L1397.5 684.781 L1398.06 684.781 L1398.62 684.781 L1399.18 684.781 L1399.74 684.781 L1400.3 684.781 L1400.86 684.781 L1401.41 684.781 L1401.97 684.781 L1402.53 684.781 L1403.09 684.781 L1403.65 684.781 L1404.21 684.781 L1404.77 684.781 L1405.33 684.781 L1405.89 684.781 L1406.45 684.781 L1407.01 684.781 L1407.57 684.781 L1408.13 684.781 L1408.68 684.781 L1409.24 684.781 L1409.8 684.781 L1410.36 684.781 L1410.92 684.781 L1411.48 684.781 L1412.04 684.781 L1412.6 684.781 L1413.16 684.781 L1413.72 684.781 L1414.28 684.781 L1414.84 684.781 L1415.4 684.781 L1415.95 684.781 L1416.51 684.781 L1417.07 684.781 L1417.63 684.781 L1418.19 684.781 L1418.75 684.781 L1419.31 684.781 L1419.87 684.781 L1420.43 684.781 L1420.99 684.781 L1421.55 684.781 L1422.11 684.781 L1422.67 684.781 L1423.23 684.781 L1423.78 684.781 L1424.34 684.781 L1424.9 684.781 L1425.46 684.781 L1426.02 684.781 L1426.58 684.781 L1427.14 684.781 L1427.7 684.781 L1428.26 684.781 L1428.82 684.781 L1429.38 684.781 L1429.94 684.781 L1430.5 684.781 L1431.05 684.781 L1431.61 684.781 L1432.17 684.781 L1432.73 684.781 L1433.29 684.781 L1433.85 684.781 L1434.41 684.781 L1434.97 684.781 L1435.53 684.781 L1436.09 684.781 L1436.65 684.781 L1437.21 684.781 L1437.77 684.781 L1438.33 684.781 L1438.88 684.781 L1439.44 684.781 L1440 684.781 L1440.56 684.781 L1441.12 684.781 L1441.68 684.781 L1442.24 684.781 L1442.8 684.781 L1443.36 684.781 L1443.92 684.781 L1444.48 684.781 L1445.04 684.781 L1445.6 684.781 L1446.15 684.781 L1446.71 684.781 L1447.27 684.781 L1447.83 684.781 L1448.39 684.781 L1448.95 684.781 L1449.51 684.781 L1450.07 684.781 L1450.63 684.781 L1451.19 684.781 L1451.75 684.781 L1452.31 684.781 L1452.87 684.781 L1453.42 684.781 L1453.98 684.781 L1454.54 684.781 L1455.1 684.781 L1455.66 684.781 L1456.22 684.781 L1456.78 684.781 L1457.34 684.781 L1457.9 684.781 L1458.46 684.781 L1459.02 684.781 L1459.58 684.781 L1460.14 684.781 L1460.7 684.781 L1461.25 684.781 L1461.81 684.781 L1462.37 684.781 L1462.93 684.781 L1463.49 684.781 L1464.05 684.781 L1464.61 684.781 L1465.17 684.781 L1465.73 684.781 L1466.29 684.781 L1466.85 684.781 L1467.41 684.781 L1467.97 684.781 L1468.52 684.781 L1469.08 684.781 L1469.64 684.781 L1470.2 684.781 L1470.76 684.781 L1471.32 684.781 L1471.88 684.781 L1472.44 684.781 L1473 684.781 L1473.56 684.781 L1474.12 684.781 L1474.68 684.781 L1475.24 684.781 L1475.79 684.781 L1476.35 684.781 L1476.91 684.781 L1477.47 684.781 L1478.03 684.781 L1478.59 684.781 L1479.15 684.781 L1479.71 684.781 L1480.27 684.781 L1480.83 684.781 L1481.39 684.781 L1481.95 684.781 L1482.51 684.781 L1483.07 684.781 L1483.62 684.781 L1484.18 684.781 L1484.74 684.781 L1485.3 684.781 L1485.86 684.781 L1486.42 684.781 L1486.98 684.781 L1487.54 684.781 L1488.1 684.781 L1488.66 684.781 L1489.22 684.781 L1489.78 684.781 L1490.34 684.781 L1490.89 684.781 L1491.45 684.781 L1492.01 684.781 L1492.57 684.781 L1493.13 684.781 L1493.69 684.781 L1494.25 684.781 L1494.81 684.781 L1495.37 684.781 L1495.93 684.781 L1496.49 684.781 L1497.05 684.781 L1497.61 684.781 L1498.16 684.781 L1498.72 684.781 L1499.28 684.781 L1499.84 684.781 L1500.4 684.781 L1500.96 684.781 L1501.52 684.781 L1502.08 684.781 L1502.64 684.781 L1503.2 684.781 L1503.76 684.781 L1504.32 684.781 L1504.88 684.781 L1505.44 684.781 L1505.99 684.781 L1506.55 684.781 L1507.11 684.781 L1507.67 684.781 L1508.23 684.781 L1508.79 684.781 L1509.35 684.781 L1509.91 684.781 L1510.47 684.781 L1511.03 684.781 L1511.59 684.781 L1512.15 684.781 L1512.71 684.781 L1513.26 684.781 L1513.82 684.781 L1514.38 684.781 L1514.94 684.781 L1515.5 684.781 L1516.06 684.781 L1516.62 684.781 L1517.18 684.781 L1517.74 684.781 L1518.3 684.781 L1518.86 684.781 L1519.42 684.781 L1519.98 684.781 L1520.53 684.781 L1521.09 684.781 L1521.65 684.781 L1522.21 684.781 L1522.77 684.781 L1523.33 684.781 L1523.89 684.781 L1524.45 684.781 L1525.01 684.781 L1525.57 684.781 L1526.13 684.781 L1526.69 684.781 L1527.25 684.781 L1527.81 684.781 L1528.36 684.781 L1528.92 684.781 L1529.48 684.781 L1530.04 684.781 L1530.6 684.781 L1531.16 684.781 L1531.72 684.781 L1532.28 684.781 L1532.84 684.781 L1533.4 684.781 L1533.96 684.781 L1534.52 684.781 L1535.08 684.781 L1535.63 684.781 L1536.19 684.781 L1536.75 684.781 L1537.31 684.781 L1537.87 684.781 L1538.43 684.781 L1538.99 684.781 L1539.55 684.781 L1540.11 684.781 L1540.67 684.781 L1541.23 684.781 L1541.79 684.781 L1542.35 684.781 L1542.9 684.781 L1543.46 684.781 L1544.02 684.781 L1544.58 684.781 L1545.14 684.781 L1545.7 684.781 L1546.26 684.781 L1546.82 684.781 L1547.38 684.781 L1547.94 684.781 L1548.5 684.781 L1549.06 684.781 L1549.62 684.781 L1550.18 684.781 L1550.73 684.781 L1551.29 684.781 L1551.85 684.781 L1552.41 684.781 L1552.97 684.781 L1553.53 684.781 L1554.09 684.781 L1554.65 684.781 L1555.21 684.781 L1555.77 684.781 L1556.33 684.781 L1556.89 684.781 L1557.45 684.781 L1558 684.781 L1558.56 684.781 L1559.12 684.781 L1559.68 684.781 L1560.24 684.781 L1560.8 684.781 L1561.36 684.781 L1561.92 684.781 L1562.48 684.781 L1563.04 684.781 L1563.6 684.781 L1564.16 684.781 L1564.72 684.781 L1565.28 684.781 L1565.83 684.781 L1566.39 684.781 L1566.95 684.781 L1567.51 684.781 L1568.07 684.781 L1568.63 684.781 L1569.19 684.781 L1569.75 684.781 L1570.31 684.781 L1570.87 684.781 L1571.43 684.781 L1571.99 684.781 L1572.55 684.781 L1573.1 684.781 L1573.66 684.781 L1574.22 684.781 L1574.78 684.781 L1575.34 684.781 L1575.9 684.781 L1576.46 684.781 L1577.02 684.781 L1577.58 684.781 L1578.14 684.781 L1578.7 684.781 L1579.26 684.781 L1579.82 684.781 L1580.37 684.781 L1580.93 684.781 L1581.49 684.781 L1582.05 684.781 L1582.61 684.781 L1583.17 684.781 L1583.73 684.781 L1584.29 684.781 L1584.85 684.781 L1585.41 684.781 L1585.97 684.781 L1586.53 684.781 L1587.09 684.781 L1587.65 684.781 L1588.2 684.781 L1588.76 684.781 L1589.32 684.781 L1589.88 684.781 L1590.44 684.781 L1591 684.781 L1591.56 684.781 L1592.12 684.781 L1592.68 684.781 L1593.24 684.781 L1593.8 684.781 L1594.36 684.781 L1594.92 684.781 L1595.47 684.781 L1596.03 684.781 L1596.59 684.781 L1597.15 684.781 L1597.71 684.781 L1598.27 684.781 L1598.83 684.781 L1599.39 684.781 L1599.95 684.781 L1600.51 684.781 L1601.07 684.781 L1601.63 684.781 L1602.19 684.781 L1602.74 684.781 L1603.3 684.781 L1603.86 684.781 L1604.42 684.781 L1604.98 684.781 L1605.54 684.781 L1606.1 684.781 L1606.66 684.781 L1607.22 684.781 L1607.78 684.781 L1608.34 684.781 L1608.9 684.781 L1609.46 684.781 L1610.02 684.781 L1610.57 684.781 L1611.13 684.781 L1611.69 684.781 L1612.25 684.781 L1612.81 684.781 L1613.37 684.781 L1613.93 684.781 L1614.49 684.781 L1615.05 684.781 L1615.61 684.781 L1616.17 684.781 L1616.73 684.781 L1617.29 684.781 L1617.84 684.781 L1618.4 684.781 L1618.96 684.781 L1619.52 684.781 L1620.08 684.781 L1620.64 684.781 L1621.2 684.781 L1621.76 684.781 L1622.32 684.781 L1622.88 684.781 L1623.44 684.781 L1624 684.781 L1624.56 684.781 L1625.11 684.781 L1625.67 684.781 L1626.23 684.781 L1626.79 684.781 L1627.35 684.781 L1627.91 684.781 L1628.47 684.781 L1629.03 684.781 L1629.59 684.781 L1630.15 684.781 L1630.71 684.781 L1631.27 684.781 L1631.83 684.781 L1632.39 684.781 L1632.94 684.781 L1633.5 684.781 L1634.06 684.781 L1634.62 684.781 L1635.18 684.781 L1635.74 684.781 L1636.3 684.781 L1636.86 684.781 L1637.42 684.781 L1637.98 684.781 L1638.54 684.781 L1639.1 684.781 L1639.66 684.781 L1640.21 684.781 L1640.77 684.781 L1641.33 684.781 L1641.89 684.781 L1642.45 684.781 L1643.01 684.781 L1643.57 684.781 L1644.13 684.781 L1644.69 684.781 L1645.25 684.781 L1645.81 684.781 L1646.37 684.781 L1646.93 684.781 L1647.48 684.781 L1648.04 684.781 L1648.6 684.781 L1649.16 684.781 L1649.72 684.781 L1650.28 684.781 L1650.84 684.781 L1651.4 684.781 L1651.96 684.781 L1652.52 684.781 L1653.08 684.781 L1653.64 684.781 L1654.2 684.781 L1654.76 684.781 L1655.31 684.781 L1655.87 684.781 L1656.43 684.781 L1656.99 684.781 L1657.55 684.781 L1658.11 684.781 L1658.67 684.781 L1659.23 684.781 L1659.79 684.781 L1660.35 684.781 L1660.91 684.781 L1661.47 684.781 L1662.03 684.781 L1662.58 684.781 L1663.14 684.781 L1663.7 684.781 L1664.26 684.781 L1664.82 684.781 L1665.38 684.781 L1665.94 684.781 L1666.5 684.781 L1667.06 684.781 L1667.62 684.781 L1668.18 684.781 L1668.74 684.781 L1669.3 684.781 L1669.85 684.781 L1670.41 684.781 L1670.97 684.781 L1671.53 684.781 L1672.09 684.781 L1672.65 684.781 L1673.21 684.781 L1673.77 684.781 L1674.33 684.781 L1674.89 684.781 L1675.45 684.781 L1676.01 684.781 L1676.57 684.781 L1677.13 684.781 L1677.68 684.781 L1678.24 684.781 L1678.8 684.781 L1679.36 684.781 L1679.92 684.781 L1680.48 684.781 L1681.04 684.781 L1681.6 684.781 L1682.16 684.781 L1682.72 684.781 L1683.28 684.781 L1683.84 684.781 L1684.4 684.781 L1684.95 684.781 L1685.51 684.781 L1686.07 684.781 L1686.63 684.781 L1687.19 684.781 L1687.75 684.781 L1688.31 684.781 L1688.87 684.781 L1689.43 684.781 L1689.99 684.781 L1690.55 684.781 L1691.11 684.781 L1691.67 684.781 L1692.23 684.781 L1692.78 684.781 L1693.34 684.781 L1693.9 684.781 L1694.46 684.781 L1695.02 684.781 L1695.58 684.781 L1696.14 684.781 L1696.7 684.781 L1697.26 684.781 L1697.82 684.781 L1698.38 684.781 L1698.94 684.781 L1699.5 684.781 L1700.05 684.781 L1700.61 684.781 L1701.17 684.781 L1701.73 684.781 L1702.29 684.781 L1702.85 684.781 L1703.41 684.781 L1703.97 684.781 L1704.53 684.781 L1705.09 684.781 L1705.65 684.781 L1706.21 684.781 L1706.77 684.781 L1707.32 684.781 L1707.88 684.781 L1708.44 684.781 L1709 684.781 L1709.56 684.781 L1710.12 684.781 L1710.68 684.781 L1711.24 684.781 L1711.8 684.781 L1712.36 684.781 L1712.92 684.781 L1713.48 684.781 L1714.04 684.781 L1714.6 684.781 L1715.15 684.781 L1715.71 684.781 L1716.27 684.781 L1716.83 684.781 L1717.39 684.781 L1717.95 684.781 L1718.51 684.781 L1719.07 684.781 L1719.63 684.781 L1720.19 684.781 L1720.75 684.781 L1721.31 684.781 L1721.87 684.781 L1722.42 684.781 L1722.98 684.781 L1723.54 684.781 L1724.1 684.781 L1724.66 684.781 L1725.22 684.781 L1725.78 684.781 L1726.34 684.781 L1726.9 684.781 L1727.46 684.781 L1728.02 684.781 L1728.58 684.781 L1729.14 684.781 L1729.69 684.781 L1730.25 684.781 L1730.81 684.781 L1731.37 684.781 L1731.93 684.781 L1732.49 684.781 L1733.05 684.781 L1733.61 684.781 L1734.17 684.781 L1734.73 684.781 L1735.29 684.781 L1735.85 684.781 L1736.41 684.781 L1736.97 684.781 L1737.52 684.781 L1738.08 684.781 L1738.64 684.781 L1739.2 684.781 L1739.76 684.781 L1740.32 684.781 L1740.88 684.781 L1741.44 684.781 L1742 684.781 L1742.56 684.781 L1743.12 684.781 L1743.68 684.781 L1744.24 684.781 L1744.79 684.781 L1745.35 684.781 L1745.91 684.781 L1746.47 684.781 L1747.03 684.781 L1747.59 684.781 L1748.15 684.781 L1748.71 684.781 L1749.27 684.781 L1749.83 684.781 L1750.39 684.781 L1750.95 684.781 L1751.51 684.781 L1752.06 684.781 L1752.62 684.781 L1753.18 684.781 L1753.74 684.781 L1754.3 684.781 L1754.86 684.781 L1755.42 684.781 L1755.98 684.781 L1756.54 684.781 L1757.1 684.781 L1757.66 684.781 L1758.22 684.781 L1758.78 684.781 L1759.34 684.781 L1759.89 684.781 L1760.45 684.781 L1761.01 684.781 L1761.57 684.781 L1762.13 684.781 L1762.69 684.781 L1763.25 684.781 L1763.81 684.781 L1764.37 684.781 L1764.93 684.781 L1765.49 684.781 L1766.05 684.781 L1766.61 684.781 L1767.16 684.781 L1767.72 684.781 L1768.28 684.781 L1768.84 684.781 L1769.4 684.781 L1769.96 684.781 L1770.52 684.781 L1771.08 684.781 L1771.64 684.781 L1772.2 684.781 L1772.76 684.781 L1773.32 684.781 L1773.88 684.781 L1774.43 684.781 L1774.99 684.781 L1775.55 684.781 L1776.11 684.781 L1776.67 684.781 L1777.23 684.781 L1777.79 684.781 L1778.35 684.781 L1778.91 684.781 L1779.47 684.781 L1780.03 684.781 L1780.59 684.781 L1781.15 684.781 L1781.71 684.781 L1782.26 684.781 L1782.82 684.781 L1783.38 684.781 L1783.94 684.781 L1784.5 684.781 L1785.06 684.781 L1785.62 684.781 L1786.18 684.781 L1786.74 684.781 L1787.3 684.781 L1787.86 684.781 L1788.42 684.781 L1788.98 684.781 L1789.53 684.781 L1790.09 684.781 L1790.65 684.781 L1791.21 684.781 L1791.77 684.781 L1792.33 684.781 L1792.89 684.781 L1793.45 684.781 L1794.01 684.781 L1794.57 684.781 L1795.13 684.781 L1795.69 684.781 L1796.25 684.781 L1796.8 684.781 L1797.36 684.781 L1797.92 684.781 L1798.48 684.781 L1799.04 684.781 L1799.6 684.781 L1800.16 684.781 L1800.72 684.781 L1801.28 684.781 L1801.84 684.781 L1802.4 684.781 L1802.96 684.781 L1803.52 684.781 L1804.08 684.781 L1804.63 684.781 L1805.19 684.781 L1805.75 684.781 L1806.31 684.781 L1806.87 684.781 L1807.43 684.781 L1807.99 684.781 L1808.55 684.781 L1809.11 684.781 L1809.67 684.781 L1810.23 684.781 L1810.79 684.781 L1811.35 684.781 L1811.9 684.781 L1812.46 684.781 L1813.02 684.781 L1813.58 684.781 L1814.14 684.781 L1814.7 684.781 L1815.26 684.781 L1815.82 684.781 L1816.38 684.781 L1816.94 684.781 L1817.5 684.781 L1818.06 684.781 L1818.62 684.781 L1819.18 684.781 L1819.73 684.781 L1820.29 684.781 L1820.85 684.781 L1821.41 684.781 L1821.97 684.781 L1822.53 684.781 L1823.09 684.781 L1823.65 684.781 L1824.21 684.781 L1824.77 684.781 L1825.33 684.781 L1825.89 684.781 L1826.45 684.781 L1827 684.781 L1827.56 684.781 L1828.12 684.781 L1828.68 684.781 L1829.24 684.781 L1829.8 684.781 L1830.36 684.781 L1830.92 684.781 L1831.48 684.781 L1832.04 684.781 L1832.6 684.781 L1833.16 684.781 L1833.72 684.781 L1834.27 684.781 L1834.83 684.781 L1835.39 684.781 L1835.95 684.781 L1836.51 684.781 L1837.07 684.781 L1837.63 684.781 L1838.19 684.781 L1838.19 683.455 L1837.63 683.455 L1837.07 683.455 L1836.51 683.455 L1835.95 683.455 L1835.39 683.455 L1834.83 683.455 L1834.27 683.455 L1833.72 683.455 L1833.16 683.455 L1832.6 683.455 L1832.04 683.455 L1831.48 683.455 L1830.92 683.455 L1830.36 683.455 L1829.8 683.455 L1829.24 683.455 L1828.68 683.455 L1828.12 683.455 L1827.56 683.455 L1827 683.455 L1826.45 683.455 L1825.89 683.455 L1825.33 683.455 L1824.77 683.455 L1824.21 683.455 L1823.65 683.455 L1823.09 683.455 L1822.53 683.455 L1821.97 683.455 L1821.41 683.455 L1820.85 683.455 L1820.29 683.455 L1819.73 683.455 L1819.18 683.455 L1818.62 683.455 L1818.06 683.455 L1817.5 683.455 L1816.94 683.455 L1816.38 683.455 L1815.82 683.455 L1815.26 683.455 L1814.7 683.455 L1814.14 683.455 L1813.58 683.455 L1813.02 683.455 L1812.46 683.455 L1811.9 683.455 L1811.35 683.455 L1810.79 683.455 L1810.23 683.455 L1809.67 683.455 L1809.11 683.455 L1808.55 683.455 L1807.99 683.455 L1807.43 683.455 L1806.87 683.455 L1806.31 683.455 L1805.75 683.455 L1805.19 683.455 L1804.63 683.455 L1804.08 683.455 L1803.52 683.455 L1802.96 683.455 L1802.4 683.455 L1801.84 683.455 L1801.28 683.455 L1800.72 683.455 L1800.16 683.455 L1799.6 683.455 L1799.04 683.455 L1798.48 683.455 L1797.92 683.455 L1797.36 683.455 L1796.8 683.455 L1796.25 683.455 L1795.69 683.455 L1795.13 683.455 L1794.57 683.455 L1794.01 683.455 L1793.45 683.455 L1792.89 683.455 L1792.33 683.455 L1791.77 683.455 L1791.21 683.455 L1790.65 683.455 L1790.09 683.455 L1789.53 683.455 L1788.98 683.455 L1788.42 683.455 L1787.86 683.455 L1787.3 683.455 L1786.74 683.455 L1786.18 683.455 L1785.62 683.455 L1785.06 683.455 L1784.5 683.455 L1783.94 683.455 L1783.38 683.455 L1782.82 683.455 L1782.26 683.455 L1781.71 683.455 L1781.15 683.455 L1780.59 683.455 L1780.03 683.455 L1779.47 683.455 L1778.91 683.455 L1778.35 683.455 L1777.79 683.455 L1777.23 683.455 L1776.67 683.455 L1776.11 683.455 L1775.55 683.455 L1774.99 683.455 L1774.43 683.455 L1773.88 683.455 L1773.32 683.455 L1772.76 683.455 L1772.2 683.455 L1771.64 683.455 L1771.08 683.455 L1770.52 683.455 L1769.96 683.455 L1769.4 683.455 L1768.84 683.455 L1768.28 683.455 L1767.72 683.455 L1767.16 683.455 L1766.61 683.455 L1766.05 683.455 L1765.49 683.455 L1764.93 683.455 L1764.37 683.455 L1763.81 683.455 L1763.25 683.455 L1762.69 683.455 L1762.13 683.455 L1761.57 683.455 L1761.01 683.455 L1760.45 683.455 L1759.89 683.455 L1759.34 683.455 L1758.78 683.455 L1758.22 683.455 L1757.66 683.455 L1757.1 683.455 L1756.54 683.455 L1755.98 683.455 L1755.42 683.455 L1754.86 683.455 L1754.3 683.455 L1753.74 683.455 L1753.18 683.455 L1752.62 683.455 L1752.06 683.455 L1751.51 683.455 L1750.95 683.455 L1750.39 683.455 L1749.83 683.455 L1749.27 683.455 L1748.71 683.455 L1748.15 683.455 L1747.59 683.455 L1747.03 683.455 L1746.47 683.455 L1745.91 683.455 L1745.35 683.455 L1744.79 683.455 L1744.24 683.455 L1743.68 683.455 L1743.12 683.455 L1742.56 683.455 L1742 683.455 L1741.44 683.455 L1740.88 683.455 L1740.32 683.455 L1739.76 683.455 L1739.2 683.455 L1738.64 683.455 L1738.08 683.455 L1737.52 683.455 L1736.97 683.455 L1736.41 683.455 L1735.85 683.455 L1735.29 683.455 L1734.73 683.455 L1734.17 683.455 L1733.61 683.455 L1733.05 683.455 L1732.49 683.455 L1731.93 683.455 L1731.37 683.455 L1730.81 683.455 L1730.25 683.455 L1729.69 683.455 L1729.14 683.455 L1728.58 683.455 L1728.02 683.455 L1727.46 683.455 L1726.9 683.455 L1726.34 683.455 L1725.78 683.455 L1725.22 683.455 L1724.66 683.455 L1724.1 683.455 L1723.54 683.455 L1722.98 683.455 L1722.42 683.455 L1721.87 683.455 L1721.31 683.455 L1720.75 683.455 L1720.19 683.455 L1719.63 683.455 L1719.07 683.455 L1718.51 683.455 L1717.95 683.455 L1717.39 683.455 L1716.83 683.455 L1716.27 683.455 L1715.71 683.455 L1715.15 683.455 L1714.6 683.455 L1714.04 683.455 L1713.48 683.455 L1712.92 683.455 L1712.36 683.455 L1711.8 683.455 L1711.24 683.455 L1710.68 683.455 L1710.12 683.455 L1709.56 683.455 L1709 683.455 L1708.44 683.455 L1707.88 683.455 L1707.32 683.455 L1706.77 683.455 L1706.21 683.455 L1705.65 683.455 L1705.09 683.455 L1704.53 683.455 L1703.97 683.455 L1703.41 683.455 L1702.85 683.455 L1702.29 683.455 L1701.73 683.455 L1701.17 683.455 L1700.61 683.455 L1700.05 683.455 L1699.5 683.455 L1698.94 683.455 L1698.38 683.455 L1697.82 683.455 L1697.26 683.455 L1696.7 683.455 L1696.14 683.455 L1695.58 683.455 L1695.02 683.455 L1694.46 683.455 L1693.9 683.455 L1693.34 683.455 L1692.78 683.455 L1692.23 683.455 L1691.67 683.455 L1691.11 683.455 L1690.55 683.455 L1689.99 683.455 L1689.43 683.455 L1688.87 683.455 L1688.31 683.455 L1687.75 683.455 L1687.19 683.455 L1686.63 683.455 L1686.07 683.455 L1685.51 683.455 L1684.95 683.455 L1684.4 683.455 L1683.84 683.455 L1683.28 683.455 L1682.72 683.455 L1682.16 683.455 L1681.6 683.455 L1681.04 683.455 L1680.48 683.455 L1679.92 683.455 L1679.36 683.455 L1678.8 683.455 L1678.24 683.455 L1677.68 683.455 L1677.13 683.455 L1676.57 683.455 L1676.01 683.455 L1675.45 683.455 L1674.89 683.455 L1674.33 683.455 L1673.77 683.455 L1673.21 683.455 L1672.65 683.455 L1672.09 683.455 L1671.53 683.455 L1670.97 683.455 L1670.41 683.455 L1669.85 683.455 L1669.3 683.455 L1668.74 683.455 L1668.18 683.455 L1667.62 683.455 L1667.06 683.455 L1666.5 683.455 L1665.94 683.455 L1665.38 683.455 L1664.82 683.455 L1664.26 683.455 L1663.7 683.455 L1663.14 683.455 L1662.58 683.455 L1662.03 683.455 L1661.47 683.455 L1660.91 683.455 L1660.35 683.455 L1659.79 683.455 L1659.23 683.455 L1658.67 683.455 L1658.11 683.455 L1657.55 683.455 L1656.99 683.455 L1656.43 683.455 L1655.87 683.455 L1655.31 683.455 L1654.76 683.455 L1654.2 683.455 L1653.64 683.455 L1653.08 683.455 L1652.52 683.455 L1651.96 683.455 L1651.4 683.455 L1650.84 683.455 L1650.28 683.455 L1649.72 683.455 L1649.16 683.455 L1648.6 683.455 L1648.04 683.455 L1647.48 683.455 L1646.93 683.455 L1646.37 683.455 L1645.81 683.455 L1645.25 683.455 L1644.69 683.455 L1644.13 683.455 L1643.57 683.455 L1643.01 683.455 L1642.45 683.455 L1641.89 683.455 L1641.33 683.455 L1640.77 683.455 L1640.21 683.455 L1639.66 683.455 L1639.1 683.455 L1638.54 683.455 L1637.98 683.455 L1637.42 683.455 L1636.86 683.455 L1636.3 683.455 L1635.74 683.455 L1635.18 683.455 L1634.62 683.455 L1634.06 683.455 L1633.5 683.455 L1632.94 683.455 L1632.39 683.455 L1631.83 683.455 L1631.27 683.455 L1630.71 683.455 L1630.15 683.455 L1629.59 683.455 L1629.03 683.455 L1628.47 683.455 L1627.91 683.455 L1627.35 683.455 L1626.79 683.455 L1626.23 683.455 L1625.67 683.455 L1625.11 683.455 L1624.56 683.455 L1624 683.455 L1623.44 683.455 L1622.88 683.455 L1622.32 683.455 L1621.76 683.455 L1621.2 683.455 L1620.64 683.455 L1620.08 683.455 L1619.52 683.455 L1618.96 683.455 L1618.4 683.455 L1617.84 683.455 L1617.29 683.455 L1616.73 683.455 L1616.17 683.455 L1615.61 683.455 L1615.05 683.455 L1614.49 683.455 L1613.93 683.455 L1613.37 683.455 L1612.81 683.455 L1612.25 683.455 L1611.69 683.455 L1611.13 683.455 L1610.57 683.455 L1610.02 683.455 L1609.46 683.455 L1608.9 683.455 L1608.34 683.455 L1607.78 683.455 L1607.22 683.455 L1606.66 683.455 L1606.1 683.455 L1605.54 683.455 L1604.98 683.455 L1604.42 683.455 L1603.86 683.455 L1603.3 683.455 L1602.74 683.455 L1602.19 683.455 L1601.63 683.455 L1601.07 683.455 L1600.51 683.455 L1599.95 683.455 L1599.39 683.455 L1598.83 683.455 L1598.27 683.455 L1597.71 683.455 L1597.15 683.455 L1596.59 683.455 L1596.03 683.455 L1595.47 683.455 L1594.92 683.455 L1594.36 683.455 L1593.8 683.455 L1593.24 683.455 L1592.68 683.455 L1592.12 683.455 L1591.56 683.455 L1591 683.455 L1590.44 683.455 L1589.88 683.455 L1589.32 683.455 L1588.76 683.455 L1588.2 683.455 L1587.65 683.455 L1587.09 683.455 L1586.53 683.455 L1585.97 683.455 L1585.41 683.455 L1584.85 683.455 L1584.29 683.455 L1583.73 683.455 L1583.17 683.455 L1582.61 683.455 L1582.05 683.455 L1581.49 683.455 L1580.93 683.455 L1580.37 683.455 L1579.82 683.455 L1579.26 683.455 L1578.7 683.455 L1578.14 683.455 L1577.58 683.455 L1577.02 683.455 L1576.46 683.455 L1575.9 683.455 L1575.34 683.455 L1574.78 683.455 L1574.22 683.455 L1573.66 683.455 L1573.1 683.455 L1572.55 683.455 L1571.99 683.455 L1571.43 683.455 L1570.87 683.455 L1570.31 683.455 L1569.75 683.455 L1569.19 683.455 L1568.63 683.455 L1568.07 683.455 L1567.51 683.455 L1566.95 683.455 L1566.39 683.455 L1565.83 683.455 L1565.28 683.455 L1564.72 683.455 L1564.16 683.455 L1563.6 683.455 L1563.04 683.455 L1562.48 683.455 L1561.92 683.455 L1561.36 683.455 L1560.8 683.455 L1560.24 683.455 L1559.68 683.455 L1559.12 683.455 L1558.56 683.455 L1558 683.455 L1557.45 683.455 L1556.89 683.455 L1556.33 683.455 L1555.77 683.455 L1555.21 683.455 L1554.65 683.455 L1554.09 683.455 L1553.53 683.455 L1552.97 683.455 L1552.41 683.455 L1551.85 683.455 L1551.29 683.455 L1550.73 683.455 L1550.18 683.455 L1549.62 683.455 L1549.06 683.455 L1548.5 683.455 L1547.94 683.455 L1547.38 683.455 L1546.82 683.455 L1546.26 683.455 L1545.7 683.455 L1545.14 683.455 L1544.58 683.455 L1544.02 683.455 L1543.46 683.455 L1542.9 683.455 L1542.35 683.455 L1541.79 683.455 L1541.23 683.455 L1540.67 683.455 L1540.11 683.455 L1539.55 683.455 L1538.99 683.455 L1538.43 683.455 L1537.87 683.455 L1537.31 683.455 L1536.75 683.455 L1536.19 683.455 L1535.63 683.455 L1535.08 683.455 L1534.52 683.455 L1533.96 683.455 L1533.4 683.455 L1532.84 683.455 L1532.28 683.455 L1531.72 683.455 L1531.16 683.455 L1530.6 683.455 L1530.04 683.455 L1529.48 683.455 L1528.92 683.455 L1528.36 683.455 L1527.81 683.455 L1527.25 683.455 L1526.69 683.455 L1526.13 683.455 L1525.57 683.455 L1525.01 683.455 L1524.45 683.455 L1523.89 683.455 L1523.33 683.455 L1522.77 683.455 L1522.21 683.455 L1521.65 683.455 L1521.09 683.455 L1520.53 683.455 L1519.98 683.455 L1519.42 683.455 L1518.86 683.455 L1518.3 683.455 L1517.74 683.455 L1517.18 683.455 L1516.62 683.455 L1516.06 683.455 L1515.5 683.455 L1514.94 683.455 L1514.38 683.455 L1513.82 683.455 L1513.26 683.455 L1512.71 683.455 L1512.15 683.455 L1511.59 683.455 L1511.03 683.455 L1510.47 683.455 L1509.91 683.455 L1509.35 683.455 L1508.79 683.455 L1508.23 683.455 L1507.67 683.455 L1507.11 683.455 L1506.55 683.455 L1505.99 683.455 L1505.44 683.455 L1504.88 683.455 L1504.32 683.455 L1503.76 683.455 L1503.2 683.455 L1502.64 683.455 L1502.08 683.455 L1501.52 683.455 L1500.96 683.455 L1500.4 683.455 L1499.84 683.455 L1499.28 683.455 L1498.72 683.455 L1498.16 683.455 L1497.61 683.455 L1497.05 683.455 L1496.49 683.455 L1495.93 683.455 L1495.37 683.455 L1494.81 683.455 L1494.25 683.455 L1493.69 683.455 L1493.13 683.455 L1492.57 683.455 L1492.01 683.455 L1491.45 683.455 L1490.89 683.455 L1490.34 683.455 L1489.78 683.455 L1489.22 683.455 L1488.66 683.455 L1488.1 683.455 L1487.54 683.455 L1486.98 683.455 L1486.42 683.455 L1485.86 683.455 L1485.3 683.455 L1484.74 683.455 L1484.18 683.455 L1483.62 683.455 L1483.07 683.455 L1482.51 683.455 L1481.95 683.455 L1481.39 683.455 L1480.83 683.455 L1480.27 683.455 L1479.71 683.455 L1479.15 683.455 L1478.59 683.455 L1478.03 683.455 L1477.47 683.455 L1476.91 683.455 L1476.35 683.455 L1475.79 683.455 L1475.24 683.455 L1474.68 683.455 L1474.12 683.455 L1473.56 683.455 L1473 683.455 L1472.44 683.455 L1471.88 683.455 L1471.32 683.455 L1470.76 683.455 L1470.2 683.455 L1469.64 683.455 L1469.08 683.455 L1468.52 683.455 L1467.97 683.455 L1467.41 683.455 L1466.85 683.455 L1466.29 683.455 L1465.73 683.455 L1465.17 683.455 L1464.61 683.455 L1464.05 683.455 L1463.49 683.455 L1462.93 683.455 L1462.37 683.455 L1461.81 683.455 L1461.25 683.455 L1460.7 683.455 L1460.14 683.455 L1459.58 683.455 L1459.02 683.455 L1458.46 683.455 L1457.9 683.455 L1457.34 683.455 L1456.78 683.455 L1456.22 683.455 L1455.66 683.455 L1455.1 683.455 L1454.54 683.455 L1453.98 683.455 L1453.42 683.455 L1452.87 683.455 L1452.31 683.455 L1451.75 683.455 L1451.19 683.455 L1450.63 683.455 L1450.07 683.455 L1449.51 683.455 L1448.95 683.455 L1448.39 683.455 L1447.83 683.455 L1447.27 683.455 L1446.71 683.455 L1446.15 683.455 L1445.6 683.455 L1445.04 683.455 L1444.48 683.455 L1443.92 683.455 L1443.36 683.455 L1442.8 683.455 L1442.24 683.455 L1441.68 683.455 L1441.12 683.455 L1440.56 683.455 L1440 683.455 L1439.44 683.455 L1438.88 683.455 L1438.33 683.455 L1437.77 683.455 L1437.21 683.455 L1436.65 683.455 L1436.09 683.455 L1435.53 683.455 L1434.97 683.455 L1434.41 683.455 L1433.85 683.455 L1433.29 683.455 L1432.73 683.455 L1432.17 683.455 L1431.61 683.455 L1431.05 683.455 L1430.5 683.455 L1429.94 683.455 L1429.38 683.455 L1428.82 683.455 L1428.26 683.455 L1427.7 683.455 L1427.14 683.455 L1426.58 683.455 L1426.02 683.455 L1425.46 683.455 L1424.9 683.455 L1424.34 683.455 L1423.78 683.455 L1423.23 683.455 L1422.67 683.455 L1422.11 683.455 L1421.55 683.455 L1420.99 683.455 L1420.43 683.455 L1419.87 683.455 L1419.31 683.455 L1418.75 683.455 L1418.19 683.455 L1417.63 683.455 L1417.07 683.455 L1416.51 683.455 L1415.95 683.455 L1415.4 683.455 L1414.84 683.455 L1414.28 683.455 L1413.72 683.455 L1413.16 683.455 L1412.6 683.455 L1412.04 683.455 L1411.48 683.455 L1410.92 683.455 L1410.36 683.455 L1409.8 683.455 L1409.24 683.455 L1408.68 683.455 L1408.13 683.455 L1407.57 683.455 L1407.01 683.455 L1406.45 683.455 L1405.89 683.455 L1405.33 683.455 L1404.77 683.455 L1404.21 683.455 L1403.65 683.455 L1403.09 683.455 L1402.53 683.455 L1401.97 683.455 L1401.41 683.455 L1400.86 683.455 L1400.3 683.455 L1399.74 683.455 L1399.18 683.455 L1398.62 683.455 L1398.06 683.455 L1397.5 683.455 L1396.94 683.455 L1396.38 683.455 L1395.82 683.455 L1395.26 683.455 L1394.7 683.455 L1394.14 683.455 L1393.58 683.455 L1393.03 683.455 L1392.47 683.455 L1391.91 683.455 L1391.35 683.455 L1390.79 683.455 L1390.23 683.455 L1389.67 683.455 L1389.11 683.455 L1388.55 683.455 L1387.99 683.455 L1387.43 683.455 L1386.87 683.455 L1386.31 683.455 L1385.76 683.455 L1385.2 683.455 L1384.64 683.455 L1384.08 683.455 L1383.52 683.455 L1382.96 683.455 L1382.4 683.455 L1381.84 683.455 L1381.28 683.455 L1380.72 683.455 L1380.16 683.455 L1379.6 683.455 L1379.04 683.455 L1378.49 683.455 L1377.93 683.455 L1377.37 683.455 L1376.81 683.455 L1376.25 683.455 L1375.69 683.455 L1375.13 683.455 L1374.57 683.455 L1374.01 683.455 L1373.45 683.455 L1372.89 683.455 L1372.33 683.455 L1371.77 683.455 L1371.21 683.455 L1370.66 683.455 L1370.1 683.455 L1369.54 683.455 L1368.98 683.455 L1368.42 683.455 L1367.86 683.455 L1367.3 683.455 L1366.74 683.455 L1366.18 683.455 L1365.62 683.455 L1365.06 683.455 L1364.5 683.455 L1363.94 683.455 L1363.39 683.455 L1362.83 683.455 L1362.27 683.455 L1361.71 683.455 L1361.15 683.455 L1360.59 683.455 L1360.03 683.455 L1359.47 683.455 L1358.91 683.455 L1358.35 683.455 L1357.79 683.455 L1357.23 683.455 L1356.67 683.455 L1356.12 683.455 L1355.56 683.455 L1355 683.455 L1354.44 683.455 L1353.88 683.455 L1353.32 683.455 L1352.76 683.455 L1352.2 683.455 L1351.64 683.455 L1351.08 683.455 L1350.52 683.455 L1349.96 683.455 L1349.4 683.455 L1348.84 683.455 L1348.29 683.455 L1347.73 683.455 L1347.17 683.455 L1346.61 683.455 L1346.05 683.455 L1345.49 683.455 L1344.93 683.455 L1344.37 683.455 L1343.81 683.455 L1343.25 683.455 L1342.69 683.455 L1342.13 683.455 L1341.57 683.455 L1341.02 683.455 L1340.46 683.455 L1339.9 683.455 L1339.34 683.455 L1338.78 683.455 L1338.22 683.455 L1337.66 683.455 L1337.1 683.455 L1336.54 683.455 L1335.98 683.455 L1335.42 683.455 L1334.86 683.455 L1334.3 683.455 L1333.75 683.455 L1333.19 683.455 L1332.63 683.455 L1332.07 683.455 L1331.51 683.455 L1330.95 683.455 L1330.39 683.455 L1329.83 683.455 L1329.27 683.455 L1328.71 683.455 L1328.15 683.455 L1327.59 683.455 L1327.03 683.455 L1326.47 683.455 L1325.92 683.455 L1325.36 683.455 L1324.8 683.455 L1324.24 683.455 L1323.68 683.455 L1323.12 683.455 L1322.56 683.455 L1322 683.455 L1321.44 683.455 L1320.88 683.455 L1320.32 683.455 L1319.76 683.455 L1319.2 683.455 L1318.65 683.455 L1318.09 683.455 L1317.53 683.455 L1316.97 683.455 L1316.41 683.455 L1315.85 683.455 L1315.29 683.455 L1314.73 683.455 L1314.17 683.455 L1313.61 683.455 L1313.05 683.455 L1312.49 683.455 L1311.93 683.455 L1311.38 683.455 L1310.82 683.455 L1310.26 683.455 L1309.7 683.455 L1309.14 683.455 L1308.58 683.455 L1308.02 683.455 L1307.46 683.455 L1306.9 683.455 L1306.34 683.455 L1305.78 683.455 L1305.22 683.455 L1304.66 683.455 L1304.1 683.455 L1303.55 683.455 L1302.99 683.455 L1302.43 683.455 L1301.87 683.455 L1301.31 683.455 L1300.75 683.455 L1300.19 683.455 L1299.63 683.455 L1299.07 683.455 L1298.51 683.455 L1297.95 683.455 L1297.39 683.455 L1296.83 683.455 L1296.28 683.455 L1295.72 683.455 L1295.16 683.455 L1294.6 683.455 L1294.04 683.455 L1293.48 683.455 L1292.92 683.455 L1292.36 683.455 L1291.8 683.455 L1291.24 683.455 L1290.68 683.455 L1290.12 683.455 L1289.56 683.455 L1289 683.455 L1288.45 683.455 L1287.89 683.455 L1287.33 683.455 L1286.77 683.455 L1286.21 683.455 L1285.65 683.455 L1285.09 683.455 L1284.53 683.455 L1283.97 683.455 L1283.41 683.455 L1282.85 683.455 L1282.29 683.455 L1281.73 683.455 L1281.18 683.455 L1280.62 683.455 L1280.06 683.455 L1279.5 683.455 L1278.94 683.455 L1278.38 683.455 L1277.82 683.455 L1277.26 683.455 L1276.7 683.455 L1276.14 683.455 L1275.58 683.455 L1275.02 683.455 L1274.46 683.455 L1273.91 683.455 L1273.35 683.455 L1272.79 683.455 L1272.23 683.455 L1271.67 683.455 L1271.11 683.455 L1270.55 683.455 L1269.99 683.455 L1269.43 683.455 L1268.87 683.455 L1268.31 683.455 L1267.75 683.455 L1267.19 683.455 L1266.63 683.455 L1266.08 683.455 L1265.52 683.455 L1264.96 683.455 L1264.4 683.455 L1263.84 683.455 L1263.28 683.455 L1262.72 683.455 L1262.16 683.455 L1261.6 683.455 L1261.04 683.455 L1260.48 683.455 L1259.92 683.455 L1259.36 683.455 L1258.81 683.455 L1258.25 683.455 L1257.69 683.455 L1257.13 683.455 L1256.57 683.455 L1256.01 683.455 L1255.45 683.455 L1254.89 683.455 L1254.33 683.455 L1253.77 683.455 L1253.21 683.455 L1252.65 683.455 L1252.09 683.455 L1251.54 683.455 L1250.98 683.455 L1250.42 683.455 L1249.86 683.455 L1249.3 683.455 L1248.74 683.455 L1248.18 683.455 L1247.62 683.455 L1247.06 683.455 L1246.5 683.455 L1245.94 683.455 L1245.38 683.455 L1244.82 683.455 L1244.26 683.455 L1243.71 683.455 L1243.15 683.455 L1242.59 683.455 L1242.03 683.455 L1241.47 683.455 L1240.91 683.455 L1240.35 683.455 L1239.79 683.455 L1239.23 683.455 L1238.67 683.455 L1238.11 683.455 L1237.55 683.455 L1236.99 683.455 L1236.44 683.455 L1235.88 683.455 L1235.32 683.455 L1234.76 683.455 L1234.2 683.455 L1233.64 683.455 L1233.08 683.455 L1232.52 683.455 L1231.96 683.455 L1231.4 683.455 L1230.84 683.455 L1230.28 683.455 L1229.72 683.455 L1229.17 683.455 L1228.61 683.455 L1228.05 683.455 L1227.49 683.455 L1226.93 683.455 L1226.37 683.455 L1225.81 683.455 L1225.25 683.455 L1224.69 683.455 L1224.13 683.455 L1223.57 683.455 L1223.01 683.455 L1222.45 683.455 L1221.89 683.455 L1221.34 683.455 L1220.78 683.455 L1220.22 683.455 L1219.66 683.455 L1219.1 683.455 L1218.54 683.455 L1217.98 683.455 L1217.42 683.455 L1216.86 683.455 L1216.3 683.455 L1215.74 683.455 L1215.18 683.455 L1214.62 683.455 L1214.07 683.455 L1213.51 683.455 L1212.95 683.455 L1212.39 683.455 L1211.83 683.455 L1211.27 683.455 L1210.71 683.455 L1210.15 683.455 L1209.59 683.455 L1209.03 683.455 L1208.47 683.455 L1207.91 683.455 L1207.35 683.455 L1206.8 683.455 L1206.24 683.455 L1205.68 683.455 L1205.12 683.455 L1204.56 683.455 L1204 683.455 L1203.44 683.455 L1202.88 683.455 L1202.32 683.455 L1201.76 683.455 L1201.2 683.455 L1200.64 683.455 L1200.08 683.455 L1199.52 683.455 L1198.97 683.455 L1198.41 683.455 L1197.85 683.455 L1197.29 683.455 L1196.73 683.455 L1196.17 683.455 L1195.61 683.455 L1195.05 683.455 L1194.49 683.455 L1193.93 683.455 L1193.37 683.455 L1192.81 683.455 L1192.25 683.455 L1191.7 683.455 L1191.14 683.455 L1190.58 683.455 L1190.02 683.455 L1189.46 683.455 L1188.9 683.455 L1188.34 683.455 L1187.78 683.455 L1187.22 683.455 L1186.66 683.455 L1186.1 683.455 L1185.54 683.455 L1184.98 683.455 L1184.43 683.455 L1183.87 683.455 L1183.31 683.455 L1182.75 683.455 L1182.19 683.455 L1181.63 683.455 L1181.07 683.455 L1180.51 683.455 L1179.95 683.455 L1179.39 683.455 L1178.83 683.455 L1178.27 683.455 L1177.71 683.455 L1177.15 683.455 L1176.6 683.455 L1176.04 683.455 L1175.48 683.455 L1174.92 683.455 L1174.36 683.455 L1173.8 683.455 L1173.24 683.455 L1172.68 683.455 L1172.12 683.455 L1171.56 683.455 L1171 683.455 L1170.44 683.455 L1169.88 683.455 L1169.33 683.455 L1168.77 683.455 L1168.21 683.455 L1167.65 683.455 L1167.09 683.455 L1166.53 683.455 L1165.97 683.455 L1165.41 683.455 L1164.85 683.455 L1164.29 683.455 L1163.73 683.455 L1163.17 683.455 L1162.61 683.455 L1162.05 683.455 L1161.5 683.455 L1160.94 683.455 L1160.38 683.455 L1159.82 683.455 L1159.26 683.455 L1158.7 683.455 L1158.14 683.455 L1157.58 683.455 L1157.02 683.455 L1156.46 683.455 L1155.9 683.455 L1155.34 683.455 L1154.78 683.455 L1154.23 683.455 L1153.67 683.455 L1153.11 683.455 L1152.55 683.455 L1151.99 683.455 L1151.43 683.455 L1150.87 683.455 L1150.31 683.455 L1149.75 683.455 L1149.19 683.455 L1148.63 683.455 L1148.07 683.455 L1147.51 683.455 L1146.96 683.455 L1146.4 683.455 L1145.84 683.455 L1145.28 683.455 L1144.72 683.455 L1144.16 683.455 L1143.6 683.455 L1143.04 683.455 L1142.48 683.455 L1141.92 683.455 L1141.36 683.455 L1140.8 683.455 L1140.24 683.455 L1139.68 683.455 L1139.13 683.455 L1138.57 683.455 L1138.01 683.455 L1137.45 683.455 L1136.89 683.455 L1136.33 683.455 L1135.77 683.455 L1135.21 683.455 L1134.65 683.455 L1134.09 683.455 L1133.53 683.455 L1132.97 683.455 L1132.41 683.455 L1131.86 683.455 L1131.3 683.455 L1130.74 683.455 L1130.18 683.455 L1129.62 683.455 L1129.06 683.455 L1128.5 683.455 L1127.94 683.455 L1127.38 683.455 L1126.82 683.455 L1126.26 683.455 L1125.7 683.455 L1125.14 683.455 L1124.59 683.455 L1124.03 683.455 L1123.47 683.455 L1122.91 683.455 L1122.35 683.455 L1121.79 683.455 L1121.23 683.455 L1120.67 683.455 L1120.11 683.455 L1119.55 683.455 L1118.99 683.455 L1118.43 683.455 L1117.87 683.455 L1117.31 683.455 L1116.76 683.455 L1116.2 683.455 L1115.64 683.455 L1115.08 683.455 L1114.52 683.455 L1113.96 683.455 L1113.4 683.455 L1112.84 683.455 L1112.28 683.455 L1111.72 683.455 L1111.16 683.455 L1110.6 683.455 L1110.04 683.455 L1109.49 683.455 L1108.93 683.455 L1108.37 683.455 L1107.81 683.455 L1107.25 683.455 L1106.69 683.455 L1106.13 683.455 L1105.57 683.455 L1105.01 683.455 L1104.45 683.455 L1103.89 683.455 L1103.33 683.455 L1102.77 683.455 L1102.22 683.455 L1101.66 683.455 L1101.1 683.455 L1100.54 683.455 L1099.98 683.455 L1099.42 683.455 L1098.86 683.455 L1098.3 683.455 L1097.74 683.455 L1097.18 683.455 L1096.62 683.455 L1096.06 683.455 L1095.5 683.455 L1094.94 683.455 L1094.39 683.455 L1093.83 683.455 L1093.27 683.455 L1092.71 683.455 L1092.15 683.455 L1091.59 683.455 L1091.03 683.455 L1090.47 683.455 L1089.91 683.455 L1089.35 683.455 L1088.79 683.455 L1088.23 683.455 L1087.67 683.455 L1087.12 683.455 L1086.56 683.455 L1086 683.455 L1085.44 683.455 L1084.88 683.455 L1084.32 683.455 L1083.76 683.455 L1083.2 683.455 L1082.64 683.455 L1082.08 683.455 L1081.52 683.455 L1080.96 683.455 L1080.4 683.455 L1079.85 683.455 L1079.29 683.455 L1078.73 683.455 L1078.17 683.455 L1077.61 683.455 L1077.05 683.455 L1076.49 683.455 L1075.93 683.455 L1075.37 683.455 L1074.81 683.455 L1074.25 683.455 L1073.69 683.455 L1073.13 683.455 L1072.57 683.455 L1072.02 683.455 L1071.46 683.455 L1070.9 683.455 L1070.34 683.455 L1069.78 683.455 L1069.22 683.455 L1068.66 683.455 L1068.1 683.455 L1067.54 683.455 L1066.98 683.455 L1066.42 683.455 L1065.86 683.455 L1065.3 683.455 L1064.75 683.455 L1064.19 683.455 L1063.63 683.455 L1063.07 683.455 L1062.51 683.455 L1061.95 683.455 L1061.39 683.455 L1060.83 683.455 L1060.27 683.455 L1059.71 683.455 L1059.15 683.455 L1058.59 683.455 L1058.03 683.455 L1057.48 683.455 L1056.92 683.455 L1056.36 683.455 L1055.8 683.455 L1055.24 683.455 L1054.68 683.455 L1054.12 683.455 L1053.56 683.455 L1053 683.455 L1052.44 683.455 L1051.88 683.455 L1051.32 683.455 L1050.76 683.455 L1050.2 683.455 L1049.65 683.455 L1049.09 683.455 L1048.53 683.455 L1047.97 683.455 L1047.41 683.455 L1046.85 683.455 L1046.29 683.455 L1045.73 683.455 L1045.17 683.455 L1044.61 683.455 L1044.05 683.455 L1043.49 683.455 L1042.93 683.455 L1042.38 683.455 L1041.82 683.455 L1041.26 683.455 L1040.7 683.455 L1040.14 683.455 L1039.58 683.455 L1039.02 683.455 L1038.46 683.455 L1037.9 683.455 L1037.34 683.455 L1036.78 683.455 L1036.22 683.455 L1035.66 683.455 L1035.1 683.455 L1034.55 683.455 L1033.99 683.455 L1033.43 683.455 L1032.87 683.455 L1032.31 683.455 L1031.75 683.455 L1031.19 683.455 L1030.63 683.455 L1030.07 683.455 L1029.51 683.455 L1028.95 683.455 L1028.39 683.455 L1027.83 683.455 L1027.28 683.455 L1026.72 683.455 L1026.16 683.455 L1025.6 683.455 L1025.04 683.455 L1024.48 683.455 L1023.92 683.455 L1023.36 683.455 L1022.8 683.455 L1022.24 683.455 L1021.68 683.455 L1021.12 683.455 L1020.56 683.455 L1020.01 683.455 L1019.45 683.455 L1018.89 683.455 L1018.33 683.455 L1017.77 683.455 L1017.21 683.455 L1016.65 683.455 L1016.09 683.455 L1015.53 683.455 L1014.97 683.455 L1014.41 683.455 L1013.85 683.455 L1013.29 683.455 L1012.73 683.455 L1012.18 683.455 L1011.62 683.455 L1011.06 683.455 L1010.5 683.455 L1009.94 683.455 L1009.38 683.455 L1008.82 683.455 L1008.26 683.455 L1007.7 683.455 L1007.14 683.455 L1006.58 683.455 L1006.02 683.455 L1005.46 683.455 L1004.91 683.455 L1004.35 683.455 L1003.79 683.455 L1003.23 683.455 L1002.67 683.455 L1002.11 683.455 L1001.55 683.455 L1000.99 683.455 L1000.43 683.455 L999.872 683.455 L999.313 683.455 L998.754 683.455 L998.194 683.455 L997.635 683.455 L997.076 683.455 L996.517 683.455 L995.957 683.455 L995.398 683.455 L994.839 683.455 L994.28 683.455 L993.72 683.455 L993.161 683.455 L992.602 683.455 L992.043 683.455 L991.483 683.455 L990.924 683.455 L990.365 683.455 L989.806 683.455 L989.246 683.455 L988.687 683.455 L988.128 683.455 L987.569 683.455 L987.009 683.455 L986.45 683.455 L985.891 683.455 L985.332 683.455 L984.772 683.455 L984.213 683.455 L983.654 683.455 L983.095 683.455 L982.535 683.455 L981.976 683.455 L981.417 683.455 L980.858 683.455 L980.298 683.455 L979.739 683.455 L979.18 683.455 L978.621 683.455 L978.061 683.455 L977.502 683.455 L976.943 683.455 L976.384 683.455 L975.824 683.455 L975.265 683.455 L974.706 683.455 L974.147 683.455 L973.587 683.455 L973.028 683.455 L972.469 683.455 L971.91 683.455 L971.35 683.455 L970.791 683.455 L970.232 683.455 L969.673 683.455 L969.113 683.455 L968.554 683.455 L967.995 683.455 L967.436 683.455 L966.876 683.455 L966.317 683.455 L965.758 683.455 L965.199 683.455 L964.639 683.455 L964.08 683.455 L963.521 683.455 L962.962 683.455 L962.402 683.455 L961.843 683.455 L961.284 683.455 L960.725 683.455 L960.165 683.455 L959.606 683.455 L959.047 683.455 L958.488 683.455 L957.928 683.455 L957.369 683.455 L956.81 683.455 L956.251 683.455 L955.691 683.455 L955.132 683.455 L954.573 683.455 L954.014 683.455 L953.454 683.455 L952.895 683.455 L952.336 683.455 L951.777 683.455 L951.217 683.455 L950.658 683.455 L950.099 683.455 L949.54 683.455 L948.98 683.455 L948.421 683.455 L947.862 683.455 L947.303 683.455 L946.743 683.455 L946.184 683.455 L945.625 683.455 L945.066 683.455 L944.506 683.455 L943.947 683.455 L943.388 683.455 L942.829 683.455 L942.269 683.455 L941.71 683.455 L941.151 683.455 L940.592 683.455 L940.032 683.455 L939.473 683.455 L938.914 683.455 L938.355 683.455 L937.795 683.455 L937.236 683.455 L936.677 683.455 L936.118 683.455 L935.558 683.455 L934.999 683.455 L934.44 683.455 L933.881 683.455 L933.321 683.455 L932.762 683.455 L932.203 683.455 L931.644 683.455 L931.084 683.455 L930.525 683.455 L929.966 683.455 L929.406 683.455 L928.847 683.455 L928.288 683.455 L927.729 683.455 L927.169 683.455 L926.61 683.455 L926.051 683.455 L925.492 683.455 L924.932 683.455 L924.373 683.455 L923.814 683.455 L923.255 683.455 L922.695 683.455 L922.136 683.455 L921.577 683.455 L921.018 683.455 L920.458 683.455 L919.899 683.455 L919.34 683.455 L918.781 683.455 L918.221 683.455 L917.662 683.455 L917.103 683.455 L916.544 683.455 L915.984 683.455 L915.425 683.455 L914.866 683.455 L914.307 683.455 L913.747 683.455 L913.188 683.455 L912.629 683.455 L912.07 683.455 L911.51 683.455 L910.951 683.455 L910.392 683.455 L909.833 683.455 L909.273 683.455 L908.714 683.455 L908.155 683.455 L907.596 683.455 L907.036 683.455 L906.477 683.455 L905.918 683.455 L905.359 683.455 L904.799 683.455 L904.24 683.455 L903.681 683.455 L903.122 683.455 L902.562 683.455 L902.003 683.455 L901.444 683.455 L900.885 683.455 L900.325 683.455 L899.766 683.455 L899.207 683.455 L898.648 683.455 L898.088 683.455 L897.529 683.455 L896.97 683.455 L896.411 683.455 L895.851 683.455 L895.292 683.455 L894.733 683.455 L894.174 683.455 L893.614 683.455 L893.055 683.455 L892.496 683.455 L891.937 683.455 L891.377 683.455 L890.818 683.455 L890.259 683.455 L889.7 683.455 L889.14 683.455 L888.581 683.455 L888.022 683.455 L887.463 683.455 L886.903 683.455 L886.344 683.455 L885.785 683.455 L885.226 683.455 L884.666 683.455 L884.107 683.455 L883.548 683.455 L882.989 683.455 L882.429 683.455 L881.87 683.455 L881.311 683.455 L880.752 683.455 L880.192 683.455 L879.633 683.455 L879.074 683.455 L878.515 683.455 L877.955 683.455 L877.396 683.455 L876.837 683.455 L876.278 683.455 L875.718 683.455 L875.159 683.455 L874.6 683.455 L874.041 683.455 L873.481 683.455 L872.922 683.455 L872.363 683.455 L871.804 683.455 L871.244 683.455 L870.685 683.455 L870.126 683.455 L869.567 683.455 L869.007 683.455 L868.448 683.455 L867.889 683.455 L867.33 683.455 L866.77 683.455 L866.211 683.455 L865.652 683.455 L865.093 683.455 L864.533 683.455 L863.974 683.455 L863.415 683.455 L862.856 683.455 L862.296 683.455 L861.737 683.455 L861.178 683.455 L860.619 683.455 L860.059 683.455 L859.5 683.455 L858.941 683.455 L858.382 683.455 L857.822 683.455 L857.263 683.455 L856.704 683.455 L856.145 683.455 L855.585 683.455 L855.026 683.455 L854.467 683.455 L853.908 683.455 L853.348 683.455 L852.789 683.455 L852.23 683.455 L851.671 683.455 L851.111 683.455 L850.552 683.455 L849.993 683.455 L849.434 683.455 L848.874 683.455 L848.315 683.455 L847.756 683.455 L847.197 683.455 L846.637 683.455 L846.078 683.455 L845.519 683.455 L844.96 683.455 L844.4 683.455 L843.841 683.455 L843.282 683.455 L842.723 683.455 L842.163 683.455 L841.604 683.455 L841.045 683.455 L840.486 683.455 L839.926 683.455 L839.367 683.455 L838.808 683.455 L838.249 683.455 L837.689 683.455 L837.13 683.455 L836.571 683.455 L836.012 683.455 L835.452 683.455 L834.893 683.455 L834.334 683.455 L833.775 683.455 L833.215 683.455 L832.656 683.455 L832.097 683.455 L831.538 683.455 L830.978 683.455 L830.419 683.455 L829.86 683.455 L829.301 683.455 L828.741 683.455 L828.182 683.455 L827.623 683.455 L827.064 683.455 L826.504 683.455 L825.945 683.455 L825.386 683.455 L824.827 683.455 L824.267 683.455 L823.708 683.455 L823.149 683.455 L822.59 683.455 L822.03 683.455 L821.471 683.455 L820.912 683.455 L820.353 683.455 L819.793 683.455 L819.234 683.455 L818.675 683.455 L818.116 683.455 L817.556 683.455 L816.997 683.455 L816.438 683.455 L815.879 683.455 L815.319 683.455 L814.76 683.455 L814.201 683.455 L813.642 683.455 L813.082 683.455 L812.523 683.455 L811.964 683.455 L811.405 683.455 L810.845 683.455 L810.286 683.455 L809.727 683.455 L809.168 683.455 L808.608 683.455 L808.049 683.455 L807.49 683.455 L806.931 683.455 L806.371 683.455 L805.812 683.455 L805.253 683.455 L804.693 683.455 L804.134 683.455 L803.575 683.455 L803.016 683.455 L802.456 683.455 L801.897 683.455 L801.338 683.455 L800.779 683.455 L800.219 683.455 L799.66 683.455 L799.101 683.455 L798.542 683.455 L797.982 683.455 L797.423 683.455 L796.864 683.455 L796.305 683.455 L795.745 683.455 L795.186 683.455 L794.627 683.455 L794.068 683.455 L793.508 683.455 L792.949 683.455 L792.39 683.455 L791.831 683.455 L791.271 683.455 L790.712 683.455 L790.153 683.455 L789.594 683.455 L789.034 683.455 L788.475 683.455 L787.916 683.455 L787.357 683.455 L786.797 683.455 L786.238 683.455 L785.679 683.455 L785.12 683.455 L784.56 683.455 L784.001 683.455 L783.442 683.455 L782.883 683.455 L782.323 683.455 L781.764 683.455 L781.205 683.455 L780.646 683.455 L780.086 683.455 L779.527 683.455 L778.968 683.455 L778.409 683.455 L777.849 683.455 L777.29 683.455 L776.731 683.455 L776.172 683.455 L775.612 683.455 L775.053 683.455 L774.494 683.455 L773.935 683.455 L773.375 683.455 L772.816 683.455 L772.257 683.455 L771.698 683.455 L771.138 683.455 L770.579 683.455 L770.02 683.455 L769.461 683.455 L768.901 683.455 L768.342 683.455 L767.783 683.455 L767.224 683.455 L766.664 683.455 L766.105 683.455 L765.546 683.455 L764.987 683.455 L764.427 683.455 L763.868 683.455 L763.309 683.455 L762.75 683.455 L762.19 683.455 L761.631 683.455 L761.072 683.455 L760.513 683.455 L759.953 683.455 L759.394 683.455 L758.835 683.455 L758.276 683.455 L757.716 683.455 L757.157 683.455 L756.598 683.455 L756.039 683.455 L755.479 683.455 L754.92 683.455 L754.361 683.455 L753.802 683.455 L753.242 683.455 L752.683 683.455 L752.124 683.455 L751.565 683.455 L751.005 683.455 L750.446 683.455 L749.887 683.455 L749.328 683.455 L748.768 683.455 L748.209 683.455 L747.65 683.455 L747.091 683.455 L746.531 683.455 L745.972 683.455 L745.413 683.455 L744.854 683.455 L744.294 683.455 L743.735 683.455 L743.176 683.455 L742.617 683.455 L742.057 683.455 L741.498 683.455 L740.939 683.455 L740.38 683.455 L739.82 683.455 L739.261 683.455 L738.702 683.455 L738.143 683.455 L737.583 683.455 L737.024 683.455 L736.465 683.455 L735.906 683.455 L735.346 683.455 L734.787 683.455 L734.228 683.455 L733.669 683.455 L733.109 683.455 L732.55 683.455 L731.991 683.455 L731.432 683.455 L730.872 683.455 L730.313 683.455 L729.754 683.455 L729.195 683.455 L728.635 683.455 L728.076 683.455 L727.517 683.455 L726.958 683.455 L726.398 683.455 L725.839 683.455 L725.28 683.455 L724.721 683.455 L724.161 683.455 L723.602 683.455 L723.043 683.455 L722.484 683.455 L721.924 683.455 L721.365 683.455 L720.806 683.455 L720.247 683.455  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.14 720.806,684.14 721.365,684.14 721.924,684.14 722.484,684.14 723.043,684.14 723.602,684.14 724.161,684.14 724.721,684.14 725.28,684.14 725.839,684.14 726.398,684.14 726.958,684.14 727.517,684.14 728.076,684.14 728.635,684.14 729.195,684.14 729.754,684.14 730.313,684.14 730.872,684.14 731.432,684.14 731.991,684.14 732.55,684.14 733.109,684.14 733.669,684.14 734.228,684.14 734.787,684.14 735.346,684.14 735.906,684.14 736.465,684.14 737.024,684.14 737.583,684.14 738.143,684.14 738.702,684.14 739.261,684.14 739.82,684.14 740.38,684.14 740.939,684.14 741.498,684.14 742.057,684.14 742.617,684.14 743.176,684.14 743.735,684.14 744.294,684.14 744.854,684.14 745.413,684.14 745.972,684.14 746.531,684.14 747.091,684.14 747.65,684.14 748.209,684.14 748.768,684.14 749.328,684.14 749.887,684.14 750.446,684.14 751.005,684.14 751.565,684.14 752.124,684.14 752.683,684.14 753.242,684.14 753.802,684.14 754.361,684.14 754.92,684.14 755.479,684.14 756.039,684.14 756.598,684.14 757.157,684.14 757.716,684.14 758.276,684.14 758.835,684.14 759.394,684.14 759.953,684.14 760.513,684.14 761.072,684.14 761.631,684.14 762.19,684.14 762.75,684.14 763.309,684.14 763.868,684.14 764.427,684.14 764.987,684.14 765.546,684.14 766.105,684.14 766.664,684.14 767.224,684.14 767.783,684.14 768.342,684.14 768.901,684.14 769.461,684.14 770.02,684.14 770.579,684.14 771.138,684.14 771.698,684.14 772.257,684.14 772.816,684.14 773.375,684.14 773.935,684.14 774.494,684.14 775.053,684.14 775.612,684.14 776.172,684.14 776.731,684.14 777.29,684.14 777.849,684.14 778.409,684.14 778.968,684.14 779.527,684.14 780.086,684.14 780.646,684.14 781.205,684.14 781.764,684.14 782.323,684.14 782.883,684.14 783.442,684.14 784.001,684.14 784.56,684.14 785.12,684.14 785.679,684.14 786.238,684.14 786.797,684.14 787.357,684.14 787.916,684.14 788.475,684.14 789.034,684.14 789.594,684.14 790.153,684.14 790.712,684.14 791.271,684.14 791.831,684.14 792.39,684.14 792.949,684.14 793.508,684.14 794.068,684.14 794.627,684.14 795.186,684.14 795.745,684.14 796.305,684.14 796.864,684.14 797.423,684.14 797.982,684.14 798.542,684.14 799.101,684.14 799.66,684.14 800.219,684.14 800.779,684.14 801.338,684.14 801.897,684.14 802.456,684.14 803.016,684.14 803.575,684.14 804.134,684.14 804.693,684.14 805.253,684.14 805.812,684.14 806.371,684.14 806.931,684.14 807.49,684.14 808.049,684.14 808.608,684.14 809.168,684.14 809.727,684.14 810.286,684.14 810.845,684.14 811.405,684.14 811.964,684.14 812.523,684.14 813.082,684.14 813.642,684.14 814.201,684.14 814.76,684.14 815.319,684.14 815.879,684.14 816.438,684.14 816.997,684.14 817.556,684.14 818.116,684.14 818.675,684.14 819.234,684.14 819.793,684.14 820.353,684.14 820.912,684.14 821.471,684.14 822.03,684.14 822.59,684.14 823.149,684.14 823.708,684.14 824.267,684.14 824.827,684.14 825.386,684.14 825.945,684.14 826.504,684.14 827.064,684.14 827.623,684.14 828.182,684.14 828.741,684.14 829.301,684.14 829.86,684.14 830.419,684.14 830.978,684.14 831.538,684.14 832.097,684.14 832.656,684.14 833.215,684.14 833.775,684.14 834.334,684.14 834.893,684.14 835.452,684.14 836.012,684.14 836.571,684.14 837.13,684.14 837.689,684.14 838.249,684.14 838.808,684.14 839.367,684.14 839.926,684.14 840.486,684.14 841.045,684.14 841.604,684.14 842.163,684.14 842.723,684.14 843.282,684.14 843.841,684.14 844.4,684.14 844.96,684.14 845.519,684.14 846.078,684.14 846.637,684.14 847.197,684.14 847.756,684.14 848.315,684.14 848.874,684.14 849.434,684.14 849.993,684.14 850.552,684.14 851.111,684.14 851.671,684.14 852.23,684.14 852.789,684.14 853.348,684.14 853.908,684.14 854.467,684.14 855.026,684.14 855.585,684.14 856.145,684.14 856.704,684.14 857.263,684.14 857.822,684.14 858.382,684.14 858.941,684.14 859.5,684.14 860.059,684.14 860.619,684.14 861.178,684.14 861.737,684.14 862.296,684.14 862.856,684.14 863.415,684.14 863.974,684.14 864.533,684.14 865.093,684.14 865.652,684.14 866.211,684.14 866.77,684.14 867.33,684.14 867.889,684.14 868.448,684.14 869.007,684.14 869.567,684.14 870.126,684.14 870.685,684.14 871.244,684.14 871.804,684.14 872.363,684.14 872.922,684.14 873.481,684.14 874.041,684.14 874.6,684.14 875.159,684.14 875.718,684.14 876.278,684.14 876.837,684.14 877.396,684.14 877.955,684.14 878.515,684.14 879.074,684.14 879.633,684.14 880.192,684.14 880.752,684.14 881.311,684.14 881.87,684.14 882.429,684.14 882.989,684.14 883.548,684.14 884.107,684.14 884.666,684.14 885.226,684.14 885.785,684.14 886.344,684.14 886.903,684.14 887.463,684.14 888.022,684.14 888.581,684.14 889.14,684.14 889.7,684.14 890.259,684.14 890.818,684.14 891.377,684.14 891.937,684.14 892.496,684.14 893.055,684.14 893.614,684.14 894.174,684.14 894.733,684.14 895.292,684.14 895.851,684.14 896.411,684.14 896.97,684.14 897.529,684.14 898.088,684.14 898.648,684.14 899.207,684.14 899.766,684.14 900.325,684.14 900.885,684.14 901.444,684.14 902.003,684.14 902.562,684.14 903.122,684.14 903.681,684.14 904.24,684.14 904.799,684.14 905.359,684.14 905.918,684.14 906.477,684.14 907.036,684.14 907.596,684.14 908.155,684.14 908.714,684.14 909.273,684.14 909.833,684.14 910.392,684.14 910.951,684.14 911.51,684.14 912.07,684.14 912.629,684.14 913.188,684.14 913.747,684.14 914.307,684.14 914.866,684.14 915.425,684.14 915.984,684.14 916.544,684.14 917.103,684.14 917.662,684.14 918.221,684.14 918.781,684.14 919.34,684.14 919.899,684.14 920.458,684.14 921.018,684.14 921.577,684.14 922.136,684.14 922.695,684.14 923.255,684.14 923.814,684.14 924.373,684.14 924.932,684.14 925.492,684.14 926.051,684.14 926.61,684.14 927.169,684.14 927.729,684.14 928.288,684.14 928.847,684.14 929.406,684.14 929.966,684.14 930.525,684.14 931.084,684.14 931.644,684.14 932.203,684.14 932.762,684.14 933.321,684.14 933.881,684.14 934.44,684.14 934.999,684.14 935.558,684.14 936.118,684.14 936.677,684.14 937.236,684.14 937.795,684.14 938.355,684.14 938.914,684.14 939.473,684.14 940.032,684.14 940.592,684.14 941.151,684.14 941.71,684.14 942.269,684.14 942.829,684.14 943.388,684.14 943.947,684.14 944.506,684.14 945.066,684.14 945.625,684.14 946.184,684.14 946.743,684.14 947.303,684.14 947.862,684.14 948.421,684.14 948.98,684.14 949.54,684.14 950.099,684.14 950.658,684.14 951.217,684.14 951.777,684.14 952.336,684.14 952.895,684.14 953.454,684.14 954.014,684.14 954.573,684.14 955.132,684.14 955.691,684.14 956.251,684.14 956.81,684.14 957.369,684.14 957.928,684.14 958.488,684.14 959.047,684.14 959.606,684.14 960.165,684.14 960.725,684.14 961.284,684.14 961.843,684.14 962.402,684.14 962.962,684.14 963.521,684.14 964.08,684.14 964.639,684.14 965.199,684.14 965.758,684.14 966.317,684.14 966.876,684.14 967.436,684.14 967.995,684.14 968.554,684.14 969.113,684.14 969.673,684.14 970.232,684.14 970.791,684.14 971.35,684.14 971.91,684.14 972.469,684.14 973.028,684.14 973.587,684.14 974.147,684.14 974.706,684.14 975.265,684.14 975.824,684.14 976.384,684.14 976.943,684.14 977.502,684.14 978.061,684.14 978.621,684.14 979.18,684.14 979.739,684.14 980.298,684.14 980.858,684.14 981.417,684.14 981.976,684.14 982.535,684.14 983.095,684.14 983.654,684.14 984.213,684.14 984.772,684.14 985.332,684.14 985.891,684.14 986.45,684.14 987.009,684.14 987.569,684.14 988.128,684.14 988.687,684.14 989.246,684.14 989.806,684.14 990.365,684.14 990.924,684.14 991.483,684.14 992.043,684.14 992.602,684.14 993.161,684.14 993.72,684.14 994.28,684.14 994.839,684.14 995.398,684.14 995.957,684.14 996.517,684.14 997.076,684.14 997.635,684.14 998.194,684.14 998.754,684.14 999.313,684.14 999.872,684.14 1000.43,684.14 1000.99,684.14 1001.55,684.14 1002.11,684.14 1002.67,684.14 1003.23,684.14 1003.79,684.14 1004.35,684.14 1004.91,684.14 1005.46,684.14 1006.02,684.14 1006.58,684.14 1007.14,684.14 1007.7,684.14 1008.26,684.14 1008.82,684.14 1009.38,684.14 1009.94,684.14 1010.5,684.14 1011.06,684.14 1011.62,684.14 1012.18,684.14 1012.73,684.14 1013.29,684.14 1013.85,684.14 1014.41,684.14 1014.97,684.14 1015.53,684.14 1016.09,684.14 1016.65,684.14 1017.21,684.14 1017.77,684.14 1018.33,684.14 1018.89,684.14 1019.45,684.14 1020.01,684.14 1020.56,684.14 1021.12,684.14 1021.68,684.14 1022.24,684.14 1022.8,684.14 1023.36,684.14 1023.92,684.14 1024.48,684.14 1025.04,684.14 1025.6,684.14 1026.16,684.14 1026.72,684.14 1027.28,684.14 1027.83,684.14 1028.39,684.14 1028.95,684.14 1029.51,684.14 1030.07,684.14 1030.63,684.14 1031.19,684.14 1031.75,684.14 1032.31,684.14 1032.87,684.14 1033.43,684.14 1033.99,684.14 1034.55,684.14 1035.1,684.14 1035.66,684.14 1036.22,684.14 1036.78,684.14 1037.34,684.14 1037.9,684.14 1038.46,684.14 1039.02,684.14 1039.58,684.14 1040.14,684.14 1040.7,684.14 1041.26,684.14 1041.82,684.14 1042.38,684.14 1042.93,684.14 1043.49,684.14 1044.05,684.14 1044.61,684.14 1045.17,684.14 1045.73,684.14 1046.29,684.14 1046.85,684.14 1047.41,684.14 1047.97,684.14 1048.53,684.14 1049.09,684.14 1049.65,684.14 1050.2,684.14 1050.76,684.14 1051.32,684.14 1051.88,684.14 1052.44,684.14 1053,684.14 1053.56,684.14 1054.12,684.14 1054.68,684.14 1055.24,684.14 1055.8,684.14 1056.36,684.14 1056.92,684.14 1057.48,684.14 1058.03,684.14 1058.59,684.14 1059.15,684.14 1059.71,684.14 1060.27,684.14 1060.83,684.14 1061.39,684.14 1061.95,684.14 1062.51,684.14 1063.07,684.14 1063.63,684.14 1064.19,684.14 1064.75,684.14 1065.3,684.14 1065.86,684.14 1066.42,684.14 1066.98,684.14 1067.54,684.14 1068.1,684.14 1068.66,684.14 1069.22,684.14 1069.78,684.14 1070.34,684.14 1070.9,684.14 1071.46,684.14 1072.02,684.14 1072.57,684.14 1073.13,684.14 1073.69,684.14 1074.25,684.14 1074.81,684.14 1075.37,684.14 1075.93,684.14 1076.49,684.14 1077.05,684.14 1077.61,684.14 1078.17,684.14 1078.73,684.14 1079.29,684.14 1079.85,684.14 1080.4,684.14 1080.96,684.14 1081.52,684.14 1082.08,684.14 1082.64,684.14 1083.2,684.14 1083.76,684.14 1084.32,684.14 1084.88,684.14 1085.44,684.14 1086,684.14 1086.56,684.14 1087.12,684.14 1087.67,684.14 1088.23,684.14 1088.79,684.14 1089.35,684.14 1089.91,684.14 1090.47,684.14 1091.03,684.14 1091.59,684.14 1092.15,684.14 1092.71,684.14 1093.27,684.14 1093.83,684.14 1094.39,684.14 1094.94,684.14 1095.5,684.14 1096.06,684.14 1096.62,684.14 1097.18,684.14 1097.74,684.14 1098.3,684.14 1098.86,684.14 1099.42,684.14 1099.98,684.14 1100.54,684.14 1101.1,684.14 1101.66,684.14 1102.22,684.14 1102.77,684.14 1103.33,684.14 1103.89,684.14 1104.45,684.14 1105.01,684.14 1105.57,684.14 1106.13,684.14 1106.69,684.14 1107.25,684.14 1107.81,684.14 1108.37,684.14 1108.93,684.14 1109.49,684.14 1110.04,684.14 1110.6,684.14 1111.16,684.14 1111.72,684.14 1112.28,684.14 1112.84,684.14 1113.4,684.14 1113.96,684.14 1114.52,684.14 1115.08,684.14 1115.64,684.14 1116.2,684.14 1116.76,684.14 1117.31,684.14 1117.87,684.14 1118.43,684.14 1118.99,684.14 1119.55,684.14 1120.11,684.14 1120.67,684.14 1121.23,684.14 1121.79,684.14 1122.35,684.14 1122.91,684.14 1123.47,684.14 1124.03,684.14 1124.59,684.14 1125.14,684.14 1125.7,684.14 1126.26,684.14 1126.82,684.14 1127.38,684.14 1127.94,684.14 1128.5,684.14 1129.06,684.14 1129.62,684.14 1130.18,684.14 1130.74,684.14 1131.3,684.14 1131.86,684.14 1132.41,684.14 1132.97,684.14 1133.53,684.14 1134.09,684.14 1134.65,684.14 1135.21,684.14 1135.77,684.14 1136.33,684.14 1136.89,684.14 1137.45,684.14 1138.01,684.14 1138.57,684.14 1139.13,684.14 1139.68,684.14 1140.24,684.14 1140.8,684.14 1141.36,684.14 1141.92,684.14 1142.48,684.14 1143.04,684.14 1143.6,684.14 1144.16,684.14 1144.72,684.14 1145.28,684.14 1145.84,684.14 1146.4,684.14 1146.96,684.14 1147.51,684.14 1148.07,684.14 1148.63,684.14 1149.19,684.14 1149.75,684.14 1150.31,684.14 1150.87,684.14 1151.43,684.14 1151.99,684.14 1152.55,684.14 1153.11,684.14 1153.67,684.14 1154.23,684.14 1154.78,684.14 1155.34,684.14 1155.9,684.14 1156.46,684.14 1157.02,684.14 1157.58,684.14 1158.14,684.14 1158.7,684.14 1159.26,684.14 1159.82,684.14 1160.38,684.14 1160.94,684.14 1161.5,684.14 1162.05,684.14 1162.61,684.14 1163.17,684.14 1163.73,684.14 1164.29,684.14 1164.85,684.14 1165.41,684.14 1165.97,684.14 1166.53,684.14 1167.09,684.14 1167.65,684.14 1168.21,684.14 1168.77,684.14 1169.33,684.14 1169.88,684.14 1170.44,684.14 1171,684.14 1171.56,684.14 1172.12,684.14 1172.68,684.14 1173.24,684.14 1173.8,684.14 1174.36,684.14 1174.92,684.14 1175.48,684.14 1176.04,684.14 1176.6,684.14 1177.15,684.14 1177.71,684.14 1178.27,684.14 1178.83,684.14 1179.39,684.14 1179.95,684.14 1180.51,684.14 1181.07,684.14 1181.63,684.14 1182.19,684.14 1182.75,684.14 1183.31,684.14 1183.87,684.14 1184.43,684.14 1184.98,684.14 1185.54,684.14 1186.1,684.14 1186.66,684.14 1187.22,684.14 1187.78,684.14 1188.34,684.14 1188.9,684.14 1189.46,684.14 1190.02,684.14 1190.58,684.14 1191.14,684.14 1191.7,684.14 1192.25,684.14 1192.81,684.14 1193.37,684.14 1193.93,684.14 1194.49,684.14 1195.05,684.14 1195.61,684.14 1196.17,684.14 1196.73,684.14 1197.29,684.14 1197.85,684.14 1198.41,684.14 1198.97,684.14 1199.52,684.14 1200.08,684.14 1200.64,684.14 1201.2,684.14 1201.76,684.14 1202.32,684.14 1202.88,684.14 1203.44,684.14 1204,684.14 1204.56,684.14 1205.12,684.14 1205.68,684.14 1206.24,684.14 1206.8,684.14 1207.35,684.14 1207.91,684.14 1208.47,684.14 1209.03,684.14 1209.59,684.14 1210.15,684.14 1210.71,684.14 1211.27,684.14 1211.83,684.14 1212.39,684.14 1212.95,684.14 1213.51,684.14 1214.07,684.14 1214.62,684.14 1215.18,684.14 1215.74,684.14 1216.3,684.14 1216.86,684.14 1217.42,684.14 1217.98,684.14 1218.54,684.14 1219.1,684.14 1219.66,684.14 1220.22,684.14 1220.78,684.14 1221.34,684.14 1221.89,684.14 1222.45,684.14 1223.01,684.14 1223.57,684.14 1224.13,684.14 1224.69,684.14 1225.25,684.14 1225.81,684.14 1226.37,684.14 1226.93,684.14 1227.49,684.14 1228.05,684.14 1228.61,684.14 1229.17,684.14 1229.72,684.14 1230.28,684.14 1230.84,684.14 1231.4,684.14 1231.96,684.14 1232.52,684.14 1233.08,684.14 1233.64,684.14 1234.2,684.14 1234.76,684.14 1235.32,684.14 1235.88,684.14 1236.44,684.14 1236.99,684.14 1237.55,684.14 1238.11,684.14 1238.67,684.14 1239.23,684.14 1239.79,684.14 1240.35,684.14 1240.91,684.14 1241.47,684.14 1242.03,684.14 1242.59,684.14 1243.15,684.14 1243.71,684.14 1244.26,684.14 1244.82,684.14 1245.38,684.14 1245.94,684.14 1246.5,684.14 1247.06,684.14 1247.62,684.14 1248.18,684.14 1248.74,684.14 1249.3,684.14 1249.86,684.14 1250.42,684.14 1250.98,684.14 1251.54,684.14 1252.09,684.14 1252.65,684.14 1253.21,684.14 1253.77,684.14 1254.33,684.14 1254.89,684.14 1255.45,684.14 1256.01,684.14 1256.57,684.14 1257.13,684.14 1257.69,684.14 1258.25,684.14 1258.81,684.14 1259.36,684.14 1259.92,684.14 1260.48,684.14 1261.04,684.14 1261.6,684.14 1262.16,684.14 1262.72,684.14 1263.28,684.14 1263.84,684.14 1264.4,684.14 1264.96,684.14 1265.52,684.14 1266.08,684.14 1266.63,684.14 1267.19,684.14 1267.75,684.14 1268.31,684.14 1268.87,684.14 1269.43,684.14 1269.99,684.14 1270.55,684.14 1271.11,684.14 1271.67,684.14 1272.23,684.14 1272.79,684.14 1273.35,684.14 1273.91,684.14 1274.46,684.14 1275.02,684.14 1275.58,684.14 1276.14,684.14 1276.7,684.14 1277.26,684.14 1277.82,684.14 1278.38,684.14 1278.94,684.14 1279.5,684.14 1280.06,684.14 1280.62,684.14 1281.18,684.14 1281.73,684.14 1282.29,684.14 1282.85,684.14 1283.41,684.14 1283.97,684.14 1284.53,684.14 1285.09,684.14 1285.65,684.14 1286.21,684.14 1286.77,684.14 1287.33,684.14 1287.89,684.14 1288.45,684.14 1289,684.14 1289.56,684.14 1290.12,684.14 1290.68,684.14 1291.24,684.14 1291.8,684.14 1292.36,684.14 1292.92,684.14 1293.48,684.14 1294.04,684.14 1294.6,684.14 1295.16,684.14 1295.72,684.14 1296.28,684.14 1296.83,684.14 1297.39,684.14 1297.95,684.14 1298.51,684.14 1299.07,684.14 1299.63,684.14 1300.19,684.14 1300.75,684.14 1301.31,684.14 1301.87,684.14 1302.43,684.14 1302.99,684.14 1303.55,684.14 1304.1,684.14 1304.66,684.14 1305.22,684.14 1305.78,684.14 1306.34,684.14 1306.9,684.14 1307.46,684.14 1308.02,684.14 1308.58,684.14 1309.14,684.14 1309.7,684.14 1310.26,684.14 1310.82,684.14 1311.38,684.14 1311.93,684.14 1312.49,684.14 1313.05,684.14 1313.61,684.14 1314.17,684.14 1314.73,684.14 1315.29,684.14 1315.85,684.14 1316.41,684.14 1316.97,684.14 1317.53,684.14 1318.09,684.14 1318.65,684.14 1319.2,684.14 1319.76,684.14 1320.32,684.14 1320.88,684.14 1321.44,684.14 1322,684.14 1322.56,684.14 1323.12,684.14 1323.68,684.14 1324.24,684.14 1324.8,684.14 1325.36,684.14 1325.92,684.14 1326.47,684.14 1327.03,684.14 1327.59,684.14 1328.15,684.14 1328.71,684.14 1329.27,684.14 1329.83,684.14 1330.39,684.14 1330.95,684.14 1331.51,684.14 1332.07,684.14 1332.63,684.14 1333.19,684.14 1333.75,684.14 1334.3,684.14 1334.86,684.14 1335.42,684.14 1335.98,684.14 1336.54,684.14 1337.1,684.14 1337.66,684.14 1338.22,684.14 1338.78,684.14 1339.34,684.14 1339.9,684.14 1340.46,684.14 1341.02,684.14 1341.57,684.14 1342.13,684.14 1342.69,684.14 1343.25,684.14 1343.81,684.14 1344.37,684.14 1344.93,684.14 1345.49,684.14 1346.05,684.14 1346.61,684.14 1347.17,684.14 1347.73,684.14 1348.29,684.14 1348.84,684.14 1349.4,684.14 1349.96,684.14 1350.52,684.14 1351.08,684.14 1351.64,684.14 1352.2,684.14 1352.76,684.14 1353.32,684.14 1353.88,684.14 1354.44,684.14 1355,684.14 1355.56,684.14 1356.12,684.14 1356.67,684.14 1357.23,684.14 1357.79,684.14 1358.35,684.14 1358.91,684.14 1359.47,684.14 1360.03,684.14 1360.59,684.14 1361.15,684.14 1361.71,684.14 1362.27,684.14 1362.83,684.14 1363.39,684.14 1363.94,684.14 1364.5,684.14 1365.06,684.14 1365.62,684.14 1366.18,684.14 1366.74,684.14 1367.3,684.14 1367.86,684.14 1368.42,684.14 1368.98,684.14 1369.54,684.14 1370.1,684.14 1370.66,684.14 1371.21,684.14 1371.77,684.14 1372.33,684.14 1372.89,684.14 1373.45,684.14 1374.01,684.14 1374.57,684.14 1375.13,684.14 1375.69,684.14 1376.25,684.14 1376.81,684.14 1377.37,684.14 1377.93,684.14 1378.49,684.14 1379.04,684.14 1379.6,684.14 1380.16,684.14 1380.72,684.14 1381.28,684.14 1381.84,684.14 1382.4,684.14 1382.96,684.14 1383.52,684.14 1384.08,684.14 1384.64,684.14 1385.2,684.14 1385.76,684.14 1386.31,684.14 1386.87,684.14 1387.43,684.14 1387.99,684.14 1388.55,684.14 1389.11,684.14 1389.67,684.14 1390.23,684.14 1390.79,684.14 1391.35,684.14 1391.91,684.14 1392.47,684.14 1393.03,684.14 1393.58,684.14 1394.14,684.14 1394.7,684.14 1395.26,684.14 1395.82,684.14 1396.38,684.14 1396.94,684.14 1397.5,684.14 1398.06,684.14 1398.62,684.14 1399.18,684.14 1399.74,684.14 1400.3,684.14 1400.86,684.14 1401.41,684.14 1401.97,684.14 1402.53,684.14 1403.09,684.14 1403.65,684.14 1404.21,684.14 1404.77,684.14 1405.33,684.14 1405.89,684.14 1406.45,684.14 1407.01,684.14 1407.57,684.14 1408.13,684.14 1408.68,684.14 1409.24,684.14 1409.8,684.14 1410.36,684.14 1410.92,684.14 1411.48,684.14 1412.04,684.14 1412.6,684.14 1413.16,684.14 1413.72,684.14 1414.28,684.14 1414.84,684.14 1415.4,684.14 1415.95,684.14 1416.51,684.14 1417.07,684.14 1417.63,684.14 1418.19,684.14 1418.75,684.14 1419.31,684.14 1419.87,684.14 1420.43,684.14 1420.99,684.14 1421.55,684.14 1422.11,684.14 1422.67,684.14 1423.23,684.14 1423.78,684.14 1424.34,684.14 1424.9,684.14 1425.46,684.14 1426.02,684.14 1426.58,684.14 1427.14,684.14 1427.7,684.14 1428.26,684.14 1428.82,684.14 1429.38,684.14 1429.94,684.14 1430.5,684.14 1431.05,684.14 1431.61,684.14 1432.17,684.14 1432.73,684.14 1433.29,684.14 1433.85,684.14 1434.41,684.14 1434.97,684.14 1435.53,684.14 1436.09,684.14 1436.65,684.14 1437.21,684.14 1437.77,684.14 1438.33,684.14 1438.88,684.14 1439.44,684.14 1440,684.14 1440.56,684.14 1441.12,684.14 1441.68,684.14 1442.24,684.14 1442.8,684.14 1443.36,684.14 1443.92,684.14 1444.48,684.14 1445.04,684.14 1445.6,684.14 1446.15,684.14 1446.71,684.14 1447.27,684.14 1447.83,684.14 1448.39,684.14 1448.95,684.14 1449.51,684.14 1450.07,684.14 1450.63,684.14 1451.19,684.14 1451.75,684.14 1452.31,684.14 1452.87,684.14 1453.42,684.14 1453.98,684.14 1454.54,684.14 1455.1,684.14 1455.66,684.14 1456.22,684.14 1456.78,684.14 1457.34,684.14 1457.9,684.14 1458.46,684.14 1459.02,684.14 1459.58,684.14 1460.14,684.14 1460.7,684.14 1461.25,684.14 1461.81,684.14 1462.37,684.14 1462.93,684.14 1463.49,684.14 1464.05,684.14 1464.61,684.14 1465.17,684.14 1465.73,684.14 1466.29,684.14 1466.85,684.14 1467.41,684.14 1467.97,684.14 1468.52,684.14 1469.08,684.14 1469.64,684.14 1470.2,684.14 1470.76,684.14 1471.32,684.14 1471.88,684.14 1472.44,684.14 1473,684.14 1473.56,684.14 1474.12,684.14 1474.68,684.14 1475.24,684.14 1475.79,684.14 1476.35,684.14 1476.91,684.14 1477.47,684.14 1478.03,684.14 1478.59,684.14 1479.15,684.14 1479.71,684.14 1480.27,684.14 1480.83,684.14 1481.39,684.14 1481.95,684.14 1482.51,684.14 1483.07,684.14 1483.62,684.14 1484.18,684.14 1484.74,684.14 1485.3,684.14 1485.86,684.14 1486.42,684.14 1486.98,684.14 1487.54,684.14 1488.1,684.14 1488.66,684.14 1489.22,684.14 1489.78,684.14 1490.34,684.14 1490.89,684.14 1491.45,684.14 1492.01,684.14 1492.57,684.14 1493.13,684.14 1493.69,684.14 1494.25,684.14 1494.81,684.14 1495.37,684.14 1495.93,684.14 1496.49,684.14 1497.05,684.14 1497.61,684.14 1498.16,684.14 1498.72,684.14 1499.28,684.14 1499.84,684.14 1500.4,684.14 1500.96,684.14 1501.52,684.14 1502.08,684.14 1502.64,684.14 1503.2,684.14 1503.76,684.14 1504.32,684.14 1504.88,684.14 1505.44,684.14 1505.99,684.14 1506.55,684.14 1507.11,684.14 1507.67,684.14 1508.23,684.14 1508.79,684.14 1509.35,684.14 1509.91,684.14 1510.47,684.14 1511.03,684.14 1511.59,684.14 1512.15,684.14 1512.71,684.14 1513.26,684.14 1513.82,684.14 1514.38,684.14 1514.94,684.14 1515.5,684.14 1516.06,684.14 1516.62,684.14 1517.18,684.14 1517.74,684.14 1518.3,684.14 1518.86,684.14 1519.42,684.14 1519.98,684.14 1520.53,684.14 1521.09,684.14 1521.65,684.14 1522.21,684.14 1522.77,684.14 1523.33,684.14 1523.89,684.14 1524.45,684.14 1525.01,684.14 1525.57,684.14 1526.13,684.14 1526.69,684.14 1527.25,684.14 1527.81,684.14 1528.36,684.14 1528.92,684.14 1529.48,684.14 1530.04,684.14 1530.6,684.14 1531.16,684.14 1531.72,684.14 1532.28,684.14 1532.84,684.14 1533.4,684.14 1533.96,684.14 1534.52,684.14 1535.08,684.14 1535.63,684.14 1536.19,684.14 1536.75,684.14 1537.31,684.14 1537.87,684.14 1538.43,684.14 1538.99,684.14 1539.55,684.14 1540.11,684.14 1540.67,684.14 1541.23,684.14 1541.79,684.14 1542.35,684.14 1542.9,684.14 1543.46,684.14 1544.02,684.14 1544.58,684.14 1545.14,684.14 1545.7,684.14 1546.26,684.14 1546.82,684.14 1547.38,684.14 1547.94,684.14 1548.5,684.14 1549.06,684.14 1549.62,684.14 1550.18,684.14 1550.73,684.14 1551.29,684.14 1551.85,684.14 1552.41,684.14 1552.97,684.14 1553.53,684.14 1554.09,684.14 1554.65,684.14 1555.21,684.14 1555.77,684.14 1556.33,684.14 1556.89,684.14 1557.45,684.14 1558,684.14 1558.56,684.14 1559.12,684.14 1559.68,684.14 1560.24,684.14 1560.8,684.14 1561.36,684.14 1561.92,684.14 1562.48,684.14 1563.04,684.14 1563.6,684.14 1564.16,684.14 1564.72,684.14 1565.28,684.14 1565.83,684.14 1566.39,684.14 1566.95,684.14 1567.51,684.14 1568.07,684.14 1568.63,684.14 1569.19,684.14 1569.75,684.14 1570.31,684.14 1570.87,684.14 1571.43,684.14 1571.99,684.14 1572.55,684.14 1573.1,684.14 1573.66,684.14 1574.22,684.14 1574.78,684.14 1575.34,684.14 1575.9,684.14 1576.46,684.14 1577.02,684.14 1577.58,684.14 1578.14,684.14 1578.7,684.14 1579.26,684.14 1579.82,684.14 1580.37,684.14 1580.93,684.14 1581.49,684.14 1582.05,684.14 1582.61,684.14 1583.17,684.14 1583.73,684.14 1584.29,684.14 1584.85,684.14 1585.41,684.14 1585.97,684.14 1586.53,684.14 1587.09,684.14 1587.65,684.14 1588.2,684.14 1588.76,684.14 1589.32,684.14 1589.88,684.14 1590.44,684.14 1591,684.14 1591.56,684.14 1592.12,684.14 1592.68,684.14 1593.24,684.14 1593.8,684.14 1594.36,684.14 1594.92,684.14 1595.47,684.14 1596.03,684.14 1596.59,684.14 1597.15,684.14 1597.71,684.14 1598.27,684.14 1598.83,684.14 1599.39,684.14 1599.95,684.14 1600.51,684.14 1601.07,684.14 1601.63,684.14 1602.19,684.14 1602.74,684.14 1603.3,684.14 1603.86,684.14 1604.42,684.14 1604.98,684.14 1605.54,684.14 1606.1,684.14 1606.66,684.14 1607.22,684.14 1607.78,684.14 1608.34,684.14 1608.9,684.14 1609.46,684.14 1610.02,684.14 1610.57,684.14 1611.13,684.14 1611.69,684.14 1612.25,684.14 1612.81,684.14 1613.37,684.14 1613.93,684.14 1614.49,684.14 1615.05,684.14 1615.61,684.14 1616.17,684.14 1616.73,684.14 1617.29,684.14 1617.84,684.14 1618.4,684.14 1618.96,684.14 1619.52,684.14 1620.08,684.14 1620.64,684.14 1621.2,684.14 1621.76,684.14 1622.32,684.14 1622.88,684.14 1623.44,684.14 1624,684.14 1624.56,684.14 1625.11,684.14 1625.67,684.14 1626.23,684.14 1626.79,684.14 1627.35,684.14 1627.91,684.14 1628.47,684.14 1629.03,684.14 1629.59,684.14 1630.15,684.14 1630.71,684.14 1631.27,684.14 1631.83,684.14 1632.39,684.14 1632.94,684.14 1633.5,684.14 1634.06,684.14 1634.62,684.14 1635.18,684.14 1635.74,684.14 1636.3,684.14 1636.86,684.14 1637.42,684.14 1637.98,684.14 1638.54,684.14 1639.1,684.14 1639.66,684.14 1640.21,684.14 1640.77,684.14 1641.33,684.14 1641.89,684.14 1642.45,684.14 1643.01,684.14 1643.57,684.14 1644.13,684.14 1644.69,684.14 1645.25,684.14 1645.81,684.14 1646.37,684.14 1646.93,684.14 1647.48,684.14 1648.04,684.14 1648.6,684.14 1649.16,684.14 1649.72,684.14 1650.28,684.14 1650.84,684.14 1651.4,684.14 1651.96,684.14 1652.52,684.14 1653.08,684.14 1653.64,684.14 1654.2,684.14 1654.76,684.14 1655.31,684.14 1655.87,684.14 1656.43,684.14 1656.99,684.14 1657.55,684.14 1658.11,684.14 1658.67,684.14 1659.23,684.14 1659.79,684.14 1660.35,684.14 1660.91,684.14 1661.47,684.14 1662.03,684.14 1662.58,684.14 1663.14,684.14 1663.7,684.14 1664.26,684.14 1664.82,684.14 1665.38,684.14 1665.94,684.14 1666.5,684.14 1667.06,684.14 1667.62,684.14 1668.18,684.14 1668.74,684.14 1669.3,684.14 1669.85,684.14 1670.41,684.14 1670.97,684.14 1671.53,684.14 1672.09,684.14 1672.65,684.14 1673.21,684.14 1673.77,684.14 1674.33,684.14 1674.89,684.14 1675.45,684.14 1676.01,684.14 1676.57,684.14 1677.13,684.14 1677.68,684.14 1678.24,684.14 1678.8,684.14 1679.36,684.14 1679.92,684.14 1680.48,684.14 1681.04,684.14 1681.6,684.14 1682.16,684.14 1682.72,684.14 1683.28,684.14 1683.84,684.14 1684.4,684.14 1684.95,684.14 1685.51,684.14 1686.07,684.14 1686.63,684.14 1687.19,684.14 1687.75,684.14 1688.31,684.14 1688.87,684.14 1689.43,684.14 1689.99,684.14 1690.55,684.14 1691.11,684.14 1691.67,684.14 1692.23,684.14 1692.78,684.14 1693.34,684.14 1693.9,684.14 1694.46,684.14 1695.02,684.14 1695.58,684.14 1696.14,684.14 1696.7,684.14 1697.26,684.14 1697.82,684.14 1698.38,684.14 1698.94,684.14 1699.5,684.14 1700.05,684.14 1700.61,684.14 1701.17,684.14 1701.73,684.14 1702.29,684.14 1702.85,684.14 1703.41,684.14 1703.97,684.14 1704.53,684.14 1705.09,684.14 1705.65,684.14 1706.21,684.14 1706.77,684.14 1707.32,684.14 1707.88,684.14 1708.44,684.14 1709,684.14 1709.56,684.14 1710.12,684.14 1710.68,684.14 1711.24,684.14 1711.8,684.14 1712.36,684.14 1712.92,684.14 1713.48,684.14 1714.04,684.14 1714.6,684.14 1715.15,684.14 1715.71,684.14 1716.27,684.14 1716.83,684.14 1717.39,684.14 1717.95,684.14 1718.51,684.14 1719.07,684.14 1719.63,684.14 1720.19,684.14 1720.75,684.14 1721.31,684.14 1721.87,684.14 1722.42,684.14 1722.98,684.14 1723.54,684.14 1724.1,684.14 1724.66,684.14 1725.22,684.14 1725.78,684.14 1726.34,684.14 1726.9,684.14 1727.46,684.14 1728.02,684.14 1728.58,684.14 1729.14,684.14 1729.69,684.14 1730.25,684.14 1730.81,684.14 1731.37,684.14 1731.93,684.14 1732.49,684.14 1733.05,684.14 1733.61,684.14 1734.17,684.14 1734.73,684.14 1735.29,684.14 1735.85,684.14 1736.41,684.14 1736.97,684.14 1737.52,684.14 1738.08,684.14 1738.64,684.14 1739.2,684.14 1739.76,684.14 1740.32,684.14 1740.88,684.14 1741.44,684.14 1742,684.14 1742.56,684.14 1743.12,684.14 1743.68,684.14 1744.24,684.14 1744.79,684.14 1745.35,684.14 1745.91,684.14 1746.47,684.14 1747.03,684.14 1747.59,684.14 1748.15,684.14 1748.71,684.14 1749.27,684.14 1749.83,684.14 1750.39,684.14 1750.95,684.14 1751.51,684.14 1752.06,684.14 1752.62,684.14 1753.18,684.14 1753.74,684.14 1754.3,684.14 1754.86,684.14 1755.42,684.14 1755.98,684.14 1756.54,684.14 1757.1,684.14 1757.66,684.14 1758.22,684.14 1758.78,684.14 1759.34,684.14 1759.89,684.14 1760.45,684.14 1761.01,684.14 1761.57,684.14 1762.13,684.14 1762.69,684.14 1763.25,684.14 1763.81,684.14 1764.37,684.14 1764.93,684.14 1765.49,684.14 1766.05,684.14 1766.61,684.14 1767.16,684.14 1767.72,684.14 1768.28,684.14 1768.84,684.14 1769.4,684.14 1769.96,684.14 1770.52,684.14 1771.08,684.14 1771.64,684.14 1772.2,684.14 1772.76,684.14 1773.32,684.14 1773.88,684.14 1774.43,684.14 1774.99,684.14 1775.55,684.14 1776.11,684.14 1776.67,684.14 1777.23,684.14 1777.79,684.14 1778.35,684.14 1778.91,684.14 1779.47,684.14 1780.03,684.14 1780.59,684.14 1781.15,684.14 1781.71,684.14 1782.26,684.14 1782.82,684.14 1783.38,684.14 1783.94,684.14 1784.5,684.14 1785.06,684.14 1785.62,684.14 1786.18,684.14 1786.74,684.14 1787.3,684.14 1787.86,684.14 1788.42,684.14 1788.98,684.14 1789.53,684.14 1790.09,684.14 1790.65,684.14 1791.21,684.14 1791.77,684.14 1792.33,684.14 1792.89,684.14 1793.45,684.14 1794.01,684.14 1794.57,684.14 1795.13,684.14 1795.69,684.14 1796.25,684.14 1796.8,684.14 1797.36,684.14 1797.92,684.14 1798.48,684.14 1799.04,684.14 1799.6,684.14 1800.16,684.14 1800.72,684.14 1801.28,684.14 1801.84,684.14 1802.4,684.14 1802.96,684.14 1803.52,684.14 1804.08,684.14 1804.63,684.14 1805.19,684.14 1805.75,684.14 1806.31,684.14 1806.87,684.14 1807.43,684.14 1807.99,684.14 1808.55,684.14 1809.11,684.14 1809.67,684.14 1810.23,684.14 1810.79,684.14 1811.35,684.14 1811.9,684.14 1812.46,684.14 1813.02,684.14 1813.58,684.14 1814.14,684.14 1814.7,684.14 1815.26,684.14 1815.82,684.14 1816.38,684.14 1816.94,684.14 1817.5,684.14 1818.06,684.14 1818.62,684.14 1819.18,684.14 1819.73,684.14 1820.29,684.14 1820.85,684.14 1821.41,684.14 1821.97,684.14 1822.53,684.14 1823.09,684.14 1823.65,684.14 1824.21,684.14 1824.77,684.14 1825.33,684.14 1825.89,684.14 1826.45,684.14 1827,684.14 1827.56,684.14 1828.12,684.14 1828.68,684.14 1829.24,684.14 1829.8,684.14 1830.36,684.14 1830.92,684.14 1831.48,684.14 1832.04,684.14 1832.6,684.14 1833.16,684.14 1833.72,684.14 1834.27,684.14 1834.83,684.14 1835.39,684.14 1835.95,684.14 1836.51,684.14 1837.07,684.14 1837.63,684.14 1838.19,684.14 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.019207796065349 ± 0.02095343822153206\nProjected Energy: -4.01788237861655 ± (0.003223064624229721, 0.0034486635286317124)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.503881</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3946e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1562e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0199e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.453e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.046e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.849e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133672\n -0.7590191922770835\n  0.13584182219621432\n  0.15789998694608265\n  0.8767114411781343\n  1.5305929970973287\n  1.5835732611867472\n  3.0728703303258715\n  3.1256726539518453\n  4.862107221562169\n  6.260694850380595\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
