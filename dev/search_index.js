var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2111893780969812 ± 0.0014048979372526733\n   G2(1) = 0.9170079277272615 ± 0.0006274463429045543\n   G2(2) = 0.9823766518988735 ± 0.0006238839556916319\n   G2(3) = 0.9900414626507481 ± 0.0009162189720201713\n   G2(4) = 0.9823766518988735 ± 0.0006238839556916319\n   G2(5) = 0.9170079277272615 ± 0.0006274463429045543\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9592084917441315 ± 0.12479180755300193\n   Replica 2: -3.975330541100641 ± 0.11756599376869341\n   Replica 3: -4.082184397164889 ± 0.13447742618116706\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip360\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip361\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip362\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.16 2211.02,1003.16 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.484 2211.02,745.484 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.808 2211.02,487.808 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.132 2211.02,230.132 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.16 423.181,1003.16 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.484 423.181,745.484 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.808 423.181,487.808 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.132 423.181,230.132 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M290.043 1016.5 L306.363 1016.5 L306.363 1020.44 L284.418 1020.44 L284.418 1016.5 Q287.08 1013.75 291.664 1009.12 Q296.27 1004.47 297.451 1003.12 Q299.696 1000.6 300.576 998.866 Q301.478 997.106 301.478 995.417 Q301.478 992.662 299.534 990.926 Q297.613 989.19 294.511 989.19 Q292.312 989.19 289.858 989.954 Q287.427 990.718 284.65 992.268 L284.65 987.546 Q287.474 986.412 289.927 985.833 Q292.381 985.255 294.418 985.255 Q299.789 985.255 302.983 987.94 Q306.177 990.625 306.177 995.116 Q306.177 997.245 305.367 999.167 Q304.58 1001.06 302.474 1003.66 Q301.895 1004.33 298.793 1007.55 Q295.691 1010.74 290.043 1016.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M316.224 985.88 L334.58 985.88 L334.58 989.815 L320.506 989.815 L320.506 998.287 Q321.524 997.94 322.543 997.778 Q323.562 997.593 324.58 997.593 Q330.367 997.593 333.747 1000.76 Q337.126 1003.94 337.126 1009.35 Q337.126 1014.93 333.654 1018.03 Q330.182 1021.11 323.862 1021.11 Q321.687 1021.11 319.418 1020.74 Q317.173 1020.37 314.765 1019.63 L314.765 1014.93 Q316.849 1016.06 319.071 1016.62 Q321.293 1017.18 323.77 1017.18 Q327.774 1017.18 330.112 1015.07 Q332.45 1012.96 332.45 1009.35 Q332.45 1005.74 330.112 1003.63 Q327.774 1001.53 323.77 1001.53 Q321.895 1001.53 320.02 1001.94 Q318.168 1002.36 316.224 1003.24 L316.224 985.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 988.958 Q352.728 988.958 350.899 992.523 Q349.094 996.065 349.094 1003.19 Q349.094 1010.3 350.899 1013.87 Q352.728 1017.41 356.339 1017.41 Q359.973 1017.41 361.779 1013.87 Q363.608 1010.3 363.608 1003.19 Q363.608 996.065 361.779 992.523 Q359.973 988.958 356.339 988.958 M356.339 985.255 Q362.149 985.255 365.205 989.861 Q368.284 994.444 368.284 1003.19 Q368.284 1011.92 365.205 1016.53 Q362.149 1021.11 356.339 1021.11 Q350.529 1021.11 347.45 1016.53 Q344.395 1011.92 344.395 1003.19 Q344.395 994.444 347.45 989.861 Q350.529 985.255 356.339 985.255 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M286.062 728.204 L304.418 728.204 L304.418 732.139 L290.344 732.139 L290.344 740.611 Q291.363 740.264 292.381 740.102 Q293.4 739.917 294.418 739.917 Q300.205 739.917 303.585 743.088 Q306.964 746.259 306.964 751.676 Q306.964 757.254 303.492 760.356 Q300.02 763.435 293.701 763.435 Q291.525 763.435 289.256 763.065 Q287.011 762.694 284.603 761.953 L284.603 757.254 Q286.687 758.389 288.909 758.944 Q291.131 759.5 293.608 759.5 Q297.613 759.5 299.951 757.393 Q302.288 755.287 302.288 751.676 Q302.288 748.065 299.951 745.958 Q297.613 743.852 293.608 743.852 Q291.733 743.852 289.858 744.268 Q288.006 744.685 286.062 745.565 L286.062 728.204 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M326.177 731.282 Q322.566 731.282 320.737 734.847 Q318.932 738.389 318.932 745.518 Q318.932 752.625 320.737 756.19 Q322.566 759.731 326.177 759.731 Q329.811 759.731 331.617 756.19 Q333.446 752.625 333.446 745.518 Q333.446 738.389 331.617 734.847 Q329.811 731.282 326.177 731.282 M326.177 727.579 Q331.987 727.579 335.043 732.185 Q338.122 736.768 338.122 745.518 Q338.122 754.245 335.043 758.852 Q331.987 763.435 326.177 763.435 Q320.367 763.435 317.288 758.852 Q314.233 754.245 314.233 745.518 Q314.233 736.768 317.288 732.185 Q320.367 727.579 326.177 727.579 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 731.282 Q352.728 731.282 350.899 734.847 Q349.094 738.389 349.094 745.518 Q349.094 752.625 350.899 756.19 Q352.728 759.731 356.339 759.731 Q359.973 759.731 361.779 756.19 Q363.608 752.625 363.608 745.518 Q363.608 738.389 361.779 734.847 Q359.973 731.282 356.339 731.282 M356.339 727.579 Q362.149 727.579 365.205 732.185 Q368.284 736.768 368.284 745.518 Q368.284 754.245 365.205 758.852 Q362.149 763.435 356.339 763.435 Q350.529 763.435 347.45 758.852 Q344.395 754.245 344.395 745.518 Q344.395 736.768 347.45 732.185 Q350.529 727.579 356.339 727.579 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M284.835 470.528 L307.057 470.528 L307.057 472.518 L294.511 505.088 L289.627 505.088 L301.432 474.463 L284.835 474.463 L284.835 470.528 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M316.224 470.528 L334.58 470.528 L334.58 474.463 L320.506 474.463 L320.506 482.935 Q321.524 482.588 322.543 482.426 Q323.562 482.241 324.58 482.241 Q330.367 482.241 333.747 485.412 Q337.126 488.583 337.126 494 Q337.126 499.578 333.654 502.68 Q330.182 505.759 323.862 505.759 Q321.687 505.759 319.418 505.389 Q317.173 505.018 314.765 504.277 L314.765 499.578 Q316.849 500.713 319.071 501.268 Q321.293 501.824 323.77 501.824 Q327.774 501.824 330.112 499.717 Q332.45 497.611 332.45 494 Q332.45 490.389 330.112 488.282 Q327.774 486.176 323.77 486.176 Q321.895 486.176 320.02 486.592 Q318.168 487.009 316.224 487.889 L316.224 470.528 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 473.606 Q352.728 473.606 350.899 477.171 Q349.094 480.713 349.094 487.842 Q349.094 494.949 350.899 498.514 Q352.728 502.055 356.339 502.055 Q359.973 502.055 361.779 498.514 Q363.608 494.949 363.608 487.842 Q363.608 480.713 361.779 477.171 Q359.973 473.606 356.339 473.606 M356.339 469.903 Q362.149 469.903 365.205 474.509 Q368.284 479.092 368.284 487.842 Q368.284 496.569 365.205 501.176 Q362.149 505.759 356.339 505.759 Q350.529 505.759 347.45 501.176 Q344.395 496.569 344.395 487.842 Q344.395 479.092 347.45 474.509 Q350.529 469.903 356.339 469.903 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M256.664 243.476 L264.303 243.476 L264.303 217.111 L255.992 218.778 L255.992 214.518 L264.256 212.852 L268.932 212.852 L268.932 243.476 L276.571 243.476 L276.571 247.412 L256.664 247.412 L256.664 243.476 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M296.015 215.93 Q292.404 215.93 290.576 219.495 Q288.77 223.037 288.77 230.166 Q288.77 237.273 290.576 240.838 Q292.404 244.379 296.015 244.379 Q299.65 244.379 301.455 240.838 Q303.284 237.273 303.284 230.166 Q303.284 223.037 301.455 219.495 Q299.65 215.93 296.015 215.93 M296.015 212.227 Q301.826 212.227 304.881 216.833 Q307.96 221.416 307.96 230.166 Q307.96 238.893 304.881 243.5 Q301.826 248.083 296.015 248.083 Q290.205 248.083 287.127 243.5 Q284.071 238.893 284.071 230.166 Q284.071 221.416 287.127 216.833 Q290.205 212.227 296.015 212.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M326.177 215.93 Q322.566 215.93 320.737 219.495 Q318.932 223.037 318.932 230.166 Q318.932 237.273 320.737 240.838 Q322.566 244.379 326.177 244.379 Q329.811 244.379 331.617 240.838 Q333.446 237.273 333.446 230.166 Q333.446 223.037 331.617 219.495 Q329.811 215.93 326.177 215.93 M326.177 212.227 Q331.987 212.227 335.043 216.833 Q338.122 221.416 338.122 230.166 Q338.122 238.893 335.043 243.5 Q331.987 248.083 326.177 248.083 Q320.367 248.083 317.288 243.5 Q314.233 238.893 314.233 230.166 Q314.233 221.416 317.288 216.833 Q320.367 212.227 326.177 212.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 215.93 Q352.728 215.93 350.899 219.495 Q349.094 223.037 349.094 230.166 Q349.094 237.273 350.899 240.838 Q352.728 244.379 356.339 244.379 Q359.973 244.379 361.779 240.838 Q363.608 237.273 363.608 230.166 Q363.608 223.037 361.779 219.495 Q359.973 215.93 356.339 215.93 M356.339 212.227 Q362.149 212.227 365.205 216.833 Q368.284 221.416 368.284 230.166 Q368.284 238.893 365.205 243.5 Q362.149 248.083 356.339 248.083 Q350.529 248.083 347.45 243.5 Q344.395 238.893 344.395 230.166 Q344.395 221.416 347.45 216.833 Q350.529 212.227 356.339 212.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip362)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.132 4017.76,230.132 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.35 457.123,1249.19 457.691,1248.96 458.259,1248.67 458.828,1248.31 459.396,1247.89 459.964,1247.37 460.533,1246.78 461.101,1246.12 461.669,1245.38 462.238,1244.57 462.806,1242.63 463.375,1241.62 463.943,1238.46 464.511,1237.29 465.08,1236.03 465.648,1234.67 466.216,1233.19 466.785,1231.6 467.353,1228.84 467.921,1226.98 468.49,1224.98 469.058,1222.81 469.626,1220.5 470.195,1218.04 470.763,1213.36 471.331,1210.64 471.9,1206.71 472.468,1203.63 473.036,1200.37 473.605,1196.89 474.173,1192.2 474.741,1188.39 475.31,1183.35 475.878,1178.06 476.446,1173.56 477.015,1166.8 477.583,1161.92 478.152,1154.75 478.72,1149.4 479.288,1142.71 479.857,1136.91 480.425,1130.84 480.993,1123.6 481.562,1115.94 482.13,1109.19 482.698,1101.12 483.267,1093.92 483.835,1086.62 484.403,1076.99 484.972,1068.22 485.54,1059.43 486.108,1049.13 486.677,1035.71 487.245,1026.44 487.813,1016.05 488.382,1005.41 488.95,992.634 489.518,983.088 490.087,973.431 490.655,963.623 491.224,951.77 491.792,941.812 492.36,930.763 492.929,918.791 493.497,906.791 494.065,897.993 494.634,889.039 495.202,876.005 495.77,866.062 496.339,853.078 496.907,841.064 497.475,831.236 498.044,820.516 498.612,810.927 499.18,802.347 499.749,793.543 500.317,783.915 500.885,772.177 501.454,761.633 502.022,749.009 502.59,738.569 503.159,730.206 503.727,719.802 504.295,710.675 504.864,702.796 505.432,694.662 506.001,686.541 506.569,676.393 507.137,665.546 507.706,654.554 508.274,646.896 508.842,637.392 509.411,629.959 509.979,617.555 510.547,608.519 511.116,601.98 511.684,595.189 512.252,586.346 512.821,577.694 513.389,568.205 513.957,561.042 514.526,553.863 515.094,548.856 515.662,542.588 516.231,535.496 516.799,528.485 517.367,519.468 517.936,512.663 518.504,505.151 519.072,502.802 519.641,494.106 520.209,488.835 520.778,481.606 521.346,474.605 521.914,467.586 522.483,462.944 523.051,457.272 523.619,451.631 524.188,446.29 524.756,441.977 525.324,434.776 525.893,430.67 526.461,424.69 527.029,419.889 527.598,415.02 528.166,411.59 528.734,407.894 529.303,401.191 529.871,397.1 530.439,394.668 531.008,391.549 531.576,386.372 532.144,382.294 532.713,377.586 533.281,377.069 533.85,371.121 534.418,366.447 534.986,360.782 535.555,358.387 536.123,356.22 536.691,352.911 537.26,348.771 537.828,343.726 538.396,341.955 538.965,338.129 539.533,335.352 540.101,333.644 540.67,328.92 541.238,324.698 541.806,324.368 542.375,319.898 542.943,318.859 543.511,316.466 544.08,313.478 544.648,311.297 545.216,311.405 545.785,311.415 546.353,309.308 546.921,307.103 547.49,305.113 548.058,304.435 548.627,304.525 549.195,303.386 549.763,301.312 550.332,300.457 550.9,299.456 551.468,299.47 552.037,300.475 552.605,299.222 553.173,297.762 553.742,296.454 554.31,293.394 554.878,290.146 555.447,288.152 556.015,286.291 556.583,282.552 557.152,280.073 557.72,276.2 558.288,275.728 558.857,275.3 559.425,274 559.993,272.61 560.562,272.469 561.13,272.19 561.698,269.998 562.267,269.712 562.835,269.403 563.404,268.119 563.972,266.949 564.54,266.883 565.109,267.861 565.677,265.624 566.245,264.318 566.814,264.264 567.382,263.129 567.95,261.847 568.519,261.741 569.087,263.835 569.655,263.595 570.224,264.494 570.792,262.227 571.36,261.177 571.929,261.074 572.497,260.919 573.065,261.945 573.634,261.58 574.202,263.305 574.77,263.797 575.339,264.238 575.907,262.599 576.476,259.999 577.044,257.589 577.612,257.318 578.181,257.171 578.749,254.971 579.317,253.902 579.886,251.88 580.454,251.674 581.022,252.689 581.591,252.419 582.159,252.234 582.727,255.134 583.296,251.687 583.864,251.648 584.432,249.424 585.001,246.61 585.569,246.916 586.137,247.179 586.706,247.583 587.274,247.79 587.842,245.98 588.411,247.282 588.979,248.675 589.547,247.463 590.116,246.401 590.684,246.419 591.253,248.796 591.821,248.816 592.389,250.706 592.958,251.56 593.526,251.227 594.094,249.719 594.663,247.328 595.231,246.278 595.799,248.469 596.368,249.571 596.936,250.39 597.504,245.849 598.073,246.78 598.641,246.37 599.209,244.303 599.778,246.451 600.346,243.198 600.914,242.206 601.483,241.237 602.051,241.545 602.619,241.509 603.188,241.917 603.756,243.205 604.325,245.222 604.893,244.838 605.461,242.69 606.03,240.418 606.598,241.521 607.166,241.806 607.735,241.954 608.303,243.001 608.871,242.783 609.44,243.83 610.008,241.735 610.576,241.719 611.145,241.936 611.713,243.061 612.281,243.983 612.85,242.676 613.418,243.717 613.986,243.588 614.555,241.403 615.123,239.208 615.691,241.242 616.26,243.25 616.828,244.02 617.396,242.717 617.965,240.643 618.533,240.712 619.102,238.59 619.67,239.573 620.238,240.522 620.807,242.48 621.375,243.422 621.943,243.012 622.512,240.491 623.08,240.489 623.648,239.294 624.217,240.565 624.785,241.657 625.353,241.331 625.922,241.269 626.49,240.06 627.058,239.945 627.627,240.903 628.195,240.864 628.763,240.709 629.332,240.472 629.9,239.093 630.468,238.879 631.037,237.706 631.605,238.819 632.173,240.65 632.742,242.385 633.31,241.051 633.879,239.79 634.447,238.572 635.015,238.503 635.584,237.336 636.152,237.287 636.72,236.18 637.289,233.902 637.857,233.09 638.425,232.408 638.994,233.574 639.562,233.726 640.13,232.561 640.699,232.799 641.267,233.023 641.835,233.239 642.404,232.83 642.972,236.256 643.54,237.41 644.109,237.491 644.677,237.433 645.245,236.331 645.814,238.401 646.382,237.306 646.951,238.391 647.519,238.12 648.087,236.807 648.656,237.89 649.224,237.554 649.792,236.346 650.361,234.379 650.929,234.108 651.497,234.461 652.066,234.243 652.634,232.298 653.202,232.502 653.771,232.931 654.339,233.096 654.907,232.144 655.476,232.497 656.044,233.688 656.612,231.885 657.181,231.088 657.749,230.518 658.317,230.8 658.886,229.975 659.454,232.362 660.022,233.788 660.591,233.833 661.159,234.116 661.728,234.118 662.296,232.076 662.864,231.293 663.433,232.693 664.001,232.914 664.569,233.045 665.138,231.29 665.706,231.41 666.274,233.718 666.843,235.865 667.411,236.203 667.979,235.242 668.548,235.368 669.116,236.464 669.684,233.425 670.253,233.515 670.821,234.57 671.389,232.664 671.958,234.909 672.526,234.059 673.094,232.272 673.663,232.515 674.231,232.358 674.799,232.515 675.368,232.793 675.936,231.169 676.505,230.37 677.073,229.411 677.641,230.091 678.21,231.482 678.778,231.684 679.346,230.847 679.915,232.117 680.483,232.261 681.051,233.373 681.62,232.397 682.188,232.843 682.756,230.991 683.325,231.453 683.893,229.4 684.461,228.841 685.03,231.392 685.598,231.796 686.166,232.146 686.735,232.485 687.303,233.936 687.871,235.089 688.44,235.077 689.008,236.405 689.577,236.557 690.145,236.395 690.713,237.115 691.282,236.821 691.85,236.535 692.418,234.328 692.987,232.162 693.555,231.215 694.123,231.546 694.692,232.936 695.26,233.111 695.828,232.354 696.397,233.64 696.965,233.608 697.533,233.705 698.102,234.939 698.67,233.789 699.238,229.706 699.807,227.915 700.375,225.375 700.943,224.994 701.512,223.627 702.08,224.386 702.648,226.045 703.217,226.664 703.785,226.487 704.354,226.069 704.922,225.744 705.49,229.543 706.059,231.071 706.627,232.491 707.195,232.705 707.764,233.148 708.332,232.335 708.9,232.834 709.469,233.026 710.037,232.096 710.605,233.176 711.174,235.488 711.742,232.3 712.31,232.49 712.879,232.663 713.447,234.077 714.015,235.17 714.584,235.13 715.152,235.215 715.72,236.285 716.289,234.001 716.857,234.154 717.425,234.184 717.994,237.301 718.562,235.93 719.131,235.952 719.699,234.553 720.267,238.77 720.836,235.65 721.404,235.503 721.972,237.446 722.541,237.175 723.109,236.926 723.677,236.643 724.246,235.522 724.814,236.517 725.382,238.241 725.951,237.888 726.519,237.772 727.087,235.358 727.656,236.29 728.224,238.103 728.792,238.756 729.361,237.192 729.929,236.006 730.497,235.858 731.066,236.687 731.634,237.527 732.203,237.175 732.771,235.716 733.339,238.67 733.908,237.952 734.476,238.61 735.044,238.111 735.613,237.656 736.181,236.208 736.749,235.615 737.318,233.399 737.886,233.175 738.454,232.929 739.023,233.803 739.591,234.808 740.159,234.536 740.728,234.466 741.296,233.286 741.864,232.03 742.433,232.091 743.001,232.93 743.569,232.659 744.138,232.589 744.706,232.51 745.274,233.64 745.843,232.461 746.411,232.172 746.98,230.898 747.548,230.736 748.116,229.935 748.685,228.907 749.253,227.909 749.821,230.189 750.39,229.274 750.958,230.546 751.526,230.333 752.095,230.463 752.663,229.231 753.231,229.486 753.8,230.603 754.368,228.785 754.936,227.988 755.505,228.468 756.073,230.595 756.641,231.843 757.21,230.601 757.778,227.546 758.346,226.936 758.915,227.226 759.483,224.413 760.052,226.066 760.62,226.537 761.188,227.063 761.757,227.358 762.325,227.77 762.893,229.216 763.462,225.293 764.03,224.64 764.598,226.104 765.167,228.65 765.735,233.297 766.303,235.467 766.872,234.279 767.44,235.33 768.008,236.262 768.577,235.089 769.145,235.934 769.713,234.716 770.282,235.43 770.85,234.185 771.418,235.122 771.987,237.006 772.555,235.72 773.123,235.165 773.692,236.998 774.26,236.507 774.829,236.148 775.397,235.738 775.965,236.505 776.534,235.192 777.102,235.137 777.67,235.067 778.239,238.78 778.807,238.2 779.375,237.846 779.944,235.169 780.512,233.807 781.08,235.522 781.649,232.223 782.217,233.106 782.785,235.06 783.354,234.778 783.922,236.575 784.49,236.077 785.059,234.678 785.627,234.396 786.195,232.839 786.764,231.632 787.332,231.502 787.9,231.665 788.469,231.658 789.037,231.484 789.606,231.551 790.174,230.446 790.742,229.283 791.311,228.305 791.879,228.49 792.447,228.604 793.016,226.738 793.584,225.867 794.152,226.292 794.721,227.517 795.289,225.615 795.857,226.987 796.426,227.305 796.994,227.33 797.562,227.688 798.131,225.621 798.699,225.84 799.267,225.15 799.836,223.473 800.404,222.853 800.972,223.427 801.541,223.105 802.109,225.718 802.678,226.138 803.246,227.442 803.814,228.603 804.383,230.038 804.951,231.146 805.519,229.026 806.088,228.132 806.656,227.344 807.224,227.659 807.793,227.261 808.361,227.456 808.929,228.849 809.498,229.927 810.066,229.092 810.634,227.232 811.203,232.787 811.771,232.923 812.339,232.755 812.908,233.814 813.476,234.631 814.044,234.481 814.613,235.474 815.181,235.228 815.749,235.166 816.318,231.916 816.886,231.95 817.455,234.06 818.023,232.804 818.591,232.777 819.16,231.805 819.728,231.762 820.296,229.785 820.865,227.82 821.433,228.158 822.001,227.465 822.57,229.759 823.138,230.852 823.706,228.006 824.275,226.272 824.843,225.824 825.411,223.351 825.98,223.846 826.548,227.377 827.116,226.643 827.685,226.949 828.253,226.306 828.821,227.718 829.39,227.195 829.958,227.651 830.526,229.087 831.095,228.243 831.663,227.537 832.232,227.114 832.8,228.582 833.368,229.807 833.937,229.909 834.505,230.94 835.073,231.183 835.642,227.923 836.21,228.244 836.778,231.752 837.347,232.049 837.915,232.265 838.483,232.189 839.052,232.257 839.62,228.368 840.188,229.716 840.757,229.968 841.325,232.251 841.893,229.3 842.462,228.386 843.03,229.711 843.598,229.941 844.167,231.042 844.735,232.092 845.304,232.051 845.872,230.937 846.44,231.007 847.009,232.085 847.577,235.125 848.145,232.91 848.714,233.855 849.282,233.814 849.85,233.648 850.419,231.545 850.987,228.382 851.555,226.601 852.124,229.102 852.692,229.39 853.26,229.66 853.829,230.741 854.397,230.832 854.965,230.796 855.534,228.879 856.102,232.257 856.67,232.119 857.239,230.055 857.807,231.279 858.375,231.323 858.944,230.47 859.512,232.643 860.081,233.714 860.649,233.576 861.217,232.394 861.786,232.199 862.354,230.857 862.922,230.931 863.491,232.158 864.059,234.221 864.627,234.91 865.196,232.441 865.764,233.506 866.332,232.508 866.901,234.497 867.469,233.079 868.037,236.031 868.606,235.385 869.174,235.187 869.742,233.876 870.311,233.687 870.879,233.25 871.447,233.133 872.016,234.066 872.584,235.01 873.152,234.863 873.721,236.612 874.289,237.146 874.858,237.505 875.426,235.979 875.994,236.385 876.563,238.005 877.131,237.531 877.699,239.002 878.268,239.721 878.836,238.162 879.404,238.59 879.973,238.208 880.541,237.917 881.109,237.54 881.678,236.854 882.246,236.197 882.814,235.602 883.383,234.221 883.951,233.95 884.519,234.453 885.088,236.104 885.656,233.568 886.224,233.299 886.793,232.974 887.361,232.753 887.93,231.472 888.498,233.532 889.066,233.329 889.635,233.021 890.203,231.513 890.771,231.298 891.34,231.075 891.908,231.957 892.476,231.863 893.045,230.605 893.613,230.511 894.181,230.274 894.75,231.36 895.318,233.328 895.886,233.941 896.455,233.494 897.023,232.976 897.591,233.653 898.16,231.297 898.728,229.885 899.296,229.851 899.865,228.683 900.433,227.634 901.001,227.6 901.57,225.717 902.138,224.93 902.707,226.244 903.275,225.512 903.843,226.007 904.412,226.283 904.98,225.731 905.548,227.137 906.117,226.204 906.685,227.419 907.253,226.597 907.822,225.596 908.39,224.859 908.958,226.071 909.527,226.345 910.095,227.461 910.663,227.57 911.232,227.601 911.8,229.933 912.368,229.079 912.937,228.941 913.505,230.108 914.073,230.979 914.642,230.619 915.21,230.534 915.779,232.607 916.347,233.553 916.915,234.474 917.484,231.927 918.052,230.7 918.62,230.456 919.189,231.536 919.757,230.294 920.325,227.061 920.894,225.493 921.462,223.547 922.03,226.3 922.599,225.638 923.167,225.948 923.735,228.526 924.304,227.491 924.872,228.807 925.44,228.785 926.009,229.872 926.577,229.734 927.145,229.754 927.714,227.606 928.282,226.539 928.85,226.892 929.419,224.949 929.987,225.331 930.556,227.761 931.124,228.993 931.692,228.296 932.261,227.581 932.829,227.832 933.397,227.891 933.966,228.032 934.534,229.223 935.102,230.265 935.671,231.474 936.239,231.33 936.807,231.345 937.376,230.236 937.944,228.319 938.512,227.299 939.081,226.363 939.649,226.693 940.217,227.894 940.786,228.226 941.354,228.163 941.922,227.206 942.491,228.727 943.059,228.049 943.627,228.259 944.196,228.423 944.764,230.544 945.333,227.813 945.901,230.332 946.469,230.371 947.038,230.239 947.606,229.224 948.174,226.24 948.743,226.437 949.311,224.797 949.879,225.486 950.448,223.972 951.016,224.573 951.584,224.967 952.153,226.607 952.721,228.054 953.289,228.671 953.858,230.009 954.426,233.104 954.994,232.852 955.563,233.931 956.131,233.707 956.699,232.626 957.268,231.72 957.836,231.85 958.405,231.97 958.973,233.025 959.541,233.14 960.11,235.056 960.678,236.743 961.246,237.303 961.815,236.039 962.383,234.687 962.951,232.222 963.52,231.2 964.088,231.082 964.656,233.047 965.225,232.932 965.793,234.721 966.361,233.535 966.93,233.403 967.498,232.27 968.066,232.174 968.635,231.005 969.203,232.894 969.771,231.51 970.34,232.655 970.908,230.376 971.476,231.294 972.045,232.307 972.613,229.087 973.182,230.32 973.75,231.527 974.318,230.604 974.887,231.862 975.455,232.75 976.023,231.569 976.592,231.593 977.16,229.398 977.728,229.45 978.297,227.565 978.865,228.669 979.433,228.916 980.002,227.789 980.57,229.095 981.138,230.622 981.707,230.726 982.275,230.567 982.843,231.591 983.412,230.459 983.98,231.441 984.548,233.414 985.117,232.332 985.685,233.275 986.253,232.112 986.822,230.953 987.39,232.794 987.959,231.813 988.527,231.544 989.095,231.433 989.664,231.34 990.232,231.145 990.8,232.206 991.369,232.242 991.937,232.075 992.505,233.101 993.074,232.813 993.642,231.692 994.21,229.53 994.779,230.535 995.347,230.431 995.915,230.453 996.484,228.328 997.052,226.364 997.62,225.669 998.189,231.101 998.757,231.993 999.325,231.755 999.894,230.4 1000.46,230.326 1001.03,226.157 1001.6,227.504 1002.17,226.46 1002.74,225.654 1003.3,226.082 1003.87,228.526 1004.44,228.871 1005.01,227.987 1005.58,227.299 1006.15,227.319 1006.71,225.269 1007.28,226.523 1007.85,228.004 1008.42,229.367 1008.99,229.498 1009.56,229.548 1010.12,230.649 1010.69,230.72 1011.26,230.837 1011.83,233.924 1012.4,232.558 1012.97,231.28 1013.53,231.021 1014.1,231.922 1014.67,230.576 1015.24,232.515 1015.81,234.209 1016.38,233.911 1016.94,233.495 1017.51,231.424 1018.08,231.285 1018.65,230.314 1019.22,228.303 1019.79,228.154 1020.35,229.334 1020.92,230.497 1021.49,230.773 1022.06,230.811 1022.63,231.972 1023.2,235.876 1023.76,234.777 1024.33,235.486 1024.9,234.242 1025.47,234.255 1026.04,234.032 1026.61,234.882 1027.17,234.655 1027.74,234.228 1028.31,232.74 1028.88,232.437 1029.45,232.447 1030.02,230.294 1030.58,228.287 1031.15,228.336 1031.72,228.526 1032.29,229.67 1032.86,228.779 1033.43,229.007 1033.99,228.171 1034.56,228.048 1035.13,226.992 1035.7,227.181 1036.27,228.39 1036.84,229.726 1037.4,228.698 1037.97,225.711 1038.54,225.98 1039.11,225.045 1039.68,226.32 1040.25,227.545 1040.81,228.847 1041.38,229.152 1041.95,227.141 1042.52,230.567 1043.09,231.569 1043.66,232.568 1044.22,231.579 1044.79,228.431 1045.36,227.52 1045.93,230.637 1046.5,231.675 1047.07,231.615 1047.63,231.375 1048.2,232.428 1048.77,233.472 1049.34,232.286 1049.91,232.93 1050.48,229.632 1051.05,228.692 1051.61,228.689 1052.18,228.817 1052.75,230.097 1053.32,230.264 1053.89,228.205 1054.46,228.123 1055.02,227.275 1055.59,227.563 1056.16,227.738 1056.73,227.837 1057.3,231.039 1057.87,232.946 1058.43,229.604 1059,231.585 1059.57,231.311 1060.14,231.481 1060.71,230.346 1061.28,229.571 1061.84,228.512 1062.41,229.739 1062.98,228.754 1063.55,227.064 1064.12,226.461 1064.69,225.718 1065.25,225.941 1065.82,228.269 1066.39,227.358 1066.96,227.595 1067.53,230.116 1068.1,228.168 1068.66,230.272 1069.23,230.158 1069.8,230.301 1070.37,229.373 1070.94,227.479 1071.51,225.652 1072.07,226.03 1072.64,226.306 1073.21,226.554 1073.78,224.817 1074.35,227.3 1074.92,225.573 1075.48,227.093 1076.05,226.484 1076.62,227.835 1077.19,231.063 1077.76,233.051 1078.33,232.997 1078.89,231.783 1079.46,228.827 1080.03,231.146 1080.6,230.15 1081.17,230.118 1081.74,228.363 1082.3,230.479 1082.87,231.558 1083.44,231.7 1084.01,228.751 1084.58,229.96 1085.15,229.146 1085.71,229.412 1086.28,228.361 1086.85,228.598 1087.42,228.067 1087.99,227.451 1088.56,227.971 1089.12,230.333 1089.69,233.427 1090.26,232.197 1090.83,235.291 1091.4,235.981 1091.97,236.573 1092.53,235.404 1093.1,234.153 1093.67,232.934 1094.24,233.786 1094.81,232.57 1095.38,233.476 1095.94,232.278 1096.51,232.242 1097.08,232.201 1097.65,232.227 1098.22,231.198 1098.79,231.292 1099.35,232.218 1099.92,234.208 1100.49,236.003 1101.06,235.634 1101.63,236.35 1102.2,235.025 1102.76,233.806 1103.33,233.644 1103.9,233.324 1104.47,234.151 1105.04,233.916 1105.61,232.595 1106.17,232.515 1106.74,232.329 1107.31,232.476 1107.88,233.441 1108.45,231.112 1109.02,230.05 1109.58,227.03 1110.15,228.26 1110.72,227.33 1111.29,228.534 1111.86,227.568 1112.43,227.935 1112.99,225.125 1113.56,227.329 1114.13,227.465 1114.7,227.815 1115.27,226.853 1115.84,227.025 1116.4,226.976 1116.97,228.146 1117.54,228.294 1118.11,227.426 1118.68,227.819 1119.25,228.981 1119.81,228.985 1120.38,229.061 1120.95,228.296 1121.52,227.293 1122.09,226.626 1122.66,226.976 1123.23,228.104 1123.79,225.164 1124.36,226.623 1124.93,229.972 1125.5,229.103 1126.07,228.133 1126.64,230.283 1127.2,229.487 1127.77,228.711 1128.34,229.007 1128.91,229.19 1129.48,228.411 1130.05,230.588 1130.61,230.642 1131.18,230.53 1131.75,230.43 1132.32,229.493 1132.89,227.666 1133.46,226.984 1134.02,227.233 1134.59,226.6 1135.16,227.778 1135.73,228.098 1136.3,229.289 1136.87,229.432 1137.43,230.506 1138,233.588 1138.57,233.44 1139.14,234.263 1139.71,234.981 1140.28,235.642 1140.84,237.318 1141.41,238.05 1141.98,237.463 1142.55,237.981 1143.12,239.491 1143.69,236.663 1144.25,234.222 1144.82,235.171 1145.39,235.65 1145.96,235.239 1146.53,232.914 1147.1,231.852 1147.66,231.735 1148.23,231.416 1148.8,230.38 1149.37,231.49 1149.94,231.544 1150.51,232.298 1151.07,235.35 1151.64,233.901 1152.21,235.632 1152.78,236.341 1153.35,235.782 1153.92,236.348 1154.48,237.117 1155.05,237.571 1155.62,237.903 1156.19,238.188 1156.76,237.337 1157.33,236.909 1157.89,237.369 1158.46,237.719 1159.03,237.067 1159.6,236.476 1160.17,236.051 1160.74,236.382 1161.3,233.707 1161.87,234.239 1162.44,236.061 1163.01,235.355 1163.58,233.799 1164.15,228.11 1164.71,228.012 1165.28,228.974 1165.85,228.826 1166.42,230.674 1166.99,230.666 1167.56,230.518 1168.12,230.347 1168.69,230.035 1169.26,228.891 1169.83,229.692 1170.4,226.673 1170.97,226.859 1171.53,224.987 1172.1,223.913 1172.67,223.156 1173.24,223.552 1173.81,221.81 1174.38,221.306 1174.94,222.04 1175.51,223.475 1176.08,223.963 1176.65,222.034 1177.22,223.586 1177.79,224.012 1178.35,227.445 1178.92,227.392 1179.49,226.493 1180.06,227.676 1180.63,226.874 1181.2,226.138 1181.76,226.464 1182.33,226.491 1182.9,226.622 1183.47,226.773 1184.04,228.033 1184.61,228.312 1185.17,230.213 1185.74,229.982 1186.31,228.97 1186.88,228.975 1187.45,226.872 1188.02,224.987 1188.58,223.227 1189.15,223.754 1189.72,223.371 1190.29,222.844 1190.86,222.667 1191.43,224.067 1192,223.825 1192.56,224.184 1193.13,222.47 1193.7,226.13 1194.27,226.555 1194.84,226.916 1195.41,226.252 1195.97,224.677 1196.54,226.195 1197.11,225.634 1197.68,226.057 1198.25,228.669 1198.82,228.998 1199.38,230.075 1199.95,229.115 1200.52,229.138 1201.09,226.334 1201.66,227.88 1202.23,227.032 1202.79,228.489 1203.36,229.578 1203.93,229.668 1204.5,227.887 1205.07,228.074 1205.64,230.258 1206.2,231.441 1206.77,228.346 1207.34,232.608 1207.91,232.59 1208.48,232.639 1209.05,231.562 1209.61,231.803 1210.18,232.815 1210.75,234.649 1211.32,233.59 1211.89,233.297 1212.46,233.897 1213.02,231.716 1213.59,231.688 1214.16,231.437 1214.73,230.322 1215.3,230.21 1215.87,229.334 1216.43,229.574 1217,228.972 1217.57,229.386 1218.14,229.481 1218.71,227.577 1219.28,228.983 1219.84,229.081 1220.41,228.385 1220.98,229.809 1221.55,229.895 1222.12,230.187 1222.69,230.336 1223.25,227.491 1223.82,228.81 1224.39,228.976 1224.96,226.219 1225.53,227.496 1226.1,227.979 1226.66,227.075 1227.23,229.554 1227.8,229.647 1228.37,230.843 1228.94,230.968 1229.51,232.042 1230.07,233.097 1230.64,233.09 1231.21,233.12 1231.78,233.094 1232.35,231.854 1232.92,231.609 1233.48,232.672 1234.05,234.624 1234.62,234.696 1235.19,234.468 1235.76,235.946 1236.33,235.791 1236.89,232.51 1237.46,234.433 1238.03,234.333 1238.6,232.207 1239.17,231.324 1239.74,232.36 1240.3,233.121 1240.87,231.88 1241.44,232.776 1242.01,232.283 1242.58,232.946 1243.15,231.73 1243.71,229.53 1244.28,229.858 1244.85,226.946 1245.42,226.077 1245.99,226.409 1246.56,224.87 1247.12,225.134 1247.69,225.404 1248.26,225.879 1248.83,226.407 1249.4,224.739 1249.97,227.139 1250.53,226.285 1251.1,224.722 1251.67,226.343 1252.24,226.827 1252.81,228.233 1253.38,228.518 1253.94,228.698 1254.51,227.897 1255.08,228.294 1255.65,227.418 1256.22,228.67 1256.79,228.949 1257.35,228.133 1257.92,229.488 1258.49,230.65 1259.06,229.903 1259.63,233.202 1260.2,235.233 1260.76,235.143 1261.33,236.025 1261.9,233.659 1262.47,234.586 1263.04,232.993 1263.61,233.95 1264.18,234.731 1264.74,234.775 1265.31,233.804 1265.88,233.681 1266.45,234.522 1267.02,236.364 1267.59,234.837 1268.15,233.49 1268.72,235.437 1269.29,235.989 1269.86,235.333 1270.43,233.939 1271,234.618 1271.56,234.302 1272.13,234.898 1272.7,233.744 1273.27,233.501 1273.84,234.419 1274.41,236.03 1274.97,236.611 1275.54,237.224 1276.11,235.904 1276.68,233.352 1277.25,234.032 1277.82,234.764 1278.38,236.455 1278.95,235.989 1279.52,234.455 1280.09,233.889 1280.66,233.406 1281.23,234.038 1281.79,232.579 1282.36,233.382 1282.93,234.164 1283.5,231.833 1284.07,230.548 1284.64,231.357 1285.2,232.011 1285.77,231.761 1286.34,232.692 1286.91,232.545 1287.48,234.209 1288.05,232.622 1288.61,232.26 1289.18,231.839 1289.75,231.477 1290.32,230.321 1290.89,230.237 1291.46,227.941 1292.02,226.906 1292.59,226.004 1293.16,225.107 1293.73,226.254 1294.3,227.133 1294.87,226.151 1295.43,225.48 1296,225.767 1296.57,225.071 1297.14,225.29 1297.71,224.24 1298.28,224.533 1298.84,223.715 1299.41,225.016 1299.98,227.313 1300.55,228.529 1301.12,226.359 1301.69,225.399 1302.25,224.818 1302.82,224.323 1303.39,223.709 1303.96,226.163 1304.53,227.31 1305.1,230.446 1305.66,230.534 1306.23,228.477 1306.8,226.385 1307.37,227.622 1307.94,229.914 1308.51,229.929 1309.07,231.983 1309.64,234.074 1310.21,231.898 1310.78,231.172 1311.35,230.029 1311.92,231.028 1312.48,232.828 1313.05,232.6 1313.62,233.261 1314.19,233.909 1314.76,235.667 1315.33,234.227 1315.89,234.867 1316.46,234.514 1317.03,232.043 1317.6,232.935 1318.17,232.497 1318.74,231.972 1319.3,231.701 1319.87,230.237 1320.44,231.145 1321.01,231.99 1321.58,231.733 1322.15,231.468 1322.71,232.54 1323.28,231.535 1323.85,231.391 1324.42,228.256 1324.99,228.35 1325.56,227.255 1326.12,226.24 1326.69,224.473 1327.26,224.876 1327.83,224.981 1328.4,225.419 1328.97,228.835 1329.53,227.919 1330.1,223.958 1330.67,223.262 1331.24,223.613 1331.81,226.935 1332.38,229.276 1332.94,229.415 1333.51,231.735 1334.08,229.839 1334.65,230.785 1335.22,230.693 1335.79,227.511 1336.36,229.751 1336.92,229.953 1337.49,230.159 1338.06,230.375 1338.63,230.338 1339.2,230.453 1339.77,231.504 1340.33,233.36 1340.9,233.978 1341.47,237.007 1342.04,237.662 1342.61,238.193 1343.18,237.668 1343.74,235.18 1344.31,235.909 1344.88,234.333 1345.45,233.918 1346.02,233.574 1346.59,234.285 1347.15,233.888 1347.72,233.491 1348.29,233.335 1348.86,231.925 1349.43,231.714 1350,230.583 1350.56,230.465 1351.13,230.452 1351.7,230.326 1352.27,230.366 1352.84,229.419 1353.41,228.335 1353.97,226.187 1354.54,226.251 1355.11,225.366 1355.68,226.618 1356.25,226.87 1356.82,228.22 1357.38,227.296 1357.95,227.469 1358.52,228.397 1359.09,230.502 1359.66,231.45 1360.23,232.41 1360.79,232.244 1361.36,232.022 1361.93,231.834 1362.5,231.696 1363.07,228.402 1363.64,231.627 1364.2,231.441 1364.77,231.467 1365.34,228.344 1365.91,229.728 1366.48,229.627 1367.05,229.698 1367.61,230.353 1368.18,229.514 1368.75,230.832 1369.32,228.587 1369.89,229.864 1370.46,227.65 1371.02,228.845 1371.59,230.005 1372.16,230.062 1372.73,230.134 1373.3,226.969 1373.87,228.082 1374.43,229.077 1375,229.175 1375.57,230.283 1376.14,231.338 1376.71,231.471 1377.28,231.014 1377.84,231.025 1378.41,231.772 1378.98,231.508 1379.55,230.137 1380.12,232.091 1380.69,229.964 1381.25,228.997 1381.82,224.919 1382.39,225.301 1382.96,224.729 1383.53,224.145 1384.1,225.515 1384.66,228.907 1385.23,228.692 1385.8,229.814 1386.37,229.852 1386.94,231.931 1387.51,232.833 1388.07,230.773 1388.64,228.49 1389.21,227.657 1389.78,228.825 1390.35,232.017 1390.92,231.061 1391.48,232.053 1392.05,231.905 1392.62,231.631 1393.19,232.51 1393.76,232.556 1394.33,235.307 1394.89,234.908 1395.46,234.383 1396.03,231.119 1396.6,232.066 1397.17,230.867 1397.74,230.685 1398.3,231.6 1398.87,232.419 1399.44,234.295 1400.01,232.859 1400.58,235.764 1401.15,236.264 1401.71,235.995 1402.28,235.448 1402.85,234.684 1403.42,234.385 1403.99,234.931 1404.56,236.314 1405.13,238.004 1405.69,235.192 1406.26,232.747 1406.83,232.308 1407.4,232.152 1407.97,229.951 1408.54,228.068 1409.1,228.997 1409.67,227.991 1410.24,227.048 1410.81,227.176 1411.38,228.288 1411.95,230.328 1412.51,228.106 1413.08,227.166 1413.65,224.036 1414.22,223.113 1414.79,224.398 1415.36,223.566 1415.92,222.982 1416.49,223.436 1417.06,224.029 1417.63,226.486 1418.2,226.862 1418.77,226.806 1419.33,226.907 1419.9,228.079 1420.47,225.952 1421.04,226.426 1421.61,226.582 1422.18,224.839 1422.74,224.284 1423.31,224.821 1423.88,225.106 1424.45,223.101 1425.02,224.945 1425.59,223.205 1426.15,222.687 1426.72,224.09 1427.29,225.387 1427.86,227.7 1428.43,228.192 1429,228.257 1429.56,228.432 1430.13,229.884 1430.7,229.966 1431.27,229.081 1431.84,229.986 1432.41,228.785 1432.97,229.979 1433.54,229.985 1434.11,231.114 1434.68,231.235 1435.25,229.248 1435.82,232.565 1436.38,231.516 1436.95,229.361 1437.52,230.465 1438.09,230.626 1438.66,229.443 1439.23,227.575 1439.79,225.635 1440.36,224.927 1440.93,225.379 1441.5,223.641 1442.07,223.146 1442.64,222.65 1443.2,225.093 1443.77,223.484 1444.34,225.29 1444.91,225.836 1445.48,229.353 1446.05,228.421 1446.61,227.797 1447.18,227.15 1447.75,228.703 1448.32,228.664 1448.89,231.016 1449.46,227.96 1450.02,227.373 1450.59,228.665 1451.16,228.843 1451.73,228.842 1452.3,230.13 1452.87,232.238 1453.43,232.322 1454,235.388 1454.57,234.189 1455.14,232.037 1455.71,232.154 1456.28,233.346 1456.84,234.179 1457.41,233.96 1457.98,233.891 1458.55,232.899 1459.12,231.665 1459.69,232.874 1460.25,233.815 1460.82,233.561 1461.39,232.298 1461.96,234.431 1462.53,235.234 1463.1,234.122 1463.66,232.84 1464.23,233.015 1464.8,232.716 1465.37,228.507 1465.94,227.769 1466.51,229.139 1467.07,230.276 1467.64,230.419 1468.21,229.481 1468.78,230.389 1469.35,231.424 1469.92,230.419 1470.48,230.289 1471.05,228.391 1471.62,228.496 1472.19,226.548 1472.76,226.836 1473.33,227.174 1473.89,224.368 1474.46,223.686 1475.03,225.211 1475.6,226.729 1476.17,228.247 1476.74,227.412 1477.31,228.575 1477.87,228.71 1478.44,229.836 1479.01,230.083 1479.58,230.942 1480.15,235.2 1480.72,235.013 1481.28,234.716 1481.85,233.491 1482.42,234.367 1482.99,232.298 1483.56,229.093 1484.13,229.318 1484.69,229.366 1485.26,228.336 1485.83,227.533 1486.4,227.947 1486.97,231.277 1487.54,232.347 1488.1,233.344 1488.67,233.101 1489.24,233.018 1489.81,229.963 1490.38,229.983 1490.95,232.024 1491.51,232.922 1492.08,232.938 1492.65,233.765 1493.22,230.412 1493.79,230.515 1494.36,230.503 1494.92,229.588 1495.49,228.716 1496.06,231.01 1496.63,230.006 1497.2,229.969 1497.77,230.049 1498.33,228 1498.9,231.031 1499.47,230.832 1500.04,232.823 1500.61,232.578 1501.18,234.499 1501.74,234.278 1502.31,235.977 1502.88,235.5 1503.45,235.316 1504.02,233.928 1504.59,235.736 1505.15,235.329 1505.72,236.01 1506.29,233.428 1506.86,234.079 1507.43,232.619 1508,231.584 1508.56,229.313 1509.13,229.295 1509.7,230.373 1510.27,230.262 1510.84,231.168 1511.41,232.259 1511.97,230.971 1512.54,231.924 1513.11,230.937 1513.68,231.872 1514.25,228.631 1514.82,225.763 1515.38,227.182 1515.95,225.334 1516.52,227.988 1517.09,230.025 1517.66,230.115 1518.23,230.338 1518.79,232.411 1519.36,231.391 1519.93,231.44 1520.5,233.37 1521.07,233.988 1521.64,235.389 1522.2,233.981 1522.77,234.848 1523.34,233.346 1523.91,233.102 1524.48,231.65 1525.05,229.422 1525.61,230.552 1526.18,230.594 1526.75,230.664 1527.32,230.524 1527.89,230.482 1528.46,231.29 1529.02,232.098 1529.59,231.2 1530.16,229.112 1530.73,227.262 1531.3,227.418 1531.87,227.484 1532.43,226.571 1533,227.631 1533.57,228.807 1534.14,231.653 1534.71,229.521 1535.28,229.468 1535.84,229.527 1536.41,228.333 1536.98,229.673 1537.55,228.643 1538.12,228.644 1538.69,227.587 1539.25,228.688 1539.82,227.823 1540.39,229.014 1540.96,230.074 1541.53,231.208 1542.1,231.123 1542.66,230.962 1543.23,233.04 1543.8,233.866 1544.37,233.65 1544.94,233.5 1545.51,232.385 1546.08,233.076 1546.64,234.962 1547.21,234.769 1547.78,234.317 1548.35,233.962 1548.92,234.788 1549.49,234.611 1550.05,235.409 1550.62,233.999 1551.19,232.703 1551.76,233.592 1552.33,233.248 1552.9,233.803 1553.46,229.421 1554.03,228.415 1554.6,231.693 1555.17,229.201 1555.74,229.157 1556.31,225.915 1556.87,222.979 1557.44,220.342 1558.01,219.895 1558.58,221.492 1559.15,223.024 1559.72,224.415 1560.28,225.89 1560.85,227.251 1561.42,228.437 1561.99,226.448 1562.56,226.65 1563.13,227.081 1563.69,229.376 1564.26,227.595 1564.83,227.729 1565.4,226.745 1565.97,227.986 1566.54,228.207 1567.1,230.502 1567.67,230.479 1568.24,232.38 1568.81,230.196 1569.38,226.115 1569.95,226.499 1570.51,225.835 1571.08,228.205 1571.65,225.516 1572.22,224.908 1572.79,225.54 1573.36,223.707 1573.92,225.065 1574.49,227.454 1575.06,227.943 1575.63,230.197 1576.2,233.064 1576.77,231.927 1577.33,233.74 1577.9,231.443 1578.47,231.291 1579.04,231.346 1579.61,231.486 1580.18,231.654 1580.74,230.54 1581.31,231.512 1581.88,231.402 1582.45,231.221 1583.02,235.303 1583.59,236.012 1584.15,237.824 1584.72,237.252 1585.29,236.782 1585.86,236.167 1586.43,234.601 1587,236.301 1587.56,235.75 1588.13,234.177 1588.7,235.935 1589.27,236.545 1589.84,235.155 1590.41,236.753 1590.97,236.256 1591.54,235.651 1592.11,235.12 1592.68,233.692 1593.25,233.529 1593.82,231.115 1594.38,229.327 1594.95,228.249 1595.52,228.361 1596.09,228.332 1596.66,228.571 1597.23,228.705 1597.79,228.864 1598.36,229.999 1598.93,230.977 1599.5,231.849 1600.07,232.739 1600.64,232.476 1601.2,231.293 1601.77,232.068 1602.34,233.039 1602.91,232.698 1603.48,230.781 1604.05,229.725 1604.61,227.599 1605.18,227.692 1605.75,227.86 1606.32,229.169 1606.89,227.98 1607.46,226.016 1608.02,226.093 1608.59,225.176 1609.16,226.495 1609.73,227.724 1610.3,228.898 1610.87,228.885 1611.43,229.791 1612,230.923 1612.57,233.924 1613.14,233.463 1613.71,234.12 1614.28,232.672 1614.84,231.277 1615.41,232.095 1615.98,231.602 1616.55,232.646 1617.12,231.289 1617.69,231.153 1618.26,230.86 1618.82,227.613 1619.39,228.717 1619.96,229.628 1620.53,230.755 1621.1,231.631 1621.67,231.579 1622.23,231.336 1622.8,231.312 1623.37,233.206 1623.94,232.743 1624.51,230.459 1625.08,229.347 1625.64,230.253 1626.21,232.047 1626.78,230.71 1627.35,229.531 1627.92,229.573 1628.49,229.586 1629.05,231.407 1629.62,231.183 1630.19,233.113 1630.76,232.07 1631.33,233.961 1631.9,235.785 1632.46,235.167 1633.03,235.895 1633.6,234.531 1634.17,235.157 1634.74,234.766 1635.31,234.406 1635.87,232.907 1636.44,231.638 1637.01,231.278 1637.58,231.961 1638.15,228.431 1638.72,226.369 1639.28,227.649 1639.85,229.776 1640.42,227.417 1640.99,225.434 1641.56,227.715 1642.13,225.41 1642.69,225.631 1643.26,225.796 1643.83,225.957 1644.4,226.075 1644.97,226.378 1645.54,226.626 1646.1,226.628 1646.67,225.928 1647.24,227.134 1647.81,226.158 1648.38,228.375 1648.95,229.469 1649.51,229.511 1650.08,229.311 1650.65,228.128 1651.22,227.32 1651.79,227.679 1652.36,228.7 1652.92,225.622 1653.49,225.003 1654.06,223.294 1654.63,222.641 1655.2,224.021 1655.77,224.517 1656.33,222.705 1656.9,222.094 1657.47,222.513 1658.04,222.122 1658.61,222.563 1659.18,223.144 1659.74,224.662 1660.31,226.188 1660.88,225.741 1661.45,228.293 1662.02,229.638 1662.59,230.875 1663.15,231.915 1663.72,231.133 1664.29,226.811 1664.86,229.098 1665.43,228.233 1666,228.461 1666.56,227.358 1667.13,227.695 1667.7,227.936 1668.27,229.098 1668.84,228.35 1669.41,228.399 1669.97,228.498 1670.54,226.709 1671.11,226.969 1671.68,225.172 1672.25,225.807 1672.82,225.278 1673.38,225.445 1673.95,226.887 1674.52,227.208 1675.09,226.362 1675.66,227.936 1676.23,227.11 1676.79,226.431 1677.36,226.748 1677.93,228.327 1678.5,226.473 1679.07,227.896 1679.64,229.188 1680.2,231.434 1680.77,232.574 1681.34,234.624 1681.91,235.315 1682.48,234.03 1683.05,231.673 1683.61,232.623 1684.18,231.248 1684.75,229.337 1685.32,229.503 1685.89,228.667 1686.46,226.853 1687.02,229.405 1687.59,228.887 1688.16,231.349 1688.73,230.214 1689.3,230.458 1689.87,231.616 1690.44,232.421 1691,231.537 1691.57,232.833 1692.14,232.449 1692.71,232.473 1693.28,232.563 1693.85,231.56 1694.41,231.861 1694.98,232.01 1695.55,229.874 1696.12,229.844 1696.69,226.697 1697.26,227.081 1697.82,226.316 1698.39,228.739 1698.96,229.059 1699.53,232.491 1700.1,233.448 1700.67,232.046 1701.23,233.008 1701.8,234.927 1702.37,234.654 1702.94,235.346 1703.51,238.277 1704.08,239.618 1704.64,238.983 1705.21,237.193 1705.78,236.523 1706.35,232.94 1706.92,232.803 1707.49,232.661 1708.05,234.554 1708.62,234.204 1709.19,234.929 1709.76,235.667 1710.33,237.371 1710.9,236.659 1711.46,234.924 1712.03,233.547 1712.6,233.42 1713.17,234.292 1713.74,233.987 1714.31,231.69 1714.87,230.773 1715.44,229.687 1716.01,228.9 1716.58,228.899 1717.15,227.709 1717.72,226.795 1718.28,227.141 1718.85,229.061 1719.42,229.32 1719.99,229.243 1720.56,228.274 1721.13,228.517 1721.69,228.597 1722.26,227.668 1722.83,228.663 1723.4,229.74 1723.97,230.666 1724.54,228.553 1725.1,228.821 1725.67,230.866 1726.24,230.657 1726.81,229.767 1727.38,228.781 1727.95,227.986 1728.51,228.323 1729.08,230.574 1729.65,230.259 1730.22,229.31 1730.79,229.515 1731.36,231.489 1731.92,231.388 1732.49,231.136 1733.06,231.021 1733.63,227.811 1734.2,230.046 1734.77,232.222 1735.33,231.871 1735.9,231.864 1736.47,233.722 1737.04,232.512 1737.61,231.103 1738.18,231.895 1738.74,229.539 1739.31,227.531 1739.88,226.52 1740.45,225.758 1741.02,224.662 1741.59,223.964 1742.15,222.183 1742.72,224.778 1743.29,224.102 1743.86,223.377 1744.43,223.988 1745,224.35 1745.56,225.776 1746.13,228.377 1746.7,228.35 1747.27,227.617 1747.84,225.7 1748.41,224.025 1748.97,225.592 1749.54,227.009 1750.11,227.138 1750.68,227.402 1751.25,227.608 1751.82,228.842 1752.38,234.195 1752.95,233.897 1753.52,232.469 1754.09,230.251 1754.66,231.5 1755.23,232.517 1755.79,231.344 1756.36,232.376 1756.93,230.288 1757.5,230.182 1758.07,230.279 1758.64,231.242 1759.21,230.374 1759.77,232.394 1760.34,233.53 1760.91,228.287 1761.48,229.668 1762.05,229.622 1762.62,228.418 1763.18,228.601 1763.75,229.843 1764.32,231.996 1764.89,229.717 1765.46,229.765 1766.03,228.578 1766.59,227.662 1767.16,227.817 1767.73,230.104 1768.3,233.19 1768.87,235.337 1769.44,234.983 1770,235.782 1770.57,234.501 1771.14,232.176 1771.71,234.307 1772.28,234.104 1772.85,236 1773.41,235.565 1773.98,234.17 1774.55,235.031 1775.12,236.641 1775.69,235.227 1776.26,231.745 1776.82,231.539 1777.39,231.265 1777.96,231.048 1778.53,228.839 1779.1,229.897 1779.67,229.802 1780.23,230.027 1780.8,227.773 1781.37,226.931 1781.94,229.099 1782.51,229.085 1783.08,227.99 1783.64,228.195 1784.21,230.18 1784.78,231.215 1785.35,229.155 1785.92,228.442 1786.49,226.433 1787.05,227.934 1787.62,229.116 1788.19,228.991 1788.76,231.986 1789.33,231.793 1789.9,230.621 1790.46,229.569 1791.03,229.662 1791.6,232.818 1792.17,234.733 1792.74,232.334 1793.31,231.269 1793.87,228.237 1794.44,231.253 1795.01,230.217 1795.58,229.076 1796.15,231.165 1796.72,231.179 1797.28,231.881 1797.85,232.803 1798.42,232.497 1798.99,233.389 1799.56,232.13 1800.13,232.013 1800.69,233.829 1801.26,232.501 1801.83,232.307 1802.4,234.155 1802.97,234.972 1803.54,236.505 1804.1,235.889 1804.67,234.408 1805.24,233.952 1805.81,235.736 1806.38,235.155 1806.95,234.852 1807.51,234.38 1808.08,236.044 1808.65,235.509 1809.22,235.026 1809.79,234.544 1810.36,234.315 1810.92,232.757 1811.49,231.458 1812.06,231.216 1812.63,230.179 1813.2,231.153 1813.77,231.917 1814.33,228.519 1814.9,228.368 1815.47,230.451 1816.04,228.318 1816.61,229.44 1817.18,229.056 1817.74,229.047 1818.31,231.372 1818.88,229.129 1819.45,228.375 1820.02,227.392 1820.59,226.369 1821.15,226.535 1821.72,227.685 1822.29,227.551 1822.86,227.61 1823.43,225.625 1824,225.644 1824.56,222.763 1825.13,223.225 1825.7,222.81 1826.27,223.093 1826.84,225.405 1827.41,225.788 1827.97,229.284 1828.54,228.384 1829.11,229.19 1829.68,228.264 1830.25,228.13 1830.82,228.165 1831.39,228.061 1831.95,228.048 1832.52,228.474 1833.09,229.626 1833.66,229.83 1834.23,229.913 1834.8,230.957 1835.36,230.893 1835.93,229.659 1836.5,230.546 1837.07,229.498 1837.64,225.396 1838.21,225.819 1838.77,226.054 1839.34,226.545 1839.91,226.77 1840.48,228.091 1841.05,228.317 1841.62,230.367 1842.18,229.299 1842.75,230.347 1843.32,231.491 1843.89,230.151 1844.46,228.946 1845.03,228.955 1845.59,231.151 1846.16,231.279 1846.73,231.239 1847.3,228.997 1847.87,229.926 1848.44,230.192 1849,231.278 1849.57,231.245 1850.14,233.265 1850.71,234.014 1851.28,232.724 1851.85,232.617 1852.41,229.538 1852.98,226.457 1853.55,226.878 1854.12,227.166 1854.69,226.965 1855.26,227.936 1855.82,228.019 1856.39,228.203 1856.96,228.251 1857.53,230.541 1858.1,231.378 1858.67,232.146 1859.23,232.144 1859.8,232.995 1860.37,232.838 1860.94,233.85 1861.51,230.659 1862.08,229.604 1862.64,231.791 1863.21,230.594 1863.78,230.683 1864.35,228.528 1864.92,230.726 1865.49,230.655 1866.05,231.655 1866.62,230.778 1867.19,229.632 1867.76,229.691 1868.33,230.469 1868.9,231.43 1869.46,232.604 1870.03,231.662 1870.6,231.681 1871.17,232.453 1871.74,230.317 1872.31,229.461 1872.87,229.428 1873.44,231.453 1874.01,234.55 1874.58,234.358 1875.15,233.987 1875.72,230.543 1876.28,230.549 1876.85,229.517 1877.42,229.549 1877.99,225.452 1878.56,224.593 1879.13,227.102 1879.69,225.259 1880.26,226.756 1880.83,225.938 1881.4,225.134 1881.97,226.381 1882.54,224.7 1883.1,225.011 1883.67,225.322 1884.24,224.551 1884.81,224.814 1885.38,225.467 1885.95,226.848 1886.51,228.256 1887.08,230.658 1887.65,230.639 1888.22,230.498 1888.79,230.539 1889.36,232.518 1889.92,235.57 1890.49,233.103 1891.06,233.938 1891.63,233.442 1892.2,233.18 1892.77,232.877 1893.33,233.511 1893.9,232.305 1894.47,231.288 1895.04,233.288 1895.61,231.822 1896.18,230.448 1896.74,229.55 1897.31,228.546 1897.88,228.883 1898.45,229.012 1899.02,229.83 1899.59,229.934 1900.16,230.976 1900.72,229.953 1901.29,228.015 1901.86,227.165 1902.43,229.254 1903,228.455 1903.57,228.662 1904.13,227.632 1904.7,227.825 1905.27,224.813 1905.84,227.289 1906.41,227.527 1906.98,227.394 1907.54,228.754 1908.11,230.027 1908.68,230.153 1909.25,231.167 1909.82,230.253 1910.39,232.438 1910.95,233.337 1911.52,232.119 1912.09,233.067 1912.66,233.888 1913.23,233.766 1913.8,233.467 1914.36,234.059 1914.93,233.654 1915.5,234.422 1916.07,234.198 1916.64,232.673 1917.21,231.63 1917.77,232.516 1918.34,233.378 1918.91,231.95 1919.48,232.902 1920.05,228.416 1920.62,231.714 1921.18,231.788 1921.75,232.649 1922.32,231.649 1922.89,231.652 1923.46,230.553 1924.03,231.664 1924.59,233.756 1925.16,234.318 1925.73,233.039 1926.3,232.858 1926.87,231.817 1927.44,230.643 1928,231.831 1928.57,228.813 1929.14,228.993 1929.71,230.264 1930.28,229.167 1930.85,229.321 1931.41,229.464 1931.98,230.431 1932.55,229.161 1933.12,228.208 1933.69,229.205 1934.26,228.182 1934.82,228.301 1935.39,230.293 1935.96,232.363 1936.53,232.048 1937.1,231.65 1937.67,231.444 1938.23,229.227 1938.8,231.116 1939.37,229.993 1939.94,230.852 1940.51,228.812 1941.08,229.913 1941.64,227.919 1942.21,231.349 1942.78,231.079 1943.35,229.06 1943.92,230.104 1944.49,232.376 1945.05,234.195 1945.62,235.881 1946.19,235.625 1946.76,233.013 1947.33,229.833 1947.9,228.54 1948.46,229.421 1949.03,229.244 1949.6,230.237 1950.17,230.274 1950.74,231.147 1951.31,232.235 1951.87,230.965 1952.44,230.891 1953.01,229.721 1953.58,228.468 1954.15,227.485 1954.72,227.638 1955.28,228.811 1955.85,229.714 1956.42,232.651 1956.99,232.373 1957.56,232.034 1958.13,232.854 1958.69,234.55 1959.26,233.088 1959.83,232.689 1960.4,232.255 1960.97,233.192 1961.54,233.862 1962.1,232.576 1962.67,234.33 1963.24,233.143 1963.81,232.719 1964.38,233.697 1964.95,230.229 1965.51,226.9 1966.08,228.185 1966.65,230.322 1967.22,230.228 1967.79,230.262 1968.36,229.093 1968.92,230.08 1969.49,227.869 1970.06,226.697 1970.63,225.863 1971.2,224.99 1971.77,223.157 1972.34,221.502 1972.9,221.282 1973.47,220.601 1974.04,221.159 1974.61,223.834 1975.18,225.26 1975.75,226.654 1976.31,228.838 1976.88,228.99 1977.45,228.195 1978.02,227.084 1978.59,225.373 1979.16,224.727 1979.72,224.067 1980.29,225.464 1980.86,223.906 1981.43,223.351 1982,223.942 1982.57,223.131 1983.13,223.586 1983.7,225.039 1984.27,229.674 1984.84,229.912 1985.41,229.902 1985.98,230.917 1986.54,229.96 1987.11,230.077 1987.68,231.284 1988.25,232.029 1988.82,230.706 1989.39,230.592 1989.95,230.582 1990.52,229.668 1991.09,228.491 1991.66,233.673 1992.23,230.543 1992.8,231.679 1993.36,232.612 1993.93,232.437 1994.5,234.246 1995.07,235.153 1995.64,231.688 1996.21,231.579 1996.77,231.534 1997.34,230.504 1997.91,229.34 1998.48,229.533 1999.05,229.599 1999.62,228.53 2000.18,228.668 2000.75,231.001 2001.32,232.01 2001.89,232.889 2002.46,232.688 2003.03,232.611 2003.59,231.314 2004.16,231.125 2004.73,232.133 2005.3,229.867 2005.87,228.803 2006.44,229.846 2007,229.965 2007.57,230.998 2008.14,230.747 2008.71,231.758 2009.28,231.606 2009.85,231.256 2010.41,230.254 2010.98,229.54 2011.55,227.673 2012.12,228.513 2012.69,228.786 2013.26,226.689 2013.82,226.863 2014.39,227.137 2014.96,227.467 2015.53,227.556 2016.1,227.478 2016.67,229.647 2017.23,230.02 2017.8,231.04 2018.37,231.008 2018.94,231.02 2019.51,231.193 2020.08,232.192 2020.64,231.024 2021.21,231.831 2021.78,231.86 2022.35,231.912 2022.92,232.697 2023.49,234.613 2024.05,235.267 2024.62,234.003 2025.19,233.554 2025.76,233.28 2026.33,233.083 2026.9,235.027 2027.46,232.745 2028.03,232.84 2028.6,232.721 2029.17,231.569 2029.74,232.379 2030.31,232.2 2030.87,228.961 2031.44,228.026 2032.01,227.903 2032.58,230.156 2033.15,228.888 2033.72,228.079 2034.28,228.155 2034.85,230.372 2035.42,229.321 2035.99,229.169 2036.56,230.129 2037.13,230.32 2037.69,232.25 2038.26,232.229 2038.83,230.896 2039.4,230.912 2039.97,232.165 2040.54,232.154 2041.11,233.983 2041.67,232.683 2042.24,232.517 2042.81,233.346 2043.38,234.117 2043.95,235.935 2044.52,235.21 2045.08,233.958 2045.65,233.77 2046.22,233.51 2046.79,234.414 2047.36,233.949 2047.93,232.42 2048.49,231.314 2049.06,232.206 2049.63,234.224 2050.2,231.967 2050.77,230.634 2051.34,227.525 2051.9,228.529 2052.47,227.333 2053.04,228.319 2053.61,228.366 2054.18,229.603 2054.75,229.69 2055.31,230.705 2055.88,232.576 2056.45,233.061 2057.02,232.853 2057.59,233.504 2058.16,233.175 2058.72,232.898 2059.29,230.545 2059.86,229.496 2060.43,228.112 2061,232.224 2061.57,233.023 2062.13,231.727 2062.7,231.545 2063.27,229.136 2063.84,229.422 2064.41,229.46 2064.98,228.34 2065.54,228.272 2066.11,229.331 2066.68,228.396 2067.25,228.126 2067.82,227.181 2068.39,227.126 2068.95,226.474 2069.52,226.674 2070.09,228.036 2070.66,229.092 2071.23,229.425 2071.8,230.407 2072.36,228.484 2072.93,228.669 2073.5,231.906 2074.07,231.722 2074.64,229.579 2075.21,230.838 2075.77,226.415 2076.34,222.714 2076.91,223.18 2077.48,223.698 2078.05,225.222 2078.62,225.301 2079.18,225.663 2079.75,227.074 2080.32,226.31 2080.89,226.727 2081.46,228.075 2082.03,228.151 2082.59,228.431 2083.16,228.517 2083.73,227.664 2084.3,228 2084.87,228.352 2085.44,230.598 2086,230.29 2086.57,230.239 2087.14,229.106 2087.71,228.233 2088.28,229.282 2088.85,229.175 2089.41,228.19 2089.98,226.362 2090.55,225.446 2091.12,225.779 2091.69,224.23 2092.26,225.732 2092.82,225.13 2093.39,226.606 2093.96,224.93 2094.53,227.488 2095.1,227.767 2095.67,229.193 2096.23,229.274 2096.8,229.534 2097.37,228.853 2097.94,230.165 2098.51,228.18 2099.08,227.292 2099.64,229.452 2100.21,231.652 2100.78,233.653 2101.35,233.337 2101.92,231.175 2102.49,231.422 2103.05,232.626 2103.62,230.418 2104.19,228.467 2104.76,228.659 2105.33,229.755 2105.9,228.699 2106.46,230.13 2107.03,228.972 2107.6,228.1 2108.17,225.102 2108.74,223.57 2109.31,223.932 2109.87,220.662 2110.44,222.472 2111.01,225.069 2111.58,224.364 2112.15,224.172 2112.72,226.871 2113.29,228.287 2113.85,230.57 2114.42,230.623 2114.99,230.696 2115.56,230.847 2116.13,230.837 2116.7,230.086 2117.26,232.253 2117.83,233.271 2118.4,232.123 2118.97,231.97 2119.54,233.965 2120.11,231.734 2120.67,231.73 2121.24,232.694 2121.81,233.66 2122.38,235.499 2122.95,234.249 2123.52,233.984 2124.08,233.812 2124.65,236.672 2125.22,235.25 2125.79,234.815 2126.36,233.541 2126.93,231.421 2127.49,232.621 2128.06,232.517 2128.63,233.328 2129.2,232.97 2129.77,231.014 2130.34,232.932 2130.9,233.644 2131.47,234.313 2132.04,232.018 2132.61,231.929 2133.18,231.868 2133.75,230.841 2134.31,230.945 2134.88,229.919 2135.45,229.837 2136.02,229.781 2136.59,229.764 2137.16,227.685 2137.72,227.744 2138.29,228.011 2138.86,230.432 2139.43,231.37 2140,233.154 2140.57,233.947 2141.13,231.628 2141.7,233.348 2142.27,232.275 2142.84,229.9 2143.41,227.617 2143.98,229.683 2144.54,230.793 2145.11,230.605 2145.68,230.504 2146.25,230.394 2146.82,230.247 2147.39,228.109 2147.95,229.433 2148.52,231.703 2149.09,233.649 2149.66,231.467 2150.23,230.522 2150.8,231.6 2151.36,232.933 2151.93,231.833 2152.5,228.526 2153.07,230.734 2153.64,231.666 2154.21,231.542 2154.77,230.581 2155.34,230.46 2155.91,229.392 2156.48,229.421 2157.05,229.539 2157.62,232.687 2158.18,232.543 2158.75,233.415 2159.32,231.168 2159.89,232.245 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip360)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.023\n  with uncertainty of ± 0.002099269690382221\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01555 ± (0.00238182, 0.00223529) (MC)\n  95% confidence interval: [-4.02016, -4.01118]) (MC)\n  linear error propagation: -4.01567 ± 0.00227255\n  |δ_y| = |0.00161807| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015554973274009, val_l = 0.004603350417486496, val_u = 0.004372868570921007)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip390\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip391\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip392\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.04 2211.02,1150.04 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,988.575 2211.02,988.575 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,827.112 2211.02,827.112 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,665.648 2211.02,665.648 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,504.185 2211.02,504.185 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,342.722 2211.02,342.722 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.04 365.751,1150.04 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,988.575 365.751,988.575 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,827.112 365.751,827.112 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,665.648 365.751,665.648 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,504.185 365.751,504.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,342.722 365.751,342.722 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M298.909 1135.84 Q295.298 1135.84 293.469 1139.4 Q291.664 1142.94 291.664 1150.07 Q291.664 1157.18 293.469 1160.74 Q295.298 1164.29 298.909 1164.29 Q302.543 1164.29 304.349 1160.74 Q306.177 1157.18 306.177 1150.07 Q306.177 1142.94 304.349 1139.4 Q302.543 1135.84 298.909 1135.84 M298.909 1132.13 Q304.719 1132.13 307.775 1136.74 Q310.853 1141.32 310.853 1150.07 Q310.853 1158.8 307.775 1163.41 Q304.719 1167.99 298.909 1167.99 Q293.099 1167.99 290.02 1163.41 Q286.964 1158.8 286.964 1150.07 Q286.964 1141.32 290.02 1136.74 Q293.099 1132.13 298.909 1132.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M259.557 1001.92 L267.196 1001.92 L267.196 975.554 L258.886 977.221 L258.886 972.961 L267.15 971.295 L271.826 971.295 L271.826 1001.92 L279.465 1001.92 L279.465 1005.85 L259.557 1005.85 L259.557 1001.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 974.373 Q295.298 974.373 293.469 977.938 Q291.664 981.48 291.664 988.609 Q291.664 995.716 293.469 999.281 Q295.298 1002.82 298.909 1002.82 Q302.543 1002.82 304.349 999.281 Q306.177 995.716 306.177 988.609 Q306.177 981.48 304.349 977.938 Q302.543 974.373 298.909 974.373 M298.909 970.67 Q304.719 970.67 307.775 975.276 Q310.853 979.86 310.853 988.609 Q310.853 997.336 307.775 1001.94 Q304.719 1006.53 298.909 1006.53 Q293.099 1006.53 290.02 1001.94 Q286.964 997.336 286.964 988.609 Q286.964 979.86 290.02 975.276 Q293.099 970.67 298.909 970.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M262.775 840.456 L279.094 840.456 L279.094 844.392 L257.15 844.392 L257.15 840.456 Q259.812 837.702 264.395 833.072 Q269.002 828.419 270.182 827.077 Q272.428 824.554 273.307 822.818 Q274.21 821.058 274.21 819.369 Q274.21 816.614 272.266 814.878 Q270.344 813.142 267.242 813.142 Q265.043 813.142 262.59 813.906 Q260.159 814.67 257.381 816.22 L257.381 811.498 Q260.205 810.364 262.659 809.785 Q265.113 809.207 267.15 809.207 Q272.52 809.207 275.715 811.892 Q278.909 814.577 278.909 819.068 Q278.909 821.197 278.099 823.119 Q277.312 825.017 275.205 827.609 Q274.627 828.281 271.525 831.498 Q268.423 834.693 262.775 840.456 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 812.91 Q295.298 812.91 293.469 816.475 Q291.664 820.017 291.664 827.146 Q291.664 834.253 293.469 837.818 Q295.298 841.359 298.909 841.359 Q302.543 841.359 304.349 837.818 Q306.177 834.253 306.177 827.146 Q306.177 820.017 304.349 816.475 Q302.543 812.91 298.909 812.91 M298.909 809.207 Q304.719 809.207 307.775 813.813 Q310.853 818.396 310.853 827.146 Q310.853 835.873 307.775 840.48 Q304.719 845.063 298.909 845.063 Q293.099 845.063 290.02 840.48 Q286.964 835.873 286.964 827.146 Q286.964 818.396 290.02 813.813 Q293.099 809.207 298.909 809.207 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M272.914 664.294 Q276.27 665.012 278.145 667.28 Q280.043 669.549 280.043 672.882 Q280.043 677.998 276.525 680.799 Q273.006 683.6 266.525 683.6 Q264.349 683.6 262.034 683.16 Q259.742 682.743 257.289 681.887 L257.289 677.373 Q259.233 678.507 261.548 679.086 Q263.863 679.664 266.386 679.664 Q270.784 679.664 273.076 677.928 Q275.39 676.192 275.39 672.882 Q275.39 669.827 273.238 668.114 Q271.108 666.378 267.289 666.378 L263.261 666.378 L263.261 662.535 L267.474 662.535 Q270.923 662.535 272.752 661.169 Q274.58 659.78 274.58 657.188 Q274.58 654.526 272.682 653.114 Q270.807 651.679 267.289 651.679 Q265.367 651.679 263.168 652.095 Q260.969 652.512 258.33 653.391 L258.33 649.225 Q260.992 648.484 263.307 648.114 Q265.645 647.743 267.705 647.743 Q273.029 647.743 276.131 650.174 Q279.233 652.581 279.233 656.702 Q279.233 659.572 277.59 661.563 Q275.946 663.53 272.914 664.294 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 651.447 Q295.298 651.447 293.469 655.012 Q291.664 658.553 291.664 665.683 Q291.664 672.79 293.469 676.354 Q295.298 679.896 298.909 679.896 Q302.543 679.896 304.349 676.354 Q306.177 672.79 306.177 665.683 Q306.177 658.553 304.349 655.012 Q302.543 651.447 298.909 651.447 M298.909 647.743 Q304.719 647.743 307.775 652.35 Q310.853 656.933 310.853 665.683 Q310.853 674.41 307.775 679.016 Q304.719 683.6 298.909 683.6 Q293.099 683.6 290.02 679.016 Q286.964 674.41 286.964 665.683 Q286.964 656.933 290.02 652.35 Q293.099 647.743 298.909 647.743 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M271.594 490.979 L259.789 509.428 L271.594 509.428 L271.594 490.979 M270.367 486.905 L276.247 486.905 L276.247 509.428 L281.177 509.428 L281.177 513.317 L276.247 513.317 L276.247 521.465 L271.594 521.465 L271.594 513.317 L255.992 513.317 L255.992 508.803 L270.367 486.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 489.984 Q295.298 489.984 293.469 493.549 Q291.664 497.09 291.664 504.22 Q291.664 511.326 293.469 514.891 Q295.298 518.433 298.909 518.433 Q302.543 518.433 304.349 514.891 Q306.177 511.326 306.177 504.22 Q306.177 497.09 304.349 493.549 Q302.543 489.984 298.909 489.984 M298.909 486.28 Q304.719 486.28 307.775 490.887 Q310.853 495.47 310.853 504.22 Q310.853 512.947 307.775 517.553 Q304.719 522.136 298.909 522.136 Q293.099 522.136 290.02 517.553 Q286.964 512.947 286.964 504.22 Q286.964 495.47 290.02 490.887 Q293.099 486.28 298.909 486.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M258.793 325.442 L277.15 325.442 L277.15 329.377 L263.076 329.377 L263.076 337.849 Q264.094 337.502 265.113 337.34 Q266.131 337.155 267.15 337.155 Q272.937 337.155 276.316 340.326 Q279.696 343.497 279.696 348.914 Q279.696 354.493 276.224 357.595 Q272.752 360.673 266.432 360.673 Q264.256 360.673 261.988 360.303 Q259.742 359.933 257.335 359.192 L257.335 354.493 Q259.418 355.627 261.641 356.183 Q263.863 356.738 266.34 356.738 Q270.344 356.738 272.682 354.632 Q275.02 352.525 275.02 348.914 Q275.02 345.303 272.682 343.197 Q270.344 341.09 266.34 341.09 Q264.465 341.09 262.59 341.507 Q260.738 341.923 258.793 342.803 L258.793 325.442 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 328.521 Q295.298 328.521 293.469 332.085 Q291.664 335.627 291.664 342.757 Q291.664 349.863 293.469 353.428 Q295.298 356.97 298.909 356.97 Q302.543 356.97 304.349 353.428 Q306.177 349.863 306.177 342.757 Q306.177 335.627 304.349 332.085 Q302.543 328.521 298.909 328.521 M298.909 324.817 Q304.719 324.817 307.775 329.423 Q310.853 334.007 310.853 342.757 Q310.853 351.484 307.775 356.09 Q304.719 360.673 298.909 360.673 Q293.099 360.673 290.02 356.09 Q286.964 351.484 286.964 342.757 Q286.964 334.007 290.02 329.423 Q293.099 324.817 298.909 324.817 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip392)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1031.07 400.199,1046.47 400.786,937.847 401.372,840.172 401.958,750.686 402.545,666.865 403.131,590.326 403.718,520.592 404.304,459 404.891,403.234 405.477,352.771 406.063,307.415 406.65,266.837 407.236,307.529 407.823,274.767 408.409,372.287 408.995,340.864 409.582,311.426 410.168,285.572 410.755,263.066 411.341,243.685 411.927,270.361 412.514,255.079 413.1,242.393 413.687,232.991 414.273,225.415 414.86,219.895 415.446,274.309 416.032,268.306 416.619,289.51 417.205,286.382 417.792,284.695 418.378,285.09 418.964,306.469 419.551,307.641 420.137,327.774 420.724,347.922 421.31,352.49 421.896,386.93 422.483,391.785 423.069,423.432 423.656,429.475 424.242,448.895 424.829,456.023 425.415,464.285 426.001,482.295 426.588,501.716 427.174,511.061 427.761,529.799 428.347,539.753 428.933,549.098 429.52,574.048 430.106,590.917 430.693,606.431 431.279,629.965 431.865,670.041 432.452,683.89 433.038,702.77 433.625,721.671 434.211,749.963 434.798,761.261 435.384,772.415 435.97,783.637 436.557,803.034 437.143,813.699 437.73,828.263 438.316,845.787 438.902,862.719 439.489,867.455 440.075,872.602 440.662,891.658 441.248,899.818 441.835,917.661 442.421,931.963 443.007,939.247 443.594,949.113 444.18,955.524 444.767,959 445.353,963.132 445.939,969.566 446.526,981.691 447.112,990.537 447.699,1004.71 448.285,1013.23 448.871,1016.6 449.458,1025.03 450.044,1030.42 450.631,1032.94 451.217,1036.15 451.804,1039.44 452.39,1047.41 452.976,1056.98 453.563,1066.91 454.149,1069.74 454.736,1076.59 455.322,1079.22 455.908,1092.19 456.495,1098.39 457.081,1099.71 457.668,1101.66 458.254,1107.75 458.84,1113.59 459.427,1121.14 460.013,1124.43 460.6,1127.87 461.186,1127.43 461.773,1129.42 462.359,1133.04 462.945,1136.64 463.532,1143.93 464.118,1147.46 464.705,1152.34 465.291,1148.41 465.877,1155.5 466.464,1156.89 467.05,1161.7 467.637,1166.26 468.223,1170.98 468.809,1171.9 469.396,1174.62 469.982,1177.4 470.569,1179.82 471.155,1180.7 471.742,1186.29 472.328,1187.1 472.914,1190.97 473.501,1193.11 474.087,1195.46 474.674,1195.68 475.26,1196.4 475.846,1201.83 476.433,1203.39 477.019,1202.53 477.606,1202.77 478.192,1206.2 478.778,1208.08 479.365,1211 479.951,1207.78 480.538,1212.64 481.124,1215.75 481.711,1220.4 482.297,1220.4 482.883,1220.13 483.47,1221.57 484.056,1224.28 484.643,1228.39 485.229,1227.92 485.815,1230.43 486.402,1231.53 486.988,1231.17 487.575,1235.13 488.161,1238.49 488.748,1236.47 489.334,1240.26 489.92,1239.36 490.507,1240.38 491.093,1242.28 491.68,1243.13 492.266,1240.87 492.852,1238.73 493.439,1239.53 494.025,1240.51 494.612,1241.25 495.198,1240.24 495.784,1238.18 496.371,1237.81 496.957,1238.76 497.544,1238.08 498.13,1237.63 498.717,1235.81 499.303,1232.64 499.889,1232.53 500.476,1232.73 501.062,1232.77 501.649,1235.22 502.235,1238 502.821,1239.16 503.408,1240.18 503.994,1243.78 504.581,1245.76 505.167,1249.67 505.753,1249.12 506.34,1248.53 506.926,1249.1 507.513,1249.84 508.099,1248.94 508.686,1248.23 509.272,1250.07 509.858,1249.43 510.445,1248.83 511.031,1249.53 511.618,1250.11 512.204,1249.26 512.79,1247.02 513.377,1249.03 513.963,1249.85 514.55,1249.05 515.136,1249.68 515.722,1250.53 516.309,1249.86 516.895,1246.29 517.482,1245.75 518.068,1243.71 518.655,1245.83 519.241,1246.39 519.827,1245.74 520.414,1245.16 521,1243.02 521.587,1242.69 522.173,1239.62 522.759,1238.12 523.346,1236.68 523.932,1237.98 524.519,1240.58 525.105,1242.98 525.691,1242.64 526.278,1242.15 526.864,1244.34 527.451,1245.11 528.037,1247.15 528.624,1246.87 529.21,1245 529.796,1244.78 530.383,1244.46 530.969,1240.1 531.556,1243.98 532.142,1243.48 532.728,1245.84 533.315,1249.01 533.901,1248.2 534.488,1247.43 535.074,1246.47 535.661,1245.76 536.247,1247.67 536.833,1245.58 537.42,1243.33 538.006,1244.44 538.593,1245.38 539.179,1244.95 539.765,1241.45 540.352,1240.95 540.938,1238.01 541.525,1236.38 542.111,1236.27 542.697,1237.7 543.284,1240.32 543.87,1241.25 544.457,1237.99 545.043,1236.09 545.63,1234.53 546.216,1239.93 546.802,1238.32 547.389,1238.43 547.975,1240.7 548.562,1237.56 549.148,1241.37 549.734,1242.32 550.321,1243.27 550.907,1242.59 551.494,1242.35 552.08,1241.54 552.666,1239.57 553.253,1236.63 553.839,1236.75 554.426,1239.16 555.012,1241.78 555.599,1240.09 556.185,1239.44 556.771,1238.95 557.358,1237.3 557.944,1237.26 558.531,1235.58 559.117,1237.95 559.703,1237.68 560.29,1237.1 560.876,1235.35 561.463,1233.83 562.049,1235.17 562.635,1233.51 563.222,1233.33 563.808,1235.82 564.395,1238.37 564.981,1235.52 565.568,1232.64 566.154,1231.31 566.74,1232.65 567.327,1235.01 567.913,1234.66 568.5,1237.13 569.086,1235.65 569.672,1234.18 570.259,1231.39 570.845,1229.86 571.432,1230.06 572.018,1232.99 572.605,1232.73 573.191,1234.01 573.777,1232.14 574.364,1230.47 574.95,1230.6 575.537,1230.4 576.123,1231.68 576.709,1231.58 577.296,1230.09 577.882,1229.87 578.469,1229.8 579.055,1229.84 579.641,1231.36 580.228,1231.41 580.814,1232.7 581.401,1231.08 581.987,1228.5 582.574,1225.99 583.16,1227.4 583.746,1228.76 584.333,1230.08 584.919,1229.96 585.506,1231.25 586.092,1231.14 586.678,1232.38 587.265,1235.15 587.851,1236.1 588.438,1236.9 589.024,1235.35 589.61,1235.07 590.197,1236.47 590.783,1236.1 591.37,1235.75 591.956,1235.4 592.543,1235.85 593.129,1231.38 593.715,1229.74 594.302,1229.46 594.888,1229.35 595.475,1230.58 596.061,1227.76 596.647,1228.96 597.234,1227.38 597.82,1227.52 598.407,1229.01 598.993,1227.45 599.579,1227.69 600.166,1229.06 600.752,1231.43 601.339,1231.67 601.925,1231.12 602.512,1231.29 603.098,1233.68 603.684,1233.36 604.271,1232.75 604.857,1232.47 605.444,1233.62 606.03,1233.11 606.616,1231.53 607.203,1233.75 607.789,1234.73 608.376,1235.43 608.962,1235.06 609.548,1236.1 610.135,1233.05 610.721,1231.16 611.308,1231.01 611.894,1230.56 612.481,1230.45 613.067,1232.97 613.653,1233.93 614.24,1232.1 614.826,1231.76 615.413,1231.52 615.999,1233.69 616.585,1233.51 617.172,1230.52 617.758,1227.67 618.345,1227.1 618.931,1228.18 619.518,1227.89 620.104,1226.35 620.69,1230.09 621.277,1229.89 621.863,1228.46 622.45,1230.79 623.036,1227.85 623.622,1228.82 624.209,1231.01 624.795,1230.64 625.382,1230.78 625.968,1230.53 626.554,1230.11 627.141,1232.12 627.727,1233.12 628.314,1234.34 628.9,1233.49 629.487,1231.71 630.073,1231.42 630.659,1232.45 631.246,1230.81 631.832,1230.57 632.419,1229.09 633.005,1230.26 633.591,1229.64 634.178,1231.94 634.764,1231.33 635.351,1233.92 635.937,1234.65 636.523,1231.42 637.11,1230.87 637.696,1230.38 638.283,1229.9 638.869,1227.98 639.456,1226.4 640.042,1226.29 640.628,1224.46 641.215,1224.11 641.801,1224.16 642.388,1223.07 642.974,1223.28 643.56,1223.48 644.147,1226.15 644.733,1228.82 645.32,1229.98 645.906,1229.53 646.492,1227.72 647.079,1227.42 647.665,1228.32 648.252,1226.61 648.838,1226.57 649.425,1226.35 650.011,1224.68 650.597,1226.04 651.184,1231.17 651.77,1233.47 652.357,1236.76 652.943,1237.36 653.529,1239.23 654.116,1238.43 654.702,1236.46 655.289,1235.78 655.875,1236.09 656.462,1236.71 657.048,1237.23 657.634,1232.49 658.221,1230.55 658.807,1228.71 659.394,1228.38 659.98,1227.74 660.566,1228.71 661.153,1228.02 661.739,1227.7 662.326,1228.82 662.912,1227.39 663.498,1224.34 664.085,1228.3 664.671,1228 665.258,1227.72 665.844,1225.84 666.431,1224.34 667.017,1224.27 667.603,1224.03 668.19,1222.53 668.776,1225.31 669.363,1225.01 669.949,1224.87 670.535,1220.77 671.122,1222.35 671.708,1222.18 672.295,1223.83 672.881,1218.29 673.467,1222.09 674.054,1222.14 674.64,1219.51 675.227,1219.67 675.813,1219.81 676.4,1220.01 676.986,1221.28 677.572,1219.87 678.159,1217.49 678.745,1217.74 679.332,1217.7 679.918,1220.61 680.504,1219.28 681.091,1216.79 681.677,1215.75 682.264,1217.55 682.85,1218.89 683.436,1218.94 684.023,1217.73 684.609,1216.48 685.196,1216.75 685.782,1218.45 686.369,1214.5 686.955,1215.21 687.541,1214.17 688.128,1214.6 688.714,1214.99 689.301,1216.66 689.887,1217.27 690.473,1219.98 691.06,1220.18 691.646,1220.42 692.233,1219.23 692.819,1217.85 693.405,1218.08 693.992,1218.06 694.578,1219.46 695.165,1220.99 695.751,1220.87 696.338,1219.74 696.924,1220.02 697.51,1220.05 698.097,1220.09 698.683,1218.58 699.27,1220 699.856,1220.31 700.442,1221.89 701.029,1222.08 701.615,1223.09 702.202,1224.41 702.788,1225.71 703.375,1222.86 703.961,1224.02 704.547,1222.42 705.134,1222.68 705.72,1222.51 706.307,1224.08 706.893,1223.77 707.479,1222.36 708.066,1224.67 708.652,1225.72 709.239,1225.16 709.825,1222.49 710.411,1220.88 710.998,1222.43 711.584,1226.32 712.171,1227.16 712.757,1226.87 713.344,1230.52 713.93,1228.56 714.516,1228.06 715.103,1227.48 715.689,1227.18 716.276,1226.73 716.862,1224.94 717.448,1229.97 718.035,1230.92 718.621,1229.19 719.208,1226.05 719.794,1220.14 720.38,1217.27 720.967,1218.67 721.553,1217.21 722.14,1215.88 722.726,1217.24 723.313,1216.03 723.899,1217.45 724.485,1216.41 725.072,1217.88 725.658,1216.57 726.245,1214.03 726.831,1215.51 727.417,1216.08 728.004,1213.6 728.59,1214.06 729.177,1214.36 729.763,1214.73 730.349,1213.61 730.936,1215.13 731.522,1215.08 732.109,1215.04 732.695,1210.14 733.282,1210.67 733.868,1210.92 734.454,1214.17 735.041,1215.79 735.627,1213.5 736.214,1217.6 736.8,1216.41 737.386,1213.83 737.973,1214.07 738.559,1211.64 739.146,1212.12 739.732,1213.77 740.318,1214.02 740.905,1215.91 741.491,1217.38 742.078,1217.51 742.664,1217.27 743.251,1217.24 743.837,1217.43 744.423,1217.3 745.01,1218.68 745.596,1220.16 746.183,1221.43 746.769,1221.24 747.355,1221.14 747.942,1223.56 748.528,1224.75 749.115,1224.32 749.701,1222.85 750.288,1225.34 750.874,1223.7 751.46,1223.38 752.047,1223.42 752.633,1223.03 753.22,1225.72 753.806,1225.56 754.392,1226.54 754.979,1228.8 755.565,1229.75 756.152,1229.21 756.738,1229.78 757.324,1226.64 757.911,1226.21 758.497,1224.65 759.084,1223.24 759.67,1221.44 760.257,1220.03 760.843,1222.71 761.429,1223.88 762.016,1224.94 762.602,1224.6 763.189,1225.17 763.775,1225 764.361,1223.29 764.948,1221.94 765.534,1223.01 766.121,1225.41 766.707,1218.39 767.293,1218.14 767.88,1218.29 768.466,1216.87 769.053,1215.73 769.639,1215.8 770.226,1214.42 770.812,1214.6 771.398,1214.55 771.985,1218.6 772.571,1218.51 773.158,1215.76 773.744,1217.27 774.33,1217.24 774.917,1218.41 775.503,1218.43 776.09,1220.92 776.676,1223.43 777.262,1223.06 777.849,1223.99 778.435,1221.13 779.022,1219.74 779.608,1223.36 780.195,1225.62 780.781,1226.29 781.367,1229.54 781.954,1229.08 782.54,1224.75 783.127,1225.75 783.713,1225.45 784.299,1226.35 784.886,1224.64 785.472,1225.37 786.059,1224.86 786.645,1223.09 787.232,1224.2 787.818,1225.14 788.404,1225.75 788.991,1223.95 789.577,1222.43 790.164,1222.3 790.75,1220.99 791.336,1220.66 791.923,1224.8 792.509,1224.44 793.096,1220.01 793.682,1219.59 794.268,1219.26 794.855,1219.31 795.441,1219.17 796.028,1224.09 796.614,1222.41 797.201,1222.1 797.787,1219.18 798.373,1222.9 798.96,1224.09 799.546,1222.44 800.133,1222.16 800.719,1220.75 801.305,1219.39 801.892,1219.39 802.478,1220.77 803.065,1220.66 803.651,1219.26 804.237,1215.31 804.824,1218.03 805.41,1216.74 805.997,1216.7 806.583,1216.82 807.17,1219.43 807.756,1223.44 808.342,1225.75 808.929,1222.65 809.515,1222.31 810.102,1221.98 810.688,1220.61 811.274,1220.48 811.861,1220.51 812.447,1222.94 813.034,1218.65 813.62,1218.78 814.206,1221.37 814.793,1219.8 815.379,1219.72 815.966,1220.78 816.552,1217.99 817.139,1216.55 817.725,1216.64 818.311,1218.07 818.898,1218.26 819.484,1219.93 820.071,1219.82 820.657,1218.23 821.243,1215.53 821.83,1214.54 822.416,1217.59 823.003,1216.17 823.589,1217.36 824.175,1214.75 824.762,1216.46 825.348,1212.6 825.935,1213.28 826.521,1213.4 827.108,1214.96 827.694,1215.1 828.28,1215.57 828.867,1215.65 829.453,1214.38 830.04,1213.06 830.626,1213.13 831.212,1210.76 831.799,1209.91 832.385,1209.28 832.972,1211.05 833.558,1210.38 834.145,1208.14 834.731,1208.55 835.317,1206.47 835.904,1205.32 836.49,1207.09 837.077,1206.34 837.663,1206.62 838.249,1206.79 838.836,1207.08 839.422,1207.77 840.009,1208.45 840.595,1209.06 841.181,1210.7 841.768,1210.94 842.354,1210.2 842.941,1207.97 843.527,1211.08 844.114,1211.34 844.7,1211.68 845.286,1211.89 845.873,1213.46 846.459,1210.79 847.046,1210.96 847.632,1211.28 848.218,1213.14 848.805,1213.38 849.391,1213.63 849.978,1212.48 850.564,1212.56 851.15,1214.12 851.737,1214.23 852.323,1214.52 852.91,1213.13 853.496,1210.58 854.083,1209.71 854.669,1210.19 855.255,1210.77 855.842,1209.83 856.428,1212.76 857.015,1214.54 857.601,1214.59 858.187,1216.09 858.774,1217.46 859.36,1217.57 859.947,1220.03 860.533,1221.14 861.119,1219.6 861.706,1220.63 862.292,1220.11 862.879,1219.86 863.465,1220.66 864.052,1218.98 864.638,1220.25 865.224,1218.8 865.811,1219.91 866.397,1221.28 866.984,1222.33 867.57,1220.92 868.156,1220.67 868.743,1219.34 869.329,1219.27 869.916,1219.29 870.502,1216.38 871.089,1217.48 871.675,1217.68 872.261,1216.22 872.848,1215.1 873.434,1215.54 874.021,1215.64 874.607,1212.98 875.193,1211.7 875.78,1210.43 876.366,1213.59 876.953,1215.12 877.539,1215.41 878.125,1214.02 878.712,1215.58 879.298,1219.7 879.885,1221.77 880.471,1224.36 881.058,1221.03 881.644,1221.97 882.23,1221.68 882.817,1218.5 883.403,1219.86 883.99,1218.25 884.576,1218.31 885.162,1216.96 885.749,1217.14 886.335,1217.12 886.922,1219.88 887.508,1221.3 888.094,1220.94 888.681,1223.49 889.267,1223.14 889.854,1220.16 890.44,1218.65 891.027,1219.57 891.613,1220.52 892.199,1220.27 892.786,1220.25 893.372,1220.13 893.959,1218.66 894.545,1217.35 895.131,1215.8 895.718,1215.95 896.304,1215.9 896.891,1217.29 897.477,1219.74 898.063,1221.08 898.65,1222.35 899.236,1222.02 899.823,1220.57 900.409,1220.21 900.996,1220.34 901.582,1221.6 902.168,1219.74 902.755,1220.64 903.341,1220.42 903.928,1220.26 904.514,1217.59 905.1,1221.07 905.687,1217.91 906.273,1217.86 906.86,1218.02 907.446,1219.31 908.032,1223.14 908.619,1222.99 909.205,1225.17 909.792,1224.43 910.378,1226.47 910.965,1225.86 911.551,1225.5 912.137,1223.54 912.724,1221.78 913.31,1221.04 913.897,1219.37 914.483,1215.41 915.069,1215.66 915.656,1214.21 916.242,1214.4 916.829,1215.7 917.415,1216.8 918.002,1216.59 918.588,1216.39 919.174,1214.99 919.761,1214.77 920.347,1212.24 920.934,1209.95 921.52,1209.06 922.106,1210.51 922.693,1212.1 923.279,1215.14 923.866,1216.4 924.452,1216.52 925.038,1213.98 925.625,1214.06 926.211,1211.69 926.798,1213.1 927.384,1213.18 927.971,1214.55 928.557,1214.62 929.143,1216.07 929.73,1213.63 930.316,1215.33 930.903,1213.83 931.489,1216.68 932.075,1215.5 932.662,1214.18 933.248,1218.24 933.835,1216.69 934.421,1215.14 935.007,1216.29 935.594,1214.67 936.18,1213.48 936.767,1214.93 937.353,1214.86 937.94,1217.63 938.526,1217.59 939.112,1220.01 939.699,1218.66 940.285,1218.39 940.872,1219.85 941.458,1218.25 942.044,1216.32 942.631,1216.18 943.217,1216.36 943.804,1215.04 944.39,1216.45 944.976,1215.19 945.563,1212.63 946.149,1213.93 946.736,1212.67 947.322,1214.08 947.909,1215.52 948.495,1213.14 949.081,1214.33 949.668,1214.63 950.254,1214.74 950.841,1214.82 951.427,1215.04 952.013,1213.66 952.6,1213.56 953.186,1213.72 953.773,1212.36 954.359,1212.65 954.945,1214.02 955.532,1216.75 956.118,1215.48 956.705,1215.6 957.291,1215.57 957.878,1218.27 958.464,1220.82 959.05,1221.8 959.637,1214.98 960.223,1213.81 960.81,1214.07 961.396,1215.76 961.982,1215.85 962.569,1221.17 963.155,1219.55 963.742,1220.95 964.328,1222.06 964.915,1221.63 965.501,1218.62 966.087,1218.22 966.674,1219.38 967.26,1220.31 967.847,1220.35 968.433,1223.03 969.019,1221.56 969.606,1219.76 970.192,1218.07 970.779,1217.93 971.365,1217.88 971.951,1216.49 972.538,1216.38 973.124,1216.22 973.711,1212.25 974.297,1213.9 974.884,1215.48 975.47,1215.78 976.056,1214.6 976.643,1216.28 977.229,1213.79 977.816,1211.56 978.402,1211.84 978.988,1212.28 979.575,1214.84 980.161,1214.99 980.748,1216.2 981.334,1218.77 981.92,1219 982.507,1217.55 983.093,1216.08 983.68,1215.72 984.266,1215.65 984.853,1214.15 985.439,1209.09 986.025,1210.36 986.612,1209.33 987.198,1210.8 987.785,1210.68 988.371,1210.86 988.957,1209.67 989.544,1209.84 990.13,1210.28 990.717,1212.08 991.303,1212.41 991.889,1212.34 992.476,1215.03 993.062,1217.59 993.649,1217.58 994.235,1217.38 994.822,1215.96 995.408,1217.11 995.994,1216.85 996.581,1217.94 997.167,1218.15 997.754,1219.55 998.34,1219.39 998.926,1217.92 999.513,1216.26 1000.1,1217.58 1000.69,1221.42 1001.27,1221.19 1001.86,1222.48 1002.44,1220.99 1003.03,1219.52 1003.62,1217.93 1004.2,1217.57 1004.79,1220.16 1005.38,1215.86 1005.96,1214.57 1006.55,1213.25 1007.14,1214.46 1007.72,1218.45 1008.31,1219.65 1008.9,1215.74 1009.48,1214.39 1010.07,1214.43 1010.65,1214.7 1011.24,1213.32 1011.83,1211.93 1012.41,1213.36 1013,1212.48 1013.59,1216.63 1014.17,1217.85 1014.76,1217.89 1015.35,1217.76 1015.93,1216.16 1016.52,1215.95 1017.11,1218.57 1017.69,1218.73 1018.28,1219.86 1018.86,1219.56 1019.45,1219.4 1020.04,1219.34 1020.62,1215.3 1021.21,1212.84 1021.8,1217.04 1022.38,1214.52 1022.97,1214.84 1023.56,1214.59 1024.14,1216.01 1024.73,1216.99 1025.32,1218.36 1025.9,1216.83 1026.49,1218.1 1027.07,1220.29 1027.66,1221.14 1028.25,1222.18 1028.83,1222 1029.42,1219.14 1030.01,1220.35 1030.59,1220.12 1031.18,1216.96 1031.77,1219.45 1032.35,1216.81 1032.94,1216.95 1033.52,1216.77 1034.11,1217.95 1034.7,1220.39 1035.28,1222.78 1035.87,1222.41 1036.46,1222.16 1037.04,1221.94 1037.63,1224.24 1038.22,1221.21 1038.8,1223.48 1039.39,1221.66 1039.98,1222.51 1040.56,1220.88 1041.15,1216.82 1041.73,1214.25 1042.32,1214.24 1042.91,1215.73 1043.49,1219.46 1044.08,1216.53 1044.67,1217.78 1045.25,1217.82 1045.84,1220.07 1046.43,1217.41 1047.01,1216.02 1047.6,1215.8 1048.19,1219.53 1048.77,1218.02 1049.36,1219.06 1049.94,1218.75 1050.53,1220.11 1051.12,1219.85 1051.7,1220.57 1052.29,1221.4 1052.88,1220.81 1053.46,1217.85 1054.05,1213.88 1054.64,1215.37 1055.22,1211.35 1055.81,1210.34 1056.39,1209.43 1056.98,1210.77 1057.57,1212.24 1058.15,1213.71 1058.74,1212.54 1059.33,1214.01 1059.91,1212.79 1060.5,1214.24 1061.09,1214.23 1061.67,1214.23 1062.26,1214.15 1062.85,1215.41 1063.43,1215.26 1064.02,1214.05 1064.6,1211.44 1065.19,1209.04 1065.78,1209.36 1066.36,1208.3 1066.95,1209.85 1067.54,1211.29 1068.12,1211.41 1068.71,1211.73 1069.3,1210.59 1069.88,1210.79 1070.47,1212.39 1071.06,1212.43 1071.64,1212.61 1072.23,1212.36 1072.81,1211.07 1073.4,1213.97 1073.99,1215.3 1074.57,1219.16 1075.16,1217.67 1075.75,1218.9 1076.33,1217.43 1076.92,1218.71 1077.51,1218.3 1078.09,1221.94 1078.68,1219.26 1079.26,1219.15 1079.85,1218.77 1080.44,1220.06 1081.02,1219.92 1081.61,1220.06 1082.2,1218.65 1082.78,1218.51 1083.37,1219.66 1083.96,1219.23 1084.54,1217.8 1085.13,1217.83 1085.72,1217.76 1086.3,1218.76 1086.89,1220.09 1087.47,1221.01 1088.06,1220.65 1088.65,1219.29 1089.23,1223.09 1089.82,1221.35 1090.41,1217.17 1090.99,1218.28 1091.58,1219.55 1092.17,1216.85 1092.75,1217.86 1093.34,1218.87 1093.93,1218.53 1094.51,1218.32 1095.1,1219.34 1095.68,1216.6 1096.27,1216.52 1096.86,1216.65 1097.44,1216.77 1098.03,1217.96 1098.62,1220.31 1099.2,1221.24 1099.79,1221 1100.38,1221.88 1100.96,1220.47 1101.55,1220.12 1102.14,1218.65 1102.72,1218.49 1103.31,1217.13 1103.89,1213.18 1104.48,1213.28 1105.07,1212.14 1105.65,1211.11 1106.24,1210.14 1106.83,1207.85 1107.41,1206.73 1108,1207.28 1108.59,1206.43 1109.17,1204.29 1109.76,1207.69 1110.34,1210.67 1110.93,1209.35 1111.52,1208.6 1112.1,1208.99 1112.69,1211.85 1113.28,1213.14 1113.86,1213.25 1114.45,1213.61 1115.04,1214.91 1115.62,1213.48 1116.21,1213.38 1116.8,1212.38 1117.38,1208.41 1117.97,1210.14 1118.55,1207.82 1119.14,1206.77 1119.73,1207.33 1120.31,1206.46 1120.9,1205.32 1121.49,1204.56 1122.07,1203.94 1122.66,1203.38 1123.25,1204.27 1123.83,1204.64 1124.42,1203.88 1125.01,1203.25 1125.59,1203.9 1126.18,1204.48 1126.76,1204.87 1127.35,1204.29 1127.94,1207.57 1128.52,1206.8 1129.11,1204.36 1129.7,1205.11 1130.28,1206.98 1130.87,1214.17 1131.46,1214.34 1132.04,1213.17 1132.63,1213.39 1133.21,1211.06 1133.8,1211.05 1134.39,1211.23 1134.97,1211.44 1135.56,1211.83 1136.15,1213.3 1136.73,1212.3 1137.32,1216.17 1137.91,1216.02 1138.49,1218.48 1139.08,1219.98 1139.67,1221.09 1140.25,1220.76 1140.84,1223.14 1141.42,1223.99 1142.01,1223.28 1142.6,1221.66 1143.18,1221.2 1143.77,1223.81 1144.36,1222.04 1144.94,1221.66 1145.53,1217.44 1146.12,1217.58 1146.7,1218.79 1147.29,1217.38 1147.88,1218.46 1148.46,1219.48 1149.05,1219.16 1149.63,1219.22 1150.22,1219.14 1150.81,1219.04 1151.39,1217.52 1151.98,1217.21 1152.57,1214.83 1153.15,1215.13 1153.74,1216.42 1154.33,1216.45 1154.91,1219.16 1155.5,1221.64 1156.09,1224 1156.67,1223.51 1157.26,1224.15 1157.84,1224.99 1158.43,1225.4 1159.02,1223.81 1159.6,1224.26 1160.19,1223.97 1160.78,1226.29 1161.36,1221.83 1161.95,1221.39 1162.54,1221.02 1163.12,1221.94 1163.71,1224.05 1164.29,1222.25 1164.88,1223.06 1165.47,1222.64 1166.05,1219.41 1166.64,1219.03 1167.23,1217.68 1167.81,1218.91 1168.4,1218.9 1168.99,1222.5 1169.57,1220.63 1170.16,1221.77 1170.75,1219.99 1171.33,1218.64 1171.92,1218.53 1172.5,1220.82 1173.09,1220.64 1173.68,1217.9 1174.26,1216.38 1174.85,1220.31 1175.44,1214.9 1176.02,1214.86 1176.61,1214.74 1177.2,1216.05 1177.78,1215.71 1178.37,1214.37 1178.96,1211.95 1179.54,1213.2 1180.13,1213.49 1180.71,1212.64 1181.3,1215.34 1181.89,1215.33 1182.47,1215.61 1183.06,1217.01 1183.65,1217.15 1184.23,1218.26 1184.82,1217.98 1185.41,1218.76 1185.99,1218.26 1186.58,1218.16 1187.16,1220.61 1187.75,1218.87 1188.34,1218.78 1188.92,1219.69 1189.51,1217.92 1190.1,1217.82 1190.68,1217.45 1191.27,1217.26 1191.86,1220.89 1192.44,1219.27 1193.03,1219.09 1193.62,1222.63 1194.2,1221.1 1194.79,1220.55 1195.37,1221.76 1195.96,1218.67 1196.55,1218.57 1197.13,1217.05 1197.72,1216.88 1198.31,1215.48 1198.89,1214.08 1199.48,1214.01 1200.07,1213.9 1200.65,1213.86 1201.24,1215.37 1201.83,1215.64 1202.41,1214.25 1203,1211.68 1203.58,1211.47 1204.17,1211.65 1204.76,1209.64 1205.34,1209.7 1205.93,1213.76 1206.52,1211.24 1207.1,1211.26 1207.69,1213.88 1208.28,1214.96 1208.86,1213.6 1209.45,1212.57 1210.03,1214.09 1210.62,1212.89 1211.21,1213.46 1211.79,1212.56 1212.38,1214.04 1212.97,1216.82 1213.55,1216.41 1214.14,1220.14 1214.73,1221.32 1215.31,1221 1215.9,1223.05 1216.49,1222.85 1217.07,1222.63 1217.66,1222.14 1218.24,1221.58 1218.83,1223.79 1219.42,1220.87 1220,1222.04 1220.59,1224.12 1221.18,1222.19 1221.76,1221.67 1222.35,1219.96 1222.94,1219.65 1223.52,1219.46 1224.11,1220.51 1224.7,1220.06 1225.28,1221.23 1225.87,1219.7 1226.45,1219.38 1227.04,1220.45 1227.63,1218.77 1228.21,1217.3 1228.8,1218.24 1229.39,1214.03 1229.97,1211.34 1230.56,1211.33 1231.15,1210.07 1231.73,1212.96 1232.32,1211.68 1232.91,1213.61 1233.49,1212.31 1234.08,1211.22 1234.66,1211.04 1235.25,1212.17 1235.84,1212.24 1236.42,1211.07 1237.01,1208.59 1237.6,1210.4 1238.18,1212.01 1238.77,1209.43 1239.36,1208.58 1239.94,1209.28 1240.53,1210.94 1241.11,1209.97 1241.7,1210.26 1242.29,1209.39 1242.87,1210.76 1243.46,1210.98 1244.05,1209.71 1244.63,1207.54 1245.22,1206.64 1245.81,1205.69 1246.39,1207.21 1246.98,1210.34 1247.57,1209.39 1248.15,1208.35 1248.74,1206.06 1249.32,1206.5 1249.91,1208.32 1250.5,1208.94 1251.08,1209.47 1251.67,1208.57 1252.26,1210.35 1252.84,1209.26 1253.43,1208.17 1254.02,1211.06 1254.6,1212.66 1255.19,1211.61 1255.78,1210.75 1256.36,1211.02 1256.95,1209.79 1257.53,1209.91 1258.12,1207.72 1258.71,1209.65 1259.29,1210.05 1259.88,1210.54 1260.47,1210.96 1261.05,1212.4 1261.64,1212.5 1262.23,1215.43 1262.81,1216.81 1263.4,1218.04 1263.98,1219.28 1264.57,1217.95 1265.16,1216.92 1265.74,1218.25 1266.33,1219.2 1266.92,1218.96 1267.5,1219.95 1268.09,1219.8 1268.68,1221.26 1269.26,1221.03 1269.85,1222.21 1270.44,1220.72 1271.02,1217.92 1271.61,1216.44 1272.19,1219.25 1272.78,1220.56 1273.37,1221.42 1273.95,1222.18 1274.54,1223.11 1275.13,1220.15 1275.71,1218.78 1276.3,1214.85 1276.89,1214.73 1277.47,1217.35 1278.06,1220.06 1278.65,1218.57 1279.23,1215.71 1279.82,1215.7 1280.4,1213.07 1280.99,1210.35 1281.58,1213.04 1282.16,1213.92 1282.75,1215.36 1283.34,1214.08 1283.92,1211.76 1284.51,1211.98 1285.1,1211.07 1285.68,1210.16 1286.27,1207.81 1286.86,1209.52 1287.44,1208.6 1288.03,1208.93 1288.61,1211.99 1289.2,1210.8 1289.79,1211.29 1290.37,1211.9 1290.96,1212.2 1291.55,1214.04 1292.13,1212.87 1292.72,1211.76 1293.31,1212.05 1293.89,1212.35 1294.48,1210.94 1295.06,1212.17 1295.65,1212.32 1296.24,1216.29 1296.82,1216.22 1297.41,1217.66 1298,1219.02 1298.58,1221.37 1299.17,1221 1299.76,1221 1300.34,1220.57 1300.93,1216.33 1301.52,1217.53 1302.1,1222.63 1302.69,1223.67 1303.27,1223.39 1303.86,1219.33 1304.45,1216.42 1305.03,1216.27 1305.62,1213.32 1306.21,1215.7 1306.79,1214.5 1307.38,1214.6 1307.97,1218.65 1308.55,1215.86 1309.14,1215.61 1309.73,1215.35 1310.31,1215.07 1310.9,1215.12 1311.48,1214.96 1312.07,1213.61 1312.66,1211.2 1313.24,1210.33 1313.83,1206.34 1314.42,1205.32 1315,1204.45 1315.59,1204.92 1316.18,1207.93 1316.76,1206.87 1317.35,1208.75 1317.93,1209.17 1318.52,1209.52 1319.11,1208.52 1319.69,1208.93 1320.28,1209.34 1320.87,1209.46 1321.45,1211.18 1322.04,1211.41 1322.63,1212.82 1323.21,1212.96 1323.8,1212.96 1324.39,1213.12 1324.97,1213.06 1325.56,1214.26 1326.14,1215.67 1326.73,1218.45 1327.32,1218.47 1327.9,1219.69 1328.49,1218.22 1329.08,1217.98 1329.66,1216.34 1330.25,1217.57 1330.84,1217.42 1331.42,1216.3 1332.01,1213.66 1332.6,1212.44 1333.18,1211.17 1333.77,1211.33 1334.35,1211.56 1334.94,1211.75 1335.53,1211.89 1336.11,1216.06 1336.7,1211.98 1337.29,1212.18 1337.87,1212.11 1338.46,1216.07 1339.05,1214.35 1339.63,1214.49 1340.22,1214.41 1340.8,1213.58 1341.39,1214.65 1341.98,1212.98 1342.56,1215.83 1343.15,1214.24 1343.74,1217.07 1344.32,1215.61 1344.91,1214.16 1345.5,1214.09 1346.08,1214 1346.67,1218.04 1347.26,1216.7 1347.84,1215.48 1348.43,1215.38 1349.01,1213.99 1349.6,1212.64 1350.19,1212.44 1350.77,1212.99 1351.36,1212.95 1351.95,1211.97 1352.53,1212.27 1353.12,1213.99 1353.71,1211.49 1354.29,1214.16 1354.88,1215.4 1355.47,1220.63 1356.05,1220.27 1356.64,1221.12 1357.22,1222 1357.81,1220.4 1358.4,1216.2 1358.98,1216.5 1359.57,1215.1 1360.16,1215.06 1360.74,1212.41 1361.33,1211.21 1361.92,1213.78 1362.5,1216.68 1363.09,1217.78 1363.68,1216.36 1364.26,1212.31 1364.85,1213.48 1365.43,1212.19 1366.02,1212.33 1366.61,1212.64 1367.19,1211.48 1367.78,1211.36 1368.37,1207.77 1368.95,1208.15 1369.54,1208.7 1370.13,1212.78 1370.71,1211.54 1371.3,1213.03 1371.88,1213.24 1372.47,1212.06 1373.06,1210.97 1373.64,1208.51 1374.23,1210.25 1374.82,1206.45 1375.4,1205.67 1375.99,1205.86 1376.58,1206.41 1377.16,1207.26 1377.75,1207.53 1378.34,1206.72 1378.92,1204.82 1379.51,1202.49 1380.09,1205.91 1380.68,1208.92 1381.27,1209.42 1381.85,1209.56 1382.44,1212.33 1383.03,1214.74 1383.61,1213.6 1384.2,1214.92 1384.79,1216.17 1385.37,1216.09 1385.96,1214.74 1386.55,1212.18 1387.13,1215.02 1387.72,1216.27 1388.3,1220.32 1388.89,1221.65 1389.48,1220.19 1390.06,1221.39 1390.65,1222.3 1391.24,1221.9 1391.82,1221.31 1392.41,1218.34 1393,1217.95 1393.58,1218.1 1394.17,1218.06 1394.75,1216.65 1395.34,1219.41 1395.93,1218.91 1396.51,1218.8 1397.1,1221.11 1397.69,1221.95 1398.27,1221.41 1398.86,1221.18 1399.45,1223.86 1400.03,1221.69 1400.62,1224.03 1401.21,1224.86 1401.79,1223.26 1402.38,1221.77 1402.96,1218.94 1403.55,1218.37 1404.14,1218.34 1404.72,1218.16 1405.31,1216.35 1405.9,1216.25 1406.48,1217.39 1407.07,1216.26 1407.66,1217.79 1408.24,1216.3 1408.83,1216.3 1409.42,1214.86 1410,1214.68 1410.59,1217.19 1411.17,1212.97 1411.76,1214.25 1412.35,1216.97 1412.93,1215.58 1413.52,1215.37 1414.11,1216.87 1414.69,1219.27 1415.28,1221.8 1415.87,1222.82 1416.45,1222.37 1417.04,1224.7 1417.63,1225.49 1418.21,1226.3 1418.8,1223.38 1419.38,1225.55 1419.97,1223.42 1420.56,1222.84 1421.14,1218.47 1421.73,1219.68 1422.32,1220.52 1422.9,1221.4 1423.49,1219.49 1424.08,1219.58 1424.66,1216.61 1425.25,1220.49 1425.83,1221.29 1426.42,1219.72 1427.01,1219.52 1427.59,1219.56 1428.18,1217.95 1428.77,1215.25 1429.35,1215.09 1429.94,1211.1 1430.53,1212.51 1431.11,1215.16 1431.7,1214.97 1432.29,1213.39 1432.87,1212.24 1433.46,1212.42 1434.04,1212.41 1434.63,1213.59 1435.22,1215.1 1435.8,1213.51 1436.39,1212.24 1436.98,1212.47 1437.56,1214 1438.15,1211.21 1438.74,1210.07 1439.32,1211.37 1439.91,1212.92 1440.5,1212.63 1441.08,1212.94 1441.67,1218.25 1442.25,1219.24 1442.84,1217.55 1443.43,1216.12 1444.01,1215.93 1444.6,1217.12 1445.19,1215.98 1445.77,1214.65 1446.36,1215.9 1446.95,1216.06 1447.53,1218.48 1448.12,1218.39 1448.7,1220.92 1449.29,1220.64 1449.88,1220.29 1450.46,1223.94 1451.05,1224.95 1451.64,1223.17 1452.22,1221.36 1452.81,1219.51 1453.4,1220.62 1453.98,1219.21 1454.57,1219.07 1455.16,1217.67 1455.74,1217.36 1456.33,1216.27 1456.91,1210.79 1457.5,1210.9 1458.09,1211.16 1458.67,1212.61 1459.26,1211.41 1459.85,1213.95 1460.43,1218 1461.02,1217.74 1461.61,1217.7 1462.19,1219.03 1462.78,1220.1 1463.37,1219.64 1463.95,1215.44 1464.54,1214.04 1465.12,1212.7 1465.71,1212.94 1466.3,1212.97 1466.88,1216.81 1467.47,1216.78 1468.06,1214.18 1468.64,1212.98 1469.23,1212.89 1469.82,1211.76 1470.4,1215.96 1470.99,1215.82 1471.57,1215.83 1472.16,1216.99 1472.75,1218.11 1473.33,1215.22 1473.92,1216.48 1474.51,1216.53 1475.09,1216.43 1475.68,1219.05 1476.27,1215.23 1476.85,1215.46 1477.44,1212.9 1478.03,1213.14 1478.61,1210.62 1479.2,1210.79 1479.78,1208.51 1480.37,1208.97 1480.96,1209.07 1481.54,1210.73 1482.13,1208.31 1482.72,1208.69 1483.3,1207.68 1483.89,1210.85 1484.48,1209.93 1485.06,1211.71 1485.65,1212.97 1486.24,1215.84 1486.82,1215.88 1487.41,1214.52 1487.99,1214.66 1488.58,1213.5 1489.17,1212.08 1489.75,1213.67 1490.34,1212.43 1490.93,1213.65 1491.51,1212.43 1492.1,1216.53 1492.69,1220.23 1493.27,1218.53 1493.86,1220.95 1494.45,1217.69 1495.03,1215.15 1495.62,1215.03 1496.2,1214.75 1496.79,1212.09 1497.38,1213.34 1497.96,1213.25 1498.55,1210.74 1499.14,1209.86 1499.72,1207.97 1500.31,1209.65 1500.9,1208.44 1501.48,1210.24 1502.07,1210.48 1502.65,1212.26 1503.24,1215.07 1503.83,1213.65 1504.41,1213.58 1505,1213.48 1505.59,1213.65 1506.17,1213.69 1506.76,1212.65 1507.35,1211.59 1507.93,1212.69 1508.52,1215.33 1509.11,1217.71 1509.69,1217.59 1510.28,1217.57 1510.86,1218.8 1511.45,1217.54 1512.04,1216.1 1512.62,1212.5 1513.21,1215.18 1513.8,1215.27 1514.38,1215.21 1514.97,1216.75 1515.56,1215.08 1516.14,1216.41 1516.73,1216.44 1517.32,1217.83 1517.9,1216.49 1518.49,1217.63 1519.07,1216.17 1519.66,1214.84 1520.25,1213.39 1520.83,1213.47 1521.42,1213.66 1522.01,1210.97 1522.59,1209.84 1523.18,1210.02 1523.77,1210.13 1524.35,1211.47 1524.94,1210.53 1525.52,1208.04 1526.11,1208.16 1526.7,1208.63 1527.28,1208.98 1527.87,1207.82 1528.46,1207.93 1529.04,1206.79 1529.63,1208.47 1530.22,1210.04 1530.8,1208.83 1531.39,1209.19 1531.98,1208.4 1532.56,1213.91 1533.15,1215.22 1533.73,1211.07 1534.32,1214.22 1534.91,1214.3 1535.49,1218.45 1536.08,1222.29 1536.67,1225.81 1537.25,1226.62 1537.84,1224.86 1538.43,1223.13 1539.01,1221.54 1539.6,1219.81 1540.19,1218.18 1540.77,1216.74 1541.36,1219.32 1541.94,1219.15 1542.53,1218.69 1543.12,1215.84 1543.7,1218.13 1544.29,1218.02 1544.88,1219.34 1545.46,1217.84 1546.05,1217.61 1546.64,1214.73 1547.22,1214.75 1547.81,1212.31 1548.4,1215.04 1548.98,1220.25 1549.57,1219.86 1550.15,1220.8 1550.74,1217.88 1551.33,1221.36 1551.91,1222.25 1552.5,1221.57 1553.09,1224.02 1553.67,1222.45 1554.26,1219.54 1554.85,1218.98 1555.43,1216.16 1556.02,1212.49 1556.6,1213.87 1557.19,1211.5 1557.78,1214.35 1558.36,1214.52 1558.95,1214.42 1559.54,1214.21 1560.12,1213.96 1560.71,1215.34 1561.3,1214.09 1561.88,1214.2 1562.47,1214.4 1563.06,1209.13 1563.64,1208.09 1564.23,1205.61 1564.81,1206.16 1565.4,1206.58 1565.99,1207.21 1566.57,1209.07 1567.16,1206.77 1567.75,1207.32 1568.33,1209.2 1568.92,1206.84 1569.51,1205.91 1570.09,1207.54 1570.68,1205.36 1571.27,1205.83 1571.85,1206.45 1572.44,1207 1573.02,1208.71 1573.61,1208.83 1574.2,1211.83 1574.78,1214.09 1575.37,1215.49 1575.96,1215.39 1576.54,1215.47 1577.13,1215.22 1577.72,1215.08 1578.3,1214.92 1578.89,1213.5 1579.47,1212.25 1580.06,1211.11 1580.65,1209.93 1581.23,1210.2 1581.82,1211.66 1582.41,1210.64 1582.99,1209.34 1583.58,1209.71 1584.17,1212.1 1584.75,1213.43 1585.34,1216.16 1585.93,1216.1 1586.51,1215.95 1587.1,1214.33 1587.68,1215.87 1588.27,1218.43 1588.86,1218.44 1589.44,1219.71 1590.03,1218.15 1590.62,1216.67 1591.2,1215.24 1591.79,1215.28 1592.38,1214.16 1592.96,1212.72 1593.55,1208.86 1594.14,1209.35 1594.72,1208.43 1595.31,1210.18 1595.89,1211.9 1596.48,1210.83 1597.07,1211.41 1597.65,1210.04 1598.24,1211.71 1598.83,1211.86 1599.41,1212.2 1600,1216.33 1600.59,1214.99 1601.17,1213.86 1601.76,1212.43 1602.34,1211.3 1602.93,1211.32 1603.52,1211.6 1604.1,1211.6 1604.69,1209.14 1605.28,1209.66 1605.86,1212.52 1606.45,1213.93 1607.04,1212.79 1607.62,1210.49 1608.21,1212.16 1608.8,1213.65 1609.38,1213.61 1609.97,1213.61 1610.55,1211.29 1611.14,1211.55 1611.73,1209.05 1612.31,1210.31 1612.9,1207.84 1613.49,1205.4 1614.07,1206.05 1614.66,1204.99 1615.25,1206.6 1615.83,1205.68 1616.42,1206.06 1617.01,1206.41 1617.59,1208.22 1618.18,1209.78 1618.76,1210.2 1619.35,1209.3 1619.94,1213.76 1620.52,1216.44 1621.11,1214.9 1621.7,1212.24 1622.28,1215.26 1622.87,1217.86 1623.46,1215.07 1624.04,1218.07 1624.63,1217.9 1625.22,1217.81 1625.8,1217.71 1626.39,1217.66 1626.97,1217.38 1627.56,1217.16 1628.15,1217.24 1628.73,1218.22 1629.32,1216.79 1629.91,1218.11 1630.49,1215.38 1631.08,1214.03 1631.67,1213.99 1632.25,1214.26 1632.84,1215.79 1633.42,1216.88 1634.01,1216.49 1634.6,1215.25 1635.18,1219.21 1635.77,1220.11 1636.36,1222.41 1636.94,1223.41 1637.53,1221.84 1638.12,1221.36 1638.7,1223.81 1639.29,1224.77 1639.88,1224.43 1640.46,1225.12 1641.05,1224.76 1641.63,1224.21 1642.22,1222.46 1642.81,1220.65 1643.39,1221.32 1643.98,1218.18 1644.57,1216.51 1645.15,1214.94 1645.74,1213.59 1646.33,1214.55 1646.91,1220.04 1647.5,1217.2 1648.09,1218.33 1648.67,1218.09 1649.26,1219.54 1649.84,1219.18 1650.43,1218.93 1651.02,1217.5 1651.6,1218.49 1652.19,1218.47 1652.78,1218.39 1653.36,1220.71 1653.95,1220.46 1654.54,1222.83 1655.12,1222.14 1655.71,1222.93 1656.29,1222.83 1656.88,1221.12 1657.47,1220.79 1658.05,1221.94 1658.64,1220.03 1659.23,1221.14 1659.81,1222.08 1660.4,1221.76 1660.99,1219.84 1661.57,1222.24 1662.16,1220.52 1662.75,1218.93 1663.33,1216.08 1663.92,1214.59 1664.5,1211.9 1665.09,1210.9 1665.68,1212.42 1666.26,1215.34 1666.85,1214.09 1667.44,1215.78 1668.02,1218.2 1668.61,1218.01 1669.2,1219.09 1669.78,1221.44 1670.37,1218.27 1670.96,1218.95 1671.54,1215.83 1672.13,1217.25 1672.71,1216.94 1673.3,1215.45 1673.89,1214.38 1674.47,1215.45 1675.06,1213.76 1675.65,1214.18 1676.23,1214.09 1676.82,1213.92 1677.41,1215.14 1677.99,1214.72 1678.58,1214.49 1679.17,1217.17 1679.75,1217.22 1680.34,1221.24 1680.92,1220.84 1681.51,1221.89 1682.1,1218.9 1682.68,1218.52 1683.27,1214.16 1683.86,1212.87 1684.44,1214.59 1685.03,1213.31 1685.62,1210.77 1686.2,1211 1686.79,1210 1687.37,1206.1 1687.96,1204.16 1688.55,1204.74 1689.13,1206.83 1689.72,1207.51 1690.31,1211.95 1690.89,1212.05 1691.48,1212.17 1692.07,1209.68 1692.65,1210.02 1693.24,1208.98 1693.83,1207.91 1694.41,1205.58 1695,1206.32 1695.58,1208.38 1696.17,1210.03 1696.76,1210.11 1697.34,1208.91 1697.93,1209.19 1698.52,1212.04 1699.1,1213.18 1699.69,1214.55 1700.28,1215.56 1700.86,1215.6 1701.45,1217.15 1702.04,1218.37 1702.62,1218.01 1703.21,1215.64 1703.79,1215.34 1704.38,1215.45 1704.97,1216.71 1705.55,1216.45 1706.14,1216.39 1706.73,1217.61 1707.31,1216.4 1707.9,1215.06 1708.49,1213.89 1709.07,1216.58 1709.66,1216.28 1710.24,1213.69 1710.83,1213.94 1711.42,1215.07 1712,1216.34 1712.59,1217.38 1713.18,1217.01 1713.76,1214.18 1714.35,1214.57 1714.94,1215.78 1715.52,1215.54 1716.11,1213.03 1716.7,1213.12 1717.28,1213.42 1717.87,1213.54 1718.45,1217.62 1719.04,1214.82 1719.63,1212.04 1720.21,1212.44 1720.8,1212.4 1721.39,1209.98 1721.97,1211.44 1722.56,1213.18 1723.15,1212.14 1723.73,1215.11 1724.32,1217.69 1724.91,1219.04 1725.49,1220.1 1726.08,1221.61 1726.66,1222.63 1727.25,1225.05 1727.84,1221.95 1728.42,1222.94 1729.01,1224.01 1729.6,1223.41 1730.18,1223.1 1730.77,1221.43 1731.36,1218.23 1731.94,1218.3 1732.53,1219.28 1733.11,1221.79 1733.7,1224.03 1734.29,1222.19 1734.87,1220.5 1735.46,1220.41 1736.05,1220.15 1736.63,1219.96 1737.22,1218.45 1737.81,1211.62 1738.39,1211.91 1738.98,1213.64 1739.57,1216.42 1740.15,1214.82 1740.74,1213.48 1741.32,1214.93 1741.91,1213.57 1742.5,1216.19 1743.08,1216.32 1743.67,1216.2 1744.26,1214.96 1744.84,1216.04 1745.43,1213.45 1746.02,1211.94 1746.6,1218.56 1747.19,1216.84 1747.78,1216.91 1748.36,1218.47 1748.95,1218.27 1749.53,1216.73 1750.12,1213.98 1750.71,1216.85 1751.29,1216.8 1751.88,1218.32 1752.47,1219.53 1753.05,1219.39 1753.64,1216.53 1754.23,1212.58 1754.81,1209.75 1755.4,1210.07 1755.99,1208.93 1756.57,1210.43 1757.16,1213.3 1757.74,1210.52 1758.33,1210.67 1758.92,1208.14 1759.5,1208.55 1760.09,1210.2 1760.68,1209 1761.26,1206.8 1761.85,1208.46 1762.44,1212.8 1763.02,1213.02 1763.61,1213.33 1764.19,1213.58 1764.78,1216.38 1765.37,1215.06 1765.95,1215.19 1766.54,1214.91 1767.13,1217.79 1767.71,1218.93 1768.3,1216.24 1768.89,1216.28 1769.47,1217.71 1770.06,1217.5 1770.65,1215.01 1771.23,1213.69 1771.82,1216.29 1772.4,1217.23 1772.99,1219.83 1773.58,1218.01 1774.16,1216.56 1774.75,1216.74 1775.34,1212.94 1775.92,1213.14 1776.51,1214.6 1777.1,1215.93 1777.68,1215.83 1778.27,1211.8 1778.86,1209.28 1779.44,1212.24 1780.03,1213.55 1780.61,1217.39 1781.2,1213.59 1781.79,1214.88 1782.37,1216.34 1782.96,1213.7 1783.55,1213.65 1784.13,1212.73 1784.72,1211.5 1785.31,1211.83 1785.89,1210.62 1786.48,1212.16 1787.06,1212.26 1787.65,1209.88 1788.24,1211.49 1788.82,1211.68 1789.41,1209.26 1790,1208.11 1790.58,1206.01 1791.17,1206.65 1791.76,1208.4 1792.34,1208.88 1792.93,1206.49 1793.52,1207.1 1794.1,1207.36 1794.69,1207.85 1795.27,1205.61 1795.86,1206.14 1796.45,1206.63 1797.03,1207.13 1797.62,1207.31 1798.21,1209.2 1798.79,1210.8 1799.38,1211.08 1799.97,1212.38 1800.55,1211.13 1801.14,1210.13 1801.73,1214.43 1802.31,1214.66 1802.9,1212.04 1803.48,1214.76 1804.07,1213.37 1804.66,1213.88 1805.24,1213.92 1805.83,1210.97 1806.42,1213.81 1807,1214.8 1807.59,1216.09 1808.18,1217.47 1808.76,1217.35 1809.35,1215.97 1809.94,1216.2 1810.52,1216.19 1811.11,1218.79 1811.69,1218.87 1812.28,1222.65 1812.87,1222.25 1813.45,1222.95 1814.04,1222.77 1814.63,1220.01 1815.21,1219.64 1815.8,1215.29 1816.39,1216.46 1816.97,1215.47 1817.56,1216.68 1818.14,1216.9 1818.73,1216.9 1819.32,1217.08 1819.9,1217.15 1820.49,1216.66 1821.08,1215.23 1821.66,1214.98 1822.25,1214.88 1822.84,1213.56 1823.42,1213.62 1824.01,1215.17 1824.6,1214.05 1825.18,1215.38 1825.77,1220.63 1826.35,1220.21 1826.94,1220.02 1827.53,1219.49 1828.11,1219.3 1828.7,1217.7 1829.29,1217.46 1829.87,1214.89 1830.46,1216.25 1831.05,1214.93 1831.63,1213.46 1832.22,1215.14 1832.81,1216.68 1833.39,1216.69 1833.98,1213.92 1834.56,1213.73 1835.15,1213.75 1835.74,1216.59 1836.32,1215.43 1836.91,1215.1 1837.5,1213.71 1838.08,1213.72 1838.67,1211.1 1839.26,1210.06 1839.84,1211.62 1840.43,1211.69 1841.01,1215.57 1841.6,1219.52 1842.19,1219.07 1842.77,1218.78 1843.36,1219.12 1843.95,1217.96 1844.53,1217.91 1845.12,1217.72 1845.71,1217.71 1846.29,1214.83 1846.88,1213.75 1847.47,1212.74 1848.05,1212.69 1848.64,1211.55 1849.22,1211.68 1849.81,1210.31 1850.4,1214.31 1850.98,1215.64 1851.57,1212.86 1852.16,1214.35 1852.74,1214.22 1853.33,1216.96 1853.92,1214.19 1854.5,1214.27 1855.09,1212.98 1855.68,1214.06 1856.26,1215.51 1856.85,1215.45 1857.43,1214.46 1858.02,1213.23 1858.61,1211.69 1859.19,1212.83 1859.78,1212.77 1860.37,1211.74 1860.95,1214.42 1861.54,1215.51 1862.13,1215.57 1862.71,1213 1863.3,1208.99 1863.88,1209.13 1864.47,1209.5 1865.06,1213.81 1865.64,1213.79 1866.23,1215.1 1866.82,1215.08 1867.4,1220.32 1867.99,1221.53 1868.58,1218.47 1869.16,1220.89 1869.75,1219.11 1870.34,1220.24 1870.92,1221.36 1871.51,1219.9 1872.09,1222.13 1872.68,1221.87 1873.27,1221.61 1873.85,1222.71 1874.44,1222.51 1875.03,1221.82 1875.61,1220.17 1876.2,1218.46 1876.79,1215.44 1877.37,1215.45 1877.96,1215.62 1878.55,1215.56 1879.13,1213.01 1879.72,1209.04 1880.3,1212.07 1880.89,1210.92 1881.48,1211.46 1882.06,1211.71 1882.65,1212.03 1883.24,1211.14 1883.82,1212.61 1884.41,1213.85 1885,1211.26 1885.58,1213.06 1886.17,1214.78 1886.76,1215.92 1887.34,1217.21 1887.93,1216.82 1888.51,1216.69 1889.1,1215.67 1889.69,1215.55 1890.27,1214.22 1890.86,1215.51 1891.45,1217.99 1892.03,1219.12 1892.62,1216.53 1893.21,1217.57 1893.79,1217.35 1894.38,1218.7 1894.96,1218.52 1895.55,1222.41 1896.14,1219.39 1896.72,1219.16 1897.31,1219.4 1897.9,1217.73 1898.48,1216.14 1899.07,1215.98 1899.66,1214.68 1900.24,1215.82 1900.83,1213.03 1901.42,1211.81 1902,1213.3 1902.59,1212.03 1903.17,1210.9 1903.76,1210.97 1904.35,1211.26 1904.93,1210.42 1905.52,1210.84 1906.11,1209.76 1906.69,1209.94 1907.28,1211.8 1907.87,1213.07 1908.45,1211.89 1909.04,1210.73 1909.63,1212.48 1910.21,1211.21 1910.8,1216.88 1911.38,1212.71 1911.97,1212.57 1912.56,1211.43 1913.14,1212.65 1913.73,1212.61 1914.32,1213.97 1914.9,1212.54 1915.49,1209.82 1916.08,1209.01 1916.66,1210.55 1917.25,1210.71 1917.83,1211.97 1918.42,1213.43 1919.01,1211.9 1919.59,1215.71 1920.18,1215.52 1920.77,1213.92 1921.35,1215.32 1921.94,1215.15 1922.53,1214.98 1923.11,1213.77 1923.7,1215.38 1924.29,1216.62 1924.87,1215.4 1925.46,1216.73 1926.04,1216.62 1926.63,1214.12 1927.22,1211.47 1927.8,1211.82 1928.39,1212.28 1928.98,1212.51 1929.56,1215.31 1930.15,1212.92 1930.74,1214.33 1931.32,1213.23 1931.91,1215.82 1932.5,1214.45 1933.08,1217 1933.67,1212.67 1934.25,1212.99 1934.84,1215.54 1935.43,1214.24 1936.01,1211.33 1936.6,1208.94 1937.19,1206.67 1937.77,1206.86 1938.36,1210.07 1938.95,1214.07 1939.53,1215.73 1940.12,1214.64 1940.71,1214.89 1941.29,1213.64 1941.88,1213.59 1942.46,1212.47 1943.05,1211.05 1943.64,1212.63 1944.22,1212.7 1944.81,1214.18 1945.4,1215.79 1945.98,1217.08 1946.57,1216.95 1947.16,1215.52 1947.74,1214.4 1948.33,1210.65 1948.91,1210.94 1949.5,1211.32 1950.09,1210.22 1950.67,1207.98 1951.26,1209.75 1951.85,1210.18 1952.43,1210.67 1953.02,1209.42 1953.61,1208.48 1954.19,1210.04 1954.78,1207.73 1955.37,1209.15 1955.95,1209.61 1956.54,1208.29 1957.12,1212.65 1957.71,1216.89 1958.3,1215.34 1958.88,1212.65 1959.47,1212.77 1960.06,1212.72 1960.64,1214.21 1961.23,1212.98 1961.82,1215.8 1962.4,1217.35 1962.99,1218.5 1963.58,1219.72 1964.16,1222.18 1964.75,1224.45 1965.33,1224.95 1965.92,1226.03 1966.51,1225.56 1967.09,1222.39 1967.68,1220.74 1968.27,1219.08 1968.85,1216.38 1969.44,1216.22 1970.03,1217.27 1970.61,1218.73 1971.2,1220.99 1971.78,1221.93 1972.37,1222.9 1972.96,1221.28 1973.54,1223.37 1974.13,1224.23 1974.72,1223.65 1975.3,1224.84 1975.89,1224.43 1976.48,1222.75 1977.06,1216.97 1977.65,1216.68 1978.24,1216.7 1978.82,1215.4 1979.41,1216.61 1979.99,1216.46 1980.58,1214.92 1981.17,1213.94 1981.75,1215.58 1982.34,1215.71 1982.93,1215.71 1983.51,1216.87 1984.1,1218.39 1984.69,1211.8 1985.27,1215.72 1985.86,1214.25 1986.45,1213.02 1987.03,1213.18 1987.62,1210.8 1988.2,1209.54 1988.79,1213.85 1989.38,1213.95 1989.96,1213.98 1990.55,1215.26 1991.14,1216.74 1991.72,1216.51 1992.31,1216.44 1992.9,1217.82 1993.48,1217.68 1994.07,1214.74 1994.65,1213.42 1995.24,1212.25 1995.83,1212.44 1996.41,1212.47 1997,1214.07 1997.59,1214.29 1998.17,1212.97 1998.76,1215.82 1999.35,1217.18 1999.93,1215.89 2000.52,1215.74 2001.11,1214.42 2001.69,1214.72 2002.28,1213.41 2002.86,1213.57 2003.45,1213.98 2004.04,1215.23 2004.62,1216.14 2005.21,1218.54 2005.8,1217.53 2006.38,1217.22 2006.97,1219.93 2007.56,1219.79 2008.14,1219.53 2008.73,1219.18 2009.32,1219.13 2009.9,1219.3 2010.49,1216.6 2011.07,1216.13 2011.66,1214.83 2012.25,1214.85 2012.83,1214.81 2013.42,1214.57 2014.01,1213.26 2014.59,1214.7 2015.18,1213.65 2015.77,1213.57 2016.35,1213.46 2016.94,1212.41 2017.53,1209.89 2018.11,1208.94 2018.7,1210.43 2019.28,1210.91 2019.87,1211.17 2020.46,1211.35 2021.04,1208.78 2021.63,1211.58 2022.22,1211.4 2022.8,1211.48 2023.39,1212.89 2023.98,1211.82 2024.56,1211.99 2025.15,1216.08 2025.73,1217.3 2026.32,1217.51 2026.91,1214.69 2027.49,1216.31 2028.08,1217.37 2028.67,1217.33 2029.25,1214.55 2029.84,1215.88 2030.43,1216.1 2031.01,1214.9 2031.6,1214.65 2032.19,1212.18 2032.77,1212.15 2033.36,1213.8 2033.94,1213.77 2034.53,1212.14 2035.12,1212.1 2035.7,1209.71 2036.29,1211.28 2036.88,1211.43 2037.46,1210.31 2038.05,1209.24 2038.64,1206.8 2039.22,1207.59 2039.81,1209.07 2040.4,1209.21 2040.98,1209.45 2041.57,1208.21 2042.15,1208.7 2042.74,1210.56 2043.33,1211.92 2043.91,1210.75 2044.5,1208.11 2045.09,1210.9 2045.67,1212.56 2046.26,1216.52 2046.85,1215.3 2047.43,1216.87 2048.02,1215.68 2048.6,1215.67 2049.19,1214.13 2049.78,1214.03 2050.36,1212.75 2050.95,1210.34 2051.54,1209.65 2052.12,1209.85 2052.71,1208.94 2053.3,1209.28 2053.88,1209.56 2054.47,1212.5 2055.06,1213.83 2055.64,1215.62 2056.23,1210.41 2056.81,1209.33 2057.4,1210.92 2057.99,1211.12 2058.57,1214.16 2059.16,1213.82 2059.75,1213.79 2060.33,1215.23 2060.92,1215.37 2061.51,1214.06 2062.09,1215.28 2062.68,1215.66 2063.27,1216.92 2063.85,1217.06 2064.44,1217.97 2065.02,1217.81 2065.61,1216.16 2066.2,1214.86 2066.78,1214.46 2067.37,1213.22 2067.96,1215.67 2068.54,1215.48 2069.13,1211.38 2069.72,1211.57 2070.3,1214.27 2070.89,1212.67 2071.48,1218.3 2072.06,1223.1 2072.65,1222.69 2073.23,1222.21 2073.82,1220.43 2074.41,1220.45 2074.99,1220.11 2075.58,1218.43 2076.17,1219.48 2076.75,1219.04 2077.34,1217.41 2077.93,1217.36 2078.51,1217.06 2079.1,1216.99 2079.68,1218.12 2080.27,1217.75 2080.86,1217.36 2081.44,1214.53 2082.03,1214.91 2082.62,1214.97 2083.2,1216.42 2083.79,1217.56 2084.38,1216.27 2084.96,1216.43 2085.55,1217.71 2086.14,1220.09 2086.72,1221.35 2087.31,1221.04 2087.89,1223.12 2088.48,1221.36 2089.07,1222.23 2089.65,1220.48 2090.24,1222.7 2090.83,1219.57 2091.41,1219.28 2092,1217.52 2092.59,1217.44 2093.17,1217.13 2093.76,1218.02 2094.35,1216.37 2094.93,1218.91 2095.52,1220.09 2096.1,1217.4 2096.69,1214.61 2097.28,1212 2097.86,1212.32 2098.45,1215.01 2099.04,1214.67 2099.62,1213.09 2100.21,1215.86 2100.8,1218.34 2101.38,1218.14 2101.97,1216.78 2102.55,1218.13 2103.14,1216.34 2103.73,1217.82 2104.31,1218.96 2104.9,1222.83 2105.49,1224.91 2106.07,1224.61 2106.66,1228.91 2107.25,1226.86 2107.83,1223.75 2108.42,1224.77 2109.01,1225.16 2109.59,1221.87 2110.18,1220.15 2110.76,1217.28 2111.35,1217.2 2111.94,1217.09 2112.52,1216.89 2113.11,1216.88 2113.7,1217.82 2114.28,1215.05 2114.87,1213.7 2115.46,1215.09 2116.04,1215.23 2116.63,1212.63 2117.22,1215.39 2117.8,1215.36 2118.39,1214.08 2118.97,1212.78 2119.56,1210.33 2120.15,1211.8 2120.73,1212.04 2121.32,1212.16 2121.91,1208.4 2122.49,1210.06 2123.08,1210.49 2123.67,1212.01 2124.25,1214.64 2124.84,1213.07 2125.42,1213.14 2126.01,1212.04 2126.6,1212.42 2127.18,1214.85 2127.77,1212.37 2128.36,1211.39 2128.94,1210.44 2129.53,1213.28 2130.12,1213.35 2130.7,1213.38 2131.29,1214.65 2131.88,1214.5 2132.46,1215.79 2133.05,1215.9 2133.63,1215.98 2134.22,1216.01 2134.81,1218.67 2135.39,1218.66 2135.98,1218.38 2136.57,1215.34 2137.15,1214.13 2137.74,1211.82 2138.33,1210.72 2138.91,1213.6 2139.5,1211.36 2140.09,1212.65 2140.67,1215.64 2141.26,1218.56 2141.84,1215.98 2142.43,1214.58 2143.02,1214.8 2143.6,1214.92 2144.19,1215.05 2144.78,1215.23 2145.36,1217.96 2145.95,1216.32 2146.54,1213.43 2147.12,1210.9 2147.71,1213.61 2148.3,1214.78 2148.88,1213.39 2149.47,1211.65 2150.05,1212.99 2150.64,1217.17 2151.23,1214.39 2151.81,1213.18 2152.4,1213.31 2152.99,1214.5 2153.57,1214.64 2154.16,1216 2154.75,1215.98 2155.33,1215.85 2155.92,1211.84 2156.5,1211.96 2157.09,1210.78 2157.68,1213.57 2158.26,1212.17 \"/>\n<path clip-path=\"url(#clip392)\" d=\"M986.025 1215.51 L986.612 1215.51 L987.198 1215.51 L987.785 1215.51 L988.371 1215.51 L988.957 1215.51 L989.544 1215.51 L990.13 1215.51 L990.717 1215.51 L991.303 1215.51 L991.889 1215.51 L992.476 1215.51 L993.062 1215.51 L993.649 1215.51 L994.235 1215.51 L994.822 1215.51 L995.408 1215.51 L995.994 1215.51 L996.581 1215.51 L997.167 1215.51 L997.754 1215.51 L998.34 1215.51 L998.926 1215.51 L999.513 1215.51 L1000.1 1215.51 L1000.69 1215.51 L1001.27 1215.51 L1001.86 1215.51 L1002.44 1215.51 L1003.03 1215.51 L1003.62 1215.51 L1004.2 1215.51 L1004.79 1215.51 L1005.38 1215.51 L1005.96 1215.51 L1006.55 1215.51 L1007.14 1215.51 L1007.72 1215.51 L1008.31 1215.51 L1008.9 1215.51 L1009.48 1215.51 L1010.07 1215.51 L1010.65 1215.51 L1011.24 1215.51 L1011.83 1215.51 L1012.41 1215.51 L1013 1215.51 L1013.59 1215.51 L1014.17 1215.51 L1014.76 1215.51 L1015.35 1215.51 L1015.93 1215.51 L1016.52 1215.51 L1017.11 1215.51 L1017.69 1215.51 L1018.28 1215.51 L1018.86 1215.51 L1019.45 1215.51 L1020.04 1215.51 L1020.62 1215.51 L1021.21 1215.51 L1021.8 1215.51 L1022.38 1215.51 L1022.97 1215.51 L1023.56 1215.51 L1024.14 1215.51 L1024.73 1215.51 L1025.32 1215.51 L1025.9 1215.51 L1026.49 1215.51 L1027.07 1215.51 L1027.66 1215.51 L1028.25 1215.51 L1028.83 1215.51 L1029.42 1215.51 L1030.01 1215.51 L1030.59 1215.51 L1031.18 1215.51 L1031.77 1215.51 L1032.35 1215.51 L1032.94 1215.51 L1033.52 1215.51 L1034.11 1215.51 L1034.7 1215.51 L1035.28 1215.51 L1035.87 1215.51 L1036.46 1215.51 L1037.04 1215.51 L1037.63 1215.51 L1038.22 1215.51 L1038.8 1215.51 L1039.39 1215.51 L1039.98 1215.51 L1040.56 1215.51 L1041.15 1215.51 L1041.73 1215.51 L1042.32 1215.51 L1042.91 1215.51 L1043.49 1215.51 L1044.08 1215.51 L1044.67 1215.51 L1045.25 1215.51 L1045.84 1215.51 L1046.43 1215.51 L1047.01 1215.51 L1047.6 1215.51 L1048.19 1215.51 L1048.77 1215.51 L1049.36 1215.51 L1049.94 1215.51 L1050.53 1215.51 L1051.12 1215.51 L1051.7 1215.51 L1052.29 1215.51 L1052.88 1215.51 L1053.46 1215.51 L1054.05 1215.51 L1054.64 1215.51 L1055.22 1215.51 L1055.81 1215.51 L1056.39 1215.51 L1056.98 1215.51 L1057.57 1215.51 L1058.15 1215.51 L1058.74 1215.51 L1059.33 1215.51 L1059.91 1215.51 L1060.5 1215.51 L1061.09 1215.51 L1061.67 1215.51 L1062.26 1215.51 L1062.85 1215.51 L1063.43 1215.51 L1064.02 1215.51 L1064.6 1215.51 L1065.19 1215.51 L1065.78 1215.51 L1066.36 1215.51 L1066.95 1215.51 L1067.54 1215.51 L1068.12 1215.51 L1068.71 1215.51 L1069.3 1215.51 L1069.88 1215.51 L1070.47 1215.51 L1071.06 1215.51 L1071.64 1215.51 L1072.23 1215.51 L1072.81 1215.51 L1073.4 1215.51 L1073.99 1215.51 L1074.57 1215.51 L1075.16 1215.51 L1075.75 1215.51 L1076.33 1215.51 L1076.92 1215.51 L1077.51 1215.51 L1078.09 1215.51 L1078.68 1215.51 L1079.26 1215.51 L1079.85 1215.51 L1080.44 1215.51 L1081.02 1215.51 L1081.61 1215.51 L1082.2 1215.51 L1082.78 1215.51 L1083.37 1215.51 L1083.96 1215.51 L1084.54 1215.51 L1085.13 1215.51 L1085.72 1215.51 L1086.3 1215.51 L1086.89 1215.51 L1087.47 1215.51 L1088.06 1215.51 L1088.65 1215.51 L1089.23 1215.51 L1089.82 1215.51 L1090.41 1215.51 L1090.99 1215.51 L1091.58 1215.51 L1092.17 1215.51 L1092.75 1215.51 L1093.34 1215.51 L1093.93 1215.51 L1094.51 1215.51 L1095.1 1215.51 L1095.68 1215.51 L1096.27 1215.51 L1096.86 1215.51 L1097.44 1215.51 L1098.03 1215.51 L1098.62 1215.51 L1099.2 1215.51 L1099.79 1215.51 L1100.38 1215.51 L1100.96 1215.51 L1101.55 1215.51 L1102.14 1215.51 L1102.72 1215.51 L1103.31 1215.51 L1103.89 1215.51 L1104.48 1215.51 L1105.07 1215.51 L1105.65 1215.51 L1106.24 1215.51 L1106.83 1215.51 L1107.41 1215.51 L1108 1215.51 L1108.59 1215.51 L1109.17 1215.51 L1109.76 1215.51 L1110.34 1215.51 L1110.93 1215.51 L1111.52 1215.51 L1112.1 1215.51 L1112.69 1215.51 L1113.28 1215.51 L1113.86 1215.51 L1114.45 1215.51 L1115.04 1215.51 L1115.62 1215.51 L1116.21 1215.51 L1116.8 1215.51 L1117.38 1215.51 L1117.97 1215.51 L1118.55 1215.51 L1119.14 1215.51 L1119.73 1215.51 L1120.31 1215.51 L1120.9 1215.51 L1121.49 1215.51 L1122.07 1215.51 L1122.66 1215.51 L1123.25 1215.51 L1123.83 1215.51 L1124.42 1215.51 L1125.01 1215.51 L1125.59 1215.51 L1126.18 1215.51 L1126.76 1215.51 L1127.35 1215.51 L1127.94 1215.51 L1128.52 1215.51 L1129.11 1215.51 L1129.7 1215.51 L1130.28 1215.51 L1130.87 1215.51 L1131.46 1215.51 L1132.04 1215.51 L1132.63 1215.51 L1133.21 1215.51 L1133.8 1215.51 L1134.39 1215.51 L1134.97 1215.51 L1135.56 1215.51 L1136.15 1215.51 L1136.73 1215.51 L1137.32 1215.51 L1137.91 1215.51 L1138.49 1215.51 L1139.08 1215.51 L1139.67 1215.51 L1140.25 1215.51 L1140.84 1215.51 L1141.42 1215.51 L1142.01 1215.51 L1142.6 1215.51 L1143.18 1215.51 L1143.77 1215.51 L1144.36 1215.51 L1144.94 1215.51 L1145.53 1215.51 L1146.12 1215.51 L1146.7 1215.51 L1147.29 1215.51 L1147.88 1215.51 L1148.46 1215.51 L1149.05 1215.51 L1149.63 1215.51 L1150.22 1215.51 L1150.81 1215.51 L1151.39 1215.51 L1151.98 1215.51 L1152.57 1215.51 L1153.15 1215.51 L1153.74 1215.51 L1154.33 1215.51 L1154.91 1215.51 L1155.5 1215.51 L1156.09 1215.51 L1156.67 1215.51 L1157.26 1215.51 L1157.84 1215.51 L1158.43 1215.51 L1159.02 1215.51 L1159.6 1215.51 L1160.19 1215.51 L1160.78 1215.51 L1161.36 1215.51 L1161.95 1215.51 L1162.54 1215.51 L1163.12 1215.51 L1163.71 1215.51 L1164.29 1215.51 L1164.88 1215.51 L1165.47 1215.51 L1166.05 1215.51 L1166.64 1215.51 L1167.23 1215.51 L1167.81 1215.51 L1168.4 1215.51 L1168.99 1215.51 L1169.57 1215.51 L1170.16 1215.51 L1170.75 1215.51 L1171.33 1215.51 L1171.92 1215.51 L1172.5 1215.51 L1173.09 1215.51 L1173.68 1215.51 L1174.26 1215.51 L1174.85 1215.51 L1175.44 1215.51 L1176.02 1215.51 L1176.61 1215.51 L1177.2 1215.51 L1177.78 1215.51 L1178.37 1215.51 L1178.96 1215.51 L1179.54 1215.51 L1180.13 1215.51 L1180.71 1215.51 L1181.3 1215.51 L1181.89 1215.51 L1182.47 1215.51 L1183.06 1215.51 L1183.65 1215.51 L1184.23 1215.51 L1184.82 1215.51 L1185.41 1215.51 L1185.99 1215.51 L1186.58 1215.51 L1187.16 1215.51 L1187.75 1215.51 L1188.34 1215.51 L1188.92 1215.51 L1189.51 1215.51 L1190.1 1215.51 L1190.68 1215.51 L1191.27 1215.51 L1191.86 1215.51 L1192.44 1215.51 L1193.03 1215.51 L1193.62 1215.51 L1194.2 1215.51 L1194.79 1215.51 L1195.37 1215.51 L1195.96 1215.51 L1196.55 1215.51 L1197.13 1215.51 L1197.72 1215.51 L1198.31 1215.51 L1198.89 1215.51 L1199.48 1215.51 L1200.07 1215.51 L1200.65 1215.51 L1201.24 1215.51 L1201.83 1215.51 L1202.41 1215.51 L1203 1215.51 L1203.58 1215.51 L1204.17 1215.51 L1204.76 1215.51 L1205.34 1215.51 L1205.93 1215.51 L1206.52 1215.51 L1207.1 1215.51 L1207.69 1215.51 L1208.28 1215.51 L1208.86 1215.51 L1209.45 1215.51 L1210.03 1215.51 L1210.62 1215.51 L1211.21 1215.51 L1211.79 1215.51 L1212.38 1215.51 L1212.97 1215.51 L1213.55 1215.51 L1214.14 1215.51 L1214.73 1215.51 L1215.31 1215.51 L1215.9 1215.51 L1216.49 1215.51 L1217.07 1215.51 L1217.66 1215.51 L1218.24 1215.51 L1218.83 1215.51 L1219.42 1215.51 L1220 1215.51 L1220.59 1215.51 L1221.18 1215.51 L1221.76 1215.51 L1222.35 1215.51 L1222.94 1215.51 L1223.52 1215.51 L1224.11 1215.51 L1224.7 1215.51 L1225.28 1215.51 L1225.87 1215.51 L1226.45 1215.51 L1227.04 1215.51 L1227.63 1215.51 L1228.21 1215.51 L1228.8 1215.51 L1229.39 1215.51 L1229.97 1215.51 L1230.56 1215.51 L1231.15 1215.51 L1231.73 1215.51 L1232.32 1215.51 L1232.91 1215.51 L1233.49 1215.51 L1234.08 1215.51 L1234.66 1215.51 L1235.25 1215.51 L1235.84 1215.51 L1236.42 1215.51 L1237.01 1215.51 L1237.6 1215.51 L1238.18 1215.51 L1238.77 1215.51 L1239.36 1215.51 L1239.94 1215.51 L1240.53 1215.51 L1241.11 1215.51 L1241.7 1215.51 L1242.29 1215.51 L1242.87 1215.51 L1243.46 1215.51 L1244.05 1215.51 L1244.63 1215.51 L1245.22 1215.51 L1245.81 1215.51 L1246.39 1215.51 L1246.98 1215.51 L1247.57 1215.51 L1248.15 1215.51 L1248.74 1215.51 L1249.32 1215.51 L1249.91 1215.51 L1250.5 1215.51 L1251.08 1215.51 L1251.67 1215.51 L1252.26 1215.51 L1252.84 1215.51 L1253.43 1215.51 L1254.02 1215.51 L1254.6 1215.51 L1255.19 1215.51 L1255.78 1215.51 L1256.36 1215.51 L1256.95 1215.51 L1257.53 1215.51 L1258.12 1215.51 L1258.71 1215.51 L1259.29 1215.51 L1259.88 1215.51 L1260.47 1215.51 L1261.05 1215.51 L1261.64 1215.51 L1262.23 1215.51 L1262.81 1215.51 L1263.4 1215.51 L1263.98 1215.51 L1264.57 1215.51 L1265.16 1215.51 L1265.74 1215.51 L1266.33 1215.51 L1266.92 1215.51 L1267.5 1215.51 L1268.09 1215.51 L1268.68 1215.51 L1269.26 1215.51 L1269.85 1215.51 L1270.44 1215.51 L1271.02 1215.51 L1271.61 1215.51 L1272.19 1215.51 L1272.78 1215.51 L1273.37 1215.51 L1273.95 1215.51 L1274.54 1215.51 L1275.13 1215.51 L1275.71 1215.51 L1276.3 1215.51 L1276.89 1215.51 L1277.47 1215.51 L1278.06 1215.51 L1278.65 1215.51 L1279.23 1215.51 L1279.82 1215.51 L1280.4 1215.51 L1280.99 1215.51 L1281.58 1215.51 L1282.16 1215.51 L1282.75 1215.51 L1283.34 1215.51 L1283.92 1215.51 L1284.51 1215.51 L1285.1 1215.51 L1285.68 1215.51 L1286.27 1215.51 L1286.86 1215.51 L1287.44 1215.51 L1288.03 1215.51 L1288.61 1215.51 L1289.2 1215.51 L1289.79 1215.51 L1290.37 1215.51 L1290.96 1215.51 L1291.55 1215.51 L1292.13 1215.51 L1292.72 1215.51 L1293.31 1215.51 L1293.89 1215.51 L1294.48 1215.51 L1295.06 1215.51 L1295.65 1215.51 L1296.24 1215.51 L1296.82 1215.51 L1297.41 1215.51 L1298 1215.51 L1298.58 1215.51 L1299.17 1215.51 L1299.76 1215.51 L1300.34 1215.51 L1300.93 1215.51 L1301.52 1215.51 L1302.1 1215.51 L1302.69 1215.51 L1303.27 1215.51 L1303.86 1215.51 L1304.45 1215.51 L1305.03 1215.51 L1305.62 1215.51 L1306.21 1215.51 L1306.79 1215.51 L1307.38 1215.51 L1307.97 1215.51 L1308.55 1215.51 L1309.14 1215.51 L1309.73 1215.51 L1310.31 1215.51 L1310.9 1215.51 L1311.48 1215.51 L1312.07 1215.51 L1312.66 1215.51 L1313.24 1215.51 L1313.83 1215.51 L1314.42 1215.51 L1315 1215.51 L1315.59 1215.51 L1316.18 1215.51 L1316.76 1215.51 L1317.35 1215.51 L1317.93 1215.51 L1318.52 1215.51 L1319.11 1215.51 L1319.69 1215.51 L1320.28 1215.51 L1320.87 1215.51 L1321.45 1215.51 L1322.04 1215.51 L1322.63 1215.51 L1323.21 1215.51 L1323.8 1215.51 L1324.39 1215.51 L1324.97 1215.51 L1325.56 1215.51 L1326.14 1215.51 L1326.73 1215.51 L1327.32 1215.51 L1327.9 1215.51 L1328.49 1215.51 L1329.08 1215.51 L1329.66 1215.51 L1330.25 1215.51 L1330.84 1215.51 L1331.42 1215.51 L1332.01 1215.51 L1332.6 1215.51 L1333.18 1215.51 L1333.77 1215.51 L1334.35 1215.51 L1334.94 1215.51 L1335.53 1215.51 L1336.11 1215.51 L1336.7 1215.51 L1337.29 1215.51 L1337.87 1215.51 L1338.46 1215.51 L1339.05 1215.51 L1339.63 1215.51 L1340.22 1215.51 L1340.8 1215.51 L1341.39 1215.51 L1341.98 1215.51 L1342.56 1215.51 L1343.15 1215.51 L1343.74 1215.51 L1344.32 1215.51 L1344.91 1215.51 L1345.5 1215.51 L1346.08 1215.51 L1346.67 1215.51 L1347.26 1215.51 L1347.84 1215.51 L1348.43 1215.51 L1349.01 1215.51 L1349.6 1215.51 L1350.19 1215.51 L1350.77 1215.51 L1351.36 1215.51 L1351.95 1215.51 L1352.53 1215.51 L1353.12 1215.51 L1353.71 1215.51 L1354.29 1215.51 L1354.88 1215.51 L1355.47 1215.51 L1356.05 1215.51 L1356.64 1215.51 L1357.22 1215.51 L1357.81 1215.51 L1358.4 1215.51 L1358.98 1215.51 L1359.57 1215.51 L1360.16 1215.51 L1360.74 1215.51 L1361.33 1215.51 L1361.92 1215.51 L1362.5 1215.51 L1363.09 1215.51 L1363.68 1215.51 L1364.26 1215.51 L1364.85 1215.51 L1365.43 1215.51 L1366.02 1215.51 L1366.61 1215.51 L1367.19 1215.51 L1367.78 1215.51 L1368.37 1215.51 L1368.95 1215.51 L1369.54 1215.51 L1370.13 1215.51 L1370.71 1215.51 L1371.3 1215.51 L1371.88 1215.51 L1372.47 1215.51 L1373.06 1215.51 L1373.64 1215.51 L1374.23 1215.51 L1374.82 1215.51 L1375.4 1215.51 L1375.99 1215.51 L1376.58 1215.51 L1377.16 1215.51 L1377.75 1215.51 L1378.34 1215.51 L1378.92 1215.51 L1379.51 1215.51 L1380.09 1215.51 L1380.68 1215.51 L1381.27 1215.51 L1381.85 1215.51 L1382.44 1215.51 L1383.03 1215.51 L1383.61 1215.51 L1384.2 1215.51 L1384.79 1215.51 L1385.37 1215.51 L1385.96 1215.51 L1386.55 1215.51 L1387.13 1215.51 L1387.72 1215.51 L1388.3 1215.51 L1388.89 1215.51 L1389.48 1215.51 L1390.06 1215.51 L1390.65 1215.51 L1391.24 1215.51 L1391.82 1215.51 L1392.41 1215.51 L1393 1215.51 L1393.58 1215.51 L1394.17 1215.51 L1394.75 1215.51 L1395.34 1215.51 L1395.93 1215.51 L1396.51 1215.51 L1397.1 1215.51 L1397.69 1215.51 L1398.27 1215.51 L1398.86 1215.51 L1399.45 1215.51 L1400.03 1215.51 L1400.62 1215.51 L1401.21 1215.51 L1401.79 1215.51 L1402.38 1215.51 L1402.96 1215.51 L1403.55 1215.51 L1404.14 1215.51 L1404.72 1215.51 L1405.31 1215.51 L1405.9 1215.51 L1406.48 1215.51 L1407.07 1215.51 L1407.66 1215.51 L1408.24 1215.51 L1408.83 1215.51 L1409.42 1215.51 L1410 1215.51 L1410.59 1215.51 L1411.17 1215.51 L1411.76 1215.51 L1412.35 1215.51 L1412.93 1215.51 L1413.52 1215.51 L1414.11 1215.51 L1414.69 1215.51 L1415.28 1215.51 L1415.87 1215.51 L1416.45 1215.51 L1417.04 1215.51 L1417.63 1215.51 L1418.21 1215.51 L1418.8 1215.51 L1419.38 1215.51 L1419.97 1215.51 L1420.56 1215.51 L1421.14 1215.51 L1421.73 1215.51 L1422.32 1215.51 L1422.9 1215.51 L1423.49 1215.51 L1424.08 1215.51 L1424.66 1215.51 L1425.25 1215.51 L1425.83 1215.51 L1426.42 1215.51 L1427.01 1215.51 L1427.59 1215.51 L1428.18 1215.51 L1428.77 1215.51 L1429.35 1215.51 L1429.94 1215.51 L1430.53 1215.51 L1431.11 1215.51 L1431.7 1215.51 L1432.29 1215.51 L1432.87 1215.51 L1433.46 1215.51 L1434.04 1215.51 L1434.63 1215.51 L1435.22 1215.51 L1435.8 1215.51 L1436.39 1215.51 L1436.98 1215.51 L1437.56 1215.51 L1438.15 1215.51 L1438.74 1215.51 L1439.32 1215.51 L1439.91 1215.51 L1440.5 1215.51 L1441.08 1215.51 L1441.67 1215.51 L1442.25 1215.51 L1442.84 1215.51 L1443.43 1215.51 L1444.01 1215.51 L1444.6 1215.51 L1445.19 1215.51 L1445.77 1215.51 L1446.36 1215.51 L1446.95 1215.51 L1447.53 1215.51 L1448.12 1215.51 L1448.7 1215.51 L1449.29 1215.51 L1449.88 1215.51 L1450.46 1215.51 L1451.05 1215.51 L1451.64 1215.51 L1452.22 1215.51 L1452.81 1215.51 L1453.4 1215.51 L1453.98 1215.51 L1454.57 1215.51 L1455.16 1215.51 L1455.74 1215.51 L1456.33 1215.51 L1456.91 1215.51 L1457.5 1215.51 L1458.09 1215.51 L1458.67 1215.51 L1459.26 1215.51 L1459.85 1215.51 L1460.43 1215.51 L1461.02 1215.51 L1461.61 1215.51 L1462.19 1215.51 L1462.78 1215.51 L1463.37 1215.51 L1463.95 1215.51 L1464.54 1215.51 L1465.12 1215.51 L1465.71 1215.51 L1466.3 1215.51 L1466.88 1215.51 L1467.47 1215.51 L1468.06 1215.51 L1468.64 1215.51 L1469.23 1215.51 L1469.82 1215.51 L1470.4 1215.51 L1470.99 1215.51 L1471.57 1215.51 L1472.16 1215.51 L1472.75 1215.51 L1473.33 1215.51 L1473.92 1215.51 L1474.51 1215.51 L1475.09 1215.51 L1475.68 1215.51 L1476.27 1215.51 L1476.85 1215.51 L1477.44 1215.51 L1478.03 1215.51 L1478.61 1215.51 L1479.2 1215.51 L1479.78 1215.51 L1480.37 1215.51 L1480.96 1215.51 L1481.54 1215.51 L1482.13 1215.51 L1482.72 1215.51 L1483.3 1215.51 L1483.89 1215.51 L1484.48 1215.51 L1485.06 1215.51 L1485.65 1215.51 L1486.24 1215.51 L1486.82 1215.51 L1487.41 1215.51 L1487.99 1215.51 L1488.58 1215.51 L1489.17 1215.51 L1489.75 1215.51 L1490.34 1215.51 L1490.93 1215.51 L1491.51 1215.51 L1492.1 1215.51 L1492.69 1215.51 L1493.27 1215.51 L1493.86 1215.51 L1494.45 1215.51 L1495.03 1215.51 L1495.62 1215.51 L1496.2 1215.51 L1496.79 1215.51 L1497.38 1215.51 L1497.96 1215.51 L1498.55 1215.51 L1499.14 1215.51 L1499.72 1215.51 L1500.31 1215.51 L1500.9 1215.51 L1501.48 1215.51 L1502.07 1215.51 L1502.65 1215.51 L1503.24 1215.51 L1503.83 1215.51 L1504.41 1215.51 L1505 1215.51 L1505.59 1215.51 L1506.17 1215.51 L1506.76 1215.51 L1507.35 1215.51 L1507.93 1215.51 L1508.52 1215.51 L1509.11 1215.51 L1509.69 1215.51 L1510.28 1215.51 L1510.86 1215.51 L1511.45 1215.51 L1512.04 1215.51 L1512.62 1215.51 L1513.21 1215.51 L1513.8 1215.51 L1514.38 1215.51 L1514.97 1215.51 L1515.56 1215.51 L1516.14 1215.51 L1516.73 1215.51 L1517.32 1215.51 L1517.9 1215.51 L1518.49 1215.51 L1519.07 1215.51 L1519.66 1215.51 L1520.25 1215.51 L1520.83 1215.51 L1521.42 1215.51 L1522.01 1215.51 L1522.59 1215.51 L1523.18 1215.51 L1523.77 1215.51 L1524.35 1215.51 L1524.94 1215.51 L1525.52 1215.51 L1526.11 1215.51 L1526.7 1215.51 L1527.28 1215.51 L1527.87 1215.51 L1528.46 1215.51 L1529.04 1215.51 L1529.63 1215.51 L1530.22 1215.51 L1530.8 1215.51 L1531.39 1215.51 L1531.98 1215.51 L1532.56 1215.51 L1533.15 1215.51 L1533.73 1215.51 L1534.32 1215.51 L1534.91 1215.51 L1535.49 1215.51 L1536.08 1215.51 L1536.67 1215.51 L1537.25 1215.51 L1537.84 1215.51 L1538.43 1215.51 L1539.01 1215.51 L1539.6 1215.51 L1540.19 1215.51 L1540.77 1215.51 L1541.36 1215.51 L1541.94 1215.51 L1542.53 1215.51 L1543.12 1215.51 L1543.7 1215.51 L1544.29 1215.51 L1544.88 1215.51 L1545.46 1215.51 L1546.05 1215.51 L1546.64 1215.51 L1547.22 1215.51 L1547.81 1215.51 L1548.4 1215.51 L1548.98 1215.51 L1549.57 1215.51 L1550.15 1215.51 L1550.74 1215.51 L1551.33 1215.51 L1551.91 1215.51 L1552.5 1215.51 L1553.09 1215.51 L1553.67 1215.51 L1554.26 1215.51 L1554.85 1215.51 L1555.43 1215.51 L1556.02 1215.51 L1556.6 1215.51 L1557.19 1215.51 L1557.78 1215.51 L1558.36 1215.51 L1558.95 1215.51 L1559.54 1215.51 L1560.12 1215.51 L1560.71 1215.51 L1561.3 1215.51 L1561.88 1215.51 L1562.47 1215.51 L1563.06 1215.51 L1563.64 1215.51 L1564.23 1215.51 L1564.81 1215.51 L1565.4 1215.51 L1565.99 1215.51 L1566.57 1215.51 L1567.16 1215.51 L1567.75 1215.51 L1568.33 1215.51 L1568.92 1215.51 L1569.51 1215.51 L1570.09 1215.51 L1570.68 1215.51 L1571.27 1215.51 L1571.85 1215.51 L1572.44 1215.51 L1573.02 1215.51 L1573.61 1215.51 L1574.2 1215.51 L1574.78 1215.51 L1575.37 1215.51 L1575.96 1215.51 L1576.54 1215.51 L1577.13 1215.51 L1577.72 1215.51 L1578.3 1215.51 L1578.89 1215.51 L1579.47 1215.51 L1580.06 1215.51 L1580.65 1215.51 L1581.23 1215.51 L1581.82 1215.51 L1582.41 1215.51 L1582.99 1215.51 L1583.58 1215.51 L1584.17 1215.51 L1584.75 1215.51 L1585.34 1215.51 L1585.93 1215.51 L1586.51 1215.51 L1587.1 1215.51 L1587.68 1215.51 L1588.27 1215.51 L1588.86 1215.51 L1589.44 1215.51 L1590.03 1215.51 L1590.62 1215.51 L1591.2 1215.51 L1591.79 1215.51 L1592.38 1215.51 L1592.96 1215.51 L1593.55 1215.51 L1594.14 1215.51 L1594.72 1215.51 L1595.31 1215.51 L1595.89 1215.51 L1596.48 1215.51 L1597.07 1215.51 L1597.65 1215.51 L1598.24 1215.51 L1598.83 1215.51 L1599.41 1215.51 L1600 1215.51 L1600.59 1215.51 L1601.17 1215.51 L1601.76 1215.51 L1602.34 1215.51 L1602.93 1215.51 L1603.52 1215.51 L1604.1 1215.51 L1604.69 1215.51 L1605.28 1215.51 L1605.86 1215.51 L1606.45 1215.51 L1607.04 1215.51 L1607.62 1215.51 L1608.21 1215.51 L1608.8 1215.51 L1609.38 1215.51 L1609.97 1215.51 L1610.55 1215.51 L1611.14 1215.51 L1611.73 1215.51 L1612.31 1215.51 L1612.9 1215.51 L1613.49 1215.51 L1614.07 1215.51 L1614.66 1215.51 L1615.25 1215.51 L1615.83 1215.51 L1616.42 1215.51 L1617.01 1215.51 L1617.59 1215.51 L1618.18 1215.51 L1618.76 1215.51 L1619.35 1215.51 L1619.94 1215.51 L1620.52 1215.51 L1621.11 1215.51 L1621.7 1215.51 L1622.28 1215.51 L1622.87 1215.51 L1623.46 1215.51 L1624.04 1215.51 L1624.63 1215.51 L1625.22 1215.51 L1625.8 1215.51 L1626.39 1215.51 L1626.97 1215.51 L1627.56 1215.51 L1628.15 1215.51 L1628.73 1215.51 L1629.32 1215.51 L1629.91 1215.51 L1630.49 1215.51 L1631.08 1215.51 L1631.67 1215.51 L1632.25 1215.51 L1632.84 1215.51 L1633.42 1215.51 L1634.01 1215.51 L1634.6 1215.51 L1635.18 1215.51 L1635.77 1215.51 L1636.36 1215.51 L1636.94 1215.51 L1637.53 1215.51 L1638.12 1215.51 L1638.7 1215.51 L1639.29 1215.51 L1639.88 1215.51 L1640.46 1215.51 L1641.05 1215.51 L1641.63 1215.51 L1642.22 1215.51 L1642.81 1215.51 L1643.39 1215.51 L1643.98 1215.51 L1644.57 1215.51 L1645.15 1215.51 L1645.74 1215.51 L1646.33 1215.51 L1646.91 1215.51 L1647.5 1215.51 L1648.09 1215.51 L1648.67 1215.51 L1649.26 1215.51 L1649.84 1215.51 L1650.43 1215.51 L1651.02 1215.51 L1651.6 1215.51 L1652.19 1215.51 L1652.78 1215.51 L1653.36 1215.51 L1653.95 1215.51 L1654.54 1215.51 L1655.12 1215.51 L1655.71 1215.51 L1656.29 1215.51 L1656.88 1215.51 L1657.47 1215.51 L1658.05 1215.51 L1658.64 1215.51 L1659.23 1215.51 L1659.81 1215.51 L1660.4 1215.51 L1660.99 1215.51 L1661.57 1215.51 L1662.16 1215.51 L1662.75 1215.51 L1663.33 1215.51 L1663.92 1215.51 L1664.5 1215.51 L1665.09 1215.51 L1665.68 1215.51 L1666.26 1215.51 L1666.85 1215.51 L1667.44 1215.51 L1668.02 1215.51 L1668.61 1215.51 L1669.2 1215.51 L1669.78 1215.51 L1670.37 1215.51 L1670.96 1215.51 L1671.54 1215.51 L1672.13 1215.51 L1672.71 1215.51 L1673.3 1215.51 L1673.89 1215.51 L1674.47 1215.51 L1675.06 1215.51 L1675.65 1215.51 L1676.23 1215.51 L1676.82 1215.51 L1677.41 1215.51 L1677.99 1215.51 L1678.58 1215.51 L1679.17 1215.51 L1679.75 1215.51 L1680.34 1215.51 L1680.92 1215.51 L1681.51 1215.51 L1682.1 1215.51 L1682.68 1215.51 L1683.27 1215.51 L1683.86 1215.51 L1684.44 1215.51 L1685.03 1215.51 L1685.62 1215.51 L1686.2 1215.51 L1686.79 1215.51 L1687.37 1215.51 L1687.96 1215.51 L1688.55 1215.51 L1689.13 1215.51 L1689.72 1215.51 L1690.31 1215.51 L1690.89 1215.51 L1691.48 1215.51 L1692.07 1215.51 L1692.65 1215.51 L1693.24 1215.51 L1693.83 1215.51 L1694.41 1215.51 L1695 1215.51 L1695.58 1215.51 L1696.17 1215.51 L1696.76 1215.51 L1697.34 1215.51 L1697.93 1215.51 L1698.52 1215.51 L1699.1 1215.51 L1699.69 1215.51 L1700.28 1215.51 L1700.86 1215.51 L1701.45 1215.51 L1702.04 1215.51 L1702.62 1215.51 L1703.21 1215.51 L1703.79 1215.51 L1704.38 1215.51 L1704.97 1215.51 L1705.55 1215.51 L1706.14 1215.51 L1706.73 1215.51 L1707.31 1215.51 L1707.9 1215.51 L1708.49 1215.51 L1709.07 1215.51 L1709.66 1215.51 L1710.24 1215.51 L1710.83 1215.51 L1711.42 1215.51 L1712 1215.51 L1712.59 1215.51 L1713.18 1215.51 L1713.76 1215.51 L1714.35 1215.51 L1714.94 1215.51 L1715.52 1215.51 L1716.11 1215.51 L1716.7 1215.51 L1717.28 1215.51 L1717.87 1215.51 L1718.45 1215.51 L1719.04 1215.51 L1719.63 1215.51 L1720.21 1215.51 L1720.8 1215.51 L1721.39 1215.51 L1721.97 1215.51 L1722.56 1215.51 L1723.15 1215.51 L1723.73 1215.51 L1724.32 1215.51 L1724.91 1215.51 L1725.49 1215.51 L1726.08 1215.51 L1726.66 1215.51 L1727.25 1215.51 L1727.84 1215.51 L1728.42 1215.51 L1729.01 1215.51 L1729.6 1215.51 L1730.18 1215.51 L1730.77 1215.51 L1731.36 1215.51 L1731.94 1215.51 L1732.53 1215.51 L1733.11 1215.51 L1733.7 1215.51 L1734.29 1215.51 L1734.87 1215.51 L1735.46 1215.51 L1736.05 1215.51 L1736.63 1215.51 L1737.22 1215.51 L1737.81 1215.51 L1738.39 1215.51 L1738.98 1215.51 L1739.57 1215.51 L1740.15 1215.51 L1740.74 1215.51 L1741.32 1215.51 L1741.91 1215.51 L1742.5 1215.51 L1743.08 1215.51 L1743.67 1215.51 L1744.26 1215.51 L1744.84 1215.51 L1745.43 1215.51 L1746.02 1215.51 L1746.6 1215.51 L1747.19 1215.51 L1747.78 1215.51 L1748.36 1215.51 L1748.95 1215.51 L1749.53 1215.51 L1750.12 1215.51 L1750.71 1215.51 L1751.29 1215.51 L1751.88 1215.51 L1752.47 1215.51 L1753.05 1215.51 L1753.64 1215.51 L1754.23 1215.51 L1754.81 1215.51 L1755.4 1215.51 L1755.99 1215.51 L1756.57 1215.51 L1757.16 1215.51 L1757.74 1215.51 L1758.33 1215.51 L1758.92 1215.51 L1759.5 1215.51 L1760.09 1215.51 L1760.68 1215.51 L1761.26 1215.51 L1761.85 1215.51 L1762.44 1215.51 L1763.02 1215.51 L1763.61 1215.51 L1764.19 1215.51 L1764.78 1215.51 L1765.37 1215.51 L1765.95 1215.51 L1766.54 1215.51 L1767.13 1215.51 L1767.71 1215.51 L1768.3 1215.51 L1768.89 1215.51 L1769.47 1215.51 L1770.06 1215.51 L1770.65 1215.51 L1771.23 1215.51 L1771.82 1215.51 L1772.4 1215.51 L1772.99 1215.51 L1773.58 1215.51 L1774.16 1215.51 L1774.75 1215.51 L1775.34 1215.51 L1775.92 1215.51 L1776.51 1215.51 L1777.1 1215.51 L1777.68 1215.51 L1778.27 1215.51 L1778.86 1215.51 L1779.44 1215.51 L1780.03 1215.51 L1780.61 1215.51 L1781.2 1215.51 L1781.79 1215.51 L1782.37 1215.51 L1782.96 1215.51 L1783.55 1215.51 L1784.13 1215.51 L1784.72 1215.51 L1785.31 1215.51 L1785.89 1215.51 L1786.48 1215.51 L1787.06 1215.51 L1787.65 1215.51 L1788.24 1215.51 L1788.82 1215.51 L1789.41 1215.51 L1790 1215.51 L1790.58 1215.51 L1791.17 1215.51 L1791.76 1215.51 L1792.34 1215.51 L1792.93 1215.51 L1793.52 1215.51 L1794.1 1215.51 L1794.69 1215.51 L1795.27 1215.51 L1795.86 1215.51 L1796.45 1215.51 L1797.03 1215.51 L1797.62 1215.51 L1798.21 1215.51 L1798.79 1215.51 L1799.38 1215.51 L1799.97 1215.51 L1800.55 1215.51 L1801.14 1215.51 L1801.73 1215.51 L1802.31 1215.51 L1802.9 1215.51 L1803.48 1215.51 L1804.07 1215.51 L1804.66 1215.51 L1805.24 1215.51 L1805.83 1215.51 L1806.42 1215.51 L1807 1215.51 L1807.59 1215.51 L1808.18 1215.51 L1808.76 1215.51 L1809.35 1215.51 L1809.94 1215.51 L1810.52 1215.51 L1811.11 1215.51 L1811.69 1215.51 L1812.28 1215.51 L1812.87 1215.51 L1813.45 1215.51 L1814.04 1215.51 L1814.63 1215.51 L1815.21 1215.51 L1815.8 1215.51 L1816.39 1215.51 L1816.97 1215.51 L1817.56 1215.51 L1818.14 1215.51 L1818.73 1215.51 L1819.32 1215.51 L1819.9 1215.51 L1820.49 1215.51 L1821.08 1215.51 L1821.66 1215.51 L1822.25 1215.51 L1822.84 1215.51 L1823.42 1215.51 L1824.01 1215.51 L1824.6 1215.51 L1825.18 1215.51 L1825.77 1215.51 L1826.35 1215.51 L1826.94 1215.51 L1827.53 1215.51 L1828.11 1215.51 L1828.7 1215.51 L1829.29 1215.51 L1829.87 1215.51 L1830.46 1215.51 L1831.05 1215.51 L1831.63 1215.51 L1832.22 1215.51 L1832.81 1215.51 L1833.39 1215.51 L1833.98 1215.51 L1834.56 1215.51 L1835.15 1215.51 L1835.74 1215.51 L1836.32 1215.51 L1836.91 1215.51 L1837.5 1215.51 L1838.08 1215.51 L1838.67 1215.51 L1839.26 1215.51 L1839.84 1215.51 L1840.43 1215.51 L1841.01 1215.51 L1841.6 1215.51 L1842.19 1215.51 L1842.77 1215.51 L1843.36 1215.51 L1843.95 1215.51 L1844.53 1215.51 L1845.12 1215.51 L1845.71 1215.51 L1846.29 1215.51 L1846.88 1215.51 L1847.47 1215.51 L1848.05 1215.51 L1848.64 1215.51 L1849.22 1215.51 L1849.81 1215.51 L1850.4 1215.51 L1850.98 1215.51 L1851.57 1215.51 L1852.16 1215.51 L1852.74 1215.51 L1853.33 1215.51 L1853.92 1215.51 L1854.5 1215.51 L1855.09 1215.51 L1855.68 1215.51 L1856.26 1215.51 L1856.85 1215.51 L1857.43 1215.51 L1858.02 1215.51 L1858.61 1215.51 L1859.19 1215.51 L1859.78 1215.51 L1860.37 1215.51 L1860.95 1215.51 L1861.54 1215.51 L1862.13 1215.51 L1862.71 1215.51 L1863.3 1215.51 L1863.88 1215.51 L1864.47 1215.51 L1865.06 1215.51 L1865.64 1215.51 L1866.23 1215.51 L1866.82 1215.51 L1867.4 1215.51 L1867.99 1215.51 L1868.58 1215.51 L1869.16 1215.51 L1869.75 1215.51 L1870.34 1215.51 L1870.92 1215.51 L1871.51 1215.51 L1872.09 1215.51 L1872.68 1215.51 L1873.27 1215.51 L1873.85 1215.51 L1874.44 1215.51 L1875.03 1215.51 L1875.61 1215.51 L1876.2 1215.51 L1876.79 1215.51 L1877.37 1215.51 L1877.96 1215.51 L1878.55 1215.51 L1879.13 1215.51 L1879.72 1215.51 L1880.3 1215.51 L1880.89 1215.51 L1881.48 1215.51 L1882.06 1215.51 L1882.65 1215.51 L1883.24 1215.51 L1883.82 1215.51 L1884.41 1215.51 L1885 1215.51 L1885.58 1215.51 L1886.17 1215.51 L1886.76 1215.51 L1887.34 1215.51 L1887.93 1215.51 L1888.51 1215.51 L1889.1 1215.51 L1889.69 1215.51 L1890.27 1215.51 L1890.86 1215.51 L1891.45 1215.51 L1892.03 1215.51 L1892.62 1215.51 L1893.21 1215.51 L1893.79 1215.51 L1894.38 1215.51 L1894.96 1215.51 L1895.55 1215.51 L1896.14 1215.51 L1896.72 1215.51 L1897.31 1215.51 L1897.9 1215.51 L1898.48 1215.51 L1899.07 1215.51 L1899.66 1215.51 L1900.24 1215.51 L1900.83 1215.51 L1901.42 1215.51 L1902 1215.51 L1902.59 1215.51 L1903.17 1215.51 L1903.76 1215.51 L1904.35 1215.51 L1904.93 1215.51 L1905.52 1215.51 L1906.11 1215.51 L1906.69 1215.51 L1907.28 1215.51 L1907.87 1215.51 L1908.45 1215.51 L1909.04 1215.51 L1909.63 1215.51 L1910.21 1215.51 L1910.8 1215.51 L1911.38 1215.51 L1911.97 1215.51 L1912.56 1215.51 L1913.14 1215.51 L1913.73 1215.51 L1914.32 1215.51 L1914.9 1215.51 L1915.49 1215.51 L1916.08 1215.51 L1916.66 1215.51 L1917.25 1215.51 L1917.83 1215.51 L1918.42 1215.51 L1919.01 1215.51 L1919.59 1215.51 L1920.18 1215.51 L1920.77 1215.51 L1921.35 1215.51 L1921.94 1215.51 L1922.53 1215.51 L1923.11 1215.51 L1923.7 1215.51 L1924.29 1215.51 L1924.87 1215.51 L1925.46 1215.51 L1926.04 1215.51 L1926.63 1215.51 L1927.22 1215.51 L1927.8 1215.51 L1928.39 1215.51 L1928.98 1215.51 L1929.56 1215.51 L1930.15 1215.51 L1930.74 1215.51 L1931.32 1215.51 L1931.91 1215.51 L1932.5 1215.51 L1933.08 1215.51 L1933.67 1215.51 L1934.25 1215.51 L1934.84 1215.51 L1935.43 1215.51 L1936.01 1215.51 L1936.6 1215.51 L1937.19 1215.51 L1937.77 1215.51 L1938.36 1215.51 L1938.95 1215.51 L1939.53 1215.51 L1940.12 1215.51 L1940.71 1215.51 L1941.29 1215.51 L1941.88 1215.51 L1942.46 1215.51 L1943.05 1215.51 L1943.64 1215.51 L1944.22 1215.51 L1944.81 1215.51 L1945.4 1215.51 L1945.98 1215.51 L1946.57 1215.51 L1947.16 1215.51 L1947.74 1215.51 L1948.33 1215.51 L1948.91 1215.51 L1949.5 1215.51 L1950.09 1215.51 L1950.67 1215.51 L1951.26 1215.51 L1951.85 1215.51 L1952.43 1215.51 L1953.02 1215.51 L1953.61 1215.51 L1954.19 1215.51 L1954.78 1215.51 L1955.37 1215.51 L1955.95 1215.51 L1956.54 1215.51 L1957.12 1215.51 L1957.71 1215.51 L1958.3 1215.51 L1958.88 1215.51 L1959.47 1215.51 L1960.06 1215.51 L1960.64 1215.51 L1961.23 1215.51 L1961.82 1215.51 L1962.4 1215.51 L1962.99 1215.51 L1963.58 1215.51 L1964.16 1215.51 L1964.75 1215.51 L1965.33 1215.51 L1965.92 1215.51 L1966.51 1215.51 L1967.09 1215.51 L1967.68 1215.51 L1968.27 1215.51 L1968.85 1215.51 L1969.44 1215.51 L1970.03 1215.51 L1970.61 1215.51 L1971.2 1215.51 L1971.78 1215.51 L1972.37 1215.51 L1972.96 1215.51 L1973.54 1215.51 L1974.13 1215.51 L1974.72 1215.51 L1975.3 1215.51 L1975.89 1215.51 L1976.48 1215.51 L1977.06 1215.51 L1977.65 1215.51 L1978.24 1215.51 L1978.82 1215.51 L1979.41 1215.51 L1979.99 1215.51 L1980.58 1215.51 L1981.17 1215.51 L1981.75 1215.51 L1982.34 1215.51 L1982.93 1215.51 L1983.51 1215.51 L1984.1 1215.51 L1984.69 1215.51 L1985.27 1215.51 L1985.86 1215.51 L1986.45 1215.51 L1987.03 1215.51 L1987.62 1215.51 L1988.2 1215.51 L1988.79 1215.51 L1989.38 1215.51 L1989.96 1215.51 L1990.55 1215.51 L1991.14 1215.51 L1991.72 1215.51 L1992.31 1215.51 L1992.9 1215.51 L1993.48 1215.51 L1994.07 1215.51 L1994.65 1215.51 L1995.24 1215.51 L1995.83 1215.51 L1996.41 1215.51 L1997 1215.51 L1997.59 1215.51 L1998.17 1215.51 L1998.76 1215.51 L1999.35 1215.51 L1999.93 1215.51 L2000.52 1215.51 L2001.11 1215.51 L2001.69 1215.51 L2002.28 1215.51 L2002.86 1215.51 L2003.45 1215.51 L2004.04 1215.51 L2004.62 1215.51 L2005.21 1215.51 L2005.8 1215.51 L2006.38 1215.51 L2006.97 1215.51 L2007.56 1215.51 L2008.14 1215.51 L2008.73 1215.51 L2009.32 1215.51 L2009.9 1215.51 L2010.49 1215.51 L2011.07 1215.51 L2011.66 1215.51 L2012.25 1215.51 L2012.83 1215.51 L2013.42 1215.51 L2014.01 1215.51 L2014.59 1215.51 L2015.18 1215.51 L2015.77 1215.51 L2016.35 1215.51 L2016.94 1215.51 L2017.53 1215.51 L2018.11 1215.51 L2018.7 1215.51 L2019.28 1215.51 L2019.87 1215.51 L2020.46 1215.51 L2021.04 1215.51 L2021.63 1215.51 L2022.22 1215.51 L2022.8 1215.51 L2023.39 1215.51 L2023.98 1215.51 L2024.56 1215.51 L2025.15 1215.51 L2025.73 1215.51 L2026.32 1215.51 L2026.91 1215.51 L2027.49 1215.51 L2028.08 1215.51 L2028.67 1215.51 L2029.25 1215.51 L2029.84 1215.51 L2030.43 1215.51 L2031.01 1215.51 L2031.6 1215.51 L2032.19 1215.51 L2032.77 1215.51 L2033.36 1215.51 L2033.94 1215.51 L2034.53 1215.51 L2035.12 1215.51 L2035.7 1215.51 L2036.29 1215.51 L2036.88 1215.51 L2037.46 1215.51 L2038.05 1215.51 L2038.64 1215.51 L2039.22 1215.51 L2039.81 1215.51 L2040.4 1215.51 L2040.98 1215.51 L2041.57 1215.51 L2042.15 1215.51 L2042.74 1215.51 L2043.33 1215.51 L2043.91 1215.51 L2044.5 1215.51 L2045.09 1215.51 L2045.67 1215.51 L2046.26 1215.51 L2046.85 1215.51 L2047.43 1215.51 L2048.02 1215.51 L2048.6 1215.51 L2049.19 1215.51 L2049.78 1215.51 L2050.36 1215.51 L2050.95 1215.51 L2051.54 1215.51 L2052.12 1215.51 L2052.71 1215.51 L2053.3 1215.51 L2053.88 1215.51 L2054.47 1215.51 L2055.06 1215.51 L2055.64 1215.51 L2056.23 1215.51 L2056.81 1215.51 L2057.4 1215.51 L2057.99 1215.51 L2058.57 1215.51 L2059.16 1215.51 L2059.75 1215.51 L2060.33 1215.51 L2060.92 1215.51 L2061.51 1215.51 L2062.09 1215.51 L2062.68 1215.51 L2063.27 1215.51 L2063.85 1215.51 L2064.44 1215.51 L2065.02 1215.51 L2065.61 1215.51 L2066.2 1215.51 L2066.78 1215.51 L2067.37 1215.51 L2067.96 1215.51 L2068.54 1215.51 L2069.13 1215.51 L2069.72 1215.51 L2070.3 1215.51 L2070.89 1215.51 L2071.48 1215.51 L2072.06 1215.51 L2072.65 1215.51 L2073.23 1215.51 L2073.82 1215.51 L2074.41 1215.51 L2074.99 1215.51 L2075.58 1215.51 L2076.17 1215.51 L2076.75 1215.51 L2077.34 1215.51 L2077.93 1215.51 L2078.51 1215.51 L2079.1 1215.51 L2079.68 1215.51 L2080.27 1215.51 L2080.86 1215.51 L2081.44 1215.51 L2082.03 1215.51 L2082.62 1215.51 L2083.2 1215.51 L2083.79 1215.51 L2084.38 1215.51 L2084.96 1215.51 L2085.55 1215.51 L2086.14 1215.51 L2086.72 1215.51 L2087.31 1215.51 L2087.89 1215.51 L2088.48 1215.51 L2089.07 1215.51 L2089.65 1215.51 L2090.24 1215.51 L2090.83 1215.51 L2091.41 1215.51 L2092 1215.51 L2092.59 1215.51 L2093.17 1215.51 L2093.76 1215.51 L2094.35 1215.51 L2094.93 1215.51 L2095.52 1215.51 L2096.1 1215.51 L2096.69 1215.51 L2097.28 1215.51 L2097.86 1215.51 L2098.45 1215.51 L2099.04 1215.51 L2099.62 1215.51 L2100.21 1215.51 L2100.8 1215.51 L2101.38 1215.51 L2101.97 1215.51 L2102.55 1215.51 L2103.14 1215.51 L2103.73 1215.51 L2104.31 1215.51 L2104.9 1215.51 L2105.49 1215.51 L2106.07 1215.51 L2106.66 1215.51 L2107.25 1215.51 L2107.83 1215.51 L2108.42 1215.51 L2109.01 1215.51 L2109.59 1215.51 L2110.18 1215.51 L2110.76 1215.51 L2111.35 1215.51 L2111.94 1215.51 L2112.52 1215.51 L2113.11 1215.51 L2113.7 1215.51 L2114.28 1215.51 L2114.87 1215.51 L2115.46 1215.51 L2116.04 1215.51 L2116.63 1215.51 L2117.22 1215.51 L2117.8 1215.51 L2118.39 1215.51 L2118.97 1215.51 L2119.56 1215.51 L2120.15 1215.51 L2120.73 1215.51 L2121.32 1215.51 L2121.91 1215.51 L2122.49 1215.51 L2123.08 1215.51 L2123.67 1215.51 L2124.25 1215.51 L2124.84 1215.51 L2125.42 1215.51 L2126.01 1215.51 L2126.6 1215.51 L2127.18 1215.51 L2127.77 1215.51 L2128.36 1215.51 L2128.94 1215.51 L2129.53 1215.51 L2130.12 1215.51 L2130.7 1215.51 L2131.29 1215.51 L2131.88 1215.51 L2132.46 1215.51 L2133.05 1215.51 L2133.63 1215.51 L2134.22 1215.51 L2134.81 1215.51 L2135.39 1215.51 L2135.98 1215.51 L2136.57 1215.51 L2137.15 1215.51 L2137.74 1215.51 L2138.33 1215.51 L2138.91 1215.51 L2139.5 1215.51 L2140.09 1215.51 L2140.67 1215.51 L2141.26 1215.51 L2141.84 1215.51 L2142.43 1215.51 L2143.02 1215.51 L2143.6 1215.51 L2144.19 1215.51 L2144.78 1215.51 L2145.36 1215.51 L2145.95 1215.51 L2146.54 1215.51 L2147.12 1215.51 L2147.71 1215.51 L2148.3 1215.51 L2148.88 1215.51 L2149.47 1215.51 L2150.05 1215.51 L2150.64 1215.51 L2151.23 1215.51 L2151.81 1215.51 L2152.4 1215.51 L2152.99 1215.51 L2153.57 1215.51 L2154.16 1215.51 L2154.75 1215.51 L2155.33 1215.51 L2155.92 1215.51 L2156.5 1215.51 L2157.09 1215.51 L2157.68 1215.51 L2158.26 1215.51 L2158.26 1214.76 L2157.68 1214.76 L2157.09 1214.76 L2156.5 1214.76 L2155.92 1214.76 L2155.33 1214.76 L2154.75 1214.76 L2154.16 1214.76 L2153.57 1214.76 L2152.99 1214.76 L2152.4 1214.76 L2151.81 1214.76 L2151.23 1214.76 L2150.64 1214.76 L2150.05 1214.76 L2149.47 1214.76 L2148.88 1214.76 L2148.3 1214.76 L2147.71 1214.76 L2147.12 1214.76 L2146.54 1214.76 L2145.95 1214.76 L2145.36 1214.76 L2144.78 1214.76 L2144.19 1214.76 L2143.6 1214.76 L2143.02 1214.76 L2142.43 1214.76 L2141.84 1214.76 L2141.26 1214.76 L2140.67 1214.76 L2140.09 1214.76 L2139.5 1214.76 L2138.91 1214.76 L2138.33 1214.76 L2137.74 1214.76 L2137.15 1214.76 L2136.57 1214.76 L2135.98 1214.76 L2135.39 1214.76 L2134.81 1214.76 L2134.22 1214.76 L2133.63 1214.76 L2133.05 1214.76 L2132.46 1214.76 L2131.88 1214.76 L2131.29 1214.76 L2130.7 1214.76 L2130.12 1214.76 L2129.53 1214.76 L2128.94 1214.76 L2128.36 1214.76 L2127.77 1214.76 L2127.18 1214.76 L2126.6 1214.76 L2126.01 1214.76 L2125.42 1214.76 L2124.84 1214.76 L2124.25 1214.76 L2123.67 1214.76 L2123.08 1214.76 L2122.49 1214.76 L2121.91 1214.76 L2121.32 1214.76 L2120.73 1214.76 L2120.15 1214.76 L2119.56 1214.76 L2118.97 1214.76 L2118.39 1214.76 L2117.8 1214.76 L2117.22 1214.76 L2116.63 1214.76 L2116.04 1214.76 L2115.46 1214.76 L2114.87 1214.76 L2114.28 1214.76 L2113.7 1214.76 L2113.11 1214.76 L2112.52 1214.76 L2111.94 1214.76 L2111.35 1214.76 L2110.76 1214.76 L2110.18 1214.76 L2109.59 1214.76 L2109.01 1214.76 L2108.42 1214.76 L2107.83 1214.76 L2107.25 1214.76 L2106.66 1214.76 L2106.07 1214.76 L2105.49 1214.76 L2104.9 1214.76 L2104.31 1214.76 L2103.73 1214.76 L2103.14 1214.76 L2102.55 1214.76 L2101.97 1214.76 L2101.38 1214.76 L2100.8 1214.76 L2100.21 1214.76 L2099.62 1214.76 L2099.04 1214.76 L2098.45 1214.76 L2097.86 1214.76 L2097.28 1214.76 L2096.69 1214.76 L2096.1 1214.76 L2095.52 1214.76 L2094.93 1214.76 L2094.35 1214.76 L2093.76 1214.76 L2093.17 1214.76 L2092.59 1214.76 L2092 1214.76 L2091.41 1214.76 L2090.83 1214.76 L2090.24 1214.76 L2089.65 1214.76 L2089.07 1214.76 L2088.48 1214.76 L2087.89 1214.76 L2087.31 1214.76 L2086.72 1214.76 L2086.14 1214.76 L2085.55 1214.76 L2084.96 1214.76 L2084.38 1214.76 L2083.79 1214.76 L2083.2 1214.76 L2082.62 1214.76 L2082.03 1214.76 L2081.44 1214.76 L2080.86 1214.76 L2080.27 1214.76 L2079.68 1214.76 L2079.1 1214.76 L2078.51 1214.76 L2077.93 1214.76 L2077.34 1214.76 L2076.75 1214.76 L2076.17 1214.76 L2075.58 1214.76 L2074.99 1214.76 L2074.41 1214.76 L2073.82 1214.76 L2073.23 1214.76 L2072.65 1214.76 L2072.06 1214.76 L2071.48 1214.76 L2070.89 1214.76 L2070.3 1214.76 L2069.72 1214.76 L2069.13 1214.76 L2068.54 1214.76 L2067.96 1214.76 L2067.37 1214.76 L2066.78 1214.76 L2066.2 1214.76 L2065.61 1214.76 L2065.02 1214.76 L2064.44 1214.76 L2063.85 1214.76 L2063.27 1214.76 L2062.68 1214.76 L2062.09 1214.76 L2061.51 1214.76 L2060.92 1214.76 L2060.33 1214.76 L2059.75 1214.76 L2059.16 1214.76 L2058.57 1214.76 L2057.99 1214.76 L2057.4 1214.76 L2056.81 1214.76 L2056.23 1214.76 L2055.64 1214.76 L2055.06 1214.76 L2054.47 1214.76 L2053.88 1214.76 L2053.3 1214.76 L2052.71 1214.76 L2052.12 1214.76 L2051.54 1214.76 L2050.95 1214.76 L2050.36 1214.76 L2049.78 1214.76 L2049.19 1214.76 L2048.6 1214.76 L2048.02 1214.76 L2047.43 1214.76 L2046.85 1214.76 L2046.26 1214.76 L2045.67 1214.76 L2045.09 1214.76 L2044.5 1214.76 L2043.91 1214.76 L2043.33 1214.76 L2042.74 1214.76 L2042.15 1214.76 L2041.57 1214.76 L2040.98 1214.76 L2040.4 1214.76 L2039.81 1214.76 L2039.22 1214.76 L2038.64 1214.76 L2038.05 1214.76 L2037.46 1214.76 L2036.88 1214.76 L2036.29 1214.76 L2035.7 1214.76 L2035.12 1214.76 L2034.53 1214.76 L2033.94 1214.76 L2033.36 1214.76 L2032.77 1214.76 L2032.19 1214.76 L2031.6 1214.76 L2031.01 1214.76 L2030.43 1214.76 L2029.84 1214.76 L2029.25 1214.76 L2028.67 1214.76 L2028.08 1214.76 L2027.49 1214.76 L2026.91 1214.76 L2026.32 1214.76 L2025.73 1214.76 L2025.15 1214.76 L2024.56 1214.76 L2023.98 1214.76 L2023.39 1214.76 L2022.8 1214.76 L2022.22 1214.76 L2021.63 1214.76 L2021.04 1214.76 L2020.46 1214.76 L2019.87 1214.76 L2019.28 1214.76 L2018.7 1214.76 L2018.11 1214.76 L2017.53 1214.76 L2016.94 1214.76 L2016.35 1214.76 L2015.77 1214.76 L2015.18 1214.76 L2014.59 1214.76 L2014.01 1214.76 L2013.42 1214.76 L2012.83 1214.76 L2012.25 1214.76 L2011.66 1214.76 L2011.07 1214.76 L2010.49 1214.76 L2009.9 1214.76 L2009.32 1214.76 L2008.73 1214.76 L2008.14 1214.76 L2007.56 1214.76 L2006.97 1214.76 L2006.38 1214.76 L2005.8 1214.76 L2005.21 1214.76 L2004.62 1214.76 L2004.04 1214.76 L2003.45 1214.76 L2002.86 1214.76 L2002.28 1214.76 L2001.69 1214.76 L2001.11 1214.76 L2000.52 1214.76 L1999.93 1214.76 L1999.35 1214.76 L1998.76 1214.76 L1998.17 1214.76 L1997.59 1214.76 L1997 1214.76 L1996.41 1214.76 L1995.83 1214.76 L1995.24 1214.76 L1994.65 1214.76 L1994.07 1214.76 L1993.48 1214.76 L1992.9 1214.76 L1992.31 1214.76 L1991.72 1214.76 L1991.14 1214.76 L1990.55 1214.76 L1989.96 1214.76 L1989.38 1214.76 L1988.79 1214.76 L1988.2 1214.76 L1987.62 1214.76 L1987.03 1214.76 L1986.45 1214.76 L1985.86 1214.76 L1985.27 1214.76 L1984.69 1214.76 L1984.1 1214.76 L1983.51 1214.76 L1982.93 1214.76 L1982.34 1214.76 L1981.75 1214.76 L1981.17 1214.76 L1980.58 1214.76 L1979.99 1214.76 L1979.41 1214.76 L1978.82 1214.76 L1978.24 1214.76 L1977.65 1214.76 L1977.06 1214.76 L1976.48 1214.76 L1975.89 1214.76 L1975.3 1214.76 L1974.72 1214.76 L1974.13 1214.76 L1973.54 1214.76 L1972.96 1214.76 L1972.37 1214.76 L1971.78 1214.76 L1971.2 1214.76 L1970.61 1214.76 L1970.03 1214.76 L1969.44 1214.76 L1968.85 1214.76 L1968.27 1214.76 L1967.68 1214.76 L1967.09 1214.76 L1966.51 1214.76 L1965.92 1214.76 L1965.33 1214.76 L1964.75 1214.76 L1964.16 1214.76 L1963.58 1214.76 L1962.99 1214.76 L1962.4 1214.76 L1961.82 1214.76 L1961.23 1214.76 L1960.64 1214.76 L1960.06 1214.76 L1959.47 1214.76 L1958.88 1214.76 L1958.3 1214.76 L1957.71 1214.76 L1957.12 1214.76 L1956.54 1214.76 L1955.95 1214.76 L1955.37 1214.76 L1954.78 1214.76 L1954.19 1214.76 L1953.61 1214.76 L1953.02 1214.76 L1952.43 1214.76 L1951.85 1214.76 L1951.26 1214.76 L1950.67 1214.76 L1950.09 1214.76 L1949.5 1214.76 L1948.91 1214.76 L1948.33 1214.76 L1947.74 1214.76 L1947.16 1214.76 L1946.57 1214.76 L1945.98 1214.76 L1945.4 1214.76 L1944.81 1214.76 L1944.22 1214.76 L1943.64 1214.76 L1943.05 1214.76 L1942.46 1214.76 L1941.88 1214.76 L1941.29 1214.76 L1940.71 1214.76 L1940.12 1214.76 L1939.53 1214.76 L1938.95 1214.76 L1938.36 1214.76 L1937.77 1214.76 L1937.19 1214.76 L1936.6 1214.76 L1936.01 1214.76 L1935.43 1214.76 L1934.84 1214.76 L1934.25 1214.76 L1933.67 1214.76 L1933.08 1214.76 L1932.5 1214.76 L1931.91 1214.76 L1931.32 1214.76 L1930.74 1214.76 L1930.15 1214.76 L1929.56 1214.76 L1928.98 1214.76 L1928.39 1214.76 L1927.8 1214.76 L1927.22 1214.76 L1926.63 1214.76 L1926.04 1214.76 L1925.46 1214.76 L1924.87 1214.76 L1924.29 1214.76 L1923.7 1214.76 L1923.11 1214.76 L1922.53 1214.76 L1921.94 1214.76 L1921.35 1214.76 L1920.77 1214.76 L1920.18 1214.76 L1919.59 1214.76 L1919.01 1214.76 L1918.42 1214.76 L1917.83 1214.76 L1917.25 1214.76 L1916.66 1214.76 L1916.08 1214.76 L1915.49 1214.76 L1914.9 1214.76 L1914.32 1214.76 L1913.73 1214.76 L1913.14 1214.76 L1912.56 1214.76 L1911.97 1214.76 L1911.38 1214.76 L1910.8 1214.76 L1910.21 1214.76 L1909.63 1214.76 L1909.04 1214.76 L1908.45 1214.76 L1907.87 1214.76 L1907.28 1214.76 L1906.69 1214.76 L1906.11 1214.76 L1905.52 1214.76 L1904.93 1214.76 L1904.35 1214.76 L1903.76 1214.76 L1903.17 1214.76 L1902.59 1214.76 L1902 1214.76 L1901.42 1214.76 L1900.83 1214.76 L1900.24 1214.76 L1899.66 1214.76 L1899.07 1214.76 L1898.48 1214.76 L1897.9 1214.76 L1897.31 1214.76 L1896.72 1214.76 L1896.14 1214.76 L1895.55 1214.76 L1894.96 1214.76 L1894.38 1214.76 L1893.79 1214.76 L1893.21 1214.76 L1892.62 1214.76 L1892.03 1214.76 L1891.45 1214.76 L1890.86 1214.76 L1890.27 1214.76 L1889.69 1214.76 L1889.1 1214.76 L1888.51 1214.76 L1887.93 1214.76 L1887.34 1214.76 L1886.76 1214.76 L1886.17 1214.76 L1885.58 1214.76 L1885 1214.76 L1884.41 1214.76 L1883.82 1214.76 L1883.24 1214.76 L1882.65 1214.76 L1882.06 1214.76 L1881.48 1214.76 L1880.89 1214.76 L1880.3 1214.76 L1879.72 1214.76 L1879.13 1214.76 L1878.55 1214.76 L1877.96 1214.76 L1877.37 1214.76 L1876.79 1214.76 L1876.2 1214.76 L1875.61 1214.76 L1875.03 1214.76 L1874.44 1214.76 L1873.85 1214.76 L1873.27 1214.76 L1872.68 1214.76 L1872.09 1214.76 L1871.51 1214.76 L1870.92 1214.76 L1870.34 1214.76 L1869.75 1214.76 L1869.16 1214.76 L1868.58 1214.76 L1867.99 1214.76 L1867.4 1214.76 L1866.82 1214.76 L1866.23 1214.76 L1865.64 1214.76 L1865.06 1214.76 L1864.47 1214.76 L1863.88 1214.76 L1863.3 1214.76 L1862.71 1214.76 L1862.13 1214.76 L1861.54 1214.76 L1860.95 1214.76 L1860.37 1214.76 L1859.78 1214.76 L1859.19 1214.76 L1858.61 1214.76 L1858.02 1214.76 L1857.43 1214.76 L1856.85 1214.76 L1856.26 1214.76 L1855.68 1214.76 L1855.09 1214.76 L1854.5 1214.76 L1853.92 1214.76 L1853.33 1214.76 L1852.74 1214.76 L1852.16 1214.76 L1851.57 1214.76 L1850.98 1214.76 L1850.4 1214.76 L1849.81 1214.76 L1849.22 1214.76 L1848.64 1214.76 L1848.05 1214.76 L1847.47 1214.76 L1846.88 1214.76 L1846.29 1214.76 L1845.71 1214.76 L1845.12 1214.76 L1844.53 1214.76 L1843.95 1214.76 L1843.36 1214.76 L1842.77 1214.76 L1842.19 1214.76 L1841.6 1214.76 L1841.01 1214.76 L1840.43 1214.76 L1839.84 1214.76 L1839.26 1214.76 L1838.67 1214.76 L1838.08 1214.76 L1837.5 1214.76 L1836.91 1214.76 L1836.32 1214.76 L1835.74 1214.76 L1835.15 1214.76 L1834.56 1214.76 L1833.98 1214.76 L1833.39 1214.76 L1832.81 1214.76 L1832.22 1214.76 L1831.63 1214.76 L1831.05 1214.76 L1830.46 1214.76 L1829.87 1214.76 L1829.29 1214.76 L1828.7 1214.76 L1828.11 1214.76 L1827.53 1214.76 L1826.94 1214.76 L1826.35 1214.76 L1825.77 1214.76 L1825.18 1214.76 L1824.6 1214.76 L1824.01 1214.76 L1823.42 1214.76 L1822.84 1214.76 L1822.25 1214.76 L1821.66 1214.76 L1821.08 1214.76 L1820.49 1214.76 L1819.9 1214.76 L1819.32 1214.76 L1818.73 1214.76 L1818.14 1214.76 L1817.56 1214.76 L1816.97 1214.76 L1816.39 1214.76 L1815.8 1214.76 L1815.21 1214.76 L1814.63 1214.76 L1814.04 1214.76 L1813.45 1214.76 L1812.87 1214.76 L1812.28 1214.76 L1811.69 1214.76 L1811.11 1214.76 L1810.52 1214.76 L1809.94 1214.76 L1809.35 1214.76 L1808.76 1214.76 L1808.18 1214.76 L1807.59 1214.76 L1807 1214.76 L1806.42 1214.76 L1805.83 1214.76 L1805.24 1214.76 L1804.66 1214.76 L1804.07 1214.76 L1803.48 1214.76 L1802.9 1214.76 L1802.31 1214.76 L1801.73 1214.76 L1801.14 1214.76 L1800.55 1214.76 L1799.97 1214.76 L1799.38 1214.76 L1798.79 1214.76 L1798.21 1214.76 L1797.62 1214.76 L1797.03 1214.76 L1796.45 1214.76 L1795.86 1214.76 L1795.27 1214.76 L1794.69 1214.76 L1794.1 1214.76 L1793.52 1214.76 L1792.93 1214.76 L1792.34 1214.76 L1791.76 1214.76 L1791.17 1214.76 L1790.58 1214.76 L1790 1214.76 L1789.41 1214.76 L1788.82 1214.76 L1788.24 1214.76 L1787.65 1214.76 L1787.06 1214.76 L1786.48 1214.76 L1785.89 1214.76 L1785.31 1214.76 L1784.72 1214.76 L1784.13 1214.76 L1783.55 1214.76 L1782.96 1214.76 L1782.37 1214.76 L1781.79 1214.76 L1781.2 1214.76 L1780.61 1214.76 L1780.03 1214.76 L1779.44 1214.76 L1778.86 1214.76 L1778.27 1214.76 L1777.68 1214.76 L1777.1 1214.76 L1776.51 1214.76 L1775.92 1214.76 L1775.34 1214.76 L1774.75 1214.76 L1774.16 1214.76 L1773.58 1214.76 L1772.99 1214.76 L1772.4 1214.76 L1771.82 1214.76 L1771.23 1214.76 L1770.65 1214.76 L1770.06 1214.76 L1769.47 1214.76 L1768.89 1214.76 L1768.3 1214.76 L1767.71 1214.76 L1767.13 1214.76 L1766.54 1214.76 L1765.95 1214.76 L1765.37 1214.76 L1764.78 1214.76 L1764.19 1214.76 L1763.61 1214.76 L1763.02 1214.76 L1762.44 1214.76 L1761.85 1214.76 L1761.26 1214.76 L1760.68 1214.76 L1760.09 1214.76 L1759.5 1214.76 L1758.92 1214.76 L1758.33 1214.76 L1757.74 1214.76 L1757.16 1214.76 L1756.57 1214.76 L1755.99 1214.76 L1755.4 1214.76 L1754.81 1214.76 L1754.23 1214.76 L1753.64 1214.76 L1753.05 1214.76 L1752.47 1214.76 L1751.88 1214.76 L1751.29 1214.76 L1750.71 1214.76 L1750.12 1214.76 L1749.53 1214.76 L1748.95 1214.76 L1748.36 1214.76 L1747.78 1214.76 L1747.19 1214.76 L1746.6 1214.76 L1746.02 1214.76 L1745.43 1214.76 L1744.84 1214.76 L1744.26 1214.76 L1743.67 1214.76 L1743.08 1214.76 L1742.5 1214.76 L1741.91 1214.76 L1741.32 1214.76 L1740.74 1214.76 L1740.15 1214.76 L1739.57 1214.76 L1738.98 1214.76 L1738.39 1214.76 L1737.81 1214.76 L1737.22 1214.76 L1736.63 1214.76 L1736.05 1214.76 L1735.46 1214.76 L1734.87 1214.76 L1734.29 1214.76 L1733.7 1214.76 L1733.11 1214.76 L1732.53 1214.76 L1731.94 1214.76 L1731.36 1214.76 L1730.77 1214.76 L1730.18 1214.76 L1729.6 1214.76 L1729.01 1214.76 L1728.42 1214.76 L1727.84 1214.76 L1727.25 1214.76 L1726.66 1214.76 L1726.08 1214.76 L1725.49 1214.76 L1724.91 1214.76 L1724.32 1214.76 L1723.73 1214.76 L1723.15 1214.76 L1722.56 1214.76 L1721.97 1214.76 L1721.39 1214.76 L1720.8 1214.76 L1720.21 1214.76 L1719.63 1214.76 L1719.04 1214.76 L1718.45 1214.76 L1717.87 1214.76 L1717.28 1214.76 L1716.7 1214.76 L1716.11 1214.76 L1715.52 1214.76 L1714.94 1214.76 L1714.35 1214.76 L1713.76 1214.76 L1713.18 1214.76 L1712.59 1214.76 L1712 1214.76 L1711.42 1214.76 L1710.83 1214.76 L1710.24 1214.76 L1709.66 1214.76 L1709.07 1214.76 L1708.49 1214.76 L1707.9 1214.76 L1707.31 1214.76 L1706.73 1214.76 L1706.14 1214.76 L1705.55 1214.76 L1704.97 1214.76 L1704.38 1214.76 L1703.79 1214.76 L1703.21 1214.76 L1702.62 1214.76 L1702.04 1214.76 L1701.45 1214.76 L1700.86 1214.76 L1700.28 1214.76 L1699.69 1214.76 L1699.1 1214.76 L1698.52 1214.76 L1697.93 1214.76 L1697.34 1214.76 L1696.76 1214.76 L1696.17 1214.76 L1695.58 1214.76 L1695 1214.76 L1694.41 1214.76 L1693.83 1214.76 L1693.24 1214.76 L1692.65 1214.76 L1692.07 1214.76 L1691.48 1214.76 L1690.89 1214.76 L1690.31 1214.76 L1689.72 1214.76 L1689.13 1214.76 L1688.55 1214.76 L1687.96 1214.76 L1687.37 1214.76 L1686.79 1214.76 L1686.2 1214.76 L1685.62 1214.76 L1685.03 1214.76 L1684.44 1214.76 L1683.86 1214.76 L1683.27 1214.76 L1682.68 1214.76 L1682.1 1214.76 L1681.51 1214.76 L1680.92 1214.76 L1680.34 1214.76 L1679.75 1214.76 L1679.17 1214.76 L1678.58 1214.76 L1677.99 1214.76 L1677.41 1214.76 L1676.82 1214.76 L1676.23 1214.76 L1675.65 1214.76 L1675.06 1214.76 L1674.47 1214.76 L1673.89 1214.76 L1673.3 1214.76 L1672.71 1214.76 L1672.13 1214.76 L1671.54 1214.76 L1670.96 1214.76 L1670.37 1214.76 L1669.78 1214.76 L1669.2 1214.76 L1668.61 1214.76 L1668.02 1214.76 L1667.44 1214.76 L1666.85 1214.76 L1666.26 1214.76 L1665.68 1214.76 L1665.09 1214.76 L1664.5 1214.76 L1663.92 1214.76 L1663.33 1214.76 L1662.75 1214.76 L1662.16 1214.76 L1661.57 1214.76 L1660.99 1214.76 L1660.4 1214.76 L1659.81 1214.76 L1659.23 1214.76 L1658.64 1214.76 L1658.05 1214.76 L1657.47 1214.76 L1656.88 1214.76 L1656.29 1214.76 L1655.71 1214.76 L1655.12 1214.76 L1654.54 1214.76 L1653.95 1214.76 L1653.36 1214.76 L1652.78 1214.76 L1652.19 1214.76 L1651.6 1214.76 L1651.02 1214.76 L1650.43 1214.76 L1649.84 1214.76 L1649.26 1214.76 L1648.67 1214.76 L1648.09 1214.76 L1647.5 1214.76 L1646.91 1214.76 L1646.33 1214.76 L1645.74 1214.76 L1645.15 1214.76 L1644.57 1214.76 L1643.98 1214.76 L1643.39 1214.76 L1642.81 1214.76 L1642.22 1214.76 L1641.63 1214.76 L1641.05 1214.76 L1640.46 1214.76 L1639.88 1214.76 L1639.29 1214.76 L1638.7 1214.76 L1638.12 1214.76 L1637.53 1214.76 L1636.94 1214.76 L1636.36 1214.76 L1635.77 1214.76 L1635.18 1214.76 L1634.6 1214.76 L1634.01 1214.76 L1633.42 1214.76 L1632.84 1214.76 L1632.25 1214.76 L1631.67 1214.76 L1631.08 1214.76 L1630.49 1214.76 L1629.91 1214.76 L1629.32 1214.76 L1628.73 1214.76 L1628.15 1214.76 L1627.56 1214.76 L1626.97 1214.76 L1626.39 1214.76 L1625.8 1214.76 L1625.22 1214.76 L1624.63 1214.76 L1624.04 1214.76 L1623.46 1214.76 L1622.87 1214.76 L1622.28 1214.76 L1621.7 1214.76 L1621.11 1214.76 L1620.52 1214.76 L1619.94 1214.76 L1619.35 1214.76 L1618.76 1214.76 L1618.18 1214.76 L1617.59 1214.76 L1617.01 1214.76 L1616.42 1214.76 L1615.83 1214.76 L1615.25 1214.76 L1614.66 1214.76 L1614.07 1214.76 L1613.49 1214.76 L1612.9 1214.76 L1612.31 1214.76 L1611.73 1214.76 L1611.14 1214.76 L1610.55 1214.76 L1609.97 1214.76 L1609.38 1214.76 L1608.8 1214.76 L1608.21 1214.76 L1607.62 1214.76 L1607.04 1214.76 L1606.45 1214.76 L1605.86 1214.76 L1605.28 1214.76 L1604.69 1214.76 L1604.1 1214.76 L1603.52 1214.76 L1602.93 1214.76 L1602.34 1214.76 L1601.76 1214.76 L1601.17 1214.76 L1600.59 1214.76 L1600 1214.76 L1599.41 1214.76 L1598.83 1214.76 L1598.24 1214.76 L1597.65 1214.76 L1597.07 1214.76 L1596.48 1214.76 L1595.89 1214.76 L1595.31 1214.76 L1594.72 1214.76 L1594.14 1214.76 L1593.55 1214.76 L1592.96 1214.76 L1592.38 1214.76 L1591.79 1214.76 L1591.2 1214.76 L1590.62 1214.76 L1590.03 1214.76 L1589.44 1214.76 L1588.86 1214.76 L1588.27 1214.76 L1587.68 1214.76 L1587.1 1214.76 L1586.51 1214.76 L1585.93 1214.76 L1585.34 1214.76 L1584.75 1214.76 L1584.17 1214.76 L1583.58 1214.76 L1582.99 1214.76 L1582.41 1214.76 L1581.82 1214.76 L1581.23 1214.76 L1580.65 1214.76 L1580.06 1214.76 L1579.47 1214.76 L1578.89 1214.76 L1578.3 1214.76 L1577.72 1214.76 L1577.13 1214.76 L1576.54 1214.76 L1575.96 1214.76 L1575.37 1214.76 L1574.78 1214.76 L1574.2 1214.76 L1573.61 1214.76 L1573.02 1214.76 L1572.44 1214.76 L1571.85 1214.76 L1571.27 1214.76 L1570.68 1214.76 L1570.09 1214.76 L1569.51 1214.76 L1568.92 1214.76 L1568.33 1214.76 L1567.75 1214.76 L1567.16 1214.76 L1566.57 1214.76 L1565.99 1214.76 L1565.4 1214.76 L1564.81 1214.76 L1564.23 1214.76 L1563.64 1214.76 L1563.06 1214.76 L1562.47 1214.76 L1561.88 1214.76 L1561.3 1214.76 L1560.71 1214.76 L1560.12 1214.76 L1559.54 1214.76 L1558.95 1214.76 L1558.36 1214.76 L1557.78 1214.76 L1557.19 1214.76 L1556.6 1214.76 L1556.02 1214.76 L1555.43 1214.76 L1554.85 1214.76 L1554.26 1214.76 L1553.67 1214.76 L1553.09 1214.76 L1552.5 1214.76 L1551.91 1214.76 L1551.33 1214.76 L1550.74 1214.76 L1550.15 1214.76 L1549.57 1214.76 L1548.98 1214.76 L1548.4 1214.76 L1547.81 1214.76 L1547.22 1214.76 L1546.64 1214.76 L1546.05 1214.76 L1545.46 1214.76 L1544.88 1214.76 L1544.29 1214.76 L1543.7 1214.76 L1543.12 1214.76 L1542.53 1214.76 L1541.94 1214.76 L1541.36 1214.76 L1540.77 1214.76 L1540.19 1214.76 L1539.6 1214.76 L1539.01 1214.76 L1538.43 1214.76 L1537.84 1214.76 L1537.25 1214.76 L1536.67 1214.76 L1536.08 1214.76 L1535.49 1214.76 L1534.91 1214.76 L1534.32 1214.76 L1533.73 1214.76 L1533.15 1214.76 L1532.56 1214.76 L1531.98 1214.76 L1531.39 1214.76 L1530.8 1214.76 L1530.22 1214.76 L1529.63 1214.76 L1529.04 1214.76 L1528.46 1214.76 L1527.87 1214.76 L1527.28 1214.76 L1526.7 1214.76 L1526.11 1214.76 L1525.52 1214.76 L1524.94 1214.76 L1524.35 1214.76 L1523.77 1214.76 L1523.18 1214.76 L1522.59 1214.76 L1522.01 1214.76 L1521.42 1214.76 L1520.83 1214.76 L1520.25 1214.76 L1519.66 1214.76 L1519.07 1214.76 L1518.49 1214.76 L1517.9 1214.76 L1517.32 1214.76 L1516.73 1214.76 L1516.14 1214.76 L1515.56 1214.76 L1514.97 1214.76 L1514.38 1214.76 L1513.8 1214.76 L1513.21 1214.76 L1512.62 1214.76 L1512.04 1214.76 L1511.45 1214.76 L1510.86 1214.76 L1510.28 1214.76 L1509.69 1214.76 L1509.11 1214.76 L1508.52 1214.76 L1507.93 1214.76 L1507.35 1214.76 L1506.76 1214.76 L1506.17 1214.76 L1505.59 1214.76 L1505 1214.76 L1504.41 1214.76 L1503.83 1214.76 L1503.24 1214.76 L1502.65 1214.76 L1502.07 1214.76 L1501.48 1214.76 L1500.9 1214.76 L1500.31 1214.76 L1499.72 1214.76 L1499.14 1214.76 L1498.55 1214.76 L1497.96 1214.76 L1497.38 1214.76 L1496.79 1214.76 L1496.2 1214.76 L1495.62 1214.76 L1495.03 1214.76 L1494.45 1214.76 L1493.86 1214.76 L1493.27 1214.76 L1492.69 1214.76 L1492.1 1214.76 L1491.51 1214.76 L1490.93 1214.76 L1490.34 1214.76 L1489.75 1214.76 L1489.17 1214.76 L1488.58 1214.76 L1487.99 1214.76 L1487.41 1214.76 L1486.82 1214.76 L1486.24 1214.76 L1485.65 1214.76 L1485.06 1214.76 L1484.48 1214.76 L1483.89 1214.76 L1483.3 1214.76 L1482.72 1214.76 L1482.13 1214.76 L1481.54 1214.76 L1480.96 1214.76 L1480.37 1214.76 L1479.78 1214.76 L1479.2 1214.76 L1478.61 1214.76 L1478.03 1214.76 L1477.44 1214.76 L1476.85 1214.76 L1476.27 1214.76 L1475.68 1214.76 L1475.09 1214.76 L1474.51 1214.76 L1473.92 1214.76 L1473.33 1214.76 L1472.75 1214.76 L1472.16 1214.76 L1471.57 1214.76 L1470.99 1214.76 L1470.4 1214.76 L1469.82 1214.76 L1469.23 1214.76 L1468.64 1214.76 L1468.06 1214.76 L1467.47 1214.76 L1466.88 1214.76 L1466.3 1214.76 L1465.71 1214.76 L1465.12 1214.76 L1464.54 1214.76 L1463.95 1214.76 L1463.37 1214.76 L1462.78 1214.76 L1462.19 1214.76 L1461.61 1214.76 L1461.02 1214.76 L1460.43 1214.76 L1459.85 1214.76 L1459.26 1214.76 L1458.67 1214.76 L1458.09 1214.76 L1457.5 1214.76 L1456.91 1214.76 L1456.33 1214.76 L1455.74 1214.76 L1455.16 1214.76 L1454.57 1214.76 L1453.98 1214.76 L1453.4 1214.76 L1452.81 1214.76 L1452.22 1214.76 L1451.64 1214.76 L1451.05 1214.76 L1450.46 1214.76 L1449.88 1214.76 L1449.29 1214.76 L1448.7 1214.76 L1448.12 1214.76 L1447.53 1214.76 L1446.95 1214.76 L1446.36 1214.76 L1445.77 1214.76 L1445.19 1214.76 L1444.6 1214.76 L1444.01 1214.76 L1443.43 1214.76 L1442.84 1214.76 L1442.25 1214.76 L1441.67 1214.76 L1441.08 1214.76 L1440.5 1214.76 L1439.91 1214.76 L1439.32 1214.76 L1438.74 1214.76 L1438.15 1214.76 L1437.56 1214.76 L1436.98 1214.76 L1436.39 1214.76 L1435.8 1214.76 L1435.22 1214.76 L1434.63 1214.76 L1434.04 1214.76 L1433.46 1214.76 L1432.87 1214.76 L1432.29 1214.76 L1431.7 1214.76 L1431.11 1214.76 L1430.53 1214.76 L1429.94 1214.76 L1429.35 1214.76 L1428.77 1214.76 L1428.18 1214.76 L1427.59 1214.76 L1427.01 1214.76 L1426.42 1214.76 L1425.83 1214.76 L1425.25 1214.76 L1424.66 1214.76 L1424.08 1214.76 L1423.49 1214.76 L1422.9 1214.76 L1422.32 1214.76 L1421.73 1214.76 L1421.14 1214.76 L1420.56 1214.76 L1419.97 1214.76 L1419.38 1214.76 L1418.8 1214.76 L1418.21 1214.76 L1417.63 1214.76 L1417.04 1214.76 L1416.45 1214.76 L1415.87 1214.76 L1415.28 1214.76 L1414.69 1214.76 L1414.11 1214.76 L1413.52 1214.76 L1412.93 1214.76 L1412.35 1214.76 L1411.76 1214.76 L1411.17 1214.76 L1410.59 1214.76 L1410 1214.76 L1409.42 1214.76 L1408.83 1214.76 L1408.24 1214.76 L1407.66 1214.76 L1407.07 1214.76 L1406.48 1214.76 L1405.9 1214.76 L1405.31 1214.76 L1404.72 1214.76 L1404.14 1214.76 L1403.55 1214.76 L1402.96 1214.76 L1402.38 1214.76 L1401.79 1214.76 L1401.21 1214.76 L1400.62 1214.76 L1400.03 1214.76 L1399.45 1214.76 L1398.86 1214.76 L1398.27 1214.76 L1397.69 1214.76 L1397.1 1214.76 L1396.51 1214.76 L1395.93 1214.76 L1395.34 1214.76 L1394.75 1214.76 L1394.17 1214.76 L1393.58 1214.76 L1393 1214.76 L1392.41 1214.76 L1391.82 1214.76 L1391.24 1214.76 L1390.65 1214.76 L1390.06 1214.76 L1389.48 1214.76 L1388.89 1214.76 L1388.3 1214.76 L1387.72 1214.76 L1387.13 1214.76 L1386.55 1214.76 L1385.96 1214.76 L1385.37 1214.76 L1384.79 1214.76 L1384.2 1214.76 L1383.61 1214.76 L1383.03 1214.76 L1382.44 1214.76 L1381.85 1214.76 L1381.27 1214.76 L1380.68 1214.76 L1380.09 1214.76 L1379.51 1214.76 L1378.92 1214.76 L1378.34 1214.76 L1377.75 1214.76 L1377.16 1214.76 L1376.58 1214.76 L1375.99 1214.76 L1375.4 1214.76 L1374.82 1214.76 L1374.23 1214.76 L1373.64 1214.76 L1373.06 1214.76 L1372.47 1214.76 L1371.88 1214.76 L1371.3 1214.76 L1370.71 1214.76 L1370.13 1214.76 L1369.54 1214.76 L1368.95 1214.76 L1368.37 1214.76 L1367.78 1214.76 L1367.19 1214.76 L1366.61 1214.76 L1366.02 1214.76 L1365.43 1214.76 L1364.85 1214.76 L1364.26 1214.76 L1363.68 1214.76 L1363.09 1214.76 L1362.5 1214.76 L1361.92 1214.76 L1361.33 1214.76 L1360.74 1214.76 L1360.16 1214.76 L1359.57 1214.76 L1358.98 1214.76 L1358.4 1214.76 L1357.81 1214.76 L1357.22 1214.76 L1356.64 1214.76 L1356.05 1214.76 L1355.47 1214.76 L1354.88 1214.76 L1354.29 1214.76 L1353.71 1214.76 L1353.12 1214.76 L1352.53 1214.76 L1351.95 1214.76 L1351.36 1214.76 L1350.77 1214.76 L1350.19 1214.76 L1349.6 1214.76 L1349.01 1214.76 L1348.43 1214.76 L1347.84 1214.76 L1347.26 1214.76 L1346.67 1214.76 L1346.08 1214.76 L1345.5 1214.76 L1344.91 1214.76 L1344.32 1214.76 L1343.74 1214.76 L1343.15 1214.76 L1342.56 1214.76 L1341.98 1214.76 L1341.39 1214.76 L1340.8 1214.76 L1340.22 1214.76 L1339.63 1214.76 L1339.05 1214.76 L1338.46 1214.76 L1337.87 1214.76 L1337.29 1214.76 L1336.7 1214.76 L1336.11 1214.76 L1335.53 1214.76 L1334.94 1214.76 L1334.35 1214.76 L1333.77 1214.76 L1333.18 1214.76 L1332.6 1214.76 L1332.01 1214.76 L1331.42 1214.76 L1330.84 1214.76 L1330.25 1214.76 L1329.66 1214.76 L1329.08 1214.76 L1328.49 1214.76 L1327.9 1214.76 L1327.32 1214.76 L1326.73 1214.76 L1326.14 1214.76 L1325.56 1214.76 L1324.97 1214.76 L1324.39 1214.76 L1323.8 1214.76 L1323.21 1214.76 L1322.63 1214.76 L1322.04 1214.76 L1321.45 1214.76 L1320.87 1214.76 L1320.28 1214.76 L1319.69 1214.76 L1319.11 1214.76 L1318.52 1214.76 L1317.93 1214.76 L1317.35 1214.76 L1316.76 1214.76 L1316.18 1214.76 L1315.59 1214.76 L1315 1214.76 L1314.42 1214.76 L1313.83 1214.76 L1313.24 1214.76 L1312.66 1214.76 L1312.07 1214.76 L1311.48 1214.76 L1310.9 1214.76 L1310.31 1214.76 L1309.73 1214.76 L1309.14 1214.76 L1308.55 1214.76 L1307.97 1214.76 L1307.38 1214.76 L1306.79 1214.76 L1306.21 1214.76 L1305.62 1214.76 L1305.03 1214.76 L1304.45 1214.76 L1303.86 1214.76 L1303.27 1214.76 L1302.69 1214.76 L1302.1 1214.76 L1301.52 1214.76 L1300.93 1214.76 L1300.34 1214.76 L1299.76 1214.76 L1299.17 1214.76 L1298.58 1214.76 L1298 1214.76 L1297.41 1214.76 L1296.82 1214.76 L1296.24 1214.76 L1295.65 1214.76 L1295.06 1214.76 L1294.48 1214.76 L1293.89 1214.76 L1293.31 1214.76 L1292.72 1214.76 L1292.13 1214.76 L1291.55 1214.76 L1290.96 1214.76 L1290.37 1214.76 L1289.79 1214.76 L1289.2 1214.76 L1288.61 1214.76 L1288.03 1214.76 L1287.44 1214.76 L1286.86 1214.76 L1286.27 1214.76 L1285.68 1214.76 L1285.1 1214.76 L1284.51 1214.76 L1283.92 1214.76 L1283.34 1214.76 L1282.75 1214.76 L1282.16 1214.76 L1281.58 1214.76 L1280.99 1214.76 L1280.4 1214.76 L1279.82 1214.76 L1279.23 1214.76 L1278.65 1214.76 L1278.06 1214.76 L1277.47 1214.76 L1276.89 1214.76 L1276.3 1214.76 L1275.71 1214.76 L1275.13 1214.76 L1274.54 1214.76 L1273.95 1214.76 L1273.37 1214.76 L1272.78 1214.76 L1272.19 1214.76 L1271.61 1214.76 L1271.02 1214.76 L1270.44 1214.76 L1269.85 1214.76 L1269.26 1214.76 L1268.68 1214.76 L1268.09 1214.76 L1267.5 1214.76 L1266.92 1214.76 L1266.33 1214.76 L1265.74 1214.76 L1265.16 1214.76 L1264.57 1214.76 L1263.98 1214.76 L1263.4 1214.76 L1262.81 1214.76 L1262.23 1214.76 L1261.64 1214.76 L1261.05 1214.76 L1260.47 1214.76 L1259.88 1214.76 L1259.29 1214.76 L1258.71 1214.76 L1258.12 1214.76 L1257.53 1214.76 L1256.95 1214.76 L1256.36 1214.76 L1255.78 1214.76 L1255.19 1214.76 L1254.6 1214.76 L1254.02 1214.76 L1253.43 1214.76 L1252.84 1214.76 L1252.26 1214.76 L1251.67 1214.76 L1251.08 1214.76 L1250.5 1214.76 L1249.91 1214.76 L1249.32 1214.76 L1248.74 1214.76 L1248.15 1214.76 L1247.57 1214.76 L1246.98 1214.76 L1246.39 1214.76 L1245.81 1214.76 L1245.22 1214.76 L1244.63 1214.76 L1244.05 1214.76 L1243.46 1214.76 L1242.87 1214.76 L1242.29 1214.76 L1241.7 1214.76 L1241.11 1214.76 L1240.53 1214.76 L1239.94 1214.76 L1239.36 1214.76 L1238.77 1214.76 L1238.18 1214.76 L1237.6 1214.76 L1237.01 1214.76 L1236.42 1214.76 L1235.84 1214.76 L1235.25 1214.76 L1234.66 1214.76 L1234.08 1214.76 L1233.49 1214.76 L1232.91 1214.76 L1232.32 1214.76 L1231.73 1214.76 L1231.15 1214.76 L1230.56 1214.76 L1229.97 1214.76 L1229.39 1214.76 L1228.8 1214.76 L1228.21 1214.76 L1227.63 1214.76 L1227.04 1214.76 L1226.45 1214.76 L1225.87 1214.76 L1225.28 1214.76 L1224.7 1214.76 L1224.11 1214.76 L1223.52 1214.76 L1222.94 1214.76 L1222.35 1214.76 L1221.76 1214.76 L1221.18 1214.76 L1220.59 1214.76 L1220 1214.76 L1219.42 1214.76 L1218.83 1214.76 L1218.24 1214.76 L1217.66 1214.76 L1217.07 1214.76 L1216.49 1214.76 L1215.9 1214.76 L1215.31 1214.76 L1214.73 1214.76 L1214.14 1214.76 L1213.55 1214.76 L1212.97 1214.76 L1212.38 1214.76 L1211.79 1214.76 L1211.21 1214.76 L1210.62 1214.76 L1210.03 1214.76 L1209.45 1214.76 L1208.86 1214.76 L1208.28 1214.76 L1207.69 1214.76 L1207.1 1214.76 L1206.52 1214.76 L1205.93 1214.76 L1205.34 1214.76 L1204.76 1214.76 L1204.17 1214.76 L1203.58 1214.76 L1203 1214.76 L1202.41 1214.76 L1201.83 1214.76 L1201.24 1214.76 L1200.65 1214.76 L1200.07 1214.76 L1199.48 1214.76 L1198.89 1214.76 L1198.31 1214.76 L1197.72 1214.76 L1197.13 1214.76 L1196.55 1214.76 L1195.96 1214.76 L1195.37 1214.76 L1194.79 1214.76 L1194.2 1214.76 L1193.62 1214.76 L1193.03 1214.76 L1192.44 1214.76 L1191.86 1214.76 L1191.27 1214.76 L1190.68 1214.76 L1190.1 1214.76 L1189.51 1214.76 L1188.92 1214.76 L1188.34 1214.76 L1187.75 1214.76 L1187.16 1214.76 L1186.58 1214.76 L1185.99 1214.76 L1185.41 1214.76 L1184.82 1214.76 L1184.23 1214.76 L1183.65 1214.76 L1183.06 1214.76 L1182.47 1214.76 L1181.89 1214.76 L1181.3 1214.76 L1180.71 1214.76 L1180.13 1214.76 L1179.54 1214.76 L1178.96 1214.76 L1178.37 1214.76 L1177.78 1214.76 L1177.2 1214.76 L1176.61 1214.76 L1176.02 1214.76 L1175.44 1214.76 L1174.85 1214.76 L1174.26 1214.76 L1173.68 1214.76 L1173.09 1214.76 L1172.5 1214.76 L1171.92 1214.76 L1171.33 1214.76 L1170.75 1214.76 L1170.16 1214.76 L1169.57 1214.76 L1168.99 1214.76 L1168.4 1214.76 L1167.81 1214.76 L1167.23 1214.76 L1166.64 1214.76 L1166.05 1214.76 L1165.47 1214.76 L1164.88 1214.76 L1164.29 1214.76 L1163.71 1214.76 L1163.12 1214.76 L1162.54 1214.76 L1161.95 1214.76 L1161.36 1214.76 L1160.78 1214.76 L1160.19 1214.76 L1159.6 1214.76 L1159.02 1214.76 L1158.43 1214.76 L1157.84 1214.76 L1157.26 1214.76 L1156.67 1214.76 L1156.09 1214.76 L1155.5 1214.76 L1154.91 1214.76 L1154.33 1214.76 L1153.74 1214.76 L1153.15 1214.76 L1152.57 1214.76 L1151.98 1214.76 L1151.39 1214.76 L1150.81 1214.76 L1150.22 1214.76 L1149.63 1214.76 L1149.05 1214.76 L1148.46 1214.76 L1147.88 1214.76 L1147.29 1214.76 L1146.7 1214.76 L1146.12 1214.76 L1145.53 1214.76 L1144.94 1214.76 L1144.36 1214.76 L1143.77 1214.76 L1143.18 1214.76 L1142.6 1214.76 L1142.01 1214.76 L1141.42 1214.76 L1140.84 1214.76 L1140.25 1214.76 L1139.67 1214.76 L1139.08 1214.76 L1138.49 1214.76 L1137.91 1214.76 L1137.32 1214.76 L1136.73 1214.76 L1136.15 1214.76 L1135.56 1214.76 L1134.97 1214.76 L1134.39 1214.76 L1133.8 1214.76 L1133.21 1214.76 L1132.63 1214.76 L1132.04 1214.76 L1131.46 1214.76 L1130.87 1214.76 L1130.28 1214.76 L1129.7 1214.76 L1129.11 1214.76 L1128.52 1214.76 L1127.94 1214.76 L1127.35 1214.76 L1126.76 1214.76 L1126.18 1214.76 L1125.59 1214.76 L1125.01 1214.76 L1124.42 1214.76 L1123.83 1214.76 L1123.25 1214.76 L1122.66 1214.76 L1122.07 1214.76 L1121.49 1214.76 L1120.9 1214.76 L1120.31 1214.76 L1119.73 1214.76 L1119.14 1214.76 L1118.55 1214.76 L1117.97 1214.76 L1117.38 1214.76 L1116.8 1214.76 L1116.21 1214.76 L1115.62 1214.76 L1115.04 1214.76 L1114.45 1214.76 L1113.86 1214.76 L1113.28 1214.76 L1112.69 1214.76 L1112.1 1214.76 L1111.52 1214.76 L1110.93 1214.76 L1110.34 1214.76 L1109.76 1214.76 L1109.17 1214.76 L1108.59 1214.76 L1108 1214.76 L1107.41 1214.76 L1106.83 1214.76 L1106.24 1214.76 L1105.65 1214.76 L1105.07 1214.76 L1104.48 1214.76 L1103.89 1214.76 L1103.31 1214.76 L1102.72 1214.76 L1102.14 1214.76 L1101.55 1214.76 L1100.96 1214.76 L1100.38 1214.76 L1099.79 1214.76 L1099.2 1214.76 L1098.62 1214.76 L1098.03 1214.76 L1097.44 1214.76 L1096.86 1214.76 L1096.27 1214.76 L1095.68 1214.76 L1095.1 1214.76 L1094.51 1214.76 L1093.93 1214.76 L1093.34 1214.76 L1092.75 1214.76 L1092.17 1214.76 L1091.58 1214.76 L1090.99 1214.76 L1090.41 1214.76 L1089.82 1214.76 L1089.23 1214.76 L1088.65 1214.76 L1088.06 1214.76 L1087.47 1214.76 L1086.89 1214.76 L1086.3 1214.76 L1085.72 1214.76 L1085.13 1214.76 L1084.54 1214.76 L1083.96 1214.76 L1083.37 1214.76 L1082.78 1214.76 L1082.2 1214.76 L1081.61 1214.76 L1081.02 1214.76 L1080.44 1214.76 L1079.85 1214.76 L1079.26 1214.76 L1078.68 1214.76 L1078.09 1214.76 L1077.51 1214.76 L1076.92 1214.76 L1076.33 1214.76 L1075.75 1214.76 L1075.16 1214.76 L1074.57 1214.76 L1073.99 1214.76 L1073.4 1214.76 L1072.81 1214.76 L1072.23 1214.76 L1071.64 1214.76 L1071.06 1214.76 L1070.47 1214.76 L1069.88 1214.76 L1069.3 1214.76 L1068.71 1214.76 L1068.12 1214.76 L1067.54 1214.76 L1066.95 1214.76 L1066.36 1214.76 L1065.78 1214.76 L1065.19 1214.76 L1064.6 1214.76 L1064.02 1214.76 L1063.43 1214.76 L1062.85 1214.76 L1062.26 1214.76 L1061.67 1214.76 L1061.09 1214.76 L1060.5 1214.76 L1059.91 1214.76 L1059.33 1214.76 L1058.74 1214.76 L1058.15 1214.76 L1057.57 1214.76 L1056.98 1214.76 L1056.39 1214.76 L1055.81 1214.76 L1055.22 1214.76 L1054.64 1214.76 L1054.05 1214.76 L1053.46 1214.76 L1052.88 1214.76 L1052.29 1214.76 L1051.7 1214.76 L1051.12 1214.76 L1050.53 1214.76 L1049.94 1214.76 L1049.36 1214.76 L1048.77 1214.76 L1048.19 1214.76 L1047.6 1214.76 L1047.01 1214.76 L1046.43 1214.76 L1045.84 1214.76 L1045.25 1214.76 L1044.67 1214.76 L1044.08 1214.76 L1043.49 1214.76 L1042.91 1214.76 L1042.32 1214.76 L1041.73 1214.76 L1041.15 1214.76 L1040.56 1214.76 L1039.98 1214.76 L1039.39 1214.76 L1038.8 1214.76 L1038.22 1214.76 L1037.63 1214.76 L1037.04 1214.76 L1036.46 1214.76 L1035.87 1214.76 L1035.28 1214.76 L1034.7 1214.76 L1034.11 1214.76 L1033.52 1214.76 L1032.94 1214.76 L1032.35 1214.76 L1031.77 1214.76 L1031.18 1214.76 L1030.59 1214.76 L1030.01 1214.76 L1029.42 1214.76 L1028.83 1214.76 L1028.25 1214.76 L1027.66 1214.76 L1027.07 1214.76 L1026.49 1214.76 L1025.9 1214.76 L1025.32 1214.76 L1024.73 1214.76 L1024.14 1214.76 L1023.56 1214.76 L1022.97 1214.76 L1022.38 1214.76 L1021.8 1214.76 L1021.21 1214.76 L1020.62 1214.76 L1020.04 1214.76 L1019.45 1214.76 L1018.86 1214.76 L1018.28 1214.76 L1017.69 1214.76 L1017.11 1214.76 L1016.52 1214.76 L1015.93 1214.76 L1015.35 1214.76 L1014.76 1214.76 L1014.17 1214.76 L1013.59 1214.76 L1013 1214.76 L1012.41 1214.76 L1011.83 1214.76 L1011.24 1214.76 L1010.65 1214.76 L1010.07 1214.76 L1009.48 1214.76 L1008.9 1214.76 L1008.31 1214.76 L1007.72 1214.76 L1007.14 1214.76 L1006.55 1214.76 L1005.96 1214.76 L1005.38 1214.76 L1004.79 1214.76 L1004.2 1214.76 L1003.62 1214.76 L1003.03 1214.76 L1002.44 1214.76 L1001.86 1214.76 L1001.27 1214.76 L1000.69 1214.76 L1000.1 1214.76 L999.513 1214.76 L998.926 1214.76 L998.34 1214.76 L997.754 1214.76 L997.167 1214.76 L996.581 1214.76 L995.994 1214.76 L995.408 1214.76 L994.822 1214.76 L994.235 1214.76 L993.649 1214.76 L993.062 1214.76 L992.476 1214.76 L991.889 1214.76 L991.303 1214.76 L990.717 1214.76 L990.13 1214.76 L989.544 1214.76 L988.957 1214.76 L988.371 1214.76 L987.785 1214.76 L987.198 1214.76 L986.612 1214.76 L986.025 1214.76  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.14 986.612,1215.14 987.198,1215.14 987.785,1215.14 988.371,1215.14 988.957,1215.14 989.544,1215.14 990.13,1215.14 990.717,1215.14 991.303,1215.14 991.889,1215.14 992.476,1215.14 993.062,1215.14 993.649,1215.14 994.235,1215.14 994.822,1215.14 995.408,1215.14 995.994,1215.14 996.581,1215.14 997.167,1215.14 997.754,1215.14 998.34,1215.14 998.926,1215.14 999.513,1215.14 1000.1,1215.14 1000.69,1215.14 1001.27,1215.14 1001.86,1215.14 1002.44,1215.14 1003.03,1215.14 1003.62,1215.14 1004.2,1215.14 1004.79,1215.14 1005.38,1215.14 1005.96,1215.14 1006.55,1215.14 1007.14,1215.14 1007.72,1215.14 1008.31,1215.14 1008.9,1215.14 1009.48,1215.14 1010.07,1215.14 1010.65,1215.14 1011.24,1215.14 1011.83,1215.14 1012.41,1215.14 1013,1215.14 1013.59,1215.14 1014.17,1215.14 1014.76,1215.14 1015.35,1215.14 1015.93,1215.14 1016.52,1215.14 1017.11,1215.14 1017.69,1215.14 1018.28,1215.14 1018.86,1215.14 1019.45,1215.14 1020.04,1215.14 1020.62,1215.14 1021.21,1215.14 1021.8,1215.14 1022.38,1215.14 1022.97,1215.14 1023.56,1215.14 1024.14,1215.14 1024.73,1215.14 1025.32,1215.14 1025.9,1215.14 1026.49,1215.14 1027.07,1215.14 1027.66,1215.14 1028.25,1215.14 1028.83,1215.14 1029.42,1215.14 1030.01,1215.14 1030.59,1215.14 1031.18,1215.14 1031.77,1215.14 1032.35,1215.14 1032.94,1215.14 1033.52,1215.14 1034.11,1215.14 1034.7,1215.14 1035.28,1215.14 1035.87,1215.14 1036.46,1215.14 1037.04,1215.14 1037.63,1215.14 1038.22,1215.14 1038.8,1215.14 1039.39,1215.14 1039.98,1215.14 1040.56,1215.14 1041.15,1215.14 1041.73,1215.14 1042.32,1215.14 1042.91,1215.14 1043.49,1215.14 1044.08,1215.14 1044.67,1215.14 1045.25,1215.14 1045.84,1215.14 1046.43,1215.14 1047.01,1215.14 1047.6,1215.14 1048.19,1215.14 1048.77,1215.14 1049.36,1215.14 1049.94,1215.14 1050.53,1215.14 1051.12,1215.14 1051.7,1215.14 1052.29,1215.14 1052.88,1215.14 1053.46,1215.14 1054.05,1215.14 1054.64,1215.14 1055.22,1215.14 1055.81,1215.14 1056.39,1215.14 1056.98,1215.14 1057.57,1215.14 1058.15,1215.14 1058.74,1215.14 1059.33,1215.14 1059.91,1215.14 1060.5,1215.14 1061.09,1215.14 1061.67,1215.14 1062.26,1215.14 1062.85,1215.14 1063.43,1215.14 1064.02,1215.14 1064.6,1215.14 1065.19,1215.14 1065.78,1215.14 1066.36,1215.14 1066.95,1215.14 1067.54,1215.14 1068.12,1215.14 1068.71,1215.14 1069.3,1215.14 1069.88,1215.14 1070.47,1215.14 1071.06,1215.14 1071.64,1215.14 1072.23,1215.14 1072.81,1215.14 1073.4,1215.14 1073.99,1215.14 1074.57,1215.14 1075.16,1215.14 1075.75,1215.14 1076.33,1215.14 1076.92,1215.14 1077.51,1215.14 1078.09,1215.14 1078.68,1215.14 1079.26,1215.14 1079.85,1215.14 1080.44,1215.14 1081.02,1215.14 1081.61,1215.14 1082.2,1215.14 1082.78,1215.14 1083.37,1215.14 1083.96,1215.14 1084.54,1215.14 1085.13,1215.14 1085.72,1215.14 1086.3,1215.14 1086.89,1215.14 1087.47,1215.14 1088.06,1215.14 1088.65,1215.14 1089.23,1215.14 1089.82,1215.14 1090.41,1215.14 1090.99,1215.14 1091.58,1215.14 1092.17,1215.14 1092.75,1215.14 1093.34,1215.14 1093.93,1215.14 1094.51,1215.14 1095.1,1215.14 1095.68,1215.14 1096.27,1215.14 1096.86,1215.14 1097.44,1215.14 1098.03,1215.14 1098.62,1215.14 1099.2,1215.14 1099.79,1215.14 1100.38,1215.14 1100.96,1215.14 1101.55,1215.14 1102.14,1215.14 1102.72,1215.14 1103.31,1215.14 1103.89,1215.14 1104.48,1215.14 1105.07,1215.14 1105.65,1215.14 1106.24,1215.14 1106.83,1215.14 1107.41,1215.14 1108,1215.14 1108.59,1215.14 1109.17,1215.14 1109.76,1215.14 1110.34,1215.14 1110.93,1215.14 1111.52,1215.14 1112.1,1215.14 1112.69,1215.14 1113.28,1215.14 1113.86,1215.14 1114.45,1215.14 1115.04,1215.14 1115.62,1215.14 1116.21,1215.14 1116.8,1215.14 1117.38,1215.14 1117.97,1215.14 1118.55,1215.14 1119.14,1215.14 1119.73,1215.14 1120.31,1215.14 1120.9,1215.14 1121.49,1215.14 1122.07,1215.14 1122.66,1215.14 1123.25,1215.14 1123.83,1215.14 1124.42,1215.14 1125.01,1215.14 1125.59,1215.14 1126.18,1215.14 1126.76,1215.14 1127.35,1215.14 1127.94,1215.14 1128.52,1215.14 1129.11,1215.14 1129.7,1215.14 1130.28,1215.14 1130.87,1215.14 1131.46,1215.14 1132.04,1215.14 1132.63,1215.14 1133.21,1215.14 1133.8,1215.14 1134.39,1215.14 1134.97,1215.14 1135.56,1215.14 1136.15,1215.14 1136.73,1215.14 1137.32,1215.14 1137.91,1215.14 1138.49,1215.14 1139.08,1215.14 1139.67,1215.14 1140.25,1215.14 1140.84,1215.14 1141.42,1215.14 1142.01,1215.14 1142.6,1215.14 1143.18,1215.14 1143.77,1215.14 1144.36,1215.14 1144.94,1215.14 1145.53,1215.14 1146.12,1215.14 1146.7,1215.14 1147.29,1215.14 1147.88,1215.14 1148.46,1215.14 1149.05,1215.14 1149.63,1215.14 1150.22,1215.14 1150.81,1215.14 1151.39,1215.14 1151.98,1215.14 1152.57,1215.14 1153.15,1215.14 1153.74,1215.14 1154.33,1215.14 1154.91,1215.14 1155.5,1215.14 1156.09,1215.14 1156.67,1215.14 1157.26,1215.14 1157.84,1215.14 1158.43,1215.14 1159.02,1215.14 1159.6,1215.14 1160.19,1215.14 1160.78,1215.14 1161.36,1215.14 1161.95,1215.14 1162.54,1215.14 1163.12,1215.14 1163.71,1215.14 1164.29,1215.14 1164.88,1215.14 1165.47,1215.14 1166.05,1215.14 1166.64,1215.14 1167.23,1215.14 1167.81,1215.14 1168.4,1215.14 1168.99,1215.14 1169.57,1215.14 1170.16,1215.14 1170.75,1215.14 1171.33,1215.14 1171.92,1215.14 1172.5,1215.14 1173.09,1215.14 1173.68,1215.14 1174.26,1215.14 1174.85,1215.14 1175.44,1215.14 1176.02,1215.14 1176.61,1215.14 1177.2,1215.14 1177.78,1215.14 1178.37,1215.14 1178.96,1215.14 1179.54,1215.14 1180.13,1215.14 1180.71,1215.14 1181.3,1215.14 1181.89,1215.14 1182.47,1215.14 1183.06,1215.14 1183.65,1215.14 1184.23,1215.14 1184.82,1215.14 1185.41,1215.14 1185.99,1215.14 1186.58,1215.14 1187.16,1215.14 1187.75,1215.14 1188.34,1215.14 1188.92,1215.14 1189.51,1215.14 1190.1,1215.14 1190.68,1215.14 1191.27,1215.14 1191.86,1215.14 1192.44,1215.14 1193.03,1215.14 1193.62,1215.14 1194.2,1215.14 1194.79,1215.14 1195.37,1215.14 1195.96,1215.14 1196.55,1215.14 1197.13,1215.14 1197.72,1215.14 1198.31,1215.14 1198.89,1215.14 1199.48,1215.14 1200.07,1215.14 1200.65,1215.14 1201.24,1215.14 1201.83,1215.14 1202.41,1215.14 1203,1215.14 1203.58,1215.14 1204.17,1215.14 1204.76,1215.14 1205.34,1215.14 1205.93,1215.14 1206.52,1215.14 1207.1,1215.14 1207.69,1215.14 1208.28,1215.14 1208.86,1215.14 1209.45,1215.14 1210.03,1215.14 1210.62,1215.14 1211.21,1215.14 1211.79,1215.14 1212.38,1215.14 1212.97,1215.14 1213.55,1215.14 1214.14,1215.14 1214.73,1215.14 1215.31,1215.14 1215.9,1215.14 1216.49,1215.14 1217.07,1215.14 1217.66,1215.14 1218.24,1215.14 1218.83,1215.14 1219.42,1215.14 1220,1215.14 1220.59,1215.14 1221.18,1215.14 1221.76,1215.14 1222.35,1215.14 1222.94,1215.14 1223.52,1215.14 1224.11,1215.14 1224.7,1215.14 1225.28,1215.14 1225.87,1215.14 1226.45,1215.14 1227.04,1215.14 1227.63,1215.14 1228.21,1215.14 1228.8,1215.14 1229.39,1215.14 1229.97,1215.14 1230.56,1215.14 1231.15,1215.14 1231.73,1215.14 1232.32,1215.14 1232.91,1215.14 1233.49,1215.14 1234.08,1215.14 1234.66,1215.14 1235.25,1215.14 1235.84,1215.14 1236.42,1215.14 1237.01,1215.14 1237.6,1215.14 1238.18,1215.14 1238.77,1215.14 1239.36,1215.14 1239.94,1215.14 1240.53,1215.14 1241.11,1215.14 1241.7,1215.14 1242.29,1215.14 1242.87,1215.14 1243.46,1215.14 1244.05,1215.14 1244.63,1215.14 1245.22,1215.14 1245.81,1215.14 1246.39,1215.14 1246.98,1215.14 1247.57,1215.14 1248.15,1215.14 1248.74,1215.14 1249.32,1215.14 1249.91,1215.14 1250.5,1215.14 1251.08,1215.14 1251.67,1215.14 1252.26,1215.14 1252.84,1215.14 1253.43,1215.14 1254.02,1215.14 1254.6,1215.14 1255.19,1215.14 1255.78,1215.14 1256.36,1215.14 1256.95,1215.14 1257.53,1215.14 1258.12,1215.14 1258.71,1215.14 1259.29,1215.14 1259.88,1215.14 1260.47,1215.14 1261.05,1215.14 1261.64,1215.14 1262.23,1215.14 1262.81,1215.14 1263.4,1215.14 1263.98,1215.14 1264.57,1215.14 1265.16,1215.14 1265.74,1215.14 1266.33,1215.14 1266.92,1215.14 1267.5,1215.14 1268.09,1215.14 1268.68,1215.14 1269.26,1215.14 1269.85,1215.14 1270.44,1215.14 1271.02,1215.14 1271.61,1215.14 1272.19,1215.14 1272.78,1215.14 1273.37,1215.14 1273.95,1215.14 1274.54,1215.14 1275.13,1215.14 1275.71,1215.14 1276.3,1215.14 1276.89,1215.14 1277.47,1215.14 1278.06,1215.14 1278.65,1215.14 1279.23,1215.14 1279.82,1215.14 1280.4,1215.14 1280.99,1215.14 1281.58,1215.14 1282.16,1215.14 1282.75,1215.14 1283.34,1215.14 1283.92,1215.14 1284.51,1215.14 1285.1,1215.14 1285.68,1215.14 1286.27,1215.14 1286.86,1215.14 1287.44,1215.14 1288.03,1215.14 1288.61,1215.14 1289.2,1215.14 1289.79,1215.14 1290.37,1215.14 1290.96,1215.14 1291.55,1215.14 1292.13,1215.14 1292.72,1215.14 1293.31,1215.14 1293.89,1215.14 1294.48,1215.14 1295.06,1215.14 1295.65,1215.14 1296.24,1215.14 1296.82,1215.14 1297.41,1215.14 1298,1215.14 1298.58,1215.14 1299.17,1215.14 1299.76,1215.14 1300.34,1215.14 1300.93,1215.14 1301.52,1215.14 1302.1,1215.14 1302.69,1215.14 1303.27,1215.14 1303.86,1215.14 1304.45,1215.14 1305.03,1215.14 1305.62,1215.14 1306.21,1215.14 1306.79,1215.14 1307.38,1215.14 1307.97,1215.14 1308.55,1215.14 1309.14,1215.14 1309.73,1215.14 1310.31,1215.14 1310.9,1215.14 1311.48,1215.14 1312.07,1215.14 1312.66,1215.14 1313.24,1215.14 1313.83,1215.14 1314.42,1215.14 1315,1215.14 1315.59,1215.14 1316.18,1215.14 1316.76,1215.14 1317.35,1215.14 1317.93,1215.14 1318.52,1215.14 1319.11,1215.14 1319.69,1215.14 1320.28,1215.14 1320.87,1215.14 1321.45,1215.14 1322.04,1215.14 1322.63,1215.14 1323.21,1215.14 1323.8,1215.14 1324.39,1215.14 1324.97,1215.14 1325.56,1215.14 1326.14,1215.14 1326.73,1215.14 1327.32,1215.14 1327.9,1215.14 1328.49,1215.14 1329.08,1215.14 1329.66,1215.14 1330.25,1215.14 1330.84,1215.14 1331.42,1215.14 1332.01,1215.14 1332.6,1215.14 1333.18,1215.14 1333.77,1215.14 1334.35,1215.14 1334.94,1215.14 1335.53,1215.14 1336.11,1215.14 1336.7,1215.14 1337.29,1215.14 1337.87,1215.14 1338.46,1215.14 1339.05,1215.14 1339.63,1215.14 1340.22,1215.14 1340.8,1215.14 1341.39,1215.14 1341.98,1215.14 1342.56,1215.14 1343.15,1215.14 1343.74,1215.14 1344.32,1215.14 1344.91,1215.14 1345.5,1215.14 1346.08,1215.14 1346.67,1215.14 1347.26,1215.14 1347.84,1215.14 1348.43,1215.14 1349.01,1215.14 1349.6,1215.14 1350.19,1215.14 1350.77,1215.14 1351.36,1215.14 1351.95,1215.14 1352.53,1215.14 1353.12,1215.14 1353.71,1215.14 1354.29,1215.14 1354.88,1215.14 1355.47,1215.14 1356.05,1215.14 1356.64,1215.14 1357.22,1215.14 1357.81,1215.14 1358.4,1215.14 1358.98,1215.14 1359.57,1215.14 1360.16,1215.14 1360.74,1215.14 1361.33,1215.14 1361.92,1215.14 1362.5,1215.14 1363.09,1215.14 1363.68,1215.14 1364.26,1215.14 1364.85,1215.14 1365.43,1215.14 1366.02,1215.14 1366.61,1215.14 1367.19,1215.14 1367.78,1215.14 1368.37,1215.14 1368.95,1215.14 1369.54,1215.14 1370.13,1215.14 1370.71,1215.14 1371.3,1215.14 1371.88,1215.14 1372.47,1215.14 1373.06,1215.14 1373.64,1215.14 1374.23,1215.14 1374.82,1215.14 1375.4,1215.14 1375.99,1215.14 1376.58,1215.14 1377.16,1215.14 1377.75,1215.14 1378.34,1215.14 1378.92,1215.14 1379.51,1215.14 1380.09,1215.14 1380.68,1215.14 1381.27,1215.14 1381.85,1215.14 1382.44,1215.14 1383.03,1215.14 1383.61,1215.14 1384.2,1215.14 1384.79,1215.14 1385.37,1215.14 1385.96,1215.14 1386.55,1215.14 1387.13,1215.14 1387.72,1215.14 1388.3,1215.14 1388.89,1215.14 1389.48,1215.14 1390.06,1215.14 1390.65,1215.14 1391.24,1215.14 1391.82,1215.14 1392.41,1215.14 1393,1215.14 1393.58,1215.14 1394.17,1215.14 1394.75,1215.14 1395.34,1215.14 1395.93,1215.14 1396.51,1215.14 1397.1,1215.14 1397.69,1215.14 1398.27,1215.14 1398.86,1215.14 1399.45,1215.14 1400.03,1215.14 1400.62,1215.14 1401.21,1215.14 1401.79,1215.14 1402.38,1215.14 1402.96,1215.14 1403.55,1215.14 1404.14,1215.14 1404.72,1215.14 1405.31,1215.14 1405.9,1215.14 1406.48,1215.14 1407.07,1215.14 1407.66,1215.14 1408.24,1215.14 1408.83,1215.14 1409.42,1215.14 1410,1215.14 1410.59,1215.14 1411.17,1215.14 1411.76,1215.14 1412.35,1215.14 1412.93,1215.14 1413.52,1215.14 1414.11,1215.14 1414.69,1215.14 1415.28,1215.14 1415.87,1215.14 1416.45,1215.14 1417.04,1215.14 1417.63,1215.14 1418.21,1215.14 1418.8,1215.14 1419.38,1215.14 1419.97,1215.14 1420.56,1215.14 1421.14,1215.14 1421.73,1215.14 1422.32,1215.14 1422.9,1215.14 1423.49,1215.14 1424.08,1215.14 1424.66,1215.14 1425.25,1215.14 1425.83,1215.14 1426.42,1215.14 1427.01,1215.14 1427.59,1215.14 1428.18,1215.14 1428.77,1215.14 1429.35,1215.14 1429.94,1215.14 1430.53,1215.14 1431.11,1215.14 1431.7,1215.14 1432.29,1215.14 1432.87,1215.14 1433.46,1215.14 1434.04,1215.14 1434.63,1215.14 1435.22,1215.14 1435.8,1215.14 1436.39,1215.14 1436.98,1215.14 1437.56,1215.14 1438.15,1215.14 1438.74,1215.14 1439.32,1215.14 1439.91,1215.14 1440.5,1215.14 1441.08,1215.14 1441.67,1215.14 1442.25,1215.14 1442.84,1215.14 1443.43,1215.14 1444.01,1215.14 1444.6,1215.14 1445.19,1215.14 1445.77,1215.14 1446.36,1215.14 1446.95,1215.14 1447.53,1215.14 1448.12,1215.14 1448.7,1215.14 1449.29,1215.14 1449.88,1215.14 1450.46,1215.14 1451.05,1215.14 1451.64,1215.14 1452.22,1215.14 1452.81,1215.14 1453.4,1215.14 1453.98,1215.14 1454.57,1215.14 1455.16,1215.14 1455.74,1215.14 1456.33,1215.14 1456.91,1215.14 1457.5,1215.14 1458.09,1215.14 1458.67,1215.14 1459.26,1215.14 1459.85,1215.14 1460.43,1215.14 1461.02,1215.14 1461.61,1215.14 1462.19,1215.14 1462.78,1215.14 1463.37,1215.14 1463.95,1215.14 1464.54,1215.14 1465.12,1215.14 1465.71,1215.14 1466.3,1215.14 1466.88,1215.14 1467.47,1215.14 1468.06,1215.14 1468.64,1215.14 1469.23,1215.14 1469.82,1215.14 1470.4,1215.14 1470.99,1215.14 1471.57,1215.14 1472.16,1215.14 1472.75,1215.14 1473.33,1215.14 1473.92,1215.14 1474.51,1215.14 1475.09,1215.14 1475.68,1215.14 1476.27,1215.14 1476.85,1215.14 1477.44,1215.14 1478.03,1215.14 1478.61,1215.14 1479.2,1215.14 1479.78,1215.14 1480.37,1215.14 1480.96,1215.14 1481.54,1215.14 1482.13,1215.14 1482.72,1215.14 1483.3,1215.14 1483.89,1215.14 1484.48,1215.14 1485.06,1215.14 1485.65,1215.14 1486.24,1215.14 1486.82,1215.14 1487.41,1215.14 1487.99,1215.14 1488.58,1215.14 1489.17,1215.14 1489.75,1215.14 1490.34,1215.14 1490.93,1215.14 1491.51,1215.14 1492.1,1215.14 1492.69,1215.14 1493.27,1215.14 1493.86,1215.14 1494.45,1215.14 1495.03,1215.14 1495.62,1215.14 1496.2,1215.14 1496.79,1215.14 1497.38,1215.14 1497.96,1215.14 1498.55,1215.14 1499.14,1215.14 1499.72,1215.14 1500.31,1215.14 1500.9,1215.14 1501.48,1215.14 1502.07,1215.14 1502.65,1215.14 1503.24,1215.14 1503.83,1215.14 1504.41,1215.14 1505,1215.14 1505.59,1215.14 1506.17,1215.14 1506.76,1215.14 1507.35,1215.14 1507.93,1215.14 1508.52,1215.14 1509.11,1215.14 1509.69,1215.14 1510.28,1215.14 1510.86,1215.14 1511.45,1215.14 1512.04,1215.14 1512.62,1215.14 1513.21,1215.14 1513.8,1215.14 1514.38,1215.14 1514.97,1215.14 1515.56,1215.14 1516.14,1215.14 1516.73,1215.14 1517.32,1215.14 1517.9,1215.14 1518.49,1215.14 1519.07,1215.14 1519.66,1215.14 1520.25,1215.14 1520.83,1215.14 1521.42,1215.14 1522.01,1215.14 1522.59,1215.14 1523.18,1215.14 1523.77,1215.14 1524.35,1215.14 1524.94,1215.14 1525.52,1215.14 1526.11,1215.14 1526.7,1215.14 1527.28,1215.14 1527.87,1215.14 1528.46,1215.14 1529.04,1215.14 1529.63,1215.14 1530.22,1215.14 1530.8,1215.14 1531.39,1215.14 1531.98,1215.14 1532.56,1215.14 1533.15,1215.14 1533.73,1215.14 1534.32,1215.14 1534.91,1215.14 1535.49,1215.14 1536.08,1215.14 1536.67,1215.14 1537.25,1215.14 1537.84,1215.14 1538.43,1215.14 1539.01,1215.14 1539.6,1215.14 1540.19,1215.14 1540.77,1215.14 1541.36,1215.14 1541.94,1215.14 1542.53,1215.14 1543.12,1215.14 1543.7,1215.14 1544.29,1215.14 1544.88,1215.14 1545.46,1215.14 1546.05,1215.14 1546.64,1215.14 1547.22,1215.14 1547.81,1215.14 1548.4,1215.14 1548.98,1215.14 1549.57,1215.14 1550.15,1215.14 1550.74,1215.14 1551.33,1215.14 1551.91,1215.14 1552.5,1215.14 1553.09,1215.14 1553.67,1215.14 1554.26,1215.14 1554.85,1215.14 1555.43,1215.14 1556.02,1215.14 1556.6,1215.14 1557.19,1215.14 1557.78,1215.14 1558.36,1215.14 1558.95,1215.14 1559.54,1215.14 1560.12,1215.14 1560.71,1215.14 1561.3,1215.14 1561.88,1215.14 1562.47,1215.14 1563.06,1215.14 1563.64,1215.14 1564.23,1215.14 1564.81,1215.14 1565.4,1215.14 1565.99,1215.14 1566.57,1215.14 1567.16,1215.14 1567.75,1215.14 1568.33,1215.14 1568.92,1215.14 1569.51,1215.14 1570.09,1215.14 1570.68,1215.14 1571.27,1215.14 1571.85,1215.14 1572.44,1215.14 1573.02,1215.14 1573.61,1215.14 1574.2,1215.14 1574.78,1215.14 1575.37,1215.14 1575.96,1215.14 1576.54,1215.14 1577.13,1215.14 1577.72,1215.14 1578.3,1215.14 1578.89,1215.14 1579.47,1215.14 1580.06,1215.14 1580.65,1215.14 1581.23,1215.14 1581.82,1215.14 1582.41,1215.14 1582.99,1215.14 1583.58,1215.14 1584.17,1215.14 1584.75,1215.14 1585.34,1215.14 1585.93,1215.14 1586.51,1215.14 1587.1,1215.14 1587.68,1215.14 1588.27,1215.14 1588.86,1215.14 1589.44,1215.14 1590.03,1215.14 1590.62,1215.14 1591.2,1215.14 1591.79,1215.14 1592.38,1215.14 1592.96,1215.14 1593.55,1215.14 1594.14,1215.14 1594.72,1215.14 1595.31,1215.14 1595.89,1215.14 1596.48,1215.14 1597.07,1215.14 1597.65,1215.14 1598.24,1215.14 1598.83,1215.14 1599.41,1215.14 1600,1215.14 1600.59,1215.14 1601.17,1215.14 1601.76,1215.14 1602.34,1215.14 1602.93,1215.14 1603.52,1215.14 1604.1,1215.14 1604.69,1215.14 1605.28,1215.14 1605.86,1215.14 1606.45,1215.14 1607.04,1215.14 1607.62,1215.14 1608.21,1215.14 1608.8,1215.14 1609.38,1215.14 1609.97,1215.14 1610.55,1215.14 1611.14,1215.14 1611.73,1215.14 1612.31,1215.14 1612.9,1215.14 1613.49,1215.14 1614.07,1215.14 1614.66,1215.14 1615.25,1215.14 1615.83,1215.14 1616.42,1215.14 1617.01,1215.14 1617.59,1215.14 1618.18,1215.14 1618.76,1215.14 1619.35,1215.14 1619.94,1215.14 1620.52,1215.14 1621.11,1215.14 1621.7,1215.14 1622.28,1215.14 1622.87,1215.14 1623.46,1215.14 1624.04,1215.14 1624.63,1215.14 1625.22,1215.14 1625.8,1215.14 1626.39,1215.14 1626.97,1215.14 1627.56,1215.14 1628.15,1215.14 1628.73,1215.14 1629.32,1215.14 1629.91,1215.14 1630.49,1215.14 1631.08,1215.14 1631.67,1215.14 1632.25,1215.14 1632.84,1215.14 1633.42,1215.14 1634.01,1215.14 1634.6,1215.14 1635.18,1215.14 1635.77,1215.14 1636.36,1215.14 1636.94,1215.14 1637.53,1215.14 1638.12,1215.14 1638.7,1215.14 1639.29,1215.14 1639.88,1215.14 1640.46,1215.14 1641.05,1215.14 1641.63,1215.14 1642.22,1215.14 1642.81,1215.14 1643.39,1215.14 1643.98,1215.14 1644.57,1215.14 1645.15,1215.14 1645.74,1215.14 1646.33,1215.14 1646.91,1215.14 1647.5,1215.14 1648.09,1215.14 1648.67,1215.14 1649.26,1215.14 1649.84,1215.14 1650.43,1215.14 1651.02,1215.14 1651.6,1215.14 1652.19,1215.14 1652.78,1215.14 1653.36,1215.14 1653.95,1215.14 1654.54,1215.14 1655.12,1215.14 1655.71,1215.14 1656.29,1215.14 1656.88,1215.14 1657.47,1215.14 1658.05,1215.14 1658.64,1215.14 1659.23,1215.14 1659.81,1215.14 1660.4,1215.14 1660.99,1215.14 1661.57,1215.14 1662.16,1215.14 1662.75,1215.14 1663.33,1215.14 1663.92,1215.14 1664.5,1215.14 1665.09,1215.14 1665.68,1215.14 1666.26,1215.14 1666.85,1215.14 1667.44,1215.14 1668.02,1215.14 1668.61,1215.14 1669.2,1215.14 1669.78,1215.14 1670.37,1215.14 1670.96,1215.14 1671.54,1215.14 1672.13,1215.14 1672.71,1215.14 1673.3,1215.14 1673.89,1215.14 1674.47,1215.14 1675.06,1215.14 1675.65,1215.14 1676.23,1215.14 1676.82,1215.14 1677.41,1215.14 1677.99,1215.14 1678.58,1215.14 1679.17,1215.14 1679.75,1215.14 1680.34,1215.14 1680.92,1215.14 1681.51,1215.14 1682.1,1215.14 1682.68,1215.14 1683.27,1215.14 1683.86,1215.14 1684.44,1215.14 1685.03,1215.14 1685.62,1215.14 1686.2,1215.14 1686.79,1215.14 1687.37,1215.14 1687.96,1215.14 1688.55,1215.14 1689.13,1215.14 1689.72,1215.14 1690.31,1215.14 1690.89,1215.14 1691.48,1215.14 1692.07,1215.14 1692.65,1215.14 1693.24,1215.14 1693.83,1215.14 1694.41,1215.14 1695,1215.14 1695.58,1215.14 1696.17,1215.14 1696.76,1215.14 1697.34,1215.14 1697.93,1215.14 1698.52,1215.14 1699.1,1215.14 1699.69,1215.14 1700.28,1215.14 1700.86,1215.14 1701.45,1215.14 1702.04,1215.14 1702.62,1215.14 1703.21,1215.14 1703.79,1215.14 1704.38,1215.14 1704.97,1215.14 1705.55,1215.14 1706.14,1215.14 1706.73,1215.14 1707.31,1215.14 1707.9,1215.14 1708.49,1215.14 1709.07,1215.14 1709.66,1215.14 1710.24,1215.14 1710.83,1215.14 1711.42,1215.14 1712,1215.14 1712.59,1215.14 1713.18,1215.14 1713.76,1215.14 1714.35,1215.14 1714.94,1215.14 1715.52,1215.14 1716.11,1215.14 1716.7,1215.14 1717.28,1215.14 1717.87,1215.14 1718.45,1215.14 1719.04,1215.14 1719.63,1215.14 1720.21,1215.14 1720.8,1215.14 1721.39,1215.14 1721.97,1215.14 1722.56,1215.14 1723.15,1215.14 1723.73,1215.14 1724.32,1215.14 1724.91,1215.14 1725.49,1215.14 1726.08,1215.14 1726.66,1215.14 1727.25,1215.14 1727.84,1215.14 1728.42,1215.14 1729.01,1215.14 1729.6,1215.14 1730.18,1215.14 1730.77,1215.14 1731.36,1215.14 1731.94,1215.14 1732.53,1215.14 1733.11,1215.14 1733.7,1215.14 1734.29,1215.14 1734.87,1215.14 1735.46,1215.14 1736.05,1215.14 1736.63,1215.14 1737.22,1215.14 1737.81,1215.14 1738.39,1215.14 1738.98,1215.14 1739.57,1215.14 1740.15,1215.14 1740.74,1215.14 1741.32,1215.14 1741.91,1215.14 1742.5,1215.14 1743.08,1215.14 1743.67,1215.14 1744.26,1215.14 1744.84,1215.14 1745.43,1215.14 1746.02,1215.14 1746.6,1215.14 1747.19,1215.14 1747.78,1215.14 1748.36,1215.14 1748.95,1215.14 1749.53,1215.14 1750.12,1215.14 1750.71,1215.14 1751.29,1215.14 1751.88,1215.14 1752.47,1215.14 1753.05,1215.14 1753.64,1215.14 1754.23,1215.14 1754.81,1215.14 1755.4,1215.14 1755.99,1215.14 1756.57,1215.14 1757.16,1215.14 1757.74,1215.14 1758.33,1215.14 1758.92,1215.14 1759.5,1215.14 1760.09,1215.14 1760.68,1215.14 1761.26,1215.14 1761.85,1215.14 1762.44,1215.14 1763.02,1215.14 1763.61,1215.14 1764.19,1215.14 1764.78,1215.14 1765.37,1215.14 1765.95,1215.14 1766.54,1215.14 1767.13,1215.14 1767.71,1215.14 1768.3,1215.14 1768.89,1215.14 1769.47,1215.14 1770.06,1215.14 1770.65,1215.14 1771.23,1215.14 1771.82,1215.14 1772.4,1215.14 1772.99,1215.14 1773.58,1215.14 1774.16,1215.14 1774.75,1215.14 1775.34,1215.14 1775.92,1215.14 1776.51,1215.14 1777.1,1215.14 1777.68,1215.14 1778.27,1215.14 1778.86,1215.14 1779.44,1215.14 1780.03,1215.14 1780.61,1215.14 1781.2,1215.14 1781.79,1215.14 1782.37,1215.14 1782.96,1215.14 1783.55,1215.14 1784.13,1215.14 1784.72,1215.14 1785.31,1215.14 1785.89,1215.14 1786.48,1215.14 1787.06,1215.14 1787.65,1215.14 1788.24,1215.14 1788.82,1215.14 1789.41,1215.14 1790,1215.14 1790.58,1215.14 1791.17,1215.14 1791.76,1215.14 1792.34,1215.14 1792.93,1215.14 1793.52,1215.14 1794.1,1215.14 1794.69,1215.14 1795.27,1215.14 1795.86,1215.14 1796.45,1215.14 1797.03,1215.14 1797.62,1215.14 1798.21,1215.14 1798.79,1215.14 1799.38,1215.14 1799.97,1215.14 1800.55,1215.14 1801.14,1215.14 1801.73,1215.14 1802.31,1215.14 1802.9,1215.14 1803.48,1215.14 1804.07,1215.14 1804.66,1215.14 1805.24,1215.14 1805.83,1215.14 1806.42,1215.14 1807,1215.14 1807.59,1215.14 1808.18,1215.14 1808.76,1215.14 1809.35,1215.14 1809.94,1215.14 1810.52,1215.14 1811.11,1215.14 1811.69,1215.14 1812.28,1215.14 1812.87,1215.14 1813.45,1215.14 1814.04,1215.14 1814.63,1215.14 1815.21,1215.14 1815.8,1215.14 1816.39,1215.14 1816.97,1215.14 1817.56,1215.14 1818.14,1215.14 1818.73,1215.14 1819.32,1215.14 1819.9,1215.14 1820.49,1215.14 1821.08,1215.14 1821.66,1215.14 1822.25,1215.14 1822.84,1215.14 1823.42,1215.14 1824.01,1215.14 1824.6,1215.14 1825.18,1215.14 1825.77,1215.14 1826.35,1215.14 1826.94,1215.14 1827.53,1215.14 1828.11,1215.14 1828.7,1215.14 1829.29,1215.14 1829.87,1215.14 1830.46,1215.14 1831.05,1215.14 1831.63,1215.14 1832.22,1215.14 1832.81,1215.14 1833.39,1215.14 1833.98,1215.14 1834.56,1215.14 1835.15,1215.14 1835.74,1215.14 1836.32,1215.14 1836.91,1215.14 1837.5,1215.14 1838.08,1215.14 1838.67,1215.14 1839.26,1215.14 1839.84,1215.14 1840.43,1215.14 1841.01,1215.14 1841.6,1215.14 1842.19,1215.14 1842.77,1215.14 1843.36,1215.14 1843.95,1215.14 1844.53,1215.14 1845.12,1215.14 1845.71,1215.14 1846.29,1215.14 1846.88,1215.14 1847.47,1215.14 1848.05,1215.14 1848.64,1215.14 1849.22,1215.14 1849.81,1215.14 1850.4,1215.14 1850.98,1215.14 1851.57,1215.14 1852.16,1215.14 1852.74,1215.14 1853.33,1215.14 1853.92,1215.14 1854.5,1215.14 1855.09,1215.14 1855.68,1215.14 1856.26,1215.14 1856.85,1215.14 1857.43,1215.14 1858.02,1215.14 1858.61,1215.14 1859.19,1215.14 1859.78,1215.14 1860.37,1215.14 1860.95,1215.14 1861.54,1215.14 1862.13,1215.14 1862.71,1215.14 1863.3,1215.14 1863.88,1215.14 1864.47,1215.14 1865.06,1215.14 1865.64,1215.14 1866.23,1215.14 1866.82,1215.14 1867.4,1215.14 1867.99,1215.14 1868.58,1215.14 1869.16,1215.14 1869.75,1215.14 1870.34,1215.14 1870.92,1215.14 1871.51,1215.14 1872.09,1215.14 1872.68,1215.14 1873.27,1215.14 1873.85,1215.14 1874.44,1215.14 1875.03,1215.14 1875.61,1215.14 1876.2,1215.14 1876.79,1215.14 1877.37,1215.14 1877.96,1215.14 1878.55,1215.14 1879.13,1215.14 1879.72,1215.14 1880.3,1215.14 1880.89,1215.14 1881.48,1215.14 1882.06,1215.14 1882.65,1215.14 1883.24,1215.14 1883.82,1215.14 1884.41,1215.14 1885,1215.14 1885.58,1215.14 1886.17,1215.14 1886.76,1215.14 1887.34,1215.14 1887.93,1215.14 1888.51,1215.14 1889.1,1215.14 1889.69,1215.14 1890.27,1215.14 1890.86,1215.14 1891.45,1215.14 1892.03,1215.14 1892.62,1215.14 1893.21,1215.14 1893.79,1215.14 1894.38,1215.14 1894.96,1215.14 1895.55,1215.14 1896.14,1215.14 1896.72,1215.14 1897.31,1215.14 1897.9,1215.14 1898.48,1215.14 1899.07,1215.14 1899.66,1215.14 1900.24,1215.14 1900.83,1215.14 1901.42,1215.14 1902,1215.14 1902.59,1215.14 1903.17,1215.14 1903.76,1215.14 1904.35,1215.14 1904.93,1215.14 1905.52,1215.14 1906.11,1215.14 1906.69,1215.14 1907.28,1215.14 1907.87,1215.14 1908.45,1215.14 1909.04,1215.14 1909.63,1215.14 1910.21,1215.14 1910.8,1215.14 1911.38,1215.14 1911.97,1215.14 1912.56,1215.14 1913.14,1215.14 1913.73,1215.14 1914.32,1215.14 1914.9,1215.14 1915.49,1215.14 1916.08,1215.14 1916.66,1215.14 1917.25,1215.14 1917.83,1215.14 1918.42,1215.14 1919.01,1215.14 1919.59,1215.14 1920.18,1215.14 1920.77,1215.14 1921.35,1215.14 1921.94,1215.14 1922.53,1215.14 1923.11,1215.14 1923.7,1215.14 1924.29,1215.14 1924.87,1215.14 1925.46,1215.14 1926.04,1215.14 1926.63,1215.14 1927.22,1215.14 1927.8,1215.14 1928.39,1215.14 1928.98,1215.14 1929.56,1215.14 1930.15,1215.14 1930.74,1215.14 1931.32,1215.14 1931.91,1215.14 1932.5,1215.14 1933.08,1215.14 1933.67,1215.14 1934.25,1215.14 1934.84,1215.14 1935.43,1215.14 1936.01,1215.14 1936.6,1215.14 1937.19,1215.14 1937.77,1215.14 1938.36,1215.14 1938.95,1215.14 1939.53,1215.14 1940.12,1215.14 1940.71,1215.14 1941.29,1215.14 1941.88,1215.14 1942.46,1215.14 1943.05,1215.14 1943.64,1215.14 1944.22,1215.14 1944.81,1215.14 1945.4,1215.14 1945.98,1215.14 1946.57,1215.14 1947.16,1215.14 1947.74,1215.14 1948.33,1215.14 1948.91,1215.14 1949.5,1215.14 1950.09,1215.14 1950.67,1215.14 1951.26,1215.14 1951.85,1215.14 1952.43,1215.14 1953.02,1215.14 1953.61,1215.14 1954.19,1215.14 1954.78,1215.14 1955.37,1215.14 1955.95,1215.14 1956.54,1215.14 1957.12,1215.14 1957.71,1215.14 1958.3,1215.14 1958.88,1215.14 1959.47,1215.14 1960.06,1215.14 1960.64,1215.14 1961.23,1215.14 1961.82,1215.14 1962.4,1215.14 1962.99,1215.14 1963.58,1215.14 1964.16,1215.14 1964.75,1215.14 1965.33,1215.14 1965.92,1215.14 1966.51,1215.14 1967.09,1215.14 1967.68,1215.14 1968.27,1215.14 1968.85,1215.14 1969.44,1215.14 1970.03,1215.14 1970.61,1215.14 1971.2,1215.14 1971.78,1215.14 1972.37,1215.14 1972.96,1215.14 1973.54,1215.14 1974.13,1215.14 1974.72,1215.14 1975.3,1215.14 1975.89,1215.14 1976.48,1215.14 1977.06,1215.14 1977.65,1215.14 1978.24,1215.14 1978.82,1215.14 1979.41,1215.14 1979.99,1215.14 1980.58,1215.14 1981.17,1215.14 1981.75,1215.14 1982.34,1215.14 1982.93,1215.14 1983.51,1215.14 1984.1,1215.14 1984.69,1215.14 1985.27,1215.14 1985.86,1215.14 1986.45,1215.14 1987.03,1215.14 1987.62,1215.14 1988.2,1215.14 1988.79,1215.14 1989.38,1215.14 1989.96,1215.14 1990.55,1215.14 1991.14,1215.14 1991.72,1215.14 1992.31,1215.14 1992.9,1215.14 1993.48,1215.14 1994.07,1215.14 1994.65,1215.14 1995.24,1215.14 1995.83,1215.14 1996.41,1215.14 1997,1215.14 1997.59,1215.14 1998.17,1215.14 1998.76,1215.14 1999.35,1215.14 1999.93,1215.14 2000.52,1215.14 2001.11,1215.14 2001.69,1215.14 2002.28,1215.14 2002.86,1215.14 2003.45,1215.14 2004.04,1215.14 2004.62,1215.14 2005.21,1215.14 2005.8,1215.14 2006.38,1215.14 2006.97,1215.14 2007.56,1215.14 2008.14,1215.14 2008.73,1215.14 2009.32,1215.14 2009.9,1215.14 2010.49,1215.14 2011.07,1215.14 2011.66,1215.14 2012.25,1215.14 2012.83,1215.14 2013.42,1215.14 2014.01,1215.14 2014.59,1215.14 2015.18,1215.14 2015.77,1215.14 2016.35,1215.14 2016.94,1215.14 2017.53,1215.14 2018.11,1215.14 2018.7,1215.14 2019.28,1215.14 2019.87,1215.14 2020.46,1215.14 2021.04,1215.14 2021.63,1215.14 2022.22,1215.14 2022.8,1215.14 2023.39,1215.14 2023.98,1215.14 2024.56,1215.14 2025.15,1215.14 2025.73,1215.14 2026.32,1215.14 2026.91,1215.14 2027.49,1215.14 2028.08,1215.14 2028.67,1215.14 2029.25,1215.14 2029.84,1215.14 2030.43,1215.14 2031.01,1215.14 2031.6,1215.14 2032.19,1215.14 2032.77,1215.14 2033.36,1215.14 2033.94,1215.14 2034.53,1215.14 2035.12,1215.14 2035.7,1215.14 2036.29,1215.14 2036.88,1215.14 2037.46,1215.14 2038.05,1215.14 2038.64,1215.14 2039.22,1215.14 2039.81,1215.14 2040.4,1215.14 2040.98,1215.14 2041.57,1215.14 2042.15,1215.14 2042.74,1215.14 2043.33,1215.14 2043.91,1215.14 2044.5,1215.14 2045.09,1215.14 2045.67,1215.14 2046.26,1215.14 2046.85,1215.14 2047.43,1215.14 2048.02,1215.14 2048.6,1215.14 2049.19,1215.14 2049.78,1215.14 2050.36,1215.14 2050.95,1215.14 2051.54,1215.14 2052.12,1215.14 2052.71,1215.14 2053.3,1215.14 2053.88,1215.14 2054.47,1215.14 2055.06,1215.14 2055.64,1215.14 2056.23,1215.14 2056.81,1215.14 2057.4,1215.14 2057.99,1215.14 2058.57,1215.14 2059.16,1215.14 2059.75,1215.14 2060.33,1215.14 2060.92,1215.14 2061.51,1215.14 2062.09,1215.14 2062.68,1215.14 2063.27,1215.14 2063.85,1215.14 2064.44,1215.14 2065.02,1215.14 2065.61,1215.14 2066.2,1215.14 2066.78,1215.14 2067.37,1215.14 2067.96,1215.14 2068.54,1215.14 2069.13,1215.14 2069.72,1215.14 2070.3,1215.14 2070.89,1215.14 2071.48,1215.14 2072.06,1215.14 2072.65,1215.14 2073.23,1215.14 2073.82,1215.14 2074.41,1215.14 2074.99,1215.14 2075.58,1215.14 2076.17,1215.14 2076.75,1215.14 2077.34,1215.14 2077.93,1215.14 2078.51,1215.14 2079.1,1215.14 2079.68,1215.14 2080.27,1215.14 2080.86,1215.14 2081.44,1215.14 2082.03,1215.14 2082.62,1215.14 2083.2,1215.14 2083.79,1215.14 2084.38,1215.14 2084.96,1215.14 2085.55,1215.14 2086.14,1215.14 2086.72,1215.14 2087.31,1215.14 2087.89,1215.14 2088.48,1215.14 2089.07,1215.14 2089.65,1215.14 2090.24,1215.14 2090.83,1215.14 2091.41,1215.14 2092,1215.14 2092.59,1215.14 2093.17,1215.14 2093.76,1215.14 2094.35,1215.14 2094.93,1215.14 2095.52,1215.14 2096.1,1215.14 2096.69,1215.14 2097.28,1215.14 2097.86,1215.14 2098.45,1215.14 2099.04,1215.14 2099.62,1215.14 2100.21,1215.14 2100.8,1215.14 2101.38,1215.14 2101.97,1215.14 2102.55,1215.14 2103.14,1215.14 2103.73,1215.14 2104.31,1215.14 2104.9,1215.14 2105.49,1215.14 2106.07,1215.14 2106.66,1215.14 2107.25,1215.14 2107.83,1215.14 2108.42,1215.14 2109.01,1215.14 2109.59,1215.14 2110.18,1215.14 2110.76,1215.14 2111.35,1215.14 2111.94,1215.14 2112.52,1215.14 2113.11,1215.14 2113.7,1215.14 2114.28,1215.14 2114.87,1215.14 2115.46,1215.14 2116.04,1215.14 2116.63,1215.14 2117.22,1215.14 2117.8,1215.14 2118.39,1215.14 2118.97,1215.14 2119.56,1215.14 2120.15,1215.14 2120.73,1215.14 2121.32,1215.14 2121.91,1215.14 2122.49,1215.14 2123.08,1215.14 2123.67,1215.14 2124.25,1215.14 2124.84,1215.14 2125.42,1215.14 2126.01,1215.14 2126.6,1215.14 2127.18,1215.14 2127.77,1215.14 2128.36,1215.14 2128.94,1215.14 2129.53,1215.14 2130.12,1215.14 2130.7,1215.14 2131.29,1215.14 2131.88,1215.14 2132.46,1215.14 2133.05,1215.14 2133.63,1215.14 2134.22,1215.14 2134.81,1215.14 2135.39,1215.14 2135.98,1215.14 2136.57,1215.14 2137.15,1215.14 2137.74,1215.14 2138.33,1215.14 2138.91,1215.14 2139.5,1215.14 2140.09,1215.14 2140.67,1215.14 2141.26,1215.14 2141.84,1215.14 2142.43,1215.14 2143.02,1215.14 2143.6,1215.14 2144.19,1215.14 2144.78,1215.14 2145.36,1215.14 2145.95,1215.14 2146.54,1215.14 2147.12,1215.14 2147.71,1215.14 2148.3,1215.14 2148.88,1215.14 2149.47,1215.14 2150.05,1215.14 2150.64,1215.14 2151.23,1215.14 2151.81,1215.14 2152.4,1215.14 2152.99,1215.14 2153.57,1215.14 2154.16,1215.14 2154.75,1215.14 2155.33,1215.14 2155.92,1215.14 2156.5,1215.14 2157.09,1215.14 2157.68,1215.14 2158.26,1215.14 \"/>\n<path clip-path=\"url(#clip392)\" d=\"M986.025 1214.95 L986.612 1214.95 L987.198 1214.95 L987.785 1214.95 L988.371 1214.95 L988.957 1214.95 L989.544 1214.95 L990.13 1214.95 L990.717 1214.95 L991.303 1214.95 L991.889 1214.95 L992.476 1214.95 L993.062 1214.95 L993.649 1214.95 L994.235 1214.95 L994.822 1214.95 L995.408 1214.95 L995.994 1214.95 L996.581 1214.95 L997.167 1214.95 L997.754 1214.95 L998.34 1214.95 L998.926 1214.95 L999.513 1214.95 L1000.1 1214.95 L1000.69 1214.95 L1001.27 1214.95 L1001.86 1214.95 L1002.44 1214.95 L1003.03 1214.95 L1003.62 1214.95 L1004.2 1214.95 L1004.79 1214.95 L1005.38 1214.95 L1005.96 1214.95 L1006.55 1214.95 L1007.14 1214.95 L1007.72 1214.95 L1008.31 1214.95 L1008.9 1214.95 L1009.48 1214.95 L1010.07 1214.95 L1010.65 1214.95 L1011.24 1214.95 L1011.83 1214.95 L1012.41 1214.95 L1013 1214.95 L1013.59 1214.95 L1014.17 1214.95 L1014.76 1214.95 L1015.35 1214.95 L1015.93 1214.95 L1016.52 1214.95 L1017.11 1214.95 L1017.69 1214.95 L1018.28 1214.95 L1018.86 1214.95 L1019.45 1214.95 L1020.04 1214.95 L1020.62 1214.95 L1021.21 1214.95 L1021.8 1214.95 L1022.38 1214.95 L1022.97 1214.95 L1023.56 1214.95 L1024.14 1214.95 L1024.73 1214.95 L1025.32 1214.95 L1025.9 1214.95 L1026.49 1214.95 L1027.07 1214.95 L1027.66 1214.95 L1028.25 1214.95 L1028.83 1214.95 L1029.42 1214.95 L1030.01 1214.95 L1030.59 1214.95 L1031.18 1214.95 L1031.77 1214.95 L1032.35 1214.95 L1032.94 1214.95 L1033.52 1214.95 L1034.11 1214.95 L1034.7 1214.95 L1035.28 1214.95 L1035.87 1214.95 L1036.46 1214.95 L1037.04 1214.95 L1037.63 1214.95 L1038.22 1214.95 L1038.8 1214.95 L1039.39 1214.95 L1039.98 1214.95 L1040.56 1214.95 L1041.15 1214.95 L1041.73 1214.95 L1042.32 1214.95 L1042.91 1214.95 L1043.49 1214.95 L1044.08 1214.95 L1044.67 1214.95 L1045.25 1214.95 L1045.84 1214.95 L1046.43 1214.95 L1047.01 1214.95 L1047.6 1214.95 L1048.19 1214.95 L1048.77 1214.95 L1049.36 1214.95 L1049.94 1214.95 L1050.53 1214.95 L1051.12 1214.95 L1051.7 1214.95 L1052.29 1214.95 L1052.88 1214.95 L1053.46 1214.95 L1054.05 1214.95 L1054.64 1214.95 L1055.22 1214.95 L1055.81 1214.95 L1056.39 1214.95 L1056.98 1214.95 L1057.57 1214.95 L1058.15 1214.95 L1058.74 1214.95 L1059.33 1214.95 L1059.91 1214.95 L1060.5 1214.95 L1061.09 1214.95 L1061.67 1214.95 L1062.26 1214.95 L1062.85 1214.95 L1063.43 1214.95 L1064.02 1214.95 L1064.6 1214.95 L1065.19 1214.95 L1065.78 1214.95 L1066.36 1214.95 L1066.95 1214.95 L1067.54 1214.95 L1068.12 1214.95 L1068.71 1214.95 L1069.3 1214.95 L1069.88 1214.95 L1070.47 1214.95 L1071.06 1214.95 L1071.64 1214.95 L1072.23 1214.95 L1072.81 1214.95 L1073.4 1214.95 L1073.99 1214.95 L1074.57 1214.95 L1075.16 1214.95 L1075.75 1214.95 L1076.33 1214.95 L1076.92 1214.95 L1077.51 1214.95 L1078.09 1214.95 L1078.68 1214.95 L1079.26 1214.95 L1079.85 1214.95 L1080.44 1214.95 L1081.02 1214.95 L1081.61 1214.95 L1082.2 1214.95 L1082.78 1214.95 L1083.37 1214.95 L1083.96 1214.95 L1084.54 1214.95 L1085.13 1214.95 L1085.72 1214.95 L1086.3 1214.95 L1086.89 1214.95 L1087.47 1214.95 L1088.06 1214.95 L1088.65 1214.95 L1089.23 1214.95 L1089.82 1214.95 L1090.41 1214.95 L1090.99 1214.95 L1091.58 1214.95 L1092.17 1214.95 L1092.75 1214.95 L1093.34 1214.95 L1093.93 1214.95 L1094.51 1214.95 L1095.1 1214.95 L1095.68 1214.95 L1096.27 1214.95 L1096.86 1214.95 L1097.44 1214.95 L1098.03 1214.95 L1098.62 1214.95 L1099.2 1214.95 L1099.79 1214.95 L1100.38 1214.95 L1100.96 1214.95 L1101.55 1214.95 L1102.14 1214.95 L1102.72 1214.95 L1103.31 1214.95 L1103.89 1214.95 L1104.48 1214.95 L1105.07 1214.95 L1105.65 1214.95 L1106.24 1214.95 L1106.83 1214.95 L1107.41 1214.95 L1108 1214.95 L1108.59 1214.95 L1109.17 1214.95 L1109.76 1214.95 L1110.34 1214.95 L1110.93 1214.95 L1111.52 1214.95 L1112.1 1214.95 L1112.69 1214.95 L1113.28 1214.95 L1113.86 1214.95 L1114.45 1214.95 L1115.04 1214.95 L1115.62 1214.95 L1116.21 1214.95 L1116.8 1214.95 L1117.38 1214.95 L1117.97 1214.95 L1118.55 1214.95 L1119.14 1214.95 L1119.73 1214.95 L1120.31 1214.95 L1120.9 1214.95 L1121.49 1214.95 L1122.07 1214.95 L1122.66 1214.95 L1123.25 1214.95 L1123.83 1214.95 L1124.42 1214.95 L1125.01 1214.95 L1125.59 1214.95 L1126.18 1214.95 L1126.76 1214.95 L1127.35 1214.95 L1127.94 1214.95 L1128.52 1214.95 L1129.11 1214.95 L1129.7 1214.95 L1130.28 1214.95 L1130.87 1214.95 L1131.46 1214.95 L1132.04 1214.95 L1132.63 1214.95 L1133.21 1214.95 L1133.8 1214.95 L1134.39 1214.95 L1134.97 1214.95 L1135.56 1214.95 L1136.15 1214.95 L1136.73 1214.95 L1137.32 1214.95 L1137.91 1214.95 L1138.49 1214.95 L1139.08 1214.95 L1139.67 1214.95 L1140.25 1214.95 L1140.84 1214.95 L1141.42 1214.95 L1142.01 1214.95 L1142.6 1214.95 L1143.18 1214.95 L1143.77 1214.95 L1144.36 1214.95 L1144.94 1214.95 L1145.53 1214.95 L1146.12 1214.95 L1146.7 1214.95 L1147.29 1214.95 L1147.88 1214.95 L1148.46 1214.95 L1149.05 1214.95 L1149.63 1214.95 L1150.22 1214.95 L1150.81 1214.95 L1151.39 1214.95 L1151.98 1214.95 L1152.57 1214.95 L1153.15 1214.95 L1153.74 1214.95 L1154.33 1214.95 L1154.91 1214.95 L1155.5 1214.95 L1156.09 1214.95 L1156.67 1214.95 L1157.26 1214.95 L1157.84 1214.95 L1158.43 1214.95 L1159.02 1214.95 L1159.6 1214.95 L1160.19 1214.95 L1160.78 1214.95 L1161.36 1214.95 L1161.95 1214.95 L1162.54 1214.95 L1163.12 1214.95 L1163.71 1214.95 L1164.29 1214.95 L1164.88 1214.95 L1165.47 1214.95 L1166.05 1214.95 L1166.64 1214.95 L1167.23 1214.95 L1167.81 1214.95 L1168.4 1214.95 L1168.99 1214.95 L1169.57 1214.95 L1170.16 1214.95 L1170.75 1214.95 L1171.33 1214.95 L1171.92 1214.95 L1172.5 1214.95 L1173.09 1214.95 L1173.68 1214.95 L1174.26 1214.95 L1174.85 1214.95 L1175.44 1214.95 L1176.02 1214.95 L1176.61 1214.95 L1177.2 1214.95 L1177.78 1214.95 L1178.37 1214.95 L1178.96 1214.95 L1179.54 1214.95 L1180.13 1214.95 L1180.71 1214.95 L1181.3 1214.95 L1181.89 1214.95 L1182.47 1214.95 L1183.06 1214.95 L1183.65 1214.95 L1184.23 1214.95 L1184.82 1214.95 L1185.41 1214.95 L1185.99 1214.95 L1186.58 1214.95 L1187.16 1214.95 L1187.75 1214.95 L1188.34 1214.95 L1188.92 1214.95 L1189.51 1214.95 L1190.1 1214.95 L1190.68 1214.95 L1191.27 1214.95 L1191.86 1214.95 L1192.44 1214.95 L1193.03 1214.95 L1193.62 1214.95 L1194.2 1214.95 L1194.79 1214.95 L1195.37 1214.95 L1195.96 1214.95 L1196.55 1214.95 L1197.13 1214.95 L1197.72 1214.95 L1198.31 1214.95 L1198.89 1214.95 L1199.48 1214.95 L1200.07 1214.95 L1200.65 1214.95 L1201.24 1214.95 L1201.83 1214.95 L1202.41 1214.95 L1203 1214.95 L1203.58 1214.95 L1204.17 1214.95 L1204.76 1214.95 L1205.34 1214.95 L1205.93 1214.95 L1206.52 1214.95 L1207.1 1214.95 L1207.69 1214.95 L1208.28 1214.95 L1208.86 1214.95 L1209.45 1214.95 L1210.03 1214.95 L1210.62 1214.95 L1211.21 1214.95 L1211.79 1214.95 L1212.38 1214.95 L1212.97 1214.95 L1213.55 1214.95 L1214.14 1214.95 L1214.73 1214.95 L1215.31 1214.95 L1215.9 1214.95 L1216.49 1214.95 L1217.07 1214.95 L1217.66 1214.95 L1218.24 1214.95 L1218.83 1214.95 L1219.42 1214.95 L1220 1214.95 L1220.59 1214.95 L1221.18 1214.95 L1221.76 1214.95 L1222.35 1214.95 L1222.94 1214.95 L1223.52 1214.95 L1224.11 1214.95 L1224.7 1214.95 L1225.28 1214.95 L1225.87 1214.95 L1226.45 1214.95 L1227.04 1214.95 L1227.63 1214.95 L1228.21 1214.95 L1228.8 1214.95 L1229.39 1214.95 L1229.97 1214.95 L1230.56 1214.95 L1231.15 1214.95 L1231.73 1214.95 L1232.32 1214.95 L1232.91 1214.95 L1233.49 1214.95 L1234.08 1214.95 L1234.66 1214.95 L1235.25 1214.95 L1235.84 1214.95 L1236.42 1214.95 L1237.01 1214.95 L1237.6 1214.95 L1238.18 1214.95 L1238.77 1214.95 L1239.36 1214.95 L1239.94 1214.95 L1240.53 1214.95 L1241.11 1214.95 L1241.7 1214.95 L1242.29 1214.95 L1242.87 1214.95 L1243.46 1214.95 L1244.05 1214.95 L1244.63 1214.95 L1245.22 1214.95 L1245.81 1214.95 L1246.39 1214.95 L1246.98 1214.95 L1247.57 1214.95 L1248.15 1214.95 L1248.74 1214.95 L1249.32 1214.95 L1249.91 1214.95 L1250.5 1214.95 L1251.08 1214.95 L1251.67 1214.95 L1252.26 1214.95 L1252.84 1214.95 L1253.43 1214.95 L1254.02 1214.95 L1254.6 1214.95 L1255.19 1214.95 L1255.78 1214.95 L1256.36 1214.95 L1256.95 1214.95 L1257.53 1214.95 L1258.12 1214.95 L1258.71 1214.95 L1259.29 1214.95 L1259.88 1214.95 L1260.47 1214.95 L1261.05 1214.95 L1261.64 1214.95 L1262.23 1214.95 L1262.81 1214.95 L1263.4 1214.95 L1263.98 1214.95 L1264.57 1214.95 L1265.16 1214.95 L1265.74 1214.95 L1266.33 1214.95 L1266.92 1214.95 L1267.5 1214.95 L1268.09 1214.95 L1268.68 1214.95 L1269.26 1214.95 L1269.85 1214.95 L1270.44 1214.95 L1271.02 1214.95 L1271.61 1214.95 L1272.19 1214.95 L1272.78 1214.95 L1273.37 1214.95 L1273.95 1214.95 L1274.54 1214.95 L1275.13 1214.95 L1275.71 1214.95 L1276.3 1214.95 L1276.89 1214.95 L1277.47 1214.95 L1278.06 1214.95 L1278.65 1214.95 L1279.23 1214.95 L1279.82 1214.95 L1280.4 1214.95 L1280.99 1214.95 L1281.58 1214.95 L1282.16 1214.95 L1282.75 1214.95 L1283.34 1214.95 L1283.92 1214.95 L1284.51 1214.95 L1285.1 1214.95 L1285.68 1214.95 L1286.27 1214.95 L1286.86 1214.95 L1287.44 1214.95 L1288.03 1214.95 L1288.61 1214.95 L1289.2 1214.95 L1289.79 1214.95 L1290.37 1214.95 L1290.96 1214.95 L1291.55 1214.95 L1292.13 1214.95 L1292.72 1214.95 L1293.31 1214.95 L1293.89 1214.95 L1294.48 1214.95 L1295.06 1214.95 L1295.65 1214.95 L1296.24 1214.95 L1296.82 1214.95 L1297.41 1214.95 L1298 1214.95 L1298.58 1214.95 L1299.17 1214.95 L1299.76 1214.95 L1300.34 1214.95 L1300.93 1214.95 L1301.52 1214.95 L1302.1 1214.95 L1302.69 1214.95 L1303.27 1214.95 L1303.86 1214.95 L1304.45 1214.95 L1305.03 1214.95 L1305.62 1214.95 L1306.21 1214.95 L1306.79 1214.95 L1307.38 1214.95 L1307.97 1214.95 L1308.55 1214.95 L1309.14 1214.95 L1309.73 1214.95 L1310.31 1214.95 L1310.9 1214.95 L1311.48 1214.95 L1312.07 1214.95 L1312.66 1214.95 L1313.24 1214.95 L1313.83 1214.95 L1314.42 1214.95 L1315 1214.95 L1315.59 1214.95 L1316.18 1214.95 L1316.76 1214.95 L1317.35 1214.95 L1317.93 1214.95 L1318.52 1214.95 L1319.11 1214.95 L1319.69 1214.95 L1320.28 1214.95 L1320.87 1214.95 L1321.45 1214.95 L1322.04 1214.95 L1322.63 1214.95 L1323.21 1214.95 L1323.8 1214.95 L1324.39 1214.95 L1324.97 1214.95 L1325.56 1214.95 L1326.14 1214.95 L1326.73 1214.95 L1327.32 1214.95 L1327.9 1214.95 L1328.49 1214.95 L1329.08 1214.95 L1329.66 1214.95 L1330.25 1214.95 L1330.84 1214.95 L1331.42 1214.95 L1332.01 1214.95 L1332.6 1214.95 L1333.18 1214.95 L1333.77 1214.95 L1334.35 1214.95 L1334.94 1214.95 L1335.53 1214.95 L1336.11 1214.95 L1336.7 1214.95 L1337.29 1214.95 L1337.87 1214.95 L1338.46 1214.95 L1339.05 1214.95 L1339.63 1214.95 L1340.22 1214.95 L1340.8 1214.95 L1341.39 1214.95 L1341.98 1214.95 L1342.56 1214.95 L1343.15 1214.95 L1343.74 1214.95 L1344.32 1214.95 L1344.91 1214.95 L1345.5 1214.95 L1346.08 1214.95 L1346.67 1214.95 L1347.26 1214.95 L1347.84 1214.95 L1348.43 1214.95 L1349.01 1214.95 L1349.6 1214.95 L1350.19 1214.95 L1350.77 1214.95 L1351.36 1214.95 L1351.95 1214.95 L1352.53 1214.95 L1353.12 1214.95 L1353.71 1214.95 L1354.29 1214.95 L1354.88 1214.95 L1355.47 1214.95 L1356.05 1214.95 L1356.64 1214.95 L1357.22 1214.95 L1357.81 1214.95 L1358.4 1214.95 L1358.98 1214.95 L1359.57 1214.95 L1360.16 1214.95 L1360.74 1214.95 L1361.33 1214.95 L1361.92 1214.95 L1362.5 1214.95 L1363.09 1214.95 L1363.68 1214.95 L1364.26 1214.95 L1364.85 1214.95 L1365.43 1214.95 L1366.02 1214.95 L1366.61 1214.95 L1367.19 1214.95 L1367.78 1214.95 L1368.37 1214.95 L1368.95 1214.95 L1369.54 1214.95 L1370.13 1214.95 L1370.71 1214.95 L1371.3 1214.95 L1371.88 1214.95 L1372.47 1214.95 L1373.06 1214.95 L1373.64 1214.95 L1374.23 1214.95 L1374.82 1214.95 L1375.4 1214.95 L1375.99 1214.95 L1376.58 1214.95 L1377.16 1214.95 L1377.75 1214.95 L1378.34 1214.95 L1378.92 1214.95 L1379.51 1214.95 L1380.09 1214.95 L1380.68 1214.95 L1381.27 1214.95 L1381.85 1214.95 L1382.44 1214.95 L1383.03 1214.95 L1383.61 1214.95 L1384.2 1214.95 L1384.79 1214.95 L1385.37 1214.95 L1385.96 1214.95 L1386.55 1214.95 L1387.13 1214.95 L1387.72 1214.95 L1388.3 1214.95 L1388.89 1214.95 L1389.48 1214.95 L1390.06 1214.95 L1390.65 1214.95 L1391.24 1214.95 L1391.82 1214.95 L1392.41 1214.95 L1393 1214.95 L1393.58 1214.95 L1394.17 1214.95 L1394.75 1214.95 L1395.34 1214.95 L1395.93 1214.95 L1396.51 1214.95 L1397.1 1214.95 L1397.69 1214.95 L1398.27 1214.95 L1398.86 1214.95 L1399.45 1214.95 L1400.03 1214.95 L1400.62 1214.95 L1401.21 1214.95 L1401.79 1214.95 L1402.38 1214.95 L1402.96 1214.95 L1403.55 1214.95 L1404.14 1214.95 L1404.72 1214.95 L1405.31 1214.95 L1405.9 1214.95 L1406.48 1214.95 L1407.07 1214.95 L1407.66 1214.95 L1408.24 1214.95 L1408.83 1214.95 L1409.42 1214.95 L1410 1214.95 L1410.59 1214.95 L1411.17 1214.95 L1411.76 1214.95 L1412.35 1214.95 L1412.93 1214.95 L1413.52 1214.95 L1414.11 1214.95 L1414.69 1214.95 L1415.28 1214.95 L1415.87 1214.95 L1416.45 1214.95 L1417.04 1214.95 L1417.63 1214.95 L1418.21 1214.95 L1418.8 1214.95 L1419.38 1214.95 L1419.97 1214.95 L1420.56 1214.95 L1421.14 1214.95 L1421.73 1214.95 L1422.32 1214.95 L1422.9 1214.95 L1423.49 1214.95 L1424.08 1214.95 L1424.66 1214.95 L1425.25 1214.95 L1425.83 1214.95 L1426.42 1214.95 L1427.01 1214.95 L1427.59 1214.95 L1428.18 1214.95 L1428.77 1214.95 L1429.35 1214.95 L1429.94 1214.95 L1430.53 1214.95 L1431.11 1214.95 L1431.7 1214.95 L1432.29 1214.95 L1432.87 1214.95 L1433.46 1214.95 L1434.04 1214.95 L1434.63 1214.95 L1435.22 1214.95 L1435.8 1214.95 L1436.39 1214.95 L1436.98 1214.95 L1437.56 1214.95 L1438.15 1214.95 L1438.74 1214.95 L1439.32 1214.95 L1439.91 1214.95 L1440.5 1214.95 L1441.08 1214.95 L1441.67 1214.95 L1442.25 1214.95 L1442.84 1214.95 L1443.43 1214.95 L1444.01 1214.95 L1444.6 1214.95 L1445.19 1214.95 L1445.77 1214.95 L1446.36 1214.95 L1446.95 1214.95 L1447.53 1214.95 L1448.12 1214.95 L1448.7 1214.95 L1449.29 1214.95 L1449.88 1214.95 L1450.46 1214.95 L1451.05 1214.95 L1451.64 1214.95 L1452.22 1214.95 L1452.81 1214.95 L1453.4 1214.95 L1453.98 1214.95 L1454.57 1214.95 L1455.16 1214.95 L1455.74 1214.95 L1456.33 1214.95 L1456.91 1214.95 L1457.5 1214.95 L1458.09 1214.95 L1458.67 1214.95 L1459.26 1214.95 L1459.85 1214.95 L1460.43 1214.95 L1461.02 1214.95 L1461.61 1214.95 L1462.19 1214.95 L1462.78 1214.95 L1463.37 1214.95 L1463.95 1214.95 L1464.54 1214.95 L1465.12 1214.95 L1465.71 1214.95 L1466.3 1214.95 L1466.88 1214.95 L1467.47 1214.95 L1468.06 1214.95 L1468.64 1214.95 L1469.23 1214.95 L1469.82 1214.95 L1470.4 1214.95 L1470.99 1214.95 L1471.57 1214.95 L1472.16 1214.95 L1472.75 1214.95 L1473.33 1214.95 L1473.92 1214.95 L1474.51 1214.95 L1475.09 1214.95 L1475.68 1214.95 L1476.27 1214.95 L1476.85 1214.95 L1477.44 1214.95 L1478.03 1214.95 L1478.61 1214.95 L1479.2 1214.95 L1479.78 1214.95 L1480.37 1214.95 L1480.96 1214.95 L1481.54 1214.95 L1482.13 1214.95 L1482.72 1214.95 L1483.3 1214.95 L1483.89 1214.95 L1484.48 1214.95 L1485.06 1214.95 L1485.65 1214.95 L1486.24 1214.95 L1486.82 1214.95 L1487.41 1214.95 L1487.99 1214.95 L1488.58 1214.95 L1489.17 1214.95 L1489.75 1214.95 L1490.34 1214.95 L1490.93 1214.95 L1491.51 1214.95 L1492.1 1214.95 L1492.69 1214.95 L1493.27 1214.95 L1493.86 1214.95 L1494.45 1214.95 L1495.03 1214.95 L1495.62 1214.95 L1496.2 1214.95 L1496.79 1214.95 L1497.38 1214.95 L1497.96 1214.95 L1498.55 1214.95 L1499.14 1214.95 L1499.72 1214.95 L1500.31 1214.95 L1500.9 1214.95 L1501.48 1214.95 L1502.07 1214.95 L1502.65 1214.95 L1503.24 1214.95 L1503.83 1214.95 L1504.41 1214.95 L1505 1214.95 L1505.59 1214.95 L1506.17 1214.95 L1506.76 1214.95 L1507.35 1214.95 L1507.93 1214.95 L1508.52 1214.95 L1509.11 1214.95 L1509.69 1214.95 L1510.28 1214.95 L1510.86 1214.95 L1511.45 1214.95 L1512.04 1214.95 L1512.62 1214.95 L1513.21 1214.95 L1513.8 1214.95 L1514.38 1214.95 L1514.97 1214.95 L1515.56 1214.95 L1516.14 1214.95 L1516.73 1214.95 L1517.32 1214.95 L1517.9 1214.95 L1518.49 1214.95 L1519.07 1214.95 L1519.66 1214.95 L1520.25 1214.95 L1520.83 1214.95 L1521.42 1214.95 L1522.01 1214.95 L1522.59 1214.95 L1523.18 1214.95 L1523.77 1214.95 L1524.35 1214.95 L1524.94 1214.95 L1525.52 1214.95 L1526.11 1214.95 L1526.7 1214.95 L1527.28 1214.95 L1527.87 1214.95 L1528.46 1214.95 L1529.04 1214.95 L1529.63 1214.95 L1530.22 1214.95 L1530.8 1214.95 L1531.39 1214.95 L1531.98 1214.95 L1532.56 1214.95 L1533.15 1214.95 L1533.73 1214.95 L1534.32 1214.95 L1534.91 1214.95 L1535.49 1214.95 L1536.08 1214.95 L1536.67 1214.95 L1537.25 1214.95 L1537.84 1214.95 L1538.43 1214.95 L1539.01 1214.95 L1539.6 1214.95 L1540.19 1214.95 L1540.77 1214.95 L1541.36 1214.95 L1541.94 1214.95 L1542.53 1214.95 L1543.12 1214.95 L1543.7 1214.95 L1544.29 1214.95 L1544.88 1214.95 L1545.46 1214.95 L1546.05 1214.95 L1546.64 1214.95 L1547.22 1214.95 L1547.81 1214.95 L1548.4 1214.95 L1548.98 1214.95 L1549.57 1214.95 L1550.15 1214.95 L1550.74 1214.95 L1551.33 1214.95 L1551.91 1214.95 L1552.5 1214.95 L1553.09 1214.95 L1553.67 1214.95 L1554.26 1214.95 L1554.85 1214.95 L1555.43 1214.95 L1556.02 1214.95 L1556.6 1214.95 L1557.19 1214.95 L1557.78 1214.95 L1558.36 1214.95 L1558.95 1214.95 L1559.54 1214.95 L1560.12 1214.95 L1560.71 1214.95 L1561.3 1214.95 L1561.88 1214.95 L1562.47 1214.95 L1563.06 1214.95 L1563.64 1214.95 L1564.23 1214.95 L1564.81 1214.95 L1565.4 1214.95 L1565.99 1214.95 L1566.57 1214.95 L1567.16 1214.95 L1567.75 1214.95 L1568.33 1214.95 L1568.92 1214.95 L1569.51 1214.95 L1570.09 1214.95 L1570.68 1214.95 L1571.27 1214.95 L1571.85 1214.95 L1572.44 1214.95 L1573.02 1214.95 L1573.61 1214.95 L1574.2 1214.95 L1574.78 1214.95 L1575.37 1214.95 L1575.96 1214.95 L1576.54 1214.95 L1577.13 1214.95 L1577.72 1214.95 L1578.3 1214.95 L1578.89 1214.95 L1579.47 1214.95 L1580.06 1214.95 L1580.65 1214.95 L1581.23 1214.95 L1581.82 1214.95 L1582.41 1214.95 L1582.99 1214.95 L1583.58 1214.95 L1584.17 1214.95 L1584.75 1214.95 L1585.34 1214.95 L1585.93 1214.95 L1586.51 1214.95 L1587.1 1214.95 L1587.68 1214.95 L1588.27 1214.95 L1588.86 1214.95 L1589.44 1214.95 L1590.03 1214.95 L1590.62 1214.95 L1591.2 1214.95 L1591.79 1214.95 L1592.38 1214.95 L1592.96 1214.95 L1593.55 1214.95 L1594.14 1214.95 L1594.72 1214.95 L1595.31 1214.95 L1595.89 1214.95 L1596.48 1214.95 L1597.07 1214.95 L1597.65 1214.95 L1598.24 1214.95 L1598.83 1214.95 L1599.41 1214.95 L1600 1214.95 L1600.59 1214.95 L1601.17 1214.95 L1601.76 1214.95 L1602.34 1214.95 L1602.93 1214.95 L1603.52 1214.95 L1604.1 1214.95 L1604.69 1214.95 L1605.28 1214.95 L1605.86 1214.95 L1606.45 1214.95 L1607.04 1214.95 L1607.62 1214.95 L1608.21 1214.95 L1608.8 1214.95 L1609.38 1214.95 L1609.97 1214.95 L1610.55 1214.95 L1611.14 1214.95 L1611.73 1214.95 L1612.31 1214.95 L1612.9 1214.95 L1613.49 1214.95 L1614.07 1214.95 L1614.66 1214.95 L1615.25 1214.95 L1615.83 1214.95 L1616.42 1214.95 L1617.01 1214.95 L1617.59 1214.95 L1618.18 1214.95 L1618.76 1214.95 L1619.35 1214.95 L1619.94 1214.95 L1620.52 1214.95 L1621.11 1214.95 L1621.7 1214.95 L1622.28 1214.95 L1622.87 1214.95 L1623.46 1214.95 L1624.04 1214.95 L1624.63 1214.95 L1625.22 1214.95 L1625.8 1214.95 L1626.39 1214.95 L1626.97 1214.95 L1627.56 1214.95 L1628.15 1214.95 L1628.73 1214.95 L1629.32 1214.95 L1629.91 1214.95 L1630.49 1214.95 L1631.08 1214.95 L1631.67 1214.95 L1632.25 1214.95 L1632.84 1214.95 L1633.42 1214.95 L1634.01 1214.95 L1634.6 1214.95 L1635.18 1214.95 L1635.77 1214.95 L1636.36 1214.95 L1636.94 1214.95 L1637.53 1214.95 L1638.12 1214.95 L1638.7 1214.95 L1639.29 1214.95 L1639.88 1214.95 L1640.46 1214.95 L1641.05 1214.95 L1641.63 1214.95 L1642.22 1214.95 L1642.81 1214.95 L1643.39 1214.95 L1643.98 1214.95 L1644.57 1214.95 L1645.15 1214.95 L1645.74 1214.95 L1646.33 1214.95 L1646.91 1214.95 L1647.5 1214.95 L1648.09 1214.95 L1648.67 1214.95 L1649.26 1214.95 L1649.84 1214.95 L1650.43 1214.95 L1651.02 1214.95 L1651.6 1214.95 L1652.19 1214.95 L1652.78 1214.95 L1653.36 1214.95 L1653.95 1214.95 L1654.54 1214.95 L1655.12 1214.95 L1655.71 1214.95 L1656.29 1214.95 L1656.88 1214.95 L1657.47 1214.95 L1658.05 1214.95 L1658.64 1214.95 L1659.23 1214.95 L1659.81 1214.95 L1660.4 1214.95 L1660.99 1214.95 L1661.57 1214.95 L1662.16 1214.95 L1662.75 1214.95 L1663.33 1214.95 L1663.92 1214.95 L1664.5 1214.95 L1665.09 1214.95 L1665.68 1214.95 L1666.26 1214.95 L1666.85 1214.95 L1667.44 1214.95 L1668.02 1214.95 L1668.61 1214.95 L1669.2 1214.95 L1669.78 1214.95 L1670.37 1214.95 L1670.96 1214.95 L1671.54 1214.95 L1672.13 1214.95 L1672.71 1214.95 L1673.3 1214.95 L1673.89 1214.95 L1674.47 1214.95 L1675.06 1214.95 L1675.65 1214.95 L1676.23 1214.95 L1676.82 1214.95 L1677.41 1214.95 L1677.99 1214.95 L1678.58 1214.95 L1679.17 1214.95 L1679.75 1214.95 L1680.34 1214.95 L1680.92 1214.95 L1681.51 1214.95 L1682.1 1214.95 L1682.68 1214.95 L1683.27 1214.95 L1683.86 1214.95 L1684.44 1214.95 L1685.03 1214.95 L1685.62 1214.95 L1686.2 1214.95 L1686.79 1214.95 L1687.37 1214.95 L1687.96 1214.95 L1688.55 1214.95 L1689.13 1214.95 L1689.72 1214.95 L1690.31 1214.95 L1690.89 1214.95 L1691.48 1214.95 L1692.07 1214.95 L1692.65 1214.95 L1693.24 1214.95 L1693.83 1214.95 L1694.41 1214.95 L1695 1214.95 L1695.58 1214.95 L1696.17 1214.95 L1696.76 1214.95 L1697.34 1214.95 L1697.93 1214.95 L1698.52 1214.95 L1699.1 1214.95 L1699.69 1214.95 L1700.28 1214.95 L1700.86 1214.95 L1701.45 1214.95 L1702.04 1214.95 L1702.62 1214.95 L1703.21 1214.95 L1703.79 1214.95 L1704.38 1214.95 L1704.97 1214.95 L1705.55 1214.95 L1706.14 1214.95 L1706.73 1214.95 L1707.31 1214.95 L1707.9 1214.95 L1708.49 1214.95 L1709.07 1214.95 L1709.66 1214.95 L1710.24 1214.95 L1710.83 1214.95 L1711.42 1214.95 L1712 1214.95 L1712.59 1214.95 L1713.18 1214.95 L1713.76 1214.95 L1714.35 1214.95 L1714.94 1214.95 L1715.52 1214.95 L1716.11 1214.95 L1716.7 1214.95 L1717.28 1214.95 L1717.87 1214.95 L1718.45 1214.95 L1719.04 1214.95 L1719.63 1214.95 L1720.21 1214.95 L1720.8 1214.95 L1721.39 1214.95 L1721.97 1214.95 L1722.56 1214.95 L1723.15 1214.95 L1723.73 1214.95 L1724.32 1214.95 L1724.91 1214.95 L1725.49 1214.95 L1726.08 1214.95 L1726.66 1214.95 L1727.25 1214.95 L1727.84 1214.95 L1728.42 1214.95 L1729.01 1214.95 L1729.6 1214.95 L1730.18 1214.95 L1730.77 1214.95 L1731.36 1214.95 L1731.94 1214.95 L1732.53 1214.95 L1733.11 1214.95 L1733.7 1214.95 L1734.29 1214.95 L1734.87 1214.95 L1735.46 1214.95 L1736.05 1214.95 L1736.63 1214.95 L1737.22 1214.95 L1737.81 1214.95 L1738.39 1214.95 L1738.98 1214.95 L1739.57 1214.95 L1740.15 1214.95 L1740.74 1214.95 L1741.32 1214.95 L1741.91 1214.95 L1742.5 1214.95 L1743.08 1214.95 L1743.67 1214.95 L1744.26 1214.95 L1744.84 1214.95 L1745.43 1214.95 L1746.02 1214.95 L1746.6 1214.95 L1747.19 1214.95 L1747.78 1214.95 L1748.36 1214.95 L1748.95 1214.95 L1749.53 1214.95 L1750.12 1214.95 L1750.71 1214.95 L1751.29 1214.95 L1751.88 1214.95 L1752.47 1214.95 L1753.05 1214.95 L1753.64 1214.95 L1754.23 1214.95 L1754.81 1214.95 L1755.4 1214.95 L1755.99 1214.95 L1756.57 1214.95 L1757.16 1214.95 L1757.74 1214.95 L1758.33 1214.95 L1758.92 1214.95 L1759.5 1214.95 L1760.09 1214.95 L1760.68 1214.95 L1761.26 1214.95 L1761.85 1214.95 L1762.44 1214.95 L1763.02 1214.95 L1763.61 1214.95 L1764.19 1214.95 L1764.78 1214.95 L1765.37 1214.95 L1765.95 1214.95 L1766.54 1214.95 L1767.13 1214.95 L1767.71 1214.95 L1768.3 1214.95 L1768.89 1214.95 L1769.47 1214.95 L1770.06 1214.95 L1770.65 1214.95 L1771.23 1214.95 L1771.82 1214.95 L1772.4 1214.95 L1772.99 1214.95 L1773.58 1214.95 L1774.16 1214.95 L1774.75 1214.95 L1775.34 1214.95 L1775.92 1214.95 L1776.51 1214.95 L1777.1 1214.95 L1777.68 1214.95 L1778.27 1214.95 L1778.86 1214.95 L1779.44 1214.95 L1780.03 1214.95 L1780.61 1214.95 L1781.2 1214.95 L1781.79 1214.95 L1782.37 1214.95 L1782.96 1214.95 L1783.55 1214.95 L1784.13 1214.95 L1784.72 1214.95 L1785.31 1214.95 L1785.89 1214.95 L1786.48 1214.95 L1787.06 1214.95 L1787.65 1214.95 L1788.24 1214.95 L1788.82 1214.95 L1789.41 1214.95 L1790 1214.95 L1790.58 1214.95 L1791.17 1214.95 L1791.76 1214.95 L1792.34 1214.95 L1792.93 1214.95 L1793.52 1214.95 L1794.1 1214.95 L1794.69 1214.95 L1795.27 1214.95 L1795.86 1214.95 L1796.45 1214.95 L1797.03 1214.95 L1797.62 1214.95 L1798.21 1214.95 L1798.79 1214.95 L1799.38 1214.95 L1799.97 1214.95 L1800.55 1214.95 L1801.14 1214.95 L1801.73 1214.95 L1802.31 1214.95 L1802.9 1214.95 L1803.48 1214.95 L1804.07 1214.95 L1804.66 1214.95 L1805.24 1214.95 L1805.83 1214.95 L1806.42 1214.95 L1807 1214.95 L1807.59 1214.95 L1808.18 1214.95 L1808.76 1214.95 L1809.35 1214.95 L1809.94 1214.95 L1810.52 1214.95 L1811.11 1214.95 L1811.69 1214.95 L1812.28 1214.95 L1812.87 1214.95 L1813.45 1214.95 L1814.04 1214.95 L1814.63 1214.95 L1815.21 1214.95 L1815.8 1214.95 L1816.39 1214.95 L1816.97 1214.95 L1817.56 1214.95 L1818.14 1214.95 L1818.73 1214.95 L1819.32 1214.95 L1819.9 1214.95 L1820.49 1214.95 L1821.08 1214.95 L1821.66 1214.95 L1822.25 1214.95 L1822.84 1214.95 L1823.42 1214.95 L1824.01 1214.95 L1824.6 1214.95 L1825.18 1214.95 L1825.77 1214.95 L1826.35 1214.95 L1826.94 1214.95 L1827.53 1214.95 L1828.11 1214.95 L1828.7 1214.95 L1829.29 1214.95 L1829.87 1214.95 L1830.46 1214.95 L1831.05 1214.95 L1831.63 1214.95 L1832.22 1214.95 L1832.81 1214.95 L1833.39 1214.95 L1833.98 1214.95 L1834.56 1214.95 L1835.15 1214.95 L1835.74 1214.95 L1836.32 1214.95 L1836.91 1214.95 L1837.5 1214.95 L1838.08 1214.95 L1838.67 1214.95 L1839.26 1214.95 L1839.84 1214.95 L1840.43 1214.95 L1841.01 1214.95 L1841.6 1214.95 L1842.19 1214.95 L1842.77 1214.95 L1843.36 1214.95 L1843.95 1214.95 L1844.53 1214.95 L1845.12 1214.95 L1845.71 1214.95 L1846.29 1214.95 L1846.88 1214.95 L1847.47 1214.95 L1848.05 1214.95 L1848.64 1214.95 L1849.22 1214.95 L1849.81 1214.95 L1850.4 1214.95 L1850.98 1214.95 L1851.57 1214.95 L1852.16 1214.95 L1852.74 1214.95 L1853.33 1214.95 L1853.92 1214.95 L1854.5 1214.95 L1855.09 1214.95 L1855.68 1214.95 L1856.26 1214.95 L1856.85 1214.95 L1857.43 1214.95 L1858.02 1214.95 L1858.61 1214.95 L1859.19 1214.95 L1859.78 1214.95 L1860.37 1214.95 L1860.95 1214.95 L1861.54 1214.95 L1862.13 1214.95 L1862.71 1214.95 L1863.3 1214.95 L1863.88 1214.95 L1864.47 1214.95 L1865.06 1214.95 L1865.64 1214.95 L1866.23 1214.95 L1866.82 1214.95 L1867.4 1214.95 L1867.99 1214.95 L1868.58 1214.95 L1869.16 1214.95 L1869.75 1214.95 L1870.34 1214.95 L1870.92 1214.95 L1871.51 1214.95 L1872.09 1214.95 L1872.68 1214.95 L1873.27 1214.95 L1873.85 1214.95 L1874.44 1214.95 L1875.03 1214.95 L1875.61 1214.95 L1876.2 1214.95 L1876.79 1214.95 L1877.37 1214.95 L1877.96 1214.95 L1878.55 1214.95 L1879.13 1214.95 L1879.72 1214.95 L1880.3 1214.95 L1880.89 1214.95 L1881.48 1214.95 L1882.06 1214.95 L1882.65 1214.95 L1883.24 1214.95 L1883.82 1214.95 L1884.41 1214.95 L1885 1214.95 L1885.58 1214.95 L1886.17 1214.95 L1886.76 1214.95 L1887.34 1214.95 L1887.93 1214.95 L1888.51 1214.95 L1889.1 1214.95 L1889.69 1214.95 L1890.27 1214.95 L1890.86 1214.95 L1891.45 1214.95 L1892.03 1214.95 L1892.62 1214.95 L1893.21 1214.95 L1893.79 1214.95 L1894.38 1214.95 L1894.96 1214.95 L1895.55 1214.95 L1896.14 1214.95 L1896.72 1214.95 L1897.31 1214.95 L1897.9 1214.95 L1898.48 1214.95 L1899.07 1214.95 L1899.66 1214.95 L1900.24 1214.95 L1900.83 1214.95 L1901.42 1214.95 L1902 1214.95 L1902.59 1214.95 L1903.17 1214.95 L1903.76 1214.95 L1904.35 1214.95 L1904.93 1214.95 L1905.52 1214.95 L1906.11 1214.95 L1906.69 1214.95 L1907.28 1214.95 L1907.87 1214.95 L1908.45 1214.95 L1909.04 1214.95 L1909.63 1214.95 L1910.21 1214.95 L1910.8 1214.95 L1911.38 1214.95 L1911.97 1214.95 L1912.56 1214.95 L1913.14 1214.95 L1913.73 1214.95 L1914.32 1214.95 L1914.9 1214.95 L1915.49 1214.95 L1916.08 1214.95 L1916.66 1214.95 L1917.25 1214.95 L1917.83 1214.95 L1918.42 1214.95 L1919.01 1214.95 L1919.59 1214.95 L1920.18 1214.95 L1920.77 1214.95 L1921.35 1214.95 L1921.94 1214.95 L1922.53 1214.95 L1923.11 1214.95 L1923.7 1214.95 L1924.29 1214.95 L1924.87 1214.95 L1925.46 1214.95 L1926.04 1214.95 L1926.63 1214.95 L1927.22 1214.95 L1927.8 1214.95 L1928.39 1214.95 L1928.98 1214.95 L1929.56 1214.95 L1930.15 1214.95 L1930.74 1214.95 L1931.32 1214.95 L1931.91 1214.95 L1932.5 1214.95 L1933.08 1214.95 L1933.67 1214.95 L1934.25 1214.95 L1934.84 1214.95 L1935.43 1214.95 L1936.01 1214.95 L1936.6 1214.95 L1937.19 1214.95 L1937.77 1214.95 L1938.36 1214.95 L1938.95 1214.95 L1939.53 1214.95 L1940.12 1214.95 L1940.71 1214.95 L1941.29 1214.95 L1941.88 1214.95 L1942.46 1214.95 L1943.05 1214.95 L1943.64 1214.95 L1944.22 1214.95 L1944.81 1214.95 L1945.4 1214.95 L1945.98 1214.95 L1946.57 1214.95 L1947.16 1214.95 L1947.74 1214.95 L1948.33 1214.95 L1948.91 1214.95 L1949.5 1214.95 L1950.09 1214.95 L1950.67 1214.95 L1951.26 1214.95 L1951.85 1214.95 L1952.43 1214.95 L1953.02 1214.95 L1953.61 1214.95 L1954.19 1214.95 L1954.78 1214.95 L1955.37 1214.95 L1955.95 1214.95 L1956.54 1214.95 L1957.12 1214.95 L1957.71 1214.95 L1958.3 1214.95 L1958.88 1214.95 L1959.47 1214.95 L1960.06 1214.95 L1960.64 1214.95 L1961.23 1214.95 L1961.82 1214.95 L1962.4 1214.95 L1962.99 1214.95 L1963.58 1214.95 L1964.16 1214.95 L1964.75 1214.95 L1965.33 1214.95 L1965.92 1214.95 L1966.51 1214.95 L1967.09 1214.95 L1967.68 1214.95 L1968.27 1214.95 L1968.85 1214.95 L1969.44 1214.95 L1970.03 1214.95 L1970.61 1214.95 L1971.2 1214.95 L1971.78 1214.95 L1972.37 1214.95 L1972.96 1214.95 L1973.54 1214.95 L1974.13 1214.95 L1974.72 1214.95 L1975.3 1214.95 L1975.89 1214.95 L1976.48 1214.95 L1977.06 1214.95 L1977.65 1214.95 L1978.24 1214.95 L1978.82 1214.95 L1979.41 1214.95 L1979.99 1214.95 L1980.58 1214.95 L1981.17 1214.95 L1981.75 1214.95 L1982.34 1214.95 L1982.93 1214.95 L1983.51 1214.95 L1984.1 1214.95 L1984.69 1214.95 L1985.27 1214.95 L1985.86 1214.95 L1986.45 1214.95 L1987.03 1214.95 L1987.62 1214.95 L1988.2 1214.95 L1988.79 1214.95 L1989.38 1214.95 L1989.96 1214.95 L1990.55 1214.95 L1991.14 1214.95 L1991.72 1214.95 L1992.31 1214.95 L1992.9 1214.95 L1993.48 1214.95 L1994.07 1214.95 L1994.65 1214.95 L1995.24 1214.95 L1995.83 1214.95 L1996.41 1214.95 L1997 1214.95 L1997.59 1214.95 L1998.17 1214.95 L1998.76 1214.95 L1999.35 1214.95 L1999.93 1214.95 L2000.52 1214.95 L2001.11 1214.95 L2001.69 1214.95 L2002.28 1214.95 L2002.86 1214.95 L2003.45 1214.95 L2004.04 1214.95 L2004.62 1214.95 L2005.21 1214.95 L2005.8 1214.95 L2006.38 1214.95 L2006.97 1214.95 L2007.56 1214.95 L2008.14 1214.95 L2008.73 1214.95 L2009.32 1214.95 L2009.9 1214.95 L2010.49 1214.95 L2011.07 1214.95 L2011.66 1214.95 L2012.25 1214.95 L2012.83 1214.95 L2013.42 1214.95 L2014.01 1214.95 L2014.59 1214.95 L2015.18 1214.95 L2015.77 1214.95 L2016.35 1214.95 L2016.94 1214.95 L2017.53 1214.95 L2018.11 1214.95 L2018.7 1214.95 L2019.28 1214.95 L2019.87 1214.95 L2020.46 1214.95 L2021.04 1214.95 L2021.63 1214.95 L2022.22 1214.95 L2022.8 1214.95 L2023.39 1214.95 L2023.98 1214.95 L2024.56 1214.95 L2025.15 1214.95 L2025.73 1214.95 L2026.32 1214.95 L2026.91 1214.95 L2027.49 1214.95 L2028.08 1214.95 L2028.67 1214.95 L2029.25 1214.95 L2029.84 1214.95 L2030.43 1214.95 L2031.01 1214.95 L2031.6 1214.95 L2032.19 1214.95 L2032.77 1214.95 L2033.36 1214.95 L2033.94 1214.95 L2034.53 1214.95 L2035.12 1214.95 L2035.7 1214.95 L2036.29 1214.95 L2036.88 1214.95 L2037.46 1214.95 L2038.05 1214.95 L2038.64 1214.95 L2039.22 1214.95 L2039.81 1214.95 L2040.4 1214.95 L2040.98 1214.95 L2041.57 1214.95 L2042.15 1214.95 L2042.74 1214.95 L2043.33 1214.95 L2043.91 1214.95 L2044.5 1214.95 L2045.09 1214.95 L2045.67 1214.95 L2046.26 1214.95 L2046.85 1214.95 L2047.43 1214.95 L2048.02 1214.95 L2048.6 1214.95 L2049.19 1214.95 L2049.78 1214.95 L2050.36 1214.95 L2050.95 1214.95 L2051.54 1214.95 L2052.12 1214.95 L2052.71 1214.95 L2053.3 1214.95 L2053.88 1214.95 L2054.47 1214.95 L2055.06 1214.95 L2055.64 1214.95 L2056.23 1214.95 L2056.81 1214.95 L2057.4 1214.95 L2057.99 1214.95 L2058.57 1214.95 L2059.16 1214.95 L2059.75 1214.95 L2060.33 1214.95 L2060.92 1214.95 L2061.51 1214.95 L2062.09 1214.95 L2062.68 1214.95 L2063.27 1214.95 L2063.85 1214.95 L2064.44 1214.95 L2065.02 1214.95 L2065.61 1214.95 L2066.2 1214.95 L2066.78 1214.95 L2067.37 1214.95 L2067.96 1214.95 L2068.54 1214.95 L2069.13 1214.95 L2069.72 1214.95 L2070.3 1214.95 L2070.89 1214.95 L2071.48 1214.95 L2072.06 1214.95 L2072.65 1214.95 L2073.23 1214.95 L2073.82 1214.95 L2074.41 1214.95 L2074.99 1214.95 L2075.58 1214.95 L2076.17 1214.95 L2076.75 1214.95 L2077.34 1214.95 L2077.93 1214.95 L2078.51 1214.95 L2079.1 1214.95 L2079.68 1214.95 L2080.27 1214.95 L2080.86 1214.95 L2081.44 1214.95 L2082.03 1214.95 L2082.62 1214.95 L2083.2 1214.95 L2083.79 1214.95 L2084.38 1214.95 L2084.96 1214.95 L2085.55 1214.95 L2086.14 1214.95 L2086.72 1214.95 L2087.31 1214.95 L2087.89 1214.95 L2088.48 1214.95 L2089.07 1214.95 L2089.65 1214.95 L2090.24 1214.95 L2090.83 1214.95 L2091.41 1214.95 L2092 1214.95 L2092.59 1214.95 L2093.17 1214.95 L2093.76 1214.95 L2094.35 1214.95 L2094.93 1214.95 L2095.52 1214.95 L2096.1 1214.95 L2096.69 1214.95 L2097.28 1214.95 L2097.86 1214.95 L2098.45 1214.95 L2099.04 1214.95 L2099.62 1214.95 L2100.21 1214.95 L2100.8 1214.95 L2101.38 1214.95 L2101.97 1214.95 L2102.55 1214.95 L2103.14 1214.95 L2103.73 1214.95 L2104.31 1214.95 L2104.9 1214.95 L2105.49 1214.95 L2106.07 1214.95 L2106.66 1214.95 L2107.25 1214.95 L2107.83 1214.95 L2108.42 1214.95 L2109.01 1214.95 L2109.59 1214.95 L2110.18 1214.95 L2110.76 1214.95 L2111.35 1214.95 L2111.94 1214.95 L2112.52 1214.95 L2113.11 1214.95 L2113.7 1214.95 L2114.28 1214.95 L2114.87 1214.95 L2115.46 1214.95 L2116.04 1214.95 L2116.63 1214.95 L2117.22 1214.95 L2117.8 1214.95 L2118.39 1214.95 L2118.97 1214.95 L2119.56 1214.95 L2120.15 1214.95 L2120.73 1214.95 L2121.32 1214.95 L2121.91 1214.95 L2122.49 1214.95 L2123.08 1214.95 L2123.67 1214.95 L2124.25 1214.95 L2124.84 1214.95 L2125.42 1214.95 L2126.01 1214.95 L2126.6 1214.95 L2127.18 1214.95 L2127.77 1214.95 L2128.36 1214.95 L2128.94 1214.95 L2129.53 1214.95 L2130.12 1214.95 L2130.7 1214.95 L2131.29 1214.95 L2131.88 1214.95 L2132.46 1214.95 L2133.05 1214.95 L2133.63 1214.95 L2134.22 1214.95 L2134.81 1214.95 L2135.39 1214.95 L2135.98 1214.95 L2136.57 1214.95 L2137.15 1214.95 L2137.74 1214.95 L2138.33 1214.95 L2138.91 1214.95 L2139.5 1214.95 L2140.09 1214.95 L2140.67 1214.95 L2141.26 1214.95 L2141.84 1214.95 L2142.43 1214.95 L2143.02 1214.95 L2143.6 1214.95 L2144.19 1214.95 L2144.78 1214.95 L2145.36 1214.95 L2145.95 1214.95 L2146.54 1214.95 L2147.12 1214.95 L2147.71 1214.95 L2148.3 1214.95 L2148.88 1214.95 L2149.47 1214.95 L2150.05 1214.95 L2150.64 1214.95 L2151.23 1214.95 L2151.81 1214.95 L2152.4 1214.95 L2152.99 1214.95 L2153.57 1214.95 L2154.16 1214.95 L2154.75 1214.95 L2155.33 1214.95 L2155.92 1214.95 L2156.5 1214.95 L2157.09 1214.95 L2157.68 1214.95 L2158.26 1214.95 L2158.26 1214.8 L2157.68 1214.8 L2157.09 1214.8 L2156.5 1214.8 L2155.92 1214.8 L2155.33 1214.8 L2154.75 1214.8 L2154.16 1214.8 L2153.57 1214.8 L2152.99 1214.8 L2152.4 1214.8 L2151.81 1214.8 L2151.23 1214.8 L2150.64 1214.8 L2150.05 1214.8 L2149.47 1214.8 L2148.88 1214.8 L2148.3 1214.8 L2147.71 1214.8 L2147.12 1214.8 L2146.54 1214.8 L2145.95 1214.8 L2145.36 1214.8 L2144.78 1214.8 L2144.19 1214.8 L2143.6 1214.8 L2143.02 1214.8 L2142.43 1214.8 L2141.84 1214.8 L2141.26 1214.8 L2140.67 1214.8 L2140.09 1214.8 L2139.5 1214.8 L2138.91 1214.8 L2138.33 1214.8 L2137.74 1214.8 L2137.15 1214.8 L2136.57 1214.8 L2135.98 1214.8 L2135.39 1214.8 L2134.81 1214.8 L2134.22 1214.8 L2133.63 1214.8 L2133.05 1214.8 L2132.46 1214.8 L2131.88 1214.8 L2131.29 1214.8 L2130.7 1214.8 L2130.12 1214.8 L2129.53 1214.8 L2128.94 1214.8 L2128.36 1214.8 L2127.77 1214.8 L2127.18 1214.8 L2126.6 1214.8 L2126.01 1214.8 L2125.42 1214.8 L2124.84 1214.8 L2124.25 1214.8 L2123.67 1214.8 L2123.08 1214.8 L2122.49 1214.8 L2121.91 1214.8 L2121.32 1214.8 L2120.73 1214.8 L2120.15 1214.8 L2119.56 1214.8 L2118.97 1214.8 L2118.39 1214.8 L2117.8 1214.8 L2117.22 1214.8 L2116.63 1214.8 L2116.04 1214.8 L2115.46 1214.8 L2114.87 1214.8 L2114.28 1214.8 L2113.7 1214.8 L2113.11 1214.8 L2112.52 1214.8 L2111.94 1214.8 L2111.35 1214.8 L2110.76 1214.8 L2110.18 1214.8 L2109.59 1214.8 L2109.01 1214.8 L2108.42 1214.8 L2107.83 1214.8 L2107.25 1214.8 L2106.66 1214.8 L2106.07 1214.8 L2105.49 1214.8 L2104.9 1214.8 L2104.31 1214.8 L2103.73 1214.8 L2103.14 1214.8 L2102.55 1214.8 L2101.97 1214.8 L2101.38 1214.8 L2100.8 1214.8 L2100.21 1214.8 L2099.62 1214.8 L2099.04 1214.8 L2098.45 1214.8 L2097.86 1214.8 L2097.28 1214.8 L2096.69 1214.8 L2096.1 1214.8 L2095.52 1214.8 L2094.93 1214.8 L2094.35 1214.8 L2093.76 1214.8 L2093.17 1214.8 L2092.59 1214.8 L2092 1214.8 L2091.41 1214.8 L2090.83 1214.8 L2090.24 1214.8 L2089.65 1214.8 L2089.07 1214.8 L2088.48 1214.8 L2087.89 1214.8 L2087.31 1214.8 L2086.72 1214.8 L2086.14 1214.8 L2085.55 1214.8 L2084.96 1214.8 L2084.38 1214.8 L2083.79 1214.8 L2083.2 1214.8 L2082.62 1214.8 L2082.03 1214.8 L2081.44 1214.8 L2080.86 1214.8 L2080.27 1214.8 L2079.68 1214.8 L2079.1 1214.8 L2078.51 1214.8 L2077.93 1214.8 L2077.34 1214.8 L2076.75 1214.8 L2076.17 1214.8 L2075.58 1214.8 L2074.99 1214.8 L2074.41 1214.8 L2073.82 1214.8 L2073.23 1214.8 L2072.65 1214.8 L2072.06 1214.8 L2071.48 1214.8 L2070.89 1214.8 L2070.3 1214.8 L2069.72 1214.8 L2069.13 1214.8 L2068.54 1214.8 L2067.96 1214.8 L2067.37 1214.8 L2066.78 1214.8 L2066.2 1214.8 L2065.61 1214.8 L2065.02 1214.8 L2064.44 1214.8 L2063.85 1214.8 L2063.27 1214.8 L2062.68 1214.8 L2062.09 1214.8 L2061.51 1214.8 L2060.92 1214.8 L2060.33 1214.8 L2059.75 1214.8 L2059.16 1214.8 L2058.57 1214.8 L2057.99 1214.8 L2057.4 1214.8 L2056.81 1214.8 L2056.23 1214.8 L2055.64 1214.8 L2055.06 1214.8 L2054.47 1214.8 L2053.88 1214.8 L2053.3 1214.8 L2052.71 1214.8 L2052.12 1214.8 L2051.54 1214.8 L2050.95 1214.8 L2050.36 1214.8 L2049.78 1214.8 L2049.19 1214.8 L2048.6 1214.8 L2048.02 1214.8 L2047.43 1214.8 L2046.85 1214.8 L2046.26 1214.8 L2045.67 1214.8 L2045.09 1214.8 L2044.5 1214.8 L2043.91 1214.8 L2043.33 1214.8 L2042.74 1214.8 L2042.15 1214.8 L2041.57 1214.8 L2040.98 1214.8 L2040.4 1214.8 L2039.81 1214.8 L2039.22 1214.8 L2038.64 1214.8 L2038.05 1214.8 L2037.46 1214.8 L2036.88 1214.8 L2036.29 1214.8 L2035.7 1214.8 L2035.12 1214.8 L2034.53 1214.8 L2033.94 1214.8 L2033.36 1214.8 L2032.77 1214.8 L2032.19 1214.8 L2031.6 1214.8 L2031.01 1214.8 L2030.43 1214.8 L2029.84 1214.8 L2029.25 1214.8 L2028.67 1214.8 L2028.08 1214.8 L2027.49 1214.8 L2026.91 1214.8 L2026.32 1214.8 L2025.73 1214.8 L2025.15 1214.8 L2024.56 1214.8 L2023.98 1214.8 L2023.39 1214.8 L2022.8 1214.8 L2022.22 1214.8 L2021.63 1214.8 L2021.04 1214.8 L2020.46 1214.8 L2019.87 1214.8 L2019.28 1214.8 L2018.7 1214.8 L2018.11 1214.8 L2017.53 1214.8 L2016.94 1214.8 L2016.35 1214.8 L2015.77 1214.8 L2015.18 1214.8 L2014.59 1214.8 L2014.01 1214.8 L2013.42 1214.8 L2012.83 1214.8 L2012.25 1214.8 L2011.66 1214.8 L2011.07 1214.8 L2010.49 1214.8 L2009.9 1214.8 L2009.32 1214.8 L2008.73 1214.8 L2008.14 1214.8 L2007.56 1214.8 L2006.97 1214.8 L2006.38 1214.8 L2005.8 1214.8 L2005.21 1214.8 L2004.62 1214.8 L2004.04 1214.8 L2003.45 1214.8 L2002.86 1214.8 L2002.28 1214.8 L2001.69 1214.8 L2001.11 1214.8 L2000.52 1214.8 L1999.93 1214.8 L1999.35 1214.8 L1998.76 1214.8 L1998.17 1214.8 L1997.59 1214.8 L1997 1214.8 L1996.41 1214.8 L1995.83 1214.8 L1995.24 1214.8 L1994.65 1214.8 L1994.07 1214.8 L1993.48 1214.8 L1992.9 1214.8 L1992.31 1214.8 L1991.72 1214.8 L1991.14 1214.8 L1990.55 1214.8 L1989.96 1214.8 L1989.38 1214.8 L1988.79 1214.8 L1988.2 1214.8 L1987.62 1214.8 L1987.03 1214.8 L1986.45 1214.8 L1985.86 1214.8 L1985.27 1214.8 L1984.69 1214.8 L1984.1 1214.8 L1983.51 1214.8 L1982.93 1214.8 L1982.34 1214.8 L1981.75 1214.8 L1981.17 1214.8 L1980.58 1214.8 L1979.99 1214.8 L1979.41 1214.8 L1978.82 1214.8 L1978.24 1214.8 L1977.65 1214.8 L1977.06 1214.8 L1976.48 1214.8 L1975.89 1214.8 L1975.3 1214.8 L1974.72 1214.8 L1974.13 1214.8 L1973.54 1214.8 L1972.96 1214.8 L1972.37 1214.8 L1971.78 1214.8 L1971.2 1214.8 L1970.61 1214.8 L1970.03 1214.8 L1969.44 1214.8 L1968.85 1214.8 L1968.27 1214.8 L1967.68 1214.8 L1967.09 1214.8 L1966.51 1214.8 L1965.92 1214.8 L1965.33 1214.8 L1964.75 1214.8 L1964.16 1214.8 L1963.58 1214.8 L1962.99 1214.8 L1962.4 1214.8 L1961.82 1214.8 L1961.23 1214.8 L1960.64 1214.8 L1960.06 1214.8 L1959.47 1214.8 L1958.88 1214.8 L1958.3 1214.8 L1957.71 1214.8 L1957.12 1214.8 L1956.54 1214.8 L1955.95 1214.8 L1955.37 1214.8 L1954.78 1214.8 L1954.19 1214.8 L1953.61 1214.8 L1953.02 1214.8 L1952.43 1214.8 L1951.85 1214.8 L1951.26 1214.8 L1950.67 1214.8 L1950.09 1214.8 L1949.5 1214.8 L1948.91 1214.8 L1948.33 1214.8 L1947.74 1214.8 L1947.16 1214.8 L1946.57 1214.8 L1945.98 1214.8 L1945.4 1214.8 L1944.81 1214.8 L1944.22 1214.8 L1943.64 1214.8 L1943.05 1214.8 L1942.46 1214.8 L1941.88 1214.8 L1941.29 1214.8 L1940.71 1214.8 L1940.12 1214.8 L1939.53 1214.8 L1938.95 1214.8 L1938.36 1214.8 L1937.77 1214.8 L1937.19 1214.8 L1936.6 1214.8 L1936.01 1214.8 L1935.43 1214.8 L1934.84 1214.8 L1934.25 1214.8 L1933.67 1214.8 L1933.08 1214.8 L1932.5 1214.8 L1931.91 1214.8 L1931.32 1214.8 L1930.74 1214.8 L1930.15 1214.8 L1929.56 1214.8 L1928.98 1214.8 L1928.39 1214.8 L1927.8 1214.8 L1927.22 1214.8 L1926.63 1214.8 L1926.04 1214.8 L1925.46 1214.8 L1924.87 1214.8 L1924.29 1214.8 L1923.7 1214.8 L1923.11 1214.8 L1922.53 1214.8 L1921.94 1214.8 L1921.35 1214.8 L1920.77 1214.8 L1920.18 1214.8 L1919.59 1214.8 L1919.01 1214.8 L1918.42 1214.8 L1917.83 1214.8 L1917.25 1214.8 L1916.66 1214.8 L1916.08 1214.8 L1915.49 1214.8 L1914.9 1214.8 L1914.32 1214.8 L1913.73 1214.8 L1913.14 1214.8 L1912.56 1214.8 L1911.97 1214.8 L1911.38 1214.8 L1910.8 1214.8 L1910.21 1214.8 L1909.63 1214.8 L1909.04 1214.8 L1908.45 1214.8 L1907.87 1214.8 L1907.28 1214.8 L1906.69 1214.8 L1906.11 1214.8 L1905.52 1214.8 L1904.93 1214.8 L1904.35 1214.8 L1903.76 1214.8 L1903.17 1214.8 L1902.59 1214.8 L1902 1214.8 L1901.42 1214.8 L1900.83 1214.8 L1900.24 1214.8 L1899.66 1214.8 L1899.07 1214.8 L1898.48 1214.8 L1897.9 1214.8 L1897.31 1214.8 L1896.72 1214.8 L1896.14 1214.8 L1895.55 1214.8 L1894.96 1214.8 L1894.38 1214.8 L1893.79 1214.8 L1893.21 1214.8 L1892.62 1214.8 L1892.03 1214.8 L1891.45 1214.8 L1890.86 1214.8 L1890.27 1214.8 L1889.69 1214.8 L1889.1 1214.8 L1888.51 1214.8 L1887.93 1214.8 L1887.34 1214.8 L1886.76 1214.8 L1886.17 1214.8 L1885.58 1214.8 L1885 1214.8 L1884.41 1214.8 L1883.82 1214.8 L1883.24 1214.8 L1882.65 1214.8 L1882.06 1214.8 L1881.48 1214.8 L1880.89 1214.8 L1880.3 1214.8 L1879.72 1214.8 L1879.13 1214.8 L1878.55 1214.8 L1877.96 1214.8 L1877.37 1214.8 L1876.79 1214.8 L1876.2 1214.8 L1875.61 1214.8 L1875.03 1214.8 L1874.44 1214.8 L1873.85 1214.8 L1873.27 1214.8 L1872.68 1214.8 L1872.09 1214.8 L1871.51 1214.8 L1870.92 1214.8 L1870.34 1214.8 L1869.75 1214.8 L1869.16 1214.8 L1868.58 1214.8 L1867.99 1214.8 L1867.4 1214.8 L1866.82 1214.8 L1866.23 1214.8 L1865.64 1214.8 L1865.06 1214.8 L1864.47 1214.8 L1863.88 1214.8 L1863.3 1214.8 L1862.71 1214.8 L1862.13 1214.8 L1861.54 1214.8 L1860.95 1214.8 L1860.37 1214.8 L1859.78 1214.8 L1859.19 1214.8 L1858.61 1214.8 L1858.02 1214.8 L1857.43 1214.8 L1856.85 1214.8 L1856.26 1214.8 L1855.68 1214.8 L1855.09 1214.8 L1854.5 1214.8 L1853.92 1214.8 L1853.33 1214.8 L1852.74 1214.8 L1852.16 1214.8 L1851.57 1214.8 L1850.98 1214.8 L1850.4 1214.8 L1849.81 1214.8 L1849.22 1214.8 L1848.64 1214.8 L1848.05 1214.8 L1847.47 1214.8 L1846.88 1214.8 L1846.29 1214.8 L1845.71 1214.8 L1845.12 1214.8 L1844.53 1214.8 L1843.95 1214.8 L1843.36 1214.8 L1842.77 1214.8 L1842.19 1214.8 L1841.6 1214.8 L1841.01 1214.8 L1840.43 1214.8 L1839.84 1214.8 L1839.26 1214.8 L1838.67 1214.8 L1838.08 1214.8 L1837.5 1214.8 L1836.91 1214.8 L1836.32 1214.8 L1835.74 1214.8 L1835.15 1214.8 L1834.56 1214.8 L1833.98 1214.8 L1833.39 1214.8 L1832.81 1214.8 L1832.22 1214.8 L1831.63 1214.8 L1831.05 1214.8 L1830.46 1214.8 L1829.87 1214.8 L1829.29 1214.8 L1828.7 1214.8 L1828.11 1214.8 L1827.53 1214.8 L1826.94 1214.8 L1826.35 1214.8 L1825.77 1214.8 L1825.18 1214.8 L1824.6 1214.8 L1824.01 1214.8 L1823.42 1214.8 L1822.84 1214.8 L1822.25 1214.8 L1821.66 1214.8 L1821.08 1214.8 L1820.49 1214.8 L1819.9 1214.8 L1819.32 1214.8 L1818.73 1214.8 L1818.14 1214.8 L1817.56 1214.8 L1816.97 1214.8 L1816.39 1214.8 L1815.8 1214.8 L1815.21 1214.8 L1814.63 1214.8 L1814.04 1214.8 L1813.45 1214.8 L1812.87 1214.8 L1812.28 1214.8 L1811.69 1214.8 L1811.11 1214.8 L1810.52 1214.8 L1809.94 1214.8 L1809.35 1214.8 L1808.76 1214.8 L1808.18 1214.8 L1807.59 1214.8 L1807 1214.8 L1806.42 1214.8 L1805.83 1214.8 L1805.24 1214.8 L1804.66 1214.8 L1804.07 1214.8 L1803.48 1214.8 L1802.9 1214.8 L1802.31 1214.8 L1801.73 1214.8 L1801.14 1214.8 L1800.55 1214.8 L1799.97 1214.8 L1799.38 1214.8 L1798.79 1214.8 L1798.21 1214.8 L1797.62 1214.8 L1797.03 1214.8 L1796.45 1214.8 L1795.86 1214.8 L1795.27 1214.8 L1794.69 1214.8 L1794.1 1214.8 L1793.52 1214.8 L1792.93 1214.8 L1792.34 1214.8 L1791.76 1214.8 L1791.17 1214.8 L1790.58 1214.8 L1790 1214.8 L1789.41 1214.8 L1788.82 1214.8 L1788.24 1214.8 L1787.65 1214.8 L1787.06 1214.8 L1786.48 1214.8 L1785.89 1214.8 L1785.31 1214.8 L1784.72 1214.8 L1784.13 1214.8 L1783.55 1214.8 L1782.96 1214.8 L1782.37 1214.8 L1781.79 1214.8 L1781.2 1214.8 L1780.61 1214.8 L1780.03 1214.8 L1779.44 1214.8 L1778.86 1214.8 L1778.27 1214.8 L1777.68 1214.8 L1777.1 1214.8 L1776.51 1214.8 L1775.92 1214.8 L1775.34 1214.8 L1774.75 1214.8 L1774.16 1214.8 L1773.58 1214.8 L1772.99 1214.8 L1772.4 1214.8 L1771.82 1214.8 L1771.23 1214.8 L1770.65 1214.8 L1770.06 1214.8 L1769.47 1214.8 L1768.89 1214.8 L1768.3 1214.8 L1767.71 1214.8 L1767.13 1214.8 L1766.54 1214.8 L1765.95 1214.8 L1765.37 1214.8 L1764.78 1214.8 L1764.19 1214.8 L1763.61 1214.8 L1763.02 1214.8 L1762.44 1214.8 L1761.85 1214.8 L1761.26 1214.8 L1760.68 1214.8 L1760.09 1214.8 L1759.5 1214.8 L1758.92 1214.8 L1758.33 1214.8 L1757.74 1214.8 L1757.16 1214.8 L1756.57 1214.8 L1755.99 1214.8 L1755.4 1214.8 L1754.81 1214.8 L1754.23 1214.8 L1753.64 1214.8 L1753.05 1214.8 L1752.47 1214.8 L1751.88 1214.8 L1751.29 1214.8 L1750.71 1214.8 L1750.12 1214.8 L1749.53 1214.8 L1748.95 1214.8 L1748.36 1214.8 L1747.78 1214.8 L1747.19 1214.8 L1746.6 1214.8 L1746.02 1214.8 L1745.43 1214.8 L1744.84 1214.8 L1744.26 1214.8 L1743.67 1214.8 L1743.08 1214.8 L1742.5 1214.8 L1741.91 1214.8 L1741.32 1214.8 L1740.74 1214.8 L1740.15 1214.8 L1739.57 1214.8 L1738.98 1214.8 L1738.39 1214.8 L1737.81 1214.8 L1737.22 1214.8 L1736.63 1214.8 L1736.05 1214.8 L1735.46 1214.8 L1734.87 1214.8 L1734.29 1214.8 L1733.7 1214.8 L1733.11 1214.8 L1732.53 1214.8 L1731.94 1214.8 L1731.36 1214.8 L1730.77 1214.8 L1730.18 1214.8 L1729.6 1214.8 L1729.01 1214.8 L1728.42 1214.8 L1727.84 1214.8 L1727.25 1214.8 L1726.66 1214.8 L1726.08 1214.8 L1725.49 1214.8 L1724.91 1214.8 L1724.32 1214.8 L1723.73 1214.8 L1723.15 1214.8 L1722.56 1214.8 L1721.97 1214.8 L1721.39 1214.8 L1720.8 1214.8 L1720.21 1214.8 L1719.63 1214.8 L1719.04 1214.8 L1718.45 1214.8 L1717.87 1214.8 L1717.28 1214.8 L1716.7 1214.8 L1716.11 1214.8 L1715.52 1214.8 L1714.94 1214.8 L1714.35 1214.8 L1713.76 1214.8 L1713.18 1214.8 L1712.59 1214.8 L1712 1214.8 L1711.42 1214.8 L1710.83 1214.8 L1710.24 1214.8 L1709.66 1214.8 L1709.07 1214.8 L1708.49 1214.8 L1707.9 1214.8 L1707.31 1214.8 L1706.73 1214.8 L1706.14 1214.8 L1705.55 1214.8 L1704.97 1214.8 L1704.38 1214.8 L1703.79 1214.8 L1703.21 1214.8 L1702.62 1214.8 L1702.04 1214.8 L1701.45 1214.8 L1700.86 1214.8 L1700.28 1214.8 L1699.69 1214.8 L1699.1 1214.8 L1698.52 1214.8 L1697.93 1214.8 L1697.34 1214.8 L1696.76 1214.8 L1696.17 1214.8 L1695.58 1214.8 L1695 1214.8 L1694.41 1214.8 L1693.83 1214.8 L1693.24 1214.8 L1692.65 1214.8 L1692.07 1214.8 L1691.48 1214.8 L1690.89 1214.8 L1690.31 1214.8 L1689.72 1214.8 L1689.13 1214.8 L1688.55 1214.8 L1687.96 1214.8 L1687.37 1214.8 L1686.79 1214.8 L1686.2 1214.8 L1685.62 1214.8 L1685.03 1214.8 L1684.44 1214.8 L1683.86 1214.8 L1683.27 1214.8 L1682.68 1214.8 L1682.1 1214.8 L1681.51 1214.8 L1680.92 1214.8 L1680.34 1214.8 L1679.75 1214.8 L1679.17 1214.8 L1678.58 1214.8 L1677.99 1214.8 L1677.41 1214.8 L1676.82 1214.8 L1676.23 1214.8 L1675.65 1214.8 L1675.06 1214.8 L1674.47 1214.8 L1673.89 1214.8 L1673.3 1214.8 L1672.71 1214.8 L1672.13 1214.8 L1671.54 1214.8 L1670.96 1214.8 L1670.37 1214.8 L1669.78 1214.8 L1669.2 1214.8 L1668.61 1214.8 L1668.02 1214.8 L1667.44 1214.8 L1666.85 1214.8 L1666.26 1214.8 L1665.68 1214.8 L1665.09 1214.8 L1664.5 1214.8 L1663.92 1214.8 L1663.33 1214.8 L1662.75 1214.8 L1662.16 1214.8 L1661.57 1214.8 L1660.99 1214.8 L1660.4 1214.8 L1659.81 1214.8 L1659.23 1214.8 L1658.64 1214.8 L1658.05 1214.8 L1657.47 1214.8 L1656.88 1214.8 L1656.29 1214.8 L1655.71 1214.8 L1655.12 1214.8 L1654.54 1214.8 L1653.95 1214.8 L1653.36 1214.8 L1652.78 1214.8 L1652.19 1214.8 L1651.6 1214.8 L1651.02 1214.8 L1650.43 1214.8 L1649.84 1214.8 L1649.26 1214.8 L1648.67 1214.8 L1648.09 1214.8 L1647.5 1214.8 L1646.91 1214.8 L1646.33 1214.8 L1645.74 1214.8 L1645.15 1214.8 L1644.57 1214.8 L1643.98 1214.8 L1643.39 1214.8 L1642.81 1214.8 L1642.22 1214.8 L1641.63 1214.8 L1641.05 1214.8 L1640.46 1214.8 L1639.88 1214.8 L1639.29 1214.8 L1638.7 1214.8 L1638.12 1214.8 L1637.53 1214.8 L1636.94 1214.8 L1636.36 1214.8 L1635.77 1214.8 L1635.18 1214.8 L1634.6 1214.8 L1634.01 1214.8 L1633.42 1214.8 L1632.84 1214.8 L1632.25 1214.8 L1631.67 1214.8 L1631.08 1214.8 L1630.49 1214.8 L1629.91 1214.8 L1629.32 1214.8 L1628.73 1214.8 L1628.15 1214.8 L1627.56 1214.8 L1626.97 1214.8 L1626.39 1214.8 L1625.8 1214.8 L1625.22 1214.8 L1624.63 1214.8 L1624.04 1214.8 L1623.46 1214.8 L1622.87 1214.8 L1622.28 1214.8 L1621.7 1214.8 L1621.11 1214.8 L1620.52 1214.8 L1619.94 1214.8 L1619.35 1214.8 L1618.76 1214.8 L1618.18 1214.8 L1617.59 1214.8 L1617.01 1214.8 L1616.42 1214.8 L1615.83 1214.8 L1615.25 1214.8 L1614.66 1214.8 L1614.07 1214.8 L1613.49 1214.8 L1612.9 1214.8 L1612.31 1214.8 L1611.73 1214.8 L1611.14 1214.8 L1610.55 1214.8 L1609.97 1214.8 L1609.38 1214.8 L1608.8 1214.8 L1608.21 1214.8 L1607.62 1214.8 L1607.04 1214.8 L1606.45 1214.8 L1605.86 1214.8 L1605.28 1214.8 L1604.69 1214.8 L1604.1 1214.8 L1603.52 1214.8 L1602.93 1214.8 L1602.34 1214.8 L1601.76 1214.8 L1601.17 1214.8 L1600.59 1214.8 L1600 1214.8 L1599.41 1214.8 L1598.83 1214.8 L1598.24 1214.8 L1597.65 1214.8 L1597.07 1214.8 L1596.48 1214.8 L1595.89 1214.8 L1595.31 1214.8 L1594.72 1214.8 L1594.14 1214.8 L1593.55 1214.8 L1592.96 1214.8 L1592.38 1214.8 L1591.79 1214.8 L1591.2 1214.8 L1590.62 1214.8 L1590.03 1214.8 L1589.44 1214.8 L1588.86 1214.8 L1588.27 1214.8 L1587.68 1214.8 L1587.1 1214.8 L1586.51 1214.8 L1585.93 1214.8 L1585.34 1214.8 L1584.75 1214.8 L1584.17 1214.8 L1583.58 1214.8 L1582.99 1214.8 L1582.41 1214.8 L1581.82 1214.8 L1581.23 1214.8 L1580.65 1214.8 L1580.06 1214.8 L1579.47 1214.8 L1578.89 1214.8 L1578.3 1214.8 L1577.72 1214.8 L1577.13 1214.8 L1576.54 1214.8 L1575.96 1214.8 L1575.37 1214.8 L1574.78 1214.8 L1574.2 1214.8 L1573.61 1214.8 L1573.02 1214.8 L1572.44 1214.8 L1571.85 1214.8 L1571.27 1214.8 L1570.68 1214.8 L1570.09 1214.8 L1569.51 1214.8 L1568.92 1214.8 L1568.33 1214.8 L1567.75 1214.8 L1567.16 1214.8 L1566.57 1214.8 L1565.99 1214.8 L1565.4 1214.8 L1564.81 1214.8 L1564.23 1214.8 L1563.64 1214.8 L1563.06 1214.8 L1562.47 1214.8 L1561.88 1214.8 L1561.3 1214.8 L1560.71 1214.8 L1560.12 1214.8 L1559.54 1214.8 L1558.95 1214.8 L1558.36 1214.8 L1557.78 1214.8 L1557.19 1214.8 L1556.6 1214.8 L1556.02 1214.8 L1555.43 1214.8 L1554.85 1214.8 L1554.26 1214.8 L1553.67 1214.8 L1553.09 1214.8 L1552.5 1214.8 L1551.91 1214.8 L1551.33 1214.8 L1550.74 1214.8 L1550.15 1214.8 L1549.57 1214.8 L1548.98 1214.8 L1548.4 1214.8 L1547.81 1214.8 L1547.22 1214.8 L1546.64 1214.8 L1546.05 1214.8 L1545.46 1214.8 L1544.88 1214.8 L1544.29 1214.8 L1543.7 1214.8 L1543.12 1214.8 L1542.53 1214.8 L1541.94 1214.8 L1541.36 1214.8 L1540.77 1214.8 L1540.19 1214.8 L1539.6 1214.8 L1539.01 1214.8 L1538.43 1214.8 L1537.84 1214.8 L1537.25 1214.8 L1536.67 1214.8 L1536.08 1214.8 L1535.49 1214.8 L1534.91 1214.8 L1534.32 1214.8 L1533.73 1214.8 L1533.15 1214.8 L1532.56 1214.8 L1531.98 1214.8 L1531.39 1214.8 L1530.8 1214.8 L1530.22 1214.8 L1529.63 1214.8 L1529.04 1214.8 L1528.46 1214.8 L1527.87 1214.8 L1527.28 1214.8 L1526.7 1214.8 L1526.11 1214.8 L1525.52 1214.8 L1524.94 1214.8 L1524.35 1214.8 L1523.77 1214.8 L1523.18 1214.8 L1522.59 1214.8 L1522.01 1214.8 L1521.42 1214.8 L1520.83 1214.8 L1520.25 1214.8 L1519.66 1214.8 L1519.07 1214.8 L1518.49 1214.8 L1517.9 1214.8 L1517.32 1214.8 L1516.73 1214.8 L1516.14 1214.8 L1515.56 1214.8 L1514.97 1214.8 L1514.38 1214.8 L1513.8 1214.8 L1513.21 1214.8 L1512.62 1214.8 L1512.04 1214.8 L1511.45 1214.8 L1510.86 1214.8 L1510.28 1214.8 L1509.69 1214.8 L1509.11 1214.8 L1508.52 1214.8 L1507.93 1214.8 L1507.35 1214.8 L1506.76 1214.8 L1506.17 1214.8 L1505.59 1214.8 L1505 1214.8 L1504.41 1214.8 L1503.83 1214.8 L1503.24 1214.8 L1502.65 1214.8 L1502.07 1214.8 L1501.48 1214.8 L1500.9 1214.8 L1500.31 1214.8 L1499.72 1214.8 L1499.14 1214.8 L1498.55 1214.8 L1497.96 1214.8 L1497.38 1214.8 L1496.79 1214.8 L1496.2 1214.8 L1495.62 1214.8 L1495.03 1214.8 L1494.45 1214.8 L1493.86 1214.8 L1493.27 1214.8 L1492.69 1214.8 L1492.1 1214.8 L1491.51 1214.8 L1490.93 1214.8 L1490.34 1214.8 L1489.75 1214.8 L1489.17 1214.8 L1488.58 1214.8 L1487.99 1214.8 L1487.41 1214.8 L1486.82 1214.8 L1486.24 1214.8 L1485.65 1214.8 L1485.06 1214.8 L1484.48 1214.8 L1483.89 1214.8 L1483.3 1214.8 L1482.72 1214.8 L1482.13 1214.8 L1481.54 1214.8 L1480.96 1214.8 L1480.37 1214.8 L1479.78 1214.8 L1479.2 1214.8 L1478.61 1214.8 L1478.03 1214.8 L1477.44 1214.8 L1476.85 1214.8 L1476.27 1214.8 L1475.68 1214.8 L1475.09 1214.8 L1474.51 1214.8 L1473.92 1214.8 L1473.33 1214.8 L1472.75 1214.8 L1472.16 1214.8 L1471.57 1214.8 L1470.99 1214.8 L1470.4 1214.8 L1469.82 1214.8 L1469.23 1214.8 L1468.64 1214.8 L1468.06 1214.8 L1467.47 1214.8 L1466.88 1214.8 L1466.3 1214.8 L1465.71 1214.8 L1465.12 1214.8 L1464.54 1214.8 L1463.95 1214.8 L1463.37 1214.8 L1462.78 1214.8 L1462.19 1214.8 L1461.61 1214.8 L1461.02 1214.8 L1460.43 1214.8 L1459.85 1214.8 L1459.26 1214.8 L1458.67 1214.8 L1458.09 1214.8 L1457.5 1214.8 L1456.91 1214.8 L1456.33 1214.8 L1455.74 1214.8 L1455.16 1214.8 L1454.57 1214.8 L1453.98 1214.8 L1453.4 1214.8 L1452.81 1214.8 L1452.22 1214.8 L1451.64 1214.8 L1451.05 1214.8 L1450.46 1214.8 L1449.88 1214.8 L1449.29 1214.8 L1448.7 1214.8 L1448.12 1214.8 L1447.53 1214.8 L1446.95 1214.8 L1446.36 1214.8 L1445.77 1214.8 L1445.19 1214.8 L1444.6 1214.8 L1444.01 1214.8 L1443.43 1214.8 L1442.84 1214.8 L1442.25 1214.8 L1441.67 1214.8 L1441.08 1214.8 L1440.5 1214.8 L1439.91 1214.8 L1439.32 1214.8 L1438.74 1214.8 L1438.15 1214.8 L1437.56 1214.8 L1436.98 1214.8 L1436.39 1214.8 L1435.8 1214.8 L1435.22 1214.8 L1434.63 1214.8 L1434.04 1214.8 L1433.46 1214.8 L1432.87 1214.8 L1432.29 1214.8 L1431.7 1214.8 L1431.11 1214.8 L1430.53 1214.8 L1429.94 1214.8 L1429.35 1214.8 L1428.77 1214.8 L1428.18 1214.8 L1427.59 1214.8 L1427.01 1214.8 L1426.42 1214.8 L1425.83 1214.8 L1425.25 1214.8 L1424.66 1214.8 L1424.08 1214.8 L1423.49 1214.8 L1422.9 1214.8 L1422.32 1214.8 L1421.73 1214.8 L1421.14 1214.8 L1420.56 1214.8 L1419.97 1214.8 L1419.38 1214.8 L1418.8 1214.8 L1418.21 1214.8 L1417.63 1214.8 L1417.04 1214.8 L1416.45 1214.8 L1415.87 1214.8 L1415.28 1214.8 L1414.69 1214.8 L1414.11 1214.8 L1413.52 1214.8 L1412.93 1214.8 L1412.35 1214.8 L1411.76 1214.8 L1411.17 1214.8 L1410.59 1214.8 L1410 1214.8 L1409.42 1214.8 L1408.83 1214.8 L1408.24 1214.8 L1407.66 1214.8 L1407.07 1214.8 L1406.48 1214.8 L1405.9 1214.8 L1405.31 1214.8 L1404.72 1214.8 L1404.14 1214.8 L1403.55 1214.8 L1402.96 1214.8 L1402.38 1214.8 L1401.79 1214.8 L1401.21 1214.8 L1400.62 1214.8 L1400.03 1214.8 L1399.45 1214.8 L1398.86 1214.8 L1398.27 1214.8 L1397.69 1214.8 L1397.1 1214.8 L1396.51 1214.8 L1395.93 1214.8 L1395.34 1214.8 L1394.75 1214.8 L1394.17 1214.8 L1393.58 1214.8 L1393 1214.8 L1392.41 1214.8 L1391.82 1214.8 L1391.24 1214.8 L1390.65 1214.8 L1390.06 1214.8 L1389.48 1214.8 L1388.89 1214.8 L1388.3 1214.8 L1387.72 1214.8 L1387.13 1214.8 L1386.55 1214.8 L1385.96 1214.8 L1385.37 1214.8 L1384.79 1214.8 L1384.2 1214.8 L1383.61 1214.8 L1383.03 1214.8 L1382.44 1214.8 L1381.85 1214.8 L1381.27 1214.8 L1380.68 1214.8 L1380.09 1214.8 L1379.51 1214.8 L1378.92 1214.8 L1378.34 1214.8 L1377.75 1214.8 L1377.16 1214.8 L1376.58 1214.8 L1375.99 1214.8 L1375.4 1214.8 L1374.82 1214.8 L1374.23 1214.8 L1373.64 1214.8 L1373.06 1214.8 L1372.47 1214.8 L1371.88 1214.8 L1371.3 1214.8 L1370.71 1214.8 L1370.13 1214.8 L1369.54 1214.8 L1368.95 1214.8 L1368.37 1214.8 L1367.78 1214.8 L1367.19 1214.8 L1366.61 1214.8 L1366.02 1214.8 L1365.43 1214.8 L1364.85 1214.8 L1364.26 1214.8 L1363.68 1214.8 L1363.09 1214.8 L1362.5 1214.8 L1361.92 1214.8 L1361.33 1214.8 L1360.74 1214.8 L1360.16 1214.8 L1359.57 1214.8 L1358.98 1214.8 L1358.4 1214.8 L1357.81 1214.8 L1357.22 1214.8 L1356.64 1214.8 L1356.05 1214.8 L1355.47 1214.8 L1354.88 1214.8 L1354.29 1214.8 L1353.71 1214.8 L1353.12 1214.8 L1352.53 1214.8 L1351.95 1214.8 L1351.36 1214.8 L1350.77 1214.8 L1350.19 1214.8 L1349.6 1214.8 L1349.01 1214.8 L1348.43 1214.8 L1347.84 1214.8 L1347.26 1214.8 L1346.67 1214.8 L1346.08 1214.8 L1345.5 1214.8 L1344.91 1214.8 L1344.32 1214.8 L1343.74 1214.8 L1343.15 1214.8 L1342.56 1214.8 L1341.98 1214.8 L1341.39 1214.8 L1340.8 1214.8 L1340.22 1214.8 L1339.63 1214.8 L1339.05 1214.8 L1338.46 1214.8 L1337.87 1214.8 L1337.29 1214.8 L1336.7 1214.8 L1336.11 1214.8 L1335.53 1214.8 L1334.94 1214.8 L1334.35 1214.8 L1333.77 1214.8 L1333.18 1214.8 L1332.6 1214.8 L1332.01 1214.8 L1331.42 1214.8 L1330.84 1214.8 L1330.25 1214.8 L1329.66 1214.8 L1329.08 1214.8 L1328.49 1214.8 L1327.9 1214.8 L1327.32 1214.8 L1326.73 1214.8 L1326.14 1214.8 L1325.56 1214.8 L1324.97 1214.8 L1324.39 1214.8 L1323.8 1214.8 L1323.21 1214.8 L1322.63 1214.8 L1322.04 1214.8 L1321.45 1214.8 L1320.87 1214.8 L1320.28 1214.8 L1319.69 1214.8 L1319.11 1214.8 L1318.52 1214.8 L1317.93 1214.8 L1317.35 1214.8 L1316.76 1214.8 L1316.18 1214.8 L1315.59 1214.8 L1315 1214.8 L1314.42 1214.8 L1313.83 1214.8 L1313.24 1214.8 L1312.66 1214.8 L1312.07 1214.8 L1311.48 1214.8 L1310.9 1214.8 L1310.31 1214.8 L1309.73 1214.8 L1309.14 1214.8 L1308.55 1214.8 L1307.97 1214.8 L1307.38 1214.8 L1306.79 1214.8 L1306.21 1214.8 L1305.62 1214.8 L1305.03 1214.8 L1304.45 1214.8 L1303.86 1214.8 L1303.27 1214.8 L1302.69 1214.8 L1302.1 1214.8 L1301.52 1214.8 L1300.93 1214.8 L1300.34 1214.8 L1299.76 1214.8 L1299.17 1214.8 L1298.58 1214.8 L1298 1214.8 L1297.41 1214.8 L1296.82 1214.8 L1296.24 1214.8 L1295.65 1214.8 L1295.06 1214.8 L1294.48 1214.8 L1293.89 1214.8 L1293.31 1214.8 L1292.72 1214.8 L1292.13 1214.8 L1291.55 1214.8 L1290.96 1214.8 L1290.37 1214.8 L1289.79 1214.8 L1289.2 1214.8 L1288.61 1214.8 L1288.03 1214.8 L1287.44 1214.8 L1286.86 1214.8 L1286.27 1214.8 L1285.68 1214.8 L1285.1 1214.8 L1284.51 1214.8 L1283.92 1214.8 L1283.34 1214.8 L1282.75 1214.8 L1282.16 1214.8 L1281.58 1214.8 L1280.99 1214.8 L1280.4 1214.8 L1279.82 1214.8 L1279.23 1214.8 L1278.65 1214.8 L1278.06 1214.8 L1277.47 1214.8 L1276.89 1214.8 L1276.3 1214.8 L1275.71 1214.8 L1275.13 1214.8 L1274.54 1214.8 L1273.95 1214.8 L1273.37 1214.8 L1272.78 1214.8 L1272.19 1214.8 L1271.61 1214.8 L1271.02 1214.8 L1270.44 1214.8 L1269.85 1214.8 L1269.26 1214.8 L1268.68 1214.8 L1268.09 1214.8 L1267.5 1214.8 L1266.92 1214.8 L1266.33 1214.8 L1265.74 1214.8 L1265.16 1214.8 L1264.57 1214.8 L1263.98 1214.8 L1263.4 1214.8 L1262.81 1214.8 L1262.23 1214.8 L1261.64 1214.8 L1261.05 1214.8 L1260.47 1214.8 L1259.88 1214.8 L1259.29 1214.8 L1258.71 1214.8 L1258.12 1214.8 L1257.53 1214.8 L1256.95 1214.8 L1256.36 1214.8 L1255.78 1214.8 L1255.19 1214.8 L1254.6 1214.8 L1254.02 1214.8 L1253.43 1214.8 L1252.84 1214.8 L1252.26 1214.8 L1251.67 1214.8 L1251.08 1214.8 L1250.5 1214.8 L1249.91 1214.8 L1249.32 1214.8 L1248.74 1214.8 L1248.15 1214.8 L1247.57 1214.8 L1246.98 1214.8 L1246.39 1214.8 L1245.81 1214.8 L1245.22 1214.8 L1244.63 1214.8 L1244.05 1214.8 L1243.46 1214.8 L1242.87 1214.8 L1242.29 1214.8 L1241.7 1214.8 L1241.11 1214.8 L1240.53 1214.8 L1239.94 1214.8 L1239.36 1214.8 L1238.77 1214.8 L1238.18 1214.8 L1237.6 1214.8 L1237.01 1214.8 L1236.42 1214.8 L1235.84 1214.8 L1235.25 1214.8 L1234.66 1214.8 L1234.08 1214.8 L1233.49 1214.8 L1232.91 1214.8 L1232.32 1214.8 L1231.73 1214.8 L1231.15 1214.8 L1230.56 1214.8 L1229.97 1214.8 L1229.39 1214.8 L1228.8 1214.8 L1228.21 1214.8 L1227.63 1214.8 L1227.04 1214.8 L1226.45 1214.8 L1225.87 1214.8 L1225.28 1214.8 L1224.7 1214.8 L1224.11 1214.8 L1223.52 1214.8 L1222.94 1214.8 L1222.35 1214.8 L1221.76 1214.8 L1221.18 1214.8 L1220.59 1214.8 L1220 1214.8 L1219.42 1214.8 L1218.83 1214.8 L1218.24 1214.8 L1217.66 1214.8 L1217.07 1214.8 L1216.49 1214.8 L1215.9 1214.8 L1215.31 1214.8 L1214.73 1214.8 L1214.14 1214.8 L1213.55 1214.8 L1212.97 1214.8 L1212.38 1214.8 L1211.79 1214.8 L1211.21 1214.8 L1210.62 1214.8 L1210.03 1214.8 L1209.45 1214.8 L1208.86 1214.8 L1208.28 1214.8 L1207.69 1214.8 L1207.1 1214.8 L1206.52 1214.8 L1205.93 1214.8 L1205.34 1214.8 L1204.76 1214.8 L1204.17 1214.8 L1203.58 1214.8 L1203 1214.8 L1202.41 1214.8 L1201.83 1214.8 L1201.24 1214.8 L1200.65 1214.8 L1200.07 1214.8 L1199.48 1214.8 L1198.89 1214.8 L1198.31 1214.8 L1197.72 1214.8 L1197.13 1214.8 L1196.55 1214.8 L1195.96 1214.8 L1195.37 1214.8 L1194.79 1214.8 L1194.2 1214.8 L1193.62 1214.8 L1193.03 1214.8 L1192.44 1214.8 L1191.86 1214.8 L1191.27 1214.8 L1190.68 1214.8 L1190.1 1214.8 L1189.51 1214.8 L1188.92 1214.8 L1188.34 1214.8 L1187.75 1214.8 L1187.16 1214.8 L1186.58 1214.8 L1185.99 1214.8 L1185.41 1214.8 L1184.82 1214.8 L1184.23 1214.8 L1183.65 1214.8 L1183.06 1214.8 L1182.47 1214.8 L1181.89 1214.8 L1181.3 1214.8 L1180.71 1214.8 L1180.13 1214.8 L1179.54 1214.8 L1178.96 1214.8 L1178.37 1214.8 L1177.78 1214.8 L1177.2 1214.8 L1176.61 1214.8 L1176.02 1214.8 L1175.44 1214.8 L1174.85 1214.8 L1174.26 1214.8 L1173.68 1214.8 L1173.09 1214.8 L1172.5 1214.8 L1171.92 1214.8 L1171.33 1214.8 L1170.75 1214.8 L1170.16 1214.8 L1169.57 1214.8 L1168.99 1214.8 L1168.4 1214.8 L1167.81 1214.8 L1167.23 1214.8 L1166.64 1214.8 L1166.05 1214.8 L1165.47 1214.8 L1164.88 1214.8 L1164.29 1214.8 L1163.71 1214.8 L1163.12 1214.8 L1162.54 1214.8 L1161.95 1214.8 L1161.36 1214.8 L1160.78 1214.8 L1160.19 1214.8 L1159.6 1214.8 L1159.02 1214.8 L1158.43 1214.8 L1157.84 1214.8 L1157.26 1214.8 L1156.67 1214.8 L1156.09 1214.8 L1155.5 1214.8 L1154.91 1214.8 L1154.33 1214.8 L1153.74 1214.8 L1153.15 1214.8 L1152.57 1214.8 L1151.98 1214.8 L1151.39 1214.8 L1150.81 1214.8 L1150.22 1214.8 L1149.63 1214.8 L1149.05 1214.8 L1148.46 1214.8 L1147.88 1214.8 L1147.29 1214.8 L1146.7 1214.8 L1146.12 1214.8 L1145.53 1214.8 L1144.94 1214.8 L1144.36 1214.8 L1143.77 1214.8 L1143.18 1214.8 L1142.6 1214.8 L1142.01 1214.8 L1141.42 1214.8 L1140.84 1214.8 L1140.25 1214.8 L1139.67 1214.8 L1139.08 1214.8 L1138.49 1214.8 L1137.91 1214.8 L1137.32 1214.8 L1136.73 1214.8 L1136.15 1214.8 L1135.56 1214.8 L1134.97 1214.8 L1134.39 1214.8 L1133.8 1214.8 L1133.21 1214.8 L1132.63 1214.8 L1132.04 1214.8 L1131.46 1214.8 L1130.87 1214.8 L1130.28 1214.8 L1129.7 1214.8 L1129.11 1214.8 L1128.52 1214.8 L1127.94 1214.8 L1127.35 1214.8 L1126.76 1214.8 L1126.18 1214.8 L1125.59 1214.8 L1125.01 1214.8 L1124.42 1214.8 L1123.83 1214.8 L1123.25 1214.8 L1122.66 1214.8 L1122.07 1214.8 L1121.49 1214.8 L1120.9 1214.8 L1120.31 1214.8 L1119.73 1214.8 L1119.14 1214.8 L1118.55 1214.8 L1117.97 1214.8 L1117.38 1214.8 L1116.8 1214.8 L1116.21 1214.8 L1115.62 1214.8 L1115.04 1214.8 L1114.45 1214.8 L1113.86 1214.8 L1113.28 1214.8 L1112.69 1214.8 L1112.1 1214.8 L1111.52 1214.8 L1110.93 1214.8 L1110.34 1214.8 L1109.76 1214.8 L1109.17 1214.8 L1108.59 1214.8 L1108 1214.8 L1107.41 1214.8 L1106.83 1214.8 L1106.24 1214.8 L1105.65 1214.8 L1105.07 1214.8 L1104.48 1214.8 L1103.89 1214.8 L1103.31 1214.8 L1102.72 1214.8 L1102.14 1214.8 L1101.55 1214.8 L1100.96 1214.8 L1100.38 1214.8 L1099.79 1214.8 L1099.2 1214.8 L1098.62 1214.8 L1098.03 1214.8 L1097.44 1214.8 L1096.86 1214.8 L1096.27 1214.8 L1095.68 1214.8 L1095.1 1214.8 L1094.51 1214.8 L1093.93 1214.8 L1093.34 1214.8 L1092.75 1214.8 L1092.17 1214.8 L1091.58 1214.8 L1090.99 1214.8 L1090.41 1214.8 L1089.82 1214.8 L1089.23 1214.8 L1088.65 1214.8 L1088.06 1214.8 L1087.47 1214.8 L1086.89 1214.8 L1086.3 1214.8 L1085.72 1214.8 L1085.13 1214.8 L1084.54 1214.8 L1083.96 1214.8 L1083.37 1214.8 L1082.78 1214.8 L1082.2 1214.8 L1081.61 1214.8 L1081.02 1214.8 L1080.44 1214.8 L1079.85 1214.8 L1079.26 1214.8 L1078.68 1214.8 L1078.09 1214.8 L1077.51 1214.8 L1076.92 1214.8 L1076.33 1214.8 L1075.75 1214.8 L1075.16 1214.8 L1074.57 1214.8 L1073.99 1214.8 L1073.4 1214.8 L1072.81 1214.8 L1072.23 1214.8 L1071.64 1214.8 L1071.06 1214.8 L1070.47 1214.8 L1069.88 1214.8 L1069.3 1214.8 L1068.71 1214.8 L1068.12 1214.8 L1067.54 1214.8 L1066.95 1214.8 L1066.36 1214.8 L1065.78 1214.8 L1065.19 1214.8 L1064.6 1214.8 L1064.02 1214.8 L1063.43 1214.8 L1062.85 1214.8 L1062.26 1214.8 L1061.67 1214.8 L1061.09 1214.8 L1060.5 1214.8 L1059.91 1214.8 L1059.33 1214.8 L1058.74 1214.8 L1058.15 1214.8 L1057.57 1214.8 L1056.98 1214.8 L1056.39 1214.8 L1055.81 1214.8 L1055.22 1214.8 L1054.64 1214.8 L1054.05 1214.8 L1053.46 1214.8 L1052.88 1214.8 L1052.29 1214.8 L1051.7 1214.8 L1051.12 1214.8 L1050.53 1214.8 L1049.94 1214.8 L1049.36 1214.8 L1048.77 1214.8 L1048.19 1214.8 L1047.6 1214.8 L1047.01 1214.8 L1046.43 1214.8 L1045.84 1214.8 L1045.25 1214.8 L1044.67 1214.8 L1044.08 1214.8 L1043.49 1214.8 L1042.91 1214.8 L1042.32 1214.8 L1041.73 1214.8 L1041.15 1214.8 L1040.56 1214.8 L1039.98 1214.8 L1039.39 1214.8 L1038.8 1214.8 L1038.22 1214.8 L1037.63 1214.8 L1037.04 1214.8 L1036.46 1214.8 L1035.87 1214.8 L1035.28 1214.8 L1034.7 1214.8 L1034.11 1214.8 L1033.52 1214.8 L1032.94 1214.8 L1032.35 1214.8 L1031.77 1214.8 L1031.18 1214.8 L1030.59 1214.8 L1030.01 1214.8 L1029.42 1214.8 L1028.83 1214.8 L1028.25 1214.8 L1027.66 1214.8 L1027.07 1214.8 L1026.49 1214.8 L1025.9 1214.8 L1025.32 1214.8 L1024.73 1214.8 L1024.14 1214.8 L1023.56 1214.8 L1022.97 1214.8 L1022.38 1214.8 L1021.8 1214.8 L1021.21 1214.8 L1020.62 1214.8 L1020.04 1214.8 L1019.45 1214.8 L1018.86 1214.8 L1018.28 1214.8 L1017.69 1214.8 L1017.11 1214.8 L1016.52 1214.8 L1015.93 1214.8 L1015.35 1214.8 L1014.76 1214.8 L1014.17 1214.8 L1013.59 1214.8 L1013 1214.8 L1012.41 1214.8 L1011.83 1214.8 L1011.24 1214.8 L1010.65 1214.8 L1010.07 1214.8 L1009.48 1214.8 L1008.9 1214.8 L1008.31 1214.8 L1007.72 1214.8 L1007.14 1214.8 L1006.55 1214.8 L1005.96 1214.8 L1005.38 1214.8 L1004.79 1214.8 L1004.2 1214.8 L1003.62 1214.8 L1003.03 1214.8 L1002.44 1214.8 L1001.86 1214.8 L1001.27 1214.8 L1000.69 1214.8 L1000.1 1214.8 L999.513 1214.8 L998.926 1214.8 L998.34 1214.8 L997.754 1214.8 L997.167 1214.8 L996.581 1214.8 L995.994 1214.8 L995.408 1214.8 L994.822 1214.8 L994.235 1214.8 L993.649 1214.8 L993.062 1214.8 L992.476 1214.8 L991.889 1214.8 L991.303 1214.8 L990.717 1214.8 L990.13 1214.8 L989.544 1214.8 L988.957 1214.8 L988.371 1214.8 L987.785 1214.8 L987.198 1214.8 L986.612 1214.8 L986.025 1214.8  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.87 986.612,1214.87 987.198,1214.87 987.785,1214.87 988.371,1214.87 988.957,1214.87 989.544,1214.87 990.13,1214.87 990.717,1214.87 991.303,1214.87 991.889,1214.87 992.476,1214.87 993.062,1214.87 993.649,1214.87 994.235,1214.87 994.822,1214.87 995.408,1214.87 995.994,1214.87 996.581,1214.87 997.167,1214.87 997.754,1214.87 998.34,1214.87 998.926,1214.87 999.513,1214.87 1000.1,1214.87 1000.69,1214.87 1001.27,1214.87 1001.86,1214.87 1002.44,1214.87 1003.03,1214.87 1003.62,1214.87 1004.2,1214.87 1004.79,1214.87 1005.38,1214.87 1005.96,1214.87 1006.55,1214.87 1007.14,1214.87 1007.72,1214.87 1008.31,1214.87 1008.9,1214.87 1009.48,1214.87 1010.07,1214.87 1010.65,1214.87 1011.24,1214.87 1011.83,1214.87 1012.41,1214.87 1013,1214.87 1013.59,1214.87 1014.17,1214.87 1014.76,1214.87 1015.35,1214.87 1015.93,1214.87 1016.52,1214.87 1017.11,1214.87 1017.69,1214.87 1018.28,1214.87 1018.86,1214.87 1019.45,1214.87 1020.04,1214.87 1020.62,1214.87 1021.21,1214.87 1021.8,1214.87 1022.38,1214.87 1022.97,1214.87 1023.56,1214.87 1024.14,1214.87 1024.73,1214.87 1025.32,1214.87 1025.9,1214.87 1026.49,1214.87 1027.07,1214.87 1027.66,1214.87 1028.25,1214.87 1028.83,1214.87 1029.42,1214.87 1030.01,1214.87 1030.59,1214.87 1031.18,1214.87 1031.77,1214.87 1032.35,1214.87 1032.94,1214.87 1033.52,1214.87 1034.11,1214.87 1034.7,1214.87 1035.28,1214.87 1035.87,1214.87 1036.46,1214.87 1037.04,1214.87 1037.63,1214.87 1038.22,1214.87 1038.8,1214.87 1039.39,1214.87 1039.98,1214.87 1040.56,1214.87 1041.15,1214.87 1041.73,1214.87 1042.32,1214.87 1042.91,1214.87 1043.49,1214.87 1044.08,1214.87 1044.67,1214.87 1045.25,1214.87 1045.84,1214.87 1046.43,1214.87 1047.01,1214.87 1047.6,1214.87 1048.19,1214.87 1048.77,1214.87 1049.36,1214.87 1049.94,1214.87 1050.53,1214.87 1051.12,1214.87 1051.7,1214.87 1052.29,1214.87 1052.88,1214.87 1053.46,1214.87 1054.05,1214.87 1054.64,1214.87 1055.22,1214.87 1055.81,1214.87 1056.39,1214.87 1056.98,1214.87 1057.57,1214.87 1058.15,1214.87 1058.74,1214.87 1059.33,1214.87 1059.91,1214.87 1060.5,1214.87 1061.09,1214.87 1061.67,1214.87 1062.26,1214.87 1062.85,1214.87 1063.43,1214.87 1064.02,1214.87 1064.6,1214.87 1065.19,1214.87 1065.78,1214.87 1066.36,1214.87 1066.95,1214.87 1067.54,1214.87 1068.12,1214.87 1068.71,1214.87 1069.3,1214.87 1069.88,1214.87 1070.47,1214.87 1071.06,1214.87 1071.64,1214.87 1072.23,1214.87 1072.81,1214.87 1073.4,1214.87 1073.99,1214.87 1074.57,1214.87 1075.16,1214.87 1075.75,1214.87 1076.33,1214.87 1076.92,1214.87 1077.51,1214.87 1078.09,1214.87 1078.68,1214.87 1079.26,1214.87 1079.85,1214.87 1080.44,1214.87 1081.02,1214.87 1081.61,1214.87 1082.2,1214.87 1082.78,1214.87 1083.37,1214.87 1083.96,1214.87 1084.54,1214.87 1085.13,1214.87 1085.72,1214.87 1086.3,1214.87 1086.89,1214.87 1087.47,1214.87 1088.06,1214.87 1088.65,1214.87 1089.23,1214.87 1089.82,1214.87 1090.41,1214.87 1090.99,1214.87 1091.58,1214.87 1092.17,1214.87 1092.75,1214.87 1093.34,1214.87 1093.93,1214.87 1094.51,1214.87 1095.1,1214.87 1095.68,1214.87 1096.27,1214.87 1096.86,1214.87 1097.44,1214.87 1098.03,1214.87 1098.62,1214.87 1099.2,1214.87 1099.79,1214.87 1100.38,1214.87 1100.96,1214.87 1101.55,1214.87 1102.14,1214.87 1102.72,1214.87 1103.31,1214.87 1103.89,1214.87 1104.48,1214.87 1105.07,1214.87 1105.65,1214.87 1106.24,1214.87 1106.83,1214.87 1107.41,1214.87 1108,1214.87 1108.59,1214.87 1109.17,1214.87 1109.76,1214.87 1110.34,1214.87 1110.93,1214.87 1111.52,1214.87 1112.1,1214.87 1112.69,1214.87 1113.28,1214.87 1113.86,1214.87 1114.45,1214.87 1115.04,1214.87 1115.62,1214.87 1116.21,1214.87 1116.8,1214.87 1117.38,1214.87 1117.97,1214.87 1118.55,1214.87 1119.14,1214.87 1119.73,1214.87 1120.31,1214.87 1120.9,1214.87 1121.49,1214.87 1122.07,1214.87 1122.66,1214.87 1123.25,1214.87 1123.83,1214.87 1124.42,1214.87 1125.01,1214.87 1125.59,1214.87 1126.18,1214.87 1126.76,1214.87 1127.35,1214.87 1127.94,1214.87 1128.52,1214.87 1129.11,1214.87 1129.7,1214.87 1130.28,1214.87 1130.87,1214.87 1131.46,1214.87 1132.04,1214.87 1132.63,1214.87 1133.21,1214.87 1133.8,1214.87 1134.39,1214.87 1134.97,1214.87 1135.56,1214.87 1136.15,1214.87 1136.73,1214.87 1137.32,1214.87 1137.91,1214.87 1138.49,1214.87 1139.08,1214.87 1139.67,1214.87 1140.25,1214.87 1140.84,1214.87 1141.42,1214.87 1142.01,1214.87 1142.6,1214.87 1143.18,1214.87 1143.77,1214.87 1144.36,1214.87 1144.94,1214.87 1145.53,1214.87 1146.12,1214.87 1146.7,1214.87 1147.29,1214.87 1147.88,1214.87 1148.46,1214.87 1149.05,1214.87 1149.63,1214.87 1150.22,1214.87 1150.81,1214.87 1151.39,1214.87 1151.98,1214.87 1152.57,1214.87 1153.15,1214.87 1153.74,1214.87 1154.33,1214.87 1154.91,1214.87 1155.5,1214.87 1156.09,1214.87 1156.67,1214.87 1157.26,1214.87 1157.84,1214.87 1158.43,1214.87 1159.02,1214.87 1159.6,1214.87 1160.19,1214.87 1160.78,1214.87 1161.36,1214.87 1161.95,1214.87 1162.54,1214.87 1163.12,1214.87 1163.71,1214.87 1164.29,1214.87 1164.88,1214.87 1165.47,1214.87 1166.05,1214.87 1166.64,1214.87 1167.23,1214.87 1167.81,1214.87 1168.4,1214.87 1168.99,1214.87 1169.57,1214.87 1170.16,1214.87 1170.75,1214.87 1171.33,1214.87 1171.92,1214.87 1172.5,1214.87 1173.09,1214.87 1173.68,1214.87 1174.26,1214.87 1174.85,1214.87 1175.44,1214.87 1176.02,1214.87 1176.61,1214.87 1177.2,1214.87 1177.78,1214.87 1178.37,1214.87 1178.96,1214.87 1179.54,1214.87 1180.13,1214.87 1180.71,1214.87 1181.3,1214.87 1181.89,1214.87 1182.47,1214.87 1183.06,1214.87 1183.65,1214.87 1184.23,1214.87 1184.82,1214.87 1185.41,1214.87 1185.99,1214.87 1186.58,1214.87 1187.16,1214.87 1187.75,1214.87 1188.34,1214.87 1188.92,1214.87 1189.51,1214.87 1190.1,1214.87 1190.68,1214.87 1191.27,1214.87 1191.86,1214.87 1192.44,1214.87 1193.03,1214.87 1193.62,1214.87 1194.2,1214.87 1194.79,1214.87 1195.37,1214.87 1195.96,1214.87 1196.55,1214.87 1197.13,1214.87 1197.72,1214.87 1198.31,1214.87 1198.89,1214.87 1199.48,1214.87 1200.07,1214.87 1200.65,1214.87 1201.24,1214.87 1201.83,1214.87 1202.41,1214.87 1203,1214.87 1203.58,1214.87 1204.17,1214.87 1204.76,1214.87 1205.34,1214.87 1205.93,1214.87 1206.52,1214.87 1207.1,1214.87 1207.69,1214.87 1208.28,1214.87 1208.86,1214.87 1209.45,1214.87 1210.03,1214.87 1210.62,1214.87 1211.21,1214.87 1211.79,1214.87 1212.38,1214.87 1212.97,1214.87 1213.55,1214.87 1214.14,1214.87 1214.73,1214.87 1215.31,1214.87 1215.9,1214.87 1216.49,1214.87 1217.07,1214.87 1217.66,1214.87 1218.24,1214.87 1218.83,1214.87 1219.42,1214.87 1220,1214.87 1220.59,1214.87 1221.18,1214.87 1221.76,1214.87 1222.35,1214.87 1222.94,1214.87 1223.52,1214.87 1224.11,1214.87 1224.7,1214.87 1225.28,1214.87 1225.87,1214.87 1226.45,1214.87 1227.04,1214.87 1227.63,1214.87 1228.21,1214.87 1228.8,1214.87 1229.39,1214.87 1229.97,1214.87 1230.56,1214.87 1231.15,1214.87 1231.73,1214.87 1232.32,1214.87 1232.91,1214.87 1233.49,1214.87 1234.08,1214.87 1234.66,1214.87 1235.25,1214.87 1235.84,1214.87 1236.42,1214.87 1237.01,1214.87 1237.6,1214.87 1238.18,1214.87 1238.77,1214.87 1239.36,1214.87 1239.94,1214.87 1240.53,1214.87 1241.11,1214.87 1241.7,1214.87 1242.29,1214.87 1242.87,1214.87 1243.46,1214.87 1244.05,1214.87 1244.63,1214.87 1245.22,1214.87 1245.81,1214.87 1246.39,1214.87 1246.98,1214.87 1247.57,1214.87 1248.15,1214.87 1248.74,1214.87 1249.32,1214.87 1249.91,1214.87 1250.5,1214.87 1251.08,1214.87 1251.67,1214.87 1252.26,1214.87 1252.84,1214.87 1253.43,1214.87 1254.02,1214.87 1254.6,1214.87 1255.19,1214.87 1255.78,1214.87 1256.36,1214.87 1256.95,1214.87 1257.53,1214.87 1258.12,1214.87 1258.71,1214.87 1259.29,1214.87 1259.88,1214.87 1260.47,1214.87 1261.05,1214.87 1261.64,1214.87 1262.23,1214.87 1262.81,1214.87 1263.4,1214.87 1263.98,1214.87 1264.57,1214.87 1265.16,1214.87 1265.74,1214.87 1266.33,1214.87 1266.92,1214.87 1267.5,1214.87 1268.09,1214.87 1268.68,1214.87 1269.26,1214.87 1269.85,1214.87 1270.44,1214.87 1271.02,1214.87 1271.61,1214.87 1272.19,1214.87 1272.78,1214.87 1273.37,1214.87 1273.95,1214.87 1274.54,1214.87 1275.13,1214.87 1275.71,1214.87 1276.3,1214.87 1276.89,1214.87 1277.47,1214.87 1278.06,1214.87 1278.65,1214.87 1279.23,1214.87 1279.82,1214.87 1280.4,1214.87 1280.99,1214.87 1281.58,1214.87 1282.16,1214.87 1282.75,1214.87 1283.34,1214.87 1283.92,1214.87 1284.51,1214.87 1285.1,1214.87 1285.68,1214.87 1286.27,1214.87 1286.86,1214.87 1287.44,1214.87 1288.03,1214.87 1288.61,1214.87 1289.2,1214.87 1289.79,1214.87 1290.37,1214.87 1290.96,1214.87 1291.55,1214.87 1292.13,1214.87 1292.72,1214.87 1293.31,1214.87 1293.89,1214.87 1294.48,1214.87 1295.06,1214.87 1295.65,1214.87 1296.24,1214.87 1296.82,1214.87 1297.41,1214.87 1298,1214.87 1298.58,1214.87 1299.17,1214.87 1299.76,1214.87 1300.34,1214.87 1300.93,1214.87 1301.52,1214.87 1302.1,1214.87 1302.69,1214.87 1303.27,1214.87 1303.86,1214.87 1304.45,1214.87 1305.03,1214.87 1305.62,1214.87 1306.21,1214.87 1306.79,1214.87 1307.38,1214.87 1307.97,1214.87 1308.55,1214.87 1309.14,1214.87 1309.73,1214.87 1310.31,1214.87 1310.9,1214.87 1311.48,1214.87 1312.07,1214.87 1312.66,1214.87 1313.24,1214.87 1313.83,1214.87 1314.42,1214.87 1315,1214.87 1315.59,1214.87 1316.18,1214.87 1316.76,1214.87 1317.35,1214.87 1317.93,1214.87 1318.52,1214.87 1319.11,1214.87 1319.69,1214.87 1320.28,1214.87 1320.87,1214.87 1321.45,1214.87 1322.04,1214.87 1322.63,1214.87 1323.21,1214.87 1323.8,1214.87 1324.39,1214.87 1324.97,1214.87 1325.56,1214.87 1326.14,1214.87 1326.73,1214.87 1327.32,1214.87 1327.9,1214.87 1328.49,1214.87 1329.08,1214.87 1329.66,1214.87 1330.25,1214.87 1330.84,1214.87 1331.42,1214.87 1332.01,1214.87 1332.6,1214.87 1333.18,1214.87 1333.77,1214.87 1334.35,1214.87 1334.94,1214.87 1335.53,1214.87 1336.11,1214.87 1336.7,1214.87 1337.29,1214.87 1337.87,1214.87 1338.46,1214.87 1339.05,1214.87 1339.63,1214.87 1340.22,1214.87 1340.8,1214.87 1341.39,1214.87 1341.98,1214.87 1342.56,1214.87 1343.15,1214.87 1343.74,1214.87 1344.32,1214.87 1344.91,1214.87 1345.5,1214.87 1346.08,1214.87 1346.67,1214.87 1347.26,1214.87 1347.84,1214.87 1348.43,1214.87 1349.01,1214.87 1349.6,1214.87 1350.19,1214.87 1350.77,1214.87 1351.36,1214.87 1351.95,1214.87 1352.53,1214.87 1353.12,1214.87 1353.71,1214.87 1354.29,1214.87 1354.88,1214.87 1355.47,1214.87 1356.05,1214.87 1356.64,1214.87 1357.22,1214.87 1357.81,1214.87 1358.4,1214.87 1358.98,1214.87 1359.57,1214.87 1360.16,1214.87 1360.74,1214.87 1361.33,1214.87 1361.92,1214.87 1362.5,1214.87 1363.09,1214.87 1363.68,1214.87 1364.26,1214.87 1364.85,1214.87 1365.43,1214.87 1366.02,1214.87 1366.61,1214.87 1367.19,1214.87 1367.78,1214.87 1368.37,1214.87 1368.95,1214.87 1369.54,1214.87 1370.13,1214.87 1370.71,1214.87 1371.3,1214.87 1371.88,1214.87 1372.47,1214.87 1373.06,1214.87 1373.64,1214.87 1374.23,1214.87 1374.82,1214.87 1375.4,1214.87 1375.99,1214.87 1376.58,1214.87 1377.16,1214.87 1377.75,1214.87 1378.34,1214.87 1378.92,1214.87 1379.51,1214.87 1380.09,1214.87 1380.68,1214.87 1381.27,1214.87 1381.85,1214.87 1382.44,1214.87 1383.03,1214.87 1383.61,1214.87 1384.2,1214.87 1384.79,1214.87 1385.37,1214.87 1385.96,1214.87 1386.55,1214.87 1387.13,1214.87 1387.72,1214.87 1388.3,1214.87 1388.89,1214.87 1389.48,1214.87 1390.06,1214.87 1390.65,1214.87 1391.24,1214.87 1391.82,1214.87 1392.41,1214.87 1393,1214.87 1393.58,1214.87 1394.17,1214.87 1394.75,1214.87 1395.34,1214.87 1395.93,1214.87 1396.51,1214.87 1397.1,1214.87 1397.69,1214.87 1398.27,1214.87 1398.86,1214.87 1399.45,1214.87 1400.03,1214.87 1400.62,1214.87 1401.21,1214.87 1401.79,1214.87 1402.38,1214.87 1402.96,1214.87 1403.55,1214.87 1404.14,1214.87 1404.72,1214.87 1405.31,1214.87 1405.9,1214.87 1406.48,1214.87 1407.07,1214.87 1407.66,1214.87 1408.24,1214.87 1408.83,1214.87 1409.42,1214.87 1410,1214.87 1410.59,1214.87 1411.17,1214.87 1411.76,1214.87 1412.35,1214.87 1412.93,1214.87 1413.52,1214.87 1414.11,1214.87 1414.69,1214.87 1415.28,1214.87 1415.87,1214.87 1416.45,1214.87 1417.04,1214.87 1417.63,1214.87 1418.21,1214.87 1418.8,1214.87 1419.38,1214.87 1419.97,1214.87 1420.56,1214.87 1421.14,1214.87 1421.73,1214.87 1422.32,1214.87 1422.9,1214.87 1423.49,1214.87 1424.08,1214.87 1424.66,1214.87 1425.25,1214.87 1425.83,1214.87 1426.42,1214.87 1427.01,1214.87 1427.59,1214.87 1428.18,1214.87 1428.77,1214.87 1429.35,1214.87 1429.94,1214.87 1430.53,1214.87 1431.11,1214.87 1431.7,1214.87 1432.29,1214.87 1432.87,1214.87 1433.46,1214.87 1434.04,1214.87 1434.63,1214.87 1435.22,1214.87 1435.8,1214.87 1436.39,1214.87 1436.98,1214.87 1437.56,1214.87 1438.15,1214.87 1438.74,1214.87 1439.32,1214.87 1439.91,1214.87 1440.5,1214.87 1441.08,1214.87 1441.67,1214.87 1442.25,1214.87 1442.84,1214.87 1443.43,1214.87 1444.01,1214.87 1444.6,1214.87 1445.19,1214.87 1445.77,1214.87 1446.36,1214.87 1446.95,1214.87 1447.53,1214.87 1448.12,1214.87 1448.7,1214.87 1449.29,1214.87 1449.88,1214.87 1450.46,1214.87 1451.05,1214.87 1451.64,1214.87 1452.22,1214.87 1452.81,1214.87 1453.4,1214.87 1453.98,1214.87 1454.57,1214.87 1455.16,1214.87 1455.74,1214.87 1456.33,1214.87 1456.91,1214.87 1457.5,1214.87 1458.09,1214.87 1458.67,1214.87 1459.26,1214.87 1459.85,1214.87 1460.43,1214.87 1461.02,1214.87 1461.61,1214.87 1462.19,1214.87 1462.78,1214.87 1463.37,1214.87 1463.95,1214.87 1464.54,1214.87 1465.12,1214.87 1465.71,1214.87 1466.3,1214.87 1466.88,1214.87 1467.47,1214.87 1468.06,1214.87 1468.64,1214.87 1469.23,1214.87 1469.82,1214.87 1470.4,1214.87 1470.99,1214.87 1471.57,1214.87 1472.16,1214.87 1472.75,1214.87 1473.33,1214.87 1473.92,1214.87 1474.51,1214.87 1475.09,1214.87 1475.68,1214.87 1476.27,1214.87 1476.85,1214.87 1477.44,1214.87 1478.03,1214.87 1478.61,1214.87 1479.2,1214.87 1479.78,1214.87 1480.37,1214.87 1480.96,1214.87 1481.54,1214.87 1482.13,1214.87 1482.72,1214.87 1483.3,1214.87 1483.89,1214.87 1484.48,1214.87 1485.06,1214.87 1485.65,1214.87 1486.24,1214.87 1486.82,1214.87 1487.41,1214.87 1487.99,1214.87 1488.58,1214.87 1489.17,1214.87 1489.75,1214.87 1490.34,1214.87 1490.93,1214.87 1491.51,1214.87 1492.1,1214.87 1492.69,1214.87 1493.27,1214.87 1493.86,1214.87 1494.45,1214.87 1495.03,1214.87 1495.62,1214.87 1496.2,1214.87 1496.79,1214.87 1497.38,1214.87 1497.96,1214.87 1498.55,1214.87 1499.14,1214.87 1499.72,1214.87 1500.31,1214.87 1500.9,1214.87 1501.48,1214.87 1502.07,1214.87 1502.65,1214.87 1503.24,1214.87 1503.83,1214.87 1504.41,1214.87 1505,1214.87 1505.59,1214.87 1506.17,1214.87 1506.76,1214.87 1507.35,1214.87 1507.93,1214.87 1508.52,1214.87 1509.11,1214.87 1509.69,1214.87 1510.28,1214.87 1510.86,1214.87 1511.45,1214.87 1512.04,1214.87 1512.62,1214.87 1513.21,1214.87 1513.8,1214.87 1514.38,1214.87 1514.97,1214.87 1515.56,1214.87 1516.14,1214.87 1516.73,1214.87 1517.32,1214.87 1517.9,1214.87 1518.49,1214.87 1519.07,1214.87 1519.66,1214.87 1520.25,1214.87 1520.83,1214.87 1521.42,1214.87 1522.01,1214.87 1522.59,1214.87 1523.18,1214.87 1523.77,1214.87 1524.35,1214.87 1524.94,1214.87 1525.52,1214.87 1526.11,1214.87 1526.7,1214.87 1527.28,1214.87 1527.87,1214.87 1528.46,1214.87 1529.04,1214.87 1529.63,1214.87 1530.22,1214.87 1530.8,1214.87 1531.39,1214.87 1531.98,1214.87 1532.56,1214.87 1533.15,1214.87 1533.73,1214.87 1534.32,1214.87 1534.91,1214.87 1535.49,1214.87 1536.08,1214.87 1536.67,1214.87 1537.25,1214.87 1537.84,1214.87 1538.43,1214.87 1539.01,1214.87 1539.6,1214.87 1540.19,1214.87 1540.77,1214.87 1541.36,1214.87 1541.94,1214.87 1542.53,1214.87 1543.12,1214.87 1543.7,1214.87 1544.29,1214.87 1544.88,1214.87 1545.46,1214.87 1546.05,1214.87 1546.64,1214.87 1547.22,1214.87 1547.81,1214.87 1548.4,1214.87 1548.98,1214.87 1549.57,1214.87 1550.15,1214.87 1550.74,1214.87 1551.33,1214.87 1551.91,1214.87 1552.5,1214.87 1553.09,1214.87 1553.67,1214.87 1554.26,1214.87 1554.85,1214.87 1555.43,1214.87 1556.02,1214.87 1556.6,1214.87 1557.19,1214.87 1557.78,1214.87 1558.36,1214.87 1558.95,1214.87 1559.54,1214.87 1560.12,1214.87 1560.71,1214.87 1561.3,1214.87 1561.88,1214.87 1562.47,1214.87 1563.06,1214.87 1563.64,1214.87 1564.23,1214.87 1564.81,1214.87 1565.4,1214.87 1565.99,1214.87 1566.57,1214.87 1567.16,1214.87 1567.75,1214.87 1568.33,1214.87 1568.92,1214.87 1569.51,1214.87 1570.09,1214.87 1570.68,1214.87 1571.27,1214.87 1571.85,1214.87 1572.44,1214.87 1573.02,1214.87 1573.61,1214.87 1574.2,1214.87 1574.78,1214.87 1575.37,1214.87 1575.96,1214.87 1576.54,1214.87 1577.13,1214.87 1577.72,1214.87 1578.3,1214.87 1578.89,1214.87 1579.47,1214.87 1580.06,1214.87 1580.65,1214.87 1581.23,1214.87 1581.82,1214.87 1582.41,1214.87 1582.99,1214.87 1583.58,1214.87 1584.17,1214.87 1584.75,1214.87 1585.34,1214.87 1585.93,1214.87 1586.51,1214.87 1587.1,1214.87 1587.68,1214.87 1588.27,1214.87 1588.86,1214.87 1589.44,1214.87 1590.03,1214.87 1590.62,1214.87 1591.2,1214.87 1591.79,1214.87 1592.38,1214.87 1592.96,1214.87 1593.55,1214.87 1594.14,1214.87 1594.72,1214.87 1595.31,1214.87 1595.89,1214.87 1596.48,1214.87 1597.07,1214.87 1597.65,1214.87 1598.24,1214.87 1598.83,1214.87 1599.41,1214.87 1600,1214.87 1600.59,1214.87 1601.17,1214.87 1601.76,1214.87 1602.34,1214.87 1602.93,1214.87 1603.52,1214.87 1604.1,1214.87 1604.69,1214.87 1605.28,1214.87 1605.86,1214.87 1606.45,1214.87 1607.04,1214.87 1607.62,1214.87 1608.21,1214.87 1608.8,1214.87 1609.38,1214.87 1609.97,1214.87 1610.55,1214.87 1611.14,1214.87 1611.73,1214.87 1612.31,1214.87 1612.9,1214.87 1613.49,1214.87 1614.07,1214.87 1614.66,1214.87 1615.25,1214.87 1615.83,1214.87 1616.42,1214.87 1617.01,1214.87 1617.59,1214.87 1618.18,1214.87 1618.76,1214.87 1619.35,1214.87 1619.94,1214.87 1620.52,1214.87 1621.11,1214.87 1621.7,1214.87 1622.28,1214.87 1622.87,1214.87 1623.46,1214.87 1624.04,1214.87 1624.63,1214.87 1625.22,1214.87 1625.8,1214.87 1626.39,1214.87 1626.97,1214.87 1627.56,1214.87 1628.15,1214.87 1628.73,1214.87 1629.32,1214.87 1629.91,1214.87 1630.49,1214.87 1631.08,1214.87 1631.67,1214.87 1632.25,1214.87 1632.84,1214.87 1633.42,1214.87 1634.01,1214.87 1634.6,1214.87 1635.18,1214.87 1635.77,1214.87 1636.36,1214.87 1636.94,1214.87 1637.53,1214.87 1638.12,1214.87 1638.7,1214.87 1639.29,1214.87 1639.88,1214.87 1640.46,1214.87 1641.05,1214.87 1641.63,1214.87 1642.22,1214.87 1642.81,1214.87 1643.39,1214.87 1643.98,1214.87 1644.57,1214.87 1645.15,1214.87 1645.74,1214.87 1646.33,1214.87 1646.91,1214.87 1647.5,1214.87 1648.09,1214.87 1648.67,1214.87 1649.26,1214.87 1649.84,1214.87 1650.43,1214.87 1651.02,1214.87 1651.6,1214.87 1652.19,1214.87 1652.78,1214.87 1653.36,1214.87 1653.95,1214.87 1654.54,1214.87 1655.12,1214.87 1655.71,1214.87 1656.29,1214.87 1656.88,1214.87 1657.47,1214.87 1658.05,1214.87 1658.64,1214.87 1659.23,1214.87 1659.81,1214.87 1660.4,1214.87 1660.99,1214.87 1661.57,1214.87 1662.16,1214.87 1662.75,1214.87 1663.33,1214.87 1663.92,1214.87 1664.5,1214.87 1665.09,1214.87 1665.68,1214.87 1666.26,1214.87 1666.85,1214.87 1667.44,1214.87 1668.02,1214.87 1668.61,1214.87 1669.2,1214.87 1669.78,1214.87 1670.37,1214.87 1670.96,1214.87 1671.54,1214.87 1672.13,1214.87 1672.71,1214.87 1673.3,1214.87 1673.89,1214.87 1674.47,1214.87 1675.06,1214.87 1675.65,1214.87 1676.23,1214.87 1676.82,1214.87 1677.41,1214.87 1677.99,1214.87 1678.58,1214.87 1679.17,1214.87 1679.75,1214.87 1680.34,1214.87 1680.92,1214.87 1681.51,1214.87 1682.1,1214.87 1682.68,1214.87 1683.27,1214.87 1683.86,1214.87 1684.44,1214.87 1685.03,1214.87 1685.62,1214.87 1686.2,1214.87 1686.79,1214.87 1687.37,1214.87 1687.96,1214.87 1688.55,1214.87 1689.13,1214.87 1689.72,1214.87 1690.31,1214.87 1690.89,1214.87 1691.48,1214.87 1692.07,1214.87 1692.65,1214.87 1693.24,1214.87 1693.83,1214.87 1694.41,1214.87 1695,1214.87 1695.58,1214.87 1696.17,1214.87 1696.76,1214.87 1697.34,1214.87 1697.93,1214.87 1698.52,1214.87 1699.1,1214.87 1699.69,1214.87 1700.28,1214.87 1700.86,1214.87 1701.45,1214.87 1702.04,1214.87 1702.62,1214.87 1703.21,1214.87 1703.79,1214.87 1704.38,1214.87 1704.97,1214.87 1705.55,1214.87 1706.14,1214.87 1706.73,1214.87 1707.31,1214.87 1707.9,1214.87 1708.49,1214.87 1709.07,1214.87 1709.66,1214.87 1710.24,1214.87 1710.83,1214.87 1711.42,1214.87 1712,1214.87 1712.59,1214.87 1713.18,1214.87 1713.76,1214.87 1714.35,1214.87 1714.94,1214.87 1715.52,1214.87 1716.11,1214.87 1716.7,1214.87 1717.28,1214.87 1717.87,1214.87 1718.45,1214.87 1719.04,1214.87 1719.63,1214.87 1720.21,1214.87 1720.8,1214.87 1721.39,1214.87 1721.97,1214.87 1722.56,1214.87 1723.15,1214.87 1723.73,1214.87 1724.32,1214.87 1724.91,1214.87 1725.49,1214.87 1726.08,1214.87 1726.66,1214.87 1727.25,1214.87 1727.84,1214.87 1728.42,1214.87 1729.01,1214.87 1729.6,1214.87 1730.18,1214.87 1730.77,1214.87 1731.36,1214.87 1731.94,1214.87 1732.53,1214.87 1733.11,1214.87 1733.7,1214.87 1734.29,1214.87 1734.87,1214.87 1735.46,1214.87 1736.05,1214.87 1736.63,1214.87 1737.22,1214.87 1737.81,1214.87 1738.39,1214.87 1738.98,1214.87 1739.57,1214.87 1740.15,1214.87 1740.74,1214.87 1741.32,1214.87 1741.91,1214.87 1742.5,1214.87 1743.08,1214.87 1743.67,1214.87 1744.26,1214.87 1744.84,1214.87 1745.43,1214.87 1746.02,1214.87 1746.6,1214.87 1747.19,1214.87 1747.78,1214.87 1748.36,1214.87 1748.95,1214.87 1749.53,1214.87 1750.12,1214.87 1750.71,1214.87 1751.29,1214.87 1751.88,1214.87 1752.47,1214.87 1753.05,1214.87 1753.64,1214.87 1754.23,1214.87 1754.81,1214.87 1755.4,1214.87 1755.99,1214.87 1756.57,1214.87 1757.16,1214.87 1757.74,1214.87 1758.33,1214.87 1758.92,1214.87 1759.5,1214.87 1760.09,1214.87 1760.68,1214.87 1761.26,1214.87 1761.85,1214.87 1762.44,1214.87 1763.02,1214.87 1763.61,1214.87 1764.19,1214.87 1764.78,1214.87 1765.37,1214.87 1765.95,1214.87 1766.54,1214.87 1767.13,1214.87 1767.71,1214.87 1768.3,1214.87 1768.89,1214.87 1769.47,1214.87 1770.06,1214.87 1770.65,1214.87 1771.23,1214.87 1771.82,1214.87 1772.4,1214.87 1772.99,1214.87 1773.58,1214.87 1774.16,1214.87 1774.75,1214.87 1775.34,1214.87 1775.92,1214.87 1776.51,1214.87 1777.1,1214.87 1777.68,1214.87 1778.27,1214.87 1778.86,1214.87 1779.44,1214.87 1780.03,1214.87 1780.61,1214.87 1781.2,1214.87 1781.79,1214.87 1782.37,1214.87 1782.96,1214.87 1783.55,1214.87 1784.13,1214.87 1784.72,1214.87 1785.31,1214.87 1785.89,1214.87 1786.48,1214.87 1787.06,1214.87 1787.65,1214.87 1788.24,1214.87 1788.82,1214.87 1789.41,1214.87 1790,1214.87 1790.58,1214.87 1791.17,1214.87 1791.76,1214.87 1792.34,1214.87 1792.93,1214.87 1793.52,1214.87 1794.1,1214.87 1794.69,1214.87 1795.27,1214.87 1795.86,1214.87 1796.45,1214.87 1797.03,1214.87 1797.62,1214.87 1798.21,1214.87 1798.79,1214.87 1799.38,1214.87 1799.97,1214.87 1800.55,1214.87 1801.14,1214.87 1801.73,1214.87 1802.31,1214.87 1802.9,1214.87 1803.48,1214.87 1804.07,1214.87 1804.66,1214.87 1805.24,1214.87 1805.83,1214.87 1806.42,1214.87 1807,1214.87 1807.59,1214.87 1808.18,1214.87 1808.76,1214.87 1809.35,1214.87 1809.94,1214.87 1810.52,1214.87 1811.11,1214.87 1811.69,1214.87 1812.28,1214.87 1812.87,1214.87 1813.45,1214.87 1814.04,1214.87 1814.63,1214.87 1815.21,1214.87 1815.8,1214.87 1816.39,1214.87 1816.97,1214.87 1817.56,1214.87 1818.14,1214.87 1818.73,1214.87 1819.32,1214.87 1819.9,1214.87 1820.49,1214.87 1821.08,1214.87 1821.66,1214.87 1822.25,1214.87 1822.84,1214.87 1823.42,1214.87 1824.01,1214.87 1824.6,1214.87 1825.18,1214.87 1825.77,1214.87 1826.35,1214.87 1826.94,1214.87 1827.53,1214.87 1828.11,1214.87 1828.7,1214.87 1829.29,1214.87 1829.87,1214.87 1830.46,1214.87 1831.05,1214.87 1831.63,1214.87 1832.22,1214.87 1832.81,1214.87 1833.39,1214.87 1833.98,1214.87 1834.56,1214.87 1835.15,1214.87 1835.74,1214.87 1836.32,1214.87 1836.91,1214.87 1837.5,1214.87 1838.08,1214.87 1838.67,1214.87 1839.26,1214.87 1839.84,1214.87 1840.43,1214.87 1841.01,1214.87 1841.6,1214.87 1842.19,1214.87 1842.77,1214.87 1843.36,1214.87 1843.95,1214.87 1844.53,1214.87 1845.12,1214.87 1845.71,1214.87 1846.29,1214.87 1846.88,1214.87 1847.47,1214.87 1848.05,1214.87 1848.64,1214.87 1849.22,1214.87 1849.81,1214.87 1850.4,1214.87 1850.98,1214.87 1851.57,1214.87 1852.16,1214.87 1852.74,1214.87 1853.33,1214.87 1853.92,1214.87 1854.5,1214.87 1855.09,1214.87 1855.68,1214.87 1856.26,1214.87 1856.85,1214.87 1857.43,1214.87 1858.02,1214.87 1858.61,1214.87 1859.19,1214.87 1859.78,1214.87 1860.37,1214.87 1860.95,1214.87 1861.54,1214.87 1862.13,1214.87 1862.71,1214.87 1863.3,1214.87 1863.88,1214.87 1864.47,1214.87 1865.06,1214.87 1865.64,1214.87 1866.23,1214.87 1866.82,1214.87 1867.4,1214.87 1867.99,1214.87 1868.58,1214.87 1869.16,1214.87 1869.75,1214.87 1870.34,1214.87 1870.92,1214.87 1871.51,1214.87 1872.09,1214.87 1872.68,1214.87 1873.27,1214.87 1873.85,1214.87 1874.44,1214.87 1875.03,1214.87 1875.61,1214.87 1876.2,1214.87 1876.79,1214.87 1877.37,1214.87 1877.96,1214.87 1878.55,1214.87 1879.13,1214.87 1879.72,1214.87 1880.3,1214.87 1880.89,1214.87 1881.48,1214.87 1882.06,1214.87 1882.65,1214.87 1883.24,1214.87 1883.82,1214.87 1884.41,1214.87 1885,1214.87 1885.58,1214.87 1886.17,1214.87 1886.76,1214.87 1887.34,1214.87 1887.93,1214.87 1888.51,1214.87 1889.1,1214.87 1889.69,1214.87 1890.27,1214.87 1890.86,1214.87 1891.45,1214.87 1892.03,1214.87 1892.62,1214.87 1893.21,1214.87 1893.79,1214.87 1894.38,1214.87 1894.96,1214.87 1895.55,1214.87 1896.14,1214.87 1896.72,1214.87 1897.31,1214.87 1897.9,1214.87 1898.48,1214.87 1899.07,1214.87 1899.66,1214.87 1900.24,1214.87 1900.83,1214.87 1901.42,1214.87 1902,1214.87 1902.59,1214.87 1903.17,1214.87 1903.76,1214.87 1904.35,1214.87 1904.93,1214.87 1905.52,1214.87 1906.11,1214.87 1906.69,1214.87 1907.28,1214.87 1907.87,1214.87 1908.45,1214.87 1909.04,1214.87 1909.63,1214.87 1910.21,1214.87 1910.8,1214.87 1911.38,1214.87 1911.97,1214.87 1912.56,1214.87 1913.14,1214.87 1913.73,1214.87 1914.32,1214.87 1914.9,1214.87 1915.49,1214.87 1916.08,1214.87 1916.66,1214.87 1917.25,1214.87 1917.83,1214.87 1918.42,1214.87 1919.01,1214.87 1919.59,1214.87 1920.18,1214.87 1920.77,1214.87 1921.35,1214.87 1921.94,1214.87 1922.53,1214.87 1923.11,1214.87 1923.7,1214.87 1924.29,1214.87 1924.87,1214.87 1925.46,1214.87 1926.04,1214.87 1926.63,1214.87 1927.22,1214.87 1927.8,1214.87 1928.39,1214.87 1928.98,1214.87 1929.56,1214.87 1930.15,1214.87 1930.74,1214.87 1931.32,1214.87 1931.91,1214.87 1932.5,1214.87 1933.08,1214.87 1933.67,1214.87 1934.25,1214.87 1934.84,1214.87 1935.43,1214.87 1936.01,1214.87 1936.6,1214.87 1937.19,1214.87 1937.77,1214.87 1938.36,1214.87 1938.95,1214.87 1939.53,1214.87 1940.12,1214.87 1940.71,1214.87 1941.29,1214.87 1941.88,1214.87 1942.46,1214.87 1943.05,1214.87 1943.64,1214.87 1944.22,1214.87 1944.81,1214.87 1945.4,1214.87 1945.98,1214.87 1946.57,1214.87 1947.16,1214.87 1947.74,1214.87 1948.33,1214.87 1948.91,1214.87 1949.5,1214.87 1950.09,1214.87 1950.67,1214.87 1951.26,1214.87 1951.85,1214.87 1952.43,1214.87 1953.02,1214.87 1953.61,1214.87 1954.19,1214.87 1954.78,1214.87 1955.37,1214.87 1955.95,1214.87 1956.54,1214.87 1957.12,1214.87 1957.71,1214.87 1958.3,1214.87 1958.88,1214.87 1959.47,1214.87 1960.06,1214.87 1960.64,1214.87 1961.23,1214.87 1961.82,1214.87 1962.4,1214.87 1962.99,1214.87 1963.58,1214.87 1964.16,1214.87 1964.75,1214.87 1965.33,1214.87 1965.92,1214.87 1966.51,1214.87 1967.09,1214.87 1967.68,1214.87 1968.27,1214.87 1968.85,1214.87 1969.44,1214.87 1970.03,1214.87 1970.61,1214.87 1971.2,1214.87 1971.78,1214.87 1972.37,1214.87 1972.96,1214.87 1973.54,1214.87 1974.13,1214.87 1974.72,1214.87 1975.3,1214.87 1975.89,1214.87 1976.48,1214.87 1977.06,1214.87 1977.65,1214.87 1978.24,1214.87 1978.82,1214.87 1979.41,1214.87 1979.99,1214.87 1980.58,1214.87 1981.17,1214.87 1981.75,1214.87 1982.34,1214.87 1982.93,1214.87 1983.51,1214.87 1984.1,1214.87 1984.69,1214.87 1985.27,1214.87 1985.86,1214.87 1986.45,1214.87 1987.03,1214.87 1987.62,1214.87 1988.2,1214.87 1988.79,1214.87 1989.38,1214.87 1989.96,1214.87 1990.55,1214.87 1991.14,1214.87 1991.72,1214.87 1992.31,1214.87 1992.9,1214.87 1993.48,1214.87 1994.07,1214.87 1994.65,1214.87 1995.24,1214.87 1995.83,1214.87 1996.41,1214.87 1997,1214.87 1997.59,1214.87 1998.17,1214.87 1998.76,1214.87 1999.35,1214.87 1999.93,1214.87 2000.52,1214.87 2001.11,1214.87 2001.69,1214.87 2002.28,1214.87 2002.86,1214.87 2003.45,1214.87 2004.04,1214.87 2004.62,1214.87 2005.21,1214.87 2005.8,1214.87 2006.38,1214.87 2006.97,1214.87 2007.56,1214.87 2008.14,1214.87 2008.73,1214.87 2009.32,1214.87 2009.9,1214.87 2010.49,1214.87 2011.07,1214.87 2011.66,1214.87 2012.25,1214.87 2012.83,1214.87 2013.42,1214.87 2014.01,1214.87 2014.59,1214.87 2015.18,1214.87 2015.77,1214.87 2016.35,1214.87 2016.94,1214.87 2017.53,1214.87 2018.11,1214.87 2018.7,1214.87 2019.28,1214.87 2019.87,1214.87 2020.46,1214.87 2021.04,1214.87 2021.63,1214.87 2022.22,1214.87 2022.8,1214.87 2023.39,1214.87 2023.98,1214.87 2024.56,1214.87 2025.15,1214.87 2025.73,1214.87 2026.32,1214.87 2026.91,1214.87 2027.49,1214.87 2028.08,1214.87 2028.67,1214.87 2029.25,1214.87 2029.84,1214.87 2030.43,1214.87 2031.01,1214.87 2031.6,1214.87 2032.19,1214.87 2032.77,1214.87 2033.36,1214.87 2033.94,1214.87 2034.53,1214.87 2035.12,1214.87 2035.7,1214.87 2036.29,1214.87 2036.88,1214.87 2037.46,1214.87 2038.05,1214.87 2038.64,1214.87 2039.22,1214.87 2039.81,1214.87 2040.4,1214.87 2040.98,1214.87 2041.57,1214.87 2042.15,1214.87 2042.74,1214.87 2043.33,1214.87 2043.91,1214.87 2044.5,1214.87 2045.09,1214.87 2045.67,1214.87 2046.26,1214.87 2046.85,1214.87 2047.43,1214.87 2048.02,1214.87 2048.6,1214.87 2049.19,1214.87 2049.78,1214.87 2050.36,1214.87 2050.95,1214.87 2051.54,1214.87 2052.12,1214.87 2052.71,1214.87 2053.3,1214.87 2053.88,1214.87 2054.47,1214.87 2055.06,1214.87 2055.64,1214.87 2056.23,1214.87 2056.81,1214.87 2057.4,1214.87 2057.99,1214.87 2058.57,1214.87 2059.16,1214.87 2059.75,1214.87 2060.33,1214.87 2060.92,1214.87 2061.51,1214.87 2062.09,1214.87 2062.68,1214.87 2063.27,1214.87 2063.85,1214.87 2064.44,1214.87 2065.02,1214.87 2065.61,1214.87 2066.2,1214.87 2066.78,1214.87 2067.37,1214.87 2067.96,1214.87 2068.54,1214.87 2069.13,1214.87 2069.72,1214.87 2070.3,1214.87 2070.89,1214.87 2071.48,1214.87 2072.06,1214.87 2072.65,1214.87 2073.23,1214.87 2073.82,1214.87 2074.41,1214.87 2074.99,1214.87 2075.58,1214.87 2076.17,1214.87 2076.75,1214.87 2077.34,1214.87 2077.93,1214.87 2078.51,1214.87 2079.1,1214.87 2079.68,1214.87 2080.27,1214.87 2080.86,1214.87 2081.44,1214.87 2082.03,1214.87 2082.62,1214.87 2083.2,1214.87 2083.79,1214.87 2084.38,1214.87 2084.96,1214.87 2085.55,1214.87 2086.14,1214.87 2086.72,1214.87 2087.31,1214.87 2087.89,1214.87 2088.48,1214.87 2089.07,1214.87 2089.65,1214.87 2090.24,1214.87 2090.83,1214.87 2091.41,1214.87 2092,1214.87 2092.59,1214.87 2093.17,1214.87 2093.76,1214.87 2094.35,1214.87 2094.93,1214.87 2095.52,1214.87 2096.1,1214.87 2096.69,1214.87 2097.28,1214.87 2097.86,1214.87 2098.45,1214.87 2099.04,1214.87 2099.62,1214.87 2100.21,1214.87 2100.8,1214.87 2101.38,1214.87 2101.97,1214.87 2102.55,1214.87 2103.14,1214.87 2103.73,1214.87 2104.31,1214.87 2104.9,1214.87 2105.49,1214.87 2106.07,1214.87 2106.66,1214.87 2107.25,1214.87 2107.83,1214.87 2108.42,1214.87 2109.01,1214.87 2109.59,1214.87 2110.18,1214.87 2110.76,1214.87 2111.35,1214.87 2111.94,1214.87 2112.52,1214.87 2113.11,1214.87 2113.7,1214.87 2114.28,1214.87 2114.87,1214.87 2115.46,1214.87 2116.04,1214.87 2116.63,1214.87 2117.22,1214.87 2117.8,1214.87 2118.39,1214.87 2118.97,1214.87 2119.56,1214.87 2120.15,1214.87 2120.73,1214.87 2121.32,1214.87 2121.91,1214.87 2122.49,1214.87 2123.08,1214.87 2123.67,1214.87 2124.25,1214.87 2124.84,1214.87 2125.42,1214.87 2126.01,1214.87 2126.6,1214.87 2127.18,1214.87 2127.77,1214.87 2128.36,1214.87 2128.94,1214.87 2129.53,1214.87 2130.12,1214.87 2130.7,1214.87 2131.29,1214.87 2131.88,1214.87 2132.46,1214.87 2133.05,1214.87 2133.63,1214.87 2134.22,1214.87 2134.81,1214.87 2135.39,1214.87 2135.98,1214.87 2136.57,1214.87 2137.15,1214.87 2137.74,1214.87 2138.33,1214.87 2138.91,1214.87 2139.5,1214.87 2140.09,1214.87 2140.67,1214.87 2141.26,1214.87 2141.84,1214.87 2142.43,1214.87 2143.02,1214.87 2143.6,1214.87 2144.19,1214.87 2144.78,1214.87 2145.36,1214.87 2145.95,1214.87 2146.54,1214.87 2147.12,1214.87 2147.71,1214.87 2148.3,1214.87 2148.88,1214.87 2149.47,1214.87 2150.05,1214.87 2150.64,1214.87 2151.23,1214.87 2151.81,1214.87 2152.4,1214.87 2152.99,1214.87 2153.57,1214.87 2154.16,1214.87 2154.75,1214.87 2155.33,1214.87 2155.92,1214.87 2156.5,1214.87 2157.09,1214.87 2157.68,1214.87 2158.26,1214.87 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.11,1196.86 1398.78,899.083 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.38 985.439,1196.86 2158.26,1196.86 2158.26,1232.38 985.439,1232.38 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip393\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip393)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2724.3 162.673,-3925.89 163.232,-5026.74 163.792,-6057.9 164.351,-6999.48 164.91,-7857.34 165.469,-8615.05 166.029,-9301.08 166.588,-9921.87 167.147,-10479.8 167.706,-10979 168.266,-10478.4 168.825,-10881.5 169.384,-9681.78 169.943,-10068.4 170.503,-10430.5 171.062,-10748.6 171.621,-11025.4 172.18,-11263.8 172.74,-10935.7 173.299,-11123.7 173.858,-11279.7 174.417,-11395.4 174.977,-11488.6 175.536,-11556.5 176.095,-10887.1 176.655,-10960.9 177.214,-10700.1 177.773,-10738.6 178.332,-10759.3 178.892,-10754.5 179.451,-10491.5 180.01,-10477.1 180.569,-10229.4 181.129,-9981.53 181.688,-9925.33 182.247,-9501.65 182.806,-9441.92 183.366,-9052.6 183.925,-8978.26 184.484,-8739.36 185.043,-8651.67 185.603,-8550.03 186.162,-8328.48 186.721,-8089.55 187.28,-7974.59 187.84,-7744.08 188.399,-7621.63 188.958,-7506.66 189.517,-7199.74 190.077,-6992.21 190.636,-6801.36 191.195,-6511.84 191.754,-6018.83 192.314,-5848.47 192.873,-5616.21 193.432,-5383.68 193.991,-5035.64 194.551,-4896.65 195.11,-4759.43 195.669,-4621.38 196.228,-4382.76 196.788,-4251.56 197.347,-4072.4 197.906,-3856.82 198.465,-3648.51 199.025,-3590.26 199.584,-3526.94 200.143,-3292.51 200.702,-3192.13 201.262,-2972.63 201.821,-2796.68 202.38,-2707.07 202.939,-2585.7 203.499,-2506.84 204.058,-2464.07 204.617,-2413.24 205.176,-2334.09 205.736,-2184.93 206.295,-2076.11 206.854,-1901.71 207.413,-1796.89 207.973,-1755.48 208.532,-1651.75 209.091,-1585.43 209.65,-1554.49 210.21,-1514.95 210.769,-1474.5 211.328,-1376.47 211.887,-1258.71 212.447,-1136.62 213.006,-1101.81 213.565,-1017.49 214.124,-985.156 214.684,-825.575 215.243,-749.322 215.802,-733.024 216.361,-709.049 216.921,-634.106 217.48,-562.27 218.039,-469.39 218.598,-428.959 219.158,-386.585 219.717,-392.021 220.276,-367.521 220.835,-323.055 221.395,-278.803 221.954,-189.077 222.513,-145.691 223.072,-85.5736 223.632,-133.912 224.191,-46.6953 224.75,-29.6726 225.309,29.5498 225.869,85.6293 226.428,143.632 226.987,154.997 227.546,188.432 228.106,222.701 228.665,252.439 229.224,263.23 229.783,332.016 230.343,342.052 230.902,389.616 231.461,415.931 232.02,444.836 232.58,447.601 233.139,456.446 233.698,523.157 234.257,542.443 234.817,531.855 235.376,534.829 235.935,576.936 236.494,600.108 237.054,635.977 237.613,596.383 238.172,656.235 238.731,694.407 239.291,751.658 239.85,751.656 240.409,748.309 240.968,766.015 241.528,799.432 242.087,849.985 242.646,844.142 243.205,874.999 243.765,888.516 244.324,884.18 244.883,932.918 245.442,974.172 246.002,949.291 246.561,996.008 247.12,984.929 247.679,997.439 248.239,1020.85 248.798,1031.32 249.357,1003.42 249.916,977.137 250.476,986.955 251.035,999.077 251.594,1008.2 252.153,995.687 252.713,970.378 253.272,965.856 253.831,977.501 254.39,969.203 254.95,963.623 255.509,941.253 256.068,902.175 256.627,900.838 257.187,903.386 257.746,903.814 258.305,934.021 258.864,968.213 259.424,982.403 259.983,994.978 260.542,1039.24 261.101,1063.68 261.661,1111.76 262.22,1105.01 262.779,1097.66 263.338,1104.78 263.898,1113.78 264.457,1102.72 265.016,1093.96 265.575,1116.61 266.135,1108.76 266.694,1101.37 267.253,1109.99 267.812,1117.15 268.372,1106.67 268.931,1079.18 269.49,1103.8 270.049,1113.92 270.609,1104.08 271.168,1111.82 271.727,1122.29 272.286,1114.07 272.846,1070.18 273.405,1063.51 273.964,1038.41 274.523,1064.46 275.083,1071.44 275.642,1063.39 276.201,1056.22 276.76,1029.95 277.32,1025.91 277.879,988.048 278.438,969.661 278.997,951.927 279.557,967.863 280.116,999.864 280.675,1029.49 281.234,1025.3 281.794,1019.18 282.353,1046.21 282.912,1055.67 283.471,1080.77 284.031,1077.31 284.59,1054.29 285.149,1051.59 285.708,1047.62 286.268,994.058 286.827,1041.71 287.386,1035.62 287.945,1064.59 288.505,1103.63 289.064,1093.62 289.623,1084.2 290.182,1072.42 290.742,1063.68 291.301,1087.14 291.86,1061.4 292.419,1033.78 292.979,1047.41 293.538,1058.98 294.097,1053.65 294.656,1010.56 295.216,1004.44 295.775,968.314 296.334,948.204 296.893,946.875 297.453,964.489 298.012,996.667 298.571,1008.1 299.13,968.044 299.69,944.695 300.249,925.514 300.808,991.883 301.368,972.121 301.927,973.505 302.486,1001.44 303.045,962.764 303.605,1009.58 304.164,1021.32 304.723,1032.98 305.282,1024.64 305.842,1021.67 306.401,1011.66 306.96,987.51 307.519,951.283 308.079,952.73 308.638,982.386 309.197,1014.63 309.756,993.905 310.316,985.841 310.875,979.874 311.434,959.544 311.993,959.026 312.553,938.416 313.112,967.512 313.671,964.181 314.23,957.129 314.79,935.555 315.349,916.854 315.908,933.381 316.467,912.911 317.027,910.753 317.586,941.346 318.145,972.717 318.704,937.602 319.264,902.213 319.823,885.86 320.382,902.311 320.941,931.39 321.501,927.038 322.06,957.439 322.619,939.22 323.178,921.225 323.738,886.874 324.297,868.043 324.856,870.449 325.415,906.545 325.975,903.373 326.534,919.128 327.093,896.119 327.652,875.526 328.212,877.137 328.771,874.658 329.33,890.414 329.889,889.154 330.449,870.902 331.008,868.183 331.567,867.315 332.126,867.806 332.686,886.486 333.245,887.116 333.804,902.993 334.363,883.007 334.923,851.247 335.482,820.412 336.041,837.819 336.6,854.467 337.16,870.795 337.719,869.277 338.278,885.178 338.837,883.717 339.397,899.037 339.956,933.159 340.515,944.803 341.074,954.636 341.634,935.548 342.193,932.094 342.752,949.352 343.311,944.843 343.871,940.498 344.43,936.2 344.989,941.678 345.548,886.738 346.108,866.589 346.667,863.054 347.226,861.697 347.785,876.871 348.345,842.175 348.904,856.967 349.463,837.562 350.022,839.298 350.582,857.611 351.141,838.406 351.7,841.322 352.259,858.155 352.819,887.315 353.378,890.281 353.937,883.482 354.496,885.584 355.056,914.997 355.615,911.11 356.174,903.622 356.733,900.141 357.293,914.247 357.852,908.052 358.411,888.549 358.97,915.869 359.53,927.885 360.089,936.559 360.648,932.001 361.207,944.766 361.767,907.246 362.326,884.068 362.885,882.23 363.444,876.611 364.004,875.348 364.563,906.333 365.122,918.052 365.681,895.644 366.241,891.373 366.8,888.436 367.359,915.198 367.918,912.945 368.478,876.176 369.037,841.15 369.596,834.029 370.155,847.351 370.715,843.775 371.274,824.824 371.833,870.879 372.392,868.451 372.952,850.751 373.511,879.443 374.07,843.246 374.629,855.185 375.189,882.163 375.748,877.675 376.307,879.409 376.866,876.243 377.426,871.124 377.985,895.891 378.544,908.14 379.103,923.146 379.663,912.673 380.222,890.808 380.781,887.2 381.34,899.897 381.9,879.689 382.459,876.798 383.018,858.615 383.577,873.001 384.137,865.263 384.696,893.602 385.255,886.068 385.814,917.95 386.374,926.962 386.933,887.244 387.492,880.498 388.051,874.459 388.611,868.504 389.17,844.892 389.729,825.512 390.288,824.162 390.848,801.643 391.407,797.293 391.966,797.861 392.525,784.538 393.085,787.035 393.644,789.483 394.203,822.391 394.762,855.267 395.322,869.548 395.881,864.001 396.44,841.657 396.999,838.041 397.559,849.046 398.118,828.087 398.677,827.499 399.236,824.899 399.796,804.311 400.355,820.985 400.914,884.16 401.473,912.427 402.033,952.911 402.592,960.344 403.151,983.302 403.71,973.424 404.27,949.231 404.829,940.8 405.388,944.634 405.947,952.302 406.507,958.648 407.066,900.405 407.625,876.543 408.184,853.886 408.744,849.789 409.303,842.008 409.862,853.898 410.421,845.344 410.981,841.483 411.54,855.255 412.099,837.62 412.658,800.177 413.218,848.83 413.777,845.168 414.336,841.711 414.895,818.629 415.455,800.15 416.014,799.228 416.573,796.334 417.132,777.851 417.692,812.04 418.251,808.424 418.81,806.701 419.369,756.164 419.929,775.655 420.488,773.506 421.047,793.825 421.606,725.709 422.166,772.44 422.725,773.054 423.284,740.648 423.843,742.679 424.403,744.446 424.962,746.816 425.521,762.535 426.08,745.131 426.64,715.86 427.199,718.945 427.758,718.383 428.318,754.216 428.877,737.855 429.436,707.247 429.995,694.425 430.555,716.55 431.114,733.127 431.673,733.652 432.232,718.771 432.792,703.441 433.351,706.719 433.91,727.631 434.469,679.124 435.029,687.866 435.588,675.011 436.147,680.307 436.706,685.045 437.266,705.641 437.825,713.127 438.384,746.428 438.943,748.965 439.503,751.903 440.062,737.249 440.621,720.24 441.18,723.095 441.74,722.848 442.299,740.123 442.858,758.943 443.417,757.409 443.977,743.572 444.536,746.977 445.095,747.305 445.654,747.794 446.214,729.241 446.773,746.753 447.332,750.577 447.891,770.009 448.451,772.322 449.01,784.739 449.569,800.956 450.128,817.007 450.688,781.861 451.247,796.238 451.806,776.499 452.365,779.728 452.925,777.613 453.484,796.889 454.043,793.149 454.602,775.781 455.162,804.219 455.721,817.142 456.28,810.27 456.839,777.355 457.399,757.565 457.958,776.594 458.517,824.434 459.076,834.793 459.636,831.234 460.195,876.182 460.754,852.065 461.313,845.94 461.873,838.795 462.432,835.122 462.991,829.505 463.55,807.532 464.11,869.332 464.669,881.044 465.228,859.821 465.787,821.131 466.347,748.453 466.906,713.199 467.465,730.318 468.024,712.436 468.584,696.087 469.143,712.736 469.702,697.853 470.261,715.315 470.821,702.613 471.38,720.641 471.939,704.588 472.498,673.248 473.058,691.471 473.617,698.511 474.176,667.966 474.735,673.613 475.295,677.323 475.854,681.948 476.413,668.07 476.972,686.867 477.532,686.181 478.091,685.734 478.65,625.425 479.209,631.948 479.769,635.06 480.328,675.026 480.887,694.983 481.446,666.757 482.006,717.166 482.565,702.593 483.124,670.839 483.683,673.765 484.243,643.917 484.802,649.795 485.361,670.077 485.92,673.119 486.48,696.382 487.039,714.551 487.598,716.137 488.157,713.152 488.717,712.793 489.276,715.065 489.835,713.579 490.394,730.54 490.954,748.727 491.513,764.342 492.072,762.001 492.631,760.727 493.191,790.467 493.75,805.154 494.309,799.819 494.868,781.798 495.428,812.401 495.987,792.291 496.546,788.286 497.105,788.755 497.665,784.007 498.224,817.152 498.783,815.112 499.342,827.241 499.902,854.994 500.461,866.718 501.02,859.989 501.579,867.076 502.139,828.374 502.698,823.155 503.257,803.948 503.816,786.55 504.376,764.473 504.935,747.067 505.494,780.098 506.053,794.478 506.613,807.46 507.172,803.377 507.731,810.383 508.29,808.196 508.85,787.16 509.409,770.62 509.968,783.799 510.527,813.325 511.087,726.87 511.646,723.905 512.205,725.695 512.764,708.171 513.324,694.143 513.883,695.119 514.442,678.077 515.001,680.328 515.561,679.72 516.12,729.45 516.679,728.361 517.238,694.522 517.798,713.123 518.357,712.724 518.916,727.232 519.475,727.394 520.035,757.992 520.594,788.963 521.153,784.372 521.712,795.851 522.272,760.656 522.831,743.568 523.39,788.075 523.949,815.927 524.509,824.119 525.068,864.133 525.627,858.488 526.186,805.125 526.746,817.481 527.305,813.765 527.864,824.827 528.423,803.857 528.983,812.802 529.542,806.558 530.101,784.785 530.66,798.361 531.22,810.014 531.779,817.44 532.338,795.341 532.897,776.572 533.457,775.065 534.016,758.927 534.575,754.85 535.134,805.76 535.694,801.401 536.253,746.826 536.812,741.649 537.371,737.651 537.931,738.199 538.49,736.479 539.049,797.002 539.608,776.369 540.168,772.533 540.727,736.643 541.286,782.428 541.845,797.039 542.405,776.753 542.964,773.278 543.523,756.015 544.082,739.19 544.642,739.238 545.201,756.186 545.76,754.843 546.319,737.588 546.879,689.029 547.438,722.445 547.997,706.68 548.556,706.18 549.116,707.651 549.675,739.713 550.234,789.012 550.793,817.486 551.353,779.334 551.912,775.126 552.471,771.105 553.031,754.253 553.59,752.641 554.149,752.982 554.708,782.915 555.268,730.159 555.827,731.678 556.386,763.561 556.945,744.324 557.505,743.268 558.064,756.324 558.623,722.014 559.182,704.333 559.742,705.413 560.301,722.984 560.86,725.361 561.419,745.849 561.979,744.473 562.538,724.905 563.097,691.732 563.656,679.589 564.216,717.068 564.775,699.568 565.334,714.269 565.893,682.144 566.453,703.173 567.012,655.647 567.571,664.032 568.13,665.545 568.69,684.675 569.249,686.512 569.808,692.296 570.367,693.193 570.927,677.535 571.486,661.408 572.045,662.233 572.604,633.11 573.164,622.662 573.723,614.797 574.282,636.678 574.841,628.438 575.401,600.854 575.96,605.927 576.519,580.316 577.078,566.17 577.638,587.917 578.197,578.653 578.756,582.089 579.315,584.201 579.875,587.764 580.434,596.326 580.993,604.651 581.552,612.186 582.112,632.311 582.671,635.321 583.23,626.195 583.789,598.775 584.349,636.983 584.908,640.17 585.467,644.323 586.026,646.925 586.586,666.3 587.145,633.426 587.704,635.565 588.263,639.435 588.823,662.313 589.382,665.27 589.941,668.419 590.5,654.239 591.06,655.159 591.619,674.425 592.178,675.756 592.737,679.364 593.297,662.236 593.856,630.85 594.415,620.18 594.974,626.065 595.534,633.194 596.093,621.643 596.652,657.678 597.211,679.534 597.771,680.156 598.33,698.585 598.889,715.491 599.448,716.807 600.008,747.096 600.567,760.767 601.126,741.798 601.685,754.458 602.245,748.125 602.804,745.065 603.363,754.904 603.922,734.229 604.482,749.772 605.041,731.929 605.6,745.649 606.159,762.427 606.719,775.362 607.278,758.008 607.837,754.962 608.396,738.633 608.956,737.749 609.515,738.04 610.074,702.204 610.633,715.678 611.193,718.17 611.752,700.206 612.311,686.51 612.87,691.916 613.43,693.099 613.989,660.326 614.548,644.653 615.107,629.06 615.667,667.89 616.226,686.645 616.785,690.302 617.344,673.21 617.904,692.328 618.463,743.04 619.022,768.561 619.581,800.411 620.141,759.374 620.7,770.914 621.259,767.444 621.818,728.301 622.378,745.044 622.937,725.205 623.496,725.956 624.055,709.279 624.615,711.535 625.174,711.34 625.733,745.197 626.292,762.697 626.852,758.276 627.411,789.693 627.97,785.317 628.529,748.707 629.089,730.094 629.648,741.391 630.207,753.186 630.766,750.032 631.326,749.818 631.885,748.293 632.444,730.228 633.003,714.133 633.563,695.065 634.122,696.921 634.681,696.311 635.24,713.396 635.8,743.488 636.359,760.038 636.918,775.593 637.477,771.575 638.037,753.797 638.596,749.28 639.155,750.858 639.714,766.471 640.274,743.504 640.833,754.579 641.392,751.929 641.951,749.926 642.511,717.118 643.07,759.91 643.629,721.042 644.188,720.377 644.748,722.381 645.307,738.3 645.866,785.385 646.425,783.505 646.985,810.31 647.544,801.169 648.103,826.29 648.662,818.785 649.222,814.335 649.781,790.234 650.34,768.627 650.899,759.576 651.459,739.003 652.018,690.304 652.577,693.361 653.136,675.507 653.696,677.857 654.255,693.811 654.814,707.312 655.373,704.78 655.933,702.364 656.492,685.162 657.051,682.451 657.61,651.283 658.17,623.085 658.729,612.163 659.288,629.959 659.847,649.499 660.407,686.972 660.966,702.43 661.525,703.96 662.084,672.706 662.644,673.617 663.203,644.524 663.762,661.824 664.321,662.86 664.881,679.709 665.44,680.568 665.999,698.335 666.558,668.316 667.118,689.266 667.677,670.797 668.236,705.908 668.795,691.394 669.355,675.081 669.914,725.069 670.473,706.012 671.032,686.957 671.592,701.045 672.151,681.107 672.71,666.573 673.269,684.376 673.829,683.554 674.388,717.624 674.947,717.045 675.506,746.845 676.066,730.304 676.625,726.887 677.184,744.948 677.743,725.158 678.303,701.483 678.862,699.687 679.421,702.011 679.981,685.759 680.54,703.122 681.099,687.563 681.658,656.07 682.218,672.112 682.777,656.575 683.336,673.925 683.895,691.572 684.455,662.31 685.014,676.953 685.573,680.668 686.132,681.985 686.692,683.04 687.251,685.743 687.81,668.725 688.369,667.51 688.929,669.495 689.488,652.725 690.047,656.349 690.606,673.185 691.166,706.717 691.725,691.102 692.284,692.608 692.843,692.177 693.403,725.468 693.962,756.819 694.521,768.866 695.08,684.958 695.64,670.616 696.199,673.797 696.758,694.623 697.317,695.694 697.877,761.079 698.436,741.189 698.995,758.372 699.554,772.127 700.114,766.8 700.673,729.72 701.232,724.794 701.791,739.058 702.351,750.508 702.91,751.067 703.469,784.061 704.028,765.918 704.588,743.804 705.147,723.048 705.706,721.224 706.265,720.631 706.825,703.505 707.384,702.225 707.943,700.2 708.502,651.341 709.062,671.715 709.621,691.094 710.18,694.811 710.739,680.357 711.299,700.994 711.858,670.325 712.417,642.859 712.976,646.3 713.536,651.706 714.095,683.304 714.654,685.099 715.213,700.025 715.773,731.559 716.332,734.456 716.891,716.544 717.45,698.498 718.01,694.043 718.569,693.253 719.128,674.77 719.687,612.57 720.247,628.174 720.806,615.53 721.365,633.534 721.924,632.05 722.484,634.303 723.043,619.67 723.602,621.788 724.161,627.128 724.721,649.347 725.28,653.316 725.839,652.447 726.398,685.629 726.958,717.12 727.517,716.906 728.076,714.485 728.635,696.998 729.195,711.153 729.754,707.987 730.313,721.45 730.872,723.997 731.432,741.198 731.991,739.208 732.55,721.139 733.109,700.691 733.669,716.962 734.228,764.241 734.787,761.396 735.346,777.303 735.906,758.902 736.465,740.873 737.024,721.241 737.583,716.84 738.143,748.707 738.702,695.813 739.261,679.921 739.82,663.725 740.38,678.562 740.939,727.616 741.498,742.429 742.057,694.275 742.617,677.77 743.176,678.248 743.735,681.565 744.294,664.6 744.854,647.425 745.413,665.088 745.972,654.269 746.531,705.329 747.091,720.247 747.65,720.751 748.209,719.176 748.768,699.475 749.328,696.858 749.887,729.17 750.446,731.051 751.005,744.97 751.565,741.331 752.124,739.368 752.683,738.555 753.242,688.942 753.802,658.623 754.361,710.375 754.92,679.364 755.479,683.223 756.039,680.196 756.598,697.632 757.157,709.747 757.716,726.56 758.276,707.79 758.835,723.375 759.394,750.324 759.953,760.722 760.513,773.495 761.072,771.355 761.631,736.143 762.19,751.018 762.75,748.151 763.309,709.336 763.868,739.939 764.427,707.49 764.987,709.24 765.546,706.981 766.105,721.518 766.664,751.49 767.224,780.942 767.783,776.389 768.342,773.333 768.901,770.622 769.461,798.928 770.02,761.659 770.579,789.604 771.138,767.183 771.698,777.67 772.257,757.601 772.816,707.582 773.375,675.971 773.935,675.921 774.494,694.17 775.053,740.151 775.612,704.104 776.172,719.458 776.731,719.947 777.29,747.536 777.849,714.831 778.409,697.74 778.968,695.06 779.527,740.96 780.086,722.383 780.646,735.227 781.205,731.351 781.764,748.086 782.323,744.905 782.883,753.706 783.442,764.01 784.001,756.677 784.56,720.241 785.12,671.437 785.679,689.81 786.238,640.351 786.797,627.847 787.357,616.673 787.916,633.165 788.475,651.294 789.034,669.295 789.594,654.979 790.153,673.04 790.712,657.998 791.271,675.848 791.831,675.757 792.39,675.745 792.949,674.709 793.508,690.255 794.068,688.447 794.627,673.51 795.186,641.479 795.745,611.861 796.305,615.868 796.864,602.853 797.423,621.878 797.982,639.62 798.542,641.031 799.101,644.993 799.66,630.955 800.219,633.426 800.779,653.104 801.338,653.597 801.897,655.796 802.456,652.801 803.016,636.852 803.575,672.542 804.134,688.943 804.693,736.391 805.253,718.05 805.812,733.216 806.371,715.175 806.931,730.828 807.49,725.87 808.049,770.585 808.608,737.582 809.168,736.317 809.727,731.657 810.286,747.446 810.845,745.768 811.405,747.482 811.964,730.099 812.523,728.401 813.082,742.576 813.642,737.244 814.201,719.724 814.76,720.006 815.319,719.166 815.879,731.507 816.438,747.81 816.997,759.14 817.556,754.732 818.116,738.015 818.675,784.712 819.234,763.398 819.793,711.907 820.353,725.609 820.912,741.157 821.471,707.988 822.03,720.466 822.59,732.848 823.149,728.646 823.708,726.107 824.267,738.632 824.827,704.955 825.386,703.967 825.945,705.565 826.504,707.017 827.064,721.655 827.623,750.538 828.182,762.001 828.741,759.061 829.301,769.872 829.86,752.491 830.419,748.201 830.978,730.12 831.538,728.138 832.097,711.468 832.656,662.799 833.215,664.055 833.775,650.054 834.334,637.424 834.893,625.493 835.452,597.257 836.012,583.44 836.571,590.299 837.13,579.811 837.689,553.436 838.249,595.356 838.808,631.932 839.367,615.678 839.926,606.539 840.486,611.34 841.045,646.458 841.604,662.337 842.163,663.652 842.723,668.171 843.282,684.086 843.841,666.54 844.4,665.273 844.96,652.956 845.519,604.118 846.078,625.391 846.637,596.878 847.197,583.967 847.756,590.896 848.315,580.192 848.874,566.101 849.434,556.749 849.993,549.193 850.552,542.258 851.111,553.245 851.671,557.804 852.23,548.425 852.789,540.643 853.348,548.618 853.908,555.82 854.467,560.585 855.026,553.52 855.585,593.844 856.145,584.354 856.704,554.287 857.263,563.613 857.822,586.581 858.382,674.98 858.941,677.142 859.5,662.686 860.059,665.375 860.619,636.724 861.178,636.686 861.737,638.845 862.296,641.408 862.856,646.249 863.415,664.265 863.974,652.058 864.533,699.588 865.093,697.725 865.652,728.051 866.211,746.434 866.77,760.183 867.33,756.135 867.889,785.348 868.448,795.773 869.007,787.027 869.567,767.102 870.126,761.535 870.685,793.549 871.244,771.799 871.804,767.157 872.363,715.286 872.922,716.947 873.481,731.885 874.041,714.45 874.6,727.782 875.159,740.321 875.718,736.443 876.278,737.146 876.837,736.208 877.396,734.93 877.955,716.203 878.515,712.47 879.074,683.167 879.633,686.773 880.192,702.717 880.752,703 881.311,736.347 881.87,766.876 882.429,795.976 882.989,789.87 883.548,797.815 884.107,808.121 884.666,813.127 885.226,793.544 885.785,799.193 886.344,795.515 886.903,824.122 887.463,769.246 888.022,763.824 888.581,759.261 889.14,770.659 889.7,796.507 890.259,774.418 890.818,784.415 891.377,779.185 891.937,739.46 892.496,734.743 893.055,718.18 893.614,733.277 894.174,733.234 894.733,777.532 895.292,754.458 895.851,768.453 896.411,746.55 896.97,729.947 897.529,728.698 898.088,756.811 898.648,754.58 899.207,720.887 899.766,702.241 900.325,750.499 900.885,684.006 901.444,683.527 902.003,681.983 902.562,698.176 903.122,693.951 903.681,677.477 904.24,647.716 904.799,663.036 905.359,666.595 905.918,656.149 906.477,689.375 907.036,689.316 907.596,692.786 908.155,709.941 908.714,711.643 909.273,725.383 909.833,721.851 910.392,731.492 910.951,725.349 911.51,724.077 912.07,754.182 912.629,732.889 913.188,731.702 913.747,742.961 914.307,721.122 914.866,719.878 915.425,715.358 915.984,712.991 916.544,757.625 917.103,737.735 917.662,735.526 918.221,779.132 918.781,760.317 919.34,753.555 919.899,768.397 920.458,730.417 921.018,729.147 921.577,710.482 922.136,708.293 922.695,691.121 923.255,673.903 923.814,673.092 924.373,671.707 924.932,671.204 925.492,689.822 926.051,693.15 926.61,675.958 927.169,644.359 927.729,641.836 928.288,644.035 928.847,619.339 929.406,619.992 929.966,670.029 930.525,638.961 931.084,639.207 931.644,671.456 932.203,684.716 932.762,668.029 933.321,655.347 933.881,673.977 934.44,659.314 934.999,666.269 935.558,655.16 936.118,673.453 936.677,707.574 937.236,702.599 937.795,748.4 938.355,763.004 938.914,759.047 939.473,784.294 940.032,781.773 940.592,779.091 941.151,773.114 941.71,766.143 942.269,793.401 942.829,757.472 943.388,771.774 943.947,797.435 944.506,773.722 945.066,767.299 945.625,746.268 946.184,742.37 946.743,740.052 947.303,753.068 947.862,747.519 948.421,761.833 948.98,743.023 949.54,739.09 950.099,752.259 950.658,731.599 951.217,713.519 951.777,725.113 952.336,673.23 952.895,640.216 953.454,640.062 954.014,624.567 954.573,660.134 955.132,644.402 955.691,668.172 956.251,652.187 956.81,638.677 957.369,636.557 957.928,650.458 958.488,651.258 959.047,636.882 959.606,606.419 960.165,628.631 960.725,648.447 961.284,616.656 961.843,606.283 962.402,614.844 962.962,635.255 963.521,623.363 964.08,626.967 964.639,616.259 965.199,633.01 965.758,635.731 966.317,620.2 966.876,593.408 967.436,582.397 967.995,570.695 968.554,589.388 969.113,627.907 969.673,616.183 970.232,603.418 970.791,575.246 971.35,580.673 971.91,603.1 972.469,610.708 973.028,617.155 973.587,606.18 974.147,627.984 974.706,614.564 975.265,601.22 975.824,636.735 976.384,656.443 976.943,643.571 977.502,632.892 978.061,636.264 978.621,621.091 979.18,622.608 979.739,595.623 980.298,619.394 980.858,624.325 981.417,630.301 981.976,635.476 982.535,653.259 983.095,654.519 983.654,690.557 984.213,707.462 984.772,722.593 985.332,737.898 985.891,721.484 986.45,708.904 987.009,725.226 987.569,736.946 988.128,733.883 988.687,746.135 989.246,744.254 989.806,762.181 990.365,759.404 990.924,773.916 991.483,755.534 992.043,721.124 992.602,702.915 993.161,737.455 993.72,753.647 994.28,764.194 994.839,773.569 995.398,784.95 995.957,748.536 996.517,731.774 997.076,683.387 997.635,681.9 998.194,714.109 998.754,747.438 999.313,729.189 999.872,693.964 1000.43,693.801 1000.99,661.537 1001.55,627.992 1002.11,661.092 1002.67,671.971 1003.23,689.631 1003.79,673.949 1004.35,645.319 1004.91,648.086 1005.46,636.902 1006.02,625.71 1006.58,596.76 1007.14,617.801 1007.7,606.438 1008.26,610.552 1008.82,648.166 1009.38,633.514 1009.94,639.558 1010.5,647.104 1011.06,650.795 1011.62,673.359 1012.18,659.039 1012.73,645.425 1013.29,648.899 1013.85,652.58 1014.41,635.271 1014.97,650.364 1015.53,652.201 1016.09,701.087 1016.65,700.203 1017.21,717.933 1017.77,734.716 1018.33,763.572 1018.89,759.013 1019.45,758.981 1020.01,753.713 1020.56,701.597 1021.12,716.378 1021.68,779.094 1022.24,791.868 1022.8,788.497 1023.36,738.504 1023.92,702.753 1024.48,700.836 1025.04,664.558 1025.6,693.894 1026.16,679.113 1026.72,680.348 1027.28,730.162 1027.83,695.805 1028.39,692.745 1028.95,689.553 1029.51,686.145 1030.07,686.661 1030.63,684.785 1031.19,668.141 1031.75,638.463 1032.31,627.729 1032.87,578.653 1033.43,566.158 1033.99,555.404 1034.55,561.239 1035.1,598.265 1035.66,585.185 1036.22,608.304 1036.78,613.551 1037.34,617.805 1037.9,605.531 1038.46,610.513 1039.02,615.618 1039.58,617.043 1040.14,638.273 1040.7,641.045 1041.26,658.36 1041.82,660.075 1042.38,660.18 1042.93,662.064 1043.49,661.364 1044.05,676.181 1044.61,693.436 1045.17,727.666 1045.73,727.882 1046.29,742.936 1046.85,724.789 1047.41,721.928 1047.97,701.758 1048.53,716.845 1049.09,715.001 1049.65,701.26 1050.2,668.703 1050.76,653.669 1051.32,638.153 1051.88,640.054 1052.44,642.907 1053,645.287 1053.56,646.936 1054.12,698.241 1054.68,648.06 1055.24,650.531 1055.8,649.725 1056.36,698.405 1056.92,677.216 1057.48,678.935 1058.03,677.971 1058.59,667.802 1059.15,680.923 1059.71,660.385 1060.27,695.47 1060.83,675.876 1061.39,710.726 1061.95,692.734 1062.51,674.908 1063.07,674.054 1063.63,672.929 1064.19,722.625 1064.75,706.149 1065.3,691.147 1065.86,689.934 1066.42,672.823 1066.98,656.163 1067.54,653.71 1068.1,660.487 1068.66,660.036 1069.22,648.009 1069.78,651.656 1070.34,672.807 1070.9,642.05 1071.46,674.923 1072.02,690.162 1072.57,754.448 1073.13,750.079 1073.69,760.503 1074.25,771.301 1074.81,751.715 1075.37,699.946 1075.93,703.697 1076.49,686.507 1077.05,686.002 1077.61,653.377 1078.17,638.608 1078.73,670.219 1079.29,705.908 1079.85,719.478 1080.4,701.907 1080.96,652.102 1081.52,666.585 1082.08,650.667 1082.64,652.405 1083.2,656.172 1083.76,641.864 1084.32,640.403 1084.88,596.234 1085.44,600.94 1086,607.753 1086.56,657.91 1087.12,642.679 1087.67,660.968 1088.23,663.6 1088.79,649.032 1089.35,635.683 1089.91,605.373 1090.47,626.741 1091.03,580.042 1091.59,570.388 1092.15,572.752 1092.71,579.584 1093.27,590.016 1093.83,593.333 1094.39,583.392 1094.94,560.044 1095.5,531.371 1096.06,573.431 1096.62,610.458 1097.18,616.571 1097.74,618.357 1098.3,652.376 1098.86,682.019 1099.42,668.062 1099.98,684.199 1100.54,699.657 1101.1,698.599 1101.66,682.064 1102.22,650.579 1102.77,685.429 1103.33,700.791 1103.89,750.709 1104.45,767.018 1105.01,749.085 1105.57,763.852 1106.13,774.995 1106.69,770.096 1107.25,762.894 1107.81,726.319 1108.37,721.546 1108.93,723.419 1109.49,722.874 1110.04,705.468 1110.6,739.452 1111.16,733.309 1111.72,732.01 1112.28,760.403 1112.84,770.708 1113.4,764.108 1113.96,761.285 1114.52,794.177 1115.08,767.501 1115.64,796.298 1116.2,806.515 1116.76,786.891 1117.31,768.449 1117.87,733.67 1118.43,726.691 1118.99,726.276 1119.55,724.098 1120.11,701.821 1120.67,700.605 1121.23,714.567 1121.79,700.669 1122.35,719.584 1122.91,701.237 1123.47,701.184 1124.03,683.468 1124.59,681.268 1125.14,712.168 1125.7,660.241 1126.26,676.021 1126.82,709.488 1127.38,692.374 1127.94,689.742 1128.5,708.188 1129.06,737.727 1129.62,768.921 1130.18,781.377 1130.74,775.904 1131.3,804.545 1131.86,814.276 1132.41,824.181 1132.97,788.289 1133.53,815.002 1134.09,788.789 1134.65,781.731 1135.21,727.89 1135.77,742.772 1136.33,753.082 1136.89,763.956 1137.45,740.509 1138.01,741.561 1138.57,705.026 1139.13,752.792 1139.68,762.657 1140.24,743.236 1140.8,740.887 1141.36,741.308 1141.92,721.461 1142.48,688.274 1143.04,686.301 1143.6,637.247 1144.16,654.556 1144.72,687.24 1145.28,684.818 1145.84,665.387 1146.4,651.262 1146.96,653.468 1147.51,653.366 1148.07,667.85 1148.63,686.441 1149.19,666.926 1149.75,651.226 1150.31,654.104 1150.87,672.966 1151.43,638.637 1151.99,624.627 1152.55,640.61 1153.11,659.611 1153.67,656.016 1154.23,659.831 1154.78,725.256 1155.34,737.347 1155.9,716.555 1156.46,699 1157.02,696.709 1157.58,711.357 1158.14,697.279 1158.7,680.91 1159.26,696.33 1159.82,698.284 1160.38,728.064 1160.94,726.957 1161.5,758.01 1162.05,754.608 1162.61,750.321 1163.17,795.162 1163.73,807.606 1164.29,785.739 1164.85,763.465 1165.41,740.709 1165.97,754.395 1166.53,736.973 1167.09,735.331 1167.65,718.08 1168.21,714.295 1168.77,700.786 1169.33,633.394 1169.88,634.778 1170.44,637.959 1171,655.878 1171.56,641.015 1172.12,672.356 1172.68,722.114 1173.24,718.893 1173.8,718.397 1174.36,734.807 1174.92,747.965 1175.48,742.257 1176.04,690.589 1176.6,673.391 1177.15,656.987 1177.71,659.831 1178.27,660.216 1178.83,707.429 1179.39,707.166 1179.95,675.093 1180.51,660.356 1181.07,659.241 1181.63,645.33 1182.19,697.03 1182.75,695.33 1183.31,695.405 1183.87,709.676 1184.43,723.543 1184.98,687.912 1185.54,703.436 1186.1,704.046 1186.66,702.845 1187.22,735.057 1187.78,688.077 1188.34,690.938 1188.9,659.353 1189.46,662.381 1190.02,631.331 1190.58,633.458 1191.14,605.328 1191.7,611.075 1192.25,612.315 1192.81,632.636 1193.37,602.897 1193.93,607.604 1194.49,595.227 1195.05,634.204 1195.61,622.909 1196.17,644.718 1196.73,660.252 1197.29,695.529 1197.85,696.074 1198.41,679.371 1198.97,681.049 1199.52,666.762 1200.08,649.256 1200.64,668.879 1201.2,653.609 1201.76,668.609 1202.32,653.637 1202.88,704.068 1203.44,749.505 1204,728.604 1204.56,758.474 1205.12,718.359 1205.68,687.02 1206.24,685.64 1206.8,682.13 1207.35,649.427 1207.91,664.788 1208.47,663.634 1209.03,632.806 1209.59,622.052 1210.15,598.736 1210.71,619.347 1211.27,604.471 1211.83,626.722 1212.39,629.581 1212.95,651.548 1213.51,686.124 1214.07,668.576 1214.62,667.794 1215.18,666.554 1215.74,668.582 1216.3,669.12 1216.86,656.3 1217.42,643.213 1217.98,656.749 1218.54,689.262 1219.1,718.618 1219.66,717.041 1220.22,716.843 1220.78,731.983 1221.34,716.452 1221.89,698.767 1222.45,654.407 1223.01,687.491 1223.57,688.51 1224.13,687.786 1224.69,706.72 1225.25,686.236 1225.81,702.561 1226.37,702.997 1226.93,720.04 1227.49,703.556 1228.05,717.574 1228.61,699.583 1229.17,683.275 1229.72,665.439 1230.28,666.45 1230.84,668.684 1231.4,635.685 1231.96,621.763 1232.52,624.019 1233.08,625.293 1233.64,641.831 1234.2,630.242 1234.76,599.559 1235.32,601.123 1235.88,606.827 1236.44,611.144 1236.99,596.907 1237.55,598.265 1238.11,584.272 1238.67,604.914 1239.23,624.171 1239.79,609.343 1240.35,613.704 1240.91,603.991 1241.47,671.861 1242.03,687.876 1242.59,636.87 1243.15,675.582 1243.71,676.565 1244.26,727.723 1244.82,774.94 1245.38,818.263 1245.94,828.221 1246.5,806.488 1247.06,785.229 1247.62,765.666 1248.18,744.345 1248.74,724.317 1249.3,706.604 1249.86,738.325 1250.42,736.287 1250.98,730.601 1251.54,695.526 1252.09,723.708 1252.65,722.388 1253.21,738.568 1253.77,720.144 1254.33,717.332 1254.89,681.857 1255.45,682.106 1256.01,652.076 1256.57,685.756 1257.13,749.799 1257.69,745.018 1258.25,756.533 1258.81,720.702 1259.36,763.442 1259.92,774.381 1260.48,766.094 1261.04,796.174 1261.6,776.914 1262.16,741.05 1262.72,734.198 1263.28,699.473 1263.84,654.294 1264.4,671.306 1264.96,642.178 1265.52,677.261 1266.08,679.263 1266.63,678.032 1267.19,675.455 1267.75,672.393 1268.31,689.45 1268.87,674.022 1269.43,675.337 1269.99,677.787 1270.55,613.062 1271.11,600.263 1271.67,569.756 1272.23,576.441 1272.79,581.671 1273.35,589.344 1273.91,612.232 1274.46,583.982 1275.02,590.792 1275.58,613.907 1276.14,584.885 1276.7,573.429 1277.26,593.424 1277.82,566.603 1278.38,572.415 1278.94,580.087 1279.5,586.783 1280.06,607.792 1280.62,609.266 1281.18,646.25 1281.73,674.064 1282.29,691.254 1282.85,690.064 1283.41,691.066 1283.97,687.87 1284.53,686.253 1285.09,684.19 1285.65,666.749 1286.21,651.4 1286.77,637.42 1287.33,622.86 1287.89,626.204 1288.45,644.114 1289,631.551 1289.56,615.641 1290.12,620.119 1290.68,649.529 1291.24,665.935 1291.8,699.437 1292.36,698.761 1292.92,696.877 1293.48,677.024 1294.04,695.987 1294.6,727.451 1295.16,727.498 1295.72,743.106 1296.28,723.981 1296.83,705.829 1297.39,688.128 1297.95,688.721 1298.51,674.871 1299.07,657.166 1299.63,609.633 1300.19,615.722 1300.75,604.338 1301.31,625.949 1301.87,647.14 1302.43,633.895 1302.99,641.055 1303.55,624.154 1304.1,644.751 1304.66,646.539 1305.22,650.838 1305.78,701.627 1306.34,685.083 1306.9,671.205 1307.46,653.629 1308.02,639.656 1308.58,640.004 1309.14,643.381 1309.7,643.385 1310.26,613.187 1310.82,619.538 1311.38,654.702 1311.93,672.084 1312.49,658.069 1313.05,629.793 1313.61,650.257 1314.17,668.623 1314.73,668.138 1315.29,668.109 1315.85,639.641 1316.41,642.772 1316.97,612.036 1317.53,627.547 1318.09,597.132 1318.65,567.137 1319.2,575.159 1319.76,562.09 1320.32,581.868 1320.88,570.618 1321.44,575.247 1322,579.502 1322.56,601.828 1323.12,620.967 1323.68,626.17 1324.24,615.067 1324.8,670.013 1325.36,702.885 1325.92,683.973 1326.47,651.329 1327.03,688.48 1327.59,720.395 1328.15,686.087 1328.71,722.96 1329.27,720.95 1329.83,719.749 1330.39,718.555 1330.95,717.997 1331.51,714.494 1332.07,711.762 1332.63,712.81 1333.19,724.855 1333.75,707.255 1334.3,723.481 1334.86,689.927 1335.42,673.294 1335.98,672.835 1336.54,676.167 1337.1,694.998 1337.66,708.292 1338.22,703.526 1338.78,688.261 1339.34,736.959 1339.9,748.039 1340.46,776.341 1341.02,788.629 1341.57,769.373 1342.13,763.495 1342.69,793.544 1343.25,805.352 1343.81,801.288 1344.37,809.73 1344.93,805.306 1345.49,798.561 1346.05,776.982 1346.61,754.769 1347.17,762.987 1347.73,724.33 1348.29,703.777 1348.84,684.461 1349.4,667.858 1349.96,679.633 1350.52,747.212 1351.08,712.335 1351.64,726.246 1352.2,723.249 1352.76,741.064 1353.32,736.635 1353.88,733.615 1354.44,716.035 1355,728.107 1355.56,727.891 1356.12,726.869 1356.67,755.435 1357.23,752.406 1357.79,781.532 1358.35,773.117 1358.91,782.735 1359.47,781.603 1360.03,760.463 1360.59,756.427 1361.15,770.585 1361.71,747.072 1362.27,760.699 1362.83,772.268 1363.39,768.444 1363.94,744.719 1364.5,774.35 1365.06,753.17 1365.62,733.571 1366.18,698.531 1366.74,680.163 1367.3,647.078 1367.86,634.772 1368.42,653.457 1368.98,689.424 1369.54,673.98 1370.1,694.864 1370.66,724.584 1371.21,722.218 1371.77,735.534 1372.33,764.446 1372.89,725.406 1373.45,733.773 1374.01,695.433 1374.57,712.925 1375.13,709.065 1375.69,690.738 1376.25,677.59 1376.81,690.81 1377.37,669.952 1377.93,675.175 1378.49,674.086 1379.04,671.948 1379.6,686.994 1380.16,681.81 1380.72,678.933 1381.28,711.973 1381.84,712.525 1382.4,762.01 1382.96,757.043 1383.52,769.967 1384.08,733.145 1384.64,728.549 1385.2,674.865 1385.76,659.045 1386.31,680.138 1386.87,664.377 1387.43,633.198 1387.99,636.03 1388.55,623.694 1389.11,575.687 1389.67,551.91 1390.23,559.037 1390.79,584.66 1391.35,593.092 1391.91,647.705 1392.47,648.992 1393.03,650.418 1393.58,619.762 1394.14,623.916 1394.7,611.215 1395.26,598.062 1395.82,569.386 1396.38,578.424 1396.94,603.843 1397.5,624.093 1398.06,625.044 1398.62,610.269 1399.18,613.796 1399.74,648.818 1400.3,662.783 1400.86,679.662 1401.41,692.173 1401.97,692.562 1402.53,711.628 1403.09,726.702 1403.65,722.296 1404.21,693.094 1404.77,689.35 1405.33,690.811 1405.89,706.31 1406.45,703.054 1407.01,702.299 1407.57,717.348 1408.13,702.493 1408.68,686.022 1409.24,671.585 1409.8,704.638 1410.36,700.91 1410.92,669.163 1411.48,672.226 1412.04,686.055 1412.6,701.667 1413.16,714.563 1413.72,709.939 1414.28,675.12 1414.84,679.935 1415.4,694.822 1415.95,691.84 1416.51,660.982 1417.07,662.148 1417.63,665.732 1418.19,667.228 1418.75,717.4 1419.31,683.006 1419.87,648.789 1420.43,653.669 1420.99,653.253 1421.55,623.415 1422.11,641.388 1422.67,662.842 1423.23,650.076 1423.78,686.612 1424.34,718.313 1424.9,734.971 1425.46,748.019 1426.02,766.522 1426.58,779.113 1427.14,808.829 1427.7,770.718 1428.26,782.937 1428.82,796.118 1429.38,788.653 1429.94,784.876 1430.5,764.336 1431.05,724.905 1431.61,725.872 1432.17,737.919 1432.73,768.738 1433.29,796.305 1433.85,773.673 1434.41,752.868 1434.97,751.798 1435.53,748.585 1436.09,746.19 1436.65,727.609 1437.21,643.702 1437.77,647.161 1438.33,668.516 1438.88,702.722 1439.44,683.03 1440,666.576 1440.56,684.321 1441.12,667.692 1441.68,699.874 1442.24,701.497 1442.8,699.953 1443.36,684.746 1443.92,698.059 1444.48,666.189 1445.04,647.575 1445.6,729.038 1446.15,707.907 1446.71,708.775 1447.27,727.855 1447.83,725.506 1448.39,706.466 1448.95,672.661 1449.51,707.95 1450.07,707.326 1450.63,726.097 1451.19,740.94 1451.75,739.276 1452.31,704.072 1452.87,655.471 1453.42,620.633 1453.98,624.612 1454.54,610.492 1455.1,628.988 1455.66,664.309 1456.22,630.067 1456.78,631.987 1457.34,600.797 1457.9,605.862 1458.46,626.223 1459.02,611.368 1459.58,584.402 1460.14,604.745 1460.7,658.112 1461.25,660.844 1461.81,664.728 1462.37,667.8 1462.93,702.239 1463.49,686.014 1464.05,687.586 1464.61,684.143 1465.17,719.577 1465.73,733.515 1466.29,700.476 1466.85,701.009 1467.41,718.529 1467.97,715.967 1468.52,685.385 1469.08,669.084 1469.64,701.148 1470.2,712.648 1470.76,744.672 1471.32,722.283 1471.88,704.396 1472.44,706.678 1473,659.902 1473.56,662.376 1474.12,680.315 1474.68,696.704 1475.24,695.424 1475.79,645.881 1476.35,614.837 1476.91,651.251 1477.47,667.346 1478.03,714.668 1478.59,667.844 1479.15,683.79 1479.71,701.701 1480.27,669.18 1480.83,668.642 1481.39,657.262 1481.95,642.188 1482.51,646.186 1483.07,631.395 1483.62,650.238 1484.18,651.468 1484.74,622.254 1485.3,642.045 1485.86,644.377 1486.42,614.556 1486.98,600.417 1487.54,574.669 1488.1,582.454 1488.66,604.071 1489.22,609.943 1489.78,580.587 1490.34,588.034 1490.89,591.265 1491.45,597.271 1492.01,569.661 1492.57,576.286 1493.13,582.253 1493.69,588.369 1494.25,590.619 1494.81,613.896 1495.37,633.555 1495.93,636.958 1496.49,652.948 1497.05,637.609 1497.61,625.255 1498.16,678.151 1498.72,681.021 1499.28,648.823 1499.84,682.247 1500.4,665.179 1500.96,671.422 1501.52,671.897 1502.08,635.665 1502.64,670.56 1503.2,682.707 1503.76,698.676 1504.32,715.555 1504.88,714.113 1505.44,697.193 1505.99,700.043 1506.55,699.918 1507.11,731.802 1507.67,732.89 1508.23,779.313 1508.79,774.358 1509.35,782.973 1509.91,780.802 1510.47,746.808 1511.03,742.273 1511.59,688.772 1512.15,703.159 1512.71,691.04 1513.26,705.878 1513.82,708.559 1514.38,708.623 1514.94,710.856 1515.5,711.699 1516.06,705.652 1516.62,688.068 1517.18,685.025 1517.74,683.8 1518.3,667.455 1518.86,668.202 1519.42,687.372 1519.98,673.569 1520.53,689.93 1521.09,754.461 1521.65,749.297 1522.21,746.939 1522.77,740.497 1523.33,738.074 1523.89,718.389 1524.45,715.472 1525.01,683.829 1525.57,700.542 1526.13,684.317 1526.69,666.248 1527.25,686.92 1527.81,705.845 1528.36,706.069 1528.92,671.905 1529.48,669.576 1530.04,669.861 1530.6,704.767 1531.16,690.525 1531.72,686.404 1532.28,669.297 1532.84,669.461 1533.4,637.289 1533.96,624.495 1534.52,643.643 1535.08,644.528 1535.63,692.229 1536.19,740.771 1536.75,735.301 1537.31,731.784 1537.87,735.849 1538.43,721.601 1538.99,720.964 1539.55,718.73 1540.11,718.566 1540.67,683.159 1541.23,669.871 1541.79,657.384 1542.35,656.795 1542.9,642.754 1543.46,644.346 1544.02,627.55 1544.58,676.69 1545.14,693.111 1545.7,658.858 1546.26,677.19 1546.82,675.656 1547.38,709.355 1547.94,675.303 1548.5,676.234 1549.06,660.339 1549.62,673.668 1550.18,691.492 1550.73,690.723 1551.29,678.615 1551.85,663.399 1552.41,644.503 1552.97,658.576 1553.53,657.807 1554.09,645.162 1554.65,678.077 1555.21,691.472 1555.77,692.203 1556.33,660.565 1556.89,611.318 1557.45,612.988 1558,617.546 1558.56,670.612 1559.12,670.396 1559.68,686.49 1560.24,686.178 1560.8,750.628 1561.36,765.5 1561.92,727.919 1562.48,757.715 1563.04,735.776 1563.6,749.625 1564.16,763.509 1564.72,745.514 1565.28,772.988 1565.83,769.791 1566.39,766.506 1566.95,780.041 1567.51,777.653 1568.07,769.067 1568.63,748.856 1569.19,727.789 1569.75,690.611 1570.31,690.756 1570.87,692.814 1571.43,692.061 1571.99,660.778 1572.55,611.853 1573.1,649.134 1573.66,635.033 1574.22,641.687 1574.78,644.794 1575.34,648.631 1575.9,637.783 1576.46,655.764 1577.02,671.113 1577.58,639.231 1578.14,661.372 1578.7,682.469 1579.26,696.499 1579.82,712.455 1580.37,707.647 1580.93,705.997 1581.49,693.487 1582.05,691.952 1582.61,675.621 1583.17,691.445 1583.73,721.953 1584.29,735.94 1584.85,704.062 1585.41,716.877 1585.97,714.143 1586.53,730.768 1587.09,728.502 1587.65,776.402 1588.2,739.264 1588.76,736.4 1589.32,739.295 1589.88,718.793 1590.44,699.206 1591,697.261 1591.56,681.295 1592.12,695.366 1592.68,660.931 1593.24,646.031 1593.8,664.255 1594.36,648.696 1594.92,634.83 1595.47,635.606 1596.03,639.191 1596.59,628.821 1597.15,634.005 1597.71,620.788 1598.27,623.008 1598.83,645.8 1599.39,661.456 1599.95,647.024 1600.51,632.694 1601.07,654.216 1601.63,638.649 1602.19,708.367 1602.74,657.043 1603.3,655.391 1603.86,641.305 1604.42,656.295 1604.98,655.775 1605.54,672.596 1606.1,654.983 1606.66,621.538 1607.22,611.543 1607.78,630.426 1608.34,632.387 1608.9,647.952 1609.46,665.91 1610.02,647.047 1610.57,693.988 1611.13,691.566 1611.69,671.949 1612.25,689.147 1612.81,687.032 1613.37,685.023 1613.93,670.033 1614.49,689.912 1615.05,705.165 1615.61,690.109 1616.17,706.457 1616.73,705.183 1617.29,674.455 1617.84,641.818 1618.4,646.081 1618.96,651.771 1619.52,654.536 1620.08,689.004 1620.64,659.585 1621.2,676.943 1621.76,663.467 1622.32,695.326 1622.88,678.424 1623.44,709.817 1624,656.577 1624.56,660.465 1625.11,691.92 1625.67,675.829 1626.23,640.073 1626.79,610.694 1627.35,582.798 1627.91,585.061 1628.47,624.603 1629.03,673.789 1629.59,694.194 1630.15,680.849 1630.71,683.852 1631.27,668.515 1631.83,667.897 1632.39,654.126 1632.94,636.678 1633.5,656.016 1634.06,656.936 1634.62,675.089 1635.18,694.91 1635.74,710.846 1636.3,709.255 1636.86,691.618 1637.42,677.835 1637.98,631.728 1638.54,635.333 1639.1,639.981 1639.66,626.468 1640.21,598.869 1640.77,620.579 1641.33,625.949 1641.89,632.012 1642.45,616.573 1643.01,605.066 1643.57,624.196 1644.13,595.775 1644.69,613.202 1645.25,618.956 1645.81,602.737 1646.37,656.274 1646.93,708.511 1647.48,689.346 1648.04,656.362 1648.6,657.788 1649.16,657.227 1649.72,675.554 1650.28,660.366 1650.84,695.117 1651.4,714.183 1651.96,728.306 1652.52,743.299 1653.08,773.532 1653.64,801.505 1654.2,807.582 1654.76,820.918 1655.31,815.139 1655.87,776.144 1656.43,755.777 1656.99,735.439 1657.55,702.237 1658.11,700.251 1658.67,713.098 1659.23,731.113 1659.79,758.856 1660.35,770.439 1660.91,782.422 1661.47,762.422 1662.03,788.228 1662.58,798.816 1663.14,791.664 1663.7,806.241 1664.26,801.284 1664.82,780.582 1665.38,709.458 1665.94,705.858 1666.5,706.075 1667.06,690.182 1667.62,704.999 1668.18,703.212 1668.74,684.238 1669.3,672.138 1669.85,692.39 1670.41,694.006 1670.97,694.012 1671.53,708.256 1672.09,726.884 1672.65,645.829 1673.21,694.053 1673.77,676.046 1674.33,660.858 1674.89,662.856 1675.45,633.605 1676.01,618.005 1676.57,671.116 1677.13,672.354 1677.68,672.624 1678.24,688.396 1678.8,706.59 1679.36,703.79 1679.92,702.943 1680.48,719.893 1681.04,718.227 1681.6,681.998 1682.16,665.848 1682.72,651.413 1683.28,653.728 1683.84,654.156 1684.4,673.824 1684.95,676.438 1685.51,660.25 1686.07,695.293 1686.63,712.098 1687.19,696.118 1687.75,694.338 1688.31,678.129 1688.87,681.816 1689.43,665.707 1689.99,667.597 1690.55,672.668 1691.11,688.075 1691.67,699.272 1692.23,728.764 1692.78,716.337 1693.34,712.553 1693.9,745.861 1694.46,744.204 1695.02,740.916 1695.58,736.663 1696.14,736.073 1696.7,738.102 1697.26,704.861 1697.82,699.136 1698.38,683.125 1698.94,683.354 1699.5,682.896 1700.05,679.902 1700.61,663.843 1701.17,681.592 1701.73,668.615 1702.29,667.626 1702.85,666.272 1703.41,653.354 1703.97,622.335 1704.53,610.621 1705.09,628.987 1705.65,634.881 1706.21,638.152 1706.77,640.28 1707.32,608.681 1707.88,643.19 1708.44,640.882 1709,641.917 1709.56,659.274 1710.12,646.076 1710.68,648.201 1711.24,698.519 1711.8,713.553 1712.36,716.144 1712.92,681.432 1713.48,701.346 1714.04,714.436 1714.6,713.878 1715.15,679.65 1715.71,696.104 1716.27,698.736 1716.83,683.943 1717.39,680.942 1717.95,650.506 1718.51,650.184 1719.07,670.52 1719.63,670.039 1720.19,650.064 1720.75,649.605 1721.31,620.143 1721.87,639.459 1722.42,641.283 1722.98,627.48 1723.54,614.317 1724.1,584.364 1724.66,594.026 1725.22,612.234 1725.78,614.024 1726.34,616.991 1726.9,601.688 1727.46,607.705 1728.02,630.64 1728.58,647.352 1729.14,632.944 1729.69,600.464 1730.25,634.793 1730.81,655.214 1731.37,703.9 1731.93,688.958 1732.49,708.211 1733.05,693.605 1733.61,693.428 1734.17,674.531 1734.73,673.333 1735.29,657.511 1735.85,627.867 1736.41,619.468 1736.97,621.843 1737.52,610.73 1738.08,614.887 1738.64,618.303 1739.2,654.511 1739.76,670.883 1740.32,692.819 1740.88,628.767 1741.44,615.532 1742,635.066 1742.56,637.434 1743.12,674.887 1743.68,670.706 1744.24,670.325 1744.79,688.114 1745.35,689.736 1745.91,673.688 1746.47,688.614 1747.03,693.383 1747.59,708.831 1748.15,710.596 1748.71,721.738 1749.27,719.741 1749.83,699.439 1750.39,683.51 1750.95,678.587 1751.51,663.372 1752.06,693.501 1752.62,691.106 1753.18,640.643 1753.74,643.008 1754.3,676.224 1754.86,656.59 1755.42,725.837 1755.98,784.863 1756.54,779.864 1757.1,773.9 1757.66,752.051 1758.22,752.319 1758.78,748.146 1759.34,727.409 1759.89,740.329 1760.45,734.974 1761.01,714.876 1761.57,714.317 1762.13,710.531 1762.69,709.708 1763.25,723.595 1763.81,719.073 1764.37,714.21 1764.93,679.457 1765.49,684.159 1766.05,684.915 1766.61,702.689 1767.16,716.722 1767.72,700.819 1768.28,702.77 1768.84,718.526 1769.4,747.792 1769.96,763.301 1770.52,759.526 1771.08,785.109 1771.64,763.421 1772.2,774.204 1772.76,752.613 1773.32,779.946 1773.88,741.482 1774.43,737.922 1774.99,716.248 1775.55,715.268 1776.11,711.442 1776.67,722.333 1777.23,702.104 1777.79,733.282 1778.35,747.82 1778.91,714.779 1779.47,680.384 1780.03,648.361 1780.59,652.258 1781.15,685.343 1781.71,681.138 1782.26,661.767 1782.82,695.762 1783.38,726.341 1783.94,723.843 1784.5,707.071 1785.06,723.777 1785.62,701.729 1786.18,719.926 1786.74,733.983 1787.3,781.596 1787.86,807.095 1788.42,803.455 1788.98,856.398 1789.53,831.065 1790.09,792.833 1790.65,805.42 1791.21,810.191 1791.77,769.78 1792.33,748.568 1792.89,713.255 1793.45,712.286 1794.01,710.991 1794.57,708.433 1795.13,708.375 1795.69,719.969 1796.25,685.869 1796.8,669.174 1797.36,686.296 1797.92,688.102 1798.48,656.07 1799.04,690.053 1799.6,689.623 1800.16,673.949 1800.72,657.922 1801.28,627.789 1801.84,645.87 1802.4,648.787 1802.96,650.302 1803.52,603.971 1804.08,624.434 1804.63,629.735 1805.19,648.4 1805.75,680.756 1806.31,661.456 1806.87,662.323 1807.43,648.799 1807.99,653.461 1808.55,683.395 1809.11,652.916 1809.67,640.814 1810.23,629.173 1810.79,664.081 1811.35,664.89 1811.9,665.301 1812.46,680.932 1813.02,679.075 1813.58,694.973 1814.14,696.322 1814.7,697.297 1815.26,697.671 1815.82,730.431 1816.38,730.251 1816.94,726.809 1817.5,689.421 1818.06,674.561 1818.62,646.071 1819.18,632.618 1819.73,668.01 1820.29,640.441 1820.85,656.364 1821.41,693.078 1821.97,729.004 1822.53,697.334 1823.09,680.027 1823.65,682.77 1824.21,684.213 1824.77,685.836 1825.33,688.068 1825.89,721.614 1826.45,701.453 1827,665.947 1827.56,634.79 1828.12,668.09 1828.68,682.563 1829.24,665.477 1829.8,644.016 1830.36,660.488 1830.92,711.967 1831.48,677.752 1832.04,662.89 1832.6,664.376 1833.16,679.071 1833.72,680.825 1834.27,697.528 1834.83,697.297 1835.39,695.664 1835.95,646.296 1836.51,647.78 1837.07,633.271 1837.63,667.672 1838.19,650.389 \"/>\n<path clip-path=\"url(#clip393)\" d=\"M720.247 691.523 L720.806 691.523 L721.365 691.523 L721.924 691.523 L722.484 691.523 L723.043 691.523 L723.602 691.523 L724.161 691.523 L724.721 691.523 L725.28 691.523 L725.839 691.523 L726.398 691.523 L726.958 691.523 L727.517 691.523 L728.076 691.523 L728.635 691.523 L729.195 691.523 L729.754 691.523 L730.313 691.523 L730.872 691.523 L731.432 691.523 L731.991 691.523 L732.55 691.523 L733.109 691.523 L733.669 691.523 L734.228 691.523 L734.787 691.523 L735.346 691.523 L735.906 691.523 L736.465 691.523 L737.024 691.523 L737.583 691.523 L738.143 691.523 L738.702 691.523 L739.261 691.523 L739.82 691.523 L740.38 691.523 L740.939 691.523 L741.498 691.523 L742.057 691.523 L742.617 691.523 L743.176 691.523 L743.735 691.523 L744.294 691.523 L744.854 691.523 L745.413 691.523 L745.972 691.523 L746.531 691.523 L747.091 691.523 L747.65 691.523 L748.209 691.523 L748.768 691.523 L749.328 691.523 L749.887 691.523 L750.446 691.523 L751.005 691.523 L751.565 691.523 L752.124 691.523 L752.683 691.523 L753.242 691.523 L753.802 691.523 L754.361 691.523 L754.92 691.523 L755.479 691.523 L756.039 691.523 L756.598 691.523 L757.157 691.523 L757.716 691.523 L758.276 691.523 L758.835 691.523 L759.394 691.523 L759.953 691.523 L760.513 691.523 L761.072 691.523 L761.631 691.523 L762.19 691.523 L762.75 691.523 L763.309 691.523 L763.868 691.523 L764.427 691.523 L764.987 691.523 L765.546 691.523 L766.105 691.523 L766.664 691.523 L767.224 691.523 L767.783 691.523 L768.342 691.523 L768.901 691.523 L769.461 691.523 L770.02 691.523 L770.579 691.523 L771.138 691.523 L771.698 691.523 L772.257 691.523 L772.816 691.523 L773.375 691.523 L773.935 691.523 L774.494 691.523 L775.053 691.523 L775.612 691.523 L776.172 691.523 L776.731 691.523 L777.29 691.523 L777.849 691.523 L778.409 691.523 L778.968 691.523 L779.527 691.523 L780.086 691.523 L780.646 691.523 L781.205 691.523 L781.764 691.523 L782.323 691.523 L782.883 691.523 L783.442 691.523 L784.001 691.523 L784.56 691.523 L785.12 691.523 L785.679 691.523 L786.238 691.523 L786.797 691.523 L787.357 691.523 L787.916 691.523 L788.475 691.523 L789.034 691.523 L789.594 691.523 L790.153 691.523 L790.712 691.523 L791.271 691.523 L791.831 691.523 L792.39 691.523 L792.949 691.523 L793.508 691.523 L794.068 691.523 L794.627 691.523 L795.186 691.523 L795.745 691.523 L796.305 691.523 L796.864 691.523 L797.423 691.523 L797.982 691.523 L798.542 691.523 L799.101 691.523 L799.66 691.523 L800.219 691.523 L800.779 691.523 L801.338 691.523 L801.897 691.523 L802.456 691.523 L803.016 691.523 L803.575 691.523 L804.134 691.523 L804.693 691.523 L805.253 691.523 L805.812 691.523 L806.371 691.523 L806.931 691.523 L807.49 691.523 L808.049 691.523 L808.608 691.523 L809.168 691.523 L809.727 691.523 L810.286 691.523 L810.845 691.523 L811.405 691.523 L811.964 691.523 L812.523 691.523 L813.082 691.523 L813.642 691.523 L814.201 691.523 L814.76 691.523 L815.319 691.523 L815.879 691.523 L816.438 691.523 L816.997 691.523 L817.556 691.523 L818.116 691.523 L818.675 691.523 L819.234 691.523 L819.793 691.523 L820.353 691.523 L820.912 691.523 L821.471 691.523 L822.03 691.523 L822.59 691.523 L823.149 691.523 L823.708 691.523 L824.267 691.523 L824.827 691.523 L825.386 691.523 L825.945 691.523 L826.504 691.523 L827.064 691.523 L827.623 691.523 L828.182 691.523 L828.741 691.523 L829.301 691.523 L829.86 691.523 L830.419 691.523 L830.978 691.523 L831.538 691.523 L832.097 691.523 L832.656 691.523 L833.215 691.523 L833.775 691.523 L834.334 691.523 L834.893 691.523 L835.452 691.523 L836.012 691.523 L836.571 691.523 L837.13 691.523 L837.689 691.523 L838.249 691.523 L838.808 691.523 L839.367 691.523 L839.926 691.523 L840.486 691.523 L841.045 691.523 L841.604 691.523 L842.163 691.523 L842.723 691.523 L843.282 691.523 L843.841 691.523 L844.4 691.523 L844.96 691.523 L845.519 691.523 L846.078 691.523 L846.637 691.523 L847.197 691.523 L847.756 691.523 L848.315 691.523 L848.874 691.523 L849.434 691.523 L849.993 691.523 L850.552 691.523 L851.111 691.523 L851.671 691.523 L852.23 691.523 L852.789 691.523 L853.348 691.523 L853.908 691.523 L854.467 691.523 L855.026 691.523 L855.585 691.523 L856.145 691.523 L856.704 691.523 L857.263 691.523 L857.822 691.523 L858.382 691.523 L858.941 691.523 L859.5 691.523 L860.059 691.523 L860.619 691.523 L861.178 691.523 L861.737 691.523 L862.296 691.523 L862.856 691.523 L863.415 691.523 L863.974 691.523 L864.533 691.523 L865.093 691.523 L865.652 691.523 L866.211 691.523 L866.77 691.523 L867.33 691.523 L867.889 691.523 L868.448 691.523 L869.007 691.523 L869.567 691.523 L870.126 691.523 L870.685 691.523 L871.244 691.523 L871.804 691.523 L872.363 691.523 L872.922 691.523 L873.481 691.523 L874.041 691.523 L874.6 691.523 L875.159 691.523 L875.718 691.523 L876.278 691.523 L876.837 691.523 L877.396 691.523 L877.955 691.523 L878.515 691.523 L879.074 691.523 L879.633 691.523 L880.192 691.523 L880.752 691.523 L881.311 691.523 L881.87 691.523 L882.429 691.523 L882.989 691.523 L883.548 691.523 L884.107 691.523 L884.666 691.523 L885.226 691.523 L885.785 691.523 L886.344 691.523 L886.903 691.523 L887.463 691.523 L888.022 691.523 L888.581 691.523 L889.14 691.523 L889.7 691.523 L890.259 691.523 L890.818 691.523 L891.377 691.523 L891.937 691.523 L892.496 691.523 L893.055 691.523 L893.614 691.523 L894.174 691.523 L894.733 691.523 L895.292 691.523 L895.851 691.523 L896.411 691.523 L896.97 691.523 L897.529 691.523 L898.088 691.523 L898.648 691.523 L899.207 691.523 L899.766 691.523 L900.325 691.523 L900.885 691.523 L901.444 691.523 L902.003 691.523 L902.562 691.523 L903.122 691.523 L903.681 691.523 L904.24 691.523 L904.799 691.523 L905.359 691.523 L905.918 691.523 L906.477 691.523 L907.036 691.523 L907.596 691.523 L908.155 691.523 L908.714 691.523 L909.273 691.523 L909.833 691.523 L910.392 691.523 L910.951 691.523 L911.51 691.523 L912.07 691.523 L912.629 691.523 L913.188 691.523 L913.747 691.523 L914.307 691.523 L914.866 691.523 L915.425 691.523 L915.984 691.523 L916.544 691.523 L917.103 691.523 L917.662 691.523 L918.221 691.523 L918.781 691.523 L919.34 691.523 L919.899 691.523 L920.458 691.523 L921.018 691.523 L921.577 691.523 L922.136 691.523 L922.695 691.523 L923.255 691.523 L923.814 691.523 L924.373 691.523 L924.932 691.523 L925.492 691.523 L926.051 691.523 L926.61 691.523 L927.169 691.523 L927.729 691.523 L928.288 691.523 L928.847 691.523 L929.406 691.523 L929.966 691.523 L930.525 691.523 L931.084 691.523 L931.644 691.523 L932.203 691.523 L932.762 691.523 L933.321 691.523 L933.881 691.523 L934.44 691.523 L934.999 691.523 L935.558 691.523 L936.118 691.523 L936.677 691.523 L937.236 691.523 L937.795 691.523 L938.355 691.523 L938.914 691.523 L939.473 691.523 L940.032 691.523 L940.592 691.523 L941.151 691.523 L941.71 691.523 L942.269 691.523 L942.829 691.523 L943.388 691.523 L943.947 691.523 L944.506 691.523 L945.066 691.523 L945.625 691.523 L946.184 691.523 L946.743 691.523 L947.303 691.523 L947.862 691.523 L948.421 691.523 L948.98 691.523 L949.54 691.523 L950.099 691.523 L950.658 691.523 L951.217 691.523 L951.777 691.523 L952.336 691.523 L952.895 691.523 L953.454 691.523 L954.014 691.523 L954.573 691.523 L955.132 691.523 L955.691 691.523 L956.251 691.523 L956.81 691.523 L957.369 691.523 L957.928 691.523 L958.488 691.523 L959.047 691.523 L959.606 691.523 L960.165 691.523 L960.725 691.523 L961.284 691.523 L961.843 691.523 L962.402 691.523 L962.962 691.523 L963.521 691.523 L964.08 691.523 L964.639 691.523 L965.199 691.523 L965.758 691.523 L966.317 691.523 L966.876 691.523 L967.436 691.523 L967.995 691.523 L968.554 691.523 L969.113 691.523 L969.673 691.523 L970.232 691.523 L970.791 691.523 L971.35 691.523 L971.91 691.523 L972.469 691.523 L973.028 691.523 L973.587 691.523 L974.147 691.523 L974.706 691.523 L975.265 691.523 L975.824 691.523 L976.384 691.523 L976.943 691.523 L977.502 691.523 L978.061 691.523 L978.621 691.523 L979.18 691.523 L979.739 691.523 L980.298 691.523 L980.858 691.523 L981.417 691.523 L981.976 691.523 L982.535 691.523 L983.095 691.523 L983.654 691.523 L984.213 691.523 L984.772 691.523 L985.332 691.523 L985.891 691.523 L986.45 691.523 L987.009 691.523 L987.569 691.523 L988.128 691.523 L988.687 691.523 L989.246 691.523 L989.806 691.523 L990.365 691.523 L990.924 691.523 L991.483 691.523 L992.043 691.523 L992.602 691.523 L993.161 691.523 L993.72 691.523 L994.28 691.523 L994.839 691.523 L995.398 691.523 L995.957 691.523 L996.517 691.523 L997.076 691.523 L997.635 691.523 L998.194 691.523 L998.754 691.523 L999.313 691.523 L999.872 691.523 L1000.43 691.523 L1000.99 691.523 L1001.55 691.523 L1002.11 691.523 L1002.67 691.523 L1003.23 691.523 L1003.79 691.523 L1004.35 691.523 L1004.91 691.523 L1005.46 691.523 L1006.02 691.523 L1006.58 691.523 L1007.14 691.523 L1007.7 691.523 L1008.26 691.523 L1008.82 691.523 L1009.38 691.523 L1009.94 691.523 L1010.5 691.523 L1011.06 691.523 L1011.62 691.523 L1012.18 691.523 L1012.73 691.523 L1013.29 691.523 L1013.85 691.523 L1014.41 691.523 L1014.97 691.523 L1015.53 691.523 L1016.09 691.523 L1016.65 691.523 L1017.21 691.523 L1017.77 691.523 L1018.33 691.523 L1018.89 691.523 L1019.45 691.523 L1020.01 691.523 L1020.56 691.523 L1021.12 691.523 L1021.68 691.523 L1022.24 691.523 L1022.8 691.523 L1023.36 691.523 L1023.92 691.523 L1024.48 691.523 L1025.04 691.523 L1025.6 691.523 L1026.16 691.523 L1026.72 691.523 L1027.28 691.523 L1027.83 691.523 L1028.39 691.523 L1028.95 691.523 L1029.51 691.523 L1030.07 691.523 L1030.63 691.523 L1031.19 691.523 L1031.75 691.523 L1032.31 691.523 L1032.87 691.523 L1033.43 691.523 L1033.99 691.523 L1034.55 691.523 L1035.1 691.523 L1035.66 691.523 L1036.22 691.523 L1036.78 691.523 L1037.34 691.523 L1037.9 691.523 L1038.46 691.523 L1039.02 691.523 L1039.58 691.523 L1040.14 691.523 L1040.7 691.523 L1041.26 691.523 L1041.82 691.523 L1042.38 691.523 L1042.93 691.523 L1043.49 691.523 L1044.05 691.523 L1044.61 691.523 L1045.17 691.523 L1045.73 691.523 L1046.29 691.523 L1046.85 691.523 L1047.41 691.523 L1047.97 691.523 L1048.53 691.523 L1049.09 691.523 L1049.65 691.523 L1050.2 691.523 L1050.76 691.523 L1051.32 691.523 L1051.88 691.523 L1052.44 691.523 L1053 691.523 L1053.56 691.523 L1054.12 691.523 L1054.68 691.523 L1055.24 691.523 L1055.8 691.523 L1056.36 691.523 L1056.92 691.523 L1057.48 691.523 L1058.03 691.523 L1058.59 691.523 L1059.15 691.523 L1059.71 691.523 L1060.27 691.523 L1060.83 691.523 L1061.39 691.523 L1061.95 691.523 L1062.51 691.523 L1063.07 691.523 L1063.63 691.523 L1064.19 691.523 L1064.75 691.523 L1065.3 691.523 L1065.86 691.523 L1066.42 691.523 L1066.98 691.523 L1067.54 691.523 L1068.1 691.523 L1068.66 691.523 L1069.22 691.523 L1069.78 691.523 L1070.34 691.523 L1070.9 691.523 L1071.46 691.523 L1072.02 691.523 L1072.57 691.523 L1073.13 691.523 L1073.69 691.523 L1074.25 691.523 L1074.81 691.523 L1075.37 691.523 L1075.93 691.523 L1076.49 691.523 L1077.05 691.523 L1077.61 691.523 L1078.17 691.523 L1078.73 691.523 L1079.29 691.523 L1079.85 691.523 L1080.4 691.523 L1080.96 691.523 L1081.52 691.523 L1082.08 691.523 L1082.64 691.523 L1083.2 691.523 L1083.76 691.523 L1084.32 691.523 L1084.88 691.523 L1085.44 691.523 L1086 691.523 L1086.56 691.523 L1087.12 691.523 L1087.67 691.523 L1088.23 691.523 L1088.79 691.523 L1089.35 691.523 L1089.91 691.523 L1090.47 691.523 L1091.03 691.523 L1091.59 691.523 L1092.15 691.523 L1092.71 691.523 L1093.27 691.523 L1093.83 691.523 L1094.39 691.523 L1094.94 691.523 L1095.5 691.523 L1096.06 691.523 L1096.62 691.523 L1097.18 691.523 L1097.74 691.523 L1098.3 691.523 L1098.86 691.523 L1099.42 691.523 L1099.98 691.523 L1100.54 691.523 L1101.1 691.523 L1101.66 691.523 L1102.22 691.523 L1102.77 691.523 L1103.33 691.523 L1103.89 691.523 L1104.45 691.523 L1105.01 691.523 L1105.57 691.523 L1106.13 691.523 L1106.69 691.523 L1107.25 691.523 L1107.81 691.523 L1108.37 691.523 L1108.93 691.523 L1109.49 691.523 L1110.04 691.523 L1110.6 691.523 L1111.16 691.523 L1111.72 691.523 L1112.28 691.523 L1112.84 691.523 L1113.4 691.523 L1113.96 691.523 L1114.52 691.523 L1115.08 691.523 L1115.64 691.523 L1116.2 691.523 L1116.76 691.523 L1117.31 691.523 L1117.87 691.523 L1118.43 691.523 L1118.99 691.523 L1119.55 691.523 L1120.11 691.523 L1120.67 691.523 L1121.23 691.523 L1121.79 691.523 L1122.35 691.523 L1122.91 691.523 L1123.47 691.523 L1124.03 691.523 L1124.59 691.523 L1125.14 691.523 L1125.7 691.523 L1126.26 691.523 L1126.82 691.523 L1127.38 691.523 L1127.94 691.523 L1128.5 691.523 L1129.06 691.523 L1129.62 691.523 L1130.18 691.523 L1130.74 691.523 L1131.3 691.523 L1131.86 691.523 L1132.41 691.523 L1132.97 691.523 L1133.53 691.523 L1134.09 691.523 L1134.65 691.523 L1135.21 691.523 L1135.77 691.523 L1136.33 691.523 L1136.89 691.523 L1137.45 691.523 L1138.01 691.523 L1138.57 691.523 L1139.13 691.523 L1139.68 691.523 L1140.24 691.523 L1140.8 691.523 L1141.36 691.523 L1141.92 691.523 L1142.48 691.523 L1143.04 691.523 L1143.6 691.523 L1144.16 691.523 L1144.72 691.523 L1145.28 691.523 L1145.84 691.523 L1146.4 691.523 L1146.96 691.523 L1147.51 691.523 L1148.07 691.523 L1148.63 691.523 L1149.19 691.523 L1149.75 691.523 L1150.31 691.523 L1150.87 691.523 L1151.43 691.523 L1151.99 691.523 L1152.55 691.523 L1153.11 691.523 L1153.67 691.523 L1154.23 691.523 L1154.78 691.523 L1155.34 691.523 L1155.9 691.523 L1156.46 691.523 L1157.02 691.523 L1157.58 691.523 L1158.14 691.523 L1158.7 691.523 L1159.26 691.523 L1159.82 691.523 L1160.38 691.523 L1160.94 691.523 L1161.5 691.523 L1162.05 691.523 L1162.61 691.523 L1163.17 691.523 L1163.73 691.523 L1164.29 691.523 L1164.85 691.523 L1165.41 691.523 L1165.97 691.523 L1166.53 691.523 L1167.09 691.523 L1167.65 691.523 L1168.21 691.523 L1168.77 691.523 L1169.33 691.523 L1169.88 691.523 L1170.44 691.523 L1171 691.523 L1171.56 691.523 L1172.12 691.523 L1172.68 691.523 L1173.24 691.523 L1173.8 691.523 L1174.36 691.523 L1174.92 691.523 L1175.48 691.523 L1176.04 691.523 L1176.6 691.523 L1177.15 691.523 L1177.71 691.523 L1178.27 691.523 L1178.83 691.523 L1179.39 691.523 L1179.95 691.523 L1180.51 691.523 L1181.07 691.523 L1181.63 691.523 L1182.19 691.523 L1182.75 691.523 L1183.31 691.523 L1183.87 691.523 L1184.43 691.523 L1184.98 691.523 L1185.54 691.523 L1186.1 691.523 L1186.66 691.523 L1187.22 691.523 L1187.78 691.523 L1188.34 691.523 L1188.9 691.523 L1189.46 691.523 L1190.02 691.523 L1190.58 691.523 L1191.14 691.523 L1191.7 691.523 L1192.25 691.523 L1192.81 691.523 L1193.37 691.523 L1193.93 691.523 L1194.49 691.523 L1195.05 691.523 L1195.61 691.523 L1196.17 691.523 L1196.73 691.523 L1197.29 691.523 L1197.85 691.523 L1198.41 691.523 L1198.97 691.523 L1199.52 691.523 L1200.08 691.523 L1200.64 691.523 L1201.2 691.523 L1201.76 691.523 L1202.32 691.523 L1202.88 691.523 L1203.44 691.523 L1204 691.523 L1204.56 691.523 L1205.12 691.523 L1205.68 691.523 L1206.24 691.523 L1206.8 691.523 L1207.35 691.523 L1207.91 691.523 L1208.47 691.523 L1209.03 691.523 L1209.59 691.523 L1210.15 691.523 L1210.71 691.523 L1211.27 691.523 L1211.83 691.523 L1212.39 691.523 L1212.95 691.523 L1213.51 691.523 L1214.07 691.523 L1214.62 691.523 L1215.18 691.523 L1215.74 691.523 L1216.3 691.523 L1216.86 691.523 L1217.42 691.523 L1217.98 691.523 L1218.54 691.523 L1219.1 691.523 L1219.66 691.523 L1220.22 691.523 L1220.78 691.523 L1221.34 691.523 L1221.89 691.523 L1222.45 691.523 L1223.01 691.523 L1223.57 691.523 L1224.13 691.523 L1224.69 691.523 L1225.25 691.523 L1225.81 691.523 L1226.37 691.523 L1226.93 691.523 L1227.49 691.523 L1228.05 691.523 L1228.61 691.523 L1229.17 691.523 L1229.72 691.523 L1230.28 691.523 L1230.84 691.523 L1231.4 691.523 L1231.96 691.523 L1232.52 691.523 L1233.08 691.523 L1233.64 691.523 L1234.2 691.523 L1234.76 691.523 L1235.32 691.523 L1235.88 691.523 L1236.44 691.523 L1236.99 691.523 L1237.55 691.523 L1238.11 691.523 L1238.67 691.523 L1239.23 691.523 L1239.79 691.523 L1240.35 691.523 L1240.91 691.523 L1241.47 691.523 L1242.03 691.523 L1242.59 691.523 L1243.15 691.523 L1243.71 691.523 L1244.26 691.523 L1244.82 691.523 L1245.38 691.523 L1245.94 691.523 L1246.5 691.523 L1247.06 691.523 L1247.62 691.523 L1248.18 691.523 L1248.74 691.523 L1249.3 691.523 L1249.86 691.523 L1250.42 691.523 L1250.98 691.523 L1251.54 691.523 L1252.09 691.523 L1252.65 691.523 L1253.21 691.523 L1253.77 691.523 L1254.33 691.523 L1254.89 691.523 L1255.45 691.523 L1256.01 691.523 L1256.57 691.523 L1257.13 691.523 L1257.69 691.523 L1258.25 691.523 L1258.81 691.523 L1259.36 691.523 L1259.92 691.523 L1260.48 691.523 L1261.04 691.523 L1261.6 691.523 L1262.16 691.523 L1262.72 691.523 L1263.28 691.523 L1263.84 691.523 L1264.4 691.523 L1264.96 691.523 L1265.52 691.523 L1266.08 691.523 L1266.63 691.523 L1267.19 691.523 L1267.75 691.523 L1268.31 691.523 L1268.87 691.523 L1269.43 691.523 L1269.99 691.523 L1270.55 691.523 L1271.11 691.523 L1271.67 691.523 L1272.23 691.523 L1272.79 691.523 L1273.35 691.523 L1273.91 691.523 L1274.46 691.523 L1275.02 691.523 L1275.58 691.523 L1276.14 691.523 L1276.7 691.523 L1277.26 691.523 L1277.82 691.523 L1278.38 691.523 L1278.94 691.523 L1279.5 691.523 L1280.06 691.523 L1280.62 691.523 L1281.18 691.523 L1281.73 691.523 L1282.29 691.523 L1282.85 691.523 L1283.41 691.523 L1283.97 691.523 L1284.53 691.523 L1285.09 691.523 L1285.65 691.523 L1286.21 691.523 L1286.77 691.523 L1287.33 691.523 L1287.89 691.523 L1288.45 691.523 L1289 691.523 L1289.56 691.523 L1290.12 691.523 L1290.68 691.523 L1291.24 691.523 L1291.8 691.523 L1292.36 691.523 L1292.92 691.523 L1293.48 691.523 L1294.04 691.523 L1294.6 691.523 L1295.16 691.523 L1295.72 691.523 L1296.28 691.523 L1296.83 691.523 L1297.39 691.523 L1297.95 691.523 L1298.51 691.523 L1299.07 691.523 L1299.63 691.523 L1300.19 691.523 L1300.75 691.523 L1301.31 691.523 L1301.87 691.523 L1302.43 691.523 L1302.99 691.523 L1303.55 691.523 L1304.1 691.523 L1304.66 691.523 L1305.22 691.523 L1305.78 691.523 L1306.34 691.523 L1306.9 691.523 L1307.46 691.523 L1308.02 691.523 L1308.58 691.523 L1309.14 691.523 L1309.7 691.523 L1310.26 691.523 L1310.82 691.523 L1311.38 691.523 L1311.93 691.523 L1312.49 691.523 L1313.05 691.523 L1313.61 691.523 L1314.17 691.523 L1314.73 691.523 L1315.29 691.523 L1315.85 691.523 L1316.41 691.523 L1316.97 691.523 L1317.53 691.523 L1318.09 691.523 L1318.65 691.523 L1319.2 691.523 L1319.76 691.523 L1320.32 691.523 L1320.88 691.523 L1321.44 691.523 L1322 691.523 L1322.56 691.523 L1323.12 691.523 L1323.68 691.523 L1324.24 691.523 L1324.8 691.523 L1325.36 691.523 L1325.92 691.523 L1326.47 691.523 L1327.03 691.523 L1327.59 691.523 L1328.15 691.523 L1328.71 691.523 L1329.27 691.523 L1329.83 691.523 L1330.39 691.523 L1330.95 691.523 L1331.51 691.523 L1332.07 691.523 L1332.63 691.523 L1333.19 691.523 L1333.75 691.523 L1334.3 691.523 L1334.86 691.523 L1335.42 691.523 L1335.98 691.523 L1336.54 691.523 L1337.1 691.523 L1337.66 691.523 L1338.22 691.523 L1338.78 691.523 L1339.34 691.523 L1339.9 691.523 L1340.46 691.523 L1341.02 691.523 L1341.57 691.523 L1342.13 691.523 L1342.69 691.523 L1343.25 691.523 L1343.81 691.523 L1344.37 691.523 L1344.93 691.523 L1345.49 691.523 L1346.05 691.523 L1346.61 691.523 L1347.17 691.523 L1347.73 691.523 L1348.29 691.523 L1348.84 691.523 L1349.4 691.523 L1349.96 691.523 L1350.52 691.523 L1351.08 691.523 L1351.64 691.523 L1352.2 691.523 L1352.76 691.523 L1353.32 691.523 L1353.88 691.523 L1354.44 691.523 L1355 691.523 L1355.56 691.523 L1356.12 691.523 L1356.67 691.523 L1357.23 691.523 L1357.79 691.523 L1358.35 691.523 L1358.91 691.523 L1359.47 691.523 L1360.03 691.523 L1360.59 691.523 L1361.15 691.523 L1361.71 691.523 L1362.27 691.523 L1362.83 691.523 L1363.39 691.523 L1363.94 691.523 L1364.5 691.523 L1365.06 691.523 L1365.62 691.523 L1366.18 691.523 L1366.74 691.523 L1367.3 691.523 L1367.86 691.523 L1368.42 691.523 L1368.98 691.523 L1369.54 691.523 L1370.1 691.523 L1370.66 691.523 L1371.21 691.523 L1371.77 691.523 L1372.33 691.523 L1372.89 691.523 L1373.45 691.523 L1374.01 691.523 L1374.57 691.523 L1375.13 691.523 L1375.69 691.523 L1376.25 691.523 L1376.81 691.523 L1377.37 691.523 L1377.93 691.523 L1378.49 691.523 L1379.04 691.523 L1379.6 691.523 L1380.16 691.523 L1380.72 691.523 L1381.28 691.523 L1381.84 691.523 L1382.4 691.523 L1382.96 691.523 L1383.52 691.523 L1384.08 691.523 L1384.64 691.523 L1385.2 691.523 L1385.76 691.523 L1386.31 691.523 L1386.87 691.523 L1387.43 691.523 L1387.99 691.523 L1388.55 691.523 L1389.11 691.523 L1389.67 691.523 L1390.23 691.523 L1390.79 691.523 L1391.35 691.523 L1391.91 691.523 L1392.47 691.523 L1393.03 691.523 L1393.58 691.523 L1394.14 691.523 L1394.7 691.523 L1395.26 691.523 L1395.82 691.523 L1396.38 691.523 L1396.94 691.523 L1397.5 691.523 L1398.06 691.523 L1398.62 691.523 L1399.18 691.523 L1399.74 691.523 L1400.3 691.523 L1400.86 691.523 L1401.41 691.523 L1401.97 691.523 L1402.53 691.523 L1403.09 691.523 L1403.65 691.523 L1404.21 691.523 L1404.77 691.523 L1405.33 691.523 L1405.89 691.523 L1406.45 691.523 L1407.01 691.523 L1407.57 691.523 L1408.13 691.523 L1408.68 691.523 L1409.24 691.523 L1409.8 691.523 L1410.36 691.523 L1410.92 691.523 L1411.48 691.523 L1412.04 691.523 L1412.6 691.523 L1413.16 691.523 L1413.72 691.523 L1414.28 691.523 L1414.84 691.523 L1415.4 691.523 L1415.95 691.523 L1416.51 691.523 L1417.07 691.523 L1417.63 691.523 L1418.19 691.523 L1418.75 691.523 L1419.31 691.523 L1419.87 691.523 L1420.43 691.523 L1420.99 691.523 L1421.55 691.523 L1422.11 691.523 L1422.67 691.523 L1423.23 691.523 L1423.78 691.523 L1424.34 691.523 L1424.9 691.523 L1425.46 691.523 L1426.02 691.523 L1426.58 691.523 L1427.14 691.523 L1427.7 691.523 L1428.26 691.523 L1428.82 691.523 L1429.38 691.523 L1429.94 691.523 L1430.5 691.523 L1431.05 691.523 L1431.61 691.523 L1432.17 691.523 L1432.73 691.523 L1433.29 691.523 L1433.85 691.523 L1434.41 691.523 L1434.97 691.523 L1435.53 691.523 L1436.09 691.523 L1436.65 691.523 L1437.21 691.523 L1437.77 691.523 L1438.33 691.523 L1438.88 691.523 L1439.44 691.523 L1440 691.523 L1440.56 691.523 L1441.12 691.523 L1441.68 691.523 L1442.24 691.523 L1442.8 691.523 L1443.36 691.523 L1443.92 691.523 L1444.48 691.523 L1445.04 691.523 L1445.6 691.523 L1446.15 691.523 L1446.71 691.523 L1447.27 691.523 L1447.83 691.523 L1448.39 691.523 L1448.95 691.523 L1449.51 691.523 L1450.07 691.523 L1450.63 691.523 L1451.19 691.523 L1451.75 691.523 L1452.31 691.523 L1452.87 691.523 L1453.42 691.523 L1453.98 691.523 L1454.54 691.523 L1455.1 691.523 L1455.66 691.523 L1456.22 691.523 L1456.78 691.523 L1457.34 691.523 L1457.9 691.523 L1458.46 691.523 L1459.02 691.523 L1459.58 691.523 L1460.14 691.523 L1460.7 691.523 L1461.25 691.523 L1461.81 691.523 L1462.37 691.523 L1462.93 691.523 L1463.49 691.523 L1464.05 691.523 L1464.61 691.523 L1465.17 691.523 L1465.73 691.523 L1466.29 691.523 L1466.85 691.523 L1467.41 691.523 L1467.97 691.523 L1468.52 691.523 L1469.08 691.523 L1469.64 691.523 L1470.2 691.523 L1470.76 691.523 L1471.32 691.523 L1471.88 691.523 L1472.44 691.523 L1473 691.523 L1473.56 691.523 L1474.12 691.523 L1474.68 691.523 L1475.24 691.523 L1475.79 691.523 L1476.35 691.523 L1476.91 691.523 L1477.47 691.523 L1478.03 691.523 L1478.59 691.523 L1479.15 691.523 L1479.71 691.523 L1480.27 691.523 L1480.83 691.523 L1481.39 691.523 L1481.95 691.523 L1482.51 691.523 L1483.07 691.523 L1483.62 691.523 L1484.18 691.523 L1484.74 691.523 L1485.3 691.523 L1485.86 691.523 L1486.42 691.523 L1486.98 691.523 L1487.54 691.523 L1488.1 691.523 L1488.66 691.523 L1489.22 691.523 L1489.78 691.523 L1490.34 691.523 L1490.89 691.523 L1491.45 691.523 L1492.01 691.523 L1492.57 691.523 L1493.13 691.523 L1493.69 691.523 L1494.25 691.523 L1494.81 691.523 L1495.37 691.523 L1495.93 691.523 L1496.49 691.523 L1497.05 691.523 L1497.61 691.523 L1498.16 691.523 L1498.72 691.523 L1499.28 691.523 L1499.84 691.523 L1500.4 691.523 L1500.96 691.523 L1501.52 691.523 L1502.08 691.523 L1502.64 691.523 L1503.2 691.523 L1503.76 691.523 L1504.32 691.523 L1504.88 691.523 L1505.44 691.523 L1505.99 691.523 L1506.55 691.523 L1507.11 691.523 L1507.67 691.523 L1508.23 691.523 L1508.79 691.523 L1509.35 691.523 L1509.91 691.523 L1510.47 691.523 L1511.03 691.523 L1511.59 691.523 L1512.15 691.523 L1512.71 691.523 L1513.26 691.523 L1513.82 691.523 L1514.38 691.523 L1514.94 691.523 L1515.5 691.523 L1516.06 691.523 L1516.62 691.523 L1517.18 691.523 L1517.74 691.523 L1518.3 691.523 L1518.86 691.523 L1519.42 691.523 L1519.98 691.523 L1520.53 691.523 L1521.09 691.523 L1521.65 691.523 L1522.21 691.523 L1522.77 691.523 L1523.33 691.523 L1523.89 691.523 L1524.45 691.523 L1525.01 691.523 L1525.57 691.523 L1526.13 691.523 L1526.69 691.523 L1527.25 691.523 L1527.81 691.523 L1528.36 691.523 L1528.92 691.523 L1529.48 691.523 L1530.04 691.523 L1530.6 691.523 L1531.16 691.523 L1531.72 691.523 L1532.28 691.523 L1532.84 691.523 L1533.4 691.523 L1533.96 691.523 L1534.52 691.523 L1535.08 691.523 L1535.63 691.523 L1536.19 691.523 L1536.75 691.523 L1537.31 691.523 L1537.87 691.523 L1538.43 691.523 L1538.99 691.523 L1539.55 691.523 L1540.11 691.523 L1540.67 691.523 L1541.23 691.523 L1541.79 691.523 L1542.35 691.523 L1542.9 691.523 L1543.46 691.523 L1544.02 691.523 L1544.58 691.523 L1545.14 691.523 L1545.7 691.523 L1546.26 691.523 L1546.82 691.523 L1547.38 691.523 L1547.94 691.523 L1548.5 691.523 L1549.06 691.523 L1549.62 691.523 L1550.18 691.523 L1550.73 691.523 L1551.29 691.523 L1551.85 691.523 L1552.41 691.523 L1552.97 691.523 L1553.53 691.523 L1554.09 691.523 L1554.65 691.523 L1555.21 691.523 L1555.77 691.523 L1556.33 691.523 L1556.89 691.523 L1557.45 691.523 L1558 691.523 L1558.56 691.523 L1559.12 691.523 L1559.68 691.523 L1560.24 691.523 L1560.8 691.523 L1561.36 691.523 L1561.92 691.523 L1562.48 691.523 L1563.04 691.523 L1563.6 691.523 L1564.16 691.523 L1564.72 691.523 L1565.28 691.523 L1565.83 691.523 L1566.39 691.523 L1566.95 691.523 L1567.51 691.523 L1568.07 691.523 L1568.63 691.523 L1569.19 691.523 L1569.75 691.523 L1570.31 691.523 L1570.87 691.523 L1571.43 691.523 L1571.99 691.523 L1572.55 691.523 L1573.1 691.523 L1573.66 691.523 L1574.22 691.523 L1574.78 691.523 L1575.34 691.523 L1575.9 691.523 L1576.46 691.523 L1577.02 691.523 L1577.58 691.523 L1578.14 691.523 L1578.7 691.523 L1579.26 691.523 L1579.82 691.523 L1580.37 691.523 L1580.93 691.523 L1581.49 691.523 L1582.05 691.523 L1582.61 691.523 L1583.17 691.523 L1583.73 691.523 L1584.29 691.523 L1584.85 691.523 L1585.41 691.523 L1585.97 691.523 L1586.53 691.523 L1587.09 691.523 L1587.65 691.523 L1588.2 691.523 L1588.76 691.523 L1589.32 691.523 L1589.88 691.523 L1590.44 691.523 L1591 691.523 L1591.56 691.523 L1592.12 691.523 L1592.68 691.523 L1593.24 691.523 L1593.8 691.523 L1594.36 691.523 L1594.92 691.523 L1595.47 691.523 L1596.03 691.523 L1596.59 691.523 L1597.15 691.523 L1597.71 691.523 L1598.27 691.523 L1598.83 691.523 L1599.39 691.523 L1599.95 691.523 L1600.51 691.523 L1601.07 691.523 L1601.63 691.523 L1602.19 691.523 L1602.74 691.523 L1603.3 691.523 L1603.86 691.523 L1604.42 691.523 L1604.98 691.523 L1605.54 691.523 L1606.1 691.523 L1606.66 691.523 L1607.22 691.523 L1607.78 691.523 L1608.34 691.523 L1608.9 691.523 L1609.46 691.523 L1610.02 691.523 L1610.57 691.523 L1611.13 691.523 L1611.69 691.523 L1612.25 691.523 L1612.81 691.523 L1613.37 691.523 L1613.93 691.523 L1614.49 691.523 L1615.05 691.523 L1615.61 691.523 L1616.17 691.523 L1616.73 691.523 L1617.29 691.523 L1617.84 691.523 L1618.4 691.523 L1618.96 691.523 L1619.52 691.523 L1620.08 691.523 L1620.64 691.523 L1621.2 691.523 L1621.76 691.523 L1622.32 691.523 L1622.88 691.523 L1623.44 691.523 L1624 691.523 L1624.56 691.523 L1625.11 691.523 L1625.67 691.523 L1626.23 691.523 L1626.79 691.523 L1627.35 691.523 L1627.91 691.523 L1628.47 691.523 L1629.03 691.523 L1629.59 691.523 L1630.15 691.523 L1630.71 691.523 L1631.27 691.523 L1631.83 691.523 L1632.39 691.523 L1632.94 691.523 L1633.5 691.523 L1634.06 691.523 L1634.62 691.523 L1635.18 691.523 L1635.74 691.523 L1636.3 691.523 L1636.86 691.523 L1637.42 691.523 L1637.98 691.523 L1638.54 691.523 L1639.1 691.523 L1639.66 691.523 L1640.21 691.523 L1640.77 691.523 L1641.33 691.523 L1641.89 691.523 L1642.45 691.523 L1643.01 691.523 L1643.57 691.523 L1644.13 691.523 L1644.69 691.523 L1645.25 691.523 L1645.81 691.523 L1646.37 691.523 L1646.93 691.523 L1647.48 691.523 L1648.04 691.523 L1648.6 691.523 L1649.16 691.523 L1649.72 691.523 L1650.28 691.523 L1650.84 691.523 L1651.4 691.523 L1651.96 691.523 L1652.52 691.523 L1653.08 691.523 L1653.64 691.523 L1654.2 691.523 L1654.76 691.523 L1655.31 691.523 L1655.87 691.523 L1656.43 691.523 L1656.99 691.523 L1657.55 691.523 L1658.11 691.523 L1658.67 691.523 L1659.23 691.523 L1659.79 691.523 L1660.35 691.523 L1660.91 691.523 L1661.47 691.523 L1662.03 691.523 L1662.58 691.523 L1663.14 691.523 L1663.7 691.523 L1664.26 691.523 L1664.82 691.523 L1665.38 691.523 L1665.94 691.523 L1666.5 691.523 L1667.06 691.523 L1667.62 691.523 L1668.18 691.523 L1668.74 691.523 L1669.3 691.523 L1669.85 691.523 L1670.41 691.523 L1670.97 691.523 L1671.53 691.523 L1672.09 691.523 L1672.65 691.523 L1673.21 691.523 L1673.77 691.523 L1674.33 691.523 L1674.89 691.523 L1675.45 691.523 L1676.01 691.523 L1676.57 691.523 L1677.13 691.523 L1677.68 691.523 L1678.24 691.523 L1678.8 691.523 L1679.36 691.523 L1679.92 691.523 L1680.48 691.523 L1681.04 691.523 L1681.6 691.523 L1682.16 691.523 L1682.72 691.523 L1683.28 691.523 L1683.84 691.523 L1684.4 691.523 L1684.95 691.523 L1685.51 691.523 L1686.07 691.523 L1686.63 691.523 L1687.19 691.523 L1687.75 691.523 L1688.31 691.523 L1688.87 691.523 L1689.43 691.523 L1689.99 691.523 L1690.55 691.523 L1691.11 691.523 L1691.67 691.523 L1692.23 691.523 L1692.78 691.523 L1693.34 691.523 L1693.9 691.523 L1694.46 691.523 L1695.02 691.523 L1695.58 691.523 L1696.14 691.523 L1696.7 691.523 L1697.26 691.523 L1697.82 691.523 L1698.38 691.523 L1698.94 691.523 L1699.5 691.523 L1700.05 691.523 L1700.61 691.523 L1701.17 691.523 L1701.73 691.523 L1702.29 691.523 L1702.85 691.523 L1703.41 691.523 L1703.97 691.523 L1704.53 691.523 L1705.09 691.523 L1705.65 691.523 L1706.21 691.523 L1706.77 691.523 L1707.32 691.523 L1707.88 691.523 L1708.44 691.523 L1709 691.523 L1709.56 691.523 L1710.12 691.523 L1710.68 691.523 L1711.24 691.523 L1711.8 691.523 L1712.36 691.523 L1712.92 691.523 L1713.48 691.523 L1714.04 691.523 L1714.6 691.523 L1715.15 691.523 L1715.71 691.523 L1716.27 691.523 L1716.83 691.523 L1717.39 691.523 L1717.95 691.523 L1718.51 691.523 L1719.07 691.523 L1719.63 691.523 L1720.19 691.523 L1720.75 691.523 L1721.31 691.523 L1721.87 691.523 L1722.42 691.523 L1722.98 691.523 L1723.54 691.523 L1724.1 691.523 L1724.66 691.523 L1725.22 691.523 L1725.78 691.523 L1726.34 691.523 L1726.9 691.523 L1727.46 691.523 L1728.02 691.523 L1728.58 691.523 L1729.14 691.523 L1729.69 691.523 L1730.25 691.523 L1730.81 691.523 L1731.37 691.523 L1731.93 691.523 L1732.49 691.523 L1733.05 691.523 L1733.61 691.523 L1734.17 691.523 L1734.73 691.523 L1735.29 691.523 L1735.85 691.523 L1736.41 691.523 L1736.97 691.523 L1737.52 691.523 L1738.08 691.523 L1738.64 691.523 L1739.2 691.523 L1739.76 691.523 L1740.32 691.523 L1740.88 691.523 L1741.44 691.523 L1742 691.523 L1742.56 691.523 L1743.12 691.523 L1743.68 691.523 L1744.24 691.523 L1744.79 691.523 L1745.35 691.523 L1745.91 691.523 L1746.47 691.523 L1747.03 691.523 L1747.59 691.523 L1748.15 691.523 L1748.71 691.523 L1749.27 691.523 L1749.83 691.523 L1750.39 691.523 L1750.95 691.523 L1751.51 691.523 L1752.06 691.523 L1752.62 691.523 L1753.18 691.523 L1753.74 691.523 L1754.3 691.523 L1754.86 691.523 L1755.42 691.523 L1755.98 691.523 L1756.54 691.523 L1757.1 691.523 L1757.66 691.523 L1758.22 691.523 L1758.78 691.523 L1759.34 691.523 L1759.89 691.523 L1760.45 691.523 L1761.01 691.523 L1761.57 691.523 L1762.13 691.523 L1762.69 691.523 L1763.25 691.523 L1763.81 691.523 L1764.37 691.523 L1764.93 691.523 L1765.49 691.523 L1766.05 691.523 L1766.61 691.523 L1767.16 691.523 L1767.72 691.523 L1768.28 691.523 L1768.84 691.523 L1769.4 691.523 L1769.96 691.523 L1770.52 691.523 L1771.08 691.523 L1771.64 691.523 L1772.2 691.523 L1772.76 691.523 L1773.32 691.523 L1773.88 691.523 L1774.43 691.523 L1774.99 691.523 L1775.55 691.523 L1776.11 691.523 L1776.67 691.523 L1777.23 691.523 L1777.79 691.523 L1778.35 691.523 L1778.91 691.523 L1779.47 691.523 L1780.03 691.523 L1780.59 691.523 L1781.15 691.523 L1781.71 691.523 L1782.26 691.523 L1782.82 691.523 L1783.38 691.523 L1783.94 691.523 L1784.5 691.523 L1785.06 691.523 L1785.62 691.523 L1786.18 691.523 L1786.74 691.523 L1787.3 691.523 L1787.86 691.523 L1788.42 691.523 L1788.98 691.523 L1789.53 691.523 L1790.09 691.523 L1790.65 691.523 L1791.21 691.523 L1791.77 691.523 L1792.33 691.523 L1792.89 691.523 L1793.45 691.523 L1794.01 691.523 L1794.57 691.523 L1795.13 691.523 L1795.69 691.523 L1796.25 691.523 L1796.8 691.523 L1797.36 691.523 L1797.92 691.523 L1798.48 691.523 L1799.04 691.523 L1799.6 691.523 L1800.16 691.523 L1800.72 691.523 L1801.28 691.523 L1801.84 691.523 L1802.4 691.523 L1802.96 691.523 L1803.52 691.523 L1804.08 691.523 L1804.63 691.523 L1805.19 691.523 L1805.75 691.523 L1806.31 691.523 L1806.87 691.523 L1807.43 691.523 L1807.99 691.523 L1808.55 691.523 L1809.11 691.523 L1809.67 691.523 L1810.23 691.523 L1810.79 691.523 L1811.35 691.523 L1811.9 691.523 L1812.46 691.523 L1813.02 691.523 L1813.58 691.523 L1814.14 691.523 L1814.7 691.523 L1815.26 691.523 L1815.82 691.523 L1816.38 691.523 L1816.94 691.523 L1817.5 691.523 L1818.06 691.523 L1818.62 691.523 L1819.18 691.523 L1819.73 691.523 L1820.29 691.523 L1820.85 691.523 L1821.41 691.523 L1821.97 691.523 L1822.53 691.523 L1823.09 691.523 L1823.65 691.523 L1824.21 691.523 L1824.77 691.523 L1825.33 691.523 L1825.89 691.523 L1826.45 691.523 L1827 691.523 L1827.56 691.523 L1828.12 691.523 L1828.68 691.523 L1829.24 691.523 L1829.8 691.523 L1830.36 691.523 L1830.92 691.523 L1831.48 691.523 L1832.04 691.523 L1832.6 691.523 L1833.16 691.523 L1833.72 691.523 L1834.27 691.523 L1834.83 691.523 L1835.39 691.523 L1835.95 691.523 L1836.51 691.523 L1837.07 691.523 L1837.63 691.523 L1838.19 691.523 L1838.19 682.311 L1837.63 682.311 L1837.07 682.311 L1836.51 682.311 L1835.95 682.311 L1835.39 682.311 L1834.83 682.311 L1834.27 682.311 L1833.72 682.311 L1833.16 682.311 L1832.6 682.311 L1832.04 682.311 L1831.48 682.311 L1830.92 682.311 L1830.36 682.311 L1829.8 682.311 L1829.24 682.311 L1828.68 682.311 L1828.12 682.311 L1827.56 682.311 L1827 682.311 L1826.45 682.311 L1825.89 682.311 L1825.33 682.311 L1824.77 682.311 L1824.21 682.311 L1823.65 682.311 L1823.09 682.311 L1822.53 682.311 L1821.97 682.311 L1821.41 682.311 L1820.85 682.311 L1820.29 682.311 L1819.73 682.311 L1819.18 682.311 L1818.62 682.311 L1818.06 682.311 L1817.5 682.311 L1816.94 682.311 L1816.38 682.311 L1815.82 682.311 L1815.26 682.311 L1814.7 682.311 L1814.14 682.311 L1813.58 682.311 L1813.02 682.311 L1812.46 682.311 L1811.9 682.311 L1811.35 682.311 L1810.79 682.311 L1810.23 682.311 L1809.67 682.311 L1809.11 682.311 L1808.55 682.311 L1807.99 682.311 L1807.43 682.311 L1806.87 682.311 L1806.31 682.311 L1805.75 682.311 L1805.19 682.311 L1804.63 682.311 L1804.08 682.311 L1803.52 682.311 L1802.96 682.311 L1802.4 682.311 L1801.84 682.311 L1801.28 682.311 L1800.72 682.311 L1800.16 682.311 L1799.6 682.311 L1799.04 682.311 L1798.48 682.311 L1797.92 682.311 L1797.36 682.311 L1796.8 682.311 L1796.25 682.311 L1795.69 682.311 L1795.13 682.311 L1794.57 682.311 L1794.01 682.311 L1793.45 682.311 L1792.89 682.311 L1792.33 682.311 L1791.77 682.311 L1791.21 682.311 L1790.65 682.311 L1790.09 682.311 L1789.53 682.311 L1788.98 682.311 L1788.42 682.311 L1787.86 682.311 L1787.3 682.311 L1786.74 682.311 L1786.18 682.311 L1785.62 682.311 L1785.06 682.311 L1784.5 682.311 L1783.94 682.311 L1783.38 682.311 L1782.82 682.311 L1782.26 682.311 L1781.71 682.311 L1781.15 682.311 L1780.59 682.311 L1780.03 682.311 L1779.47 682.311 L1778.91 682.311 L1778.35 682.311 L1777.79 682.311 L1777.23 682.311 L1776.67 682.311 L1776.11 682.311 L1775.55 682.311 L1774.99 682.311 L1774.43 682.311 L1773.88 682.311 L1773.32 682.311 L1772.76 682.311 L1772.2 682.311 L1771.64 682.311 L1771.08 682.311 L1770.52 682.311 L1769.96 682.311 L1769.4 682.311 L1768.84 682.311 L1768.28 682.311 L1767.72 682.311 L1767.16 682.311 L1766.61 682.311 L1766.05 682.311 L1765.49 682.311 L1764.93 682.311 L1764.37 682.311 L1763.81 682.311 L1763.25 682.311 L1762.69 682.311 L1762.13 682.311 L1761.57 682.311 L1761.01 682.311 L1760.45 682.311 L1759.89 682.311 L1759.34 682.311 L1758.78 682.311 L1758.22 682.311 L1757.66 682.311 L1757.1 682.311 L1756.54 682.311 L1755.98 682.311 L1755.42 682.311 L1754.86 682.311 L1754.3 682.311 L1753.74 682.311 L1753.18 682.311 L1752.62 682.311 L1752.06 682.311 L1751.51 682.311 L1750.95 682.311 L1750.39 682.311 L1749.83 682.311 L1749.27 682.311 L1748.71 682.311 L1748.15 682.311 L1747.59 682.311 L1747.03 682.311 L1746.47 682.311 L1745.91 682.311 L1745.35 682.311 L1744.79 682.311 L1744.24 682.311 L1743.68 682.311 L1743.12 682.311 L1742.56 682.311 L1742 682.311 L1741.44 682.311 L1740.88 682.311 L1740.32 682.311 L1739.76 682.311 L1739.2 682.311 L1738.64 682.311 L1738.08 682.311 L1737.52 682.311 L1736.97 682.311 L1736.41 682.311 L1735.85 682.311 L1735.29 682.311 L1734.73 682.311 L1734.17 682.311 L1733.61 682.311 L1733.05 682.311 L1732.49 682.311 L1731.93 682.311 L1731.37 682.311 L1730.81 682.311 L1730.25 682.311 L1729.69 682.311 L1729.14 682.311 L1728.58 682.311 L1728.02 682.311 L1727.46 682.311 L1726.9 682.311 L1726.34 682.311 L1725.78 682.311 L1725.22 682.311 L1724.66 682.311 L1724.1 682.311 L1723.54 682.311 L1722.98 682.311 L1722.42 682.311 L1721.87 682.311 L1721.31 682.311 L1720.75 682.311 L1720.19 682.311 L1719.63 682.311 L1719.07 682.311 L1718.51 682.311 L1717.95 682.311 L1717.39 682.311 L1716.83 682.311 L1716.27 682.311 L1715.71 682.311 L1715.15 682.311 L1714.6 682.311 L1714.04 682.311 L1713.48 682.311 L1712.92 682.311 L1712.36 682.311 L1711.8 682.311 L1711.24 682.311 L1710.68 682.311 L1710.12 682.311 L1709.56 682.311 L1709 682.311 L1708.44 682.311 L1707.88 682.311 L1707.32 682.311 L1706.77 682.311 L1706.21 682.311 L1705.65 682.311 L1705.09 682.311 L1704.53 682.311 L1703.97 682.311 L1703.41 682.311 L1702.85 682.311 L1702.29 682.311 L1701.73 682.311 L1701.17 682.311 L1700.61 682.311 L1700.05 682.311 L1699.5 682.311 L1698.94 682.311 L1698.38 682.311 L1697.82 682.311 L1697.26 682.311 L1696.7 682.311 L1696.14 682.311 L1695.58 682.311 L1695.02 682.311 L1694.46 682.311 L1693.9 682.311 L1693.34 682.311 L1692.78 682.311 L1692.23 682.311 L1691.67 682.311 L1691.11 682.311 L1690.55 682.311 L1689.99 682.311 L1689.43 682.311 L1688.87 682.311 L1688.31 682.311 L1687.75 682.311 L1687.19 682.311 L1686.63 682.311 L1686.07 682.311 L1685.51 682.311 L1684.95 682.311 L1684.4 682.311 L1683.84 682.311 L1683.28 682.311 L1682.72 682.311 L1682.16 682.311 L1681.6 682.311 L1681.04 682.311 L1680.48 682.311 L1679.92 682.311 L1679.36 682.311 L1678.8 682.311 L1678.24 682.311 L1677.68 682.311 L1677.13 682.311 L1676.57 682.311 L1676.01 682.311 L1675.45 682.311 L1674.89 682.311 L1674.33 682.311 L1673.77 682.311 L1673.21 682.311 L1672.65 682.311 L1672.09 682.311 L1671.53 682.311 L1670.97 682.311 L1670.41 682.311 L1669.85 682.311 L1669.3 682.311 L1668.74 682.311 L1668.18 682.311 L1667.62 682.311 L1667.06 682.311 L1666.5 682.311 L1665.94 682.311 L1665.38 682.311 L1664.82 682.311 L1664.26 682.311 L1663.7 682.311 L1663.14 682.311 L1662.58 682.311 L1662.03 682.311 L1661.47 682.311 L1660.91 682.311 L1660.35 682.311 L1659.79 682.311 L1659.23 682.311 L1658.67 682.311 L1658.11 682.311 L1657.55 682.311 L1656.99 682.311 L1656.43 682.311 L1655.87 682.311 L1655.31 682.311 L1654.76 682.311 L1654.2 682.311 L1653.64 682.311 L1653.08 682.311 L1652.52 682.311 L1651.96 682.311 L1651.4 682.311 L1650.84 682.311 L1650.28 682.311 L1649.72 682.311 L1649.16 682.311 L1648.6 682.311 L1648.04 682.311 L1647.48 682.311 L1646.93 682.311 L1646.37 682.311 L1645.81 682.311 L1645.25 682.311 L1644.69 682.311 L1644.13 682.311 L1643.57 682.311 L1643.01 682.311 L1642.45 682.311 L1641.89 682.311 L1641.33 682.311 L1640.77 682.311 L1640.21 682.311 L1639.66 682.311 L1639.1 682.311 L1638.54 682.311 L1637.98 682.311 L1637.42 682.311 L1636.86 682.311 L1636.3 682.311 L1635.74 682.311 L1635.18 682.311 L1634.62 682.311 L1634.06 682.311 L1633.5 682.311 L1632.94 682.311 L1632.39 682.311 L1631.83 682.311 L1631.27 682.311 L1630.71 682.311 L1630.15 682.311 L1629.59 682.311 L1629.03 682.311 L1628.47 682.311 L1627.91 682.311 L1627.35 682.311 L1626.79 682.311 L1626.23 682.311 L1625.67 682.311 L1625.11 682.311 L1624.56 682.311 L1624 682.311 L1623.44 682.311 L1622.88 682.311 L1622.32 682.311 L1621.76 682.311 L1621.2 682.311 L1620.64 682.311 L1620.08 682.311 L1619.52 682.311 L1618.96 682.311 L1618.4 682.311 L1617.84 682.311 L1617.29 682.311 L1616.73 682.311 L1616.17 682.311 L1615.61 682.311 L1615.05 682.311 L1614.49 682.311 L1613.93 682.311 L1613.37 682.311 L1612.81 682.311 L1612.25 682.311 L1611.69 682.311 L1611.13 682.311 L1610.57 682.311 L1610.02 682.311 L1609.46 682.311 L1608.9 682.311 L1608.34 682.311 L1607.78 682.311 L1607.22 682.311 L1606.66 682.311 L1606.1 682.311 L1605.54 682.311 L1604.98 682.311 L1604.42 682.311 L1603.86 682.311 L1603.3 682.311 L1602.74 682.311 L1602.19 682.311 L1601.63 682.311 L1601.07 682.311 L1600.51 682.311 L1599.95 682.311 L1599.39 682.311 L1598.83 682.311 L1598.27 682.311 L1597.71 682.311 L1597.15 682.311 L1596.59 682.311 L1596.03 682.311 L1595.47 682.311 L1594.92 682.311 L1594.36 682.311 L1593.8 682.311 L1593.24 682.311 L1592.68 682.311 L1592.12 682.311 L1591.56 682.311 L1591 682.311 L1590.44 682.311 L1589.88 682.311 L1589.32 682.311 L1588.76 682.311 L1588.2 682.311 L1587.65 682.311 L1587.09 682.311 L1586.53 682.311 L1585.97 682.311 L1585.41 682.311 L1584.85 682.311 L1584.29 682.311 L1583.73 682.311 L1583.17 682.311 L1582.61 682.311 L1582.05 682.311 L1581.49 682.311 L1580.93 682.311 L1580.37 682.311 L1579.82 682.311 L1579.26 682.311 L1578.7 682.311 L1578.14 682.311 L1577.58 682.311 L1577.02 682.311 L1576.46 682.311 L1575.9 682.311 L1575.34 682.311 L1574.78 682.311 L1574.22 682.311 L1573.66 682.311 L1573.1 682.311 L1572.55 682.311 L1571.99 682.311 L1571.43 682.311 L1570.87 682.311 L1570.31 682.311 L1569.75 682.311 L1569.19 682.311 L1568.63 682.311 L1568.07 682.311 L1567.51 682.311 L1566.95 682.311 L1566.39 682.311 L1565.83 682.311 L1565.28 682.311 L1564.72 682.311 L1564.16 682.311 L1563.6 682.311 L1563.04 682.311 L1562.48 682.311 L1561.92 682.311 L1561.36 682.311 L1560.8 682.311 L1560.24 682.311 L1559.68 682.311 L1559.12 682.311 L1558.56 682.311 L1558 682.311 L1557.45 682.311 L1556.89 682.311 L1556.33 682.311 L1555.77 682.311 L1555.21 682.311 L1554.65 682.311 L1554.09 682.311 L1553.53 682.311 L1552.97 682.311 L1552.41 682.311 L1551.85 682.311 L1551.29 682.311 L1550.73 682.311 L1550.18 682.311 L1549.62 682.311 L1549.06 682.311 L1548.5 682.311 L1547.94 682.311 L1547.38 682.311 L1546.82 682.311 L1546.26 682.311 L1545.7 682.311 L1545.14 682.311 L1544.58 682.311 L1544.02 682.311 L1543.46 682.311 L1542.9 682.311 L1542.35 682.311 L1541.79 682.311 L1541.23 682.311 L1540.67 682.311 L1540.11 682.311 L1539.55 682.311 L1538.99 682.311 L1538.43 682.311 L1537.87 682.311 L1537.31 682.311 L1536.75 682.311 L1536.19 682.311 L1535.63 682.311 L1535.08 682.311 L1534.52 682.311 L1533.96 682.311 L1533.4 682.311 L1532.84 682.311 L1532.28 682.311 L1531.72 682.311 L1531.16 682.311 L1530.6 682.311 L1530.04 682.311 L1529.48 682.311 L1528.92 682.311 L1528.36 682.311 L1527.81 682.311 L1527.25 682.311 L1526.69 682.311 L1526.13 682.311 L1525.57 682.311 L1525.01 682.311 L1524.45 682.311 L1523.89 682.311 L1523.33 682.311 L1522.77 682.311 L1522.21 682.311 L1521.65 682.311 L1521.09 682.311 L1520.53 682.311 L1519.98 682.311 L1519.42 682.311 L1518.86 682.311 L1518.3 682.311 L1517.74 682.311 L1517.18 682.311 L1516.62 682.311 L1516.06 682.311 L1515.5 682.311 L1514.94 682.311 L1514.38 682.311 L1513.82 682.311 L1513.26 682.311 L1512.71 682.311 L1512.15 682.311 L1511.59 682.311 L1511.03 682.311 L1510.47 682.311 L1509.91 682.311 L1509.35 682.311 L1508.79 682.311 L1508.23 682.311 L1507.67 682.311 L1507.11 682.311 L1506.55 682.311 L1505.99 682.311 L1505.44 682.311 L1504.88 682.311 L1504.32 682.311 L1503.76 682.311 L1503.2 682.311 L1502.64 682.311 L1502.08 682.311 L1501.52 682.311 L1500.96 682.311 L1500.4 682.311 L1499.84 682.311 L1499.28 682.311 L1498.72 682.311 L1498.16 682.311 L1497.61 682.311 L1497.05 682.311 L1496.49 682.311 L1495.93 682.311 L1495.37 682.311 L1494.81 682.311 L1494.25 682.311 L1493.69 682.311 L1493.13 682.311 L1492.57 682.311 L1492.01 682.311 L1491.45 682.311 L1490.89 682.311 L1490.34 682.311 L1489.78 682.311 L1489.22 682.311 L1488.66 682.311 L1488.1 682.311 L1487.54 682.311 L1486.98 682.311 L1486.42 682.311 L1485.86 682.311 L1485.3 682.311 L1484.74 682.311 L1484.18 682.311 L1483.62 682.311 L1483.07 682.311 L1482.51 682.311 L1481.95 682.311 L1481.39 682.311 L1480.83 682.311 L1480.27 682.311 L1479.71 682.311 L1479.15 682.311 L1478.59 682.311 L1478.03 682.311 L1477.47 682.311 L1476.91 682.311 L1476.35 682.311 L1475.79 682.311 L1475.24 682.311 L1474.68 682.311 L1474.12 682.311 L1473.56 682.311 L1473 682.311 L1472.44 682.311 L1471.88 682.311 L1471.32 682.311 L1470.76 682.311 L1470.2 682.311 L1469.64 682.311 L1469.08 682.311 L1468.52 682.311 L1467.97 682.311 L1467.41 682.311 L1466.85 682.311 L1466.29 682.311 L1465.73 682.311 L1465.17 682.311 L1464.61 682.311 L1464.05 682.311 L1463.49 682.311 L1462.93 682.311 L1462.37 682.311 L1461.81 682.311 L1461.25 682.311 L1460.7 682.311 L1460.14 682.311 L1459.58 682.311 L1459.02 682.311 L1458.46 682.311 L1457.9 682.311 L1457.34 682.311 L1456.78 682.311 L1456.22 682.311 L1455.66 682.311 L1455.1 682.311 L1454.54 682.311 L1453.98 682.311 L1453.42 682.311 L1452.87 682.311 L1452.31 682.311 L1451.75 682.311 L1451.19 682.311 L1450.63 682.311 L1450.07 682.311 L1449.51 682.311 L1448.95 682.311 L1448.39 682.311 L1447.83 682.311 L1447.27 682.311 L1446.71 682.311 L1446.15 682.311 L1445.6 682.311 L1445.04 682.311 L1444.48 682.311 L1443.92 682.311 L1443.36 682.311 L1442.8 682.311 L1442.24 682.311 L1441.68 682.311 L1441.12 682.311 L1440.56 682.311 L1440 682.311 L1439.44 682.311 L1438.88 682.311 L1438.33 682.311 L1437.77 682.311 L1437.21 682.311 L1436.65 682.311 L1436.09 682.311 L1435.53 682.311 L1434.97 682.311 L1434.41 682.311 L1433.85 682.311 L1433.29 682.311 L1432.73 682.311 L1432.17 682.311 L1431.61 682.311 L1431.05 682.311 L1430.5 682.311 L1429.94 682.311 L1429.38 682.311 L1428.82 682.311 L1428.26 682.311 L1427.7 682.311 L1427.14 682.311 L1426.58 682.311 L1426.02 682.311 L1425.46 682.311 L1424.9 682.311 L1424.34 682.311 L1423.78 682.311 L1423.23 682.311 L1422.67 682.311 L1422.11 682.311 L1421.55 682.311 L1420.99 682.311 L1420.43 682.311 L1419.87 682.311 L1419.31 682.311 L1418.75 682.311 L1418.19 682.311 L1417.63 682.311 L1417.07 682.311 L1416.51 682.311 L1415.95 682.311 L1415.4 682.311 L1414.84 682.311 L1414.28 682.311 L1413.72 682.311 L1413.16 682.311 L1412.6 682.311 L1412.04 682.311 L1411.48 682.311 L1410.92 682.311 L1410.36 682.311 L1409.8 682.311 L1409.24 682.311 L1408.68 682.311 L1408.13 682.311 L1407.57 682.311 L1407.01 682.311 L1406.45 682.311 L1405.89 682.311 L1405.33 682.311 L1404.77 682.311 L1404.21 682.311 L1403.65 682.311 L1403.09 682.311 L1402.53 682.311 L1401.97 682.311 L1401.41 682.311 L1400.86 682.311 L1400.3 682.311 L1399.74 682.311 L1399.18 682.311 L1398.62 682.311 L1398.06 682.311 L1397.5 682.311 L1396.94 682.311 L1396.38 682.311 L1395.82 682.311 L1395.26 682.311 L1394.7 682.311 L1394.14 682.311 L1393.58 682.311 L1393.03 682.311 L1392.47 682.311 L1391.91 682.311 L1391.35 682.311 L1390.79 682.311 L1390.23 682.311 L1389.67 682.311 L1389.11 682.311 L1388.55 682.311 L1387.99 682.311 L1387.43 682.311 L1386.87 682.311 L1386.31 682.311 L1385.76 682.311 L1385.2 682.311 L1384.64 682.311 L1384.08 682.311 L1383.52 682.311 L1382.96 682.311 L1382.4 682.311 L1381.84 682.311 L1381.28 682.311 L1380.72 682.311 L1380.16 682.311 L1379.6 682.311 L1379.04 682.311 L1378.49 682.311 L1377.93 682.311 L1377.37 682.311 L1376.81 682.311 L1376.25 682.311 L1375.69 682.311 L1375.13 682.311 L1374.57 682.311 L1374.01 682.311 L1373.45 682.311 L1372.89 682.311 L1372.33 682.311 L1371.77 682.311 L1371.21 682.311 L1370.66 682.311 L1370.1 682.311 L1369.54 682.311 L1368.98 682.311 L1368.42 682.311 L1367.86 682.311 L1367.3 682.311 L1366.74 682.311 L1366.18 682.311 L1365.62 682.311 L1365.06 682.311 L1364.5 682.311 L1363.94 682.311 L1363.39 682.311 L1362.83 682.311 L1362.27 682.311 L1361.71 682.311 L1361.15 682.311 L1360.59 682.311 L1360.03 682.311 L1359.47 682.311 L1358.91 682.311 L1358.35 682.311 L1357.79 682.311 L1357.23 682.311 L1356.67 682.311 L1356.12 682.311 L1355.56 682.311 L1355 682.311 L1354.44 682.311 L1353.88 682.311 L1353.32 682.311 L1352.76 682.311 L1352.2 682.311 L1351.64 682.311 L1351.08 682.311 L1350.52 682.311 L1349.96 682.311 L1349.4 682.311 L1348.84 682.311 L1348.29 682.311 L1347.73 682.311 L1347.17 682.311 L1346.61 682.311 L1346.05 682.311 L1345.49 682.311 L1344.93 682.311 L1344.37 682.311 L1343.81 682.311 L1343.25 682.311 L1342.69 682.311 L1342.13 682.311 L1341.57 682.311 L1341.02 682.311 L1340.46 682.311 L1339.9 682.311 L1339.34 682.311 L1338.78 682.311 L1338.22 682.311 L1337.66 682.311 L1337.1 682.311 L1336.54 682.311 L1335.98 682.311 L1335.42 682.311 L1334.86 682.311 L1334.3 682.311 L1333.75 682.311 L1333.19 682.311 L1332.63 682.311 L1332.07 682.311 L1331.51 682.311 L1330.95 682.311 L1330.39 682.311 L1329.83 682.311 L1329.27 682.311 L1328.71 682.311 L1328.15 682.311 L1327.59 682.311 L1327.03 682.311 L1326.47 682.311 L1325.92 682.311 L1325.36 682.311 L1324.8 682.311 L1324.24 682.311 L1323.68 682.311 L1323.12 682.311 L1322.56 682.311 L1322 682.311 L1321.44 682.311 L1320.88 682.311 L1320.32 682.311 L1319.76 682.311 L1319.2 682.311 L1318.65 682.311 L1318.09 682.311 L1317.53 682.311 L1316.97 682.311 L1316.41 682.311 L1315.85 682.311 L1315.29 682.311 L1314.73 682.311 L1314.17 682.311 L1313.61 682.311 L1313.05 682.311 L1312.49 682.311 L1311.93 682.311 L1311.38 682.311 L1310.82 682.311 L1310.26 682.311 L1309.7 682.311 L1309.14 682.311 L1308.58 682.311 L1308.02 682.311 L1307.46 682.311 L1306.9 682.311 L1306.34 682.311 L1305.78 682.311 L1305.22 682.311 L1304.66 682.311 L1304.1 682.311 L1303.55 682.311 L1302.99 682.311 L1302.43 682.311 L1301.87 682.311 L1301.31 682.311 L1300.75 682.311 L1300.19 682.311 L1299.63 682.311 L1299.07 682.311 L1298.51 682.311 L1297.95 682.311 L1297.39 682.311 L1296.83 682.311 L1296.28 682.311 L1295.72 682.311 L1295.16 682.311 L1294.6 682.311 L1294.04 682.311 L1293.48 682.311 L1292.92 682.311 L1292.36 682.311 L1291.8 682.311 L1291.24 682.311 L1290.68 682.311 L1290.12 682.311 L1289.56 682.311 L1289 682.311 L1288.45 682.311 L1287.89 682.311 L1287.33 682.311 L1286.77 682.311 L1286.21 682.311 L1285.65 682.311 L1285.09 682.311 L1284.53 682.311 L1283.97 682.311 L1283.41 682.311 L1282.85 682.311 L1282.29 682.311 L1281.73 682.311 L1281.18 682.311 L1280.62 682.311 L1280.06 682.311 L1279.5 682.311 L1278.94 682.311 L1278.38 682.311 L1277.82 682.311 L1277.26 682.311 L1276.7 682.311 L1276.14 682.311 L1275.58 682.311 L1275.02 682.311 L1274.46 682.311 L1273.91 682.311 L1273.35 682.311 L1272.79 682.311 L1272.23 682.311 L1271.67 682.311 L1271.11 682.311 L1270.55 682.311 L1269.99 682.311 L1269.43 682.311 L1268.87 682.311 L1268.31 682.311 L1267.75 682.311 L1267.19 682.311 L1266.63 682.311 L1266.08 682.311 L1265.52 682.311 L1264.96 682.311 L1264.4 682.311 L1263.84 682.311 L1263.28 682.311 L1262.72 682.311 L1262.16 682.311 L1261.6 682.311 L1261.04 682.311 L1260.48 682.311 L1259.92 682.311 L1259.36 682.311 L1258.81 682.311 L1258.25 682.311 L1257.69 682.311 L1257.13 682.311 L1256.57 682.311 L1256.01 682.311 L1255.45 682.311 L1254.89 682.311 L1254.33 682.311 L1253.77 682.311 L1253.21 682.311 L1252.65 682.311 L1252.09 682.311 L1251.54 682.311 L1250.98 682.311 L1250.42 682.311 L1249.86 682.311 L1249.3 682.311 L1248.74 682.311 L1248.18 682.311 L1247.62 682.311 L1247.06 682.311 L1246.5 682.311 L1245.94 682.311 L1245.38 682.311 L1244.82 682.311 L1244.26 682.311 L1243.71 682.311 L1243.15 682.311 L1242.59 682.311 L1242.03 682.311 L1241.47 682.311 L1240.91 682.311 L1240.35 682.311 L1239.79 682.311 L1239.23 682.311 L1238.67 682.311 L1238.11 682.311 L1237.55 682.311 L1236.99 682.311 L1236.44 682.311 L1235.88 682.311 L1235.32 682.311 L1234.76 682.311 L1234.2 682.311 L1233.64 682.311 L1233.08 682.311 L1232.52 682.311 L1231.96 682.311 L1231.4 682.311 L1230.84 682.311 L1230.28 682.311 L1229.72 682.311 L1229.17 682.311 L1228.61 682.311 L1228.05 682.311 L1227.49 682.311 L1226.93 682.311 L1226.37 682.311 L1225.81 682.311 L1225.25 682.311 L1224.69 682.311 L1224.13 682.311 L1223.57 682.311 L1223.01 682.311 L1222.45 682.311 L1221.89 682.311 L1221.34 682.311 L1220.78 682.311 L1220.22 682.311 L1219.66 682.311 L1219.1 682.311 L1218.54 682.311 L1217.98 682.311 L1217.42 682.311 L1216.86 682.311 L1216.3 682.311 L1215.74 682.311 L1215.18 682.311 L1214.62 682.311 L1214.07 682.311 L1213.51 682.311 L1212.95 682.311 L1212.39 682.311 L1211.83 682.311 L1211.27 682.311 L1210.71 682.311 L1210.15 682.311 L1209.59 682.311 L1209.03 682.311 L1208.47 682.311 L1207.91 682.311 L1207.35 682.311 L1206.8 682.311 L1206.24 682.311 L1205.68 682.311 L1205.12 682.311 L1204.56 682.311 L1204 682.311 L1203.44 682.311 L1202.88 682.311 L1202.32 682.311 L1201.76 682.311 L1201.2 682.311 L1200.64 682.311 L1200.08 682.311 L1199.52 682.311 L1198.97 682.311 L1198.41 682.311 L1197.85 682.311 L1197.29 682.311 L1196.73 682.311 L1196.17 682.311 L1195.61 682.311 L1195.05 682.311 L1194.49 682.311 L1193.93 682.311 L1193.37 682.311 L1192.81 682.311 L1192.25 682.311 L1191.7 682.311 L1191.14 682.311 L1190.58 682.311 L1190.02 682.311 L1189.46 682.311 L1188.9 682.311 L1188.34 682.311 L1187.78 682.311 L1187.22 682.311 L1186.66 682.311 L1186.1 682.311 L1185.54 682.311 L1184.98 682.311 L1184.43 682.311 L1183.87 682.311 L1183.31 682.311 L1182.75 682.311 L1182.19 682.311 L1181.63 682.311 L1181.07 682.311 L1180.51 682.311 L1179.95 682.311 L1179.39 682.311 L1178.83 682.311 L1178.27 682.311 L1177.71 682.311 L1177.15 682.311 L1176.6 682.311 L1176.04 682.311 L1175.48 682.311 L1174.92 682.311 L1174.36 682.311 L1173.8 682.311 L1173.24 682.311 L1172.68 682.311 L1172.12 682.311 L1171.56 682.311 L1171 682.311 L1170.44 682.311 L1169.88 682.311 L1169.33 682.311 L1168.77 682.311 L1168.21 682.311 L1167.65 682.311 L1167.09 682.311 L1166.53 682.311 L1165.97 682.311 L1165.41 682.311 L1164.85 682.311 L1164.29 682.311 L1163.73 682.311 L1163.17 682.311 L1162.61 682.311 L1162.05 682.311 L1161.5 682.311 L1160.94 682.311 L1160.38 682.311 L1159.82 682.311 L1159.26 682.311 L1158.7 682.311 L1158.14 682.311 L1157.58 682.311 L1157.02 682.311 L1156.46 682.311 L1155.9 682.311 L1155.34 682.311 L1154.78 682.311 L1154.23 682.311 L1153.67 682.311 L1153.11 682.311 L1152.55 682.311 L1151.99 682.311 L1151.43 682.311 L1150.87 682.311 L1150.31 682.311 L1149.75 682.311 L1149.19 682.311 L1148.63 682.311 L1148.07 682.311 L1147.51 682.311 L1146.96 682.311 L1146.4 682.311 L1145.84 682.311 L1145.28 682.311 L1144.72 682.311 L1144.16 682.311 L1143.6 682.311 L1143.04 682.311 L1142.48 682.311 L1141.92 682.311 L1141.36 682.311 L1140.8 682.311 L1140.24 682.311 L1139.68 682.311 L1139.13 682.311 L1138.57 682.311 L1138.01 682.311 L1137.45 682.311 L1136.89 682.311 L1136.33 682.311 L1135.77 682.311 L1135.21 682.311 L1134.65 682.311 L1134.09 682.311 L1133.53 682.311 L1132.97 682.311 L1132.41 682.311 L1131.86 682.311 L1131.3 682.311 L1130.74 682.311 L1130.18 682.311 L1129.62 682.311 L1129.06 682.311 L1128.5 682.311 L1127.94 682.311 L1127.38 682.311 L1126.82 682.311 L1126.26 682.311 L1125.7 682.311 L1125.14 682.311 L1124.59 682.311 L1124.03 682.311 L1123.47 682.311 L1122.91 682.311 L1122.35 682.311 L1121.79 682.311 L1121.23 682.311 L1120.67 682.311 L1120.11 682.311 L1119.55 682.311 L1118.99 682.311 L1118.43 682.311 L1117.87 682.311 L1117.31 682.311 L1116.76 682.311 L1116.2 682.311 L1115.64 682.311 L1115.08 682.311 L1114.52 682.311 L1113.96 682.311 L1113.4 682.311 L1112.84 682.311 L1112.28 682.311 L1111.72 682.311 L1111.16 682.311 L1110.6 682.311 L1110.04 682.311 L1109.49 682.311 L1108.93 682.311 L1108.37 682.311 L1107.81 682.311 L1107.25 682.311 L1106.69 682.311 L1106.13 682.311 L1105.57 682.311 L1105.01 682.311 L1104.45 682.311 L1103.89 682.311 L1103.33 682.311 L1102.77 682.311 L1102.22 682.311 L1101.66 682.311 L1101.1 682.311 L1100.54 682.311 L1099.98 682.311 L1099.42 682.311 L1098.86 682.311 L1098.3 682.311 L1097.74 682.311 L1097.18 682.311 L1096.62 682.311 L1096.06 682.311 L1095.5 682.311 L1094.94 682.311 L1094.39 682.311 L1093.83 682.311 L1093.27 682.311 L1092.71 682.311 L1092.15 682.311 L1091.59 682.311 L1091.03 682.311 L1090.47 682.311 L1089.91 682.311 L1089.35 682.311 L1088.79 682.311 L1088.23 682.311 L1087.67 682.311 L1087.12 682.311 L1086.56 682.311 L1086 682.311 L1085.44 682.311 L1084.88 682.311 L1084.32 682.311 L1083.76 682.311 L1083.2 682.311 L1082.64 682.311 L1082.08 682.311 L1081.52 682.311 L1080.96 682.311 L1080.4 682.311 L1079.85 682.311 L1079.29 682.311 L1078.73 682.311 L1078.17 682.311 L1077.61 682.311 L1077.05 682.311 L1076.49 682.311 L1075.93 682.311 L1075.37 682.311 L1074.81 682.311 L1074.25 682.311 L1073.69 682.311 L1073.13 682.311 L1072.57 682.311 L1072.02 682.311 L1071.46 682.311 L1070.9 682.311 L1070.34 682.311 L1069.78 682.311 L1069.22 682.311 L1068.66 682.311 L1068.1 682.311 L1067.54 682.311 L1066.98 682.311 L1066.42 682.311 L1065.86 682.311 L1065.3 682.311 L1064.75 682.311 L1064.19 682.311 L1063.63 682.311 L1063.07 682.311 L1062.51 682.311 L1061.95 682.311 L1061.39 682.311 L1060.83 682.311 L1060.27 682.311 L1059.71 682.311 L1059.15 682.311 L1058.59 682.311 L1058.03 682.311 L1057.48 682.311 L1056.92 682.311 L1056.36 682.311 L1055.8 682.311 L1055.24 682.311 L1054.68 682.311 L1054.12 682.311 L1053.56 682.311 L1053 682.311 L1052.44 682.311 L1051.88 682.311 L1051.32 682.311 L1050.76 682.311 L1050.2 682.311 L1049.65 682.311 L1049.09 682.311 L1048.53 682.311 L1047.97 682.311 L1047.41 682.311 L1046.85 682.311 L1046.29 682.311 L1045.73 682.311 L1045.17 682.311 L1044.61 682.311 L1044.05 682.311 L1043.49 682.311 L1042.93 682.311 L1042.38 682.311 L1041.82 682.311 L1041.26 682.311 L1040.7 682.311 L1040.14 682.311 L1039.58 682.311 L1039.02 682.311 L1038.46 682.311 L1037.9 682.311 L1037.34 682.311 L1036.78 682.311 L1036.22 682.311 L1035.66 682.311 L1035.1 682.311 L1034.55 682.311 L1033.99 682.311 L1033.43 682.311 L1032.87 682.311 L1032.31 682.311 L1031.75 682.311 L1031.19 682.311 L1030.63 682.311 L1030.07 682.311 L1029.51 682.311 L1028.95 682.311 L1028.39 682.311 L1027.83 682.311 L1027.28 682.311 L1026.72 682.311 L1026.16 682.311 L1025.6 682.311 L1025.04 682.311 L1024.48 682.311 L1023.92 682.311 L1023.36 682.311 L1022.8 682.311 L1022.24 682.311 L1021.68 682.311 L1021.12 682.311 L1020.56 682.311 L1020.01 682.311 L1019.45 682.311 L1018.89 682.311 L1018.33 682.311 L1017.77 682.311 L1017.21 682.311 L1016.65 682.311 L1016.09 682.311 L1015.53 682.311 L1014.97 682.311 L1014.41 682.311 L1013.85 682.311 L1013.29 682.311 L1012.73 682.311 L1012.18 682.311 L1011.62 682.311 L1011.06 682.311 L1010.5 682.311 L1009.94 682.311 L1009.38 682.311 L1008.82 682.311 L1008.26 682.311 L1007.7 682.311 L1007.14 682.311 L1006.58 682.311 L1006.02 682.311 L1005.46 682.311 L1004.91 682.311 L1004.35 682.311 L1003.79 682.311 L1003.23 682.311 L1002.67 682.311 L1002.11 682.311 L1001.55 682.311 L1000.99 682.311 L1000.43 682.311 L999.872 682.311 L999.313 682.311 L998.754 682.311 L998.194 682.311 L997.635 682.311 L997.076 682.311 L996.517 682.311 L995.957 682.311 L995.398 682.311 L994.839 682.311 L994.28 682.311 L993.72 682.311 L993.161 682.311 L992.602 682.311 L992.043 682.311 L991.483 682.311 L990.924 682.311 L990.365 682.311 L989.806 682.311 L989.246 682.311 L988.687 682.311 L988.128 682.311 L987.569 682.311 L987.009 682.311 L986.45 682.311 L985.891 682.311 L985.332 682.311 L984.772 682.311 L984.213 682.311 L983.654 682.311 L983.095 682.311 L982.535 682.311 L981.976 682.311 L981.417 682.311 L980.858 682.311 L980.298 682.311 L979.739 682.311 L979.18 682.311 L978.621 682.311 L978.061 682.311 L977.502 682.311 L976.943 682.311 L976.384 682.311 L975.824 682.311 L975.265 682.311 L974.706 682.311 L974.147 682.311 L973.587 682.311 L973.028 682.311 L972.469 682.311 L971.91 682.311 L971.35 682.311 L970.791 682.311 L970.232 682.311 L969.673 682.311 L969.113 682.311 L968.554 682.311 L967.995 682.311 L967.436 682.311 L966.876 682.311 L966.317 682.311 L965.758 682.311 L965.199 682.311 L964.639 682.311 L964.08 682.311 L963.521 682.311 L962.962 682.311 L962.402 682.311 L961.843 682.311 L961.284 682.311 L960.725 682.311 L960.165 682.311 L959.606 682.311 L959.047 682.311 L958.488 682.311 L957.928 682.311 L957.369 682.311 L956.81 682.311 L956.251 682.311 L955.691 682.311 L955.132 682.311 L954.573 682.311 L954.014 682.311 L953.454 682.311 L952.895 682.311 L952.336 682.311 L951.777 682.311 L951.217 682.311 L950.658 682.311 L950.099 682.311 L949.54 682.311 L948.98 682.311 L948.421 682.311 L947.862 682.311 L947.303 682.311 L946.743 682.311 L946.184 682.311 L945.625 682.311 L945.066 682.311 L944.506 682.311 L943.947 682.311 L943.388 682.311 L942.829 682.311 L942.269 682.311 L941.71 682.311 L941.151 682.311 L940.592 682.311 L940.032 682.311 L939.473 682.311 L938.914 682.311 L938.355 682.311 L937.795 682.311 L937.236 682.311 L936.677 682.311 L936.118 682.311 L935.558 682.311 L934.999 682.311 L934.44 682.311 L933.881 682.311 L933.321 682.311 L932.762 682.311 L932.203 682.311 L931.644 682.311 L931.084 682.311 L930.525 682.311 L929.966 682.311 L929.406 682.311 L928.847 682.311 L928.288 682.311 L927.729 682.311 L927.169 682.311 L926.61 682.311 L926.051 682.311 L925.492 682.311 L924.932 682.311 L924.373 682.311 L923.814 682.311 L923.255 682.311 L922.695 682.311 L922.136 682.311 L921.577 682.311 L921.018 682.311 L920.458 682.311 L919.899 682.311 L919.34 682.311 L918.781 682.311 L918.221 682.311 L917.662 682.311 L917.103 682.311 L916.544 682.311 L915.984 682.311 L915.425 682.311 L914.866 682.311 L914.307 682.311 L913.747 682.311 L913.188 682.311 L912.629 682.311 L912.07 682.311 L911.51 682.311 L910.951 682.311 L910.392 682.311 L909.833 682.311 L909.273 682.311 L908.714 682.311 L908.155 682.311 L907.596 682.311 L907.036 682.311 L906.477 682.311 L905.918 682.311 L905.359 682.311 L904.799 682.311 L904.24 682.311 L903.681 682.311 L903.122 682.311 L902.562 682.311 L902.003 682.311 L901.444 682.311 L900.885 682.311 L900.325 682.311 L899.766 682.311 L899.207 682.311 L898.648 682.311 L898.088 682.311 L897.529 682.311 L896.97 682.311 L896.411 682.311 L895.851 682.311 L895.292 682.311 L894.733 682.311 L894.174 682.311 L893.614 682.311 L893.055 682.311 L892.496 682.311 L891.937 682.311 L891.377 682.311 L890.818 682.311 L890.259 682.311 L889.7 682.311 L889.14 682.311 L888.581 682.311 L888.022 682.311 L887.463 682.311 L886.903 682.311 L886.344 682.311 L885.785 682.311 L885.226 682.311 L884.666 682.311 L884.107 682.311 L883.548 682.311 L882.989 682.311 L882.429 682.311 L881.87 682.311 L881.311 682.311 L880.752 682.311 L880.192 682.311 L879.633 682.311 L879.074 682.311 L878.515 682.311 L877.955 682.311 L877.396 682.311 L876.837 682.311 L876.278 682.311 L875.718 682.311 L875.159 682.311 L874.6 682.311 L874.041 682.311 L873.481 682.311 L872.922 682.311 L872.363 682.311 L871.804 682.311 L871.244 682.311 L870.685 682.311 L870.126 682.311 L869.567 682.311 L869.007 682.311 L868.448 682.311 L867.889 682.311 L867.33 682.311 L866.77 682.311 L866.211 682.311 L865.652 682.311 L865.093 682.311 L864.533 682.311 L863.974 682.311 L863.415 682.311 L862.856 682.311 L862.296 682.311 L861.737 682.311 L861.178 682.311 L860.619 682.311 L860.059 682.311 L859.5 682.311 L858.941 682.311 L858.382 682.311 L857.822 682.311 L857.263 682.311 L856.704 682.311 L856.145 682.311 L855.585 682.311 L855.026 682.311 L854.467 682.311 L853.908 682.311 L853.348 682.311 L852.789 682.311 L852.23 682.311 L851.671 682.311 L851.111 682.311 L850.552 682.311 L849.993 682.311 L849.434 682.311 L848.874 682.311 L848.315 682.311 L847.756 682.311 L847.197 682.311 L846.637 682.311 L846.078 682.311 L845.519 682.311 L844.96 682.311 L844.4 682.311 L843.841 682.311 L843.282 682.311 L842.723 682.311 L842.163 682.311 L841.604 682.311 L841.045 682.311 L840.486 682.311 L839.926 682.311 L839.367 682.311 L838.808 682.311 L838.249 682.311 L837.689 682.311 L837.13 682.311 L836.571 682.311 L836.012 682.311 L835.452 682.311 L834.893 682.311 L834.334 682.311 L833.775 682.311 L833.215 682.311 L832.656 682.311 L832.097 682.311 L831.538 682.311 L830.978 682.311 L830.419 682.311 L829.86 682.311 L829.301 682.311 L828.741 682.311 L828.182 682.311 L827.623 682.311 L827.064 682.311 L826.504 682.311 L825.945 682.311 L825.386 682.311 L824.827 682.311 L824.267 682.311 L823.708 682.311 L823.149 682.311 L822.59 682.311 L822.03 682.311 L821.471 682.311 L820.912 682.311 L820.353 682.311 L819.793 682.311 L819.234 682.311 L818.675 682.311 L818.116 682.311 L817.556 682.311 L816.997 682.311 L816.438 682.311 L815.879 682.311 L815.319 682.311 L814.76 682.311 L814.201 682.311 L813.642 682.311 L813.082 682.311 L812.523 682.311 L811.964 682.311 L811.405 682.311 L810.845 682.311 L810.286 682.311 L809.727 682.311 L809.168 682.311 L808.608 682.311 L808.049 682.311 L807.49 682.311 L806.931 682.311 L806.371 682.311 L805.812 682.311 L805.253 682.311 L804.693 682.311 L804.134 682.311 L803.575 682.311 L803.016 682.311 L802.456 682.311 L801.897 682.311 L801.338 682.311 L800.779 682.311 L800.219 682.311 L799.66 682.311 L799.101 682.311 L798.542 682.311 L797.982 682.311 L797.423 682.311 L796.864 682.311 L796.305 682.311 L795.745 682.311 L795.186 682.311 L794.627 682.311 L794.068 682.311 L793.508 682.311 L792.949 682.311 L792.39 682.311 L791.831 682.311 L791.271 682.311 L790.712 682.311 L790.153 682.311 L789.594 682.311 L789.034 682.311 L788.475 682.311 L787.916 682.311 L787.357 682.311 L786.797 682.311 L786.238 682.311 L785.679 682.311 L785.12 682.311 L784.56 682.311 L784.001 682.311 L783.442 682.311 L782.883 682.311 L782.323 682.311 L781.764 682.311 L781.205 682.311 L780.646 682.311 L780.086 682.311 L779.527 682.311 L778.968 682.311 L778.409 682.311 L777.849 682.311 L777.29 682.311 L776.731 682.311 L776.172 682.311 L775.612 682.311 L775.053 682.311 L774.494 682.311 L773.935 682.311 L773.375 682.311 L772.816 682.311 L772.257 682.311 L771.698 682.311 L771.138 682.311 L770.579 682.311 L770.02 682.311 L769.461 682.311 L768.901 682.311 L768.342 682.311 L767.783 682.311 L767.224 682.311 L766.664 682.311 L766.105 682.311 L765.546 682.311 L764.987 682.311 L764.427 682.311 L763.868 682.311 L763.309 682.311 L762.75 682.311 L762.19 682.311 L761.631 682.311 L761.072 682.311 L760.513 682.311 L759.953 682.311 L759.394 682.311 L758.835 682.311 L758.276 682.311 L757.716 682.311 L757.157 682.311 L756.598 682.311 L756.039 682.311 L755.479 682.311 L754.92 682.311 L754.361 682.311 L753.802 682.311 L753.242 682.311 L752.683 682.311 L752.124 682.311 L751.565 682.311 L751.005 682.311 L750.446 682.311 L749.887 682.311 L749.328 682.311 L748.768 682.311 L748.209 682.311 L747.65 682.311 L747.091 682.311 L746.531 682.311 L745.972 682.311 L745.413 682.311 L744.854 682.311 L744.294 682.311 L743.735 682.311 L743.176 682.311 L742.617 682.311 L742.057 682.311 L741.498 682.311 L740.939 682.311 L740.38 682.311 L739.82 682.311 L739.261 682.311 L738.702 682.311 L738.143 682.311 L737.583 682.311 L737.024 682.311 L736.465 682.311 L735.906 682.311 L735.346 682.311 L734.787 682.311 L734.228 682.311 L733.669 682.311 L733.109 682.311 L732.55 682.311 L731.991 682.311 L731.432 682.311 L730.872 682.311 L730.313 682.311 L729.754 682.311 L729.195 682.311 L728.635 682.311 L728.076 682.311 L727.517 682.311 L726.958 682.311 L726.398 682.311 L725.839 682.311 L725.28 682.311 L724.721 682.311 L724.161 682.311 L723.602 682.311 L723.043 682.311 L722.484 682.311 L721.924 682.311 L721.365 682.311 L720.806 682.311 L720.247 682.311  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.917 720.806,686.917 721.365,686.917 721.924,686.917 722.484,686.917 723.043,686.917 723.602,686.917 724.161,686.917 724.721,686.917 725.28,686.917 725.839,686.917 726.398,686.917 726.958,686.917 727.517,686.917 728.076,686.917 728.635,686.917 729.195,686.917 729.754,686.917 730.313,686.917 730.872,686.917 731.432,686.917 731.991,686.917 732.55,686.917 733.109,686.917 733.669,686.917 734.228,686.917 734.787,686.917 735.346,686.917 735.906,686.917 736.465,686.917 737.024,686.917 737.583,686.917 738.143,686.917 738.702,686.917 739.261,686.917 739.82,686.917 740.38,686.917 740.939,686.917 741.498,686.917 742.057,686.917 742.617,686.917 743.176,686.917 743.735,686.917 744.294,686.917 744.854,686.917 745.413,686.917 745.972,686.917 746.531,686.917 747.091,686.917 747.65,686.917 748.209,686.917 748.768,686.917 749.328,686.917 749.887,686.917 750.446,686.917 751.005,686.917 751.565,686.917 752.124,686.917 752.683,686.917 753.242,686.917 753.802,686.917 754.361,686.917 754.92,686.917 755.479,686.917 756.039,686.917 756.598,686.917 757.157,686.917 757.716,686.917 758.276,686.917 758.835,686.917 759.394,686.917 759.953,686.917 760.513,686.917 761.072,686.917 761.631,686.917 762.19,686.917 762.75,686.917 763.309,686.917 763.868,686.917 764.427,686.917 764.987,686.917 765.546,686.917 766.105,686.917 766.664,686.917 767.224,686.917 767.783,686.917 768.342,686.917 768.901,686.917 769.461,686.917 770.02,686.917 770.579,686.917 771.138,686.917 771.698,686.917 772.257,686.917 772.816,686.917 773.375,686.917 773.935,686.917 774.494,686.917 775.053,686.917 775.612,686.917 776.172,686.917 776.731,686.917 777.29,686.917 777.849,686.917 778.409,686.917 778.968,686.917 779.527,686.917 780.086,686.917 780.646,686.917 781.205,686.917 781.764,686.917 782.323,686.917 782.883,686.917 783.442,686.917 784.001,686.917 784.56,686.917 785.12,686.917 785.679,686.917 786.238,686.917 786.797,686.917 787.357,686.917 787.916,686.917 788.475,686.917 789.034,686.917 789.594,686.917 790.153,686.917 790.712,686.917 791.271,686.917 791.831,686.917 792.39,686.917 792.949,686.917 793.508,686.917 794.068,686.917 794.627,686.917 795.186,686.917 795.745,686.917 796.305,686.917 796.864,686.917 797.423,686.917 797.982,686.917 798.542,686.917 799.101,686.917 799.66,686.917 800.219,686.917 800.779,686.917 801.338,686.917 801.897,686.917 802.456,686.917 803.016,686.917 803.575,686.917 804.134,686.917 804.693,686.917 805.253,686.917 805.812,686.917 806.371,686.917 806.931,686.917 807.49,686.917 808.049,686.917 808.608,686.917 809.168,686.917 809.727,686.917 810.286,686.917 810.845,686.917 811.405,686.917 811.964,686.917 812.523,686.917 813.082,686.917 813.642,686.917 814.201,686.917 814.76,686.917 815.319,686.917 815.879,686.917 816.438,686.917 816.997,686.917 817.556,686.917 818.116,686.917 818.675,686.917 819.234,686.917 819.793,686.917 820.353,686.917 820.912,686.917 821.471,686.917 822.03,686.917 822.59,686.917 823.149,686.917 823.708,686.917 824.267,686.917 824.827,686.917 825.386,686.917 825.945,686.917 826.504,686.917 827.064,686.917 827.623,686.917 828.182,686.917 828.741,686.917 829.301,686.917 829.86,686.917 830.419,686.917 830.978,686.917 831.538,686.917 832.097,686.917 832.656,686.917 833.215,686.917 833.775,686.917 834.334,686.917 834.893,686.917 835.452,686.917 836.012,686.917 836.571,686.917 837.13,686.917 837.689,686.917 838.249,686.917 838.808,686.917 839.367,686.917 839.926,686.917 840.486,686.917 841.045,686.917 841.604,686.917 842.163,686.917 842.723,686.917 843.282,686.917 843.841,686.917 844.4,686.917 844.96,686.917 845.519,686.917 846.078,686.917 846.637,686.917 847.197,686.917 847.756,686.917 848.315,686.917 848.874,686.917 849.434,686.917 849.993,686.917 850.552,686.917 851.111,686.917 851.671,686.917 852.23,686.917 852.789,686.917 853.348,686.917 853.908,686.917 854.467,686.917 855.026,686.917 855.585,686.917 856.145,686.917 856.704,686.917 857.263,686.917 857.822,686.917 858.382,686.917 858.941,686.917 859.5,686.917 860.059,686.917 860.619,686.917 861.178,686.917 861.737,686.917 862.296,686.917 862.856,686.917 863.415,686.917 863.974,686.917 864.533,686.917 865.093,686.917 865.652,686.917 866.211,686.917 866.77,686.917 867.33,686.917 867.889,686.917 868.448,686.917 869.007,686.917 869.567,686.917 870.126,686.917 870.685,686.917 871.244,686.917 871.804,686.917 872.363,686.917 872.922,686.917 873.481,686.917 874.041,686.917 874.6,686.917 875.159,686.917 875.718,686.917 876.278,686.917 876.837,686.917 877.396,686.917 877.955,686.917 878.515,686.917 879.074,686.917 879.633,686.917 880.192,686.917 880.752,686.917 881.311,686.917 881.87,686.917 882.429,686.917 882.989,686.917 883.548,686.917 884.107,686.917 884.666,686.917 885.226,686.917 885.785,686.917 886.344,686.917 886.903,686.917 887.463,686.917 888.022,686.917 888.581,686.917 889.14,686.917 889.7,686.917 890.259,686.917 890.818,686.917 891.377,686.917 891.937,686.917 892.496,686.917 893.055,686.917 893.614,686.917 894.174,686.917 894.733,686.917 895.292,686.917 895.851,686.917 896.411,686.917 896.97,686.917 897.529,686.917 898.088,686.917 898.648,686.917 899.207,686.917 899.766,686.917 900.325,686.917 900.885,686.917 901.444,686.917 902.003,686.917 902.562,686.917 903.122,686.917 903.681,686.917 904.24,686.917 904.799,686.917 905.359,686.917 905.918,686.917 906.477,686.917 907.036,686.917 907.596,686.917 908.155,686.917 908.714,686.917 909.273,686.917 909.833,686.917 910.392,686.917 910.951,686.917 911.51,686.917 912.07,686.917 912.629,686.917 913.188,686.917 913.747,686.917 914.307,686.917 914.866,686.917 915.425,686.917 915.984,686.917 916.544,686.917 917.103,686.917 917.662,686.917 918.221,686.917 918.781,686.917 919.34,686.917 919.899,686.917 920.458,686.917 921.018,686.917 921.577,686.917 922.136,686.917 922.695,686.917 923.255,686.917 923.814,686.917 924.373,686.917 924.932,686.917 925.492,686.917 926.051,686.917 926.61,686.917 927.169,686.917 927.729,686.917 928.288,686.917 928.847,686.917 929.406,686.917 929.966,686.917 930.525,686.917 931.084,686.917 931.644,686.917 932.203,686.917 932.762,686.917 933.321,686.917 933.881,686.917 934.44,686.917 934.999,686.917 935.558,686.917 936.118,686.917 936.677,686.917 937.236,686.917 937.795,686.917 938.355,686.917 938.914,686.917 939.473,686.917 940.032,686.917 940.592,686.917 941.151,686.917 941.71,686.917 942.269,686.917 942.829,686.917 943.388,686.917 943.947,686.917 944.506,686.917 945.066,686.917 945.625,686.917 946.184,686.917 946.743,686.917 947.303,686.917 947.862,686.917 948.421,686.917 948.98,686.917 949.54,686.917 950.099,686.917 950.658,686.917 951.217,686.917 951.777,686.917 952.336,686.917 952.895,686.917 953.454,686.917 954.014,686.917 954.573,686.917 955.132,686.917 955.691,686.917 956.251,686.917 956.81,686.917 957.369,686.917 957.928,686.917 958.488,686.917 959.047,686.917 959.606,686.917 960.165,686.917 960.725,686.917 961.284,686.917 961.843,686.917 962.402,686.917 962.962,686.917 963.521,686.917 964.08,686.917 964.639,686.917 965.199,686.917 965.758,686.917 966.317,686.917 966.876,686.917 967.436,686.917 967.995,686.917 968.554,686.917 969.113,686.917 969.673,686.917 970.232,686.917 970.791,686.917 971.35,686.917 971.91,686.917 972.469,686.917 973.028,686.917 973.587,686.917 974.147,686.917 974.706,686.917 975.265,686.917 975.824,686.917 976.384,686.917 976.943,686.917 977.502,686.917 978.061,686.917 978.621,686.917 979.18,686.917 979.739,686.917 980.298,686.917 980.858,686.917 981.417,686.917 981.976,686.917 982.535,686.917 983.095,686.917 983.654,686.917 984.213,686.917 984.772,686.917 985.332,686.917 985.891,686.917 986.45,686.917 987.009,686.917 987.569,686.917 988.128,686.917 988.687,686.917 989.246,686.917 989.806,686.917 990.365,686.917 990.924,686.917 991.483,686.917 992.043,686.917 992.602,686.917 993.161,686.917 993.72,686.917 994.28,686.917 994.839,686.917 995.398,686.917 995.957,686.917 996.517,686.917 997.076,686.917 997.635,686.917 998.194,686.917 998.754,686.917 999.313,686.917 999.872,686.917 1000.43,686.917 1000.99,686.917 1001.55,686.917 1002.11,686.917 1002.67,686.917 1003.23,686.917 1003.79,686.917 1004.35,686.917 1004.91,686.917 1005.46,686.917 1006.02,686.917 1006.58,686.917 1007.14,686.917 1007.7,686.917 1008.26,686.917 1008.82,686.917 1009.38,686.917 1009.94,686.917 1010.5,686.917 1011.06,686.917 1011.62,686.917 1012.18,686.917 1012.73,686.917 1013.29,686.917 1013.85,686.917 1014.41,686.917 1014.97,686.917 1015.53,686.917 1016.09,686.917 1016.65,686.917 1017.21,686.917 1017.77,686.917 1018.33,686.917 1018.89,686.917 1019.45,686.917 1020.01,686.917 1020.56,686.917 1021.12,686.917 1021.68,686.917 1022.24,686.917 1022.8,686.917 1023.36,686.917 1023.92,686.917 1024.48,686.917 1025.04,686.917 1025.6,686.917 1026.16,686.917 1026.72,686.917 1027.28,686.917 1027.83,686.917 1028.39,686.917 1028.95,686.917 1029.51,686.917 1030.07,686.917 1030.63,686.917 1031.19,686.917 1031.75,686.917 1032.31,686.917 1032.87,686.917 1033.43,686.917 1033.99,686.917 1034.55,686.917 1035.1,686.917 1035.66,686.917 1036.22,686.917 1036.78,686.917 1037.34,686.917 1037.9,686.917 1038.46,686.917 1039.02,686.917 1039.58,686.917 1040.14,686.917 1040.7,686.917 1041.26,686.917 1041.82,686.917 1042.38,686.917 1042.93,686.917 1043.49,686.917 1044.05,686.917 1044.61,686.917 1045.17,686.917 1045.73,686.917 1046.29,686.917 1046.85,686.917 1047.41,686.917 1047.97,686.917 1048.53,686.917 1049.09,686.917 1049.65,686.917 1050.2,686.917 1050.76,686.917 1051.32,686.917 1051.88,686.917 1052.44,686.917 1053,686.917 1053.56,686.917 1054.12,686.917 1054.68,686.917 1055.24,686.917 1055.8,686.917 1056.36,686.917 1056.92,686.917 1057.48,686.917 1058.03,686.917 1058.59,686.917 1059.15,686.917 1059.71,686.917 1060.27,686.917 1060.83,686.917 1061.39,686.917 1061.95,686.917 1062.51,686.917 1063.07,686.917 1063.63,686.917 1064.19,686.917 1064.75,686.917 1065.3,686.917 1065.86,686.917 1066.42,686.917 1066.98,686.917 1067.54,686.917 1068.1,686.917 1068.66,686.917 1069.22,686.917 1069.78,686.917 1070.34,686.917 1070.9,686.917 1071.46,686.917 1072.02,686.917 1072.57,686.917 1073.13,686.917 1073.69,686.917 1074.25,686.917 1074.81,686.917 1075.37,686.917 1075.93,686.917 1076.49,686.917 1077.05,686.917 1077.61,686.917 1078.17,686.917 1078.73,686.917 1079.29,686.917 1079.85,686.917 1080.4,686.917 1080.96,686.917 1081.52,686.917 1082.08,686.917 1082.64,686.917 1083.2,686.917 1083.76,686.917 1084.32,686.917 1084.88,686.917 1085.44,686.917 1086,686.917 1086.56,686.917 1087.12,686.917 1087.67,686.917 1088.23,686.917 1088.79,686.917 1089.35,686.917 1089.91,686.917 1090.47,686.917 1091.03,686.917 1091.59,686.917 1092.15,686.917 1092.71,686.917 1093.27,686.917 1093.83,686.917 1094.39,686.917 1094.94,686.917 1095.5,686.917 1096.06,686.917 1096.62,686.917 1097.18,686.917 1097.74,686.917 1098.3,686.917 1098.86,686.917 1099.42,686.917 1099.98,686.917 1100.54,686.917 1101.1,686.917 1101.66,686.917 1102.22,686.917 1102.77,686.917 1103.33,686.917 1103.89,686.917 1104.45,686.917 1105.01,686.917 1105.57,686.917 1106.13,686.917 1106.69,686.917 1107.25,686.917 1107.81,686.917 1108.37,686.917 1108.93,686.917 1109.49,686.917 1110.04,686.917 1110.6,686.917 1111.16,686.917 1111.72,686.917 1112.28,686.917 1112.84,686.917 1113.4,686.917 1113.96,686.917 1114.52,686.917 1115.08,686.917 1115.64,686.917 1116.2,686.917 1116.76,686.917 1117.31,686.917 1117.87,686.917 1118.43,686.917 1118.99,686.917 1119.55,686.917 1120.11,686.917 1120.67,686.917 1121.23,686.917 1121.79,686.917 1122.35,686.917 1122.91,686.917 1123.47,686.917 1124.03,686.917 1124.59,686.917 1125.14,686.917 1125.7,686.917 1126.26,686.917 1126.82,686.917 1127.38,686.917 1127.94,686.917 1128.5,686.917 1129.06,686.917 1129.62,686.917 1130.18,686.917 1130.74,686.917 1131.3,686.917 1131.86,686.917 1132.41,686.917 1132.97,686.917 1133.53,686.917 1134.09,686.917 1134.65,686.917 1135.21,686.917 1135.77,686.917 1136.33,686.917 1136.89,686.917 1137.45,686.917 1138.01,686.917 1138.57,686.917 1139.13,686.917 1139.68,686.917 1140.24,686.917 1140.8,686.917 1141.36,686.917 1141.92,686.917 1142.48,686.917 1143.04,686.917 1143.6,686.917 1144.16,686.917 1144.72,686.917 1145.28,686.917 1145.84,686.917 1146.4,686.917 1146.96,686.917 1147.51,686.917 1148.07,686.917 1148.63,686.917 1149.19,686.917 1149.75,686.917 1150.31,686.917 1150.87,686.917 1151.43,686.917 1151.99,686.917 1152.55,686.917 1153.11,686.917 1153.67,686.917 1154.23,686.917 1154.78,686.917 1155.34,686.917 1155.9,686.917 1156.46,686.917 1157.02,686.917 1157.58,686.917 1158.14,686.917 1158.7,686.917 1159.26,686.917 1159.82,686.917 1160.38,686.917 1160.94,686.917 1161.5,686.917 1162.05,686.917 1162.61,686.917 1163.17,686.917 1163.73,686.917 1164.29,686.917 1164.85,686.917 1165.41,686.917 1165.97,686.917 1166.53,686.917 1167.09,686.917 1167.65,686.917 1168.21,686.917 1168.77,686.917 1169.33,686.917 1169.88,686.917 1170.44,686.917 1171,686.917 1171.56,686.917 1172.12,686.917 1172.68,686.917 1173.24,686.917 1173.8,686.917 1174.36,686.917 1174.92,686.917 1175.48,686.917 1176.04,686.917 1176.6,686.917 1177.15,686.917 1177.71,686.917 1178.27,686.917 1178.83,686.917 1179.39,686.917 1179.95,686.917 1180.51,686.917 1181.07,686.917 1181.63,686.917 1182.19,686.917 1182.75,686.917 1183.31,686.917 1183.87,686.917 1184.43,686.917 1184.98,686.917 1185.54,686.917 1186.1,686.917 1186.66,686.917 1187.22,686.917 1187.78,686.917 1188.34,686.917 1188.9,686.917 1189.46,686.917 1190.02,686.917 1190.58,686.917 1191.14,686.917 1191.7,686.917 1192.25,686.917 1192.81,686.917 1193.37,686.917 1193.93,686.917 1194.49,686.917 1195.05,686.917 1195.61,686.917 1196.17,686.917 1196.73,686.917 1197.29,686.917 1197.85,686.917 1198.41,686.917 1198.97,686.917 1199.52,686.917 1200.08,686.917 1200.64,686.917 1201.2,686.917 1201.76,686.917 1202.32,686.917 1202.88,686.917 1203.44,686.917 1204,686.917 1204.56,686.917 1205.12,686.917 1205.68,686.917 1206.24,686.917 1206.8,686.917 1207.35,686.917 1207.91,686.917 1208.47,686.917 1209.03,686.917 1209.59,686.917 1210.15,686.917 1210.71,686.917 1211.27,686.917 1211.83,686.917 1212.39,686.917 1212.95,686.917 1213.51,686.917 1214.07,686.917 1214.62,686.917 1215.18,686.917 1215.74,686.917 1216.3,686.917 1216.86,686.917 1217.42,686.917 1217.98,686.917 1218.54,686.917 1219.1,686.917 1219.66,686.917 1220.22,686.917 1220.78,686.917 1221.34,686.917 1221.89,686.917 1222.45,686.917 1223.01,686.917 1223.57,686.917 1224.13,686.917 1224.69,686.917 1225.25,686.917 1225.81,686.917 1226.37,686.917 1226.93,686.917 1227.49,686.917 1228.05,686.917 1228.61,686.917 1229.17,686.917 1229.72,686.917 1230.28,686.917 1230.84,686.917 1231.4,686.917 1231.96,686.917 1232.52,686.917 1233.08,686.917 1233.64,686.917 1234.2,686.917 1234.76,686.917 1235.32,686.917 1235.88,686.917 1236.44,686.917 1236.99,686.917 1237.55,686.917 1238.11,686.917 1238.67,686.917 1239.23,686.917 1239.79,686.917 1240.35,686.917 1240.91,686.917 1241.47,686.917 1242.03,686.917 1242.59,686.917 1243.15,686.917 1243.71,686.917 1244.26,686.917 1244.82,686.917 1245.38,686.917 1245.94,686.917 1246.5,686.917 1247.06,686.917 1247.62,686.917 1248.18,686.917 1248.74,686.917 1249.3,686.917 1249.86,686.917 1250.42,686.917 1250.98,686.917 1251.54,686.917 1252.09,686.917 1252.65,686.917 1253.21,686.917 1253.77,686.917 1254.33,686.917 1254.89,686.917 1255.45,686.917 1256.01,686.917 1256.57,686.917 1257.13,686.917 1257.69,686.917 1258.25,686.917 1258.81,686.917 1259.36,686.917 1259.92,686.917 1260.48,686.917 1261.04,686.917 1261.6,686.917 1262.16,686.917 1262.72,686.917 1263.28,686.917 1263.84,686.917 1264.4,686.917 1264.96,686.917 1265.52,686.917 1266.08,686.917 1266.63,686.917 1267.19,686.917 1267.75,686.917 1268.31,686.917 1268.87,686.917 1269.43,686.917 1269.99,686.917 1270.55,686.917 1271.11,686.917 1271.67,686.917 1272.23,686.917 1272.79,686.917 1273.35,686.917 1273.91,686.917 1274.46,686.917 1275.02,686.917 1275.58,686.917 1276.14,686.917 1276.7,686.917 1277.26,686.917 1277.82,686.917 1278.38,686.917 1278.94,686.917 1279.5,686.917 1280.06,686.917 1280.62,686.917 1281.18,686.917 1281.73,686.917 1282.29,686.917 1282.85,686.917 1283.41,686.917 1283.97,686.917 1284.53,686.917 1285.09,686.917 1285.65,686.917 1286.21,686.917 1286.77,686.917 1287.33,686.917 1287.89,686.917 1288.45,686.917 1289,686.917 1289.56,686.917 1290.12,686.917 1290.68,686.917 1291.24,686.917 1291.8,686.917 1292.36,686.917 1292.92,686.917 1293.48,686.917 1294.04,686.917 1294.6,686.917 1295.16,686.917 1295.72,686.917 1296.28,686.917 1296.83,686.917 1297.39,686.917 1297.95,686.917 1298.51,686.917 1299.07,686.917 1299.63,686.917 1300.19,686.917 1300.75,686.917 1301.31,686.917 1301.87,686.917 1302.43,686.917 1302.99,686.917 1303.55,686.917 1304.1,686.917 1304.66,686.917 1305.22,686.917 1305.78,686.917 1306.34,686.917 1306.9,686.917 1307.46,686.917 1308.02,686.917 1308.58,686.917 1309.14,686.917 1309.7,686.917 1310.26,686.917 1310.82,686.917 1311.38,686.917 1311.93,686.917 1312.49,686.917 1313.05,686.917 1313.61,686.917 1314.17,686.917 1314.73,686.917 1315.29,686.917 1315.85,686.917 1316.41,686.917 1316.97,686.917 1317.53,686.917 1318.09,686.917 1318.65,686.917 1319.2,686.917 1319.76,686.917 1320.32,686.917 1320.88,686.917 1321.44,686.917 1322,686.917 1322.56,686.917 1323.12,686.917 1323.68,686.917 1324.24,686.917 1324.8,686.917 1325.36,686.917 1325.92,686.917 1326.47,686.917 1327.03,686.917 1327.59,686.917 1328.15,686.917 1328.71,686.917 1329.27,686.917 1329.83,686.917 1330.39,686.917 1330.95,686.917 1331.51,686.917 1332.07,686.917 1332.63,686.917 1333.19,686.917 1333.75,686.917 1334.3,686.917 1334.86,686.917 1335.42,686.917 1335.98,686.917 1336.54,686.917 1337.1,686.917 1337.66,686.917 1338.22,686.917 1338.78,686.917 1339.34,686.917 1339.9,686.917 1340.46,686.917 1341.02,686.917 1341.57,686.917 1342.13,686.917 1342.69,686.917 1343.25,686.917 1343.81,686.917 1344.37,686.917 1344.93,686.917 1345.49,686.917 1346.05,686.917 1346.61,686.917 1347.17,686.917 1347.73,686.917 1348.29,686.917 1348.84,686.917 1349.4,686.917 1349.96,686.917 1350.52,686.917 1351.08,686.917 1351.64,686.917 1352.2,686.917 1352.76,686.917 1353.32,686.917 1353.88,686.917 1354.44,686.917 1355,686.917 1355.56,686.917 1356.12,686.917 1356.67,686.917 1357.23,686.917 1357.79,686.917 1358.35,686.917 1358.91,686.917 1359.47,686.917 1360.03,686.917 1360.59,686.917 1361.15,686.917 1361.71,686.917 1362.27,686.917 1362.83,686.917 1363.39,686.917 1363.94,686.917 1364.5,686.917 1365.06,686.917 1365.62,686.917 1366.18,686.917 1366.74,686.917 1367.3,686.917 1367.86,686.917 1368.42,686.917 1368.98,686.917 1369.54,686.917 1370.1,686.917 1370.66,686.917 1371.21,686.917 1371.77,686.917 1372.33,686.917 1372.89,686.917 1373.45,686.917 1374.01,686.917 1374.57,686.917 1375.13,686.917 1375.69,686.917 1376.25,686.917 1376.81,686.917 1377.37,686.917 1377.93,686.917 1378.49,686.917 1379.04,686.917 1379.6,686.917 1380.16,686.917 1380.72,686.917 1381.28,686.917 1381.84,686.917 1382.4,686.917 1382.96,686.917 1383.52,686.917 1384.08,686.917 1384.64,686.917 1385.2,686.917 1385.76,686.917 1386.31,686.917 1386.87,686.917 1387.43,686.917 1387.99,686.917 1388.55,686.917 1389.11,686.917 1389.67,686.917 1390.23,686.917 1390.79,686.917 1391.35,686.917 1391.91,686.917 1392.47,686.917 1393.03,686.917 1393.58,686.917 1394.14,686.917 1394.7,686.917 1395.26,686.917 1395.82,686.917 1396.38,686.917 1396.94,686.917 1397.5,686.917 1398.06,686.917 1398.62,686.917 1399.18,686.917 1399.74,686.917 1400.3,686.917 1400.86,686.917 1401.41,686.917 1401.97,686.917 1402.53,686.917 1403.09,686.917 1403.65,686.917 1404.21,686.917 1404.77,686.917 1405.33,686.917 1405.89,686.917 1406.45,686.917 1407.01,686.917 1407.57,686.917 1408.13,686.917 1408.68,686.917 1409.24,686.917 1409.8,686.917 1410.36,686.917 1410.92,686.917 1411.48,686.917 1412.04,686.917 1412.6,686.917 1413.16,686.917 1413.72,686.917 1414.28,686.917 1414.84,686.917 1415.4,686.917 1415.95,686.917 1416.51,686.917 1417.07,686.917 1417.63,686.917 1418.19,686.917 1418.75,686.917 1419.31,686.917 1419.87,686.917 1420.43,686.917 1420.99,686.917 1421.55,686.917 1422.11,686.917 1422.67,686.917 1423.23,686.917 1423.78,686.917 1424.34,686.917 1424.9,686.917 1425.46,686.917 1426.02,686.917 1426.58,686.917 1427.14,686.917 1427.7,686.917 1428.26,686.917 1428.82,686.917 1429.38,686.917 1429.94,686.917 1430.5,686.917 1431.05,686.917 1431.61,686.917 1432.17,686.917 1432.73,686.917 1433.29,686.917 1433.85,686.917 1434.41,686.917 1434.97,686.917 1435.53,686.917 1436.09,686.917 1436.65,686.917 1437.21,686.917 1437.77,686.917 1438.33,686.917 1438.88,686.917 1439.44,686.917 1440,686.917 1440.56,686.917 1441.12,686.917 1441.68,686.917 1442.24,686.917 1442.8,686.917 1443.36,686.917 1443.92,686.917 1444.48,686.917 1445.04,686.917 1445.6,686.917 1446.15,686.917 1446.71,686.917 1447.27,686.917 1447.83,686.917 1448.39,686.917 1448.95,686.917 1449.51,686.917 1450.07,686.917 1450.63,686.917 1451.19,686.917 1451.75,686.917 1452.31,686.917 1452.87,686.917 1453.42,686.917 1453.98,686.917 1454.54,686.917 1455.1,686.917 1455.66,686.917 1456.22,686.917 1456.78,686.917 1457.34,686.917 1457.9,686.917 1458.46,686.917 1459.02,686.917 1459.58,686.917 1460.14,686.917 1460.7,686.917 1461.25,686.917 1461.81,686.917 1462.37,686.917 1462.93,686.917 1463.49,686.917 1464.05,686.917 1464.61,686.917 1465.17,686.917 1465.73,686.917 1466.29,686.917 1466.85,686.917 1467.41,686.917 1467.97,686.917 1468.52,686.917 1469.08,686.917 1469.64,686.917 1470.2,686.917 1470.76,686.917 1471.32,686.917 1471.88,686.917 1472.44,686.917 1473,686.917 1473.56,686.917 1474.12,686.917 1474.68,686.917 1475.24,686.917 1475.79,686.917 1476.35,686.917 1476.91,686.917 1477.47,686.917 1478.03,686.917 1478.59,686.917 1479.15,686.917 1479.71,686.917 1480.27,686.917 1480.83,686.917 1481.39,686.917 1481.95,686.917 1482.51,686.917 1483.07,686.917 1483.62,686.917 1484.18,686.917 1484.74,686.917 1485.3,686.917 1485.86,686.917 1486.42,686.917 1486.98,686.917 1487.54,686.917 1488.1,686.917 1488.66,686.917 1489.22,686.917 1489.78,686.917 1490.34,686.917 1490.89,686.917 1491.45,686.917 1492.01,686.917 1492.57,686.917 1493.13,686.917 1493.69,686.917 1494.25,686.917 1494.81,686.917 1495.37,686.917 1495.93,686.917 1496.49,686.917 1497.05,686.917 1497.61,686.917 1498.16,686.917 1498.72,686.917 1499.28,686.917 1499.84,686.917 1500.4,686.917 1500.96,686.917 1501.52,686.917 1502.08,686.917 1502.64,686.917 1503.2,686.917 1503.76,686.917 1504.32,686.917 1504.88,686.917 1505.44,686.917 1505.99,686.917 1506.55,686.917 1507.11,686.917 1507.67,686.917 1508.23,686.917 1508.79,686.917 1509.35,686.917 1509.91,686.917 1510.47,686.917 1511.03,686.917 1511.59,686.917 1512.15,686.917 1512.71,686.917 1513.26,686.917 1513.82,686.917 1514.38,686.917 1514.94,686.917 1515.5,686.917 1516.06,686.917 1516.62,686.917 1517.18,686.917 1517.74,686.917 1518.3,686.917 1518.86,686.917 1519.42,686.917 1519.98,686.917 1520.53,686.917 1521.09,686.917 1521.65,686.917 1522.21,686.917 1522.77,686.917 1523.33,686.917 1523.89,686.917 1524.45,686.917 1525.01,686.917 1525.57,686.917 1526.13,686.917 1526.69,686.917 1527.25,686.917 1527.81,686.917 1528.36,686.917 1528.92,686.917 1529.48,686.917 1530.04,686.917 1530.6,686.917 1531.16,686.917 1531.72,686.917 1532.28,686.917 1532.84,686.917 1533.4,686.917 1533.96,686.917 1534.52,686.917 1535.08,686.917 1535.63,686.917 1536.19,686.917 1536.75,686.917 1537.31,686.917 1537.87,686.917 1538.43,686.917 1538.99,686.917 1539.55,686.917 1540.11,686.917 1540.67,686.917 1541.23,686.917 1541.79,686.917 1542.35,686.917 1542.9,686.917 1543.46,686.917 1544.02,686.917 1544.58,686.917 1545.14,686.917 1545.7,686.917 1546.26,686.917 1546.82,686.917 1547.38,686.917 1547.94,686.917 1548.5,686.917 1549.06,686.917 1549.62,686.917 1550.18,686.917 1550.73,686.917 1551.29,686.917 1551.85,686.917 1552.41,686.917 1552.97,686.917 1553.53,686.917 1554.09,686.917 1554.65,686.917 1555.21,686.917 1555.77,686.917 1556.33,686.917 1556.89,686.917 1557.45,686.917 1558,686.917 1558.56,686.917 1559.12,686.917 1559.68,686.917 1560.24,686.917 1560.8,686.917 1561.36,686.917 1561.92,686.917 1562.48,686.917 1563.04,686.917 1563.6,686.917 1564.16,686.917 1564.72,686.917 1565.28,686.917 1565.83,686.917 1566.39,686.917 1566.95,686.917 1567.51,686.917 1568.07,686.917 1568.63,686.917 1569.19,686.917 1569.75,686.917 1570.31,686.917 1570.87,686.917 1571.43,686.917 1571.99,686.917 1572.55,686.917 1573.1,686.917 1573.66,686.917 1574.22,686.917 1574.78,686.917 1575.34,686.917 1575.9,686.917 1576.46,686.917 1577.02,686.917 1577.58,686.917 1578.14,686.917 1578.7,686.917 1579.26,686.917 1579.82,686.917 1580.37,686.917 1580.93,686.917 1581.49,686.917 1582.05,686.917 1582.61,686.917 1583.17,686.917 1583.73,686.917 1584.29,686.917 1584.85,686.917 1585.41,686.917 1585.97,686.917 1586.53,686.917 1587.09,686.917 1587.65,686.917 1588.2,686.917 1588.76,686.917 1589.32,686.917 1589.88,686.917 1590.44,686.917 1591,686.917 1591.56,686.917 1592.12,686.917 1592.68,686.917 1593.24,686.917 1593.8,686.917 1594.36,686.917 1594.92,686.917 1595.47,686.917 1596.03,686.917 1596.59,686.917 1597.15,686.917 1597.71,686.917 1598.27,686.917 1598.83,686.917 1599.39,686.917 1599.95,686.917 1600.51,686.917 1601.07,686.917 1601.63,686.917 1602.19,686.917 1602.74,686.917 1603.3,686.917 1603.86,686.917 1604.42,686.917 1604.98,686.917 1605.54,686.917 1606.1,686.917 1606.66,686.917 1607.22,686.917 1607.78,686.917 1608.34,686.917 1608.9,686.917 1609.46,686.917 1610.02,686.917 1610.57,686.917 1611.13,686.917 1611.69,686.917 1612.25,686.917 1612.81,686.917 1613.37,686.917 1613.93,686.917 1614.49,686.917 1615.05,686.917 1615.61,686.917 1616.17,686.917 1616.73,686.917 1617.29,686.917 1617.84,686.917 1618.4,686.917 1618.96,686.917 1619.52,686.917 1620.08,686.917 1620.64,686.917 1621.2,686.917 1621.76,686.917 1622.32,686.917 1622.88,686.917 1623.44,686.917 1624,686.917 1624.56,686.917 1625.11,686.917 1625.67,686.917 1626.23,686.917 1626.79,686.917 1627.35,686.917 1627.91,686.917 1628.47,686.917 1629.03,686.917 1629.59,686.917 1630.15,686.917 1630.71,686.917 1631.27,686.917 1631.83,686.917 1632.39,686.917 1632.94,686.917 1633.5,686.917 1634.06,686.917 1634.62,686.917 1635.18,686.917 1635.74,686.917 1636.3,686.917 1636.86,686.917 1637.42,686.917 1637.98,686.917 1638.54,686.917 1639.1,686.917 1639.66,686.917 1640.21,686.917 1640.77,686.917 1641.33,686.917 1641.89,686.917 1642.45,686.917 1643.01,686.917 1643.57,686.917 1644.13,686.917 1644.69,686.917 1645.25,686.917 1645.81,686.917 1646.37,686.917 1646.93,686.917 1647.48,686.917 1648.04,686.917 1648.6,686.917 1649.16,686.917 1649.72,686.917 1650.28,686.917 1650.84,686.917 1651.4,686.917 1651.96,686.917 1652.52,686.917 1653.08,686.917 1653.64,686.917 1654.2,686.917 1654.76,686.917 1655.31,686.917 1655.87,686.917 1656.43,686.917 1656.99,686.917 1657.55,686.917 1658.11,686.917 1658.67,686.917 1659.23,686.917 1659.79,686.917 1660.35,686.917 1660.91,686.917 1661.47,686.917 1662.03,686.917 1662.58,686.917 1663.14,686.917 1663.7,686.917 1664.26,686.917 1664.82,686.917 1665.38,686.917 1665.94,686.917 1666.5,686.917 1667.06,686.917 1667.62,686.917 1668.18,686.917 1668.74,686.917 1669.3,686.917 1669.85,686.917 1670.41,686.917 1670.97,686.917 1671.53,686.917 1672.09,686.917 1672.65,686.917 1673.21,686.917 1673.77,686.917 1674.33,686.917 1674.89,686.917 1675.45,686.917 1676.01,686.917 1676.57,686.917 1677.13,686.917 1677.68,686.917 1678.24,686.917 1678.8,686.917 1679.36,686.917 1679.92,686.917 1680.48,686.917 1681.04,686.917 1681.6,686.917 1682.16,686.917 1682.72,686.917 1683.28,686.917 1683.84,686.917 1684.4,686.917 1684.95,686.917 1685.51,686.917 1686.07,686.917 1686.63,686.917 1687.19,686.917 1687.75,686.917 1688.31,686.917 1688.87,686.917 1689.43,686.917 1689.99,686.917 1690.55,686.917 1691.11,686.917 1691.67,686.917 1692.23,686.917 1692.78,686.917 1693.34,686.917 1693.9,686.917 1694.46,686.917 1695.02,686.917 1695.58,686.917 1696.14,686.917 1696.7,686.917 1697.26,686.917 1697.82,686.917 1698.38,686.917 1698.94,686.917 1699.5,686.917 1700.05,686.917 1700.61,686.917 1701.17,686.917 1701.73,686.917 1702.29,686.917 1702.85,686.917 1703.41,686.917 1703.97,686.917 1704.53,686.917 1705.09,686.917 1705.65,686.917 1706.21,686.917 1706.77,686.917 1707.32,686.917 1707.88,686.917 1708.44,686.917 1709,686.917 1709.56,686.917 1710.12,686.917 1710.68,686.917 1711.24,686.917 1711.8,686.917 1712.36,686.917 1712.92,686.917 1713.48,686.917 1714.04,686.917 1714.6,686.917 1715.15,686.917 1715.71,686.917 1716.27,686.917 1716.83,686.917 1717.39,686.917 1717.95,686.917 1718.51,686.917 1719.07,686.917 1719.63,686.917 1720.19,686.917 1720.75,686.917 1721.31,686.917 1721.87,686.917 1722.42,686.917 1722.98,686.917 1723.54,686.917 1724.1,686.917 1724.66,686.917 1725.22,686.917 1725.78,686.917 1726.34,686.917 1726.9,686.917 1727.46,686.917 1728.02,686.917 1728.58,686.917 1729.14,686.917 1729.69,686.917 1730.25,686.917 1730.81,686.917 1731.37,686.917 1731.93,686.917 1732.49,686.917 1733.05,686.917 1733.61,686.917 1734.17,686.917 1734.73,686.917 1735.29,686.917 1735.85,686.917 1736.41,686.917 1736.97,686.917 1737.52,686.917 1738.08,686.917 1738.64,686.917 1739.2,686.917 1739.76,686.917 1740.32,686.917 1740.88,686.917 1741.44,686.917 1742,686.917 1742.56,686.917 1743.12,686.917 1743.68,686.917 1744.24,686.917 1744.79,686.917 1745.35,686.917 1745.91,686.917 1746.47,686.917 1747.03,686.917 1747.59,686.917 1748.15,686.917 1748.71,686.917 1749.27,686.917 1749.83,686.917 1750.39,686.917 1750.95,686.917 1751.51,686.917 1752.06,686.917 1752.62,686.917 1753.18,686.917 1753.74,686.917 1754.3,686.917 1754.86,686.917 1755.42,686.917 1755.98,686.917 1756.54,686.917 1757.1,686.917 1757.66,686.917 1758.22,686.917 1758.78,686.917 1759.34,686.917 1759.89,686.917 1760.45,686.917 1761.01,686.917 1761.57,686.917 1762.13,686.917 1762.69,686.917 1763.25,686.917 1763.81,686.917 1764.37,686.917 1764.93,686.917 1765.49,686.917 1766.05,686.917 1766.61,686.917 1767.16,686.917 1767.72,686.917 1768.28,686.917 1768.84,686.917 1769.4,686.917 1769.96,686.917 1770.52,686.917 1771.08,686.917 1771.64,686.917 1772.2,686.917 1772.76,686.917 1773.32,686.917 1773.88,686.917 1774.43,686.917 1774.99,686.917 1775.55,686.917 1776.11,686.917 1776.67,686.917 1777.23,686.917 1777.79,686.917 1778.35,686.917 1778.91,686.917 1779.47,686.917 1780.03,686.917 1780.59,686.917 1781.15,686.917 1781.71,686.917 1782.26,686.917 1782.82,686.917 1783.38,686.917 1783.94,686.917 1784.5,686.917 1785.06,686.917 1785.62,686.917 1786.18,686.917 1786.74,686.917 1787.3,686.917 1787.86,686.917 1788.42,686.917 1788.98,686.917 1789.53,686.917 1790.09,686.917 1790.65,686.917 1791.21,686.917 1791.77,686.917 1792.33,686.917 1792.89,686.917 1793.45,686.917 1794.01,686.917 1794.57,686.917 1795.13,686.917 1795.69,686.917 1796.25,686.917 1796.8,686.917 1797.36,686.917 1797.92,686.917 1798.48,686.917 1799.04,686.917 1799.6,686.917 1800.16,686.917 1800.72,686.917 1801.28,686.917 1801.84,686.917 1802.4,686.917 1802.96,686.917 1803.52,686.917 1804.08,686.917 1804.63,686.917 1805.19,686.917 1805.75,686.917 1806.31,686.917 1806.87,686.917 1807.43,686.917 1807.99,686.917 1808.55,686.917 1809.11,686.917 1809.67,686.917 1810.23,686.917 1810.79,686.917 1811.35,686.917 1811.9,686.917 1812.46,686.917 1813.02,686.917 1813.58,686.917 1814.14,686.917 1814.7,686.917 1815.26,686.917 1815.82,686.917 1816.38,686.917 1816.94,686.917 1817.5,686.917 1818.06,686.917 1818.62,686.917 1819.18,686.917 1819.73,686.917 1820.29,686.917 1820.85,686.917 1821.41,686.917 1821.97,686.917 1822.53,686.917 1823.09,686.917 1823.65,686.917 1824.21,686.917 1824.77,686.917 1825.33,686.917 1825.89,686.917 1826.45,686.917 1827,686.917 1827.56,686.917 1828.12,686.917 1828.68,686.917 1829.24,686.917 1829.8,686.917 1830.36,686.917 1830.92,686.917 1831.48,686.917 1832.04,686.917 1832.6,686.917 1833.16,686.917 1833.72,686.917 1834.27,686.917 1834.83,686.917 1835.39,686.917 1835.95,686.917 1836.51,686.917 1837.07,686.917 1837.63,686.917 1838.19,686.917 \"/>\n<path clip-path=\"url(#clip393)\" d=\"M720.247 684.592 L720.806 684.592 L721.365 684.592 L721.924 684.592 L722.484 684.592 L723.043 684.592 L723.602 684.592 L724.161 684.592 L724.721 684.592 L725.28 684.592 L725.839 684.592 L726.398 684.592 L726.958 684.592 L727.517 684.592 L728.076 684.592 L728.635 684.592 L729.195 684.592 L729.754 684.592 L730.313 684.592 L730.872 684.592 L731.432 684.592 L731.991 684.592 L732.55 684.592 L733.109 684.592 L733.669 684.592 L734.228 684.592 L734.787 684.592 L735.346 684.592 L735.906 684.592 L736.465 684.592 L737.024 684.592 L737.583 684.592 L738.143 684.592 L738.702 684.592 L739.261 684.592 L739.82 684.592 L740.38 684.592 L740.939 684.592 L741.498 684.592 L742.057 684.592 L742.617 684.592 L743.176 684.592 L743.735 684.592 L744.294 684.592 L744.854 684.592 L745.413 684.592 L745.972 684.592 L746.531 684.592 L747.091 684.592 L747.65 684.592 L748.209 684.592 L748.768 684.592 L749.328 684.592 L749.887 684.592 L750.446 684.592 L751.005 684.592 L751.565 684.592 L752.124 684.592 L752.683 684.592 L753.242 684.592 L753.802 684.592 L754.361 684.592 L754.92 684.592 L755.479 684.592 L756.039 684.592 L756.598 684.592 L757.157 684.592 L757.716 684.592 L758.276 684.592 L758.835 684.592 L759.394 684.592 L759.953 684.592 L760.513 684.592 L761.072 684.592 L761.631 684.592 L762.19 684.592 L762.75 684.592 L763.309 684.592 L763.868 684.592 L764.427 684.592 L764.987 684.592 L765.546 684.592 L766.105 684.592 L766.664 684.592 L767.224 684.592 L767.783 684.592 L768.342 684.592 L768.901 684.592 L769.461 684.592 L770.02 684.592 L770.579 684.592 L771.138 684.592 L771.698 684.592 L772.257 684.592 L772.816 684.592 L773.375 684.592 L773.935 684.592 L774.494 684.592 L775.053 684.592 L775.612 684.592 L776.172 684.592 L776.731 684.592 L777.29 684.592 L777.849 684.592 L778.409 684.592 L778.968 684.592 L779.527 684.592 L780.086 684.592 L780.646 684.592 L781.205 684.592 L781.764 684.592 L782.323 684.592 L782.883 684.592 L783.442 684.592 L784.001 684.592 L784.56 684.592 L785.12 684.592 L785.679 684.592 L786.238 684.592 L786.797 684.592 L787.357 684.592 L787.916 684.592 L788.475 684.592 L789.034 684.592 L789.594 684.592 L790.153 684.592 L790.712 684.592 L791.271 684.592 L791.831 684.592 L792.39 684.592 L792.949 684.592 L793.508 684.592 L794.068 684.592 L794.627 684.592 L795.186 684.592 L795.745 684.592 L796.305 684.592 L796.864 684.592 L797.423 684.592 L797.982 684.592 L798.542 684.592 L799.101 684.592 L799.66 684.592 L800.219 684.592 L800.779 684.592 L801.338 684.592 L801.897 684.592 L802.456 684.592 L803.016 684.592 L803.575 684.592 L804.134 684.592 L804.693 684.592 L805.253 684.592 L805.812 684.592 L806.371 684.592 L806.931 684.592 L807.49 684.592 L808.049 684.592 L808.608 684.592 L809.168 684.592 L809.727 684.592 L810.286 684.592 L810.845 684.592 L811.405 684.592 L811.964 684.592 L812.523 684.592 L813.082 684.592 L813.642 684.592 L814.201 684.592 L814.76 684.592 L815.319 684.592 L815.879 684.592 L816.438 684.592 L816.997 684.592 L817.556 684.592 L818.116 684.592 L818.675 684.592 L819.234 684.592 L819.793 684.592 L820.353 684.592 L820.912 684.592 L821.471 684.592 L822.03 684.592 L822.59 684.592 L823.149 684.592 L823.708 684.592 L824.267 684.592 L824.827 684.592 L825.386 684.592 L825.945 684.592 L826.504 684.592 L827.064 684.592 L827.623 684.592 L828.182 684.592 L828.741 684.592 L829.301 684.592 L829.86 684.592 L830.419 684.592 L830.978 684.592 L831.538 684.592 L832.097 684.592 L832.656 684.592 L833.215 684.592 L833.775 684.592 L834.334 684.592 L834.893 684.592 L835.452 684.592 L836.012 684.592 L836.571 684.592 L837.13 684.592 L837.689 684.592 L838.249 684.592 L838.808 684.592 L839.367 684.592 L839.926 684.592 L840.486 684.592 L841.045 684.592 L841.604 684.592 L842.163 684.592 L842.723 684.592 L843.282 684.592 L843.841 684.592 L844.4 684.592 L844.96 684.592 L845.519 684.592 L846.078 684.592 L846.637 684.592 L847.197 684.592 L847.756 684.592 L848.315 684.592 L848.874 684.592 L849.434 684.592 L849.993 684.592 L850.552 684.592 L851.111 684.592 L851.671 684.592 L852.23 684.592 L852.789 684.592 L853.348 684.592 L853.908 684.592 L854.467 684.592 L855.026 684.592 L855.585 684.592 L856.145 684.592 L856.704 684.592 L857.263 684.592 L857.822 684.592 L858.382 684.592 L858.941 684.592 L859.5 684.592 L860.059 684.592 L860.619 684.592 L861.178 684.592 L861.737 684.592 L862.296 684.592 L862.856 684.592 L863.415 684.592 L863.974 684.592 L864.533 684.592 L865.093 684.592 L865.652 684.592 L866.211 684.592 L866.77 684.592 L867.33 684.592 L867.889 684.592 L868.448 684.592 L869.007 684.592 L869.567 684.592 L870.126 684.592 L870.685 684.592 L871.244 684.592 L871.804 684.592 L872.363 684.592 L872.922 684.592 L873.481 684.592 L874.041 684.592 L874.6 684.592 L875.159 684.592 L875.718 684.592 L876.278 684.592 L876.837 684.592 L877.396 684.592 L877.955 684.592 L878.515 684.592 L879.074 684.592 L879.633 684.592 L880.192 684.592 L880.752 684.592 L881.311 684.592 L881.87 684.592 L882.429 684.592 L882.989 684.592 L883.548 684.592 L884.107 684.592 L884.666 684.592 L885.226 684.592 L885.785 684.592 L886.344 684.592 L886.903 684.592 L887.463 684.592 L888.022 684.592 L888.581 684.592 L889.14 684.592 L889.7 684.592 L890.259 684.592 L890.818 684.592 L891.377 684.592 L891.937 684.592 L892.496 684.592 L893.055 684.592 L893.614 684.592 L894.174 684.592 L894.733 684.592 L895.292 684.592 L895.851 684.592 L896.411 684.592 L896.97 684.592 L897.529 684.592 L898.088 684.592 L898.648 684.592 L899.207 684.592 L899.766 684.592 L900.325 684.592 L900.885 684.592 L901.444 684.592 L902.003 684.592 L902.562 684.592 L903.122 684.592 L903.681 684.592 L904.24 684.592 L904.799 684.592 L905.359 684.592 L905.918 684.592 L906.477 684.592 L907.036 684.592 L907.596 684.592 L908.155 684.592 L908.714 684.592 L909.273 684.592 L909.833 684.592 L910.392 684.592 L910.951 684.592 L911.51 684.592 L912.07 684.592 L912.629 684.592 L913.188 684.592 L913.747 684.592 L914.307 684.592 L914.866 684.592 L915.425 684.592 L915.984 684.592 L916.544 684.592 L917.103 684.592 L917.662 684.592 L918.221 684.592 L918.781 684.592 L919.34 684.592 L919.899 684.592 L920.458 684.592 L921.018 684.592 L921.577 684.592 L922.136 684.592 L922.695 684.592 L923.255 684.592 L923.814 684.592 L924.373 684.592 L924.932 684.592 L925.492 684.592 L926.051 684.592 L926.61 684.592 L927.169 684.592 L927.729 684.592 L928.288 684.592 L928.847 684.592 L929.406 684.592 L929.966 684.592 L930.525 684.592 L931.084 684.592 L931.644 684.592 L932.203 684.592 L932.762 684.592 L933.321 684.592 L933.881 684.592 L934.44 684.592 L934.999 684.592 L935.558 684.592 L936.118 684.592 L936.677 684.592 L937.236 684.592 L937.795 684.592 L938.355 684.592 L938.914 684.592 L939.473 684.592 L940.032 684.592 L940.592 684.592 L941.151 684.592 L941.71 684.592 L942.269 684.592 L942.829 684.592 L943.388 684.592 L943.947 684.592 L944.506 684.592 L945.066 684.592 L945.625 684.592 L946.184 684.592 L946.743 684.592 L947.303 684.592 L947.862 684.592 L948.421 684.592 L948.98 684.592 L949.54 684.592 L950.099 684.592 L950.658 684.592 L951.217 684.592 L951.777 684.592 L952.336 684.592 L952.895 684.592 L953.454 684.592 L954.014 684.592 L954.573 684.592 L955.132 684.592 L955.691 684.592 L956.251 684.592 L956.81 684.592 L957.369 684.592 L957.928 684.592 L958.488 684.592 L959.047 684.592 L959.606 684.592 L960.165 684.592 L960.725 684.592 L961.284 684.592 L961.843 684.592 L962.402 684.592 L962.962 684.592 L963.521 684.592 L964.08 684.592 L964.639 684.592 L965.199 684.592 L965.758 684.592 L966.317 684.592 L966.876 684.592 L967.436 684.592 L967.995 684.592 L968.554 684.592 L969.113 684.592 L969.673 684.592 L970.232 684.592 L970.791 684.592 L971.35 684.592 L971.91 684.592 L972.469 684.592 L973.028 684.592 L973.587 684.592 L974.147 684.592 L974.706 684.592 L975.265 684.592 L975.824 684.592 L976.384 684.592 L976.943 684.592 L977.502 684.592 L978.061 684.592 L978.621 684.592 L979.18 684.592 L979.739 684.592 L980.298 684.592 L980.858 684.592 L981.417 684.592 L981.976 684.592 L982.535 684.592 L983.095 684.592 L983.654 684.592 L984.213 684.592 L984.772 684.592 L985.332 684.592 L985.891 684.592 L986.45 684.592 L987.009 684.592 L987.569 684.592 L988.128 684.592 L988.687 684.592 L989.246 684.592 L989.806 684.592 L990.365 684.592 L990.924 684.592 L991.483 684.592 L992.043 684.592 L992.602 684.592 L993.161 684.592 L993.72 684.592 L994.28 684.592 L994.839 684.592 L995.398 684.592 L995.957 684.592 L996.517 684.592 L997.076 684.592 L997.635 684.592 L998.194 684.592 L998.754 684.592 L999.313 684.592 L999.872 684.592 L1000.43 684.592 L1000.99 684.592 L1001.55 684.592 L1002.11 684.592 L1002.67 684.592 L1003.23 684.592 L1003.79 684.592 L1004.35 684.592 L1004.91 684.592 L1005.46 684.592 L1006.02 684.592 L1006.58 684.592 L1007.14 684.592 L1007.7 684.592 L1008.26 684.592 L1008.82 684.592 L1009.38 684.592 L1009.94 684.592 L1010.5 684.592 L1011.06 684.592 L1011.62 684.592 L1012.18 684.592 L1012.73 684.592 L1013.29 684.592 L1013.85 684.592 L1014.41 684.592 L1014.97 684.592 L1015.53 684.592 L1016.09 684.592 L1016.65 684.592 L1017.21 684.592 L1017.77 684.592 L1018.33 684.592 L1018.89 684.592 L1019.45 684.592 L1020.01 684.592 L1020.56 684.592 L1021.12 684.592 L1021.68 684.592 L1022.24 684.592 L1022.8 684.592 L1023.36 684.592 L1023.92 684.592 L1024.48 684.592 L1025.04 684.592 L1025.6 684.592 L1026.16 684.592 L1026.72 684.592 L1027.28 684.592 L1027.83 684.592 L1028.39 684.592 L1028.95 684.592 L1029.51 684.592 L1030.07 684.592 L1030.63 684.592 L1031.19 684.592 L1031.75 684.592 L1032.31 684.592 L1032.87 684.592 L1033.43 684.592 L1033.99 684.592 L1034.55 684.592 L1035.1 684.592 L1035.66 684.592 L1036.22 684.592 L1036.78 684.592 L1037.34 684.592 L1037.9 684.592 L1038.46 684.592 L1039.02 684.592 L1039.58 684.592 L1040.14 684.592 L1040.7 684.592 L1041.26 684.592 L1041.82 684.592 L1042.38 684.592 L1042.93 684.592 L1043.49 684.592 L1044.05 684.592 L1044.61 684.592 L1045.17 684.592 L1045.73 684.592 L1046.29 684.592 L1046.85 684.592 L1047.41 684.592 L1047.97 684.592 L1048.53 684.592 L1049.09 684.592 L1049.65 684.592 L1050.2 684.592 L1050.76 684.592 L1051.32 684.592 L1051.88 684.592 L1052.44 684.592 L1053 684.592 L1053.56 684.592 L1054.12 684.592 L1054.68 684.592 L1055.24 684.592 L1055.8 684.592 L1056.36 684.592 L1056.92 684.592 L1057.48 684.592 L1058.03 684.592 L1058.59 684.592 L1059.15 684.592 L1059.71 684.592 L1060.27 684.592 L1060.83 684.592 L1061.39 684.592 L1061.95 684.592 L1062.51 684.592 L1063.07 684.592 L1063.63 684.592 L1064.19 684.592 L1064.75 684.592 L1065.3 684.592 L1065.86 684.592 L1066.42 684.592 L1066.98 684.592 L1067.54 684.592 L1068.1 684.592 L1068.66 684.592 L1069.22 684.592 L1069.78 684.592 L1070.34 684.592 L1070.9 684.592 L1071.46 684.592 L1072.02 684.592 L1072.57 684.592 L1073.13 684.592 L1073.69 684.592 L1074.25 684.592 L1074.81 684.592 L1075.37 684.592 L1075.93 684.592 L1076.49 684.592 L1077.05 684.592 L1077.61 684.592 L1078.17 684.592 L1078.73 684.592 L1079.29 684.592 L1079.85 684.592 L1080.4 684.592 L1080.96 684.592 L1081.52 684.592 L1082.08 684.592 L1082.64 684.592 L1083.2 684.592 L1083.76 684.592 L1084.32 684.592 L1084.88 684.592 L1085.44 684.592 L1086 684.592 L1086.56 684.592 L1087.12 684.592 L1087.67 684.592 L1088.23 684.592 L1088.79 684.592 L1089.35 684.592 L1089.91 684.592 L1090.47 684.592 L1091.03 684.592 L1091.59 684.592 L1092.15 684.592 L1092.71 684.592 L1093.27 684.592 L1093.83 684.592 L1094.39 684.592 L1094.94 684.592 L1095.5 684.592 L1096.06 684.592 L1096.62 684.592 L1097.18 684.592 L1097.74 684.592 L1098.3 684.592 L1098.86 684.592 L1099.42 684.592 L1099.98 684.592 L1100.54 684.592 L1101.1 684.592 L1101.66 684.592 L1102.22 684.592 L1102.77 684.592 L1103.33 684.592 L1103.89 684.592 L1104.45 684.592 L1105.01 684.592 L1105.57 684.592 L1106.13 684.592 L1106.69 684.592 L1107.25 684.592 L1107.81 684.592 L1108.37 684.592 L1108.93 684.592 L1109.49 684.592 L1110.04 684.592 L1110.6 684.592 L1111.16 684.592 L1111.72 684.592 L1112.28 684.592 L1112.84 684.592 L1113.4 684.592 L1113.96 684.592 L1114.52 684.592 L1115.08 684.592 L1115.64 684.592 L1116.2 684.592 L1116.76 684.592 L1117.31 684.592 L1117.87 684.592 L1118.43 684.592 L1118.99 684.592 L1119.55 684.592 L1120.11 684.592 L1120.67 684.592 L1121.23 684.592 L1121.79 684.592 L1122.35 684.592 L1122.91 684.592 L1123.47 684.592 L1124.03 684.592 L1124.59 684.592 L1125.14 684.592 L1125.7 684.592 L1126.26 684.592 L1126.82 684.592 L1127.38 684.592 L1127.94 684.592 L1128.5 684.592 L1129.06 684.592 L1129.62 684.592 L1130.18 684.592 L1130.74 684.592 L1131.3 684.592 L1131.86 684.592 L1132.41 684.592 L1132.97 684.592 L1133.53 684.592 L1134.09 684.592 L1134.65 684.592 L1135.21 684.592 L1135.77 684.592 L1136.33 684.592 L1136.89 684.592 L1137.45 684.592 L1138.01 684.592 L1138.57 684.592 L1139.13 684.592 L1139.68 684.592 L1140.24 684.592 L1140.8 684.592 L1141.36 684.592 L1141.92 684.592 L1142.48 684.592 L1143.04 684.592 L1143.6 684.592 L1144.16 684.592 L1144.72 684.592 L1145.28 684.592 L1145.84 684.592 L1146.4 684.592 L1146.96 684.592 L1147.51 684.592 L1148.07 684.592 L1148.63 684.592 L1149.19 684.592 L1149.75 684.592 L1150.31 684.592 L1150.87 684.592 L1151.43 684.592 L1151.99 684.592 L1152.55 684.592 L1153.11 684.592 L1153.67 684.592 L1154.23 684.592 L1154.78 684.592 L1155.34 684.592 L1155.9 684.592 L1156.46 684.592 L1157.02 684.592 L1157.58 684.592 L1158.14 684.592 L1158.7 684.592 L1159.26 684.592 L1159.82 684.592 L1160.38 684.592 L1160.94 684.592 L1161.5 684.592 L1162.05 684.592 L1162.61 684.592 L1163.17 684.592 L1163.73 684.592 L1164.29 684.592 L1164.85 684.592 L1165.41 684.592 L1165.97 684.592 L1166.53 684.592 L1167.09 684.592 L1167.65 684.592 L1168.21 684.592 L1168.77 684.592 L1169.33 684.592 L1169.88 684.592 L1170.44 684.592 L1171 684.592 L1171.56 684.592 L1172.12 684.592 L1172.68 684.592 L1173.24 684.592 L1173.8 684.592 L1174.36 684.592 L1174.92 684.592 L1175.48 684.592 L1176.04 684.592 L1176.6 684.592 L1177.15 684.592 L1177.71 684.592 L1178.27 684.592 L1178.83 684.592 L1179.39 684.592 L1179.95 684.592 L1180.51 684.592 L1181.07 684.592 L1181.63 684.592 L1182.19 684.592 L1182.75 684.592 L1183.31 684.592 L1183.87 684.592 L1184.43 684.592 L1184.98 684.592 L1185.54 684.592 L1186.1 684.592 L1186.66 684.592 L1187.22 684.592 L1187.78 684.592 L1188.34 684.592 L1188.9 684.592 L1189.46 684.592 L1190.02 684.592 L1190.58 684.592 L1191.14 684.592 L1191.7 684.592 L1192.25 684.592 L1192.81 684.592 L1193.37 684.592 L1193.93 684.592 L1194.49 684.592 L1195.05 684.592 L1195.61 684.592 L1196.17 684.592 L1196.73 684.592 L1197.29 684.592 L1197.85 684.592 L1198.41 684.592 L1198.97 684.592 L1199.52 684.592 L1200.08 684.592 L1200.64 684.592 L1201.2 684.592 L1201.76 684.592 L1202.32 684.592 L1202.88 684.592 L1203.44 684.592 L1204 684.592 L1204.56 684.592 L1205.12 684.592 L1205.68 684.592 L1206.24 684.592 L1206.8 684.592 L1207.35 684.592 L1207.91 684.592 L1208.47 684.592 L1209.03 684.592 L1209.59 684.592 L1210.15 684.592 L1210.71 684.592 L1211.27 684.592 L1211.83 684.592 L1212.39 684.592 L1212.95 684.592 L1213.51 684.592 L1214.07 684.592 L1214.62 684.592 L1215.18 684.592 L1215.74 684.592 L1216.3 684.592 L1216.86 684.592 L1217.42 684.592 L1217.98 684.592 L1218.54 684.592 L1219.1 684.592 L1219.66 684.592 L1220.22 684.592 L1220.78 684.592 L1221.34 684.592 L1221.89 684.592 L1222.45 684.592 L1223.01 684.592 L1223.57 684.592 L1224.13 684.592 L1224.69 684.592 L1225.25 684.592 L1225.81 684.592 L1226.37 684.592 L1226.93 684.592 L1227.49 684.592 L1228.05 684.592 L1228.61 684.592 L1229.17 684.592 L1229.72 684.592 L1230.28 684.592 L1230.84 684.592 L1231.4 684.592 L1231.96 684.592 L1232.52 684.592 L1233.08 684.592 L1233.64 684.592 L1234.2 684.592 L1234.76 684.592 L1235.32 684.592 L1235.88 684.592 L1236.44 684.592 L1236.99 684.592 L1237.55 684.592 L1238.11 684.592 L1238.67 684.592 L1239.23 684.592 L1239.79 684.592 L1240.35 684.592 L1240.91 684.592 L1241.47 684.592 L1242.03 684.592 L1242.59 684.592 L1243.15 684.592 L1243.71 684.592 L1244.26 684.592 L1244.82 684.592 L1245.38 684.592 L1245.94 684.592 L1246.5 684.592 L1247.06 684.592 L1247.62 684.592 L1248.18 684.592 L1248.74 684.592 L1249.3 684.592 L1249.86 684.592 L1250.42 684.592 L1250.98 684.592 L1251.54 684.592 L1252.09 684.592 L1252.65 684.592 L1253.21 684.592 L1253.77 684.592 L1254.33 684.592 L1254.89 684.592 L1255.45 684.592 L1256.01 684.592 L1256.57 684.592 L1257.13 684.592 L1257.69 684.592 L1258.25 684.592 L1258.81 684.592 L1259.36 684.592 L1259.92 684.592 L1260.48 684.592 L1261.04 684.592 L1261.6 684.592 L1262.16 684.592 L1262.72 684.592 L1263.28 684.592 L1263.84 684.592 L1264.4 684.592 L1264.96 684.592 L1265.52 684.592 L1266.08 684.592 L1266.63 684.592 L1267.19 684.592 L1267.75 684.592 L1268.31 684.592 L1268.87 684.592 L1269.43 684.592 L1269.99 684.592 L1270.55 684.592 L1271.11 684.592 L1271.67 684.592 L1272.23 684.592 L1272.79 684.592 L1273.35 684.592 L1273.91 684.592 L1274.46 684.592 L1275.02 684.592 L1275.58 684.592 L1276.14 684.592 L1276.7 684.592 L1277.26 684.592 L1277.82 684.592 L1278.38 684.592 L1278.94 684.592 L1279.5 684.592 L1280.06 684.592 L1280.62 684.592 L1281.18 684.592 L1281.73 684.592 L1282.29 684.592 L1282.85 684.592 L1283.41 684.592 L1283.97 684.592 L1284.53 684.592 L1285.09 684.592 L1285.65 684.592 L1286.21 684.592 L1286.77 684.592 L1287.33 684.592 L1287.89 684.592 L1288.45 684.592 L1289 684.592 L1289.56 684.592 L1290.12 684.592 L1290.68 684.592 L1291.24 684.592 L1291.8 684.592 L1292.36 684.592 L1292.92 684.592 L1293.48 684.592 L1294.04 684.592 L1294.6 684.592 L1295.16 684.592 L1295.72 684.592 L1296.28 684.592 L1296.83 684.592 L1297.39 684.592 L1297.95 684.592 L1298.51 684.592 L1299.07 684.592 L1299.63 684.592 L1300.19 684.592 L1300.75 684.592 L1301.31 684.592 L1301.87 684.592 L1302.43 684.592 L1302.99 684.592 L1303.55 684.592 L1304.1 684.592 L1304.66 684.592 L1305.22 684.592 L1305.78 684.592 L1306.34 684.592 L1306.9 684.592 L1307.46 684.592 L1308.02 684.592 L1308.58 684.592 L1309.14 684.592 L1309.7 684.592 L1310.26 684.592 L1310.82 684.592 L1311.38 684.592 L1311.93 684.592 L1312.49 684.592 L1313.05 684.592 L1313.61 684.592 L1314.17 684.592 L1314.73 684.592 L1315.29 684.592 L1315.85 684.592 L1316.41 684.592 L1316.97 684.592 L1317.53 684.592 L1318.09 684.592 L1318.65 684.592 L1319.2 684.592 L1319.76 684.592 L1320.32 684.592 L1320.88 684.592 L1321.44 684.592 L1322 684.592 L1322.56 684.592 L1323.12 684.592 L1323.68 684.592 L1324.24 684.592 L1324.8 684.592 L1325.36 684.592 L1325.92 684.592 L1326.47 684.592 L1327.03 684.592 L1327.59 684.592 L1328.15 684.592 L1328.71 684.592 L1329.27 684.592 L1329.83 684.592 L1330.39 684.592 L1330.95 684.592 L1331.51 684.592 L1332.07 684.592 L1332.63 684.592 L1333.19 684.592 L1333.75 684.592 L1334.3 684.592 L1334.86 684.592 L1335.42 684.592 L1335.98 684.592 L1336.54 684.592 L1337.1 684.592 L1337.66 684.592 L1338.22 684.592 L1338.78 684.592 L1339.34 684.592 L1339.9 684.592 L1340.46 684.592 L1341.02 684.592 L1341.57 684.592 L1342.13 684.592 L1342.69 684.592 L1343.25 684.592 L1343.81 684.592 L1344.37 684.592 L1344.93 684.592 L1345.49 684.592 L1346.05 684.592 L1346.61 684.592 L1347.17 684.592 L1347.73 684.592 L1348.29 684.592 L1348.84 684.592 L1349.4 684.592 L1349.96 684.592 L1350.52 684.592 L1351.08 684.592 L1351.64 684.592 L1352.2 684.592 L1352.76 684.592 L1353.32 684.592 L1353.88 684.592 L1354.44 684.592 L1355 684.592 L1355.56 684.592 L1356.12 684.592 L1356.67 684.592 L1357.23 684.592 L1357.79 684.592 L1358.35 684.592 L1358.91 684.592 L1359.47 684.592 L1360.03 684.592 L1360.59 684.592 L1361.15 684.592 L1361.71 684.592 L1362.27 684.592 L1362.83 684.592 L1363.39 684.592 L1363.94 684.592 L1364.5 684.592 L1365.06 684.592 L1365.62 684.592 L1366.18 684.592 L1366.74 684.592 L1367.3 684.592 L1367.86 684.592 L1368.42 684.592 L1368.98 684.592 L1369.54 684.592 L1370.1 684.592 L1370.66 684.592 L1371.21 684.592 L1371.77 684.592 L1372.33 684.592 L1372.89 684.592 L1373.45 684.592 L1374.01 684.592 L1374.57 684.592 L1375.13 684.592 L1375.69 684.592 L1376.25 684.592 L1376.81 684.592 L1377.37 684.592 L1377.93 684.592 L1378.49 684.592 L1379.04 684.592 L1379.6 684.592 L1380.16 684.592 L1380.72 684.592 L1381.28 684.592 L1381.84 684.592 L1382.4 684.592 L1382.96 684.592 L1383.52 684.592 L1384.08 684.592 L1384.64 684.592 L1385.2 684.592 L1385.76 684.592 L1386.31 684.592 L1386.87 684.592 L1387.43 684.592 L1387.99 684.592 L1388.55 684.592 L1389.11 684.592 L1389.67 684.592 L1390.23 684.592 L1390.79 684.592 L1391.35 684.592 L1391.91 684.592 L1392.47 684.592 L1393.03 684.592 L1393.58 684.592 L1394.14 684.592 L1394.7 684.592 L1395.26 684.592 L1395.82 684.592 L1396.38 684.592 L1396.94 684.592 L1397.5 684.592 L1398.06 684.592 L1398.62 684.592 L1399.18 684.592 L1399.74 684.592 L1400.3 684.592 L1400.86 684.592 L1401.41 684.592 L1401.97 684.592 L1402.53 684.592 L1403.09 684.592 L1403.65 684.592 L1404.21 684.592 L1404.77 684.592 L1405.33 684.592 L1405.89 684.592 L1406.45 684.592 L1407.01 684.592 L1407.57 684.592 L1408.13 684.592 L1408.68 684.592 L1409.24 684.592 L1409.8 684.592 L1410.36 684.592 L1410.92 684.592 L1411.48 684.592 L1412.04 684.592 L1412.6 684.592 L1413.16 684.592 L1413.72 684.592 L1414.28 684.592 L1414.84 684.592 L1415.4 684.592 L1415.95 684.592 L1416.51 684.592 L1417.07 684.592 L1417.63 684.592 L1418.19 684.592 L1418.75 684.592 L1419.31 684.592 L1419.87 684.592 L1420.43 684.592 L1420.99 684.592 L1421.55 684.592 L1422.11 684.592 L1422.67 684.592 L1423.23 684.592 L1423.78 684.592 L1424.34 684.592 L1424.9 684.592 L1425.46 684.592 L1426.02 684.592 L1426.58 684.592 L1427.14 684.592 L1427.7 684.592 L1428.26 684.592 L1428.82 684.592 L1429.38 684.592 L1429.94 684.592 L1430.5 684.592 L1431.05 684.592 L1431.61 684.592 L1432.17 684.592 L1432.73 684.592 L1433.29 684.592 L1433.85 684.592 L1434.41 684.592 L1434.97 684.592 L1435.53 684.592 L1436.09 684.592 L1436.65 684.592 L1437.21 684.592 L1437.77 684.592 L1438.33 684.592 L1438.88 684.592 L1439.44 684.592 L1440 684.592 L1440.56 684.592 L1441.12 684.592 L1441.68 684.592 L1442.24 684.592 L1442.8 684.592 L1443.36 684.592 L1443.92 684.592 L1444.48 684.592 L1445.04 684.592 L1445.6 684.592 L1446.15 684.592 L1446.71 684.592 L1447.27 684.592 L1447.83 684.592 L1448.39 684.592 L1448.95 684.592 L1449.51 684.592 L1450.07 684.592 L1450.63 684.592 L1451.19 684.592 L1451.75 684.592 L1452.31 684.592 L1452.87 684.592 L1453.42 684.592 L1453.98 684.592 L1454.54 684.592 L1455.1 684.592 L1455.66 684.592 L1456.22 684.592 L1456.78 684.592 L1457.34 684.592 L1457.9 684.592 L1458.46 684.592 L1459.02 684.592 L1459.58 684.592 L1460.14 684.592 L1460.7 684.592 L1461.25 684.592 L1461.81 684.592 L1462.37 684.592 L1462.93 684.592 L1463.49 684.592 L1464.05 684.592 L1464.61 684.592 L1465.17 684.592 L1465.73 684.592 L1466.29 684.592 L1466.85 684.592 L1467.41 684.592 L1467.97 684.592 L1468.52 684.592 L1469.08 684.592 L1469.64 684.592 L1470.2 684.592 L1470.76 684.592 L1471.32 684.592 L1471.88 684.592 L1472.44 684.592 L1473 684.592 L1473.56 684.592 L1474.12 684.592 L1474.68 684.592 L1475.24 684.592 L1475.79 684.592 L1476.35 684.592 L1476.91 684.592 L1477.47 684.592 L1478.03 684.592 L1478.59 684.592 L1479.15 684.592 L1479.71 684.592 L1480.27 684.592 L1480.83 684.592 L1481.39 684.592 L1481.95 684.592 L1482.51 684.592 L1483.07 684.592 L1483.62 684.592 L1484.18 684.592 L1484.74 684.592 L1485.3 684.592 L1485.86 684.592 L1486.42 684.592 L1486.98 684.592 L1487.54 684.592 L1488.1 684.592 L1488.66 684.592 L1489.22 684.592 L1489.78 684.592 L1490.34 684.592 L1490.89 684.592 L1491.45 684.592 L1492.01 684.592 L1492.57 684.592 L1493.13 684.592 L1493.69 684.592 L1494.25 684.592 L1494.81 684.592 L1495.37 684.592 L1495.93 684.592 L1496.49 684.592 L1497.05 684.592 L1497.61 684.592 L1498.16 684.592 L1498.72 684.592 L1499.28 684.592 L1499.84 684.592 L1500.4 684.592 L1500.96 684.592 L1501.52 684.592 L1502.08 684.592 L1502.64 684.592 L1503.2 684.592 L1503.76 684.592 L1504.32 684.592 L1504.88 684.592 L1505.44 684.592 L1505.99 684.592 L1506.55 684.592 L1507.11 684.592 L1507.67 684.592 L1508.23 684.592 L1508.79 684.592 L1509.35 684.592 L1509.91 684.592 L1510.47 684.592 L1511.03 684.592 L1511.59 684.592 L1512.15 684.592 L1512.71 684.592 L1513.26 684.592 L1513.82 684.592 L1514.38 684.592 L1514.94 684.592 L1515.5 684.592 L1516.06 684.592 L1516.62 684.592 L1517.18 684.592 L1517.74 684.592 L1518.3 684.592 L1518.86 684.592 L1519.42 684.592 L1519.98 684.592 L1520.53 684.592 L1521.09 684.592 L1521.65 684.592 L1522.21 684.592 L1522.77 684.592 L1523.33 684.592 L1523.89 684.592 L1524.45 684.592 L1525.01 684.592 L1525.57 684.592 L1526.13 684.592 L1526.69 684.592 L1527.25 684.592 L1527.81 684.592 L1528.36 684.592 L1528.92 684.592 L1529.48 684.592 L1530.04 684.592 L1530.6 684.592 L1531.16 684.592 L1531.72 684.592 L1532.28 684.592 L1532.84 684.592 L1533.4 684.592 L1533.96 684.592 L1534.52 684.592 L1535.08 684.592 L1535.63 684.592 L1536.19 684.592 L1536.75 684.592 L1537.31 684.592 L1537.87 684.592 L1538.43 684.592 L1538.99 684.592 L1539.55 684.592 L1540.11 684.592 L1540.67 684.592 L1541.23 684.592 L1541.79 684.592 L1542.35 684.592 L1542.9 684.592 L1543.46 684.592 L1544.02 684.592 L1544.58 684.592 L1545.14 684.592 L1545.7 684.592 L1546.26 684.592 L1546.82 684.592 L1547.38 684.592 L1547.94 684.592 L1548.5 684.592 L1549.06 684.592 L1549.62 684.592 L1550.18 684.592 L1550.73 684.592 L1551.29 684.592 L1551.85 684.592 L1552.41 684.592 L1552.97 684.592 L1553.53 684.592 L1554.09 684.592 L1554.65 684.592 L1555.21 684.592 L1555.77 684.592 L1556.33 684.592 L1556.89 684.592 L1557.45 684.592 L1558 684.592 L1558.56 684.592 L1559.12 684.592 L1559.68 684.592 L1560.24 684.592 L1560.8 684.592 L1561.36 684.592 L1561.92 684.592 L1562.48 684.592 L1563.04 684.592 L1563.6 684.592 L1564.16 684.592 L1564.72 684.592 L1565.28 684.592 L1565.83 684.592 L1566.39 684.592 L1566.95 684.592 L1567.51 684.592 L1568.07 684.592 L1568.63 684.592 L1569.19 684.592 L1569.75 684.592 L1570.31 684.592 L1570.87 684.592 L1571.43 684.592 L1571.99 684.592 L1572.55 684.592 L1573.1 684.592 L1573.66 684.592 L1574.22 684.592 L1574.78 684.592 L1575.34 684.592 L1575.9 684.592 L1576.46 684.592 L1577.02 684.592 L1577.58 684.592 L1578.14 684.592 L1578.7 684.592 L1579.26 684.592 L1579.82 684.592 L1580.37 684.592 L1580.93 684.592 L1581.49 684.592 L1582.05 684.592 L1582.61 684.592 L1583.17 684.592 L1583.73 684.592 L1584.29 684.592 L1584.85 684.592 L1585.41 684.592 L1585.97 684.592 L1586.53 684.592 L1587.09 684.592 L1587.65 684.592 L1588.2 684.592 L1588.76 684.592 L1589.32 684.592 L1589.88 684.592 L1590.44 684.592 L1591 684.592 L1591.56 684.592 L1592.12 684.592 L1592.68 684.592 L1593.24 684.592 L1593.8 684.592 L1594.36 684.592 L1594.92 684.592 L1595.47 684.592 L1596.03 684.592 L1596.59 684.592 L1597.15 684.592 L1597.71 684.592 L1598.27 684.592 L1598.83 684.592 L1599.39 684.592 L1599.95 684.592 L1600.51 684.592 L1601.07 684.592 L1601.63 684.592 L1602.19 684.592 L1602.74 684.592 L1603.3 684.592 L1603.86 684.592 L1604.42 684.592 L1604.98 684.592 L1605.54 684.592 L1606.1 684.592 L1606.66 684.592 L1607.22 684.592 L1607.78 684.592 L1608.34 684.592 L1608.9 684.592 L1609.46 684.592 L1610.02 684.592 L1610.57 684.592 L1611.13 684.592 L1611.69 684.592 L1612.25 684.592 L1612.81 684.592 L1613.37 684.592 L1613.93 684.592 L1614.49 684.592 L1615.05 684.592 L1615.61 684.592 L1616.17 684.592 L1616.73 684.592 L1617.29 684.592 L1617.84 684.592 L1618.4 684.592 L1618.96 684.592 L1619.52 684.592 L1620.08 684.592 L1620.64 684.592 L1621.2 684.592 L1621.76 684.592 L1622.32 684.592 L1622.88 684.592 L1623.44 684.592 L1624 684.592 L1624.56 684.592 L1625.11 684.592 L1625.67 684.592 L1626.23 684.592 L1626.79 684.592 L1627.35 684.592 L1627.91 684.592 L1628.47 684.592 L1629.03 684.592 L1629.59 684.592 L1630.15 684.592 L1630.71 684.592 L1631.27 684.592 L1631.83 684.592 L1632.39 684.592 L1632.94 684.592 L1633.5 684.592 L1634.06 684.592 L1634.62 684.592 L1635.18 684.592 L1635.74 684.592 L1636.3 684.592 L1636.86 684.592 L1637.42 684.592 L1637.98 684.592 L1638.54 684.592 L1639.1 684.592 L1639.66 684.592 L1640.21 684.592 L1640.77 684.592 L1641.33 684.592 L1641.89 684.592 L1642.45 684.592 L1643.01 684.592 L1643.57 684.592 L1644.13 684.592 L1644.69 684.592 L1645.25 684.592 L1645.81 684.592 L1646.37 684.592 L1646.93 684.592 L1647.48 684.592 L1648.04 684.592 L1648.6 684.592 L1649.16 684.592 L1649.72 684.592 L1650.28 684.592 L1650.84 684.592 L1651.4 684.592 L1651.96 684.592 L1652.52 684.592 L1653.08 684.592 L1653.64 684.592 L1654.2 684.592 L1654.76 684.592 L1655.31 684.592 L1655.87 684.592 L1656.43 684.592 L1656.99 684.592 L1657.55 684.592 L1658.11 684.592 L1658.67 684.592 L1659.23 684.592 L1659.79 684.592 L1660.35 684.592 L1660.91 684.592 L1661.47 684.592 L1662.03 684.592 L1662.58 684.592 L1663.14 684.592 L1663.7 684.592 L1664.26 684.592 L1664.82 684.592 L1665.38 684.592 L1665.94 684.592 L1666.5 684.592 L1667.06 684.592 L1667.62 684.592 L1668.18 684.592 L1668.74 684.592 L1669.3 684.592 L1669.85 684.592 L1670.41 684.592 L1670.97 684.592 L1671.53 684.592 L1672.09 684.592 L1672.65 684.592 L1673.21 684.592 L1673.77 684.592 L1674.33 684.592 L1674.89 684.592 L1675.45 684.592 L1676.01 684.592 L1676.57 684.592 L1677.13 684.592 L1677.68 684.592 L1678.24 684.592 L1678.8 684.592 L1679.36 684.592 L1679.92 684.592 L1680.48 684.592 L1681.04 684.592 L1681.6 684.592 L1682.16 684.592 L1682.72 684.592 L1683.28 684.592 L1683.84 684.592 L1684.4 684.592 L1684.95 684.592 L1685.51 684.592 L1686.07 684.592 L1686.63 684.592 L1687.19 684.592 L1687.75 684.592 L1688.31 684.592 L1688.87 684.592 L1689.43 684.592 L1689.99 684.592 L1690.55 684.592 L1691.11 684.592 L1691.67 684.592 L1692.23 684.592 L1692.78 684.592 L1693.34 684.592 L1693.9 684.592 L1694.46 684.592 L1695.02 684.592 L1695.58 684.592 L1696.14 684.592 L1696.7 684.592 L1697.26 684.592 L1697.82 684.592 L1698.38 684.592 L1698.94 684.592 L1699.5 684.592 L1700.05 684.592 L1700.61 684.592 L1701.17 684.592 L1701.73 684.592 L1702.29 684.592 L1702.85 684.592 L1703.41 684.592 L1703.97 684.592 L1704.53 684.592 L1705.09 684.592 L1705.65 684.592 L1706.21 684.592 L1706.77 684.592 L1707.32 684.592 L1707.88 684.592 L1708.44 684.592 L1709 684.592 L1709.56 684.592 L1710.12 684.592 L1710.68 684.592 L1711.24 684.592 L1711.8 684.592 L1712.36 684.592 L1712.92 684.592 L1713.48 684.592 L1714.04 684.592 L1714.6 684.592 L1715.15 684.592 L1715.71 684.592 L1716.27 684.592 L1716.83 684.592 L1717.39 684.592 L1717.95 684.592 L1718.51 684.592 L1719.07 684.592 L1719.63 684.592 L1720.19 684.592 L1720.75 684.592 L1721.31 684.592 L1721.87 684.592 L1722.42 684.592 L1722.98 684.592 L1723.54 684.592 L1724.1 684.592 L1724.66 684.592 L1725.22 684.592 L1725.78 684.592 L1726.34 684.592 L1726.9 684.592 L1727.46 684.592 L1728.02 684.592 L1728.58 684.592 L1729.14 684.592 L1729.69 684.592 L1730.25 684.592 L1730.81 684.592 L1731.37 684.592 L1731.93 684.592 L1732.49 684.592 L1733.05 684.592 L1733.61 684.592 L1734.17 684.592 L1734.73 684.592 L1735.29 684.592 L1735.85 684.592 L1736.41 684.592 L1736.97 684.592 L1737.52 684.592 L1738.08 684.592 L1738.64 684.592 L1739.2 684.592 L1739.76 684.592 L1740.32 684.592 L1740.88 684.592 L1741.44 684.592 L1742 684.592 L1742.56 684.592 L1743.12 684.592 L1743.68 684.592 L1744.24 684.592 L1744.79 684.592 L1745.35 684.592 L1745.91 684.592 L1746.47 684.592 L1747.03 684.592 L1747.59 684.592 L1748.15 684.592 L1748.71 684.592 L1749.27 684.592 L1749.83 684.592 L1750.39 684.592 L1750.95 684.592 L1751.51 684.592 L1752.06 684.592 L1752.62 684.592 L1753.18 684.592 L1753.74 684.592 L1754.3 684.592 L1754.86 684.592 L1755.42 684.592 L1755.98 684.592 L1756.54 684.592 L1757.1 684.592 L1757.66 684.592 L1758.22 684.592 L1758.78 684.592 L1759.34 684.592 L1759.89 684.592 L1760.45 684.592 L1761.01 684.592 L1761.57 684.592 L1762.13 684.592 L1762.69 684.592 L1763.25 684.592 L1763.81 684.592 L1764.37 684.592 L1764.93 684.592 L1765.49 684.592 L1766.05 684.592 L1766.61 684.592 L1767.16 684.592 L1767.72 684.592 L1768.28 684.592 L1768.84 684.592 L1769.4 684.592 L1769.96 684.592 L1770.52 684.592 L1771.08 684.592 L1771.64 684.592 L1772.2 684.592 L1772.76 684.592 L1773.32 684.592 L1773.88 684.592 L1774.43 684.592 L1774.99 684.592 L1775.55 684.592 L1776.11 684.592 L1776.67 684.592 L1777.23 684.592 L1777.79 684.592 L1778.35 684.592 L1778.91 684.592 L1779.47 684.592 L1780.03 684.592 L1780.59 684.592 L1781.15 684.592 L1781.71 684.592 L1782.26 684.592 L1782.82 684.592 L1783.38 684.592 L1783.94 684.592 L1784.5 684.592 L1785.06 684.592 L1785.62 684.592 L1786.18 684.592 L1786.74 684.592 L1787.3 684.592 L1787.86 684.592 L1788.42 684.592 L1788.98 684.592 L1789.53 684.592 L1790.09 684.592 L1790.65 684.592 L1791.21 684.592 L1791.77 684.592 L1792.33 684.592 L1792.89 684.592 L1793.45 684.592 L1794.01 684.592 L1794.57 684.592 L1795.13 684.592 L1795.69 684.592 L1796.25 684.592 L1796.8 684.592 L1797.36 684.592 L1797.92 684.592 L1798.48 684.592 L1799.04 684.592 L1799.6 684.592 L1800.16 684.592 L1800.72 684.592 L1801.28 684.592 L1801.84 684.592 L1802.4 684.592 L1802.96 684.592 L1803.52 684.592 L1804.08 684.592 L1804.63 684.592 L1805.19 684.592 L1805.75 684.592 L1806.31 684.592 L1806.87 684.592 L1807.43 684.592 L1807.99 684.592 L1808.55 684.592 L1809.11 684.592 L1809.67 684.592 L1810.23 684.592 L1810.79 684.592 L1811.35 684.592 L1811.9 684.592 L1812.46 684.592 L1813.02 684.592 L1813.58 684.592 L1814.14 684.592 L1814.7 684.592 L1815.26 684.592 L1815.82 684.592 L1816.38 684.592 L1816.94 684.592 L1817.5 684.592 L1818.06 684.592 L1818.62 684.592 L1819.18 684.592 L1819.73 684.592 L1820.29 684.592 L1820.85 684.592 L1821.41 684.592 L1821.97 684.592 L1822.53 684.592 L1823.09 684.592 L1823.65 684.592 L1824.21 684.592 L1824.77 684.592 L1825.33 684.592 L1825.89 684.592 L1826.45 684.592 L1827 684.592 L1827.56 684.592 L1828.12 684.592 L1828.68 684.592 L1829.24 684.592 L1829.8 684.592 L1830.36 684.592 L1830.92 684.592 L1831.48 684.592 L1832.04 684.592 L1832.6 684.592 L1833.16 684.592 L1833.72 684.592 L1834.27 684.592 L1834.83 684.592 L1835.39 684.592 L1835.95 684.592 L1836.51 684.592 L1837.07 684.592 L1837.63 684.592 L1838.19 684.592 L1838.19 682.81 L1837.63 682.81 L1837.07 682.81 L1836.51 682.81 L1835.95 682.81 L1835.39 682.81 L1834.83 682.81 L1834.27 682.81 L1833.72 682.81 L1833.16 682.81 L1832.6 682.81 L1832.04 682.81 L1831.48 682.81 L1830.92 682.81 L1830.36 682.81 L1829.8 682.81 L1829.24 682.81 L1828.68 682.81 L1828.12 682.81 L1827.56 682.81 L1827 682.81 L1826.45 682.81 L1825.89 682.81 L1825.33 682.81 L1824.77 682.81 L1824.21 682.81 L1823.65 682.81 L1823.09 682.81 L1822.53 682.81 L1821.97 682.81 L1821.41 682.81 L1820.85 682.81 L1820.29 682.81 L1819.73 682.81 L1819.18 682.81 L1818.62 682.81 L1818.06 682.81 L1817.5 682.81 L1816.94 682.81 L1816.38 682.81 L1815.82 682.81 L1815.26 682.81 L1814.7 682.81 L1814.14 682.81 L1813.58 682.81 L1813.02 682.81 L1812.46 682.81 L1811.9 682.81 L1811.35 682.81 L1810.79 682.81 L1810.23 682.81 L1809.67 682.81 L1809.11 682.81 L1808.55 682.81 L1807.99 682.81 L1807.43 682.81 L1806.87 682.81 L1806.31 682.81 L1805.75 682.81 L1805.19 682.81 L1804.63 682.81 L1804.08 682.81 L1803.52 682.81 L1802.96 682.81 L1802.4 682.81 L1801.84 682.81 L1801.28 682.81 L1800.72 682.81 L1800.16 682.81 L1799.6 682.81 L1799.04 682.81 L1798.48 682.81 L1797.92 682.81 L1797.36 682.81 L1796.8 682.81 L1796.25 682.81 L1795.69 682.81 L1795.13 682.81 L1794.57 682.81 L1794.01 682.81 L1793.45 682.81 L1792.89 682.81 L1792.33 682.81 L1791.77 682.81 L1791.21 682.81 L1790.65 682.81 L1790.09 682.81 L1789.53 682.81 L1788.98 682.81 L1788.42 682.81 L1787.86 682.81 L1787.3 682.81 L1786.74 682.81 L1786.18 682.81 L1785.62 682.81 L1785.06 682.81 L1784.5 682.81 L1783.94 682.81 L1783.38 682.81 L1782.82 682.81 L1782.26 682.81 L1781.71 682.81 L1781.15 682.81 L1780.59 682.81 L1780.03 682.81 L1779.47 682.81 L1778.91 682.81 L1778.35 682.81 L1777.79 682.81 L1777.23 682.81 L1776.67 682.81 L1776.11 682.81 L1775.55 682.81 L1774.99 682.81 L1774.43 682.81 L1773.88 682.81 L1773.32 682.81 L1772.76 682.81 L1772.2 682.81 L1771.64 682.81 L1771.08 682.81 L1770.52 682.81 L1769.96 682.81 L1769.4 682.81 L1768.84 682.81 L1768.28 682.81 L1767.72 682.81 L1767.16 682.81 L1766.61 682.81 L1766.05 682.81 L1765.49 682.81 L1764.93 682.81 L1764.37 682.81 L1763.81 682.81 L1763.25 682.81 L1762.69 682.81 L1762.13 682.81 L1761.57 682.81 L1761.01 682.81 L1760.45 682.81 L1759.89 682.81 L1759.34 682.81 L1758.78 682.81 L1758.22 682.81 L1757.66 682.81 L1757.1 682.81 L1756.54 682.81 L1755.98 682.81 L1755.42 682.81 L1754.86 682.81 L1754.3 682.81 L1753.74 682.81 L1753.18 682.81 L1752.62 682.81 L1752.06 682.81 L1751.51 682.81 L1750.95 682.81 L1750.39 682.81 L1749.83 682.81 L1749.27 682.81 L1748.71 682.81 L1748.15 682.81 L1747.59 682.81 L1747.03 682.81 L1746.47 682.81 L1745.91 682.81 L1745.35 682.81 L1744.79 682.81 L1744.24 682.81 L1743.68 682.81 L1743.12 682.81 L1742.56 682.81 L1742 682.81 L1741.44 682.81 L1740.88 682.81 L1740.32 682.81 L1739.76 682.81 L1739.2 682.81 L1738.64 682.81 L1738.08 682.81 L1737.52 682.81 L1736.97 682.81 L1736.41 682.81 L1735.85 682.81 L1735.29 682.81 L1734.73 682.81 L1734.17 682.81 L1733.61 682.81 L1733.05 682.81 L1732.49 682.81 L1731.93 682.81 L1731.37 682.81 L1730.81 682.81 L1730.25 682.81 L1729.69 682.81 L1729.14 682.81 L1728.58 682.81 L1728.02 682.81 L1727.46 682.81 L1726.9 682.81 L1726.34 682.81 L1725.78 682.81 L1725.22 682.81 L1724.66 682.81 L1724.1 682.81 L1723.54 682.81 L1722.98 682.81 L1722.42 682.81 L1721.87 682.81 L1721.31 682.81 L1720.75 682.81 L1720.19 682.81 L1719.63 682.81 L1719.07 682.81 L1718.51 682.81 L1717.95 682.81 L1717.39 682.81 L1716.83 682.81 L1716.27 682.81 L1715.71 682.81 L1715.15 682.81 L1714.6 682.81 L1714.04 682.81 L1713.48 682.81 L1712.92 682.81 L1712.36 682.81 L1711.8 682.81 L1711.24 682.81 L1710.68 682.81 L1710.12 682.81 L1709.56 682.81 L1709 682.81 L1708.44 682.81 L1707.88 682.81 L1707.32 682.81 L1706.77 682.81 L1706.21 682.81 L1705.65 682.81 L1705.09 682.81 L1704.53 682.81 L1703.97 682.81 L1703.41 682.81 L1702.85 682.81 L1702.29 682.81 L1701.73 682.81 L1701.17 682.81 L1700.61 682.81 L1700.05 682.81 L1699.5 682.81 L1698.94 682.81 L1698.38 682.81 L1697.82 682.81 L1697.26 682.81 L1696.7 682.81 L1696.14 682.81 L1695.58 682.81 L1695.02 682.81 L1694.46 682.81 L1693.9 682.81 L1693.34 682.81 L1692.78 682.81 L1692.23 682.81 L1691.67 682.81 L1691.11 682.81 L1690.55 682.81 L1689.99 682.81 L1689.43 682.81 L1688.87 682.81 L1688.31 682.81 L1687.75 682.81 L1687.19 682.81 L1686.63 682.81 L1686.07 682.81 L1685.51 682.81 L1684.95 682.81 L1684.4 682.81 L1683.84 682.81 L1683.28 682.81 L1682.72 682.81 L1682.16 682.81 L1681.6 682.81 L1681.04 682.81 L1680.48 682.81 L1679.92 682.81 L1679.36 682.81 L1678.8 682.81 L1678.24 682.81 L1677.68 682.81 L1677.13 682.81 L1676.57 682.81 L1676.01 682.81 L1675.45 682.81 L1674.89 682.81 L1674.33 682.81 L1673.77 682.81 L1673.21 682.81 L1672.65 682.81 L1672.09 682.81 L1671.53 682.81 L1670.97 682.81 L1670.41 682.81 L1669.85 682.81 L1669.3 682.81 L1668.74 682.81 L1668.18 682.81 L1667.62 682.81 L1667.06 682.81 L1666.5 682.81 L1665.94 682.81 L1665.38 682.81 L1664.82 682.81 L1664.26 682.81 L1663.7 682.81 L1663.14 682.81 L1662.58 682.81 L1662.03 682.81 L1661.47 682.81 L1660.91 682.81 L1660.35 682.81 L1659.79 682.81 L1659.23 682.81 L1658.67 682.81 L1658.11 682.81 L1657.55 682.81 L1656.99 682.81 L1656.43 682.81 L1655.87 682.81 L1655.31 682.81 L1654.76 682.81 L1654.2 682.81 L1653.64 682.81 L1653.08 682.81 L1652.52 682.81 L1651.96 682.81 L1651.4 682.81 L1650.84 682.81 L1650.28 682.81 L1649.72 682.81 L1649.16 682.81 L1648.6 682.81 L1648.04 682.81 L1647.48 682.81 L1646.93 682.81 L1646.37 682.81 L1645.81 682.81 L1645.25 682.81 L1644.69 682.81 L1644.13 682.81 L1643.57 682.81 L1643.01 682.81 L1642.45 682.81 L1641.89 682.81 L1641.33 682.81 L1640.77 682.81 L1640.21 682.81 L1639.66 682.81 L1639.1 682.81 L1638.54 682.81 L1637.98 682.81 L1637.42 682.81 L1636.86 682.81 L1636.3 682.81 L1635.74 682.81 L1635.18 682.81 L1634.62 682.81 L1634.06 682.81 L1633.5 682.81 L1632.94 682.81 L1632.39 682.81 L1631.83 682.81 L1631.27 682.81 L1630.71 682.81 L1630.15 682.81 L1629.59 682.81 L1629.03 682.81 L1628.47 682.81 L1627.91 682.81 L1627.35 682.81 L1626.79 682.81 L1626.23 682.81 L1625.67 682.81 L1625.11 682.81 L1624.56 682.81 L1624 682.81 L1623.44 682.81 L1622.88 682.81 L1622.32 682.81 L1621.76 682.81 L1621.2 682.81 L1620.64 682.81 L1620.08 682.81 L1619.52 682.81 L1618.96 682.81 L1618.4 682.81 L1617.84 682.81 L1617.29 682.81 L1616.73 682.81 L1616.17 682.81 L1615.61 682.81 L1615.05 682.81 L1614.49 682.81 L1613.93 682.81 L1613.37 682.81 L1612.81 682.81 L1612.25 682.81 L1611.69 682.81 L1611.13 682.81 L1610.57 682.81 L1610.02 682.81 L1609.46 682.81 L1608.9 682.81 L1608.34 682.81 L1607.78 682.81 L1607.22 682.81 L1606.66 682.81 L1606.1 682.81 L1605.54 682.81 L1604.98 682.81 L1604.42 682.81 L1603.86 682.81 L1603.3 682.81 L1602.74 682.81 L1602.19 682.81 L1601.63 682.81 L1601.07 682.81 L1600.51 682.81 L1599.95 682.81 L1599.39 682.81 L1598.83 682.81 L1598.27 682.81 L1597.71 682.81 L1597.15 682.81 L1596.59 682.81 L1596.03 682.81 L1595.47 682.81 L1594.92 682.81 L1594.36 682.81 L1593.8 682.81 L1593.24 682.81 L1592.68 682.81 L1592.12 682.81 L1591.56 682.81 L1591 682.81 L1590.44 682.81 L1589.88 682.81 L1589.32 682.81 L1588.76 682.81 L1588.2 682.81 L1587.65 682.81 L1587.09 682.81 L1586.53 682.81 L1585.97 682.81 L1585.41 682.81 L1584.85 682.81 L1584.29 682.81 L1583.73 682.81 L1583.17 682.81 L1582.61 682.81 L1582.05 682.81 L1581.49 682.81 L1580.93 682.81 L1580.37 682.81 L1579.82 682.81 L1579.26 682.81 L1578.7 682.81 L1578.14 682.81 L1577.58 682.81 L1577.02 682.81 L1576.46 682.81 L1575.9 682.81 L1575.34 682.81 L1574.78 682.81 L1574.22 682.81 L1573.66 682.81 L1573.1 682.81 L1572.55 682.81 L1571.99 682.81 L1571.43 682.81 L1570.87 682.81 L1570.31 682.81 L1569.75 682.81 L1569.19 682.81 L1568.63 682.81 L1568.07 682.81 L1567.51 682.81 L1566.95 682.81 L1566.39 682.81 L1565.83 682.81 L1565.28 682.81 L1564.72 682.81 L1564.16 682.81 L1563.6 682.81 L1563.04 682.81 L1562.48 682.81 L1561.92 682.81 L1561.36 682.81 L1560.8 682.81 L1560.24 682.81 L1559.68 682.81 L1559.12 682.81 L1558.56 682.81 L1558 682.81 L1557.45 682.81 L1556.89 682.81 L1556.33 682.81 L1555.77 682.81 L1555.21 682.81 L1554.65 682.81 L1554.09 682.81 L1553.53 682.81 L1552.97 682.81 L1552.41 682.81 L1551.85 682.81 L1551.29 682.81 L1550.73 682.81 L1550.18 682.81 L1549.62 682.81 L1549.06 682.81 L1548.5 682.81 L1547.94 682.81 L1547.38 682.81 L1546.82 682.81 L1546.26 682.81 L1545.7 682.81 L1545.14 682.81 L1544.58 682.81 L1544.02 682.81 L1543.46 682.81 L1542.9 682.81 L1542.35 682.81 L1541.79 682.81 L1541.23 682.81 L1540.67 682.81 L1540.11 682.81 L1539.55 682.81 L1538.99 682.81 L1538.43 682.81 L1537.87 682.81 L1537.31 682.81 L1536.75 682.81 L1536.19 682.81 L1535.63 682.81 L1535.08 682.81 L1534.52 682.81 L1533.96 682.81 L1533.4 682.81 L1532.84 682.81 L1532.28 682.81 L1531.72 682.81 L1531.16 682.81 L1530.6 682.81 L1530.04 682.81 L1529.48 682.81 L1528.92 682.81 L1528.36 682.81 L1527.81 682.81 L1527.25 682.81 L1526.69 682.81 L1526.13 682.81 L1525.57 682.81 L1525.01 682.81 L1524.45 682.81 L1523.89 682.81 L1523.33 682.81 L1522.77 682.81 L1522.21 682.81 L1521.65 682.81 L1521.09 682.81 L1520.53 682.81 L1519.98 682.81 L1519.42 682.81 L1518.86 682.81 L1518.3 682.81 L1517.74 682.81 L1517.18 682.81 L1516.62 682.81 L1516.06 682.81 L1515.5 682.81 L1514.94 682.81 L1514.38 682.81 L1513.82 682.81 L1513.26 682.81 L1512.71 682.81 L1512.15 682.81 L1511.59 682.81 L1511.03 682.81 L1510.47 682.81 L1509.91 682.81 L1509.35 682.81 L1508.79 682.81 L1508.23 682.81 L1507.67 682.81 L1507.11 682.81 L1506.55 682.81 L1505.99 682.81 L1505.44 682.81 L1504.88 682.81 L1504.32 682.81 L1503.76 682.81 L1503.2 682.81 L1502.64 682.81 L1502.08 682.81 L1501.52 682.81 L1500.96 682.81 L1500.4 682.81 L1499.84 682.81 L1499.28 682.81 L1498.72 682.81 L1498.16 682.81 L1497.61 682.81 L1497.05 682.81 L1496.49 682.81 L1495.93 682.81 L1495.37 682.81 L1494.81 682.81 L1494.25 682.81 L1493.69 682.81 L1493.13 682.81 L1492.57 682.81 L1492.01 682.81 L1491.45 682.81 L1490.89 682.81 L1490.34 682.81 L1489.78 682.81 L1489.22 682.81 L1488.66 682.81 L1488.1 682.81 L1487.54 682.81 L1486.98 682.81 L1486.42 682.81 L1485.86 682.81 L1485.3 682.81 L1484.74 682.81 L1484.18 682.81 L1483.62 682.81 L1483.07 682.81 L1482.51 682.81 L1481.95 682.81 L1481.39 682.81 L1480.83 682.81 L1480.27 682.81 L1479.71 682.81 L1479.15 682.81 L1478.59 682.81 L1478.03 682.81 L1477.47 682.81 L1476.91 682.81 L1476.35 682.81 L1475.79 682.81 L1475.24 682.81 L1474.68 682.81 L1474.12 682.81 L1473.56 682.81 L1473 682.81 L1472.44 682.81 L1471.88 682.81 L1471.32 682.81 L1470.76 682.81 L1470.2 682.81 L1469.64 682.81 L1469.08 682.81 L1468.52 682.81 L1467.97 682.81 L1467.41 682.81 L1466.85 682.81 L1466.29 682.81 L1465.73 682.81 L1465.17 682.81 L1464.61 682.81 L1464.05 682.81 L1463.49 682.81 L1462.93 682.81 L1462.37 682.81 L1461.81 682.81 L1461.25 682.81 L1460.7 682.81 L1460.14 682.81 L1459.58 682.81 L1459.02 682.81 L1458.46 682.81 L1457.9 682.81 L1457.34 682.81 L1456.78 682.81 L1456.22 682.81 L1455.66 682.81 L1455.1 682.81 L1454.54 682.81 L1453.98 682.81 L1453.42 682.81 L1452.87 682.81 L1452.31 682.81 L1451.75 682.81 L1451.19 682.81 L1450.63 682.81 L1450.07 682.81 L1449.51 682.81 L1448.95 682.81 L1448.39 682.81 L1447.83 682.81 L1447.27 682.81 L1446.71 682.81 L1446.15 682.81 L1445.6 682.81 L1445.04 682.81 L1444.48 682.81 L1443.92 682.81 L1443.36 682.81 L1442.8 682.81 L1442.24 682.81 L1441.68 682.81 L1441.12 682.81 L1440.56 682.81 L1440 682.81 L1439.44 682.81 L1438.88 682.81 L1438.33 682.81 L1437.77 682.81 L1437.21 682.81 L1436.65 682.81 L1436.09 682.81 L1435.53 682.81 L1434.97 682.81 L1434.41 682.81 L1433.85 682.81 L1433.29 682.81 L1432.73 682.81 L1432.17 682.81 L1431.61 682.81 L1431.05 682.81 L1430.5 682.81 L1429.94 682.81 L1429.38 682.81 L1428.82 682.81 L1428.26 682.81 L1427.7 682.81 L1427.14 682.81 L1426.58 682.81 L1426.02 682.81 L1425.46 682.81 L1424.9 682.81 L1424.34 682.81 L1423.78 682.81 L1423.23 682.81 L1422.67 682.81 L1422.11 682.81 L1421.55 682.81 L1420.99 682.81 L1420.43 682.81 L1419.87 682.81 L1419.31 682.81 L1418.75 682.81 L1418.19 682.81 L1417.63 682.81 L1417.07 682.81 L1416.51 682.81 L1415.95 682.81 L1415.4 682.81 L1414.84 682.81 L1414.28 682.81 L1413.72 682.81 L1413.16 682.81 L1412.6 682.81 L1412.04 682.81 L1411.48 682.81 L1410.92 682.81 L1410.36 682.81 L1409.8 682.81 L1409.24 682.81 L1408.68 682.81 L1408.13 682.81 L1407.57 682.81 L1407.01 682.81 L1406.45 682.81 L1405.89 682.81 L1405.33 682.81 L1404.77 682.81 L1404.21 682.81 L1403.65 682.81 L1403.09 682.81 L1402.53 682.81 L1401.97 682.81 L1401.41 682.81 L1400.86 682.81 L1400.3 682.81 L1399.74 682.81 L1399.18 682.81 L1398.62 682.81 L1398.06 682.81 L1397.5 682.81 L1396.94 682.81 L1396.38 682.81 L1395.82 682.81 L1395.26 682.81 L1394.7 682.81 L1394.14 682.81 L1393.58 682.81 L1393.03 682.81 L1392.47 682.81 L1391.91 682.81 L1391.35 682.81 L1390.79 682.81 L1390.23 682.81 L1389.67 682.81 L1389.11 682.81 L1388.55 682.81 L1387.99 682.81 L1387.43 682.81 L1386.87 682.81 L1386.31 682.81 L1385.76 682.81 L1385.2 682.81 L1384.64 682.81 L1384.08 682.81 L1383.52 682.81 L1382.96 682.81 L1382.4 682.81 L1381.84 682.81 L1381.28 682.81 L1380.72 682.81 L1380.16 682.81 L1379.6 682.81 L1379.04 682.81 L1378.49 682.81 L1377.93 682.81 L1377.37 682.81 L1376.81 682.81 L1376.25 682.81 L1375.69 682.81 L1375.13 682.81 L1374.57 682.81 L1374.01 682.81 L1373.45 682.81 L1372.89 682.81 L1372.33 682.81 L1371.77 682.81 L1371.21 682.81 L1370.66 682.81 L1370.1 682.81 L1369.54 682.81 L1368.98 682.81 L1368.42 682.81 L1367.86 682.81 L1367.3 682.81 L1366.74 682.81 L1366.18 682.81 L1365.62 682.81 L1365.06 682.81 L1364.5 682.81 L1363.94 682.81 L1363.39 682.81 L1362.83 682.81 L1362.27 682.81 L1361.71 682.81 L1361.15 682.81 L1360.59 682.81 L1360.03 682.81 L1359.47 682.81 L1358.91 682.81 L1358.35 682.81 L1357.79 682.81 L1357.23 682.81 L1356.67 682.81 L1356.12 682.81 L1355.56 682.81 L1355 682.81 L1354.44 682.81 L1353.88 682.81 L1353.32 682.81 L1352.76 682.81 L1352.2 682.81 L1351.64 682.81 L1351.08 682.81 L1350.52 682.81 L1349.96 682.81 L1349.4 682.81 L1348.84 682.81 L1348.29 682.81 L1347.73 682.81 L1347.17 682.81 L1346.61 682.81 L1346.05 682.81 L1345.49 682.81 L1344.93 682.81 L1344.37 682.81 L1343.81 682.81 L1343.25 682.81 L1342.69 682.81 L1342.13 682.81 L1341.57 682.81 L1341.02 682.81 L1340.46 682.81 L1339.9 682.81 L1339.34 682.81 L1338.78 682.81 L1338.22 682.81 L1337.66 682.81 L1337.1 682.81 L1336.54 682.81 L1335.98 682.81 L1335.42 682.81 L1334.86 682.81 L1334.3 682.81 L1333.75 682.81 L1333.19 682.81 L1332.63 682.81 L1332.07 682.81 L1331.51 682.81 L1330.95 682.81 L1330.39 682.81 L1329.83 682.81 L1329.27 682.81 L1328.71 682.81 L1328.15 682.81 L1327.59 682.81 L1327.03 682.81 L1326.47 682.81 L1325.92 682.81 L1325.36 682.81 L1324.8 682.81 L1324.24 682.81 L1323.68 682.81 L1323.12 682.81 L1322.56 682.81 L1322 682.81 L1321.44 682.81 L1320.88 682.81 L1320.32 682.81 L1319.76 682.81 L1319.2 682.81 L1318.65 682.81 L1318.09 682.81 L1317.53 682.81 L1316.97 682.81 L1316.41 682.81 L1315.85 682.81 L1315.29 682.81 L1314.73 682.81 L1314.17 682.81 L1313.61 682.81 L1313.05 682.81 L1312.49 682.81 L1311.93 682.81 L1311.38 682.81 L1310.82 682.81 L1310.26 682.81 L1309.7 682.81 L1309.14 682.81 L1308.58 682.81 L1308.02 682.81 L1307.46 682.81 L1306.9 682.81 L1306.34 682.81 L1305.78 682.81 L1305.22 682.81 L1304.66 682.81 L1304.1 682.81 L1303.55 682.81 L1302.99 682.81 L1302.43 682.81 L1301.87 682.81 L1301.31 682.81 L1300.75 682.81 L1300.19 682.81 L1299.63 682.81 L1299.07 682.81 L1298.51 682.81 L1297.95 682.81 L1297.39 682.81 L1296.83 682.81 L1296.28 682.81 L1295.72 682.81 L1295.16 682.81 L1294.6 682.81 L1294.04 682.81 L1293.48 682.81 L1292.92 682.81 L1292.36 682.81 L1291.8 682.81 L1291.24 682.81 L1290.68 682.81 L1290.12 682.81 L1289.56 682.81 L1289 682.81 L1288.45 682.81 L1287.89 682.81 L1287.33 682.81 L1286.77 682.81 L1286.21 682.81 L1285.65 682.81 L1285.09 682.81 L1284.53 682.81 L1283.97 682.81 L1283.41 682.81 L1282.85 682.81 L1282.29 682.81 L1281.73 682.81 L1281.18 682.81 L1280.62 682.81 L1280.06 682.81 L1279.5 682.81 L1278.94 682.81 L1278.38 682.81 L1277.82 682.81 L1277.26 682.81 L1276.7 682.81 L1276.14 682.81 L1275.58 682.81 L1275.02 682.81 L1274.46 682.81 L1273.91 682.81 L1273.35 682.81 L1272.79 682.81 L1272.23 682.81 L1271.67 682.81 L1271.11 682.81 L1270.55 682.81 L1269.99 682.81 L1269.43 682.81 L1268.87 682.81 L1268.31 682.81 L1267.75 682.81 L1267.19 682.81 L1266.63 682.81 L1266.08 682.81 L1265.52 682.81 L1264.96 682.81 L1264.4 682.81 L1263.84 682.81 L1263.28 682.81 L1262.72 682.81 L1262.16 682.81 L1261.6 682.81 L1261.04 682.81 L1260.48 682.81 L1259.92 682.81 L1259.36 682.81 L1258.81 682.81 L1258.25 682.81 L1257.69 682.81 L1257.13 682.81 L1256.57 682.81 L1256.01 682.81 L1255.45 682.81 L1254.89 682.81 L1254.33 682.81 L1253.77 682.81 L1253.21 682.81 L1252.65 682.81 L1252.09 682.81 L1251.54 682.81 L1250.98 682.81 L1250.42 682.81 L1249.86 682.81 L1249.3 682.81 L1248.74 682.81 L1248.18 682.81 L1247.62 682.81 L1247.06 682.81 L1246.5 682.81 L1245.94 682.81 L1245.38 682.81 L1244.82 682.81 L1244.26 682.81 L1243.71 682.81 L1243.15 682.81 L1242.59 682.81 L1242.03 682.81 L1241.47 682.81 L1240.91 682.81 L1240.35 682.81 L1239.79 682.81 L1239.23 682.81 L1238.67 682.81 L1238.11 682.81 L1237.55 682.81 L1236.99 682.81 L1236.44 682.81 L1235.88 682.81 L1235.32 682.81 L1234.76 682.81 L1234.2 682.81 L1233.64 682.81 L1233.08 682.81 L1232.52 682.81 L1231.96 682.81 L1231.4 682.81 L1230.84 682.81 L1230.28 682.81 L1229.72 682.81 L1229.17 682.81 L1228.61 682.81 L1228.05 682.81 L1227.49 682.81 L1226.93 682.81 L1226.37 682.81 L1225.81 682.81 L1225.25 682.81 L1224.69 682.81 L1224.13 682.81 L1223.57 682.81 L1223.01 682.81 L1222.45 682.81 L1221.89 682.81 L1221.34 682.81 L1220.78 682.81 L1220.22 682.81 L1219.66 682.81 L1219.1 682.81 L1218.54 682.81 L1217.98 682.81 L1217.42 682.81 L1216.86 682.81 L1216.3 682.81 L1215.74 682.81 L1215.18 682.81 L1214.62 682.81 L1214.07 682.81 L1213.51 682.81 L1212.95 682.81 L1212.39 682.81 L1211.83 682.81 L1211.27 682.81 L1210.71 682.81 L1210.15 682.81 L1209.59 682.81 L1209.03 682.81 L1208.47 682.81 L1207.91 682.81 L1207.35 682.81 L1206.8 682.81 L1206.24 682.81 L1205.68 682.81 L1205.12 682.81 L1204.56 682.81 L1204 682.81 L1203.44 682.81 L1202.88 682.81 L1202.32 682.81 L1201.76 682.81 L1201.2 682.81 L1200.64 682.81 L1200.08 682.81 L1199.52 682.81 L1198.97 682.81 L1198.41 682.81 L1197.85 682.81 L1197.29 682.81 L1196.73 682.81 L1196.17 682.81 L1195.61 682.81 L1195.05 682.81 L1194.49 682.81 L1193.93 682.81 L1193.37 682.81 L1192.81 682.81 L1192.25 682.81 L1191.7 682.81 L1191.14 682.81 L1190.58 682.81 L1190.02 682.81 L1189.46 682.81 L1188.9 682.81 L1188.34 682.81 L1187.78 682.81 L1187.22 682.81 L1186.66 682.81 L1186.1 682.81 L1185.54 682.81 L1184.98 682.81 L1184.43 682.81 L1183.87 682.81 L1183.31 682.81 L1182.75 682.81 L1182.19 682.81 L1181.63 682.81 L1181.07 682.81 L1180.51 682.81 L1179.95 682.81 L1179.39 682.81 L1178.83 682.81 L1178.27 682.81 L1177.71 682.81 L1177.15 682.81 L1176.6 682.81 L1176.04 682.81 L1175.48 682.81 L1174.92 682.81 L1174.36 682.81 L1173.8 682.81 L1173.24 682.81 L1172.68 682.81 L1172.12 682.81 L1171.56 682.81 L1171 682.81 L1170.44 682.81 L1169.88 682.81 L1169.33 682.81 L1168.77 682.81 L1168.21 682.81 L1167.65 682.81 L1167.09 682.81 L1166.53 682.81 L1165.97 682.81 L1165.41 682.81 L1164.85 682.81 L1164.29 682.81 L1163.73 682.81 L1163.17 682.81 L1162.61 682.81 L1162.05 682.81 L1161.5 682.81 L1160.94 682.81 L1160.38 682.81 L1159.82 682.81 L1159.26 682.81 L1158.7 682.81 L1158.14 682.81 L1157.58 682.81 L1157.02 682.81 L1156.46 682.81 L1155.9 682.81 L1155.34 682.81 L1154.78 682.81 L1154.23 682.81 L1153.67 682.81 L1153.11 682.81 L1152.55 682.81 L1151.99 682.81 L1151.43 682.81 L1150.87 682.81 L1150.31 682.81 L1149.75 682.81 L1149.19 682.81 L1148.63 682.81 L1148.07 682.81 L1147.51 682.81 L1146.96 682.81 L1146.4 682.81 L1145.84 682.81 L1145.28 682.81 L1144.72 682.81 L1144.16 682.81 L1143.6 682.81 L1143.04 682.81 L1142.48 682.81 L1141.92 682.81 L1141.36 682.81 L1140.8 682.81 L1140.24 682.81 L1139.68 682.81 L1139.13 682.81 L1138.57 682.81 L1138.01 682.81 L1137.45 682.81 L1136.89 682.81 L1136.33 682.81 L1135.77 682.81 L1135.21 682.81 L1134.65 682.81 L1134.09 682.81 L1133.53 682.81 L1132.97 682.81 L1132.41 682.81 L1131.86 682.81 L1131.3 682.81 L1130.74 682.81 L1130.18 682.81 L1129.62 682.81 L1129.06 682.81 L1128.5 682.81 L1127.94 682.81 L1127.38 682.81 L1126.82 682.81 L1126.26 682.81 L1125.7 682.81 L1125.14 682.81 L1124.59 682.81 L1124.03 682.81 L1123.47 682.81 L1122.91 682.81 L1122.35 682.81 L1121.79 682.81 L1121.23 682.81 L1120.67 682.81 L1120.11 682.81 L1119.55 682.81 L1118.99 682.81 L1118.43 682.81 L1117.87 682.81 L1117.31 682.81 L1116.76 682.81 L1116.2 682.81 L1115.64 682.81 L1115.08 682.81 L1114.52 682.81 L1113.96 682.81 L1113.4 682.81 L1112.84 682.81 L1112.28 682.81 L1111.72 682.81 L1111.16 682.81 L1110.6 682.81 L1110.04 682.81 L1109.49 682.81 L1108.93 682.81 L1108.37 682.81 L1107.81 682.81 L1107.25 682.81 L1106.69 682.81 L1106.13 682.81 L1105.57 682.81 L1105.01 682.81 L1104.45 682.81 L1103.89 682.81 L1103.33 682.81 L1102.77 682.81 L1102.22 682.81 L1101.66 682.81 L1101.1 682.81 L1100.54 682.81 L1099.98 682.81 L1099.42 682.81 L1098.86 682.81 L1098.3 682.81 L1097.74 682.81 L1097.18 682.81 L1096.62 682.81 L1096.06 682.81 L1095.5 682.81 L1094.94 682.81 L1094.39 682.81 L1093.83 682.81 L1093.27 682.81 L1092.71 682.81 L1092.15 682.81 L1091.59 682.81 L1091.03 682.81 L1090.47 682.81 L1089.91 682.81 L1089.35 682.81 L1088.79 682.81 L1088.23 682.81 L1087.67 682.81 L1087.12 682.81 L1086.56 682.81 L1086 682.81 L1085.44 682.81 L1084.88 682.81 L1084.32 682.81 L1083.76 682.81 L1083.2 682.81 L1082.64 682.81 L1082.08 682.81 L1081.52 682.81 L1080.96 682.81 L1080.4 682.81 L1079.85 682.81 L1079.29 682.81 L1078.73 682.81 L1078.17 682.81 L1077.61 682.81 L1077.05 682.81 L1076.49 682.81 L1075.93 682.81 L1075.37 682.81 L1074.81 682.81 L1074.25 682.81 L1073.69 682.81 L1073.13 682.81 L1072.57 682.81 L1072.02 682.81 L1071.46 682.81 L1070.9 682.81 L1070.34 682.81 L1069.78 682.81 L1069.22 682.81 L1068.66 682.81 L1068.1 682.81 L1067.54 682.81 L1066.98 682.81 L1066.42 682.81 L1065.86 682.81 L1065.3 682.81 L1064.75 682.81 L1064.19 682.81 L1063.63 682.81 L1063.07 682.81 L1062.51 682.81 L1061.95 682.81 L1061.39 682.81 L1060.83 682.81 L1060.27 682.81 L1059.71 682.81 L1059.15 682.81 L1058.59 682.81 L1058.03 682.81 L1057.48 682.81 L1056.92 682.81 L1056.36 682.81 L1055.8 682.81 L1055.24 682.81 L1054.68 682.81 L1054.12 682.81 L1053.56 682.81 L1053 682.81 L1052.44 682.81 L1051.88 682.81 L1051.32 682.81 L1050.76 682.81 L1050.2 682.81 L1049.65 682.81 L1049.09 682.81 L1048.53 682.81 L1047.97 682.81 L1047.41 682.81 L1046.85 682.81 L1046.29 682.81 L1045.73 682.81 L1045.17 682.81 L1044.61 682.81 L1044.05 682.81 L1043.49 682.81 L1042.93 682.81 L1042.38 682.81 L1041.82 682.81 L1041.26 682.81 L1040.7 682.81 L1040.14 682.81 L1039.58 682.81 L1039.02 682.81 L1038.46 682.81 L1037.9 682.81 L1037.34 682.81 L1036.78 682.81 L1036.22 682.81 L1035.66 682.81 L1035.1 682.81 L1034.55 682.81 L1033.99 682.81 L1033.43 682.81 L1032.87 682.81 L1032.31 682.81 L1031.75 682.81 L1031.19 682.81 L1030.63 682.81 L1030.07 682.81 L1029.51 682.81 L1028.95 682.81 L1028.39 682.81 L1027.83 682.81 L1027.28 682.81 L1026.72 682.81 L1026.16 682.81 L1025.6 682.81 L1025.04 682.81 L1024.48 682.81 L1023.92 682.81 L1023.36 682.81 L1022.8 682.81 L1022.24 682.81 L1021.68 682.81 L1021.12 682.81 L1020.56 682.81 L1020.01 682.81 L1019.45 682.81 L1018.89 682.81 L1018.33 682.81 L1017.77 682.81 L1017.21 682.81 L1016.65 682.81 L1016.09 682.81 L1015.53 682.81 L1014.97 682.81 L1014.41 682.81 L1013.85 682.81 L1013.29 682.81 L1012.73 682.81 L1012.18 682.81 L1011.62 682.81 L1011.06 682.81 L1010.5 682.81 L1009.94 682.81 L1009.38 682.81 L1008.82 682.81 L1008.26 682.81 L1007.7 682.81 L1007.14 682.81 L1006.58 682.81 L1006.02 682.81 L1005.46 682.81 L1004.91 682.81 L1004.35 682.81 L1003.79 682.81 L1003.23 682.81 L1002.67 682.81 L1002.11 682.81 L1001.55 682.81 L1000.99 682.81 L1000.43 682.81 L999.872 682.81 L999.313 682.81 L998.754 682.81 L998.194 682.81 L997.635 682.81 L997.076 682.81 L996.517 682.81 L995.957 682.81 L995.398 682.81 L994.839 682.81 L994.28 682.81 L993.72 682.81 L993.161 682.81 L992.602 682.81 L992.043 682.81 L991.483 682.81 L990.924 682.81 L990.365 682.81 L989.806 682.81 L989.246 682.81 L988.687 682.81 L988.128 682.81 L987.569 682.81 L987.009 682.81 L986.45 682.81 L985.891 682.81 L985.332 682.81 L984.772 682.81 L984.213 682.81 L983.654 682.81 L983.095 682.81 L982.535 682.81 L981.976 682.81 L981.417 682.81 L980.858 682.81 L980.298 682.81 L979.739 682.81 L979.18 682.81 L978.621 682.81 L978.061 682.81 L977.502 682.81 L976.943 682.81 L976.384 682.81 L975.824 682.81 L975.265 682.81 L974.706 682.81 L974.147 682.81 L973.587 682.81 L973.028 682.81 L972.469 682.81 L971.91 682.81 L971.35 682.81 L970.791 682.81 L970.232 682.81 L969.673 682.81 L969.113 682.81 L968.554 682.81 L967.995 682.81 L967.436 682.81 L966.876 682.81 L966.317 682.81 L965.758 682.81 L965.199 682.81 L964.639 682.81 L964.08 682.81 L963.521 682.81 L962.962 682.81 L962.402 682.81 L961.843 682.81 L961.284 682.81 L960.725 682.81 L960.165 682.81 L959.606 682.81 L959.047 682.81 L958.488 682.81 L957.928 682.81 L957.369 682.81 L956.81 682.81 L956.251 682.81 L955.691 682.81 L955.132 682.81 L954.573 682.81 L954.014 682.81 L953.454 682.81 L952.895 682.81 L952.336 682.81 L951.777 682.81 L951.217 682.81 L950.658 682.81 L950.099 682.81 L949.54 682.81 L948.98 682.81 L948.421 682.81 L947.862 682.81 L947.303 682.81 L946.743 682.81 L946.184 682.81 L945.625 682.81 L945.066 682.81 L944.506 682.81 L943.947 682.81 L943.388 682.81 L942.829 682.81 L942.269 682.81 L941.71 682.81 L941.151 682.81 L940.592 682.81 L940.032 682.81 L939.473 682.81 L938.914 682.81 L938.355 682.81 L937.795 682.81 L937.236 682.81 L936.677 682.81 L936.118 682.81 L935.558 682.81 L934.999 682.81 L934.44 682.81 L933.881 682.81 L933.321 682.81 L932.762 682.81 L932.203 682.81 L931.644 682.81 L931.084 682.81 L930.525 682.81 L929.966 682.81 L929.406 682.81 L928.847 682.81 L928.288 682.81 L927.729 682.81 L927.169 682.81 L926.61 682.81 L926.051 682.81 L925.492 682.81 L924.932 682.81 L924.373 682.81 L923.814 682.81 L923.255 682.81 L922.695 682.81 L922.136 682.81 L921.577 682.81 L921.018 682.81 L920.458 682.81 L919.899 682.81 L919.34 682.81 L918.781 682.81 L918.221 682.81 L917.662 682.81 L917.103 682.81 L916.544 682.81 L915.984 682.81 L915.425 682.81 L914.866 682.81 L914.307 682.81 L913.747 682.81 L913.188 682.81 L912.629 682.81 L912.07 682.81 L911.51 682.81 L910.951 682.81 L910.392 682.81 L909.833 682.81 L909.273 682.81 L908.714 682.81 L908.155 682.81 L907.596 682.81 L907.036 682.81 L906.477 682.81 L905.918 682.81 L905.359 682.81 L904.799 682.81 L904.24 682.81 L903.681 682.81 L903.122 682.81 L902.562 682.81 L902.003 682.81 L901.444 682.81 L900.885 682.81 L900.325 682.81 L899.766 682.81 L899.207 682.81 L898.648 682.81 L898.088 682.81 L897.529 682.81 L896.97 682.81 L896.411 682.81 L895.851 682.81 L895.292 682.81 L894.733 682.81 L894.174 682.81 L893.614 682.81 L893.055 682.81 L892.496 682.81 L891.937 682.81 L891.377 682.81 L890.818 682.81 L890.259 682.81 L889.7 682.81 L889.14 682.81 L888.581 682.81 L888.022 682.81 L887.463 682.81 L886.903 682.81 L886.344 682.81 L885.785 682.81 L885.226 682.81 L884.666 682.81 L884.107 682.81 L883.548 682.81 L882.989 682.81 L882.429 682.81 L881.87 682.81 L881.311 682.81 L880.752 682.81 L880.192 682.81 L879.633 682.81 L879.074 682.81 L878.515 682.81 L877.955 682.81 L877.396 682.81 L876.837 682.81 L876.278 682.81 L875.718 682.81 L875.159 682.81 L874.6 682.81 L874.041 682.81 L873.481 682.81 L872.922 682.81 L872.363 682.81 L871.804 682.81 L871.244 682.81 L870.685 682.81 L870.126 682.81 L869.567 682.81 L869.007 682.81 L868.448 682.81 L867.889 682.81 L867.33 682.81 L866.77 682.81 L866.211 682.81 L865.652 682.81 L865.093 682.81 L864.533 682.81 L863.974 682.81 L863.415 682.81 L862.856 682.81 L862.296 682.81 L861.737 682.81 L861.178 682.81 L860.619 682.81 L860.059 682.81 L859.5 682.81 L858.941 682.81 L858.382 682.81 L857.822 682.81 L857.263 682.81 L856.704 682.81 L856.145 682.81 L855.585 682.81 L855.026 682.81 L854.467 682.81 L853.908 682.81 L853.348 682.81 L852.789 682.81 L852.23 682.81 L851.671 682.81 L851.111 682.81 L850.552 682.81 L849.993 682.81 L849.434 682.81 L848.874 682.81 L848.315 682.81 L847.756 682.81 L847.197 682.81 L846.637 682.81 L846.078 682.81 L845.519 682.81 L844.96 682.81 L844.4 682.81 L843.841 682.81 L843.282 682.81 L842.723 682.81 L842.163 682.81 L841.604 682.81 L841.045 682.81 L840.486 682.81 L839.926 682.81 L839.367 682.81 L838.808 682.81 L838.249 682.81 L837.689 682.81 L837.13 682.81 L836.571 682.81 L836.012 682.81 L835.452 682.81 L834.893 682.81 L834.334 682.81 L833.775 682.81 L833.215 682.81 L832.656 682.81 L832.097 682.81 L831.538 682.81 L830.978 682.81 L830.419 682.81 L829.86 682.81 L829.301 682.81 L828.741 682.81 L828.182 682.81 L827.623 682.81 L827.064 682.81 L826.504 682.81 L825.945 682.81 L825.386 682.81 L824.827 682.81 L824.267 682.81 L823.708 682.81 L823.149 682.81 L822.59 682.81 L822.03 682.81 L821.471 682.81 L820.912 682.81 L820.353 682.81 L819.793 682.81 L819.234 682.81 L818.675 682.81 L818.116 682.81 L817.556 682.81 L816.997 682.81 L816.438 682.81 L815.879 682.81 L815.319 682.81 L814.76 682.81 L814.201 682.81 L813.642 682.81 L813.082 682.81 L812.523 682.81 L811.964 682.81 L811.405 682.81 L810.845 682.81 L810.286 682.81 L809.727 682.81 L809.168 682.81 L808.608 682.81 L808.049 682.81 L807.49 682.81 L806.931 682.81 L806.371 682.81 L805.812 682.81 L805.253 682.81 L804.693 682.81 L804.134 682.81 L803.575 682.81 L803.016 682.81 L802.456 682.81 L801.897 682.81 L801.338 682.81 L800.779 682.81 L800.219 682.81 L799.66 682.81 L799.101 682.81 L798.542 682.81 L797.982 682.81 L797.423 682.81 L796.864 682.81 L796.305 682.81 L795.745 682.81 L795.186 682.81 L794.627 682.81 L794.068 682.81 L793.508 682.81 L792.949 682.81 L792.39 682.81 L791.831 682.81 L791.271 682.81 L790.712 682.81 L790.153 682.81 L789.594 682.81 L789.034 682.81 L788.475 682.81 L787.916 682.81 L787.357 682.81 L786.797 682.81 L786.238 682.81 L785.679 682.81 L785.12 682.81 L784.56 682.81 L784.001 682.81 L783.442 682.81 L782.883 682.81 L782.323 682.81 L781.764 682.81 L781.205 682.81 L780.646 682.81 L780.086 682.81 L779.527 682.81 L778.968 682.81 L778.409 682.81 L777.849 682.81 L777.29 682.81 L776.731 682.81 L776.172 682.81 L775.612 682.81 L775.053 682.81 L774.494 682.81 L773.935 682.81 L773.375 682.81 L772.816 682.81 L772.257 682.81 L771.698 682.81 L771.138 682.81 L770.579 682.81 L770.02 682.81 L769.461 682.81 L768.901 682.81 L768.342 682.81 L767.783 682.81 L767.224 682.81 L766.664 682.81 L766.105 682.81 L765.546 682.81 L764.987 682.81 L764.427 682.81 L763.868 682.81 L763.309 682.81 L762.75 682.81 L762.19 682.81 L761.631 682.81 L761.072 682.81 L760.513 682.81 L759.953 682.81 L759.394 682.81 L758.835 682.81 L758.276 682.81 L757.716 682.81 L757.157 682.81 L756.598 682.81 L756.039 682.81 L755.479 682.81 L754.92 682.81 L754.361 682.81 L753.802 682.81 L753.242 682.81 L752.683 682.81 L752.124 682.81 L751.565 682.81 L751.005 682.81 L750.446 682.81 L749.887 682.81 L749.328 682.81 L748.768 682.81 L748.209 682.81 L747.65 682.81 L747.091 682.81 L746.531 682.81 L745.972 682.81 L745.413 682.81 L744.854 682.81 L744.294 682.81 L743.735 682.81 L743.176 682.81 L742.617 682.81 L742.057 682.81 L741.498 682.81 L740.939 682.81 L740.38 682.81 L739.82 682.81 L739.261 682.81 L738.702 682.81 L738.143 682.81 L737.583 682.81 L737.024 682.81 L736.465 682.81 L735.906 682.81 L735.346 682.81 L734.787 682.81 L734.228 682.81 L733.669 682.81 L733.109 682.81 L732.55 682.81 L731.991 682.81 L731.432 682.81 L730.872 682.81 L730.313 682.81 L729.754 682.81 L729.195 682.81 L728.635 682.81 L728.076 682.81 L727.517 682.81 L726.958 682.81 L726.398 682.81 L725.839 682.81 L725.28 682.81 L724.721 682.81 L724.161 682.81 L723.602 682.81 L723.043 682.81 L722.484 682.81 L721.924 682.81 L721.365 682.81 L720.806 682.81 L720.247 682.81  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.678 720.806,683.678 721.365,683.678 721.924,683.678 722.484,683.678 723.043,683.678 723.602,683.678 724.161,683.678 724.721,683.678 725.28,683.678 725.839,683.678 726.398,683.678 726.958,683.678 727.517,683.678 728.076,683.678 728.635,683.678 729.195,683.678 729.754,683.678 730.313,683.678 730.872,683.678 731.432,683.678 731.991,683.678 732.55,683.678 733.109,683.678 733.669,683.678 734.228,683.678 734.787,683.678 735.346,683.678 735.906,683.678 736.465,683.678 737.024,683.678 737.583,683.678 738.143,683.678 738.702,683.678 739.261,683.678 739.82,683.678 740.38,683.678 740.939,683.678 741.498,683.678 742.057,683.678 742.617,683.678 743.176,683.678 743.735,683.678 744.294,683.678 744.854,683.678 745.413,683.678 745.972,683.678 746.531,683.678 747.091,683.678 747.65,683.678 748.209,683.678 748.768,683.678 749.328,683.678 749.887,683.678 750.446,683.678 751.005,683.678 751.565,683.678 752.124,683.678 752.683,683.678 753.242,683.678 753.802,683.678 754.361,683.678 754.92,683.678 755.479,683.678 756.039,683.678 756.598,683.678 757.157,683.678 757.716,683.678 758.276,683.678 758.835,683.678 759.394,683.678 759.953,683.678 760.513,683.678 761.072,683.678 761.631,683.678 762.19,683.678 762.75,683.678 763.309,683.678 763.868,683.678 764.427,683.678 764.987,683.678 765.546,683.678 766.105,683.678 766.664,683.678 767.224,683.678 767.783,683.678 768.342,683.678 768.901,683.678 769.461,683.678 770.02,683.678 770.579,683.678 771.138,683.678 771.698,683.678 772.257,683.678 772.816,683.678 773.375,683.678 773.935,683.678 774.494,683.678 775.053,683.678 775.612,683.678 776.172,683.678 776.731,683.678 777.29,683.678 777.849,683.678 778.409,683.678 778.968,683.678 779.527,683.678 780.086,683.678 780.646,683.678 781.205,683.678 781.764,683.678 782.323,683.678 782.883,683.678 783.442,683.678 784.001,683.678 784.56,683.678 785.12,683.678 785.679,683.678 786.238,683.678 786.797,683.678 787.357,683.678 787.916,683.678 788.475,683.678 789.034,683.678 789.594,683.678 790.153,683.678 790.712,683.678 791.271,683.678 791.831,683.678 792.39,683.678 792.949,683.678 793.508,683.678 794.068,683.678 794.627,683.678 795.186,683.678 795.745,683.678 796.305,683.678 796.864,683.678 797.423,683.678 797.982,683.678 798.542,683.678 799.101,683.678 799.66,683.678 800.219,683.678 800.779,683.678 801.338,683.678 801.897,683.678 802.456,683.678 803.016,683.678 803.575,683.678 804.134,683.678 804.693,683.678 805.253,683.678 805.812,683.678 806.371,683.678 806.931,683.678 807.49,683.678 808.049,683.678 808.608,683.678 809.168,683.678 809.727,683.678 810.286,683.678 810.845,683.678 811.405,683.678 811.964,683.678 812.523,683.678 813.082,683.678 813.642,683.678 814.201,683.678 814.76,683.678 815.319,683.678 815.879,683.678 816.438,683.678 816.997,683.678 817.556,683.678 818.116,683.678 818.675,683.678 819.234,683.678 819.793,683.678 820.353,683.678 820.912,683.678 821.471,683.678 822.03,683.678 822.59,683.678 823.149,683.678 823.708,683.678 824.267,683.678 824.827,683.678 825.386,683.678 825.945,683.678 826.504,683.678 827.064,683.678 827.623,683.678 828.182,683.678 828.741,683.678 829.301,683.678 829.86,683.678 830.419,683.678 830.978,683.678 831.538,683.678 832.097,683.678 832.656,683.678 833.215,683.678 833.775,683.678 834.334,683.678 834.893,683.678 835.452,683.678 836.012,683.678 836.571,683.678 837.13,683.678 837.689,683.678 838.249,683.678 838.808,683.678 839.367,683.678 839.926,683.678 840.486,683.678 841.045,683.678 841.604,683.678 842.163,683.678 842.723,683.678 843.282,683.678 843.841,683.678 844.4,683.678 844.96,683.678 845.519,683.678 846.078,683.678 846.637,683.678 847.197,683.678 847.756,683.678 848.315,683.678 848.874,683.678 849.434,683.678 849.993,683.678 850.552,683.678 851.111,683.678 851.671,683.678 852.23,683.678 852.789,683.678 853.348,683.678 853.908,683.678 854.467,683.678 855.026,683.678 855.585,683.678 856.145,683.678 856.704,683.678 857.263,683.678 857.822,683.678 858.382,683.678 858.941,683.678 859.5,683.678 860.059,683.678 860.619,683.678 861.178,683.678 861.737,683.678 862.296,683.678 862.856,683.678 863.415,683.678 863.974,683.678 864.533,683.678 865.093,683.678 865.652,683.678 866.211,683.678 866.77,683.678 867.33,683.678 867.889,683.678 868.448,683.678 869.007,683.678 869.567,683.678 870.126,683.678 870.685,683.678 871.244,683.678 871.804,683.678 872.363,683.678 872.922,683.678 873.481,683.678 874.041,683.678 874.6,683.678 875.159,683.678 875.718,683.678 876.278,683.678 876.837,683.678 877.396,683.678 877.955,683.678 878.515,683.678 879.074,683.678 879.633,683.678 880.192,683.678 880.752,683.678 881.311,683.678 881.87,683.678 882.429,683.678 882.989,683.678 883.548,683.678 884.107,683.678 884.666,683.678 885.226,683.678 885.785,683.678 886.344,683.678 886.903,683.678 887.463,683.678 888.022,683.678 888.581,683.678 889.14,683.678 889.7,683.678 890.259,683.678 890.818,683.678 891.377,683.678 891.937,683.678 892.496,683.678 893.055,683.678 893.614,683.678 894.174,683.678 894.733,683.678 895.292,683.678 895.851,683.678 896.411,683.678 896.97,683.678 897.529,683.678 898.088,683.678 898.648,683.678 899.207,683.678 899.766,683.678 900.325,683.678 900.885,683.678 901.444,683.678 902.003,683.678 902.562,683.678 903.122,683.678 903.681,683.678 904.24,683.678 904.799,683.678 905.359,683.678 905.918,683.678 906.477,683.678 907.036,683.678 907.596,683.678 908.155,683.678 908.714,683.678 909.273,683.678 909.833,683.678 910.392,683.678 910.951,683.678 911.51,683.678 912.07,683.678 912.629,683.678 913.188,683.678 913.747,683.678 914.307,683.678 914.866,683.678 915.425,683.678 915.984,683.678 916.544,683.678 917.103,683.678 917.662,683.678 918.221,683.678 918.781,683.678 919.34,683.678 919.899,683.678 920.458,683.678 921.018,683.678 921.577,683.678 922.136,683.678 922.695,683.678 923.255,683.678 923.814,683.678 924.373,683.678 924.932,683.678 925.492,683.678 926.051,683.678 926.61,683.678 927.169,683.678 927.729,683.678 928.288,683.678 928.847,683.678 929.406,683.678 929.966,683.678 930.525,683.678 931.084,683.678 931.644,683.678 932.203,683.678 932.762,683.678 933.321,683.678 933.881,683.678 934.44,683.678 934.999,683.678 935.558,683.678 936.118,683.678 936.677,683.678 937.236,683.678 937.795,683.678 938.355,683.678 938.914,683.678 939.473,683.678 940.032,683.678 940.592,683.678 941.151,683.678 941.71,683.678 942.269,683.678 942.829,683.678 943.388,683.678 943.947,683.678 944.506,683.678 945.066,683.678 945.625,683.678 946.184,683.678 946.743,683.678 947.303,683.678 947.862,683.678 948.421,683.678 948.98,683.678 949.54,683.678 950.099,683.678 950.658,683.678 951.217,683.678 951.777,683.678 952.336,683.678 952.895,683.678 953.454,683.678 954.014,683.678 954.573,683.678 955.132,683.678 955.691,683.678 956.251,683.678 956.81,683.678 957.369,683.678 957.928,683.678 958.488,683.678 959.047,683.678 959.606,683.678 960.165,683.678 960.725,683.678 961.284,683.678 961.843,683.678 962.402,683.678 962.962,683.678 963.521,683.678 964.08,683.678 964.639,683.678 965.199,683.678 965.758,683.678 966.317,683.678 966.876,683.678 967.436,683.678 967.995,683.678 968.554,683.678 969.113,683.678 969.673,683.678 970.232,683.678 970.791,683.678 971.35,683.678 971.91,683.678 972.469,683.678 973.028,683.678 973.587,683.678 974.147,683.678 974.706,683.678 975.265,683.678 975.824,683.678 976.384,683.678 976.943,683.678 977.502,683.678 978.061,683.678 978.621,683.678 979.18,683.678 979.739,683.678 980.298,683.678 980.858,683.678 981.417,683.678 981.976,683.678 982.535,683.678 983.095,683.678 983.654,683.678 984.213,683.678 984.772,683.678 985.332,683.678 985.891,683.678 986.45,683.678 987.009,683.678 987.569,683.678 988.128,683.678 988.687,683.678 989.246,683.678 989.806,683.678 990.365,683.678 990.924,683.678 991.483,683.678 992.043,683.678 992.602,683.678 993.161,683.678 993.72,683.678 994.28,683.678 994.839,683.678 995.398,683.678 995.957,683.678 996.517,683.678 997.076,683.678 997.635,683.678 998.194,683.678 998.754,683.678 999.313,683.678 999.872,683.678 1000.43,683.678 1000.99,683.678 1001.55,683.678 1002.11,683.678 1002.67,683.678 1003.23,683.678 1003.79,683.678 1004.35,683.678 1004.91,683.678 1005.46,683.678 1006.02,683.678 1006.58,683.678 1007.14,683.678 1007.7,683.678 1008.26,683.678 1008.82,683.678 1009.38,683.678 1009.94,683.678 1010.5,683.678 1011.06,683.678 1011.62,683.678 1012.18,683.678 1012.73,683.678 1013.29,683.678 1013.85,683.678 1014.41,683.678 1014.97,683.678 1015.53,683.678 1016.09,683.678 1016.65,683.678 1017.21,683.678 1017.77,683.678 1018.33,683.678 1018.89,683.678 1019.45,683.678 1020.01,683.678 1020.56,683.678 1021.12,683.678 1021.68,683.678 1022.24,683.678 1022.8,683.678 1023.36,683.678 1023.92,683.678 1024.48,683.678 1025.04,683.678 1025.6,683.678 1026.16,683.678 1026.72,683.678 1027.28,683.678 1027.83,683.678 1028.39,683.678 1028.95,683.678 1029.51,683.678 1030.07,683.678 1030.63,683.678 1031.19,683.678 1031.75,683.678 1032.31,683.678 1032.87,683.678 1033.43,683.678 1033.99,683.678 1034.55,683.678 1035.1,683.678 1035.66,683.678 1036.22,683.678 1036.78,683.678 1037.34,683.678 1037.9,683.678 1038.46,683.678 1039.02,683.678 1039.58,683.678 1040.14,683.678 1040.7,683.678 1041.26,683.678 1041.82,683.678 1042.38,683.678 1042.93,683.678 1043.49,683.678 1044.05,683.678 1044.61,683.678 1045.17,683.678 1045.73,683.678 1046.29,683.678 1046.85,683.678 1047.41,683.678 1047.97,683.678 1048.53,683.678 1049.09,683.678 1049.65,683.678 1050.2,683.678 1050.76,683.678 1051.32,683.678 1051.88,683.678 1052.44,683.678 1053,683.678 1053.56,683.678 1054.12,683.678 1054.68,683.678 1055.24,683.678 1055.8,683.678 1056.36,683.678 1056.92,683.678 1057.48,683.678 1058.03,683.678 1058.59,683.678 1059.15,683.678 1059.71,683.678 1060.27,683.678 1060.83,683.678 1061.39,683.678 1061.95,683.678 1062.51,683.678 1063.07,683.678 1063.63,683.678 1064.19,683.678 1064.75,683.678 1065.3,683.678 1065.86,683.678 1066.42,683.678 1066.98,683.678 1067.54,683.678 1068.1,683.678 1068.66,683.678 1069.22,683.678 1069.78,683.678 1070.34,683.678 1070.9,683.678 1071.46,683.678 1072.02,683.678 1072.57,683.678 1073.13,683.678 1073.69,683.678 1074.25,683.678 1074.81,683.678 1075.37,683.678 1075.93,683.678 1076.49,683.678 1077.05,683.678 1077.61,683.678 1078.17,683.678 1078.73,683.678 1079.29,683.678 1079.85,683.678 1080.4,683.678 1080.96,683.678 1081.52,683.678 1082.08,683.678 1082.64,683.678 1083.2,683.678 1083.76,683.678 1084.32,683.678 1084.88,683.678 1085.44,683.678 1086,683.678 1086.56,683.678 1087.12,683.678 1087.67,683.678 1088.23,683.678 1088.79,683.678 1089.35,683.678 1089.91,683.678 1090.47,683.678 1091.03,683.678 1091.59,683.678 1092.15,683.678 1092.71,683.678 1093.27,683.678 1093.83,683.678 1094.39,683.678 1094.94,683.678 1095.5,683.678 1096.06,683.678 1096.62,683.678 1097.18,683.678 1097.74,683.678 1098.3,683.678 1098.86,683.678 1099.42,683.678 1099.98,683.678 1100.54,683.678 1101.1,683.678 1101.66,683.678 1102.22,683.678 1102.77,683.678 1103.33,683.678 1103.89,683.678 1104.45,683.678 1105.01,683.678 1105.57,683.678 1106.13,683.678 1106.69,683.678 1107.25,683.678 1107.81,683.678 1108.37,683.678 1108.93,683.678 1109.49,683.678 1110.04,683.678 1110.6,683.678 1111.16,683.678 1111.72,683.678 1112.28,683.678 1112.84,683.678 1113.4,683.678 1113.96,683.678 1114.52,683.678 1115.08,683.678 1115.64,683.678 1116.2,683.678 1116.76,683.678 1117.31,683.678 1117.87,683.678 1118.43,683.678 1118.99,683.678 1119.55,683.678 1120.11,683.678 1120.67,683.678 1121.23,683.678 1121.79,683.678 1122.35,683.678 1122.91,683.678 1123.47,683.678 1124.03,683.678 1124.59,683.678 1125.14,683.678 1125.7,683.678 1126.26,683.678 1126.82,683.678 1127.38,683.678 1127.94,683.678 1128.5,683.678 1129.06,683.678 1129.62,683.678 1130.18,683.678 1130.74,683.678 1131.3,683.678 1131.86,683.678 1132.41,683.678 1132.97,683.678 1133.53,683.678 1134.09,683.678 1134.65,683.678 1135.21,683.678 1135.77,683.678 1136.33,683.678 1136.89,683.678 1137.45,683.678 1138.01,683.678 1138.57,683.678 1139.13,683.678 1139.68,683.678 1140.24,683.678 1140.8,683.678 1141.36,683.678 1141.92,683.678 1142.48,683.678 1143.04,683.678 1143.6,683.678 1144.16,683.678 1144.72,683.678 1145.28,683.678 1145.84,683.678 1146.4,683.678 1146.96,683.678 1147.51,683.678 1148.07,683.678 1148.63,683.678 1149.19,683.678 1149.75,683.678 1150.31,683.678 1150.87,683.678 1151.43,683.678 1151.99,683.678 1152.55,683.678 1153.11,683.678 1153.67,683.678 1154.23,683.678 1154.78,683.678 1155.34,683.678 1155.9,683.678 1156.46,683.678 1157.02,683.678 1157.58,683.678 1158.14,683.678 1158.7,683.678 1159.26,683.678 1159.82,683.678 1160.38,683.678 1160.94,683.678 1161.5,683.678 1162.05,683.678 1162.61,683.678 1163.17,683.678 1163.73,683.678 1164.29,683.678 1164.85,683.678 1165.41,683.678 1165.97,683.678 1166.53,683.678 1167.09,683.678 1167.65,683.678 1168.21,683.678 1168.77,683.678 1169.33,683.678 1169.88,683.678 1170.44,683.678 1171,683.678 1171.56,683.678 1172.12,683.678 1172.68,683.678 1173.24,683.678 1173.8,683.678 1174.36,683.678 1174.92,683.678 1175.48,683.678 1176.04,683.678 1176.6,683.678 1177.15,683.678 1177.71,683.678 1178.27,683.678 1178.83,683.678 1179.39,683.678 1179.95,683.678 1180.51,683.678 1181.07,683.678 1181.63,683.678 1182.19,683.678 1182.75,683.678 1183.31,683.678 1183.87,683.678 1184.43,683.678 1184.98,683.678 1185.54,683.678 1186.1,683.678 1186.66,683.678 1187.22,683.678 1187.78,683.678 1188.34,683.678 1188.9,683.678 1189.46,683.678 1190.02,683.678 1190.58,683.678 1191.14,683.678 1191.7,683.678 1192.25,683.678 1192.81,683.678 1193.37,683.678 1193.93,683.678 1194.49,683.678 1195.05,683.678 1195.61,683.678 1196.17,683.678 1196.73,683.678 1197.29,683.678 1197.85,683.678 1198.41,683.678 1198.97,683.678 1199.52,683.678 1200.08,683.678 1200.64,683.678 1201.2,683.678 1201.76,683.678 1202.32,683.678 1202.88,683.678 1203.44,683.678 1204,683.678 1204.56,683.678 1205.12,683.678 1205.68,683.678 1206.24,683.678 1206.8,683.678 1207.35,683.678 1207.91,683.678 1208.47,683.678 1209.03,683.678 1209.59,683.678 1210.15,683.678 1210.71,683.678 1211.27,683.678 1211.83,683.678 1212.39,683.678 1212.95,683.678 1213.51,683.678 1214.07,683.678 1214.62,683.678 1215.18,683.678 1215.74,683.678 1216.3,683.678 1216.86,683.678 1217.42,683.678 1217.98,683.678 1218.54,683.678 1219.1,683.678 1219.66,683.678 1220.22,683.678 1220.78,683.678 1221.34,683.678 1221.89,683.678 1222.45,683.678 1223.01,683.678 1223.57,683.678 1224.13,683.678 1224.69,683.678 1225.25,683.678 1225.81,683.678 1226.37,683.678 1226.93,683.678 1227.49,683.678 1228.05,683.678 1228.61,683.678 1229.17,683.678 1229.72,683.678 1230.28,683.678 1230.84,683.678 1231.4,683.678 1231.96,683.678 1232.52,683.678 1233.08,683.678 1233.64,683.678 1234.2,683.678 1234.76,683.678 1235.32,683.678 1235.88,683.678 1236.44,683.678 1236.99,683.678 1237.55,683.678 1238.11,683.678 1238.67,683.678 1239.23,683.678 1239.79,683.678 1240.35,683.678 1240.91,683.678 1241.47,683.678 1242.03,683.678 1242.59,683.678 1243.15,683.678 1243.71,683.678 1244.26,683.678 1244.82,683.678 1245.38,683.678 1245.94,683.678 1246.5,683.678 1247.06,683.678 1247.62,683.678 1248.18,683.678 1248.74,683.678 1249.3,683.678 1249.86,683.678 1250.42,683.678 1250.98,683.678 1251.54,683.678 1252.09,683.678 1252.65,683.678 1253.21,683.678 1253.77,683.678 1254.33,683.678 1254.89,683.678 1255.45,683.678 1256.01,683.678 1256.57,683.678 1257.13,683.678 1257.69,683.678 1258.25,683.678 1258.81,683.678 1259.36,683.678 1259.92,683.678 1260.48,683.678 1261.04,683.678 1261.6,683.678 1262.16,683.678 1262.72,683.678 1263.28,683.678 1263.84,683.678 1264.4,683.678 1264.96,683.678 1265.52,683.678 1266.08,683.678 1266.63,683.678 1267.19,683.678 1267.75,683.678 1268.31,683.678 1268.87,683.678 1269.43,683.678 1269.99,683.678 1270.55,683.678 1271.11,683.678 1271.67,683.678 1272.23,683.678 1272.79,683.678 1273.35,683.678 1273.91,683.678 1274.46,683.678 1275.02,683.678 1275.58,683.678 1276.14,683.678 1276.7,683.678 1277.26,683.678 1277.82,683.678 1278.38,683.678 1278.94,683.678 1279.5,683.678 1280.06,683.678 1280.62,683.678 1281.18,683.678 1281.73,683.678 1282.29,683.678 1282.85,683.678 1283.41,683.678 1283.97,683.678 1284.53,683.678 1285.09,683.678 1285.65,683.678 1286.21,683.678 1286.77,683.678 1287.33,683.678 1287.89,683.678 1288.45,683.678 1289,683.678 1289.56,683.678 1290.12,683.678 1290.68,683.678 1291.24,683.678 1291.8,683.678 1292.36,683.678 1292.92,683.678 1293.48,683.678 1294.04,683.678 1294.6,683.678 1295.16,683.678 1295.72,683.678 1296.28,683.678 1296.83,683.678 1297.39,683.678 1297.95,683.678 1298.51,683.678 1299.07,683.678 1299.63,683.678 1300.19,683.678 1300.75,683.678 1301.31,683.678 1301.87,683.678 1302.43,683.678 1302.99,683.678 1303.55,683.678 1304.1,683.678 1304.66,683.678 1305.22,683.678 1305.78,683.678 1306.34,683.678 1306.9,683.678 1307.46,683.678 1308.02,683.678 1308.58,683.678 1309.14,683.678 1309.7,683.678 1310.26,683.678 1310.82,683.678 1311.38,683.678 1311.93,683.678 1312.49,683.678 1313.05,683.678 1313.61,683.678 1314.17,683.678 1314.73,683.678 1315.29,683.678 1315.85,683.678 1316.41,683.678 1316.97,683.678 1317.53,683.678 1318.09,683.678 1318.65,683.678 1319.2,683.678 1319.76,683.678 1320.32,683.678 1320.88,683.678 1321.44,683.678 1322,683.678 1322.56,683.678 1323.12,683.678 1323.68,683.678 1324.24,683.678 1324.8,683.678 1325.36,683.678 1325.92,683.678 1326.47,683.678 1327.03,683.678 1327.59,683.678 1328.15,683.678 1328.71,683.678 1329.27,683.678 1329.83,683.678 1330.39,683.678 1330.95,683.678 1331.51,683.678 1332.07,683.678 1332.63,683.678 1333.19,683.678 1333.75,683.678 1334.3,683.678 1334.86,683.678 1335.42,683.678 1335.98,683.678 1336.54,683.678 1337.1,683.678 1337.66,683.678 1338.22,683.678 1338.78,683.678 1339.34,683.678 1339.9,683.678 1340.46,683.678 1341.02,683.678 1341.57,683.678 1342.13,683.678 1342.69,683.678 1343.25,683.678 1343.81,683.678 1344.37,683.678 1344.93,683.678 1345.49,683.678 1346.05,683.678 1346.61,683.678 1347.17,683.678 1347.73,683.678 1348.29,683.678 1348.84,683.678 1349.4,683.678 1349.96,683.678 1350.52,683.678 1351.08,683.678 1351.64,683.678 1352.2,683.678 1352.76,683.678 1353.32,683.678 1353.88,683.678 1354.44,683.678 1355,683.678 1355.56,683.678 1356.12,683.678 1356.67,683.678 1357.23,683.678 1357.79,683.678 1358.35,683.678 1358.91,683.678 1359.47,683.678 1360.03,683.678 1360.59,683.678 1361.15,683.678 1361.71,683.678 1362.27,683.678 1362.83,683.678 1363.39,683.678 1363.94,683.678 1364.5,683.678 1365.06,683.678 1365.62,683.678 1366.18,683.678 1366.74,683.678 1367.3,683.678 1367.86,683.678 1368.42,683.678 1368.98,683.678 1369.54,683.678 1370.1,683.678 1370.66,683.678 1371.21,683.678 1371.77,683.678 1372.33,683.678 1372.89,683.678 1373.45,683.678 1374.01,683.678 1374.57,683.678 1375.13,683.678 1375.69,683.678 1376.25,683.678 1376.81,683.678 1377.37,683.678 1377.93,683.678 1378.49,683.678 1379.04,683.678 1379.6,683.678 1380.16,683.678 1380.72,683.678 1381.28,683.678 1381.84,683.678 1382.4,683.678 1382.96,683.678 1383.52,683.678 1384.08,683.678 1384.64,683.678 1385.2,683.678 1385.76,683.678 1386.31,683.678 1386.87,683.678 1387.43,683.678 1387.99,683.678 1388.55,683.678 1389.11,683.678 1389.67,683.678 1390.23,683.678 1390.79,683.678 1391.35,683.678 1391.91,683.678 1392.47,683.678 1393.03,683.678 1393.58,683.678 1394.14,683.678 1394.7,683.678 1395.26,683.678 1395.82,683.678 1396.38,683.678 1396.94,683.678 1397.5,683.678 1398.06,683.678 1398.62,683.678 1399.18,683.678 1399.74,683.678 1400.3,683.678 1400.86,683.678 1401.41,683.678 1401.97,683.678 1402.53,683.678 1403.09,683.678 1403.65,683.678 1404.21,683.678 1404.77,683.678 1405.33,683.678 1405.89,683.678 1406.45,683.678 1407.01,683.678 1407.57,683.678 1408.13,683.678 1408.68,683.678 1409.24,683.678 1409.8,683.678 1410.36,683.678 1410.92,683.678 1411.48,683.678 1412.04,683.678 1412.6,683.678 1413.16,683.678 1413.72,683.678 1414.28,683.678 1414.84,683.678 1415.4,683.678 1415.95,683.678 1416.51,683.678 1417.07,683.678 1417.63,683.678 1418.19,683.678 1418.75,683.678 1419.31,683.678 1419.87,683.678 1420.43,683.678 1420.99,683.678 1421.55,683.678 1422.11,683.678 1422.67,683.678 1423.23,683.678 1423.78,683.678 1424.34,683.678 1424.9,683.678 1425.46,683.678 1426.02,683.678 1426.58,683.678 1427.14,683.678 1427.7,683.678 1428.26,683.678 1428.82,683.678 1429.38,683.678 1429.94,683.678 1430.5,683.678 1431.05,683.678 1431.61,683.678 1432.17,683.678 1432.73,683.678 1433.29,683.678 1433.85,683.678 1434.41,683.678 1434.97,683.678 1435.53,683.678 1436.09,683.678 1436.65,683.678 1437.21,683.678 1437.77,683.678 1438.33,683.678 1438.88,683.678 1439.44,683.678 1440,683.678 1440.56,683.678 1441.12,683.678 1441.68,683.678 1442.24,683.678 1442.8,683.678 1443.36,683.678 1443.92,683.678 1444.48,683.678 1445.04,683.678 1445.6,683.678 1446.15,683.678 1446.71,683.678 1447.27,683.678 1447.83,683.678 1448.39,683.678 1448.95,683.678 1449.51,683.678 1450.07,683.678 1450.63,683.678 1451.19,683.678 1451.75,683.678 1452.31,683.678 1452.87,683.678 1453.42,683.678 1453.98,683.678 1454.54,683.678 1455.1,683.678 1455.66,683.678 1456.22,683.678 1456.78,683.678 1457.34,683.678 1457.9,683.678 1458.46,683.678 1459.02,683.678 1459.58,683.678 1460.14,683.678 1460.7,683.678 1461.25,683.678 1461.81,683.678 1462.37,683.678 1462.93,683.678 1463.49,683.678 1464.05,683.678 1464.61,683.678 1465.17,683.678 1465.73,683.678 1466.29,683.678 1466.85,683.678 1467.41,683.678 1467.97,683.678 1468.52,683.678 1469.08,683.678 1469.64,683.678 1470.2,683.678 1470.76,683.678 1471.32,683.678 1471.88,683.678 1472.44,683.678 1473,683.678 1473.56,683.678 1474.12,683.678 1474.68,683.678 1475.24,683.678 1475.79,683.678 1476.35,683.678 1476.91,683.678 1477.47,683.678 1478.03,683.678 1478.59,683.678 1479.15,683.678 1479.71,683.678 1480.27,683.678 1480.83,683.678 1481.39,683.678 1481.95,683.678 1482.51,683.678 1483.07,683.678 1483.62,683.678 1484.18,683.678 1484.74,683.678 1485.3,683.678 1485.86,683.678 1486.42,683.678 1486.98,683.678 1487.54,683.678 1488.1,683.678 1488.66,683.678 1489.22,683.678 1489.78,683.678 1490.34,683.678 1490.89,683.678 1491.45,683.678 1492.01,683.678 1492.57,683.678 1493.13,683.678 1493.69,683.678 1494.25,683.678 1494.81,683.678 1495.37,683.678 1495.93,683.678 1496.49,683.678 1497.05,683.678 1497.61,683.678 1498.16,683.678 1498.72,683.678 1499.28,683.678 1499.84,683.678 1500.4,683.678 1500.96,683.678 1501.52,683.678 1502.08,683.678 1502.64,683.678 1503.2,683.678 1503.76,683.678 1504.32,683.678 1504.88,683.678 1505.44,683.678 1505.99,683.678 1506.55,683.678 1507.11,683.678 1507.67,683.678 1508.23,683.678 1508.79,683.678 1509.35,683.678 1509.91,683.678 1510.47,683.678 1511.03,683.678 1511.59,683.678 1512.15,683.678 1512.71,683.678 1513.26,683.678 1513.82,683.678 1514.38,683.678 1514.94,683.678 1515.5,683.678 1516.06,683.678 1516.62,683.678 1517.18,683.678 1517.74,683.678 1518.3,683.678 1518.86,683.678 1519.42,683.678 1519.98,683.678 1520.53,683.678 1521.09,683.678 1521.65,683.678 1522.21,683.678 1522.77,683.678 1523.33,683.678 1523.89,683.678 1524.45,683.678 1525.01,683.678 1525.57,683.678 1526.13,683.678 1526.69,683.678 1527.25,683.678 1527.81,683.678 1528.36,683.678 1528.92,683.678 1529.48,683.678 1530.04,683.678 1530.6,683.678 1531.16,683.678 1531.72,683.678 1532.28,683.678 1532.84,683.678 1533.4,683.678 1533.96,683.678 1534.52,683.678 1535.08,683.678 1535.63,683.678 1536.19,683.678 1536.75,683.678 1537.31,683.678 1537.87,683.678 1538.43,683.678 1538.99,683.678 1539.55,683.678 1540.11,683.678 1540.67,683.678 1541.23,683.678 1541.79,683.678 1542.35,683.678 1542.9,683.678 1543.46,683.678 1544.02,683.678 1544.58,683.678 1545.14,683.678 1545.7,683.678 1546.26,683.678 1546.82,683.678 1547.38,683.678 1547.94,683.678 1548.5,683.678 1549.06,683.678 1549.62,683.678 1550.18,683.678 1550.73,683.678 1551.29,683.678 1551.85,683.678 1552.41,683.678 1552.97,683.678 1553.53,683.678 1554.09,683.678 1554.65,683.678 1555.21,683.678 1555.77,683.678 1556.33,683.678 1556.89,683.678 1557.45,683.678 1558,683.678 1558.56,683.678 1559.12,683.678 1559.68,683.678 1560.24,683.678 1560.8,683.678 1561.36,683.678 1561.92,683.678 1562.48,683.678 1563.04,683.678 1563.6,683.678 1564.16,683.678 1564.72,683.678 1565.28,683.678 1565.83,683.678 1566.39,683.678 1566.95,683.678 1567.51,683.678 1568.07,683.678 1568.63,683.678 1569.19,683.678 1569.75,683.678 1570.31,683.678 1570.87,683.678 1571.43,683.678 1571.99,683.678 1572.55,683.678 1573.1,683.678 1573.66,683.678 1574.22,683.678 1574.78,683.678 1575.34,683.678 1575.9,683.678 1576.46,683.678 1577.02,683.678 1577.58,683.678 1578.14,683.678 1578.7,683.678 1579.26,683.678 1579.82,683.678 1580.37,683.678 1580.93,683.678 1581.49,683.678 1582.05,683.678 1582.61,683.678 1583.17,683.678 1583.73,683.678 1584.29,683.678 1584.85,683.678 1585.41,683.678 1585.97,683.678 1586.53,683.678 1587.09,683.678 1587.65,683.678 1588.2,683.678 1588.76,683.678 1589.32,683.678 1589.88,683.678 1590.44,683.678 1591,683.678 1591.56,683.678 1592.12,683.678 1592.68,683.678 1593.24,683.678 1593.8,683.678 1594.36,683.678 1594.92,683.678 1595.47,683.678 1596.03,683.678 1596.59,683.678 1597.15,683.678 1597.71,683.678 1598.27,683.678 1598.83,683.678 1599.39,683.678 1599.95,683.678 1600.51,683.678 1601.07,683.678 1601.63,683.678 1602.19,683.678 1602.74,683.678 1603.3,683.678 1603.86,683.678 1604.42,683.678 1604.98,683.678 1605.54,683.678 1606.1,683.678 1606.66,683.678 1607.22,683.678 1607.78,683.678 1608.34,683.678 1608.9,683.678 1609.46,683.678 1610.02,683.678 1610.57,683.678 1611.13,683.678 1611.69,683.678 1612.25,683.678 1612.81,683.678 1613.37,683.678 1613.93,683.678 1614.49,683.678 1615.05,683.678 1615.61,683.678 1616.17,683.678 1616.73,683.678 1617.29,683.678 1617.84,683.678 1618.4,683.678 1618.96,683.678 1619.52,683.678 1620.08,683.678 1620.64,683.678 1621.2,683.678 1621.76,683.678 1622.32,683.678 1622.88,683.678 1623.44,683.678 1624,683.678 1624.56,683.678 1625.11,683.678 1625.67,683.678 1626.23,683.678 1626.79,683.678 1627.35,683.678 1627.91,683.678 1628.47,683.678 1629.03,683.678 1629.59,683.678 1630.15,683.678 1630.71,683.678 1631.27,683.678 1631.83,683.678 1632.39,683.678 1632.94,683.678 1633.5,683.678 1634.06,683.678 1634.62,683.678 1635.18,683.678 1635.74,683.678 1636.3,683.678 1636.86,683.678 1637.42,683.678 1637.98,683.678 1638.54,683.678 1639.1,683.678 1639.66,683.678 1640.21,683.678 1640.77,683.678 1641.33,683.678 1641.89,683.678 1642.45,683.678 1643.01,683.678 1643.57,683.678 1644.13,683.678 1644.69,683.678 1645.25,683.678 1645.81,683.678 1646.37,683.678 1646.93,683.678 1647.48,683.678 1648.04,683.678 1648.6,683.678 1649.16,683.678 1649.72,683.678 1650.28,683.678 1650.84,683.678 1651.4,683.678 1651.96,683.678 1652.52,683.678 1653.08,683.678 1653.64,683.678 1654.2,683.678 1654.76,683.678 1655.31,683.678 1655.87,683.678 1656.43,683.678 1656.99,683.678 1657.55,683.678 1658.11,683.678 1658.67,683.678 1659.23,683.678 1659.79,683.678 1660.35,683.678 1660.91,683.678 1661.47,683.678 1662.03,683.678 1662.58,683.678 1663.14,683.678 1663.7,683.678 1664.26,683.678 1664.82,683.678 1665.38,683.678 1665.94,683.678 1666.5,683.678 1667.06,683.678 1667.62,683.678 1668.18,683.678 1668.74,683.678 1669.3,683.678 1669.85,683.678 1670.41,683.678 1670.97,683.678 1671.53,683.678 1672.09,683.678 1672.65,683.678 1673.21,683.678 1673.77,683.678 1674.33,683.678 1674.89,683.678 1675.45,683.678 1676.01,683.678 1676.57,683.678 1677.13,683.678 1677.68,683.678 1678.24,683.678 1678.8,683.678 1679.36,683.678 1679.92,683.678 1680.48,683.678 1681.04,683.678 1681.6,683.678 1682.16,683.678 1682.72,683.678 1683.28,683.678 1683.84,683.678 1684.4,683.678 1684.95,683.678 1685.51,683.678 1686.07,683.678 1686.63,683.678 1687.19,683.678 1687.75,683.678 1688.31,683.678 1688.87,683.678 1689.43,683.678 1689.99,683.678 1690.55,683.678 1691.11,683.678 1691.67,683.678 1692.23,683.678 1692.78,683.678 1693.34,683.678 1693.9,683.678 1694.46,683.678 1695.02,683.678 1695.58,683.678 1696.14,683.678 1696.7,683.678 1697.26,683.678 1697.82,683.678 1698.38,683.678 1698.94,683.678 1699.5,683.678 1700.05,683.678 1700.61,683.678 1701.17,683.678 1701.73,683.678 1702.29,683.678 1702.85,683.678 1703.41,683.678 1703.97,683.678 1704.53,683.678 1705.09,683.678 1705.65,683.678 1706.21,683.678 1706.77,683.678 1707.32,683.678 1707.88,683.678 1708.44,683.678 1709,683.678 1709.56,683.678 1710.12,683.678 1710.68,683.678 1711.24,683.678 1711.8,683.678 1712.36,683.678 1712.92,683.678 1713.48,683.678 1714.04,683.678 1714.6,683.678 1715.15,683.678 1715.71,683.678 1716.27,683.678 1716.83,683.678 1717.39,683.678 1717.95,683.678 1718.51,683.678 1719.07,683.678 1719.63,683.678 1720.19,683.678 1720.75,683.678 1721.31,683.678 1721.87,683.678 1722.42,683.678 1722.98,683.678 1723.54,683.678 1724.1,683.678 1724.66,683.678 1725.22,683.678 1725.78,683.678 1726.34,683.678 1726.9,683.678 1727.46,683.678 1728.02,683.678 1728.58,683.678 1729.14,683.678 1729.69,683.678 1730.25,683.678 1730.81,683.678 1731.37,683.678 1731.93,683.678 1732.49,683.678 1733.05,683.678 1733.61,683.678 1734.17,683.678 1734.73,683.678 1735.29,683.678 1735.85,683.678 1736.41,683.678 1736.97,683.678 1737.52,683.678 1738.08,683.678 1738.64,683.678 1739.2,683.678 1739.76,683.678 1740.32,683.678 1740.88,683.678 1741.44,683.678 1742,683.678 1742.56,683.678 1743.12,683.678 1743.68,683.678 1744.24,683.678 1744.79,683.678 1745.35,683.678 1745.91,683.678 1746.47,683.678 1747.03,683.678 1747.59,683.678 1748.15,683.678 1748.71,683.678 1749.27,683.678 1749.83,683.678 1750.39,683.678 1750.95,683.678 1751.51,683.678 1752.06,683.678 1752.62,683.678 1753.18,683.678 1753.74,683.678 1754.3,683.678 1754.86,683.678 1755.42,683.678 1755.98,683.678 1756.54,683.678 1757.1,683.678 1757.66,683.678 1758.22,683.678 1758.78,683.678 1759.34,683.678 1759.89,683.678 1760.45,683.678 1761.01,683.678 1761.57,683.678 1762.13,683.678 1762.69,683.678 1763.25,683.678 1763.81,683.678 1764.37,683.678 1764.93,683.678 1765.49,683.678 1766.05,683.678 1766.61,683.678 1767.16,683.678 1767.72,683.678 1768.28,683.678 1768.84,683.678 1769.4,683.678 1769.96,683.678 1770.52,683.678 1771.08,683.678 1771.64,683.678 1772.2,683.678 1772.76,683.678 1773.32,683.678 1773.88,683.678 1774.43,683.678 1774.99,683.678 1775.55,683.678 1776.11,683.678 1776.67,683.678 1777.23,683.678 1777.79,683.678 1778.35,683.678 1778.91,683.678 1779.47,683.678 1780.03,683.678 1780.59,683.678 1781.15,683.678 1781.71,683.678 1782.26,683.678 1782.82,683.678 1783.38,683.678 1783.94,683.678 1784.5,683.678 1785.06,683.678 1785.62,683.678 1786.18,683.678 1786.74,683.678 1787.3,683.678 1787.86,683.678 1788.42,683.678 1788.98,683.678 1789.53,683.678 1790.09,683.678 1790.65,683.678 1791.21,683.678 1791.77,683.678 1792.33,683.678 1792.89,683.678 1793.45,683.678 1794.01,683.678 1794.57,683.678 1795.13,683.678 1795.69,683.678 1796.25,683.678 1796.8,683.678 1797.36,683.678 1797.92,683.678 1798.48,683.678 1799.04,683.678 1799.6,683.678 1800.16,683.678 1800.72,683.678 1801.28,683.678 1801.84,683.678 1802.4,683.678 1802.96,683.678 1803.52,683.678 1804.08,683.678 1804.63,683.678 1805.19,683.678 1805.75,683.678 1806.31,683.678 1806.87,683.678 1807.43,683.678 1807.99,683.678 1808.55,683.678 1809.11,683.678 1809.67,683.678 1810.23,683.678 1810.79,683.678 1811.35,683.678 1811.9,683.678 1812.46,683.678 1813.02,683.678 1813.58,683.678 1814.14,683.678 1814.7,683.678 1815.26,683.678 1815.82,683.678 1816.38,683.678 1816.94,683.678 1817.5,683.678 1818.06,683.678 1818.62,683.678 1819.18,683.678 1819.73,683.678 1820.29,683.678 1820.85,683.678 1821.41,683.678 1821.97,683.678 1822.53,683.678 1823.09,683.678 1823.65,683.678 1824.21,683.678 1824.77,683.678 1825.33,683.678 1825.89,683.678 1826.45,683.678 1827,683.678 1827.56,683.678 1828.12,683.678 1828.68,683.678 1829.24,683.678 1829.8,683.678 1830.36,683.678 1830.92,683.678 1831.48,683.678 1832.04,683.678 1832.6,683.678 1833.16,683.678 1833.72,683.678 1834.27,683.678 1834.83,683.678 1835.39,683.678 1835.95,683.678 1836.51,683.678 1837.07,683.678 1837.63,683.678 1838.19,683.678 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031860777875402 ± 0.023187191602710554\nProjected Energy: -4.015554973274009 ± (0.004603350417486496, 0.004372868570921007)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.474579</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.55e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7533e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.668e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.423e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.514e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.265e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133726\n -0.759019192277087\n  0.13584182219623564\n  0.15789998694607377\n  0.876711441178136\n  1.530592997097333\n  1.5835732611867384\n  3.0728703303258538\n  3.1256726539518516\n  4.862107221562175\n  6.260694850380595\n  6.402671211183112\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
