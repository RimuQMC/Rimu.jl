var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21301832989742406 ± 0.0011721361941576928\n   G2(1) = 0.9162770506312073 ± 0.0006399188505011146\n   G2(2) = 0.9827306005383516 ± 0.0006059461919660185\n   G2(3) = 0.9889663677634573 ± 0.0010806985166641283\n   G2(4) = 0.9827306005383516 ± 0.0006059461919660185\n   G2(5) = 0.9162770506312073 ± 0.0006399188505011146\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.003884533748061 ± 0.09747682239372876\n   Replica 2: -3.933519272920661 ± 0.12913684432933378\n   Replica 3: -4.005454003891429 ± 0.14116626201915594\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip450\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip451\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip452\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.09 2211.02,1003.09 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.333 2211.02,745.333 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.581 2211.02,487.581 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.828 2211.02,229.828 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.09 423.181,1003.09 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.333 423.181,745.333 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.581 423.181,487.581 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.828 423.181,229.828 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M290.043 1016.43 L306.363 1016.43 L306.363 1020.37 L284.418 1020.37 L284.418 1016.43 Q287.08 1013.68 291.664 1009.05 Q296.27 1004.39 297.451 1003.05 Q299.696 1000.53 300.576 998.792 Q301.478 997.033 301.478 995.343 Q301.478 992.588 299.534 990.852 Q297.613 989.116 294.511 989.116 Q292.312 989.116 289.858 989.88 Q287.427 990.644 284.65 992.195 L284.65 987.473 Q287.474 986.338 289.927 985.76 Q292.381 985.181 294.418 985.181 Q299.789 985.181 302.983 987.866 Q306.177 990.551 306.177 995.042 Q306.177 997.172 305.367 999.093 Q304.58 1000.99 302.474 1003.58 Q301.895 1004.26 298.793 1007.47 Q295.691 1010.67 290.043 1016.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M316.224 985.806 L334.58 985.806 L334.58 989.741 L320.506 989.741 L320.506 998.213 Q321.524 997.866 322.543 997.704 Q323.562 997.519 324.58 997.519 Q330.367 997.519 333.747 1000.69 Q337.126 1003.86 337.126 1009.28 Q337.126 1014.86 333.654 1017.96 Q330.182 1021.04 323.862 1021.04 Q321.687 1021.04 319.418 1020.67 Q317.173 1020.3 314.765 1019.56 L314.765 1014.86 Q316.849 1015.99 319.071 1016.55 Q321.293 1017.1 323.77 1017.1 Q327.774 1017.1 330.112 1015 Q332.45 1012.89 332.45 1009.28 Q332.45 1005.67 330.112 1003.56 Q327.774 1001.45 323.77 1001.45 Q321.895 1001.45 320.02 1001.87 Q318.168 1002.29 316.224 1003.17 L316.224 985.806 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 988.885 Q352.728 988.885 350.899 992.45 Q349.094 995.991 349.094 1003.12 Q349.094 1010.23 350.899 1013.79 Q352.728 1017.33 356.339 1017.33 Q359.973 1017.33 361.779 1013.79 Q363.608 1010.23 363.608 1003.12 Q363.608 995.991 361.779 992.45 Q359.973 988.885 356.339 988.885 M356.339 985.181 Q362.149 985.181 365.205 989.788 Q368.284 994.371 368.284 1003.12 Q368.284 1011.85 365.205 1016.45 Q362.149 1021.04 356.339 1021.04 Q350.529 1021.04 347.45 1016.45 Q344.395 1011.85 344.395 1003.12 Q344.395 994.371 347.45 989.788 Q350.529 985.181 356.339 985.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M286.062 728.053 L304.418 728.053 L304.418 731.989 L290.344 731.989 L290.344 740.461 Q291.363 740.114 292.381 739.952 Q293.4 739.766 294.418 739.766 Q300.205 739.766 303.585 742.938 Q306.964 746.109 306.964 751.526 Q306.964 757.104 303.492 760.206 Q300.02 763.285 293.701 763.285 Q291.525 763.285 289.256 762.914 Q287.011 762.544 284.603 761.803 L284.603 757.104 Q286.687 758.238 288.909 758.794 Q291.131 759.35 293.608 759.35 Q297.613 759.35 299.951 757.243 Q302.288 755.137 302.288 751.526 Q302.288 747.914 299.951 745.808 Q297.613 743.701 293.608 743.701 Q291.733 743.701 289.858 744.118 Q288.006 744.535 286.062 745.414 L286.062 728.053 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M326.177 731.132 Q322.566 731.132 320.737 734.697 Q318.932 738.239 318.932 745.368 Q318.932 752.475 320.737 756.039 Q322.566 759.581 326.177 759.581 Q329.811 759.581 331.617 756.039 Q333.446 752.475 333.446 745.368 Q333.446 738.239 331.617 734.697 Q329.811 731.132 326.177 731.132 M326.177 727.428 Q331.987 727.428 335.043 732.035 Q338.122 736.618 338.122 745.368 Q338.122 754.095 335.043 758.701 Q331.987 763.285 326.177 763.285 Q320.367 763.285 317.288 758.701 Q314.233 754.095 314.233 745.368 Q314.233 736.618 317.288 732.035 Q320.367 727.428 326.177 727.428 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 731.132 Q352.728 731.132 350.899 734.697 Q349.094 738.239 349.094 745.368 Q349.094 752.475 350.899 756.039 Q352.728 759.581 356.339 759.581 Q359.973 759.581 361.779 756.039 Q363.608 752.475 363.608 745.368 Q363.608 738.239 361.779 734.697 Q359.973 731.132 356.339 731.132 M356.339 727.428 Q362.149 727.428 365.205 732.035 Q368.284 736.618 368.284 745.368 Q368.284 754.095 365.205 758.701 Q362.149 763.285 356.339 763.285 Q350.529 763.285 347.45 758.701 Q344.395 754.095 344.395 745.368 Q344.395 736.618 347.45 732.035 Q350.529 727.428 356.339 727.428 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M284.835 470.301 L307.057 470.301 L307.057 472.292 L294.511 504.861 L289.627 504.861 L301.432 474.236 L284.835 474.236 L284.835 470.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M316.224 470.301 L334.58 470.301 L334.58 474.236 L320.506 474.236 L320.506 482.708 Q321.524 482.361 322.543 482.199 Q323.562 482.014 324.58 482.014 Q330.367 482.014 333.747 485.185 Q337.126 488.356 337.126 493.773 Q337.126 499.352 333.654 502.453 Q330.182 505.532 323.862 505.532 Q321.687 505.532 319.418 505.162 Q317.173 504.791 314.765 504.051 L314.765 499.352 Q316.849 500.486 319.071 501.041 Q321.293 501.597 323.77 501.597 Q327.774 501.597 330.112 499.49 Q332.45 497.384 332.45 493.773 Q332.45 490.162 330.112 488.055 Q327.774 485.949 323.77 485.949 Q321.895 485.949 320.02 486.366 Q318.168 486.782 316.224 487.662 L316.224 470.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 473.379 Q352.728 473.379 350.899 476.944 Q349.094 480.486 349.094 487.616 Q349.094 494.722 350.899 498.287 Q352.728 501.828 356.339 501.828 Q359.973 501.828 361.779 498.287 Q363.608 494.722 363.608 487.616 Q363.608 480.486 361.779 476.944 Q359.973 473.379 356.339 473.379 M356.339 469.676 Q362.149 469.676 365.205 474.282 Q368.284 478.866 368.284 487.616 Q368.284 496.342 365.205 500.949 Q362.149 505.532 356.339 505.532 Q350.529 505.532 347.45 500.949 Q344.395 496.342 344.395 487.616 Q344.395 478.866 347.45 474.282 Q350.529 469.676 356.339 469.676 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M256.664 243.173 L264.303 243.173 L264.303 216.807 L255.992 218.474 L255.992 214.215 L264.256 212.548 L268.932 212.548 L268.932 243.173 L276.571 243.173 L276.571 247.108 L256.664 247.108 L256.664 243.173 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M296.015 215.627 Q292.404 215.627 290.576 219.192 Q288.77 222.733 288.77 229.863 Q288.77 236.969 290.576 240.534 Q292.404 244.076 296.015 244.076 Q299.65 244.076 301.455 240.534 Q303.284 236.969 303.284 229.863 Q303.284 222.733 301.455 219.192 Q299.65 215.627 296.015 215.627 M296.015 211.923 Q301.826 211.923 304.881 216.53 Q307.96 221.113 307.96 229.863 Q307.96 238.59 304.881 243.196 Q301.826 247.779 296.015 247.779 Q290.205 247.779 287.127 243.196 Q284.071 238.59 284.071 229.863 Q284.071 221.113 287.127 216.53 Q290.205 211.923 296.015 211.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M326.177 215.627 Q322.566 215.627 320.737 219.192 Q318.932 222.733 318.932 229.863 Q318.932 236.969 320.737 240.534 Q322.566 244.076 326.177 244.076 Q329.811 244.076 331.617 240.534 Q333.446 236.969 333.446 229.863 Q333.446 222.733 331.617 219.192 Q329.811 215.627 326.177 215.627 M326.177 211.923 Q331.987 211.923 335.043 216.53 Q338.122 221.113 338.122 229.863 Q338.122 238.59 335.043 243.196 Q331.987 247.779 326.177 247.779 Q320.367 247.779 317.288 243.196 Q314.233 238.59 314.233 229.863 Q314.233 221.113 317.288 216.53 Q320.367 211.923 326.177 211.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 215.627 Q352.728 215.627 350.899 219.192 Q349.094 222.733 349.094 229.863 Q349.094 236.969 350.899 240.534 Q352.728 244.076 356.339 244.076 Q359.973 244.076 361.779 240.534 Q363.608 236.969 363.608 229.863 Q363.608 222.733 361.779 219.192 Q359.973 215.627 356.339 215.627 M356.339 211.923 Q362.149 211.923 365.205 216.53 Q368.284 221.113 368.284 229.863 Q368.284 238.59 365.205 243.196 Q362.149 247.779 356.339 247.779 Q350.529 247.779 347.45 243.196 Q344.395 238.59 344.395 229.863 Q344.395 221.113 347.45 216.53 Q350.529 211.923 356.339 211.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip452)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.828 4017.76,229.828 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.74 461.669,1245.98 462.238,1245.15 462.806,1244.22 463.375,1243.21 463.943,1241.08 464.511,1239.88 465.08,1238.57 465.648,1237.15 466.216,1235.62 466.785,1233.96 467.353,1232.18 467.921,1229.23 468.49,1227.15 469.058,1224.93 469.626,1221.51 470.195,1215.85 470.763,1213.08 471.331,1210.12 471.9,1207.02 472.468,1202.67 473.036,1198.1 473.605,1193.36 474.173,1188.46 474.741,1184.34 475.31,1180.02 475.878,1173.44 476.446,1168.62 477.015,1161.52 477.583,1156.16 478.152,1150.61 478.72,1144.83 479.288,1138.86 479.857,1132.67 480.425,1126.21 480.993,1118.52 481.562,1111.75 482.13,1103.74 482.698,1096.5 483.267,1089.15 483.835,1080.41 484.403,1070.51 484.972,1062.6 485.54,1051.36 486.108,1043.25 486.677,1034.92 487.245,1024.37 487.813,1015.8 488.382,1006.83 488.95,996.837 489.518,986.657 490.087,976.509 490.655,966.209 491.224,954.574 491.792,942.827 492.36,930.957 492.929,920.083 493.497,909.177 494.065,898.203 494.634,884.243 495.202,873.451 495.77,863.766 496.339,851.958 496.907,842.179 497.475,829.326 498.044,819.745 498.612,810.036 499.18,799.471 499.749,788.739 500.317,775.054 500.885,764.719 501.454,754.348 502.022,742.061 502.59,731.047 503.159,720.16 503.727,711.321 504.295,701.598 504.864,692.073 505.432,680.422 506.001,670.992 506.569,659.492 507.137,651.483 507.706,642.497 508.274,630.514 508.842,620.863 509.411,612.519 509.979,606.356 510.547,598.089 511.116,588.998 511.684,580.951 512.252,573.044 512.821,565.215 513.389,555.434 513.957,547.966 514.526,539.437 515.094,532.278 515.662,525.453 516.231,518.596 516.799,510.967 517.367,503.454 517.936,496.942 518.504,488.661 519.072,481.663 519.641,474.715 520.209,467.818 520.778,462.211 521.346,456.775 521.914,455.583 522.483,452.254 523.051,446.644 523.619,441.041 524.188,436.687 524.756,430.417 525.324,425.211 525.893,421.053 526.461,417.025 527.029,411.178 527.598,405.456 528.166,401.192 528.734,399.96 529.303,395.286 529.871,391.972 530.439,387.644 531.008,384.403 531.576,380.423 532.144,375.168 532.713,373.511 533.281,368.587 533.85,361.646 534.418,356.414 534.986,353.156 535.555,349.047 536.123,348.166 536.691,346.425 537.26,344.63 537.828,341.607 538.396,338.79 538.965,336.908 539.533,335.097 540.101,334.711 540.67,334.102 541.238,331.249 541.806,327.315 542.375,324.664 542.943,321.137 543.511,317.718 544.08,314.473 544.648,312.134 545.216,310.003 545.785,307.123 546.353,307.018 546.921,305.154 547.49,303.227 548.058,302.212 548.627,300.228 549.195,299.286 549.763,297.245 550.332,297.587 550.9,295.725 551.468,294.903 552.037,293.969 552.605,294.173 553.173,292.15 553.742,290.445 554.31,289.635 554.878,285.781 555.447,285.301 556.015,284.82 556.583,282.201 557.152,281.608 557.72,282.142 558.288,279.504 558.857,279.037 559.425,278.481 559.993,277.893 560.562,278.298 561.13,277.448 561.698,278.882 562.267,277.03 562.835,276.483 563.404,271.716 563.972,271.291 564.54,272.753 565.109,272.181 565.677,270.444 566.245,270.981 566.814,268.494 567.382,266.979 567.95,265.43 568.519,264.229 569.087,263.986 569.655,262.44 570.224,262.474 570.792,261.266 571.36,260.137 571.929,261.1 572.497,260.002 573.065,257.714 573.634,257.688 574.202,258.406 574.77,255.477 575.339,253.438 575.907,251.472 576.476,250.858 577.044,252.506 577.612,254.888 578.181,255.729 578.749,255.799 579.317,254.814 579.886,256.603 580.454,255.536 581.022,255.418 581.591,251.117 582.159,250.217 582.727,250.544 583.296,249.633 583.864,249.955 584.432,247.94 585.001,247.32 585.569,247.84 586.137,247.199 586.706,247.522 587.274,248.82 587.842,248.984 588.411,248.983 588.979,248.895 589.547,250.226 590.116,249.157 590.684,248.343 591.253,248.29 591.821,247.153 592.389,246.317 592.958,246.347 593.526,246.367 594.094,246.637 594.663,245.768 595.231,242.9 595.799,242.478 596.368,240.828 596.936,241.57 597.504,243.131 598.073,240.284 598.641,241.867 599.209,242.256 599.778,240.579 600.346,239.132 600.914,238.655 601.483,239.271 602.051,238.791 602.619,238.394 603.188,238.979 603.756,239.601 604.325,239.971 604.893,240.312 605.461,240.919 606.03,239.397 606.598,239.842 607.166,242.456 607.735,242.712 608.303,243.872 608.871,243.106 609.44,243.242 610.008,240.187 610.576,240.658 611.145,239.935 611.713,240.017 612.281,239.221 612.85,239.799 613.418,238.145 613.986,236.916 614.555,238.353 615.123,239.731 615.691,239.934 616.26,241.4 616.828,240.7 617.396,238.975 617.965,239.506 618.533,238.942 619.102,239.29 619.67,239.703 620.238,238.991 620.807,240.542 621.375,240.962 621.943,240.144 622.512,240.37 623.08,240.494 623.648,239.621 624.217,237.708 624.785,238.222 625.353,236.457 625.922,236.984 626.49,238.414 627.058,239.661 627.627,240.05 628.195,241.237 628.763,242.39 629.332,240.481 629.9,240.687 630.468,240.765 631.037,237.865 631.605,238.032 632.173,240.375 632.742,241.431 633.31,238.363 633.879,238.459 634.447,237.65 635.015,236.868 635.584,236.17 636.152,233.455 636.72,232.029 637.289,236.674 637.857,236.167 638.425,236.423 638.994,235.675 639.562,236.099 640.13,234.474 640.699,234.851 641.267,236.357 641.835,236.704 642.404,239.021 642.972,241.392 643.54,241.262 644.109,238.155 644.677,240.483 645.245,241.455 645.814,240.343 646.382,241.413 646.951,240.414 647.519,242.546 648.087,241.423 648.656,240.978 649.224,239.997 649.792,239.02 650.361,240.083 650.929,241.162 651.497,242.021 652.066,241.887 652.634,240.559 653.202,239.445 653.771,238.529 654.339,238.317 654.907,239.33 655.476,239.509 656.044,242.639 656.612,240.089 657.181,238.86 657.749,237.535 658.317,235.52 658.886,235.669 659.454,233.706 660.022,232.962 660.591,232.287 661.159,232.564 661.728,232.63 662.296,232.86 662.864,235.52 663.433,233.422 664.001,235.454 664.569,231.546 665.138,230.738 665.706,230.304 666.274,230.83 666.843,231.299 667.411,231.802 667.979,232.007 668.548,232.227 669.116,231.543 669.684,233.959 670.253,234.029 670.821,232.011 671.389,232.036 671.958,232.4 672.526,232.921 673.094,231.198 673.663,230.524 674.231,231.989 674.799,229.337 675.368,229.931 675.936,232.501 676.505,230.743 677.073,230.042 677.641,229.678 678.21,228.27 678.778,230.071 679.346,231.537 679.915,236.152 680.483,235.266 681.051,238.366 681.62,237.208 682.188,236.288 682.756,237.489 683.325,238.667 683.893,239.596 684.461,238.298 685.03,239.073 685.598,239.839 686.166,240.506 686.735,239.161 687.303,237.618 687.871,237.56 688.44,238.371 689.008,238.168 689.577,236.784 690.145,236.617 690.713,236.635 691.282,237.549 691.85,238.442 692.418,237.993 692.987,238.853 693.555,238.649 694.123,241.367 694.692,241.984 695.26,237.293 695.828,233.879 696.397,234.872 696.965,233.842 697.533,234.807 698.102,234.879 698.67,232.837 699.238,232.971 699.807,234.063 700.375,234.106 700.943,233.983 701.512,233.848 702.08,233.828 702.648,232.933 703.217,232.023 703.785,233.193 704.354,233.045 704.922,232.124 705.49,230.239 706.059,228.63 706.627,227.895 707.195,231.611 707.764,233.762 708.332,232.019 708.9,231.098 709.469,231.244 710.037,231.293 710.605,230.536 711.174,232.942 711.742,233.132 712.31,232.103 712.879,231.083 713.447,232.171 714.015,231.137 714.584,231.42 715.152,230.481 715.72,230.902 716.289,231.203 716.857,230.466 717.425,230.636 717.994,231.845 718.562,231.928 719.131,230.026 719.699,230.498 720.267,233.822 720.836,235.088 721.404,235.939 721.972,234.63 722.541,232.651 723.109,233.79 723.677,233.829 724.246,234.714 724.814,235.575 725.382,234.359 725.951,232.316 726.519,235.416 727.087,237.325 727.656,236.893 728.224,234.405 728.792,236.255 729.361,237.084 729.929,236.774 730.497,237.387 731.066,235.86 731.634,234.468 732.203,234.329 732.771,231.93 733.339,233.119 733.908,232.057 734.476,230.064 735.044,231.39 735.613,231.567 736.181,230.761 736.749,230.711 737.318,232.807 737.886,232.642 738.454,233.584 739.023,232.612 739.591,231.518 740.159,231.319 740.728,231.338 741.296,231.357 741.864,233.485 742.433,231.443 743.001,232.55 743.569,233.594 744.138,235.487 744.706,235.238 745.274,236.205 745.843,236.819 746.411,236.286 746.98,233.977 747.548,235.829 748.116,236.392 748.685,236.06 749.253,235.863 749.821,235.512 750.39,234.29 750.958,233.025 751.526,232.138 752.095,232.157 752.663,233.396 753.231,232.356 753.8,231.412 754.368,230.37 754.936,230.398 755.505,230.572 756.073,229.656 756.641,227.623 757.21,227.956 757.778,227.42 758.346,226.617 758.915,227.015 759.483,228.443 760.052,228.924 760.62,229.382 761.188,229.699 761.757,229.903 762.325,228.915 762.893,227.826 763.462,228.224 764.03,230.256 764.598,231.237 765.167,229.307 765.735,230.511 766.303,229.458 766.872,229.735 767.44,228.847 768.008,230.087 768.577,228.164 769.145,225.419 769.713,223.87 770.282,225.524 770.85,228 771.418,228.273 771.987,229.535 772.555,228.685 773.123,227.927 773.692,230.268 774.26,232.339 774.829,233.327 775.397,233.117 775.965,233.086 776.534,233.002 777.102,233.807 777.67,232.706 778.239,232.645 778.807,231.604 779.375,229.885 779.944,229.916 780.512,228.93 781.08,229.213 781.649,230.294 782.217,232.364 782.785,233.47 783.354,234.295 783.922,233.054 784.49,234.099 785.059,234.974 785.627,236.892 786.195,237.588 786.764,237.07 787.332,236.544 787.9,235.204 788.469,232.869 789.037,232.771 789.606,232.709 790.174,233.441 790.742,233.406 791.311,232.216 791.879,232.282 792.447,232.299 793.016,231.209 793.584,229.183 794.152,229.388 794.721,229.508 795.289,228.647 795.857,231.757 796.426,230.575 796.994,228.616 797.562,226.767 798.131,227.09 798.699,228.474 799.267,226.725 799.836,227.11 800.404,227.614 800.972,228.99 801.541,229.123 802.109,228.136 802.678,229.528 803.246,230.588 803.814,230.634 804.383,232.678 804.951,232.64 805.519,230.232 806.088,230.255 806.656,229.19 807.224,231.549 807.793,229.703 808.361,229.864 808.929,229.949 809.498,232.479 810.066,232.548 810.634,232.345 811.203,232.261 811.771,232.224 812.339,231.153 812.908,234.107 813.476,232.919 814.044,231.751 814.613,229.591 815.181,230.787 815.749,231.755 816.318,233.826 816.886,235.424 817.455,233.137 818.023,232.899 818.591,231.76 819.16,232.573 819.728,232.338 820.296,232.245 820.865,231.334 821.433,231.604 822.001,231.647 822.57,231.8 823.138,232.029 823.706,232.12 824.275,232.873 824.843,229.484 825.411,229.453 825.98,229.601 826.548,229.779 827.116,226.886 827.685,226.214 828.253,225.367 828.821,226.677 829.39,225.722 829.958,226.113 830.526,226.443 831.095,226.823 831.663,227.028 832.232,226.33 832.8,228.751 833.368,231.086 833.937,230.116 834.505,226.925 835.073,228.367 835.642,227.387 836.21,225.595 836.778,226.08 837.347,227.633 837.915,228.891 838.483,231.172 839.052,231.229 839.62,232.093 840.188,232.004 840.757,232.85 841.325,232.554 841.893,233.619 842.462,233.426 843.03,231.376 843.598,229.235 844.167,230.177 844.735,229.324 845.304,228.321 845.872,230.682 846.44,231.81 847.009,232.87 847.577,234.001 848.145,232.79 848.714,230.647 849.282,229.596 849.85,228.839 850.419,230.134 850.987,231.431 851.555,232.419 852.124,232.341 852.692,233.275 853.26,231.929 853.829,231.566 854.397,231.533 854.965,230.302 855.534,229.455 856.102,230.651 856.67,230.829 857.239,233.084 857.807,235.965 858.375,235.534 858.944,233.995 859.512,232.019 860.081,232.924 860.649,232.856 861.217,235.724 861.786,235.338 862.354,236.003 862.922,234.599 863.491,233.374 864.059,232.218 864.627,234.333 865.196,235.985 865.764,235.618 866.332,235.268 866.901,235.201 867.469,234.659 868.037,233.315 868.606,234.27 869.174,233.796 869.742,234.55 870.311,233.306 870.879,230.972 871.447,230.745 872.016,230.617 872.584,231.752 873.152,233.537 873.721,234.345 874.289,237.051 874.858,236.22 875.426,237.901 875.994,236.275 876.563,234.696 877.131,234.462 877.699,234.315 878.268,231.883 878.836,231.729 879.404,233.542 879.973,232.149 880.541,231.932 881.109,232.842 881.678,229.567 882.246,226.35 882.814,227.63 883.383,232.82 883.951,232.674 884.519,231.272 885.088,231.051 885.656,228.875 886.224,229.009 886.793,230.219 887.361,229.959 887.93,230.806 888.498,228.48 889.066,225.391 889.635,225.679 890.203,225.681 890.771,224.743 891.34,222.959 891.908,223.305 892.476,225.803 893.045,222.947 893.613,220.262 894.181,219.895 894.75,221.542 895.318,222.226 895.886,223.79 896.455,223.039 897.023,222.503 897.591,222.973 898.16,222.517 898.728,223.036 899.296,224.537 899.865,227.037 900.433,228.371 901.001,226.479 901.57,228.083 902.138,228.285 902.707,230.656 903.275,226.596 903.843,225.884 904.412,226.386 904.98,227.696 905.548,230.011 906.117,232.864 906.685,231.67 907.253,230.398 907.822,231.573 908.39,231.478 908.958,231.309 909.527,231.48 910.095,231.406 910.663,231.424 911.232,231.413 911.8,233.594 912.368,233.402 912.937,232.32 913.505,233.3 914.073,233.88 914.642,232.67 915.21,234.687 915.779,236.641 916.347,237.352 916.915,236.862 917.484,235.283 918.052,234.951 918.62,234.516 919.189,232.174 919.757,233.041 920.325,231.884 920.894,230.73 921.462,229.6 922.03,228.725 922.599,228.869 923.167,226.135 923.735,225.553 924.304,224.919 924.872,225.089 925.44,225.377 926.009,221.868 926.577,223.29 927.145,223.765 927.714,225.306 928.282,227.706 928.85,227.902 929.419,228.193 929.987,229.532 930.556,227.696 931.124,228.074 931.692,227.153 932.261,230.625 932.829,228.649 933.397,229.833 933.966,229.901 934.534,230.092 935.102,232.315 935.671,232.401 936.239,232.484 936.807,233.241 937.376,234.194 937.944,233.989 938.512,235.668 939.081,234.36 939.649,236.242 940.217,239.754 940.786,240.007 941.354,240.414 941.922,239.897 942.491,238.274 943.059,238.919 943.627,237.336 944.196,235.671 944.764,231.99 945.333,231.798 945.901,230.481 946.469,230.667 947.038,231.589 947.606,230.531 948.174,230.67 948.743,231.744 949.311,230.445 949.879,229.312 950.448,230.343 951.016,229.242 951.584,231.264 952.153,229.962 952.721,229.941 953.289,228.915 953.858,229.041 954.426,229.173 954.994,229.206 955.563,230.142 956.131,231.155 956.699,229.127 957.268,228.954 957.836,227.862 958.405,227.007 958.973,226.933 959.541,229.108 960.11,230.124 960.678,229.952 961.246,229.035 961.815,225.842 962.383,226.271 962.951,224.358 963.52,225.575 964.088,225.051 964.656,222.398 965.225,223.013 965.793,223.663 966.361,223.083 966.93,224.72 967.498,225.159 968.066,226.635 968.635,226.984 969.203,226.114 969.771,224.566 970.34,223.01 970.908,224.622 971.476,224.253 972.045,222.545 972.613,223.038 973.182,223.853 973.75,226.433 974.318,226.818 974.887,227.144 975.455,225.545 976.023,226.099 976.592,226.407 977.16,226.841 977.728,227.167 978.297,227.354 978.865,227.753 979.433,229.222 980.002,231.553 980.57,231.558 981.138,232.684 981.707,233.7 982.275,234.499 982.843,235.003 983.412,234.589 983.98,232.267 984.548,231.989 985.117,228.796 985.685,229.979 986.253,229.974 986.822,230.766 987.39,231.894 987.959,232.877 988.527,232.595 989.095,232.363 989.664,233.576 990.232,235.667 990.8,234.359 991.369,232.002 991.937,230.86 992.505,230.891 993.074,231.055 993.642,234.2 994.21,233.846 994.779,233.681 995.347,232.533 995.915,232.357 996.484,231.236 997.052,229.117 997.62,232.204 998.189,232.917 998.757,232.6 999.325,233.344 999.894,236.203 1000.46,236.819 1001.03,236.491 1001.6,236.003 1002.17,239.851 1002.74,238.881 1003.3,236.2 1003.87,235.661 1004.44,235.196 1005.01,234.904 1005.58,234.584 1006.15,234.152 1006.71,231.878 1007.28,231.578 1007.85,229.385 1008.42,230.289 1008.99,229.005 1009.56,231.224 1010.12,231.148 1010.69,231.103 1011.26,230.083 1011.83,232.274 1012.4,233.001 1012.97,232.814 1013.53,234.66 1014.1,236.147 1014.67,234.62 1015.24,233.242 1015.81,231.992 1016.38,232.947 1016.94,233.621 1017.51,232.146 1018.08,232.962 1018.65,231.318 1019.22,233.296 1019.79,230.862 1020.35,228.412 1020.92,229.617 1021.49,229.515 1022.06,228.638 1022.63,229.988 1023.2,229.705 1023.76,229.54 1024.33,231.412 1024.9,231.226 1025.47,229.06 1026.04,225.926 1026.61,227.087 1027.17,228.349 1027.74,226.368 1028.31,225.556 1028.88,225.673 1029.45,224.812 1030.02,226.152 1030.58,226.509 1031.15,226.603 1031.72,225.654 1032.29,225.875 1032.86,227.911 1033.43,226.097 1033.99,227.516 1034.56,227.576 1035.13,228.674 1035.7,230.014 1036.27,227.14 1036.84,227.375 1037.4,227.555 1037.97,227.576 1038.54,226.976 1039.11,228.2 1039.68,228.161 1040.25,227.29 1040.81,225.313 1041.38,225.541 1041.95,225.919 1042.52,226.147 1043.09,227.537 1043.66,228.857 1044.22,229.915 1044.79,228.668 1045.36,230.106 1045.93,230.055 1046.5,230.096 1047.07,228.105 1047.63,228.496 1048.2,227.487 1048.77,227.684 1049.34,227.771 1049.91,227.853 1050.48,227.17 1051.05,227.095 1051.61,227.254 1052.18,230.509 1052.75,231.37 1053.32,231.475 1053.89,230.391 1054.46,230.565 1055.02,230.59 1055.59,232.493 1056.16,232.254 1056.73,233.217 1057.3,232.956 1057.87,232.446 1058.43,231.183 1059,231.232 1059.57,230.08 1060.14,228.233 1060.71,225.551 1061.28,227.973 1061.84,228.036 1062.41,227.282 1062.98,228.542 1063.55,227.663 1064.12,229.936 1064.69,227.884 1065.25,229.172 1065.82,226.159 1066.39,227.268 1066.96,229.583 1067.53,228.751 1068.1,227.799 1068.66,223.769 1069.23,225.196 1069.8,225.475 1070.37,225.9 1070.94,227.374 1071.51,229.025 1072.07,230.227 1072.64,231.458 1073.21,233.56 1073.78,235.308 1074.35,233.992 1074.92,233.607 1075.48,233.512 1076.05,231.282 1076.62,232.222 1077.19,232.031 1077.76,231.002 1078.33,227.925 1078.89,228.002 1079.46,226.985 1080.03,225.515 1080.6,224.846 1081.17,223.067 1081.74,223.674 1082.3,227.09 1082.87,224.217 1083.44,223.722 1084.01,226.23 1084.58,227.667 1085.15,228.979 1085.71,229.335 1086.28,230.368 1086.85,230.484 1087.42,231.33 1087.99,231.405 1088.56,230.55 1089.12,229.502 1089.69,229.561 1090.26,228.397 1090.83,230.679 1091.4,229.92 1091.97,230.883 1092.53,230.791 1093.1,231.005 1093.67,229.035 1094.24,229.188 1094.81,226.03 1095.38,225.399 1095.94,225.771 1096.51,225.128 1097.08,225.687 1097.65,228.358 1098.22,226.45 1098.79,225.82 1099.35,227.311 1099.92,226.452 1100.49,228.026 1101.06,227.41 1101.63,227.678 1102.2,231.171 1102.76,233.183 1103.33,231.987 1103.9,232.082 1104.47,232.044 1105.04,231.878 1105.61,231.832 1106.17,233.018 1106.74,233.95 1107.31,232.758 1107.88,231.587 1108.45,233.536 1109.02,236.684 1109.58,235.155 1110.15,234.818 1110.72,233.63 1111.29,233.804 1111.86,232.54 1112.43,230.316 1112.99,232.543 1113.56,233.285 1114.13,231.286 1114.7,232.063 1115.27,230.007 1115.84,230.033 1116.4,232.037 1116.97,233.825 1117.54,233.752 1118.11,232.283 1118.68,232.222 1119.25,231.189 1119.81,231.025 1120.38,233.195 1120.95,231.938 1121.52,232.879 1122.09,231.848 1122.66,235.013 1123.23,234.757 1123.79,234.383 1124.36,233.094 1124.93,235.02 1125.5,234.725 1126.07,233.375 1126.64,233.049 1127.2,232.977 1127.77,232.585 1128.34,231.536 1128.91,233.429 1129.48,237.257 1130.05,236.383 1130.61,235.929 1131.18,235.408 1131.75,234.832 1132.32,235.458 1132.89,233.865 1133.46,234.295 1134.02,232.066 1134.59,231.812 1135.16,230.588 1135.73,228.411 1136.3,228.438 1136.87,225.402 1137.43,227.647 1138,226.866 1138.57,228.308 1139.14,227.083 1139.71,225.161 1140.28,225.485 1140.84,227.745 1141.41,228.807 1141.98,227.913 1142.55,229.161 1143.12,228.295 1143.69,228.181 1144.25,227.273 1144.82,225.47 1145.39,225.783 1145.96,225.85 1146.53,226.269 1147.1,228.565 1147.66,227.705 1148.23,229.097 1148.8,228.146 1149.37,227.153 1149.94,225.223 1150.51,223.596 1151.07,224.164 1151.64,226.792 1152.21,225.931 1152.78,226.412 1153.35,224.67 1153.92,228.338 1154.48,231.659 1155.05,231.616 1155.62,230.542 1156.19,230.628 1156.76,228.603 1157.33,227.727 1157.89,228.973 1158.46,228.983 1159.03,228.908 1159.6,229.913 1160.17,231.044 1160.74,233.191 1161.3,234.17 1161.87,233.02 1162.44,232.714 1163.01,232.514 1163.58,233.295 1164.15,235.113 1164.71,233.6 1165.28,233.263 1165.85,233.907 1166.42,234.68 1166.99,233.453 1167.56,234.144 1168.12,232.756 1168.69,232.493 1169.26,231.078 1169.83,231.852 1170.4,229.471 1170.97,231.443 1171.53,231.342 1172.1,231.262 1172.67,231.983 1173.24,232.974 1173.81,232.369 1174.38,228.97 1174.94,229.033 1175.51,228.105 1176.08,230.187 1176.65,231.212 1177.22,230.016 1177.79,228.865 1178.35,228.615 1178.92,227.55 1179.49,228.536 1180.06,226.667 1180.63,227.834 1181.2,226.857 1181.76,228.109 1182.33,228.296 1182.9,226.213 1183.47,224.321 1184.04,225.716 1184.61,225.169 1185.17,225.34 1185.74,225.739 1186.31,227.162 1186.88,228.424 1187.45,231.765 1188.02,230.635 1188.58,230.648 1189.15,231.471 1189.72,232.305 1190.29,232.3 1190.86,229.885 1191.43,230.953 1192,233.053 1192.56,232.928 1193.13,235.649 1193.7,235.36 1194.27,231.842 1194.84,231.781 1195.41,231.514 1195.97,231.313 1196.54,233.181 1197.11,231.954 1197.68,233.833 1198.25,232.53 1198.82,231.295 1199.38,231.048 1199.95,230.811 1200.52,230.6 1201.09,233.823 1201.66,233.469 1202.23,233.089 1202.79,230.719 1203.36,228.256 1203.93,228.305 1204.5,228.397 1205.07,229.551 1205.64,230.635 1206.2,230.611 1206.77,229.591 1207.34,230.731 1207.91,230.485 1208.48,229.14 1209.05,228 1209.61,230.019 1210.18,229.685 1210.75,228.557 1211.32,228.524 1211.89,230.644 1212.46,231.74 1213.02,229.496 1213.59,228.459 1214.16,228.494 1214.73,230.41 1215.3,229.316 1215.87,229.453 1216.43,229.454 1217,231.487 1217.57,229.179 1218.14,230.327 1218.71,229.082 1219.28,230.221 1219.84,230.985 1220.41,231.902 1220.98,232.565 1221.55,229.415 1222.12,229.368 1222.69,228.295 1223.25,227.318 1223.82,227.192 1224.39,227.194 1224.96,227.525 1225.53,227.756 1226.1,228.099 1226.66,227.194 1227.23,227.16 1227.8,227.225 1228.37,227.342 1228.94,229.728 1229.51,228.872 1230.07,230.954 1230.64,229.65 1231.21,230.67 1231.78,230.552 1232.35,228.448 1232.92,231.702 1233.48,232.545 1234.05,234.483 1234.62,235.24 1235.19,231.617 1235.76,231.643 1236.33,232.469 1236.89,231.113 1237.46,229.952 1238.03,229.798 1238.6,228.633 1239.17,227.64 1239.74,230.073 1240.3,229.014 1240.87,228.957 1241.44,229.109 1242.01,230.568 1242.58,231.398 1243.15,230.072 1243.71,229.141 1244.28,226.112 1244.85,228.41 1245.42,225.37 1245.99,226.74 1246.56,225.754 1247.12,223.934 1247.69,224.262 1248.26,226.518 1248.83,225.642 1249.4,226 1249.97,228.251 1250.53,230.616 1251.1,230.663 1251.67,231.746 1252.24,230.43 1252.81,232.261 1253.38,231.252 1253.94,234.356 1254.51,235.334 1255.08,235.1 1255.65,234.759 1256.22,233.412 1256.79,232.307 1257.35,232.018 1257.92,233.193 1258.49,234.882 1259.06,236.609 1259.63,236.286 1260.2,234.624 1260.76,235.024 1261.33,232.495 1261.9,232.304 1262.47,230.915 1263.04,232.987 1263.61,231.831 1264.18,230.589 1264.74,229.242 1265.31,229.427 1265.88,229.422 1266.45,229.304 1267.02,229.369 1267.59,230.178 1268.15,225.95 1268.72,226.191 1269.29,227.596 1269.86,225.624 1270.43,224.949 1271,226.147 1271.56,225.42 1272.13,222.652 1272.7,221.188 1273.27,221.953 1273.84,221.637 1274.41,223.202 1274.97,223.727 1275.54,224.224 1276.11,224.589 1276.68,226.017 1277.25,224.062 1277.82,222.437 1278.38,223.089 1278.95,224.751 1279.52,223.983 1280.09,224.572 1280.66,225.039 1281.23,226.557 1281.79,225.81 1282.36,228.148 1282.93,227.225 1283.5,227.385 1284.07,229.679 1284.64,228.644 1285.2,226.638 1285.77,225.923 1286.34,227.18 1286.91,228.437 1287.48,228.678 1288.05,229.852 1288.61,230.103 1289.18,231.456 1289.75,231.609 1290.32,233.862 1290.89,235.678 1291.46,237.176 1292.02,235.726 1292.59,235.331 1293.16,234.954 1293.73,234.574 1294.3,235.457 1294.87,235.078 1295.43,236.793 1296,236.103 1296.57,236.641 1297.14,236.179 1297.71,235.751 1298.28,235.38 1298.84,234.016 1299.41,236.787 1299.98,237.114 1300.55,235.636 1301.12,233.205 1301.69,230.005 1302.25,231.178 1302.82,231.24 1303.39,229.932 1303.96,228.86 1304.53,228.964 1305.1,231.084 1305.66,229.992 1306.23,229.045 1306.8,229.025 1307.37,228.084 1307.94,229.217 1308.51,229.523 1309.07,229.57 1309.64,229.645 1310.21,229.713 1310.78,229.857 1311.35,228.606 1311.92,229.593 1312.48,227.51 1313.05,227.746 1313.62,229.049 1314.19,231.968 1314.76,231.617 1315.33,233.637 1315.89,233.4 1316.46,230.926 1317.03,230.772 1317.6,229.554 1318.17,228.482 1318.74,226.648 1319.3,227.953 1319.87,229.055 1320.44,230.102 1321.01,230.14 1321.58,230.181 1322.15,230.117 1322.71,230.975 1323.28,232.011 1323.85,231.751 1324.42,233.303 1324.99,232.168 1325.56,231.751 1326.12,231.605 1326.69,231.453 1327.26,232.354 1327.83,232.263 1328.4,231.03 1328.97,231.897 1329.53,233.885 1330.1,233.492 1330.67,234.041 1331.24,235.462 1331.81,235.973 1332.38,235.467 1332.94,236.997 1333.51,235.189 1334.08,235.697 1334.65,232.799 1335.22,231.364 1335.79,231.242 1336.36,230.004 1336.92,227.754 1337.49,225.743 1338.06,225.8 1338.63,226.278 1339.2,228.363 1339.77,229.307 1340.33,227.997 1340.9,227.092 1341.47,226.261 1342.04,226.278 1342.61,228.207 1343.18,228.164 1343.74,228.19 1344.31,228.222 1344.88,227.117 1345.45,227.157 1346.02,227.384 1346.59,227.473 1347.15,227.562 1347.72,224.66 1348.29,225.785 1348.86,226.007 1349.43,227.267 1350,225.336 1350.56,226.63 1351.13,229.907 1351.7,227.734 1352.27,227.638 1352.84,225.665 1353.41,226.916 1353.97,226.029 1354.54,224.996 1355.11,223.187 1355.68,223.644 1356.25,224.095 1356.82,223.647 1357.38,226.164 1357.95,228.37 1358.52,231.417 1359.09,229.299 1359.66,230.405 1360.23,229.338 1360.79,229.241 1361.36,231.426 1361.93,231.282 1362.5,231.153 1363.07,231.852 1363.64,232.715 1364.2,232.386 1364.77,233.245 1365.34,235.015 1365.91,233.739 1366.48,231.409 1367.05,233.331 1367.61,231.793 1368.18,230.615 1368.75,231.456 1369.32,231.296 1369.89,230.27 1370.46,230.937 1371.02,230.006 1371.59,231.047 1372.16,230.131 1372.73,231.143 1373.3,234.213 1373.87,231.946 1374.43,229.628 1375,230.616 1375.57,229.572 1376.14,229.743 1376.71,231.909 1377.28,232.521 1377.84,231.408 1378.41,230.357 1378.98,228.158 1379.55,228.282 1380.12,228.158 1380.69,227.969 1381.25,228.137 1381.82,227.135 1382.39,225.149 1382.96,224.412 1383.53,226.952 1384.1,227.208 1384.66,229.13 1385.23,229.061 1385.8,232.017 1386.37,231.602 1386.94,230.505 1387.51,230.359 1388.07,229.353 1388.64,228.177 1389.21,227.345 1389.78,226.301 1390.35,225.442 1390.92,224.925 1391.48,225.373 1392.05,228.895 1392.62,230.076 1393.19,229.223 1393.76,229.258 1394.33,227.351 1394.89,224.493 1395.46,224.685 1396.03,227.127 1396.6,228.445 1397.17,226.569 1397.74,226.788 1398.3,224.911 1398.87,224.323 1399.44,221.705 1400.01,222.397 1400.58,225.035 1401.15,225.284 1401.71,224.7 1402.28,222.994 1402.85,224.649 1403.42,224.227 1403.99,225.862 1404.56,225.213 1405.13,223.55 1405.69,224.197 1406.26,225.704 1406.83,225.053 1407.4,225.269 1407.97,227.108 1408.54,226.696 1409.1,226.04 1409.67,226.137 1410.24,228.575 1410.81,228.953 1411.38,226.971 1411.95,229.388 1412.51,231.502 1413.08,231.485 1413.65,231.468 1414.22,230.596 1414.79,232.085 1415.36,231.033 1415.92,230.994 1416.49,233.158 1417.06,231.992 1417.63,231.94 1418.2,231.118 1418.77,233.283 1419.33,234.268 1419.9,234.09 1420.47,234.203 1421.04,233.982 1421.61,231.642 1422.18,229.766 1422.74,229.828 1423.31,230.89 1423.88,230.91 1424.45,230.909 1425.02,229.967 1425.59,231.02 1426.15,231.269 1426.72,230.17 1427.29,229.359 1427.86,231.653 1428.43,229.78 1429,230.868 1429.56,229.932 1430.13,230.16 1430.7,228.308 1431.27,227.52 1431.84,227.777 1432.41,227.09 1432.97,228.169 1433.54,227.355 1434.11,228.729 1434.68,227.891 1435.25,227.292 1435.82,229.384 1436.38,230.726 1436.95,232.642 1437.52,234.559 1438.09,235.358 1438.66,234.955 1439.23,233.745 1439.79,233.544 1440.36,235.488 1440.93,234.106 1441.5,233.069 1442.07,233.922 1442.64,233.676 1443.2,232.484 1443.77,234.494 1444.34,234.118 1444.91,232.659 1445.48,233.553 1446.05,235.356 1446.61,235.041 1447.18,234.772 1447.75,233.385 1448.32,233.141 1448.89,231.782 1449.46,230.609 1450.02,229.611 1450.59,231.709 1451.16,234.843 1451.73,233.673 1452.3,232.476 1452.87,233.45 1453.43,231.252 1454,230.127 1454.57,231.085 1455.14,231.775 1455.71,232.759 1456.28,232.551 1456.84,230.201 1457.41,232.038 1457.98,231.707 1458.55,231.705 1459.12,231.631 1459.69,235.369 1460.25,234.953 1460.82,236.424 1461.39,234.702 1461.96,233.291 1462.53,234.913 1463.1,234.522 1463.66,233.028 1464.23,230.71 1464.8,230.915 1465.37,234.004 1465.94,236.803 1466.51,236.338 1467.07,234.711 1467.64,232.066 1468.21,230.679 1468.78,229.66 1469.35,227.415 1469.92,227.584 1470.48,227.47 1471.05,228.757 1471.62,228.686 1472.19,228.729 1472.76,227.721 1473.33,227.992 1473.89,227.815 1474.46,226.764 1475.03,228.715 1475.6,230.711 1476.17,230.587 1476.74,229.432 1477.31,228.378 1477.87,228.464 1478.44,227.319 1479.01,229.642 1479.58,229.758 1480.15,228.692 1480.72,226.637 1481.28,226.777 1481.85,225.835 1482.42,223.92 1482.99,225.197 1483.56,224.431 1484.13,222.944 1484.69,223.303 1485.26,225.794 1485.83,225.942 1486.4,228.158 1486.97,226.105 1487.54,228.41 1488.1,228.236 1488.67,231.282 1489.24,231.052 1489.81,231.034 1490.38,230.899 1490.95,232.896 1491.51,231.705 1492.08,228.465 1492.65,227.577 1493.22,228.587 1493.79,226.42 1494.36,226.629 1494.92,228.005 1495.49,229.332 1496.06,230.32 1496.63,231.232 1497.2,232.195 1497.77,228.741 1498.33,227.816 1498.9,228.076 1499.47,230.105 1500.04,229.083 1500.61,228.272 1501.18,228.402 1501.74,228.513 1502.31,228.485 1502.88,228.583 1503.45,230.822 1504.02,229.825 1504.59,228.773 1505.15,228.704 1505.72,229.862 1506.29,231.147 1506.86,232.979 1507.43,235.892 1508,235.56 1508.56,233.791 1509.13,236.343 1509.7,234.799 1510.27,233.259 1510.84,230.818 1511.41,231.861 1511.97,231.619 1512.54,231.396 1513.11,227.238 1513.68,227.372 1514.25,228.513 1514.82,227.631 1515.38,229.625 1515.95,229.853 1516.52,229.762 1517.09,229.686 1517.66,232.478 1518.23,231.443 1518.79,234.309 1519.36,235.961 1519.93,236.455 1520.5,237.155 1521.07,238.662 1521.64,238.107 1522.2,235.398 1522.77,236.136 1523.34,236.476 1523.91,235.97 1524.48,237.52 1525.05,237.968 1525.61,236.322 1526.18,234.679 1526.75,234.112 1527.32,233.61 1527.89,233.14 1528.46,231.534 1529.02,233.225 1529.59,232.811 1530.16,232.372 1530.73,232.021 1531.3,230.71 1531.87,232.358 1532.43,232.973 1533,231.434 1533.57,230.28 1534.14,227.95 1534.71,227.806 1535.28,227.752 1535.84,226.888 1536.41,224.028 1536.98,222.83 1537.55,223.442 1538.12,222.564 1538.69,222.78 1539.25,223.198 1539.82,222.432 1540.39,221.674 1540.96,222.053 1541.53,222.569 1542.1,224.321 1542.66,224.764 1543.23,224.909 1543.8,224.896 1544.37,226.185 1544.94,227.396 1545.51,225.464 1546.08,224.702 1546.64,224.074 1547.21,225.281 1547.78,224.617 1548.35,222.958 1548.92,224.449 1549.49,223.772 1550.05,224.088 1550.62,224.454 1551.19,223.803 1551.76,223.243 1552.33,227.815 1552.9,227.146 1553.46,226.131 1554.03,224.5 1554.6,228.097 1555.17,229.358 1555.74,230.586 1556.31,230.63 1556.87,230.746 1557.44,232.551 1558.01,231.333 1558.58,231.195 1559.15,232.183 1559.72,230.105 1560.28,230.393 1560.85,230.3 1561.42,228.256 1561.99,229.227 1562.56,228.13 1563.13,228.22 1563.69,228.374 1564.26,224.275 1564.83,225.83 1565.4,226.119 1565.97,228.378 1566.54,228.644 1567.1,227.742 1567.67,228.142 1568.24,228.521 1568.81,227.694 1569.38,228.028 1569.95,229.188 1570.51,229.511 1571.08,228.595 1571.65,226.791 1572.22,229.12 1572.79,230.264 1573.36,232.181 1573.92,231.215 1574.49,233.23 1575.06,232.152 1575.63,229.839 1576.2,232.143 1576.77,233.087 1577.33,233.134 1577.9,233.114 1578.47,234.868 1579.04,234.558 1579.61,232.152 1580.18,231.057 1580.74,229.654 1581.31,229.625 1581.88,230.61 1582.45,232.764 1583.02,231.592 1583.59,231.387 1584.15,231.39 1584.72,231.37 1585.29,234.265 1585.86,234.823 1586.43,234.552 1587,233.259 1587.56,234.201 1588.13,233.973 1588.7,234.649 1589.27,233.229 1589.84,233.959 1590.41,235.73 1590.97,233.303 1591.54,232.904 1592.11,233.597 1592.68,233.216 1593.25,232.206 1593.82,231.017 1594.38,231.815 1594.95,233.577 1595.52,230.21 1596.09,229.991 1596.66,228.666 1597.23,228.744 1597.79,228.877 1598.36,229.105 1598.93,227.985 1599.5,229.065 1600.07,229.057 1600.64,229.056 1601.2,228.958 1601.77,225.801 1602.34,225.87 1602.91,226.016 1603.48,225.21 1604.05,225.343 1604.61,225.512 1605.18,226.866 1605.75,226.258 1606.32,225.349 1606.89,224.555 1607.46,222.813 1608.02,223.179 1608.59,221.622 1609.16,224.275 1609.73,224.904 1610.3,225.443 1610.87,228.007 1611.43,228.274 1612,228.324 1612.57,227.312 1613.14,230.535 1613.71,231.549 1614.28,232.477 1614.84,231.478 1615.41,232.588 1615.98,231.599 1616.55,231.808 1617.12,229.69 1617.69,227.794 1618.26,227.837 1618.82,229.031 1619.39,228.181 1619.96,231.561 1620.53,229.599 1621.1,229.762 1621.67,230.853 1622.23,229.7 1622.8,229.583 1623.37,228.535 1623.94,228.806 1624.51,229.908 1625.08,231.013 1625.64,230.948 1626.21,227.655 1626.78,227.81 1627.35,230.153 1627.92,229.043 1628.49,228.95 1629.05,230.121 1629.62,229.078 1630.19,230.119 1630.76,229.162 1631.33,228.144 1631.9,229.313 1632.46,229.278 1633.03,231.378 1633.6,233.449 1634.17,234.332 1634.74,235.326 1635.31,235.064 1635.87,235.39 1636.44,232.88 1637.01,234.892 1637.58,233.561 1638.15,234.157 1638.72,233.885 1639.28,236.593 1639.85,233.927 1640.42,233.592 1640.99,231.147 1641.56,231.882 1642.13,231.644 1642.69,230.491 1643.26,229.499 1643.83,229.642 1644.4,231.658 1644.97,230.571 1645.54,231.368 1646.1,229.235 1646.67,230.273 1647.24,229.256 1647.81,230.364 1648.38,231.269 1648.95,229.998 1649.51,230.086 1650.08,230.089 1650.65,230.096 1651.22,230.007 1651.79,232.005 1652.36,232.058 1652.92,230.704 1653.49,230.385 1654.06,232.38 1654.63,233.228 1655.2,231.754 1655.77,230.374 1656.33,229.096 1656.9,229.199 1657.47,228.06 1658.04,229.139 1658.61,231.508 1659.18,231.395 1659.74,231.435 1660.31,231.303 1660.88,231.079 1661.45,232.849 1662.02,233.782 1662.59,232.428 1663.15,234.135 1663.72,233.62 1664.29,233.076 1664.86,232.706 1665.43,233.279 1666,231.76 1666.56,230.331 1667.13,232.272 1667.7,230.05 1668.27,227.857 1668.84,229.17 1669.41,229.104 1669.97,229.035 1670.54,230.111 1671.11,231.284 1671.68,231.077 1672.25,232.934 1672.82,234.85 1673.38,234.419 1673.95,235.114 1674.52,232.408 1675.09,232.298 1675.66,230.092 1676.23,229.91 1676.79,228.711 1677.36,227.841 1677.93,226.859 1678.5,224.794 1679.07,225.158 1679.64,226.299 1680.2,226.138 1680.77,226.476 1681.34,226.876 1681.91,228.901 1682.48,228.818 1683.05,229.924 1683.61,229.646 1684.18,229.502 1684.75,229.415 1685.32,230.269 1685.89,230.146 1686.46,228.892 1687.02,227.7 1687.59,227.628 1688.16,229 1688.73,228.056 1689.3,229.022 1689.87,228.208 1690.44,227.029 1691,226.132 1691.57,224.33 1692.14,223.713 1692.71,226.256 1693.28,225.559 1693.85,226.79 1694.41,227.011 1694.98,225.99 1695.55,225.113 1696.12,227.441 1696.69,227.658 1697.26,227.019 1697.82,227.308 1698.39,227.43 1698.96,226.654 1699.53,226.737 1700.1,222.833 1700.67,221.225 1701.23,223.885 1701.8,224.37 1702.37,222.827 1702.94,221.344 1703.51,222.953 1704.08,223.548 1704.64,225.34 1705.21,224.645 1705.78,225.067 1706.35,226.567 1706.92,230.259 1707.49,227.225 1708.05,229.357 1708.62,230.492 1709.19,229.473 1709.76,231.703 1710.33,233.849 1710.9,234.532 1711.46,238.396 1712.03,239.033 1712.6,238.479 1713.17,240.845 1713.74,237.897 1714.31,240.266 1714.87,240.526 1715.44,238.806 1716.01,238.124 1716.58,237.451 1717.15,234.792 1717.72,232.302 1718.28,230.006 1718.85,232.059 1719.42,230.577 1719.99,230.513 1720.56,229.549 1721.13,229.629 1721.69,228.59 1722.26,228.434 1722.83,229.607 1723.4,229.521 1723.97,230.469 1724.54,229.339 1725.1,231.29 1725.67,225.951 1726.24,226.273 1726.81,225.663 1727.38,227.045 1727.95,227.282 1728.51,226.542 1729.08,225.917 1729.65,226.117 1730.22,228.345 1730.79,226.558 1731.36,225.516 1731.92,226.736 1732.49,224.94 1733.06,225.205 1733.63,224.369 1734.2,225.53 1734.77,226.996 1735.33,227.314 1735.9,227.479 1736.47,227.584 1737.04,225.65 1737.61,225.957 1738.18,225.097 1738.74,227.425 1739.31,229.532 1739.88,229.675 1740.45,228.777 1741.02,227.754 1741.59,225.876 1742.15,225.128 1742.72,226.441 1743.29,225.617 1743.86,224.911 1744.43,224.303 1745,222.835 1745.56,226.551 1746.13,227.747 1746.7,225.016 1747.27,225.444 1747.84,226.966 1748.41,230.512 1748.97,228.7 1749.54,226.976 1750.11,226.283 1750.68,226.578 1751.25,228.135 1751.82,229.455 1752.38,229.698 1752.95,230.988 1753.52,230.155 1754.09,231.264 1754.66,229.377 1755.23,228.809 1755.79,231.121 1756.36,226.172 1756.93,225.614 1757.5,224.88 1758.07,225.57 1758.64,226.753 1759.21,227.177 1759.77,225.376 1760.34,232.107 1760.91,231.322 1761.48,231.31 1762.05,232.192 1762.62,231.961 1763.18,229.995 1763.75,229.076 1764.32,229.159 1764.89,229.302 1765.46,230.391 1766.03,230.649 1766.59,226.808 1767.16,223.228 1767.73,223.6 1768.3,223.13 1768.87,224.749 1769.44,225.327 1770,227.987 1770.57,228.089 1771.14,227.327 1771.71,227.551 1772.28,228.949 1772.85,230.025 1773.41,229.03 1773.98,229.352 1774.55,232.424 1775.12,234.315 1775.69,235.284 1776.26,235.1 1776.82,235.751 1777.39,234.49 1777.96,233.421 1778.53,234.295 1779.1,235.254 1779.67,236.952 1780.23,236.625 1780.8,236.15 1781.37,235.847 1781.94,234.533 1782.51,234.307 1783.08,233.034 1783.64,232.893 1784.21,232.699 1784.78,231.449 1785.35,231.228 1785.92,229.228 1786.49,227.163 1787.05,227.332 1787.62,226.265 1788.19,227.812 1788.76,228.388 1789.33,229.563 1789.9,230.747 1790.46,230.951 1791.03,233.996 1791.6,235.955 1792.17,237.735 1792.74,237.322 1793.31,235.98 1793.87,233.771 1794.44,238.905 1795.01,237.479 1795.58,236.896 1796.15,236.461 1796.72,236.075 1797.28,233.72 1797.85,234.441 1798.42,234.064 1798.99,232.631 1799.56,231.26 1800.13,231.083 1800.69,230.958 1801.26,231.98 1801.83,234.029 1802.4,234.824 1802.97,234.404 1803.54,234.158 1804.1,233.748 1804.67,234.37 1805.24,235.087 1805.81,234.646 1806.38,235.228 1806.95,233.684 1807.51,234.407 1808.08,233.901 1808.65,232.466 1809.22,231.117 1809.79,230.796 1810.36,230.745 1810.92,229.667 1811.49,227.591 1812.06,227.67 1812.63,227.742 1813.2,227.944 1813.77,228.745 1814.33,226.698 1814.9,225.907 1815.47,226.04 1816.04,227.431 1816.61,228.482 1817.18,228.385 1817.74,229.197 1818.31,230.129 1818.88,229.92 1819.45,229.747 1820.02,229.866 1820.59,230.83 1821.15,231.81 1821.72,233.873 1822.29,231.565 1822.86,230.363 1823.43,231.477 1824,232.052 1824.56,232.525 1825.13,233.417 1825.7,232.992 1826.27,231.649 1826.84,231.506 1827.41,235.423 1827.97,232.837 1828.54,231.598 1829.11,231.353 1829.68,231.144 1830.25,230.904 1830.82,229.684 1831.39,228.658 1831.95,228.76 1832.52,227.758 1833.09,228.841 1833.66,225.982 1834.23,227.185 1834.8,225.146 1835.36,224.556 1835.93,224.721 1836.5,225.067 1837.07,225.371 1837.64,227.708 1838.21,227.71 1838.77,226.902 1839.34,227.21 1839.91,226.267 1840.48,226.549 1841.05,228.043 1841.62,230.315 1842.18,231.305 1842.75,232.354 1843.32,232.314 1843.89,232.101 1844.46,232.973 1845.03,231.632 1845.59,232.586 1846.16,232.5 1846.73,231.12 1847.3,232.682 1847.87,230.253 1848.44,229.214 1849,228.154 1849.57,227.025 1850.14,227.956 1850.71,226.639 1851.28,226.67 1851.85,229.041 1852.41,229.125 1852.98,228.121 1853.55,225.231 1854.12,225.632 1854.69,227.957 1855.26,229.093 1855.82,228.028 1856.39,229.106 1856.96,230.136 1857.53,231.079 1858.1,230.862 1858.67,230.696 1859.23,231.624 1859.8,231.286 1860.37,231.137 1860.94,229.134 1861.51,226.09 1862.08,225.354 1862.64,222.535 1863.21,224.781 1863.78,223.002 1864.35,225.557 1864.92,227.114 1865.49,228.665 1866.05,229.496 1866.62,229.438 1867.19,230.649 1867.76,231.601 1868.33,229.545 1868.9,229.691 1869.46,228.681 1870.03,225.436 1870.6,226.724 1871.17,225.758 1871.74,225.928 1872.31,226.436 1872.87,227.857 1873.44,229.11 1874.01,230.228 1874.58,226.074 1875.15,224.424 1875.72,222.819 1876.28,225.584 1876.85,224.932 1877.42,225.345 1877.99,223.681 1878.56,223.176 1879.13,222.834 1879.69,223.724 1880.26,227.625 1880.83,227.996 1881.4,228.162 1881.97,230.284 1882.54,229.354 1883.1,230.688 1883.67,231.886 1884.24,233.902 1884.81,233.95 1885.38,234.892 1885.95,233.615 1886.51,231.331 1887.08,231.393 1887.65,231.372 1888.22,229.256 1888.79,229.426 1889.36,230.512 1889.92,229.543 1890.49,230.845 1891.06,230.719 1891.63,230.621 1892.2,230.57 1892.77,231.396 1893.33,232.381 1893.9,232.078 1894.47,231.854 1895.04,232.528 1895.61,232.291 1896.18,232.316 1896.74,232.049 1897.31,230.839 1897.88,230.631 1898.45,229.789 1899.02,228.964 1899.59,227.943 1900.16,227.227 1900.72,229.611 1901.29,230.636 1901.86,230.9 1902.43,230.949 1903,229.892 1903.57,231.202 1904.13,231.197 1904.7,232.238 1905.27,231.094 1905.84,232.179 1906.41,231.93 1906.98,229.885 1907.54,229.911 1908.11,230.916 1908.68,229.708 1909.25,229.762 1909.82,230.699 1910.39,231.527 1910.95,232.394 1911.52,233.176 1912.09,233.945 1912.66,233.561 1913.23,233.265 1913.8,236.138 1914.36,235.702 1914.93,233.194 1915.5,230.737 1916.07,228.557 1916.64,228.848 1917.21,228.765 1917.77,232.019 1918.34,231.73 1918.91,230.557 1919.48,230.6 1920.05,232.715 1920.62,233.554 1921.18,233.155 1921.75,233.903 1922.32,231.44 1922.89,230.401 1923.46,230.54 1924.03,230.425 1924.59,231.428 1925.16,231.363 1925.73,233.474 1926.3,230.279 1926.87,231.157 1927.44,230.986 1928,229.752 1928.57,229.694 1929.14,229.684 1929.71,230.738 1930.28,229.55 1930.85,231.746 1931.41,231.527 1931.98,231.286 1932.55,228.051 1933.12,223.986 1933.69,226.43 1934.26,227.971 1934.82,227.908 1935.39,228.069 1935.96,227.129 1936.53,226.178 1937.1,229.617 1937.67,230.614 1938.23,232.563 1938.8,231.133 1939.37,230.892 1939.94,234.724 1940.51,234.27 1941.08,232.696 1941.64,232.48 1942.21,234.302 1942.78,233.743 1943.35,234.055 1943.92,234.742 1944.49,233.439 1945.05,233.156 1945.62,233.917 1946.19,233.942 1946.76,233.737 1947.33,232.406 1947.9,233.21 1948.46,231.805 1949.03,231.741 1949.6,230.821 1950.17,232.694 1950.74,231.606 1951.31,230.308 1951.87,230.063 1952.44,232.096 1953.01,230.683 1953.58,230.589 1954.15,231.451 1954.72,229.192 1955.28,229.084 1955.85,228.954 1956.42,230.114 1956.99,229.069 1957.56,228.97 1958.13,227.862 1958.69,232.028 1959.26,229.747 1959.83,230.867 1960.4,231.82 1960.97,232.483 1961.54,232.217 1962.1,232.797 1962.67,231.229 1963.24,231.01 1963.81,230.893 1964.38,227.634 1964.95,226.593 1965.51,225.754 1966.08,228.046 1966.65,229.059 1967.22,229.929 1967.79,230.03 1968.36,231.203 1968.92,229.999 1969.49,228.897 1970.06,226.697 1970.63,226.779 1971.2,229.04 1971.77,227.034 1972.34,225.033 1972.9,225.198 1973.47,228.76 1974.04,227.744 1974.61,227.788 1975.18,227.059 1975.75,227.225 1976.31,227.463 1976.88,226.802 1977.45,229.076 1978.02,227.885 1978.59,227.856 1979.16,228.994 1979.72,232.173 1980.29,231.942 1980.86,230.753 1981.43,232.636 1982,228.705 1982.57,230.059 1983.13,232.049 1983.7,231.811 1984.27,231.571 1984.84,229.322 1985.41,227.405 1985.98,225.279 1986.54,227.66 1987.11,225.765 1987.68,225.081 1988.25,225.362 1988.82,226.7 1989.39,227.999 1989.95,228.938 1990.52,231.11 1991.09,230.945 1991.66,229.64 1992.23,229.453 1992.8,231.523 1993.36,231.524 1993.93,229.135 1994.5,228.779 1995.07,231.97 1995.64,232.748 1996.21,231.162 1996.77,229.249 1997.34,230.197 1997.91,229.573 1998.48,230.37 1999.05,229.288 1999.62,229.512 2000.18,228.251 2000.75,228.232 2001.32,227.222 2001.89,226.245 2002.46,224.389 2003.03,225.806 2003.59,225.039 2004.16,226.253 2004.73,224.607 2005.3,226.02 2005.87,226.229 2006.44,224.533 2007,225.938 2007.57,225.121 2008.14,224.589 2008.71,225.014 2009.28,226.584 2009.85,224.86 2010.41,224.226 2010.98,222.727 2011.55,222.931 2012.12,226.923 2012.69,229.107 2013.26,230.292 2013.82,230.239 2014.39,231.224 2014.96,231.143 2015.53,231.087 2016.1,230.972 2016.67,231.153 2017.23,229.917 2017.8,230.797 2018.37,231.7 2018.94,228.401 2019.51,228.491 2020.08,231.371 2020.64,231.37 2021.21,230.31 2021.78,232.412 2022.35,230.388 2022.92,230.292 2023.49,231.372 2024.05,230.267 2024.62,230.543 2025.19,229.636 2025.76,229.807 2026.33,230.065 2026.9,229.937 2027.46,227.987 2028.03,228.176 2028.6,226.453 2029.17,226.786 2029.74,224.084 2030.31,223.62 2030.87,224.075 2031.44,227.788 2032.01,227.887 2032.58,228.194 2033.15,227.572 2033.72,226.9 2034.28,227.207 2034.85,228.471 2035.42,229.863 2035.99,230.001 2036.56,231.248 2037.13,233.226 2037.69,233.038 2038.26,232.843 2038.83,230.665 2039.4,228.435 2039.97,230.632 2040.54,230.567 2041.11,231.895 2041.67,231.73 2042.24,233.836 2042.81,234.84 2043.38,234.613 2043.95,236.356 2044.52,237.031 2045.08,237.577 2045.65,236.227 2046.22,235.83 2046.79,234.454 2047.36,234.175 2047.93,232.931 2048.49,231.751 2049.06,228.625 2049.63,228.799 2050.2,230.067 2050.77,230.88 2051.34,232.894 2051.9,233.492 2052.47,233.406 2053.04,233.188 2053.61,230.923 2054.18,227.58 2054.75,228.875 2055.31,228.926 2055.88,229.993 2056.45,230.067 2057.02,231.04 2057.59,231.051 2058.16,227.989 2058.72,231.134 2059.29,232.974 2059.86,229.716 2060.43,229.666 2061,230.593 2061.57,229.302 2062.13,230.177 2062.7,229.048 2063.27,227.037 2063.84,230.57 2064.41,231.486 2064.98,232.281 2065.54,232.019 2066.11,232.681 2066.68,232.594 2067.25,231.255 2067.82,231.091 2068.39,231.108 2068.95,230.975 2069.52,230.816 2070.09,230.608 2070.66,231.668 2071.23,230.355 2071.8,230.257 2072.36,229.984 2072.93,228.79 2073.5,229.873 2074.07,231.671 2074.64,231.591 2075.21,231.462 2075.77,230.242 2076.34,230.231 2076.91,229.264 2077.48,230.246 2078.05,230.164 2078.62,230.142 2079.18,232.182 2079.75,229.89 2080.32,227.671 2080.89,227.656 2081.46,229.89 2082.03,229.691 2082.59,229.752 2083.16,228.691 2083.73,229.641 2084.3,229.548 2084.87,229.48 2085.44,227.204 2086,230.393 2086.57,229.065 2087.14,228.084 2087.71,230.37 2088.28,228.463 2088.85,227.248 2089.41,226.35 2089.98,226.66 2090.55,224.735 2091.12,226.335 2091.69,224.764 2092.26,224.032 2092.82,225.427 2093.39,226.648 2093.96,226.726 2094.53,225.981 2095.1,226.229 2095.67,225.439 2096.23,227.717 2096.8,225.644 2097.37,227.186 2097.94,226.666 2098.51,228.997 2099.08,230.393 2099.64,229.259 2100.21,231.29 2100.78,230.099 2101.35,229.963 2101.92,231.144 2102.49,232.163 2103.05,230.959 2103.62,232.144 2104.19,232.138 2104.76,232.069 2105.33,232.085 2105.9,231.903 2106.46,232.717 2107.03,232.575 2107.6,233.5 2108.17,234.315 2108.74,234.897 2109.31,234.599 2109.87,233.214 2110.44,231.829 2111.01,230.725 2111.58,231.708 2112.15,232.486 2112.72,231.012 2113.29,227.81 2113.85,225.872 2114.42,226.207 2114.99,224.201 2115.56,223.583 2116.13,221.09 2116.7,222.629 2117.26,224.33 2117.83,224.894 2118.4,226.187 2118.97,226.515 2119.54,226.801 2120.11,228.997 2120.67,228.981 2121.24,228.142 2121.81,228.07 2122.38,228.206 2122.95,228.311 2123.52,227.292 2124.08,226.467 2124.65,227.789 2125.22,229.105 2125.79,225.139 2126.36,224.47 2126.93,224.962 2127.49,222.211 2128.06,222.933 2128.63,223.483 2129.2,225.109 2129.77,225.594 2130.34,225.178 2130.9,224.809 2131.47,223.653 2132.04,225.562 2132.61,225.219 2133.18,226.561 2133.75,228.079 2134.31,228.428 2134.88,226.662 2135.45,228.224 2136.02,227.52 2136.59,229.754 2137.16,229.065 2137.72,232.381 2138.29,232.42 2138.86,232.507 2139.43,233.552 2140,235.561 2140.57,236.386 2141.13,234.002 2141.7,233.859 2142.27,234.862 2142.84,234.839 2143.41,234.784 2143.98,232.499 2144.54,233.347 2145.11,233.312 2145.68,230.118 2146.25,232.262 2146.82,233.172 2147.39,233.104 2147.95,234.175 2148.52,235.233 2149.09,236.852 2149.66,233.413 2150.23,233.317 2150.8,233.46 2151.36,235.142 2151.93,236.917 2152.5,238.404 2153.07,238.74 2153.64,238.279 2154.21,237.787 2154.77,236.271 2155.34,235.757 2155.91,234.252 2156.48,232.735 2157.05,233.49 2157.62,233.169 2158.18,236.113 2158.75,235.616 2159.32,235.308 2159.89,233.795 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.022\n  with uncertainty of ± 0.0019471973257540512\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01262 ± (0.00261854, 0.00257681) (MC)\n  95% confidence interval: [-4.01781, -4.00743]) (MC)\n  linear error propagation: -4.01244 ± 0.00267286\n  |δ_y| = |0.00134527| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012624963823908, val_l = 0.005183642735512528, val_u = 0.005197054713258709)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip480\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip481\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip482\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1156.67 2211.02,1156.67 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1014.66 2211.02,1014.66 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,872.66 2211.02,872.66 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,730.658 2211.02,730.658 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,588.655 2211.02,588.655 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,446.653 2211.02,446.653 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,304.65 2211.02,304.65 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1156.67 365.751,1156.67 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1014.66 365.751,1014.66 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,872.66 365.751,872.66 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,730.658 365.751,730.658 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,588.655 365.751,588.655 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,446.653 365.751,446.653 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,304.65 365.751,304.65 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M298.909 1142.46 Q295.298 1142.46 293.469 1146.03 Q291.664 1149.57 291.664 1156.7 Q291.664 1163.81 293.469 1167.37 Q295.298 1170.91 298.909 1170.91 Q302.543 1170.91 304.349 1167.37 Q306.177 1163.81 306.177 1156.7 Q306.177 1149.57 304.349 1146.03 Q302.543 1142.46 298.909 1142.46 M298.909 1138.76 Q304.719 1138.76 307.775 1143.37 Q310.853 1147.95 310.853 1156.7 Q310.853 1165.43 307.775 1170.03 Q304.719 1174.62 298.909 1174.62 Q293.099 1174.62 290.02 1170.03 Q286.964 1165.43 286.964 1156.7 Q286.964 1147.95 290.02 1143.37 Q293.099 1138.76 298.909 1138.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M259.557 1028.01 L267.196 1028.01 L267.196 1001.64 L258.886 1003.31 L258.886 999.049 L267.15 997.383 L271.826 997.383 L271.826 1028.01 L279.465 1028.01 L279.465 1031.94 L259.557 1031.94 L259.557 1028.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 1000.46 Q295.298 1000.46 293.469 1004.03 Q291.664 1007.57 291.664 1014.7 Q291.664 1021.8 293.469 1025.37 Q295.298 1028.91 298.909 1028.91 Q302.543 1028.91 304.349 1025.37 Q306.177 1021.8 306.177 1014.7 Q306.177 1007.57 304.349 1004.03 Q302.543 1000.46 298.909 1000.46 M298.909 996.758 Q304.719 996.758 307.775 1001.36 Q310.853 1005.95 310.853 1014.7 Q310.853 1023.42 307.775 1028.03 Q304.719 1032.61 298.909 1032.61 Q293.099 1032.61 290.02 1028.03 Q286.964 1023.42 286.964 1014.7 Q286.964 1005.95 290.02 1001.36 Q293.099 996.758 298.909 996.758 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M262.775 886.005 L279.094 886.005 L279.094 889.94 L257.15 889.94 L257.15 886.005 Q259.812 883.25 264.395 878.621 Q269.002 873.968 270.182 872.625 Q272.428 870.102 273.307 868.366 Q274.21 866.607 274.21 864.917 Q274.21 862.163 272.266 860.426 Q270.344 858.69 267.242 858.69 Q265.043 858.69 262.59 859.454 Q260.159 860.218 257.381 861.769 L257.381 857.047 Q260.205 855.913 262.659 855.334 Q265.113 854.755 267.15 854.755 Q272.52 854.755 275.715 857.44 Q278.909 860.126 278.909 864.616 Q278.909 866.746 278.099 868.667 Q277.312 870.565 275.205 873.158 Q274.627 873.829 271.525 877.047 Q268.423 880.241 262.775 886.005 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 858.459 Q295.298 858.459 293.469 862.024 Q291.664 865.565 291.664 872.695 Q291.664 879.801 293.469 883.366 Q295.298 886.908 298.909 886.908 Q302.543 886.908 304.349 883.366 Q306.177 879.801 306.177 872.695 Q306.177 865.565 304.349 862.024 Q302.543 858.459 298.909 858.459 M298.909 854.755 Q304.719 854.755 307.775 859.362 Q310.853 863.945 310.853 872.695 Q310.853 881.422 307.775 886.028 Q304.719 890.612 298.909 890.612 Q293.099 890.612 290.02 886.028 Q286.964 881.422 286.964 872.695 Q286.964 863.945 290.02 859.362 Q293.099 854.755 298.909 854.755 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M272.914 729.304 Q276.27 730.021 278.145 732.29 Q280.043 734.558 280.043 737.891 Q280.043 743.007 276.525 745.808 Q273.006 748.609 266.525 748.609 Q264.349 748.609 262.034 748.169 Q259.742 747.753 257.289 746.896 L257.289 742.382 Q259.233 743.516 261.548 744.095 Q263.863 744.674 266.386 744.674 Q270.784 744.674 273.076 742.938 Q275.39 741.202 275.39 737.891 Q275.39 734.836 273.238 733.123 Q271.108 731.387 267.289 731.387 L263.261 731.387 L263.261 727.544 L267.474 727.544 Q270.923 727.544 272.752 726.179 Q274.58 724.79 274.58 722.197 Q274.58 719.535 272.682 718.123 Q270.807 716.688 267.289 716.688 Q265.367 716.688 263.168 717.105 Q260.969 717.521 258.33 718.401 L258.33 714.234 Q260.992 713.493 263.307 713.123 Q265.645 712.753 267.705 712.753 Q273.029 712.753 276.131 715.183 Q279.233 717.591 279.233 721.711 Q279.233 724.581 277.59 726.572 Q275.946 728.54 272.914 729.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 716.456 Q295.298 716.456 293.469 720.021 Q291.664 723.563 291.664 730.692 Q291.664 737.799 293.469 741.364 Q295.298 744.905 298.909 744.905 Q302.543 744.905 304.349 741.364 Q306.177 737.799 306.177 730.692 Q306.177 723.563 304.349 720.021 Q302.543 716.456 298.909 716.456 M298.909 712.753 Q304.719 712.753 307.775 717.359 Q310.853 721.942 310.853 730.692 Q310.853 739.419 307.775 744.026 Q304.719 748.609 298.909 748.609 Q293.099 748.609 290.02 744.026 Q286.964 739.419 286.964 730.692 Q286.964 721.942 290.02 717.359 Q293.099 712.753 298.909 712.753 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M271.594 575.449 L259.789 593.898 L271.594 593.898 L271.594 575.449 M270.367 571.375 L276.247 571.375 L276.247 593.898 L281.177 593.898 L281.177 597.787 L276.247 597.787 L276.247 605.935 L271.594 605.935 L271.594 597.787 L255.992 597.787 L255.992 593.273 L270.367 571.375 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 574.454 Q295.298 574.454 293.469 578.019 Q291.664 581.56 291.664 588.69 Q291.664 595.796 293.469 599.361 Q295.298 602.903 298.909 602.903 Q302.543 602.903 304.349 599.361 Q306.177 595.796 306.177 588.69 Q306.177 581.56 304.349 578.019 Q302.543 574.454 298.909 574.454 M298.909 570.75 Q304.719 570.75 307.775 575.357 Q310.853 579.94 310.853 588.69 Q310.853 597.417 307.775 602.023 Q304.719 606.607 298.909 606.607 Q293.099 606.607 290.02 602.023 Q286.964 597.417 286.964 588.69 Q286.964 579.94 290.02 575.357 Q293.099 570.75 298.909 570.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M258.793 429.373 L277.15 429.373 L277.15 433.308 L263.076 433.308 L263.076 441.78 Q264.094 441.433 265.113 441.271 Q266.131 441.086 267.15 441.086 Q272.937 441.086 276.316 444.257 Q279.696 447.428 279.696 452.845 Q279.696 458.423 276.224 461.525 Q272.752 464.604 266.432 464.604 Q264.256 464.604 261.988 464.234 Q259.742 463.863 257.335 463.123 L257.335 458.423 Q259.418 459.558 261.641 460.113 Q263.863 460.669 266.34 460.669 Q270.344 460.669 272.682 458.562 Q275.02 456.456 275.02 452.845 Q275.02 449.234 272.682 447.127 Q270.344 445.021 266.34 445.021 Q264.465 445.021 262.59 445.437 Q260.738 445.854 258.793 446.734 L258.793 429.373 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 432.451 Q295.298 432.451 293.469 436.016 Q291.664 439.558 291.664 446.687 Q291.664 453.794 293.469 457.359 Q295.298 460.9 298.909 460.9 Q302.543 460.9 304.349 457.359 Q306.177 453.794 306.177 446.687 Q306.177 439.558 304.349 436.016 Q302.543 432.451 298.909 432.451 M298.909 428.748 Q304.719 428.748 307.775 433.354 Q310.853 437.937 310.853 446.687 Q310.853 455.414 307.775 460.021 Q304.719 464.604 298.909 464.604 Q293.099 464.604 290.02 460.021 Q286.964 455.414 286.964 446.687 Q286.964 437.937 290.02 433.354 Q293.099 428.748 298.909 428.748 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M269.326 302.787 Q266.178 302.787 264.326 304.94 Q262.497 307.092 262.497 310.842 Q262.497 314.569 264.326 316.745 Q266.178 318.898 269.326 318.898 Q272.474 318.898 274.303 316.745 Q276.154 314.569 276.154 310.842 Q276.154 307.092 274.303 304.94 Q272.474 302.787 269.326 302.787 M278.608 288.134 L278.608 292.393 Q276.849 291.56 275.043 291.12 Q273.261 290.68 271.502 290.68 Q266.872 290.68 264.418 293.805 Q261.988 296.93 261.641 303.25 Q263.006 301.236 265.066 300.171 Q267.127 299.083 269.603 299.083 Q274.812 299.083 277.821 302.254 Q280.853 305.403 280.853 310.842 Q280.853 316.166 277.705 319.384 Q274.557 322.602 269.326 322.602 Q263.33 322.602 260.159 318.018 Q256.988 313.412 256.988 304.685 Q256.988 296.491 260.877 291.629 Q264.766 286.745 271.316 286.745 Q273.076 286.745 274.858 287.092 Q276.664 287.44 278.608 288.134 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 290.449 Q295.298 290.449 293.469 294.014 Q291.664 297.555 291.664 304.685 Q291.664 311.791 293.469 315.356 Q295.298 318.898 298.909 318.898 Q302.543 318.898 304.349 315.356 Q306.177 311.791 306.177 304.685 Q306.177 297.555 304.349 294.014 Q302.543 290.449 298.909 290.449 M298.909 286.745 Q304.719 286.745 307.775 291.352 Q310.853 295.935 310.853 304.685 Q310.853 313.412 307.775 318.018 Q304.719 322.602 298.909 322.602 Q293.099 322.602 290.02 318.018 Q286.964 313.412 286.964 304.685 Q286.964 295.935 290.02 291.352 Q293.099 286.745 298.909 286.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip482)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1052.03 400.199,955.909 400.786,867.712 401.372,786.908 401.958,713.006 402.545,645.551 403.131,584.12 403.718,528.321 404.304,477.789 404.891,432.182 405.477,391.182 406.063,354.492 406.65,321.833 407.236,292.941 407.823,267.572 408.409,307.585 408.995,286.15 409.582,267.698 410.168,252.028 410.755,238.953 411.341,228.298 411.927,219.895 412.514,252.016 413.1,246.623 413.687,243.072 414.273,272.015 414.86,353.669 415.446,351.665 416.032,351.532 416.619,351.905 417.205,374.971 417.792,397.176 418.378,417.983 418.964,437.352 419.551,441.069 420.137,445.715 420.724,478.507 421.31,484.592 421.896,515.695 422.483,523.444 423.069,531.32 423.656,539.807 424.242,548.277 424.829,557.182 425.415,566.778 426.001,584.928 426.588,593.751 427.174,610.444 427.761,619.891 428.347,628.912 428.933,645.667 429.52,668.005 430.106,676.786 430.693,703.239 431.279,711.051 431.865,719.224 432.452,737.611 433.038,745.421 433.625,754.436 434.211,767.31 434.798,780.198 435.384,792.216 435.97,804.181 436.557,820.6 437.143,836.635 437.73,852.376 438.316,864.065 438.902,875.414 439.489,886.584 440.075,906.612 440.662,916.469 441.248,922.841 441.835,935.119 442.421,941.492 443.007,956.052 443.594,961.71 444.18,967.649 444.767,975.695 445.353,984.071 445.939,999.435 446.526,1006.73 447.112,1014.08 447.699,1025.71 448.285,1034.45 448.871,1042.89 449.458,1047.02 450.044,1053.04 450.631,1058.71 451.217,1068.69 451.804,1074.31 452.39,1084 452.976,1087.08 453.563,1092.1 454.149,1102.72 454.736,1109.15 455.322,1113.33 455.908,1113.75 456.495,1117.97 457.081,1123.71 457.668,1127.78 458.254,1131.72 458.84,1135.64 459.427,1142.88 460.013,1146.45 460.6,1151.85 461.186,1155.18 461.773,1158.1 462.359,1161.17 462.945,1165.56 463.532,1169.87 464.118,1172.79 464.705,1178.47 465.291,1182.35 465.877,1186.28 466.464,1190.24 467.05,1192.44 467.637,1194.5 468.223,1190.57 468.809,1189.73 469.396,1192.22 469.982,1194.8 470.569,1195.73 471.155,1199.43 471.742,1201.75 472.328,1202.73 472.914,1203.61 473.501,1207.06 474.087,1210.44 474.674,1211.96 475.26,1209.49 475.846,1211.67 476.433,1212.12 477.019,1213.99 477.606,1214.51 478.192,1216.07 478.778,1219.38 479.365,1218.09 479.951,1221.1 480.538,1226.79 481.124,1230.41 481.711,1231.6 482.297,1233.93 482.883,1232.26 483.47,1231.7 484.056,1231.25 484.643,1232.38 485.229,1233.32 485.815,1233.14 486.402,1232.92 486.988,1230.96 487.575,1229.28 488.161,1230.42 488.748,1232.96 489.334,1233.99 489.92,1236.16 490.507,1238.26 491.093,1240.21 491.68,1241.13 492.266,1241.84 492.852,1243.5 493.439,1241.86 494.025,1242.35 494.612,1242.96 495.198,1242.51 495.784,1243.25 496.371,1242.78 496.957,1243.66 497.544,1241.71 498.13,1242.4 498.717,1241.89 499.303,1241.53 499.889,1239.82 500.476,1240.78 501.062,1241.4 501.649,1240.99 502.235,1244.22 502.821,1243.52 503.408,1242.84 503.994,1244.7 504.581,1244.22 505.167,1242.41 505.753,1244.35 506.34,1243.78 506.926,1243.32 507.513,1242.92 508.099,1241.36 508.686,1241.26 509.272,1238.5 509.858,1239.57 510.445,1239.15 511.031,1243.7 511.618,1243.26 512.204,1240.61 512.79,1240.31 513.377,1241.4 513.963,1239.85 514.55,1241.84 515.136,1242.74 515.722,1243.71 516.309,1244.3 516.895,1243.82 517.482,1244.85 518.068,1244.08 518.655,1244.75 519.241,1245.35 519.827,1243.56 520.414,1244.13 521,1246.1 521.587,1245.51 522.173,1244.06 522.759,1246.8 523.346,1248.57 523.932,1250.31 524.519,1250.53 525.105,1248.17 525.691,1244.92 526.278,1243.39 526.864,1242.74 527.451,1243.29 528.037,1240.67 528.624,1241.3 529.21,1240.87 529.796,1245.24 530.383,1245.8 530.969,1244.97 531.556,1245.55 532.142,1244.74 532.728,1246.6 533.315,1246.91 533.901,1245.93 534.488,1246.26 535.074,1245.5 535.661,1243.63 536.247,1243.01 536.833,1242.59 537.42,1242.27 538.006,1240.32 538.593,1241.09 539.179,1241.59 539.765,1241.24 540.352,1242.13 540.938,1242.7 541.525,1242.3 542.111,1241.91 542.697,1241.23 543.284,1241.85 543.87,1244.77 544.457,1244.96 545.043,1246.55 545.63,1245.46 546.216,1243.43 546.802,1246.37 547.389,1244.34 547.975,1243.63 548.562,1245.26 549.148,1246.67 549.734,1247 550.321,1246.11 550.907,1246.44 551.494,1246.69 552.08,1245.84 552.666,1244.93 553.253,1244.3 553.839,1243.68 554.426,1242.76 555.012,1244.25 555.599,1243.53 556.185,1240.34 556.771,1239.76 557.358,1238.16 557.944,1238.72 558.531,1238.27 559.117,1241.45 559.703,1240.68 560.29,1241.26 560.876,1240.95 561.463,1241.62 562.049,1240.76 562.635,1242.41 563.222,1243.62 563.808,1241.84 564.395,1240.09 564.981,1239.64 565.568,1237.75 566.154,1238.29 566.74,1240 567.327,1239.2 567.913,1239.62 568.5,1239.03 569.086,1238.35 569.672,1238.94 570.259,1236.98 570.845,1236.26 571.432,1236.94 572.018,1236.46 572.605,1236.08 573.191,1236.84 573.777,1238.79 574.364,1238.03 574.95,1239.85 575.537,1239.1 576.123,1237.33 576.709,1235.72 577.296,1235.06 577.882,1233.49 578.469,1231.92 579.055,1233.82 579.641,1233.35 580.228,1233.02 580.814,1236.06 581.401,1235.7 581.987,1232.86 582.574,1231.42 583.16,1234.65 583.746,1234.35 584.333,1235.08 584.919,1235.79 585.506,1236.42 586.092,1239.35 586.678,1240.88 587.265,1235.58 587.851,1236.01 588.438,1235.58 589.024,1236.28 589.61,1235.67 590.197,1237.37 590.783,1236.84 591.37,1235.02 591.956,1234.49 592.543,1231.71 593.129,1228.82 593.715,1228.71 594.302,1231.98 594.888,1229.16 595.475,1227.81 596.061,1228.82 596.647,1227.37 597.234,1228.25 597.82,1225.59 598.407,1226.59 598.993,1226.84 599.579,1227.7 600.166,1228.59 600.752,1227.18 601.339,1225.72 601.925,1224.5 602.512,1224.38 603.098,1225.62 603.684,1226.65 604.271,1227.47 604.857,1227.52 605.444,1226.18 606.03,1225.77 606.616,1222 607.203,1224.61 607.789,1225.78 608.376,1227.08 608.962,1229.19 609.548,1228.9 610.135,1230.99 610.721,1231.74 611.308,1232.43 611.894,1232.06 612.481,1231.93 613.067,1231.61 613.653,1228.54 614.24,1230.78 614.826,1228.41 615.413,1232.69 615.999,1233.56 616.585,1234.03 617.172,1233.43 617.758,1232.88 618.345,1232.28 618.931,1232.01 619.518,1231.71 620.104,1232.43 620.69,1229.67 621.277,1229.5 621.863,1231.68 622.45,1231.6 623.036,1231.14 623.622,1230.5 624.209,1232.37 624.795,1233.1 625.382,1231.44 625.968,1234.37 626.554,1233.72 627.141,1230.82 627.727,1232.74 628.314,1233.51 628.9,1233.91 629.487,1235.5 630.073,1233.51 630.659,1231.85 631.246,1226.61 631.832,1227.47 632.419,1223.84 633.005,1224.97 633.591,1225.84 634.178,1224.34 634.764,1222.84 635.351,1221.59 635.937,1222.84 636.523,1221.78 637.11,1220.7 637.696,1219.73 638.283,1221.02 638.869,1222.56 639.456,1222.45 640.042,1221.36 640.628,1221.4 641.215,1222.78 641.801,1222.82 642.388,1222.65 642.974,1221.46 643.56,1220.28 644.147,1220.6 644.733,1219.44 645.32,1219.48 645.906,1216.2 646.492,1215.24 647.079,1220.29 647.665,1223.99 648.252,1222.78 648.838,1223.83 649.425,1222.65 650.011,1222.46 650.597,1224.65 651.184,1224.43 651.77,1223.13 652.357,1222.99 652.943,1223.03 653.529,1223.09 654.116,1223.03 654.702,1223.95 655.289,1224.9 655.875,1223.54 656.462,1223.63 657.048,1224.6 657.634,1226.67 658.221,1228.47 658.807,1229.32 659.394,1225.18 659.98,1222.72 660.566,1224.6 661.153,1225.59 661.739,1225.4 662.326,1225.31 662.912,1226.13 663.498,1223.4 664.085,1223.12 664.671,1224.21 665.258,1225.31 665.844,1224.05 666.431,1225.17 667.017,1224.82 667.603,1225.84 668.19,1225.35 668.776,1224.99 669.363,1225.79 669.949,1225.58 670.535,1224.2 671.122,1224.07 671.708,1226.16 672.295,1225.62 672.881,1221.87 673.467,1220.35 674.054,1219.27 674.64,1220.61 675.227,1222.74 675.813,1221.39 676.4,1221.26 676.986,1220.18 677.572,1219.1 678.159,1220.34 678.745,1222.55 679.332,1218.99 679.918,1216.71 680.504,1217.03 681.091,1219.69 681.677,1217.5 682.264,1216.42 682.85,1216.61 683.436,1215.76 684.023,1217.32 684.609,1218.76 685.196,1218.81 685.782,1221.42 686.369,1220.03 686.955,1221.16 687.541,1223.35 688.128,1221.85 688.714,1221.62 689.301,1222.49 689.887,1222.53 690.473,1220.15 691.06,1220.27 691.646,1219.14 692.233,1220.16 692.819,1221.33 693.405,1221.51 693.992,1221.46 694.578,1221.4 695.165,1218.97 695.751,1221.19 696.338,1219.91 696.924,1218.67 697.51,1216.45 698.097,1216.61 698.683,1215.4 699.27,1214.56 699.856,1215.01 700.442,1217.47 701.029,1215.29 701.615,1214.52 702.202,1214.75 702.788,1214.84 703.375,1215.1 703.961,1216.36 704.547,1217.68 705.134,1218.61 705.72,1218.54 706.307,1217.09 706.893,1218.19 707.479,1219.19 708.066,1220.33 708.652,1220.29 709.239,1220.08 709.825,1221.09 710.411,1223.38 710.998,1223.05 711.584,1223.7 712.171,1224.65 712.757,1224.27 713.344,1222.73 713.93,1222.22 714.516,1221.73 715.103,1221.38 715.689,1221.16 716.276,1222.26 716.862,1223.51 717.448,1223.11 718.035,1220.86 718.621,1219.75 719.208,1221.88 719.794,1220.54 720.38,1221.71 720.967,1221.41 721.553,1222.41 722.14,1221.04 722.726,1223.19 723.313,1226.3 723.899,1228.13 724.485,1226.41 725.072,1223.73 725.658,1223.47 726.245,1222.08 726.831,1223.05 727.417,1223.92 728.004,1221.33 728.59,1218.99 729.177,1217.82 729.763,1217.98 730.349,1217.95 730.936,1217.97 731.522,1216.99 732.109,1218.14 732.695,1218.15 733.282,1219.26 733.868,1221.15 734.454,1221.12 735.041,1222.22 735.627,1221.93 736.214,1220.72 736.8,1218.38 737.386,1217.08 737.973,1216.07 738.559,1217.37 739.146,1216.12 739.732,1215.04 740.318,1212.76 740.905,1211.81 741.491,1212.23 742.078,1212.66 742.664,1214.03 743.251,1216.55 743.837,1216.59 744.423,1216.59 745.01,1215.71 745.596,1215.67 746.183,1216.93 746.769,1216.8 747.355,1216.73 747.942,1217.9 748.528,1220.15 749.115,1219.93 749.701,1219.81 750.288,1220.78 750.874,1217.31 751.46,1218.6 752.047,1220.78 752.633,1222.88 753.22,1222.59 753.806,1221.1 754.392,1223.09 754.979,1222.72 755.565,1222.22 756.152,1220.72 756.738,1220.59 757.324,1221.72 757.911,1220.19 758.497,1219.01 759.084,1218.94 759.67,1216.62 760.257,1216.6 760.843,1219.25 761.429,1219.21 762.016,1220.4 762.602,1217.76 763.189,1219.8 763.775,1219.62 764.361,1219.52 764.948,1216.67 765.534,1216.54 766.121,1216.71 766.707,1216.75 767.293,1216.73 767.88,1217.89 768.466,1214.53 769.053,1215.77 769.639,1217.02 770.226,1219.41 770.812,1218.07 771.398,1216.96 771.985,1214.58 772.571,1212.69 773.158,1215.15 773.744,1215.34 774.33,1216.56 774.917,1215.6 775.503,1215.8 776.09,1215.85 776.676,1216.83 777.262,1216.49 777.849,1216.4 778.435,1216.19 779.022,1215.89 779.608,1215.74 780.195,1214.84 780.781,1218.58 781.367,1218.63 781.954,1218.47 782.54,1218.27 783.127,1221.52 783.713,1222.34 784.299,1223.37 784.886,1222 785.472,1223.14 786.059,1222.79 786.645,1222.5 787.232,1222.15 787.818,1221.99 788.404,1222.83 788.991,1220.19 789.577,1217.59 790.164,1218.65 790.75,1222.23 791.336,1220.68 791.923,1221.81 792.509,1223.87 793.096,1223.42 793.682,1221.76 794.268,1220.4 794.855,1217.85 795.441,1217.76 796.028,1216.76 796.614,1216.81 797.201,1215.81 797.787,1216.07 798.373,1214.81 798.96,1214.95 799.546,1217.18 800.133,1219.55 800.719,1218.5 801.305,1219.46 801.892,1220.59 802.478,1217.97 803.065,1216.69 803.651,1215.45 804.237,1214.1 804.824,1215.38 805.41,1217.73 805.997,1218.89 806.583,1219.74 807.17,1218.31 807.756,1216.85 808.342,1215.7 808.929,1215.73 809.515,1214.62 810.102,1216.06 810.688,1216.42 811.274,1216.42 811.861,1217.77 812.447,1218.71 813.034,1217.37 813.62,1217.16 814.206,1214.59 814.793,1211.27 815.379,1211.62 815.966,1213.23 816.552,1215.37 817.139,1214.3 817.725,1214.31 818.311,1211.01 818.898,1211.31 819.484,1210.44 820.071,1211.89 820.657,1213.16 821.243,1214.39 821.83,1211.95 822.416,1209.99 823.003,1210.26 823.589,1210.53 824.175,1210.49 824.762,1210.98 825.348,1212.39 825.935,1211.24 826.521,1211.67 827.108,1210.73 827.694,1212.03 828.28,1214.59 828.867,1214.82 829.453,1214.94 830.04,1213.65 830.626,1211.59 831.212,1210.6 831.799,1207.44 832.385,1208.22 832.972,1206.18 833.558,1207.84 834.145,1209.48 834.731,1209.64 835.317,1209.7 835.904,1212.34 836.49,1212.47 837.077,1210.39 837.663,1211.87 838.249,1212.07 838.836,1211 839.422,1214.61 840.009,1218.23 840.595,1216.87 841.181,1211.08 841.768,1211.18 842.354,1212.7 842.941,1212.92 843.527,1215.33 844.114,1215.21 844.7,1213.86 845.286,1214.15 845.873,1213.19 846.459,1215.78 847.046,1219.28 847.632,1219.05 848.218,1219.14 848.805,1220.28 849.391,1222.39 849.978,1222.15 850.564,1219.5 851.15,1222.78 851.737,1225.93 852.323,1226.55 852.91,1224.93 853.496,1224.35 854.083,1222.77 854.669,1223.74 855.255,1224.49 855.842,1224.12 856.428,1224.78 857.015,1224.36 857.601,1222.84 858.187,1220.15 858.774,1218.72 859.36,1220.87 859.947,1219.15 860.533,1218.96 861.119,1216.33 861.706,1220.87 862.292,1221.74 862.879,1221.26 863.465,1219.87 864.052,1217.32 864.638,1214.1 865.224,1215.38 865.811,1216.77 866.397,1215.44 866.984,1215.5 867.57,1215.66 868.156,1215.43 868.743,1215.48 869.329,1215.42 869.916,1215.4 870.502,1212.91 871.089,1213.04 871.675,1214.18 872.261,1213.02 872.848,1212.29 873.434,1213.57 874.021,1211.23 874.607,1208.91 875.193,1207.96 875.78,1208.35 876.366,1209.98 876.953,1210.23 877.539,1210.61 878.125,1213.15 878.712,1212.12 879.298,1213.35 879.885,1214.6 880.471,1215.86 881.058,1216.84 881.644,1216.71 882.23,1219.79 882.817,1220.53 883.403,1221.33 883.99,1221.25 884.576,1221.03 885.162,1225.05 885.749,1223.63 886.335,1223.25 886.922,1221.66 887.508,1219.07 888.094,1218.89 888.681,1218.61 889.267,1217.14 889.854,1219.21 890.44,1218.83 891.027,1219.91 891.613,1216.07 892.199,1218.27 892.786,1216.96 893.372,1216.89 893.959,1216.67 894.545,1214.16 895.131,1214.01 895.718,1213.86 896.304,1212.95 896.891,1211.8 897.477,1211.93 898.063,1209.95 898.65,1211.3 899.236,1209.07 899.823,1204.95 900.409,1204.44 900.996,1203.75 901.582,1204.11 902.168,1205.72 902.755,1204.81 903.341,1206.4 903.928,1208.12 904.514,1212.14 905.1,1212.31 905.687,1213.75 906.273,1213.52 906.86,1212.47 907.446,1213.62 908.032,1213.45 908.619,1212.22 909.205,1213.64 909.792,1214.9 910.378,1213.75 910.965,1214.98 911.551,1212.72 912.137,1214.15 912.724,1214.17 913.31,1215.32 913.897,1215.2 914.483,1215.07 915.069,1215.05 915.656,1214.01 916.242,1212.86 916.829,1215.11 917.415,1215.32 918.002,1216.57 918.588,1217.57 919.174,1217.71 919.761,1215.34 920.347,1214.21 920.934,1214.4 921.52,1215.43 922.106,1219.02 922.693,1218.63 923.279,1220.85 923.866,1219.61 924.452,1220.29 925.038,1223.36 925.625,1222.83 926.211,1222.26 926.798,1223.04 927.384,1221.36 927.971,1220.98 928.557,1219.43 929.143,1219.11 929.73,1220.15 930.316,1221.96 930.903,1223.82 931.489,1222.16 932.075,1222.69 932.662,1224.72 933.248,1224.33 933.835,1223.57 934.421,1220.81 935.007,1220.46 935.594,1220.16 936.18,1222.01 936.767,1221.48 937.353,1221.22 937.94,1220.81 938.526,1220.51 939.112,1220.36 939.699,1219.97 940.285,1218.36 940.872,1215.76 941.458,1215.71 942.044,1214.4 942.631,1213.2 943.217,1212.21 943.804,1211.54 944.39,1211.89 944.976,1214.4 945.563,1214.66 946.149,1218.21 946.736,1216.9 947.322,1216.9 947.909,1216.01 948.495,1214.72 949.081,1213.56 949.668,1213.81 950.254,1214.02 950.841,1212.59 951.427,1210.15 952.013,1211.5 952.6,1214.05 953.186,1215.29 953.773,1215.23 954.359,1215.03 954.945,1211.46 955.532,1211.76 956.118,1211.86 956.705,1213.07 957.291,1213.2 957.878,1214.41 958.464,1216.76 959.05,1213.3 959.637,1212.45 960.223,1212.74 960.81,1211.84 961.396,1208.53 961.982,1207.69 962.569,1207.91 963.155,1208.32 963.742,1203.82 964.328,1204.7 964.915,1207.53 965.501,1208 966.087,1208.4 966.674,1208.61 967.26,1208.86 967.847,1209.24 968.433,1211.71 969.019,1212 969.606,1214.43 970.192,1213.42 970.779,1214.86 971.365,1212.38 971.951,1212.43 972.538,1212.46 973.124,1213.58 973.711,1211.1 974.297,1210.23 974.884,1210.37 975.47,1208.22 976.056,1206.44 976.643,1208.02 977.229,1209.47 977.816,1210.8 978.402,1209.68 978.988,1208.85 979.575,1210.43 980.161,1209.46 980.748,1211.24 981.334,1208.98 981.92,1211.65 982.507,1214.38 983.093,1213.05 983.68,1213.17 984.266,1214.17 984.853,1212.67 985.439,1212.99 986.025,1213.18 986.612,1211.08 987.198,1211.25 987.785,1213.66 988.371,1217.19 988.957,1215.97 989.544,1214.62 990.13,1216.87 990.717,1217.86 991.303,1217.82 991.889,1218.88 992.476,1217.49 993.062,1217.17 993.649,1217.13 994.235,1218.27 994.822,1218.11 995.408,1215.92 995.994,1217.99 996.581,1216.49 997.167,1216.47 997.754,1215.29 998.34,1213.81 998.926,1217.03 999.513,1216.82 1000.1,1216.68 1000.69,1216.7 1001.27,1217.43 1001.86,1216.12 1002.44,1216.2 1003.03,1217.21 1003.62,1219.48 1004.2,1219.32 1004.79,1218.99 1005.38,1218.83 1005.96,1217.35 1006.55,1215.92 1007.14,1214.75 1007.72,1216.15 1008.31,1214.56 1008.9,1214.61 1009.48,1214.56 1010.07,1216.79 1010.65,1216.39 1011.24,1217.55 1011.83,1217.38 1012.41,1217.33 1013,1217.28 1013.59,1218.09 1014.17,1218.24 1014.76,1218.12 1015.35,1214.52 1015.93,1213.54 1016.52,1213.38 1017.11,1214.57 1017.69,1214.36 1018.28,1214.31 1018.86,1212.16 1019.45,1212.36 1020.04,1211.23 1020.62,1211.45 1021.21,1211.95 1021.8,1213.32 1022.38,1213.23 1022.97,1214.5 1023.56,1216.56 1024.14,1219.61 1024.73,1216.99 1025.32,1216.96 1025.9,1217.84 1026.49,1216.48 1027.07,1217.5 1027.66,1214.99 1028.25,1217.3 1028.83,1215.89 1029.42,1219.29 1030.01,1218.12 1030.59,1215.58 1031.18,1216.52 1031.77,1217.61 1032.35,1222.17 1032.94,1220.71 1033.52,1220.5 1034.11,1220.12 1034.7,1218.55 1035.28,1216.75 1035.87,1215.42 1036.46,1214.03 1037.04,1211.62 1037.63,1209.57 1038.22,1210.93 1038.8,1211.28 1039.39,1211.3 1039.98,1213.73 1040.56,1212.64 1041.15,1212.8 1041.73,1213.91 1042.32,1217.34 1042.91,1217.3 1043.49,1218.48 1044.08,1220.19 1044.67,1221.03 1045.25,1223.13 1045.84,1222.6 1046.43,1218.91 1047.01,1222.19 1047.6,1222.86 1048.19,1220.19 1048.77,1218.66 1049.36,1217.24 1049.94,1216.86 1050.53,1215.71 1051.12,1215.56 1051.7,1214.6 1052.29,1214.48 1052.88,1215.41 1053.46,1216.57 1054.05,1216.51 1054.64,1217.82 1055.22,1215.29 1055.81,1216.13 1056.39,1215.04 1056.98,1215.12 1057.57,1214.86 1058.15,1217.05 1058.74,1216.89 1059.33,1220.45 1059.91,1221.24 1060.5,1220.92 1061.09,1221.73 1061.67,1221.2 1062.26,1218.3 1062.85,1220.47 1063.43,1221.25 1064.02,1219.67 1064.6,1220.69 1065.19,1219 1065.78,1219.73 1066.36,1219.48 1066.95,1215.61 1067.54,1213.31 1068.12,1214.58 1068.71,1214.43 1069.3,1214.42 1069.88,1214.56 1070.47,1214.57 1071.06,1213.19 1071.64,1212.06 1072.23,1213.32 1072.81,1214.57 1073.4,1212.34 1073.99,1208.7 1074.57,1210.28 1075.16,1210.54 1075.75,1211.77 1076.33,1211.49 1076.92,1212.83 1077.51,1215.27 1078.09,1212.75 1078.68,1211.86 1079.26,1214.03 1079.85,1213.13 1080.44,1215.39 1081.02,1215.36 1081.61,1213.1 1082.2,1211.03 1082.78,1211.03 1083.37,1212.6 1083.96,1212.61 1084.54,1213.72 1085.13,1213.88 1085.72,1211.41 1086.3,1212.75 1086.89,1211.64 1087.47,1212.73 1088.06,1209.12 1088.65,1209.29 1089.23,1209.61 1089.82,1210.96 1090.41,1208.72 1090.99,1208.94 1091.58,1210.35 1092.17,1210.64 1092.75,1210.65 1093.34,1211.02 1093.93,1212.14 1094.51,1209.97 1095.1,1205.57 1095.68,1206.39 1096.27,1206.76 1096.86,1207.21 1097.44,1207.74 1098.03,1206.92 1098.62,1208.6 1099.2,1208.02 1099.79,1210.44 1100.38,1210.68 1100.96,1212.01 1101.55,1214.44 1102.14,1214.44 1102.72,1217.87 1103.31,1215.45 1103.89,1216.38 1104.48,1214.83 1105.07,1216.23 1105.65,1218.45 1106.24,1218.19 1106.83,1215.75 1107.41,1214.6 1108,1215.63 1108.59,1214.27 1109.17,1215.26 1109.76,1215.42 1110.34,1216.47 1110.93,1218.55 1111.52,1218.3 1112.1,1218.31 1112.69,1217.93 1113.28,1215.43 1113.86,1216.42 1114.45,1214.91 1115.04,1215.99 1115.62,1217.14 1116.21,1219.36 1116.8,1221.28 1117.38,1220.79 1117.97,1217.97 1118.55,1219 1119.14,1218.55 1119.73,1220.57 1120.31,1216.58 1120.9,1212.88 1121.49,1212.89 1122.07,1214.05 1122.66,1213.94 1123.25,1216.2 1123.83,1217.21 1124.42,1215.86 1125.01,1215.86 1125.59,1215.97 1126.18,1214.86 1126.76,1213.58 1127.35,1211.14 1127.94,1209.96 1128.52,1211.16 1129.11,1211.44 1129.7,1211.6 1130.28,1210.66 1130.87,1208.53 1131.46,1210.12 1132.04,1210.42 1132.63,1209.62 1133.21,1208.65 1133.8,1209.93 1134.39,1209.07 1134.97,1210.54 1135.56,1210.77 1136.15,1212.31 1136.73,1211.41 1137.32,1214.04 1137.91,1211.83 1138.49,1211.91 1139.08,1211.97 1139.67,1211.12 1140.25,1209.96 1140.84,1210.57 1141.42,1214.34 1142.01,1214.29 1142.6,1215.35 1143.18,1213.05 1143.77,1211.89 1144.36,1213.2 1144.94,1214.49 1145.53,1214.79 1146.12,1216.01 1146.7,1214.96 1147.29,1217.08 1147.88,1215.84 1148.46,1216.98 1149.05,1215.64 1149.63,1215.47 1150.22,1217.84 1150.81,1220.04 1151.39,1218.6 1151.98,1219.3 1152.57,1219.21 1153.15,1218.86 1153.74,1217.36 1154.33,1216 1154.91,1212.28 1155.5,1213.51 1156.09,1213.47 1156.67,1212.53 1157.26,1211.55 1157.84,1211.5 1158.43,1214.17 1159.02,1212.97 1159.6,1210.58 1160.19,1210.65 1160.78,1207.51 1161.36,1207.7 1161.95,1211.55 1162.54,1211.57 1163.12,1211.83 1163.71,1212.02 1164.29,1209.88 1164.88,1211.19 1165.47,1209.03 1166.05,1210.41 1166.64,1211.74 1167.23,1211.98 1167.81,1212.22 1168.4,1212.44 1168.99,1208.79 1169.57,1209.1 1170.16,1209.45 1170.75,1212.05 1171.33,1214.8 1171.92,1214.78 1172.5,1214.71 1173.09,1213.44 1173.68,1212.23 1174.26,1212.24 1174.85,1213.37 1175.44,1212.09 1176.02,1212.35 1176.61,1213.85 1177.2,1215.14 1177.78,1212.91 1178.37,1213.29 1178.96,1214.56 1179.54,1214.62 1180.13,1212.27 1180.71,1211.02 1181.3,1213.5 1181.89,1214.67 1182.47,1214.66 1183.06,1212.54 1183.65,1213.75 1184.23,1213.61 1184.82,1213.62 1185.41,1211.34 1185.99,1213.9 1186.58,1212.62 1187.16,1214.01 1187.75,1212.75 1188.34,1211.88 1188.92,1210.82 1189.51,1210.03 1190.1,1213.51 1190.68,1213.57 1191.27,1214.79 1191.86,1215.92 1192.44,1216.11 1193.03,1216.17 1193.62,1215.86 1194.2,1215.65 1194.79,1215.31 1195.37,1216.36 1195.96,1216.46 1196.55,1216.45 1197.13,1216.37 1197.72,1213.75 1198.31,1214.71 1198.89,1212.39 1199.48,1213.83 1200.07,1212.69 1200.65,1212.81 1201.24,1215.15 1201.83,1211.53 1202.41,1210.54 1203,1208.29 1203.58,1207.33 1204.17,1211.3 1204.76,1211.23 1205.34,1210.26 1205.93,1211.73 1206.52,1213.01 1207.1,1213.18 1207.69,1214.48 1208.28,1215.63 1208.86,1212.94 1209.45,1214.13 1210.03,1214.21 1210.62,1214.06 1211.21,1212.43 1211.79,1211.48 1212.38,1212.94 1212.97,1213.98 1213.55,1217.39 1214.14,1214.9 1214.73,1218.34 1215.31,1216.9 1215.9,1218.07 1216.49,1220.2 1217.07,1219.96 1217.66,1217.56 1218.24,1218.61 1218.83,1218.3 1219.42,1215.86 1220,1213.24 1220.59,1213.17 1221.18,1211.93 1221.76,1213.37 1222.35,1211.3 1222.94,1212.38 1223.52,1208.85 1224.11,1207.65 1224.7,1207.79 1225.28,1208.06 1225.87,1209.47 1226.45,1210.64 1227.04,1210.91 1227.63,1209.53 1228.21,1207.55 1228.8,1205.49 1229.39,1205.7 1229.97,1207.44 1230.56,1206.88 1231.15,1209.62 1231.73,1209.78 1232.32,1211.29 1232.91,1208.93 1233.49,1210.16 1234.08,1211.52 1234.66,1213.01 1235.25,1212.82 1235.84,1212.83 1236.42,1212.97 1237.01,1212.91 1237.6,1212.01 1238.18,1216.75 1238.77,1216.56 1239.36,1215.07 1239.94,1217.33 1240.53,1218.18 1241.11,1216.94 1241.7,1217.84 1242.29,1221.03 1242.87,1222.82 1243.46,1222.16 1244.05,1222.68 1244.63,1221.11 1245.22,1220.67 1245.81,1220.25 1246.39,1219.97 1246.98,1218.48 1247.57,1220.75 1248.15,1222.7 1248.74,1222.13 1249.32,1220.42 1249.91,1221.39 1250.5,1220.86 1251.08,1220.46 1251.67,1218.86 1252.26,1219.77 1252.84,1217.24 1253.43,1218.31 1254.02,1218.19 1254.6,1215.67 1255.19,1216.83 1255.78,1219.11 1256.36,1219.98 1256.95,1218.66 1257.53,1217.3 1258.12,1217.07 1258.71,1215.77 1259.29,1215.49 1259.88,1213.96 1260.47,1213.75 1261.05,1211.17 1261.64,1209.03 1262.23,1207.21 1262.81,1208.69 1263.4,1209 1263.98,1209.31 1264.57,1209.63 1265.16,1208.52 1265.74,1208.83 1266.33,1206.77 1266.92,1207.4 1267.5,1206.65 1268.09,1207.02 1268.68,1207.37 1269.26,1207.65 1269.85,1209.07 1270.44,1205.85 1271.02,1205.32 1271.61,1206.83 1272.19,1209.45 1272.78,1212.98 1273.37,1211.66 1273.95,1211.56 1274.54,1213 1275.13,1214.2 1275.71,1214.1 1276.3,1211.74 1276.89,1212.94 1277.47,1214 1278.06,1214.04 1278.65,1215.11 1279.23,1213.88 1279.82,1213.55 1280.4,1213.5 1280.99,1213.43 1281.58,1213.35 1282.16,1213.19 1282.75,1214.6 1283.34,1213.52 1283.92,1215.86 1284.51,1215.65 1285.1,1214.23 1285.68,1210.96 1286.27,1211.31 1286.86,1209 1287.44,1209.18 1288.03,1211.89 1288.61,1212.04 1289.2,1213.39 1289.79,1214.59 1290.37,1216.68 1290.96,1215.29 1291.55,1214.09 1292.13,1212.93 1292.72,1212.88 1293.31,1212.83 1293.89,1212.9 1294.48,1211.92 1295.06,1210.73 1295.65,1210.98 1296.24,1209.19 1296.82,1210.39 1297.41,1210.81 1298,1210.93 1298.58,1211.06 1299.17,1210.01 1299.76,1210.06 1300.34,1211.39 1300.93,1210.39 1301.52,1208.1 1302.1,1208.46 1302.69,1207.76 1303.27,1206.06 1303.86,1205.36 1304.45,1205.79 1305.03,1203.94 1305.62,1205.82 1306.21,1205.13 1306.79,1208.27 1307.38,1209.82 1307.97,1209.93 1308.55,1211.29 1309.14,1213.81 1309.73,1216.11 1310.31,1216.13 1310.9,1215.69 1311.48,1213.43 1312.07,1212.4 1312.66,1213.88 1313.24,1214.94 1313.83,1215.93 1314.42,1215.99 1315,1213.9 1315.59,1213.99 1316.18,1214 1316.76,1214 1317.35,1215.27 1317.93,1215.29 1318.52,1215.09 1319.11,1215.04 1319.69,1215 1320.28,1218.3 1320.87,1217.15 1321.45,1216.99 1322.04,1215.66 1322.63,1217.88 1323.21,1216.53 1323.8,1212.93 1324.39,1215.36 1324.97,1215.52 1325.56,1217.78 1326.14,1216.47 1326.73,1217.52 1327.32,1218.76 1327.9,1220.89 1328.49,1220.53 1329.08,1220.16 1329.66,1220.79 1330.25,1218.11 1330.84,1215.71 1331.42,1212.32 1332.01,1214.67 1332.6,1213.44 1333.18,1214.62 1333.77,1214.74 1334.35,1212.3 1334.94,1212.43 1335.53,1212.54 1336.11,1211.72 1336.7,1210.71 1337.29,1211.01 1337.87,1209.99 1338.46,1207.91 1339.05,1209.24 1339.63,1211.78 1340.22,1209.58 1340.8,1211.24 1341.39,1212.52 1341.98,1211.55 1342.56,1211.7 1343.15,1212.82 1343.74,1212.06 1344.32,1213.08 1344.91,1211.91 1345.5,1212.91 1346.08,1211.77 1346.67,1208.28 1347.26,1210.74 1347.84,1213.3 1348.43,1212.19 1349.01,1213.35 1349.6,1213.16 1350.19,1210.73 1350.77,1209.99 1351.36,1211.19 1351.95,1212.33 1352.53,1214.79 1353.12,1214.69 1353.71,1214.86 1354.29,1215.11 1354.88,1214.96 1355.47,1216.12 1356.05,1218.41 1356.64,1219.33 1357.22,1216.61 1357.81,1216.39 1358.4,1214.29 1358.98,1214.38 1359.57,1211.07 1360.16,1211.49 1360.74,1212.69 1361.33,1212.84 1361.92,1213.96 1362.5,1215.29 1363.09,1216.26 1363.68,1217.48 1364.26,1218.52 1364.85,1219.19 1365.43,1218.8 1366.02,1214.95 1366.61,1213.65 1367.19,1214.6 1367.78,1214.57 1368.37,1216.72 1368.95,1219.98 1369.54,1219.88 1370.13,1217.26 1370.71,1215.84 1371.3,1217.98 1371.88,1217.8 1372.47,1219.97 1373.06,1220.74 1373.64,1223.78 1374.23,1223.19 1374.82,1220.4 1375.4,1220.23 1375.99,1220.98 1376.58,1223 1377.16,1221.3 1377.75,1221.89 1378.34,1220.18 1378.92,1221 1379.51,1222.96 1380.09,1222.37 1380.68,1220.81 1381.27,1221.63 1381.85,1221.49 1382.44,1219.53 1383.03,1220.05 1383.61,1220.86 1384.2,1220.83 1384.79,1218.18 1385.37,1217.78 1385.96,1220.03 1386.55,1217.38 1387.13,1215.01 1387.72,1214.99 1388.3,1214.97 1388.89,1215.92 1389.48,1214.23 1390.06,1215.36 1390.65,1215.38 1391.24,1212.91 1391.82,1214.16 1392.41,1214.17 1393,1215.05 1393.58,1212.58 1394.17,1211.39 1394.75,1211.49 1395.34,1211.27 1395.93,1211.42 1396.51,1213.97 1397.1,1216.04 1397.69,1215.97 1398.27,1214.78 1398.86,1214.73 1399.45,1214.71 1400.03,1215.74 1400.62,1214.56 1401.21,1214.25 1401.79,1215.46 1402.38,1216.36 1402.96,1213.79 1403.55,1215.86 1404.14,1214.63 1404.72,1215.66 1405.31,1215.4 1405.9,1217.48 1406.48,1218.39 1407.07,1218.16 1407.66,1218.97 1408.24,1217.82 1408.83,1218.77 1409.42,1217.29 1410,1218.25 1410.59,1218.97 1411.17,1216.67 1411.76,1215.17 1412.35,1213 1412.93,1210.77 1413.52,1209.77 1414.11,1210.1 1414.69,1211.35 1415.28,1211.49 1415.87,1209.21 1416.45,1210.65 1417.04,1211.73 1417.63,1210.69 1418.21,1210.88 1418.8,1212.14 1419.38,1209.81 1419.97,1210.13 1420.56,1211.68 1421.14,1210.61 1421.73,1208.5 1422.32,1208.73 1422.9,1208.92 1423.49,1210.38 1424.08,1210.57 1424.66,1212.03 1425.25,1213.31 1425.83,1214.41 1426.42,1212.06 1427.01,1208.48 1427.59,1209.69 1428.18,1210.96 1428.77,1209.8 1429.35,1212.2 1429.94,1213.43 1430.53,1212.35 1431.11,1211.54 1431.7,1210.39 1432.29,1210.56 1432.87,1213.14 1433.46,1211.07 1434.04,1211.39 1434.63,1211.35 1435.22,1211.4 1435.8,1207.14 1436.39,1207.49 1436.98,1205.71 1437.56,1207.51 1438.15,1209 1438.74,1207.09 1439.32,1207.42 1439.91,1209 1440.5,1211.54 1441.08,1211.29 1441.67,1207.79 1442.25,1204.53 1442.84,1204.9 1443.43,1206.6 1444.01,1209.47 1444.6,1210.98 1445.19,1212.11 1445.77,1214.63 1446.36,1214.5 1446.95,1214.68 1447.53,1213.28 1448.12,1213.39 1448.7,1213.36 1449.29,1214.52 1449.88,1214.26 1450.46,1214.5 1451.05,1215.72 1451.64,1213.6 1452.22,1211.38 1452.81,1211.5 1453.4,1212.78 1453.98,1213.98 1454.57,1213.91 1455.16,1215.23 1455.74,1212.68 1456.33,1212.55 1456.91,1213.75 1457.5,1216.08 1458.09,1215.99 1458.67,1217.11 1459.26,1219.34 1459.85,1218.05 1460.43,1219 1461.02,1220.78 1461.61,1220.53 1462.19,1217.89 1462.78,1217.81 1463.37,1215.42 1463.95,1217.75 1464.54,1215.25 1465.12,1215.48 1465.71,1212.09 1466.3,1212.32 1466.88,1212.31 1467.47,1212.44 1468.06,1210.16 1468.64,1211.44 1469.23,1215.04 1469.82,1216.06 1470.4,1214.98 1470.99,1217.44 1471.57,1217.28 1472.16,1215.81 1472.75,1214.36 1473.33,1213.26 1473.92,1212.22 1474.51,1211.11 1475.09,1214.94 1475.68,1216 1476.27,1215.75 1476.85,1213.51 1477.44,1214.65 1478.03,1215.58 1478.61,1215.47 1479.2,1215.38 1479.78,1215.44 1480.37,1215.36 1480.96,1212.87 1481.54,1213.97 1482.13,1215.15 1482.72,1215.25 1483.3,1213.97 1483.89,1212.53 1484.48,1210.44 1485.06,1207.08 1485.65,1207.32 1486.24,1209.19 1486.82,1206.22 1487.41,1207.82 1487.99,1209.45 1488.58,1212.12 1489.17,1210.93 1489.75,1211.15 1490.34,1211.37 1490.93,1216 1491.51,1215.91 1492.1,1214.68 1492.69,1215.7 1493.27,1213.51 1493.86,1213.26 1494.45,1213.36 1495.03,1213.45 1495.62,1210.31 1496.2,1211.42 1496.79,1208.15 1497.38,1206.18 1497.96,1205.49 1498.55,1204.55 1499.14,1202.68 1499.72,1203.12 1500.31,1206 1500.9,1205.04 1501.48,1204.52 1502.07,1204.94 1502.65,1203.05 1503.24,1202.37 1503.83,1204.06 1504.41,1205.77 1505,1206.3 1505.59,1206.78 1506.17,1207.22 1506.76,1208.96 1507.35,1207.02 1507.93,1207.41 1508.52,1207.84 1509.11,1208.18 1509.69,1209.6 1510.28,1207.73 1510.86,1206.98 1511.45,1208.64 1512.04,1209.91 1512.62,1212.51 1513.21,1212.72 1513.8,1212.82 1514.38,1213.84 1514.97,1217.1 1515.56,1218.57 1516.14,1218.04 1516.73,1219.16 1517.32,1219.08 1517.9,1218.76 1518.49,1219.77 1519.07,1220.77 1519.66,1220.53 1520.25,1220.12 1520.83,1218.33 1521.42,1217.95 1522.01,1217.9 1522.59,1218.02 1523.18,1216.69 1523.77,1215.41 1524.35,1217.63 1524.94,1218.58 1525.52,1219.39 1526.11,1218.17 1526.7,1219.01 1527.28,1220.98 1527.87,1219.47 1528.46,1220.34 1529.04,1220.12 1529.63,1219.84 1530.22,1220.68 1530.8,1221.44 1531.39,1216.47 1531.98,1217.26 1532.56,1218.46 1533.15,1220.37 1533.73,1216.46 1534.32,1215.08 1534.91,1213.71 1535.49,1213.64 1536.08,1213.49 1536.67,1211.44 1537.25,1212.75 1537.84,1212.87 1538.43,1211.73 1539.01,1214.02 1539.6,1213.69 1540.19,1213.78 1540.77,1216.07 1541.36,1215.01 1541.94,1216.26 1542.53,1216.19 1543.12,1216.05 1543.7,1220.68 1544.29,1219.06 1544.88,1218.82 1545.46,1216.37 1546.05,1216.11 1546.64,1217.15 1547.22,1216.74 1547.81,1216.35 1548.4,1217.31 1548.98,1216.98 1549.57,1215.72 1550.15,1215.37 1550.74,1216.41 1551.33,1218.46 1551.91,1215.91 1552.5,1214.64 1553.09,1212.48 1553.67,1213.51 1554.26,1211.21 1554.85,1212.35 1555.43,1214.9 1556.02,1212.31 1556.6,1211.19 1557.19,1211.07 1557.78,1211.02 1558.36,1208.97 1558.95,1209.21 1559.54,1211.81 1560.12,1213 1560.71,1214.55 1561.3,1214.58 1561.88,1213.48 1562.47,1211.04 1563.06,1212.29 1563.64,1212.49 1564.23,1212.45 1564.81,1212.43 1565.4,1209.14 1565.99,1208.41 1566.57,1208.61 1567.16,1209.96 1567.75,1208.82 1568.33,1208.98 1568.92,1208.13 1569.51,1209.62 1570.09,1208.73 1570.68,1206.63 1571.27,1209.24 1571.85,1209.62 1572.44,1208.77 1573.02,1209.11 1573.61,1210.18 1574.2,1211.46 1574.78,1210.54 1575.37,1208.51 1575.96,1212.22 1576.54,1212.46 1577.13,1213.94 1577.72,1213.88 1578.3,1213.75 1578.89,1213.52 1579.47,1214.79 1580.06,1213.62 1580.65,1213.65 1581.23,1213.66 1581.82,1213.79 1582.41,1217.35 1582.99,1217.36 1583.58,1217.28 1584.17,1218.27 1584.75,1218.22 1585.34,1218.13 1585.93,1216.71 1586.51,1217.46 1587.1,1218.55 1587.68,1219.54 1588.27,1221.6 1588.86,1221.35 1589.44,1223.23 1590.03,1220.45 1590.62,1219.87 1591.2,1219.37 1591.79,1216.6 1592.38,1216.34 1592.96,1216.32 1593.55,1217.48 1594.14,1213.92 1594.72,1212.76 1595.31,1211.68 1595.89,1212.75 1596.48,1211.46 1597.07,1212.51 1597.65,1212.24 1598.24,1214.58 1598.83,1216.71 1599.41,1216.71 1600,1215.41 1600.59,1216.38 1601.17,1212.62 1601.76,1214.79 1602.34,1214.61 1602.93,1213.38 1603.52,1214.66 1604.1,1214.79 1604.69,1215.98 1605.28,1215.7 1605.86,1214.48 1606.45,1213.24 1607.04,1213.29 1607.62,1216.96 1608.21,1216.84 1608.8,1214.25 1609.38,1215.49 1609.97,1215.61 1610.55,1214.31 1611.14,1215.48 1611.73,1214.33 1612.31,1215.39 1612.9,1216.55 1613.49,1215.28 1614.07,1215.33 1614.66,1212.98 1615.25,1210.61 1615.83,1209.53 1616.42,1208.31 1617.01,1208.49 1617.59,1208 1618.18,1210.71 1618.76,1208.38 1619.35,1209.77 1619.94,1209.01 1620.52,1209.22 1621.11,1206.07 1621.7,1208.94 1622.28,1209.22 1622.87,1211.89 1623.46,1211.04 1624.04,1211.26 1624.63,1212.52 1625.22,1213.62 1625.8,1213.47 1626.39,1211.2 1626.97,1212.38 1627.56,1211.47 1628.15,1213.84 1628.73,1212.68 1629.32,1213.82 1629.91,1212.58 1630.49,1211.55 1631.08,1212.95 1631.67,1212.85 1632.25,1212.84 1632.84,1212.83 1633.42,1212.92 1634.01,1210.67 1634.6,1210.56 1635.18,1212.04 1635.77,1212.37 1636.36,1210.12 1636.94,1209.1 1637.53,1210.69 1638.12,1212.2 1638.7,1213.63 1639.29,1213.53 1639.88,1214.82 1640.46,1213.65 1641.05,1211 1641.63,1211.09 1642.22,1211.01 1642.81,1211.12 1643.39,1211.34 1643.98,1209.32 1644.57,1208.2 1645.15,1209.64 1645.74,1207.66 1646.33,1208.14 1646.91,1208.67 1647.5,1209.02 1648.09,1208.31 1648.67,1209.94 1649.26,1211.51 1649.84,1209.31 1650.43,1211.76 1651.02,1214.22 1651.6,1212.79 1652.19,1212.88 1652.78,1212.97 1653.36,1211.78 1653.95,1210.45 1654.54,1210.65 1655.12,1208.54 1655.71,1206.31 1656.29,1206.68 1656.88,1205.79 1657.47,1208.73 1658.05,1208.8 1658.64,1211.23 1659.23,1211.42 1659.81,1212.77 1660.4,1213.77 1660.99,1214.92 1661.57,1217.29 1662.16,1217 1662.75,1215.82 1663.33,1216.08 1663.92,1215.78 1664.5,1215.41 1665.09,1213.2 1665.68,1213.31 1666.26,1212.09 1666.85,1212.4 1667.44,1212.57 1668.02,1212.68 1668.61,1211.72 1669.2,1211.85 1669.78,1213.25 1670.37,1214.61 1670.96,1214.74 1671.54,1213.25 1672.13,1214.33 1672.71,1213.28 1673.3,1214.21 1673.89,1215.57 1674.47,1216.64 1675.06,1218.74 1675.65,1219.55 1676.23,1216.84 1676.82,1217.69 1677.41,1216.41 1677.99,1216.23 1678.58,1217.44 1679.17,1218.5 1679.75,1216 1680.34,1215.81 1680.92,1216.57 1681.51,1216.31 1682.1,1216.23 1682.68,1217.15 1683.27,1217.13 1683.86,1221.56 1684.44,1223.51 1685.03,1220.73 1685.62,1220.32 1686.2,1222.16 1686.79,1223.97 1687.37,1222.36 1687.96,1221.85 1688.55,1219.98 1689.13,1220.86 1689.72,1220.5 1690.31,1218.92 1690.89,1214.85 1691.48,1218.25 1692.07,1215.91 1692.65,1214.65 1693.24,1215.78 1693.83,1213.28 1694.41,1210.82 1695,1209.96 1695.58,1205.48 1696.17,1204.57 1696.76,1205 1697.34,1202.12 1697.93,1205.22 1698.52,1202.36 1699.1,1201.83 1699.69,1203.54 1700.28,1204.12 1700.86,1204.7 1701.45,1207.53 1702.04,1210.23 1702.62,1212.76 1703.21,1210.45 1703.79,1212.07 1704.38,1212.12 1704.97,1213.19 1705.55,1213.11 1706.14,1214.28 1706.73,1214.48 1707.31,1213.2 1707.9,1213.3 1708.49,1212.24 1709.07,1213.49 1709.66,1211.31 1710.24,1217.27 1710.83,1217 1711.42,1217.76 1712,1216.3 1712.59,1216.1 1713.18,1216.98 1713.76,1217.75 1714.35,1217.62 1714.94,1215.2 1715.52,1217.24 1716.11,1218.48 1716.7,1217.2 1717.28,1219.28 1717.87,1219.09 1718.45,1220.13 1719.04,1218.95 1719.63,1217.4 1720.21,1217.11 1720.8,1216.98 1721.39,1216.92 1721.97,1219.13 1722.56,1218.88 1723.15,1219.93 1723.73,1217.42 1724.32,1215.11 1724.91,1214.96 1725.49,1215.97 1726.08,1217.14 1726.66,1219.29 1727.25,1220.22 1727.84,1218.85 1728.42,1219.85 1729.01,1220.73 1729.6,1221.52 1730.18,1223.28 1730.77,1219.28 1731.36,1218.01 1731.94,1221.11 1732.53,1220.74 1733.11,1219.13 1733.7,1215.21 1734.29,1217.23 1734.87,1219.19 1735.46,1220.03 1736.05,1219.78 1736.63,1218.1 1737.22,1216.66 1737.81,1216.4 1738.39,1214.95 1738.98,1215.86 1739.57,1214.6 1740.15,1216.69 1740.74,1217.34 1741.32,1214.77 1741.91,1220.29 1742.5,1221 1743.08,1221.91 1743.67,1221.25 1744.26,1220.02 1744.84,1219.61 1745.43,1221.69 1746.02,1214.23 1746.6,1215.06 1747.19,1215.04 1747.78,1214.01 1748.36,1214.22 1748.95,1216.39 1749.53,1217.42 1750.12,1217.34 1750.71,1217.19 1751.29,1215.98 1751.88,1215.68 1752.47,1219.97 1753.05,1224.04 1753.64,1223.77 1754.23,1224.44 1754.81,1222.77 1755.4,1222.24 1755.99,1219.36 1756.57,1219.28 1757.16,1220.18 1757.74,1219.98 1758.33,1218.46 1758.92,1217.27 1759.5,1218.39 1760.09,1218.04 1760.68,1214.6 1761.26,1212.41 1761.85,1211.21 1762.44,1211.3 1763.02,1210.45 1763.61,1211.74 1764.19,1212.85 1764.78,1211.78 1765.37,1210.6 1765.95,1208.56 1766.54,1208.77 1767.13,1209.16 1767.71,1209.36 1768.3,1210.71 1768.89,1210.86 1769.47,1212.2 1770.06,1212.29 1770.65,1212.44 1771.23,1213.78 1771.82,1214 1772.4,1216.21 1772.99,1218.55 1773.58,1218.42 1774.16,1219.67 1774.75,1218.01 1775.34,1217.41 1775.92,1216.12 1776.51,1214.79 1777.1,1214.54 1777.68,1211.09 1778.27,1208.78 1778.86,1206.63 1779.44,1206.93 1780.03,1208.28 1780.61,1210.64 1781.2,1204.75 1781.79,1206.16 1782.37,1206.65 1782.96,1206.99 1783.55,1207.28 1784.13,1209.8 1784.72,1208.9 1785.31,1209.22 1785.89,1210.74 1786.48,1212.23 1787.06,1212.39 1787.65,1212.51 1788.24,1211.33 1788.82,1208.98 1789.41,1207.98 1790,1208.35 1790.58,1208.52 1791.17,1208.89 1791.76,1208.1 1792.34,1207.19 1792.93,1207.58 1793.52,1206.81 1794.1,1208.44 1794.69,1207.53 1795.27,1208 1795.86,1209.53 1796.45,1210.99 1797.03,1211.33 1797.62,1211.36 1798.21,1212.55 1798.79,1214.89 1799.38,1214.85 1799.97,1214.82 1800.55,1214.63 1801.14,1213.78 1801.73,1216.1 1802.31,1217.05 1802.9,1216.99 1803.48,1215.51 1804.07,1214.39 1804.66,1214.53 1805.24,1213.65 1805.83,1212.61 1806.42,1212.84 1807,1213.03 1807.59,1212.9 1808.18,1211.82 1808.76,1210.69 1809.35,1208.32 1809.94,1210.83 1810.52,1212.15 1811.11,1210.88 1811.69,1210.2 1812.28,1209.62 1812.87,1208.55 1813.45,1208.95 1814.04,1210.4 1814.63,1210.52 1815.21,1206.06 1815.8,1208.86 1816.39,1210.19 1816.97,1210.42 1817.56,1210.62 1818.14,1210.87 1818.73,1212.21 1819.32,1213.37 1819.9,1213.28 1820.49,1214.43 1821.08,1213.26 1821.66,1216.49 1822.25,1215.22 1822.84,1217.56 1823.42,1218.33 1824.01,1218.26 1824.6,1217.98 1825.18,1217.75 1825.77,1215.23 1826.35,1215.27 1826.94,1216.23 1827.53,1215.94 1828.11,1217.06 1828.7,1216.82 1829.29,1215.22 1829.87,1212.71 1830.46,1211.58 1831.05,1210.37 1831.63,1210.36 1832.22,1210.54 1832.81,1209.51 1833.39,1210.95 1833.98,1209.84 1834.56,1209.87 1835.15,1211.37 1835.74,1209.58 1836.32,1212.25 1836.91,1213.41 1837.5,1214.61 1838.08,1215.92 1838.67,1214.93 1839.26,1216.45 1839.84,1216.49 1840.43,1213.9 1841.01,1213.82 1841.6,1214.96 1842.19,1218.24 1842.77,1217.89 1843.36,1215.38 1843.95,1214.14 1844.53,1215.35 1845.12,1214.18 1845.71,1213.04 1846.29,1211.98 1846.88,1212.19 1847.47,1212.36 1848.05,1211.29 1848.64,1211.63 1849.22,1211.77 1849.81,1213.99 1850.4,1217.42 1850.98,1218.33 1851.57,1221.58 1852.16,1219.23 1852.74,1221.33 1853.33,1218.62 1853.92,1216.97 1854.5,1215.29 1855.09,1214.38 1855.68,1214.45 1856.26,1213.1 1856.85,1212.01 1857.43,1214.29 1858.02,1214.13 1858.61,1215.26 1859.19,1218.93 1859.78,1217.58 1860.37,1218.73 1860.95,1218.63 1861.54,1218.15 1862.13,1216.63 1862.71,1215.27 1863.3,1214.03 1863.88,1218.68 1864.47,1220.61 1865.06,1222.52 1865.64,1219.58 1866.23,1220.41 1866.82,1220.05 1867.4,1222.01 1867.99,1222.71 1868.58,1223.24 1869.16,1222.4 1869.75,1218.16 1870.34,1217.8 1870.92,1217.65 1871.51,1215.3 1872.09,1216.34 1872.68,1214.85 1873.27,1213.48 1873.85,1211.16 1874.44,1211.02 1875.03,1209.87 1875.61,1211.2 1876.2,1213.69 1876.79,1213.58 1877.37,1213.57 1877.96,1215.92 1878.55,1215.74 1879.13,1214.53 1879.72,1215.6 1880.3,1214.14 1880.89,1214.26 1881.48,1214.35 1882.06,1214.39 1882.65,1213.45 1883.24,1212.3 1883.82,1212.59 1884.41,1212.79 1885,1211.99 1885.58,1212.19 1886.17,1212.11 1886.76,1212.36 1887.34,1213.67 1887.93,1213.88 1888.51,1214.81 1889.1,1215.74 1889.69,1216.9 1890.27,1217.75 1890.86,1215.13 1891.45,1213.98 1892.03,1213.67 1892.62,1213.59 1893.21,1214.75 1893.79,1213.28 1894.38,1213.25 1894.96,1212.05 1895.55,1213.29 1896.14,1212.04 1896.72,1212.27 1897.31,1214.52 1897.9,1214.49 1898.48,1213.36 1899.07,1214.69 1899.66,1214.63 1900.24,1213.58 1900.83,1212.63 1901.42,1211.62 1902,1210.68 1902.59,1209.74 1903.17,1210.08 1903.76,1210.33 1904.35,1207.01 1904.93,1207.36 1905.52,1210.07 1906.11,1212.76 1906.69,1215.19 1907.28,1214.89 1907.87,1215 1908.45,1211.37 1909.04,1211.65 1909.63,1212.92 1910.21,1212.86 1910.8,1210.46 1911.38,1209.45 1911.97,1209.82 1912.56,1208.9 1913.14,1211.59 1913.73,1212.72 1914.32,1212.55 1914.9,1212.67 1915.49,1211.52 1916.08,1211.56 1916.66,1209.15 1917.25,1212.67 1917.83,1211.67 1918.42,1211.83 1919.01,1213.2 1919.59,1213.26 1920.18,1213.28 1920.77,1212.09 1921.35,1213.41 1921.94,1210.95 1922.53,1211.15 1923.11,1211.38 1923.7,1214.99 1924.29,1219.58 1924.87,1216.97 1925.46,1215.32 1926.04,1215.43 1926.63,1215.29 1927.22,1216.38 1927.8,1217.51 1928.39,1213.73 1928.98,1212.62 1929.56,1210.4 1930.15,1211.95 1930.74,1212.2 1931.32,1207.85 1931.91,1208.26 1932.5,1209.94 1933.08,1210.12 1933.67,1208 1934.25,1208.53 1934.84,1208.1 1935.43,1207.23 1936.01,1208.59 1936.6,1208.83 1937.19,1207.9 1937.77,1207.78 1938.36,1207.92 1938.95,1209.33 1939.53,1208.37 1940.12,1209.88 1940.71,1209.91 1941.29,1210.9 1941.88,1208.77 1942.46,1209.93 1943.05,1211.35 1943.64,1211.62 1944.22,1209.33 1944.81,1210.87 1945.4,1210.95 1945.98,1209.97 1946.57,1212.47 1947.16,1212.61 1947.74,1212.77 1948.33,1211.48 1948.91,1212.65 1949.5,1212.78 1950.09,1214.04 1950.67,1209.4 1951.26,1211.92 1951.85,1210.66 1952.43,1209.57 1953.02,1208.78 1953.61,1209.02 1954.19,1208.31 1954.78,1210.01 1955.37,1210.23 1955.95,1210.33 1956.54,1213.97 1957.12,1215.18 1957.71,1216.2 1958.3,1213.72 1958.88,1212.62 1959.47,1211.66 1960.06,1211.54 1960.64,1210.22 1961.23,1211.54 1961.82,1212.78 1962.4,1215.27 1962.99,1215.24 1963.58,1212.77 1964.16,1215.04 1964.75,1217.34 1965.33,1217.26 1965.92,1213.37 1966.51,1214.54 1967.09,1214.53 1967.68,1215.4 1968.27,1215.27 1968.85,1215.06 1969.44,1215.85 1970.03,1213.37 1970.61,1214.72 1971.2,1214.8 1971.78,1213.57 1972.37,1210.01 1972.96,1210.22 1973.54,1211.51 1974.13,1209.37 1974.72,1213.73 1975.3,1212.23 1975.89,1209.99 1976.48,1210.21 1977.06,1210.43 1977.65,1212.92 1978.24,1215.09 1978.82,1217.52 1979.41,1214.95 1979.99,1217.12 1980.58,1217.98 1981.17,1217.77 1981.75,1216.37 1982.34,1214.98 1982.93,1213.97 1983.51,1211.55 1984.1,1211.7 1984.69,1213.15 1985.27,1213.36 1985.86,1211.04 1986.45,1211 1987.03,1213.65 1987.62,1214.07 1988.2,1210.5 1988.79,1209.58 1989.38,1211.3 1989.96,1213.42 1990.55,1212.37 1991.14,1213.06 1991.72,1212.17 1992.31,1213.37 1992.9,1213.13 1993.48,1214.56 1994.07,1214.61 1994.65,1215.78 1995.24,1216.93 1995.83,1219.09 1996.41,1217.62 1997,1218.57 1997.59,1217.32 1998.17,1219.24 1998.76,1217.77 1999.35,1217.62 1999.93,1219.6 2000.52,1218.14 2001.11,1219.14 2001.69,1219.84 2002.28,1219.48 2002.86,1217.83 2003.45,1219.83 2004.04,1220.65 2004.62,1222.45 2005.21,1222.37 2005.8,1218.06 2006.38,1215.67 2006.97,1214.36 2007.56,1214.41 2008.14,1213.29 2008.73,1213.35 2009.32,1213.38 2009.9,1213.49 2010.49,1213.26 2011.07,1214.62 2011.66,1213.63 2012.25,1212.59 2012.83,1216.26 2013.42,1216.19 2014.01,1212.98 2014.59,1212.95 2015.18,1214.11 2015.77,1211.73 2016.35,1213.95 2016.94,1214.05 2017.53,1212.82 2018.11,1214.03 2018.7,1213.71 2019.28,1214.71 2019.87,1214.53 2020.46,1214.24 2021.04,1214.37 2021.63,1216.56 2022.22,1216.39 2022.8,1218.36 2023.39,1218.06 2023.98,1221.15 2024.56,1221.79 2025.15,1221.42 2025.73,1217.39 2026.32,1217.33 2026.91,1217.02 2027.49,1217.76 2028.08,1218.56 2028.67,1218.28 2029.25,1216.92 2029.84,1215.39 2030.43,1215.23 2031.01,1213.82 2031.6,1211.57 2032.19,1211.7 2032.77,1211.85 2033.36,1214.24 2033.94,1216.72 2034.53,1214.29 2035.12,1214.34 2035.7,1212.83 2036.29,1212.97 2036.88,1210.56 2037.46,1209.33 2038.05,1209.48 2038.64,1207.4 2039.22,1206.5 2039.81,1205.72 2040.4,1207.07 2040.98,1207.38 2041.57,1208.8 2042.15,1209.02 2042.74,1210.32 2043.33,1211.58 2043.91,1215.06 2044.5,1214.89 2045.09,1213.49 2045.67,1212.57 2046.26,1210.28 2046.85,1209.53 2047.43,1209.55 2048.02,1209.72 2048.6,1212.19 2049.19,1215.92 2049.78,1214.52 2050.36,1214.48 2050.95,1213.31 2051.54,1213.22 2052.12,1212.12 2052.71,1212.08 2053.3,1215.49 2053.88,1212 2054.47,1209.9 2055.06,1213.5 2055.64,1213.56 2056.23,1212.52 2056.81,1213.95 2057.4,1212.98 2057.99,1214.24 2058.57,1216.51 2059.16,1212.61 2059.75,1211.56 2060.33,1210.63 2060.92,1210.87 2061.51,1210.08 2062.09,1210.11 2062.68,1211.56 2063.27,1211.71 2063.85,1211.66 2064.44,1211.79 2065.02,1211.94 2065.61,1212.15 2066.2,1210.94 2066.78,1212.38 2067.37,1212.48 2067.96,1212.77 2068.54,1214.11 2069.13,1212.92 2069.72,1210.89 2070.3,1210.94 2070.89,1211.05 2071.48,1212.39 2072.06,1212.39 2072.65,1213.47 2073.23,1212.38 2073.82,1212.46 2074.41,1212.48 2074.99,1210.18 2075.58,1212.7 2076.17,1215.19 2076.75,1215.26 2077.34,1212.8 2077.93,1213.02 2078.51,1212.95 2079.1,1214.15 2079.68,1213.1 2080.27,1213.21 2080.86,1213.29 2081.44,1215.86 2082.03,1212.33 2082.62,1213.81 2083.2,1214.93 2083.79,1212.4 2084.38,1214.53 2084.96,1215.93 2085.55,1216.99 2086.14,1216.72 2086.72,1218.94 2087.31,1217.27 2087.89,1219.1 2088.48,1220.03 2089.07,1218.6 2089.65,1217.33 2090.24,1217.31 2090.83,1218.21 2091.41,1218.02 2092,1218.98 2092.59,1216.53 2093.17,1218.9 2093.76,1217.26 2094.35,1217.9 2094.93,1215.36 2095.52,1213.81 2096.1,1215.07 2096.69,1212.8 2097.28,1214.1 2097.86,1214.25 2098.45,1212.92 2099.04,1211.74 2099.62,1213.05 2100.21,1211.69 2100.8,1211.64 2101.38,1211.67 2101.97,1211.6 2102.55,1211.76 2103.14,1210.8 2103.73,1210.89 2104.31,1209.79 2104.9,1208.79 2105.49,1208.03 2106.07,1208.26 2106.66,1209.71 2107.25,1211.2 2107.83,1212.4 2108.42,1211.27 2109.01,1210.35 2109.59,1211.96 2110.18,1215.53 2110.76,1217.74 2111.35,1217.45 2111.94,1219.78 2112.52,1220.59 2113.11,1223.51 2113.7,1221.99 2114.28,1220.25 2114.87,1219.74 2115.46,1218.4 2116.04,1218.11 2116.63,1217.86 2117.22,1215.47 2117.8,1215.5 2118.39,1216.46 2118.97,1216.58 2119.56,1216.47 2120.15,1216.38 2120.73,1217.56 2121.32,1218.54 2121.91,1217.13 2122.49,1215.7 2123.08,1220.16 2123.67,1221.01 2124.25,1220.58 2124.84,1223.76 2125.42,1223.12 2126.01,1222.66 2126.6,1220.98 2127.18,1220.54 2127.77,1221.1 2128.36,1221.62 2128.94,1223.02 2129.53,1221.02 2130.12,1221.5 2130.7,1220.1 2131.29,1218.47 2131.88,1218.11 2132.46,1220.12 2133.05,1218.44 2133.63,1219.27 2134.22,1216.81 2134.81,1217.59 2135.39,1213.87 2135.98,1213.77 2136.57,1213.62 2137.15,1212.38 2137.74,1210.03 2138.33,1208.97 2138.91,1211.52 2139.5,1211.59 2140.09,1210.37 2140.67,1210.28 2141.26,1210.23 2141.84,1212.7 2142.43,1211.69 2143.02,1211.65 2143.6,1215.17 2144.19,1212.75 2144.78,1211.67 2145.36,1211.67 2145.95,1210.39 2146.54,1209.1 2147.12,1207.15 2147.71,1210.88 2148.3,1210.91 2148.88,1210.67 2149.47,1208.69 2150.05,1206.57 2150.64,1204.73 2151.23,1204.16 2151.81,1204.48 2152.4,1204.85 2152.99,1206.39 2153.57,1206.83 2154.16,1208.4 2154.75,1210.01 2155.33,1209.1 2155.92,1209.38 2156.5,1205.98 2157.09,1206.4 2157.68,1206.62 2158.26,1208.21 \"/>\n<path clip-path=\"url(#clip482)\" d=\"M986.025 1214.22 L986.612 1214.22 L987.198 1214.22 L987.785 1214.22 L988.371 1214.22 L988.957 1214.22 L989.544 1214.22 L990.13 1214.22 L990.717 1214.22 L991.303 1214.22 L991.889 1214.22 L992.476 1214.22 L993.062 1214.22 L993.649 1214.22 L994.235 1214.22 L994.822 1214.22 L995.408 1214.22 L995.994 1214.22 L996.581 1214.22 L997.167 1214.22 L997.754 1214.22 L998.34 1214.22 L998.926 1214.22 L999.513 1214.22 L1000.1 1214.22 L1000.69 1214.22 L1001.27 1214.22 L1001.86 1214.22 L1002.44 1214.22 L1003.03 1214.22 L1003.62 1214.22 L1004.2 1214.22 L1004.79 1214.22 L1005.38 1214.22 L1005.96 1214.22 L1006.55 1214.22 L1007.14 1214.22 L1007.72 1214.22 L1008.31 1214.22 L1008.9 1214.22 L1009.48 1214.22 L1010.07 1214.22 L1010.65 1214.22 L1011.24 1214.22 L1011.83 1214.22 L1012.41 1214.22 L1013 1214.22 L1013.59 1214.22 L1014.17 1214.22 L1014.76 1214.22 L1015.35 1214.22 L1015.93 1214.22 L1016.52 1214.22 L1017.11 1214.22 L1017.69 1214.22 L1018.28 1214.22 L1018.86 1214.22 L1019.45 1214.22 L1020.04 1214.22 L1020.62 1214.22 L1021.21 1214.22 L1021.8 1214.22 L1022.38 1214.22 L1022.97 1214.22 L1023.56 1214.22 L1024.14 1214.22 L1024.73 1214.22 L1025.32 1214.22 L1025.9 1214.22 L1026.49 1214.22 L1027.07 1214.22 L1027.66 1214.22 L1028.25 1214.22 L1028.83 1214.22 L1029.42 1214.22 L1030.01 1214.22 L1030.59 1214.22 L1031.18 1214.22 L1031.77 1214.22 L1032.35 1214.22 L1032.94 1214.22 L1033.52 1214.22 L1034.11 1214.22 L1034.7 1214.22 L1035.28 1214.22 L1035.87 1214.22 L1036.46 1214.22 L1037.04 1214.22 L1037.63 1214.22 L1038.22 1214.22 L1038.8 1214.22 L1039.39 1214.22 L1039.98 1214.22 L1040.56 1214.22 L1041.15 1214.22 L1041.73 1214.22 L1042.32 1214.22 L1042.91 1214.22 L1043.49 1214.22 L1044.08 1214.22 L1044.67 1214.22 L1045.25 1214.22 L1045.84 1214.22 L1046.43 1214.22 L1047.01 1214.22 L1047.6 1214.22 L1048.19 1214.22 L1048.77 1214.22 L1049.36 1214.22 L1049.94 1214.22 L1050.53 1214.22 L1051.12 1214.22 L1051.7 1214.22 L1052.29 1214.22 L1052.88 1214.22 L1053.46 1214.22 L1054.05 1214.22 L1054.64 1214.22 L1055.22 1214.22 L1055.81 1214.22 L1056.39 1214.22 L1056.98 1214.22 L1057.57 1214.22 L1058.15 1214.22 L1058.74 1214.22 L1059.33 1214.22 L1059.91 1214.22 L1060.5 1214.22 L1061.09 1214.22 L1061.67 1214.22 L1062.26 1214.22 L1062.85 1214.22 L1063.43 1214.22 L1064.02 1214.22 L1064.6 1214.22 L1065.19 1214.22 L1065.78 1214.22 L1066.36 1214.22 L1066.95 1214.22 L1067.54 1214.22 L1068.12 1214.22 L1068.71 1214.22 L1069.3 1214.22 L1069.88 1214.22 L1070.47 1214.22 L1071.06 1214.22 L1071.64 1214.22 L1072.23 1214.22 L1072.81 1214.22 L1073.4 1214.22 L1073.99 1214.22 L1074.57 1214.22 L1075.16 1214.22 L1075.75 1214.22 L1076.33 1214.22 L1076.92 1214.22 L1077.51 1214.22 L1078.09 1214.22 L1078.68 1214.22 L1079.26 1214.22 L1079.85 1214.22 L1080.44 1214.22 L1081.02 1214.22 L1081.61 1214.22 L1082.2 1214.22 L1082.78 1214.22 L1083.37 1214.22 L1083.96 1214.22 L1084.54 1214.22 L1085.13 1214.22 L1085.72 1214.22 L1086.3 1214.22 L1086.89 1214.22 L1087.47 1214.22 L1088.06 1214.22 L1088.65 1214.22 L1089.23 1214.22 L1089.82 1214.22 L1090.41 1214.22 L1090.99 1214.22 L1091.58 1214.22 L1092.17 1214.22 L1092.75 1214.22 L1093.34 1214.22 L1093.93 1214.22 L1094.51 1214.22 L1095.1 1214.22 L1095.68 1214.22 L1096.27 1214.22 L1096.86 1214.22 L1097.44 1214.22 L1098.03 1214.22 L1098.62 1214.22 L1099.2 1214.22 L1099.79 1214.22 L1100.38 1214.22 L1100.96 1214.22 L1101.55 1214.22 L1102.14 1214.22 L1102.72 1214.22 L1103.31 1214.22 L1103.89 1214.22 L1104.48 1214.22 L1105.07 1214.22 L1105.65 1214.22 L1106.24 1214.22 L1106.83 1214.22 L1107.41 1214.22 L1108 1214.22 L1108.59 1214.22 L1109.17 1214.22 L1109.76 1214.22 L1110.34 1214.22 L1110.93 1214.22 L1111.52 1214.22 L1112.1 1214.22 L1112.69 1214.22 L1113.28 1214.22 L1113.86 1214.22 L1114.45 1214.22 L1115.04 1214.22 L1115.62 1214.22 L1116.21 1214.22 L1116.8 1214.22 L1117.38 1214.22 L1117.97 1214.22 L1118.55 1214.22 L1119.14 1214.22 L1119.73 1214.22 L1120.31 1214.22 L1120.9 1214.22 L1121.49 1214.22 L1122.07 1214.22 L1122.66 1214.22 L1123.25 1214.22 L1123.83 1214.22 L1124.42 1214.22 L1125.01 1214.22 L1125.59 1214.22 L1126.18 1214.22 L1126.76 1214.22 L1127.35 1214.22 L1127.94 1214.22 L1128.52 1214.22 L1129.11 1214.22 L1129.7 1214.22 L1130.28 1214.22 L1130.87 1214.22 L1131.46 1214.22 L1132.04 1214.22 L1132.63 1214.22 L1133.21 1214.22 L1133.8 1214.22 L1134.39 1214.22 L1134.97 1214.22 L1135.56 1214.22 L1136.15 1214.22 L1136.73 1214.22 L1137.32 1214.22 L1137.91 1214.22 L1138.49 1214.22 L1139.08 1214.22 L1139.67 1214.22 L1140.25 1214.22 L1140.84 1214.22 L1141.42 1214.22 L1142.01 1214.22 L1142.6 1214.22 L1143.18 1214.22 L1143.77 1214.22 L1144.36 1214.22 L1144.94 1214.22 L1145.53 1214.22 L1146.12 1214.22 L1146.7 1214.22 L1147.29 1214.22 L1147.88 1214.22 L1148.46 1214.22 L1149.05 1214.22 L1149.63 1214.22 L1150.22 1214.22 L1150.81 1214.22 L1151.39 1214.22 L1151.98 1214.22 L1152.57 1214.22 L1153.15 1214.22 L1153.74 1214.22 L1154.33 1214.22 L1154.91 1214.22 L1155.5 1214.22 L1156.09 1214.22 L1156.67 1214.22 L1157.26 1214.22 L1157.84 1214.22 L1158.43 1214.22 L1159.02 1214.22 L1159.6 1214.22 L1160.19 1214.22 L1160.78 1214.22 L1161.36 1214.22 L1161.95 1214.22 L1162.54 1214.22 L1163.12 1214.22 L1163.71 1214.22 L1164.29 1214.22 L1164.88 1214.22 L1165.47 1214.22 L1166.05 1214.22 L1166.64 1214.22 L1167.23 1214.22 L1167.81 1214.22 L1168.4 1214.22 L1168.99 1214.22 L1169.57 1214.22 L1170.16 1214.22 L1170.75 1214.22 L1171.33 1214.22 L1171.92 1214.22 L1172.5 1214.22 L1173.09 1214.22 L1173.68 1214.22 L1174.26 1214.22 L1174.85 1214.22 L1175.44 1214.22 L1176.02 1214.22 L1176.61 1214.22 L1177.2 1214.22 L1177.78 1214.22 L1178.37 1214.22 L1178.96 1214.22 L1179.54 1214.22 L1180.13 1214.22 L1180.71 1214.22 L1181.3 1214.22 L1181.89 1214.22 L1182.47 1214.22 L1183.06 1214.22 L1183.65 1214.22 L1184.23 1214.22 L1184.82 1214.22 L1185.41 1214.22 L1185.99 1214.22 L1186.58 1214.22 L1187.16 1214.22 L1187.75 1214.22 L1188.34 1214.22 L1188.92 1214.22 L1189.51 1214.22 L1190.1 1214.22 L1190.68 1214.22 L1191.27 1214.22 L1191.86 1214.22 L1192.44 1214.22 L1193.03 1214.22 L1193.62 1214.22 L1194.2 1214.22 L1194.79 1214.22 L1195.37 1214.22 L1195.96 1214.22 L1196.55 1214.22 L1197.13 1214.22 L1197.72 1214.22 L1198.31 1214.22 L1198.89 1214.22 L1199.48 1214.22 L1200.07 1214.22 L1200.65 1214.22 L1201.24 1214.22 L1201.83 1214.22 L1202.41 1214.22 L1203 1214.22 L1203.58 1214.22 L1204.17 1214.22 L1204.76 1214.22 L1205.34 1214.22 L1205.93 1214.22 L1206.52 1214.22 L1207.1 1214.22 L1207.69 1214.22 L1208.28 1214.22 L1208.86 1214.22 L1209.45 1214.22 L1210.03 1214.22 L1210.62 1214.22 L1211.21 1214.22 L1211.79 1214.22 L1212.38 1214.22 L1212.97 1214.22 L1213.55 1214.22 L1214.14 1214.22 L1214.73 1214.22 L1215.31 1214.22 L1215.9 1214.22 L1216.49 1214.22 L1217.07 1214.22 L1217.66 1214.22 L1218.24 1214.22 L1218.83 1214.22 L1219.42 1214.22 L1220 1214.22 L1220.59 1214.22 L1221.18 1214.22 L1221.76 1214.22 L1222.35 1214.22 L1222.94 1214.22 L1223.52 1214.22 L1224.11 1214.22 L1224.7 1214.22 L1225.28 1214.22 L1225.87 1214.22 L1226.45 1214.22 L1227.04 1214.22 L1227.63 1214.22 L1228.21 1214.22 L1228.8 1214.22 L1229.39 1214.22 L1229.97 1214.22 L1230.56 1214.22 L1231.15 1214.22 L1231.73 1214.22 L1232.32 1214.22 L1232.91 1214.22 L1233.49 1214.22 L1234.08 1214.22 L1234.66 1214.22 L1235.25 1214.22 L1235.84 1214.22 L1236.42 1214.22 L1237.01 1214.22 L1237.6 1214.22 L1238.18 1214.22 L1238.77 1214.22 L1239.36 1214.22 L1239.94 1214.22 L1240.53 1214.22 L1241.11 1214.22 L1241.7 1214.22 L1242.29 1214.22 L1242.87 1214.22 L1243.46 1214.22 L1244.05 1214.22 L1244.63 1214.22 L1245.22 1214.22 L1245.81 1214.22 L1246.39 1214.22 L1246.98 1214.22 L1247.57 1214.22 L1248.15 1214.22 L1248.74 1214.22 L1249.32 1214.22 L1249.91 1214.22 L1250.5 1214.22 L1251.08 1214.22 L1251.67 1214.22 L1252.26 1214.22 L1252.84 1214.22 L1253.43 1214.22 L1254.02 1214.22 L1254.6 1214.22 L1255.19 1214.22 L1255.78 1214.22 L1256.36 1214.22 L1256.95 1214.22 L1257.53 1214.22 L1258.12 1214.22 L1258.71 1214.22 L1259.29 1214.22 L1259.88 1214.22 L1260.47 1214.22 L1261.05 1214.22 L1261.64 1214.22 L1262.23 1214.22 L1262.81 1214.22 L1263.4 1214.22 L1263.98 1214.22 L1264.57 1214.22 L1265.16 1214.22 L1265.74 1214.22 L1266.33 1214.22 L1266.92 1214.22 L1267.5 1214.22 L1268.09 1214.22 L1268.68 1214.22 L1269.26 1214.22 L1269.85 1214.22 L1270.44 1214.22 L1271.02 1214.22 L1271.61 1214.22 L1272.19 1214.22 L1272.78 1214.22 L1273.37 1214.22 L1273.95 1214.22 L1274.54 1214.22 L1275.13 1214.22 L1275.71 1214.22 L1276.3 1214.22 L1276.89 1214.22 L1277.47 1214.22 L1278.06 1214.22 L1278.65 1214.22 L1279.23 1214.22 L1279.82 1214.22 L1280.4 1214.22 L1280.99 1214.22 L1281.58 1214.22 L1282.16 1214.22 L1282.75 1214.22 L1283.34 1214.22 L1283.92 1214.22 L1284.51 1214.22 L1285.1 1214.22 L1285.68 1214.22 L1286.27 1214.22 L1286.86 1214.22 L1287.44 1214.22 L1288.03 1214.22 L1288.61 1214.22 L1289.2 1214.22 L1289.79 1214.22 L1290.37 1214.22 L1290.96 1214.22 L1291.55 1214.22 L1292.13 1214.22 L1292.72 1214.22 L1293.31 1214.22 L1293.89 1214.22 L1294.48 1214.22 L1295.06 1214.22 L1295.65 1214.22 L1296.24 1214.22 L1296.82 1214.22 L1297.41 1214.22 L1298 1214.22 L1298.58 1214.22 L1299.17 1214.22 L1299.76 1214.22 L1300.34 1214.22 L1300.93 1214.22 L1301.52 1214.22 L1302.1 1214.22 L1302.69 1214.22 L1303.27 1214.22 L1303.86 1214.22 L1304.45 1214.22 L1305.03 1214.22 L1305.62 1214.22 L1306.21 1214.22 L1306.79 1214.22 L1307.38 1214.22 L1307.97 1214.22 L1308.55 1214.22 L1309.14 1214.22 L1309.73 1214.22 L1310.31 1214.22 L1310.9 1214.22 L1311.48 1214.22 L1312.07 1214.22 L1312.66 1214.22 L1313.24 1214.22 L1313.83 1214.22 L1314.42 1214.22 L1315 1214.22 L1315.59 1214.22 L1316.18 1214.22 L1316.76 1214.22 L1317.35 1214.22 L1317.93 1214.22 L1318.52 1214.22 L1319.11 1214.22 L1319.69 1214.22 L1320.28 1214.22 L1320.87 1214.22 L1321.45 1214.22 L1322.04 1214.22 L1322.63 1214.22 L1323.21 1214.22 L1323.8 1214.22 L1324.39 1214.22 L1324.97 1214.22 L1325.56 1214.22 L1326.14 1214.22 L1326.73 1214.22 L1327.32 1214.22 L1327.9 1214.22 L1328.49 1214.22 L1329.08 1214.22 L1329.66 1214.22 L1330.25 1214.22 L1330.84 1214.22 L1331.42 1214.22 L1332.01 1214.22 L1332.6 1214.22 L1333.18 1214.22 L1333.77 1214.22 L1334.35 1214.22 L1334.94 1214.22 L1335.53 1214.22 L1336.11 1214.22 L1336.7 1214.22 L1337.29 1214.22 L1337.87 1214.22 L1338.46 1214.22 L1339.05 1214.22 L1339.63 1214.22 L1340.22 1214.22 L1340.8 1214.22 L1341.39 1214.22 L1341.98 1214.22 L1342.56 1214.22 L1343.15 1214.22 L1343.74 1214.22 L1344.32 1214.22 L1344.91 1214.22 L1345.5 1214.22 L1346.08 1214.22 L1346.67 1214.22 L1347.26 1214.22 L1347.84 1214.22 L1348.43 1214.22 L1349.01 1214.22 L1349.6 1214.22 L1350.19 1214.22 L1350.77 1214.22 L1351.36 1214.22 L1351.95 1214.22 L1352.53 1214.22 L1353.12 1214.22 L1353.71 1214.22 L1354.29 1214.22 L1354.88 1214.22 L1355.47 1214.22 L1356.05 1214.22 L1356.64 1214.22 L1357.22 1214.22 L1357.81 1214.22 L1358.4 1214.22 L1358.98 1214.22 L1359.57 1214.22 L1360.16 1214.22 L1360.74 1214.22 L1361.33 1214.22 L1361.92 1214.22 L1362.5 1214.22 L1363.09 1214.22 L1363.68 1214.22 L1364.26 1214.22 L1364.85 1214.22 L1365.43 1214.22 L1366.02 1214.22 L1366.61 1214.22 L1367.19 1214.22 L1367.78 1214.22 L1368.37 1214.22 L1368.95 1214.22 L1369.54 1214.22 L1370.13 1214.22 L1370.71 1214.22 L1371.3 1214.22 L1371.88 1214.22 L1372.47 1214.22 L1373.06 1214.22 L1373.64 1214.22 L1374.23 1214.22 L1374.82 1214.22 L1375.4 1214.22 L1375.99 1214.22 L1376.58 1214.22 L1377.16 1214.22 L1377.75 1214.22 L1378.34 1214.22 L1378.92 1214.22 L1379.51 1214.22 L1380.09 1214.22 L1380.68 1214.22 L1381.27 1214.22 L1381.85 1214.22 L1382.44 1214.22 L1383.03 1214.22 L1383.61 1214.22 L1384.2 1214.22 L1384.79 1214.22 L1385.37 1214.22 L1385.96 1214.22 L1386.55 1214.22 L1387.13 1214.22 L1387.72 1214.22 L1388.3 1214.22 L1388.89 1214.22 L1389.48 1214.22 L1390.06 1214.22 L1390.65 1214.22 L1391.24 1214.22 L1391.82 1214.22 L1392.41 1214.22 L1393 1214.22 L1393.58 1214.22 L1394.17 1214.22 L1394.75 1214.22 L1395.34 1214.22 L1395.93 1214.22 L1396.51 1214.22 L1397.1 1214.22 L1397.69 1214.22 L1398.27 1214.22 L1398.86 1214.22 L1399.45 1214.22 L1400.03 1214.22 L1400.62 1214.22 L1401.21 1214.22 L1401.79 1214.22 L1402.38 1214.22 L1402.96 1214.22 L1403.55 1214.22 L1404.14 1214.22 L1404.72 1214.22 L1405.31 1214.22 L1405.9 1214.22 L1406.48 1214.22 L1407.07 1214.22 L1407.66 1214.22 L1408.24 1214.22 L1408.83 1214.22 L1409.42 1214.22 L1410 1214.22 L1410.59 1214.22 L1411.17 1214.22 L1411.76 1214.22 L1412.35 1214.22 L1412.93 1214.22 L1413.52 1214.22 L1414.11 1214.22 L1414.69 1214.22 L1415.28 1214.22 L1415.87 1214.22 L1416.45 1214.22 L1417.04 1214.22 L1417.63 1214.22 L1418.21 1214.22 L1418.8 1214.22 L1419.38 1214.22 L1419.97 1214.22 L1420.56 1214.22 L1421.14 1214.22 L1421.73 1214.22 L1422.32 1214.22 L1422.9 1214.22 L1423.49 1214.22 L1424.08 1214.22 L1424.66 1214.22 L1425.25 1214.22 L1425.83 1214.22 L1426.42 1214.22 L1427.01 1214.22 L1427.59 1214.22 L1428.18 1214.22 L1428.77 1214.22 L1429.35 1214.22 L1429.94 1214.22 L1430.53 1214.22 L1431.11 1214.22 L1431.7 1214.22 L1432.29 1214.22 L1432.87 1214.22 L1433.46 1214.22 L1434.04 1214.22 L1434.63 1214.22 L1435.22 1214.22 L1435.8 1214.22 L1436.39 1214.22 L1436.98 1214.22 L1437.56 1214.22 L1438.15 1214.22 L1438.74 1214.22 L1439.32 1214.22 L1439.91 1214.22 L1440.5 1214.22 L1441.08 1214.22 L1441.67 1214.22 L1442.25 1214.22 L1442.84 1214.22 L1443.43 1214.22 L1444.01 1214.22 L1444.6 1214.22 L1445.19 1214.22 L1445.77 1214.22 L1446.36 1214.22 L1446.95 1214.22 L1447.53 1214.22 L1448.12 1214.22 L1448.7 1214.22 L1449.29 1214.22 L1449.88 1214.22 L1450.46 1214.22 L1451.05 1214.22 L1451.64 1214.22 L1452.22 1214.22 L1452.81 1214.22 L1453.4 1214.22 L1453.98 1214.22 L1454.57 1214.22 L1455.16 1214.22 L1455.74 1214.22 L1456.33 1214.22 L1456.91 1214.22 L1457.5 1214.22 L1458.09 1214.22 L1458.67 1214.22 L1459.26 1214.22 L1459.85 1214.22 L1460.43 1214.22 L1461.02 1214.22 L1461.61 1214.22 L1462.19 1214.22 L1462.78 1214.22 L1463.37 1214.22 L1463.95 1214.22 L1464.54 1214.22 L1465.12 1214.22 L1465.71 1214.22 L1466.3 1214.22 L1466.88 1214.22 L1467.47 1214.22 L1468.06 1214.22 L1468.64 1214.22 L1469.23 1214.22 L1469.82 1214.22 L1470.4 1214.22 L1470.99 1214.22 L1471.57 1214.22 L1472.16 1214.22 L1472.75 1214.22 L1473.33 1214.22 L1473.92 1214.22 L1474.51 1214.22 L1475.09 1214.22 L1475.68 1214.22 L1476.27 1214.22 L1476.85 1214.22 L1477.44 1214.22 L1478.03 1214.22 L1478.61 1214.22 L1479.2 1214.22 L1479.78 1214.22 L1480.37 1214.22 L1480.96 1214.22 L1481.54 1214.22 L1482.13 1214.22 L1482.72 1214.22 L1483.3 1214.22 L1483.89 1214.22 L1484.48 1214.22 L1485.06 1214.22 L1485.65 1214.22 L1486.24 1214.22 L1486.82 1214.22 L1487.41 1214.22 L1487.99 1214.22 L1488.58 1214.22 L1489.17 1214.22 L1489.75 1214.22 L1490.34 1214.22 L1490.93 1214.22 L1491.51 1214.22 L1492.1 1214.22 L1492.69 1214.22 L1493.27 1214.22 L1493.86 1214.22 L1494.45 1214.22 L1495.03 1214.22 L1495.62 1214.22 L1496.2 1214.22 L1496.79 1214.22 L1497.38 1214.22 L1497.96 1214.22 L1498.55 1214.22 L1499.14 1214.22 L1499.72 1214.22 L1500.31 1214.22 L1500.9 1214.22 L1501.48 1214.22 L1502.07 1214.22 L1502.65 1214.22 L1503.24 1214.22 L1503.83 1214.22 L1504.41 1214.22 L1505 1214.22 L1505.59 1214.22 L1506.17 1214.22 L1506.76 1214.22 L1507.35 1214.22 L1507.93 1214.22 L1508.52 1214.22 L1509.11 1214.22 L1509.69 1214.22 L1510.28 1214.22 L1510.86 1214.22 L1511.45 1214.22 L1512.04 1214.22 L1512.62 1214.22 L1513.21 1214.22 L1513.8 1214.22 L1514.38 1214.22 L1514.97 1214.22 L1515.56 1214.22 L1516.14 1214.22 L1516.73 1214.22 L1517.32 1214.22 L1517.9 1214.22 L1518.49 1214.22 L1519.07 1214.22 L1519.66 1214.22 L1520.25 1214.22 L1520.83 1214.22 L1521.42 1214.22 L1522.01 1214.22 L1522.59 1214.22 L1523.18 1214.22 L1523.77 1214.22 L1524.35 1214.22 L1524.94 1214.22 L1525.52 1214.22 L1526.11 1214.22 L1526.7 1214.22 L1527.28 1214.22 L1527.87 1214.22 L1528.46 1214.22 L1529.04 1214.22 L1529.63 1214.22 L1530.22 1214.22 L1530.8 1214.22 L1531.39 1214.22 L1531.98 1214.22 L1532.56 1214.22 L1533.15 1214.22 L1533.73 1214.22 L1534.32 1214.22 L1534.91 1214.22 L1535.49 1214.22 L1536.08 1214.22 L1536.67 1214.22 L1537.25 1214.22 L1537.84 1214.22 L1538.43 1214.22 L1539.01 1214.22 L1539.6 1214.22 L1540.19 1214.22 L1540.77 1214.22 L1541.36 1214.22 L1541.94 1214.22 L1542.53 1214.22 L1543.12 1214.22 L1543.7 1214.22 L1544.29 1214.22 L1544.88 1214.22 L1545.46 1214.22 L1546.05 1214.22 L1546.64 1214.22 L1547.22 1214.22 L1547.81 1214.22 L1548.4 1214.22 L1548.98 1214.22 L1549.57 1214.22 L1550.15 1214.22 L1550.74 1214.22 L1551.33 1214.22 L1551.91 1214.22 L1552.5 1214.22 L1553.09 1214.22 L1553.67 1214.22 L1554.26 1214.22 L1554.85 1214.22 L1555.43 1214.22 L1556.02 1214.22 L1556.6 1214.22 L1557.19 1214.22 L1557.78 1214.22 L1558.36 1214.22 L1558.95 1214.22 L1559.54 1214.22 L1560.12 1214.22 L1560.71 1214.22 L1561.3 1214.22 L1561.88 1214.22 L1562.47 1214.22 L1563.06 1214.22 L1563.64 1214.22 L1564.23 1214.22 L1564.81 1214.22 L1565.4 1214.22 L1565.99 1214.22 L1566.57 1214.22 L1567.16 1214.22 L1567.75 1214.22 L1568.33 1214.22 L1568.92 1214.22 L1569.51 1214.22 L1570.09 1214.22 L1570.68 1214.22 L1571.27 1214.22 L1571.85 1214.22 L1572.44 1214.22 L1573.02 1214.22 L1573.61 1214.22 L1574.2 1214.22 L1574.78 1214.22 L1575.37 1214.22 L1575.96 1214.22 L1576.54 1214.22 L1577.13 1214.22 L1577.72 1214.22 L1578.3 1214.22 L1578.89 1214.22 L1579.47 1214.22 L1580.06 1214.22 L1580.65 1214.22 L1581.23 1214.22 L1581.82 1214.22 L1582.41 1214.22 L1582.99 1214.22 L1583.58 1214.22 L1584.17 1214.22 L1584.75 1214.22 L1585.34 1214.22 L1585.93 1214.22 L1586.51 1214.22 L1587.1 1214.22 L1587.68 1214.22 L1588.27 1214.22 L1588.86 1214.22 L1589.44 1214.22 L1590.03 1214.22 L1590.62 1214.22 L1591.2 1214.22 L1591.79 1214.22 L1592.38 1214.22 L1592.96 1214.22 L1593.55 1214.22 L1594.14 1214.22 L1594.72 1214.22 L1595.31 1214.22 L1595.89 1214.22 L1596.48 1214.22 L1597.07 1214.22 L1597.65 1214.22 L1598.24 1214.22 L1598.83 1214.22 L1599.41 1214.22 L1600 1214.22 L1600.59 1214.22 L1601.17 1214.22 L1601.76 1214.22 L1602.34 1214.22 L1602.93 1214.22 L1603.52 1214.22 L1604.1 1214.22 L1604.69 1214.22 L1605.28 1214.22 L1605.86 1214.22 L1606.45 1214.22 L1607.04 1214.22 L1607.62 1214.22 L1608.21 1214.22 L1608.8 1214.22 L1609.38 1214.22 L1609.97 1214.22 L1610.55 1214.22 L1611.14 1214.22 L1611.73 1214.22 L1612.31 1214.22 L1612.9 1214.22 L1613.49 1214.22 L1614.07 1214.22 L1614.66 1214.22 L1615.25 1214.22 L1615.83 1214.22 L1616.42 1214.22 L1617.01 1214.22 L1617.59 1214.22 L1618.18 1214.22 L1618.76 1214.22 L1619.35 1214.22 L1619.94 1214.22 L1620.52 1214.22 L1621.11 1214.22 L1621.7 1214.22 L1622.28 1214.22 L1622.87 1214.22 L1623.46 1214.22 L1624.04 1214.22 L1624.63 1214.22 L1625.22 1214.22 L1625.8 1214.22 L1626.39 1214.22 L1626.97 1214.22 L1627.56 1214.22 L1628.15 1214.22 L1628.73 1214.22 L1629.32 1214.22 L1629.91 1214.22 L1630.49 1214.22 L1631.08 1214.22 L1631.67 1214.22 L1632.25 1214.22 L1632.84 1214.22 L1633.42 1214.22 L1634.01 1214.22 L1634.6 1214.22 L1635.18 1214.22 L1635.77 1214.22 L1636.36 1214.22 L1636.94 1214.22 L1637.53 1214.22 L1638.12 1214.22 L1638.7 1214.22 L1639.29 1214.22 L1639.88 1214.22 L1640.46 1214.22 L1641.05 1214.22 L1641.63 1214.22 L1642.22 1214.22 L1642.81 1214.22 L1643.39 1214.22 L1643.98 1214.22 L1644.57 1214.22 L1645.15 1214.22 L1645.74 1214.22 L1646.33 1214.22 L1646.91 1214.22 L1647.5 1214.22 L1648.09 1214.22 L1648.67 1214.22 L1649.26 1214.22 L1649.84 1214.22 L1650.43 1214.22 L1651.02 1214.22 L1651.6 1214.22 L1652.19 1214.22 L1652.78 1214.22 L1653.36 1214.22 L1653.95 1214.22 L1654.54 1214.22 L1655.12 1214.22 L1655.71 1214.22 L1656.29 1214.22 L1656.88 1214.22 L1657.47 1214.22 L1658.05 1214.22 L1658.64 1214.22 L1659.23 1214.22 L1659.81 1214.22 L1660.4 1214.22 L1660.99 1214.22 L1661.57 1214.22 L1662.16 1214.22 L1662.75 1214.22 L1663.33 1214.22 L1663.92 1214.22 L1664.5 1214.22 L1665.09 1214.22 L1665.68 1214.22 L1666.26 1214.22 L1666.85 1214.22 L1667.44 1214.22 L1668.02 1214.22 L1668.61 1214.22 L1669.2 1214.22 L1669.78 1214.22 L1670.37 1214.22 L1670.96 1214.22 L1671.54 1214.22 L1672.13 1214.22 L1672.71 1214.22 L1673.3 1214.22 L1673.89 1214.22 L1674.47 1214.22 L1675.06 1214.22 L1675.65 1214.22 L1676.23 1214.22 L1676.82 1214.22 L1677.41 1214.22 L1677.99 1214.22 L1678.58 1214.22 L1679.17 1214.22 L1679.75 1214.22 L1680.34 1214.22 L1680.92 1214.22 L1681.51 1214.22 L1682.1 1214.22 L1682.68 1214.22 L1683.27 1214.22 L1683.86 1214.22 L1684.44 1214.22 L1685.03 1214.22 L1685.62 1214.22 L1686.2 1214.22 L1686.79 1214.22 L1687.37 1214.22 L1687.96 1214.22 L1688.55 1214.22 L1689.13 1214.22 L1689.72 1214.22 L1690.31 1214.22 L1690.89 1214.22 L1691.48 1214.22 L1692.07 1214.22 L1692.65 1214.22 L1693.24 1214.22 L1693.83 1214.22 L1694.41 1214.22 L1695 1214.22 L1695.58 1214.22 L1696.17 1214.22 L1696.76 1214.22 L1697.34 1214.22 L1697.93 1214.22 L1698.52 1214.22 L1699.1 1214.22 L1699.69 1214.22 L1700.28 1214.22 L1700.86 1214.22 L1701.45 1214.22 L1702.04 1214.22 L1702.62 1214.22 L1703.21 1214.22 L1703.79 1214.22 L1704.38 1214.22 L1704.97 1214.22 L1705.55 1214.22 L1706.14 1214.22 L1706.73 1214.22 L1707.31 1214.22 L1707.9 1214.22 L1708.49 1214.22 L1709.07 1214.22 L1709.66 1214.22 L1710.24 1214.22 L1710.83 1214.22 L1711.42 1214.22 L1712 1214.22 L1712.59 1214.22 L1713.18 1214.22 L1713.76 1214.22 L1714.35 1214.22 L1714.94 1214.22 L1715.52 1214.22 L1716.11 1214.22 L1716.7 1214.22 L1717.28 1214.22 L1717.87 1214.22 L1718.45 1214.22 L1719.04 1214.22 L1719.63 1214.22 L1720.21 1214.22 L1720.8 1214.22 L1721.39 1214.22 L1721.97 1214.22 L1722.56 1214.22 L1723.15 1214.22 L1723.73 1214.22 L1724.32 1214.22 L1724.91 1214.22 L1725.49 1214.22 L1726.08 1214.22 L1726.66 1214.22 L1727.25 1214.22 L1727.84 1214.22 L1728.42 1214.22 L1729.01 1214.22 L1729.6 1214.22 L1730.18 1214.22 L1730.77 1214.22 L1731.36 1214.22 L1731.94 1214.22 L1732.53 1214.22 L1733.11 1214.22 L1733.7 1214.22 L1734.29 1214.22 L1734.87 1214.22 L1735.46 1214.22 L1736.05 1214.22 L1736.63 1214.22 L1737.22 1214.22 L1737.81 1214.22 L1738.39 1214.22 L1738.98 1214.22 L1739.57 1214.22 L1740.15 1214.22 L1740.74 1214.22 L1741.32 1214.22 L1741.91 1214.22 L1742.5 1214.22 L1743.08 1214.22 L1743.67 1214.22 L1744.26 1214.22 L1744.84 1214.22 L1745.43 1214.22 L1746.02 1214.22 L1746.6 1214.22 L1747.19 1214.22 L1747.78 1214.22 L1748.36 1214.22 L1748.95 1214.22 L1749.53 1214.22 L1750.12 1214.22 L1750.71 1214.22 L1751.29 1214.22 L1751.88 1214.22 L1752.47 1214.22 L1753.05 1214.22 L1753.64 1214.22 L1754.23 1214.22 L1754.81 1214.22 L1755.4 1214.22 L1755.99 1214.22 L1756.57 1214.22 L1757.16 1214.22 L1757.74 1214.22 L1758.33 1214.22 L1758.92 1214.22 L1759.5 1214.22 L1760.09 1214.22 L1760.68 1214.22 L1761.26 1214.22 L1761.85 1214.22 L1762.44 1214.22 L1763.02 1214.22 L1763.61 1214.22 L1764.19 1214.22 L1764.78 1214.22 L1765.37 1214.22 L1765.95 1214.22 L1766.54 1214.22 L1767.13 1214.22 L1767.71 1214.22 L1768.3 1214.22 L1768.89 1214.22 L1769.47 1214.22 L1770.06 1214.22 L1770.65 1214.22 L1771.23 1214.22 L1771.82 1214.22 L1772.4 1214.22 L1772.99 1214.22 L1773.58 1214.22 L1774.16 1214.22 L1774.75 1214.22 L1775.34 1214.22 L1775.92 1214.22 L1776.51 1214.22 L1777.1 1214.22 L1777.68 1214.22 L1778.27 1214.22 L1778.86 1214.22 L1779.44 1214.22 L1780.03 1214.22 L1780.61 1214.22 L1781.2 1214.22 L1781.79 1214.22 L1782.37 1214.22 L1782.96 1214.22 L1783.55 1214.22 L1784.13 1214.22 L1784.72 1214.22 L1785.31 1214.22 L1785.89 1214.22 L1786.48 1214.22 L1787.06 1214.22 L1787.65 1214.22 L1788.24 1214.22 L1788.82 1214.22 L1789.41 1214.22 L1790 1214.22 L1790.58 1214.22 L1791.17 1214.22 L1791.76 1214.22 L1792.34 1214.22 L1792.93 1214.22 L1793.52 1214.22 L1794.1 1214.22 L1794.69 1214.22 L1795.27 1214.22 L1795.86 1214.22 L1796.45 1214.22 L1797.03 1214.22 L1797.62 1214.22 L1798.21 1214.22 L1798.79 1214.22 L1799.38 1214.22 L1799.97 1214.22 L1800.55 1214.22 L1801.14 1214.22 L1801.73 1214.22 L1802.31 1214.22 L1802.9 1214.22 L1803.48 1214.22 L1804.07 1214.22 L1804.66 1214.22 L1805.24 1214.22 L1805.83 1214.22 L1806.42 1214.22 L1807 1214.22 L1807.59 1214.22 L1808.18 1214.22 L1808.76 1214.22 L1809.35 1214.22 L1809.94 1214.22 L1810.52 1214.22 L1811.11 1214.22 L1811.69 1214.22 L1812.28 1214.22 L1812.87 1214.22 L1813.45 1214.22 L1814.04 1214.22 L1814.63 1214.22 L1815.21 1214.22 L1815.8 1214.22 L1816.39 1214.22 L1816.97 1214.22 L1817.56 1214.22 L1818.14 1214.22 L1818.73 1214.22 L1819.32 1214.22 L1819.9 1214.22 L1820.49 1214.22 L1821.08 1214.22 L1821.66 1214.22 L1822.25 1214.22 L1822.84 1214.22 L1823.42 1214.22 L1824.01 1214.22 L1824.6 1214.22 L1825.18 1214.22 L1825.77 1214.22 L1826.35 1214.22 L1826.94 1214.22 L1827.53 1214.22 L1828.11 1214.22 L1828.7 1214.22 L1829.29 1214.22 L1829.87 1214.22 L1830.46 1214.22 L1831.05 1214.22 L1831.63 1214.22 L1832.22 1214.22 L1832.81 1214.22 L1833.39 1214.22 L1833.98 1214.22 L1834.56 1214.22 L1835.15 1214.22 L1835.74 1214.22 L1836.32 1214.22 L1836.91 1214.22 L1837.5 1214.22 L1838.08 1214.22 L1838.67 1214.22 L1839.26 1214.22 L1839.84 1214.22 L1840.43 1214.22 L1841.01 1214.22 L1841.6 1214.22 L1842.19 1214.22 L1842.77 1214.22 L1843.36 1214.22 L1843.95 1214.22 L1844.53 1214.22 L1845.12 1214.22 L1845.71 1214.22 L1846.29 1214.22 L1846.88 1214.22 L1847.47 1214.22 L1848.05 1214.22 L1848.64 1214.22 L1849.22 1214.22 L1849.81 1214.22 L1850.4 1214.22 L1850.98 1214.22 L1851.57 1214.22 L1852.16 1214.22 L1852.74 1214.22 L1853.33 1214.22 L1853.92 1214.22 L1854.5 1214.22 L1855.09 1214.22 L1855.68 1214.22 L1856.26 1214.22 L1856.85 1214.22 L1857.43 1214.22 L1858.02 1214.22 L1858.61 1214.22 L1859.19 1214.22 L1859.78 1214.22 L1860.37 1214.22 L1860.95 1214.22 L1861.54 1214.22 L1862.13 1214.22 L1862.71 1214.22 L1863.3 1214.22 L1863.88 1214.22 L1864.47 1214.22 L1865.06 1214.22 L1865.64 1214.22 L1866.23 1214.22 L1866.82 1214.22 L1867.4 1214.22 L1867.99 1214.22 L1868.58 1214.22 L1869.16 1214.22 L1869.75 1214.22 L1870.34 1214.22 L1870.92 1214.22 L1871.51 1214.22 L1872.09 1214.22 L1872.68 1214.22 L1873.27 1214.22 L1873.85 1214.22 L1874.44 1214.22 L1875.03 1214.22 L1875.61 1214.22 L1876.2 1214.22 L1876.79 1214.22 L1877.37 1214.22 L1877.96 1214.22 L1878.55 1214.22 L1879.13 1214.22 L1879.72 1214.22 L1880.3 1214.22 L1880.89 1214.22 L1881.48 1214.22 L1882.06 1214.22 L1882.65 1214.22 L1883.24 1214.22 L1883.82 1214.22 L1884.41 1214.22 L1885 1214.22 L1885.58 1214.22 L1886.17 1214.22 L1886.76 1214.22 L1887.34 1214.22 L1887.93 1214.22 L1888.51 1214.22 L1889.1 1214.22 L1889.69 1214.22 L1890.27 1214.22 L1890.86 1214.22 L1891.45 1214.22 L1892.03 1214.22 L1892.62 1214.22 L1893.21 1214.22 L1893.79 1214.22 L1894.38 1214.22 L1894.96 1214.22 L1895.55 1214.22 L1896.14 1214.22 L1896.72 1214.22 L1897.31 1214.22 L1897.9 1214.22 L1898.48 1214.22 L1899.07 1214.22 L1899.66 1214.22 L1900.24 1214.22 L1900.83 1214.22 L1901.42 1214.22 L1902 1214.22 L1902.59 1214.22 L1903.17 1214.22 L1903.76 1214.22 L1904.35 1214.22 L1904.93 1214.22 L1905.52 1214.22 L1906.11 1214.22 L1906.69 1214.22 L1907.28 1214.22 L1907.87 1214.22 L1908.45 1214.22 L1909.04 1214.22 L1909.63 1214.22 L1910.21 1214.22 L1910.8 1214.22 L1911.38 1214.22 L1911.97 1214.22 L1912.56 1214.22 L1913.14 1214.22 L1913.73 1214.22 L1914.32 1214.22 L1914.9 1214.22 L1915.49 1214.22 L1916.08 1214.22 L1916.66 1214.22 L1917.25 1214.22 L1917.83 1214.22 L1918.42 1214.22 L1919.01 1214.22 L1919.59 1214.22 L1920.18 1214.22 L1920.77 1214.22 L1921.35 1214.22 L1921.94 1214.22 L1922.53 1214.22 L1923.11 1214.22 L1923.7 1214.22 L1924.29 1214.22 L1924.87 1214.22 L1925.46 1214.22 L1926.04 1214.22 L1926.63 1214.22 L1927.22 1214.22 L1927.8 1214.22 L1928.39 1214.22 L1928.98 1214.22 L1929.56 1214.22 L1930.15 1214.22 L1930.74 1214.22 L1931.32 1214.22 L1931.91 1214.22 L1932.5 1214.22 L1933.08 1214.22 L1933.67 1214.22 L1934.25 1214.22 L1934.84 1214.22 L1935.43 1214.22 L1936.01 1214.22 L1936.6 1214.22 L1937.19 1214.22 L1937.77 1214.22 L1938.36 1214.22 L1938.95 1214.22 L1939.53 1214.22 L1940.12 1214.22 L1940.71 1214.22 L1941.29 1214.22 L1941.88 1214.22 L1942.46 1214.22 L1943.05 1214.22 L1943.64 1214.22 L1944.22 1214.22 L1944.81 1214.22 L1945.4 1214.22 L1945.98 1214.22 L1946.57 1214.22 L1947.16 1214.22 L1947.74 1214.22 L1948.33 1214.22 L1948.91 1214.22 L1949.5 1214.22 L1950.09 1214.22 L1950.67 1214.22 L1951.26 1214.22 L1951.85 1214.22 L1952.43 1214.22 L1953.02 1214.22 L1953.61 1214.22 L1954.19 1214.22 L1954.78 1214.22 L1955.37 1214.22 L1955.95 1214.22 L1956.54 1214.22 L1957.12 1214.22 L1957.71 1214.22 L1958.3 1214.22 L1958.88 1214.22 L1959.47 1214.22 L1960.06 1214.22 L1960.64 1214.22 L1961.23 1214.22 L1961.82 1214.22 L1962.4 1214.22 L1962.99 1214.22 L1963.58 1214.22 L1964.16 1214.22 L1964.75 1214.22 L1965.33 1214.22 L1965.92 1214.22 L1966.51 1214.22 L1967.09 1214.22 L1967.68 1214.22 L1968.27 1214.22 L1968.85 1214.22 L1969.44 1214.22 L1970.03 1214.22 L1970.61 1214.22 L1971.2 1214.22 L1971.78 1214.22 L1972.37 1214.22 L1972.96 1214.22 L1973.54 1214.22 L1974.13 1214.22 L1974.72 1214.22 L1975.3 1214.22 L1975.89 1214.22 L1976.48 1214.22 L1977.06 1214.22 L1977.65 1214.22 L1978.24 1214.22 L1978.82 1214.22 L1979.41 1214.22 L1979.99 1214.22 L1980.58 1214.22 L1981.17 1214.22 L1981.75 1214.22 L1982.34 1214.22 L1982.93 1214.22 L1983.51 1214.22 L1984.1 1214.22 L1984.69 1214.22 L1985.27 1214.22 L1985.86 1214.22 L1986.45 1214.22 L1987.03 1214.22 L1987.62 1214.22 L1988.2 1214.22 L1988.79 1214.22 L1989.38 1214.22 L1989.96 1214.22 L1990.55 1214.22 L1991.14 1214.22 L1991.72 1214.22 L1992.31 1214.22 L1992.9 1214.22 L1993.48 1214.22 L1994.07 1214.22 L1994.65 1214.22 L1995.24 1214.22 L1995.83 1214.22 L1996.41 1214.22 L1997 1214.22 L1997.59 1214.22 L1998.17 1214.22 L1998.76 1214.22 L1999.35 1214.22 L1999.93 1214.22 L2000.52 1214.22 L2001.11 1214.22 L2001.69 1214.22 L2002.28 1214.22 L2002.86 1214.22 L2003.45 1214.22 L2004.04 1214.22 L2004.62 1214.22 L2005.21 1214.22 L2005.8 1214.22 L2006.38 1214.22 L2006.97 1214.22 L2007.56 1214.22 L2008.14 1214.22 L2008.73 1214.22 L2009.32 1214.22 L2009.9 1214.22 L2010.49 1214.22 L2011.07 1214.22 L2011.66 1214.22 L2012.25 1214.22 L2012.83 1214.22 L2013.42 1214.22 L2014.01 1214.22 L2014.59 1214.22 L2015.18 1214.22 L2015.77 1214.22 L2016.35 1214.22 L2016.94 1214.22 L2017.53 1214.22 L2018.11 1214.22 L2018.7 1214.22 L2019.28 1214.22 L2019.87 1214.22 L2020.46 1214.22 L2021.04 1214.22 L2021.63 1214.22 L2022.22 1214.22 L2022.8 1214.22 L2023.39 1214.22 L2023.98 1214.22 L2024.56 1214.22 L2025.15 1214.22 L2025.73 1214.22 L2026.32 1214.22 L2026.91 1214.22 L2027.49 1214.22 L2028.08 1214.22 L2028.67 1214.22 L2029.25 1214.22 L2029.84 1214.22 L2030.43 1214.22 L2031.01 1214.22 L2031.6 1214.22 L2032.19 1214.22 L2032.77 1214.22 L2033.36 1214.22 L2033.94 1214.22 L2034.53 1214.22 L2035.12 1214.22 L2035.7 1214.22 L2036.29 1214.22 L2036.88 1214.22 L2037.46 1214.22 L2038.05 1214.22 L2038.64 1214.22 L2039.22 1214.22 L2039.81 1214.22 L2040.4 1214.22 L2040.98 1214.22 L2041.57 1214.22 L2042.15 1214.22 L2042.74 1214.22 L2043.33 1214.22 L2043.91 1214.22 L2044.5 1214.22 L2045.09 1214.22 L2045.67 1214.22 L2046.26 1214.22 L2046.85 1214.22 L2047.43 1214.22 L2048.02 1214.22 L2048.6 1214.22 L2049.19 1214.22 L2049.78 1214.22 L2050.36 1214.22 L2050.95 1214.22 L2051.54 1214.22 L2052.12 1214.22 L2052.71 1214.22 L2053.3 1214.22 L2053.88 1214.22 L2054.47 1214.22 L2055.06 1214.22 L2055.64 1214.22 L2056.23 1214.22 L2056.81 1214.22 L2057.4 1214.22 L2057.99 1214.22 L2058.57 1214.22 L2059.16 1214.22 L2059.75 1214.22 L2060.33 1214.22 L2060.92 1214.22 L2061.51 1214.22 L2062.09 1214.22 L2062.68 1214.22 L2063.27 1214.22 L2063.85 1214.22 L2064.44 1214.22 L2065.02 1214.22 L2065.61 1214.22 L2066.2 1214.22 L2066.78 1214.22 L2067.37 1214.22 L2067.96 1214.22 L2068.54 1214.22 L2069.13 1214.22 L2069.72 1214.22 L2070.3 1214.22 L2070.89 1214.22 L2071.48 1214.22 L2072.06 1214.22 L2072.65 1214.22 L2073.23 1214.22 L2073.82 1214.22 L2074.41 1214.22 L2074.99 1214.22 L2075.58 1214.22 L2076.17 1214.22 L2076.75 1214.22 L2077.34 1214.22 L2077.93 1214.22 L2078.51 1214.22 L2079.1 1214.22 L2079.68 1214.22 L2080.27 1214.22 L2080.86 1214.22 L2081.44 1214.22 L2082.03 1214.22 L2082.62 1214.22 L2083.2 1214.22 L2083.79 1214.22 L2084.38 1214.22 L2084.96 1214.22 L2085.55 1214.22 L2086.14 1214.22 L2086.72 1214.22 L2087.31 1214.22 L2087.89 1214.22 L2088.48 1214.22 L2089.07 1214.22 L2089.65 1214.22 L2090.24 1214.22 L2090.83 1214.22 L2091.41 1214.22 L2092 1214.22 L2092.59 1214.22 L2093.17 1214.22 L2093.76 1214.22 L2094.35 1214.22 L2094.93 1214.22 L2095.52 1214.22 L2096.1 1214.22 L2096.69 1214.22 L2097.28 1214.22 L2097.86 1214.22 L2098.45 1214.22 L2099.04 1214.22 L2099.62 1214.22 L2100.21 1214.22 L2100.8 1214.22 L2101.38 1214.22 L2101.97 1214.22 L2102.55 1214.22 L2103.14 1214.22 L2103.73 1214.22 L2104.31 1214.22 L2104.9 1214.22 L2105.49 1214.22 L2106.07 1214.22 L2106.66 1214.22 L2107.25 1214.22 L2107.83 1214.22 L2108.42 1214.22 L2109.01 1214.22 L2109.59 1214.22 L2110.18 1214.22 L2110.76 1214.22 L2111.35 1214.22 L2111.94 1214.22 L2112.52 1214.22 L2113.11 1214.22 L2113.7 1214.22 L2114.28 1214.22 L2114.87 1214.22 L2115.46 1214.22 L2116.04 1214.22 L2116.63 1214.22 L2117.22 1214.22 L2117.8 1214.22 L2118.39 1214.22 L2118.97 1214.22 L2119.56 1214.22 L2120.15 1214.22 L2120.73 1214.22 L2121.32 1214.22 L2121.91 1214.22 L2122.49 1214.22 L2123.08 1214.22 L2123.67 1214.22 L2124.25 1214.22 L2124.84 1214.22 L2125.42 1214.22 L2126.01 1214.22 L2126.6 1214.22 L2127.18 1214.22 L2127.77 1214.22 L2128.36 1214.22 L2128.94 1214.22 L2129.53 1214.22 L2130.12 1214.22 L2130.7 1214.22 L2131.29 1214.22 L2131.88 1214.22 L2132.46 1214.22 L2133.05 1214.22 L2133.63 1214.22 L2134.22 1214.22 L2134.81 1214.22 L2135.39 1214.22 L2135.98 1214.22 L2136.57 1214.22 L2137.15 1214.22 L2137.74 1214.22 L2138.33 1214.22 L2138.91 1214.22 L2139.5 1214.22 L2140.09 1214.22 L2140.67 1214.22 L2141.26 1214.22 L2141.84 1214.22 L2142.43 1214.22 L2143.02 1214.22 L2143.6 1214.22 L2144.19 1214.22 L2144.78 1214.22 L2145.36 1214.22 L2145.95 1214.22 L2146.54 1214.22 L2147.12 1214.22 L2147.71 1214.22 L2148.3 1214.22 L2148.88 1214.22 L2149.47 1214.22 L2150.05 1214.22 L2150.64 1214.22 L2151.23 1214.22 L2151.81 1214.22 L2152.4 1214.22 L2152.99 1214.22 L2153.57 1214.22 L2154.16 1214.22 L2154.75 1214.22 L2155.33 1214.22 L2155.92 1214.22 L2156.5 1214.22 L2157.09 1214.22 L2157.68 1214.22 L2158.26 1214.22 L2158.26 1213.61 L2157.68 1213.61 L2157.09 1213.61 L2156.5 1213.61 L2155.92 1213.61 L2155.33 1213.61 L2154.75 1213.61 L2154.16 1213.61 L2153.57 1213.61 L2152.99 1213.61 L2152.4 1213.61 L2151.81 1213.61 L2151.23 1213.61 L2150.64 1213.61 L2150.05 1213.61 L2149.47 1213.61 L2148.88 1213.61 L2148.3 1213.61 L2147.71 1213.61 L2147.12 1213.61 L2146.54 1213.61 L2145.95 1213.61 L2145.36 1213.61 L2144.78 1213.61 L2144.19 1213.61 L2143.6 1213.61 L2143.02 1213.61 L2142.43 1213.61 L2141.84 1213.61 L2141.26 1213.61 L2140.67 1213.61 L2140.09 1213.61 L2139.5 1213.61 L2138.91 1213.61 L2138.33 1213.61 L2137.74 1213.61 L2137.15 1213.61 L2136.57 1213.61 L2135.98 1213.61 L2135.39 1213.61 L2134.81 1213.61 L2134.22 1213.61 L2133.63 1213.61 L2133.05 1213.61 L2132.46 1213.61 L2131.88 1213.61 L2131.29 1213.61 L2130.7 1213.61 L2130.12 1213.61 L2129.53 1213.61 L2128.94 1213.61 L2128.36 1213.61 L2127.77 1213.61 L2127.18 1213.61 L2126.6 1213.61 L2126.01 1213.61 L2125.42 1213.61 L2124.84 1213.61 L2124.25 1213.61 L2123.67 1213.61 L2123.08 1213.61 L2122.49 1213.61 L2121.91 1213.61 L2121.32 1213.61 L2120.73 1213.61 L2120.15 1213.61 L2119.56 1213.61 L2118.97 1213.61 L2118.39 1213.61 L2117.8 1213.61 L2117.22 1213.61 L2116.63 1213.61 L2116.04 1213.61 L2115.46 1213.61 L2114.87 1213.61 L2114.28 1213.61 L2113.7 1213.61 L2113.11 1213.61 L2112.52 1213.61 L2111.94 1213.61 L2111.35 1213.61 L2110.76 1213.61 L2110.18 1213.61 L2109.59 1213.61 L2109.01 1213.61 L2108.42 1213.61 L2107.83 1213.61 L2107.25 1213.61 L2106.66 1213.61 L2106.07 1213.61 L2105.49 1213.61 L2104.9 1213.61 L2104.31 1213.61 L2103.73 1213.61 L2103.14 1213.61 L2102.55 1213.61 L2101.97 1213.61 L2101.38 1213.61 L2100.8 1213.61 L2100.21 1213.61 L2099.62 1213.61 L2099.04 1213.61 L2098.45 1213.61 L2097.86 1213.61 L2097.28 1213.61 L2096.69 1213.61 L2096.1 1213.61 L2095.52 1213.61 L2094.93 1213.61 L2094.35 1213.61 L2093.76 1213.61 L2093.17 1213.61 L2092.59 1213.61 L2092 1213.61 L2091.41 1213.61 L2090.83 1213.61 L2090.24 1213.61 L2089.65 1213.61 L2089.07 1213.61 L2088.48 1213.61 L2087.89 1213.61 L2087.31 1213.61 L2086.72 1213.61 L2086.14 1213.61 L2085.55 1213.61 L2084.96 1213.61 L2084.38 1213.61 L2083.79 1213.61 L2083.2 1213.61 L2082.62 1213.61 L2082.03 1213.61 L2081.44 1213.61 L2080.86 1213.61 L2080.27 1213.61 L2079.68 1213.61 L2079.1 1213.61 L2078.51 1213.61 L2077.93 1213.61 L2077.34 1213.61 L2076.75 1213.61 L2076.17 1213.61 L2075.58 1213.61 L2074.99 1213.61 L2074.41 1213.61 L2073.82 1213.61 L2073.23 1213.61 L2072.65 1213.61 L2072.06 1213.61 L2071.48 1213.61 L2070.89 1213.61 L2070.3 1213.61 L2069.72 1213.61 L2069.13 1213.61 L2068.54 1213.61 L2067.96 1213.61 L2067.37 1213.61 L2066.78 1213.61 L2066.2 1213.61 L2065.61 1213.61 L2065.02 1213.61 L2064.44 1213.61 L2063.85 1213.61 L2063.27 1213.61 L2062.68 1213.61 L2062.09 1213.61 L2061.51 1213.61 L2060.92 1213.61 L2060.33 1213.61 L2059.75 1213.61 L2059.16 1213.61 L2058.57 1213.61 L2057.99 1213.61 L2057.4 1213.61 L2056.81 1213.61 L2056.23 1213.61 L2055.64 1213.61 L2055.06 1213.61 L2054.47 1213.61 L2053.88 1213.61 L2053.3 1213.61 L2052.71 1213.61 L2052.12 1213.61 L2051.54 1213.61 L2050.95 1213.61 L2050.36 1213.61 L2049.78 1213.61 L2049.19 1213.61 L2048.6 1213.61 L2048.02 1213.61 L2047.43 1213.61 L2046.85 1213.61 L2046.26 1213.61 L2045.67 1213.61 L2045.09 1213.61 L2044.5 1213.61 L2043.91 1213.61 L2043.33 1213.61 L2042.74 1213.61 L2042.15 1213.61 L2041.57 1213.61 L2040.98 1213.61 L2040.4 1213.61 L2039.81 1213.61 L2039.22 1213.61 L2038.64 1213.61 L2038.05 1213.61 L2037.46 1213.61 L2036.88 1213.61 L2036.29 1213.61 L2035.7 1213.61 L2035.12 1213.61 L2034.53 1213.61 L2033.94 1213.61 L2033.36 1213.61 L2032.77 1213.61 L2032.19 1213.61 L2031.6 1213.61 L2031.01 1213.61 L2030.43 1213.61 L2029.84 1213.61 L2029.25 1213.61 L2028.67 1213.61 L2028.08 1213.61 L2027.49 1213.61 L2026.91 1213.61 L2026.32 1213.61 L2025.73 1213.61 L2025.15 1213.61 L2024.56 1213.61 L2023.98 1213.61 L2023.39 1213.61 L2022.8 1213.61 L2022.22 1213.61 L2021.63 1213.61 L2021.04 1213.61 L2020.46 1213.61 L2019.87 1213.61 L2019.28 1213.61 L2018.7 1213.61 L2018.11 1213.61 L2017.53 1213.61 L2016.94 1213.61 L2016.35 1213.61 L2015.77 1213.61 L2015.18 1213.61 L2014.59 1213.61 L2014.01 1213.61 L2013.42 1213.61 L2012.83 1213.61 L2012.25 1213.61 L2011.66 1213.61 L2011.07 1213.61 L2010.49 1213.61 L2009.9 1213.61 L2009.32 1213.61 L2008.73 1213.61 L2008.14 1213.61 L2007.56 1213.61 L2006.97 1213.61 L2006.38 1213.61 L2005.8 1213.61 L2005.21 1213.61 L2004.62 1213.61 L2004.04 1213.61 L2003.45 1213.61 L2002.86 1213.61 L2002.28 1213.61 L2001.69 1213.61 L2001.11 1213.61 L2000.52 1213.61 L1999.93 1213.61 L1999.35 1213.61 L1998.76 1213.61 L1998.17 1213.61 L1997.59 1213.61 L1997 1213.61 L1996.41 1213.61 L1995.83 1213.61 L1995.24 1213.61 L1994.65 1213.61 L1994.07 1213.61 L1993.48 1213.61 L1992.9 1213.61 L1992.31 1213.61 L1991.72 1213.61 L1991.14 1213.61 L1990.55 1213.61 L1989.96 1213.61 L1989.38 1213.61 L1988.79 1213.61 L1988.2 1213.61 L1987.62 1213.61 L1987.03 1213.61 L1986.45 1213.61 L1985.86 1213.61 L1985.27 1213.61 L1984.69 1213.61 L1984.1 1213.61 L1983.51 1213.61 L1982.93 1213.61 L1982.34 1213.61 L1981.75 1213.61 L1981.17 1213.61 L1980.58 1213.61 L1979.99 1213.61 L1979.41 1213.61 L1978.82 1213.61 L1978.24 1213.61 L1977.65 1213.61 L1977.06 1213.61 L1976.48 1213.61 L1975.89 1213.61 L1975.3 1213.61 L1974.72 1213.61 L1974.13 1213.61 L1973.54 1213.61 L1972.96 1213.61 L1972.37 1213.61 L1971.78 1213.61 L1971.2 1213.61 L1970.61 1213.61 L1970.03 1213.61 L1969.44 1213.61 L1968.85 1213.61 L1968.27 1213.61 L1967.68 1213.61 L1967.09 1213.61 L1966.51 1213.61 L1965.92 1213.61 L1965.33 1213.61 L1964.75 1213.61 L1964.16 1213.61 L1963.58 1213.61 L1962.99 1213.61 L1962.4 1213.61 L1961.82 1213.61 L1961.23 1213.61 L1960.64 1213.61 L1960.06 1213.61 L1959.47 1213.61 L1958.88 1213.61 L1958.3 1213.61 L1957.71 1213.61 L1957.12 1213.61 L1956.54 1213.61 L1955.95 1213.61 L1955.37 1213.61 L1954.78 1213.61 L1954.19 1213.61 L1953.61 1213.61 L1953.02 1213.61 L1952.43 1213.61 L1951.85 1213.61 L1951.26 1213.61 L1950.67 1213.61 L1950.09 1213.61 L1949.5 1213.61 L1948.91 1213.61 L1948.33 1213.61 L1947.74 1213.61 L1947.16 1213.61 L1946.57 1213.61 L1945.98 1213.61 L1945.4 1213.61 L1944.81 1213.61 L1944.22 1213.61 L1943.64 1213.61 L1943.05 1213.61 L1942.46 1213.61 L1941.88 1213.61 L1941.29 1213.61 L1940.71 1213.61 L1940.12 1213.61 L1939.53 1213.61 L1938.95 1213.61 L1938.36 1213.61 L1937.77 1213.61 L1937.19 1213.61 L1936.6 1213.61 L1936.01 1213.61 L1935.43 1213.61 L1934.84 1213.61 L1934.25 1213.61 L1933.67 1213.61 L1933.08 1213.61 L1932.5 1213.61 L1931.91 1213.61 L1931.32 1213.61 L1930.74 1213.61 L1930.15 1213.61 L1929.56 1213.61 L1928.98 1213.61 L1928.39 1213.61 L1927.8 1213.61 L1927.22 1213.61 L1926.63 1213.61 L1926.04 1213.61 L1925.46 1213.61 L1924.87 1213.61 L1924.29 1213.61 L1923.7 1213.61 L1923.11 1213.61 L1922.53 1213.61 L1921.94 1213.61 L1921.35 1213.61 L1920.77 1213.61 L1920.18 1213.61 L1919.59 1213.61 L1919.01 1213.61 L1918.42 1213.61 L1917.83 1213.61 L1917.25 1213.61 L1916.66 1213.61 L1916.08 1213.61 L1915.49 1213.61 L1914.9 1213.61 L1914.32 1213.61 L1913.73 1213.61 L1913.14 1213.61 L1912.56 1213.61 L1911.97 1213.61 L1911.38 1213.61 L1910.8 1213.61 L1910.21 1213.61 L1909.63 1213.61 L1909.04 1213.61 L1908.45 1213.61 L1907.87 1213.61 L1907.28 1213.61 L1906.69 1213.61 L1906.11 1213.61 L1905.52 1213.61 L1904.93 1213.61 L1904.35 1213.61 L1903.76 1213.61 L1903.17 1213.61 L1902.59 1213.61 L1902 1213.61 L1901.42 1213.61 L1900.83 1213.61 L1900.24 1213.61 L1899.66 1213.61 L1899.07 1213.61 L1898.48 1213.61 L1897.9 1213.61 L1897.31 1213.61 L1896.72 1213.61 L1896.14 1213.61 L1895.55 1213.61 L1894.96 1213.61 L1894.38 1213.61 L1893.79 1213.61 L1893.21 1213.61 L1892.62 1213.61 L1892.03 1213.61 L1891.45 1213.61 L1890.86 1213.61 L1890.27 1213.61 L1889.69 1213.61 L1889.1 1213.61 L1888.51 1213.61 L1887.93 1213.61 L1887.34 1213.61 L1886.76 1213.61 L1886.17 1213.61 L1885.58 1213.61 L1885 1213.61 L1884.41 1213.61 L1883.82 1213.61 L1883.24 1213.61 L1882.65 1213.61 L1882.06 1213.61 L1881.48 1213.61 L1880.89 1213.61 L1880.3 1213.61 L1879.72 1213.61 L1879.13 1213.61 L1878.55 1213.61 L1877.96 1213.61 L1877.37 1213.61 L1876.79 1213.61 L1876.2 1213.61 L1875.61 1213.61 L1875.03 1213.61 L1874.44 1213.61 L1873.85 1213.61 L1873.27 1213.61 L1872.68 1213.61 L1872.09 1213.61 L1871.51 1213.61 L1870.92 1213.61 L1870.34 1213.61 L1869.75 1213.61 L1869.16 1213.61 L1868.58 1213.61 L1867.99 1213.61 L1867.4 1213.61 L1866.82 1213.61 L1866.23 1213.61 L1865.64 1213.61 L1865.06 1213.61 L1864.47 1213.61 L1863.88 1213.61 L1863.3 1213.61 L1862.71 1213.61 L1862.13 1213.61 L1861.54 1213.61 L1860.95 1213.61 L1860.37 1213.61 L1859.78 1213.61 L1859.19 1213.61 L1858.61 1213.61 L1858.02 1213.61 L1857.43 1213.61 L1856.85 1213.61 L1856.26 1213.61 L1855.68 1213.61 L1855.09 1213.61 L1854.5 1213.61 L1853.92 1213.61 L1853.33 1213.61 L1852.74 1213.61 L1852.16 1213.61 L1851.57 1213.61 L1850.98 1213.61 L1850.4 1213.61 L1849.81 1213.61 L1849.22 1213.61 L1848.64 1213.61 L1848.05 1213.61 L1847.47 1213.61 L1846.88 1213.61 L1846.29 1213.61 L1845.71 1213.61 L1845.12 1213.61 L1844.53 1213.61 L1843.95 1213.61 L1843.36 1213.61 L1842.77 1213.61 L1842.19 1213.61 L1841.6 1213.61 L1841.01 1213.61 L1840.43 1213.61 L1839.84 1213.61 L1839.26 1213.61 L1838.67 1213.61 L1838.08 1213.61 L1837.5 1213.61 L1836.91 1213.61 L1836.32 1213.61 L1835.74 1213.61 L1835.15 1213.61 L1834.56 1213.61 L1833.98 1213.61 L1833.39 1213.61 L1832.81 1213.61 L1832.22 1213.61 L1831.63 1213.61 L1831.05 1213.61 L1830.46 1213.61 L1829.87 1213.61 L1829.29 1213.61 L1828.7 1213.61 L1828.11 1213.61 L1827.53 1213.61 L1826.94 1213.61 L1826.35 1213.61 L1825.77 1213.61 L1825.18 1213.61 L1824.6 1213.61 L1824.01 1213.61 L1823.42 1213.61 L1822.84 1213.61 L1822.25 1213.61 L1821.66 1213.61 L1821.08 1213.61 L1820.49 1213.61 L1819.9 1213.61 L1819.32 1213.61 L1818.73 1213.61 L1818.14 1213.61 L1817.56 1213.61 L1816.97 1213.61 L1816.39 1213.61 L1815.8 1213.61 L1815.21 1213.61 L1814.63 1213.61 L1814.04 1213.61 L1813.45 1213.61 L1812.87 1213.61 L1812.28 1213.61 L1811.69 1213.61 L1811.11 1213.61 L1810.52 1213.61 L1809.94 1213.61 L1809.35 1213.61 L1808.76 1213.61 L1808.18 1213.61 L1807.59 1213.61 L1807 1213.61 L1806.42 1213.61 L1805.83 1213.61 L1805.24 1213.61 L1804.66 1213.61 L1804.07 1213.61 L1803.48 1213.61 L1802.9 1213.61 L1802.31 1213.61 L1801.73 1213.61 L1801.14 1213.61 L1800.55 1213.61 L1799.97 1213.61 L1799.38 1213.61 L1798.79 1213.61 L1798.21 1213.61 L1797.62 1213.61 L1797.03 1213.61 L1796.45 1213.61 L1795.86 1213.61 L1795.27 1213.61 L1794.69 1213.61 L1794.1 1213.61 L1793.52 1213.61 L1792.93 1213.61 L1792.34 1213.61 L1791.76 1213.61 L1791.17 1213.61 L1790.58 1213.61 L1790 1213.61 L1789.41 1213.61 L1788.82 1213.61 L1788.24 1213.61 L1787.65 1213.61 L1787.06 1213.61 L1786.48 1213.61 L1785.89 1213.61 L1785.31 1213.61 L1784.72 1213.61 L1784.13 1213.61 L1783.55 1213.61 L1782.96 1213.61 L1782.37 1213.61 L1781.79 1213.61 L1781.2 1213.61 L1780.61 1213.61 L1780.03 1213.61 L1779.44 1213.61 L1778.86 1213.61 L1778.27 1213.61 L1777.68 1213.61 L1777.1 1213.61 L1776.51 1213.61 L1775.92 1213.61 L1775.34 1213.61 L1774.75 1213.61 L1774.16 1213.61 L1773.58 1213.61 L1772.99 1213.61 L1772.4 1213.61 L1771.82 1213.61 L1771.23 1213.61 L1770.65 1213.61 L1770.06 1213.61 L1769.47 1213.61 L1768.89 1213.61 L1768.3 1213.61 L1767.71 1213.61 L1767.13 1213.61 L1766.54 1213.61 L1765.95 1213.61 L1765.37 1213.61 L1764.78 1213.61 L1764.19 1213.61 L1763.61 1213.61 L1763.02 1213.61 L1762.44 1213.61 L1761.85 1213.61 L1761.26 1213.61 L1760.68 1213.61 L1760.09 1213.61 L1759.5 1213.61 L1758.92 1213.61 L1758.33 1213.61 L1757.74 1213.61 L1757.16 1213.61 L1756.57 1213.61 L1755.99 1213.61 L1755.4 1213.61 L1754.81 1213.61 L1754.23 1213.61 L1753.64 1213.61 L1753.05 1213.61 L1752.47 1213.61 L1751.88 1213.61 L1751.29 1213.61 L1750.71 1213.61 L1750.12 1213.61 L1749.53 1213.61 L1748.95 1213.61 L1748.36 1213.61 L1747.78 1213.61 L1747.19 1213.61 L1746.6 1213.61 L1746.02 1213.61 L1745.43 1213.61 L1744.84 1213.61 L1744.26 1213.61 L1743.67 1213.61 L1743.08 1213.61 L1742.5 1213.61 L1741.91 1213.61 L1741.32 1213.61 L1740.74 1213.61 L1740.15 1213.61 L1739.57 1213.61 L1738.98 1213.61 L1738.39 1213.61 L1737.81 1213.61 L1737.22 1213.61 L1736.63 1213.61 L1736.05 1213.61 L1735.46 1213.61 L1734.87 1213.61 L1734.29 1213.61 L1733.7 1213.61 L1733.11 1213.61 L1732.53 1213.61 L1731.94 1213.61 L1731.36 1213.61 L1730.77 1213.61 L1730.18 1213.61 L1729.6 1213.61 L1729.01 1213.61 L1728.42 1213.61 L1727.84 1213.61 L1727.25 1213.61 L1726.66 1213.61 L1726.08 1213.61 L1725.49 1213.61 L1724.91 1213.61 L1724.32 1213.61 L1723.73 1213.61 L1723.15 1213.61 L1722.56 1213.61 L1721.97 1213.61 L1721.39 1213.61 L1720.8 1213.61 L1720.21 1213.61 L1719.63 1213.61 L1719.04 1213.61 L1718.45 1213.61 L1717.87 1213.61 L1717.28 1213.61 L1716.7 1213.61 L1716.11 1213.61 L1715.52 1213.61 L1714.94 1213.61 L1714.35 1213.61 L1713.76 1213.61 L1713.18 1213.61 L1712.59 1213.61 L1712 1213.61 L1711.42 1213.61 L1710.83 1213.61 L1710.24 1213.61 L1709.66 1213.61 L1709.07 1213.61 L1708.49 1213.61 L1707.9 1213.61 L1707.31 1213.61 L1706.73 1213.61 L1706.14 1213.61 L1705.55 1213.61 L1704.97 1213.61 L1704.38 1213.61 L1703.79 1213.61 L1703.21 1213.61 L1702.62 1213.61 L1702.04 1213.61 L1701.45 1213.61 L1700.86 1213.61 L1700.28 1213.61 L1699.69 1213.61 L1699.1 1213.61 L1698.52 1213.61 L1697.93 1213.61 L1697.34 1213.61 L1696.76 1213.61 L1696.17 1213.61 L1695.58 1213.61 L1695 1213.61 L1694.41 1213.61 L1693.83 1213.61 L1693.24 1213.61 L1692.65 1213.61 L1692.07 1213.61 L1691.48 1213.61 L1690.89 1213.61 L1690.31 1213.61 L1689.72 1213.61 L1689.13 1213.61 L1688.55 1213.61 L1687.96 1213.61 L1687.37 1213.61 L1686.79 1213.61 L1686.2 1213.61 L1685.62 1213.61 L1685.03 1213.61 L1684.44 1213.61 L1683.86 1213.61 L1683.27 1213.61 L1682.68 1213.61 L1682.1 1213.61 L1681.51 1213.61 L1680.92 1213.61 L1680.34 1213.61 L1679.75 1213.61 L1679.17 1213.61 L1678.58 1213.61 L1677.99 1213.61 L1677.41 1213.61 L1676.82 1213.61 L1676.23 1213.61 L1675.65 1213.61 L1675.06 1213.61 L1674.47 1213.61 L1673.89 1213.61 L1673.3 1213.61 L1672.71 1213.61 L1672.13 1213.61 L1671.54 1213.61 L1670.96 1213.61 L1670.37 1213.61 L1669.78 1213.61 L1669.2 1213.61 L1668.61 1213.61 L1668.02 1213.61 L1667.44 1213.61 L1666.85 1213.61 L1666.26 1213.61 L1665.68 1213.61 L1665.09 1213.61 L1664.5 1213.61 L1663.92 1213.61 L1663.33 1213.61 L1662.75 1213.61 L1662.16 1213.61 L1661.57 1213.61 L1660.99 1213.61 L1660.4 1213.61 L1659.81 1213.61 L1659.23 1213.61 L1658.64 1213.61 L1658.05 1213.61 L1657.47 1213.61 L1656.88 1213.61 L1656.29 1213.61 L1655.71 1213.61 L1655.12 1213.61 L1654.54 1213.61 L1653.95 1213.61 L1653.36 1213.61 L1652.78 1213.61 L1652.19 1213.61 L1651.6 1213.61 L1651.02 1213.61 L1650.43 1213.61 L1649.84 1213.61 L1649.26 1213.61 L1648.67 1213.61 L1648.09 1213.61 L1647.5 1213.61 L1646.91 1213.61 L1646.33 1213.61 L1645.74 1213.61 L1645.15 1213.61 L1644.57 1213.61 L1643.98 1213.61 L1643.39 1213.61 L1642.81 1213.61 L1642.22 1213.61 L1641.63 1213.61 L1641.05 1213.61 L1640.46 1213.61 L1639.88 1213.61 L1639.29 1213.61 L1638.7 1213.61 L1638.12 1213.61 L1637.53 1213.61 L1636.94 1213.61 L1636.36 1213.61 L1635.77 1213.61 L1635.18 1213.61 L1634.6 1213.61 L1634.01 1213.61 L1633.42 1213.61 L1632.84 1213.61 L1632.25 1213.61 L1631.67 1213.61 L1631.08 1213.61 L1630.49 1213.61 L1629.91 1213.61 L1629.32 1213.61 L1628.73 1213.61 L1628.15 1213.61 L1627.56 1213.61 L1626.97 1213.61 L1626.39 1213.61 L1625.8 1213.61 L1625.22 1213.61 L1624.63 1213.61 L1624.04 1213.61 L1623.46 1213.61 L1622.87 1213.61 L1622.28 1213.61 L1621.7 1213.61 L1621.11 1213.61 L1620.52 1213.61 L1619.94 1213.61 L1619.35 1213.61 L1618.76 1213.61 L1618.18 1213.61 L1617.59 1213.61 L1617.01 1213.61 L1616.42 1213.61 L1615.83 1213.61 L1615.25 1213.61 L1614.66 1213.61 L1614.07 1213.61 L1613.49 1213.61 L1612.9 1213.61 L1612.31 1213.61 L1611.73 1213.61 L1611.14 1213.61 L1610.55 1213.61 L1609.97 1213.61 L1609.38 1213.61 L1608.8 1213.61 L1608.21 1213.61 L1607.62 1213.61 L1607.04 1213.61 L1606.45 1213.61 L1605.86 1213.61 L1605.28 1213.61 L1604.69 1213.61 L1604.1 1213.61 L1603.52 1213.61 L1602.93 1213.61 L1602.34 1213.61 L1601.76 1213.61 L1601.17 1213.61 L1600.59 1213.61 L1600 1213.61 L1599.41 1213.61 L1598.83 1213.61 L1598.24 1213.61 L1597.65 1213.61 L1597.07 1213.61 L1596.48 1213.61 L1595.89 1213.61 L1595.31 1213.61 L1594.72 1213.61 L1594.14 1213.61 L1593.55 1213.61 L1592.96 1213.61 L1592.38 1213.61 L1591.79 1213.61 L1591.2 1213.61 L1590.62 1213.61 L1590.03 1213.61 L1589.44 1213.61 L1588.86 1213.61 L1588.27 1213.61 L1587.68 1213.61 L1587.1 1213.61 L1586.51 1213.61 L1585.93 1213.61 L1585.34 1213.61 L1584.75 1213.61 L1584.17 1213.61 L1583.58 1213.61 L1582.99 1213.61 L1582.41 1213.61 L1581.82 1213.61 L1581.23 1213.61 L1580.65 1213.61 L1580.06 1213.61 L1579.47 1213.61 L1578.89 1213.61 L1578.3 1213.61 L1577.72 1213.61 L1577.13 1213.61 L1576.54 1213.61 L1575.96 1213.61 L1575.37 1213.61 L1574.78 1213.61 L1574.2 1213.61 L1573.61 1213.61 L1573.02 1213.61 L1572.44 1213.61 L1571.85 1213.61 L1571.27 1213.61 L1570.68 1213.61 L1570.09 1213.61 L1569.51 1213.61 L1568.92 1213.61 L1568.33 1213.61 L1567.75 1213.61 L1567.16 1213.61 L1566.57 1213.61 L1565.99 1213.61 L1565.4 1213.61 L1564.81 1213.61 L1564.23 1213.61 L1563.64 1213.61 L1563.06 1213.61 L1562.47 1213.61 L1561.88 1213.61 L1561.3 1213.61 L1560.71 1213.61 L1560.12 1213.61 L1559.54 1213.61 L1558.95 1213.61 L1558.36 1213.61 L1557.78 1213.61 L1557.19 1213.61 L1556.6 1213.61 L1556.02 1213.61 L1555.43 1213.61 L1554.85 1213.61 L1554.26 1213.61 L1553.67 1213.61 L1553.09 1213.61 L1552.5 1213.61 L1551.91 1213.61 L1551.33 1213.61 L1550.74 1213.61 L1550.15 1213.61 L1549.57 1213.61 L1548.98 1213.61 L1548.4 1213.61 L1547.81 1213.61 L1547.22 1213.61 L1546.64 1213.61 L1546.05 1213.61 L1545.46 1213.61 L1544.88 1213.61 L1544.29 1213.61 L1543.7 1213.61 L1543.12 1213.61 L1542.53 1213.61 L1541.94 1213.61 L1541.36 1213.61 L1540.77 1213.61 L1540.19 1213.61 L1539.6 1213.61 L1539.01 1213.61 L1538.43 1213.61 L1537.84 1213.61 L1537.25 1213.61 L1536.67 1213.61 L1536.08 1213.61 L1535.49 1213.61 L1534.91 1213.61 L1534.32 1213.61 L1533.73 1213.61 L1533.15 1213.61 L1532.56 1213.61 L1531.98 1213.61 L1531.39 1213.61 L1530.8 1213.61 L1530.22 1213.61 L1529.63 1213.61 L1529.04 1213.61 L1528.46 1213.61 L1527.87 1213.61 L1527.28 1213.61 L1526.7 1213.61 L1526.11 1213.61 L1525.52 1213.61 L1524.94 1213.61 L1524.35 1213.61 L1523.77 1213.61 L1523.18 1213.61 L1522.59 1213.61 L1522.01 1213.61 L1521.42 1213.61 L1520.83 1213.61 L1520.25 1213.61 L1519.66 1213.61 L1519.07 1213.61 L1518.49 1213.61 L1517.9 1213.61 L1517.32 1213.61 L1516.73 1213.61 L1516.14 1213.61 L1515.56 1213.61 L1514.97 1213.61 L1514.38 1213.61 L1513.8 1213.61 L1513.21 1213.61 L1512.62 1213.61 L1512.04 1213.61 L1511.45 1213.61 L1510.86 1213.61 L1510.28 1213.61 L1509.69 1213.61 L1509.11 1213.61 L1508.52 1213.61 L1507.93 1213.61 L1507.35 1213.61 L1506.76 1213.61 L1506.17 1213.61 L1505.59 1213.61 L1505 1213.61 L1504.41 1213.61 L1503.83 1213.61 L1503.24 1213.61 L1502.65 1213.61 L1502.07 1213.61 L1501.48 1213.61 L1500.9 1213.61 L1500.31 1213.61 L1499.72 1213.61 L1499.14 1213.61 L1498.55 1213.61 L1497.96 1213.61 L1497.38 1213.61 L1496.79 1213.61 L1496.2 1213.61 L1495.62 1213.61 L1495.03 1213.61 L1494.45 1213.61 L1493.86 1213.61 L1493.27 1213.61 L1492.69 1213.61 L1492.1 1213.61 L1491.51 1213.61 L1490.93 1213.61 L1490.34 1213.61 L1489.75 1213.61 L1489.17 1213.61 L1488.58 1213.61 L1487.99 1213.61 L1487.41 1213.61 L1486.82 1213.61 L1486.24 1213.61 L1485.65 1213.61 L1485.06 1213.61 L1484.48 1213.61 L1483.89 1213.61 L1483.3 1213.61 L1482.72 1213.61 L1482.13 1213.61 L1481.54 1213.61 L1480.96 1213.61 L1480.37 1213.61 L1479.78 1213.61 L1479.2 1213.61 L1478.61 1213.61 L1478.03 1213.61 L1477.44 1213.61 L1476.85 1213.61 L1476.27 1213.61 L1475.68 1213.61 L1475.09 1213.61 L1474.51 1213.61 L1473.92 1213.61 L1473.33 1213.61 L1472.75 1213.61 L1472.16 1213.61 L1471.57 1213.61 L1470.99 1213.61 L1470.4 1213.61 L1469.82 1213.61 L1469.23 1213.61 L1468.64 1213.61 L1468.06 1213.61 L1467.47 1213.61 L1466.88 1213.61 L1466.3 1213.61 L1465.71 1213.61 L1465.12 1213.61 L1464.54 1213.61 L1463.95 1213.61 L1463.37 1213.61 L1462.78 1213.61 L1462.19 1213.61 L1461.61 1213.61 L1461.02 1213.61 L1460.43 1213.61 L1459.85 1213.61 L1459.26 1213.61 L1458.67 1213.61 L1458.09 1213.61 L1457.5 1213.61 L1456.91 1213.61 L1456.33 1213.61 L1455.74 1213.61 L1455.16 1213.61 L1454.57 1213.61 L1453.98 1213.61 L1453.4 1213.61 L1452.81 1213.61 L1452.22 1213.61 L1451.64 1213.61 L1451.05 1213.61 L1450.46 1213.61 L1449.88 1213.61 L1449.29 1213.61 L1448.7 1213.61 L1448.12 1213.61 L1447.53 1213.61 L1446.95 1213.61 L1446.36 1213.61 L1445.77 1213.61 L1445.19 1213.61 L1444.6 1213.61 L1444.01 1213.61 L1443.43 1213.61 L1442.84 1213.61 L1442.25 1213.61 L1441.67 1213.61 L1441.08 1213.61 L1440.5 1213.61 L1439.91 1213.61 L1439.32 1213.61 L1438.74 1213.61 L1438.15 1213.61 L1437.56 1213.61 L1436.98 1213.61 L1436.39 1213.61 L1435.8 1213.61 L1435.22 1213.61 L1434.63 1213.61 L1434.04 1213.61 L1433.46 1213.61 L1432.87 1213.61 L1432.29 1213.61 L1431.7 1213.61 L1431.11 1213.61 L1430.53 1213.61 L1429.94 1213.61 L1429.35 1213.61 L1428.77 1213.61 L1428.18 1213.61 L1427.59 1213.61 L1427.01 1213.61 L1426.42 1213.61 L1425.83 1213.61 L1425.25 1213.61 L1424.66 1213.61 L1424.08 1213.61 L1423.49 1213.61 L1422.9 1213.61 L1422.32 1213.61 L1421.73 1213.61 L1421.14 1213.61 L1420.56 1213.61 L1419.97 1213.61 L1419.38 1213.61 L1418.8 1213.61 L1418.21 1213.61 L1417.63 1213.61 L1417.04 1213.61 L1416.45 1213.61 L1415.87 1213.61 L1415.28 1213.61 L1414.69 1213.61 L1414.11 1213.61 L1413.52 1213.61 L1412.93 1213.61 L1412.35 1213.61 L1411.76 1213.61 L1411.17 1213.61 L1410.59 1213.61 L1410 1213.61 L1409.42 1213.61 L1408.83 1213.61 L1408.24 1213.61 L1407.66 1213.61 L1407.07 1213.61 L1406.48 1213.61 L1405.9 1213.61 L1405.31 1213.61 L1404.72 1213.61 L1404.14 1213.61 L1403.55 1213.61 L1402.96 1213.61 L1402.38 1213.61 L1401.79 1213.61 L1401.21 1213.61 L1400.62 1213.61 L1400.03 1213.61 L1399.45 1213.61 L1398.86 1213.61 L1398.27 1213.61 L1397.69 1213.61 L1397.1 1213.61 L1396.51 1213.61 L1395.93 1213.61 L1395.34 1213.61 L1394.75 1213.61 L1394.17 1213.61 L1393.58 1213.61 L1393 1213.61 L1392.41 1213.61 L1391.82 1213.61 L1391.24 1213.61 L1390.65 1213.61 L1390.06 1213.61 L1389.48 1213.61 L1388.89 1213.61 L1388.3 1213.61 L1387.72 1213.61 L1387.13 1213.61 L1386.55 1213.61 L1385.96 1213.61 L1385.37 1213.61 L1384.79 1213.61 L1384.2 1213.61 L1383.61 1213.61 L1383.03 1213.61 L1382.44 1213.61 L1381.85 1213.61 L1381.27 1213.61 L1380.68 1213.61 L1380.09 1213.61 L1379.51 1213.61 L1378.92 1213.61 L1378.34 1213.61 L1377.75 1213.61 L1377.16 1213.61 L1376.58 1213.61 L1375.99 1213.61 L1375.4 1213.61 L1374.82 1213.61 L1374.23 1213.61 L1373.64 1213.61 L1373.06 1213.61 L1372.47 1213.61 L1371.88 1213.61 L1371.3 1213.61 L1370.71 1213.61 L1370.13 1213.61 L1369.54 1213.61 L1368.95 1213.61 L1368.37 1213.61 L1367.78 1213.61 L1367.19 1213.61 L1366.61 1213.61 L1366.02 1213.61 L1365.43 1213.61 L1364.85 1213.61 L1364.26 1213.61 L1363.68 1213.61 L1363.09 1213.61 L1362.5 1213.61 L1361.92 1213.61 L1361.33 1213.61 L1360.74 1213.61 L1360.16 1213.61 L1359.57 1213.61 L1358.98 1213.61 L1358.4 1213.61 L1357.81 1213.61 L1357.22 1213.61 L1356.64 1213.61 L1356.05 1213.61 L1355.47 1213.61 L1354.88 1213.61 L1354.29 1213.61 L1353.71 1213.61 L1353.12 1213.61 L1352.53 1213.61 L1351.95 1213.61 L1351.36 1213.61 L1350.77 1213.61 L1350.19 1213.61 L1349.6 1213.61 L1349.01 1213.61 L1348.43 1213.61 L1347.84 1213.61 L1347.26 1213.61 L1346.67 1213.61 L1346.08 1213.61 L1345.5 1213.61 L1344.91 1213.61 L1344.32 1213.61 L1343.74 1213.61 L1343.15 1213.61 L1342.56 1213.61 L1341.98 1213.61 L1341.39 1213.61 L1340.8 1213.61 L1340.22 1213.61 L1339.63 1213.61 L1339.05 1213.61 L1338.46 1213.61 L1337.87 1213.61 L1337.29 1213.61 L1336.7 1213.61 L1336.11 1213.61 L1335.53 1213.61 L1334.94 1213.61 L1334.35 1213.61 L1333.77 1213.61 L1333.18 1213.61 L1332.6 1213.61 L1332.01 1213.61 L1331.42 1213.61 L1330.84 1213.61 L1330.25 1213.61 L1329.66 1213.61 L1329.08 1213.61 L1328.49 1213.61 L1327.9 1213.61 L1327.32 1213.61 L1326.73 1213.61 L1326.14 1213.61 L1325.56 1213.61 L1324.97 1213.61 L1324.39 1213.61 L1323.8 1213.61 L1323.21 1213.61 L1322.63 1213.61 L1322.04 1213.61 L1321.45 1213.61 L1320.87 1213.61 L1320.28 1213.61 L1319.69 1213.61 L1319.11 1213.61 L1318.52 1213.61 L1317.93 1213.61 L1317.35 1213.61 L1316.76 1213.61 L1316.18 1213.61 L1315.59 1213.61 L1315 1213.61 L1314.42 1213.61 L1313.83 1213.61 L1313.24 1213.61 L1312.66 1213.61 L1312.07 1213.61 L1311.48 1213.61 L1310.9 1213.61 L1310.31 1213.61 L1309.73 1213.61 L1309.14 1213.61 L1308.55 1213.61 L1307.97 1213.61 L1307.38 1213.61 L1306.79 1213.61 L1306.21 1213.61 L1305.62 1213.61 L1305.03 1213.61 L1304.45 1213.61 L1303.86 1213.61 L1303.27 1213.61 L1302.69 1213.61 L1302.1 1213.61 L1301.52 1213.61 L1300.93 1213.61 L1300.34 1213.61 L1299.76 1213.61 L1299.17 1213.61 L1298.58 1213.61 L1298 1213.61 L1297.41 1213.61 L1296.82 1213.61 L1296.24 1213.61 L1295.65 1213.61 L1295.06 1213.61 L1294.48 1213.61 L1293.89 1213.61 L1293.31 1213.61 L1292.72 1213.61 L1292.13 1213.61 L1291.55 1213.61 L1290.96 1213.61 L1290.37 1213.61 L1289.79 1213.61 L1289.2 1213.61 L1288.61 1213.61 L1288.03 1213.61 L1287.44 1213.61 L1286.86 1213.61 L1286.27 1213.61 L1285.68 1213.61 L1285.1 1213.61 L1284.51 1213.61 L1283.92 1213.61 L1283.34 1213.61 L1282.75 1213.61 L1282.16 1213.61 L1281.58 1213.61 L1280.99 1213.61 L1280.4 1213.61 L1279.82 1213.61 L1279.23 1213.61 L1278.65 1213.61 L1278.06 1213.61 L1277.47 1213.61 L1276.89 1213.61 L1276.3 1213.61 L1275.71 1213.61 L1275.13 1213.61 L1274.54 1213.61 L1273.95 1213.61 L1273.37 1213.61 L1272.78 1213.61 L1272.19 1213.61 L1271.61 1213.61 L1271.02 1213.61 L1270.44 1213.61 L1269.85 1213.61 L1269.26 1213.61 L1268.68 1213.61 L1268.09 1213.61 L1267.5 1213.61 L1266.92 1213.61 L1266.33 1213.61 L1265.74 1213.61 L1265.16 1213.61 L1264.57 1213.61 L1263.98 1213.61 L1263.4 1213.61 L1262.81 1213.61 L1262.23 1213.61 L1261.64 1213.61 L1261.05 1213.61 L1260.47 1213.61 L1259.88 1213.61 L1259.29 1213.61 L1258.71 1213.61 L1258.12 1213.61 L1257.53 1213.61 L1256.95 1213.61 L1256.36 1213.61 L1255.78 1213.61 L1255.19 1213.61 L1254.6 1213.61 L1254.02 1213.61 L1253.43 1213.61 L1252.84 1213.61 L1252.26 1213.61 L1251.67 1213.61 L1251.08 1213.61 L1250.5 1213.61 L1249.91 1213.61 L1249.32 1213.61 L1248.74 1213.61 L1248.15 1213.61 L1247.57 1213.61 L1246.98 1213.61 L1246.39 1213.61 L1245.81 1213.61 L1245.22 1213.61 L1244.63 1213.61 L1244.05 1213.61 L1243.46 1213.61 L1242.87 1213.61 L1242.29 1213.61 L1241.7 1213.61 L1241.11 1213.61 L1240.53 1213.61 L1239.94 1213.61 L1239.36 1213.61 L1238.77 1213.61 L1238.18 1213.61 L1237.6 1213.61 L1237.01 1213.61 L1236.42 1213.61 L1235.84 1213.61 L1235.25 1213.61 L1234.66 1213.61 L1234.08 1213.61 L1233.49 1213.61 L1232.91 1213.61 L1232.32 1213.61 L1231.73 1213.61 L1231.15 1213.61 L1230.56 1213.61 L1229.97 1213.61 L1229.39 1213.61 L1228.8 1213.61 L1228.21 1213.61 L1227.63 1213.61 L1227.04 1213.61 L1226.45 1213.61 L1225.87 1213.61 L1225.28 1213.61 L1224.7 1213.61 L1224.11 1213.61 L1223.52 1213.61 L1222.94 1213.61 L1222.35 1213.61 L1221.76 1213.61 L1221.18 1213.61 L1220.59 1213.61 L1220 1213.61 L1219.42 1213.61 L1218.83 1213.61 L1218.24 1213.61 L1217.66 1213.61 L1217.07 1213.61 L1216.49 1213.61 L1215.9 1213.61 L1215.31 1213.61 L1214.73 1213.61 L1214.14 1213.61 L1213.55 1213.61 L1212.97 1213.61 L1212.38 1213.61 L1211.79 1213.61 L1211.21 1213.61 L1210.62 1213.61 L1210.03 1213.61 L1209.45 1213.61 L1208.86 1213.61 L1208.28 1213.61 L1207.69 1213.61 L1207.1 1213.61 L1206.52 1213.61 L1205.93 1213.61 L1205.34 1213.61 L1204.76 1213.61 L1204.17 1213.61 L1203.58 1213.61 L1203 1213.61 L1202.41 1213.61 L1201.83 1213.61 L1201.24 1213.61 L1200.65 1213.61 L1200.07 1213.61 L1199.48 1213.61 L1198.89 1213.61 L1198.31 1213.61 L1197.72 1213.61 L1197.13 1213.61 L1196.55 1213.61 L1195.96 1213.61 L1195.37 1213.61 L1194.79 1213.61 L1194.2 1213.61 L1193.62 1213.61 L1193.03 1213.61 L1192.44 1213.61 L1191.86 1213.61 L1191.27 1213.61 L1190.68 1213.61 L1190.1 1213.61 L1189.51 1213.61 L1188.92 1213.61 L1188.34 1213.61 L1187.75 1213.61 L1187.16 1213.61 L1186.58 1213.61 L1185.99 1213.61 L1185.41 1213.61 L1184.82 1213.61 L1184.23 1213.61 L1183.65 1213.61 L1183.06 1213.61 L1182.47 1213.61 L1181.89 1213.61 L1181.3 1213.61 L1180.71 1213.61 L1180.13 1213.61 L1179.54 1213.61 L1178.96 1213.61 L1178.37 1213.61 L1177.78 1213.61 L1177.2 1213.61 L1176.61 1213.61 L1176.02 1213.61 L1175.44 1213.61 L1174.85 1213.61 L1174.26 1213.61 L1173.68 1213.61 L1173.09 1213.61 L1172.5 1213.61 L1171.92 1213.61 L1171.33 1213.61 L1170.75 1213.61 L1170.16 1213.61 L1169.57 1213.61 L1168.99 1213.61 L1168.4 1213.61 L1167.81 1213.61 L1167.23 1213.61 L1166.64 1213.61 L1166.05 1213.61 L1165.47 1213.61 L1164.88 1213.61 L1164.29 1213.61 L1163.71 1213.61 L1163.12 1213.61 L1162.54 1213.61 L1161.95 1213.61 L1161.36 1213.61 L1160.78 1213.61 L1160.19 1213.61 L1159.6 1213.61 L1159.02 1213.61 L1158.43 1213.61 L1157.84 1213.61 L1157.26 1213.61 L1156.67 1213.61 L1156.09 1213.61 L1155.5 1213.61 L1154.91 1213.61 L1154.33 1213.61 L1153.74 1213.61 L1153.15 1213.61 L1152.57 1213.61 L1151.98 1213.61 L1151.39 1213.61 L1150.81 1213.61 L1150.22 1213.61 L1149.63 1213.61 L1149.05 1213.61 L1148.46 1213.61 L1147.88 1213.61 L1147.29 1213.61 L1146.7 1213.61 L1146.12 1213.61 L1145.53 1213.61 L1144.94 1213.61 L1144.36 1213.61 L1143.77 1213.61 L1143.18 1213.61 L1142.6 1213.61 L1142.01 1213.61 L1141.42 1213.61 L1140.84 1213.61 L1140.25 1213.61 L1139.67 1213.61 L1139.08 1213.61 L1138.49 1213.61 L1137.91 1213.61 L1137.32 1213.61 L1136.73 1213.61 L1136.15 1213.61 L1135.56 1213.61 L1134.97 1213.61 L1134.39 1213.61 L1133.8 1213.61 L1133.21 1213.61 L1132.63 1213.61 L1132.04 1213.61 L1131.46 1213.61 L1130.87 1213.61 L1130.28 1213.61 L1129.7 1213.61 L1129.11 1213.61 L1128.52 1213.61 L1127.94 1213.61 L1127.35 1213.61 L1126.76 1213.61 L1126.18 1213.61 L1125.59 1213.61 L1125.01 1213.61 L1124.42 1213.61 L1123.83 1213.61 L1123.25 1213.61 L1122.66 1213.61 L1122.07 1213.61 L1121.49 1213.61 L1120.9 1213.61 L1120.31 1213.61 L1119.73 1213.61 L1119.14 1213.61 L1118.55 1213.61 L1117.97 1213.61 L1117.38 1213.61 L1116.8 1213.61 L1116.21 1213.61 L1115.62 1213.61 L1115.04 1213.61 L1114.45 1213.61 L1113.86 1213.61 L1113.28 1213.61 L1112.69 1213.61 L1112.1 1213.61 L1111.52 1213.61 L1110.93 1213.61 L1110.34 1213.61 L1109.76 1213.61 L1109.17 1213.61 L1108.59 1213.61 L1108 1213.61 L1107.41 1213.61 L1106.83 1213.61 L1106.24 1213.61 L1105.65 1213.61 L1105.07 1213.61 L1104.48 1213.61 L1103.89 1213.61 L1103.31 1213.61 L1102.72 1213.61 L1102.14 1213.61 L1101.55 1213.61 L1100.96 1213.61 L1100.38 1213.61 L1099.79 1213.61 L1099.2 1213.61 L1098.62 1213.61 L1098.03 1213.61 L1097.44 1213.61 L1096.86 1213.61 L1096.27 1213.61 L1095.68 1213.61 L1095.1 1213.61 L1094.51 1213.61 L1093.93 1213.61 L1093.34 1213.61 L1092.75 1213.61 L1092.17 1213.61 L1091.58 1213.61 L1090.99 1213.61 L1090.41 1213.61 L1089.82 1213.61 L1089.23 1213.61 L1088.65 1213.61 L1088.06 1213.61 L1087.47 1213.61 L1086.89 1213.61 L1086.3 1213.61 L1085.72 1213.61 L1085.13 1213.61 L1084.54 1213.61 L1083.96 1213.61 L1083.37 1213.61 L1082.78 1213.61 L1082.2 1213.61 L1081.61 1213.61 L1081.02 1213.61 L1080.44 1213.61 L1079.85 1213.61 L1079.26 1213.61 L1078.68 1213.61 L1078.09 1213.61 L1077.51 1213.61 L1076.92 1213.61 L1076.33 1213.61 L1075.75 1213.61 L1075.16 1213.61 L1074.57 1213.61 L1073.99 1213.61 L1073.4 1213.61 L1072.81 1213.61 L1072.23 1213.61 L1071.64 1213.61 L1071.06 1213.61 L1070.47 1213.61 L1069.88 1213.61 L1069.3 1213.61 L1068.71 1213.61 L1068.12 1213.61 L1067.54 1213.61 L1066.95 1213.61 L1066.36 1213.61 L1065.78 1213.61 L1065.19 1213.61 L1064.6 1213.61 L1064.02 1213.61 L1063.43 1213.61 L1062.85 1213.61 L1062.26 1213.61 L1061.67 1213.61 L1061.09 1213.61 L1060.5 1213.61 L1059.91 1213.61 L1059.33 1213.61 L1058.74 1213.61 L1058.15 1213.61 L1057.57 1213.61 L1056.98 1213.61 L1056.39 1213.61 L1055.81 1213.61 L1055.22 1213.61 L1054.64 1213.61 L1054.05 1213.61 L1053.46 1213.61 L1052.88 1213.61 L1052.29 1213.61 L1051.7 1213.61 L1051.12 1213.61 L1050.53 1213.61 L1049.94 1213.61 L1049.36 1213.61 L1048.77 1213.61 L1048.19 1213.61 L1047.6 1213.61 L1047.01 1213.61 L1046.43 1213.61 L1045.84 1213.61 L1045.25 1213.61 L1044.67 1213.61 L1044.08 1213.61 L1043.49 1213.61 L1042.91 1213.61 L1042.32 1213.61 L1041.73 1213.61 L1041.15 1213.61 L1040.56 1213.61 L1039.98 1213.61 L1039.39 1213.61 L1038.8 1213.61 L1038.22 1213.61 L1037.63 1213.61 L1037.04 1213.61 L1036.46 1213.61 L1035.87 1213.61 L1035.28 1213.61 L1034.7 1213.61 L1034.11 1213.61 L1033.52 1213.61 L1032.94 1213.61 L1032.35 1213.61 L1031.77 1213.61 L1031.18 1213.61 L1030.59 1213.61 L1030.01 1213.61 L1029.42 1213.61 L1028.83 1213.61 L1028.25 1213.61 L1027.66 1213.61 L1027.07 1213.61 L1026.49 1213.61 L1025.9 1213.61 L1025.32 1213.61 L1024.73 1213.61 L1024.14 1213.61 L1023.56 1213.61 L1022.97 1213.61 L1022.38 1213.61 L1021.8 1213.61 L1021.21 1213.61 L1020.62 1213.61 L1020.04 1213.61 L1019.45 1213.61 L1018.86 1213.61 L1018.28 1213.61 L1017.69 1213.61 L1017.11 1213.61 L1016.52 1213.61 L1015.93 1213.61 L1015.35 1213.61 L1014.76 1213.61 L1014.17 1213.61 L1013.59 1213.61 L1013 1213.61 L1012.41 1213.61 L1011.83 1213.61 L1011.24 1213.61 L1010.65 1213.61 L1010.07 1213.61 L1009.48 1213.61 L1008.9 1213.61 L1008.31 1213.61 L1007.72 1213.61 L1007.14 1213.61 L1006.55 1213.61 L1005.96 1213.61 L1005.38 1213.61 L1004.79 1213.61 L1004.2 1213.61 L1003.62 1213.61 L1003.03 1213.61 L1002.44 1213.61 L1001.86 1213.61 L1001.27 1213.61 L1000.69 1213.61 L1000.1 1213.61 L999.513 1213.61 L998.926 1213.61 L998.34 1213.61 L997.754 1213.61 L997.167 1213.61 L996.581 1213.61 L995.994 1213.61 L995.408 1213.61 L994.822 1213.61 L994.235 1213.61 L993.649 1213.61 L993.062 1213.61 L992.476 1213.61 L991.889 1213.61 L991.303 1213.61 L990.717 1213.61 L990.13 1213.61 L989.544 1213.61 L988.957 1213.61 L988.371 1213.61 L987.785 1213.61 L987.198 1213.61 L986.612 1213.61 L986.025 1213.61  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.92 986.612,1213.92 987.198,1213.92 987.785,1213.92 988.371,1213.92 988.957,1213.92 989.544,1213.92 990.13,1213.92 990.717,1213.92 991.303,1213.92 991.889,1213.92 992.476,1213.92 993.062,1213.92 993.649,1213.92 994.235,1213.92 994.822,1213.92 995.408,1213.92 995.994,1213.92 996.581,1213.92 997.167,1213.92 997.754,1213.92 998.34,1213.92 998.926,1213.92 999.513,1213.92 1000.1,1213.92 1000.69,1213.92 1001.27,1213.92 1001.86,1213.92 1002.44,1213.92 1003.03,1213.92 1003.62,1213.92 1004.2,1213.92 1004.79,1213.92 1005.38,1213.92 1005.96,1213.92 1006.55,1213.92 1007.14,1213.92 1007.72,1213.92 1008.31,1213.92 1008.9,1213.92 1009.48,1213.92 1010.07,1213.92 1010.65,1213.92 1011.24,1213.92 1011.83,1213.92 1012.41,1213.92 1013,1213.92 1013.59,1213.92 1014.17,1213.92 1014.76,1213.92 1015.35,1213.92 1015.93,1213.92 1016.52,1213.92 1017.11,1213.92 1017.69,1213.92 1018.28,1213.92 1018.86,1213.92 1019.45,1213.92 1020.04,1213.92 1020.62,1213.92 1021.21,1213.92 1021.8,1213.92 1022.38,1213.92 1022.97,1213.92 1023.56,1213.92 1024.14,1213.92 1024.73,1213.92 1025.32,1213.92 1025.9,1213.92 1026.49,1213.92 1027.07,1213.92 1027.66,1213.92 1028.25,1213.92 1028.83,1213.92 1029.42,1213.92 1030.01,1213.92 1030.59,1213.92 1031.18,1213.92 1031.77,1213.92 1032.35,1213.92 1032.94,1213.92 1033.52,1213.92 1034.11,1213.92 1034.7,1213.92 1035.28,1213.92 1035.87,1213.92 1036.46,1213.92 1037.04,1213.92 1037.63,1213.92 1038.22,1213.92 1038.8,1213.92 1039.39,1213.92 1039.98,1213.92 1040.56,1213.92 1041.15,1213.92 1041.73,1213.92 1042.32,1213.92 1042.91,1213.92 1043.49,1213.92 1044.08,1213.92 1044.67,1213.92 1045.25,1213.92 1045.84,1213.92 1046.43,1213.92 1047.01,1213.92 1047.6,1213.92 1048.19,1213.92 1048.77,1213.92 1049.36,1213.92 1049.94,1213.92 1050.53,1213.92 1051.12,1213.92 1051.7,1213.92 1052.29,1213.92 1052.88,1213.92 1053.46,1213.92 1054.05,1213.92 1054.64,1213.92 1055.22,1213.92 1055.81,1213.92 1056.39,1213.92 1056.98,1213.92 1057.57,1213.92 1058.15,1213.92 1058.74,1213.92 1059.33,1213.92 1059.91,1213.92 1060.5,1213.92 1061.09,1213.92 1061.67,1213.92 1062.26,1213.92 1062.85,1213.92 1063.43,1213.92 1064.02,1213.92 1064.6,1213.92 1065.19,1213.92 1065.78,1213.92 1066.36,1213.92 1066.95,1213.92 1067.54,1213.92 1068.12,1213.92 1068.71,1213.92 1069.3,1213.92 1069.88,1213.92 1070.47,1213.92 1071.06,1213.92 1071.64,1213.92 1072.23,1213.92 1072.81,1213.92 1073.4,1213.92 1073.99,1213.92 1074.57,1213.92 1075.16,1213.92 1075.75,1213.92 1076.33,1213.92 1076.92,1213.92 1077.51,1213.92 1078.09,1213.92 1078.68,1213.92 1079.26,1213.92 1079.85,1213.92 1080.44,1213.92 1081.02,1213.92 1081.61,1213.92 1082.2,1213.92 1082.78,1213.92 1083.37,1213.92 1083.96,1213.92 1084.54,1213.92 1085.13,1213.92 1085.72,1213.92 1086.3,1213.92 1086.89,1213.92 1087.47,1213.92 1088.06,1213.92 1088.65,1213.92 1089.23,1213.92 1089.82,1213.92 1090.41,1213.92 1090.99,1213.92 1091.58,1213.92 1092.17,1213.92 1092.75,1213.92 1093.34,1213.92 1093.93,1213.92 1094.51,1213.92 1095.1,1213.92 1095.68,1213.92 1096.27,1213.92 1096.86,1213.92 1097.44,1213.92 1098.03,1213.92 1098.62,1213.92 1099.2,1213.92 1099.79,1213.92 1100.38,1213.92 1100.96,1213.92 1101.55,1213.92 1102.14,1213.92 1102.72,1213.92 1103.31,1213.92 1103.89,1213.92 1104.48,1213.92 1105.07,1213.92 1105.65,1213.92 1106.24,1213.92 1106.83,1213.92 1107.41,1213.92 1108,1213.92 1108.59,1213.92 1109.17,1213.92 1109.76,1213.92 1110.34,1213.92 1110.93,1213.92 1111.52,1213.92 1112.1,1213.92 1112.69,1213.92 1113.28,1213.92 1113.86,1213.92 1114.45,1213.92 1115.04,1213.92 1115.62,1213.92 1116.21,1213.92 1116.8,1213.92 1117.38,1213.92 1117.97,1213.92 1118.55,1213.92 1119.14,1213.92 1119.73,1213.92 1120.31,1213.92 1120.9,1213.92 1121.49,1213.92 1122.07,1213.92 1122.66,1213.92 1123.25,1213.92 1123.83,1213.92 1124.42,1213.92 1125.01,1213.92 1125.59,1213.92 1126.18,1213.92 1126.76,1213.92 1127.35,1213.92 1127.94,1213.92 1128.52,1213.92 1129.11,1213.92 1129.7,1213.92 1130.28,1213.92 1130.87,1213.92 1131.46,1213.92 1132.04,1213.92 1132.63,1213.92 1133.21,1213.92 1133.8,1213.92 1134.39,1213.92 1134.97,1213.92 1135.56,1213.92 1136.15,1213.92 1136.73,1213.92 1137.32,1213.92 1137.91,1213.92 1138.49,1213.92 1139.08,1213.92 1139.67,1213.92 1140.25,1213.92 1140.84,1213.92 1141.42,1213.92 1142.01,1213.92 1142.6,1213.92 1143.18,1213.92 1143.77,1213.92 1144.36,1213.92 1144.94,1213.92 1145.53,1213.92 1146.12,1213.92 1146.7,1213.92 1147.29,1213.92 1147.88,1213.92 1148.46,1213.92 1149.05,1213.92 1149.63,1213.92 1150.22,1213.92 1150.81,1213.92 1151.39,1213.92 1151.98,1213.92 1152.57,1213.92 1153.15,1213.92 1153.74,1213.92 1154.33,1213.92 1154.91,1213.92 1155.5,1213.92 1156.09,1213.92 1156.67,1213.92 1157.26,1213.92 1157.84,1213.92 1158.43,1213.92 1159.02,1213.92 1159.6,1213.92 1160.19,1213.92 1160.78,1213.92 1161.36,1213.92 1161.95,1213.92 1162.54,1213.92 1163.12,1213.92 1163.71,1213.92 1164.29,1213.92 1164.88,1213.92 1165.47,1213.92 1166.05,1213.92 1166.64,1213.92 1167.23,1213.92 1167.81,1213.92 1168.4,1213.92 1168.99,1213.92 1169.57,1213.92 1170.16,1213.92 1170.75,1213.92 1171.33,1213.92 1171.92,1213.92 1172.5,1213.92 1173.09,1213.92 1173.68,1213.92 1174.26,1213.92 1174.85,1213.92 1175.44,1213.92 1176.02,1213.92 1176.61,1213.92 1177.2,1213.92 1177.78,1213.92 1178.37,1213.92 1178.96,1213.92 1179.54,1213.92 1180.13,1213.92 1180.71,1213.92 1181.3,1213.92 1181.89,1213.92 1182.47,1213.92 1183.06,1213.92 1183.65,1213.92 1184.23,1213.92 1184.82,1213.92 1185.41,1213.92 1185.99,1213.92 1186.58,1213.92 1187.16,1213.92 1187.75,1213.92 1188.34,1213.92 1188.92,1213.92 1189.51,1213.92 1190.1,1213.92 1190.68,1213.92 1191.27,1213.92 1191.86,1213.92 1192.44,1213.92 1193.03,1213.92 1193.62,1213.92 1194.2,1213.92 1194.79,1213.92 1195.37,1213.92 1195.96,1213.92 1196.55,1213.92 1197.13,1213.92 1197.72,1213.92 1198.31,1213.92 1198.89,1213.92 1199.48,1213.92 1200.07,1213.92 1200.65,1213.92 1201.24,1213.92 1201.83,1213.92 1202.41,1213.92 1203,1213.92 1203.58,1213.92 1204.17,1213.92 1204.76,1213.92 1205.34,1213.92 1205.93,1213.92 1206.52,1213.92 1207.1,1213.92 1207.69,1213.92 1208.28,1213.92 1208.86,1213.92 1209.45,1213.92 1210.03,1213.92 1210.62,1213.92 1211.21,1213.92 1211.79,1213.92 1212.38,1213.92 1212.97,1213.92 1213.55,1213.92 1214.14,1213.92 1214.73,1213.92 1215.31,1213.92 1215.9,1213.92 1216.49,1213.92 1217.07,1213.92 1217.66,1213.92 1218.24,1213.92 1218.83,1213.92 1219.42,1213.92 1220,1213.92 1220.59,1213.92 1221.18,1213.92 1221.76,1213.92 1222.35,1213.92 1222.94,1213.92 1223.52,1213.92 1224.11,1213.92 1224.7,1213.92 1225.28,1213.92 1225.87,1213.92 1226.45,1213.92 1227.04,1213.92 1227.63,1213.92 1228.21,1213.92 1228.8,1213.92 1229.39,1213.92 1229.97,1213.92 1230.56,1213.92 1231.15,1213.92 1231.73,1213.92 1232.32,1213.92 1232.91,1213.92 1233.49,1213.92 1234.08,1213.92 1234.66,1213.92 1235.25,1213.92 1235.84,1213.92 1236.42,1213.92 1237.01,1213.92 1237.6,1213.92 1238.18,1213.92 1238.77,1213.92 1239.36,1213.92 1239.94,1213.92 1240.53,1213.92 1241.11,1213.92 1241.7,1213.92 1242.29,1213.92 1242.87,1213.92 1243.46,1213.92 1244.05,1213.92 1244.63,1213.92 1245.22,1213.92 1245.81,1213.92 1246.39,1213.92 1246.98,1213.92 1247.57,1213.92 1248.15,1213.92 1248.74,1213.92 1249.32,1213.92 1249.91,1213.92 1250.5,1213.92 1251.08,1213.92 1251.67,1213.92 1252.26,1213.92 1252.84,1213.92 1253.43,1213.92 1254.02,1213.92 1254.6,1213.92 1255.19,1213.92 1255.78,1213.92 1256.36,1213.92 1256.95,1213.92 1257.53,1213.92 1258.12,1213.92 1258.71,1213.92 1259.29,1213.92 1259.88,1213.92 1260.47,1213.92 1261.05,1213.92 1261.64,1213.92 1262.23,1213.92 1262.81,1213.92 1263.4,1213.92 1263.98,1213.92 1264.57,1213.92 1265.16,1213.92 1265.74,1213.92 1266.33,1213.92 1266.92,1213.92 1267.5,1213.92 1268.09,1213.92 1268.68,1213.92 1269.26,1213.92 1269.85,1213.92 1270.44,1213.92 1271.02,1213.92 1271.61,1213.92 1272.19,1213.92 1272.78,1213.92 1273.37,1213.92 1273.95,1213.92 1274.54,1213.92 1275.13,1213.92 1275.71,1213.92 1276.3,1213.92 1276.89,1213.92 1277.47,1213.92 1278.06,1213.92 1278.65,1213.92 1279.23,1213.92 1279.82,1213.92 1280.4,1213.92 1280.99,1213.92 1281.58,1213.92 1282.16,1213.92 1282.75,1213.92 1283.34,1213.92 1283.92,1213.92 1284.51,1213.92 1285.1,1213.92 1285.68,1213.92 1286.27,1213.92 1286.86,1213.92 1287.44,1213.92 1288.03,1213.92 1288.61,1213.92 1289.2,1213.92 1289.79,1213.92 1290.37,1213.92 1290.96,1213.92 1291.55,1213.92 1292.13,1213.92 1292.72,1213.92 1293.31,1213.92 1293.89,1213.92 1294.48,1213.92 1295.06,1213.92 1295.65,1213.92 1296.24,1213.92 1296.82,1213.92 1297.41,1213.92 1298,1213.92 1298.58,1213.92 1299.17,1213.92 1299.76,1213.92 1300.34,1213.92 1300.93,1213.92 1301.52,1213.92 1302.1,1213.92 1302.69,1213.92 1303.27,1213.92 1303.86,1213.92 1304.45,1213.92 1305.03,1213.92 1305.62,1213.92 1306.21,1213.92 1306.79,1213.92 1307.38,1213.92 1307.97,1213.92 1308.55,1213.92 1309.14,1213.92 1309.73,1213.92 1310.31,1213.92 1310.9,1213.92 1311.48,1213.92 1312.07,1213.92 1312.66,1213.92 1313.24,1213.92 1313.83,1213.92 1314.42,1213.92 1315,1213.92 1315.59,1213.92 1316.18,1213.92 1316.76,1213.92 1317.35,1213.92 1317.93,1213.92 1318.52,1213.92 1319.11,1213.92 1319.69,1213.92 1320.28,1213.92 1320.87,1213.92 1321.45,1213.92 1322.04,1213.92 1322.63,1213.92 1323.21,1213.92 1323.8,1213.92 1324.39,1213.92 1324.97,1213.92 1325.56,1213.92 1326.14,1213.92 1326.73,1213.92 1327.32,1213.92 1327.9,1213.92 1328.49,1213.92 1329.08,1213.92 1329.66,1213.92 1330.25,1213.92 1330.84,1213.92 1331.42,1213.92 1332.01,1213.92 1332.6,1213.92 1333.18,1213.92 1333.77,1213.92 1334.35,1213.92 1334.94,1213.92 1335.53,1213.92 1336.11,1213.92 1336.7,1213.92 1337.29,1213.92 1337.87,1213.92 1338.46,1213.92 1339.05,1213.92 1339.63,1213.92 1340.22,1213.92 1340.8,1213.92 1341.39,1213.92 1341.98,1213.92 1342.56,1213.92 1343.15,1213.92 1343.74,1213.92 1344.32,1213.92 1344.91,1213.92 1345.5,1213.92 1346.08,1213.92 1346.67,1213.92 1347.26,1213.92 1347.84,1213.92 1348.43,1213.92 1349.01,1213.92 1349.6,1213.92 1350.19,1213.92 1350.77,1213.92 1351.36,1213.92 1351.95,1213.92 1352.53,1213.92 1353.12,1213.92 1353.71,1213.92 1354.29,1213.92 1354.88,1213.92 1355.47,1213.92 1356.05,1213.92 1356.64,1213.92 1357.22,1213.92 1357.81,1213.92 1358.4,1213.92 1358.98,1213.92 1359.57,1213.92 1360.16,1213.92 1360.74,1213.92 1361.33,1213.92 1361.92,1213.92 1362.5,1213.92 1363.09,1213.92 1363.68,1213.92 1364.26,1213.92 1364.85,1213.92 1365.43,1213.92 1366.02,1213.92 1366.61,1213.92 1367.19,1213.92 1367.78,1213.92 1368.37,1213.92 1368.95,1213.92 1369.54,1213.92 1370.13,1213.92 1370.71,1213.92 1371.3,1213.92 1371.88,1213.92 1372.47,1213.92 1373.06,1213.92 1373.64,1213.92 1374.23,1213.92 1374.82,1213.92 1375.4,1213.92 1375.99,1213.92 1376.58,1213.92 1377.16,1213.92 1377.75,1213.92 1378.34,1213.92 1378.92,1213.92 1379.51,1213.92 1380.09,1213.92 1380.68,1213.92 1381.27,1213.92 1381.85,1213.92 1382.44,1213.92 1383.03,1213.92 1383.61,1213.92 1384.2,1213.92 1384.79,1213.92 1385.37,1213.92 1385.96,1213.92 1386.55,1213.92 1387.13,1213.92 1387.72,1213.92 1388.3,1213.92 1388.89,1213.92 1389.48,1213.92 1390.06,1213.92 1390.65,1213.92 1391.24,1213.92 1391.82,1213.92 1392.41,1213.92 1393,1213.92 1393.58,1213.92 1394.17,1213.92 1394.75,1213.92 1395.34,1213.92 1395.93,1213.92 1396.51,1213.92 1397.1,1213.92 1397.69,1213.92 1398.27,1213.92 1398.86,1213.92 1399.45,1213.92 1400.03,1213.92 1400.62,1213.92 1401.21,1213.92 1401.79,1213.92 1402.38,1213.92 1402.96,1213.92 1403.55,1213.92 1404.14,1213.92 1404.72,1213.92 1405.31,1213.92 1405.9,1213.92 1406.48,1213.92 1407.07,1213.92 1407.66,1213.92 1408.24,1213.92 1408.83,1213.92 1409.42,1213.92 1410,1213.92 1410.59,1213.92 1411.17,1213.92 1411.76,1213.92 1412.35,1213.92 1412.93,1213.92 1413.52,1213.92 1414.11,1213.92 1414.69,1213.92 1415.28,1213.92 1415.87,1213.92 1416.45,1213.92 1417.04,1213.92 1417.63,1213.92 1418.21,1213.92 1418.8,1213.92 1419.38,1213.92 1419.97,1213.92 1420.56,1213.92 1421.14,1213.92 1421.73,1213.92 1422.32,1213.92 1422.9,1213.92 1423.49,1213.92 1424.08,1213.92 1424.66,1213.92 1425.25,1213.92 1425.83,1213.92 1426.42,1213.92 1427.01,1213.92 1427.59,1213.92 1428.18,1213.92 1428.77,1213.92 1429.35,1213.92 1429.94,1213.92 1430.53,1213.92 1431.11,1213.92 1431.7,1213.92 1432.29,1213.92 1432.87,1213.92 1433.46,1213.92 1434.04,1213.92 1434.63,1213.92 1435.22,1213.92 1435.8,1213.92 1436.39,1213.92 1436.98,1213.92 1437.56,1213.92 1438.15,1213.92 1438.74,1213.92 1439.32,1213.92 1439.91,1213.92 1440.5,1213.92 1441.08,1213.92 1441.67,1213.92 1442.25,1213.92 1442.84,1213.92 1443.43,1213.92 1444.01,1213.92 1444.6,1213.92 1445.19,1213.92 1445.77,1213.92 1446.36,1213.92 1446.95,1213.92 1447.53,1213.92 1448.12,1213.92 1448.7,1213.92 1449.29,1213.92 1449.88,1213.92 1450.46,1213.92 1451.05,1213.92 1451.64,1213.92 1452.22,1213.92 1452.81,1213.92 1453.4,1213.92 1453.98,1213.92 1454.57,1213.92 1455.16,1213.92 1455.74,1213.92 1456.33,1213.92 1456.91,1213.92 1457.5,1213.92 1458.09,1213.92 1458.67,1213.92 1459.26,1213.92 1459.85,1213.92 1460.43,1213.92 1461.02,1213.92 1461.61,1213.92 1462.19,1213.92 1462.78,1213.92 1463.37,1213.92 1463.95,1213.92 1464.54,1213.92 1465.12,1213.92 1465.71,1213.92 1466.3,1213.92 1466.88,1213.92 1467.47,1213.92 1468.06,1213.92 1468.64,1213.92 1469.23,1213.92 1469.82,1213.92 1470.4,1213.92 1470.99,1213.92 1471.57,1213.92 1472.16,1213.92 1472.75,1213.92 1473.33,1213.92 1473.92,1213.92 1474.51,1213.92 1475.09,1213.92 1475.68,1213.92 1476.27,1213.92 1476.85,1213.92 1477.44,1213.92 1478.03,1213.92 1478.61,1213.92 1479.2,1213.92 1479.78,1213.92 1480.37,1213.92 1480.96,1213.92 1481.54,1213.92 1482.13,1213.92 1482.72,1213.92 1483.3,1213.92 1483.89,1213.92 1484.48,1213.92 1485.06,1213.92 1485.65,1213.92 1486.24,1213.92 1486.82,1213.92 1487.41,1213.92 1487.99,1213.92 1488.58,1213.92 1489.17,1213.92 1489.75,1213.92 1490.34,1213.92 1490.93,1213.92 1491.51,1213.92 1492.1,1213.92 1492.69,1213.92 1493.27,1213.92 1493.86,1213.92 1494.45,1213.92 1495.03,1213.92 1495.62,1213.92 1496.2,1213.92 1496.79,1213.92 1497.38,1213.92 1497.96,1213.92 1498.55,1213.92 1499.14,1213.92 1499.72,1213.92 1500.31,1213.92 1500.9,1213.92 1501.48,1213.92 1502.07,1213.92 1502.65,1213.92 1503.24,1213.92 1503.83,1213.92 1504.41,1213.92 1505,1213.92 1505.59,1213.92 1506.17,1213.92 1506.76,1213.92 1507.35,1213.92 1507.93,1213.92 1508.52,1213.92 1509.11,1213.92 1509.69,1213.92 1510.28,1213.92 1510.86,1213.92 1511.45,1213.92 1512.04,1213.92 1512.62,1213.92 1513.21,1213.92 1513.8,1213.92 1514.38,1213.92 1514.97,1213.92 1515.56,1213.92 1516.14,1213.92 1516.73,1213.92 1517.32,1213.92 1517.9,1213.92 1518.49,1213.92 1519.07,1213.92 1519.66,1213.92 1520.25,1213.92 1520.83,1213.92 1521.42,1213.92 1522.01,1213.92 1522.59,1213.92 1523.18,1213.92 1523.77,1213.92 1524.35,1213.92 1524.94,1213.92 1525.52,1213.92 1526.11,1213.92 1526.7,1213.92 1527.28,1213.92 1527.87,1213.92 1528.46,1213.92 1529.04,1213.92 1529.63,1213.92 1530.22,1213.92 1530.8,1213.92 1531.39,1213.92 1531.98,1213.92 1532.56,1213.92 1533.15,1213.92 1533.73,1213.92 1534.32,1213.92 1534.91,1213.92 1535.49,1213.92 1536.08,1213.92 1536.67,1213.92 1537.25,1213.92 1537.84,1213.92 1538.43,1213.92 1539.01,1213.92 1539.6,1213.92 1540.19,1213.92 1540.77,1213.92 1541.36,1213.92 1541.94,1213.92 1542.53,1213.92 1543.12,1213.92 1543.7,1213.92 1544.29,1213.92 1544.88,1213.92 1545.46,1213.92 1546.05,1213.92 1546.64,1213.92 1547.22,1213.92 1547.81,1213.92 1548.4,1213.92 1548.98,1213.92 1549.57,1213.92 1550.15,1213.92 1550.74,1213.92 1551.33,1213.92 1551.91,1213.92 1552.5,1213.92 1553.09,1213.92 1553.67,1213.92 1554.26,1213.92 1554.85,1213.92 1555.43,1213.92 1556.02,1213.92 1556.6,1213.92 1557.19,1213.92 1557.78,1213.92 1558.36,1213.92 1558.95,1213.92 1559.54,1213.92 1560.12,1213.92 1560.71,1213.92 1561.3,1213.92 1561.88,1213.92 1562.47,1213.92 1563.06,1213.92 1563.64,1213.92 1564.23,1213.92 1564.81,1213.92 1565.4,1213.92 1565.99,1213.92 1566.57,1213.92 1567.16,1213.92 1567.75,1213.92 1568.33,1213.92 1568.92,1213.92 1569.51,1213.92 1570.09,1213.92 1570.68,1213.92 1571.27,1213.92 1571.85,1213.92 1572.44,1213.92 1573.02,1213.92 1573.61,1213.92 1574.2,1213.92 1574.78,1213.92 1575.37,1213.92 1575.96,1213.92 1576.54,1213.92 1577.13,1213.92 1577.72,1213.92 1578.3,1213.92 1578.89,1213.92 1579.47,1213.92 1580.06,1213.92 1580.65,1213.92 1581.23,1213.92 1581.82,1213.92 1582.41,1213.92 1582.99,1213.92 1583.58,1213.92 1584.17,1213.92 1584.75,1213.92 1585.34,1213.92 1585.93,1213.92 1586.51,1213.92 1587.1,1213.92 1587.68,1213.92 1588.27,1213.92 1588.86,1213.92 1589.44,1213.92 1590.03,1213.92 1590.62,1213.92 1591.2,1213.92 1591.79,1213.92 1592.38,1213.92 1592.96,1213.92 1593.55,1213.92 1594.14,1213.92 1594.72,1213.92 1595.31,1213.92 1595.89,1213.92 1596.48,1213.92 1597.07,1213.92 1597.65,1213.92 1598.24,1213.92 1598.83,1213.92 1599.41,1213.92 1600,1213.92 1600.59,1213.92 1601.17,1213.92 1601.76,1213.92 1602.34,1213.92 1602.93,1213.92 1603.52,1213.92 1604.1,1213.92 1604.69,1213.92 1605.28,1213.92 1605.86,1213.92 1606.45,1213.92 1607.04,1213.92 1607.62,1213.92 1608.21,1213.92 1608.8,1213.92 1609.38,1213.92 1609.97,1213.92 1610.55,1213.92 1611.14,1213.92 1611.73,1213.92 1612.31,1213.92 1612.9,1213.92 1613.49,1213.92 1614.07,1213.92 1614.66,1213.92 1615.25,1213.92 1615.83,1213.92 1616.42,1213.92 1617.01,1213.92 1617.59,1213.92 1618.18,1213.92 1618.76,1213.92 1619.35,1213.92 1619.94,1213.92 1620.52,1213.92 1621.11,1213.92 1621.7,1213.92 1622.28,1213.92 1622.87,1213.92 1623.46,1213.92 1624.04,1213.92 1624.63,1213.92 1625.22,1213.92 1625.8,1213.92 1626.39,1213.92 1626.97,1213.92 1627.56,1213.92 1628.15,1213.92 1628.73,1213.92 1629.32,1213.92 1629.91,1213.92 1630.49,1213.92 1631.08,1213.92 1631.67,1213.92 1632.25,1213.92 1632.84,1213.92 1633.42,1213.92 1634.01,1213.92 1634.6,1213.92 1635.18,1213.92 1635.77,1213.92 1636.36,1213.92 1636.94,1213.92 1637.53,1213.92 1638.12,1213.92 1638.7,1213.92 1639.29,1213.92 1639.88,1213.92 1640.46,1213.92 1641.05,1213.92 1641.63,1213.92 1642.22,1213.92 1642.81,1213.92 1643.39,1213.92 1643.98,1213.92 1644.57,1213.92 1645.15,1213.92 1645.74,1213.92 1646.33,1213.92 1646.91,1213.92 1647.5,1213.92 1648.09,1213.92 1648.67,1213.92 1649.26,1213.92 1649.84,1213.92 1650.43,1213.92 1651.02,1213.92 1651.6,1213.92 1652.19,1213.92 1652.78,1213.92 1653.36,1213.92 1653.95,1213.92 1654.54,1213.92 1655.12,1213.92 1655.71,1213.92 1656.29,1213.92 1656.88,1213.92 1657.47,1213.92 1658.05,1213.92 1658.64,1213.92 1659.23,1213.92 1659.81,1213.92 1660.4,1213.92 1660.99,1213.92 1661.57,1213.92 1662.16,1213.92 1662.75,1213.92 1663.33,1213.92 1663.92,1213.92 1664.5,1213.92 1665.09,1213.92 1665.68,1213.92 1666.26,1213.92 1666.85,1213.92 1667.44,1213.92 1668.02,1213.92 1668.61,1213.92 1669.2,1213.92 1669.78,1213.92 1670.37,1213.92 1670.96,1213.92 1671.54,1213.92 1672.13,1213.92 1672.71,1213.92 1673.3,1213.92 1673.89,1213.92 1674.47,1213.92 1675.06,1213.92 1675.65,1213.92 1676.23,1213.92 1676.82,1213.92 1677.41,1213.92 1677.99,1213.92 1678.58,1213.92 1679.17,1213.92 1679.75,1213.92 1680.34,1213.92 1680.92,1213.92 1681.51,1213.92 1682.1,1213.92 1682.68,1213.92 1683.27,1213.92 1683.86,1213.92 1684.44,1213.92 1685.03,1213.92 1685.62,1213.92 1686.2,1213.92 1686.79,1213.92 1687.37,1213.92 1687.96,1213.92 1688.55,1213.92 1689.13,1213.92 1689.72,1213.92 1690.31,1213.92 1690.89,1213.92 1691.48,1213.92 1692.07,1213.92 1692.65,1213.92 1693.24,1213.92 1693.83,1213.92 1694.41,1213.92 1695,1213.92 1695.58,1213.92 1696.17,1213.92 1696.76,1213.92 1697.34,1213.92 1697.93,1213.92 1698.52,1213.92 1699.1,1213.92 1699.69,1213.92 1700.28,1213.92 1700.86,1213.92 1701.45,1213.92 1702.04,1213.92 1702.62,1213.92 1703.21,1213.92 1703.79,1213.92 1704.38,1213.92 1704.97,1213.92 1705.55,1213.92 1706.14,1213.92 1706.73,1213.92 1707.31,1213.92 1707.9,1213.92 1708.49,1213.92 1709.07,1213.92 1709.66,1213.92 1710.24,1213.92 1710.83,1213.92 1711.42,1213.92 1712,1213.92 1712.59,1213.92 1713.18,1213.92 1713.76,1213.92 1714.35,1213.92 1714.94,1213.92 1715.52,1213.92 1716.11,1213.92 1716.7,1213.92 1717.28,1213.92 1717.87,1213.92 1718.45,1213.92 1719.04,1213.92 1719.63,1213.92 1720.21,1213.92 1720.8,1213.92 1721.39,1213.92 1721.97,1213.92 1722.56,1213.92 1723.15,1213.92 1723.73,1213.92 1724.32,1213.92 1724.91,1213.92 1725.49,1213.92 1726.08,1213.92 1726.66,1213.92 1727.25,1213.92 1727.84,1213.92 1728.42,1213.92 1729.01,1213.92 1729.6,1213.92 1730.18,1213.92 1730.77,1213.92 1731.36,1213.92 1731.94,1213.92 1732.53,1213.92 1733.11,1213.92 1733.7,1213.92 1734.29,1213.92 1734.87,1213.92 1735.46,1213.92 1736.05,1213.92 1736.63,1213.92 1737.22,1213.92 1737.81,1213.92 1738.39,1213.92 1738.98,1213.92 1739.57,1213.92 1740.15,1213.92 1740.74,1213.92 1741.32,1213.92 1741.91,1213.92 1742.5,1213.92 1743.08,1213.92 1743.67,1213.92 1744.26,1213.92 1744.84,1213.92 1745.43,1213.92 1746.02,1213.92 1746.6,1213.92 1747.19,1213.92 1747.78,1213.92 1748.36,1213.92 1748.95,1213.92 1749.53,1213.92 1750.12,1213.92 1750.71,1213.92 1751.29,1213.92 1751.88,1213.92 1752.47,1213.92 1753.05,1213.92 1753.64,1213.92 1754.23,1213.92 1754.81,1213.92 1755.4,1213.92 1755.99,1213.92 1756.57,1213.92 1757.16,1213.92 1757.74,1213.92 1758.33,1213.92 1758.92,1213.92 1759.5,1213.92 1760.09,1213.92 1760.68,1213.92 1761.26,1213.92 1761.85,1213.92 1762.44,1213.92 1763.02,1213.92 1763.61,1213.92 1764.19,1213.92 1764.78,1213.92 1765.37,1213.92 1765.95,1213.92 1766.54,1213.92 1767.13,1213.92 1767.71,1213.92 1768.3,1213.92 1768.89,1213.92 1769.47,1213.92 1770.06,1213.92 1770.65,1213.92 1771.23,1213.92 1771.82,1213.92 1772.4,1213.92 1772.99,1213.92 1773.58,1213.92 1774.16,1213.92 1774.75,1213.92 1775.34,1213.92 1775.92,1213.92 1776.51,1213.92 1777.1,1213.92 1777.68,1213.92 1778.27,1213.92 1778.86,1213.92 1779.44,1213.92 1780.03,1213.92 1780.61,1213.92 1781.2,1213.92 1781.79,1213.92 1782.37,1213.92 1782.96,1213.92 1783.55,1213.92 1784.13,1213.92 1784.72,1213.92 1785.31,1213.92 1785.89,1213.92 1786.48,1213.92 1787.06,1213.92 1787.65,1213.92 1788.24,1213.92 1788.82,1213.92 1789.41,1213.92 1790,1213.92 1790.58,1213.92 1791.17,1213.92 1791.76,1213.92 1792.34,1213.92 1792.93,1213.92 1793.52,1213.92 1794.1,1213.92 1794.69,1213.92 1795.27,1213.92 1795.86,1213.92 1796.45,1213.92 1797.03,1213.92 1797.62,1213.92 1798.21,1213.92 1798.79,1213.92 1799.38,1213.92 1799.97,1213.92 1800.55,1213.92 1801.14,1213.92 1801.73,1213.92 1802.31,1213.92 1802.9,1213.92 1803.48,1213.92 1804.07,1213.92 1804.66,1213.92 1805.24,1213.92 1805.83,1213.92 1806.42,1213.92 1807,1213.92 1807.59,1213.92 1808.18,1213.92 1808.76,1213.92 1809.35,1213.92 1809.94,1213.92 1810.52,1213.92 1811.11,1213.92 1811.69,1213.92 1812.28,1213.92 1812.87,1213.92 1813.45,1213.92 1814.04,1213.92 1814.63,1213.92 1815.21,1213.92 1815.8,1213.92 1816.39,1213.92 1816.97,1213.92 1817.56,1213.92 1818.14,1213.92 1818.73,1213.92 1819.32,1213.92 1819.9,1213.92 1820.49,1213.92 1821.08,1213.92 1821.66,1213.92 1822.25,1213.92 1822.84,1213.92 1823.42,1213.92 1824.01,1213.92 1824.6,1213.92 1825.18,1213.92 1825.77,1213.92 1826.35,1213.92 1826.94,1213.92 1827.53,1213.92 1828.11,1213.92 1828.7,1213.92 1829.29,1213.92 1829.87,1213.92 1830.46,1213.92 1831.05,1213.92 1831.63,1213.92 1832.22,1213.92 1832.81,1213.92 1833.39,1213.92 1833.98,1213.92 1834.56,1213.92 1835.15,1213.92 1835.74,1213.92 1836.32,1213.92 1836.91,1213.92 1837.5,1213.92 1838.08,1213.92 1838.67,1213.92 1839.26,1213.92 1839.84,1213.92 1840.43,1213.92 1841.01,1213.92 1841.6,1213.92 1842.19,1213.92 1842.77,1213.92 1843.36,1213.92 1843.95,1213.92 1844.53,1213.92 1845.12,1213.92 1845.71,1213.92 1846.29,1213.92 1846.88,1213.92 1847.47,1213.92 1848.05,1213.92 1848.64,1213.92 1849.22,1213.92 1849.81,1213.92 1850.4,1213.92 1850.98,1213.92 1851.57,1213.92 1852.16,1213.92 1852.74,1213.92 1853.33,1213.92 1853.92,1213.92 1854.5,1213.92 1855.09,1213.92 1855.68,1213.92 1856.26,1213.92 1856.85,1213.92 1857.43,1213.92 1858.02,1213.92 1858.61,1213.92 1859.19,1213.92 1859.78,1213.92 1860.37,1213.92 1860.95,1213.92 1861.54,1213.92 1862.13,1213.92 1862.71,1213.92 1863.3,1213.92 1863.88,1213.92 1864.47,1213.92 1865.06,1213.92 1865.64,1213.92 1866.23,1213.92 1866.82,1213.92 1867.4,1213.92 1867.99,1213.92 1868.58,1213.92 1869.16,1213.92 1869.75,1213.92 1870.34,1213.92 1870.92,1213.92 1871.51,1213.92 1872.09,1213.92 1872.68,1213.92 1873.27,1213.92 1873.85,1213.92 1874.44,1213.92 1875.03,1213.92 1875.61,1213.92 1876.2,1213.92 1876.79,1213.92 1877.37,1213.92 1877.96,1213.92 1878.55,1213.92 1879.13,1213.92 1879.72,1213.92 1880.3,1213.92 1880.89,1213.92 1881.48,1213.92 1882.06,1213.92 1882.65,1213.92 1883.24,1213.92 1883.82,1213.92 1884.41,1213.92 1885,1213.92 1885.58,1213.92 1886.17,1213.92 1886.76,1213.92 1887.34,1213.92 1887.93,1213.92 1888.51,1213.92 1889.1,1213.92 1889.69,1213.92 1890.27,1213.92 1890.86,1213.92 1891.45,1213.92 1892.03,1213.92 1892.62,1213.92 1893.21,1213.92 1893.79,1213.92 1894.38,1213.92 1894.96,1213.92 1895.55,1213.92 1896.14,1213.92 1896.72,1213.92 1897.31,1213.92 1897.9,1213.92 1898.48,1213.92 1899.07,1213.92 1899.66,1213.92 1900.24,1213.92 1900.83,1213.92 1901.42,1213.92 1902,1213.92 1902.59,1213.92 1903.17,1213.92 1903.76,1213.92 1904.35,1213.92 1904.93,1213.92 1905.52,1213.92 1906.11,1213.92 1906.69,1213.92 1907.28,1213.92 1907.87,1213.92 1908.45,1213.92 1909.04,1213.92 1909.63,1213.92 1910.21,1213.92 1910.8,1213.92 1911.38,1213.92 1911.97,1213.92 1912.56,1213.92 1913.14,1213.92 1913.73,1213.92 1914.32,1213.92 1914.9,1213.92 1915.49,1213.92 1916.08,1213.92 1916.66,1213.92 1917.25,1213.92 1917.83,1213.92 1918.42,1213.92 1919.01,1213.92 1919.59,1213.92 1920.18,1213.92 1920.77,1213.92 1921.35,1213.92 1921.94,1213.92 1922.53,1213.92 1923.11,1213.92 1923.7,1213.92 1924.29,1213.92 1924.87,1213.92 1925.46,1213.92 1926.04,1213.92 1926.63,1213.92 1927.22,1213.92 1927.8,1213.92 1928.39,1213.92 1928.98,1213.92 1929.56,1213.92 1930.15,1213.92 1930.74,1213.92 1931.32,1213.92 1931.91,1213.92 1932.5,1213.92 1933.08,1213.92 1933.67,1213.92 1934.25,1213.92 1934.84,1213.92 1935.43,1213.92 1936.01,1213.92 1936.6,1213.92 1937.19,1213.92 1937.77,1213.92 1938.36,1213.92 1938.95,1213.92 1939.53,1213.92 1940.12,1213.92 1940.71,1213.92 1941.29,1213.92 1941.88,1213.92 1942.46,1213.92 1943.05,1213.92 1943.64,1213.92 1944.22,1213.92 1944.81,1213.92 1945.4,1213.92 1945.98,1213.92 1946.57,1213.92 1947.16,1213.92 1947.74,1213.92 1948.33,1213.92 1948.91,1213.92 1949.5,1213.92 1950.09,1213.92 1950.67,1213.92 1951.26,1213.92 1951.85,1213.92 1952.43,1213.92 1953.02,1213.92 1953.61,1213.92 1954.19,1213.92 1954.78,1213.92 1955.37,1213.92 1955.95,1213.92 1956.54,1213.92 1957.12,1213.92 1957.71,1213.92 1958.3,1213.92 1958.88,1213.92 1959.47,1213.92 1960.06,1213.92 1960.64,1213.92 1961.23,1213.92 1961.82,1213.92 1962.4,1213.92 1962.99,1213.92 1963.58,1213.92 1964.16,1213.92 1964.75,1213.92 1965.33,1213.92 1965.92,1213.92 1966.51,1213.92 1967.09,1213.92 1967.68,1213.92 1968.27,1213.92 1968.85,1213.92 1969.44,1213.92 1970.03,1213.92 1970.61,1213.92 1971.2,1213.92 1971.78,1213.92 1972.37,1213.92 1972.96,1213.92 1973.54,1213.92 1974.13,1213.92 1974.72,1213.92 1975.3,1213.92 1975.89,1213.92 1976.48,1213.92 1977.06,1213.92 1977.65,1213.92 1978.24,1213.92 1978.82,1213.92 1979.41,1213.92 1979.99,1213.92 1980.58,1213.92 1981.17,1213.92 1981.75,1213.92 1982.34,1213.92 1982.93,1213.92 1983.51,1213.92 1984.1,1213.92 1984.69,1213.92 1985.27,1213.92 1985.86,1213.92 1986.45,1213.92 1987.03,1213.92 1987.62,1213.92 1988.2,1213.92 1988.79,1213.92 1989.38,1213.92 1989.96,1213.92 1990.55,1213.92 1991.14,1213.92 1991.72,1213.92 1992.31,1213.92 1992.9,1213.92 1993.48,1213.92 1994.07,1213.92 1994.65,1213.92 1995.24,1213.92 1995.83,1213.92 1996.41,1213.92 1997,1213.92 1997.59,1213.92 1998.17,1213.92 1998.76,1213.92 1999.35,1213.92 1999.93,1213.92 2000.52,1213.92 2001.11,1213.92 2001.69,1213.92 2002.28,1213.92 2002.86,1213.92 2003.45,1213.92 2004.04,1213.92 2004.62,1213.92 2005.21,1213.92 2005.8,1213.92 2006.38,1213.92 2006.97,1213.92 2007.56,1213.92 2008.14,1213.92 2008.73,1213.92 2009.32,1213.92 2009.9,1213.92 2010.49,1213.92 2011.07,1213.92 2011.66,1213.92 2012.25,1213.92 2012.83,1213.92 2013.42,1213.92 2014.01,1213.92 2014.59,1213.92 2015.18,1213.92 2015.77,1213.92 2016.35,1213.92 2016.94,1213.92 2017.53,1213.92 2018.11,1213.92 2018.7,1213.92 2019.28,1213.92 2019.87,1213.92 2020.46,1213.92 2021.04,1213.92 2021.63,1213.92 2022.22,1213.92 2022.8,1213.92 2023.39,1213.92 2023.98,1213.92 2024.56,1213.92 2025.15,1213.92 2025.73,1213.92 2026.32,1213.92 2026.91,1213.92 2027.49,1213.92 2028.08,1213.92 2028.67,1213.92 2029.25,1213.92 2029.84,1213.92 2030.43,1213.92 2031.01,1213.92 2031.6,1213.92 2032.19,1213.92 2032.77,1213.92 2033.36,1213.92 2033.94,1213.92 2034.53,1213.92 2035.12,1213.92 2035.7,1213.92 2036.29,1213.92 2036.88,1213.92 2037.46,1213.92 2038.05,1213.92 2038.64,1213.92 2039.22,1213.92 2039.81,1213.92 2040.4,1213.92 2040.98,1213.92 2041.57,1213.92 2042.15,1213.92 2042.74,1213.92 2043.33,1213.92 2043.91,1213.92 2044.5,1213.92 2045.09,1213.92 2045.67,1213.92 2046.26,1213.92 2046.85,1213.92 2047.43,1213.92 2048.02,1213.92 2048.6,1213.92 2049.19,1213.92 2049.78,1213.92 2050.36,1213.92 2050.95,1213.92 2051.54,1213.92 2052.12,1213.92 2052.71,1213.92 2053.3,1213.92 2053.88,1213.92 2054.47,1213.92 2055.06,1213.92 2055.64,1213.92 2056.23,1213.92 2056.81,1213.92 2057.4,1213.92 2057.99,1213.92 2058.57,1213.92 2059.16,1213.92 2059.75,1213.92 2060.33,1213.92 2060.92,1213.92 2061.51,1213.92 2062.09,1213.92 2062.68,1213.92 2063.27,1213.92 2063.85,1213.92 2064.44,1213.92 2065.02,1213.92 2065.61,1213.92 2066.2,1213.92 2066.78,1213.92 2067.37,1213.92 2067.96,1213.92 2068.54,1213.92 2069.13,1213.92 2069.72,1213.92 2070.3,1213.92 2070.89,1213.92 2071.48,1213.92 2072.06,1213.92 2072.65,1213.92 2073.23,1213.92 2073.82,1213.92 2074.41,1213.92 2074.99,1213.92 2075.58,1213.92 2076.17,1213.92 2076.75,1213.92 2077.34,1213.92 2077.93,1213.92 2078.51,1213.92 2079.1,1213.92 2079.68,1213.92 2080.27,1213.92 2080.86,1213.92 2081.44,1213.92 2082.03,1213.92 2082.62,1213.92 2083.2,1213.92 2083.79,1213.92 2084.38,1213.92 2084.96,1213.92 2085.55,1213.92 2086.14,1213.92 2086.72,1213.92 2087.31,1213.92 2087.89,1213.92 2088.48,1213.92 2089.07,1213.92 2089.65,1213.92 2090.24,1213.92 2090.83,1213.92 2091.41,1213.92 2092,1213.92 2092.59,1213.92 2093.17,1213.92 2093.76,1213.92 2094.35,1213.92 2094.93,1213.92 2095.52,1213.92 2096.1,1213.92 2096.69,1213.92 2097.28,1213.92 2097.86,1213.92 2098.45,1213.92 2099.04,1213.92 2099.62,1213.92 2100.21,1213.92 2100.8,1213.92 2101.38,1213.92 2101.97,1213.92 2102.55,1213.92 2103.14,1213.92 2103.73,1213.92 2104.31,1213.92 2104.9,1213.92 2105.49,1213.92 2106.07,1213.92 2106.66,1213.92 2107.25,1213.92 2107.83,1213.92 2108.42,1213.92 2109.01,1213.92 2109.59,1213.92 2110.18,1213.92 2110.76,1213.92 2111.35,1213.92 2111.94,1213.92 2112.52,1213.92 2113.11,1213.92 2113.7,1213.92 2114.28,1213.92 2114.87,1213.92 2115.46,1213.92 2116.04,1213.92 2116.63,1213.92 2117.22,1213.92 2117.8,1213.92 2118.39,1213.92 2118.97,1213.92 2119.56,1213.92 2120.15,1213.92 2120.73,1213.92 2121.32,1213.92 2121.91,1213.92 2122.49,1213.92 2123.08,1213.92 2123.67,1213.92 2124.25,1213.92 2124.84,1213.92 2125.42,1213.92 2126.01,1213.92 2126.6,1213.92 2127.18,1213.92 2127.77,1213.92 2128.36,1213.92 2128.94,1213.92 2129.53,1213.92 2130.12,1213.92 2130.7,1213.92 2131.29,1213.92 2131.88,1213.92 2132.46,1213.92 2133.05,1213.92 2133.63,1213.92 2134.22,1213.92 2134.81,1213.92 2135.39,1213.92 2135.98,1213.92 2136.57,1213.92 2137.15,1213.92 2137.74,1213.92 2138.33,1213.92 2138.91,1213.92 2139.5,1213.92 2140.09,1213.92 2140.67,1213.92 2141.26,1213.92 2141.84,1213.92 2142.43,1213.92 2143.02,1213.92 2143.6,1213.92 2144.19,1213.92 2144.78,1213.92 2145.36,1213.92 2145.95,1213.92 2146.54,1213.92 2147.12,1213.92 2147.71,1213.92 2148.3,1213.92 2148.88,1213.92 2149.47,1213.92 2150.05,1213.92 2150.64,1213.92 2151.23,1213.92 2151.81,1213.92 2152.4,1213.92 2152.99,1213.92 2153.57,1213.92 2154.16,1213.92 2154.75,1213.92 2155.33,1213.92 2155.92,1213.92 2156.5,1213.92 2157.09,1213.92 2157.68,1213.92 2158.26,1213.92 \"/>\n<path clip-path=\"url(#clip482)\" d=\"M986.025 1213.72 L986.612 1213.72 L987.198 1213.72 L987.785 1213.72 L988.371 1213.72 L988.957 1213.72 L989.544 1213.72 L990.13 1213.72 L990.717 1213.72 L991.303 1213.72 L991.889 1213.72 L992.476 1213.72 L993.062 1213.72 L993.649 1213.72 L994.235 1213.72 L994.822 1213.72 L995.408 1213.72 L995.994 1213.72 L996.581 1213.72 L997.167 1213.72 L997.754 1213.72 L998.34 1213.72 L998.926 1213.72 L999.513 1213.72 L1000.1 1213.72 L1000.69 1213.72 L1001.27 1213.72 L1001.86 1213.72 L1002.44 1213.72 L1003.03 1213.72 L1003.62 1213.72 L1004.2 1213.72 L1004.79 1213.72 L1005.38 1213.72 L1005.96 1213.72 L1006.55 1213.72 L1007.14 1213.72 L1007.72 1213.72 L1008.31 1213.72 L1008.9 1213.72 L1009.48 1213.72 L1010.07 1213.72 L1010.65 1213.72 L1011.24 1213.72 L1011.83 1213.72 L1012.41 1213.72 L1013 1213.72 L1013.59 1213.72 L1014.17 1213.72 L1014.76 1213.72 L1015.35 1213.72 L1015.93 1213.72 L1016.52 1213.72 L1017.11 1213.72 L1017.69 1213.72 L1018.28 1213.72 L1018.86 1213.72 L1019.45 1213.72 L1020.04 1213.72 L1020.62 1213.72 L1021.21 1213.72 L1021.8 1213.72 L1022.38 1213.72 L1022.97 1213.72 L1023.56 1213.72 L1024.14 1213.72 L1024.73 1213.72 L1025.32 1213.72 L1025.9 1213.72 L1026.49 1213.72 L1027.07 1213.72 L1027.66 1213.72 L1028.25 1213.72 L1028.83 1213.72 L1029.42 1213.72 L1030.01 1213.72 L1030.59 1213.72 L1031.18 1213.72 L1031.77 1213.72 L1032.35 1213.72 L1032.94 1213.72 L1033.52 1213.72 L1034.11 1213.72 L1034.7 1213.72 L1035.28 1213.72 L1035.87 1213.72 L1036.46 1213.72 L1037.04 1213.72 L1037.63 1213.72 L1038.22 1213.72 L1038.8 1213.72 L1039.39 1213.72 L1039.98 1213.72 L1040.56 1213.72 L1041.15 1213.72 L1041.73 1213.72 L1042.32 1213.72 L1042.91 1213.72 L1043.49 1213.72 L1044.08 1213.72 L1044.67 1213.72 L1045.25 1213.72 L1045.84 1213.72 L1046.43 1213.72 L1047.01 1213.72 L1047.6 1213.72 L1048.19 1213.72 L1048.77 1213.72 L1049.36 1213.72 L1049.94 1213.72 L1050.53 1213.72 L1051.12 1213.72 L1051.7 1213.72 L1052.29 1213.72 L1052.88 1213.72 L1053.46 1213.72 L1054.05 1213.72 L1054.64 1213.72 L1055.22 1213.72 L1055.81 1213.72 L1056.39 1213.72 L1056.98 1213.72 L1057.57 1213.72 L1058.15 1213.72 L1058.74 1213.72 L1059.33 1213.72 L1059.91 1213.72 L1060.5 1213.72 L1061.09 1213.72 L1061.67 1213.72 L1062.26 1213.72 L1062.85 1213.72 L1063.43 1213.72 L1064.02 1213.72 L1064.6 1213.72 L1065.19 1213.72 L1065.78 1213.72 L1066.36 1213.72 L1066.95 1213.72 L1067.54 1213.72 L1068.12 1213.72 L1068.71 1213.72 L1069.3 1213.72 L1069.88 1213.72 L1070.47 1213.72 L1071.06 1213.72 L1071.64 1213.72 L1072.23 1213.72 L1072.81 1213.72 L1073.4 1213.72 L1073.99 1213.72 L1074.57 1213.72 L1075.16 1213.72 L1075.75 1213.72 L1076.33 1213.72 L1076.92 1213.72 L1077.51 1213.72 L1078.09 1213.72 L1078.68 1213.72 L1079.26 1213.72 L1079.85 1213.72 L1080.44 1213.72 L1081.02 1213.72 L1081.61 1213.72 L1082.2 1213.72 L1082.78 1213.72 L1083.37 1213.72 L1083.96 1213.72 L1084.54 1213.72 L1085.13 1213.72 L1085.72 1213.72 L1086.3 1213.72 L1086.89 1213.72 L1087.47 1213.72 L1088.06 1213.72 L1088.65 1213.72 L1089.23 1213.72 L1089.82 1213.72 L1090.41 1213.72 L1090.99 1213.72 L1091.58 1213.72 L1092.17 1213.72 L1092.75 1213.72 L1093.34 1213.72 L1093.93 1213.72 L1094.51 1213.72 L1095.1 1213.72 L1095.68 1213.72 L1096.27 1213.72 L1096.86 1213.72 L1097.44 1213.72 L1098.03 1213.72 L1098.62 1213.72 L1099.2 1213.72 L1099.79 1213.72 L1100.38 1213.72 L1100.96 1213.72 L1101.55 1213.72 L1102.14 1213.72 L1102.72 1213.72 L1103.31 1213.72 L1103.89 1213.72 L1104.48 1213.72 L1105.07 1213.72 L1105.65 1213.72 L1106.24 1213.72 L1106.83 1213.72 L1107.41 1213.72 L1108 1213.72 L1108.59 1213.72 L1109.17 1213.72 L1109.76 1213.72 L1110.34 1213.72 L1110.93 1213.72 L1111.52 1213.72 L1112.1 1213.72 L1112.69 1213.72 L1113.28 1213.72 L1113.86 1213.72 L1114.45 1213.72 L1115.04 1213.72 L1115.62 1213.72 L1116.21 1213.72 L1116.8 1213.72 L1117.38 1213.72 L1117.97 1213.72 L1118.55 1213.72 L1119.14 1213.72 L1119.73 1213.72 L1120.31 1213.72 L1120.9 1213.72 L1121.49 1213.72 L1122.07 1213.72 L1122.66 1213.72 L1123.25 1213.72 L1123.83 1213.72 L1124.42 1213.72 L1125.01 1213.72 L1125.59 1213.72 L1126.18 1213.72 L1126.76 1213.72 L1127.35 1213.72 L1127.94 1213.72 L1128.52 1213.72 L1129.11 1213.72 L1129.7 1213.72 L1130.28 1213.72 L1130.87 1213.72 L1131.46 1213.72 L1132.04 1213.72 L1132.63 1213.72 L1133.21 1213.72 L1133.8 1213.72 L1134.39 1213.72 L1134.97 1213.72 L1135.56 1213.72 L1136.15 1213.72 L1136.73 1213.72 L1137.32 1213.72 L1137.91 1213.72 L1138.49 1213.72 L1139.08 1213.72 L1139.67 1213.72 L1140.25 1213.72 L1140.84 1213.72 L1141.42 1213.72 L1142.01 1213.72 L1142.6 1213.72 L1143.18 1213.72 L1143.77 1213.72 L1144.36 1213.72 L1144.94 1213.72 L1145.53 1213.72 L1146.12 1213.72 L1146.7 1213.72 L1147.29 1213.72 L1147.88 1213.72 L1148.46 1213.72 L1149.05 1213.72 L1149.63 1213.72 L1150.22 1213.72 L1150.81 1213.72 L1151.39 1213.72 L1151.98 1213.72 L1152.57 1213.72 L1153.15 1213.72 L1153.74 1213.72 L1154.33 1213.72 L1154.91 1213.72 L1155.5 1213.72 L1156.09 1213.72 L1156.67 1213.72 L1157.26 1213.72 L1157.84 1213.72 L1158.43 1213.72 L1159.02 1213.72 L1159.6 1213.72 L1160.19 1213.72 L1160.78 1213.72 L1161.36 1213.72 L1161.95 1213.72 L1162.54 1213.72 L1163.12 1213.72 L1163.71 1213.72 L1164.29 1213.72 L1164.88 1213.72 L1165.47 1213.72 L1166.05 1213.72 L1166.64 1213.72 L1167.23 1213.72 L1167.81 1213.72 L1168.4 1213.72 L1168.99 1213.72 L1169.57 1213.72 L1170.16 1213.72 L1170.75 1213.72 L1171.33 1213.72 L1171.92 1213.72 L1172.5 1213.72 L1173.09 1213.72 L1173.68 1213.72 L1174.26 1213.72 L1174.85 1213.72 L1175.44 1213.72 L1176.02 1213.72 L1176.61 1213.72 L1177.2 1213.72 L1177.78 1213.72 L1178.37 1213.72 L1178.96 1213.72 L1179.54 1213.72 L1180.13 1213.72 L1180.71 1213.72 L1181.3 1213.72 L1181.89 1213.72 L1182.47 1213.72 L1183.06 1213.72 L1183.65 1213.72 L1184.23 1213.72 L1184.82 1213.72 L1185.41 1213.72 L1185.99 1213.72 L1186.58 1213.72 L1187.16 1213.72 L1187.75 1213.72 L1188.34 1213.72 L1188.92 1213.72 L1189.51 1213.72 L1190.1 1213.72 L1190.68 1213.72 L1191.27 1213.72 L1191.86 1213.72 L1192.44 1213.72 L1193.03 1213.72 L1193.62 1213.72 L1194.2 1213.72 L1194.79 1213.72 L1195.37 1213.72 L1195.96 1213.72 L1196.55 1213.72 L1197.13 1213.72 L1197.72 1213.72 L1198.31 1213.72 L1198.89 1213.72 L1199.48 1213.72 L1200.07 1213.72 L1200.65 1213.72 L1201.24 1213.72 L1201.83 1213.72 L1202.41 1213.72 L1203 1213.72 L1203.58 1213.72 L1204.17 1213.72 L1204.76 1213.72 L1205.34 1213.72 L1205.93 1213.72 L1206.52 1213.72 L1207.1 1213.72 L1207.69 1213.72 L1208.28 1213.72 L1208.86 1213.72 L1209.45 1213.72 L1210.03 1213.72 L1210.62 1213.72 L1211.21 1213.72 L1211.79 1213.72 L1212.38 1213.72 L1212.97 1213.72 L1213.55 1213.72 L1214.14 1213.72 L1214.73 1213.72 L1215.31 1213.72 L1215.9 1213.72 L1216.49 1213.72 L1217.07 1213.72 L1217.66 1213.72 L1218.24 1213.72 L1218.83 1213.72 L1219.42 1213.72 L1220 1213.72 L1220.59 1213.72 L1221.18 1213.72 L1221.76 1213.72 L1222.35 1213.72 L1222.94 1213.72 L1223.52 1213.72 L1224.11 1213.72 L1224.7 1213.72 L1225.28 1213.72 L1225.87 1213.72 L1226.45 1213.72 L1227.04 1213.72 L1227.63 1213.72 L1228.21 1213.72 L1228.8 1213.72 L1229.39 1213.72 L1229.97 1213.72 L1230.56 1213.72 L1231.15 1213.72 L1231.73 1213.72 L1232.32 1213.72 L1232.91 1213.72 L1233.49 1213.72 L1234.08 1213.72 L1234.66 1213.72 L1235.25 1213.72 L1235.84 1213.72 L1236.42 1213.72 L1237.01 1213.72 L1237.6 1213.72 L1238.18 1213.72 L1238.77 1213.72 L1239.36 1213.72 L1239.94 1213.72 L1240.53 1213.72 L1241.11 1213.72 L1241.7 1213.72 L1242.29 1213.72 L1242.87 1213.72 L1243.46 1213.72 L1244.05 1213.72 L1244.63 1213.72 L1245.22 1213.72 L1245.81 1213.72 L1246.39 1213.72 L1246.98 1213.72 L1247.57 1213.72 L1248.15 1213.72 L1248.74 1213.72 L1249.32 1213.72 L1249.91 1213.72 L1250.5 1213.72 L1251.08 1213.72 L1251.67 1213.72 L1252.26 1213.72 L1252.84 1213.72 L1253.43 1213.72 L1254.02 1213.72 L1254.6 1213.72 L1255.19 1213.72 L1255.78 1213.72 L1256.36 1213.72 L1256.95 1213.72 L1257.53 1213.72 L1258.12 1213.72 L1258.71 1213.72 L1259.29 1213.72 L1259.88 1213.72 L1260.47 1213.72 L1261.05 1213.72 L1261.64 1213.72 L1262.23 1213.72 L1262.81 1213.72 L1263.4 1213.72 L1263.98 1213.72 L1264.57 1213.72 L1265.16 1213.72 L1265.74 1213.72 L1266.33 1213.72 L1266.92 1213.72 L1267.5 1213.72 L1268.09 1213.72 L1268.68 1213.72 L1269.26 1213.72 L1269.85 1213.72 L1270.44 1213.72 L1271.02 1213.72 L1271.61 1213.72 L1272.19 1213.72 L1272.78 1213.72 L1273.37 1213.72 L1273.95 1213.72 L1274.54 1213.72 L1275.13 1213.72 L1275.71 1213.72 L1276.3 1213.72 L1276.89 1213.72 L1277.47 1213.72 L1278.06 1213.72 L1278.65 1213.72 L1279.23 1213.72 L1279.82 1213.72 L1280.4 1213.72 L1280.99 1213.72 L1281.58 1213.72 L1282.16 1213.72 L1282.75 1213.72 L1283.34 1213.72 L1283.92 1213.72 L1284.51 1213.72 L1285.1 1213.72 L1285.68 1213.72 L1286.27 1213.72 L1286.86 1213.72 L1287.44 1213.72 L1288.03 1213.72 L1288.61 1213.72 L1289.2 1213.72 L1289.79 1213.72 L1290.37 1213.72 L1290.96 1213.72 L1291.55 1213.72 L1292.13 1213.72 L1292.72 1213.72 L1293.31 1213.72 L1293.89 1213.72 L1294.48 1213.72 L1295.06 1213.72 L1295.65 1213.72 L1296.24 1213.72 L1296.82 1213.72 L1297.41 1213.72 L1298 1213.72 L1298.58 1213.72 L1299.17 1213.72 L1299.76 1213.72 L1300.34 1213.72 L1300.93 1213.72 L1301.52 1213.72 L1302.1 1213.72 L1302.69 1213.72 L1303.27 1213.72 L1303.86 1213.72 L1304.45 1213.72 L1305.03 1213.72 L1305.62 1213.72 L1306.21 1213.72 L1306.79 1213.72 L1307.38 1213.72 L1307.97 1213.72 L1308.55 1213.72 L1309.14 1213.72 L1309.73 1213.72 L1310.31 1213.72 L1310.9 1213.72 L1311.48 1213.72 L1312.07 1213.72 L1312.66 1213.72 L1313.24 1213.72 L1313.83 1213.72 L1314.42 1213.72 L1315 1213.72 L1315.59 1213.72 L1316.18 1213.72 L1316.76 1213.72 L1317.35 1213.72 L1317.93 1213.72 L1318.52 1213.72 L1319.11 1213.72 L1319.69 1213.72 L1320.28 1213.72 L1320.87 1213.72 L1321.45 1213.72 L1322.04 1213.72 L1322.63 1213.72 L1323.21 1213.72 L1323.8 1213.72 L1324.39 1213.72 L1324.97 1213.72 L1325.56 1213.72 L1326.14 1213.72 L1326.73 1213.72 L1327.32 1213.72 L1327.9 1213.72 L1328.49 1213.72 L1329.08 1213.72 L1329.66 1213.72 L1330.25 1213.72 L1330.84 1213.72 L1331.42 1213.72 L1332.01 1213.72 L1332.6 1213.72 L1333.18 1213.72 L1333.77 1213.72 L1334.35 1213.72 L1334.94 1213.72 L1335.53 1213.72 L1336.11 1213.72 L1336.7 1213.72 L1337.29 1213.72 L1337.87 1213.72 L1338.46 1213.72 L1339.05 1213.72 L1339.63 1213.72 L1340.22 1213.72 L1340.8 1213.72 L1341.39 1213.72 L1341.98 1213.72 L1342.56 1213.72 L1343.15 1213.72 L1343.74 1213.72 L1344.32 1213.72 L1344.91 1213.72 L1345.5 1213.72 L1346.08 1213.72 L1346.67 1213.72 L1347.26 1213.72 L1347.84 1213.72 L1348.43 1213.72 L1349.01 1213.72 L1349.6 1213.72 L1350.19 1213.72 L1350.77 1213.72 L1351.36 1213.72 L1351.95 1213.72 L1352.53 1213.72 L1353.12 1213.72 L1353.71 1213.72 L1354.29 1213.72 L1354.88 1213.72 L1355.47 1213.72 L1356.05 1213.72 L1356.64 1213.72 L1357.22 1213.72 L1357.81 1213.72 L1358.4 1213.72 L1358.98 1213.72 L1359.57 1213.72 L1360.16 1213.72 L1360.74 1213.72 L1361.33 1213.72 L1361.92 1213.72 L1362.5 1213.72 L1363.09 1213.72 L1363.68 1213.72 L1364.26 1213.72 L1364.85 1213.72 L1365.43 1213.72 L1366.02 1213.72 L1366.61 1213.72 L1367.19 1213.72 L1367.78 1213.72 L1368.37 1213.72 L1368.95 1213.72 L1369.54 1213.72 L1370.13 1213.72 L1370.71 1213.72 L1371.3 1213.72 L1371.88 1213.72 L1372.47 1213.72 L1373.06 1213.72 L1373.64 1213.72 L1374.23 1213.72 L1374.82 1213.72 L1375.4 1213.72 L1375.99 1213.72 L1376.58 1213.72 L1377.16 1213.72 L1377.75 1213.72 L1378.34 1213.72 L1378.92 1213.72 L1379.51 1213.72 L1380.09 1213.72 L1380.68 1213.72 L1381.27 1213.72 L1381.85 1213.72 L1382.44 1213.72 L1383.03 1213.72 L1383.61 1213.72 L1384.2 1213.72 L1384.79 1213.72 L1385.37 1213.72 L1385.96 1213.72 L1386.55 1213.72 L1387.13 1213.72 L1387.72 1213.72 L1388.3 1213.72 L1388.89 1213.72 L1389.48 1213.72 L1390.06 1213.72 L1390.65 1213.72 L1391.24 1213.72 L1391.82 1213.72 L1392.41 1213.72 L1393 1213.72 L1393.58 1213.72 L1394.17 1213.72 L1394.75 1213.72 L1395.34 1213.72 L1395.93 1213.72 L1396.51 1213.72 L1397.1 1213.72 L1397.69 1213.72 L1398.27 1213.72 L1398.86 1213.72 L1399.45 1213.72 L1400.03 1213.72 L1400.62 1213.72 L1401.21 1213.72 L1401.79 1213.72 L1402.38 1213.72 L1402.96 1213.72 L1403.55 1213.72 L1404.14 1213.72 L1404.72 1213.72 L1405.31 1213.72 L1405.9 1213.72 L1406.48 1213.72 L1407.07 1213.72 L1407.66 1213.72 L1408.24 1213.72 L1408.83 1213.72 L1409.42 1213.72 L1410 1213.72 L1410.59 1213.72 L1411.17 1213.72 L1411.76 1213.72 L1412.35 1213.72 L1412.93 1213.72 L1413.52 1213.72 L1414.11 1213.72 L1414.69 1213.72 L1415.28 1213.72 L1415.87 1213.72 L1416.45 1213.72 L1417.04 1213.72 L1417.63 1213.72 L1418.21 1213.72 L1418.8 1213.72 L1419.38 1213.72 L1419.97 1213.72 L1420.56 1213.72 L1421.14 1213.72 L1421.73 1213.72 L1422.32 1213.72 L1422.9 1213.72 L1423.49 1213.72 L1424.08 1213.72 L1424.66 1213.72 L1425.25 1213.72 L1425.83 1213.72 L1426.42 1213.72 L1427.01 1213.72 L1427.59 1213.72 L1428.18 1213.72 L1428.77 1213.72 L1429.35 1213.72 L1429.94 1213.72 L1430.53 1213.72 L1431.11 1213.72 L1431.7 1213.72 L1432.29 1213.72 L1432.87 1213.72 L1433.46 1213.72 L1434.04 1213.72 L1434.63 1213.72 L1435.22 1213.72 L1435.8 1213.72 L1436.39 1213.72 L1436.98 1213.72 L1437.56 1213.72 L1438.15 1213.72 L1438.74 1213.72 L1439.32 1213.72 L1439.91 1213.72 L1440.5 1213.72 L1441.08 1213.72 L1441.67 1213.72 L1442.25 1213.72 L1442.84 1213.72 L1443.43 1213.72 L1444.01 1213.72 L1444.6 1213.72 L1445.19 1213.72 L1445.77 1213.72 L1446.36 1213.72 L1446.95 1213.72 L1447.53 1213.72 L1448.12 1213.72 L1448.7 1213.72 L1449.29 1213.72 L1449.88 1213.72 L1450.46 1213.72 L1451.05 1213.72 L1451.64 1213.72 L1452.22 1213.72 L1452.81 1213.72 L1453.4 1213.72 L1453.98 1213.72 L1454.57 1213.72 L1455.16 1213.72 L1455.74 1213.72 L1456.33 1213.72 L1456.91 1213.72 L1457.5 1213.72 L1458.09 1213.72 L1458.67 1213.72 L1459.26 1213.72 L1459.85 1213.72 L1460.43 1213.72 L1461.02 1213.72 L1461.61 1213.72 L1462.19 1213.72 L1462.78 1213.72 L1463.37 1213.72 L1463.95 1213.72 L1464.54 1213.72 L1465.12 1213.72 L1465.71 1213.72 L1466.3 1213.72 L1466.88 1213.72 L1467.47 1213.72 L1468.06 1213.72 L1468.64 1213.72 L1469.23 1213.72 L1469.82 1213.72 L1470.4 1213.72 L1470.99 1213.72 L1471.57 1213.72 L1472.16 1213.72 L1472.75 1213.72 L1473.33 1213.72 L1473.92 1213.72 L1474.51 1213.72 L1475.09 1213.72 L1475.68 1213.72 L1476.27 1213.72 L1476.85 1213.72 L1477.44 1213.72 L1478.03 1213.72 L1478.61 1213.72 L1479.2 1213.72 L1479.78 1213.72 L1480.37 1213.72 L1480.96 1213.72 L1481.54 1213.72 L1482.13 1213.72 L1482.72 1213.72 L1483.3 1213.72 L1483.89 1213.72 L1484.48 1213.72 L1485.06 1213.72 L1485.65 1213.72 L1486.24 1213.72 L1486.82 1213.72 L1487.41 1213.72 L1487.99 1213.72 L1488.58 1213.72 L1489.17 1213.72 L1489.75 1213.72 L1490.34 1213.72 L1490.93 1213.72 L1491.51 1213.72 L1492.1 1213.72 L1492.69 1213.72 L1493.27 1213.72 L1493.86 1213.72 L1494.45 1213.72 L1495.03 1213.72 L1495.62 1213.72 L1496.2 1213.72 L1496.79 1213.72 L1497.38 1213.72 L1497.96 1213.72 L1498.55 1213.72 L1499.14 1213.72 L1499.72 1213.72 L1500.31 1213.72 L1500.9 1213.72 L1501.48 1213.72 L1502.07 1213.72 L1502.65 1213.72 L1503.24 1213.72 L1503.83 1213.72 L1504.41 1213.72 L1505 1213.72 L1505.59 1213.72 L1506.17 1213.72 L1506.76 1213.72 L1507.35 1213.72 L1507.93 1213.72 L1508.52 1213.72 L1509.11 1213.72 L1509.69 1213.72 L1510.28 1213.72 L1510.86 1213.72 L1511.45 1213.72 L1512.04 1213.72 L1512.62 1213.72 L1513.21 1213.72 L1513.8 1213.72 L1514.38 1213.72 L1514.97 1213.72 L1515.56 1213.72 L1516.14 1213.72 L1516.73 1213.72 L1517.32 1213.72 L1517.9 1213.72 L1518.49 1213.72 L1519.07 1213.72 L1519.66 1213.72 L1520.25 1213.72 L1520.83 1213.72 L1521.42 1213.72 L1522.01 1213.72 L1522.59 1213.72 L1523.18 1213.72 L1523.77 1213.72 L1524.35 1213.72 L1524.94 1213.72 L1525.52 1213.72 L1526.11 1213.72 L1526.7 1213.72 L1527.28 1213.72 L1527.87 1213.72 L1528.46 1213.72 L1529.04 1213.72 L1529.63 1213.72 L1530.22 1213.72 L1530.8 1213.72 L1531.39 1213.72 L1531.98 1213.72 L1532.56 1213.72 L1533.15 1213.72 L1533.73 1213.72 L1534.32 1213.72 L1534.91 1213.72 L1535.49 1213.72 L1536.08 1213.72 L1536.67 1213.72 L1537.25 1213.72 L1537.84 1213.72 L1538.43 1213.72 L1539.01 1213.72 L1539.6 1213.72 L1540.19 1213.72 L1540.77 1213.72 L1541.36 1213.72 L1541.94 1213.72 L1542.53 1213.72 L1543.12 1213.72 L1543.7 1213.72 L1544.29 1213.72 L1544.88 1213.72 L1545.46 1213.72 L1546.05 1213.72 L1546.64 1213.72 L1547.22 1213.72 L1547.81 1213.72 L1548.4 1213.72 L1548.98 1213.72 L1549.57 1213.72 L1550.15 1213.72 L1550.74 1213.72 L1551.33 1213.72 L1551.91 1213.72 L1552.5 1213.72 L1553.09 1213.72 L1553.67 1213.72 L1554.26 1213.72 L1554.85 1213.72 L1555.43 1213.72 L1556.02 1213.72 L1556.6 1213.72 L1557.19 1213.72 L1557.78 1213.72 L1558.36 1213.72 L1558.95 1213.72 L1559.54 1213.72 L1560.12 1213.72 L1560.71 1213.72 L1561.3 1213.72 L1561.88 1213.72 L1562.47 1213.72 L1563.06 1213.72 L1563.64 1213.72 L1564.23 1213.72 L1564.81 1213.72 L1565.4 1213.72 L1565.99 1213.72 L1566.57 1213.72 L1567.16 1213.72 L1567.75 1213.72 L1568.33 1213.72 L1568.92 1213.72 L1569.51 1213.72 L1570.09 1213.72 L1570.68 1213.72 L1571.27 1213.72 L1571.85 1213.72 L1572.44 1213.72 L1573.02 1213.72 L1573.61 1213.72 L1574.2 1213.72 L1574.78 1213.72 L1575.37 1213.72 L1575.96 1213.72 L1576.54 1213.72 L1577.13 1213.72 L1577.72 1213.72 L1578.3 1213.72 L1578.89 1213.72 L1579.47 1213.72 L1580.06 1213.72 L1580.65 1213.72 L1581.23 1213.72 L1581.82 1213.72 L1582.41 1213.72 L1582.99 1213.72 L1583.58 1213.72 L1584.17 1213.72 L1584.75 1213.72 L1585.34 1213.72 L1585.93 1213.72 L1586.51 1213.72 L1587.1 1213.72 L1587.68 1213.72 L1588.27 1213.72 L1588.86 1213.72 L1589.44 1213.72 L1590.03 1213.72 L1590.62 1213.72 L1591.2 1213.72 L1591.79 1213.72 L1592.38 1213.72 L1592.96 1213.72 L1593.55 1213.72 L1594.14 1213.72 L1594.72 1213.72 L1595.31 1213.72 L1595.89 1213.72 L1596.48 1213.72 L1597.07 1213.72 L1597.65 1213.72 L1598.24 1213.72 L1598.83 1213.72 L1599.41 1213.72 L1600 1213.72 L1600.59 1213.72 L1601.17 1213.72 L1601.76 1213.72 L1602.34 1213.72 L1602.93 1213.72 L1603.52 1213.72 L1604.1 1213.72 L1604.69 1213.72 L1605.28 1213.72 L1605.86 1213.72 L1606.45 1213.72 L1607.04 1213.72 L1607.62 1213.72 L1608.21 1213.72 L1608.8 1213.72 L1609.38 1213.72 L1609.97 1213.72 L1610.55 1213.72 L1611.14 1213.72 L1611.73 1213.72 L1612.31 1213.72 L1612.9 1213.72 L1613.49 1213.72 L1614.07 1213.72 L1614.66 1213.72 L1615.25 1213.72 L1615.83 1213.72 L1616.42 1213.72 L1617.01 1213.72 L1617.59 1213.72 L1618.18 1213.72 L1618.76 1213.72 L1619.35 1213.72 L1619.94 1213.72 L1620.52 1213.72 L1621.11 1213.72 L1621.7 1213.72 L1622.28 1213.72 L1622.87 1213.72 L1623.46 1213.72 L1624.04 1213.72 L1624.63 1213.72 L1625.22 1213.72 L1625.8 1213.72 L1626.39 1213.72 L1626.97 1213.72 L1627.56 1213.72 L1628.15 1213.72 L1628.73 1213.72 L1629.32 1213.72 L1629.91 1213.72 L1630.49 1213.72 L1631.08 1213.72 L1631.67 1213.72 L1632.25 1213.72 L1632.84 1213.72 L1633.42 1213.72 L1634.01 1213.72 L1634.6 1213.72 L1635.18 1213.72 L1635.77 1213.72 L1636.36 1213.72 L1636.94 1213.72 L1637.53 1213.72 L1638.12 1213.72 L1638.7 1213.72 L1639.29 1213.72 L1639.88 1213.72 L1640.46 1213.72 L1641.05 1213.72 L1641.63 1213.72 L1642.22 1213.72 L1642.81 1213.72 L1643.39 1213.72 L1643.98 1213.72 L1644.57 1213.72 L1645.15 1213.72 L1645.74 1213.72 L1646.33 1213.72 L1646.91 1213.72 L1647.5 1213.72 L1648.09 1213.72 L1648.67 1213.72 L1649.26 1213.72 L1649.84 1213.72 L1650.43 1213.72 L1651.02 1213.72 L1651.6 1213.72 L1652.19 1213.72 L1652.78 1213.72 L1653.36 1213.72 L1653.95 1213.72 L1654.54 1213.72 L1655.12 1213.72 L1655.71 1213.72 L1656.29 1213.72 L1656.88 1213.72 L1657.47 1213.72 L1658.05 1213.72 L1658.64 1213.72 L1659.23 1213.72 L1659.81 1213.72 L1660.4 1213.72 L1660.99 1213.72 L1661.57 1213.72 L1662.16 1213.72 L1662.75 1213.72 L1663.33 1213.72 L1663.92 1213.72 L1664.5 1213.72 L1665.09 1213.72 L1665.68 1213.72 L1666.26 1213.72 L1666.85 1213.72 L1667.44 1213.72 L1668.02 1213.72 L1668.61 1213.72 L1669.2 1213.72 L1669.78 1213.72 L1670.37 1213.72 L1670.96 1213.72 L1671.54 1213.72 L1672.13 1213.72 L1672.71 1213.72 L1673.3 1213.72 L1673.89 1213.72 L1674.47 1213.72 L1675.06 1213.72 L1675.65 1213.72 L1676.23 1213.72 L1676.82 1213.72 L1677.41 1213.72 L1677.99 1213.72 L1678.58 1213.72 L1679.17 1213.72 L1679.75 1213.72 L1680.34 1213.72 L1680.92 1213.72 L1681.51 1213.72 L1682.1 1213.72 L1682.68 1213.72 L1683.27 1213.72 L1683.86 1213.72 L1684.44 1213.72 L1685.03 1213.72 L1685.62 1213.72 L1686.2 1213.72 L1686.79 1213.72 L1687.37 1213.72 L1687.96 1213.72 L1688.55 1213.72 L1689.13 1213.72 L1689.72 1213.72 L1690.31 1213.72 L1690.89 1213.72 L1691.48 1213.72 L1692.07 1213.72 L1692.65 1213.72 L1693.24 1213.72 L1693.83 1213.72 L1694.41 1213.72 L1695 1213.72 L1695.58 1213.72 L1696.17 1213.72 L1696.76 1213.72 L1697.34 1213.72 L1697.93 1213.72 L1698.52 1213.72 L1699.1 1213.72 L1699.69 1213.72 L1700.28 1213.72 L1700.86 1213.72 L1701.45 1213.72 L1702.04 1213.72 L1702.62 1213.72 L1703.21 1213.72 L1703.79 1213.72 L1704.38 1213.72 L1704.97 1213.72 L1705.55 1213.72 L1706.14 1213.72 L1706.73 1213.72 L1707.31 1213.72 L1707.9 1213.72 L1708.49 1213.72 L1709.07 1213.72 L1709.66 1213.72 L1710.24 1213.72 L1710.83 1213.72 L1711.42 1213.72 L1712 1213.72 L1712.59 1213.72 L1713.18 1213.72 L1713.76 1213.72 L1714.35 1213.72 L1714.94 1213.72 L1715.52 1213.72 L1716.11 1213.72 L1716.7 1213.72 L1717.28 1213.72 L1717.87 1213.72 L1718.45 1213.72 L1719.04 1213.72 L1719.63 1213.72 L1720.21 1213.72 L1720.8 1213.72 L1721.39 1213.72 L1721.97 1213.72 L1722.56 1213.72 L1723.15 1213.72 L1723.73 1213.72 L1724.32 1213.72 L1724.91 1213.72 L1725.49 1213.72 L1726.08 1213.72 L1726.66 1213.72 L1727.25 1213.72 L1727.84 1213.72 L1728.42 1213.72 L1729.01 1213.72 L1729.6 1213.72 L1730.18 1213.72 L1730.77 1213.72 L1731.36 1213.72 L1731.94 1213.72 L1732.53 1213.72 L1733.11 1213.72 L1733.7 1213.72 L1734.29 1213.72 L1734.87 1213.72 L1735.46 1213.72 L1736.05 1213.72 L1736.63 1213.72 L1737.22 1213.72 L1737.81 1213.72 L1738.39 1213.72 L1738.98 1213.72 L1739.57 1213.72 L1740.15 1213.72 L1740.74 1213.72 L1741.32 1213.72 L1741.91 1213.72 L1742.5 1213.72 L1743.08 1213.72 L1743.67 1213.72 L1744.26 1213.72 L1744.84 1213.72 L1745.43 1213.72 L1746.02 1213.72 L1746.6 1213.72 L1747.19 1213.72 L1747.78 1213.72 L1748.36 1213.72 L1748.95 1213.72 L1749.53 1213.72 L1750.12 1213.72 L1750.71 1213.72 L1751.29 1213.72 L1751.88 1213.72 L1752.47 1213.72 L1753.05 1213.72 L1753.64 1213.72 L1754.23 1213.72 L1754.81 1213.72 L1755.4 1213.72 L1755.99 1213.72 L1756.57 1213.72 L1757.16 1213.72 L1757.74 1213.72 L1758.33 1213.72 L1758.92 1213.72 L1759.5 1213.72 L1760.09 1213.72 L1760.68 1213.72 L1761.26 1213.72 L1761.85 1213.72 L1762.44 1213.72 L1763.02 1213.72 L1763.61 1213.72 L1764.19 1213.72 L1764.78 1213.72 L1765.37 1213.72 L1765.95 1213.72 L1766.54 1213.72 L1767.13 1213.72 L1767.71 1213.72 L1768.3 1213.72 L1768.89 1213.72 L1769.47 1213.72 L1770.06 1213.72 L1770.65 1213.72 L1771.23 1213.72 L1771.82 1213.72 L1772.4 1213.72 L1772.99 1213.72 L1773.58 1213.72 L1774.16 1213.72 L1774.75 1213.72 L1775.34 1213.72 L1775.92 1213.72 L1776.51 1213.72 L1777.1 1213.72 L1777.68 1213.72 L1778.27 1213.72 L1778.86 1213.72 L1779.44 1213.72 L1780.03 1213.72 L1780.61 1213.72 L1781.2 1213.72 L1781.79 1213.72 L1782.37 1213.72 L1782.96 1213.72 L1783.55 1213.72 L1784.13 1213.72 L1784.72 1213.72 L1785.31 1213.72 L1785.89 1213.72 L1786.48 1213.72 L1787.06 1213.72 L1787.65 1213.72 L1788.24 1213.72 L1788.82 1213.72 L1789.41 1213.72 L1790 1213.72 L1790.58 1213.72 L1791.17 1213.72 L1791.76 1213.72 L1792.34 1213.72 L1792.93 1213.72 L1793.52 1213.72 L1794.1 1213.72 L1794.69 1213.72 L1795.27 1213.72 L1795.86 1213.72 L1796.45 1213.72 L1797.03 1213.72 L1797.62 1213.72 L1798.21 1213.72 L1798.79 1213.72 L1799.38 1213.72 L1799.97 1213.72 L1800.55 1213.72 L1801.14 1213.72 L1801.73 1213.72 L1802.31 1213.72 L1802.9 1213.72 L1803.48 1213.72 L1804.07 1213.72 L1804.66 1213.72 L1805.24 1213.72 L1805.83 1213.72 L1806.42 1213.72 L1807 1213.72 L1807.59 1213.72 L1808.18 1213.72 L1808.76 1213.72 L1809.35 1213.72 L1809.94 1213.72 L1810.52 1213.72 L1811.11 1213.72 L1811.69 1213.72 L1812.28 1213.72 L1812.87 1213.72 L1813.45 1213.72 L1814.04 1213.72 L1814.63 1213.72 L1815.21 1213.72 L1815.8 1213.72 L1816.39 1213.72 L1816.97 1213.72 L1817.56 1213.72 L1818.14 1213.72 L1818.73 1213.72 L1819.32 1213.72 L1819.9 1213.72 L1820.49 1213.72 L1821.08 1213.72 L1821.66 1213.72 L1822.25 1213.72 L1822.84 1213.72 L1823.42 1213.72 L1824.01 1213.72 L1824.6 1213.72 L1825.18 1213.72 L1825.77 1213.72 L1826.35 1213.72 L1826.94 1213.72 L1827.53 1213.72 L1828.11 1213.72 L1828.7 1213.72 L1829.29 1213.72 L1829.87 1213.72 L1830.46 1213.72 L1831.05 1213.72 L1831.63 1213.72 L1832.22 1213.72 L1832.81 1213.72 L1833.39 1213.72 L1833.98 1213.72 L1834.56 1213.72 L1835.15 1213.72 L1835.74 1213.72 L1836.32 1213.72 L1836.91 1213.72 L1837.5 1213.72 L1838.08 1213.72 L1838.67 1213.72 L1839.26 1213.72 L1839.84 1213.72 L1840.43 1213.72 L1841.01 1213.72 L1841.6 1213.72 L1842.19 1213.72 L1842.77 1213.72 L1843.36 1213.72 L1843.95 1213.72 L1844.53 1213.72 L1845.12 1213.72 L1845.71 1213.72 L1846.29 1213.72 L1846.88 1213.72 L1847.47 1213.72 L1848.05 1213.72 L1848.64 1213.72 L1849.22 1213.72 L1849.81 1213.72 L1850.4 1213.72 L1850.98 1213.72 L1851.57 1213.72 L1852.16 1213.72 L1852.74 1213.72 L1853.33 1213.72 L1853.92 1213.72 L1854.5 1213.72 L1855.09 1213.72 L1855.68 1213.72 L1856.26 1213.72 L1856.85 1213.72 L1857.43 1213.72 L1858.02 1213.72 L1858.61 1213.72 L1859.19 1213.72 L1859.78 1213.72 L1860.37 1213.72 L1860.95 1213.72 L1861.54 1213.72 L1862.13 1213.72 L1862.71 1213.72 L1863.3 1213.72 L1863.88 1213.72 L1864.47 1213.72 L1865.06 1213.72 L1865.64 1213.72 L1866.23 1213.72 L1866.82 1213.72 L1867.4 1213.72 L1867.99 1213.72 L1868.58 1213.72 L1869.16 1213.72 L1869.75 1213.72 L1870.34 1213.72 L1870.92 1213.72 L1871.51 1213.72 L1872.09 1213.72 L1872.68 1213.72 L1873.27 1213.72 L1873.85 1213.72 L1874.44 1213.72 L1875.03 1213.72 L1875.61 1213.72 L1876.2 1213.72 L1876.79 1213.72 L1877.37 1213.72 L1877.96 1213.72 L1878.55 1213.72 L1879.13 1213.72 L1879.72 1213.72 L1880.3 1213.72 L1880.89 1213.72 L1881.48 1213.72 L1882.06 1213.72 L1882.65 1213.72 L1883.24 1213.72 L1883.82 1213.72 L1884.41 1213.72 L1885 1213.72 L1885.58 1213.72 L1886.17 1213.72 L1886.76 1213.72 L1887.34 1213.72 L1887.93 1213.72 L1888.51 1213.72 L1889.1 1213.72 L1889.69 1213.72 L1890.27 1213.72 L1890.86 1213.72 L1891.45 1213.72 L1892.03 1213.72 L1892.62 1213.72 L1893.21 1213.72 L1893.79 1213.72 L1894.38 1213.72 L1894.96 1213.72 L1895.55 1213.72 L1896.14 1213.72 L1896.72 1213.72 L1897.31 1213.72 L1897.9 1213.72 L1898.48 1213.72 L1899.07 1213.72 L1899.66 1213.72 L1900.24 1213.72 L1900.83 1213.72 L1901.42 1213.72 L1902 1213.72 L1902.59 1213.72 L1903.17 1213.72 L1903.76 1213.72 L1904.35 1213.72 L1904.93 1213.72 L1905.52 1213.72 L1906.11 1213.72 L1906.69 1213.72 L1907.28 1213.72 L1907.87 1213.72 L1908.45 1213.72 L1909.04 1213.72 L1909.63 1213.72 L1910.21 1213.72 L1910.8 1213.72 L1911.38 1213.72 L1911.97 1213.72 L1912.56 1213.72 L1913.14 1213.72 L1913.73 1213.72 L1914.32 1213.72 L1914.9 1213.72 L1915.49 1213.72 L1916.08 1213.72 L1916.66 1213.72 L1917.25 1213.72 L1917.83 1213.72 L1918.42 1213.72 L1919.01 1213.72 L1919.59 1213.72 L1920.18 1213.72 L1920.77 1213.72 L1921.35 1213.72 L1921.94 1213.72 L1922.53 1213.72 L1923.11 1213.72 L1923.7 1213.72 L1924.29 1213.72 L1924.87 1213.72 L1925.46 1213.72 L1926.04 1213.72 L1926.63 1213.72 L1927.22 1213.72 L1927.8 1213.72 L1928.39 1213.72 L1928.98 1213.72 L1929.56 1213.72 L1930.15 1213.72 L1930.74 1213.72 L1931.32 1213.72 L1931.91 1213.72 L1932.5 1213.72 L1933.08 1213.72 L1933.67 1213.72 L1934.25 1213.72 L1934.84 1213.72 L1935.43 1213.72 L1936.01 1213.72 L1936.6 1213.72 L1937.19 1213.72 L1937.77 1213.72 L1938.36 1213.72 L1938.95 1213.72 L1939.53 1213.72 L1940.12 1213.72 L1940.71 1213.72 L1941.29 1213.72 L1941.88 1213.72 L1942.46 1213.72 L1943.05 1213.72 L1943.64 1213.72 L1944.22 1213.72 L1944.81 1213.72 L1945.4 1213.72 L1945.98 1213.72 L1946.57 1213.72 L1947.16 1213.72 L1947.74 1213.72 L1948.33 1213.72 L1948.91 1213.72 L1949.5 1213.72 L1950.09 1213.72 L1950.67 1213.72 L1951.26 1213.72 L1951.85 1213.72 L1952.43 1213.72 L1953.02 1213.72 L1953.61 1213.72 L1954.19 1213.72 L1954.78 1213.72 L1955.37 1213.72 L1955.95 1213.72 L1956.54 1213.72 L1957.12 1213.72 L1957.71 1213.72 L1958.3 1213.72 L1958.88 1213.72 L1959.47 1213.72 L1960.06 1213.72 L1960.64 1213.72 L1961.23 1213.72 L1961.82 1213.72 L1962.4 1213.72 L1962.99 1213.72 L1963.58 1213.72 L1964.16 1213.72 L1964.75 1213.72 L1965.33 1213.72 L1965.92 1213.72 L1966.51 1213.72 L1967.09 1213.72 L1967.68 1213.72 L1968.27 1213.72 L1968.85 1213.72 L1969.44 1213.72 L1970.03 1213.72 L1970.61 1213.72 L1971.2 1213.72 L1971.78 1213.72 L1972.37 1213.72 L1972.96 1213.72 L1973.54 1213.72 L1974.13 1213.72 L1974.72 1213.72 L1975.3 1213.72 L1975.89 1213.72 L1976.48 1213.72 L1977.06 1213.72 L1977.65 1213.72 L1978.24 1213.72 L1978.82 1213.72 L1979.41 1213.72 L1979.99 1213.72 L1980.58 1213.72 L1981.17 1213.72 L1981.75 1213.72 L1982.34 1213.72 L1982.93 1213.72 L1983.51 1213.72 L1984.1 1213.72 L1984.69 1213.72 L1985.27 1213.72 L1985.86 1213.72 L1986.45 1213.72 L1987.03 1213.72 L1987.62 1213.72 L1988.2 1213.72 L1988.79 1213.72 L1989.38 1213.72 L1989.96 1213.72 L1990.55 1213.72 L1991.14 1213.72 L1991.72 1213.72 L1992.31 1213.72 L1992.9 1213.72 L1993.48 1213.72 L1994.07 1213.72 L1994.65 1213.72 L1995.24 1213.72 L1995.83 1213.72 L1996.41 1213.72 L1997 1213.72 L1997.59 1213.72 L1998.17 1213.72 L1998.76 1213.72 L1999.35 1213.72 L1999.93 1213.72 L2000.52 1213.72 L2001.11 1213.72 L2001.69 1213.72 L2002.28 1213.72 L2002.86 1213.72 L2003.45 1213.72 L2004.04 1213.72 L2004.62 1213.72 L2005.21 1213.72 L2005.8 1213.72 L2006.38 1213.72 L2006.97 1213.72 L2007.56 1213.72 L2008.14 1213.72 L2008.73 1213.72 L2009.32 1213.72 L2009.9 1213.72 L2010.49 1213.72 L2011.07 1213.72 L2011.66 1213.72 L2012.25 1213.72 L2012.83 1213.72 L2013.42 1213.72 L2014.01 1213.72 L2014.59 1213.72 L2015.18 1213.72 L2015.77 1213.72 L2016.35 1213.72 L2016.94 1213.72 L2017.53 1213.72 L2018.11 1213.72 L2018.7 1213.72 L2019.28 1213.72 L2019.87 1213.72 L2020.46 1213.72 L2021.04 1213.72 L2021.63 1213.72 L2022.22 1213.72 L2022.8 1213.72 L2023.39 1213.72 L2023.98 1213.72 L2024.56 1213.72 L2025.15 1213.72 L2025.73 1213.72 L2026.32 1213.72 L2026.91 1213.72 L2027.49 1213.72 L2028.08 1213.72 L2028.67 1213.72 L2029.25 1213.72 L2029.84 1213.72 L2030.43 1213.72 L2031.01 1213.72 L2031.6 1213.72 L2032.19 1213.72 L2032.77 1213.72 L2033.36 1213.72 L2033.94 1213.72 L2034.53 1213.72 L2035.12 1213.72 L2035.7 1213.72 L2036.29 1213.72 L2036.88 1213.72 L2037.46 1213.72 L2038.05 1213.72 L2038.64 1213.72 L2039.22 1213.72 L2039.81 1213.72 L2040.4 1213.72 L2040.98 1213.72 L2041.57 1213.72 L2042.15 1213.72 L2042.74 1213.72 L2043.33 1213.72 L2043.91 1213.72 L2044.5 1213.72 L2045.09 1213.72 L2045.67 1213.72 L2046.26 1213.72 L2046.85 1213.72 L2047.43 1213.72 L2048.02 1213.72 L2048.6 1213.72 L2049.19 1213.72 L2049.78 1213.72 L2050.36 1213.72 L2050.95 1213.72 L2051.54 1213.72 L2052.12 1213.72 L2052.71 1213.72 L2053.3 1213.72 L2053.88 1213.72 L2054.47 1213.72 L2055.06 1213.72 L2055.64 1213.72 L2056.23 1213.72 L2056.81 1213.72 L2057.4 1213.72 L2057.99 1213.72 L2058.57 1213.72 L2059.16 1213.72 L2059.75 1213.72 L2060.33 1213.72 L2060.92 1213.72 L2061.51 1213.72 L2062.09 1213.72 L2062.68 1213.72 L2063.27 1213.72 L2063.85 1213.72 L2064.44 1213.72 L2065.02 1213.72 L2065.61 1213.72 L2066.2 1213.72 L2066.78 1213.72 L2067.37 1213.72 L2067.96 1213.72 L2068.54 1213.72 L2069.13 1213.72 L2069.72 1213.72 L2070.3 1213.72 L2070.89 1213.72 L2071.48 1213.72 L2072.06 1213.72 L2072.65 1213.72 L2073.23 1213.72 L2073.82 1213.72 L2074.41 1213.72 L2074.99 1213.72 L2075.58 1213.72 L2076.17 1213.72 L2076.75 1213.72 L2077.34 1213.72 L2077.93 1213.72 L2078.51 1213.72 L2079.1 1213.72 L2079.68 1213.72 L2080.27 1213.72 L2080.86 1213.72 L2081.44 1213.72 L2082.03 1213.72 L2082.62 1213.72 L2083.2 1213.72 L2083.79 1213.72 L2084.38 1213.72 L2084.96 1213.72 L2085.55 1213.72 L2086.14 1213.72 L2086.72 1213.72 L2087.31 1213.72 L2087.89 1213.72 L2088.48 1213.72 L2089.07 1213.72 L2089.65 1213.72 L2090.24 1213.72 L2090.83 1213.72 L2091.41 1213.72 L2092 1213.72 L2092.59 1213.72 L2093.17 1213.72 L2093.76 1213.72 L2094.35 1213.72 L2094.93 1213.72 L2095.52 1213.72 L2096.1 1213.72 L2096.69 1213.72 L2097.28 1213.72 L2097.86 1213.72 L2098.45 1213.72 L2099.04 1213.72 L2099.62 1213.72 L2100.21 1213.72 L2100.8 1213.72 L2101.38 1213.72 L2101.97 1213.72 L2102.55 1213.72 L2103.14 1213.72 L2103.73 1213.72 L2104.31 1213.72 L2104.9 1213.72 L2105.49 1213.72 L2106.07 1213.72 L2106.66 1213.72 L2107.25 1213.72 L2107.83 1213.72 L2108.42 1213.72 L2109.01 1213.72 L2109.59 1213.72 L2110.18 1213.72 L2110.76 1213.72 L2111.35 1213.72 L2111.94 1213.72 L2112.52 1213.72 L2113.11 1213.72 L2113.7 1213.72 L2114.28 1213.72 L2114.87 1213.72 L2115.46 1213.72 L2116.04 1213.72 L2116.63 1213.72 L2117.22 1213.72 L2117.8 1213.72 L2118.39 1213.72 L2118.97 1213.72 L2119.56 1213.72 L2120.15 1213.72 L2120.73 1213.72 L2121.32 1213.72 L2121.91 1213.72 L2122.49 1213.72 L2123.08 1213.72 L2123.67 1213.72 L2124.25 1213.72 L2124.84 1213.72 L2125.42 1213.72 L2126.01 1213.72 L2126.6 1213.72 L2127.18 1213.72 L2127.77 1213.72 L2128.36 1213.72 L2128.94 1213.72 L2129.53 1213.72 L2130.12 1213.72 L2130.7 1213.72 L2131.29 1213.72 L2131.88 1213.72 L2132.46 1213.72 L2133.05 1213.72 L2133.63 1213.72 L2134.22 1213.72 L2134.81 1213.72 L2135.39 1213.72 L2135.98 1213.72 L2136.57 1213.72 L2137.15 1213.72 L2137.74 1213.72 L2138.33 1213.72 L2138.91 1213.72 L2139.5 1213.72 L2140.09 1213.72 L2140.67 1213.72 L2141.26 1213.72 L2141.84 1213.72 L2142.43 1213.72 L2143.02 1213.72 L2143.6 1213.72 L2144.19 1213.72 L2144.78 1213.72 L2145.36 1213.72 L2145.95 1213.72 L2146.54 1213.72 L2147.12 1213.72 L2147.71 1213.72 L2148.3 1213.72 L2148.88 1213.72 L2149.47 1213.72 L2150.05 1213.72 L2150.64 1213.72 L2151.23 1213.72 L2151.81 1213.72 L2152.4 1213.72 L2152.99 1213.72 L2153.57 1213.72 L2154.16 1213.72 L2154.75 1213.72 L2155.33 1213.72 L2155.92 1213.72 L2156.5 1213.72 L2157.09 1213.72 L2157.68 1213.72 L2158.26 1213.72 L2158.26 1213.57 L2157.68 1213.57 L2157.09 1213.57 L2156.5 1213.57 L2155.92 1213.57 L2155.33 1213.57 L2154.75 1213.57 L2154.16 1213.57 L2153.57 1213.57 L2152.99 1213.57 L2152.4 1213.57 L2151.81 1213.57 L2151.23 1213.57 L2150.64 1213.57 L2150.05 1213.57 L2149.47 1213.57 L2148.88 1213.57 L2148.3 1213.57 L2147.71 1213.57 L2147.12 1213.57 L2146.54 1213.57 L2145.95 1213.57 L2145.36 1213.57 L2144.78 1213.57 L2144.19 1213.57 L2143.6 1213.57 L2143.02 1213.57 L2142.43 1213.57 L2141.84 1213.57 L2141.26 1213.57 L2140.67 1213.57 L2140.09 1213.57 L2139.5 1213.57 L2138.91 1213.57 L2138.33 1213.57 L2137.74 1213.57 L2137.15 1213.57 L2136.57 1213.57 L2135.98 1213.57 L2135.39 1213.57 L2134.81 1213.57 L2134.22 1213.57 L2133.63 1213.57 L2133.05 1213.57 L2132.46 1213.57 L2131.88 1213.57 L2131.29 1213.57 L2130.7 1213.57 L2130.12 1213.57 L2129.53 1213.57 L2128.94 1213.57 L2128.36 1213.57 L2127.77 1213.57 L2127.18 1213.57 L2126.6 1213.57 L2126.01 1213.57 L2125.42 1213.57 L2124.84 1213.57 L2124.25 1213.57 L2123.67 1213.57 L2123.08 1213.57 L2122.49 1213.57 L2121.91 1213.57 L2121.32 1213.57 L2120.73 1213.57 L2120.15 1213.57 L2119.56 1213.57 L2118.97 1213.57 L2118.39 1213.57 L2117.8 1213.57 L2117.22 1213.57 L2116.63 1213.57 L2116.04 1213.57 L2115.46 1213.57 L2114.87 1213.57 L2114.28 1213.57 L2113.7 1213.57 L2113.11 1213.57 L2112.52 1213.57 L2111.94 1213.57 L2111.35 1213.57 L2110.76 1213.57 L2110.18 1213.57 L2109.59 1213.57 L2109.01 1213.57 L2108.42 1213.57 L2107.83 1213.57 L2107.25 1213.57 L2106.66 1213.57 L2106.07 1213.57 L2105.49 1213.57 L2104.9 1213.57 L2104.31 1213.57 L2103.73 1213.57 L2103.14 1213.57 L2102.55 1213.57 L2101.97 1213.57 L2101.38 1213.57 L2100.8 1213.57 L2100.21 1213.57 L2099.62 1213.57 L2099.04 1213.57 L2098.45 1213.57 L2097.86 1213.57 L2097.28 1213.57 L2096.69 1213.57 L2096.1 1213.57 L2095.52 1213.57 L2094.93 1213.57 L2094.35 1213.57 L2093.76 1213.57 L2093.17 1213.57 L2092.59 1213.57 L2092 1213.57 L2091.41 1213.57 L2090.83 1213.57 L2090.24 1213.57 L2089.65 1213.57 L2089.07 1213.57 L2088.48 1213.57 L2087.89 1213.57 L2087.31 1213.57 L2086.72 1213.57 L2086.14 1213.57 L2085.55 1213.57 L2084.96 1213.57 L2084.38 1213.57 L2083.79 1213.57 L2083.2 1213.57 L2082.62 1213.57 L2082.03 1213.57 L2081.44 1213.57 L2080.86 1213.57 L2080.27 1213.57 L2079.68 1213.57 L2079.1 1213.57 L2078.51 1213.57 L2077.93 1213.57 L2077.34 1213.57 L2076.75 1213.57 L2076.17 1213.57 L2075.58 1213.57 L2074.99 1213.57 L2074.41 1213.57 L2073.82 1213.57 L2073.23 1213.57 L2072.65 1213.57 L2072.06 1213.57 L2071.48 1213.57 L2070.89 1213.57 L2070.3 1213.57 L2069.72 1213.57 L2069.13 1213.57 L2068.54 1213.57 L2067.96 1213.57 L2067.37 1213.57 L2066.78 1213.57 L2066.2 1213.57 L2065.61 1213.57 L2065.02 1213.57 L2064.44 1213.57 L2063.85 1213.57 L2063.27 1213.57 L2062.68 1213.57 L2062.09 1213.57 L2061.51 1213.57 L2060.92 1213.57 L2060.33 1213.57 L2059.75 1213.57 L2059.16 1213.57 L2058.57 1213.57 L2057.99 1213.57 L2057.4 1213.57 L2056.81 1213.57 L2056.23 1213.57 L2055.64 1213.57 L2055.06 1213.57 L2054.47 1213.57 L2053.88 1213.57 L2053.3 1213.57 L2052.71 1213.57 L2052.12 1213.57 L2051.54 1213.57 L2050.95 1213.57 L2050.36 1213.57 L2049.78 1213.57 L2049.19 1213.57 L2048.6 1213.57 L2048.02 1213.57 L2047.43 1213.57 L2046.85 1213.57 L2046.26 1213.57 L2045.67 1213.57 L2045.09 1213.57 L2044.5 1213.57 L2043.91 1213.57 L2043.33 1213.57 L2042.74 1213.57 L2042.15 1213.57 L2041.57 1213.57 L2040.98 1213.57 L2040.4 1213.57 L2039.81 1213.57 L2039.22 1213.57 L2038.64 1213.57 L2038.05 1213.57 L2037.46 1213.57 L2036.88 1213.57 L2036.29 1213.57 L2035.7 1213.57 L2035.12 1213.57 L2034.53 1213.57 L2033.94 1213.57 L2033.36 1213.57 L2032.77 1213.57 L2032.19 1213.57 L2031.6 1213.57 L2031.01 1213.57 L2030.43 1213.57 L2029.84 1213.57 L2029.25 1213.57 L2028.67 1213.57 L2028.08 1213.57 L2027.49 1213.57 L2026.91 1213.57 L2026.32 1213.57 L2025.73 1213.57 L2025.15 1213.57 L2024.56 1213.57 L2023.98 1213.57 L2023.39 1213.57 L2022.8 1213.57 L2022.22 1213.57 L2021.63 1213.57 L2021.04 1213.57 L2020.46 1213.57 L2019.87 1213.57 L2019.28 1213.57 L2018.7 1213.57 L2018.11 1213.57 L2017.53 1213.57 L2016.94 1213.57 L2016.35 1213.57 L2015.77 1213.57 L2015.18 1213.57 L2014.59 1213.57 L2014.01 1213.57 L2013.42 1213.57 L2012.83 1213.57 L2012.25 1213.57 L2011.66 1213.57 L2011.07 1213.57 L2010.49 1213.57 L2009.9 1213.57 L2009.32 1213.57 L2008.73 1213.57 L2008.14 1213.57 L2007.56 1213.57 L2006.97 1213.57 L2006.38 1213.57 L2005.8 1213.57 L2005.21 1213.57 L2004.62 1213.57 L2004.04 1213.57 L2003.45 1213.57 L2002.86 1213.57 L2002.28 1213.57 L2001.69 1213.57 L2001.11 1213.57 L2000.52 1213.57 L1999.93 1213.57 L1999.35 1213.57 L1998.76 1213.57 L1998.17 1213.57 L1997.59 1213.57 L1997 1213.57 L1996.41 1213.57 L1995.83 1213.57 L1995.24 1213.57 L1994.65 1213.57 L1994.07 1213.57 L1993.48 1213.57 L1992.9 1213.57 L1992.31 1213.57 L1991.72 1213.57 L1991.14 1213.57 L1990.55 1213.57 L1989.96 1213.57 L1989.38 1213.57 L1988.79 1213.57 L1988.2 1213.57 L1987.62 1213.57 L1987.03 1213.57 L1986.45 1213.57 L1985.86 1213.57 L1985.27 1213.57 L1984.69 1213.57 L1984.1 1213.57 L1983.51 1213.57 L1982.93 1213.57 L1982.34 1213.57 L1981.75 1213.57 L1981.17 1213.57 L1980.58 1213.57 L1979.99 1213.57 L1979.41 1213.57 L1978.82 1213.57 L1978.24 1213.57 L1977.65 1213.57 L1977.06 1213.57 L1976.48 1213.57 L1975.89 1213.57 L1975.3 1213.57 L1974.72 1213.57 L1974.13 1213.57 L1973.54 1213.57 L1972.96 1213.57 L1972.37 1213.57 L1971.78 1213.57 L1971.2 1213.57 L1970.61 1213.57 L1970.03 1213.57 L1969.44 1213.57 L1968.85 1213.57 L1968.27 1213.57 L1967.68 1213.57 L1967.09 1213.57 L1966.51 1213.57 L1965.92 1213.57 L1965.33 1213.57 L1964.75 1213.57 L1964.16 1213.57 L1963.58 1213.57 L1962.99 1213.57 L1962.4 1213.57 L1961.82 1213.57 L1961.23 1213.57 L1960.64 1213.57 L1960.06 1213.57 L1959.47 1213.57 L1958.88 1213.57 L1958.3 1213.57 L1957.71 1213.57 L1957.12 1213.57 L1956.54 1213.57 L1955.95 1213.57 L1955.37 1213.57 L1954.78 1213.57 L1954.19 1213.57 L1953.61 1213.57 L1953.02 1213.57 L1952.43 1213.57 L1951.85 1213.57 L1951.26 1213.57 L1950.67 1213.57 L1950.09 1213.57 L1949.5 1213.57 L1948.91 1213.57 L1948.33 1213.57 L1947.74 1213.57 L1947.16 1213.57 L1946.57 1213.57 L1945.98 1213.57 L1945.4 1213.57 L1944.81 1213.57 L1944.22 1213.57 L1943.64 1213.57 L1943.05 1213.57 L1942.46 1213.57 L1941.88 1213.57 L1941.29 1213.57 L1940.71 1213.57 L1940.12 1213.57 L1939.53 1213.57 L1938.95 1213.57 L1938.36 1213.57 L1937.77 1213.57 L1937.19 1213.57 L1936.6 1213.57 L1936.01 1213.57 L1935.43 1213.57 L1934.84 1213.57 L1934.25 1213.57 L1933.67 1213.57 L1933.08 1213.57 L1932.5 1213.57 L1931.91 1213.57 L1931.32 1213.57 L1930.74 1213.57 L1930.15 1213.57 L1929.56 1213.57 L1928.98 1213.57 L1928.39 1213.57 L1927.8 1213.57 L1927.22 1213.57 L1926.63 1213.57 L1926.04 1213.57 L1925.46 1213.57 L1924.87 1213.57 L1924.29 1213.57 L1923.7 1213.57 L1923.11 1213.57 L1922.53 1213.57 L1921.94 1213.57 L1921.35 1213.57 L1920.77 1213.57 L1920.18 1213.57 L1919.59 1213.57 L1919.01 1213.57 L1918.42 1213.57 L1917.83 1213.57 L1917.25 1213.57 L1916.66 1213.57 L1916.08 1213.57 L1915.49 1213.57 L1914.9 1213.57 L1914.32 1213.57 L1913.73 1213.57 L1913.14 1213.57 L1912.56 1213.57 L1911.97 1213.57 L1911.38 1213.57 L1910.8 1213.57 L1910.21 1213.57 L1909.63 1213.57 L1909.04 1213.57 L1908.45 1213.57 L1907.87 1213.57 L1907.28 1213.57 L1906.69 1213.57 L1906.11 1213.57 L1905.52 1213.57 L1904.93 1213.57 L1904.35 1213.57 L1903.76 1213.57 L1903.17 1213.57 L1902.59 1213.57 L1902 1213.57 L1901.42 1213.57 L1900.83 1213.57 L1900.24 1213.57 L1899.66 1213.57 L1899.07 1213.57 L1898.48 1213.57 L1897.9 1213.57 L1897.31 1213.57 L1896.72 1213.57 L1896.14 1213.57 L1895.55 1213.57 L1894.96 1213.57 L1894.38 1213.57 L1893.79 1213.57 L1893.21 1213.57 L1892.62 1213.57 L1892.03 1213.57 L1891.45 1213.57 L1890.86 1213.57 L1890.27 1213.57 L1889.69 1213.57 L1889.1 1213.57 L1888.51 1213.57 L1887.93 1213.57 L1887.34 1213.57 L1886.76 1213.57 L1886.17 1213.57 L1885.58 1213.57 L1885 1213.57 L1884.41 1213.57 L1883.82 1213.57 L1883.24 1213.57 L1882.65 1213.57 L1882.06 1213.57 L1881.48 1213.57 L1880.89 1213.57 L1880.3 1213.57 L1879.72 1213.57 L1879.13 1213.57 L1878.55 1213.57 L1877.96 1213.57 L1877.37 1213.57 L1876.79 1213.57 L1876.2 1213.57 L1875.61 1213.57 L1875.03 1213.57 L1874.44 1213.57 L1873.85 1213.57 L1873.27 1213.57 L1872.68 1213.57 L1872.09 1213.57 L1871.51 1213.57 L1870.92 1213.57 L1870.34 1213.57 L1869.75 1213.57 L1869.16 1213.57 L1868.58 1213.57 L1867.99 1213.57 L1867.4 1213.57 L1866.82 1213.57 L1866.23 1213.57 L1865.64 1213.57 L1865.06 1213.57 L1864.47 1213.57 L1863.88 1213.57 L1863.3 1213.57 L1862.71 1213.57 L1862.13 1213.57 L1861.54 1213.57 L1860.95 1213.57 L1860.37 1213.57 L1859.78 1213.57 L1859.19 1213.57 L1858.61 1213.57 L1858.02 1213.57 L1857.43 1213.57 L1856.85 1213.57 L1856.26 1213.57 L1855.68 1213.57 L1855.09 1213.57 L1854.5 1213.57 L1853.92 1213.57 L1853.33 1213.57 L1852.74 1213.57 L1852.16 1213.57 L1851.57 1213.57 L1850.98 1213.57 L1850.4 1213.57 L1849.81 1213.57 L1849.22 1213.57 L1848.64 1213.57 L1848.05 1213.57 L1847.47 1213.57 L1846.88 1213.57 L1846.29 1213.57 L1845.71 1213.57 L1845.12 1213.57 L1844.53 1213.57 L1843.95 1213.57 L1843.36 1213.57 L1842.77 1213.57 L1842.19 1213.57 L1841.6 1213.57 L1841.01 1213.57 L1840.43 1213.57 L1839.84 1213.57 L1839.26 1213.57 L1838.67 1213.57 L1838.08 1213.57 L1837.5 1213.57 L1836.91 1213.57 L1836.32 1213.57 L1835.74 1213.57 L1835.15 1213.57 L1834.56 1213.57 L1833.98 1213.57 L1833.39 1213.57 L1832.81 1213.57 L1832.22 1213.57 L1831.63 1213.57 L1831.05 1213.57 L1830.46 1213.57 L1829.87 1213.57 L1829.29 1213.57 L1828.7 1213.57 L1828.11 1213.57 L1827.53 1213.57 L1826.94 1213.57 L1826.35 1213.57 L1825.77 1213.57 L1825.18 1213.57 L1824.6 1213.57 L1824.01 1213.57 L1823.42 1213.57 L1822.84 1213.57 L1822.25 1213.57 L1821.66 1213.57 L1821.08 1213.57 L1820.49 1213.57 L1819.9 1213.57 L1819.32 1213.57 L1818.73 1213.57 L1818.14 1213.57 L1817.56 1213.57 L1816.97 1213.57 L1816.39 1213.57 L1815.8 1213.57 L1815.21 1213.57 L1814.63 1213.57 L1814.04 1213.57 L1813.45 1213.57 L1812.87 1213.57 L1812.28 1213.57 L1811.69 1213.57 L1811.11 1213.57 L1810.52 1213.57 L1809.94 1213.57 L1809.35 1213.57 L1808.76 1213.57 L1808.18 1213.57 L1807.59 1213.57 L1807 1213.57 L1806.42 1213.57 L1805.83 1213.57 L1805.24 1213.57 L1804.66 1213.57 L1804.07 1213.57 L1803.48 1213.57 L1802.9 1213.57 L1802.31 1213.57 L1801.73 1213.57 L1801.14 1213.57 L1800.55 1213.57 L1799.97 1213.57 L1799.38 1213.57 L1798.79 1213.57 L1798.21 1213.57 L1797.62 1213.57 L1797.03 1213.57 L1796.45 1213.57 L1795.86 1213.57 L1795.27 1213.57 L1794.69 1213.57 L1794.1 1213.57 L1793.52 1213.57 L1792.93 1213.57 L1792.34 1213.57 L1791.76 1213.57 L1791.17 1213.57 L1790.58 1213.57 L1790 1213.57 L1789.41 1213.57 L1788.82 1213.57 L1788.24 1213.57 L1787.65 1213.57 L1787.06 1213.57 L1786.48 1213.57 L1785.89 1213.57 L1785.31 1213.57 L1784.72 1213.57 L1784.13 1213.57 L1783.55 1213.57 L1782.96 1213.57 L1782.37 1213.57 L1781.79 1213.57 L1781.2 1213.57 L1780.61 1213.57 L1780.03 1213.57 L1779.44 1213.57 L1778.86 1213.57 L1778.27 1213.57 L1777.68 1213.57 L1777.1 1213.57 L1776.51 1213.57 L1775.92 1213.57 L1775.34 1213.57 L1774.75 1213.57 L1774.16 1213.57 L1773.58 1213.57 L1772.99 1213.57 L1772.4 1213.57 L1771.82 1213.57 L1771.23 1213.57 L1770.65 1213.57 L1770.06 1213.57 L1769.47 1213.57 L1768.89 1213.57 L1768.3 1213.57 L1767.71 1213.57 L1767.13 1213.57 L1766.54 1213.57 L1765.95 1213.57 L1765.37 1213.57 L1764.78 1213.57 L1764.19 1213.57 L1763.61 1213.57 L1763.02 1213.57 L1762.44 1213.57 L1761.85 1213.57 L1761.26 1213.57 L1760.68 1213.57 L1760.09 1213.57 L1759.5 1213.57 L1758.92 1213.57 L1758.33 1213.57 L1757.74 1213.57 L1757.16 1213.57 L1756.57 1213.57 L1755.99 1213.57 L1755.4 1213.57 L1754.81 1213.57 L1754.23 1213.57 L1753.64 1213.57 L1753.05 1213.57 L1752.47 1213.57 L1751.88 1213.57 L1751.29 1213.57 L1750.71 1213.57 L1750.12 1213.57 L1749.53 1213.57 L1748.95 1213.57 L1748.36 1213.57 L1747.78 1213.57 L1747.19 1213.57 L1746.6 1213.57 L1746.02 1213.57 L1745.43 1213.57 L1744.84 1213.57 L1744.26 1213.57 L1743.67 1213.57 L1743.08 1213.57 L1742.5 1213.57 L1741.91 1213.57 L1741.32 1213.57 L1740.74 1213.57 L1740.15 1213.57 L1739.57 1213.57 L1738.98 1213.57 L1738.39 1213.57 L1737.81 1213.57 L1737.22 1213.57 L1736.63 1213.57 L1736.05 1213.57 L1735.46 1213.57 L1734.87 1213.57 L1734.29 1213.57 L1733.7 1213.57 L1733.11 1213.57 L1732.53 1213.57 L1731.94 1213.57 L1731.36 1213.57 L1730.77 1213.57 L1730.18 1213.57 L1729.6 1213.57 L1729.01 1213.57 L1728.42 1213.57 L1727.84 1213.57 L1727.25 1213.57 L1726.66 1213.57 L1726.08 1213.57 L1725.49 1213.57 L1724.91 1213.57 L1724.32 1213.57 L1723.73 1213.57 L1723.15 1213.57 L1722.56 1213.57 L1721.97 1213.57 L1721.39 1213.57 L1720.8 1213.57 L1720.21 1213.57 L1719.63 1213.57 L1719.04 1213.57 L1718.45 1213.57 L1717.87 1213.57 L1717.28 1213.57 L1716.7 1213.57 L1716.11 1213.57 L1715.52 1213.57 L1714.94 1213.57 L1714.35 1213.57 L1713.76 1213.57 L1713.18 1213.57 L1712.59 1213.57 L1712 1213.57 L1711.42 1213.57 L1710.83 1213.57 L1710.24 1213.57 L1709.66 1213.57 L1709.07 1213.57 L1708.49 1213.57 L1707.9 1213.57 L1707.31 1213.57 L1706.73 1213.57 L1706.14 1213.57 L1705.55 1213.57 L1704.97 1213.57 L1704.38 1213.57 L1703.79 1213.57 L1703.21 1213.57 L1702.62 1213.57 L1702.04 1213.57 L1701.45 1213.57 L1700.86 1213.57 L1700.28 1213.57 L1699.69 1213.57 L1699.1 1213.57 L1698.52 1213.57 L1697.93 1213.57 L1697.34 1213.57 L1696.76 1213.57 L1696.17 1213.57 L1695.58 1213.57 L1695 1213.57 L1694.41 1213.57 L1693.83 1213.57 L1693.24 1213.57 L1692.65 1213.57 L1692.07 1213.57 L1691.48 1213.57 L1690.89 1213.57 L1690.31 1213.57 L1689.72 1213.57 L1689.13 1213.57 L1688.55 1213.57 L1687.96 1213.57 L1687.37 1213.57 L1686.79 1213.57 L1686.2 1213.57 L1685.62 1213.57 L1685.03 1213.57 L1684.44 1213.57 L1683.86 1213.57 L1683.27 1213.57 L1682.68 1213.57 L1682.1 1213.57 L1681.51 1213.57 L1680.92 1213.57 L1680.34 1213.57 L1679.75 1213.57 L1679.17 1213.57 L1678.58 1213.57 L1677.99 1213.57 L1677.41 1213.57 L1676.82 1213.57 L1676.23 1213.57 L1675.65 1213.57 L1675.06 1213.57 L1674.47 1213.57 L1673.89 1213.57 L1673.3 1213.57 L1672.71 1213.57 L1672.13 1213.57 L1671.54 1213.57 L1670.96 1213.57 L1670.37 1213.57 L1669.78 1213.57 L1669.2 1213.57 L1668.61 1213.57 L1668.02 1213.57 L1667.44 1213.57 L1666.85 1213.57 L1666.26 1213.57 L1665.68 1213.57 L1665.09 1213.57 L1664.5 1213.57 L1663.92 1213.57 L1663.33 1213.57 L1662.75 1213.57 L1662.16 1213.57 L1661.57 1213.57 L1660.99 1213.57 L1660.4 1213.57 L1659.81 1213.57 L1659.23 1213.57 L1658.64 1213.57 L1658.05 1213.57 L1657.47 1213.57 L1656.88 1213.57 L1656.29 1213.57 L1655.71 1213.57 L1655.12 1213.57 L1654.54 1213.57 L1653.95 1213.57 L1653.36 1213.57 L1652.78 1213.57 L1652.19 1213.57 L1651.6 1213.57 L1651.02 1213.57 L1650.43 1213.57 L1649.84 1213.57 L1649.26 1213.57 L1648.67 1213.57 L1648.09 1213.57 L1647.5 1213.57 L1646.91 1213.57 L1646.33 1213.57 L1645.74 1213.57 L1645.15 1213.57 L1644.57 1213.57 L1643.98 1213.57 L1643.39 1213.57 L1642.81 1213.57 L1642.22 1213.57 L1641.63 1213.57 L1641.05 1213.57 L1640.46 1213.57 L1639.88 1213.57 L1639.29 1213.57 L1638.7 1213.57 L1638.12 1213.57 L1637.53 1213.57 L1636.94 1213.57 L1636.36 1213.57 L1635.77 1213.57 L1635.18 1213.57 L1634.6 1213.57 L1634.01 1213.57 L1633.42 1213.57 L1632.84 1213.57 L1632.25 1213.57 L1631.67 1213.57 L1631.08 1213.57 L1630.49 1213.57 L1629.91 1213.57 L1629.32 1213.57 L1628.73 1213.57 L1628.15 1213.57 L1627.56 1213.57 L1626.97 1213.57 L1626.39 1213.57 L1625.8 1213.57 L1625.22 1213.57 L1624.63 1213.57 L1624.04 1213.57 L1623.46 1213.57 L1622.87 1213.57 L1622.28 1213.57 L1621.7 1213.57 L1621.11 1213.57 L1620.52 1213.57 L1619.94 1213.57 L1619.35 1213.57 L1618.76 1213.57 L1618.18 1213.57 L1617.59 1213.57 L1617.01 1213.57 L1616.42 1213.57 L1615.83 1213.57 L1615.25 1213.57 L1614.66 1213.57 L1614.07 1213.57 L1613.49 1213.57 L1612.9 1213.57 L1612.31 1213.57 L1611.73 1213.57 L1611.14 1213.57 L1610.55 1213.57 L1609.97 1213.57 L1609.38 1213.57 L1608.8 1213.57 L1608.21 1213.57 L1607.62 1213.57 L1607.04 1213.57 L1606.45 1213.57 L1605.86 1213.57 L1605.28 1213.57 L1604.69 1213.57 L1604.1 1213.57 L1603.52 1213.57 L1602.93 1213.57 L1602.34 1213.57 L1601.76 1213.57 L1601.17 1213.57 L1600.59 1213.57 L1600 1213.57 L1599.41 1213.57 L1598.83 1213.57 L1598.24 1213.57 L1597.65 1213.57 L1597.07 1213.57 L1596.48 1213.57 L1595.89 1213.57 L1595.31 1213.57 L1594.72 1213.57 L1594.14 1213.57 L1593.55 1213.57 L1592.96 1213.57 L1592.38 1213.57 L1591.79 1213.57 L1591.2 1213.57 L1590.62 1213.57 L1590.03 1213.57 L1589.44 1213.57 L1588.86 1213.57 L1588.27 1213.57 L1587.68 1213.57 L1587.1 1213.57 L1586.51 1213.57 L1585.93 1213.57 L1585.34 1213.57 L1584.75 1213.57 L1584.17 1213.57 L1583.58 1213.57 L1582.99 1213.57 L1582.41 1213.57 L1581.82 1213.57 L1581.23 1213.57 L1580.65 1213.57 L1580.06 1213.57 L1579.47 1213.57 L1578.89 1213.57 L1578.3 1213.57 L1577.72 1213.57 L1577.13 1213.57 L1576.54 1213.57 L1575.96 1213.57 L1575.37 1213.57 L1574.78 1213.57 L1574.2 1213.57 L1573.61 1213.57 L1573.02 1213.57 L1572.44 1213.57 L1571.85 1213.57 L1571.27 1213.57 L1570.68 1213.57 L1570.09 1213.57 L1569.51 1213.57 L1568.92 1213.57 L1568.33 1213.57 L1567.75 1213.57 L1567.16 1213.57 L1566.57 1213.57 L1565.99 1213.57 L1565.4 1213.57 L1564.81 1213.57 L1564.23 1213.57 L1563.64 1213.57 L1563.06 1213.57 L1562.47 1213.57 L1561.88 1213.57 L1561.3 1213.57 L1560.71 1213.57 L1560.12 1213.57 L1559.54 1213.57 L1558.95 1213.57 L1558.36 1213.57 L1557.78 1213.57 L1557.19 1213.57 L1556.6 1213.57 L1556.02 1213.57 L1555.43 1213.57 L1554.85 1213.57 L1554.26 1213.57 L1553.67 1213.57 L1553.09 1213.57 L1552.5 1213.57 L1551.91 1213.57 L1551.33 1213.57 L1550.74 1213.57 L1550.15 1213.57 L1549.57 1213.57 L1548.98 1213.57 L1548.4 1213.57 L1547.81 1213.57 L1547.22 1213.57 L1546.64 1213.57 L1546.05 1213.57 L1545.46 1213.57 L1544.88 1213.57 L1544.29 1213.57 L1543.7 1213.57 L1543.12 1213.57 L1542.53 1213.57 L1541.94 1213.57 L1541.36 1213.57 L1540.77 1213.57 L1540.19 1213.57 L1539.6 1213.57 L1539.01 1213.57 L1538.43 1213.57 L1537.84 1213.57 L1537.25 1213.57 L1536.67 1213.57 L1536.08 1213.57 L1535.49 1213.57 L1534.91 1213.57 L1534.32 1213.57 L1533.73 1213.57 L1533.15 1213.57 L1532.56 1213.57 L1531.98 1213.57 L1531.39 1213.57 L1530.8 1213.57 L1530.22 1213.57 L1529.63 1213.57 L1529.04 1213.57 L1528.46 1213.57 L1527.87 1213.57 L1527.28 1213.57 L1526.7 1213.57 L1526.11 1213.57 L1525.52 1213.57 L1524.94 1213.57 L1524.35 1213.57 L1523.77 1213.57 L1523.18 1213.57 L1522.59 1213.57 L1522.01 1213.57 L1521.42 1213.57 L1520.83 1213.57 L1520.25 1213.57 L1519.66 1213.57 L1519.07 1213.57 L1518.49 1213.57 L1517.9 1213.57 L1517.32 1213.57 L1516.73 1213.57 L1516.14 1213.57 L1515.56 1213.57 L1514.97 1213.57 L1514.38 1213.57 L1513.8 1213.57 L1513.21 1213.57 L1512.62 1213.57 L1512.04 1213.57 L1511.45 1213.57 L1510.86 1213.57 L1510.28 1213.57 L1509.69 1213.57 L1509.11 1213.57 L1508.52 1213.57 L1507.93 1213.57 L1507.35 1213.57 L1506.76 1213.57 L1506.17 1213.57 L1505.59 1213.57 L1505 1213.57 L1504.41 1213.57 L1503.83 1213.57 L1503.24 1213.57 L1502.65 1213.57 L1502.07 1213.57 L1501.48 1213.57 L1500.9 1213.57 L1500.31 1213.57 L1499.72 1213.57 L1499.14 1213.57 L1498.55 1213.57 L1497.96 1213.57 L1497.38 1213.57 L1496.79 1213.57 L1496.2 1213.57 L1495.62 1213.57 L1495.03 1213.57 L1494.45 1213.57 L1493.86 1213.57 L1493.27 1213.57 L1492.69 1213.57 L1492.1 1213.57 L1491.51 1213.57 L1490.93 1213.57 L1490.34 1213.57 L1489.75 1213.57 L1489.17 1213.57 L1488.58 1213.57 L1487.99 1213.57 L1487.41 1213.57 L1486.82 1213.57 L1486.24 1213.57 L1485.65 1213.57 L1485.06 1213.57 L1484.48 1213.57 L1483.89 1213.57 L1483.3 1213.57 L1482.72 1213.57 L1482.13 1213.57 L1481.54 1213.57 L1480.96 1213.57 L1480.37 1213.57 L1479.78 1213.57 L1479.2 1213.57 L1478.61 1213.57 L1478.03 1213.57 L1477.44 1213.57 L1476.85 1213.57 L1476.27 1213.57 L1475.68 1213.57 L1475.09 1213.57 L1474.51 1213.57 L1473.92 1213.57 L1473.33 1213.57 L1472.75 1213.57 L1472.16 1213.57 L1471.57 1213.57 L1470.99 1213.57 L1470.4 1213.57 L1469.82 1213.57 L1469.23 1213.57 L1468.64 1213.57 L1468.06 1213.57 L1467.47 1213.57 L1466.88 1213.57 L1466.3 1213.57 L1465.71 1213.57 L1465.12 1213.57 L1464.54 1213.57 L1463.95 1213.57 L1463.37 1213.57 L1462.78 1213.57 L1462.19 1213.57 L1461.61 1213.57 L1461.02 1213.57 L1460.43 1213.57 L1459.85 1213.57 L1459.26 1213.57 L1458.67 1213.57 L1458.09 1213.57 L1457.5 1213.57 L1456.91 1213.57 L1456.33 1213.57 L1455.74 1213.57 L1455.16 1213.57 L1454.57 1213.57 L1453.98 1213.57 L1453.4 1213.57 L1452.81 1213.57 L1452.22 1213.57 L1451.64 1213.57 L1451.05 1213.57 L1450.46 1213.57 L1449.88 1213.57 L1449.29 1213.57 L1448.7 1213.57 L1448.12 1213.57 L1447.53 1213.57 L1446.95 1213.57 L1446.36 1213.57 L1445.77 1213.57 L1445.19 1213.57 L1444.6 1213.57 L1444.01 1213.57 L1443.43 1213.57 L1442.84 1213.57 L1442.25 1213.57 L1441.67 1213.57 L1441.08 1213.57 L1440.5 1213.57 L1439.91 1213.57 L1439.32 1213.57 L1438.74 1213.57 L1438.15 1213.57 L1437.56 1213.57 L1436.98 1213.57 L1436.39 1213.57 L1435.8 1213.57 L1435.22 1213.57 L1434.63 1213.57 L1434.04 1213.57 L1433.46 1213.57 L1432.87 1213.57 L1432.29 1213.57 L1431.7 1213.57 L1431.11 1213.57 L1430.53 1213.57 L1429.94 1213.57 L1429.35 1213.57 L1428.77 1213.57 L1428.18 1213.57 L1427.59 1213.57 L1427.01 1213.57 L1426.42 1213.57 L1425.83 1213.57 L1425.25 1213.57 L1424.66 1213.57 L1424.08 1213.57 L1423.49 1213.57 L1422.9 1213.57 L1422.32 1213.57 L1421.73 1213.57 L1421.14 1213.57 L1420.56 1213.57 L1419.97 1213.57 L1419.38 1213.57 L1418.8 1213.57 L1418.21 1213.57 L1417.63 1213.57 L1417.04 1213.57 L1416.45 1213.57 L1415.87 1213.57 L1415.28 1213.57 L1414.69 1213.57 L1414.11 1213.57 L1413.52 1213.57 L1412.93 1213.57 L1412.35 1213.57 L1411.76 1213.57 L1411.17 1213.57 L1410.59 1213.57 L1410 1213.57 L1409.42 1213.57 L1408.83 1213.57 L1408.24 1213.57 L1407.66 1213.57 L1407.07 1213.57 L1406.48 1213.57 L1405.9 1213.57 L1405.31 1213.57 L1404.72 1213.57 L1404.14 1213.57 L1403.55 1213.57 L1402.96 1213.57 L1402.38 1213.57 L1401.79 1213.57 L1401.21 1213.57 L1400.62 1213.57 L1400.03 1213.57 L1399.45 1213.57 L1398.86 1213.57 L1398.27 1213.57 L1397.69 1213.57 L1397.1 1213.57 L1396.51 1213.57 L1395.93 1213.57 L1395.34 1213.57 L1394.75 1213.57 L1394.17 1213.57 L1393.58 1213.57 L1393 1213.57 L1392.41 1213.57 L1391.82 1213.57 L1391.24 1213.57 L1390.65 1213.57 L1390.06 1213.57 L1389.48 1213.57 L1388.89 1213.57 L1388.3 1213.57 L1387.72 1213.57 L1387.13 1213.57 L1386.55 1213.57 L1385.96 1213.57 L1385.37 1213.57 L1384.79 1213.57 L1384.2 1213.57 L1383.61 1213.57 L1383.03 1213.57 L1382.44 1213.57 L1381.85 1213.57 L1381.27 1213.57 L1380.68 1213.57 L1380.09 1213.57 L1379.51 1213.57 L1378.92 1213.57 L1378.34 1213.57 L1377.75 1213.57 L1377.16 1213.57 L1376.58 1213.57 L1375.99 1213.57 L1375.4 1213.57 L1374.82 1213.57 L1374.23 1213.57 L1373.64 1213.57 L1373.06 1213.57 L1372.47 1213.57 L1371.88 1213.57 L1371.3 1213.57 L1370.71 1213.57 L1370.13 1213.57 L1369.54 1213.57 L1368.95 1213.57 L1368.37 1213.57 L1367.78 1213.57 L1367.19 1213.57 L1366.61 1213.57 L1366.02 1213.57 L1365.43 1213.57 L1364.85 1213.57 L1364.26 1213.57 L1363.68 1213.57 L1363.09 1213.57 L1362.5 1213.57 L1361.92 1213.57 L1361.33 1213.57 L1360.74 1213.57 L1360.16 1213.57 L1359.57 1213.57 L1358.98 1213.57 L1358.4 1213.57 L1357.81 1213.57 L1357.22 1213.57 L1356.64 1213.57 L1356.05 1213.57 L1355.47 1213.57 L1354.88 1213.57 L1354.29 1213.57 L1353.71 1213.57 L1353.12 1213.57 L1352.53 1213.57 L1351.95 1213.57 L1351.36 1213.57 L1350.77 1213.57 L1350.19 1213.57 L1349.6 1213.57 L1349.01 1213.57 L1348.43 1213.57 L1347.84 1213.57 L1347.26 1213.57 L1346.67 1213.57 L1346.08 1213.57 L1345.5 1213.57 L1344.91 1213.57 L1344.32 1213.57 L1343.74 1213.57 L1343.15 1213.57 L1342.56 1213.57 L1341.98 1213.57 L1341.39 1213.57 L1340.8 1213.57 L1340.22 1213.57 L1339.63 1213.57 L1339.05 1213.57 L1338.46 1213.57 L1337.87 1213.57 L1337.29 1213.57 L1336.7 1213.57 L1336.11 1213.57 L1335.53 1213.57 L1334.94 1213.57 L1334.35 1213.57 L1333.77 1213.57 L1333.18 1213.57 L1332.6 1213.57 L1332.01 1213.57 L1331.42 1213.57 L1330.84 1213.57 L1330.25 1213.57 L1329.66 1213.57 L1329.08 1213.57 L1328.49 1213.57 L1327.9 1213.57 L1327.32 1213.57 L1326.73 1213.57 L1326.14 1213.57 L1325.56 1213.57 L1324.97 1213.57 L1324.39 1213.57 L1323.8 1213.57 L1323.21 1213.57 L1322.63 1213.57 L1322.04 1213.57 L1321.45 1213.57 L1320.87 1213.57 L1320.28 1213.57 L1319.69 1213.57 L1319.11 1213.57 L1318.52 1213.57 L1317.93 1213.57 L1317.35 1213.57 L1316.76 1213.57 L1316.18 1213.57 L1315.59 1213.57 L1315 1213.57 L1314.42 1213.57 L1313.83 1213.57 L1313.24 1213.57 L1312.66 1213.57 L1312.07 1213.57 L1311.48 1213.57 L1310.9 1213.57 L1310.31 1213.57 L1309.73 1213.57 L1309.14 1213.57 L1308.55 1213.57 L1307.97 1213.57 L1307.38 1213.57 L1306.79 1213.57 L1306.21 1213.57 L1305.62 1213.57 L1305.03 1213.57 L1304.45 1213.57 L1303.86 1213.57 L1303.27 1213.57 L1302.69 1213.57 L1302.1 1213.57 L1301.52 1213.57 L1300.93 1213.57 L1300.34 1213.57 L1299.76 1213.57 L1299.17 1213.57 L1298.58 1213.57 L1298 1213.57 L1297.41 1213.57 L1296.82 1213.57 L1296.24 1213.57 L1295.65 1213.57 L1295.06 1213.57 L1294.48 1213.57 L1293.89 1213.57 L1293.31 1213.57 L1292.72 1213.57 L1292.13 1213.57 L1291.55 1213.57 L1290.96 1213.57 L1290.37 1213.57 L1289.79 1213.57 L1289.2 1213.57 L1288.61 1213.57 L1288.03 1213.57 L1287.44 1213.57 L1286.86 1213.57 L1286.27 1213.57 L1285.68 1213.57 L1285.1 1213.57 L1284.51 1213.57 L1283.92 1213.57 L1283.34 1213.57 L1282.75 1213.57 L1282.16 1213.57 L1281.58 1213.57 L1280.99 1213.57 L1280.4 1213.57 L1279.82 1213.57 L1279.23 1213.57 L1278.65 1213.57 L1278.06 1213.57 L1277.47 1213.57 L1276.89 1213.57 L1276.3 1213.57 L1275.71 1213.57 L1275.13 1213.57 L1274.54 1213.57 L1273.95 1213.57 L1273.37 1213.57 L1272.78 1213.57 L1272.19 1213.57 L1271.61 1213.57 L1271.02 1213.57 L1270.44 1213.57 L1269.85 1213.57 L1269.26 1213.57 L1268.68 1213.57 L1268.09 1213.57 L1267.5 1213.57 L1266.92 1213.57 L1266.33 1213.57 L1265.74 1213.57 L1265.16 1213.57 L1264.57 1213.57 L1263.98 1213.57 L1263.4 1213.57 L1262.81 1213.57 L1262.23 1213.57 L1261.64 1213.57 L1261.05 1213.57 L1260.47 1213.57 L1259.88 1213.57 L1259.29 1213.57 L1258.71 1213.57 L1258.12 1213.57 L1257.53 1213.57 L1256.95 1213.57 L1256.36 1213.57 L1255.78 1213.57 L1255.19 1213.57 L1254.6 1213.57 L1254.02 1213.57 L1253.43 1213.57 L1252.84 1213.57 L1252.26 1213.57 L1251.67 1213.57 L1251.08 1213.57 L1250.5 1213.57 L1249.91 1213.57 L1249.32 1213.57 L1248.74 1213.57 L1248.15 1213.57 L1247.57 1213.57 L1246.98 1213.57 L1246.39 1213.57 L1245.81 1213.57 L1245.22 1213.57 L1244.63 1213.57 L1244.05 1213.57 L1243.46 1213.57 L1242.87 1213.57 L1242.29 1213.57 L1241.7 1213.57 L1241.11 1213.57 L1240.53 1213.57 L1239.94 1213.57 L1239.36 1213.57 L1238.77 1213.57 L1238.18 1213.57 L1237.6 1213.57 L1237.01 1213.57 L1236.42 1213.57 L1235.84 1213.57 L1235.25 1213.57 L1234.66 1213.57 L1234.08 1213.57 L1233.49 1213.57 L1232.91 1213.57 L1232.32 1213.57 L1231.73 1213.57 L1231.15 1213.57 L1230.56 1213.57 L1229.97 1213.57 L1229.39 1213.57 L1228.8 1213.57 L1228.21 1213.57 L1227.63 1213.57 L1227.04 1213.57 L1226.45 1213.57 L1225.87 1213.57 L1225.28 1213.57 L1224.7 1213.57 L1224.11 1213.57 L1223.52 1213.57 L1222.94 1213.57 L1222.35 1213.57 L1221.76 1213.57 L1221.18 1213.57 L1220.59 1213.57 L1220 1213.57 L1219.42 1213.57 L1218.83 1213.57 L1218.24 1213.57 L1217.66 1213.57 L1217.07 1213.57 L1216.49 1213.57 L1215.9 1213.57 L1215.31 1213.57 L1214.73 1213.57 L1214.14 1213.57 L1213.55 1213.57 L1212.97 1213.57 L1212.38 1213.57 L1211.79 1213.57 L1211.21 1213.57 L1210.62 1213.57 L1210.03 1213.57 L1209.45 1213.57 L1208.86 1213.57 L1208.28 1213.57 L1207.69 1213.57 L1207.1 1213.57 L1206.52 1213.57 L1205.93 1213.57 L1205.34 1213.57 L1204.76 1213.57 L1204.17 1213.57 L1203.58 1213.57 L1203 1213.57 L1202.41 1213.57 L1201.83 1213.57 L1201.24 1213.57 L1200.65 1213.57 L1200.07 1213.57 L1199.48 1213.57 L1198.89 1213.57 L1198.31 1213.57 L1197.72 1213.57 L1197.13 1213.57 L1196.55 1213.57 L1195.96 1213.57 L1195.37 1213.57 L1194.79 1213.57 L1194.2 1213.57 L1193.62 1213.57 L1193.03 1213.57 L1192.44 1213.57 L1191.86 1213.57 L1191.27 1213.57 L1190.68 1213.57 L1190.1 1213.57 L1189.51 1213.57 L1188.92 1213.57 L1188.34 1213.57 L1187.75 1213.57 L1187.16 1213.57 L1186.58 1213.57 L1185.99 1213.57 L1185.41 1213.57 L1184.82 1213.57 L1184.23 1213.57 L1183.65 1213.57 L1183.06 1213.57 L1182.47 1213.57 L1181.89 1213.57 L1181.3 1213.57 L1180.71 1213.57 L1180.13 1213.57 L1179.54 1213.57 L1178.96 1213.57 L1178.37 1213.57 L1177.78 1213.57 L1177.2 1213.57 L1176.61 1213.57 L1176.02 1213.57 L1175.44 1213.57 L1174.85 1213.57 L1174.26 1213.57 L1173.68 1213.57 L1173.09 1213.57 L1172.5 1213.57 L1171.92 1213.57 L1171.33 1213.57 L1170.75 1213.57 L1170.16 1213.57 L1169.57 1213.57 L1168.99 1213.57 L1168.4 1213.57 L1167.81 1213.57 L1167.23 1213.57 L1166.64 1213.57 L1166.05 1213.57 L1165.47 1213.57 L1164.88 1213.57 L1164.29 1213.57 L1163.71 1213.57 L1163.12 1213.57 L1162.54 1213.57 L1161.95 1213.57 L1161.36 1213.57 L1160.78 1213.57 L1160.19 1213.57 L1159.6 1213.57 L1159.02 1213.57 L1158.43 1213.57 L1157.84 1213.57 L1157.26 1213.57 L1156.67 1213.57 L1156.09 1213.57 L1155.5 1213.57 L1154.91 1213.57 L1154.33 1213.57 L1153.74 1213.57 L1153.15 1213.57 L1152.57 1213.57 L1151.98 1213.57 L1151.39 1213.57 L1150.81 1213.57 L1150.22 1213.57 L1149.63 1213.57 L1149.05 1213.57 L1148.46 1213.57 L1147.88 1213.57 L1147.29 1213.57 L1146.7 1213.57 L1146.12 1213.57 L1145.53 1213.57 L1144.94 1213.57 L1144.36 1213.57 L1143.77 1213.57 L1143.18 1213.57 L1142.6 1213.57 L1142.01 1213.57 L1141.42 1213.57 L1140.84 1213.57 L1140.25 1213.57 L1139.67 1213.57 L1139.08 1213.57 L1138.49 1213.57 L1137.91 1213.57 L1137.32 1213.57 L1136.73 1213.57 L1136.15 1213.57 L1135.56 1213.57 L1134.97 1213.57 L1134.39 1213.57 L1133.8 1213.57 L1133.21 1213.57 L1132.63 1213.57 L1132.04 1213.57 L1131.46 1213.57 L1130.87 1213.57 L1130.28 1213.57 L1129.7 1213.57 L1129.11 1213.57 L1128.52 1213.57 L1127.94 1213.57 L1127.35 1213.57 L1126.76 1213.57 L1126.18 1213.57 L1125.59 1213.57 L1125.01 1213.57 L1124.42 1213.57 L1123.83 1213.57 L1123.25 1213.57 L1122.66 1213.57 L1122.07 1213.57 L1121.49 1213.57 L1120.9 1213.57 L1120.31 1213.57 L1119.73 1213.57 L1119.14 1213.57 L1118.55 1213.57 L1117.97 1213.57 L1117.38 1213.57 L1116.8 1213.57 L1116.21 1213.57 L1115.62 1213.57 L1115.04 1213.57 L1114.45 1213.57 L1113.86 1213.57 L1113.28 1213.57 L1112.69 1213.57 L1112.1 1213.57 L1111.52 1213.57 L1110.93 1213.57 L1110.34 1213.57 L1109.76 1213.57 L1109.17 1213.57 L1108.59 1213.57 L1108 1213.57 L1107.41 1213.57 L1106.83 1213.57 L1106.24 1213.57 L1105.65 1213.57 L1105.07 1213.57 L1104.48 1213.57 L1103.89 1213.57 L1103.31 1213.57 L1102.72 1213.57 L1102.14 1213.57 L1101.55 1213.57 L1100.96 1213.57 L1100.38 1213.57 L1099.79 1213.57 L1099.2 1213.57 L1098.62 1213.57 L1098.03 1213.57 L1097.44 1213.57 L1096.86 1213.57 L1096.27 1213.57 L1095.68 1213.57 L1095.1 1213.57 L1094.51 1213.57 L1093.93 1213.57 L1093.34 1213.57 L1092.75 1213.57 L1092.17 1213.57 L1091.58 1213.57 L1090.99 1213.57 L1090.41 1213.57 L1089.82 1213.57 L1089.23 1213.57 L1088.65 1213.57 L1088.06 1213.57 L1087.47 1213.57 L1086.89 1213.57 L1086.3 1213.57 L1085.72 1213.57 L1085.13 1213.57 L1084.54 1213.57 L1083.96 1213.57 L1083.37 1213.57 L1082.78 1213.57 L1082.2 1213.57 L1081.61 1213.57 L1081.02 1213.57 L1080.44 1213.57 L1079.85 1213.57 L1079.26 1213.57 L1078.68 1213.57 L1078.09 1213.57 L1077.51 1213.57 L1076.92 1213.57 L1076.33 1213.57 L1075.75 1213.57 L1075.16 1213.57 L1074.57 1213.57 L1073.99 1213.57 L1073.4 1213.57 L1072.81 1213.57 L1072.23 1213.57 L1071.64 1213.57 L1071.06 1213.57 L1070.47 1213.57 L1069.88 1213.57 L1069.3 1213.57 L1068.71 1213.57 L1068.12 1213.57 L1067.54 1213.57 L1066.95 1213.57 L1066.36 1213.57 L1065.78 1213.57 L1065.19 1213.57 L1064.6 1213.57 L1064.02 1213.57 L1063.43 1213.57 L1062.85 1213.57 L1062.26 1213.57 L1061.67 1213.57 L1061.09 1213.57 L1060.5 1213.57 L1059.91 1213.57 L1059.33 1213.57 L1058.74 1213.57 L1058.15 1213.57 L1057.57 1213.57 L1056.98 1213.57 L1056.39 1213.57 L1055.81 1213.57 L1055.22 1213.57 L1054.64 1213.57 L1054.05 1213.57 L1053.46 1213.57 L1052.88 1213.57 L1052.29 1213.57 L1051.7 1213.57 L1051.12 1213.57 L1050.53 1213.57 L1049.94 1213.57 L1049.36 1213.57 L1048.77 1213.57 L1048.19 1213.57 L1047.6 1213.57 L1047.01 1213.57 L1046.43 1213.57 L1045.84 1213.57 L1045.25 1213.57 L1044.67 1213.57 L1044.08 1213.57 L1043.49 1213.57 L1042.91 1213.57 L1042.32 1213.57 L1041.73 1213.57 L1041.15 1213.57 L1040.56 1213.57 L1039.98 1213.57 L1039.39 1213.57 L1038.8 1213.57 L1038.22 1213.57 L1037.63 1213.57 L1037.04 1213.57 L1036.46 1213.57 L1035.87 1213.57 L1035.28 1213.57 L1034.7 1213.57 L1034.11 1213.57 L1033.52 1213.57 L1032.94 1213.57 L1032.35 1213.57 L1031.77 1213.57 L1031.18 1213.57 L1030.59 1213.57 L1030.01 1213.57 L1029.42 1213.57 L1028.83 1213.57 L1028.25 1213.57 L1027.66 1213.57 L1027.07 1213.57 L1026.49 1213.57 L1025.9 1213.57 L1025.32 1213.57 L1024.73 1213.57 L1024.14 1213.57 L1023.56 1213.57 L1022.97 1213.57 L1022.38 1213.57 L1021.8 1213.57 L1021.21 1213.57 L1020.62 1213.57 L1020.04 1213.57 L1019.45 1213.57 L1018.86 1213.57 L1018.28 1213.57 L1017.69 1213.57 L1017.11 1213.57 L1016.52 1213.57 L1015.93 1213.57 L1015.35 1213.57 L1014.76 1213.57 L1014.17 1213.57 L1013.59 1213.57 L1013 1213.57 L1012.41 1213.57 L1011.83 1213.57 L1011.24 1213.57 L1010.65 1213.57 L1010.07 1213.57 L1009.48 1213.57 L1008.9 1213.57 L1008.31 1213.57 L1007.72 1213.57 L1007.14 1213.57 L1006.55 1213.57 L1005.96 1213.57 L1005.38 1213.57 L1004.79 1213.57 L1004.2 1213.57 L1003.62 1213.57 L1003.03 1213.57 L1002.44 1213.57 L1001.86 1213.57 L1001.27 1213.57 L1000.69 1213.57 L1000.1 1213.57 L999.513 1213.57 L998.926 1213.57 L998.34 1213.57 L997.754 1213.57 L997.167 1213.57 L996.581 1213.57 L995.994 1213.57 L995.408 1213.57 L994.822 1213.57 L994.235 1213.57 L993.649 1213.57 L993.062 1213.57 L992.476 1213.57 L991.889 1213.57 L991.303 1213.57 L990.717 1213.57 L990.13 1213.57 L989.544 1213.57 L988.957 1213.57 L988.371 1213.57 L987.785 1213.57 L987.198 1213.57 L986.612 1213.57 L986.025 1213.57  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.65 986.612,1213.65 987.198,1213.65 987.785,1213.65 988.371,1213.65 988.957,1213.65 989.544,1213.65 990.13,1213.65 990.717,1213.65 991.303,1213.65 991.889,1213.65 992.476,1213.65 993.062,1213.65 993.649,1213.65 994.235,1213.65 994.822,1213.65 995.408,1213.65 995.994,1213.65 996.581,1213.65 997.167,1213.65 997.754,1213.65 998.34,1213.65 998.926,1213.65 999.513,1213.65 1000.1,1213.65 1000.69,1213.65 1001.27,1213.65 1001.86,1213.65 1002.44,1213.65 1003.03,1213.65 1003.62,1213.65 1004.2,1213.65 1004.79,1213.65 1005.38,1213.65 1005.96,1213.65 1006.55,1213.65 1007.14,1213.65 1007.72,1213.65 1008.31,1213.65 1008.9,1213.65 1009.48,1213.65 1010.07,1213.65 1010.65,1213.65 1011.24,1213.65 1011.83,1213.65 1012.41,1213.65 1013,1213.65 1013.59,1213.65 1014.17,1213.65 1014.76,1213.65 1015.35,1213.65 1015.93,1213.65 1016.52,1213.65 1017.11,1213.65 1017.69,1213.65 1018.28,1213.65 1018.86,1213.65 1019.45,1213.65 1020.04,1213.65 1020.62,1213.65 1021.21,1213.65 1021.8,1213.65 1022.38,1213.65 1022.97,1213.65 1023.56,1213.65 1024.14,1213.65 1024.73,1213.65 1025.32,1213.65 1025.9,1213.65 1026.49,1213.65 1027.07,1213.65 1027.66,1213.65 1028.25,1213.65 1028.83,1213.65 1029.42,1213.65 1030.01,1213.65 1030.59,1213.65 1031.18,1213.65 1031.77,1213.65 1032.35,1213.65 1032.94,1213.65 1033.52,1213.65 1034.11,1213.65 1034.7,1213.65 1035.28,1213.65 1035.87,1213.65 1036.46,1213.65 1037.04,1213.65 1037.63,1213.65 1038.22,1213.65 1038.8,1213.65 1039.39,1213.65 1039.98,1213.65 1040.56,1213.65 1041.15,1213.65 1041.73,1213.65 1042.32,1213.65 1042.91,1213.65 1043.49,1213.65 1044.08,1213.65 1044.67,1213.65 1045.25,1213.65 1045.84,1213.65 1046.43,1213.65 1047.01,1213.65 1047.6,1213.65 1048.19,1213.65 1048.77,1213.65 1049.36,1213.65 1049.94,1213.65 1050.53,1213.65 1051.12,1213.65 1051.7,1213.65 1052.29,1213.65 1052.88,1213.65 1053.46,1213.65 1054.05,1213.65 1054.64,1213.65 1055.22,1213.65 1055.81,1213.65 1056.39,1213.65 1056.98,1213.65 1057.57,1213.65 1058.15,1213.65 1058.74,1213.65 1059.33,1213.65 1059.91,1213.65 1060.5,1213.65 1061.09,1213.65 1061.67,1213.65 1062.26,1213.65 1062.85,1213.65 1063.43,1213.65 1064.02,1213.65 1064.6,1213.65 1065.19,1213.65 1065.78,1213.65 1066.36,1213.65 1066.95,1213.65 1067.54,1213.65 1068.12,1213.65 1068.71,1213.65 1069.3,1213.65 1069.88,1213.65 1070.47,1213.65 1071.06,1213.65 1071.64,1213.65 1072.23,1213.65 1072.81,1213.65 1073.4,1213.65 1073.99,1213.65 1074.57,1213.65 1075.16,1213.65 1075.75,1213.65 1076.33,1213.65 1076.92,1213.65 1077.51,1213.65 1078.09,1213.65 1078.68,1213.65 1079.26,1213.65 1079.85,1213.65 1080.44,1213.65 1081.02,1213.65 1081.61,1213.65 1082.2,1213.65 1082.78,1213.65 1083.37,1213.65 1083.96,1213.65 1084.54,1213.65 1085.13,1213.65 1085.72,1213.65 1086.3,1213.65 1086.89,1213.65 1087.47,1213.65 1088.06,1213.65 1088.65,1213.65 1089.23,1213.65 1089.82,1213.65 1090.41,1213.65 1090.99,1213.65 1091.58,1213.65 1092.17,1213.65 1092.75,1213.65 1093.34,1213.65 1093.93,1213.65 1094.51,1213.65 1095.1,1213.65 1095.68,1213.65 1096.27,1213.65 1096.86,1213.65 1097.44,1213.65 1098.03,1213.65 1098.62,1213.65 1099.2,1213.65 1099.79,1213.65 1100.38,1213.65 1100.96,1213.65 1101.55,1213.65 1102.14,1213.65 1102.72,1213.65 1103.31,1213.65 1103.89,1213.65 1104.48,1213.65 1105.07,1213.65 1105.65,1213.65 1106.24,1213.65 1106.83,1213.65 1107.41,1213.65 1108,1213.65 1108.59,1213.65 1109.17,1213.65 1109.76,1213.65 1110.34,1213.65 1110.93,1213.65 1111.52,1213.65 1112.1,1213.65 1112.69,1213.65 1113.28,1213.65 1113.86,1213.65 1114.45,1213.65 1115.04,1213.65 1115.62,1213.65 1116.21,1213.65 1116.8,1213.65 1117.38,1213.65 1117.97,1213.65 1118.55,1213.65 1119.14,1213.65 1119.73,1213.65 1120.31,1213.65 1120.9,1213.65 1121.49,1213.65 1122.07,1213.65 1122.66,1213.65 1123.25,1213.65 1123.83,1213.65 1124.42,1213.65 1125.01,1213.65 1125.59,1213.65 1126.18,1213.65 1126.76,1213.65 1127.35,1213.65 1127.94,1213.65 1128.52,1213.65 1129.11,1213.65 1129.7,1213.65 1130.28,1213.65 1130.87,1213.65 1131.46,1213.65 1132.04,1213.65 1132.63,1213.65 1133.21,1213.65 1133.8,1213.65 1134.39,1213.65 1134.97,1213.65 1135.56,1213.65 1136.15,1213.65 1136.73,1213.65 1137.32,1213.65 1137.91,1213.65 1138.49,1213.65 1139.08,1213.65 1139.67,1213.65 1140.25,1213.65 1140.84,1213.65 1141.42,1213.65 1142.01,1213.65 1142.6,1213.65 1143.18,1213.65 1143.77,1213.65 1144.36,1213.65 1144.94,1213.65 1145.53,1213.65 1146.12,1213.65 1146.7,1213.65 1147.29,1213.65 1147.88,1213.65 1148.46,1213.65 1149.05,1213.65 1149.63,1213.65 1150.22,1213.65 1150.81,1213.65 1151.39,1213.65 1151.98,1213.65 1152.57,1213.65 1153.15,1213.65 1153.74,1213.65 1154.33,1213.65 1154.91,1213.65 1155.5,1213.65 1156.09,1213.65 1156.67,1213.65 1157.26,1213.65 1157.84,1213.65 1158.43,1213.65 1159.02,1213.65 1159.6,1213.65 1160.19,1213.65 1160.78,1213.65 1161.36,1213.65 1161.95,1213.65 1162.54,1213.65 1163.12,1213.65 1163.71,1213.65 1164.29,1213.65 1164.88,1213.65 1165.47,1213.65 1166.05,1213.65 1166.64,1213.65 1167.23,1213.65 1167.81,1213.65 1168.4,1213.65 1168.99,1213.65 1169.57,1213.65 1170.16,1213.65 1170.75,1213.65 1171.33,1213.65 1171.92,1213.65 1172.5,1213.65 1173.09,1213.65 1173.68,1213.65 1174.26,1213.65 1174.85,1213.65 1175.44,1213.65 1176.02,1213.65 1176.61,1213.65 1177.2,1213.65 1177.78,1213.65 1178.37,1213.65 1178.96,1213.65 1179.54,1213.65 1180.13,1213.65 1180.71,1213.65 1181.3,1213.65 1181.89,1213.65 1182.47,1213.65 1183.06,1213.65 1183.65,1213.65 1184.23,1213.65 1184.82,1213.65 1185.41,1213.65 1185.99,1213.65 1186.58,1213.65 1187.16,1213.65 1187.75,1213.65 1188.34,1213.65 1188.92,1213.65 1189.51,1213.65 1190.1,1213.65 1190.68,1213.65 1191.27,1213.65 1191.86,1213.65 1192.44,1213.65 1193.03,1213.65 1193.62,1213.65 1194.2,1213.65 1194.79,1213.65 1195.37,1213.65 1195.96,1213.65 1196.55,1213.65 1197.13,1213.65 1197.72,1213.65 1198.31,1213.65 1198.89,1213.65 1199.48,1213.65 1200.07,1213.65 1200.65,1213.65 1201.24,1213.65 1201.83,1213.65 1202.41,1213.65 1203,1213.65 1203.58,1213.65 1204.17,1213.65 1204.76,1213.65 1205.34,1213.65 1205.93,1213.65 1206.52,1213.65 1207.1,1213.65 1207.69,1213.65 1208.28,1213.65 1208.86,1213.65 1209.45,1213.65 1210.03,1213.65 1210.62,1213.65 1211.21,1213.65 1211.79,1213.65 1212.38,1213.65 1212.97,1213.65 1213.55,1213.65 1214.14,1213.65 1214.73,1213.65 1215.31,1213.65 1215.9,1213.65 1216.49,1213.65 1217.07,1213.65 1217.66,1213.65 1218.24,1213.65 1218.83,1213.65 1219.42,1213.65 1220,1213.65 1220.59,1213.65 1221.18,1213.65 1221.76,1213.65 1222.35,1213.65 1222.94,1213.65 1223.52,1213.65 1224.11,1213.65 1224.7,1213.65 1225.28,1213.65 1225.87,1213.65 1226.45,1213.65 1227.04,1213.65 1227.63,1213.65 1228.21,1213.65 1228.8,1213.65 1229.39,1213.65 1229.97,1213.65 1230.56,1213.65 1231.15,1213.65 1231.73,1213.65 1232.32,1213.65 1232.91,1213.65 1233.49,1213.65 1234.08,1213.65 1234.66,1213.65 1235.25,1213.65 1235.84,1213.65 1236.42,1213.65 1237.01,1213.65 1237.6,1213.65 1238.18,1213.65 1238.77,1213.65 1239.36,1213.65 1239.94,1213.65 1240.53,1213.65 1241.11,1213.65 1241.7,1213.65 1242.29,1213.65 1242.87,1213.65 1243.46,1213.65 1244.05,1213.65 1244.63,1213.65 1245.22,1213.65 1245.81,1213.65 1246.39,1213.65 1246.98,1213.65 1247.57,1213.65 1248.15,1213.65 1248.74,1213.65 1249.32,1213.65 1249.91,1213.65 1250.5,1213.65 1251.08,1213.65 1251.67,1213.65 1252.26,1213.65 1252.84,1213.65 1253.43,1213.65 1254.02,1213.65 1254.6,1213.65 1255.19,1213.65 1255.78,1213.65 1256.36,1213.65 1256.95,1213.65 1257.53,1213.65 1258.12,1213.65 1258.71,1213.65 1259.29,1213.65 1259.88,1213.65 1260.47,1213.65 1261.05,1213.65 1261.64,1213.65 1262.23,1213.65 1262.81,1213.65 1263.4,1213.65 1263.98,1213.65 1264.57,1213.65 1265.16,1213.65 1265.74,1213.65 1266.33,1213.65 1266.92,1213.65 1267.5,1213.65 1268.09,1213.65 1268.68,1213.65 1269.26,1213.65 1269.85,1213.65 1270.44,1213.65 1271.02,1213.65 1271.61,1213.65 1272.19,1213.65 1272.78,1213.65 1273.37,1213.65 1273.95,1213.65 1274.54,1213.65 1275.13,1213.65 1275.71,1213.65 1276.3,1213.65 1276.89,1213.65 1277.47,1213.65 1278.06,1213.65 1278.65,1213.65 1279.23,1213.65 1279.82,1213.65 1280.4,1213.65 1280.99,1213.65 1281.58,1213.65 1282.16,1213.65 1282.75,1213.65 1283.34,1213.65 1283.92,1213.65 1284.51,1213.65 1285.1,1213.65 1285.68,1213.65 1286.27,1213.65 1286.86,1213.65 1287.44,1213.65 1288.03,1213.65 1288.61,1213.65 1289.2,1213.65 1289.79,1213.65 1290.37,1213.65 1290.96,1213.65 1291.55,1213.65 1292.13,1213.65 1292.72,1213.65 1293.31,1213.65 1293.89,1213.65 1294.48,1213.65 1295.06,1213.65 1295.65,1213.65 1296.24,1213.65 1296.82,1213.65 1297.41,1213.65 1298,1213.65 1298.58,1213.65 1299.17,1213.65 1299.76,1213.65 1300.34,1213.65 1300.93,1213.65 1301.52,1213.65 1302.1,1213.65 1302.69,1213.65 1303.27,1213.65 1303.86,1213.65 1304.45,1213.65 1305.03,1213.65 1305.62,1213.65 1306.21,1213.65 1306.79,1213.65 1307.38,1213.65 1307.97,1213.65 1308.55,1213.65 1309.14,1213.65 1309.73,1213.65 1310.31,1213.65 1310.9,1213.65 1311.48,1213.65 1312.07,1213.65 1312.66,1213.65 1313.24,1213.65 1313.83,1213.65 1314.42,1213.65 1315,1213.65 1315.59,1213.65 1316.18,1213.65 1316.76,1213.65 1317.35,1213.65 1317.93,1213.65 1318.52,1213.65 1319.11,1213.65 1319.69,1213.65 1320.28,1213.65 1320.87,1213.65 1321.45,1213.65 1322.04,1213.65 1322.63,1213.65 1323.21,1213.65 1323.8,1213.65 1324.39,1213.65 1324.97,1213.65 1325.56,1213.65 1326.14,1213.65 1326.73,1213.65 1327.32,1213.65 1327.9,1213.65 1328.49,1213.65 1329.08,1213.65 1329.66,1213.65 1330.25,1213.65 1330.84,1213.65 1331.42,1213.65 1332.01,1213.65 1332.6,1213.65 1333.18,1213.65 1333.77,1213.65 1334.35,1213.65 1334.94,1213.65 1335.53,1213.65 1336.11,1213.65 1336.7,1213.65 1337.29,1213.65 1337.87,1213.65 1338.46,1213.65 1339.05,1213.65 1339.63,1213.65 1340.22,1213.65 1340.8,1213.65 1341.39,1213.65 1341.98,1213.65 1342.56,1213.65 1343.15,1213.65 1343.74,1213.65 1344.32,1213.65 1344.91,1213.65 1345.5,1213.65 1346.08,1213.65 1346.67,1213.65 1347.26,1213.65 1347.84,1213.65 1348.43,1213.65 1349.01,1213.65 1349.6,1213.65 1350.19,1213.65 1350.77,1213.65 1351.36,1213.65 1351.95,1213.65 1352.53,1213.65 1353.12,1213.65 1353.71,1213.65 1354.29,1213.65 1354.88,1213.65 1355.47,1213.65 1356.05,1213.65 1356.64,1213.65 1357.22,1213.65 1357.81,1213.65 1358.4,1213.65 1358.98,1213.65 1359.57,1213.65 1360.16,1213.65 1360.74,1213.65 1361.33,1213.65 1361.92,1213.65 1362.5,1213.65 1363.09,1213.65 1363.68,1213.65 1364.26,1213.65 1364.85,1213.65 1365.43,1213.65 1366.02,1213.65 1366.61,1213.65 1367.19,1213.65 1367.78,1213.65 1368.37,1213.65 1368.95,1213.65 1369.54,1213.65 1370.13,1213.65 1370.71,1213.65 1371.3,1213.65 1371.88,1213.65 1372.47,1213.65 1373.06,1213.65 1373.64,1213.65 1374.23,1213.65 1374.82,1213.65 1375.4,1213.65 1375.99,1213.65 1376.58,1213.65 1377.16,1213.65 1377.75,1213.65 1378.34,1213.65 1378.92,1213.65 1379.51,1213.65 1380.09,1213.65 1380.68,1213.65 1381.27,1213.65 1381.85,1213.65 1382.44,1213.65 1383.03,1213.65 1383.61,1213.65 1384.2,1213.65 1384.79,1213.65 1385.37,1213.65 1385.96,1213.65 1386.55,1213.65 1387.13,1213.65 1387.72,1213.65 1388.3,1213.65 1388.89,1213.65 1389.48,1213.65 1390.06,1213.65 1390.65,1213.65 1391.24,1213.65 1391.82,1213.65 1392.41,1213.65 1393,1213.65 1393.58,1213.65 1394.17,1213.65 1394.75,1213.65 1395.34,1213.65 1395.93,1213.65 1396.51,1213.65 1397.1,1213.65 1397.69,1213.65 1398.27,1213.65 1398.86,1213.65 1399.45,1213.65 1400.03,1213.65 1400.62,1213.65 1401.21,1213.65 1401.79,1213.65 1402.38,1213.65 1402.96,1213.65 1403.55,1213.65 1404.14,1213.65 1404.72,1213.65 1405.31,1213.65 1405.9,1213.65 1406.48,1213.65 1407.07,1213.65 1407.66,1213.65 1408.24,1213.65 1408.83,1213.65 1409.42,1213.65 1410,1213.65 1410.59,1213.65 1411.17,1213.65 1411.76,1213.65 1412.35,1213.65 1412.93,1213.65 1413.52,1213.65 1414.11,1213.65 1414.69,1213.65 1415.28,1213.65 1415.87,1213.65 1416.45,1213.65 1417.04,1213.65 1417.63,1213.65 1418.21,1213.65 1418.8,1213.65 1419.38,1213.65 1419.97,1213.65 1420.56,1213.65 1421.14,1213.65 1421.73,1213.65 1422.32,1213.65 1422.9,1213.65 1423.49,1213.65 1424.08,1213.65 1424.66,1213.65 1425.25,1213.65 1425.83,1213.65 1426.42,1213.65 1427.01,1213.65 1427.59,1213.65 1428.18,1213.65 1428.77,1213.65 1429.35,1213.65 1429.94,1213.65 1430.53,1213.65 1431.11,1213.65 1431.7,1213.65 1432.29,1213.65 1432.87,1213.65 1433.46,1213.65 1434.04,1213.65 1434.63,1213.65 1435.22,1213.65 1435.8,1213.65 1436.39,1213.65 1436.98,1213.65 1437.56,1213.65 1438.15,1213.65 1438.74,1213.65 1439.32,1213.65 1439.91,1213.65 1440.5,1213.65 1441.08,1213.65 1441.67,1213.65 1442.25,1213.65 1442.84,1213.65 1443.43,1213.65 1444.01,1213.65 1444.6,1213.65 1445.19,1213.65 1445.77,1213.65 1446.36,1213.65 1446.95,1213.65 1447.53,1213.65 1448.12,1213.65 1448.7,1213.65 1449.29,1213.65 1449.88,1213.65 1450.46,1213.65 1451.05,1213.65 1451.64,1213.65 1452.22,1213.65 1452.81,1213.65 1453.4,1213.65 1453.98,1213.65 1454.57,1213.65 1455.16,1213.65 1455.74,1213.65 1456.33,1213.65 1456.91,1213.65 1457.5,1213.65 1458.09,1213.65 1458.67,1213.65 1459.26,1213.65 1459.85,1213.65 1460.43,1213.65 1461.02,1213.65 1461.61,1213.65 1462.19,1213.65 1462.78,1213.65 1463.37,1213.65 1463.95,1213.65 1464.54,1213.65 1465.12,1213.65 1465.71,1213.65 1466.3,1213.65 1466.88,1213.65 1467.47,1213.65 1468.06,1213.65 1468.64,1213.65 1469.23,1213.65 1469.82,1213.65 1470.4,1213.65 1470.99,1213.65 1471.57,1213.65 1472.16,1213.65 1472.75,1213.65 1473.33,1213.65 1473.92,1213.65 1474.51,1213.65 1475.09,1213.65 1475.68,1213.65 1476.27,1213.65 1476.85,1213.65 1477.44,1213.65 1478.03,1213.65 1478.61,1213.65 1479.2,1213.65 1479.78,1213.65 1480.37,1213.65 1480.96,1213.65 1481.54,1213.65 1482.13,1213.65 1482.72,1213.65 1483.3,1213.65 1483.89,1213.65 1484.48,1213.65 1485.06,1213.65 1485.65,1213.65 1486.24,1213.65 1486.82,1213.65 1487.41,1213.65 1487.99,1213.65 1488.58,1213.65 1489.17,1213.65 1489.75,1213.65 1490.34,1213.65 1490.93,1213.65 1491.51,1213.65 1492.1,1213.65 1492.69,1213.65 1493.27,1213.65 1493.86,1213.65 1494.45,1213.65 1495.03,1213.65 1495.62,1213.65 1496.2,1213.65 1496.79,1213.65 1497.38,1213.65 1497.96,1213.65 1498.55,1213.65 1499.14,1213.65 1499.72,1213.65 1500.31,1213.65 1500.9,1213.65 1501.48,1213.65 1502.07,1213.65 1502.65,1213.65 1503.24,1213.65 1503.83,1213.65 1504.41,1213.65 1505,1213.65 1505.59,1213.65 1506.17,1213.65 1506.76,1213.65 1507.35,1213.65 1507.93,1213.65 1508.52,1213.65 1509.11,1213.65 1509.69,1213.65 1510.28,1213.65 1510.86,1213.65 1511.45,1213.65 1512.04,1213.65 1512.62,1213.65 1513.21,1213.65 1513.8,1213.65 1514.38,1213.65 1514.97,1213.65 1515.56,1213.65 1516.14,1213.65 1516.73,1213.65 1517.32,1213.65 1517.9,1213.65 1518.49,1213.65 1519.07,1213.65 1519.66,1213.65 1520.25,1213.65 1520.83,1213.65 1521.42,1213.65 1522.01,1213.65 1522.59,1213.65 1523.18,1213.65 1523.77,1213.65 1524.35,1213.65 1524.94,1213.65 1525.52,1213.65 1526.11,1213.65 1526.7,1213.65 1527.28,1213.65 1527.87,1213.65 1528.46,1213.65 1529.04,1213.65 1529.63,1213.65 1530.22,1213.65 1530.8,1213.65 1531.39,1213.65 1531.98,1213.65 1532.56,1213.65 1533.15,1213.65 1533.73,1213.65 1534.32,1213.65 1534.91,1213.65 1535.49,1213.65 1536.08,1213.65 1536.67,1213.65 1537.25,1213.65 1537.84,1213.65 1538.43,1213.65 1539.01,1213.65 1539.6,1213.65 1540.19,1213.65 1540.77,1213.65 1541.36,1213.65 1541.94,1213.65 1542.53,1213.65 1543.12,1213.65 1543.7,1213.65 1544.29,1213.65 1544.88,1213.65 1545.46,1213.65 1546.05,1213.65 1546.64,1213.65 1547.22,1213.65 1547.81,1213.65 1548.4,1213.65 1548.98,1213.65 1549.57,1213.65 1550.15,1213.65 1550.74,1213.65 1551.33,1213.65 1551.91,1213.65 1552.5,1213.65 1553.09,1213.65 1553.67,1213.65 1554.26,1213.65 1554.85,1213.65 1555.43,1213.65 1556.02,1213.65 1556.6,1213.65 1557.19,1213.65 1557.78,1213.65 1558.36,1213.65 1558.95,1213.65 1559.54,1213.65 1560.12,1213.65 1560.71,1213.65 1561.3,1213.65 1561.88,1213.65 1562.47,1213.65 1563.06,1213.65 1563.64,1213.65 1564.23,1213.65 1564.81,1213.65 1565.4,1213.65 1565.99,1213.65 1566.57,1213.65 1567.16,1213.65 1567.75,1213.65 1568.33,1213.65 1568.92,1213.65 1569.51,1213.65 1570.09,1213.65 1570.68,1213.65 1571.27,1213.65 1571.85,1213.65 1572.44,1213.65 1573.02,1213.65 1573.61,1213.65 1574.2,1213.65 1574.78,1213.65 1575.37,1213.65 1575.96,1213.65 1576.54,1213.65 1577.13,1213.65 1577.72,1213.65 1578.3,1213.65 1578.89,1213.65 1579.47,1213.65 1580.06,1213.65 1580.65,1213.65 1581.23,1213.65 1581.82,1213.65 1582.41,1213.65 1582.99,1213.65 1583.58,1213.65 1584.17,1213.65 1584.75,1213.65 1585.34,1213.65 1585.93,1213.65 1586.51,1213.65 1587.1,1213.65 1587.68,1213.65 1588.27,1213.65 1588.86,1213.65 1589.44,1213.65 1590.03,1213.65 1590.62,1213.65 1591.2,1213.65 1591.79,1213.65 1592.38,1213.65 1592.96,1213.65 1593.55,1213.65 1594.14,1213.65 1594.72,1213.65 1595.31,1213.65 1595.89,1213.65 1596.48,1213.65 1597.07,1213.65 1597.65,1213.65 1598.24,1213.65 1598.83,1213.65 1599.41,1213.65 1600,1213.65 1600.59,1213.65 1601.17,1213.65 1601.76,1213.65 1602.34,1213.65 1602.93,1213.65 1603.52,1213.65 1604.1,1213.65 1604.69,1213.65 1605.28,1213.65 1605.86,1213.65 1606.45,1213.65 1607.04,1213.65 1607.62,1213.65 1608.21,1213.65 1608.8,1213.65 1609.38,1213.65 1609.97,1213.65 1610.55,1213.65 1611.14,1213.65 1611.73,1213.65 1612.31,1213.65 1612.9,1213.65 1613.49,1213.65 1614.07,1213.65 1614.66,1213.65 1615.25,1213.65 1615.83,1213.65 1616.42,1213.65 1617.01,1213.65 1617.59,1213.65 1618.18,1213.65 1618.76,1213.65 1619.35,1213.65 1619.94,1213.65 1620.52,1213.65 1621.11,1213.65 1621.7,1213.65 1622.28,1213.65 1622.87,1213.65 1623.46,1213.65 1624.04,1213.65 1624.63,1213.65 1625.22,1213.65 1625.8,1213.65 1626.39,1213.65 1626.97,1213.65 1627.56,1213.65 1628.15,1213.65 1628.73,1213.65 1629.32,1213.65 1629.91,1213.65 1630.49,1213.65 1631.08,1213.65 1631.67,1213.65 1632.25,1213.65 1632.84,1213.65 1633.42,1213.65 1634.01,1213.65 1634.6,1213.65 1635.18,1213.65 1635.77,1213.65 1636.36,1213.65 1636.94,1213.65 1637.53,1213.65 1638.12,1213.65 1638.7,1213.65 1639.29,1213.65 1639.88,1213.65 1640.46,1213.65 1641.05,1213.65 1641.63,1213.65 1642.22,1213.65 1642.81,1213.65 1643.39,1213.65 1643.98,1213.65 1644.57,1213.65 1645.15,1213.65 1645.74,1213.65 1646.33,1213.65 1646.91,1213.65 1647.5,1213.65 1648.09,1213.65 1648.67,1213.65 1649.26,1213.65 1649.84,1213.65 1650.43,1213.65 1651.02,1213.65 1651.6,1213.65 1652.19,1213.65 1652.78,1213.65 1653.36,1213.65 1653.95,1213.65 1654.54,1213.65 1655.12,1213.65 1655.71,1213.65 1656.29,1213.65 1656.88,1213.65 1657.47,1213.65 1658.05,1213.65 1658.64,1213.65 1659.23,1213.65 1659.81,1213.65 1660.4,1213.65 1660.99,1213.65 1661.57,1213.65 1662.16,1213.65 1662.75,1213.65 1663.33,1213.65 1663.92,1213.65 1664.5,1213.65 1665.09,1213.65 1665.68,1213.65 1666.26,1213.65 1666.85,1213.65 1667.44,1213.65 1668.02,1213.65 1668.61,1213.65 1669.2,1213.65 1669.78,1213.65 1670.37,1213.65 1670.96,1213.65 1671.54,1213.65 1672.13,1213.65 1672.71,1213.65 1673.3,1213.65 1673.89,1213.65 1674.47,1213.65 1675.06,1213.65 1675.65,1213.65 1676.23,1213.65 1676.82,1213.65 1677.41,1213.65 1677.99,1213.65 1678.58,1213.65 1679.17,1213.65 1679.75,1213.65 1680.34,1213.65 1680.92,1213.65 1681.51,1213.65 1682.1,1213.65 1682.68,1213.65 1683.27,1213.65 1683.86,1213.65 1684.44,1213.65 1685.03,1213.65 1685.62,1213.65 1686.2,1213.65 1686.79,1213.65 1687.37,1213.65 1687.96,1213.65 1688.55,1213.65 1689.13,1213.65 1689.72,1213.65 1690.31,1213.65 1690.89,1213.65 1691.48,1213.65 1692.07,1213.65 1692.65,1213.65 1693.24,1213.65 1693.83,1213.65 1694.41,1213.65 1695,1213.65 1695.58,1213.65 1696.17,1213.65 1696.76,1213.65 1697.34,1213.65 1697.93,1213.65 1698.52,1213.65 1699.1,1213.65 1699.69,1213.65 1700.28,1213.65 1700.86,1213.65 1701.45,1213.65 1702.04,1213.65 1702.62,1213.65 1703.21,1213.65 1703.79,1213.65 1704.38,1213.65 1704.97,1213.65 1705.55,1213.65 1706.14,1213.65 1706.73,1213.65 1707.31,1213.65 1707.9,1213.65 1708.49,1213.65 1709.07,1213.65 1709.66,1213.65 1710.24,1213.65 1710.83,1213.65 1711.42,1213.65 1712,1213.65 1712.59,1213.65 1713.18,1213.65 1713.76,1213.65 1714.35,1213.65 1714.94,1213.65 1715.52,1213.65 1716.11,1213.65 1716.7,1213.65 1717.28,1213.65 1717.87,1213.65 1718.45,1213.65 1719.04,1213.65 1719.63,1213.65 1720.21,1213.65 1720.8,1213.65 1721.39,1213.65 1721.97,1213.65 1722.56,1213.65 1723.15,1213.65 1723.73,1213.65 1724.32,1213.65 1724.91,1213.65 1725.49,1213.65 1726.08,1213.65 1726.66,1213.65 1727.25,1213.65 1727.84,1213.65 1728.42,1213.65 1729.01,1213.65 1729.6,1213.65 1730.18,1213.65 1730.77,1213.65 1731.36,1213.65 1731.94,1213.65 1732.53,1213.65 1733.11,1213.65 1733.7,1213.65 1734.29,1213.65 1734.87,1213.65 1735.46,1213.65 1736.05,1213.65 1736.63,1213.65 1737.22,1213.65 1737.81,1213.65 1738.39,1213.65 1738.98,1213.65 1739.57,1213.65 1740.15,1213.65 1740.74,1213.65 1741.32,1213.65 1741.91,1213.65 1742.5,1213.65 1743.08,1213.65 1743.67,1213.65 1744.26,1213.65 1744.84,1213.65 1745.43,1213.65 1746.02,1213.65 1746.6,1213.65 1747.19,1213.65 1747.78,1213.65 1748.36,1213.65 1748.95,1213.65 1749.53,1213.65 1750.12,1213.65 1750.71,1213.65 1751.29,1213.65 1751.88,1213.65 1752.47,1213.65 1753.05,1213.65 1753.64,1213.65 1754.23,1213.65 1754.81,1213.65 1755.4,1213.65 1755.99,1213.65 1756.57,1213.65 1757.16,1213.65 1757.74,1213.65 1758.33,1213.65 1758.92,1213.65 1759.5,1213.65 1760.09,1213.65 1760.68,1213.65 1761.26,1213.65 1761.85,1213.65 1762.44,1213.65 1763.02,1213.65 1763.61,1213.65 1764.19,1213.65 1764.78,1213.65 1765.37,1213.65 1765.95,1213.65 1766.54,1213.65 1767.13,1213.65 1767.71,1213.65 1768.3,1213.65 1768.89,1213.65 1769.47,1213.65 1770.06,1213.65 1770.65,1213.65 1771.23,1213.65 1771.82,1213.65 1772.4,1213.65 1772.99,1213.65 1773.58,1213.65 1774.16,1213.65 1774.75,1213.65 1775.34,1213.65 1775.92,1213.65 1776.51,1213.65 1777.1,1213.65 1777.68,1213.65 1778.27,1213.65 1778.86,1213.65 1779.44,1213.65 1780.03,1213.65 1780.61,1213.65 1781.2,1213.65 1781.79,1213.65 1782.37,1213.65 1782.96,1213.65 1783.55,1213.65 1784.13,1213.65 1784.72,1213.65 1785.31,1213.65 1785.89,1213.65 1786.48,1213.65 1787.06,1213.65 1787.65,1213.65 1788.24,1213.65 1788.82,1213.65 1789.41,1213.65 1790,1213.65 1790.58,1213.65 1791.17,1213.65 1791.76,1213.65 1792.34,1213.65 1792.93,1213.65 1793.52,1213.65 1794.1,1213.65 1794.69,1213.65 1795.27,1213.65 1795.86,1213.65 1796.45,1213.65 1797.03,1213.65 1797.62,1213.65 1798.21,1213.65 1798.79,1213.65 1799.38,1213.65 1799.97,1213.65 1800.55,1213.65 1801.14,1213.65 1801.73,1213.65 1802.31,1213.65 1802.9,1213.65 1803.48,1213.65 1804.07,1213.65 1804.66,1213.65 1805.24,1213.65 1805.83,1213.65 1806.42,1213.65 1807,1213.65 1807.59,1213.65 1808.18,1213.65 1808.76,1213.65 1809.35,1213.65 1809.94,1213.65 1810.52,1213.65 1811.11,1213.65 1811.69,1213.65 1812.28,1213.65 1812.87,1213.65 1813.45,1213.65 1814.04,1213.65 1814.63,1213.65 1815.21,1213.65 1815.8,1213.65 1816.39,1213.65 1816.97,1213.65 1817.56,1213.65 1818.14,1213.65 1818.73,1213.65 1819.32,1213.65 1819.9,1213.65 1820.49,1213.65 1821.08,1213.65 1821.66,1213.65 1822.25,1213.65 1822.84,1213.65 1823.42,1213.65 1824.01,1213.65 1824.6,1213.65 1825.18,1213.65 1825.77,1213.65 1826.35,1213.65 1826.94,1213.65 1827.53,1213.65 1828.11,1213.65 1828.7,1213.65 1829.29,1213.65 1829.87,1213.65 1830.46,1213.65 1831.05,1213.65 1831.63,1213.65 1832.22,1213.65 1832.81,1213.65 1833.39,1213.65 1833.98,1213.65 1834.56,1213.65 1835.15,1213.65 1835.74,1213.65 1836.32,1213.65 1836.91,1213.65 1837.5,1213.65 1838.08,1213.65 1838.67,1213.65 1839.26,1213.65 1839.84,1213.65 1840.43,1213.65 1841.01,1213.65 1841.6,1213.65 1842.19,1213.65 1842.77,1213.65 1843.36,1213.65 1843.95,1213.65 1844.53,1213.65 1845.12,1213.65 1845.71,1213.65 1846.29,1213.65 1846.88,1213.65 1847.47,1213.65 1848.05,1213.65 1848.64,1213.65 1849.22,1213.65 1849.81,1213.65 1850.4,1213.65 1850.98,1213.65 1851.57,1213.65 1852.16,1213.65 1852.74,1213.65 1853.33,1213.65 1853.92,1213.65 1854.5,1213.65 1855.09,1213.65 1855.68,1213.65 1856.26,1213.65 1856.85,1213.65 1857.43,1213.65 1858.02,1213.65 1858.61,1213.65 1859.19,1213.65 1859.78,1213.65 1860.37,1213.65 1860.95,1213.65 1861.54,1213.65 1862.13,1213.65 1862.71,1213.65 1863.3,1213.65 1863.88,1213.65 1864.47,1213.65 1865.06,1213.65 1865.64,1213.65 1866.23,1213.65 1866.82,1213.65 1867.4,1213.65 1867.99,1213.65 1868.58,1213.65 1869.16,1213.65 1869.75,1213.65 1870.34,1213.65 1870.92,1213.65 1871.51,1213.65 1872.09,1213.65 1872.68,1213.65 1873.27,1213.65 1873.85,1213.65 1874.44,1213.65 1875.03,1213.65 1875.61,1213.65 1876.2,1213.65 1876.79,1213.65 1877.37,1213.65 1877.96,1213.65 1878.55,1213.65 1879.13,1213.65 1879.72,1213.65 1880.3,1213.65 1880.89,1213.65 1881.48,1213.65 1882.06,1213.65 1882.65,1213.65 1883.24,1213.65 1883.82,1213.65 1884.41,1213.65 1885,1213.65 1885.58,1213.65 1886.17,1213.65 1886.76,1213.65 1887.34,1213.65 1887.93,1213.65 1888.51,1213.65 1889.1,1213.65 1889.69,1213.65 1890.27,1213.65 1890.86,1213.65 1891.45,1213.65 1892.03,1213.65 1892.62,1213.65 1893.21,1213.65 1893.79,1213.65 1894.38,1213.65 1894.96,1213.65 1895.55,1213.65 1896.14,1213.65 1896.72,1213.65 1897.31,1213.65 1897.9,1213.65 1898.48,1213.65 1899.07,1213.65 1899.66,1213.65 1900.24,1213.65 1900.83,1213.65 1901.42,1213.65 1902,1213.65 1902.59,1213.65 1903.17,1213.65 1903.76,1213.65 1904.35,1213.65 1904.93,1213.65 1905.52,1213.65 1906.11,1213.65 1906.69,1213.65 1907.28,1213.65 1907.87,1213.65 1908.45,1213.65 1909.04,1213.65 1909.63,1213.65 1910.21,1213.65 1910.8,1213.65 1911.38,1213.65 1911.97,1213.65 1912.56,1213.65 1913.14,1213.65 1913.73,1213.65 1914.32,1213.65 1914.9,1213.65 1915.49,1213.65 1916.08,1213.65 1916.66,1213.65 1917.25,1213.65 1917.83,1213.65 1918.42,1213.65 1919.01,1213.65 1919.59,1213.65 1920.18,1213.65 1920.77,1213.65 1921.35,1213.65 1921.94,1213.65 1922.53,1213.65 1923.11,1213.65 1923.7,1213.65 1924.29,1213.65 1924.87,1213.65 1925.46,1213.65 1926.04,1213.65 1926.63,1213.65 1927.22,1213.65 1927.8,1213.65 1928.39,1213.65 1928.98,1213.65 1929.56,1213.65 1930.15,1213.65 1930.74,1213.65 1931.32,1213.65 1931.91,1213.65 1932.5,1213.65 1933.08,1213.65 1933.67,1213.65 1934.25,1213.65 1934.84,1213.65 1935.43,1213.65 1936.01,1213.65 1936.6,1213.65 1937.19,1213.65 1937.77,1213.65 1938.36,1213.65 1938.95,1213.65 1939.53,1213.65 1940.12,1213.65 1940.71,1213.65 1941.29,1213.65 1941.88,1213.65 1942.46,1213.65 1943.05,1213.65 1943.64,1213.65 1944.22,1213.65 1944.81,1213.65 1945.4,1213.65 1945.98,1213.65 1946.57,1213.65 1947.16,1213.65 1947.74,1213.65 1948.33,1213.65 1948.91,1213.65 1949.5,1213.65 1950.09,1213.65 1950.67,1213.65 1951.26,1213.65 1951.85,1213.65 1952.43,1213.65 1953.02,1213.65 1953.61,1213.65 1954.19,1213.65 1954.78,1213.65 1955.37,1213.65 1955.95,1213.65 1956.54,1213.65 1957.12,1213.65 1957.71,1213.65 1958.3,1213.65 1958.88,1213.65 1959.47,1213.65 1960.06,1213.65 1960.64,1213.65 1961.23,1213.65 1961.82,1213.65 1962.4,1213.65 1962.99,1213.65 1963.58,1213.65 1964.16,1213.65 1964.75,1213.65 1965.33,1213.65 1965.92,1213.65 1966.51,1213.65 1967.09,1213.65 1967.68,1213.65 1968.27,1213.65 1968.85,1213.65 1969.44,1213.65 1970.03,1213.65 1970.61,1213.65 1971.2,1213.65 1971.78,1213.65 1972.37,1213.65 1972.96,1213.65 1973.54,1213.65 1974.13,1213.65 1974.72,1213.65 1975.3,1213.65 1975.89,1213.65 1976.48,1213.65 1977.06,1213.65 1977.65,1213.65 1978.24,1213.65 1978.82,1213.65 1979.41,1213.65 1979.99,1213.65 1980.58,1213.65 1981.17,1213.65 1981.75,1213.65 1982.34,1213.65 1982.93,1213.65 1983.51,1213.65 1984.1,1213.65 1984.69,1213.65 1985.27,1213.65 1985.86,1213.65 1986.45,1213.65 1987.03,1213.65 1987.62,1213.65 1988.2,1213.65 1988.79,1213.65 1989.38,1213.65 1989.96,1213.65 1990.55,1213.65 1991.14,1213.65 1991.72,1213.65 1992.31,1213.65 1992.9,1213.65 1993.48,1213.65 1994.07,1213.65 1994.65,1213.65 1995.24,1213.65 1995.83,1213.65 1996.41,1213.65 1997,1213.65 1997.59,1213.65 1998.17,1213.65 1998.76,1213.65 1999.35,1213.65 1999.93,1213.65 2000.52,1213.65 2001.11,1213.65 2001.69,1213.65 2002.28,1213.65 2002.86,1213.65 2003.45,1213.65 2004.04,1213.65 2004.62,1213.65 2005.21,1213.65 2005.8,1213.65 2006.38,1213.65 2006.97,1213.65 2007.56,1213.65 2008.14,1213.65 2008.73,1213.65 2009.32,1213.65 2009.9,1213.65 2010.49,1213.65 2011.07,1213.65 2011.66,1213.65 2012.25,1213.65 2012.83,1213.65 2013.42,1213.65 2014.01,1213.65 2014.59,1213.65 2015.18,1213.65 2015.77,1213.65 2016.35,1213.65 2016.94,1213.65 2017.53,1213.65 2018.11,1213.65 2018.7,1213.65 2019.28,1213.65 2019.87,1213.65 2020.46,1213.65 2021.04,1213.65 2021.63,1213.65 2022.22,1213.65 2022.8,1213.65 2023.39,1213.65 2023.98,1213.65 2024.56,1213.65 2025.15,1213.65 2025.73,1213.65 2026.32,1213.65 2026.91,1213.65 2027.49,1213.65 2028.08,1213.65 2028.67,1213.65 2029.25,1213.65 2029.84,1213.65 2030.43,1213.65 2031.01,1213.65 2031.6,1213.65 2032.19,1213.65 2032.77,1213.65 2033.36,1213.65 2033.94,1213.65 2034.53,1213.65 2035.12,1213.65 2035.7,1213.65 2036.29,1213.65 2036.88,1213.65 2037.46,1213.65 2038.05,1213.65 2038.64,1213.65 2039.22,1213.65 2039.81,1213.65 2040.4,1213.65 2040.98,1213.65 2041.57,1213.65 2042.15,1213.65 2042.74,1213.65 2043.33,1213.65 2043.91,1213.65 2044.5,1213.65 2045.09,1213.65 2045.67,1213.65 2046.26,1213.65 2046.85,1213.65 2047.43,1213.65 2048.02,1213.65 2048.6,1213.65 2049.19,1213.65 2049.78,1213.65 2050.36,1213.65 2050.95,1213.65 2051.54,1213.65 2052.12,1213.65 2052.71,1213.65 2053.3,1213.65 2053.88,1213.65 2054.47,1213.65 2055.06,1213.65 2055.64,1213.65 2056.23,1213.65 2056.81,1213.65 2057.4,1213.65 2057.99,1213.65 2058.57,1213.65 2059.16,1213.65 2059.75,1213.65 2060.33,1213.65 2060.92,1213.65 2061.51,1213.65 2062.09,1213.65 2062.68,1213.65 2063.27,1213.65 2063.85,1213.65 2064.44,1213.65 2065.02,1213.65 2065.61,1213.65 2066.2,1213.65 2066.78,1213.65 2067.37,1213.65 2067.96,1213.65 2068.54,1213.65 2069.13,1213.65 2069.72,1213.65 2070.3,1213.65 2070.89,1213.65 2071.48,1213.65 2072.06,1213.65 2072.65,1213.65 2073.23,1213.65 2073.82,1213.65 2074.41,1213.65 2074.99,1213.65 2075.58,1213.65 2076.17,1213.65 2076.75,1213.65 2077.34,1213.65 2077.93,1213.65 2078.51,1213.65 2079.1,1213.65 2079.68,1213.65 2080.27,1213.65 2080.86,1213.65 2081.44,1213.65 2082.03,1213.65 2082.62,1213.65 2083.2,1213.65 2083.79,1213.65 2084.38,1213.65 2084.96,1213.65 2085.55,1213.65 2086.14,1213.65 2086.72,1213.65 2087.31,1213.65 2087.89,1213.65 2088.48,1213.65 2089.07,1213.65 2089.65,1213.65 2090.24,1213.65 2090.83,1213.65 2091.41,1213.65 2092,1213.65 2092.59,1213.65 2093.17,1213.65 2093.76,1213.65 2094.35,1213.65 2094.93,1213.65 2095.52,1213.65 2096.1,1213.65 2096.69,1213.65 2097.28,1213.65 2097.86,1213.65 2098.45,1213.65 2099.04,1213.65 2099.62,1213.65 2100.21,1213.65 2100.8,1213.65 2101.38,1213.65 2101.97,1213.65 2102.55,1213.65 2103.14,1213.65 2103.73,1213.65 2104.31,1213.65 2104.9,1213.65 2105.49,1213.65 2106.07,1213.65 2106.66,1213.65 2107.25,1213.65 2107.83,1213.65 2108.42,1213.65 2109.01,1213.65 2109.59,1213.65 2110.18,1213.65 2110.76,1213.65 2111.35,1213.65 2111.94,1213.65 2112.52,1213.65 2113.11,1213.65 2113.7,1213.65 2114.28,1213.65 2114.87,1213.65 2115.46,1213.65 2116.04,1213.65 2116.63,1213.65 2117.22,1213.65 2117.8,1213.65 2118.39,1213.65 2118.97,1213.65 2119.56,1213.65 2120.15,1213.65 2120.73,1213.65 2121.32,1213.65 2121.91,1213.65 2122.49,1213.65 2123.08,1213.65 2123.67,1213.65 2124.25,1213.65 2124.84,1213.65 2125.42,1213.65 2126.01,1213.65 2126.6,1213.65 2127.18,1213.65 2127.77,1213.65 2128.36,1213.65 2128.94,1213.65 2129.53,1213.65 2130.12,1213.65 2130.7,1213.65 2131.29,1213.65 2131.88,1213.65 2132.46,1213.65 2133.05,1213.65 2133.63,1213.65 2134.22,1213.65 2134.81,1213.65 2135.39,1213.65 2135.98,1213.65 2136.57,1213.65 2137.15,1213.65 2137.74,1213.65 2138.33,1213.65 2138.91,1213.65 2139.5,1213.65 2140.09,1213.65 2140.67,1213.65 2141.26,1213.65 2141.84,1213.65 2142.43,1213.65 2143.02,1213.65 2143.6,1213.65 2144.19,1213.65 2144.78,1213.65 2145.36,1213.65 2145.95,1213.65 2146.54,1213.65 2147.12,1213.65 2147.71,1213.65 2148.3,1213.65 2148.88,1213.65 2149.47,1213.65 2150.05,1213.65 2150.64,1213.65 2151.23,1213.65 2151.81,1213.65 2152.4,1213.65 2152.99,1213.65 2153.57,1213.65 2154.16,1213.65 2154.75,1213.65 2155.33,1213.65 2155.92,1213.65 2156.5,1213.65 2157.09,1213.65 2157.68,1213.65 2158.26,1213.65 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.27,1197.85 1399.04,899.083 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.09 985.439,1197.85 2158.26,1197.85 2158.26,1229.09 985.439,1229.09 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip483\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip483)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-11990.8 169.943,-12290.6 170.503,-12548.7 171.062,-12767.9 171.621,-12950.8 172.18,-13099.8 172.74,-13217.3 173.299,-12768 173.858,-12843.5 174.417,-12893.2 174.977,-12488.3 175.536,-11346.1 176.095,-11374.2 176.655,-11376 177.214,-11370.8 177.773,-11048.2 178.332,-10737.6 178.892,-10446.5 179.451,-10175.6 180.01,-10123.6 180.569,-10058.6 181.129,-9599.92 181.688,-9514.8 182.247,-9079.73 182.806,-8971.34 183.366,-8861.17 183.925,-8742.46 184.484,-8623.98 185.043,-8499.42 185.603,-8365.2 186.162,-8111.32 186.721,-7987.9 187.28,-7754.41 187.84,-7622.26 188.399,-7496.07 188.958,-7261.71 189.517,-6949.25 190.077,-6826.41 190.636,-6456.4 191.195,-6347.13 191.754,-6232.81 192.314,-5975.61 192.873,-5866.36 193.432,-5740.26 193.991,-5560.18 194.551,-5379.9 195.11,-5211.8 195.669,-5044.44 196.228,-4814.77 196.788,-4590.47 197.347,-4370.3 197.906,-4206.79 198.465,-4048.04 199.025,-3891.79 199.584,-3611.64 200.143,-3473.77 200.702,-3384.64 201.262,-3212.89 201.821,-3123.74 202.38,-2920.08 202.939,-2840.95 203.499,-2757.86 204.058,-2645.32 204.617,-2528.16 205.176,-2313.25 205.736,-2211.2 206.295,-2108.35 206.854,-1945.74 207.413,-1823.48 207.973,-1705.38 208.532,-1647.71 209.091,-1563.4 209.65,-1484.08 210.21,-1344.46 210.769,-1265.84 211.328,-1130.35 211.887,-1087.25 212.447,-1017.09 213.006,-868.486 213.565,-778.564 214.124,-720.166 214.684,-714.248 215.243,-655.238 215.802,-574.853 216.361,-517.969 216.921,-462.899 217.48,-408.098 218.039,-306.826 218.598,-256.761 219.158,-181.262 219.717,-134.682 220.276,-93.9138 220.835,-50.8607 221.395,10.4426 221.954,70.8404 222.513,111.59 223.072,191.033 223.632,245.406 224.191,300.288 224.75,355.685 225.309,386.466 225.869,415.249 226.428,360.258 226.987,348.568 227.546,383.412 228.106,419.529 228.665,432.531 229.224,484.214 229.783,516.74 230.343,530.41 230.902,542.77 231.461,591.024 232.02,638.327 232.58,659.573 233.139,625.013 233.698,655.458 234.257,661.813 234.817,687.972 235.376,695.211 235.935,717.033 236.494,763.311 237.054,745.317 237.613,787.308 238.172,866.967 238.731,917.531 239.291,934.18 239.85,966.899 240.409,943.493 240.968,935.649 241.528,929.291 242.087,945.168 242.646,958.292 243.205,955.829 243.765,952.723 244.324,925.252 244.883,901.82 245.442,917.747 246.002,953.289 246.561,967.685 247.12,997.966 247.679,1027.36 248.239,1054.71 248.798,1067.5 249.357,1077.42 249.916,1100.72 250.476,1077.74 251.035,1084.66 251.594,1093.19 252.153,1086.88 252.713,1097.26 253.272,1090.68 253.831,1102.88 254.39,1075.62 254.95,1085.32 255.509,1078.14 256.068,1073.08 256.627,1049.24 257.187,1062.64 257.746,1071.34 258.305,1065.6 258.864,1110.8 259.424,1101.04 259.983,1091.45 260.542,1117.47 261.101,1110.71 261.661,1085.5 262.22,1112.58 262.779,1104.61 263.338,1098.24 263.898,1092.58 264.457,1070.72 265.016,1069.43 265.575,1030.75 266.135,1045.79 266.694,1039.91 267.253,1103.5 267.812,1097.29 268.372,1060.27 268.931,1056.14 269.49,1071.25 270.049,1049.69 270.609,1077.42 271.168,1090 271.727,1103.58 272.286,1111.95 272.846,1105.12 273.405,1119.53 273.964,1108.76 274.523,1118.14 275.083,1126.6 275.642,1101.5 276.201,1109.51 276.76,1137.08 277.32,1128.79 277.879,1108.47 278.438,1146.83 278.997,1171.67 279.557,1195.9 280.116,1199.01 280.675,1166 281.234,1120.6 281.794,1099.22 282.353,1090.01 282.912,1097.77 283.471,1061.12 284.031,1069.98 284.59,1063.86 285.149,1125.05 285.708,1132.86 286.268,1121.27 286.827,1129.43 287.386,1118.11 287.945,1144.12 288.505,1148.4 289.064,1134.65 289.623,1139.29 290.182,1128.73 290.742,1102.45 291.301,1093.91 291.86,1087.97 292.419,1083.43 292.979,1056.15 293.538,1066.94 294.097,1073.97 294.656,1069.05 295.216,1081.5 295.775,1089.48 296.334,1083.88 296.893,1078.43 297.453,1068.97 298.012,1077.62 298.571,1118.4 299.13,1121.07 299.69,1143.38 300.249,1128.18 300.808,1099.7 301.368,1140.85 301.927,1112.45 302.486,1102.52 303.045,1125.33 303.605,1144.98 304.164,1149.67 304.723,1137.16 305.282,1141.85 305.842,1145.37 306.401,1133.44 306.96,1120.73 307.519,1111.83 308.079,1103.28 308.638,1090.39 309.197,1111.12 309.756,1101.09 310.316,1056.45 310.875,1048.45 311.434,1025.98 311.993,1033.83 312.553,1027.53 313.112,1071.96 313.671,1061.28 314.23,1069.39 314.79,1064.96 315.349,1074.45 315.908,1062.36 316.467,1085.51 317.027,1102.4 317.586,1077.44 318.145,1052.95 318.704,1046.66 319.264,1020.24 319.823,1027.77 320.382,1051.78 320.941,1040.54 321.501,1046.49 322.06,1038.14 322.619,1028.65 323.178,1036.9 323.738,1009.43 324.297,999.438 324.856,1008.98 325.415,1002.2 325.975,996.972 326.534,1007.52 327.093,1034.82 327.652,1024.25 328.212,1049.59 328.771,1039.21 329.33,1014.34 329.889,991.899 330.449,982.674 331.008,960.656 331.567,938.778 332.126,965.228 332.686,958.667 333.245,954.064 333.804,996.688 334.363,991.546 334.923,951.841 335.482,931.792 336.041,976.9 336.6,972.742 337.16,982.88 337.719,992.848 338.278,1001.71 338.837,1042.65 339.397,1064 339.956,989.977 340.515,995.89 341.074,989.867 341.634,999.669 342.193,991.16 342.752,1014.89 343.311,1007.51 343.871,982.15 344.43,974.638 344.989,935.801 345.548,895.303 346.108,893.784 346.667,939.549 347.226,900.045 347.785,881.293 348.345,895.349 348.904,875.1 349.463,887.373 350.022,850.194 350.582,864.115 351.141,867.596 351.7,879.727 352.259,892.079 352.819,872.359 353.378,852.042 353.937,834.867 354.496,833.229 355.056,850.587 355.615,864.961 356.174,876.507 356.733,877.175 357.293,858.475 357.852,852.692 358.411,799.953 358.97,836.521 359.53,852.853 360.089,871.045 360.648,900.548 361.207,896.437 361.767,925.641 362.326,936.17 362.885,945.843 363.444,940.719 364.004,938.839 364.563,934.345 365.122,891.412 365.681,922.787 366.241,889.596 366.8,949.506 367.359,961.699 367.918,968.235 368.478,959.821 369.037,952.131 369.596,943.762 370.155,939.92 370.715,935.774 371.274,945.81 371.833,907.2 372.392,904.82 372.952,935.341 373.511,934.264 374.07,927.847 374.629,918.851 375.189,945.04 375.748,955.215 376.307,931.944 376.866,973.005 377.426,963.826 377.985,923.331 378.544,950.186 379.103,960.936 379.663,966.599 380.222,988.75 380.781,960.946 381.34,937.788 381.9,864.439 382.459,876.494 383.018,825.747 383.577,841.448 384.137,853.728 384.696,832.716 385.255,811.668 385.814,794.195 386.374,811.767 386.933,796.85 387.492,781.832 388.051,768.146 388.611,786.182 389.17,807.759 389.729,806.267 390.288,791.012 390.848,791.595 391.407,810.933 391.966,811.421 392.525,809.03 393.085,792.459 393.644,775.926 394.203,780.37 394.762,764.208 395.322,764.652 395.881,718.767 396.44,705.378 396.999,776.058 397.559,827.724 398.118,810.799 398.677,825.499 399.236,809.02 399.796,806.343 400.355,837.013 400.914,833.979 401.473,815.778 402.033,813.78 402.592,814.411 403.151,815.251 403.71,814.333 404.27,827.213 404.829,840.59 405.388,821.474 405.947,822.776 406.507,836.299 407.066,865.256 407.625,890.422 408.184,902.323 408.744,844.506 409.303,810.051 409.862,836.319 410.421,850.15 410.981,847.458 411.54,846.251 412.099,857.712 412.658,819.588 413.218,815.633 413.777,830.831 414.336,846.204 414.895,828.673 415.455,844.232 416.014,839.384 416.573,853.661 417.132,846.836 417.692,841.775 418.251,852.944 418.81,850.07 419.369,830.797 419.929,828.855 420.488,858.152 421.047,850.662 421.606,798.08 422.166,776.858 422.725,761.776 423.284,780.576 423.843,810.326 424.403,791.491 424.962,789.65 425.521,774.437 426.08,759.325 426.64,776.755 427.199,807.591 427.758,757.894 428.318,725.968 428.877,730.48 429.436,767.626 429.995,736.977 430.555,721.877 431.114,724.538 431.673,712.674 432.232,734.508 432.792,754.639 433.351,755.397 433.91,791.85 434.469,772.451 435.029,788.188 435.588,818.864 436.147,797.923 436.706,794.655 437.266,806.8 437.825,807.313 438.384,774.015 438.943,775.699 439.503,759.976 440.062,774.15 440.621,790.525 441.18,793.133 441.74,792.381 442.299,791.605 442.858,757.601 443.417,788.657 443.977,770.72 444.536,753.415 445.095,722.352 445.654,724.547 446.214,707.586 446.773,695.891 447.332,702.161 447.891,736.648 448.451,706.122 449.01,695.35 449.569,698.579 450.128,699.762 450.688,703.443 451.247,721 451.806,739.58 452.365,752.583 452.925,751.56 453.484,731.31 454.043,746.607 454.602,760.701 455.162,776.611 455.721,776.003 456.28,773.092 456.839,787.267 457.399,819.238 457.958,814.692 458.517,823.678 459.076,837.003 459.636,831.757 460.195,810.222 460.754,803.088 461.313,796.17 461.873,791.332 462.432,788.166 462.991,803.664 463.55,821.049 464.11,815.415 464.669,783.986 465.228,768.418 465.787,798.333 466.347,779.564 466.906,795.915 467.465,791.671 468.024,805.654 468.584,786.475 469.143,816.602 469.702,860.136 470.261,885.728 470.821,861.689 471.38,824.206 471.939,820.481 472.498,801.138 473.058,814.583 473.617,826.825 474.176,790.642 474.735,757.891 475.295,741.543 475.854,743.779 476.413,743.251 476.972,743.567 477.532,729.885 478.091,746.029 478.65,746.096 479.209,761.635 479.769,788.137 480.328,787.634 480.887,803.102 481.446,798.924 482.006,782.117 482.565,749.387 483.124,731.172 483.683,717.021 484.243,735.225 484.802,717.746 485.361,702.601 485.92,670.679 486.48,657.469 487.039,663.274 487.598,669.357 488.157,688.482 488.717,723.675 489.276,724.279 489.835,724.352 490.394,711.921 490.954,711.357 491.513,729.003 492.072,727.237 492.631,726.211 493.191,742.614 493.75,774.046 494.309,771.025 494.868,769.281 495.428,782.896 495.987,734.355 496.546,752.365 497.105,782.932 497.665,812.311 498.224,808.181 498.783,787.316 499.342,815.168 499.902,810.091 500.461,803.014 501.02,782.102 501.579,780.277 502.139,795.993 502.698,774.648 503.257,758.073 503.816,757.112 504.376,724.681 504.935,724.388 505.494,761.438 506.053,760.961 506.613,777.562 507.172,740.659 507.731,769.174 508.29,766.671 508.85,765.332 509.409,725.465 509.968,723.556 510.527,725.92 511.087,726.463 511.646,726.298 512.205,742.419 512.764,695.448 513.324,712.87 513.883,730.317 514.442,763.719 515.001,744.977 515.561,729.446 516.12,696.204 516.679,669.721 517.238,704.107 517.798,706.833 518.357,723.833 518.916,710.434 519.475,713.29 520.035,713.972 520.594,727.577 521.153,722.865 521.712,721.634 522.272,718.674 522.831,714.454 523.39,712.335 523.949,699.767 524.509,752.175 525.068,752.76 525.627,750.549 526.186,747.824 526.746,793.255 527.305,804.692 527.864,819.063 528.423,799.918 528.983,815.857 529.542,810.986 530.101,806.96 530.66,802.055 531.22,799.765 531.779,811.567 532.338,774.67 532.897,738.293 533.457,753.167 534.016,803.172 534.575,781.44 535.134,797.277 535.694,826.111 536.253,819.81 536.812,796.619 537.371,777.551 537.931,741.97 538.49,740.659 539.049,726.616 539.608,727.327 540.168,713.322 540.727,717.047 541.286,699.424 541.845,701.296 542.405,732.485 542.964,765.679 543.523,751.066 544.082,764.367 544.642,780.271 545.201,743.628 545.76,725.614 546.319,708.293 546.879,689.508 547.438,707.321 547.997,740.166 548.556,756.437 549.116,768.408 549.675,748.348 550.234,727.851 550.793,711.792 551.353,712.221 551.912,696.72 552.471,716.881 553.031,721.943 553.59,721.93 554.149,740.773 554.708,753.944 555.268,735.257 555.827,732.197 556.386,696.362 556.945,649.86 557.505,654.776 558.064,677.323 558.623,707.195 559.182,692.256 559.742,692.382 560.301,646.162 560.86,650.44 561.419,638.215 561.979,658.499 562.538,676.365 563.097,693.493 563.656,659.4 564.216,631.896 564.775,635.801 565.334,639.542 565.893,638.913 566.453,645.821 567.012,665.549 567.571,649.391 568.13,655.509 568.69,642.382 569.249,660.558 569.808,696.251 570.367,699.472 570.927,701.207 571.486,683.099 572.045,654.364 572.604,640.461 573.164,596.283 573.723,607.205 574.282,578.611 574.841,601.854 575.401,624.829 575.96,627.007 576.519,627.903 577.078,664.877 577.638,666.663 578.197,637.498 578.756,658.314 579.315,661.024 579.875,646.021 580.434,696.645 580.993,747.213 581.552,728.209 582.112,647.271 582.671,648.652 583.23,669.853 583.789,672.886 584.349,706.727 584.908,704.919 585.467,686.148 586.026,690.116 586.586,676.753 587.145,713.008 587.704,761.846 588.263,758.709 588.823,759.956 589.382,775.916 589.941,805.356 590.5,802.063 591.06,765.002 591.619,810.904 592.178,854.885 592.737,863.534 593.297,840.919 593.856,832.788 594.415,810.708 594.974,824.29 595.534,834.752 596.093,829.66 596.652,838.878 597.211,833.033 597.771,811.662 598.33,774.127 598.889,754.061 599.448,784.186 600.008,760.069 600.567,757.434 601.126,720.653 601.685,784.139 602.245,796.285 602.804,789.648 603.363,770.169 603.922,734.454 604.482,689.48 605.041,707.358 605.6,726.815 606.159,708.145 606.719,709.101 607.278,711.254 607.837,708.096 608.396,708.759 608.956,707.985 609.515,707.667 610.074,672.8 610.633,674.666 611.193,690.631 611.752,674.411 612.311,664.177 612.87,682.021 613.43,649.318 613.989,616.922 614.548,603.556 615.107,608.987 615.667,631.779 616.226,635.342 616.785,640.641 617.344,676.129 617.904,661.74 618.463,678.975 619.022,696.517 619.581,714.012 620.141,727.826 620.7,725.899 621.259,769.075 621.818,779.339 622.378,790.571 622.937,789.42 623.496,786.375 624.055,842.581 624.615,822.82 625.174,817.414 625.733,795.169 626.292,758.949 626.852,756.523 627.411,752.548 627.97,732.029 628.529,760.946 629.089,755.68 629.648,770.662 630.207,716.952 630.766,747.767 631.326,729.522 631.885,728.46 632.444,725.435 633.003,690.354 633.563,688.228 634.122,686.133 634.681,673.373 635.24,657.287 635.8,659.165 636.359,631.364 636.918,650.218 637.477,619.081 638.037,561.434 638.596,554.358 639.155,544.73 639.714,549.665 640.274,572.297 640.833,559.447 641.392,581.73 641.951,605.747 642.511,662.035 643.07,664.384 643.629,684.511 644.188,681.388 644.748,666.622 645.307,682.719 645.866,680.327 646.425,663.159 646.985,683.015 647.544,700.63 648.103,684.576 648.662,701.736 649.222,670.12 649.781,690.16 650.34,690.44 650.899,706.533 651.459,704.838 652.018,703.003 652.577,702.679 653.136,688.166 653.696,672.138 654.255,703.61 654.814,706.554 655.373,723.953 655.933,737.972 656.492,740 657.051,706.76 657.61,691.021 658.17,693.627 658.729,708.004 659.288,758.332 659.847,752.829 660.407,783.871 660.966,766.509 661.525,776.016 662.084,818.944 662.644,811.634 663.203,803.578 663.762,814.519 664.321,791.01 664.881,785.708 665.44,764.036 665.999,759.545 666.558,774.047 667.118,799.423 667.677,825.368 668.236,802.258 668.795,809.635 669.355,838.033 669.914,832.577 670.473,821.92 671.032,783.381 671.592,778.402 672.151,774.21 672.71,800.086 673.269,792.74 673.829,789.064 674.388,783.304 674.947,779.116 675.506,777.004 676.066,771.512 676.625,749.079 677.184,712.608 677.743,711.999 678.303,693.713 678.862,676.817 679.421,663.007 679.981,653.605 680.54,658.543 681.099,693.706 681.658,697.335 682.218,746.883 682.777,728.61 683.336,728.64 683.895,716.135 684.455,698.101 685.014,681.962 685.573,685.466 686.132,688.265 686.692,668.358 687.251,634.18 687.81,653.041 688.369,688.816 688.929,706.132 689.488,705.324 690.047,702.418 690.606,652.457 691.166,656.695 691.725,658.052 692.284,674.978 692.843,676.913 693.403,693.786 693.962,726.676 694.521,678.333 695.08,666.355 695.64,670.398 696.199,657.81 696.758,611.564 697.317,599.839 697.877,602.867 698.436,608.537 698.995,545.651 699.554,557.935 700.114,597.593 700.673,604.158 701.232,609.701 701.791,612.652 702.351,616.141 702.91,621.493 703.469,656.023 704.028,660.107 704.588,694.073 705.147,679.987 705.706,700.033 706.265,665.389 706.825,666.152 707.384,666.454 707.943,682.115 708.502,647.544 709.062,635.329 709.621,637.294 710.18,607.251 710.739,582.25 711.299,604.433 711.858,624.701 712.417,643.349 712.976,627.626 713.536,616.034 714.095,638.118 714.654,624.553 715.213,649.476 715.773,617.843 716.332,655.135 716.891,693.319 717.45,674.818 718.01,676.492 718.569,690.372 719.128,669.519 719.687,673.929 720.247,676.552 720.806,647.193 721.365,649.634 721.924,683.263 722.484,732.656 723.043,715.664 723.602,696.706 724.161,728.238 724.721,742.01 725.28,741.505 725.839,756.246 726.398,736.82 726.958,732.358 727.517,731.897 728.076,747.77 728.635,745.592 729.195,714.891 729.754,743.908 730.313,722.824 730.872,722.591 731.432,706.057 731.991,685.351 732.55,730.428 733.109,727.564 733.669,725.489 734.228,725.867 734.787,735.968 735.346,717.644 735.906,718.762 736.465,732.936 737.024,764.69 737.583,762.512 738.143,757.917 738.702,755.547 739.261,734.89 739.82,714.875 740.38,698.546 740.939,718.109 741.498,695.875 742.057,696.594 742.617,695.879 743.176,727.081 743.735,721.47 744.294,737.716 744.854,735.347 745.413,734.643 745.972,733.982 746.531,745.306 747.091,747.296 747.65,745.648 748.209,695.316 748.768,681.557 749.328,679.429 749.887,695.973 750.446,693.063 751.005,692.445 751.565,662.252 752.124,665.185 752.683,649.256 753.242,652.335 753.802,659.407 754.361,678.483 754.92,677.297 755.479,694.987 756.039,723.93 756.598,766.471 757.157,729.826 757.716,729.401 758.276,741.776 758.835,722.8 759.394,736.982 759.953,701.95 760.513,734.149 761.072,714.526 761.631,761.992 762.19,745.741 762.75,710.193 763.309,723.344 763.868,738.612 764.427,802.349 764.987,781.893 765.546,778.944 766.105,773.628 766.664,751.733 767.224,726.581 767.783,707.933 768.342,688.443 768.901,654.8 769.461,626.057 770.02,645.142 770.579,649.939 771.138,650.261 771.698,684.266 772.257,669.017 772.816,671.295 773.375,686.816 773.935,734.809 774.494,734.191 775.053,750.7 775.612,774.606 776.172,786.395 776.731,815.737 777.29,808.341 777.849,756.755 778.409,802.574 778.968,812.038 779.527,774.67 780.086,753.264 780.646,733.33 781.205,727.999 781.764,711.91 782.323,709.915 782.883,696.407 783.442,694.755 784.001,707.734 784.56,723.985 785.12,723.155 785.679,741.518 786.238,706.103 786.797,717.779 787.357,702.604 787.916,703.717 788.475,700.048 789.034,730.668 789.594,728.503 790.153,778.243 790.712,789.297 791.271,784.829 791.831,796.145 792.39,788.836 792.949,748.242 793.508,778.62 794.068,789.52 794.627,767.394 795.186,781.632 795.745,757.996 796.305,768.207 796.864,764.756 797.423,710.523 797.982,678.406 798.542,696.222 799.101,694.06 799.66,693.968 800.219,695.896 800.779,695.988 801.338,676.674 801.897,660.982 802.456,678.521 803.016,696.059 803.575,664.793 804.134,613.911 804.693,635.964 805.253,639.655 805.812,656.867 806.371,652.947 806.931,671.653 807.49,705.825 808.049,670.613 808.608,658.085 809.168,688.516 809.727,675.818 810.286,707.503 810.845,707.036 811.405,675.421 811.964,646.548 812.523,646.47 813.082,668.423 813.642,668.626 814.201,684.156 814.76,686.311 815.319,651.763 815.879,670.529 816.438,655.052 816.997,670.354 817.556,619.805 818.116,622.239 818.675,626.623 819.234,645.56 819.793,614.154 820.353,617.215 820.912,636.999 821.471,641.05 822.03,641.193 822.59,646.41 823.149,662.078 823.708,631.711 824.267,570.107 824.827,581.64 825.386,586.787 825.945,593.142 826.504,600.516 827.064,589.077 827.623,612.501 828.182,604.463 828.741,638.242 829.301,641.556 829.86,660.203 830.419,694.183 830.978,694.194 831.538,742.22 832.097,708.4 832.656,721.319 833.215,699.613 833.775,719.297 834.334,750.255 834.893,746.611 835.452,712.53 836.012,696.51 836.571,710.849 837.13,691.849 837.689,705.659 838.249,707.92 838.808,722.662 839.367,751.707 839.926,748.142 840.486,748.334 841.045,743 841.604,708.08 842.163,721.97 842.723,700.766 843.282,715.93 843.841,732.024 844.4,763.092 844.96,789.951 845.519,782.978 846.078,743.586 846.637,758.002 847.197,751.67 847.756,780.003 848.315,724.107 848.874,672.343 849.434,672.46 849.993,688.804 850.552,687.236 851.111,718.812 851.671,732.951 852.23,714.026 852.789,714.138 853.348,715.58 853.908,700.07 854.467,682.242 855.026,648.047 855.585,631.566 856.145,648.36 856.704,652.199 857.263,654.463 857.822,641.32 858.382,611.545 858.941,633.8 859.5,637.961 860.059,626.741 860.619,613.265 861.178,631.142 861.737,619.11 862.296,639.673 862.856,642.916 863.415,664.388 863.974,651.818 864.533,688.644 865.093,657.747 865.652,658.835 866.211,659.621 866.77,647.831 867.33,631.547 867.889,640.111 868.448,692.801 869.007,692.077 869.567,706.902 870.126,674.714 870.685,658.486 871.244,676.863 871.804,694.893 872.363,699.118 872.922,716.212 873.481,701.434 874.041,731.148 874.6,713.833 875.159,729.761 875.718,711.034 876.278,708.637 876.837,741.772 877.396,772.501 877.955,752.367 878.515,762.193 879.074,760.95 879.633,756.082 880.192,735.047 880.752,716.061 881.311,663.957 881.87,681.154 882.429,680.696 882.989,667.49 883.548,653.848 884.107,653.15 884.666,690.412 885.226,673.589 885.785,640.155 886.344,641.138 886.903,597.221 887.463,599.98 888.022,653.778 888.581,654.128 889.14,657.723 889.7,660.375 890.259,630.478 890.818,648.78 891.377,618.501 891.937,637.806 892.496,656.441 893.055,659.862 893.614,663.219 894.174,666.242 894.733,615.213 895.292,619.568 895.851,624.444 896.411,660.764 896.97,699.201 897.529,698.914 898.088,697.94 898.648,680.247 899.207,663.286 899.766,663.427 900.325,679.226 900.885,661.361 901.444,664.956 902.003,685.894 902.562,704.009 903.122,672.862 903.681,678.054 904.24,695.819 904.799,696.717 905.359,663.806 905.918,646.305 906.477,681.015 907.036,697.402 907.596,697.286 908.155,667.581 908.714,684.599 909.273,682.609 909.833,682.7 910.392,650.847 910.951,686.635 911.51,668.79 912.07,688.201 912.629,670.521 913.188,658.384 913.747,643.595 914.307,632.499 914.866,681.228 915.425,682.108 915.984,699.103 916.544,714.892 917.103,717.638 917.662,718.429 918.221,714.042 918.781,711.132 919.34,706.386 919.899,721.109 920.458,722.455 921.018,722.264 921.577,721.231 922.136,684.534 922.695,698.008 923.255,665.578 923.814,685.741 924.373,669.758 924.932,671.354 925.492,704.198 926.051,653.443 926.61,639.592 927.169,608.177 927.729,594.78 928.288,650.252 928.847,649.303 929.406,635.727 929.966,656.275 930.525,674.139 931.084,676.519 931.644,694.838 932.203,710.788 932.762,673.239 933.321,689.808 933.881,690.967 934.44,688.844 934.999,666.129 935.558,652.838 936.118,673.213 936.677,687.771 937.236,735.5 937.795,700.606 938.355,748.707 938.914,728.614 939.473,745.011 940.032,774.737 940.592,771.423 941.151,737.821 941.71,752.555 942.269,748.238 942.829,714.125 943.388,677.447 943.947,676.456 944.506,659.157 945.066,679.286 945.625,650.267 946.184,665.402 946.743,616.03 947.303,599.179 947.862,601.181 948.421,604.937 948.98,624.681 949.54,640.99 950.099,644.786 950.658,625.579 951.217,597.889 951.777,569.019 952.336,572.024 952.895,596.298 953.454,588.506 954.014,626.811 954.573,628.989 955.132,650.104 955.691,617.121 956.251,634.374 956.81,653.302 957.369,674.241 957.928,671.518 958.488,671.727 959.047,673.703 959.606,672.84 960.165,660.268 960.725,726.513 961.284,723.93 961.843,703.025 962.402,734.612 962.962,746.48 963.521,729.226 964.08,741.739 964.639,786.367 965.199,811.409 965.758,802.137 966.317,809.478 966.876,787.562 967.436,781.401 967.995,775.508 968.554,771.527 969.113,750.779 969.673,782.54 970.232,809.699 970.791,801.786 971.35,777.88 971.91,791.452 972.469,784.041 973.028,778.347 973.587,756.05 974.147,768.766 974.706,733.346 975.265,748.341 975.824,746.636 976.384,711.374 976.943,727.674 977.502,759.506 978.061,771.692 978.621,753.198 979.18,734.282 979.739,730.928 980.298,712.847 980.858,708.883 981.417,687.519 981.976,684.608 982.535,648.529 983.095,618.601 983.654,593.089 984.213,613.752 984.772,618.184 985.332,622.439 985.891,626.862 986.45,611.436 987.009,615.685 987.569,586.951 988.128,595.705 988.687,585.254 989.246,590.452 989.806,595.259 990.365,599.301 990.924,619.13 991.483,574.039 992.043,566.71 992.602,587.831 993.161,624.428 993.72,673.774 994.28,655.273 994.839,653.876 995.398,674.02 995.957,690.837 996.517,689.493 997.076,656.425 997.635,673.22 998.194,688.048 998.754,688.607 999.313,703.627 999.872,686.377 1000.43,681.752 1000.99,681.108 1001.55,680.012 1002.11,678.996 1002.67,676.774 1003.23,696.418 1003.79,681.291 1004.35,714.063 1004.91,711.081 1005.46,691.264 1006.02,645.588 1006.58,650.457 1007.14,618.067 1007.7,620.62 1008.26,658.505 1008.82,660.587 1009.38,679.456 1009.94,696.373 1010.5,725.552 1011.06,706.071 1011.62,689.344 1012.18,673.13 1012.73,672.44 1013.29,671.71 1013.85,672.601 1014.41,659.017 1014.97,642.346 1015.53,645.776 1016.09,620.715 1016.65,637.529 1017.21,643.379 1017.77,645.09 1018.33,646.94 1018.89,632.234 1019.45,632.898 1020.01,651.557 1020.56,637.535 1021.12,605.552 1021.68,610.498 1022.24,600.702 1022.8,576.963 1023.36,567.138 1023.92,573.234 1024.48,547.292 1025.04,573.667 1025.6,563.989 1026.16,607.931 1026.72,629.611 1027.28,631.064 1027.83,650.113 1028.39,685.393 1028.95,717.554 1029.51,717.912 1030.07,711.672 1030.63,680.061 1031.19,665.686 1031.75,686.42 1032.31,701.18 1032.87,715.045 1033.43,715.874 1033.99,686.72 1034.55,687.898 1035.1,688 1035.66,688.001 1036.22,705.835 1036.78,706.043 1037.34,703.307 1037.9,702.664 1038.46,701.979 1039.02,748.137 1039.58,732.129 1040.14,729.885 1040.7,711.317 1041.26,742.357 1041.82,723.477 1042.38,673.027 1042.93,707.132 1043.49,709.279 1044.05,740.864 1044.61,722.554 1045.17,737.351 1045.73,754.694 1046.29,784.454 1046.85,779.358 1047.41,774.205 1047.97,782.98 1048.53,745.497 1049.09,712.03 1049.65,664.564 1050.2,697.398 1050.76,680.175 1051.32,696.764 1051.88,698.439 1052.44,664.251 1053,666.034 1053.56,667.609 1054.12,656.198 1054.68,641.975 1055.24,646.263 1055.8,631.927 1056.36,602.937 1056.92,621.479 1057.48,656.997 1058.03,626.221 1058.59,649.393 1059.15,667.32 1059.71,653.848 1060.27,655.859 1060.83,671.548 1061.39,660.923 1061.95,675.232 1062.51,658.795 1063.07,672.831 1063.63,656.807 1064.19,608.018 1064.75,642.416 1065.3,678.23 1065.86,662.762 1066.42,678.923 1066.98,676.32 1067.54,642.259 1068.1,631.982 1068.66,648.681 1069.22,664.73 1069.78,699.124 1070.34,697.687 1070.9,700.106 1071.46,703.591 1072.02,701.52 1072.57,717.762 1073.13,749.703 1073.69,762.67 1074.25,724.577 1074.81,721.441 1075.37,692.086 1075.93,693.386 1076.49,647.11 1077.05,652.967 1077.61,669.697 1078.17,671.782 1078.73,687.437 1079.29,706.05 1079.85,719.616 1080.4,736.743 1080.96,751.276 1081.52,760.719 1082.08,755.221 1082.64,701.367 1083.2,683.095 1083.76,696.416 1084.32,696.051 1084.88,726.161 1085.44,771.69 1086,770.32 1086.56,733.662 1087.12,713.81 1087.67,743.671 1088.23,741.234 1088.79,771.576 1089.35,782.279 1089.91,824.859 1090.47,816.549 1091.03,777.618 1091.59,775.195 1092.15,785.726 1092.71,813.958 1093.27,790.202 1093.83,798.393 1094.39,774.521 1094.94,785.903 1095.5,813.333 1096.06,805.156 1096.62,783.304 1097.18,794.763 1097.74,792.853 1098.3,765.448 1098.86,772.732 1099.42,783.98 1099.98,783.629 1100.54,746.523 1101.1,740.984 1101.66,772.346 1102.22,735.298 1102.77,702.176 1103.33,701.928 1103.89,701.679 1104.45,714.908 1105.01,691.225 1105.57,707.085 1106.13,707.332 1106.69,672.872 1107.25,690.233 1107.81,690.384 1108.37,702.68 1108.93,668.155 1109.49,651.555 1110.04,652.984 1110.6,649.883 1111.16,652.033 1111.72,687.641 1112.28,716.598 1112.84,715.635 1113.4,698.938 1113.96,698.29 1114.52,697.981 1115.08,712.46 1115.64,695.856 1116.2,691.568 1116.76,708.415 1117.31,721.057 1117.87,685.119 1118.43,714.015 1118.99,696.931 1119.55,711.325 1120.11,707.702 1120.67,736.712 1121.23,749.531 1121.79,746.218 1122.35,757.63 1122.91,741.541 1123.47,754.825 1124.03,734.015 1124.59,747.513 1125.14,757.515 1125.7,725.455 1126.26,704.485 1126.82,674.038 1127.38,642.922 1127.94,628.822 1128.5,633.483 1129.06,651.014 1129.62,652.976 1130.18,621.119 1130.74,641.199 1131.3,656.241 1131.86,641.789 1132.41,644.403 1132.97,662.017 1133.53,629.477 1134.09,633.976 1134.65,655.666 1135.21,640.695 1135.77,611.076 1136.33,614.337 1136.89,616.988 1137.45,637.358 1138.01,640.095 1138.57,660.499 1139.13,678.356 1139.68,693.811 1140.24,660.876 1140.8,610.854 1141.36,627.775 1141.92,645.47 1142.48,629.293 1143.04,662.812 1143.6,680.081 1144.16,664.913 1144.72,653.656 1145.28,637.551 1145.84,639.924 1146.4,676.087 1146.96,647.05 1147.51,651.585 1148.07,651.044 1148.63,651.632 1149.19,592.092 1149.75,596.958 1150.31,572.123 1150.87,597.301 1151.43,618.061 1151.99,591.395 1152.55,595.993 1153.11,618.125 1153.67,653.652 1154.23,650.155 1154.78,601.128 1155.34,555.6 1155.9,560.801 1156.46,584.498 1157.02,624.726 1157.58,645.863 1158.14,661.629 1158.7,696.934 1159.26,695.019 1159.82,697.509 1160.38,678.033 1160.94,679.478 1161.5,679.159 1162.05,695.311 1162.61,691.715 1163.17,695.057 1163.73,712.151 1164.29,682.49 1164.85,651.459 1165.41,653.132 1165.97,671.059 1166.53,687.739 1167.09,686.829 1167.65,705.215 1168.21,669.529 1168.77,667.762 1169.33,684.522 1169.88,717.112 1170.44,715.896 1171,731.603 1171.56,762.787 1172.12,744.636 1172.68,758.043 1173.24,782.942 1173.8,779.441 1174.36,742.497 1174.92,741.417 1175.48,707.859 1176.04,740.569 1176.6,705.574 1177.15,708.744 1177.71,661.344 1178.27,664.518 1178.83,664.423 1179.39,666.181 1179.95,634.387 1180.51,652.212 1181.07,702.583 1181.63,716.939 1182.19,701.783 1182.75,736.151 1183.31,733.926 1183.87,713.334 1184.43,693.059 1184.98,677.667 1185.54,663.176 1186.1,647.571 1186.66,701.17 1187.22,716.023 1187.78,712.565 1188.34,681.231 1188.9,697.215 1189.46,710.173 1190.02,708.611 1190.58,707.314 1191.14,708.158 1191.7,707.037 1192.25,672.222 1192.81,687.596 1193.37,704.123 1193.93,705.542 1194.49,687.684 1195.05,667.455 1195.61,638.199 1196.17,591.216 1196.73,594.598 1197.29,620.758 1197.85,579.213 1198.41,601.612 1198.97,624.379 1199.52,661.78 1200.08,645.053 1200.64,648.24 1201.2,651.198 1201.76,716.055 1202.32,714.746 1202.88,697.594 1203.44,711.842 1204,681.215 1204.56,677.681 1205.12,679.105 1205.68,680.33 1206.24,636.426 1206.8,651.911 1207.35,606.22 1207.91,578.738 1208.47,569.018 1209.03,555.897 1209.59,529.756 1210.15,535.817 1210.71,576.119 1211.27,562.737 1211.83,555.407 1212.39,561.35 1212.95,534.925 1213.51,525.44 1214.07,548.994 1214.62,572.954 1215.18,580.399 1215.74,587.004 1216.3,593.247 1216.86,617.536 1217.42,590.361 1217.98,595.843 1218.54,601.843 1219.1,606.582 1219.66,626.55 1220.22,600.326 1220.78,589.849 1221.34,613.134 1221.89,630.798 1222.45,667.266 1223.01,670.094 1223.57,671.568 1224.13,685.766 1224.69,731.436 1225.25,751.943 1225.81,744.528 1226.37,760.195 1226.93,759.059 1227.49,754.705 1228.05,768.698 1228.61,782.793 1229.17,779.384 1229.72,773.728 1230.28,748.584 1230.84,743.343 1231.4,742.63 1231.96,744.352 1232.52,725.687 1233.08,707.817 1233.64,738.845 1234.2,752.105 1234.76,763.514 1235.32,746.402 1235.88,758.176 1236.44,785.719 1236.99,764.524 1237.55,776.77 1238.11,773.683 1238.67,769.719 1239.23,781.556 1239.79,792.154 1240.35,722.597 1240.91,733.714 1241.47,750.457 1242.03,777.122 1242.59,722.398 1243.15,703.137 1243.71,683.966 1244.26,683.039 1244.82,680.971 1245.38,652.257 1245.94,670.604 1246.5,672.311 1247.06,656.332 1247.62,688.322 1248.18,683.7 1248.74,684.998 1249.3,716.966 1249.86,702.204 1250.42,719.609 1250.98,718.715 1251.54,716.789 1252.09,781.465 1252.65,758.846 1253.21,755.538 1253.77,721.261 1254.33,717.534 1254.89,732.059 1255.45,726.421 1256.01,720.991 1256.57,734.366 1257.13,729.792 1257.69,712.129 1258.25,707.251 1258.81,721.736 1259.36,750.416 1259.92,714.81 1260.48,697.034 1261.04,666.724 1261.6,681.21 1262.16,649.034 1262.72,664.989 1263.28,700.666 1263.84,664.41 1264.4,648.809 1264.96,647.061 1265.52,646.349 1266.08,617.657 1266.63,621.002 1267.19,657.484 1267.75,674.016 1268.31,695.698 1268.87,696.207 1269.43,680.786 1269.99,646.627 1270.55,664.179 1271.11,666.872 1271.67,666.33 1272.23,666.162 1272.79,620.053 1273.35,609.865 1273.91,612.61 1274.46,631.547 1275.02,615.629 1275.58,617.871 1276.14,605.929 1276.7,626.84 1277.26,614.271 1277.82,585.022 1278.38,621.535 1278.94,626.746 1279.5,614.866 1280.06,619.708 1280.62,634.586 1281.18,652.573 1281.73,639.65 1282.29,611.266 1282.85,663.144 1283.41,666.472 1283.97,687.243 1284.53,686.375 1285.09,684.616 1285.65,681.322 1286.21,699.128 1286.77,682.751 1287.33,683.102 1287.89,683.351 1288.45,685.129 1289,734.91 1289.56,735.079 1290.12,734.002 1290.68,747.806 1291.24,747.145 1291.8,745.87 1292.36,725.985 1292.92,736.422 1293.48,751.769 1294.04,765.564 1294.6,794.409 1295.16,790.845 1295.72,817.192 1296.28,778.279 1296.83,770.155 1297.39,763.231 1297.95,724.391 1298.51,720.766 1299.07,720.448 1299.63,736.792 1300.19,686.954 1300.75,670.773 1301.31,655.616 1301.87,670.534 1302.43,652.539 1302.99,667.268 1303.55,663.436 1304.1,696.152 1304.66,725.969 1305.22,725.917 1305.78,707.782 1306.34,721.384 1306.9,668.748 1307.46,699.089 1308.02,696.59 1308.58,679.45 1309.14,697.275 1309.7,699.14 1310.26,715.684 1310.82,711.829 1311.38,694.83 1311.93,677.42 1312.49,678.084 1313.05,729.47 1313.61,727.711 1314.17,691.536 1314.73,708.879 1315.29,710.585 1315.85,692.439 1316.41,708.746 1316.97,692.611 1317.53,707.566 1318.09,723.768 1318.65,705.927 1319.2,706.623 1319.76,673.778 1320.32,640.65 1320.88,625.599 1321.44,608.501 1322,610.938 1322.56,604.175 1323.12,642.08 1323.68,609.381 1324.24,628.834 1324.8,618.278 1325.36,621.236 1325.92,577.183 1326.47,617.227 1327.03,621.239 1327.59,658.607 1328.15,646.635 1328.71,649.741 1329.27,667.341 1329.83,682.731 1330.39,680.589 1330.95,648.927 1331.51,665.462 1332.07,652.688 1332.63,685.768 1333.19,669.635 1333.75,685.49 1334.3,668.237 1334.86,653.836 1335.42,673.39 1335.98,671.946 1336.54,671.818 1337.1,671.629 1337.66,672.958 1338.22,641.445 1338.78,639.94 1339.34,660.574 1339.9,665.315 1340.46,633.732 1341.02,619.579 1341.57,641.771 1342.13,662.891 1342.69,682.814 1343.25,681.421 1343.81,699.504 1344.37,683.108 1344.93,646.046 1345.49,647.312 1346.05,646.193 1346.61,647.781 1347.17,650.86 1347.73,622.587 1348.29,606.938 1348.84,627.065 1349.4,599.341 1349.96,606.141 1350.52,613.541 1351.08,618.384 1351.64,608.448 1352.2,631.328 1352.76,653.229 1353.32,622.515 1353.88,656.744 1354.44,691.109 1355,671.106 1355.56,672.352 1356.12,673.661 1356.67,656.984 1357.23,638.439 1357.79,641.26 1358.35,611.614 1358.91,580.421 1359.47,585.676 1360.03,573.274 1360.59,614.336 1361.15,615.287 1361.71,649.248 1362.27,652.023 1362.83,670.843 1363.39,684.839 1363.94,700.86 1364.5,734.108 1365.06,729.961 1365.62,713.523 1366.18,717.128 1366.74,712.976 1367.3,707.745 1367.86,676.879 1368.42,678.454 1368.98,661.388 1369.54,665.727 1370.1,668.056 1370.66,669.521 1371.21,656.221 1371.77,658.02 1372.33,677.629 1372.89,696.624 1373.45,698.415 1374.01,677.56 1374.57,692.631 1375.13,678.007 1375.69,691.037 1376.25,710.037 1376.81,724.959 1377.37,754.295 1377.93,765.637 1378.49,727.715 1379.04,739.728 1379.6,721.769 1380.16,719.236 1380.72,736.107 1381.28,751.007 1381.84,715.983 1382.4,713.314 1382.96,724.005 1383.52,720.336 1384.08,719.198 1384.64,732.105 1385.2,731.783 1385.76,793.811 1386.31,821.056 1386.87,782.169 1387.43,776.415 1387.99,802.194 1388.55,827.489 1389.11,804.989 1389.67,797.806 1390.23,771.713 1390.79,783.96 1391.35,778.959 1391.91,756.925 1392.47,699.975 1393.03,747.488 1393.58,714.826 1394.14,697.123 1394.7,712.944 1395.26,677.967 1395.82,643.549 1396.38,631.531 1396.94,568.931 1397.5,556.184 1398.06,562.124 1398.62,521.88 1399.18,565.25 1399.74,525.178 1400.3,517.806 1400.86,541.794 1401.41,549.837 1401.97,557.917 1402.53,597.62 1403.09,635.384 1403.65,670.749 1404.21,638.388 1404.77,661.033 1405.33,661.806 1405.89,676.749 1406.45,675.587 1407.01,691.958 1407.57,694.792 1408.13,676.803 1408.68,678.223 1409.24,663.416 1409.8,680.973 1410.36,650.435 1410.92,733.82 1411.48,729.975 1412.04,740.621 1412.6,720.244 1413.16,717.391 1413.72,729.777 1414.28,740.575 1414.84,738.646 1415.4,704.854 1415.95,733.345 1416.51,750.667 1417.07,732.875 1417.63,761.954 1418.19,759.316 1418.75,773.814 1419.31,757.325 1419.87,735.68 1420.43,731.572 1420.99,729.748 1421.55,728.833 1422.11,759.832 1422.67,756.308 1423.23,770.958 1423.78,735.952 1424.34,703.605 1424.9,701.455 1425.46,715.613 1426.02,731.989 1426.58,762.064 1427.14,774.999 1427.7,755.877 1428.26,769.829 1428.82,782.172 1429.38,793.198 1429.94,817.829 1430.5,761.845 1431.05,744.099 1431.61,787.532 1432.17,782.323 1432.73,759.817 1433.29,705.009 1433.85,733.29 1434.41,760.688 1434.97,772.415 1435.53,768.887 1436.09,745.465 1436.65,725.266 1437.21,721.556 1437.77,701.315 1438.33,714.05 1438.88,696.503 1439.44,725.746 1440,734.807 1440.56,698.768 1441.12,776.08 1441.68,785.942 1442.24,798.738 1442.8,789.449 1443.36,772.228 1443.92,766.531 1444.48,795.57 1445.04,691.22 1445.6,702.894 1446.15,702.618 1446.71,688.261 1447.27,691.177 1447.83,721.453 1448.39,735.85 1448.95,734.771 1449.51,732.741 1450.07,715.781 1450.63,711.54 1451.19,771.617 1451.75,828.559 1452.31,824.785 1452.87,834.033 1453.42,810.793 1453.98,803.31 1454.54,763.003 1455.1,761.967 1455.66,774.459 1456.22,771.709 1456.78,750.463 1457.34,733.832 1457.9,749.4 1458.46,744.601 1459.02,696.39 1459.58,665.771 1460.14,649.078 1460.7,650.289 1461.25,638.377 1461.81,656.476 1462.37,671.91 1462.93,657.003 1463.49,640.463 1464.05,611.936 1464.61,614.908 1465.17,620.323 1465.73,623.153 1466.29,642.065 1466.85,644.177 1467.41,662.876 1467.97,664.119 1468.52,666.236 1469.08,685.029 1469.64,688.011 1470.2,719.037 1470.76,751.638 1471.32,749.812 1471.88,767.302 1472.44,744.148 1473,735.714 1473.56,717.71 1474.12,699.172 1474.68,695.67 1475.24,647.33 1475.79,615.106 1476.35,585.023 1476.91,589.122 1477.47,608.05 1478.03,641.04 1478.59,558.603 1479.15,578.397 1479.71,585.261 1480.27,589.948 1480.83,594.008 1481.39,629.286 1481.95,616.704 1482.51,621.227 1483.07,642.52 1483.62,663.254 1484.18,665.599 1484.74,667.175 1485.3,650.733 1485.86,617.768 1486.42,603.911 1486.98,608.994 1487.54,611.47 1488.1,616.607 1488.66,605.573 1489.22,592.849 1489.78,598.192 1490.34,587.503 1490.89,610.218 1491.45,597.611 1492.01,604.188 1492.57,625.572 1493.13,645.993 1493.69,650.649 1494.25,651.155 1494.81,667.828 1495.37,700.478 1495.93,699.928 1496.49,699.464 1497.05,696.927 1497.61,684.945 1498.16,717.393 1498.72,730.743 1499.28,729.874 1499.84,709.235 1500.4,693.474 1500.96,695.407 1501.52,683.107 1502.08,668.642 1502.64,671.839 1503.2,674.537 1503.76,672.683 1504.32,657.511 1504.88,641.775 1505.44,608.632 1505.99,643.776 1506.55,662.158 1507.11,644.462 1507.67,634.889 1508.23,626.755 1508.79,611.854 1509.35,617.45 1509.91,637.635 1510.47,639.333 1511.03,577.012 1511.59,616.104 1512.15,634.703 1512.71,638.022 1513.26,640.843 1513.82,644.215 1514.38,663.057 1514.94,679.223 1515.5,677.993 1516.06,694.036 1516.62,677.68 1517.18,722.828 1517.74,705.161 1518.3,737.916 1518.86,748.577 1519.42,747.627 1519.98,743.777 1520.53,740.484 1521.09,705.233 1521.65,705.852 1522.21,719.181 1522.77,715.254 1523.33,730.843 1523.89,727.521 1524.45,705.099 1525.01,669.942 1525.57,654.215 1526.13,637.249 1526.69,637.1 1527.25,639.683 1527.81,625.238 1528.36,645.405 1528.92,629.808 1529.48,630.316 1530.04,651.222 1530.6,626.23 1531.16,663.588 1531.72,679.788 1532.28,696.62 1532.84,714.845 1533.4,701.11 1533.96,722.345 1534.52,722.84 1535.08,686.598 1535.63,685.526 1536.19,701.504 1536.75,747.324 1537.31,742.464 1537.87,707.315 1538.43,690.054 1538.99,706.995 1539.55,690.624 1540.11,674.671 1540.67,659.73 1541.23,662.759 1541.79,665.051 1542.35,650.187 1542.9,654.952 1543.46,656.846 1544.02,687.944 1544.58,735.898 1545.14,748.576 1545.7,794.019 1546.26,761.162 1546.82,790.523 1547.38,752.671 1547.94,729.584 1548.5,706.084 1549.06,693.391 1549.62,694.394 1550.18,675.48 1550.73,660.239 1551.29,692.044 1551.85,689.825 1552.41,705.747 1552.97,756.98 1553.53,738.152 1554.09,754.245 1554.65,752.827 1555.21,746.069 1555.77,724.834 1556.33,705.763 1556.89,688.415 1557.45,753.492 1558,780.471 1558.56,807.218 1559.12,766.134 1559.68,777.651 1560.24,772.692 1560.8,800.088 1561.36,809.869 1561.92,817.254 1562.48,805.501 1563.04,746.294 1563.6,741.152 1564.16,739.114 1564.72,706.288 1565.28,720.772 1565.83,699.935 1566.39,680.813 1566.95,648.383 1567.51,646.379 1568.07,630.218 1568.63,648.821 1569.19,683.653 1569.75,682.207 1570.31,682.064 1570.87,714.864 1571.43,712.374 1571.99,695.423 1572.55,710.446 1573.1,690.063 1573.66,691.731 1574.22,692.986 1574.78,693.545 1575.34,680.316 1575.9,664.324 1576.46,668.314 1577.02,671.147 1577.58,659.896 1578.14,662.794 1578.7,661.646 1579.26,665.082 1579.82,683.447 1580.37,686.408 1580.93,699.404 1581.49,712.375 1582.05,728.673 1582.61,740.497 1583.17,703.864 1583.73,687.805 1584.29,683.41 1584.85,682.312 1585.41,698.585 1585.97,677.961 1586.53,677.617 1587.09,660.792 1587.65,678.076 1588.2,660.597 1588.76,663.796 1589.32,695.325 1589.88,694.897 1590.44,679.061 1591,697.73 1591.56,696.916 1592.12,682.199 1592.68,668.896 1593.24,654.72 1593.8,641.603 1594.36,628.423 1594.92,633.223 1595.47,636.733 1596.03,590.294 1596.59,595.242 1597.15,633.034 1597.71,670.693 1598.27,704.683 1598.83,700.504 1599.39,702.103 1599.95,651.256 1600.51,655.122 1601.07,673.008 1601.63,672.097 1602.19,638.549 1602.74,624.428 1603.3,629.575 1603.86,616.745 1604.42,654.312 1604.98,670.17 1605.54,667.81 1606.1,669.403 1606.66,653.42 1607.22,653.951 1607.78,620.221 1608.34,669.412 1608.9,655.465 1609.46,657.745 1610.02,676.797 1610.57,677.733 1611.13,677.925 1611.69,661.406 1612.25,679.804 1612.81,645.339 1613.37,648.199 1613.93,651.458 1614.49,701.866 1615.05,766.077 1615.61,729.631 1616.17,706.5 1616.73,708.063 1617.29,706.134 1617.84,721.412 1618.4,737.147 1618.96,684.321 1619.52,668.698 1620.08,637.763 1620.64,659.448 1621.2,662.841 1621.76,602.089 1622.32,607.755 1622.88,631.21 1623.44,633.734 1624,604.166 1624.56,611.609 1625.11,605.475 1625.67,593.33 1626.23,612.37 1626.79,615.717 1627.35,602.685 1627.91,601.034 1628.47,603.001 1629.03,622.778 1629.59,609.309 1630.15,630.415 1630.71,630.816 1631.27,644.701 1631.83,614.897 1632.39,631.146 1632.94,651.038 1633.5,654.736 1634.06,622.669 1634.62,644.218 1635.18,645.426 1635.74,631.62 1636.3,666.663 1636.86,668.547 1637.42,670.823 1637.98,652.867 1638.54,669.189 1639.1,670.977 1639.66,688.649 1640.21,623.751 1640.77,658.96 1641.33,641.373 1641.89,626.052 1642.45,614.988 1643.01,618.37 1643.57,608.481 1644.13,632.266 1644.69,635.282 1645.25,636.766 1645.81,687.637 1646.37,704.63 1646.93,718.78 1647.48,684.097 1648.04,668.741 1648.6,655.312 1649.16,653.695 1649.72,635.166 1650.28,653.693 1650.84,670.952 1651.4,705.754 1651.96,705.441 1652.52,670.895 1653.08,702.62 1653.64,734.825 1654.2,733.712 1654.76,679.29 1655.31,695.579 1655.87,695.521 1656.43,707.594 1656.99,705.84 1657.55,702.908 1658.11,713.998 1658.67,679.244 1659.23,698.185 1659.79,699.225 1660.35,681.977 1660.91,632.209 1661.47,635.125 1662.03,653.201 1662.58,623.265 1663.14,684.245 1663.7,663.303 1664.26,631.914 1664.82,634.976 1665.38,638.144 1665.94,672.991 1666.5,703.241 1667.06,737.298 1667.62,701.381 1668.18,731.76 1668.74,743.71 1669.3,740.776 1669.85,721.192 1670.41,701.778 1670.97,687.594 1671.53,653.722 1672.09,655.928 1672.65,676.106 1673.21,679.104 1673.77,646.657 1674.33,646.115 1674.89,683.166 1675.45,688.977 1676.01,639.106 1676.57,626.183 1677.13,650.261 1677.68,679.937 1678.24,665.216 1678.8,674.91 1679.36,662.454 1679.92,679.309 1680.48,675.954 1681.04,695.847 1681.6,696.629 1682.16,712.98 1682.72,729.091 1683.28,759.247 1683.84,738.747 1684.4,751.98 1684.95,734.446 1685.51,761.319 1686.07,740.802 1686.63,738.705 1687.19,766.366 1687.75,745.994 1688.31,759.982 1688.87,769.748 1689.43,764.725 1689.99,741.617 1690.55,769.6 1691.11,781.055 1691.67,806.19 1692.23,805.186 1692.78,744.852 1693.34,711.462 1693.9,693.059 1694.46,693.751 1695.02,678.131 1695.58,678.975 1696.14,679.444 1696.7,680.872 1697.26,677.664 1697.82,696.703 1698.38,682.839 1698.94,668.328 1699.5,719.624 1700.05,718.647 1700.61,673.783 1701.17,673.323 1701.73,689.525 1702.29,656.281 1702.85,687.353 1703.41,688.692 1703.97,671.546 1704.53,688.466 1705.09,683.986 1705.65,698.022 1706.21,695.404 1706.77,691.344 1707.32,693.281 1707.88,723.882 1708.44,721.488 1709,749.006 1709.56,744.835 1710.12,788.06 1710.68,797.087 1711.24,791.889 1711.8,735.502 1712.36,734.569 1712.92,730.349 1713.48,740.623 1714.04,751.845 1714.6,747.938 1715.15,728.903 1715.71,707.455 1716.27,705.276 1716.83,685.6 1717.39,653.995 1717.95,655.916 1718.51,657.996 1719.07,691.369 1719.63,726.162 1720.19,692.061 1720.75,692.833 1721.31,671.704 1721.87,673.664 1722.42,639.877 1722.98,622.783 1723.54,624.825 1724.1,595.786 1724.66,583.092 1725.22,572.219 1725.78,591.188 1726.34,595.492 1726.9,615.383 1727.46,618.347 1728.02,636.643 1728.58,654.273 1729.14,702.85 1729.69,700.488 1730.25,680.874 1730.81,668.009 1731.37,635.957 1731.93,625.58 1732.49,625.804 1733.05,628.135 1733.61,662.784 1734.17,714.974 1734.73,695.346 1735.29,694.83 1735.85,678.343 1736.41,677.135 1736.97,661.755 1737.52,661.206 1738.08,708.95 1738.64,660.09 1739.2,630.692 1739.76,681.021 1740.32,681.842 1740.88,667.315 1741.44,687.377 1742,673.772 1742.56,691.422 1743.12,723.211 1743.68,668.596 1744.24,653.947 1744.79,640.907 1745.35,644.274 1745.91,633.179 1746.47,633.658 1747.03,653.905 1747.59,656.04 1748.15,655.38 1748.71,657.089 1749.27,659.237 1749.83,662.204 1750.39,645.273 1750.95,665.368 1751.51,666.759 1752.06,670.919 1752.62,689.629 1753.18,672.929 1753.74,644.618 1754.3,645.317 1754.86,646.801 1755.42,665.502 1755.98,665.538 1756.54,680.621 1757.1,665.359 1757.66,666.511 1758.22,666.76 1758.78,634.552 1759.34,669.904 1759.89,704.728 1760.45,705.635 1761.01,671.206 1761.57,674.324 1762.13,673.403 1762.69,690.103 1763.25,675.53 1763.81,677.046 1764.37,678.192 1764.93,714.034 1765.49,664.759 1766.05,685.455 1766.61,701.104 1767.16,665.716 1767.72,695.52 1768.28,715.001 1768.84,729.875 1769.4,726.082 1769.96,757.209 1770.52,733.728 1771.08,759.398 1771.64,772.404 1772.2,752.356 1772.76,734.582 1773.32,734.341 1773.88,746.972 1774.43,744.263 1774.99,757.749 1775.55,723.399 1776.11,756.543 1776.67,733.662 1777.23,742.634 1777.79,707.029 1778.35,685.346 1778.91,702.997 1779.47,671.234 1780.03,689.517 1780.59,691.574 1781.15,672.956 1781.71,656.495 1782.26,674.737 1782.82,655.719 1783.38,655.107 1783.94,655.482 1784.5,654.532 1785.06,656.711 1785.62,643.246 1786.18,644.583 1786.74,629.155 1787.3,615.157 1787.86,604.573 1788.42,607.721 1788.98,628.098 1789.53,648.888 1790.09,665.649 1790.65,649.897 1791.21,637.058 1791.77,659.459 1792.33,709.414 1792.89,740.405 1793.45,736.378 1794.01,768.89 1794.57,780.283 1795.13,821.11 1795.69,799.786 1796.25,775.414 1796.8,768.285 1797.36,749.562 1797.92,745.54 1798.48,742.071 1799.04,708.555 1799.6,709.061 1800.16,722.492 1800.72,724.135 1801.28,722.542 1801.84,721.404 1802.4,737.85 1802.96,751.565 1803.52,731.878 1804.08,711.845 1804.63,774.255 1805.19,786.165 1805.75,780.116 1806.31,824.59 1806.87,815.664 1807.43,809.197 1807.99,785.72 1808.55,779.572 1809.11,787.394 1809.67,794.584 1810.23,814.216 1810.79,786.253 1811.35,792.934 1811.9,773.323 1812.46,750.532 1813.02,745.592 1813.58,773.722 1814.14,750.193 1814.7,761.741 1815.26,727.362 1815.82,738.212 1816.38,686.276 1816.94,684.878 1817.5,682.708 1818.06,665.407 1818.62,632.519 1819.18,617.698 1819.73,653.344 1820.29,654.316 1820.85,637.231 1821.41,636.038 1821.97,635.357 1822.53,669.893 1823.09,655.687 1823.65,655.154 1824.21,704.391 1824.77,670.539 1825.33,655.444 1825.89,655.49 1826.45,637.577 1827,619.515 1827.56,592.25 1828.12,644.416 1828.68,644.821 1829.24,641.498 1829.8,613.81 1830.36,584.094 1830.92,558.344 1831.48,550.373 1832.04,554.916 1832.6,560.097 1833.16,581.636 1833.72,587.767 1834.27,609.723 1834.83,632.277 1835.39,619.488 1835.95,623.406 1836.51,575.881 1837.07,581.806 1837.63,584.885 1838.19,607.075 \"/>\n<path clip-path=\"url(#clip483)\" d=\"M720.247 691.201 L720.806 691.201 L721.365 691.201 L721.924 691.201 L722.484 691.201 L723.043 691.201 L723.602 691.201 L724.161 691.201 L724.721 691.201 L725.28 691.201 L725.839 691.201 L726.398 691.201 L726.958 691.201 L727.517 691.201 L728.076 691.201 L728.635 691.201 L729.195 691.201 L729.754 691.201 L730.313 691.201 L730.872 691.201 L731.432 691.201 L731.991 691.201 L732.55 691.201 L733.109 691.201 L733.669 691.201 L734.228 691.201 L734.787 691.201 L735.346 691.201 L735.906 691.201 L736.465 691.201 L737.024 691.201 L737.583 691.201 L738.143 691.201 L738.702 691.201 L739.261 691.201 L739.82 691.201 L740.38 691.201 L740.939 691.201 L741.498 691.201 L742.057 691.201 L742.617 691.201 L743.176 691.201 L743.735 691.201 L744.294 691.201 L744.854 691.201 L745.413 691.201 L745.972 691.201 L746.531 691.201 L747.091 691.201 L747.65 691.201 L748.209 691.201 L748.768 691.201 L749.328 691.201 L749.887 691.201 L750.446 691.201 L751.005 691.201 L751.565 691.201 L752.124 691.201 L752.683 691.201 L753.242 691.201 L753.802 691.201 L754.361 691.201 L754.92 691.201 L755.479 691.201 L756.039 691.201 L756.598 691.201 L757.157 691.201 L757.716 691.201 L758.276 691.201 L758.835 691.201 L759.394 691.201 L759.953 691.201 L760.513 691.201 L761.072 691.201 L761.631 691.201 L762.19 691.201 L762.75 691.201 L763.309 691.201 L763.868 691.201 L764.427 691.201 L764.987 691.201 L765.546 691.201 L766.105 691.201 L766.664 691.201 L767.224 691.201 L767.783 691.201 L768.342 691.201 L768.901 691.201 L769.461 691.201 L770.02 691.201 L770.579 691.201 L771.138 691.201 L771.698 691.201 L772.257 691.201 L772.816 691.201 L773.375 691.201 L773.935 691.201 L774.494 691.201 L775.053 691.201 L775.612 691.201 L776.172 691.201 L776.731 691.201 L777.29 691.201 L777.849 691.201 L778.409 691.201 L778.968 691.201 L779.527 691.201 L780.086 691.201 L780.646 691.201 L781.205 691.201 L781.764 691.201 L782.323 691.201 L782.883 691.201 L783.442 691.201 L784.001 691.201 L784.56 691.201 L785.12 691.201 L785.679 691.201 L786.238 691.201 L786.797 691.201 L787.357 691.201 L787.916 691.201 L788.475 691.201 L789.034 691.201 L789.594 691.201 L790.153 691.201 L790.712 691.201 L791.271 691.201 L791.831 691.201 L792.39 691.201 L792.949 691.201 L793.508 691.201 L794.068 691.201 L794.627 691.201 L795.186 691.201 L795.745 691.201 L796.305 691.201 L796.864 691.201 L797.423 691.201 L797.982 691.201 L798.542 691.201 L799.101 691.201 L799.66 691.201 L800.219 691.201 L800.779 691.201 L801.338 691.201 L801.897 691.201 L802.456 691.201 L803.016 691.201 L803.575 691.201 L804.134 691.201 L804.693 691.201 L805.253 691.201 L805.812 691.201 L806.371 691.201 L806.931 691.201 L807.49 691.201 L808.049 691.201 L808.608 691.201 L809.168 691.201 L809.727 691.201 L810.286 691.201 L810.845 691.201 L811.405 691.201 L811.964 691.201 L812.523 691.201 L813.082 691.201 L813.642 691.201 L814.201 691.201 L814.76 691.201 L815.319 691.201 L815.879 691.201 L816.438 691.201 L816.997 691.201 L817.556 691.201 L818.116 691.201 L818.675 691.201 L819.234 691.201 L819.793 691.201 L820.353 691.201 L820.912 691.201 L821.471 691.201 L822.03 691.201 L822.59 691.201 L823.149 691.201 L823.708 691.201 L824.267 691.201 L824.827 691.201 L825.386 691.201 L825.945 691.201 L826.504 691.201 L827.064 691.201 L827.623 691.201 L828.182 691.201 L828.741 691.201 L829.301 691.201 L829.86 691.201 L830.419 691.201 L830.978 691.201 L831.538 691.201 L832.097 691.201 L832.656 691.201 L833.215 691.201 L833.775 691.201 L834.334 691.201 L834.893 691.201 L835.452 691.201 L836.012 691.201 L836.571 691.201 L837.13 691.201 L837.689 691.201 L838.249 691.201 L838.808 691.201 L839.367 691.201 L839.926 691.201 L840.486 691.201 L841.045 691.201 L841.604 691.201 L842.163 691.201 L842.723 691.201 L843.282 691.201 L843.841 691.201 L844.4 691.201 L844.96 691.201 L845.519 691.201 L846.078 691.201 L846.637 691.201 L847.197 691.201 L847.756 691.201 L848.315 691.201 L848.874 691.201 L849.434 691.201 L849.993 691.201 L850.552 691.201 L851.111 691.201 L851.671 691.201 L852.23 691.201 L852.789 691.201 L853.348 691.201 L853.908 691.201 L854.467 691.201 L855.026 691.201 L855.585 691.201 L856.145 691.201 L856.704 691.201 L857.263 691.201 L857.822 691.201 L858.382 691.201 L858.941 691.201 L859.5 691.201 L860.059 691.201 L860.619 691.201 L861.178 691.201 L861.737 691.201 L862.296 691.201 L862.856 691.201 L863.415 691.201 L863.974 691.201 L864.533 691.201 L865.093 691.201 L865.652 691.201 L866.211 691.201 L866.77 691.201 L867.33 691.201 L867.889 691.201 L868.448 691.201 L869.007 691.201 L869.567 691.201 L870.126 691.201 L870.685 691.201 L871.244 691.201 L871.804 691.201 L872.363 691.201 L872.922 691.201 L873.481 691.201 L874.041 691.201 L874.6 691.201 L875.159 691.201 L875.718 691.201 L876.278 691.201 L876.837 691.201 L877.396 691.201 L877.955 691.201 L878.515 691.201 L879.074 691.201 L879.633 691.201 L880.192 691.201 L880.752 691.201 L881.311 691.201 L881.87 691.201 L882.429 691.201 L882.989 691.201 L883.548 691.201 L884.107 691.201 L884.666 691.201 L885.226 691.201 L885.785 691.201 L886.344 691.201 L886.903 691.201 L887.463 691.201 L888.022 691.201 L888.581 691.201 L889.14 691.201 L889.7 691.201 L890.259 691.201 L890.818 691.201 L891.377 691.201 L891.937 691.201 L892.496 691.201 L893.055 691.201 L893.614 691.201 L894.174 691.201 L894.733 691.201 L895.292 691.201 L895.851 691.201 L896.411 691.201 L896.97 691.201 L897.529 691.201 L898.088 691.201 L898.648 691.201 L899.207 691.201 L899.766 691.201 L900.325 691.201 L900.885 691.201 L901.444 691.201 L902.003 691.201 L902.562 691.201 L903.122 691.201 L903.681 691.201 L904.24 691.201 L904.799 691.201 L905.359 691.201 L905.918 691.201 L906.477 691.201 L907.036 691.201 L907.596 691.201 L908.155 691.201 L908.714 691.201 L909.273 691.201 L909.833 691.201 L910.392 691.201 L910.951 691.201 L911.51 691.201 L912.07 691.201 L912.629 691.201 L913.188 691.201 L913.747 691.201 L914.307 691.201 L914.866 691.201 L915.425 691.201 L915.984 691.201 L916.544 691.201 L917.103 691.201 L917.662 691.201 L918.221 691.201 L918.781 691.201 L919.34 691.201 L919.899 691.201 L920.458 691.201 L921.018 691.201 L921.577 691.201 L922.136 691.201 L922.695 691.201 L923.255 691.201 L923.814 691.201 L924.373 691.201 L924.932 691.201 L925.492 691.201 L926.051 691.201 L926.61 691.201 L927.169 691.201 L927.729 691.201 L928.288 691.201 L928.847 691.201 L929.406 691.201 L929.966 691.201 L930.525 691.201 L931.084 691.201 L931.644 691.201 L932.203 691.201 L932.762 691.201 L933.321 691.201 L933.881 691.201 L934.44 691.201 L934.999 691.201 L935.558 691.201 L936.118 691.201 L936.677 691.201 L937.236 691.201 L937.795 691.201 L938.355 691.201 L938.914 691.201 L939.473 691.201 L940.032 691.201 L940.592 691.201 L941.151 691.201 L941.71 691.201 L942.269 691.201 L942.829 691.201 L943.388 691.201 L943.947 691.201 L944.506 691.201 L945.066 691.201 L945.625 691.201 L946.184 691.201 L946.743 691.201 L947.303 691.201 L947.862 691.201 L948.421 691.201 L948.98 691.201 L949.54 691.201 L950.099 691.201 L950.658 691.201 L951.217 691.201 L951.777 691.201 L952.336 691.201 L952.895 691.201 L953.454 691.201 L954.014 691.201 L954.573 691.201 L955.132 691.201 L955.691 691.201 L956.251 691.201 L956.81 691.201 L957.369 691.201 L957.928 691.201 L958.488 691.201 L959.047 691.201 L959.606 691.201 L960.165 691.201 L960.725 691.201 L961.284 691.201 L961.843 691.201 L962.402 691.201 L962.962 691.201 L963.521 691.201 L964.08 691.201 L964.639 691.201 L965.199 691.201 L965.758 691.201 L966.317 691.201 L966.876 691.201 L967.436 691.201 L967.995 691.201 L968.554 691.201 L969.113 691.201 L969.673 691.201 L970.232 691.201 L970.791 691.201 L971.35 691.201 L971.91 691.201 L972.469 691.201 L973.028 691.201 L973.587 691.201 L974.147 691.201 L974.706 691.201 L975.265 691.201 L975.824 691.201 L976.384 691.201 L976.943 691.201 L977.502 691.201 L978.061 691.201 L978.621 691.201 L979.18 691.201 L979.739 691.201 L980.298 691.201 L980.858 691.201 L981.417 691.201 L981.976 691.201 L982.535 691.201 L983.095 691.201 L983.654 691.201 L984.213 691.201 L984.772 691.201 L985.332 691.201 L985.891 691.201 L986.45 691.201 L987.009 691.201 L987.569 691.201 L988.128 691.201 L988.687 691.201 L989.246 691.201 L989.806 691.201 L990.365 691.201 L990.924 691.201 L991.483 691.201 L992.043 691.201 L992.602 691.201 L993.161 691.201 L993.72 691.201 L994.28 691.201 L994.839 691.201 L995.398 691.201 L995.957 691.201 L996.517 691.201 L997.076 691.201 L997.635 691.201 L998.194 691.201 L998.754 691.201 L999.313 691.201 L999.872 691.201 L1000.43 691.201 L1000.99 691.201 L1001.55 691.201 L1002.11 691.201 L1002.67 691.201 L1003.23 691.201 L1003.79 691.201 L1004.35 691.201 L1004.91 691.201 L1005.46 691.201 L1006.02 691.201 L1006.58 691.201 L1007.14 691.201 L1007.7 691.201 L1008.26 691.201 L1008.82 691.201 L1009.38 691.201 L1009.94 691.201 L1010.5 691.201 L1011.06 691.201 L1011.62 691.201 L1012.18 691.201 L1012.73 691.201 L1013.29 691.201 L1013.85 691.201 L1014.41 691.201 L1014.97 691.201 L1015.53 691.201 L1016.09 691.201 L1016.65 691.201 L1017.21 691.201 L1017.77 691.201 L1018.33 691.201 L1018.89 691.201 L1019.45 691.201 L1020.01 691.201 L1020.56 691.201 L1021.12 691.201 L1021.68 691.201 L1022.24 691.201 L1022.8 691.201 L1023.36 691.201 L1023.92 691.201 L1024.48 691.201 L1025.04 691.201 L1025.6 691.201 L1026.16 691.201 L1026.72 691.201 L1027.28 691.201 L1027.83 691.201 L1028.39 691.201 L1028.95 691.201 L1029.51 691.201 L1030.07 691.201 L1030.63 691.201 L1031.19 691.201 L1031.75 691.201 L1032.31 691.201 L1032.87 691.201 L1033.43 691.201 L1033.99 691.201 L1034.55 691.201 L1035.1 691.201 L1035.66 691.201 L1036.22 691.201 L1036.78 691.201 L1037.34 691.201 L1037.9 691.201 L1038.46 691.201 L1039.02 691.201 L1039.58 691.201 L1040.14 691.201 L1040.7 691.201 L1041.26 691.201 L1041.82 691.201 L1042.38 691.201 L1042.93 691.201 L1043.49 691.201 L1044.05 691.201 L1044.61 691.201 L1045.17 691.201 L1045.73 691.201 L1046.29 691.201 L1046.85 691.201 L1047.41 691.201 L1047.97 691.201 L1048.53 691.201 L1049.09 691.201 L1049.65 691.201 L1050.2 691.201 L1050.76 691.201 L1051.32 691.201 L1051.88 691.201 L1052.44 691.201 L1053 691.201 L1053.56 691.201 L1054.12 691.201 L1054.68 691.201 L1055.24 691.201 L1055.8 691.201 L1056.36 691.201 L1056.92 691.201 L1057.48 691.201 L1058.03 691.201 L1058.59 691.201 L1059.15 691.201 L1059.71 691.201 L1060.27 691.201 L1060.83 691.201 L1061.39 691.201 L1061.95 691.201 L1062.51 691.201 L1063.07 691.201 L1063.63 691.201 L1064.19 691.201 L1064.75 691.201 L1065.3 691.201 L1065.86 691.201 L1066.42 691.201 L1066.98 691.201 L1067.54 691.201 L1068.1 691.201 L1068.66 691.201 L1069.22 691.201 L1069.78 691.201 L1070.34 691.201 L1070.9 691.201 L1071.46 691.201 L1072.02 691.201 L1072.57 691.201 L1073.13 691.201 L1073.69 691.201 L1074.25 691.201 L1074.81 691.201 L1075.37 691.201 L1075.93 691.201 L1076.49 691.201 L1077.05 691.201 L1077.61 691.201 L1078.17 691.201 L1078.73 691.201 L1079.29 691.201 L1079.85 691.201 L1080.4 691.201 L1080.96 691.201 L1081.52 691.201 L1082.08 691.201 L1082.64 691.201 L1083.2 691.201 L1083.76 691.201 L1084.32 691.201 L1084.88 691.201 L1085.44 691.201 L1086 691.201 L1086.56 691.201 L1087.12 691.201 L1087.67 691.201 L1088.23 691.201 L1088.79 691.201 L1089.35 691.201 L1089.91 691.201 L1090.47 691.201 L1091.03 691.201 L1091.59 691.201 L1092.15 691.201 L1092.71 691.201 L1093.27 691.201 L1093.83 691.201 L1094.39 691.201 L1094.94 691.201 L1095.5 691.201 L1096.06 691.201 L1096.62 691.201 L1097.18 691.201 L1097.74 691.201 L1098.3 691.201 L1098.86 691.201 L1099.42 691.201 L1099.98 691.201 L1100.54 691.201 L1101.1 691.201 L1101.66 691.201 L1102.22 691.201 L1102.77 691.201 L1103.33 691.201 L1103.89 691.201 L1104.45 691.201 L1105.01 691.201 L1105.57 691.201 L1106.13 691.201 L1106.69 691.201 L1107.25 691.201 L1107.81 691.201 L1108.37 691.201 L1108.93 691.201 L1109.49 691.201 L1110.04 691.201 L1110.6 691.201 L1111.16 691.201 L1111.72 691.201 L1112.28 691.201 L1112.84 691.201 L1113.4 691.201 L1113.96 691.201 L1114.52 691.201 L1115.08 691.201 L1115.64 691.201 L1116.2 691.201 L1116.76 691.201 L1117.31 691.201 L1117.87 691.201 L1118.43 691.201 L1118.99 691.201 L1119.55 691.201 L1120.11 691.201 L1120.67 691.201 L1121.23 691.201 L1121.79 691.201 L1122.35 691.201 L1122.91 691.201 L1123.47 691.201 L1124.03 691.201 L1124.59 691.201 L1125.14 691.201 L1125.7 691.201 L1126.26 691.201 L1126.82 691.201 L1127.38 691.201 L1127.94 691.201 L1128.5 691.201 L1129.06 691.201 L1129.62 691.201 L1130.18 691.201 L1130.74 691.201 L1131.3 691.201 L1131.86 691.201 L1132.41 691.201 L1132.97 691.201 L1133.53 691.201 L1134.09 691.201 L1134.65 691.201 L1135.21 691.201 L1135.77 691.201 L1136.33 691.201 L1136.89 691.201 L1137.45 691.201 L1138.01 691.201 L1138.57 691.201 L1139.13 691.201 L1139.68 691.201 L1140.24 691.201 L1140.8 691.201 L1141.36 691.201 L1141.92 691.201 L1142.48 691.201 L1143.04 691.201 L1143.6 691.201 L1144.16 691.201 L1144.72 691.201 L1145.28 691.201 L1145.84 691.201 L1146.4 691.201 L1146.96 691.201 L1147.51 691.201 L1148.07 691.201 L1148.63 691.201 L1149.19 691.201 L1149.75 691.201 L1150.31 691.201 L1150.87 691.201 L1151.43 691.201 L1151.99 691.201 L1152.55 691.201 L1153.11 691.201 L1153.67 691.201 L1154.23 691.201 L1154.78 691.201 L1155.34 691.201 L1155.9 691.201 L1156.46 691.201 L1157.02 691.201 L1157.58 691.201 L1158.14 691.201 L1158.7 691.201 L1159.26 691.201 L1159.82 691.201 L1160.38 691.201 L1160.94 691.201 L1161.5 691.201 L1162.05 691.201 L1162.61 691.201 L1163.17 691.201 L1163.73 691.201 L1164.29 691.201 L1164.85 691.201 L1165.41 691.201 L1165.97 691.201 L1166.53 691.201 L1167.09 691.201 L1167.65 691.201 L1168.21 691.201 L1168.77 691.201 L1169.33 691.201 L1169.88 691.201 L1170.44 691.201 L1171 691.201 L1171.56 691.201 L1172.12 691.201 L1172.68 691.201 L1173.24 691.201 L1173.8 691.201 L1174.36 691.201 L1174.92 691.201 L1175.48 691.201 L1176.04 691.201 L1176.6 691.201 L1177.15 691.201 L1177.71 691.201 L1178.27 691.201 L1178.83 691.201 L1179.39 691.201 L1179.95 691.201 L1180.51 691.201 L1181.07 691.201 L1181.63 691.201 L1182.19 691.201 L1182.75 691.201 L1183.31 691.201 L1183.87 691.201 L1184.43 691.201 L1184.98 691.201 L1185.54 691.201 L1186.1 691.201 L1186.66 691.201 L1187.22 691.201 L1187.78 691.201 L1188.34 691.201 L1188.9 691.201 L1189.46 691.201 L1190.02 691.201 L1190.58 691.201 L1191.14 691.201 L1191.7 691.201 L1192.25 691.201 L1192.81 691.201 L1193.37 691.201 L1193.93 691.201 L1194.49 691.201 L1195.05 691.201 L1195.61 691.201 L1196.17 691.201 L1196.73 691.201 L1197.29 691.201 L1197.85 691.201 L1198.41 691.201 L1198.97 691.201 L1199.52 691.201 L1200.08 691.201 L1200.64 691.201 L1201.2 691.201 L1201.76 691.201 L1202.32 691.201 L1202.88 691.201 L1203.44 691.201 L1204 691.201 L1204.56 691.201 L1205.12 691.201 L1205.68 691.201 L1206.24 691.201 L1206.8 691.201 L1207.35 691.201 L1207.91 691.201 L1208.47 691.201 L1209.03 691.201 L1209.59 691.201 L1210.15 691.201 L1210.71 691.201 L1211.27 691.201 L1211.83 691.201 L1212.39 691.201 L1212.95 691.201 L1213.51 691.201 L1214.07 691.201 L1214.62 691.201 L1215.18 691.201 L1215.74 691.201 L1216.3 691.201 L1216.86 691.201 L1217.42 691.201 L1217.98 691.201 L1218.54 691.201 L1219.1 691.201 L1219.66 691.201 L1220.22 691.201 L1220.78 691.201 L1221.34 691.201 L1221.89 691.201 L1222.45 691.201 L1223.01 691.201 L1223.57 691.201 L1224.13 691.201 L1224.69 691.201 L1225.25 691.201 L1225.81 691.201 L1226.37 691.201 L1226.93 691.201 L1227.49 691.201 L1228.05 691.201 L1228.61 691.201 L1229.17 691.201 L1229.72 691.201 L1230.28 691.201 L1230.84 691.201 L1231.4 691.201 L1231.96 691.201 L1232.52 691.201 L1233.08 691.201 L1233.64 691.201 L1234.2 691.201 L1234.76 691.201 L1235.32 691.201 L1235.88 691.201 L1236.44 691.201 L1236.99 691.201 L1237.55 691.201 L1238.11 691.201 L1238.67 691.201 L1239.23 691.201 L1239.79 691.201 L1240.35 691.201 L1240.91 691.201 L1241.47 691.201 L1242.03 691.201 L1242.59 691.201 L1243.15 691.201 L1243.71 691.201 L1244.26 691.201 L1244.82 691.201 L1245.38 691.201 L1245.94 691.201 L1246.5 691.201 L1247.06 691.201 L1247.62 691.201 L1248.18 691.201 L1248.74 691.201 L1249.3 691.201 L1249.86 691.201 L1250.42 691.201 L1250.98 691.201 L1251.54 691.201 L1252.09 691.201 L1252.65 691.201 L1253.21 691.201 L1253.77 691.201 L1254.33 691.201 L1254.89 691.201 L1255.45 691.201 L1256.01 691.201 L1256.57 691.201 L1257.13 691.201 L1257.69 691.201 L1258.25 691.201 L1258.81 691.201 L1259.36 691.201 L1259.92 691.201 L1260.48 691.201 L1261.04 691.201 L1261.6 691.201 L1262.16 691.201 L1262.72 691.201 L1263.28 691.201 L1263.84 691.201 L1264.4 691.201 L1264.96 691.201 L1265.52 691.201 L1266.08 691.201 L1266.63 691.201 L1267.19 691.201 L1267.75 691.201 L1268.31 691.201 L1268.87 691.201 L1269.43 691.201 L1269.99 691.201 L1270.55 691.201 L1271.11 691.201 L1271.67 691.201 L1272.23 691.201 L1272.79 691.201 L1273.35 691.201 L1273.91 691.201 L1274.46 691.201 L1275.02 691.201 L1275.58 691.201 L1276.14 691.201 L1276.7 691.201 L1277.26 691.201 L1277.82 691.201 L1278.38 691.201 L1278.94 691.201 L1279.5 691.201 L1280.06 691.201 L1280.62 691.201 L1281.18 691.201 L1281.73 691.201 L1282.29 691.201 L1282.85 691.201 L1283.41 691.201 L1283.97 691.201 L1284.53 691.201 L1285.09 691.201 L1285.65 691.201 L1286.21 691.201 L1286.77 691.201 L1287.33 691.201 L1287.89 691.201 L1288.45 691.201 L1289 691.201 L1289.56 691.201 L1290.12 691.201 L1290.68 691.201 L1291.24 691.201 L1291.8 691.201 L1292.36 691.201 L1292.92 691.201 L1293.48 691.201 L1294.04 691.201 L1294.6 691.201 L1295.16 691.201 L1295.72 691.201 L1296.28 691.201 L1296.83 691.201 L1297.39 691.201 L1297.95 691.201 L1298.51 691.201 L1299.07 691.201 L1299.63 691.201 L1300.19 691.201 L1300.75 691.201 L1301.31 691.201 L1301.87 691.201 L1302.43 691.201 L1302.99 691.201 L1303.55 691.201 L1304.1 691.201 L1304.66 691.201 L1305.22 691.201 L1305.78 691.201 L1306.34 691.201 L1306.9 691.201 L1307.46 691.201 L1308.02 691.201 L1308.58 691.201 L1309.14 691.201 L1309.7 691.201 L1310.26 691.201 L1310.82 691.201 L1311.38 691.201 L1311.93 691.201 L1312.49 691.201 L1313.05 691.201 L1313.61 691.201 L1314.17 691.201 L1314.73 691.201 L1315.29 691.201 L1315.85 691.201 L1316.41 691.201 L1316.97 691.201 L1317.53 691.201 L1318.09 691.201 L1318.65 691.201 L1319.2 691.201 L1319.76 691.201 L1320.32 691.201 L1320.88 691.201 L1321.44 691.201 L1322 691.201 L1322.56 691.201 L1323.12 691.201 L1323.68 691.201 L1324.24 691.201 L1324.8 691.201 L1325.36 691.201 L1325.92 691.201 L1326.47 691.201 L1327.03 691.201 L1327.59 691.201 L1328.15 691.201 L1328.71 691.201 L1329.27 691.201 L1329.83 691.201 L1330.39 691.201 L1330.95 691.201 L1331.51 691.201 L1332.07 691.201 L1332.63 691.201 L1333.19 691.201 L1333.75 691.201 L1334.3 691.201 L1334.86 691.201 L1335.42 691.201 L1335.98 691.201 L1336.54 691.201 L1337.1 691.201 L1337.66 691.201 L1338.22 691.201 L1338.78 691.201 L1339.34 691.201 L1339.9 691.201 L1340.46 691.201 L1341.02 691.201 L1341.57 691.201 L1342.13 691.201 L1342.69 691.201 L1343.25 691.201 L1343.81 691.201 L1344.37 691.201 L1344.93 691.201 L1345.49 691.201 L1346.05 691.201 L1346.61 691.201 L1347.17 691.201 L1347.73 691.201 L1348.29 691.201 L1348.84 691.201 L1349.4 691.201 L1349.96 691.201 L1350.52 691.201 L1351.08 691.201 L1351.64 691.201 L1352.2 691.201 L1352.76 691.201 L1353.32 691.201 L1353.88 691.201 L1354.44 691.201 L1355 691.201 L1355.56 691.201 L1356.12 691.201 L1356.67 691.201 L1357.23 691.201 L1357.79 691.201 L1358.35 691.201 L1358.91 691.201 L1359.47 691.201 L1360.03 691.201 L1360.59 691.201 L1361.15 691.201 L1361.71 691.201 L1362.27 691.201 L1362.83 691.201 L1363.39 691.201 L1363.94 691.201 L1364.5 691.201 L1365.06 691.201 L1365.62 691.201 L1366.18 691.201 L1366.74 691.201 L1367.3 691.201 L1367.86 691.201 L1368.42 691.201 L1368.98 691.201 L1369.54 691.201 L1370.1 691.201 L1370.66 691.201 L1371.21 691.201 L1371.77 691.201 L1372.33 691.201 L1372.89 691.201 L1373.45 691.201 L1374.01 691.201 L1374.57 691.201 L1375.13 691.201 L1375.69 691.201 L1376.25 691.201 L1376.81 691.201 L1377.37 691.201 L1377.93 691.201 L1378.49 691.201 L1379.04 691.201 L1379.6 691.201 L1380.16 691.201 L1380.72 691.201 L1381.28 691.201 L1381.84 691.201 L1382.4 691.201 L1382.96 691.201 L1383.52 691.201 L1384.08 691.201 L1384.64 691.201 L1385.2 691.201 L1385.76 691.201 L1386.31 691.201 L1386.87 691.201 L1387.43 691.201 L1387.99 691.201 L1388.55 691.201 L1389.11 691.201 L1389.67 691.201 L1390.23 691.201 L1390.79 691.201 L1391.35 691.201 L1391.91 691.201 L1392.47 691.201 L1393.03 691.201 L1393.58 691.201 L1394.14 691.201 L1394.7 691.201 L1395.26 691.201 L1395.82 691.201 L1396.38 691.201 L1396.94 691.201 L1397.5 691.201 L1398.06 691.201 L1398.62 691.201 L1399.18 691.201 L1399.74 691.201 L1400.3 691.201 L1400.86 691.201 L1401.41 691.201 L1401.97 691.201 L1402.53 691.201 L1403.09 691.201 L1403.65 691.201 L1404.21 691.201 L1404.77 691.201 L1405.33 691.201 L1405.89 691.201 L1406.45 691.201 L1407.01 691.201 L1407.57 691.201 L1408.13 691.201 L1408.68 691.201 L1409.24 691.201 L1409.8 691.201 L1410.36 691.201 L1410.92 691.201 L1411.48 691.201 L1412.04 691.201 L1412.6 691.201 L1413.16 691.201 L1413.72 691.201 L1414.28 691.201 L1414.84 691.201 L1415.4 691.201 L1415.95 691.201 L1416.51 691.201 L1417.07 691.201 L1417.63 691.201 L1418.19 691.201 L1418.75 691.201 L1419.31 691.201 L1419.87 691.201 L1420.43 691.201 L1420.99 691.201 L1421.55 691.201 L1422.11 691.201 L1422.67 691.201 L1423.23 691.201 L1423.78 691.201 L1424.34 691.201 L1424.9 691.201 L1425.46 691.201 L1426.02 691.201 L1426.58 691.201 L1427.14 691.201 L1427.7 691.201 L1428.26 691.201 L1428.82 691.201 L1429.38 691.201 L1429.94 691.201 L1430.5 691.201 L1431.05 691.201 L1431.61 691.201 L1432.17 691.201 L1432.73 691.201 L1433.29 691.201 L1433.85 691.201 L1434.41 691.201 L1434.97 691.201 L1435.53 691.201 L1436.09 691.201 L1436.65 691.201 L1437.21 691.201 L1437.77 691.201 L1438.33 691.201 L1438.88 691.201 L1439.44 691.201 L1440 691.201 L1440.56 691.201 L1441.12 691.201 L1441.68 691.201 L1442.24 691.201 L1442.8 691.201 L1443.36 691.201 L1443.92 691.201 L1444.48 691.201 L1445.04 691.201 L1445.6 691.201 L1446.15 691.201 L1446.71 691.201 L1447.27 691.201 L1447.83 691.201 L1448.39 691.201 L1448.95 691.201 L1449.51 691.201 L1450.07 691.201 L1450.63 691.201 L1451.19 691.201 L1451.75 691.201 L1452.31 691.201 L1452.87 691.201 L1453.42 691.201 L1453.98 691.201 L1454.54 691.201 L1455.1 691.201 L1455.66 691.201 L1456.22 691.201 L1456.78 691.201 L1457.34 691.201 L1457.9 691.201 L1458.46 691.201 L1459.02 691.201 L1459.58 691.201 L1460.14 691.201 L1460.7 691.201 L1461.25 691.201 L1461.81 691.201 L1462.37 691.201 L1462.93 691.201 L1463.49 691.201 L1464.05 691.201 L1464.61 691.201 L1465.17 691.201 L1465.73 691.201 L1466.29 691.201 L1466.85 691.201 L1467.41 691.201 L1467.97 691.201 L1468.52 691.201 L1469.08 691.201 L1469.64 691.201 L1470.2 691.201 L1470.76 691.201 L1471.32 691.201 L1471.88 691.201 L1472.44 691.201 L1473 691.201 L1473.56 691.201 L1474.12 691.201 L1474.68 691.201 L1475.24 691.201 L1475.79 691.201 L1476.35 691.201 L1476.91 691.201 L1477.47 691.201 L1478.03 691.201 L1478.59 691.201 L1479.15 691.201 L1479.71 691.201 L1480.27 691.201 L1480.83 691.201 L1481.39 691.201 L1481.95 691.201 L1482.51 691.201 L1483.07 691.201 L1483.62 691.201 L1484.18 691.201 L1484.74 691.201 L1485.3 691.201 L1485.86 691.201 L1486.42 691.201 L1486.98 691.201 L1487.54 691.201 L1488.1 691.201 L1488.66 691.201 L1489.22 691.201 L1489.78 691.201 L1490.34 691.201 L1490.89 691.201 L1491.45 691.201 L1492.01 691.201 L1492.57 691.201 L1493.13 691.201 L1493.69 691.201 L1494.25 691.201 L1494.81 691.201 L1495.37 691.201 L1495.93 691.201 L1496.49 691.201 L1497.05 691.201 L1497.61 691.201 L1498.16 691.201 L1498.72 691.201 L1499.28 691.201 L1499.84 691.201 L1500.4 691.201 L1500.96 691.201 L1501.52 691.201 L1502.08 691.201 L1502.64 691.201 L1503.2 691.201 L1503.76 691.201 L1504.32 691.201 L1504.88 691.201 L1505.44 691.201 L1505.99 691.201 L1506.55 691.201 L1507.11 691.201 L1507.67 691.201 L1508.23 691.201 L1508.79 691.201 L1509.35 691.201 L1509.91 691.201 L1510.47 691.201 L1511.03 691.201 L1511.59 691.201 L1512.15 691.201 L1512.71 691.201 L1513.26 691.201 L1513.82 691.201 L1514.38 691.201 L1514.94 691.201 L1515.5 691.201 L1516.06 691.201 L1516.62 691.201 L1517.18 691.201 L1517.74 691.201 L1518.3 691.201 L1518.86 691.201 L1519.42 691.201 L1519.98 691.201 L1520.53 691.201 L1521.09 691.201 L1521.65 691.201 L1522.21 691.201 L1522.77 691.201 L1523.33 691.201 L1523.89 691.201 L1524.45 691.201 L1525.01 691.201 L1525.57 691.201 L1526.13 691.201 L1526.69 691.201 L1527.25 691.201 L1527.81 691.201 L1528.36 691.201 L1528.92 691.201 L1529.48 691.201 L1530.04 691.201 L1530.6 691.201 L1531.16 691.201 L1531.72 691.201 L1532.28 691.201 L1532.84 691.201 L1533.4 691.201 L1533.96 691.201 L1534.52 691.201 L1535.08 691.201 L1535.63 691.201 L1536.19 691.201 L1536.75 691.201 L1537.31 691.201 L1537.87 691.201 L1538.43 691.201 L1538.99 691.201 L1539.55 691.201 L1540.11 691.201 L1540.67 691.201 L1541.23 691.201 L1541.79 691.201 L1542.35 691.201 L1542.9 691.201 L1543.46 691.201 L1544.02 691.201 L1544.58 691.201 L1545.14 691.201 L1545.7 691.201 L1546.26 691.201 L1546.82 691.201 L1547.38 691.201 L1547.94 691.201 L1548.5 691.201 L1549.06 691.201 L1549.62 691.201 L1550.18 691.201 L1550.73 691.201 L1551.29 691.201 L1551.85 691.201 L1552.41 691.201 L1552.97 691.201 L1553.53 691.201 L1554.09 691.201 L1554.65 691.201 L1555.21 691.201 L1555.77 691.201 L1556.33 691.201 L1556.89 691.201 L1557.45 691.201 L1558 691.201 L1558.56 691.201 L1559.12 691.201 L1559.68 691.201 L1560.24 691.201 L1560.8 691.201 L1561.36 691.201 L1561.92 691.201 L1562.48 691.201 L1563.04 691.201 L1563.6 691.201 L1564.16 691.201 L1564.72 691.201 L1565.28 691.201 L1565.83 691.201 L1566.39 691.201 L1566.95 691.201 L1567.51 691.201 L1568.07 691.201 L1568.63 691.201 L1569.19 691.201 L1569.75 691.201 L1570.31 691.201 L1570.87 691.201 L1571.43 691.201 L1571.99 691.201 L1572.55 691.201 L1573.1 691.201 L1573.66 691.201 L1574.22 691.201 L1574.78 691.201 L1575.34 691.201 L1575.9 691.201 L1576.46 691.201 L1577.02 691.201 L1577.58 691.201 L1578.14 691.201 L1578.7 691.201 L1579.26 691.201 L1579.82 691.201 L1580.37 691.201 L1580.93 691.201 L1581.49 691.201 L1582.05 691.201 L1582.61 691.201 L1583.17 691.201 L1583.73 691.201 L1584.29 691.201 L1584.85 691.201 L1585.41 691.201 L1585.97 691.201 L1586.53 691.201 L1587.09 691.201 L1587.65 691.201 L1588.2 691.201 L1588.76 691.201 L1589.32 691.201 L1589.88 691.201 L1590.44 691.201 L1591 691.201 L1591.56 691.201 L1592.12 691.201 L1592.68 691.201 L1593.24 691.201 L1593.8 691.201 L1594.36 691.201 L1594.92 691.201 L1595.47 691.201 L1596.03 691.201 L1596.59 691.201 L1597.15 691.201 L1597.71 691.201 L1598.27 691.201 L1598.83 691.201 L1599.39 691.201 L1599.95 691.201 L1600.51 691.201 L1601.07 691.201 L1601.63 691.201 L1602.19 691.201 L1602.74 691.201 L1603.3 691.201 L1603.86 691.201 L1604.42 691.201 L1604.98 691.201 L1605.54 691.201 L1606.1 691.201 L1606.66 691.201 L1607.22 691.201 L1607.78 691.201 L1608.34 691.201 L1608.9 691.201 L1609.46 691.201 L1610.02 691.201 L1610.57 691.201 L1611.13 691.201 L1611.69 691.201 L1612.25 691.201 L1612.81 691.201 L1613.37 691.201 L1613.93 691.201 L1614.49 691.201 L1615.05 691.201 L1615.61 691.201 L1616.17 691.201 L1616.73 691.201 L1617.29 691.201 L1617.84 691.201 L1618.4 691.201 L1618.96 691.201 L1619.52 691.201 L1620.08 691.201 L1620.64 691.201 L1621.2 691.201 L1621.76 691.201 L1622.32 691.201 L1622.88 691.201 L1623.44 691.201 L1624 691.201 L1624.56 691.201 L1625.11 691.201 L1625.67 691.201 L1626.23 691.201 L1626.79 691.201 L1627.35 691.201 L1627.91 691.201 L1628.47 691.201 L1629.03 691.201 L1629.59 691.201 L1630.15 691.201 L1630.71 691.201 L1631.27 691.201 L1631.83 691.201 L1632.39 691.201 L1632.94 691.201 L1633.5 691.201 L1634.06 691.201 L1634.62 691.201 L1635.18 691.201 L1635.74 691.201 L1636.3 691.201 L1636.86 691.201 L1637.42 691.201 L1637.98 691.201 L1638.54 691.201 L1639.1 691.201 L1639.66 691.201 L1640.21 691.201 L1640.77 691.201 L1641.33 691.201 L1641.89 691.201 L1642.45 691.201 L1643.01 691.201 L1643.57 691.201 L1644.13 691.201 L1644.69 691.201 L1645.25 691.201 L1645.81 691.201 L1646.37 691.201 L1646.93 691.201 L1647.48 691.201 L1648.04 691.201 L1648.6 691.201 L1649.16 691.201 L1649.72 691.201 L1650.28 691.201 L1650.84 691.201 L1651.4 691.201 L1651.96 691.201 L1652.52 691.201 L1653.08 691.201 L1653.64 691.201 L1654.2 691.201 L1654.76 691.201 L1655.31 691.201 L1655.87 691.201 L1656.43 691.201 L1656.99 691.201 L1657.55 691.201 L1658.11 691.201 L1658.67 691.201 L1659.23 691.201 L1659.79 691.201 L1660.35 691.201 L1660.91 691.201 L1661.47 691.201 L1662.03 691.201 L1662.58 691.201 L1663.14 691.201 L1663.7 691.201 L1664.26 691.201 L1664.82 691.201 L1665.38 691.201 L1665.94 691.201 L1666.5 691.201 L1667.06 691.201 L1667.62 691.201 L1668.18 691.201 L1668.74 691.201 L1669.3 691.201 L1669.85 691.201 L1670.41 691.201 L1670.97 691.201 L1671.53 691.201 L1672.09 691.201 L1672.65 691.201 L1673.21 691.201 L1673.77 691.201 L1674.33 691.201 L1674.89 691.201 L1675.45 691.201 L1676.01 691.201 L1676.57 691.201 L1677.13 691.201 L1677.68 691.201 L1678.24 691.201 L1678.8 691.201 L1679.36 691.201 L1679.92 691.201 L1680.48 691.201 L1681.04 691.201 L1681.6 691.201 L1682.16 691.201 L1682.72 691.201 L1683.28 691.201 L1683.84 691.201 L1684.4 691.201 L1684.95 691.201 L1685.51 691.201 L1686.07 691.201 L1686.63 691.201 L1687.19 691.201 L1687.75 691.201 L1688.31 691.201 L1688.87 691.201 L1689.43 691.201 L1689.99 691.201 L1690.55 691.201 L1691.11 691.201 L1691.67 691.201 L1692.23 691.201 L1692.78 691.201 L1693.34 691.201 L1693.9 691.201 L1694.46 691.201 L1695.02 691.201 L1695.58 691.201 L1696.14 691.201 L1696.7 691.201 L1697.26 691.201 L1697.82 691.201 L1698.38 691.201 L1698.94 691.201 L1699.5 691.201 L1700.05 691.201 L1700.61 691.201 L1701.17 691.201 L1701.73 691.201 L1702.29 691.201 L1702.85 691.201 L1703.41 691.201 L1703.97 691.201 L1704.53 691.201 L1705.09 691.201 L1705.65 691.201 L1706.21 691.201 L1706.77 691.201 L1707.32 691.201 L1707.88 691.201 L1708.44 691.201 L1709 691.201 L1709.56 691.201 L1710.12 691.201 L1710.68 691.201 L1711.24 691.201 L1711.8 691.201 L1712.36 691.201 L1712.92 691.201 L1713.48 691.201 L1714.04 691.201 L1714.6 691.201 L1715.15 691.201 L1715.71 691.201 L1716.27 691.201 L1716.83 691.201 L1717.39 691.201 L1717.95 691.201 L1718.51 691.201 L1719.07 691.201 L1719.63 691.201 L1720.19 691.201 L1720.75 691.201 L1721.31 691.201 L1721.87 691.201 L1722.42 691.201 L1722.98 691.201 L1723.54 691.201 L1724.1 691.201 L1724.66 691.201 L1725.22 691.201 L1725.78 691.201 L1726.34 691.201 L1726.9 691.201 L1727.46 691.201 L1728.02 691.201 L1728.58 691.201 L1729.14 691.201 L1729.69 691.201 L1730.25 691.201 L1730.81 691.201 L1731.37 691.201 L1731.93 691.201 L1732.49 691.201 L1733.05 691.201 L1733.61 691.201 L1734.17 691.201 L1734.73 691.201 L1735.29 691.201 L1735.85 691.201 L1736.41 691.201 L1736.97 691.201 L1737.52 691.201 L1738.08 691.201 L1738.64 691.201 L1739.2 691.201 L1739.76 691.201 L1740.32 691.201 L1740.88 691.201 L1741.44 691.201 L1742 691.201 L1742.56 691.201 L1743.12 691.201 L1743.68 691.201 L1744.24 691.201 L1744.79 691.201 L1745.35 691.201 L1745.91 691.201 L1746.47 691.201 L1747.03 691.201 L1747.59 691.201 L1748.15 691.201 L1748.71 691.201 L1749.27 691.201 L1749.83 691.201 L1750.39 691.201 L1750.95 691.201 L1751.51 691.201 L1752.06 691.201 L1752.62 691.201 L1753.18 691.201 L1753.74 691.201 L1754.3 691.201 L1754.86 691.201 L1755.42 691.201 L1755.98 691.201 L1756.54 691.201 L1757.1 691.201 L1757.66 691.201 L1758.22 691.201 L1758.78 691.201 L1759.34 691.201 L1759.89 691.201 L1760.45 691.201 L1761.01 691.201 L1761.57 691.201 L1762.13 691.201 L1762.69 691.201 L1763.25 691.201 L1763.81 691.201 L1764.37 691.201 L1764.93 691.201 L1765.49 691.201 L1766.05 691.201 L1766.61 691.201 L1767.16 691.201 L1767.72 691.201 L1768.28 691.201 L1768.84 691.201 L1769.4 691.201 L1769.96 691.201 L1770.52 691.201 L1771.08 691.201 L1771.64 691.201 L1772.2 691.201 L1772.76 691.201 L1773.32 691.201 L1773.88 691.201 L1774.43 691.201 L1774.99 691.201 L1775.55 691.201 L1776.11 691.201 L1776.67 691.201 L1777.23 691.201 L1777.79 691.201 L1778.35 691.201 L1778.91 691.201 L1779.47 691.201 L1780.03 691.201 L1780.59 691.201 L1781.15 691.201 L1781.71 691.201 L1782.26 691.201 L1782.82 691.201 L1783.38 691.201 L1783.94 691.201 L1784.5 691.201 L1785.06 691.201 L1785.62 691.201 L1786.18 691.201 L1786.74 691.201 L1787.3 691.201 L1787.86 691.201 L1788.42 691.201 L1788.98 691.201 L1789.53 691.201 L1790.09 691.201 L1790.65 691.201 L1791.21 691.201 L1791.77 691.201 L1792.33 691.201 L1792.89 691.201 L1793.45 691.201 L1794.01 691.201 L1794.57 691.201 L1795.13 691.201 L1795.69 691.201 L1796.25 691.201 L1796.8 691.201 L1797.36 691.201 L1797.92 691.201 L1798.48 691.201 L1799.04 691.201 L1799.6 691.201 L1800.16 691.201 L1800.72 691.201 L1801.28 691.201 L1801.84 691.201 L1802.4 691.201 L1802.96 691.201 L1803.52 691.201 L1804.08 691.201 L1804.63 691.201 L1805.19 691.201 L1805.75 691.201 L1806.31 691.201 L1806.87 691.201 L1807.43 691.201 L1807.99 691.201 L1808.55 691.201 L1809.11 691.201 L1809.67 691.201 L1810.23 691.201 L1810.79 691.201 L1811.35 691.201 L1811.9 691.201 L1812.46 691.201 L1813.02 691.201 L1813.58 691.201 L1814.14 691.201 L1814.7 691.201 L1815.26 691.201 L1815.82 691.201 L1816.38 691.201 L1816.94 691.201 L1817.5 691.201 L1818.06 691.201 L1818.62 691.201 L1819.18 691.201 L1819.73 691.201 L1820.29 691.201 L1820.85 691.201 L1821.41 691.201 L1821.97 691.201 L1822.53 691.201 L1823.09 691.201 L1823.65 691.201 L1824.21 691.201 L1824.77 691.201 L1825.33 691.201 L1825.89 691.201 L1826.45 691.201 L1827 691.201 L1827.56 691.201 L1828.12 691.201 L1828.68 691.201 L1829.24 691.201 L1829.8 691.201 L1830.36 691.201 L1830.92 691.201 L1831.48 691.201 L1832.04 691.201 L1832.6 691.201 L1833.16 691.201 L1833.72 691.201 L1834.27 691.201 L1834.83 691.201 L1835.39 691.201 L1835.95 691.201 L1836.51 691.201 L1837.07 691.201 L1837.63 691.201 L1838.19 691.201 L1838.19 682.657 L1837.63 682.657 L1837.07 682.657 L1836.51 682.657 L1835.95 682.657 L1835.39 682.657 L1834.83 682.657 L1834.27 682.657 L1833.72 682.657 L1833.16 682.657 L1832.6 682.657 L1832.04 682.657 L1831.48 682.657 L1830.92 682.657 L1830.36 682.657 L1829.8 682.657 L1829.24 682.657 L1828.68 682.657 L1828.12 682.657 L1827.56 682.657 L1827 682.657 L1826.45 682.657 L1825.89 682.657 L1825.33 682.657 L1824.77 682.657 L1824.21 682.657 L1823.65 682.657 L1823.09 682.657 L1822.53 682.657 L1821.97 682.657 L1821.41 682.657 L1820.85 682.657 L1820.29 682.657 L1819.73 682.657 L1819.18 682.657 L1818.62 682.657 L1818.06 682.657 L1817.5 682.657 L1816.94 682.657 L1816.38 682.657 L1815.82 682.657 L1815.26 682.657 L1814.7 682.657 L1814.14 682.657 L1813.58 682.657 L1813.02 682.657 L1812.46 682.657 L1811.9 682.657 L1811.35 682.657 L1810.79 682.657 L1810.23 682.657 L1809.67 682.657 L1809.11 682.657 L1808.55 682.657 L1807.99 682.657 L1807.43 682.657 L1806.87 682.657 L1806.31 682.657 L1805.75 682.657 L1805.19 682.657 L1804.63 682.657 L1804.08 682.657 L1803.52 682.657 L1802.96 682.657 L1802.4 682.657 L1801.84 682.657 L1801.28 682.657 L1800.72 682.657 L1800.16 682.657 L1799.6 682.657 L1799.04 682.657 L1798.48 682.657 L1797.92 682.657 L1797.36 682.657 L1796.8 682.657 L1796.25 682.657 L1795.69 682.657 L1795.13 682.657 L1794.57 682.657 L1794.01 682.657 L1793.45 682.657 L1792.89 682.657 L1792.33 682.657 L1791.77 682.657 L1791.21 682.657 L1790.65 682.657 L1790.09 682.657 L1789.53 682.657 L1788.98 682.657 L1788.42 682.657 L1787.86 682.657 L1787.3 682.657 L1786.74 682.657 L1786.18 682.657 L1785.62 682.657 L1785.06 682.657 L1784.5 682.657 L1783.94 682.657 L1783.38 682.657 L1782.82 682.657 L1782.26 682.657 L1781.71 682.657 L1781.15 682.657 L1780.59 682.657 L1780.03 682.657 L1779.47 682.657 L1778.91 682.657 L1778.35 682.657 L1777.79 682.657 L1777.23 682.657 L1776.67 682.657 L1776.11 682.657 L1775.55 682.657 L1774.99 682.657 L1774.43 682.657 L1773.88 682.657 L1773.32 682.657 L1772.76 682.657 L1772.2 682.657 L1771.64 682.657 L1771.08 682.657 L1770.52 682.657 L1769.96 682.657 L1769.4 682.657 L1768.84 682.657 L1768.28 682.657 L1767.72 682.657 L1767.16 682.657 L1766.61 682.657 L1766.05 682.657 L1765.49 682.657 L1764.93 682.657 L1764.37 682.657 L1763.81 682.657 L1763.25 682.657 L1762.69 682.657 L1762.13 682.657 L1761.57 682.657 L1761.01 682.657 L1760.45 682.657 L1759.89 682.657 L1759.34 682.657 L1758.78 682.657 L1758.22 682.657 L1757.66 682.657 L1757.1 682.657 L1756.54 682.657 L1755.98 682.657 L1755.42 682.657 L1754.86 682.657 L1754.3 682.657 L1753.74 682.657 L1753.18 682.657 L1752.62 682.657 L1752.06 682.657 L1751.51 682.657 L1750.95 682.657 L1750.39 682.657 L1749.83 682.657 L1749.27 682.657 L1748.71 682.657 L1748.15 682.657 L1747.59 682.657 L1747.03 682.657 L1746.47 682.657 L1745.91 682.657 L1745.35 682.657 L1744.79 682.657 L1744.24 682.657 L1743.68 682.657 L1743.12 682.657 L1742.56 682.657 L1742 682.657 L1741.44 682.657 L1740.88 682.657 L1740.32 682.657 L1739.76 682.657 L1739.2 682.657 L1738.64 682.657 L1738.08 682.657 L1737.52 682.657 L1736.97 682.657 L1736.41 682.657 L1735.85 682.657 L1735.29 682.657 L1734.73 682.657 L1734.17 682.657 L1733.61 682.657 L1733.05 682.657 L1732.49 682.657 L1731.93 682.657 L1731.37 682.657 L1730.81 682.657 L1730.25 682.657 L1729.69 682.657 L1729.14 682.657 L1728.58 682.657 L1728.02 682.657 L1727.46 682.657 L1726.9 682.657 L1726.34 682.657 L1725.78 682.657 L1725.22 682.657 L1724.66 682.657 L1724.1 682.657 L1723.54 682.657 L1722.98 682.657 L1722.42 682.657 L1721.87 682.657 L1721.31 682.657 L1720.75 682.657 L1720.19 682.657 L1719.63 682.657 L1719.07 682.657 L1718.51 682.657 L1717.95 682.657 L1717.39 682.657 L1716.83 682.657 L1716.27 682.657 L1715.71 682.657 L1715.15 682.657 L1714.6 682.657 L1714.04 682.657 L1713.48 682.657 L1712.92 682.657 L1712.36 682.657 L1711.8 682.657 L1711.24 682.657 L1710.68 682.657 L1710.12 682.657 L1709.56 682.657 L1709 682.657 L1708.44 682.657 L1707.88 682.657 L1707.32 682.657 L1706.77 682.657 L1706.21 682.657 L1705.65 682.657 L1705.09 682.657 L1704.53 682.657 L1703.97 682.657 L1703.41 682.657 L1702.85 682.657 L1702.29 682.657 L1701.73 682.657 L1701.17 682.657 L1700.61 682.657 L1700.05 682.657 L1699.5 682.657 L1698.94 682.657 L1698.38 682.657 L1697.82 682.657 L1697.26 682.657 L1696.7 682.657 L1696.14 682.657 L1695.58 682.657 L1695.02 682.657 L1694.46 682.657 L1693.9 682.657 L1693.34 682.657 L1692.78 682.657 L1692.23 682.657 L1691.67 682.657 L1691.11 682.657 L1690.55 682.657 L1689.99 682.657 L1689.43 682.657 L1688.87 682.657 L1688.31 682.657 L1687.75 682.657 L1687.19 682.657 L1686.63 682.657 L1686.07 682.657 L1685.51 682.657 L1684.95 682.657 L1684.4 682.657 L1683.84 682.657 L1683.28 682.657 L1682.72 682.657 L1682.16 682.657 L1681.6 682.657 L1681.04 682.657 L1680.48 682.657 L1679.92 682.657 L1679.36 682.657 L1678.8 682.657 L1678.24 682.657 L1677.68 682.657 L1677.13 682.657 L1676.57 682.657 L1676.01 682.657 L1675.45 682.657 L1674.89 682.657 L1674.33 682.657 L1673.77 682.657 L1673.21 682.657 L1672.65 682.657 L1672.09 682.657 L1671.53 682.657 L1670.97 682.657 L1670.41 682.657 L1669.85 682.657 L1669.3 682.657 L1668.74 682.657 L1668.18 682.657 L1667.62 682.657 L1667.06 682.657 L1666.5 682.657 L1665.94 682.657 L1665.38 682.657 L1664.82 682.657 L1664.26 682.657 L1663.7 682.657 L1663.14 682.657 L1662.58 682.657 L1662.03 682.657 L1661.47 682.657 L1660.91 682.657 L1660.35 682.657 L1659.79 682.657 L1659.23 682.657 L1658.67 682.657 L1658.11 682.657 L1657.55 682.657 L1656.99 682.657 L1656.43 682.657 L1655.87 682.657 L1655.31 682.657 L1654.76 682.657 L1654.2 682.657 L1653.64 682.657 L1653.08 682.657 L1652.52 682.657 L1651.96 682.657 L1651.4 682.657 L1650.84 682.657 L1650.28 682.657 L1649.72 682.657 L1649.16 682.657 L1648.6 682.657 L1648.04 682.657 L1647.48 682.657 L1646.93 682.657 L1646.37 682.657 L1645.81 682.657 L1645.25 682.657 L1644.69 682.657 L1644.13 682.657 L1643.57 682.657 L1643.01 682.657 L1642.45 682.657 L1641.89 682.657 L1641.33 682.657 L1640.77 682.657 L1640.21 682.657 L1639.66 682.657 L1639.1 682.657 L1638.54 682.657 L1637.98 682.657 L1637.42 682.657 L1636.86 682.657 L1636.3 682.657 L1635.74 682.657 L1635.18 682.657 L1634.62 682.657 L1634.06 682.657 L1633.5 682.657 L1632.94 682.657 L1632.39 682.657 L1631.83 682.657 L1631.27 682.657 L1630.71 682.657 L1630.15 682.657 L1629.59 682.657 L1629.03 682.657 L1628.47 682.657 L1627.91 682.657 L1627.35 682.657 L1626.79 682.657 L1626.23 682.657 L1625.67 682.657 L1625.11 682.657 L1624.56 682.657 L1624 682.657 L1623.44 682.657 L1622.88 682.657 L1622.32 682.657 L1621.76 682.657 L1621.2 682.657 L1620.64 682.657 L1620.08 682.657 L1619.52 682.657 L1618.96 682.657 L1618.4 682.657 L1617.84 682.657 L1617.29 682.657 L1616.73 682.657 L1616.17 682.657 L1615.61 682.657 L1615.05 682.657 L1614.49 682.657 L1613.93 682.657 L1613.37 682.657 L1612.81 682.657 L1612.25 682.657 L1611.69 682.657 L1611.13 682.657 L1610.57 682.657 L1610.02 682.657 L1609.46 682.657 L1608.9 682.657 L1608.34 682.657 L1607.78 682.657 L1607.22 682.657 L1606.66 682.657 L1606.1 682.657 L1605.54 682.657 L1604.98 682.657 L1604.42 682.657 L1603.86 682.657 L1603.3 682.657 L1602.74 682.657 L1602.19 682.657 L1601.63 682.657 L1601.07 682.657 L1600.51 682.657 L1599.95 682.657 L1599.39 682.657 L1598.83 682.657 L1598.27 682.657 L1597.71 682.657 L1597.15 682.657 L1596.59 682.657 L1596.03 682.657 L1595.47 682.657 L1594.92 682.657 L1594.36 682.657 L1593.8 682.657 L1593.24 682.657 L1592.68 682.657 L1592.12 682.657 L1591.56 682.657 L1591 682.657 L1590.44 682.657 L1589.88 682.657 L1589.32 682.657 L1588.76 682.657 L1588.2 682.657 L1587.65 682.657 L1587.09 682.657 L1586.53 682.657 L1585.97 682.657 L1585.41 682.657 L1584.85 682.657 L1584.29 682.657 L1583.73 682.657 L1583.17 682.657 L1582.61 682.657 L1582.05 682.657 L1581.49 682.657 L1580.93 682.657 L1580.37 682.657 L1579.82 682.657 L1579.26 682.657 L1578.7 682.657 L1578.14 682.657 L1577.58 682.657 L1577.02 682.657 L1576.46 682.657 L1575.9 682.657 L1575.34 682.657 L1574.78 682.657 L1574.22 682.657 L1573.66 682.657 L1573.1 682.657 L1572.55 682.657 L1571.99 682.657 L1571.43 682.657 L1570.87 682.657 L1570.31 682.657 L1569.75 682.657 L1569.19 682.657 L1568.63 682.657 L1568.07 682.657 L1567.51 682.657 L1566.95 682.657 L1566.39 682.657 L1565.83 682.657 L1565.28 682.657 L1564.72 682.657 L1564.16 682.657 L1563.6 682.657 L1563.04 682.657 L1562.48 682.657 L1561.92 682.657 L1561.36 682.657 L1560.8 682.657 L1560.24 682.657 L1559.68 682.657 L1559.12 682.657 L1558.56 682.657 L1558 682.657 L1557.45 682.657 L1556.89 682.657 L1556.33 682.657 L1555.77 682.657 L1555.21 682.657 L1554.65 682.657 L1554.09 682.657 L1553.53 682.657 L1552.97 682.657 L1552.41 682.657 L1551.85 682.657 L1551.29 682.657 L1550.73 682.657 L1550.18 682.657 L1549.62 682.657 L1549.06 682.657 L1548.5 682.657 L1547.94 682.657 L1547.38 682.657 L1546.82 682.657 L1546.26 682.657 L1545.7 682.657 L1545.14 682.657 L1544.58 682.657 L1544.02 682.657 L1543.46 682.657 L1542.9 682.657 L1542.35 682.657 L1541.79 682.657 L1541.23 682.657 L1540.67 682.657 L1540.11 682.657 L1539.55 682.657 L1538.99 682.657 L1538.43 682.657 L1537.87 682.657 L1537.31 682.657 L1536.75 682.657 L1536.19 682.657 L1535.63 682.657 L1535.08 682.657 L1534.52 682.657 L1533.96 682.657 L1533.4 682.657 L1532.84 682.657 L1532.28 682.657 L1531.72 682.657 L1531.16 682.657 L1530.6 682.657 L1530.04 682.657 L1529.48 682.657 L1528.92 682.657 L1528.36 682.657 L1527.81 682.657 L1527.25 682.657 L1526.69 682.657 L1526.13 682.657 L1525.57 682.657 L1525.01 682.657 L1524.45 682.657 L1523.89 682.657 L1523.33 682.657 L1522.77 682.657 L1522.21 682.657 L1521.65 682.657 L1521.09 682.657 L1520.53 682.657 L1519.98 682.657 L1519.42 682.657 L1518.86 682.657 L1518.3 682.657 L1517.74 682.657 L1517.18 682.657 L1516.62 682.657 L1516.06 682.657 L1515.5 682.657 L1514.94 682.657 L1514.38 682.657 L1513.82 682.657 L1513.26 682.657 L1512.71 682.657 L1512.15 682.657 L1511.59 682.657 L1511.03 682.657 L1510.47 682.657 L1509.91 682.657 L1509.35 682.657 L1508.79 682.657 L1508.23 682.657 L1507.67 682.657 L1507.11 682.657 L1506.55 682.657 L1505.99 682.657 L1505.44 682.657 L1504.88 682.657 L1504.32 682.657 L1503.76 682.657 L1503.2 682.657 L1502.64 682.657 L1502.08 682.657 L1501.52 682.657 L1500.96 682.657 L1500.4 682.657 L1499.84 682.657 L1499.28 682.657 L1498.72 682.657 L1498.16 682.657 L1497.61 682.657 L1497.05 682.657 L1496.49 682.657 L1495.93 682.657 L1495.37 682.657 L1494.81 682.657 L1494.25 682.657 L1493.69 682.657 L1493.13 682.657 L1492.57 682.657 L1492.01 682.657 L1491.45 682.657 L1490.89 682.657 L1490.34 682.657 L1489.78 682.657 L1489.22 682.657 L1488.66 682.657 L1488.1 682.657 L1487.54 682.657 L1486.98 682.657 L1486.42 682.657 L1485.86 682.657 L1485.3 682.657 L1484.74 682.657 L1484.18 682.657 L1483.62 682.657 L1483.07 682.657 L1482.51 682.657 L1481.95 682.657 L1481.39 682.657 L1480.83 682.657 L1480.27 682.657 L1479.71 682.657 L1479.15 682.657 L1478.59 682.657 L1478.03 682.657 L1477.47 682.657 L1476.91 682.657 L1476.35 682.657 L1475.79 682.657 L1475.24 682.657 L1474.68 682.657 L1474.12 682.657 L1473.56 682.657 L1473 682.657 L1472.44 682.657 L1471.88 682.657 L1471.32 682.657 L1470.76 682.657 L1470.2 682.657 L1469.64 682.657 L1469.08 682.657 L1468.52 682.657 L1467.97 682.657 L1467.41 682.657 L1466.85 682.657 L1466.29 682.657 L1465.73 682.657 L1465.17 682.657 L1464.61 682.657 L1464.05 682.657 L1463.49 682.657 L1462.93 682.657 L1462.37 682.657 L1461.81 682.657 L1461.25 682.657 L1460.7 682.657 L1460.14 682.657 L1459.58 682.657 L1459.02 682.657 L1458.46 682.657 L1457.9 682.657 L1457.34 682.657 L1456.78 682.657 L1456.22 682.657 L1455.66 682.657 L1455.1 682.657 L1454.54 682.657 L1453.98 682.657 L1453.42 682.657 L1452.87 682.657 L1452.31 682.657 L1451.75 682.657 L1451.19 682.657 L1450.63 682.657 L1450.07 682.657 L1449.51 682.657 L1448.95 682.657 L1448.39 682.657 L1447.83 682.657 L1447.27 682.657 L1446.71 682.657 L1446.15 682.657 L1445.6 682.657 L1445.04 682.657 L1444.48 682.657 L1443.92 682.657 L1443.36 682.657 L1442.8 682.657 L1442.24 682.657 L1441.68 682.657 L1441.12 682.657 L1440.56 682.657 L1440 682.657 L1439.44 682.657 L1438.88 682.657 L1438.33 682.657 L1437.77 682.657 L1437.21 682.657 L1436.65 682.657 L1436.09 682.657 L1435.53 682.657 L1434.97 682.657 L1434.41 682.657 L1433.85 682.657 L1433.29 682.657 L1432.73 682.657 L1432.17 682.657 L1431.61 682.657 L1431.05 682.657 L1430.5 682.657 L1429.94 682.657 L1429.38 682.657 L1428.82 682.657 L1428.26 682.657 L1427.7 682.657 L1427.14 682.657 L1426.58 682.657 L1426.02 682.657 L1425.46 682.657 L1424.9 682.657 L1424.34 682.657 L1423.78 682.657 L1423.23 682.657 L1422.67 682.657 L1422.11 682.657 L1421.55 682.657 L1420.99 682.657 L1420.43 682.657 L1419.87 682.657 L1419.31 682.657 L1418.75 682.657 L1418.19 682.657 L1417.63 682.657 L1417.07 682.657 L1416.51 682.657 L1415.95 682.657 L1415.4 682.657 L1414.84 682.657 L1414.28 682.657 L1413.72 682.657 L1413.16 682.657 L1412.6 682.657 L1412.04 682.657 L1411.48 682.657 L1410.92 682.657 L1410.36 682.657 L1409.8 682.657 L1409.24 682.657 L1408.68 682.657 L1408.13 682.657 L1407.57 682.657 L1407.01 682.657 L1406.45 682.657 L1405.89 682.657 L1405.33 682.657 L1404.77 682.657 L1404.21 682.657 L1403.65 682.657 L1403.09 682.657 L1402.53 682.657 L1401.97 682.657 L1401.41 682.657 L1400.86 682.657 L1400.3 682.657 L1399.74 682.657 L1399.18 682.657 L1398.62 682.657 L1398.06 682.657 L1397.5 682.657 L1396.94 682.657 L1396.38 682.657 L1395.82 682.657 L1395.26 682.657 L1394.7 682.657 L1394.14 682.657 L1393.58 682.657 L1393.03 682.657 L1392.47 682.657 L1391.91 682.657 L1391.35 682.657 L1390.79 682.657 L1390.23 682.657 L1389.67 682.657 L1389.11 682.657 L1388.55 682.657 L1387.99 682.657 L1387.43 682.657 L1386.87 682.657 L1386.31 682.657 L1385.76 682.657 L1385.2 682.657 L1384.64 682.657 L1384.08 682.657 L1383.52 682.657 L1382.96 682.657 L1382.4 682.657 L1381.84 682.657 L1381.28 682.657 L1380.72 682.657 L1380.16 682.657 L1379.6 682.657 L1379.04 682.657 L1378.49 682.657 L1377.93 682.657 L1377.37 682.657 L1376.81 682.657 L1376.25 682.657 L1375.69 682.657 L1375.13 682.657 L1374.57 682.657 L1374.01 682.657 L1373.45 682.657 L1372.89 682.657 L1372.33 682.657 L1371.77 682.657 L1371.21 682.657 L1370.66 682.657 L1370.1 682.657 L1369.54 682.657 L1368.98 682.657 L1368.42 682.657 L1367.86 682.657 L1367.3 682.657 L1366.74 682.657 L1366.18 682.657 L1365.62 682.657 L1365.06 682.657 L1364.5 682.657 L1363.94 682.657 L1363.39 682.657 L1362.83 682.657 L1362.27 682.657 L1361.71 682.657 L1361.15 682.657 L1360.59 682.657 L1360.03 682.657 L1359.47 682.657 L1358.91 682.657 L1358.35 682.657 L1357.79 682.657 L1357.23 682.657 L1356.67 682.657 L1356.12 682.657 L1355.56 682.657 L1355 682.657 L1354.44 682.657 L1353.88 682.657 L1353.32 682.657 L1352.76 682.657 L1352.2 682.657 L1351.64 682.657 L1351.08 682.657 L1350.52 682.657 L1349.96 682.657 L1349.4 682.657 L1348.84 682.657 L1348.29 682.657 L1347.73 682.657 L1347.17 682.657 L1346.61 682.657 L1346.05 682.657 L1345.49 682.657 L1344.93 682.657 L1344.37 682.657 L1343.81 682.657 L1343.25 682.657 L1342.69 682.657 L1342.13 682.657 L1341.57 682.657 L1341.02 682.657 L1340.46 682.657 L1339.9 682.657 L1339.34 682.657 L1338.78 682.657 L1338.22 682.657 L1337.66 682.657 L1337.1 682.657 L1336.54 682.657 L1335.98 682.657 L1335.42 682.657 L1334.86 682.657 L1334.3 682.657 L1333.75 682.657 L1333.19 682.657 L1332.63 682.657 L1332.07 682.657 L1331.51 682.657 L1330.95 682.657 L1330.39 682.657 L1329.83 682.657 L1329.27 682.657 L1328.71 682.657 L1328.15 682.657 L1327.59 682.657 L1327.03 682.657 L1326.47 682.657 L1325.92 682.657 L1325.36 682.657 L1324.8 682.657 L1324.24 682.657 L1323.68 682.657 L1323.12 682.657 L1322.56 682.657 L1322 682.657 L1321.44 682.657 L1320.88 682.657 L1320.32 682.657 L1319.76 682.657 L1319.2 682.657 L1318.65 682.657 L1318.09 682.657 L1317.53 682.657 L1316.97 682.657 L1316.41 682.657 L1315.85 682.657 L1315.29 682.657 L1314.73 682.657 L1314.17 682.657 L1313.61 682.657 L1313.05 682.657 L1312.49 682.657 L1311.93 682.657 L1311.38 682.657 L1310.82 682.657 L1310.26 682.657 L1309.7 682.657 L1309.14 682.657 L1308.58 682.657 L1308.02 682.657 L1307.46 682.657 L1306.9 682.657 L1306.34 682.657 L1305.78 682.657 L1305.22 682.657 L1304.66 682.657 L1304.1 682.657 L1303.55 682.657 L1302.99 682.657 L1302.43 682.657 L1301.87 682.657 L1301.31 682.657 L1300.75 682.657 L1300.19 682.657 L1299.63 682.657 L1299.07 682.657 L1298.51 682.657 L1297.95 682.657 L1297.39 682.657 L1296.83 682.657 L1296.28 682.657 L1295.72 682.657 L1295.16 682.657 L1294.6 682.657 L1294.04 682.657 L1293.48 682.657 L1292.92 682.657 L1292.36 682.657 L1291.8 682.657 L1291.24 682.657 L1290.68 682.657 L1290.12 682.657 L1289.56 682.657 L1289 682.657 L1288.45 682.657 L1287.89 682.657 L1287.33 682.657 L1286.77 682.657 L1286.21 682.657 L1285.65 682.657 L1285.09 682.657 L1284.53 682.657 L1283.97 682.657 L1283.41 682.657 L1282.85 682.657 L1282.29 682.657 L1281.73 682.657 L1281.18 682.657 L1280.62 682.657 L1280.06 682.657 L1279.5 682.657 L1278.94 682.657 L1278.38 682.657 L1277.82 682.657 L1277.26 682.657 L1276.7 682.657 L1276.14 682.657 L1275.58 682.657 L1275.02 682.657 L1274.46 682.657 L1273.91 682.657 L1273.35 682.657 L1272.79 682.657 L1272.23 682.657 L1271.67 682.657 L1271.11 682.657 L1270.55 682.657 L1269.99 682.657 L1269.43 682.657 L1268.87 682.657 L1268.31 682.657 L1267.75 682.657 L1267.19 682.657 L1266.63 682.657 L1266.08 682.657 L1265.52 682.657 L1264.96 682.657 L1264.4 682.657 L1263.84 682.657 L1263.28 682.657 L1262.72 682.657 L1262.16 682.657 L1261.6 682.657 L1261.04 682.657 L1260.48 682.657 L1259.92 682.657 L1259.36 682.657 L1258.81 682.657 L1258.25 682.657 L1257.69 682.657 L1257.13 682.657 L1256.57 682.657 L1256.01 682.657 L1255.45 682.657 L1254.89 682.657 L1254.33 682.657 L1253.77 682.657 L1253.21 682.657 L1252.65 682.657 L1252.09 682.657 L1251.54 682.657 L1250.98 682.657 L1250.42 682.657 L1249.86 682.657 L1249.3 682.657 L1248.74 682.657 L1248.18 682.657 L1247.62 682.657 L1247.06 682.657 L1246.5 682.657 L1245.94 682.657 L1245.38 682.657 L1244.82 682.657 L1244.26 682.657 L1243.71 682.657 L1243.15 682.657 L1242.59 682.657 L1242.03 682.657 L1241.47 682.657 L1240.91 682.657 L1240.35 682.657 L1239.79 682.657 L1239.23 682.657 L1238.67 682.657 L1238.11 682.657 L1237.55 682.657 L1236.99 682.657 L1236.44 682.657 L1235.88 682.657 L1235.32 682.657 L1234.76 682.657 L1234.2 682.657 L1233.64 682.657 L1233.08 682.657 L1232.52 682.657 L1231.96 682.657 L1231.4 682.657 L1230.84 682.657 L1230.28 682.657 L1229.72 682.657 L1229.17 682.657 L1228.61 682.657 L1228.05 682.657 L1227.49 682.657 L1226.93 682.657 L1226.37 682.657 L1225.81 682.657 L1225.25 682.657 L1224.69 682.657 L1224.13 682.657 L1223.57 682.657 L1223.01 682.657 L1222.45 682.657 L1221.89 682.657 L1221.34 682.657 L1220.78 682.657 L1220.22 682.657 L1219.66 682.657 L1219.1 682.657 L1218.54 682.657 L1217.98 682.657 L1217.42 682.657 L1216.86 682.657 L1216.3 682.657 L1215.74 682.657 L1215.18 682.657 L1214.62 682.657 L1214.07 682.657 L1213.51 682.657 L1212.95 682.657 L1212.39 682.657 L1211.83 682.657 L1211.27 682.657 L1210.71 682.657 L1210.15 682.657 L1209.59 682.657 L1209.03 682.657 L1208.47 682.657 L1207.91 682.657 L1207.35 682.657 L1206.8 682.657 L1206.24 682.657 L1205.68 682.657 L1205.12 682.657 L1204.56 682.657 L1204 682.657 L1203.44 682.657 L1202.88 682.657 L1202.32 682.657 L1201.76 682.657 L1201.2 682.657 L1200.64 682.657 L1200.08 682.657 L1199.52 682.657 L1198.97 682.657 L1198.41 682.657 L1197.85 682.657 L1197.29 682.657 L1196.73 682.657 L1196.17 682.657 L1195.61 682.657 L1195.05 682.657 L1194.49 682.657 L1193.93 682.657 L1193.37 682.657 L1192.81 682.657 L1192.25 682.657 L1191.7 682.657 L1191.14 682.657 L1190.58 682.657 L1190.02 682.657 L1189.46 682.657 L1188.9 682.657 L1188.34 682.657 L1187.78 682.657 L1187.22 682.657 L1186.66 682.657 L1186.1 682.657 L1185.54 682.657 L1184.98 682.657 L1184.43 682.657 L1183.87 682.657 L1183.31 682.657 L1182.75 682.657 L1182.19 682.657 L1181.63 682.657 L1181.07 682.657 L1180.51 682.657 L1179.95 682.657 L1179.39 682.657 L1178.83 682.657 L1178.27 682.657 L1177.71 682.657 L1177.15 682.657 L1176.6 682.657 L1176.04 682.657 L1175.48 682.657 L1174.92 682.657 L1174.36 682.657 L1173.8 682.657 L1173.24 682.657 L1172.68 682.657 L1172.12 682.657 L1171.56 682.657 L1171 682.657 L1170.44 682.657 L1169.88 682.657 L1169.33 682.657 L1168.77 682.657 L1168.21 682.657 L1167.65 682.657 L1167.09 682.657 L1166.53 682.657 L1165.97 682.657 L1165.41 682.657 L1164.85 682.657 L1164.29 682.657 L1163.73 682.657 L1163.17 682.657 L1162.61 682.657 L1162.05 682.657 L1161.5 682.657 L1160.94 682.657 L1160.38 682.657 L1159.82 682.657 L1159.26 682.657 L1158.7 682.657 L1158.14 682.657 L1157.58 682.657 L1157.02 682.657 L1156.46 682.657 L1155.9 682.657 L1155.34 682.657 L1154.78 682.657 L1154.23 682.657 L1153.67 682.657 L1153.11 682.657 L1152.55 682.657 L1151.99 682.657 L1151.43 682.657 L1150.87 682.657 L1150.31 682.657 L1149.75 682.657 L1149.19 682.657 L1148.63 682.657 L1148.07 682.657 L1147.51 682.657 L1146.96 682.657 L1146.4 682.657 L1145.84 682.657 L1145.28 682.657 L1144.72 682.657 L1144.16 682.657 L1143.6 682.657 L1143.04 682.657 L1142.48 682.657 L1141.92 682.657 L1141.36 682.657 L1140.8 682.657 L1140.24 682.657 L1139.68 682.657 L1139.13 682.657 L1138.57 682.657 L1138.01 682.657 L1137.45 682.657 L1136.89 682.657 L1136.33 682.657 L1135.77 682.657 L1135.21 682.657 L1134.65 682.657 L1134.09 682.657 L1133.53 682.657 L1132.97 682.657 L1132.41 682.657 L1131.86 682.657 L1131.3 682.657 L1130.74 682.657 L1130.18 682.657 L1129.62 682.657 L1129.06 682.657 L1128.5 682.657 L1127.94 682.657 L1127.38 682.657 L1126.82 682.657 L1126.26 682.657 L1125.7 682.657 L1125.14 682.657 L1124.59 682.657 L1124.03 682.657 L1123.47 682.657 L1122.91 682.657 L1122.35 682.657 L1121.79 682.657 L1121.23 682.657 L1120.67 682.657 L1120.11 682.657 L1119.55 682.657 L1118.99 682.657 L1118.43 682.657 L1117.87 682.657 L1117.31 682.657 L1116.76 682.657 L1116.2 682.657 L1115.64 682.657 L1115.08 682.657 L1114.52 682.657 L1113.96 682.657 L1113.4 682.657 L1112.84 682.657 L1112.28 682.657 L1111.72 682.657 L1111.16 682.657 L1110.6 682.657 L1110.04 682.657 L1109.49 682.657 L1108.93 682.657 L1108.37 682.657 L1107.81 682.657 L1107.25 682.657 L1106.69 682.657 L1106.13 682.657 L1105.57 682.657 L1105.01 682.657 L1104.45 682.657 L1103.89 682.657 L1103.33 682.657 L1102.77 682.657 L1102.22 682.657 L1101.66 682.657 L1101.1 682.657 L1100.54 682.657 L1099.98 682.657 L1099.42 682.657 L1098.86 682.657 L1098.3 682.657 L1097.74 682.657 L1097.18 682.657 L1096.62 682.657 L1096.06 682.657 L1095.5 682.657 L1094.94 682.657 L1094.39 682.657 L1093.83 682.657 L1093.27 682.657 L1092.71 682.657 L1092.15 682.657 L1091.59 682.657 L1091.03 682.657 L1090.47 682.657 L1089.91 682.657 L1089.35 682.657 L1088.79 682.657 L1088.23 682.657 L1087.67 682.657 L1087.12 682.657 L1086.56 682.657 L1086 682.657 L1085.44 682.657 L1084.88 682.657 L1084.32 682.657 L1083.76 682.657 L1083.2 682.657 L1082.64 682.657 L1082.08 682.657 L1081.52 682.657 L1080.96 682.657 L1080.4 682.657 L1079.85 682.657 L1079.29 682.657 L1078.73 682.657 L1078.17 682.657 L1077.61 682.657 L1077.05 682.657 L1076.49 682.657 L1075.93 682.657 L1075.37 682.657 L1074.81 682.657 L1074.25 682.657 L1073.69 682.657 L1073.13 682.657 L1072.57 682.657 L1072.02 682.657 L1071.46 682.657 L1070.9 682.657 L1070.34 682.657 L1069.78 682.657 L1069.22 682.657 L1068.66 682.657 L1068.1 682.657 L1067.54 682.657 L1066.98 682.657 L1066.42 682.657 L1065.86 682.657 L1065.3 682.657 L1064.75 682.657 L1064.19 682.657 L1063.63 682.657 L1063.07 682.657 L1062.51 682.657 L1061.95 682.657 L1061.39 682.657 L1060.83 682.657 L1060.27 682.657 L1059.71 682.657 L1059.15 682.657 L1058.59 682.657 L1058.03 682.657 L1057.48 682.657 L1056.92 682.657 L1056.36 682.657 L1055.8 682.657 L1055.24 682.657 L1054.68 682.657 L1054.12 682.657 L1053.56 682.657 L1053 682.657 L1052.44 682.657 L1051.88 682.657 L1051.32 682.657 L1050.76 682.657 L1050.2 682.657 L1049.65 682.657 L1049.09 682.657 L1048.53 682.657 L1047.97 682.657 L1047.41 682.657 L1046.85 682.657 L1046.29 682.657 L1045.73 682.657 L1045.17 682.657 L1044.61 682.657 L1044.05 682.657 L1043.49 682.657 L1042.93 682.657 L1042.38 682.657 L1041.82 682.657 L1041.26 682.657 L1040.7 682.657 L1040.14 682.657 L1039.58 682.657 L1039.02 682.657 L1038.46 682.657 L1037.9 682.657 L1037.34 682.657 L1036.78 682.657 L1036.22 682.657 L1035.66 682.657 L1035.1 682.657 L1034.55 682.657 L1033.99 682.657 L1033.43 682.657 L1032.87 682.657 L1032.31 682.657 L1031.75 682.657 L1031.19 682.657 L1030.63 682.657 L1030.07 682.657 L1029.51 682.657 L1028.95 682.657 L1028.39 682.657 L1027.83 682.657 L1027.28 682.657 L1026.72 682.657 L1026.16 682.657 L1025.6 682.657 L1025.04 682.657 L1024.48 682.657 L1023.92 682.657 L1023.36 682.657 L1022.8 682.657 L1022.24 682.657 L1021.68 682.657 L1021.12 682.657 L1020.56 682.657 L1020.01 682.657 L1019.45 682.657 L1018.89 682.657 L1018.33 682.657 L1017.77 682.657 L1017.21 682.657 L1016.65 682.657 L1016.09 682.657 L1015.53 682.657 L1014.97 682.657 L1014.41 682.657 L1013.85 682.657 L1013.29 682.657 L1012.73 682.657 L1012.18 682.657 L1011.62 682.657 L1011.06 682.657 L1010.5 682.657 L1009.94 682.657 L1009.38 682.657 L1008.82 682.657 L1008.26 682.657 L1007.7 682.657 L1007.14 682.657 L1006.58 682.657 L1006.02 682.657 L1005.46 682.657 L1004.91 682.657 L1004.35 682.657 L1003.79 682.657 L1003.23 682.657 L1002.67 682.657 L1002.11 682.657 L1001.55 682.657 L1000.99 682.657 L1000.43 682.657 L999.872 682.657 L999.313 682.657 L998.754 682.657 L998.194 682.657 L997.635 682.657 L997.076 682.657 L996.517 682.657 L995.957 682.657 L995.398 682.657 L994.839 682.657 L994.28 682.657 L993.72 682.657 L993.161 682.657 L992.602 682.657 L992.043 682.657 L991.483 682.657 L990.924 682.657 L990.365 682.657 L989.806 682.657 L989.246 682.657 L988.687 682.657 L988.128 682.657 L987.569 682.657 L987.009 682.657 L986.45 682.657 L985.891 682.657 L985.332 682.657 L984.772 682.657 L984.213 682.657 L983.654 682.657 L983.095 682.657 L982.535 682.657 L981.976 682.657 L981.417 682.657 L980.858 682.657 L980.298 682.657 L979.739 682.657 L979.18 682.657 L978.621 682.657 L978.061 682.657 L977.502 682.657 L976.943 682.657 L976.384 682.657 L975.824 682.657 L975.265 682.657 L974.706 682.657 L974.147 682.657 L973.587 682.657 L973.028 682.657 L972.469 682.657 L971.91 682.657 L971.35 682.657 L970.791 682.657 L970.232 682.657 L969.673 682.657 L969.113 682.657 L968.554 682.657 L967.995 682.657 L967.436 682.657 L966.876 682.657 L966.317 682.657 L965.758 682.657 L965.199 682.657 L964.639 682.657 L964.08 682.657 L963.521 682.657 L962.962 682.657 L962.402 682.657 L961.843 682.657 L961.284 682.657 L960.725 682.657 L960.165 682.657 L959.606 682.657 L959.047 682.657 L958.488 682.657 L957.928 682.657 L957.369 682.657 L956.81 682.657 L956.251 682.657 L955.691 682.657 L955.132 682.657 L954.573 682.657 L954.014 682.657 L953.454 682.657 L952.895 682.657 L952.336 682.657 L951.777 682.657 L951.217 682.657 L950.658 682.657 L950.099 682.657 L949.54 682.657 L948.98 682.657 L948.421 682.657 L947.862 682.657 L947.303 682.657 L946.743 682.657 L946.184 682.657 L945.625 682.657 L945.066 682.657 L944.506 682.657 L943.947 682.657 L943.388 682.657 L942.829 682.657 L942.269 682.657 L941.71 682.657 L941.151 682.657 L940.592 682.657 L940.032 682.657 L939.473 682.657 L938.914 682.657 L938.355 682.657 L937.795 682.657 L937.236 682.657 L936.677 682.657 L936.118 682.657 L935.558 682.657 L934.999 682.657 L934.44 682.657 L933.881 682.657 L933.321 682.657 L932.762 682.657 L932.203 682.657 L931.644 682.657 L931.084 682.657 L930.525 682.657 L929.966 682.657 L929.406 682.657 L928.847 682.657 L928.288 682.657 L927.729 682.657 L927.169 682.657 L926.61 682.657 L926.051 682.657 L925.492 682.657 L924.932 682.657 L924.373 682.657 L923.814 682.657 L923.255 682.657 L922.695 682.657 L922.136 682.657 L921.577 682.657 L921.018 682.657 L920.458 682.657 L919.899 682.657 L919.34 682.657 L918.781 682.657 L918.221 682.657 L917.662 682.657 L917.103 682.657 L916.544 682.657 L915.984 682.657 L915.425 682.657 L914.866 682.657 L914.307 682.657 L913.747 682.657 L913.188 682.657 L912.629 682.657 L912.07 682.657 L911.51 682.657 L910.951 682.657 L910.392 682.657 L909.833 682.657 L909.273 682.657 L908.714 682.657 L908.155 682.657 L907.596 682.657 L907.036 682.657 L906.477 682.657 L905.918 682.657 L905.359 682.657 L904.799 682.657 L904.24 682.657 L903.681 682.657 L903.122 682.657 L902.562 682.657 L902.003 682.657 L901.444 682.657 L900.885 682.657 L900.325 682.657 L899.766 682.657 L899.207 682.657 L898.648 682.657 L898.088 682.657 L897.529 682.657 L896.97 682.657 L896.411 682.657 L895.851 682.657 L895.292 682.657 L894.733 682.657 L894.174 682.657 L893.614 682.657 L893.055 682.657 L892.496 682.657 L891.937 682.657 L891.377 682.657 L890.818 682.657 L890.259 682.657 L889.7 682.657 L889.14 682.657 L888.581 682.657 L888.022 682.657 L887.463 682.657 L886.903 682.657 L886.344 682.657 L885.785 682.657 L885.226 682.657 L884.666 682.657 L884.107 682.657 L883.548 682.657 L882.989 682.657 L882.429 682.657 L881.87 682.657 L881.311 682.657 L880.752 682.657 L880.192 682.657 L879.633 682.657 L879.074 682.657 L878.515 682.657 L877.955 682.657 L877.396 682.657 L876.837 682.657 L876.278 682.657 L875.718 682.657 L875.159 682.657 L874.6 682.657 L874.041 682.657 L873.481 682.657 L872.922 682.657 L872.363 682.657 L871.804 682.657 L871.244 682.657 L870.685 682.657 L870.126 682.657 L869.567 682.657 L869.007 682.657 L868.448 682.657 L867.889 682.657 L867.33 682.657 L866.77 682.657 L866.211 682.657 L865.652 682.657 L865.093 682.657 L864.533 682.657 L863.974 682.657 L863.415 682.657 L862.856 682.657 L862.296 682.657 L861.737 682.657 L861.178 682.657 L860.619 682.657 L860.059 682.657 L859.5 682.657 L858.941 682.657 L858.382 682.657 L857.822 682.657 L857.263 682.657 L856.704 682.657 L856.145 682.657 L855.585 682.657 L855.026 682.657 L854.467 682.657 L853.908 682.657 L853.348 682.657 L852.789 682.657 L852.23 682.657 L851.671 682.657 L851.111 682.657 L850.552 682.657 L849.993 682.657 L849.434 682.657 L848.874 682.657 L848.315 682.657 L847.756 682.657 L847.197 682.657 L846.637 682.657 L846.078 682.657 L845.519 682.657 L844.96 682.657 L844.4 682.657 L843.841 682.657 L843.282 682.657 L842.723 682.657 L842.163 682.657 L841.604 682.657 L841.045 682.657 L840.486 682.657 L839.926 682.657 L839.367 682.657 L838.808 682.657 L838.249 682.657 L837.689 682.657 L837.13 682.657 L836.571 682.657 L836.012 682.657 L835.452 682.657 L834.893 682.657 L834.334 682.657 L833.775 682.657 L833.215 682.657 L832.656 682.657 L832.097 682.657 L831.538 682.657 L830.978 682.657 L830.419 682.657 L829.86 682.657 L829.301 682.657 L828.741 682.657 L828.182 682.657 L827.623 682.657 L827.064 682.657 L826.504 682.657 L825.945 682.657 L825.386 682.657 L824.827 682.657 L824.267 682.657 L823.708 682.657 L823.149 682.657 L822.59 682.657 L822.03 682.657 L821.471 682.657 L820.912 682.657 L820.353 682.657 L819.793 682.657 L819.234 682.657 L818.675 682.657 L818.116 682.657 L817.556 682.657 L816.997 682.657 L816.438 682.657 L815.879 682.657 L815.319 682.657 L814.76 682.657 L814.201 682.657 L813.642 682.657 L813.082 682.657 L812.523 682.657 L811.964 682.657 L811.405 682.657 L810.845 682.657 L810.286 682.657 L809.727 682.657 L809.168 682.657 L808.608 682.657 L808.049 682.657 L807.49 682.657 L806.931 682.657 L806.371 682.657 L805.812 682.657 L805.253 682.657 L804.693 682.657 L804.134 682.657 L803.575 682.657 L803.016 682.657 L802.456 682.657 L801.897 682.657 L801.338 682.657 L800.779 682.657 L800.219 682.657 L799.66 682.657 L799.101 682.657 L798.542 682.657 L797.982 682.657 L797.423 682.657 L796.864 682.657 L796.305 682.657 L795.745 682.657 L795.186 682.657 L794.627 682.657 L794.068 682.657 L793.508 682.657 L792.949 682.657 L792.39 682.657 L791.831 682.657 L791.271 682.657 L790.712 682.657 L790.153 682.657 L789.594 682.657 L789.034 682.657 L788.475 682.657 L787.916 682.657 L787.357 682.657 L786.797 682.657 L786.238 682.657 L785.679 682.657 L785.12 682.657 L784.56 682.657 L784.001 682.657 L783.442 682.657 L782.883 682.657 L782.323 682.657 L781.764 682.657 L781.205 682.657 L780.646 682.657 L780.086 682.657 L779.527 682.657 L778.968 682.657 L778.409 682.657 L777.849 682.657 L777.29 682.657 L776.731 682.657 L776.172 682.657 L775.612 682.657 L775.053 682.657 L774.494 682.657 L773.935 682.657 L773.375 682.657 L772.816 682.657 L772.257 682.657 L771.698 682.657 L771.138 682.657 L770.579 682.657 L770.02 682.657 L769.461 682.657 L768.901 682.657 L768.342 682.657 L767.783 682.657 L767.224 682.657 L766.664 682.657 L766.105 682.657 L765.546 682.657 L764.987 682.657 L764.427 682.657 L763.868 682.657 L763.309 682.657 L762.75 682.657 L762.19 682.657 L761.631 682.657 L761.072 682.657 L760.513 682.657 L759.953 682.657 L759.394 682.657 L758.835 682.657 L758.276 682.657 L757.716 682.657 L757.157 682.657 L756.598 682.657 L756.039 682.657 L755.479 682.657 L754.92 682.657 L754.361 682.657 L753.802 682.657 L753.242 682.657 L752.683 682.657 L752.124 682.657 L751.565 682.657 L751.005 682.657 L750.446 682.657 L749.887 682.657 L749.328 682.657 L748.768 682.657 L748.209 682.657 L747.65 682.657 L747.091 682.657 L746.531 682.657 L745.972 682.657 L745.413 682.657 L744.854 682.657 L744.294 682.657 L743.735 682.657 L743.176 682.657 L742.617 682.657 L742.057 682.657 L741.498 682.657 L740.939 682.657 L740.38 682.657 L739.82 682.657 L739.261 682.657 L738.702 682.657 L738.143 682.657 L737.583 682.657 L737.024 682.657 L736.465 682.657 L735.906 682.657 L735.346 682.657 L734.787 682.657 L734.228 682.657 L733.669 682.657 L733.109 682.657 L732.55 682.657 L731.991 682.657 L731.432 682.657 L730.872 682.657 L730.313 682.657 L729.754 682.657 L729.195 682.657 L728.635 682.657 L728.076 682.657 L727.517 682.657 L726.958 682.657 L726.398 682.657 L725.839 682.657 L725.28 682.657 L724.721 682.657 L724.161 682.657 L723.602 682.657 L723.043 682.657 L722.484 682.657 L721.924 682.657 L721.365 682.657 L720.806 682.657 L720.247 682.657  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.929 720.806,686.929 721.365,686.929 721.924,686.929 722.484,686.929 723.043,686.929 723.602,686.929 724.161,686.929 724.721,686.929 725.28,686.929 725.839,686.929 726.398,686.929 726.958,686.929 727.517,686.929 728.076,686.929 728.635,686.929 729.195,686.929 729.754,686.929 730.313,686.929 730.872,686.929 731.432,686.929 731.991,686.929 732.55,686.929 733.109,686.929 733.669,686.929 734.228,686.929 734.787,686.929 735.346,686.929 735.906,686.929 736.465,686.929 737.024,686.929 737.583,686.929 738.143,686.929 738.702,686.929 739.261,686.929 739.82,686.929 740.38,686.929 740.939,686.929 741.498,686.929 742.057,686.929 742.617,686.929 743.176,686.929 743.735,686.929 744.294,686.929 744.854,686.929 745.413,686.929 745.972,686.929 746.531,686.929 747.091,686.929 747.65,686.929 748.209,686.929 748.768,686.929 749.328,686.929 749.887,686.929 750.446,686.929 751.005,686.929 751.565,686.929 752.124,686.929 752.683,686.929 753.242,686.929 753.802,686.929 754.361,686.929 754.92,686.929 755.479,686.929 756.039,686.929 756.598,686.929 757.157,686.929 757.716,686.929 758.276,686.929 758.835,686.929 759.394,686.929 759.953,686.929 760.513,686.929 761.072,686.929 761.631,686.929 762.19,686.929 762.75,686.929 763.309,686.929 763.868,686.929 764.427,686.929 764.987,686.929 765.546,686.929 766.105,686.929 766.664,686.929 767.224,686.929 767.783,686.929 768.342,686.929 768.901,686.929 769.461,686.929 770.02,686.929 770.579,686.929 771.138,686.929 771.698,686.929 772.257,686.929 772.816,686.929 773.375,686.929 773.935,686.929 774.494,686.929 775.053,686.929 775.612,686.929 776.172,686.929 776.731,686.929 777.29,686.929 777.849,686.929 778.409,686.929 778.968,686.929 779.527,686.929 780.086,686.929 780.646,686.929 781.205,686.929 781.764,686.929 782.323,686.929 782.883,686.929 783.442,686.929 784.001,686.929 784.56,686.929 785.12,686.929 785.679,686.929 786.238,686.929 786.797,686.929 787.357,686.929 787.916,686.929 788.475,686.929 789.034,686.929 789.594,686.929 790.153,686.929 790.712,686.929 791.271,686.929 791.831,686.929 792.39,686.929 792.949,686.929 793.508,686.929 794.068,686.929 794.627,686.929 795.186,686.929 795.745,686.929 796.305,686.929 796.864,686.929 797.423,686.929 797.982,686.929 798.542,686.929 799.101,686.929 799.66,686.929 800.219,686.929 800.779,686.929 801.338,686.929 801.897,686.929 802.456,686.929 803.016,686.929 803.575,686.929 804.134,686.929 804.693,686.929 805.253,686.929 805.812,686.929 806.371,686.929 806.931,686.929 807.49,686.929 808.049,686.929 808.608,686.929 809.168,686.929 809.727,686.929 810.286,686.929 810.845,686.929 811.405,686.929 811.964,686.929 812.523,686.929 813.082,686.929 813.642,686.929 814.201,686.929 814.76,686.929 815.319,686.929 815.879,686.929 816.438,686.929 816.997,686.929 817.556,686.929 818.116,686.929 818.675,686.929 819.234,686.929 819.793,686.929 820.353,686.929 820.912,686.929 821.471,686.929 822.03,686.929 822.59,686.929 823.149,686.929 823.708,686.929 824.267,686.929 824.827,686.929 825.386,686.929 825.945,686.929 826.504,686.929 827.064,686.929 827.623,686.929 828.182,686.929 828.741,686.929 829.301,686.929 829.86,686.929 830.419,686.929 830.978,686.929 831.538,686.929 832.097,686.929 832.656,686.929 833.215,686.929 833.775,686.929 834.334,686.929 834.893,686.929 835.452,686.929 836.012,686.929 836.571,686.929 837.13,686.929 837.689,686.929 838.249,686.929 838.808,686.929 839.367,686.929 839.926,686.929 840.486,686.929 841.045,686.929 841.604,686.929 842.163,686.929 842.723,686.929 843.282,686.929 843.841,686.929 844.4,686.929 844.96,686.929 845.519,686.929 846.078,686.929 846.637,686.929 847.197,686.929 847.756,686.929 848.315,686.929 848.874,686.929 849.434,686.929 849.993,686.929 850.552,686.929 851.111,686.929 851.671,686.929 852.23,686.929 852.789,686.929 853.348,686.929 853.908,686.929 854.467,686.929 855.026,686.929 855.585,686.929 856.145,686.929 856.704,686.929 857.263,686.929 857.822,686.929 858.382,686.929 858.941,686.929 859.5,686.929 860.059,686.929 860.619,686.929 861.178,686.929 861.737,686.929 862.296,686.929 862.856,686.929 863.415,686.929 863.974,686.929 864.533,686.929 865.093,686.929 865.652,686.929 866.211,686.929 866.77,686.929 867.33,686.929 867.889,686.929 868.448,686.929 869.007,686.929 869.567,686.929 870.126,686.929 870.685,686.929 871.244,686.929 871.804,686.929 872.363,686.929 872.922,686.929 873.481,686.929 874.041,686.929 874.6,686.929 875.159,686.929 875.718,686.929 876.278,686.929 876.837,686.929 877.396,686.929 877.955,686.929 878.515,686.929 879.074,686.929 879.633,686.929 880.192,686.929 880.752,686.929 881.311,686.929 881.87,686.929 882.429,686.929 882.989,686.929 883.548,686.929 884.107,686.929 884.666,686.929 885.226,686.929 885.785,686.929 886.344,686.929 886.903,686.929 887.463,686.929 888.022,686.929 888.581,686.929 889.14,686.929 889.7,686.929 890.259,686.929 890.818,686.929 891.377,686.929 891.937,686.929 892.496,686.929 893.055,686.929 893.614,686.929 894.174,686.929 894.733,686.929 895.292,686.929 895.851,686.929 896.411,686.929 896.97,686.929 897.529,686.929 898.088,686.929 898.648,686.929 899.207,686.929 899.766,686.929 900.325,686.929 900.885,686.929 901.444,686.929 902.003,686.929 902.562,686.929 903.122,686.929 903.681,686.929 904.24,686.929 904.799,686.929 905.359,686.929 905.918,686.929 906.477,686.929 907.036,686.929 907.596,686.929 908.155,686.929 908.714,686.929 909.273,686.929 909.833,686.929 910.392,686.929 910.951,686.929 911.51,686.929 912.07,686.929 912.629,686.929 913.188,686.929 913.747,686.929 914.307,686.929 914.866,686.929 915.425,686.929 915.984,686.929 916.544,686.929 917.103,686.929 917.662,686.929 918.221,686.929 918.781,686.929 919.34,686.929 919.899,686.929 920.458,686.929 921.018,686.929 921.577,686.929 922.136,686.929 922.695,686.929 923.255,686.929 923.814,686.929 924.373,686.929 924.932,686.929 925.492,686.929 926.051,686.929 926.61,686.929 927.169,686.929 927.729,686.929 928.288,686.929 928.847,686.929 929.406,686.929 929.966,686.929 930.525,686.929 931.084,686.929 931.644,686.929 932.203,686.929 932.762,686.929 933.321,686.929 933.881,686.929 934.44,686.929 934.999,686.929 935.558,686.929 936.118,686.929 936.677,686.929 937.236,686.929 937.795,686.929 938.355,686.929 938.914,686.929 939.473,686.929 940.032,686.929 940.592,686.929 941.151,686.929 941.71,686.929 942.269,686.929 942.829,686.929 943.388,686.929 943.947,686.929 944.506,686.929 945.066,686.929 945.625,686.929 946.184,686.929 946.743,686.929 947.303,686.929 947.862,686.929 948.421,686.929 948.98,686.929 949.54,686.929 950.099,686.929 950.658,686.929 951.217,686.929 951.777,686.929 952.336,686.929 952.895,686.929 953.454,686.929 954.014,686.929 954.573,686.929 955.132,686.929 955.691,686.929 956.251,686.929 956.81,686.929 957.369,686.929 957.928,686.929 958.488,686.929 959.047,686.929 959.606,686.929 960.165,686.929 960.725,686.929 961.284,686.929 961.843,686.929 962.402,686.929 962.962,686.929 963.521,686.929 964.08,686.929 964.639,686.929 965.199,686.929 965.758,686.929 966.317,686.929 966.876,686.929 967.436,686.929 967.995,686.929 968.554,686.929 969.113,686.929 969.673,686.929 970.232,686.929 970.791,686.929 971.35,686.929 971.91,686.929 972.469,686.929 973.028,686.929 973.587,686.929 974.147,686.929 974.706,686.929 975.265,686.929 975.824,686.929 976.384,686.929 976.943,686.929 977.502,686.929 978.061,686.929 978.621,686.929 979.18,686.929 979.739,686.929 980.298,686.929 980.858,686.929 981.417,686.929 981.976,686.929 982.535,686.929 983.095,686.929 983.654,686.929 984.213,686.929 984.772,686.929 985.332,686.929 985.891,686.929 986.45,686.929 987.009,686.929 987.569,686.929 988.128,686.929 988.687,686.929 989.246,686.929 989.806,686.929 990.365,686.929 990.924,686.929 991.483,686.929 992.043,686.929 992.602,686.929 993.161,686.929 993.72,686.929 994.28,686.929 994.839,686.929 995.398,686.929 995.957,686.929 996.517,686.929 997.076,686.929 997.635,686.929 998.194,686.929 998.754,686.929 999.313,686.929 999.872,686.929 1000.43,686.929 1000.99,686.929 1001.55,686.929 1002.11,686.929 1002.67,686.929 1003.23,686.929 1003.79,686.929 1004.35,686.929 1004.91,686.929 1005.46,686.929 1006.02,686.929 1006.58,686.929 1007.14,686.929 1007.7,686.929 1008.26,686.929 1008.82,686.929 1009.38,686.929 1009.94,686.929 1010.5,686.929 1011.06,686.929 1011.62,686.929 1012.18,686.929 1012.73,686.929 1013.29,686.929 1013.85,686.929 1014.41,686.929 1014.97,686.929 1015.53,686.929 1016.09,686.929 1016.65,686.929 1017.21,686.929 1017.77,686.929 1018.33,686.929 1018.89,686.929 1019.45,686.929 1020.01,686.929 1020.56,686.929 1021.12,686.929 1021.68,686.929 1022.24,686.929 1022.8,686.929 1023.36,686.929 1023.92,686.929 1024.48,686.929 1025.04,686.929 1025.6,686.929 1026.16,686.929 1026.72,686.929 1027.28,686.929 1027.83,686.929 1028.39,686.929 1028.95,686.929 1029.51,686.929 1030.07,686.929 1030.63,686.929 1031.19,686.929 1031.75,686.929 1032.31,686.929 1032.87,686.929 1033.43,686.929 1033.99,686.929 1034.55,686.929 1035.1,686.929 1035.66,686.929 1036.22,686.929 1036.78,686.929 1037.34,686.929 1037.9,686.929 1038.46,686.929 1039.02,686.929 1039.58,686.929 1040.14,686.929 1040.7,686.929 1041.26,686.929 1041.82,686.929 1042.38,686.929 1042.93,686.929 1043.49,686.929 1044.05,686.929 1044.61,686.929 1045.17,686.929 1045.73,686.929 1046.29,686.929 1046.85,686.929 1047.41,686.929 1047.97,686.929 1048.53,686.929 1049.09,686.929 1049.65,686.929 1050.2,686.929 1050.76,686.929 1051.32,686.929 1051.88,686.929 1052.44,686.929 1053,686.929 1053.56,686.929 1054.12,686.929 1054.68,686.929 1055.24,686.929 1055.8,686.929 1056.36,686.929 1056.92,686.929 1057.48,686.929 1058.03,686.929 1058.59,686.929 1059.15,686.929 1059.71,686.929 1060.27,686.929 1060.83,686.929 1061.39,686.929 1061.95,686.929 1062.51,686.929 1063.07,686.929 1063.63,686.929 1064.19,686.929 1064.75,686.929 1065.3,686.929 1065.86,686.929 1066.42,686.929 1066.98,686.929 1067.54,686.929 1068.1,686.929 1068.66,686.929 1069.22,686.929 1069.78,686.929 1070.34,686.929 1070.9,686.929 1071.46,686.929 1072.02,686.929 1072.57,686.929 1073.13,686.929 1073.69,686.929 1074.25,686.929 1074.81,686.929 1075.37,686.929 1075.93,686.929 1076.49,686.929 1077.05,686.929 1077.61,686.929 1078.17,686.929 1078.73,686.929 1079.29,686.929 1079.85,686.929 1080.4,686.929 1080.96,686.929 1081.52,686.929 1082.08,686.929 1082.64,686.929 1083.2,686.929 1083.76,686.929 1084.32,686.929 1084.88,686.929 1085.44,686.929 1086,686.929 1086.56,686.929 1087.12,686.929 1087.67,686.929 1088.23,686.929 1088.79,686.929 1089.35,686.929 1089.91,686.929 1090.47,686.929 1091.03,686.929 1091.59,686.929 1092.15,686.929 1092.71,686.929 1093.27,686.929 1093.83,686.929 1094.39,686.929 1094.94,686.929 1095.5,686.929 1096.06,686.929 1096.62,686.929 1097.18,686.929 1097.74,686.929 1098.3,686.929 1098.86,686.929 1099.42,686.929 1099.98,686.929 1100.54,686.929 1101.1,686.929 1101.66,686.929 1102.22,686.929 1102.77,686.929 1103.33,686.929 1103.89,686.929 1104.45,686.929 1105.01,686.929 1105.57,686.929 1106.13,686.929 1106.69,686.929 1107.25,686.929 1107.81,686.929 1108.37,686.929 1108.93,686.929 1109.49,686.929 1110.04,686.929 1110.6,686.929 1111.16,686.929 1111.72,686.929 1112.28,686.929 1112.84,686.929 1113.4,686.929 1113.96,686.929 1114.52,686.929 1115.08,686.929 1115.64,686.929 1116.2,686.929 1116.76,686.929 1117.31,686.929 1117.87,686.929 1118.43,686.929 1118.99,686.929 1119.55,686.929 1120.11,686.929 1120.67,686.929 1121.23,686.929 1121.79,686.929 1122.35,686.929 1122.91,686.929 1123.47,686.929 1124.03,686.929 1124.59,686.929 1125.14,686.929 1125.7,686.929 1126.26,686.929 1126.82,686.929 1127.38,686.929 1127.94,686.929 1128.5,686.929 1129.06,686.929 1129.62,686.929 1130.18,686.929 1130.74,686.929 1131.3,686.929 1131.86,686.929 1132.41,686.929 1132.97,686.929 1133.53,686.929 1134.09,686.929 1134.65,686.929 1135.21,686.929 1135.77,686.929 1136.33,686.929 1136.89,686.929 1137.45,686.929 1138.01,686.929 1138.57,686.929 1139.13,686.929 1139.68,686.929 1140.24,686.929 1140.8,686.929 1141.36,686.929 1141.92,686.929 1142.48,686.929 1143.04,686.929 1143.6,686.929 1144.16,686.929 1144.72,686.929 1145.28,686.929 1145.84,686.929 1146.4,686.929 1146.96,686.929 1147.51,686.929 1148.07,686.929 1148.63,686.929 1149.19,686.929 1149.75,686.929 1150.31,686.929 1150.87,686.929 1151.43,686.929 1151.99,686.929 1152.55,686.929 1153.11,686.929 1153.67,686.929 1154.23,686.929 1154.78,686.929 1155.34,686.929 1155.9,686.929 1156.46,686.929 1157.02,686.929 1157.58,686.929 1158.14,686.929 1158.7,686.929 1159.26,686.929 1159.82,686.929 1160.38,686.929 1160.94,686.929 1161.5,686.929 1162.05,686.929 1162.61,686.929 1163.17,686.929 1163.73,686.929 1164.29,686.929 1164.85,686.929 1165.41,686.929 1165.97,686.929 1166.53,686.929 1167.09,686.929 1167.65,686.929 1168.21,686.929 1168.77,686.929 1169.33,686.929 1169.88,686.929 1170.44,686.929 1171,686.929 1171.56,686.929 1172.12,686.929 1172.68,686.929 1173.24,686.929 1173.8,686.929 1174.36,686.929 1174.92,686.929 1175.48,686.929 1176.04,686.929 1176.6,686.929 1177.15,686.929 1177.71,686.929 1178.27,686.929 1178.83,686.929 1179.39,686.929 1179.95,686.929 1180.51,686.929 1181.07,686.929 1181.63,686.929 1182.19,686.929 1182.75,686.929 1183.31,686.929 1183.87,686.929 1184.43,686.929 1184.98,686.929 1185.54,686.929 1186.1,686.929 1186.66,686.929 1187.22,686.929 1187.78,686.929 1188.34,686.929 1188.9,686.929 1189.46,686.929 1190.02,686.929 1190.58,686.929 1191.14,686.929 1191.7,686.929 1192.25,686.929 1192.81,686.929 1193.37,686.929 1193.93,686.929 1194.49,686.929 1195.05,686.929 1195.61,686.929 1196.17,686.929 1196.73,686.929 1197.29,686.929 1197.85,686.929 1198.41,686.929 1198.97,686.929 1199.52,686.929 1200.08,686.929 1200.64,686.929 1201.2,686.929 1201.76,686.929 1202.32,686.929 1202.88,686.929 1203.44,686.929 1204,686.929 1204.56,686.929 1205.12,686.929 1205.68,686.929 1206.24,686.929 1206.8,686.929 1207.35,686.929 1207.91,686.929 1208.47,686.929 1209.03,686.929 1209.59,686.929 1210.15,686.929 1210.71,686.929 1211.27,686.929 1211.83,686.929 1212.39,686.929 1212.95,686.929 1213.51,686.929 1214.07,686.929 1214.62,686.929 1215.18,686.929 1215.74,686.929 1216.3,686.929 1216.86,686.929 1217.42,686.929 1217.98,686.929 1218.54,686.929 1219.1,686.929 1219.66,686.929 1220.22,686.929 1220.78,686.929 1221.34,686.929 1221.89,686.929 1222.45,686.929 1223.01,686.929 1223.57,686.929 1224.13,686.929 1224.69,686.929 1225.25,686.929 1225.81,686.929 1226.37,686.929 1226.93,686.929 1227.49,686.929 1228.05,686.929 1228.61,686.929 1229.17,686.929 1229.72,686.929 1230.28,686.929 1230.84,686.929 1231.4,686.929 1231.96,686.929 1232.52,686.929 1233.08,686.929 1233.64,686.929 1234.2,686.929 1234.76,686.929 1235.32,686.929 1235.88,686.929 1236.44,686.929 1236.99,686.929 1237.55,686.929 1238.11,686.929 1238.67,686.929 1239.23,686.929 1239.79,686.929 1240.35,686.929 1240.91,686.929 1241.47,686.929 1242.03,686.929 1242.59,686.929 1243.15,686.929 1243.71,686.929 1244.26,686.929 1244.82,686.929 1245.38,686.929 1245.94,686.929 1246.5,686.929 1247.06,686.929 1247.62,686.929 1248.18,686.929 1248.74,686.929 1249.3,686.929 1249.86,686.929 1250.42,686.929 1250.98,686.929 1251.54,686.929 1252.09,686.929 1252.65,686.929 1253.21,686.929 1253.77,686.929 1254.33,686.929 1254.89,686.929 1255.45,686.929 1256.01,686.929 1256.57,686.929 1257.13,686.929 1257.69,686.929 1258.25,686.929 1258.81,686.929 1259.36,686.929 1259.92,686.929 1260.48,686.929 1261.04,686.929 1261.6,686.929 1262.16,686.929 1262.72,686.929 1263.28,686.929 1263.84,686.929 1264.4,686.929 1264.96,686.929 1265.52,686.929 1266.08,686.929 1266.63,686.929 1267.19,686.929 1267.75,686.929 1268.31,686.929 1268.87,686.929 1269.43,686.929 1269.99,686.929 1270.55,686.929 1271.11,686.929 1271.67,686.929 1272.23,686.929 1272.79,686.929 1273.35,686.929 1273.91,686.929 1274.46,686.929 1275.02,686.929 1275.58,686.929 1276.14,686.929 1276.7,686.929 1277.26,686.929 1277.82,686.929 1278.38,686.929 1278.94,686.929 1279.5,686.929 1280.06,686.929 1280.62,686.929 1281.18,686.929 1281.73,686.929 1282.29,686.929 1282.85,686.929 1283.41,686.929 1283.97,686.929 1284.53,686.929 1285.09,686.929 1285.65,686.929 1286.21,686.929 1286.77,686.929 1287.33,686.929 1287.89,686.929 1288.45,686.929 1289,686.929 1289.56,686.929 1290.12,686.929 1290.68,686.929 1291.24,686.929 1291.8,686.929 1292.36,686.929 1292.92,686.929 1293.48,686.929 1294.04,686.929 1294.6,686.929 1295.16,686.929 1295.72,686.929 1296.28,686.929 1296.83,686.929 1297.39,686.929 1297.95,686.929 1298.51,686.929 1299.07,686.929 1299.63,686.929 1300.19,686.929 1300.75,686.929 1301.31,686.929 1301.87,686.929 1302.43,686.929 1302.99,686.929 1303.55,686.929 1304.1,686.929 1304.66,686.929 1305.22,686.929 1305.78,686.929 1306.34,686.929 1306.9,686.929 1307.46,686.929 1308.02,686.929 1308.58,686.929 1309.14,686.929 1309.7,686.929 1310.26,686.929 1310.82,686.929 1311.38,686.929 1311.93,686.929 1312.49,686.929 1313.05,686.929 1313.61,686.929 1314.17,686.929 1314.73,686.929 1315.29,686.929 1315.85,686.929 1316.41,686.929 1316.97,686.929 1317.53,686.929 1318.09,686.929 1318.65,686.929 1319.2,686.929 1319.76,686.929 1320.32,686.929 1320.88,686.929 1321.44,686.929 1322,686.929 1322.56,686.929 1323.12,686.929 1323.68,686.929 1324.24,686.929 1324.8,686.929 1325.36,686.929 1325.92,686.929 1326.47,686.929 1327.03,686.929 1327.59,686.929 1328.15,686.929 1328.71,686.929 1329.27,686.929 1329.83,686.929 1330.39,686.929 1330.95,686.929 1331.51,686.929 1332.07,686.929 1332.63,686.929 1333.19,686.929 1333.75,686.929 1334.3,686.929 1334.86,686.929 1335.42,686.929 1335.98,686.929 1336.54,686.929 1337.1,686.929 1337.66,686.929 1338.22,686.929 1338.78,686.929 1339.34,686.929 1339.9,686.929 1340.46,686.929 1341.02,686.929 1341.57,686.929 1342.13,686.929 1342.69,686.929 1343.25,686.929 1343.81,686.929 1344.37,686.929 1344.93,686.929 1345.49,686.929 1346.05,686.929 1346.61,686.929 1347.17,686.929 1347.73,686.929 1348.29,686.929 1348.84,686.929 1349.4,686.929 1349.96,686.929 1350.52,686.929 1351.08,686.929 1351.64,686.929 1352.2,686.929 1352.76,686.929 1353.32,686.929 1353.88,686.929 1354.44,686.929 1355,686.929 1355.56,686.929 1356.12,686.929 1356.67,686.929 1357.23,686.929 1357.79,686.929 1358.35,686.929 1358.91,686.929 1359.47,686.929 1360.03,686.929 1360.59,686.929 1361.15,686.929 1361.71,686.929 1362.27,686.929 1362.83,686.929 1363.39,686.929 1363.94,686.929 1364.5,686.929 1365.06,686.929 1365.62,686.929 1366.18,686.929 1366.74,686.929 1367.3,686.929 1367.86,686.929 1368.42,686.929 1368.98,686.929 1369.54,686.929 1370.1,686.929 1370.66,686.929 1371.21,686.929 1371.77,686.929 1372.33,686.929 1372.89,686.929 1373.45,686.929 1374.01,686.929 1374.57,686.929 1375.13,686.929 1375.69,686.929 1376.25,686.929 1376.81,686.929 1377.37,686.929 1377.93,686.929 1378.49,686.929 1379.04,686.929 1379.6,686.929 1380.16,686.929 1380.72,686.929 1381.28,686.929 1381.84,686.929 1382.4,686.929 1382.96,686.929 1383.52,686.929 1384.08,686.929 1384.64,686.929 1385.2,686.929 1385.76,686.929 1386.31,686.929 1386.87,686.929 1387.43,686.929 1387.99,686.929 1388.55,686.929 1389.11,686.929 1389.67,686.929 1390.23,686.929 1390.79,686.929 1391.35,686.929 1391.91,686.929 1392.47,686.929 1393.03,686.929 1393.58,686.929 1394.14,686.929 1394.7,686.929 1395.26,686.929 1395.82,686.929 1396.38,686.929 1396.94,686.929 1397.5,686.929 1398.06,686.929 1398.62,686.929 1399.18,686.929 1399.74,686.929 1400.3,686.929 1400.86,686.929 1401.41,686.929 1401.97,686.929 1402.53,686.929 1403.09,686.929 1403.65,686.929 1404.21,686.929 1404.77,686.929 1405.33,686.929 1405.89,686.929 1406.45,686.929 1407.01,686.929 1407.57,686.929 1408.13,686.929 1408.68,686.929 1409.24,686.929 1409.8,686.929 1410.36,686.929 1410.92,686.929 1411.48,686.929 1412.04,686.929 1412.6,686.929 1413.16,686.929 1413.72,686.929 1414.28,686.929 1414.84,686.929 1415.4,686.929 1415.95,686.929 1416.51,686.929 1417.07,686.929 1417.63,686.929 1418.19,686.929 1418.75,686.929 1419.31,686.929 1419.87,686.929 1420.43,686.929 1420.99,686.929 1421.55,686.929 1422.11,686.929 1422.67,686.929 1423.23,686.929 1423.78,686.929 1424.34,686.929 1424.9,686.929 1425.46,686.929 1426.02,686.929 1426.58,686.929 1427.14,686.929 1427.7,686.929 1428.26,686.929 1428.82,686.929 1429.38,686.929 1429.94,686.929 1430.5,686.929 1431.05,686.929 1431.61,686.929 1432.17,686.929 1432.73,686.929 1433.29,686.929 1433.85,686.929 1434.41,686.929 1434.97,686.929 1435.53,686.929 1436.09,686.929 1436.65,686.929 1437.21,686.929 1437.77,686.929 1438.33,686.929 1438.88,686.929 1439.44,686.929 1440,686.929 1440.56,686.929 1441.12,686.929 1441.68,686.929 1442.24,686.929 1442.8,686.929 1443.36,686.929 1443.92,686.929 1444.48,686.929 1445.04,686.929 1445.6,686.929 1446.15,686.929 1446.71,686.929 1447.27,686.929 1447.83,686.929 1448.39,686.929 1448.95,686.929 1449.51,686.929 1450.07,686.929 1450.63,686.929 1451.19,686.929 1451.75,686.929 1452.31,686.929 1452.87,686.929 1453.42,686.929 1453.98,686.929 1454.54,686.929 1455.1,686.929 1455.66,686.929 1456.22,686.929 1456.78,686.929 1457.34,686.929 1457.9,686.929 1458.46,686.929 1459.02,686.929 1459.58,686.929 1460.14,686.929 1460.7,686.929 1461.25,686.929 1461.81,686.929 1462.37,686.929 1462.93,686.929 1463.49,686.929 1464.05,686.929 1464.61,686.929 1465.17,686.929 1465.73,686.929 1466.29,686.929 1466.85,686.929 1467.41,686.929 1467.97,686.929 1468.52,686.929 1469.08,686.929 1469.64,686.929 1470.2,686.929 1470.76,686.929 1471.32,686.929 1471.88,686.929 1472.44,686.929 1473,686.929 1473.56,686.929 1474.12,686.929 1474.68,686.929 1475.24,686.929 1475.79,686.929 1476.35,686.929 1476.91,686.929 1477.47,686.929 1478.03,686.929 1478.59,686.929 1479.15,686.929 1479.71,686.929 1480.27,686.929 1480.83,686.929 1481.39,686.929 1481.95,686.929 1482.51,686.929 1483.07,686.929 1483.62,686.929 1484.18,686.929 1484.74,686.929 1485.3,686.929 1485.86,686.929 1486.42,686.929 1486.98,686.929 1487.54,686.929 1488.1,686.929 1488.66,686.929 1489.22,686.929 1489.78,686.929 1490.34,686.929 1490.89,686.929 1491.45,686.929 1492.01,686.929 1492.57,686.929 1493.13,686.929 1493.69,686.929 1494.25,686.929 1494.81,686.929 1495.37,686.929 1495.93,686.929 1496.49,686.929 1497.05,686.929 1497.61,686.929 1498.16,686.929 1498.72,686.929 1499.28,686.929 1499.84,686.929 1500.4,686.929 1500.96,686.929 1501.52,686.929 1502.08,686.929 1502.64,686.929 1503.2,686.929 1503.76,686.929 1504.32,686.929 1504.88,686.929 1505.44,686.929 1505.99,686.929 1506.55,686.929 1507.11,686.929 1507.67,686.929 1508.23,686.929 1508.79,686.929 1509.35,686.929 1509.91,686.929 1510.47,686.929 1511.03,686.929 1511.59,686.929 1512.15,686.929 1512.71,686.929 1513.26,686.929 1513.82,686.929 1514.38,686.929 1514.94,686.929 1515.5,686.929 1516.06,686.929 1516.62,686.929 1517.18,686.929 1517.74,686.929 1518.3,686.929 1518.86,686.929 1519.42,686.929 1519.98,686.929 1520.53,686.929 1521.09,686.929 1521.65,686.929 1522.21,686.929 1522.77,686.929 1523.33,686.929 1523.89,686.929 1524.45,686.929 1525.01,686.929 1525.57,686.929 1526.13,686.929 1526.69,686.929 1527.25,686.929 1527.81,686.929 1528.36,686.929 1528.92,686.929 1529.48,686.929 1530.04,686.929 1530.6,686.929 1531.16,686.929 1531.72,686.929 1532.28,686.929 1532.84,686.929 1533.4,686.929 1533.96,686.929 1534.52,686.929 1535.08,686.929 1535.63,686.929 1536.19,686.929 1536.75,686.929 1537.31,686.929 1537.87,686.929 1538.43,686.929 1538.99,686.929 1539.55,686.929 1540.11,686.929 1540.67,686.929 1541.23,686.929 1541.79,686.929 1542.35,686.929 1542.9,686.929 1543.46,686.929 1544.02,686.929 1544.58,686.929 1545.14,686.929 1545.7,686.929 1546.26,686.929 1546.82,686.929 1547.38,686.929 1547.94,686.929 1548.5,686.929 1549.06,686.929 1549.62,686.929 1550.18,686.929 1550.73,686.929 1551.29,686.929 1551.85,686.929 1552.41,686.929 1552.97,686.929 1553.53,686.929 1554.09,686.929 1554.65,686.929 1555.21,686.929 1555.77,686.929 1556.33,686.929 1556.89,686.929 1557.45,686.929 1558,686.929 1558.56,686.929 1559.12,686.929 1559.68,686.929 1560.24,686.929 1560.8,686.929 1561.36,686.929 1561.92,686.929 1562.48,686.929 1563.04,686.929 1563.6,686.929 1564.16,686.929 1564.72,686.929 1565.28,686.929 1565.83,686.929 1566.39,686.929 1566.95,686.929 1567.51,686.929 1568.07,686.929 1568.63,686.929 1569.19,686.929 1569.75,686.929 1570.31,686.929 1570.87,686.929 1571.43,686.929 1571.99,686.929 1572.55,686.929 1573.1,686.929 1573.66,686.929 1574.22,686.929 1574.78,686.929 1575.34,686.929 1575.9,686.929 1576.46,686.929 1577.02,686.929 1577.58,686.929 1578.14,686.929 1578.7,686.929 1579.26,686.929 1579.82,686.929 1580.37,686.929 1580.93,686.929 1581.49,686.929 1582.05,686.929 1582.61,686.929 1583.17,686.929 1583.73,686.929 1584.29,686.929 1584.85,686.929 1585.41,686.929 1585.97,686.929 1586.53,686.929 1587.09,686.929 1587.65,686.929 1588.2,686.929 1588.76,686.929 1589.32,686.929 1589.88,686.929 1590.44,686.929 1591,686.929 1591.56,686.929 1592.12,686.929 1592.68,686.929 1593.24,686.929 1593.8,686.929 1594.36,686.929 1594.92,686.929 1595.47,686.929 1596.03,686.929 1596.59,686.929 1597.15,686.929 1597.71,686.929 1598.27,686.929 1598.83,686.929 1599.39,686.929 1599.95,686.929 1600.51,686.929 1601.07,686.929 1601.63,686.929 1602.19,686.929 1602.74,686.929 1603.3,686.929 1603.86,686.929 1604.42,686.929 1604.98,686.929 1605.54,686.929 1606.1,686.929 1606.66,686.929 1607.22,686.929 1607.78,686.929 1608.34,686.929 1608.9,686.929 1609.46,686.929 1610.02,686.929 1610.57,686.929 1611.13,686.929 1611.69,686.929 1612.25,686.929 1612.81,686.929 1613.37,686.929 1613.93,686.929 1614.49,686.929 1615.05,686.929 1615.61,686.929 1616.17,686.929 1616.73,686.929 1617.29,686.929 1617.84,686.929 1618.4,686.929 1618.96,686.929 1619.52,686.929 1620.08,686.929 1620.64,686.929 1621.2,686.929 1621.76,686.929 1622.32,686.929 1622.88,686.929 1623.44,686.929 1624,686.929 1624.56,686.929 1625.11,686.929 1625.67,686.929 1626.23,686.929 1626.79,686.929 1627.35,686.929 1627.91,686.929 1628.47,686.929 1629.03,686.929 1629.59,686.929 1630.15,686.929 1630.71,686.929 1631.27,686.929 1631.83,686.929 1632.39,686.929 1632.94,686.929 1633.5,686.929 1634.06,686.929 1634.62,686.929 1635.18,686.929 1635.74,686.929 1636.3,686.929 1636.86,686.929 1637.42,686.929 1637.98,686.929 1638.54,686.929 1639.1,686.929 1639.66,686.929 1640.21,686.929 1640.77,686.929 1641.33,686.929 1641.89,686.929 1642.45,686.929 1643.01,686.929 1643.57,686.929 1644.13,686.929 1644.69,686.929 1645.25,686.929 1645.81,686.929 1646.37,686.929 1646.93,686.929 1647.48,686.929 1648.04,686.929 1648.6,686.929 1649.16,686.929 1649.72,686.929 1650.28,686.929 1650.84,686.929 1651.4,686.929 1651.96,686.929 1652.52,686.929 1653.08,686.929 1653.64,686.929 1654.2,686.929 1654.76,686.929 1655.31,686.929 1655.87,686.929 1656.43,686.929 1656.99,686.929 1657.55,686.929 1658.11,686.929 1658.67,686.929 1659.23,686.929 1659.79,686.929 1660.35,686.929 1660.91,686.929 1661.47,686.929 1662.03,686.929 1662.58,686.929 1663.14,686.929 1663.7,686.929 1664.26,686.929 1664.82,686.929 1665.38,686.929 1665.94,686.929 1666.5,686.929 1667.06,686.929 1667.62,686.929 1668.18,686.929 1668.74,686.929 1669.3,686.929 1669.85,686.929 1670.41,686.929 1670.97,686.929 1671.53,686.929 1672.09,686.929 1672.65,686.929 1673.21,686.929 1673.77,686.929 1674.33,686.929 1674.89,686.929 1675.45,686.929 1676.01,686.929 1676.57,686.929 1677.13,686.929 1677.68,686.929 1678.24,686.929 1678.8,686.929 1679.36,686.929 1679.92,686.929 1680.48,686.929 1681.04,686.929 1681.6,686.929 1682.16,686.929 1682.72,686.929 1683.28,686.929 1683.84,686.929 1684.4,686.929 1684.95,686.929 1685.51,686.929 1686.07,686.929 1686.63,686.929 1687.19,686.929 1687.75,686.929 1688.31,686.929 1688.87,686.929 1689.43,686.929 1689.99,686.929 1690.55,686.929 1691.11,686.929 1691.67,686.929 1692.23,686.929 1692.78,686.929 1693.34,686.929 1693.9,686.929 1694.46,686.929 1695.02,686.929 1695.58,686.929 1696.14,686.929 1696.7,686.929 1697.26,686.929 1697.82,686.929 1698.38,686.929 1698.94,686.929 1699.5,686.929 1700.05,686.929 1700.61,686.929 1701.17,686.929 1701.73,686.929 1702.29,686.929 1702.85,686.929 1703.41,686.929 1703.97,686.929 1704.53,686.929 1705.09,686.929 1705.65,686.929 1706.21,686.929 1706.77,686.929 1707.32,686.929 1707.88,686.929 1708.44,686.929 1709,686.929 1709.56,686.929 1710.12,686.929 1710.68,686.929 1711.24,686.929 1711.8,686.929 1712.36,686.929 1712.92,686.929 1713.48,686.929 1714.04,686.929 1714.6,686.929 1715.15,686.929 1715.71,686.929 1716.27,686.929 1716.83,686.929 1717.39,686.929 1717.95,686.929 1718.51,686.929 1719.07,686.929 1719.63,686.929 1720.19,686.929 1720.75,686.929 1721.31,686.929 1721.87,686.929 1722.42,686.929 1722.98,686.929 1723.54,686.929 1724.1,686.929 1724.66,686.929 1725.22,686.929 1725.78,686.929 1726.34,686.929 1726.9,686.929 1727.46,686.929 1728.02,686.929 1728.58,686.929 1729.14,686.929 1729.69,686.929 1730.25,686.929 1730.81,686.929 1731.37,686.929 1731.93,686.929 1732.49,686.929 1733.05,686.929 1733.61,686.929 1734.17,686.929 1734.73,686.929 1735.29,686.929 1735.85,686.929 1736.41,686.929 1736.97,686.929 1737.52,686.929 1738.08,686.929 1738.64,686.929 1739.2,686.929 1739.76,686.929 1740.32,686.929 1740.88,686.929 1741.44,686.929 1742,686.929 1742.56,686.929 1743.12,686.929 1743.68,686.929 1744.24,686.929 1744.79,686.929 1745.35,686.929 1745.91,686.929 1746.47,686.929 1747.03,686.929 1747.59,686.929 1748.15,686.929 1748.71,686.929 1749.27,686.929 1749.83,686.929 1750.39,686.929 1750.95,686.929 1751.51,686.929 1752.06,686.929 1752.62,686.929 1753.18,686.929 1753.74,686.929 1754.3,686.929 1754.86,686.929 1755.42,686.929 1755.98,686.929 1756.54,686.929 1757.1,686.929 1757.66,686.929 1758.22,686.929 1758.78,686.929 1759.34,686.929 1759.89,686.929 1760.45,686.929 1761.01,686.929 1761.57,686.929 1762.13,686.929 1762.69,686.929 1763.25,686.929 1763.81,686.929 1764.37,686.929 1764.93,686.929 1765.49,686.929 1766.05,686.929 1766.61,686.929 1767.16,686.929 1767.72,686.929 1768.28,686.929 1768.84,686.929 1769.4,686.929 1769.96,686.929 1770.52,686.929 1771.08,686.929 1771.64,686.929 1772.2,686.929 1772.76,686.929 1773.32,686.929 1773.88,686.929 1774.43,686.929 1774.99,686.929 1775.55,686.929 1776.11,686.929 1776.67,686.929 1777.23,686.929 1777.79,686.929 1778.35,686.929 1778.91,686.929 1779.47,686.929 1780.03,686.929 1780.59,686.929 1781.15,686.929 1781.71,686.929 1782.26,686.929 1782.82,686.929 1783.38,686.929 1783.94,686.929 1784.5,686.929 1785.06,686.929 1785.62,686.929 1786.18,686.929 1786.74,686.929 1787.3,686.929 1787.86,686.929 1788.42,686.929 1788.98,686.929 1789.53,686.929 1790.09,686.929 1790.65,686.929 1791.21,686.929 1791.77,686.929 1792.33,686.929 1792.89,686.929 1793.45,686.929 1794.01,686.929 1794.57,686.929 1795.13,686.929 1795.69,686.929 1796.25,686.929 1796.8,686.929 1797.36,686.929 1797.92,686.929 1798.48,686.929 1799.04,686.929 1799.6,686.929 1800.16,686.929 1800.72,686.929 1801.28,686.929 1801.84,686.929 1802.4,686.929 1802.96,686.929 1803.52,686.929 1804.08,686.929 1804.63,686.929 1805.19,686.929 1805.75,686.929 1806.31,686.929 1806.87,686.929 1807.43,686.929 1807.99,686.929 1808.55,686.929 1809.11,686.929 1809.67,686.929 1810.23,686.929 1810.79,686.929 1811.35,686.929 1811.9,686.929 1812.46,686.929 1813.02,686.929 1813.58,686.929 1814.14,686.929 1814.7,686.929 1815.26,686.929 1815.82,686.929 1816.38,686.929 1816.94,686.929 1817.5,686.929 1818.06,686.929 1818.62,686.929 1819.18,686.929 1819.73,686.929 1820.29,686.929 1820.85,686.929 1821.41,686.929 1821.97,686.929 1822.53,686.929 1823.09,686.929 1823.65,686.929 1824.21,686.929 1824.77,686.929 1825.33,686.929 1825.89,686.929 1826.45,686.929 1827,686.929 1827.56,686.929 1828.12,686.929 1828.68,686.929 1829.24,686.929 1829.8,686.929 1830.36,686.929 1830.92,686.929 1831.48,686.929 1832.04,686.929 1832.6,686.929 1833.16,686.929 1833.72,686.929 1834.27,686.929 1834.83,686.929 1835.39,686.929 1835.95,686.929 1836.51,686.929 1837.07,686.929 1837.63,686.929 1838.19,686.929 \"/>\n<path clip-path=\"url(#clip483)\" d=\"M720.247 684.126 L720.806 684.126 L721.365 684.126 L721.924 684.126 L722.484 684.126 L723.043 684.126 L723.602 684.126 L724.161 684.126 L724.721 684.126 L725.28 684.126 L725.839 684.126 L726.398 684.126 L726.958 684.126 L727.517 684.126 L728.076 684.126 L728.635 684.126 L729.195 684.126 L729.754 684.126 L730.313 684.126 L730.872 684.126 L731.432 684.126 L731.991 684.126 L732.55 684.126 L733.109 684.126 L733.669 684.126 L734.228 684.126 L734.787 684.126 L735.346 684.126 L735.906 684.126 L736.465 684.126 L737.024 684.126 L737.583 684.126 L738.143 684.126 L738.702 684.126 L739.261 684.126 L739.82 684.126 L740.38 684.126 L740.939 684.126 L741.498 684.126 L742.057 684.126 L742.617 684.126 L743.176 684.126 L743.735 684.126 L744.294 684.126 L744.854 684.126 L745.413 684.126 L745.972 684.126 L746.531 684.126 L747.091 684.126 L747.65 684.126 L748.209 684.126 L748.768 684.126 L749.328 684.126 L749.887 684.126 L750.446 684.126 L751.005 684.126 L751.565 684.126 L752.124 684.126 L752.683 684.126 L753.242 684.126 L753.802 684.126 L754.361 684.126 L754.92 684.126 L755.479 684.126 L756.039 684.126 L756.598 684.126 L757.157 684.126 L757.716 684.126 L758.276 684.126 L758.835 684.126 L759.394 684.126 L759.953 684.126 L760.513 684.126 L761.072 684.126 L761.631 684.126 L762.19 684.126 L762.75 684.126 L763.309 684.126 L763.868 684.126 L764.427 684.126 L764.987 684.126 L765.546 684.126 L766.105 684.126 L766.664 684.126 L767.224 684.126 L767.783 684.126 L768.342 684.126 L768.901 684.126 L769.461 684.126 L770.02 684.126 L770.579 684.126 L771.138 684.126 L771.698 684.126 L772.257 684.126 L772.816 684.126 L773.375 684.126 L773.935 684.126 L774.494 684.126 L775.053 684.126 L775.612 684.126 L776.172 684.126 L776.731 684.126 L777.29 684.126 L777.849 684.126 L778.409 684.126 L778.968 684.126 L779.527 684.126 L780.086 684.126 L780.646 684.126 L781.205 684.126 L781.764 684.126 L782.323 684.126 L782.883 684.126 L783.442 684.126 L784.001 684.126 L784.56 684.126 L785.12 684.126 L785.679 684.126 L786.238 684.126 L786.797 684.126 L787.357 684.126 L787.916 684.126 L788.475 684.126 L789.034 684.126 L789.594 684.126 L790.153 684.126 L790.712 684.126 L791.271 684.126 L791.831 684.126 L792.39 684.126 L792.949 684.126 L793.508 684.126 L794.068 684.126 L794.627 684.126 L795.186 684.126 L795.745 684.126 L796.305 684.126 L796.864 684.126 L797.423 684.126 L797.982 684.126 L798.542 684.126 L799.101 684.126 L799.66 684.126 L800.219 684.126 L800.779 684.126 L801.338 684.126 L801.897 684.126 L802.456 684.126 L803.016 684.126 L803.575 684.126 L804.134 684.126 L804.693 684.126 L805.253 684.126 L805.812 684.126 L806.371 684.126 L806.931 684.126 L807.49 684.126 L808.049 684.126 L808.608 684.126 L809.168 684.126 L809.727 684.126 L810.286 684.126 L810.845 684.126 L811.405 684.126 L811.964 684.126 L812.523 684.126 L813.082 684.126 L813.642 684.126 L814.201 684.126 L814.76 684.126 L815.319 684.126 L815.879 684.126 L816.438 684.126 L816.997 684.126 L817.556 684.126 L818.116 684.126 L818.675 684.126 L819.234 684.126 L819.793 684.126 L820.353 684.126 L820.912 684.126 L821.471 684.126 L822.03 684.126 L822.59 684.126 L823.149 684.126 L823.708 684.126 L824.267 684.126 L824.827 684.126 L825.386 684.126 L825.945 684.126 L826.504 684.126 L827.064 684.126 L827.623 684.126 L828.182 684.126 L828.741 684.126 L829.301 684.126 L829.86 684.126 L830.419 684.126 L830.978 684.126 L831.538 684.126 L832.097 684.126 L832.656 684.126 L833.215 684.126 L833.775 684.126 L834.334 684.126 L834.893 684.126 L835.452 684.126 L836.012 684.126 L836.571 684.126 L837.13 684.126 L837.689 684.126 L838.249 684.126 L838.808 684.126 L839.367 684.126 L839.926 684.126 L840.486 684.126 L841.045 684.126 L841.604 684.126 L842.163 684.126 L842.723 684.126 L843.282 684.126 L843.841 684.126 L844.4 684.126 L844.96 684.126 L845.519 684.126 L846.078 684.126 L846.637 684.126 L847.197 684.126 L847.756 684.126 L848.315 684.126 L848.874 684.126 L849.434 684.126 L849.993 684.126 L850.552 684.126 L851.111 684.126 L851.671 684.126 L852.23 684.126 L852.789 684.126 L853.348 684.126 L853.908 684.126 L854.467 684.126 L855.026 684.126 L855.585 684.126 L856.145 684.126 L856.704 684.126 L857.263 684.126 L857.822 684.126 L858.382 684.126 L858.941 684.126 L859.5 684.126 L860.059 684.126 L860.619 684.126 L861.178 684.126 L861.737 684.126 L862.296 684.126 L862.856 684.126 L863.415 684.126 L863.974 684.126 L864.533 684.126 L865.093 684.126 L865.652 684.126 L866.211 684.126 L866.77 684.126 L867.33 684.126 L867.889 684.126 L868.448 684.126 L869.007 684.126 L869.567 684.126 L870.126 684.126 L870.685 684.126 L871.244 684.126 L871.804 684.126 L872.363 684.126 L872.922 684.126 L873.481 684.126 L874.041 684.126 L874.6 684.126 L875.159 684.126 L875.718 684.126 L876.278 684.126 L876.837 684.126 L877.396 684.126 L877.955 684.126 L878.515 684.126 L879.074 684.126 L879.633 684.126 L880.192 684.126 L880.752 684.126 L881.311 684.126 L881.87 684.126 L882.429 684.126 L882.989 684.126 L883.548 684.126 L884.107 684.126 L884.666 684.126 L885.226 684.126 L885.785 684.126 L886.344 684.126 L886.903 684.126 L887.463 684.126 L888.022 684.126 L888.581 684.126 L889.14 684.126 L889.7 684.126 L890.259 684.126 L890.818 684.126 L891.377 684.126 L891.937 684.126 L892.496 684.126 L893.055 684.126 L893.614 684.126 L894.174 684.126 L894.733 684.126 L895.292 684.126 L895.851 684.126 L896.411 684.126 L896.97 684.126 L897.529 684.126 L898.088 684.126 L898.648 684.126 L899.207 684.126 L899.766 684.126 L900.325 684.126 L900.885 684.126 L901.444 684.126 L902.003 684.126 L902.562 684.126 L903.122 684.126 L903.681 684.126 L904.24 684.126 L904.799 684.126 L905.359 684.126 L905.918 684.126 L906.477 684.126 L907.036 684.126 L907.596 684.126 L908.155 684.126 L908.714 684.126 L909.273 684.126 L909.833 684.126 L910.392 684.126 L910.951 684.126 L911.51 684.126 L912.07 684.126 L912.629 684.126 L913.188 684.126 L913.747 684.126 L914.307 684.126 L914.866 684.126 L915.425 684.126 L915.984 684.126 L916.544 684.126 L917.103 684.126 L917.662 684.126 L918.221 684.126 L918.781 684.126 L919.34 684.126 L919.899 684.126 L920.458 684.126 L921.018 684.126 L921.577 684.126 L922.136 684.126 L922.695 684.126 L923.255 684.126 L923.814 684.126 L924.373 684.126 L924.932 684.126 L925.492 684.126 L926.051 684.126 L926.61 684.126 L927.169 684.126 L927.729 684.126 L928.288 684.126 L928.847 684.126 L929.406 684.126 L929.966 684.126 L930.525 684.126 L931.084 684.126 L931.644 684.126 L932.203 684.126 L932.762 684.126 L933.321 684.126 L933.881 684.126 L934.44 684.126 L934.999 684.126 L935.558 684.126 L936.118 684.126 L936.677 684.126 L937.236 684.126 L937.795 684.126 L938.355 684.126 L938.914 684.126 L939.473 684.126 L940.032 684.126 L940.592 684.126 L941.151 684.126 L941.71 684.126 L942.269 684.126 L942.829 684.126 L943.388 684.126 L943.947 684.126 L944.506 684.126 L945.066 684.126 L945.625 684.126 L946.184 684.126 L946.743 684.126 L947.303 684.126 L947.862 684.126 L948.421 684.126 L948.98 684.126 L949.54 684.126 L950.099 684.126 L950.658 684.126 L951.217 684.126 L951.777 684.126 L952.336 684.126 L952.895 684.126 L953.454 684.126 L954.014 684.126 L954.573 684.126 L955.132 684.126 L955.691 684.126 L956.251 684.126 L956.81 684.126 L957.369 684.126 L957.928 684.126 L958.488 684.126 L959.047 684.126 L959.606 684.126 L960.165 684.126 L960.725 684.126 L961.284 684.126 L961.843 684.126 L962.402 684.126 L962.962 684.126 L963.521 684.126 L964.08 684.126 L964.639 684.126 L965.199 684.126 L965.758 684.126 L966.317 684.126 L966.876 684.126 L967.436 684.126 L967.995 684.126 L968.554 684.126 L969.113 684.126 L969.673 684.126 L970.232 684.126 L970.791 684.126 L971.35 684.126 L971.91 684.126 L972.469 684.126 L973.028 684.126 L973.587 684.126 L974.147 684.126 L974.706 684.126 L975.265 684.126 L975.824 684.126 L976.384 684.126 L976.943 684.126 L977.502 684.126 L978.061 684.126 L978.621 684.126 L979.18 684.126 L979.739 684.126 L980.298 684.126 L980.858 684.126 L981.417 684.126 L981.976 684.126 L982.535 684.126 L983.095 684.126 L983.654 684.126 L984.213 684.126 L984.772 684.126 L985.332 684.126 L985.891 684.126 L986.45 684.126 L987.009 684.126 L987.569 684.126 L988.128 684.126 L988.687 684.126 L989.246 684.126 L989.806 684.126 L990.365 684.126 L990.924 684.126 L991.483 684.126 L992.043 684.126 L992.602 684.126 L993.161 684.126 L993.72 684.126 L994.28 684.126 L994.839 684.126 L995.398 684.126 L995.957 684.126 L996.517 684.126 L997.076 684.126 L997.635 684.126 L998.194 684.126 L998.754 684.126 L999.313 684.126 L999.872 684.126 L1000.43 684.126 L1000.99 684.126 L1001.55 684.126 L1002.11 684.126 L1002.67 684.126 L1003.23 684.126 L1003.79 684.126 L1004.35 684.126 L1004.91 684.126 L1005.46 684.126 L1006.02 684.126 L1006.58 684.126 L1007.14 684.126 L1007.7 684.126 L1008.26 684.126 L1008.82 684.126 L1009.38 684.126 L1009.94 684.126 L1010.5 684.126 L1011.06 684.126 L1011.62 684.126 L1012.18 684.126 L1012.73 684.126 L1013.29 684.126 L1013.85 684.126 L1014.41 684.126 L1014.97 684.126 L1015.53 684.126 L1016.09 684.126 L1016.65 684.126 L1017.21 684.126 L1017.77 684.126 L1018.33 684.126 L1018.89 684.126 L1019.45 684.126 L1020.01 684.126 L1020.56 684.126 L1021.12 684.126 L1021.68 684.126 L1022.24 684.126 L1022.8 684.126 L1023.36 684.126 L1023.92 684.126 L1024.48 684.126 L1025.04 684.126 L1025.6 684.126 L1026.16 684.126 L1026.72 684.126 L1027.28 684.126 L1027.83 684.126 L1028.39 684.126 L1028.95 684.126 L1029.51 684.126 L1030.07 684.126 L1030.63 684.126 L1031.19 684.126 L1031.75 684.126 L1032.31 684.126 L1032.87 684.126 L1033.43 684.126 L1033.99 684.126 L1034.55 684.126 L1035.1 684.126 L1035.66 684.126 L1036.22 684.126 L1036.78 684.126 L1037.34 684.126 L1037.9 684.126 L1038.46 684.126 L1039.02 684.126 L1039.58 684.126 L1040.14 684.126 L1040.7 684.126 L1041.26 684.126 L1041.82 684.126 L1042.38 684.126 L1042.93 684.126 L1043.49 684.126 L1044.05 684.126 L1044.61 684.126 L1045.17 684.126 L1045.73 684.126 L1046.29 684.126 L1046.85 684.126 L1047.41 684.126 L1047.97 684.126 L1048.53 684.126 L1049.09 684.126 L1049.65 684.126 L1050.2 684.126 L1050.76 684.126 L1051.32 684.126 L1051.88 684.126 L1052.44 684.126 L1053 684.126 L1053.56 684.126 L1054.12 684.126 L1054.68 684.126 L1055.24 684.126 L1055.8 684.126 L1056.36 684.126 L1056.92 684.126 L1057.48 684.126 L1058.03 684.126 L1058.59 684.126 L1059.15 684.126 L1059.71 684.126 L1060.27 684.126 L1060.83 684.126 L1061.39 684.126 L1061.95 684.126 L1062.51 684.126 L1063.07 684.126 L1063.63 684.126 L1064.19 684.126 L1064.75 684.126 L1065.3 684.126 L1065.86 684.126 L1066.42 684.126 L1066.98 684.126 L1067.54 684.126 L1068.1 684.126 L1068.66 684.126 L1069.22 684.126 L1069.78 684.126 L1070.34 684.126 L1070.9 684.126 L1071.46 684.126 L1072.02 684.126 L1072.57 684.126 L1073.13 684.126 L1073.69 684.126 L1074.25 684.126 L1074.81 684.126 L1075.37 684.126 L1075.93 684.126 L1076.49 684.126 L1077.05 684.126 L1077.61 684.126 L1078.17 684.126 L1078.73 684.126 L1079.29 684.126 L1079.85 684.126 L1080.4 684.126 L1080.96 684.126 L1081.52 684.126 L1082.08 684.126 L1082.64 684.126 L1083.2 684.126 L1083.76 684.126 L1084.32 684.126 L1084.88 684.126 L1085.44 684.126 L1086 684.126 L1086.56 684.126 L1087.12 684.126 L1087.67 684.126 L1088.23 684.126 L1088.79 684.126 L1089.35 684.126 L1089.91 684.126 L1090.47 684.126 L1091.03 684.126 L1091.59 684.126 L1092.15 684.126 L1092.71 684.126 L1093.27 684.126 L1093.83 684.126 L1094.39 684.126 L1094.94 684.126 L1095.5 684.126 L1096.06 684.126 L1096.62 684.126 L1097.18 684.126 L1097.74 684.126 L1098.3 684.126 L1098.86 684.126 L1099.42 684.126 L1099.98 684.126 L1100.54 684.126 L1101.1 684.126 L1101.66 684.126 L1102.22 684.126 L1102.77 684.126 L1103.33 684.126 L1103.89 684.126 L1104.45 684.126 L1105.01 684.126 L1105.57 684.126 L1106.13 684.126 L1106.69 684.126 L1107.25 684.126 L1107.81 684.126 L1108.37 684.126 L1108.93 684.126 L1109.49 684.126 L1110.04 684.126 L1110.6 684.126 L1111.16 684.126 L1111.72 684.126 L1112.28 684.126 L1112.84 684.126 L1113.4 684.126 L1113.96 684.126 L1114.52 684.126 L1115.08 684.126 L1115.64 684.126 L1116.2 684.126 L1116.76 684.126 L1117.31 684.126 L1117.87 684.126 L1118.43 684.126 L1118.99 684.126 L1119.55 684.126 L1120.11 684.126 L1120.67 684.126 L1121.23 684.126 L1121.79 684.126 L1122.35 684.126 L1122.91 684.126 L1123.47 684.126 L1124.03 684.126 L1124.59 684.126 L1125.14 684.126 L1125.7 684.126 L1126.26 684.126 L1126.82 684.126 L1127.38 684.126 L1127.94 684.126 L1128.5 684.126 L1129.06 684.126 L1129.62 684.126 L1130.18 684.126 L1130.74 684.126 L1131.3 684.126 L1131.86 684.126 L1132.41 684.126 L1132.97 684.126 L1133.53 684.126 L1134.09 684.126 L1134.65 684.126 L1135.21 684.126 L1135.77 684.126 L1136.33 684.126 L1136.89 684.126 L1137.45 684.126 L1138.01 684.126 L1138.57 684.126 L1139.13 684.126 L1139.68 684.126 L1140.24 684.126 L1140.8 684.126 L1141.36 684.126 L1141.92 684.126 L1142.48 684.126 L1143.04 684.126 L1143.6 684.126 L1144.16 684.126 L1144.72 684.126 L1145.28 684.126 L1145.84 684.126 L1146.4 684.126 L1146.96 684.126 L1147.51 684.126 L1148.07 684.126 L1148.63 684.126 L1149.19 684.126 L1149.75 684.126 L1150.31 684.126 L1150.87 684.126 L1151.43 684.126 L1151.99 684.126 L1152.55 684.126 L1153.11 684.126 L1153.67 684.126 L1154.23 684.126 L1154.78 684.126 L1155.34 684.126 L1155.9 684.126 L1156.46 684.126 L1157.02 684.126 L1157.58 684.126 L1158.14 684.126 L1158.7 684.126 L1159.26 684.126 L1159.82 684.126 L1160.38 684.126 L1160.94 684.126 L1161.5 684.126 L1162.05 684.126 L1162.61 684.126 L1163.17 684.126 L1163.73 684.126 L1164.29 684.126 L1164.85 684.126 L1165.41 684.126 L1165.97 684.126 L1166.53 684.126 L1167.09 684.126 L1167.65 684.126 L1168.21 684.126 L1168.77 684.126 L1169.33 684.126 L1169.88 684.126 L1170.44 684.126 L1171 684.126 L1171.56 684.126 L1172.12 684.126 L1172.68 684.126 L1173.24 684.126 L1173.8 684.126 L1174.36 684.126 L1174.92 684.126 L1175.48 684.126 L1176.04 684.126 L1176.6 684.126 L1177.15 684.126 L1177.71 684.126 L1178.27 684.126 L1178.83 684.126 L1179.39 684.126 L1179.95 684.126 L1180.51 684.126 L1181.07 684.126 L1181.63 684.126 L1182.19 684.126 L1182.75 684.126 L1183.31 684.126 L1183.87 684.126 L1184.43 684.126 L1184.98 684.126 L1185.54 684.126 L1186.1 684.126 L1186.66 684.126 L1187.22 684.126 L1187.78 684.126 L1188.34 684.126 L1188.9 684.126 L1189.46 684.126 L1190.02 684.126 L1190.58 684.126 L1191.14 684.126 L1191.7 684.126 L1192.25 684.126 L1192.81 684.126 L1193.37 684.126 L1193.93 684.126 L1194.49 684.126 L1195.05 684.126 L1195.61 684.126 L1196.17 684.126 L1196.73 684.126 L1197.29 684.126 L1197.85 684.126 L1198.41 684.126 L1198.97 684.126 L1199.52 684.126 L1200.08 684.126 L1200.64 684.126 L1201.2 684.126 L1201.76 684.126 L1202.32 684.126 L1202.88 684.126 L1203.44 684.126 L1204 684.126 L1204.56 684.126 L1205.12 684.126 L1205.68 684.126 L1206.24 684.126 L1206.8 684.126 L1207.35 684.126 L1207.91 684.126 L1208.47 684.126 L1209.03 684.126 L1209.59 684.126 L1210.15 684.126 L1210.71 684.126 L1211.27 684.126 L1211.83 684.126 L1212.39 684.126 L1212.95 684.126 L1213.51 684.126 L1214.07 684.126 L1214.62 684.126 L1215.18 684.126 L1215.74 684.126 L1216.3 684.126 L1216.86 684.126 L1217.42 684.126 L1217.98 684.126 L1218.54 684.126 L1219.1 684.126 L1219.66 684.126 L1220.22 684.126 L1220.78 684.126 L1221.34 684.126 L1221.89 684.126 L1222.45 684.126 L1223.01 684.126 L1223.57 684.126 L1224.13 684.126 L1224.69 684.126 L1225.25 684.126 L1225.81 684.126 L1226.37 684.126 L1226.93 684.126 L1227.49 684.126 L1228.05 684.126 L1228.61 684.126 L1229.17 684.126 L1229.72 684.126 L1230.28 684.126 L1230.84 684.126 L1231.4 684.126 L1231.96 684.126 L1232.52 684.126 L1233.08 684.126 L1233.64 684.126 L1234.2 684.126 L1234.76 684.126 L1235.32 684.126 L1235.88 684.126 L1236.44 684.126 L1236.99 684.126 L1237.55 684.126 L1238.11 684.126 L1238.67 684.126 L1239.23 684.126 L1239.79 684.126 L1240.35 684.126 L1240.91 684.126 L1241.47 684.126 L1242.03 684.126 L1242.59 684.126 L1243.15 684.126 L1243.71 684.126 L1244.26 684.126 L1244.82 684.126 L1245.38 684.126 L1245.94 684.126 L1246.5 684.126 L1247.06 684.126 L1247.62 684.126 L1248.18 684.126 L1248.74 684.126 L1249.3 684.126 L1249.86 684.126 L1250.42 684.126 L1250.98 684.126 L1251.54 684.126 L1252.09 684.126 L1252.65 684.126 L1253.21 684.126 L1253.77 684.126 L1254.33 684.126 L1254.89 684.126 L1255.45 684.126 L1256.01 684.126 L1256.57 684.126 L1257.13 684.126 L1257.69 684.126 L1258.25 684.126 L1258.81 684.126 L1259.36 684.126 L1259.92 684.126 L1260.48 684.126 L1261.04 684.126 L1261.6 684.126 L1262.16 684.126 L1262.72 684.126 L1263.28 684.126 L1263.84 684.126 L1264.4 684.126 L1264.96 684.126 L1265.52 684.126 L1266.08 684.126 L1266.63 684.126 L1267.19 684.126 L1267.75 684.126 L1268.31 684.126 L1268.87 684.126 L1269.43 684.126 L1269.99 684.126 L1270.55 684.126 L1271.11 684.126 L1271.67 684.126 L1272.23 684.126 L1272.79 684.126 L1273.35 684.126 L1273.91 684.126 L1274.46 684.126 L1275.02 684.126 L1275.58 684.126 L1276.14 684.126 L1276.7 684.126 L1277.26 684.126 L1277.82 684.126 L1278.38 684.126 L1278.94 684.126 L1279.5 684.126 L1280.06 684.126 L1280.62 684.126 L1281.18 684.126 L1281.73 684.126 L1282.29 684.126 L1282.85 684.126 L1283.41 684.126 L1283.97 684.126 L1284.53 684.126 L1285.09 684.126 L1285.65 684.126 L1286.21 684.126 L1286.77 684.126 L1287.33 684.126 L1287.89 684.126 L1288.45 684.126 L1289 684.126 L1289.56 684.126 L1290.12 684.126 L1290.68 684.126 L1291.24 684.126 L1291.8 684.126 L1292.36 684.126 L1292.92 684.126 L1293.48 684.126 L1294.04 684.126 L1294.6 684.126 L1295.16 684.126 L1295.72 684.126 L1296.28 684.126 L1296.83 684.126 L1297.39 684.126 L1297.95 684.126 L1298.51 684.126 L1299.07 684.126 L1299.63 684.126 L1300.19 684.126 L1300.75 684.126 L1301.31 684.126 L1301.87 684.126 L1302.43 684.126 L1302.99 684.126 L1303.55 684.126 L1304.1 684.126 L1304.66 684.126 L1305.22 684.126 L1305.78 684.126 L1306.34 684.126 L1306.9 684.126 L1307.46 684.126 L1308.02 684.126 L1308.58 684.126 L1309.14 684.126 L1309.7 684.126 L1310.26 684.126 L1310.82 684.126 L1311.38 684.126 L1311.93 684.126 L1312.49 684.126 L1313.05 684.126 L1313.61 684.126 L1314.17 684.126 L1314.73 684.126 L1315.29 684.126 L1315.85 684.126 L1316.41 684.126 L1316.97 684.126 L1317.53 684.126 L1318.09 684.126 L1318.65 684.126 L1319.2 684.126 L1319.76 684.126 L1320.32 684.126 L1320.88 684.126 L1321.44 684.126 L1322 684.126 L1322.56 684.126 L1323.12 684.126 L1323.68 684.126 L1324.24 684.126 L1324.8 684.126 L1325.36 684.126 L1325.92 684.126 L1326.47 684.126 L1327.03 684.126 L1327.59 684.126 L1328.15 684.126 L1328.71 684.126 L1329.27 684.126 L1329.83 684.126 L1330.39 684.126 L1330.95 684.126 L1331.51 684.126 L1332.07 684.126 L1332.63 684.126 L1333.19 684.126 L1333.75 684.126 L1334.3 684.126 L1334.86 684.126 L1335.42 684.126 L1335.98 684.126 L1336.54 684.126 L1337.1 684.126 L1337.66 684.126 L1338.22 684.126 L1338.78 684.126 L1339.34 684.126 L1339.9 684.126 L1340.46 684.126 L1341.02 684.126 L1341.57 684.126 L1342.13 684.126 L1342.69 684.126 L1343.25 684.126 L1343.81 684.126 L1344.37 684.126 L1344.93 684.126 L1345.49 684.126 L1346.05 684.126 L1346.61 684.126 L1347.17 684.126 L1347.73 684.126 L1348.29 684.126 L1348.84 684.126 L1349.4 684.126 L1349.96 684.126 L1350.52 684.126 L1351.08 684.126 L1351.64 684.126 L1352.2 684.126 L1352.76 684.126 L1353.32 684.126 L1353.88 684.126 L1354.44 684.126 L1355 684.126 L1355.56 684.126 L1356.12 684.126 L1356.67 684.126 L1357.23 684.126 L1357.79 684.126 L1358.35 684.126 L1358.91 684.126 L1359.47 684.126 L1360.03 684.126 L1360.59 684.126 L1361.15 684.126 L1361.71 684.126 L1362.27 684.126 L1362.83 684.126 L1363.39 684.126 L1363.94 684.126 L1364.5 684.126 L1365.06 684.126 L1365.62 684.126 L1366.18 684.126 L1366.74 684.126 L1367.3 684.126 L1367.86 684.126 L1368.42 684.126 L1368.98 684.126 L1369.54 684.126 L1370.1 684.126 L1370.66 684.126 L1371.21 684.126 L1371.77 684.126 L1372.33 684.126 L1372.89 684.126 L1373.45 684.126 L1374.01 684.126 L1374.57 684.126 L1375.13 684.126 L1375.69 684.126 L1376.25 684.126 L1376.81 684.126 L1377.37 684.126 L1377.93 684.126 L1378.49 684.126 L1379.04 684.126 L1379.6 684.126 L1380.16 684.126 L1380.72 684.126 L1381.28 684.126 L1381.84 684.126 L1382.4 684.126 L1382.96 684.126 L1383.52 684.126 L1384.08 684.126 L1384.64 684.126 L1385.2 684.126 L1385.76 684.126 L1386.31 684.126 L1386.87 684.126 L1387.43 684.126 L1387.99 684.126 L1388.55 684.126 L1389.11 684.126 L1389.67 684.126 L1390.23 684.126 L1390.79 684.126 L1391.35 684.126 L1391.91 684.126 L1392.47 684.126 L1393.03 684.126 L1393.58 684.126 L1394.14 684.126 L1394.7 684.126 L1395.26 684.126 L1395.82 684.126 L1396.38 684.126 L1396.94 684.126 L1397.5 684.126 L1398.06 684.126 L1398.62 684.126 L1399.18 684.126 L1399.74 684.126 L1400.3 684.126 L1400.86 684.126 L1401.41 684.126 L1401.97 684.126 L1402.53 684.126 L1403.09 684.126 L1403.65 684.126 L1404.21 684.126 L1404.77 684.126 L1405.33 684.126 L1405.89 684.126 L1406.45 684.126 L1407.01 684.126 L1407.57 684.126 L1408.13 684.126 L1408.68 684.126 L1409.24 684.126 L1409.8 684.126 L1410.36 684.126 L1410.92 684.126 L1411.48 684.126 L1412.04 684.126 L1412.6 684.126 L1413.16 684.126 L1413.72 684.126 L1414.28 684.126 L1414.84 684.126 L1415.4 684.126 L1415.95 684.126 L1416.51 684.126 L1417.07 684.126 L1417.63 684.126 L1418.19 684.126 L1418.75 684.126 L1419.31 684.126 L1419.87 684.126 L1420.43 684.126 L1420.99 684.126 L1421.55 684.126 L1422.11 684.126 L1422.67 684.126 L1423.23 684.126 L1423.78 684.126 L1424.34 684.126 L1424.9 684.126 L1425.46 684.126 L1426.02 684.126 L1426.58 684.126 L1427.14 684.126 L1427.7 684.126 L1428.26 684.126 L1428.82 684.126 L1429.38 684.126 L1429.94 684.126 L1430.5 684.126 L1431.05 684.126 L1431.61 684.126 L1432.17 684.126 L1432.73 684.126 L1433.29 684.126 L1433.85 684.126 L1434.41 684.126 L1434.97 684.126 L1435.53 684.126 L1436.09 684.126 L1436.65 684.126 L1437.21 684.126 L1437.77 684.126 L1438.33 684.126 L1438.88 684.126 L1439.44 684.126 L1440 684.126 L1440.56 684.126 L1441.12 684.126 L1441.68 684.126 L1442.24 684.126 L1442.8 684.126 L1443.36 684.126 L1443.92 684.126 L1444.48 684.126 L1445.04 684.126 L1445.6 684.126 L1446.15 684.126 L1446.71 684.126 L1447.27 684.126 L1447.83 684.126 L1448.39 684.126 L1448.95 684.126 L1449.51 684.126 L1450.07 684.126 L1450.63 684.126 L1451.19 684.126 L1451.75 684.126 L1452.31 684.126 L1452.87 684.126 L1453.42 684.126 L1453.98 684.126 L1454.54 684.126 L1455.1 684.126 L1455.66 684.126 L1456.22 684.126 L1456.78 684.126 L1457.34 684.126 L1457.9 684.126 L1458.46 684.126 L1459.02 684.126 L1459.58 684.126 L1460.14 684.126 L1460.7 684.126 L1461.25 684.126 L1461.81 684.126 L1462.37 684.126 L1462.93 684.126 L1463.49 684.126 L1464.05 684.126 L1464.61 684.126 L1465.17 684.126 L1465.73 684.126 L1466.29 684.126 L1466.85 684.126 L1467.41 684.126 L1467.97 684.126 L1468.52 684.126 L1469.08 684.126 L1469.64 684.126 L1470.2 684.126 L1470.76 684.126 L1471.32 684.126 L1471.88 684.126 L1472.44 684.126 L1473 684.126 L1473.56 684.126 L1474.12 684.126 L1474.68 684.126 L1475.24 684.126 L1475.79 684.126 L1476.35 684.126 L1476.91 684.126 L1477.47 684.126 L1478.03 684.126 L1478.59 684.126 L1479.15 684.126 L1479.71 684.126 L1480.27 684.126 L1480.83 684.126 L1481.39 684.126 L1481.95 684.126 L1482.51 684.126 L1483.07 684.126 L1483.62 684.126 L1484.18 684.126 L1484.74 684.126 L1485.3 684.126 L1485.86 684.126 L1486.42 684.126 L1486.98 684.126 L1487.54 684.126 L1488.1 684.126 L1488.66 684.126 L1489.22 684.126 L1489.78 684.126 L1490.34 684.126 L1490.89 684.126 L1491.45 684.126 L1492.01 684.126 L1492.57 684.126 L1493.13 684.126 L1493.69 684.126 L1494.25 684.126 L1494.81 684.126 L1495.37 684.126 L1495.93 684.126 L1496.49 684.126 L1497.05 684.126 L1497.61 684.126 L1498.16 684.126 L1498.72 684.126 L1499.28 684.126 L1499.84 684.126 L1500.4 684.126 L1500.96 684.126 L1501.52 684.126 L1502.08 684.126 L1502.64 684.126 L1503.2 684.126 L1503.76 684.126 L1504.32 684.126 L1504.88 684.126 L1505.44 684.126 L1505.99 684.126 L1506.55 684.126 L1507.11 684.126 L1507.67 684.126 L1508.23 684.126 L1508.79 684.126 L1509.35 684.126 L1509.91 684.126 L1510.47 684.126 L1511.03 684.126 L1511.59 684.126 L1512.15 684.126 L1512.71 684.126 L1513.26 684.126 L1513.82 684.126 L1514.38 684.126 L1514.94 684.126 L1515.5 684.126 L1516.06 684.126 L1516.62 684.126 L1517.18 684.126 L1517.74 684.126 L1518.3 684.126 L1518.86 684.126 L1519.42 684.126 L1519.98 684.126 L1520.53 684.126 L1521.09 684.126 L1521.65 684.126 L1522.21 684.126 L1522.77 684.126 L1523.33 684.126 L1523.89 684.126 L1524.45 684.126 L1525.01 684.126 L1525.57 684.126 L1526.13 684.126 L1526.69 684.126 L1527.25 684.126 L1527.81 684.126 L1528.36 684.126 L1528.92 684.126 L1529.48 684.126 L1530.04 684.126 L1530.6 684.126 L1531.16 684.126 L1531.72 684.126 L1532.28 684.126 L1532.84 684.126 L1533.4 684.126 L1533.96 684.126 L1534.52 684.126 L1535.08 684.126 L1535.63 684.126 L1536.19 684.126 L1536.75 684.126 L1537.31 684.126 L1537.87 684.126 L1538.43 684.126 L1538.99 684.126 L1539.55 684.126 L1540.11 684.126 L1540.67 684.126 L1541.23 684.126 L1541.79 684.126 L1542.35 684.126 L1542.9 684.126 L1543.46 684.126 L1544.02 684.126 L1544.58 684.126 L1545.14 684.126 L1545.7 684.126 L1546.26 684.126 L1546.82 684.126 L1547.38 684.126 L1547.94 684.126 L1548.5 684.126 L1549.06 684.126 L1549.62 684.126 L1550.18 684.126 L1550.73 684.126 L1551.29 684.126 L1551.85 684.126 L1552.41 684.126 L1552.97 684.126 L1553.53 684.126 L1554.09 684.126 L1554.65 684.126 L1555.21 684.126 L1555.77 684.126 L1556.33 684.126 L1556.89 684.126 L1557.45 684.126 L1558 684.126 L1558.56 684.126 L1559.12 684.126 L1559.68 684.126 L1560.24 684.126 L1560.8 684.126 L1561.36 684.126 L1561.92 684.126 L1562.48 684.126 L1563.04 684.126 L1563.6 684.126 L1564.16 684.126 L1564.72 684.126 L1565.28 684.126 L1565.83 684.126 L1566.39 684.126 L1566.95 684.126 L1567.51 684.126 L1568.07 684.126 L1568.63 684.126 L1569.19 684.126 L1569.75 684.126 L1570.31 684.126 L1570.87 684.126 L1571.43 684.126 L1571.99 684.126 L1572.55 684.126 L1573.1 684.126 L1573.66 684.126 L1574.22 684.126 L1574.78 684.126 L1575.34 684.126 L1575.9 684.126 L1576.46 684.126 L1577.02 684.126 L1577.58 684.126 L1578.14 684.126 L1578.7 684.126 L1579.26 684.126 L1579.82 684.126 L1580.37 684.126 L1580.93 684.126 L1581.49 684.126 L1582.05 684.126 L1582.61 684.126 L1583.17 684.126 L1583.73 684.126 L1584.29 684.126 L1584.85 684.126 L1585.41 684.126 L1585.97 684.126 L1586.53 684.126 L1587.09 684.126 L1587.65 684.126 L1588.2 684.126 L1588.76 684.126 L1589.32 684.126 L1589.88 684.126 L1590.44 684.126 L1591 684.126 L1591.56 684.126 L1592.12 684.126 L1592.68 684.126 L1593.24 684.126 L1593.8 684.126 L1594.36 684.126 L1594.92 684.126 L1595.47 684.126 L1596.03 684.126 L1596.59 684.126 L1597.15 684.126 L1597.71 684.126 L1598.27 684.126 L1598.83 684.126 L1599.39 684.126 L1599.95 684.126 L1600.51 684.126 L1601.07 684.126 L1601.63 684.126 L1602.19 684.126 L1602.74 684.126 L1603.3 684.126 L1603.86 684.126 L1604.42 684.126 L1604.98 684.126 L1605.54 684.126 L1606.1 684.126 L1606.66 684.126 L1607.22 684.126 L1607.78 684.126 L1608.34 684.126 L1608.9 684.126 L1609.46 684.126 L1610.02 684.126 L1610.57 684.126 L1611.13 684.126 L1611.69 684.126 L1612.25 684.126 L1612.81 684.126 L1613.37 684.126 L1613.93 684.126 L1614.49 684.126 L1615.05 684.126 L1615.61 684.126 L1616.17 684.126 L1616.73 684.126 L1617.29 684.126 L1617.84 684.126 L1618.4 684.126 L1618.96 684.126 L1619.52 684.126 L1620.08 684.126 L1620.64 684.126 L1621.2 684.126 L1621.76 684.126 L1622.32 684.126 L1622.88 684.126 L1623.44 684.126 L1624 684.126 L1624.56 684.126 L1625.11 684.126 L1625.67 684.126 L1626.23 684.126 L1626.79 684.126 L1627.35 684.126 L1627.91 684.126 L1628.47 684.126 L1629.03 684.126 L1629.59 684.126 L1630.15 684.126 L1630.71 684.126 L1631.27 684.126 L1631.83 684.126 L1632.39 684.126 L1632.94 684.126 L1633.5 684.126 L1634.06 684.126 L1634.62 684.126 L1635.18 684.126 L1635.74 684.126 L1636.3 684.126 L1636.86 684.126 L1637.42 684.126 L1637.98 684.126 L1638.54 684.126 L1639.1 684.126 L1639.66 684.126 L1640.21 684.126 L1640.77 684.126 L1641.33 684.126 L1641.89 684.126 L1642.45 684.126 L1643.01 684.126 L1643.57 684.126 L1644.13 684.126 L1644.69 684.126 L1645.25 684.126 L1645.81 684.126 L1646.37 684.126 L1646.93 684.126 L1647.48 684.126 L1648.04 684.126 L1648.6 684.126 L1649.16 684.126 L1649.72 684.126 L1650.28 684.126 L1650.84 684.126 L1651.4 684.126 L1651.96 684.126 L1652.52 684.126 L1653.08 684.126 L1653.64 684.126 L1654.2 684.126 L1654.76 684.126 L1655.31 684.126 L1655.87 684.126 L1656.43 684.126 L1656.99 684.126 L1657.55 684.126 L1658.11 684.126 L1658.67 684.126 L1659.23 684.126 L1659.79 684.126 L1660.35 684.126 L1660.91 684.126 L1661.47 684.126 L1662.03 684.126 L1662.58 684.126 L1663.14 684.126 L1663.7 684.126 L1664.26 684.126 L1664.82 684.126 L1665.38 684.126 L1665.94 684.126 L1666.5 684.126 L1667.06 684.126 L1667.62 684.126 L1668.18 684.126 L1668.74 684.126 L1669.3 684.126 L1669.85 684.126 L1670.41 684.126 L1670.97 684.126 L1671.53 684.126 L1672.09 684.126 L1672.65 684.126 L1673.21 684.126 L1673.77 684.126 L1674.33 684.126 L1674.89 684.126 L1675.45 684.126 L1676.01 684.126 L1676.57 684.126 L1677.13 684.126 L1677.68 684.126 L1678.24 684.126 L1678.8 684.126 L1679.36 684.126 L1679.92 684.126 L1680.48 684.126 L1681.04 684.126 L1681.6 684.126 L1682.16 684.126 L1682.72 684.126 L1683.28 684.126 L1683.84 684.126 L1684.4 684.126 L1684.95 684.126 L1685.51 684.126 L1686.07 684.126 L1686.63 684.126 L1687.19 684.126 L1687.75 684.126 L1688.31 684.126 L1688.87 684.126 L1689.43 684.126 L1689.99 684.126 L1690.55 684.126 L1691.11 684.126 L1691.67 684.126 L1692.23 684.126 L1692.78 684.126 L1693.34 684.126 L1693.9 684.126 L1694.46 684.126 L1695.02 684.126 L1695.58 684.126 L1696.14 684.126 L1696.7 684.126 L1697.26 684.126 L1697.82 684.126 L1698.38 684.126 L1698.94 684.126 L1699.5 684.126 L1700.05 684.126 L1700.61 684.126 L1701.17 684.126 L1701.73 684.126 L1702.29 684.126 L1702.85 684.126 L1703.41 684.126 L1703.97 684.126 L1704.53 684.126 L1705.09 684.126 L1705.65 684.126 L1706.21 684.126 L1706.77 684.126 L1707.32 684.126 L1707.88 684.126 L1708.44 684.126 L1709 684.126 L1709.56 684.126 L1710.12 684.126 L1710.68 684.126 L1711.24 684.126 L1711.8 684.126 L1712.36 684.126 L1712.92 684.126 L1713.48 684.126 L1714.04 684.126 L1714.6 684.126 L1715.15 684.126 L1715.71 684.126 L1716.27 684.126 L1716.83 684.126 L1717.39 684.126 L1717.95 684.126 L1718.51 684.126 L1719.07 684.126 L1719.63 684.126 L1720.19 684.126 L1720.75 684.126 L1721.31 684.126 L1721.87 684.126 L1722.42 684.126 L1722.98 684.126 L1723.54 684.126 L1724.1 684.126 L1724.66 684.126 L1725.22 684.126 L1725.78 684.126 L1726.34 684.126 L1726.9 684.126 L1727.46 684.126 L1728.02 684.126 L1728.58 684.126 L1729.14 684.126 L1729.69 684.126 L1730.25 684.126 L1730.81 684.126 L1731.37 684.126 L1731.93 684.126 L1732.49 684.126 L1733.05 684.126 L1733.61 684.126 L1734.17 684.126 L1734.73 684.126 L1735.29 684.126 L1735.85 684.126 L1736.41 684.126 L1736.97 684.126 L1737.52 684.126 L1738.08 684.126 L1738.64 684.126 L1739.2 684.126 L1739.76 684.126 L1740.32 684.126 L1740.88 684.126 L1741.44 684.126 L1742 684.126 L1742.56 684.126 L1743.12 684.126 L1743.68 684.126 L1744.24 684.126 L1744.79 684.126 L1745.35 684.126 L1745.91 684.126 L1746.47 684.126 L1747.03 684.126 L1747.59 684.126 L1748.15 684.126 L1748.71 684.126 L1749.27 684.126 L1749.83 684.126 L1750.39 684.126 L1750.95 684.126 L1751.51 684.126 L1752.06 684.126 L1752.62 684.126 L1753.18 684.126 L1753.74 684.126 L1754.3 684.126 L1754.86 684.126 L1755.42 684.126 L1755.98 684.126 L1756.54 684.126 L1757.1 684.126 L1757.66 684.126 L1758.22 684.126 L1758.78 684.126 L1759.34 684.126 L1759.89 684.126 L1760.45 684.126 L1761.01 684.126 L1761.57 684.126 L1762.13 684.126 L1762.69 684.126 L1763.25 684.126 L1763.81 684.126 L1764.37 684.126 L1764.93 684.126 L1765.49 684.126 L1766.05 684.126 L1766.61 684.126 L1767.16 684.126 L1767.72 684.126 L1768.28 684.126 L1768.84 684.126 L1769.4 684.126 L1769.96 684.126 L1770.52 684.126 L1771.08 684.126 L1771.64 684.126 L1772.2 684.126 L1772.76 684.126 L1773.32 684.126 L1773.88 684.126 L1774.43 684.126 L1774.99 684.126 L1775.55 684.126 L1776.11 684.126 L1776.67 684.126 L1777.23 684.126 L1777.79 684.126 L1778.35 684.126 L1778.91 684.126 L1779.47 684.126 L1780.03 684.126 L1780.59 684.126 L1781.15 684.126 L1781.71 684.126 L1782.26 684.126 L1782.82 684.126 L1783.38 684.126 L1783.94 684.126 L1784.5 684.126 L1785.06 684.126 L1785.62 684.126 L1786.18 684.126 L1786.74 684.126 L1787.3 684.126 L1787.86 684.126 L1788.42 684.126 L1788.98 684.126 L1789.53 684.126 L1790.09 684.126 L1790.65 684.126 L1791.21 684.126 L1791.77 684.126 L1792.33 684.126 L1792.89 684.126 L1793.45 684.126 L1794.01 684.126 L1794.57 684.126 L1795.13 684.126 L1795.69 684.126 L1796.25 684.126 L1796.8 684.126 L1797.36 684.126 L1797.92 684.126 L1798.48 684.126 L1799.04 684.126 L1799.6 684.126 L1800.16 684.126 L1800.72 684.126 L1801.28 684.126 L1801.84 684.126 L1802.4 684.126 L1802.96 684.126 L1803.52 684.126 L1804.08 684.126 L1804.63 684.126 L1805.19 684.126 L1805.75 684.126 L1806.31 684.126 L1806.87 684.126 L1807.43 684.126 L1807.99 684.126 L1808.55 684.126 L1809.11 684.126 L1809.67 684.126 L1810.23 684.126 L1810.79 684.126 L1811.35 684.126 L1811.9 684.126 L1812.46 684.126 L1813.02 684.126 L1813.58 684.126 L1814.14 684.126 L1814.7 684.126 L1815.26 684.126 L1815.82 684.126 L1816.38 684.126 L1816.94 684.126 L1817.5 684.126 L1818.06 684.126 L1818.62 684.126 L1819.18 684.126 L1819.73 684.126 L1820.29 684.126 L1820.85 684.126 L1821.41 684.126 L1821.97 684.126 L1822.53 684.126 L1823.09 684.126 L1823.65 684.126 L1824.21 684.126 L1824.77 684.126 L1825.33 684.126 L1825.89 684.126 L1826.45 684.126 L1827 684.126 L1827.56 684.126 L1828.12 684.126 L1828.68 684.126 L1829.24 684.126 L1829.8 684.126 L1830.36 684.126 L1830.92 684.126 L1831.48 684.126 L1832.04 684.126 L1832.6 684.126 L1833.16 684.126 L1833.72 684.126 L1834.27 684.126 L1834.83 684.126 L1835.39 684.126 L1835.95 684.126 L1836.51 684.126 L1837.07 684.126 L1837.63 684.126 L1838.19 684.126 L1838.19 682.064 L1837.63 682.064 L1837.07 682.064 L1836.51 682.064 L1835.95 682.064 L1835.39 682.064 L1834.83 682.064 L1834.27 682.064 L1833.72 682.064 L1833.16 682.064 L1832.6 682.064 L1832.04 682.064 L1831.48 682.064 L1830.92 682.064 L1830.36 682.064 L1829.8 682.064 L1829.24 682.064 L1828.68 682.064 L1828.12 682.064 L1827.56 682.064 L1827 682.064 L1826.45 682.064 L1825.89 682.064 L1825.33 682.064 L1824.77 682.064 L1824.21 682.064 L1823.65 682.064 L1823.09 682.064 L1822.53 682.064 L1821.97 682.064 L1821.41 682.064 L1820.85 682.064 L1820.29 682.064 L1819.73 682.064 L1819.18 682.064 L1818.62 682.064 L1818.06 682.064 L1817.5 682.064 L1816.94 682.064 L1816.38 682.064 L1815.82 682.064 L1815.26 682.064 L1814.7 682.064 L1814.14 682.064 L1813.58 682.064 L1813.02 682.064 L1812.46 682.064 L1811.9 682.064 L1811.35 682.064 L1810.79 682.064 L1810.23 682.064 L1809.67 682.064 L1809.11 682.064 L1808.55 682.064 L1807.99 682.064 L1807.43 682.064 L1806.87 682.064 L1806.31 682.064 L1805.75 682.064 L1805.19 682.064 L1804.63 682.064 L1804.08 682.064 L1803.52 682.064 L1802.96 682.064 L1802.4 682.064 L1801.84 682.064 L1801.28 682.064 L1800.72 682.064 L1800.16 682.064 L1799.6 682.064 L1799.04 682.064 L1798.48 682.064 L1797.92 682.064 L1797.36 682.064 L1796.8 682.064 L1796.25 682.064 L1795.69 682.064 L1795.13 682.064 L1794.57 682.064 L1794.01 682.064 L1793.45 682.064 L1792.89 682.064 L1792.33 682.064 L1791.77 682.064 L1791.21 682.064 L1790.65 682.064 L1790.09 682.064 L1789.53 682.064 L1788.98 682.064 L1788.42 682.064 L1787.86 682.064 L1787.3 682.064 L1786.74 682.064 L1786.18 682.064 L1785.62 682.064 L1785.06 682.064 L1784.5 682.064 L1783.94 682.064 L1783.38 682.064 L1782.82 682.064 L1782.26 682.064 L1781.71 682.064 L1781.15 682.064 L1780.59 682.064 L1780.03 682.064 L1779.47 682.064 L1778.91 682.064 L1778.35 682.064 L1777.79 682.064 L1777.23 682.064 L1776.67 682.064 L1776.11 682.064 L1775.55 682.064 L1774.99 682.064 L1774.43 682.064 L1773.88 682.064 L1773.32 682.064 L1772.76 682.064 L1772.2 682.064 L1771.64 682.064 L1771.08 682.064 L1770.52 682.064 L1769.96 682.064 L1769.4 682.064 L1768.84 682.064 L1768.28 682.064 L1767.72 682.064 L1767.16 682.064 L1766.61 682.064 L1766.05 682.064 L1765.49 682.064 L1764.93 682.064 L1764.37 682.064 L1763.81 682.064 L1763.25 682.064 L1762.69 682.064 L1762.13 682.064 L1761.57 682.064 L1761.01 682.064 L1760.45 682.064 L1759.89 682.064 L1759.34 682.064 L1758.78 682.064 L1758.22 682.064 L1757.66 682.064 L1757.1 682.064 L1756.54 682.064 L1755.98 682.064 L1755.42 682.064 L1754.86 682.064 L1754.3 682.064 L1753.74 682.064 L1753.18 682.064 L1752.62 682.064 L1752.06 682.064 L1751.51 682.064 L1750.95 682.064 L1750.39 682.064 L1749.83 682.064 L1749.27 682.064 L1748.71 682.064 L1748.15 682.064 L1747.59 682.064 L1747.03 682.064 L1746.47 682.064 L1745.91 682.064 L1745.35 682.064 L1744.79 682.064 L1744.24 682.064 L1743.68 682.064 L1743.12 682.064 L1742.56 682.064 L1742 682.064 L1741.44 682.064 L1740.88 682.064 L1740.32 682.064 L1739.76 682.064 L1739.2 682.064 L1738.64 682.064 L1738.08 682.064 L1737.52 682.064 L1736.97 682.064 L1736.41 682.064 L1735.85 682.064 L1735.29 682.064 L1734.73 682.064 L1734.17 682.064 L1733.61 682.064 L1733.05 682.064 L1732.49 682.064 L1731.93 682.064 L1731.37 682.064 L1730.81 682.064 L1730.25 682.064 L1729.69 682.064 L1729.14 682.064 L1728.58 682.064 L1728.02 682.064 L1727.46 682.064 L1726.9 682.064 L1726.34 682.064 L1725.78 682.064 L1725.22 682.064 L1724.66 682.064 L1724.1 682.064 L1723.54 682.064 L1722.98 682.064 L1722.42 682.064 L1721.87 682.064 L1721.31 682.064 L1720.75 682.064 L1720.19 682.064 L1719.63 682.064 L1719.07 682.064 L1718.51 682.064 L1717.95 682.064 L1717.39 682.064 L1716.83 682.064 L1716.27 682.064 L1715.71 682.064 L1715.15 682.064 L1714.6 682.064 L1714.04 682.064 L1713.48 682.064 L1712.92 682.064 L1712.36 682.064 L1711.8 682.064 L1711.24 682.064 L1710.68 682.064 L1710.12 682.064 L1709.56 682.064 L1709 682.064 L1708.44 682.064 L1707.88 682.064 L1707.32 682.064 L1706.77 682.064 L1706.21 682.064 L1705.65 682.064 L1705.09 682.064 L1704.53 682.064 L1703.97 682.064 L1703.41 682.064 L1702.85 682.064 L1702.29 682.064 L1701.73 682.064 L1701.17 682.064 L1700.61 682.064 L1700.05 682.064 L1699.5 682.064 L1698.94 682.064 L1698.38 682.064 L1697.82 682.064 L1697.26 682.064 L1696.7 682.064 L1696.14 682.064 L1695.58 682.064 L1695.02 682.064 L1694.46 682.064 L1693.9 682.064 L1693.34 682.064 L1692.78 682.064 L1692.23 682.064 L1691.67 682.064 L1691.11 682.064 L1690.55 682.064 L1689.99 682.064 L1689.43 682.064 L1688.87 682.064 L1688.31 682.064 L1687.75 682.064 L1687.19 682.064 L1686.63 682.064 L1686.07 682.064 L1685.51 682.064 L1684.95 682.064 L1684.4 682.064 L1683.84 682.064 L1683.28 682.064 L1682.72 682.064 L1682.16 682.064 L1681.6 682.064 L1681.04 682.064 L1680.48 682.064 L1679.92 682.064 L1679.36 682.064 L1678.8 682.064 L1678.24 682.064 L1677.68 682.064 L1677.13 682.064 L1676.57 682.064 L1676.01 682.064 L1675.45 682.064 L1674.89 682.064 L1674.33 682.064 L1673.77 682.064 L1673.21 682.064 L1672.65 682.064 L1672.09 682.064 L1671.53 682.064 L1670.97 682.064 L1670.41 682.064 L1669.85 682.064 L1669.3 682.064 L1668.74 682.064 L1668.18 682.064 L1667.62 682.064 L1667.06 682.064 L1666.5 682.064 L1665.94 682.064 L1665.38 682.064 L1664.82 682.064 L1664.26 682.064 L1663.7 682.064 L1663.14 682.064 L1662.58 682.064 L1662.03 682.064 L1661.47 682.064 L1660.91 682.064 L1660.35 682.064 L1659.79 682.064 L1659.23 682.064 L1658.67 682.064 L1658.11 682.064 L1657.55 682.064 L1656.99 682.064 L1656.43 682.064 L1655.87 682.064 L1655.31 682.064 L1654.76 682.064 L1654.2 682.064 L1653.64 682.064 L1653.08 682.064 L1652.52 682.064 L1651.96 682.064 L1651.4 682.064 L1650.84 682.064 L1650.28 682.064 L1649.72 682.064 L1649.16 682.064 L1648.6 682.064 L1648.04 682.064 L1647.48 682.064 L1646.93 682.064 L1646.37 682.064 L1645.81 682.064 L1645.25 682.064 L1644.69 682.064 L1644.13 682.064 L1643.57 682.064 L1643.01 682.064 L1642.45 682.064 L1641.89 682.064 L1641.33 682.064 L1640.77 682.064 L1640.21 682.064 L1639.66 682.064 L1639.1 682.064 L1638.54 682.064 L1637.98 682.064 L1637.42 682.064 L1636.86 682.064 L1636.3 682.064 L1635.74 682.064 L1635.18 682.064 L1634.62 682.064 L1634.06 682.064 L1633.5 682.064 L1632.94 682.064 L1632.39 682.064 L1631.83 682.064 L1631.27 682.064 L1630.71 682.064 L1630.15 682.064 L1629.59 682.064 L1629.03 682.064 L1628.47 682.064 L1627.91 682.064 L1627.35 682.064 L1626.79 682.064 L1626.23 682.064 L1625.67 682.064 L1625.11 682.064 L1624.56 682.064 L1624 682.064 L1623.44 682.064 L1622.88 682.064 L1622.32 682.064 L1621.76 682.064 L1621.2 682.064 L1620.64 682.064 L1620.08 682.064 L1619.52 682.064 L1618.96 682.064 L1618.4 682.064 L1617.84 682.064 L1617.29 682.064 L1616.73 682.064 L1616.17 682.064 L1615.61 682.064 L1615.05 682.064 L1614.49 682.064 L1613.93 682.064 L1613.37 682.064 L1612.81 682.064 L1612.25 682.064 L1611.69 682.064 L1611.13 682.064 L1610.57 682.064 L1610.02 682.064 L1609.46 682.064 L1608.9 682.064 L1608.34 682.064 L1607.78 682.064 L1607.22 682.064 L1606.66 682.064 L1606.1 682.064 L1605.54 682.064 L1604.98 682.064 L1604.42 682.064 L1603.86 682.064 L1603.3 682.064 L1602.74 682.064 L1602.19 682.064 L1601.63 682.064 L1601.07 682.064 L1600.51 682.064 L1599.95 682.064 L1599.39 682.064 L1598.83 682.064 L1598.27 682.064 L1597.71 682.064 L1597.15 682.064 L1596.59 682.064 L1596.03 682.064 L1595.47 682.064 L1594.92 682.064 L1594.36 682.064 L1593.8 682.064 L1593.24 682.064 L1592.68 682.064 L1592.12 682.064 L1591.56 682.064 L1591 682.064 L1590.44 682.064 L1589.88 682.064 L1589.32 682.064 L1588.76 682.064 L1588.2 682.064 L1587.65 682.064 L1587.09 682.064 L1586.53 682.064 L1585.97 682.064 L1585.41 682.064 L1584.85 682.064 L1584.29 682.064 L1583.73 682.064 L1583.17 682.064 L1582.61 682.064 L1582.05 682.064 L1581.49 682.064 L1580.93 682.064 L1580.37 682.064 L1579.82 682.064 L1579.26 682.064 L1578.7 682.064 L1578.14 682.064 L1577.58 682.064 L1577.02 682.064 L1576.46 682.064 L1575.9 682.064 L1575.34 682.064 L1574.78 682.064 L1574.22 682.064 L1573.66 682.064 L1573.1 682.064 L1572.55 682.064 L1571.99 682.064 L1571.43 682.064 L1570.87 682.064 L1570.31 682.064 L1569.75 682.064 L1569.19 682.064 L1568.63 682.064 L1568.07 682.064 L1567.51 682.064 L1566.95 682.064 L1566.39 682.064 L1565.83 682.064 L1565.28 682.064 L1564.72 682.064 L1564.16 682.064 L1563.6 682.064 L1563.04 682.064 L1562.48 682.064 L1561.92 682.064 L1561.36 682.064 L1560.8 682.064 L1560.24 682.064 L1559.68 682.064 L1559.12 682.064 L1558.56 682.064 L1558 682.064 L1557.45 682.064 L1556.89 682.064 L1556.33 682.064 L1555.77 682.064 L1555.21 682.064 L1554.65 682.064 L1554.09 682.064 L1553.53 682.064 L1552.97 682.064 L1552.41 682.064 L1551.85 682.064 L1551.29 682.064 L1550.73 682.064 L1550.18 682.064 L1549.62 682.064 L1549.06 682.064 L1548.5 682.064 L1547.94 682.064 L1547.38 682.064 L1546.82 682.064 L1546.26 682.064 L1545.7 682.064 L1545.14 682.064 L1544.58 682.064 L1544.02 682.064 L1543.46 682.064 L1542.9 682.064 L1542.35 682.064 L1541.79 682.064 L1541.23 682.064 L1540.67 682.064 L1540.11 682.064 L1539.55 682.064 L1538.99 682.064 L1538.43 682.064 L1537.87 682.064 L1537.31 682.064 L1536.75 682.064 L1536.19 682.064 L1535.63 682.064 L1535.08 682.064 L1534.52 682.064 L1533.96 682.064 L1533.4 682.064 L1532.84 682.064 L1532.28 682.064 L1531.72 682.064 L1531.16 682.064 L1530.6 682.064 L1530.04 682.064 L1529.48 682.064 L1528.92 682.064 L1528.36 682.064 L1527.81 682.064 L1527.25 682.064 L1526.69 682.064 L1526.13 682.064 L1525.57 682.064 L1525.01 682.064 L1524.45 682.064 L1523.89 682.064 L1523.33 682.064 L1522.77 682.064 L1522.21 682.064 L1521.65 682.064 L1521.09 682.064 L1520.53 682.064 L1519.98 682.064 L1519.42 682.064 L1518.86 682.064 L1518.3 682.064 L1517.74 682.064 L1517.18 682.064 L1516.62 682.064 L1516.06 682.064 L1515.5 682.064 L1514.94 682.064 L1514.38 682.064 L1513.82 682.064 L1513.26 682.064 L1512.71 682.064 L1512.15 682.064 L1511.59 682.064 L1511.03 682.064 L1510.47 682.064 L1509.91 682.064 L1509.35 682.064 L1508.79 682.064 L1508.23 682.064 L1507.67 682.064 L1507.11 682.064 L1506.55 682.064 L1505.99 682.064 L1505.44 682.064 L1504.88 682.064 L1504.32 682.064 L1503.76 682.064 L1503.2 682.064 L1502.64 682.064 L1502.08 682.064 L1501.52 682.064 L1500.96 682.064 L1500.4 682.064 L1499.84 682.064 L1499.28 682.064 L1498.72 682.064 L1498.16 682.064 L1497.61 682.064 L1497.05 682.064 L1496.49 682.064 L1495.93 682.064 L1495.37 682.064 L1494.81 682.064 L1494.25 682.064 L1493.69 682.064 L1493.13 682.064 L1492.57 682.064 L1492.01 682.064 L1491.45 682.064 L1490.89 682.064 L1490.34 682.064 L1489.78 682.064 L1489.22 682.064 L1488.66 682.064 L1488.1 682.064 L1487.54 682.064 L1486.98 682.064 L1486.42 682.064 L1485.86 682.064 L1485.3 682.064 L1484.74 682.064 L1484.18 682.064 L1483.62 682.064 L1483.07 682.064 L1482.51 682.064 L1481.95 682.064 L1481.39 682.064 L1480.83 682.064 L1480.27 682.064 L1479.71 682.064 L1479.15 682.064 L1478.59 682.064 L1478.03 682.064 L1477.47 682.064 L1476.91 682.064 L1476.35 682.064 L1475.79 682.064 L1475.24 682.064 L1474.68 682.064 L1474.12 682.064 L1473.56 682.064 L1473 682.064 L1472.44 682.064 L1471.88 682.064 L1471.32 682.064 L1470.76 682.064 L1470.2 682.064 L1469.64 682.064 L1469.08 682.064 L1468.52 682.064 L1467.97 682.064 L1467.41 682.064 L1466.85 682.064 L1466.29 682.064 L1465.73 682.064 L1465.17 682.064 L1464.61 682.064 L1464.05 682.064 L1463.49 682.064 L1462.93 682.064 L1462.37 682.064 L1461.81 682.064 L1461.25 682.064 L1460.7 682.064 L1460.14 682.064 L1459.58 682.064 L1459.02 682.064 L1458.46 682.064 L1457.9 682.064 L1457.34 682.064 L1456.78 682.064 L1456.22 682.064 L1455.66 682.064 L1455.1 682.064 L1454.54 682.064 L1453.98 682.064 L1453.42 682.064 L1452.87 682.064 L1452.31 682.064 L1451.75 682.064 L1451.19 682.064 L1450.63 682.064 L1450.07 682.064 L1449.51 682.064 L1448.95 682.064 L1448.39 682.064 L1447.83 682.064 L1447.27 682.064 L1446.71 682.064 L1446.15 682.064 L1445.6 682.064 L1445.04 682.064 L1444.48 682.064 L1443.92 682.064 L1443.36 682.064 L1442.8 682.064 L1442.24 682.064 L1441.68 682.064 L1441.12 682.064 L1440.56 682.064 L1440 682.064 L1439.44 682.064 L1438.88 682.064 L1438.33 682.064 L1437.77 682.064 L1437.21 682.064 L1436.65 682.064 L1436.09 682.064 L1435.53 682.064 L1434.97 682.064 L1434.41 682.064 L1433.85 682.064 L1433.29 682.064 L1432.73 682.064 L1432.17 682.064 L1431.61 682.064 L1431.05 682.064 L1430.5 682.064 L1429.94 682.064 L1429.38 682.064 L1428.82 682.064 L1428.26 682.064 L1427.7 682.064 L1427.14 682.064 L1426.58 682.064 L1426.02 682.064 L1425.46 682.064 L1424.9 682.064 L1424.34 682.064 L1423.78 682.064 L1423.23 682.064 L1422.67 682.064 L1422.11 682.064 L1421.55 682.064 L1420.99 682.064 L1420.43 682.064 L1419.87 682.064 L1419.31 682.064 L1418.75 682.064 L1418.19 682.064 L1417.63 682.064 L1417.07 682.064 L1416.51 682.064 L1415.95 682.064 L1415.4 682.064 L1414.84 682.064 L1414.28 682.064 L1413.72 682.064 L1413.16 682.064 L1412.6 682.064 L1412.04 682.064 L1411.48 682.064 L1410.92 682.064 L1410.36 682.064 L1409.8 682.064 L1409.24 682.064 L1408.68 682.064 L1408.13 682.064 L1407.57 682.064 L1407.01 682.064 L1406.45 682.064 L1405.89 682.064 L1405.33 682.064 L1404.77 682.064 L1404.21 682.064 L1403.65 682.064 L1403.09 682.064 L1402.53 682.064 L1401.97 682.064 L1401.41 682.064 L1400.86 682.064 L1400.3 682.064 L1399.74 682.064 L1399.18 682.064 L1398.62 682.064 L1398.06 682.064 L1397.5 682.064 L1396.94 682.064 L1396.38 682.064 L1395.82 682.064 L1395.26 682.064 L1394.7 682.064 L1394.14 682.064 L1393.58 682.064 L1393.03 682.064 L1392.47 682.064 L1391.91 682.064 L1391.35 682.064 L1390.79 682.064 L1390.23 682.064 L1389.67 682.064 L1389.11 682.064 L1388.55 682.064 L1387.99 682.064 L1387.43 682.064 L1386.87 682.064 L1386.31 682.064 L1385.76 682.064 L1385.2 682.064 L1384.64 682.064 L1384.08 682.064 L1383.52 682.064 L1382.96 682.064 L1382.4 682.064 L1381.84 682.064 L1381.28 682.064 L1380.72 682.064 L1380.16 682.064 L1379.6 682.064 L1379.04 682.064 L1378.49 682.064 L1377.93 682.064 L1377.37 682.064 L1376.81 682.064 L1376.25 682.064 L1375.69 682.064 L1375.13 682.064 L1374.57 682.064 L1374.01 682.064 L1373.45 682.064 L1372.89 682.064 L1372.33 682.064 L1371.77 682.064 L1371.21 682.064 L1370.66 682.064 L1370.1 682.064 L1369.54 682.064 L1368.98 682.064 L1368.42 682.064 L1367.86 682.064 L1367.3 682.064 L1366.74 682.064 L1366.18 682.064 L1365.62 682.064 L1365.06 682.064 L1364.5 682.064 L1363.94 682.064 L1363.39 682.064 L1362.83 682.064 L1362.27 682.064 L1361.71 682.064 L1361.15 682.064 L1360.59 682.064 L1360.03 682.064 L1359.47 682.064 L1358.91 682.064 L1358.35 682.064 L1357.79 682.064 L1357.23 682.064 L1356.67 682.064 L1356.12 682.064 L1355.56 682.064 L1355 682.064 L1354.44 682.064 L1353.88 682.064 L1353.32 682.064 L1352.76 682.064 L1352.2 682.064 L1351.64 682.064 L1351.08 682.064 L1350.52 682.064 L1349.96 682.064 L1349.4 682.064 L1348.84 682.064 L1348.29 682.064 L1347.73 682.064 L1347.17 682.064 L1346.61 682.064 L1346.05 682.064 L1345.49 682.064 L1344.93 682.064 L1344.37 682.064 L1343.81 682.064 L1343.25 682.064 L1342.69 682.064 L1342.13 682.064 L1341.57 682.064 L1341.02 682.064 L1340.46 682.064 L1339.9 682.064 L1339.34 682.064 L1338.78 682.064 L1338.22 682.064 L1337.66 682.064 L1337.1 682.064 L1336.54 682.064 L1335.98 682.064 L1335.42 682.064 L1334.86 682.064 L1334.3 682.064 L1333.75 682.064 L1333.19 682.064 L1332.63 682.064 L1332.07 682.064 L1331.51 682.064 L1330.95 682.064 L1330.39 682.064 L1329.83 682.064 L1329.27 682.064 L1328.71 682.064 L1328.15 682.064 L1327.59 682.064 L1327.03 682.064 L1326.47 682.064 L1325.92 682.064 L1325.36 682.064 L1324.8 682.064 L1324.24 682.064 L1323.68 682.064 L1323.12 682.064 L1322.56 682.064 L1322 682.064 L1321.44 682.064 L1320.88 682.064 L1320.32 682.064 L1319.76 682.064 L1319.2 682.064 L1318.65 682.064 L1318.09 682.064 L1317.53 682.064 L1316.97 682.064 L1316.41 682.064 L1315.85 682.064 L1315.29 682.064 L1314.73 682.064 L1314.17 682.064 L1313.61 682.064 L1313.05 682.064 L1312.49 682.064 L1311.93 682.064 L1311.38 682.064 L1310.82 682.064 L1310.26 682.064 L1309.7 682.064 L1309.14 682.064 L1308.58 682.064 L1308.02 682.064 L1307.46 682.064 L1306.9 682.064 L1306.34 682.064 L1305.78 682.064 L1305.22 682.064 L1304.66 682.064 L1304.1 682.064 L1303.55 682.064 L1302.99 682.064 L1302.43 682.064 L1301.87 682.064 L1301.31 682.064 L1300.75 682.064 L1300.19 682.064 L1299.63 682.064 L1299.07 682.064 L1298.51 682.064 L1297.95 682.064 L1297.39 682.064 L1296.83 682.064 L1296.28 682.064 L1295.72 682.064 L1295.16 682.064 L1294.6 682.064 L1294.04 682.064 L1293.48 682.064 L1292.92 682.064 L1292.36 682.064 L1291.8 682.064 L1291.24 682.064 L1290.68 682.064 L1290.12 682.064 L1289.56 682.064 L1289 682.064 L1288.45 682.064 L1287.89 682.064 L1287.33 682.064 L1286.77 682.064 L1286.21 682.064 L1285.65 682.064 L1285.09 682.064 L1284.53 682.064 L1283.97 682.064 L1283.41 682.064 L1282.85 682.064 L1282.29 682.064 L1281.73 682.064 L1281.18 682.064 L1280.62 682.064 L1280.06 682.064 L1279.5 682.064 L1278.94 682.064 L1278.38 682.064 L1277.82 682.064 L1277.26 682.064 L1276.7 682.064 L1276.14 682.064 L1275.58 682.064 L1275.02 682.064 L1274.46 682.064 L1273.91 682.064 L1273.35 682.064 L1272.79 682.064 L1272.23 682.064 L1271.67 682.064 L1271.11 682.064 L1270.55 682.064 L1269.99 682.064 L1269.43 682.064 L1268.87 682.064 L1268.31 682.064 L1267.75 682.064 L1267.19 682.064 L1266.63 682.064 L1266.08 682.064 L1265.52 682.064 L1264.96 682.064 L1264.4 682.064 L1263.84 682.064 L1263.28 682.064 L1262.72 682.064 L1262.16 682.064 L1261.6 682.064 L1261.04 682.064 L1260.48 682.064 L1259.92 682.064 L1259.36 682.064 L1258.81 682.064 L1258.25 682.064 L1257.69 682.064 L1257.13 682.064 L1256.57 682.064 L1256.01 682.064 L1255.45 682.064 L1254.89 682.064 L1254.33 682.064 L1253.77 682.064 L1253.21 682.064 L1252.65 682.064 L1252.09 682.064 L1251.54 682.064 L1250.98 682.064 L1250.42 682.064 L1249.86 682.064 L1249.3 682.064 L1248.74 682.064 L1248.18 682.064 L1247.62 682.064 L1247.06 682.064 L1246.5 682.064 L1245.94 682.064 L1245.38 682.064 L1244.82 682.064 L1244.26 682.064 L1243.71 682.064 L1243.15 682.064 L1242.59 682.064 L1242.03 682.064 L1241.47 682.064 L1240.91 682.064 L1240.35 682.064 L1239.79 682.064 L1239.23 682.064 L1238.67 682.064 L1238.11 682.064 L1237.55 682.064 L1236.99 682.064 L1236.44 682.064 L1235.88 682.064 L1235.32 682.064 L1234.76 682.064 L1234.2 682.064 L1233.64 682.064 L1233.08 682.064 L1232.52 682.064 L1231.96 682.064 L1231.4 682.064 L1230.84 682.064 L1230.28 682.064 L1229.72 682.064 L1229.17 682.064 L1228.61 682.064 L1228.05 682.064 L1227.49 682.064 L1226.93 682.064 L1226.37 682.064 L1225.81 682.064 L1225.25 682.064 L1224.69 682.064 L1224.13 682.064 L1223.57 682.064 L1223.01 682.064 L1222.45 682.064 L1221.89 682.064 L1221.34 682.064 L1220.78 682.064 L1220.22 682.064 L1219.66 682.064 L1219.1 682.064 L1218.54 682.064 L1217.98 682.064 L1217.42 682.064 L1216.86 682.064 L1216.3 682.064 L1215.74 682.064 L1215.18 682.064 L1214.62 682.064 L1214.07 682.064 L1213.51 682.064 L1212.95 682.064 L1212.39 682.064 L1211.83 682.064 L1211.27 682.064 L1210.71 682.064 L1210.15 682.064 L1209.59 682.064 L1209.03 682.064 L1208.47 682.064 L1207.91 682.064 L1207.35 682.064 L1206.8 682.064 L1206.24 682.064 L1205.68 682.064 L1205.12 682.064 L1204.56 682.064 L1204 682.064 L1203.44 682.064 L1202.88 682.064 L1202.32 682.064 L1201.76 682.064 L1201.2 682.064 L1200.64 682.064 L1200.08 682.064 L1199.52 682.064 L1198.97 682.064 L1198.41 682.064 L1197.85 682.064 L1197.29 682.064 L1196.73 682.064 L1196.17 682.064 L1195.61 682.064 L1195.05 682.064 L1194.49 682.064 L1193.93 682.064 L1193.37 682.064 L1192.81 682.064 L1192.25 682.064 L1191.7 682.064 L1191.14 682.064 L1190.58 682.064 L1190.02 682.064 L1189.46 682.064 L1188.9 682.064 L1188.34 682.064 L1187.78 682.064 L1187.22 682.064 L1186.66 682.064 L1186.1 682.064 L1185.54 682.064 L1184.98 682.064 L1184.43 682.064 L1183.87 682.064 L1183.31 682.064 L1182.75 682.064 L1182.19 682.064 L1181.63 682.064 L1181.07 682.064 L1180.51 682.064 L1179.95 682.064 L1179.39 682.064 L1178.83 682.064 L1178.27 682.064 L1177.71 682.064 L1177.15 682.064 L1176.6 682.064 L1176.04 682.064 L1175.48 682.064 L1174.92 682.064 L1174.36 682.064 L1173.8 682.064 L1173.24 682.064 L1172.68 682.064 L1172.12 682.064 L1171.56 682.064 L1171 682.064 L1170.44 682.064 L1169.88 682.064 L1169.33 682.064 L1168.77 682.064 L1168.21 682.064 L1167.65 682.064 L1167.09 682.064 L1166.53 682.064 L1165.97 682.064 L1165.41 682.064 L1164.85 682.064 L1164.29 682.064 L1163.73 682.064 L1163.17 682.064 L1162.61 682.064 L1162.05 682.064 L1161.5 682.064 L1160.94 682.064 L1160.38 682.064 L1159.82 682.064 L1159.26 682.064 L1158.7 682.064 L1158.14 682.064 L1157.58 682.064 L1157.02 682.064 L1156.46 682.064 L1155.9 682.064 L1155.34 682.064 L1154.78 682.064 L1154.23 682.064 L1153.67 682.064 L1153.11 682.064 L1152.55 682.064 L1151.99 682.064 L1151.43 682.064 L1150.87 682.064 L1150.31 682.064 L1149.75 682.064 L1149.19 682.064 L1148.63 682.064 L1148.07 682.064 L1147.51 682.064 L1146.96 682.064 L1146.4 682.064 L1145.84 682.064 L1145.28 682.064 L1144.72 682.064 L1144.16 682.064 L1143.6 682.064 L1143.04 682.064 L1142.48 682.064 L1141.92 682.064 L1141.36 682.064 L1140.8 682.064 L1140.24 682.064 L1139.68 682.064 L1139.13 682.064 L1138.57 682.064 L1138.01 682.064 L1137.45 682.064 L1136.89 682.064 L1136.33 682.064 L1135.77 682.064 L1135.21 682.064 L1134.65 682.064 L1134.09 682.064 L1133.53 682.064 L1132.97 682.064 L1132.41 682.064 L1131.86 682.064 L1131.3 682.064 L1130.74 682.064 L1130.18 682.064 L1129.62 682.064 L1129.06 682.064 L1128.5 682.064 L1127.94 682.064 L1127.38 682.064 L1126.82 682.064 L1126.26 682.064 L1125.7 682.064 L1125.14 682.064 L1124.59 682.064 L1124.03 682.064 L1123.47 682.064 L1122.91 682.064 L1122.35 682.064 L1121.79 682.064 L1121.23 682.064 L1120.67 682.064 L1120.11 682.064 L1119.55 682.064 L1118.99 682.064 L1118.43 682.064 L1117.87 682.064 L1117.31 682.064 L1116.76 682.064 L1116.2 682.064 L1115.64 682.064 L1115.08 682.064 L1114.52 682.064 L1113.96 682.064 L1113.4 682.064 L1112.84 682.064 L1112.28 682.064 L1111.72 682.064 L1111.16 682.064 L1110.6 682.064 L1110.04 682.064 L1109.49 682.064 L1108.93 682.064 L1108.37 682.064 L1107.81 682.064 L1107.25 682.064 L1106.69 682.064 L1106.13 682.064 L1105.57 682.064 L1105.01 682.064 L1104.45 682.064 L1103.89 682.064 L1103.33 682.064 L1102.77 682.064 L1102.22 682.064 L1101.66 682.064 L1101.1 682.064 L1100.54 682.064 L1099.98 682.064 L1099.42 682.064 L1098.86 682.064 L1098.3 682.064 L1097.74 682.064 L1097.18 682.064 L1096.62 682.064 L1096.06 682.064 L1095.5 682.064 L1094.94 682.064 L1094.39 682.064 L1093.83 682.064 L1093.27 682.064 L1092.71 682.064 L1092.15 682.064 L1091.59 682.064 L1091.03 682.064 L1090.47 682.064 L1089.91 682.064 L1089.35 682.064 L1088.79 682.064 L1088.23 682.064 L1087.67 682.064 L1087.12 682.064 L1086.56 682.064 L1086 682.064 L1085.44 682.064 L1084.88 682.064 L1084.32 682.064 L1083.76 682.064 L1083.2 682.064 L1082.64 682.064 L1082.08 682.064 L1081.52 682.064 L1080.96 682.064 L1080.4 682.064 L1079.85 682.064 L1079.29 682.064 L1078.73 682.064 L1078.17 682.064 L1077.61 682.064 L1077.05 682.064 L1076.49 682.064 L1075.93 682.064 L1075.37 682.064 L1074.81 682.064 L1074.25 682.064 L1073.69 682.064 L1073.13 682.064 L1072.57 682.064 L1072.02 682.064 L1071.46 682.064 L1070.9 682.064 L1070.34 682.064 L1069.78 682.064 L1069.22 682.064 L1068.66 682.064 L1068.1 682.064 L1067.54 682.064 L1066.98 682.064 L1066.42 682.064 L1065.86 682.064 L1065.3 682.064 L1064.75 682.064 L1064.19 682.064 L1063.63 682.064 L1063.07 682.064 L1062.51 682.064 L1061.95 682.064 L1061.39 682.064 L1060.83 682.064 L1060.27 682.064 L1059.71 682.064 L1059.15 682.064 L1058.59 682.064 L1058.03 682.064 L1057.48 682.064 L1056.92 682.064 L1056.36 682.064 L1055.8 682.064 L1055.24 682.064 L1054.68 682.064 L1054.12 682.064 L1053.56 682.064 L1053 682.064 L1052.44 682.064 L1051.88 682.064 L1051.32 682.064 L1050.76 682.064 L1050.2 682.064 L1049.65 682.064 L1049.09 682.064 L1048.53 682.064 L1047.97 682.064 L1047.41 682.064 L1046.85 682.064 L1046.29 682.064 L1045.73 682.064 L1045.17 682.064 L1044.61 682.064 L1044.05 682.064 L1043.49 682.064 L1042.93 682.064 L1042.38 682.064 L1041.82 682.064 L1041.26 682.064 L1040.7 682.064 L1040.14 682.064 L1039.58 682.064 L1039.02 682.064 L1038.46 682.064 L1037.9 682.064 L1037.34 682.064 L1036.78 682.064 L1036.22 682.064 L1035.66 682.064 L1035.1 682.064 L1034.55 682.064 L1033.99 682.064 L1033.43 682.064 L1032.87 682.064 L1032.31 682.064 L1031.75 682.064 L1031.19 682.064 L1030.63 682.064 L1030.07 682.064 L1029.51 682.064 L1028.95 682.064 L1028.39 682.064 L1027.83 682.064 L1027.28 682.064 L1026.72 682.064 L1026.16 682.064 L1025.6 682.064 L1025.04 682.064 L1024.48 682.064 L1023.92 682.064 L1023.36 682.064 L1022.8 682.064 L1022.24 682.064 L1021.68 682.064 L1021.12 682.064 L1020.56 682.064 L1020.01 682.064 L1019.45 682.064 L1018.89 682.064 L1018.33 682.064 L1017.77 682.064 L1017.21 682.064 L1016.65 682.064 L1016.09 682.064 L1015.53 682.064 L1014.97 682.064 L1014.41 682.064 L1013.85 682.064 L1013.29 682.064 L1012.73 682.064 L1012.18 682.064 L1011.62 682.064 L1011.06 682.064 L1010.5 682.064 L1009.94 682.064 L1009.38 682.064 L1008.82 682.064 L1008.26 682.064 L1007.7 682.064 L1007.14 682.064 L1006.58 682.064 L1006.02 682.064 L1005.46 682.064 L1004.91 682.064 L1004.35 682.064 L1003.79 682.064 L1003.23 682.064 L1002.67 682.064 L1002.11 682.064 L1001.55 682.064 L1000.99 682.064 L1000.43 682.064 L999.872 682.064 L999.313 682.064 L998.754 682.064 L998.194 682.064 L997.635 682.064 L997.076 682.064 L996.517 682.064 L995.957 682.064 L995.398 682.064 L994.839 682.064 L994.28 682.064 L993.72 682.064 L993.161 682.064 L992.602 682.064 L992.043 682.064 L991.483 682.064 L990.924 682.064 L990.365 682.064 L989.806 682.064 L989.246 682.064 L988.687 682.064 L988.128 682.064 L987.569 682.064 L987.009 682.064 L986.45 682.064 L985.891 682.064 L985.332 682.064 L984.772 682.064 L984.213 682.064 L983.654 682.064 L983.095 682.064 L982.535 682.064 L981.976 682.064 L981.417 682.064 L980.858 682.064 L980.298 682.064 L979.739 682.064 L979.18 682.064 L978.621 682.064 L978.061 682.064 L977.502 682.064 L976.943 682.064 L976.384 682.064 L975.824 682.064 L975.265 682.064 L974.706 682.064 L974.147 682.064 L973.587 682.064 L973.028 682.064 L972.469 682.064 L971.91 682.064 L971.35 682.064 L970.791 682.064 L970.232 682.064 L969.673 682.064 L969.113 682.064 L968.554 682.064 L967.995 682.064 L967.436 682.064 L966.876 682.064 L966.317 682.064 L965.758 682.064 L965.199 682.064 L964.639 682.064 L964.08 682.064 L963.521 682.064 L962.962 682.064 L962.402 682.064 L961.843 682.064 L961.284 682.064 L960.725 682.064 L960.165 682.064 L959.606 682.064 L959.047 682.064 L958.488 682.064 L957.928 682.064 L957.369 682.064 L956.81 682.064 L956.251 682.064 L955.691 682.064 L955.132 682.064 L954.573 682.064 L954.014 682.064 L953.454 682.064 L952.895 682.064 L952.336 682.064 L951.777 682.064 L951.217 682.064 L950.658 682.064 L950.099 682.064 L949.54 682.064 L948.98 682.064 L948.421 682.064 L947.862 682.064 L947.303 682.064 L946.743 682.064 L946.184 682.064 L945.625 682.064 L945.066 682.064 L944.506 682.064 L943.947 682.064 L943.388 682.064 L942.829 682.064 L942.269 682.064 L941.71 682.064 L941.151 682.064 L940.592 682.064 L940.032 682.064 L939.473 682.064 L938.914 682.064 L938.355 682.064 L937.795 682.064 L937.236 682.064 L936.677 682.064 L936.118 682.064 L935.558 682.064 L934.999 682.064 L934.44 682.064 L933.881 682.064 L933.321 682.064 L932.762 682.064 L932.203 682.064 L931.644 682.064 L931.084 682.064 L930.525 682.064 L929.966 682.064 L929.406 682.064 L928.847 682.064 L928.288 682.064 L927.729 682.064 L927.169 682.064 L926.61 682.064 L926.051 682.064 L925.492 682.064 L924.932 682.064 L924.373 682.064 L923.814 682.064 L923.255 682.064 L922.695 682.064 L922.136 682.064 L921.577 682.064 L921.018 682.064 L920.458 682.064 L919.899 682.064 L919.34 682.064 L918.781 682.064 L918.221 682.064 L917.662 682.064 L917.103 682.064 L916.544 682.064 L915.984 682.064 L915.425 682.064 L914.866 682.064 L914.307 682.064 L913.747 682.064 L913.188 682.064 L912.629 682.064 L912.07 682.064 L911.51 682.064 L910.951 682.064 L910.392 682.064 L909.833 682.064 L909.273 682.064 L908.714 682.064 L908.155 682.064 L907.596 682.064 L907.036 682.064 L906.477 682.064 L905.918 682.064 L905.359 682.064 L904.799 682.064 L904.24 682.064 L903.681 682.064 L903.122 682.064 L902.562 682.064 L902.003 682.064 L901.444 682.064 L900.885 682.064 L900.325 682.064 L899.766 682.064 L899.207 682.064 L898.648 682.064 L898.088 682.064 L897.529 682.064 L896.97 682.064 L896.411 682.064 L895.851 682.064 L895.292 682.064 L894.733 682.064 L894.174 682.064 L893.614 682.064 L893.055 682.064 L892.496 682.064 L891.937 682.064 L891.377 682.064 L890.818 682.064 L890.259 682.064 L889.7 682.064 L889.14 682.064 L888.581 682.064 L888.022 682.064 L887.463 682.064 L886.903 682.064 L886.344 682.064 L885.785 682.064 L885.226 682.064 L884.666 682.064 L884.107 682.064 L883.548 682.064 L882.989 682.064 L882.429 682.064 L881.87 682.064 L881.311 682.064 L880.752 682.064 L880.192 682.064 L879.633 682.064 L879.074 682.064 L878.515 682.064 L877.955 682.064 L877.396 682.064 L876.837 682.064 L876.278 682.064 L875.718 682.064 L875.159 682.064 L874.6 682.064 L874.041 682.064 L873.481 682.064 L872.922 682.064 L872.363 682.064 L871.804 682.064 L871.244 682.064 L870.685 682.064 L870.126 682.064 L869.567 682.064 L869.007 682.064 L868.448 682.064 L867.889 682.064 L867.33 682.064 L866.77 682.064 L866.211 682.064 L865.652 682.064 L865.093 682.064 L864.533 682.064 L863.974 682.064 L863.415 682.064 L862.856 682.064 L862.296 682.064 L861.737 682.064 L861.178 682.064 L860.619 682.064 L860.059 682.064 L859.5 682.064 L858.941 682.064 L858.382 682.064 L857.822 682.064 L857.263 682.064 L856.704 682.064 L856.145 682.064 L855.585 682.064 L855.026 682.064 L854.467 682.064 L853.908 682.064 L853.348 682.064 L852.789 682.064 L852.23 682.064 L851.671 682.064 L851.111 682.064 L850.552 682.064 L849.993 682.064 L849.434 682.064 L848.874 682.064 L848.315 682.064 L847.756 682.064 L847.197 682.064 L846.637 682.064 L846.078 682.064 L845.519 682.064 L844.96 682.064 L844.4 682.064 L843.841 682.064 L843.282 682.064 L842.723 682.064 L842.163 682.064 L841.604 682.064 L841.045 682.064 L840.486 682.064 L839.926 682.064 L839.367 682.064 L838.808 682.064 L838.249 682.064 L837.689 682.064 L837.13 682.064 L836.571 682.064 L836.012 682.064 L835.452 682.064 L834.893 682.064 L834.334 682.064 L833.775 682.064 L833.215 682.064 L832.656 682.064 L832.097 682.064 L831.538 682.064 L830.978 682.064 L830.419 682.064 L829.86 682.064 L829.301 682.064 L828.741 682.064 L828.182 682.064 L827.623 682.064 L827.064 682.064 L826.504 682.064 L825.945 682.064 L825.386 682.064 L824.827 682.064 L824.267 682.064 L823.708 682.064 L823.149 682.064 L822.59 682.064 L822.03 682.064 L821.471 682.064 L820.912 682.064 L820.353 682.064 L819.793 682.064 L819.234 682.064 L818.675 682.064 L818.116 682.064 L817.556 682.064 L816.997 682.064 L816.438 682.064 L815.879 682.064 L815.319 682.064 L814.76 682.064 L814.201 682.064 L813.642 682.064 L813.082 682.064 L812.523 682.064 L811.964 682.064 L811.405 682.064 L810.845 682.064 L810.286 682.064 L809.727 682.064 L809.168 682.064 L808.608 682.064 L808.049 682.064 L807.49 682.064 L806.931 682.064 L806.371 682.064 L805.812 682.064 L805.253 682.064 L804.693 682.064 L804.134 682.064 L803.575 682.064 L803.016 682.064 L802.456 682.064 L801.897 682.064 L801.338 682.064 L800.779 682.064 L800.219 682.064 L799.66 682.064 L799.101 682.064 L798.542 682.064 L797.982 682.064 L797.423 682.064 L796.864 682.064 L796.305 682.064 L795.745 682.064 L795.186 682.064 L794.627 682.064 L794.068 682.064 L793.508 682.064 L792.949 682.064 L792.39 682.064 L791.831 682.064 L791.271 682.064 L790.712 682.064 L790.153 682.064 L789.594 682.064 L789.034 682.064 L788.475 682.064 L787.916 682.064 L787.357 682.064 L786.797 682.064 L786.238 682.064 L785.679 682.064 L785.12 682.064 L784.56 682.064 L784.001 682.064 L783.442 682.064 L782.883 682.064 L782.323 682.064 L781.764 682.064 L781.205 682.064 L780.646 682.064 L780.086 682.064 L779.527 682.064 L778.968 682.064 L778.409 682.064 L777.849 682.064 L777.29 682.064 L776.731 682.064 L776.172 682.064 L775.612 682.064 L775.053 682.064 L774.494 682.064 L773.935 682.064 L773.375 682.064 L772.816 682.064 L772.257 682.064 L771.698 682.064 L771.138 682.064 L770.579 682.064 L770.02 682.064 L769.461 682.064 L768.901 682.064 L768.342 682.064 L767.783 682.064 L767.224 682.064 L766.664 682.064 L766.105 682.064 L765.546 682.064 L764.987 682.064 L764.427 682.064 L763.868 682.064 L763.309 682.064 L762.75 682.064 L762.19 682.064 L761.631 682.064 L761.072 682.064 L760.513 682.064 L759.953 682.064 L759.394 682.064 L758.835 682.064 L758.276 682.064 L757.716 682.064 L757.157 682.064 L756.598 682.064 L756.039 682.064 L755.479 682.064 L754.92 682.064 L754.361 682.064 L753.802 682.064 L753.242 682.064 L752.683 682.064 L752.124 682.064 L751.565 682.064 L751.005 682.064 L750.446 682.064 L749.887 682.064 L749.328 682.064 L748.768 682.064 L748.209 682.064 L747.65 682.064 L747.091 682.064 L746.531 682.064 L745.972 682.064 L745.413 682.064 L744.854 682.064 L744.294 682.064 L743.735 682.064 L743.176 682.064 L742.617 682.064 L742.057 682.064 L741.498 682.064 L740.939 682.064 L740.38 682.064 L739.82 682.064 L739.261 682.064 L738.702 682.064 L738.143 682.064 L737.583 682.064 L737.024 682.064 L736.465 682.064 L735.906 682.064 L735.346 682.064 L734.787 682.064 L734.228 682.064 L733.669 682.064 L733.109 682.064 L732.55 682.064 L731.991 682.064 L731.432 682.064 L730.872 682.064 L730.313 682.064 L729.754 682.064 L729.195 682.064 L728.635 682.064 L728.076 682.064 L727.517 682.064 L726.958 682.064 L726.398 682.064 L725.839 682.064 L725.28 682.064 L724.721 682.064 L724.161 682.064 L723.602 682.064 L723.043 682.064 L722.484 682.064 L721.924 682.064 L721.365 682.064 L720.806 682.064 L720.247 682.064  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.096 720.806,683.096 721.365,683.096 721.924,683.096 722.484,683.096 723.043,683.096 723.602,683.096 724.161,683.096 724.721,683.096 725.28,683.096 725.839,683.096 726.398,683.096 726.958,683.096 727.517,683.096 728.076,683.096 728.635,683.096 729.195,683.096 729.754,683.096 730.313,683.096 730.872,683.096 731.432,683.096 731.991,683.096 732.55,683.096 733.109,683.096 733.669,683.096 734.228,683.096 734.787,683.096 735.346,683.096 735.906,683.096 736.465,683.096 737.024,683.096 737.583,683.096 738.143,683.096 738.702,683.096 739.261,683.096 739.82,683.096 740.38,683.096 740.939,683.096 741.498,683.096 742.057,683.096 742.617,683.096 743.176,683.096 743.735,683.096 744.294,683.096 744.854,683.096 745.413,683.096 745.972,683.096 746.531,683.096 747.091,683.096 747.65,683.096 748.209,683.096 748.768,683.096 749.328,683.096 749.887,683.096 750.446,683.096 751.005,683.096 751.565,683.096 752.124,683.096 752.683,683.096 753.242,683.096 753.802,683.096 754.361,683.096 754.92,683.096 755.479,683.096 756.039,683.096 756.598,683.096 757.157,683.096 757.716,683.096 758.276,683.096 758.835,683.096 759.394,683.096 759.953,683.096 760.513,683.096 761.072,683.096 761.631,683.096 762.19,683.096 762.75,683.096 763.309,683.096 763.868,683.096 764.427,683.096 764.987,683.096 765.546,683.096 766.105,683.096 766.664,683.096 767.224,683.096 767.783,683.096 768.342,683.096 768.901,683.096 769.461,683.096 770.02,683.096 770.579,683.096 771.138,683.096 771.698,683.096 772.257,683.096 772.816,683.096 773.375,683.096 773.935,683.096 774.494,683.096 775.053,683.096 775.612,683.096 776.172,683.096 776.731,683.096 777.29,683.096 777.849,683.096 778.409,683.096 778.968,683.096 779.527,683.096 780.086,683.096 780.646,683.096 781.205,683.096 781.764,683.096 782.323,683.096 782.883,683.096 783.442,683.096 784.001,683.096 784.56,683.096 785.12,683.096 785.679,683.096 786.238,683.096 786.797,683.096 787.357,683.096 787.916,683.096 788.475,683.096 789.034,683.096 789.594,683.096 790.153,683.096 790.712,683.096 791.271,683.096 791.831,683.096 792.39,683.096 792.949,683.096 793.508,683.096 794.068,683.096 794.627,683.096 795.186,683.096 795.745,683.096 796.305,683.096 796.864,683.096 797.423,683.096 797.982,683.096 798.542,683.096 799.101,683.096 799.66,683.096 800.219,683.096 800.779,683.096 801.338,683.096 801.897,683.096 802.456,683.096 803.016,683.096 803.575,683.096 804.134,683.096 804.693,683.096 805.253,683.096 805.812,683.096 806.371,683.096 806.931,683.096 807.49,683.096 808.049,683.096 808.608,683.096 809.168,683.096 809.727,683.096 810.286,683.096 810.845,683.096 811.405,683.096 811.964,683.096 812.523,683.096 813.082,683.096 813.642,683.096 814.201,683.096 814.76,683.096 815.319,683.096 815.879,683.096 816.438,683.096 816.997,683.096 817.556,683.096 818.116,683.096 818.675,683.096 819.234,683.096 819.793,683.096 820.353,683.096 820.912,683.096 821.471,683.096 822.03,683.096 822.59,683.096 823.149,683.096 823.708,683.096 824.267,683.096 824.827,683.096 825.386,683.096 825.945,683.096 826.504,683.096 827.064,683.096 827.623,683.096 828.182,683.096 828.741,683.096 829.301,683.096 829.86,683.096 830.419,683.096 830.978,683.096 831.538,683.096 832.097,683.096 832.656,683.096 833.215,683.096 833.775,683.096 834.334,683.096 834.893,683.096 835.452,683.096 836.012,683.096 836.571,683.096 837.13,683.096 837.689,683.096 838.249,683.096 838.808,683.096 839.367,683.096 839.926,683.096 840.486,683.096 841.045,683.096 841.604,683.096 842.163,683.096 842.723,683.096 843.282,683.096 843.841,683.096 844.4,683.096 844.96,683.096 845.519,683.096 846.078,683.096 846.637,683.096 847.197,683.096 847.756,683.096 848.315,683.096 848.874,683.096 849.434,683.096 849.993,683.096 850.552,683.096 851.111,683.096 851.671,683.096 852.23,683.096 852.789,683.096 853.348,683.096 853.908,683.096 854.467,683.096 855.026,683.096 855.585,683.096 856.145,683.096 856.704,683.096 857.263,683.096 857.822,683.096 858.382,683.096 858.941,683.096 859.5,683.096 860.059,683.096 860.619,683.096 861.178,683.096 861.737,683.096 862.296,683.096 862.856,683.096 863.415,683.096 863.974,683.096 864.533,683.096 865.093,683.096 865.652,683.096 866.211,683.096 866.77,683.096 867.33,683.096 867.889,683.096 868.448,683.096 869.007,683.096 869.567,683.096 870.126,683.096 870.685,683.096 871.244,683.096 871.804,683.096 872.363,683.096 872.922,683.096 873.481,683.096 874.041,683.096 874.6,683.096 875.159,683.096 875.718,683.096 876.278,683.096 876.837,683.096 877.396,683.096 877.955,683.096 878.515,683.096 879.074,683.096 879.633,683.096 880.192,683.096 880.752,683.096 881.311,683.096 881.87,683.096 882.429,683.096 882.989,683.096 883.548,683.096 884.107,683.096 884.666,683.096 885.226,683.096 885.785,683.096 886.344,683.096 886.903,683.096 887.463,683.096 888.022,683.096 888.581,683.096 889.14,683.096 889.7,683.096 890.259,683.096 890.818,683.096 891.377,683.096 891.937,683.096 892.496,683.096 893.055,683.096 893.614,683.096 894.174,683.096 894.733,683.096 895.292,683.096 895.851,683.096 896.411,683.096 896.97,683.096 897.529,683.096 898.088,683.096 898.648,683.096 899.207,683.096 899.766,683.096 900.325,683.096 900.885,683.096 901.444,683.096 902.003,683.096 902.562,683.096 903.122,683.096 903.681,683.096 904.24,683.096 904.799,683.096 905.359,683.096 905.918,683.096 906.477,683.096 907.036,683.096 907.596,683.096 908.155,683.096 908.714,683.096 909.273,683.096 909.833,683.096 910.392,683.096 910.951,683.096 911.51,683.096 912.07,683.096 912.629,683.096 913.188,683.096 913.747,683.096 914.307,683.096 914.866,683.096 915.425,683.096 915.984,683.096 916.544,683.096 917.103,683.096 917.662,683.096 918.221,683.096 918.781,683.096 919.34,683.096 919.899,683.096 920.458,683.096 921.018,683.096 921.577,683.096 922.136,683.096 922.695,683.096 923.255,683.096 923.814,683.096 924.373,683.096 924.932,683.096 925.492,683.096 926.051,683.096 926.61,683.096 927.169,683.096 927.729,683.096 928.288,683.096 928.847,683.096 929.406,683.096 929.966,683.096 930.525,683.096 931.084,683.096 931.644,683.096 932.203,683.096 932.762,683.096 933.321,683.096 933.881,683.096 934.44,683.096 934.999,683.096 935.558,683.096 936.118,683.096 936.677,683.096 937.236,683.096 937.795,683.096 938.355,683.096 938.914,683.096 939.473,683.096 940.032,683.096 940.592,683.096 941.151,683.096 941.71,683.096 942.269,683.096 942.829,683.096 943.388,683.096 943.947,683.096 944.506,683.096 945.066,683.096 945.625,683.096 946.184,683.096 946.743,683.096 947.303,683.096 947.862,683.096 948.421,683.096 948.98,683.096 949.54,683.096 950.099,683.096 950.658,683.096 951.217,683.096 951.777,683.096 952.336,683.096 952.895,683.096 953.454,683.096 954.014,683.096 954.573,683.096 955.132,683.096 955.691,683.096 956.251,683.096 956.81,683.096 957.369,683.096 957.928,683.096 958.488,683.096 959.047,683.096 959.606,683.096 960.165,683.096 960.725,683.096 961.284,683.096 961.843,683.096 962.402,683.096 962.962,683.096 963.521,683.096 964.08,683.096 964.639,683.096 965.199,683.096 965.758,683.096 966.317,683.096 966.876,683.096 967.436,683.096 967.995,683.096 968.554,683.096 969.113,683.096 969.673,683.096 970.232,683.096 970.791,683.096 971.35,683.096 971.91,683.096 972.469,683.096 973.028,683.096 973.587,683.096 974.147,683.096 974.706,683.096 975.265,683.096 975.824,683.096 976.384,683.096 976.943,683.096 977.502,683.096 978.061,683.096 978.621,683.096 979.18,683.096 979.739,683.096 980.298,683.096 980.858,683.096 981.417,683.096 981.976,683.096 982.535,683.096 983.095,683.096 983.654,683.096 984.213,683.096 984.772,683.096 985.332,683.096 985.891,683.096 986.45,683.096 987.009,683.096 987.569,683.096 988.128,683.096 988.687,683.096 989.246,683.096 989.806,683.096 990.365,683.096 990.924,683.096 991.483,683.096 992.043,683.096 992.602,683.096 993.161,683.096 993.72,683.096 994.28,683.096 994.839,683.096 995.398,683.096 995.957,683.096 996.517,683.096 997.076,683.096 997.635,683.096 998.194,683.096 998.754,683.096 999.313,683.096 999.872,683.096 1000.43,683.096 1000.99,683.096 1001.55,683.096 1002.11,683.096 1002.67,683.096 1003.23,683.096 1003.79,683.096 1004.35,683.096 1004.91,683.096 1005.46,683.096 1006.02,683.096 1006.58,683.096 1007.14,683.096 1007.7,683.096 1008.26,683.096 1008.82,683.096 1009.38,683.096 1009.94,683.096 1010.5,683.096 1011.06,683.096 1011.62,683.096 1012.18,683.096 1012.73,683.096 1013.29,683.096 1013.85,683.096 1014.41,683.096 1014.97,683.096 1015.53,683.096 1016.09,683.096 1016.65,683.096 1017.21,683.096 1017.77,683.096 1018.33,683.096 1018.89,683.096 1019.45,683.096 1020.01,683.096 1020.56,683.096 1021.12,683.096 1021.68,683.096 1022.24,683.096 1022.8,683.096 1023.36,683.096 1023.92,683.096 1024.48,683.096 1025.04,683.096 1025.6,683.096 1026.16,683.096 1026.72,683.096 1027.28,683.096 1027.83,683.096 1028.39,683.096 1028.95,683.096 1029.51,683.096 1030.07,683.096 1030.63,683.096 1031.19,683.096 1031.75,683.096 1032.31,683.096 1032.87,683.096 1033.43,683.096 1033.99,683.096 1034.55,683.096 1035.1,683.096 1035.66,683.096 1036.22,683.096 1036.78,683.096 1037.34,683.096 1037.9,683.096 1038.46,683.096 1039.02,683.096 1039.58,683.096 1040.14,683.096 1040.7,683.096 1041.26,683.096 1041.82,683.096 1042.38,683.096 1042.93,683.096 1043.49,683.096 1044.05,683.096 1044.61,683.096 1045.17,683.096 1045.73,683.096 1046.29,683.096 1046.85,683.096 1047.41,683.096 1047.97,683.096 1048.53,683.096 1049.09,683.096 1049.65,683.096 1050.2,683.096 1050.76,683.096 1051.32,683.096 1051.88,683.096 1052.44,683.096 1053,683.096 1053.56,683.096 1054.12,683.096 1054.68,683.096 1055.24,683.096 1055.8,683.096 1056.36,683.096 1056.92,683.096 1057.48,683.096 1058.03,683.096 1058.59,683.096 1059.15,683.096 1059.71,683.096 1060.27,683.096 1060.83,683.096 1061.39,683.096 1061.95,683.096 1062.51,683.096 1063.07,683.096 1063.63,683.096 1064.19,683.096 1064.75,683.096 1065.3,683.096 1065.86,683.096 1066.42,683.096 1066.98,683.096 1067.54,683.096 1068.1,683.096 1068.66,683.096 1069.22,683.096 1069.78,683.096 1070.34,683.096 1070.9,683.096 1071.46,683.096 1072.02,683.096 1072.57,683.096 1073.13,683.096 1073.69,683.096 1074.25,683.096 1074.81,683.096 1075.37,683.096 1075.93,683.096 1076.49,683.096 1077.05,683.096 1077.61,683.096 1078.17,683.096 1078.73,683.096 1079.29,683.096 1079.85,683.096 1080.4,683.096 1080.96,683.096 1081.52,683.096 1082.08,683.096 1082.64,683.096 1083.2,683.096 1083.76,683.096 1084.32,683.096 1084.88,683.096 1085.44,683.096 1086,683.096 1086.56,683.096 1087.12,683.096 1087.67,683.096 1088.23,683.096 1088.79,683.096 1089.35,683.096 1089.91,683.096 1090.47,683.096 1091.03,683.096 1091.59,683.096 1092.15,683.096 1092.71,683.096 1093.27,683.096 1093.83,683.096 1094.39,683.096 1094.94,683.096 1095.5,683.096 1096.06,683.096 1096.62,683.096 1097.18,683.096 1097.74,683.096 1098.3,683.096 1098.86,683.096 1099.42,683.096 1099.98,683.096 1100.54,683.096 1101.1,683.096 1101.66,683.096 1102.22,683.096 1102.77,683.096 1103.33,683.096 1103.89,683.096 1104.45,683.096 1105.01,683.096 1105.57,683.096 1106.13,683.096 1106.69,683.096 1107.25,683.096 1107.81,683.096 1108.37,683.096 1108.93,683.096 1109.49,683.096 1110.04,683.096 1110.6,683.096 1111.16,683.096 1111.72,683.096 1112.28,683.096 1112.84,683.096 1113.4,683.096 1113.96,683.096 1114.52,683.096 1115.08,683.096 1115.64,683.096 1116.2,683.096 1116.76,683.096 1117.31,683.096 1117.87,683.096 1118.43,683.096 1118.99,683.096 1119.55,683.096 1120.11,683.096 1120.67,683.096 1121.23,683.096 1121.79,683.096 1122.35,683.096 1122.91,683.096 1123.47,683.096 1124.03,683.096 1124.59,683.096 1125.14,683.096 1125.7,683.096 1126.26,683.096 1126.82,683.096 1127.38,683.096 1127.94,683.096 1128.5,683.096 1129.06,683.096 1129.62,683.096 1130.18,683.096 1130.74,683.096 1131.3,683.096 1131.86,683.096 1132.41,683.096 1132.97,683.096 1133.53,683.096 1134.09,683.096 1134.65,683.096 1135.21,683.096 1135.77,683.096 1136.33,683.096 1136.89,683.096 1137.45,683.096 1138.01,683.096 1138.57,683.096 1139.13,683.096 1139.68,683.096 1140.24,683.096 1140.8,683.096 1141.36,683.096 1141.92,683.096 1142.48,683.096 1143.04,683.096 1143.6,683.096 1144.16,683.096 1144.72,683.096 1145.28,683.096 1145.84,683.096 1146.4,683.096 1146.96,683.096 1147.51,683.096 1148.07,683.096 1148.63,683.096 1149.19,683.096 1149.75,683.096 1150.31,683.096 1150.87,683.096 1151.43,683.096 1151.99,683.096 1152.55,683.096 1153.11,683.096 1153.67,683.096 1154.23,683.096 1154.78,683.096 1155.34,683.096 1155.9,683.096 1156.46,683.096 1157.02,683.096 1157.58,683.096 1158.14,683.096 1158.7,683.096 1159.26,683.096 1159.82,683.096 1160.38,683.096 1160.94,683.096 1161.5,683.096 1162.05,683.096 1162.61,683.096 1163.17,683.096 1163.73,683.096 1164.29,683.096 1164.85,683.096 1165.41,683.096 1165.97,683.096 1166.53,683.096 1167.09,683.096 1167.65,683.096 1168.21,683.096 1168.77,683.096 1169.33,683.096 1169.88,683.096 1170.44,683.096 1171,683.096 1171.56,683.096 1172.12,683.096 1172.68,683.096 1173.24,683.096 1173.8,683.096 1174.36,683.096 1174.92,683.096 1175.48,683.096 1176.04,683.096 1176.6,683.096 1177.15,683.096 1177.71,683.096 1178.27,683.096 1178.83,683.096 1179.39,683.096 1179.95,683.096 1180.51,683.096 1181.07,683.096 1181.63,683.096 1182.19,683.096 1182.75,683.096 1183.31,683.096 1183.87,683.096 1184.43,683.096 1184.98,683.096 1185.54,683.096 1186.1,683.096 1186.66,683.096 1187.22,683.096 1187.78,683.096 1188.34,683.096 1188.9,683.096 1189.46,683.096 1190.02,683.096 1190.58,683.096 1191.14,683.096 1191.7,683.096 1192.25,683.096 1192.81,683.096 1193.37,683.096 1193.93,683.096 1194.49,683.096 1195.05,683.096 1195.61,683.096 1196.17,683.096 1196.73,683.096 1197.29,683.096 1197.85,683.096 1198.41,683.096 1198.97,683.096 1199.52,683.096 1200.08,683.096 1200.64,683.096 1201.2,683.096 1201.76,683.096 1202.32,683.096 1202.88,683.096 1203.44,683.096 1204,683.096 1204.56,683.096 1205.12,683.096 1205.68,683.096 1206.24,683.096 1206.8,683.096 1207.35,683.096 1207.91,683.096 1208.47,683.096 1209.03,683.096 1209.59,683.096 1210.15,683.096 1210.71,683.096 1211.27,683.096 1211.83,683.096 1212.39,683.096 1212.95,683.096 1213.51,683.096 1214.07,683.096 1214.62,683.096 1215.18,683.096 1215.74,683.096 1216.3,683.096 1216.86,683.096 1217.42,683.096 1217.98,683.096 1218.54,683.096 1219.1,683.096 1219.66,683.096 1220.22,683.096 1220.78,683.096 1221.34,683.096 1221.89,683.096 1222.45,683.096 1223.01,683.096 1223.57,683.096 1224.13,683.096 1224.69,683.096 1225.25,683.096 1225.81,683.096 1226.37,683.096 1226.93,683.096 1227.49,683.096 1228.05,683.096 1228.61,683.096 1229.17,683.096 1229.72,683.096 1230.28,683.096 1230.84,683.096 1231.4,683.096 1231.96,683.096 1232.52,683.096 1233.08,683.096 1233.64,683.096 1234.2,683.096 1234.76,683.096 1235.32,683.096 1235.88,683.096 1236.44,683.096 1236.99,683.096 1237.55,683.096 1238.11,683.096 1238.67,683.096 1239.23,683.096 1239.79,683.096 1240.35,683.096 1240.91,683.096 1241.47,683.096 1242.03,683.096 1242.59,683.096 1243.15,683.096 1243.71,683.096 1244.26,683.096 1244.82,683.096 1245.38,683.096 1245.94,683.096 1246.5,683.096 1247.06,683.096 1247.62,683.096 1248.18,683.096 1248.74,683.096 1249.3,683.096 1249.86,683.096 1250.42,683.096 1250.98,683.096 1251.54,683.096 1252.09,683.096 1252.65,683.096 1253.21,683.096 1253.77,683.096 1254.33,683.096 1254.89,683.096 1255.45,683.096 1256.01,683.096 1256.57,683.096 1257.13,683.096 1257.69,683.096 1258.25,683.096 1258.81,683.096 1259.36,683.096 1259.92,683.096 1260.48,683.096 1261.04,683.096 1261.6,683.096 1262.16,683.096 1262.72,683.096 1263.28,683.096 1263.84,683.096 1264.4,683.096 1264.96,683.096 1265.52,683.096 1266.08,683.096 1266.63,683.096 1267.19,683.096 1267.75,683.096 1268.31,683.096 1268.87,683.096 1269.43,683.096 1269.99,683.096 1270.55,683.096 1271.11,683.096 1271.67,683.096 1272.23,683.096 1272.79,683.096 1273.35,683.096 1273.91,683.096 1274.46,683.096 1275.02,683.096 1275.58,683.096 1276.14,683.096 1276.7,683.096 1277.26,683.096 1277.82,683.096 1278.38,683.096 1278.94,683.096 1279.5,683.096 1280.06,683.096 1280.62,683.096 1281.18,683.096 1281.73,683.096 1282.29,683.096 1282.85,683.096 1283.41,683.096 1283.97,683.096 1284.53,683.096 1285.09,683.096 1285.65,683.096 1286.21,683.096 1286.77,683.096 1287.33,683.096 1287.89,683.096 1288.45,683.096 1289,683.096 1289.56,683.096 1290.12,683.096 1290.68,683.096 1291.24,683.096 1291.8,683.096 1292.36,683.096 1292.92,683.096 1293.48,683.096 1294.04,683.096 1294.6,683.096 1295.16,683.096 1295.72,683.096 1296.28,683.096 1296.83,683.096 1297.39,683.096 1297.95,683.096 1298.51,683.096 1299.07,683.096 1299.63,683.096 1300.19,683.096 1300.75,683.096 1301.31,683.096 1301.87,683.096 1302.43,683.096 1302.99,683.096 1303.55,683.096 1304.1,683.096 1304.66,683.096 1305.22,683.096 1305.78,683.096 1306.34,683.096 1306.9,683.096 1307.46,683.096 1308.02,683.096 1308.58,683.096 1309.14,683.096 1309.7,683.096 1310.26,683.096 1310.82,683.096 1311.38,683.096 1311.93,683.096 1312.49,683.096 1313.05,683.096 1313.61,683.096 1314.17,683.096 1314.73,683.096 1315.29,683.096 1315.85,683.096 1316.41,683.096 1316.97,683.096 1317.53,683.096 1318.09,683.096 1318.65,683.096 1319.2,683.096 1319.76,683.096 1320.32,683.096 1320.88,683.096 1321.44,683.096 1322,683.096 1322.56,683.096 1323.12,683.096 1323.68,683.096 1324.24,683.096 1324.8,683.096 1325.36,683.096 1325.92,683.096 1326.47,683.096 1327.03,683.096 1327.59,683.096 1328.15,683.096 1328.71,683.096 1329.27,683.096 1329.83,683.096 1330.39,683.096 1330.95,683.096 1331.51,683.096 1332.07,683.096 1332.63,683.096 1333.19,683.096 1333.75,683.096 1334.3,683.096 1334.86,683.096 1335.42,683.096 1335.98,683.096 1336.54,683.096 1337.1,683.096 1337.66,683.096 1338.22,683.096 1338.78,683.096 1339.34,683.096 1339.9,683.096 1340.46,683.096 1341.02,683.096 1341.57,683.096 1342.13,683.096 1342.69,683.096 1343.25,683.096 1343.81,683.096 1344.37,683.096 1344.93,683.096 1345.49,683.096 1346.05,683.096 1346.61,683.096 1347.17,683.096 1347.73,683.096 1348.29,683.096 1348.84,683.096 1349.4,683.096 1349.96,683.096 1350.52,683.096 1351.08,683.096 1351.64,683.096 1352.2,683.096 1352.76,683.096 1353.32,683.096 1353.88,683.096 1354.44,683.096 1355,683.096 1355.56,683.096 1356.12,683.096 1356.67,683.096 1357.23,683.096 1357.79,683.096 1358.35,683.096 1358.91,683.096 1359.47,683.096 1360.03,683.096 1360.59,683.096 1361.15,683.096 1361.71,683.096 1362.27,683.096 1362.83,683.096 1363.39,683.096 1363.94,683.096 1364.5,683.096 1365.06,683.096 1365.62,683.096 1366.18,683.096 1366.74,683.096 1367.3,683.096 1367.86,683.096 1368.42,683.096 1368.98,683.096 1369.54,683.096 1370.1,683.096 1370.66,683.096 1371.21,683.096 1371.77,683.096 1372.33,683.096 1372.89,683.096 1373.45,683.096 1374.01,683.096 1374.57,683.096 1375.13,683.096 1375.69,683.096 1376.25,683.096 1376.81,683.096 1377.37,683.096 1377.93,683.096 1378.49,683.096 1379.04,683.096 1379.6,683.096 1380.16,683.096 1380.72,683.096 1381.28,683.096 1381.84,683.096 1382.4,683.096 1382.96,683.096 1383.52,683.096 1384.08,683.096 1384.64,683.096 1385.2,683.096 1385.76,683.096 1386.31,683.096 1386.87,683.096 1387.43,683.096 1387.99,683.096 1388.55,683.096 1389.11,683.096 1389.67,683.096 1390.23,683.096 1390.79,683.096 1391.35,683.096 1391.91,683.096 1392.47,683.096 1393.03,683.096 1393.58,683.096 1394.14,683.096 1394.7,683.096 1395.26,683.096 1395.82,683.096 1396.38,683.096 1396.94,683.096 1397.5,683.096 1398.06,683.096 1398.62,683.096 1399.18,683.096 1399.74,683.096 1400.3,683.096 1400.86,683.096 1401.41,683.096 1401.97,683.096 1402.53,683.096 1403.09,683.096 1403.65,683.096 1404.21,683.096 1404.77,683.096 1405.33,683.096 1405.89,683.096 1406.45,683.096 1407.01,683.096 1407.57,683.096 1408.13,683.096 1408.68,683.096 1409.24,683.096 1409.8,683.096 1410.36,683.096 1410.92,683.096 1411.48,683.096 1412.04,683.096 1412.6,683.096 1413.16,683.096 1413.72,683.096 1414.28,683.096 1414.84,683.096 1415.4,683.096 1415.95,683.096 1416.51,683.096 1417.07,683.096 1417.63,683.096 1418.19,683.096 1418.75,683.096 1419.31,683.096 1419.87,683.096 1420.43,683.096 1420.99,683.096 1421.55,683.096 1422.11,683.096 1422.67,683.096 1423.23,683.096 1423.78,683.096 1424.34,683.096 1424.9,683.096 1425.46,683.096 1426.02,683.096 1426.58,683.096 1427.14,683.096 1427.7,683.096 1428.26,683.096 1428.82,683.096 1429.38,683.096 1429.94,683.096 1430.5,683.096 1431.05,683.096 1431.61,683.096 1432.17,683.096 1432.73,683.096 1433.29,683.096 1433.85,683.096 1434.41,683.096 1434.97,683.096 1435.53,683.096 1436.09,683.096 1436.65,683.096 1437.21,683.096 1437.77,683.096 1438.33,683.096 1438.88,683.096 1439.44,683.096 1440,683.096 1440.56,683.096 1441.12,683.096 1441.68,683.096 1442.24,683.096 1442.8,683.096 1443.36,683.096 1443.92,683.096 1444.48,683.096 1445.04,683.096 1445.6,683.096 1446.15,683.096 1446.71,683.096 1447.27,683.096 1447.83,683.096 1448.39,683.096 1448.95,683.096 1449.51,683.096 1450.07,683.096 1450.63,683.096 1451.19,683.096 1451.75,683.096 1452.31,683.096 1452.87,683.096 1453.42,683.096 1453.98,683.096 1454.54,683.096 1455.1,683.096 1455.66,683.096 1456.22,683.096 1456.78,683.096 1457.34,683.096 1457.9,683.096 1458.46,683.096 1459.02,683.096 1459.58,683.096 1460.14,683.096 1460.7,683.096 1461.25,683.096 1461.81,683.096 1462.37,683.096 1462.93,683.096 1463.49,683.096 1464.05,683.096 1464.61,683.096 1465.17,683.096 1465.73,683.096 1466.29,683.096 1466.85,683.096 1467.41,683.096 1467.97,683.096 1468.52,683.096 1469.08,683.096 1469.64,683.096 1470.2,683.096 1470.76,683.096 1471.32,683.096 1471.88,683.096 1472.44,683.096 1473,683.096 1473.56,683.096 1474.12,683.096 1474.68,683.096 1475.24,683.096 1475.79,683.096 1476.35,683.096 1476.91,683.096 1477.47,683.096 1478.03,683.096 1478.59,683.096 1479.15,683.096 1479.71,683.096 1480.27,683.096 1480.83,683.096 1481.39,683.096 1481.95,683.096 1482.51,683.096 1483.07,683.096 1483.62,683.096 1484.18,683.096 1484.74,683.096 1485.3,683.096 1485.86,683.096 1486.42,683.096 1486.98,683.096 1487.54,683.096 1488.1,683.096 1488.66,683.096 1489.22,683.096 1489.78,683.096 1490.34,683.096 1490.89,683.096 1491.45,683.096 1492.01,683.096 1492.57,683.096 1493.13,683.096 1493.69,683.096 1494.25,683.096 1494.81,683.096 1495.37,683.096 1495.93,683.096 1496.49,683.096 1497.05,683.096 1497.61,683.096 1498.16,683.096 1498.72,683.096 1499.28,683.096 1499.84,683.096 1500.4,683.096 1500.96,683.096 1501.52,683.096 1502.08,683.096 1502.64,683.096 1503.2,683.096 1503.76,683.096 1504.32,683.096 1504.88,683.096 1505.44,683.096 1505.99,683.096 1506.55,683.096 1507.11,683.096 1507.67,683.096 1508.23,683.096 1508.79,683.096 1509.35,683.096 1509.91,683.096 1510.47,683.096 1511.03,683.096 1511.59,683.096 1512.15,683.096 1512.71,683.096 1513.26,683.096 1513.82,683.096 1514.38,683.096 1514.94,683.096 1515.5,683.096 1516.06,683.096 1516.62,683.096 1517.18,683.096 1517.74,683.096 1518.3,683.096 1518.86,683.096 1519.42,683.096 1519.98,683.096 1520.53,683.096 1521.09,683.096 1521.65,683.096 1522.21,683.096 1522.77,683.096 1523.33,683.096 1523.89,683.096 1524.45,683.096 1525.01,683.096 1525.57,683.096 1526.13,683.096 1526.69,683.096 1527.25,683.096 1527.81,683.096 1528.36,683.096 1528.92,683.096 1529.48,683.096 1530.04,683.096 1530.6,683.096 1531.16,683.096 1531.72,683.096 1532.28,683.096 1532.84,683.096 1533.4,683.096 1533.96,683.096 1534.52,683.096 1535.08,683.096 1535.63,683.096 1536.19,683.096 1536.75,683.096 1537.31,683.096 1537.87,683.096 1538.43,683.096 1538.99,683.096 1539.55,683.096 1540.11,683.096 1540.67,683.096 1541.23,683.096 1541.79,683.096 1542.35,683.096 1542.9,683.096 1543.46,683.096 1544.02,683.096 1544.58,683.096 1545.14,683.096 1545.7,683.096 1546.26,683.096 1546.82,683.096 1547.38,683.096 1547.94,683.096 1548.5,683.096 1549.06,683.096 1549.62,683.096 1550.18,683.096 1550.73,683.096 1551.29,683.096 1551.85,683.096 1552.41,683.096 1552.97,683.096 1553.53,683.096 1554.09,683.096 1554.65,683.096 1555.21,683.096 1555.77,683.096 1556.33,683.096 1556.89,683.096 1557.45,683.096 1558,683.096 1558.56,683.096 1559.12,683.096 1559.68,683.096 1560.24,683.096 1560.8,683.096 1561.36,683.096 1561.92,683.096 1562.48,683.096 1563.04,683.096 1563.6,683.096 1564.16,683.096 1564.72,683.096 1565.28,683.096 1565.83,683.096 1566.39,683.096 1566.95,683.096 1567.51,683.096 1568.07,683.096 1568.63,683.096 1569.19,683.096 1569.75,683.096 1570.31,683.096 1570.87,683.096 1571.43,683.096 1571.99,683.096 1572.55,683.096 1573.1,683.096 1573.66,683.096 1574.22,683.096 1574.78,683.096 1575.34,683.096 1575.9,683.096 1576.46,683.096 1577.02,683.096 1577.58,683.096 1578.14,683.096 1578.7,683.096 1579.26,683.096 1579.82,683.096 1580.37,683.096 1580.93,683.096 1581.49,683.096 1582.05,683.096 1582.61,683.096 1583.17,683.096 1583.73,683.096 1584.29,683.096 1584.85,683.096 1585.41,683.096 1585.97,683.096 1586.53,683.096 1587.09,683.096 1587.65,683.096 1588.2,683.096 1588.76,683.096 1589.32,683.096 1589.88,683.096 1590.44,683.096 1591,683.096 1591.56,683.096 1592.12,683.096 1592.68,683.096 1593.24,683.096 1593.8,683.096 1594.36,683.096 1594.92,683.096 1595.47,683.096 1596.03,683.096 1596.59,683.096 1597.15,683.096 1597.71,683.096 1598.27,683.096 1598.83,683.096 1599.39,683.096 1599.95,683.096 1600.51,683.096 1601.07,683.096 1601.63,683.096 1602.19,683.096 1602.74,683.096 1603.3,683.096 1603.86,683.096 1604.42,683.096 1604.98,683.096 1605.54,683.096 1606.1,683.096 1606.66,683.096 1607.22,683.096 1607.78,683.096 1608.34,683.096 1608.9,683.096 1609.46,683.096 1610.02,683.096 1610.57,683.096 1611.13,683.096 1611.69,683.096 1612.25,683.096 1612.81,683.096 1613.37,683.096 1613.93,683.096 1614.49,683.096 1615.05,683.096 1615.61,683.096 1616.17,683.096 1616.73,683.096 1617.29,683.096 1617.84,683.096 1618.4,683.096 1618.96,683.096 1619.52,683.096 1620.08,683.096 1620.64,683.096 1621.2,683.096 1621.76,683.096 1622.32,683.096 1622.88,683.096 1623.44,683.096 1624,683.096 1624.56,683.096 1625.11,683.096 1625.67,683.096 1626.23,683.096 1626.79,683.096 1627.35,683.096 1627.91,683.096 1628.47,683.096 1629.03,683.096 1629.59,683.096 1630.15,683.096 1630.71,683.096 1631.27,683.096 1631.83,683.096 1632.39,683.096 1632.94,683.096 1633.5,683.096 1634.06,683.096 1634.62,683.096 1635.18,683.096 1635.74,683.096 1636.3,683.096 1636.86,683.096 1637.42,683.096 1637.98,683.096 1638.54,683.096 1639.1,683.096 1639.66,683.096 1640.21,683.096 1640.77,683.096 1641.33,683.096 1641.89,683.096 1642.45,683.096 1643.01,683.096 1643.57,683.096 1644.13,683.096 1644.69,683.096 1645.25,683.096 1645.81,683.096 1646.37,683.096 1646.93,683.096 1647.48,683.096 1648.04,683.096 1648.6,683.096 1649.16,683.096 1649.72,683.096 1650.28,683.096 1650.84,683.096 1651.4,683.096 1651.96,683.096 1652.52,683.096 1653.08,683.096 1653.64,683.096 1654.2,683.096 1654.76,683.096 1655.31,683.096 1655.87,683.096 1656.43,683.096 1656.99,683.096 1657.55,683.096 1658.11,683.096 1658.67,683.096 1659.23,683.096 1659.79,683.096 1660.35,683.096 1660.91,683.096 1661.47,683.096 1662.03,683.096 1662.58,683.096 1663.14,683.096 1663.7,683.096 1664.26,683.096 1664.82,683.096 1665.38,683.096 1665.94,683.096 1666.5,683.096 1667.06,683.096 1667.62,683.096 1668.18,683.096 1668.74,683.096 1669.3,683.096 1669.85,683.096 1670.41,683.096 1670.97,683.096 1671.53,683.096 1672.09,683.096 1672.65,683.096 1673.21,683.096 1673.77,683.096 1674.33,683.096 1674.89,683.096 1675.45,683.096 1676.01,683.096 1676.57,683.096 1677.13,683.096 1677.68,683.096 1678.24,683.096 1678.8,683.096 1679.36,683.096 1679.92,683.096 1680.48,683.096 1681.04,683.096 1681.6,683.096 1682.16,683.096 1682.72,683.096 1683.28,683.096 1683.84,683.096 1684.4,683.096 1684.95,683.096 1685.51,683.096 1686.07,683.096 1686.63,683.096 1687.19,683.096 1687.75,683.096 1688.31,683.096 1688.87,683.096 1689.43,683.096 1689.99,683.096 1690.55,683.096 1691.11,683.096 1691.67,683.096 1692.23,683.096 1692.78,683.096 1693.34,683.096 1693.9,683.096 1694.46,683.096 1695.02,683.096 1695.58,683.096 1696.14,683.096 1696.7,683.096 1697.26,683.096 1697.82,683.096 1698.38,683.096 1698.94,683.096 1699.5,683.096 1700.05,683.096 1700.61,683.096 1701.17,683.096 1701.73,683.096 1702.29,683.096 1702.85,683.096 1703.41,683.096 1703.97,683.096 1704.53,683.096 1705.09,683.096 1705.65,683.096 1706.21,683.096 1706.77,683.096 1707.32,683.096 1707.88,683.096 1708.44,683.096 1709,683.096 1709.56,683.096 1710.12,683.096 1710.68,683.096 1711.24,683.096 1711.8,683.096 1712.36,683.096 1712.92,683.096 1713.48,683.096 1714.04,683.096 1714.6,683.096 1715.15,683.096 1715.71,683.096 1716.27,683.096 1716.83,683.096 1717.39,683.096 1717.95,683.096 1718.51,683.096 1719.07,683.096 1719.63,683.096 1720.19,683.096 1720.75,683.096 1721.31,683.096 1721.87,683.096 1722.42,683.096 1722.98,683.096 1723.54,683.096 1724.1,683.096 1724.66,683.096 1725.22,683.096 1725.78,683.096 1726.34,683.096 1726.9,683.096 1727.46,683.096 1728.02,683.096 1728.58,683.096 1729.14,683.096 1729.69,683.096 1730.25,683.096 1730.81,683.096 1731.37,683.096 1731.93,683.096 1732.49,683.096 1733.05,683.096 1733.61,683.096 1734.17,683.096 1734.73,683.096 1735.29,683.096 1735.85,683.096 1736.41,683.096 1736.97,683.096 1737.52,683.096 1738.08,683.096 1738.64,683.096 1739.2,683.096 1739.76,683.096 1740.32,683.096 1740.88,683.096 1741.44,683.096 1742,683.096 1742.56,683.096 1743.12,683.096 1743.68,683.096 1744.24,683.096 1744.79,683.096 1745.35,683.096 1745.91,683.096 1746.47,683.096 1747.03,683.096 1747.59,683.096 1748.15,683.096 1748.71,683.096 1749.27,683.096 1749.83,683.096 1750.39,683.096 1750.95,683.096 1751.51,683.096 1752.06,683.096 1752.62,683.096 1753.18,683.096 1753.74,683.096 1754.3,683.096 1754.86,683.096 1755.42,683.096 1755.98,683.096 1756.54,683.096 1757.1,683.096 1757.66,683.096 1758.22,683.096 1758.78,683.096 1759.34,683.096 1759.89,683.096 1760.45,683.096 1761.01,683.096 1761.57,683.096 1762.13,683.096 1762.69,683.096 1763.25,683.096 1763.81,683.096 1764.37,683.096 1764.93,683.096 1765.49,683.096 1766.05,683.096 1766.61,683.096 1767.16,683.096 1767.72,683.096 1768.28,683.096 1768.84,683.096 1769.4,683.096 1769.96,683.096 1770.52,683.096 1771.08,683.096 1771.64,683.096 1772.2,683.096 1772.76,683.096 1773.32,683.096 1773.88,683.096 1774.43,683.096 1774.99,683.096 1775.55,683.096 1776.11,683.096 1776.67,683.096 1777.23,683.096 1777.79,683.096 1778.35,683.096 1778.91,683.096 1779.47,683.096 1780.03,683.096 1780.59,683.096 1781.15,683.096 1781.71,683.096 1782.26,683.096 1782.82,683.096 1783.38,683.096 1783.94,683.096 1784.5,683.096 1785.06,683.096 1785.62,683.096 1786.18,683.096 1786.74,683.096 1787.3,683.096 1787.86,683.096 1788.42,683.096 1788.98,683.096 1789.53,683.096 1790.09,683.096 1790.65,683.096 1791.21,683.096 1791.77,683.096 1792.33,683.096 1792.89,683.096 1793.45,683.096 1794.01,683.096 1794.57,683.096 1795.13,683.096 1795.69,683.096 1796.25,683.096 1796.8,683.096 1797.36,683.096 1797.92,683.096 1798.48,683.096 1799.04,683.096 1799.6,683.096 1800.16,683.096 1800.72,683.096 1801.28,683.096 1801.84,683.096 1802.4,683.096 1802.96,683.096 1803.52,683.096 1804.08,683.096 1804.63,683.096 1805.19,683.096 1805.75,683.096 1806.31,683.096 1806.87,683.096 1807.43,683.096 1807.99,683.096 1808.55,683.096 1809.11,683.096 1809.67,683.096 1810.23,683.096 1810.79,683.096 1811.35,683.096 1811.9,683.096 1812.46,683.096 1813.02,683.096 1813.58,683.096 1814.14,683.096 1814.7,683.096 1815.26,683.096 1815.82,683.096 1816.38,683.096 1816.94,683.096 1817.5,683.096 1818.06,683.096 1818.62,683.096 1819.18,683.096 1819.73,683.096 1820.29,683.096 1820.85,683.096 1821.41,683.096 1821.97,683.096 1822.53,683.096 1823.09,683.096 1823.65,683.096 1824.21,683.096 1824.77,683.096 1825.33,683.096 1825.89,683.096 1826.45,683.096 1827,683.096 1827.56,683.096 1828.12,683.096 1828.68,683.096 1829.24,683.096 1829.8,683.096 1830.36,683.096 1830.92,683.096 1831.48,683.096 1832.04,683.096 1832.6,683.096 1833.16,683.096 1833.72,683.096 1834.27,683.096 1834.83,683.096 1835.39,683.096 1835.95,683.096 1836.51,683.096 1837.07,683.096 1837.63,683.096 1838.19,683.096 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031921886632518 ± 0.021507497434655083\nProjected Energy: -4.012624963823908 ± (0.005183642735512528, 0.005197054713258709)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.450378</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3486e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.069e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.017e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.423e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.594e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.265e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.97986399832163\n -3.3631242916133424\n -0.7590191922770675\n  0.13584182219622143\n  0.15789998694607554\n  0.8767114411781378\n  1.530592997097334\n  1.5835732611867304\n  3.0728703303258698\n  3.1256726539518382\n  4.862107221562169\n  6.2606948503805935\n  6.402671211183108\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
