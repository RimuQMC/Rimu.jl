var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2127763366357314 ± 0.0015931909390027798\n   G2(1) = 0.9179136910706553 ± 0.0007567919969757423\n   G2(2) = 0.981148789184463 ± 0.0006372512665141654\n   G2(3) = 0.9890987028540317 ± 0.0009585952983688792\n   G2(4) = 0.981148789184463 ± 0.0006372512665141654\n   G2(5) = 0.9179136910706553 ± 0.0007567919969757423\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9931915909721387 ± 0.12958625491068917\n   Replica 2: -3.9541976253084226 ± 0.13486672758723772\n   Replica 3: -3.982404309451655 ± 0.12381969651276342\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip780\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip781\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip782\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.21 2211.02,1003.21 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.583 2211.02,745.583 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.957 2211.02,487.957 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.332 2211.02,230.332 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.21 423.181,1003.21 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.583 423.181,745.583 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.957 423.181,487.957 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.332 423.181,230.332 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M290.043 1016.55 L306.363 1016.55 L306.363 1020.49 L284.418 1020.49 L284.418 1016.55 Q287.08 1013.8 291.664 1009.17 Q296.27 1004.52 297.451 1003.17 Q299.696 1000.65 300.576 998.914 Q301.478 997.155 301.478 995.465 Q301.478 992.71 299.534 990.974 Q297.613 989.238 294.511 989.238 Q292.312 989.238 289.858 990.002 Q287.427 990.766 284.65 992.317 L284.65 987.595 Q287.474 986.461 289.927 985.882 Q292.381 985.303 294.418 985.303 Q299.789 985.303 302.983 987.988 Q306.177 990.673 306.177 995.164 Q306.177 997.294 305.367 999.215 Q304.58 1001.11 302.474 1003.71 Q301.895 1004.38 298.793 1007.59 Q295.691 1010.79 290.043 1016.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M316.224 985.928 L334.58 985.928 L334.58 989.863 L320.506 989.863 L320.506 998.335 Q321.524 997.988 322.543 997.826 Q323.562 997.641 324.58 997.641 Q330.367 997.641 333.747 1000.81 Q337.126 1003.98 337.126 1009.4 Q337.126 1014.98 333.654 1018.08 Q330.182 1021.16 323.862 1021.16 Q321.687 1021.16 319.418 1020.79 Q317.173 1020.42 314.765 1019.68 L314.765 1014.98 Q316.849 1016.11 319.071 1016.67 Q321.293 1017.22 323.77 1017.22 Q327.774 1017.22 330.112 1015.12 Q332.45 1013.01 332.45 1009.4 Q332.45 1005.79 330.112 1003.68 Q327.774 1001.58 323.77 1001.58 Q321.895 1001.58 320.02 1001.99 Q318.168 1002.41 316.224 1003.29 L316.224 985.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 989.007 Q352.728 989.007 350.899 992.572 Q349.094 996.113 349.094 1003.24 Q349.094 1010.35 350.899 1013.91 Q352.728 1017.46 356.339 1017.46 Q359.973 1017.46 361.779 1013.91 Q363.608 1010.35 363.608 1003.24 Q363.608 996.113 361.779 992.572 Q359.973 989.007 356.339 989.007 M356.339 985.303 Q362.149 985.303 365.205 989.91 Q368.284 994.493 368.284 1003.24 Q368.284 1011.97 365.205 1016.58 Q362.149 1021.16 356.339 1021.16 Q350.529 1021.16 347.45 1016.58 Q344.395 1011.97 344.395 1003.24 Q344.395 994.493 347.45 989.91 Q350.529 985.303 356.339 985.303 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M286.062 728.303 L304.418 728.303 L304.418 732.238 L290.344 732.238 L290.344 740.71 Q291.363 740.363 292.381 740.201 Q293.4 740.016 294.418 740.016 Q300.205 740.016 303.585 743.187 Q306.964 746.358 306.964 751.775 Q306.964 757.353 303.492 760.455 Q300.02 763.534 293.701 763.534 Q291.525 763.534 289.256 763.164 Q287.011 762.793 284.603 762.052 L284.603 757.353 Q286.687 758.488 288.909 759.043 Q291.131 759.599 293.608 759.599 Q297.613 759.599 299.951 757.492 Q302.288 755.386 302.288 751.775 Q302.288 748.164 299.951 746.057 Q297.613 743.951 293.608 743.951 Q291.733 743.951 289.858 744.367 Q288.006 744.784 286.062 745.664 L286.062 728.303 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M326.177 731.381 Q322.566 731.381 320.737 734.946 Q318.932 738.488 318.932 745.617 Q318.932 752.724 320.737 756.289 Q322.566 759.83 326.177 759.83 Q329.811 759.83 331.617 756.289 Q333.446 752.724 333.446 745.617 Q333.446 738.488 331.617 734.946 Q329.811 731.381 326.177 731.381 M326.177 727.678 Q331.987 727.678 335.043 732.284 Q338.122 736.867 338.122 745.617 Q338.122 754.344 335.043 758.951 Q331.987 763.534 326.177 763.534 Q320.367 763.534 317.288 758.951 Q314.233 754.344 314.233 745.617 Q314.233 736.867 317.288 732.284 Q320.367 727.678 326.177 727.678 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 731.381 Q352.728 731.381 350.899 734.946 Q349.094 738.488 349.094 745.617 Q349.094 752.724 350.899 756.289 Q352.728 759.83 356.339 759.83 Q359.973 759.83 361.779 756.289 Q363.608 752.724 363.608 745.617 Q363.608 738.488 361.779 734.946 Q359.973 731.381 356.339 731.381 M356.339 727.678 Q362.149 727.678 365.205 732.284 Q368.284 736.867 368.284 745.617 Q368.284 754.344 365.205 758.951 Q362.149 763.534 356.339 763.534 Q350.529 763.534 347.45 758.951 Q344.395 754.344 344.395 745.617 Q344.395 736.867 347.45 732.284 Q350.529 727.678 356.339 727.678 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M284.835 470.677 L307.057 470.677 L307.057 472.668 L294.511 505.237 L289.627 505.237 L301.432 474.612 L284.835 474.612 L284.835 470.677 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M316.224 470.677 L334.58 470.677 L334.58 474.612 L320.506 474.612 L320.506 483.084 Q321.524 482.737 322.543 482.575 Q323.562 482.39 324.58 482.39 Q330.367 482.39 333.747 485.561 Q337.126 488.733 337.126 494.149 Q337.126 499.728 333.654 502.83 Q330.182 505.908 323.862 505.908 Q321.687 505.908 319.418 505.538 Q317.173 505.168 314.765 504.427 L314.765 499.728 Q316.849 500.862 319.071 501.418 Q321.293 501.973 323.77 501.973 Q327.774 501.973 330.112 499.867 Q332.45 497.76 332.45 494.149 Q332.45 490.538 330.112 488.432 Q327.774 486.325 323.77 486.325 Q321.895 486.325 320.02 486.742 Q318.168 487.159 316.224 488.038 L316.224 470.677 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 473.756 Q352.728 473.756 350.899 477.321 Q349.094 480.862 349.094 487.992 Q349.094 495.098 350.899 498.663 Q352.728 502.205 356.339 502.205 Q359.973 502.205 361.779 498.663 Q363.608 495.098 363.608 487.992 Q363.608 480.862 361.779 477.321 Q359.973 473.756 356.339 473.756 M356.339 470.052 Q362.149 470.052 365.205 474.659 Q368.284 479.242 368.284 487.992 Q368.284 496.719 365.205 501.325 Q362.149 505.908 356.339 505.908 Q350.529 505.908 347.45 501.325 Q344.395 496.719 344.395 487.992 Q344.395 479.242 347.45 474.659 Q350.529 470.052 356.339 470.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M256.664 243.676 L264.303 243.676 L264.303 217.311 L255.992 218.978 L255.992 214.718 L264.256 213.052 L268.932 213.052 L268.932 243.676 L276.571 243.676 L276.571 247.612 L256.664 247.612 L256.664 243.676 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M296.015 216.13 Q292.404 216.13 290.576 219.695 Q288.77 223.237 288.77 230.366 Q288.77 237.473 290.576 241.038 Q292.404 244.579 296.015 244.579 Q299.65 244.579 301.455 241.038 Q303.284 237.473 303.284 230.366 Q303.284 223.237 301.455 219.695 Q299.65 216.13 296.015 216.13 M296.015 212.427 Q301.826 212.427 304.881 217.033 Q307.96 221.616 307.96 230.366 Q307.96 239.093 304.881 243.7 Q301.826 248.283 296.015 248.283 Q290.205 248.283 287.127 243.7 Q284.071 239.093 284.071 230.366 Q284.071 221.616 287.127 217.033 Q290.205 212.427 296.015 212.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M326.177 216.13 Q322.566 216.13 320.737 219.695 Q318.932 223.237 318.932 230.366 Q318.932 237.473 320.737 241.038 Q322.566 244.579 326.177 244.579 Q329.811 244.579 331.617 241.038 Q333.446 237.473 333.446 230.366 Q333.446 223.237 331.617 219.695 Q329.811 216.13 326.177 216.13 M326.177 212.427 Q331.987 212.427 335.043 217.033 Q338.122 221.616 338.122 230.366 Q338.122 239.093 335.043 243.7 Q331.987 248.283 326.177 248.283 Q320.367 248.283 317.288 243.7 Q314.233 239.093 314.233 230.366 Q314.233 221.616 317.288 217.033 Q320.367 212.427 326.177 212.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 216.13 Q352.728 216.13 350.899 219.695 Q349.094 223.237 349.094 230.366 Q349.094 237.473 350.899 241.038 Q352.728 244.579 356.339 244.579 Q359.973 244.579 361.779 241.038 Q363.608 237.473 363.608 230.366 Q363.608 223.237 361.779 219.695 Q359.973 216.13 356.339 216.13 M356.339 212.427 Q362.149 212.427 365.205 217.033 Q368.284 221.616 368.284 230.366 Q368.284 239.093 365.205 243.7 Q362.149 248.283 356.339 248.283 Q350.529 248.283 347.45 243.7 Q344.395 239.093 344.395 230.366 Q344.395 221.616 347.45 217.033 Q350.529 212.427 356.339 212.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.332 4017.76,230.332 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1248.31 457.123,1248.21 457.691,1248.05 458.259,1247.81 458.828,1247.47 459.396,1247.07 459.964,1246.62 460.533,1246.01 461.101,1245.36 461.669,1244.65 462.238,1243.84 462.806,1241.94 463.375,1241.02 463.943,1240.01 464.511,1237.84 465.08,1236.63 465.648,1235.26 466.216,1233.81 466.785,1232.24 467.353,1230.53 467.921,1228.74 468.49,1226.8 469.058,1224.66 469.626,1221.39 470.195,1219 470.763,1216.42 471.331,1212.63 471.9,1208.65 472.468,1205.53 473.036,1202.23 473.605,1198.79 474.173,1194.11 474.741,1190.22 475.31,1186.07 475.878,1181.77 476.446,1177.27 477.015,1172.53 477.583,1166.55 478.152,1160.32 478.72,1153.83 479.288,1147.13 479.857,1140.35 480.425,1133.22 480.993,1125.74 481.562,1119.09 482.13,1110.12 482.698,1103.04 483.267,1095.71 483.835,1086.05 484.403,1078.31 484.972,1070.37 485.54,1061.25 486.108,1051.79 486.677,1042.27 487.245,1033.52 487.813,1024.61 488.382,1015.61 488.95,1004.34 489.518,993.934 490.087,983.473 490.655,972.777 491.224,958.986 491.792,949.313 492.36,939.601 492.929,926.712 493.497,915.871 494.065,904.014 494.634,893.18 495.202,883.43 495.77,871.42 496.339,859.619 496.907,848.703 497.475,836.895 498.044,827.154 498.612,815.193 499.18,802.263 499.749,791.559 500.317,779.836 500.885,770.342 501.454,760.862 502.022,751.354 502.59,740.908 503.159,730.409 503.727,719.127 504.295,708.905 504.864,697.682 505.432,688.689 506.001,676.506 506.569,664.692 507.137,656.139 507.706,646.713 508.274,636.368 508.842,628.204 509.411,620.198 509.979,611.216 510.547,601.346 511.116,590.607 511.684,583.187 512.252,572.827 512.821,565.793 513.389,558.914 513.957,552.023 514.526,542.228 515.094,535.878 515.662,528.526 516.231,520.19 516.799,512.125 517.367,504.29 517.936,496.682 518.504,488.189 519.072,483.011 519.641,477.81 520.209,470.733 520.778,461.811 521.346,457.306 521.914,451.741 522.483,446.369 523.051,441.194 523.619,434.849 524.188,430.621 524.756,425.556 525.324,420.644 525.893,417.043 526.461,411.246 527.029,407.641 527.598,403.102 528.166,399.858 528.734,395.55 529.303,389.001 529.871,386.823 530.439,382.748 531.008,379.828 531.576,375.796 532.144,373.057 532.713,368.064 533.281,364.363 533.85,361.784 534.418,358.274 534.986,354.702 535.555,351.192 536.123,348.879 536.691,345.691 537.26,343.617 537.828,340.583 538.396,339.44 538.965,337.327 539.533,335.492 540.101,331.467 540.67,329.574 541.238,328.834 541.806,324.832 542.375,320.043 542.943,317.672 543.511,314.354 544.08,311.275 544.648,310.228 545.216,308.066 545.785,302.939 546.353,299.113 546.921,297.298 547.49,296.574 548.058,295.02 548.627,293.593 549.195,293.072 549.763,290.389 550.332,287.874 550.9,285.367 551.468,286.307 552.037,285.888 552.605,288.585 553.173,288.128 553.742,286.516 554.31,283.941 554.878,280.421 555.447,279.063 556.015,278.885 556.583,278.65 557.152,277.261 557.72,278.137 558.288,277.822 558.857,277.451 559.425,275.103 559.993,275.774 560.562,275.267 561.13,273.848 561.698,273.338 562.267,274.157 562.835,272.706 563.404,272.313 563.972,269.861 564.54,269.563 565.109,269.479 565.677,268.076 566.245,265.764 566.814,263.682 567.382,262.612 567.95,262.814 568.519,262.703 569.087,263.731 569.655,262.692 570.224,262.7 570.792,263.651 571.36,261.406 571.929,259.37 572.497,258.324 573.065,256.372 573.634,256.583 574.202,258.72 574.77,259.552 575.339,259.43 575.907,257.981 576.476,254.751 577.044,253.969 577.612,253.171 578.181,252.26 578.749,253.704 579.317,250.701 579.886,248.11 580.454,248.828 581.022,248.053 581.591,249.599 582.159,249.843 582.727,251.188 583.296,250.201 583.864,250.499 584.432,251.678 585.001,253.91 585.569,251.644 586.137,250.672 586.706,248.605 587.274,249.108 587.842,247.09 588.411,248.488 588.979,248.503 589.547,250.635 590.116,252.611 590.684,251.315 591.253,252.151 591.821,251.934 592.389,251.693 592.958,251.713 593.526,252.566 594.094,251.229 594.663,250.042 595.231,248.799 595.799,247.745 596.368,247.647 596.936,246.566 597.504,247.689 598.073,246.458 598.641,243.286 599.209,243.503 599.778,241.962 600.346,241.302 600.914,241.73 601.483,240.899 602.051,241.354 602.619,242.563 603.188,244.179 603.756,244.173 604.325,245.385 604.893,244.427 605.461,242.379 606.03,243.468 606.598,243.62 607.166,242.769 607.735,241.872 608.303,241.862 608.871,242.19 609.44,241.351 610.008,242.808 610.576,242.901 611.145,240.95 611.713,242.525 612.281,243.546 612.85,242.642 613.418,242.743 613.986,241.752 614.555,240.88 615.123,241.099 615.691,242.176 616.26,240.057 616.828,240.118 617.396,239.01 617.965,239.441 618.533,240.571 619.102,241.869 619.67,239.718 620.238,239.638 620.807,239.731 621.375,238.737 621.943,238.885 622.512,238.934 623.08,239.126 623.648,239.584 624.217,239.799 624.785,239.871 625.353,239.173 625.922,239.243 626.49,240.494 627.058,237.463 627.627,236.844 628.195,237.286 628.763,236.547 629.332,236.833 629.9,236.861 630.468,237.092 631.037,235.507 631.605,236.831 632.173,237.99 632.742,237.121 633.31,237.479 633.879,236.497 634.447,236.799 635.015,236.147 635.584,234.295 636.152,232.558 636.72,231.999 637.289,233.618 637.857,236.963 638.425,238.339 638.994,238.473 639.562,236.503 640.13,236.777 640.699,235.84 641.267,233.969 641.835,234.421 642.404,235.896 642.972,237.11 643.54,236.228 644.109,235.626 644.677,235.927 645.245,235.106 645.814,232.521 646.382,234.164 646.951,232.552 647.519,233.312 648.087,232.664 648.656,234.268 649.224,234.721 649.792,234.028 650.361,232.155 650.929,233.906 651.497,237.601 652.066,238.643 652.634,239.803 653.202,240.78 653.771,241.824 654.339,240.677 654.907,241.541 655.476,241.326 656.044,240.962 656.612,239.995 657.181,238.865 657.749,239.687 658.317,238.597 658.886,237.74 659.454,237.776 660.022,236.819 660.591,235.855 661.159,235.283 661.728,234.435 662.296,236.624 662.864,237.895 663.433,236.945 664.001,235.944 664.569,236.117 665.138,238.177 665.706,239.12 666.274,237.839 666.843,238.897 667.411,237.777 667.979,238.009 668.548,237.94 669.116,236.681 669.684,236.717 670.253,238.748 670.821,237.678 671.389,240.81 671.958,239.478 672.526,237.322 673.094,235.075 673.663,234.984 674.231,235.083 674.799,234.123 675.368,234.226 675.936,233.332 676.505,232.325 677.073,232.286 677.641,233.545 678.21,231.459 678.778,230.507 679.346,232.086 679.915,233.972 680.483,233.995 681.051,232.192 681.62,233.53 682.188,234.847 682.756,233.709 683.325,230.679 683.893,232.2 684.461,235.583 685.03,234.7 685.598,233.869 686.166,233.057 686.735,232.63 687.303,234.074 687.871,235.36 688.44,237.426 689.008,238.732 689.577,240.65 690.145,240.507 690.713,240.334 691.282,237.954 691.85,238.813 692.418,238.473 692.987,238.054 693.555,235.865 694.123,234.686 694.692,233.783 695.26,234.082 695.828,235.004 696.397,234.043 696.965,233.993 697.533,235.093 698.102,233.973 698.67,231.816 699.238,228.898 699.807,228.303 700.375,227.744 700.943,228.059 701.512,228.721 702.08,229.006 702.648,228.378 703.217,226.928 703.785,228.581 704.354,229.162 704.922,229.67 705.49,232.096 706.059,233.498 706.627,233.882 707.195,234.926 707.764,232.962 708.332,233.266 708.9,233.304 709.469,233.445 710.037,234.451 710.605,232.465 711.174,231.688 711.742,233.927 712.31,234.056 712.879,236.274 713.447,236.059 714.015,235.006 714.584,233.03 715.152,236.403 715.72,237.199 716.289,235.993 716.857,235.101 717.425,234.194 717.994,236.362 718.562,235.296 719.131,235.242 719.699,235.289 720.267,237.225 720.836,239.002 721.404,236.664 721.972,237.667 722.541,236.243 723.109,235.002 723.677,234.82 724.246,234.932 724.814,233.527 725.382,232.341 725.951,231.26 726.519,231.383 727.087,231.536 727.656,228.649 728.224,228.041 728.792,231.644 729.361,232.811 729.929,232.859 730.497,231.767 731.066,228.552 731.634,228.954 732.203,232.153 732.771,230.969 733.339,232.477 733.908,233.391 734.476,233.354 735.044,234.327 735.613,234.31 736.181,232.988 736.749,233.918 737.318,232.853 737.886,235.081 738.454,234.097 739.023,234.054 739.591,235.971 740.159,236.772 740.728,236.414 741.296,237.191 741.864,237.024 742.433,238.739 743.001,237.554 743.569,236.214 744.138,234.892 744.706,231.532 745.274,232.77 745.843,231.714 746.411,231.745 746.98,230.703 747.548,231.852 748.116,228.656 748.685,228.853 749.253,230.188 749.821,230.412 750.39,230.881 750.958,230.586 751.526,231.946 752.095,231.772 752.663,230.814 753.231,229.907 753.8,229.974 754.368,226.857 754.936,229.096 755.505,226.11 756.073,227.659 756.641,225.933 757.21,225.574 757.778,226.15 758.346,225.448 758.915,225.774 759.483,225.292 760.052,225.774 760.62,228.45 761.188,229.924 761.757,230.056 762.325,230.31 762.893,230.618 763.462,232.021 764.03,232.214 764.598,233.239 765.167,232.429 765.735,232.493 766.303,231.524 766.872,230.456 767.44,228.726 768.008,231.117 768.577,231.584 769.145,232.788 769.713,231.638 770.282,231.802 770.85,229.687 771.418,231.102 771.987,234.521 772.555,235.384 773.123,236.317 773.692,236.272 774.26,236.053 774.829,235.912 775.397,234.615 775.965,236.495 776.534,235.153 777.102,237.892 777.67,236.561 778.239,235.192 778.807,234.989 779.375,231.901 779.944,228.844 780.512,231.059 781.08,229.134 781.649,229.434 782.217,229.696 782.785,229.814 783.354,229.004 783.922,231.578 784.49,231.551 785.059,232.81 785.627,232.762 786.195,231.697 786.764,231.923 787.332,231.795 787.9,231.871 788.469,231.631 789.037,231.58 789.606,230.809 790.174,230.782 790.742,229.868 791.311,229.011 791.879,229.15 792.447,229.531 793.016,229.718 793.584,230.987 794.152,230.037 794.721,231.305 795.289,234.694 795.857,234.613 796.426,235.554 796.994,235.219 797.562,233.86 798.131,232.732 798.699,231.827 799.267,231.889 799.836,232.572 800.404,232.542 800.972,232.627 801.541,232.728 802.109,231.408 802.678,232.589 803.246,231.478 803.814,232.503 804.383,232.608 804.951,232.581 805.519,234.373 806.088,234.026 806.656,236.224 807.224,236.082 807.793,235.888 808.361,230.465 808.929,229.589 809.498,231.875 810.066,228.716 810.634,230.057 811.203,230.197 811.771,229.224 812.339,228.247 812.908,228.542 813.476,227.907 814.044,228.368 814.613,229.702 815.181,231.18 815.749,231.391 816.318,232.194 816.886,231.081 817.455,231.263 818.023,230.266 818.591,231.49 819.16,229.579 819.728,229.797 820.296,228.69 820.865,228.947 821.433,227.304 822.001,225.61 822.57,225.109 823.138,225.877 823.706,225.244 824.275,225.812 824.843,224.523 825.411,226.335 825.98,228.945 826.548,229.311 827.116,227.33 827.685,227.661 828.253,227.898 828.821,225.084 829.39,224.656 829.958,226.129 830.526,226.801 831.095,227.249 831.663,227.948 832.232,228.33 832.8,229.651 833.368,230.074 833.937,229.48 834.505,230.802 835.073,230.981 835.642,233.05 836.21,233.818 836.778,234.867 837.347,235.724 837.915,235.472 838.483,234.322 839.052,234.388 839.62,236.208 840.188,236.715 840.757,235.318 841.325,234.166 841.893,233.875 842.462,233.764 843.03,234.602 843.598,234.292 844.167,231.112 844.735,230.069 845.304,230.328 845.872,228.553 846.44,227.614 847.009,226.799 847.577,227.261 848.145,230.804 848.714,229.793 849.282,230.11 849.85,232.37 850.419,234.451 850.987,234.333 851.555,235.263 852.124,235.955 852.692,235.665 853.26,235.349 853.829,236.348 854.397,237.183 854.965,235.899 855.534,235.558 856.102,238.26 856.67,238.854 857.239,239.41 857.807,237.82 858.375,236.11 858.944,237.747 859.512,237.295 860.081,237.776 860.649,234.202 861.217,234.075 861.786,234.787 862.354,233.486 862.922,233.154 863.491,230.725 864.059,233.751 864.627,234.626 865.196,235.284 865.764,236.425 866.332,237.118 866.901,237.515 867.469,237.174 868.037,236.589 868.606,237.278 869.174,233.813 869.742,234.664 870.311,234.295 870.879,231.84 871.447,229.709 872.016,230.682 872.584,230.487 873.152,232.47 873.721,232.272 874.289,232.017 874.858,232.767 875.426,232.386 875.994,233.258 876.563,236.029 877.131,234.47 877.699,236.174 878.268,235.787 878.836,235.419 879.404,234.711 879.973,232.348 880.541,232.935 881.109,230.747 881.678,229.728 882.246,230.577 882.814,230.562 883.383,232.457 883.951,232.203 884.519,230.063 885.088,229.069 885.656,229.092 886.224,228.02 886.793,229.005 887.361,229.887 887.93,230.034 888.498,230.133 889.066,230.971 889.635,231.747 890.203,228.561 890.771,228.469 891.34,228.826 891.908,228.17 892.476,228.311 893.045,228.207 893.613,227.379 894.181,224.507 894.75,224.657 895.318,223.074 895.886,223.429 896.455,224.87 897.023,225.196 897.591,224.589 898.16,226.133 898.728,226.421 899.296,227.644 899.865,226.619 900.433,223.873 901.001,224.518 901.57,225.195 902.138,224.633 902.707,227.337 903.275,227.442 903.843,228.754 904.412,230.008 904.98,231.209 905.548,231.159 906.117,229.066 906.685,228.165 907.253,227.562 907.822,225.666 908.39,225.053 908.958,225.391 909.527,224.772 910.095,230.342 910.663,232.522 911.232,232.366 911.8,233.309 912.368,235.193 912.937,231.902 913.505,232.538 914.073,232.235 914.642,231.31 915.21,230.343 915.779,230.353 916.347,232.262 916.915,232.224 917.484,234.038 918.052,234.849 918.62,234.404 919.189,234.092 919.757,233.777 920.325,234.762 920.894,231.371 921.462,232.516 922.03,233.406 922.599,232.116 923.167,232.95 923.735,230.983 924.304,231.073 924.872,230.04 925.44,231.237 926.009,233.334 926.577,230.049 927.145,229.106 927.714,231.206 928.282,232.206 928.85,230.12 929.419,226.91 929.987,226.992 930.556,229.041 931.124,227.187 931.692,225.272 932.261,224.498 932.829,223.964 933.397,222.718 933.966,222.3 934.534,223.93 935.102,223.59 935.671,224.144 936.239,225.763 936.807,227.338 937.376,230.825 937.944,232.784 938.512,231.707 939.081,229.492 939.649,229.61 940.217,230.694 940.786,231.775 941.354,231.72 941.922,231.678 942.491,232.919 943.059,233.681 943.627,235.597 944.196,234.281 944.764,234.172 945.333,235.268 945.901,236.03 946.469,234.641 947.038,234.555 947.606,237.301 948.174,236.949 948.743,234.365 949.311,235.078 949.879,235.803 950.448,235.112 951.016,232.735 951.584,231.592 952.153,231.435 952.721,234.414 953.289,234.207 953.858,235.036 954.426,233.716 954.994,235.393 955.563,234.927 956.131,233.674 956.699,235.527 957.268,234.062 957.836,234.05 958.405,235.825 958.973,235.237 959.541,233.737 960.11,232.442 960.678,233.279 961.246,231.105 961.815,231.889 962.383,232.522 962.951,230.25 963.52,229.448 964.088,229.491 964.656,229.64 965.225,229.701 965.793,229.4 966.361,232.353 966.93,233.119 967.498,232.731 968.066,229.199 968.635,229.448 969.203,230.322 969.771,231.121 970.34,230.834 970.908,232.944 971.476,231.617 972.045,232.402 972.613,231.247 973.182,234.457 973.75,234.121 974.318,233.933 974.887,232.552 975.455,232.391 976.023,231.101 976.592,227.137 977.16,227.486 977.728,226.541 978.297,226.751 978.865,227.021 979.433,227.262 980.002,226.466 980.57,225.746 981.138,224.001 981.707,224.26 982.275,223.551 982.843,225.023 983.412,224.368 983.98,223.893 984.548,222.385 985.117,223.043 985.685,222.674 986.253,225.161 986.822,225.406 987.39,227.128 987.959,226.419 988.527,225.806 989.095,224.984 989.664,225.301 990.232,224.58 990.8,226.064 991.369,224.514 991.937,223.139 992.505,223.755 993.074,225.395 993.642,228.936 994.21,231.15 994.779,230.382 995.347,230.532 995.915,230.732 996.484,230.671 997.052,230.634 997.62,229.852 998.189,229.015 998.757,230.423 999.325,229.427 999.894,232.6 1000.46,232.495 1001.03,232.558 1001.6,234.723 1002.17,236.709 1002.74,235.358 1003.3,233.919 1003.87,230.858 1004.44,231.594 1005.01,233.43 1005.58,234.231 1006.15,234.7 1006.71,235.516 1007.28,237.366 1007.85,233.76 1008.42,233.766 1008.99,233.516 1009.56,233.234 1010.12,232.867 1010.69,233.699 1011.26,232.456 1011.83,233.308 1012.4,233.097 1012.97,232.93 1013.53,233.717 1014.1,234.389 1014.67,234.172 1015.24,233.088 1015.81,234.096 1016.38,233.581 1016.94,234.57 1017.51,233.263 1018.08,230.922 1018.65,232.011 1019.22,229.953 1019.79,231.927 1020.35,232.863 1020.92,231.532 1021.49,231.319 1022.06,233.454 1022.63,233.233 1023.2,231.699 1023.76,231.613 1024.33,231.264 1024.9,230.154 1025.47,230.254 1026.04,230.04 1026.61,232.202 1027.17,230.917 1027.74,228.831 1028.31,228.879 1028.88,228.676 1029.45,226.843 1030.02,228.297 1030.58,226.205 1031.15,226.359 1031.72,226.754 1032.29,227.118 1032.86,227.274 1033.43,230.603 1033.99,229.369 1034.56,229.421 1035.13,232.512 1035.7,230.394 1036.27,229.446 1036.84,228.416 1037.4,227.467 1037.97,225.685 1038.54,226.084 1039.11,229.322 1039.68,230.509 1040.25,232.811 1040.81,232.585 1041.38,232.314 1041.95,233.348 1042.52,231.059 1043.09,231.085 1043.66,231.179 1044.22,230.274 1044.79,230.25 1045.36,230.197 1045.93,232.333 1046.5,232.275 1047.07,232.037 1047.63,233.927 1048.2,232.81 1048.77,232.791 1049.34,234.645 1049.91,234.295 1050.48,233.968 1051.05,232.58 1051.61,233.436 1052.18,232.349 1052.75,232.094 1053.32,233.786 1053.89,233.68 1054.46,232.411 1055.02,231.072 1055.59,230.986 1056.16,230.854 1056.73,230.701 1057.3,230.559 1057.87,229.508 1058.43,230.613 1059,231.781 1059.57,230.527 1060.14,229.125 1060.71,232.067 1061.28,229.893 1061.84,230.97 1062.41,230.813 1062.98,231.875 1063.55,230.903 1064.12,231.084 1064.69,232.205 1065.25,233.156 1065.82,230.808 1066.39,230.888 1066.96,230.784 1067.53,229.84 1068.1,227.962 1068.66,226.793 1069.23,231.286 1069.8,229.026 1070.37,227.846 1070.94,230.012 1071.51,231.118 1072.07,228.706 1072.64,229.922 1073.21,228.731 1073.78,226.773 1074.35,224.911 1074.92,225.218 1075.48,223.381 1076.05,223.917 1076.62,225.443 1077.19,224.772 1077.76,227.338 1078.33,227.566 1078.89,227.96 1079.46,228.103 1080.03,229.424 1080.6,230.594 1081.17,230.386 1081.74,231.415 1082.3,231.562 1082.87,231.626 1083.44,232.551 1084.01,232.322 1084.58,231.187 1085.15,233.086 1085.71,233 1086.28,232.768 1086.85,232.567 1087.42,232.271 1087.99,233.171 1088.56,234.976 1089.12,233.733 1089.69,234.184 1090.26,232.71 1090.83,232.79 1091.4,231.564 1091.97,232.534 1092.53,232.203 1093.1,233.016 1093.67,233.817 1094.24,234.459 1094.81,234.201 1095.38,232.791 1095.94,232.463 1096.51,235.098 1097.08,233.479 1097.65,233.275 1098.22,234.336 1098.79,235.095 1099.35,234.793 1099.92,230.369 1100.49,231.343 1101.06,231.308 1101.63,231.134 1102.2,231.934 1102.76,231.728 1103.33,231.548 1103.9,231.254 1104.47,231.246 1105.04,230.358 1105.61,232.333 1106.17,232.083 1106.74,231.088 1107.31,229.649 1107.88,227.471 1108.45,228.811 1109.02,229.74 1109.58,228.676 1110.15,227.5 1110.72,227.862 1111.29,225.781 1111.86,224.848 1112.43,225.21 1112.99,226.58 1113.56,224.832 1114.13,226.178 1114.7,225.419 1115.27,223.775 1115.84,224.351 1116.4,223.525 1116.97,223.281 1117.54,223.436 1118.11,224.951 1118.68,225.457 1119.25,225.813 1119.81,225.16 1120.38,222.41 1120.95,223.173 1121.52,223.731 1122.09,221.214 1122.66,222.046 1123.23,222.623 1123.79,225.226 1124.36,226.693 1124.93,226.151 1125.5,227.637 1126.07,227.974 1126.64,228.263 1127.2,229.332 1127.77,230.597 1128.34,230.619 1128.91,230.629 1129.48,230.675 1130.05,231.9 1130.61,234.002 1131.18,234.971 1131.75,235.683 1132.32,236.433 1132.89,238.127 1133.46,236.631 1134.02,237.26 1134.59,235.642 1135.16,232.223 1135.73,232.065 1136.3,231.996 1136.87,232.869 1137.43,235.974 1138,236.696 1138.57,236.287 1139.14,235.78 1139.71,235.414 1140.28,236.176 1140.84,234.338 1141.41,235.311 1141.98,232.913 1142.55,233.787 1143.12,230.524 1143.69,231.694 1144.25,231.81 1144.82,232.9 1145.39,233.565 1145.96,232.061 1146.53,232.207 1147.1,232.04 1147.66,231.902 1148.23,232.034 1148.8,231.747 1149.37,228.32 1149.94,230.391 1150.51,231.287 1151.07,231.189 1151.64,228.838 1152.21,228.808 1152.78,227.544 1153.35,227.495 1153.92,228.856 1154.48,227.972 1155.05,225.98 1155.62,227.259 1156.19,226.616 1156.76,228.703 1157.33,230.765 1157.89,230.683 1158.46,227.623 1159.03,227.954 1159.6,228.157 1160.17,228.371 1160.74,228.423 1161.3,226.536 1161.87,227.896 1162.44,226.249 1163.01,227.607 1163.58,228.798 1164.15,227.774 1164.71,226.91 1165.28,227.2 1165.85,229.474 1166.42,229.765 1166.99,230.865 1167.56,228.83 1168.12,228.958 1168.69,226.977 1169.26,226.416 1169.83,226.987 1170.4,227.159 1170.97,226.412 1171.53,224.804 1172.1,225.062 1172.67,226.813 1173.24,227.277 1173.81,226.718 1174.38,227.141 1174.94,227.375 1175.51,228.902 1176.08,228.231 1176.65,227.425 1177.22,227.906 1177.79,228.057 1178.35,228.192 1178.92,230.649 1179.49,227.815 1180.06,228.004 1180.63,226.482 1181.2,227.913 1181.76,228.149 1182.33,230.849 1182.9,231.028 1183.47,232.28 1184.04,232.325 1184.61,232.417 1185.17,232.225 1185.74,233.013 1186.31,233.031 1186.88,232.984 1187.45,232.885 1188.02,231.509 1188.58,229.386 1189.15,232.71 1189.72,232.738 1190.29,230.645 1190.86,229.706 1191.43,231.858 1192,229.912 1192.56,230.296 1193.13,230.431 1193.7,230.608 1194.27,230.546 1194.84,230.564 1195.41,231.741 1195.97,234.797 1196.54,233.458 1197.11,232.128 1197.68,232.126 1198.25,233.2 1198.82,234.097 1199.38,235.773 1199.95,238.495 1200.52,238.995 1201.09,239.357 1201.66,237.845 1202.23,235.13 1202.79,233.788 1203.36,231.55 1203.93,230.689 1204.5,231.798 1205.07,231.581 1205.64,232.686 1206.2,233.659 1206.77,233.35 1207.34,232.115 1207.91,232.131 1208.48,230.923 1209.05,228.658 1209.61,225.665 1210.18,226.188 1210.75,226.604 1211.32,227.052 1211.89,227.365 1212.46,227.782 1213.02,228.918 1213.59,231.118 1214.16,234.167 1214.73,235.95 1215.3,235.439 1215.87,233.925 1216.43,231.697 1217,232.669 1217.57,233.217 1218.14,232.073 1218.71,231.945 1219.28,231.979 1219.84,231.723 1220.41,231.653 1220.98,231.63 1221.55,230.745 1222.12,228.697 1222.69,225.722 1223.25,225.183 1223.82,225.392 1224.39,226.755 1224.96,224.945 1225.53,226.3 1226.1,226.728 1226.66,225.082 1227.23,225.37 1227.8,225.574 1228.37,224.022 1228.94,224.598 1229.51,224.003 1230.07,225.553 1230.64,225.008 1231.21,226.434 1231.78,228.096 1232.35,228.18 1232.92,229.379 1233.48,230.513 1234.05,229.543 1234.62,230.701 1235.19,231.946 1235.76,229.873 1236.33,230.954 1236.89,232.114 1237.46,233.299 1238.03,231.264 1238.6,231.245 1239.17,229.942 1239.74,231.919 1240.3,232.989 1240.87,231.632 1241.44,232.542 1242.01,231.477 1242.58,232.468 1243.15,232.312 1243.71,232.19 1244.28,232.377 1244.85,232.167 1245.42,230.025 1245.99,232.975 1246.56,231.692 1247.12,233.482 1247.69,235.155 1248.26,235.956 1248.83,235.572 1249.4,236.37 1249.97,236.918 1250.53,235.4 1251.1,235.114 1251.67,234.632 1252.24,234.336 1252.81,235.164 1253.38,232.849 1253.94,230.754 1254.51,231.676 1255.08,232.688 1255.65,231.432 1256.22,231.472 1256.79,230.99 1257.35,229.621 1257.92,227.419 1258.49,226.579 1259.06,227.826 1259.63,227.989 1260.2,227.261 1260.76,227.592 1261.33,223.74 1261.9,222.879 1262.47,224.147 1263.04,224.659 1263.61,226.171 1264.18,227.444 1264.74,226.487 1265.31,227.742 1265.88,228.034 1266.45,227.275 1267.02,228.421 1267.59,226.701 1268.15,229.066 1268.72,228.524 1269.29,230.669 1269.86,232.016 1270.43,232.124 1271,234.228 1271.56,236.03 1272.13,236.721 1272.7,236.49 1273.27,237.271 1273.84,237.886 1274.41,238.366 1274.97,237.825 1275.54,239.495 1276.11,237.664 1276.68,234.986 1277.25,233.652 1277.82,233.277 1278.38,231.155 1278.95,232.114 1279.52,230.827 1280.09,227.736 1280.66,226.785 1281.23,226.994 1281.79,227.035 1282.36,226.477 1282.93,226.688 1283.5,227.868 1284.07,231.137 1284.64,235.003 1285.2,231.682 1285.77,231.58 1286.34,231.464 1286.91,230.256 1287.48,229.308 1288.05,230.327 1288.61,231.368 1289.18,229.352 1289.75,229.338 1290.32,229.319 1290.89,229.967 1291.46,233.085 1292.02,230.719 1292.59,226.515 1293.16,223.626 1293.73,225.109 1294.3,225.319 1294.87,225.659 1295.43,227.086 1296,225.978 1296.57,226.268 1297.14,227.451 1297.71,227.796 1298.28,230.146 1298.84,229.108 1299.41,227.153 1299.98,229.719 1300.55,229.829 1301.12,228.893 1301.69,227.839 1302.25,231.083 1302.82,231.085 1303.39,233.086 1303.96,232.03 1304.53,231.71 1305.1,229.578 1305.66,228.712 1306.23,227.738 1306.8,229.008 1307.37,227.123 1307.94,227.443 1308.51,228.018 1309.07,230.522 1309.64,233.869 1310.21,236.828 1310.78,236.358 1311.35,235.079 1311.92,235.867 1312.48,236.66 1313.05,235.16 1313.62,234.829 1314.19,231.243 1314.76,230.038 1315.33,229.021 1315.89,227.976 1316.46,227.381 1317.03,228.525 1317.6,228.542 1318.17,229.769 1318.74,229.842 1319.3,229.035 1319.87,228.327 1320.44,230.645 1321.01,231.498 1321.58,234.594 1322.15,234.289 1322.71,234.077 1323.28,231.845 1323.85,230.023 1324.42,232.079 1324.99,230.945 1325.56,230.665 1326.12,229.683 1326.69,232.905 1327.26,232.776 1327.83,232.677 1328.4,232.668 1328.97,232.594 1329.53,235.491 1330.1,234.913 1330.67,232.475 1331.24,227.397 1331.81,228.525 1332.38,226.119 1332.94,225.402 1333.51,225.62 1334.08,227.876 1334.65,228.031 1335.22,228.125 1335.79,226.318 1336.36,225.683 1336.92,225.848 1337.49,226.004 1338.06,227.244 1338.63,227.594 1339.2,226.854 1339.77,227.105 1340.33,225.237 1340.9,224.552 1341.47,226.855 1342.04,227.318 1342.61,229.632 1343.18,229.619 1343.74,231.854 1344.31,230.933 1344.88,230.838 1345.45,231.947 1346.02,233.957 1346.59,231.705 1347.15,236.613 1347.72,236.157 1348.29,236.482 1348.86,234.01 1349.43,232.8 1350,234.712 1350.56,235.184 1351.13,235.774 1351.7,236.49 1352.27,235.113 1352.84,234.827 1353.41,234.301 1353.97,234.215 1354.54,232.789 1355.11,229.477 1355.68,231.494 1356.25,230.497 1356.82,231.464 1357.38,231.344 1357.95,231.139 1358.52,231.117 1359.09,232.059 1359.66,232.105 1360.23,231.708 1360.79,231.604 1361.36,231.272 1361.93,231.958 1362.5,230.578 1363.07,229.481 1363.64,226.561 1364.2,225.697 1364.77,224.865 1365.34,227.031 1365.91,226.933 1366.48,230.084 1367.05,230.056 1367.61,226.949 1368.18,227.17 1368.75,226.19 1369.32,229.497 1369.89,229.713 1370.46,229.738 1371.02,229.735 1371.59,231.843 1372.16,233.892 1372.73,234.613 1373.3,232.427 1373.87,232.465 1374.43,229.424 1375,229.675 1375.57,230.733 1376.14,230.61 1376.71,228.472 1377.28,228.768 1377.84,228.893 1378.41,229.924 1378.98,228.618 1379.55,226.798 1380.12,227.024 1380.69,227.341 1381.25,227.324 1381.82,227.57 1382.39,228.656 1382.96,227.765 1383.53,226.865 1384.1,227.149 1384.66,226.546 1385.23,225.861 1385.8,225.171 1386.37,226.616 1386.94,227.009 1387.51,228.429 1388.07,229.915 1388.64,228.951 1389.21,230.272 1389.78,233.248 1390.35,232.162 1390.92,235.037 1391.48,236.659 1392.05,237.247 1392.62,236.739 1393.19,234.095 1393.76,233.838 1394.33,233.575 1394.89,233.385 1395.46,232.184 1396.03,234.156 1396.6,231.728 1397.17,233.497 1397.74,235.471 1398.3,235.03 1398.87,232.568 1399.44,231.298 1400.01,232.088 1400.58,231.092 1401.15,230.781 1401.71,231.978 1402.28,231.641 1402.85,231.439 1403.42,231.174 1403.99,231.109 1404.56,230.027 1405.13,229.916 1405.69,229.635 1406.26,231.957 1406.83,230.59 1407.4,229.596 1407.97,231.735 1408.54,230.242 1409.1,230.205 1409.67,231.063 1410.24,233.01 1410.81,230.642 1411.38,231.47 1411.95,232.594 1412.51,235.278 1413.08,237.055 1413.65,235.408 1414.22,234.919 1414.79,235.656 1415.36,235.201 1415.92,233.811 1416.49,233.374 1417.06,232.867 1417.63,230.611 1418.2,228.224 1418.77,228.185 1419.33,228.302 1419.9,229.32 1420.47,226.975 1421.04,228.212 1421.61,228.344 1422.18,229.584 1422.74,228.52 1423.31,226.516 1423.88,227.874 1424.45,226.059 1425.02,228.57 1425.59,229.657 1426.15,229.627 1426.72,228.542 1427.29,228.444 1427.86,230.662 1428.43,231.42 1429,230.434 1429.56,230.382 1430.13,229.217 1430.7,229.119 1431.27,227.009 1431.84,228.242 1432.41,229.191 1432.97,229.221 1433.54,230.428 1434.11,230.461 1434.68,231.135 1435.25,231.191 1435.82,230.127 1436.38,228.868 1436.95,230.199 1437.52,232.44 1438.09,230.335 1438.66,233.453 1439.23,233.254 1439.79,235.832 1440.36,234.255 1440.93,233.697 1441.5,234.633 1442.07,234.393 1442.64,232.895 1443.2,230.552 1443.77,229.461 1444.34,226.397 1444.91,227.654 1445.48,225.635 1446.05,223.723 1446.61,223.099 1447.18,224.505 1447.75,222.789 1448.32,222.121 1448.89,221.847 1449.46,222.527 1450.02,223.089 1450.59,223.566 1451.16,219.895 1451.73,220.837 1452.3,222.885 1452.87,223.245 1453.43,223.844 1454,224.438 1454.57,224.864 1455.14,224.936 1455.71,225.522 1456.28,222.892 1456.84,223.643 1457.41,224.188 1457.98,225.874 1458.55,227.253 1459.12,229.773 1459.69,232.95 1460.25,233.973 1460.82,234.51 1461.39,234.528 1461.96,236.268 1462.53,236.091 1463.1,233.601 1463.66,235.426 1464.23,235.19 1464.8,233.931 1465.37,233.857 1465.94,234.833 1466.51,236.81 1467.07,235.438 1467.64,232.996 1468.21,233.013 1468.78,233.063 1469.35,233.924 1469.92,234.462 1470.48,233.193 1471.05,231.885 1471.62,231.853 1472.19,232.728 1472.76,230.268 1473.33,231.24 1473.89,232.296 1474.46,234.303 1475.03,233.963 1475.6,233.824 1476.17,235.432 1476.74,236.221 1477.31,234.873 1477.87,233.212 1478.44,232.138 1479.01,232.083 1479.58,229.733 1480.15,229.678 1480.72,229.661 1481.28,228.514 1481.85,229.537 1482.42,229.324 1482.99,229.372 1483.56,228.482 1484.13,226.817 1484.69,228.015 1485.26,228.169 1485.83,226.253 1486.4,225.576 1486.97,223.885 1487.54,223.365 1488.1,225.778 1488.67,227.356 1489.24,227.411 1489.81,223.686 1490.38,225.16 1490.95,226.634 1491.51,225.883 1492.08,227.229 1492.65,225.553 1493.22,226.267 1493.79,227.552 1494.36,226.978 1494.92,226.562 1495.49,228.83 1496.06,228.982 1496.63,229.367 1497.2,230.597 1497.77,231.556 1498.33,231.617 1498.9,231.58 1499.47,231.627 1500.04,230.773 1500.61,230.898 1501.18,231.081 1501.74,230.145 1502.31,231.324 1502.88,233.47 1503.45,235.308 1504.02,234.846 1504.59,231.876 1505.15,232.741 1505.72,232.694 1506.29,231.808 1506.86,233.887 1507.43,233.86 1508,234.635 1508.56,233.347 1509.13,233.307 1509.7,232.287 1510.27,232.341 1510.84,229.952 1511.41,230.155 1511.97,230.867 1512.54,232.96 1513.11,232.847 1513.68,233.847 1514.25,232.409 1514.82,233.15 1515.38,232.005 1515.95,232.024 1516.52,230.852 1517.09,230.85 1517.66,231.854 1518.23,228.882 1518.79,229.766 1519.36,229.776 1519.93,228.626 1520.5,227.755 1521.07,228.022 1521.64,226.019 1522.2,228.392 1522.77,228.395 1523.34,228.461 1523.91,228.35 1524.48,227.415 1525.05,227.526 1525.61,230.027 1526.18,229.275 1526.75,229.231 1527.32,231.229 1527.89,231.173 1528.46,231.415 1529.02,231.65 1529.59,230.498 1530.16,230.299 1530.73,230.574 1531.3,230.592 1531.87,231.576 1532.43,228.547 1533,229.659 1533.57,226.679 1534.14,226.815 1534.71,226.279 1535.28,225.737 1535.84,228.299 1536.41,228.486 1536.98,230.754 1537.55,230.831 1538.12,228.822 1538.69,230.028 1539.25,229.353 1539.82,228.611 1540.39,228.889 1540.96,230.194 1541.53,231.392 1542.1,231.457 1542.66,231.126 1543.23,230.949 1543.8,233.945 1544.37,234.874 1544.94,236.741 1545.51,234.241 1546.08,234.96 1546.64,232.749 1547.21,232.7 1547.78,231.718 1548.35,231.469 1548.92,230.428 1549.49,229.592 1550.05,229.464 1550.62,229.339 1551.19,226.187 1551.76,226.596 1552.33,227.901 1552.9,228.326 1553.46,227.56 1554.03,225.561 1554.6,225.892 1555.17,224.253 1555.74,227.09 1556.31,227.087 1556.87,227.304 1557.44,228.489 1558.01,227.758 1558.58,229.867 1559.15,232.263 1559.72,232.536 1560.28,232.578 1560.85,232.529 1561.42,229.567 1561.99,228.894 1562.56,230.994 1563.13,229.79 1563.69,229.785 1564.26,230.813 1564.83,231.909 1565.4,229.995 1565.97,228.202 1566.54,228.591 1567.1,228.77 1567.67,227.84 1568.24,228.152 1568.81,227.351 1569.38,227.886 1569.95,226.999 1570.51,228.385 1571.08,229.532 1571.65,230.823 1572.22,231.057 1572.79,232.194 1573.36,233.132 1573.92,231.095 1574.49,231.153 1575.06,232.128 1575.63,233.249 1576.2,233.082 1576.77,234.072 1577.33,236.069 1577.9,235.67 1578.47,236.233 1579.04,237.969 1579.61,237.469 1580.18,236.977 1580.74,237.639 1581.31,236.395 1581.88,234.852 1582.45,234.453 1583.02,235.126 1583.59,230.487 1584.15,230.645 1584.72,231.579 1585.29,231.533 1585.86,232.292 1586.43,233.145 1587,233.756 1587.56,232.244 1588.13,230.127 1588.7,233.432 1589.27,232.204 1589.84,233.123 1590.41,232.951 1590.97,233.698 1591.54,233.524 1592.11,233.267 1592.68,232.94 1593.25,234.67 1593.82,234.264 1594.38,233.865 1594.95,230.333 1595.52,229.276 1596.09,228.248 1596.66,229.228 1597.23,230.007 1597.79,230.009 1598.36,231.106 1598.93,229.866 1599.5,228.821 1600.07,230.959 1600.64,229.655 1601.2,230.675 1601.77,230.467 1602.34,231.035 1602.91,230.952 1603.48,231.602 1604.05,231.324 1604.61,231.138 1605.18,229.789 1605.75,228.486 1606.32,230.324 1606.89,230.061 1607.46,230.916 1608.02,232.662 1608.59,233.264 1609.16,233.898 1609.73,235.703 1610.3,236.204 1610.87,233.759 1611.43,231.373 1612,231.249 1612.57,228.967 1613.14,227.997 1613.71,227.962 1614.28,228.192 1614.84,226.634 1615.41,223.843 1615.98,224.151 1616.55,223.685 1617.12,223.852 1617.69,225.122 1618.26,227.434 1618.82,229.44 1619.39,231.702 1619.96,230.456 1620.53,232.465 1621.1,232.526 1621.67,232.305 1622.23,229.892 1622.8,232.887 1623.37,234.723 1623.94,233.358 1624.51,233.998 1625.08,232.78 1625.64,232.566 1626.21,231.221 1626.78,229.031 1627.35,229.117 1627.92,228.27 1628.49,228.45 1629.05,229.428 1629.62,229.637 1630.19,229.53 1630.76,231.487 1631.33,231.286 1631.9,233.493 1632.46,233.268 1633.03,231.106 1633.6,231.009 1634.17,230.796 1634.74,231.669 1635.31,231.744 1635.87,229.466 1636.44,227.412 1637.01,227.484 1637.58,227.674 1638.15,229.871 1638.72,230.779 1639.28,230.73 1639.85,230.948 1640.42,230.903 1640.99,228.75 1641.56,228.986 1642.13,231.21 1642.69,233.373 1643.26,233.036 1643.83,233.986 1644.4,234.718 1644.97,235.485 1645.54,234.086 1646.1,232.647 1646.67,231.362 1647.24,229.973 1647.81,226.724 1648.38,224.719 1648.95,227.046 1649.51,226.118 1650.08,226.402 1650.65,226.528 1651.22,225.716 1651.79,226.3 1652.36,226.368 1652.92,227.566 1653.49,227.67 1654.06,229.867 1654.63,231.044 1655.2,229.895 1655.77,229.878 1656.33,228.514 1656.9,229.426 1657.47,232.731 1658.04,233.512 1658.61,231.016 1659.18,230.841 1659.74,231.629 1660.31,231.604 1660.88,230.561 1661.45,230.553 1662.02,229.511 1662.59,229.376 1663.15,229.294 1663.72,229.391 1664.29,230.254 1664.86,229.078 1665.43,228.161 1666,228.468 1666.56,229.702 1667.13,228.792 1667.7,227.793 1668.27,227.98 1668.84,229.144 1669.41,232.185 1669.97,230.872 1670.54,230.819 1671.11,230.623 1671.68,231.676 1672.25,229.537 1672.82,231.327 1673.38,232.206 1673.95,229.114 1674.52,228.055 1675.09,228.23 1675.66,228.444 1676.23,228.663 1676.79,228.828 1677.36,227.795 1677.93,223.948 1678.5,226.563 1679.07,226.787 1679.64,226.071 1680.2,225.368 1680.77,222.755 1681.34,223.161 1681.91,223.679 1682.48,226.132 1683.05,225.572 1683.61,225.862 1684.18,226.144 1684.75,226.608 1685.32,226.368 1685.89,227.015 1686.46,227.323 1687.02,227.515 1687.59,228.777 1688.16,230.944 1688.73,231.977 1689.3,232.976 1689.87,231.77 1690.44,231.637 1691,231.365 1691.57,230.244 1692.14,229.369 1692.71,232.52 1693.28,232.552 1693.85,233.494 1694.41,234.231 1694.98,233.025 1695.55,232.843 1696.12,233.03 1696.69,231.882 1697.26,232.821 1697.82,233.872 1698.39,231.494 1698.96,230.387 1699.53,230.497 1700.1,232.686 1700.67,231.519 1701.23,234.553 1701.8,233.315 1702.37,234.072 1702.94,234.712 1703.51,232.334 1704.08,234.265 1704.64,232.862 1705.21,232.704 1705.78,230.214 1706.35,232.272 1706.92,230.985 1707.49,231.186 1708.05,231.113 1708.62,232.019 1709.19,232.864 1709.76,231.532 1710.33,229.306 1710.9,232.536 1711.46,232.347 1712.03,232.363 1712.6,234.255 1713.17,230.944 1713.74,229.942 1714.31,231.046 1714.87,233.017 1715.44,231.808 1716.01,234.628 1716.58,235.282 1717.15,233.7 1717.72,233.561 1718.28,233.03 1718.85,232.707 1719.42,234.536 1719.99,234.154 1720.56,232.61 1721.13,235.314 1721.69,234.866 1722.26,231.529 1722.83,230.203 1723.4,231.202 1723.97,232.187 1724.54,232.009 1725.1,232.793 1725.67,232.353 1726.24,232.115 1726.81,229.813 1727.38,227.668 1727.95,227.785 1728.51,228.885 1729.08,228.972 1729.65,229.959 1730.22,229.972 1730.79,232.106 1731.36,230.708 1731.92,230.682 1732.49,232.002 1733.06,231.793 1733.63,233.494 1734.2,231.992 1734.77,232.801 1735.33,232.434 1735.9,232.134 1736.47,232.979 1737.04,233.629 1737.61,234.249 1738.18,233.679 1738.74,235.263 1739.31,234.683 1739.88,231.169 1740.45,230.929 1741.02,230.906 1741.59,229.506 1742.15,229.717 1742.72,226.52 1743.29,227.61 1743.86,228.732 1744.43,227.725 1745,225.613 1745.56,224.824 1746.13,224.828 1746.7,225.876 1747.27,227.289 1747.84,229.391 1748.41,229.274 1748.97,227.376 1749.54,227.466 1750.11,226.604 1750.68,226.707 1751.25,229.93 1751.82,229.969 1752.38,228.784 1752.95,227.713 1753.52,227.656 1754.09,225.585 1754.66,227.02 1755.23,227.143 1755.79,226.187 1756.36,226.51 1756.93,227.859 1757.5,228.199 1758.07,229.289 1758.64,229.214 1759.21,230.018 1759.77,228.799 1760.34,228.826 1760.91,228.921 1761.48,228.84 1762.05,225.804 1762.62,225.219 1763.18,228.644 1763.75,230.908 1764.32,229.631 1764.89,228.871 1765.46,229.871 1766.03,228.94 1766.59,228.28 1767.16,227.575 1767.73,227.595 1768.3,226.717 1768.87,227.08 1769.44,228.293 1770,228.356 1770.57,228.503 1771.14,227.42 1771.71,227.688 1772.28,227.799 1772.85,227.167 1773.41,228.326 1773.98,228.333 1774.55,227.547 1775.12,226.658 1775.69,226.712 1776.26,226.997 1776.82,227.309 1777.39,227.702 1777.96,227.918 1778.53,229.151 1779.1,229.373 1779.67,227.481 1780.23,227.8 1780.8,226.899 1781.37,228.232 1781.94,229.439 1782.51,229.634 1783.08,226.613 1783.64,229.136 1784.21,229.324 1784.78,229.625 1785.35,229.673 1785.92,231.929 1786.49,232.897 1787.05,233.001 1787.62,233.94 1788.19,233.801 1788.76,234.434 1789.33,234.179 1789.9,233.818 1790.46,235.686 1791.03,234.333 1791.6,234.07 1792.17,237.879 1792.74,236.305 1793.31,235.942 1793.87,237.683 1794.44,237.086 1795.01,236.628 1795.58,234.936 1796.15,235.86 1796.72,236.322 1797.28,234.851 1797.85,234.464 1798.42,233.174 1798.99,228.753 1799.56,228.011 1800.13,225.126 1800.69,224.405 1801.26,223.8 1801.83,223.445 1802.4,222.921 1802.97,223.466 1803.54,223.875 1804.1,223.693 1804.67,224.162 1805.24,224.538 1805.81,224.735 1806.38,225.197 1806.95,225.594 1807.51,230.337 1808.08,230.501 1808.65,229.593 1809.22,230.575 1809.79,230.496 1810.36,228.64 1810.92,226.902 1811.49,230.107 1812.06,230.118 1812.63,229.143 1813.2,229.281 1813.77,230.529 1814.33,231.623 1814.9,235.826 1815.47,237.748 1816.04,238.016 1816.61,236.493 1817.18,233.149 1817.74,234.01 1818.31,233.793 1818.88,233.623 1819.45,231.481 1820.02,230.263 1820.59,229.315 1821.15,229.508 1821.72,230.679 1822.29,230.489 1822.86,231.759 1823.43,229.436 1824,229.426 1824.56,228.533 1825.13,230.816 1825.7,230.791 1826.27,227.999 1826.84,229.354 1827.41,226.53 1827.97,224.805 1828.54,225.235 1829.11,225.728 1829.68,225.053 1830.25,226.41 1830.82,226.756 1831.39,227.196 1831.95,227.394 1832.52,226.643 1833.09,230.303 1833.66,231.403 1834.23,231.244 1834.8,232.203 1835.36,232.196 1835.93,232.335 1836.5,231.034 1837.07,233.178 1837.64,233.189 1838.21,230.991 1838.77,233.108 1839.34,232.878 1839.91,232.804 1840.48,230.475 1841.05,228.556 1841.62,229.889 1842.18,231.068 1842.75,231.051 1843.32,230.841 1843.89,227.762 1844.46,227.012 1845.03,228.414 1845.59,224.357 1846.16,224.795 1846.73,226.459 1847.3,227.881 1847.87,229.216 1848.44,229.595 1849,230.555 1849.57,232.656 1850.14,233.848 1850.71,233.434 1851.28,232.322 1851.85,233.512 1852.41,234.29 1852.98,232.04 1853.55,229.819 1854.12,232.972 1854.69,233.754 1855.26,232.475 1855.82,233.441 1856.39,234.443 1856.96,231.344 1857.53,230.303 1858.1,229.311 1858.67,228.323 1859.23,229.445 1859.8,231.575 1860.37,232.865 1860.94,232.681 1861.51,232.622 1862.08,229.596 1862.64,229.928 1863.21,229.951 1863.78,231.073 1864.35,229.804 1864.92,226.872 1865.49,227.381 1866.05,229.28 1866.62,228.357 1867.19,229.783 1867.76,229.849 1868.33,229.742 1868.9,229.977 1869.46,230.072 1870.03,230.052 1870.6,230.178 1871.17,230.164 1871.74,228.268 1872.31,229.419 1872.87,231.601 1873.44,233.588 1874.01,231.208 1874.58,229.114 1875.15,229.297 1875.72,228.086 1876.28,228.275 1876.85,229.569 1877.42,229.545 1877.99,229.701 1878.56,229.855 1879.13,230.699 1879.69,232.922 1880.26,232.641 1880.83,232.257 1881.4,231.904 1881.97,229.703 1882.54,229.744 1883.1,231.858 1883.67,230.719 1884.24,232.734 1884.81,232.598 1885.38,232.676 1885.95,232.439 1886.51,233.389 1887.08,234.372 1887.65,233.142 1888.22,231.816 1888.79,232.852 1889.36,231.716 1889.92,231.544 1890.49,231.498 1891.06,231.325 1891.63,229.292 1892.2,229.351 1892.77,229.485 1893.33,227.595 1893.9,227.603 1894.47,229.906 1895.04,229.95 1895.61,231.062 1896.18,231.294 1896.74,232.491 1897.31,232.424 1897.88,232.129 1898.45,231.126 1899.02,231.11 1899.59,232.184 1900.16,232.215 1900.72,232.179 1901.29,232.222 1901.86,231.131 1902.43,231.213 1903,232.13 1903.57,229.822 1904.13,228.837 1904.7,227.961 1905.27,230.123 1905.84,229.075 1906.41,229.297 1906.98,228.618 1907.54,229.664 1908.11,231.053 1908.68,231.232 1909.25,230.335 1909.82,231.561 1910.39,229.404 1910.95,229.457 1911.52,228.529 1912.09,229.501 1912.66,230.619 1913.23,230.555 1913.8,230.571 1914.36,229.598 1914.93,230.803 1915.5,232.844 1916.07,230.512 1916.64,226.542 1917.21,226.031 1917.77,226.472 1918.34,226.83 1918.91,225.08 1919.48,227.494 1920.05,227.633 1920.62,227.921 1921.18,229.301 1921.75,229.513 1922.32,233.821 1922.89,233.473 1923.46,233.384 1924.03,234.156 1924.59,231.753 1925.16,229.5 1925.73,230.459 1926.3,229.478 1926.87,229.553 1927.44,232.737 1928,232.512 1928.57,231.294 1929.14,228.074 1929.71,228.239 1930.28,227.383 1930.85,226.468 1931.41,226.623 1931.98,226.992 1932.55,228.026 1933.12,230.278 1933.69,229.369 1934.26,228.691 1934.82,228.995 1935.39,229.227 1935.96,230.405 1936.53,230.421 1937.1,229.327 1937.67,228.384 1938.23,228.342 1938.8,231.825 1939.37,229.618 1939.94,229.818 1940.51,229.755 1941.08,231.858 1941.64,230.455 1942.21,232.623 1942.78,232.502 1943.35,232.544 1943.92,232.689 1944.49,229.419 1945.05,230.545 1945.62,228.349 1946.19,230.609 1946.76,233.65 1947.33,234.64 1947.9,237.536 1948.46,236.728 1949.03,235.163 1949.6,232.779 1950.17,233.702 1950.74,233.397 1951.31,232.455 1951.87,233.34 1952.44,232.232 1953.01,230.242 1953.58,232.115 1954.15,233.236 1954.72,232.891 1955.28,231.813 1955.85,231.628 1956.42,231.549 1956.99,228.401 1957.56,228.625 1958.13,229.925 1958.69,229.764 1959.26,229.701 1959.83,230.812 1960.4,231.894 1960.97,230.737 1961.54,231.899 1962.1,230.85 1962.67,232.008 1963.24,232.673 1963.81,232.44 1964.38,232.113 1964.95,231.905 1965.51,231.931 1966.08,230.923 1966.65,231.004 1967.22,231.731 1967.79,231.551 1968.36,230.446 1968.92,230.382 1969.49,230.201 1970.06,233.318 1970.63,234.008 1971.2,231.597 1971.77,232.308 1972.34,232.233 1972.9,232.126 1973.47,231.033 1974.04,231.894 1974.61,232.82 1975.18,230.456 1975.75,230.413 1976.31,229.257 1976.88,229.268 1977.45,229.411 1978.02,231.519 1978.59,231.414 1979.16,230.233 1979.72,231.14 1980.29,230.133 1980.86,230.11 1981.43,230.288 1982,229.205 1982.57,231.492 1983.13,231.279 1983.7,232.369 1984.27,230.241 1984.84,231.195 1985.41,230.149 1985.98,231.296 1986.54,232.269 1987.11,228.923 1987.68,229.061 1988.25,229.02 1988.82,229.089 1989.39,229.18 1989.95,228.988 1990.52,227.942 1991.09,233.224 1991.66,230.833 1992.23,233.919 1992.8,233.512 1993.36,235.337 1993.93,232.787 1994.5,233.641 1995.07,230.276 1995.64,229.07 1996.21,228.179 1996.77,226.288 1997.34,227.62 1997.91,226.964 1998.48,225.033 1999.05,225.461 1999.62,228.857 2000.18,227.851 2000.75,226.138 2001.32,228.389 2001.89,229.495 2002.46,228.408 2003.03,228.52 2003.59,227.606 2004.16,226.794 2004.73,226.007 2005.3,226.113 2005.87,228.675 2006.44,227.988 2007,229.262 2007.57,230.307 2008.14,229.389 2008.71,230.5 2009.28,232.514 2009.85,234.426 2010.41,235.366 2010.98,236.036 2011.55,234.449 2012.12,235.084 2012.69,236.682 2013.26,234.234 2013.82,233.922 2014.39,236.844 2014.96,233.13 2015.53,235.017 2016.1,233.825 2016.67,233.386 2017.23,233.166 2017.8,232.903 2018.37,230.526 2018.94,229.285 2019.51,231.435 2020.08,232.283 2020.64,229.893 2021.21,226.747 2021.78,225.699 2022.35,230.333 2022.92,231.17 2023.49,228.051 2024.05,228.156 2024.62,230.187 2025.19,228.962 2025.76,230.012 2026.33,231.02 2026.9,231.857 2027.46,228.664 2028.03,228.889 2028.6,229.94 2029.17,226.823 2029.74,227.892 2030.31,227.832 2030.87,229.799 2031.44,228.719 2032.01,228.791 2032.58,228.891 2033.15,226.81 2033.72,227.983 2034.28,228.305 2034.85,228.701 2035.42,229.759 2035.99,230.701 2036.56,227.563 2037.13,227.797 2037.69,223.824 2038.26,224.263 2038.83,225.751 2039.4,224.87 2039.97,225.302 2040.54,224.706 2041.11,224.127 2041.67,224.465 2042.24,225.888 2042.81,229.206 2043.38,229.363 2043.95,228.428 2044.52,228.799 2045.08,230.039 2045.65,230.043 2046.22,233.152 2046.79,234.05 2047.36,233.792 2047.93,231.401 2048.49,230.299 2049.06,229.091 2049.63,230.053 2050.2,231.127 2050.77,231.807 2051.34,231.669 2051.9,233.665 2052.47,233.499 2053.04,234.264 2053.61,233.949 2054.18,233.761 2054.75,233.361 2055.31,233.974 2055.88,234.763 2056.45,237.402 2057.02,238.901 2057.59,236.342 2058.16,234.748 2058.72,235.42 2059.29,236.047 2059.86,236.609 2060.43,236.228 2061,234.719 2061.57,233.44 2062.13,233.207 2062.7,233.863 2063.27,234.603 2063.84,233.187 2064.41,232.809 2064.98,231.445 2065.54,232.245 2066.11,231.921 2066.68,231.461 2067.25,232.219 2067.82,233.91 2068.39,233.387 2068.95,236.158 2069.52,234.756 2070.09,232.32 2070.66,229.875 2071.23,230.855 2071.8,229.805 2072.36,228.81 2072.93,229.678 2073.5,229.441 2074.07,227.133 2074.64,227.402 2075.21,226.316 2075.77,226.58 2076.34,225.588 2076.91,224.971 2077.48,225.444 2078.05,227.818 2078.62,227.908 2079.18,226.997 2079.75,226.103 2080.32,225.528 2080.89,225.85 2081.46,223.972 2082.03,223.448 2082.59,223.966 2083.16,222.101 2083.73,222.608 2084.3,224.23 2084.87,224.712 2085.44,222.23 2086,224.776 2086.57,226.047 2087.14,226.239 2087.71,226.306 2088.28,228.602 2088.85,228.789 2089.41,230.746 2089.98,228.747 2090.55,227.642 2091.12,226.756 2091.69,227.979 2092.26,227.213 2092.82,225.318 2093.39,225.625 2093.96,228.009 2094.53,228.081 2095.1,228.286 2095.67,228.505 2096.23,228.745 2096.8,227.866 2097.37,229.155 2097.94,230.259 2098.51,231.501 2099.08,232.498 2099.64,233.669 2100.21,233.464 2100.78,233.333 2101.35,233.035 2101.92,231.862 2102.49,230.916 2103.05,231.882 2103.62,231.863 2104.19,231.704 2104.76,230.764 2105.33,231.73 2105.9,231.407 2106.46,230.438 2107.03,230.454 2107.6,231.548 2108.17,230.513 2108.74,228.528 2109.31,229.855 2109.87,230.032 2110.44,231.038 2111.01,232.108 2111.58,230.98 2112.15,230.999 2112.72,231.903 2113.29,233.918 2113.85,233.592 2114.42,233.453 2114.99,233.451 2115.56,231.327 2116.13,232.108 2116.7,230.885 2117.26,231.182 2117.83,235.238 2118.4,235.934 2118.97,235.461 2119.54,235.22 2120.11,233.027 2120.67,230.918 2121.24,228.772 2121.81,228.84 2122.38,229.887 2122.95,229.983 2123.52,229.981 2124.08,230.866 2124.65,229.685 2125.22,230.598 2125.79,231.372 2126.36,232.313 2126.93,232.247 2127.49,232.081 2128.06,232.031 2128.63,230.978 2129.2,228.887 2129.77,228.944 2130.34,227.98 2130.9,227.162 2131.47,225.577 2132.04,225.815 2132.61,227.039 2133.18,229.265 2133.75,229.514 2134.31,232.696 2134.88,232.553 2135.45,232.473 2136.02,232.124 2136.59,230.089 2137.16,226.863 2137.72,227.877 2138.29,228.946 2138.86,228.052 2139.43,228.306 2140,224.47 2140.57,225.918 2141.13,227.503 2141.7,226.863 2142.27,226.129 2142.84,225.546 2143.41,226.974 2143.98,228.073 2144.54,230.251 2145.11,230.415 2145.68,230.524 2146.25,231.617 2146.82,231.719 2147.39,231.858 2147.95,233.178 2148.52,233.129 2149.09,233.993 2149.66,234.79 2150.23,233.623 2150.8,233.288 2151.36,232.16 2151.93,232.094 2152.5,230.849 2153.07,231.901 2153.64,231.807 2154.21,231.565 2154.77,232.555 2155.34,231.453 2155.91,231.183 2156.48,230.248 2157.05,230.245 2157.62,230.27 2158.18,232.406 2158.75,230.406 2159.32,232.397 2159.89,232.07 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.036 ± 0.017\n  with uncertainty of ± 0.0011032004646454997\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01791 ± (0.00411947, 0.00434319) (MC)\n  95% confidence interval: [-4.02633, -4.00948]) (MC)\n  linear error propagation: -4.0184 ± 0.0042839\n  |δ_y| = |0.00270041| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017910477897116, val_l = 0.00841930318818207, val_u = 0.008433671264961085)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip810\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip811\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip812\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.98 2211.02,1147.98 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,993.826 2211.02,993.826 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,839.668 2211.02,839.668 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,685.51 2211.02,685.51 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,531.353 2211.02,531.353 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,377.195 2211.02,377.195 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,223.037 2211.02,223.037 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.98 365.751,1147.98 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,993.826 365.751,993.826 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,839.668 365.751,839.668 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,685.51 365.751,685.51 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,531.353 365.751,531.353 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,377.195 365.751,377.195 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,223.037 365.751,223.037 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M298.909 1133.78 Q295.298 1133.78 293.469 1137.35 Q291.664 1140.89 291.664 1148.02 Q291.664 1155.12 293.469 1158.69 Q295.298 1162.23 298.909 1162.23 Q302.543 1162.23 304.349 1158.69 Q306.177 1155.12 306.177 1148.02 Q306.177 1140.89 304.349 1137.35 Q302.543 1133.78 298.909 1133.78 M298.909 1130.08 Q304.719 1130.08 307.775 1134.68 Q310.853 1139.27 310.853 1148.02 Q310.853 1156.74 307.775 1161.35 Q304.719 1165.93 298.909 1165.93 Q293.099 1165.93 290.02 1161.35 Q286.964 1156.74 286.964 1148.02 Q286.964 1139.27 290.02 1134.68 Q293.099 1130.08 298.909 1130.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M259.557 1007.17 L267.196 1007.17 L267.196 980.805 L258.886 982.472 L258.886 978.212 L267.15 976.546 L271.826 976.546 L271.826 1007.17 L279.465 1007.17 L279.465 1011.11 L259.557 1011.11 L259.557 1007.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 979.624 Q295.298 979.624 293.469 983.189 Q291.664 986.731 291.664 993.86 Q291.664 1000.97 293.469 1004.53 Q295.298 1008.07 298.909 1008.07 Q302.543 1008.07 304.349 1004.53 Q306.177 1000.97 306.177 993.86 Q306.177 986.731 304.349 983.189 Q302.543 979.624 298.909 979.624 M298.909 975.921 Q304.719 975.921 307.775 980.527 Q310.853 985.11 310.853 993.86 Q310.853 1002.59 307.775 1007.19 Q304.719 1011.78 298.909 1011.78 Q293.099 1011.78 290.02 1007.19 Q286.964 1002.59 286.964 993.86 Q286.964 985.11 290.02 980.527 Q293.099 975.921 298.909 975.921 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M262.775 853.013 L279.094 853.013 L279.094 856.948 L257.15 856.948 L257.15 853.013 Q259.812 850.258 264.395 845.629 Q269.002 840.976 270.182 839.633 Q272.428 837.11 273.307 835.374 Q274.21 833.615 274.21 831.925 Q274.21 829.17 272.266 827.434 Q270.344 825.698 267.242 825.698 Q265.043 825.698 262.59 826.462 Q260.159 827.226 257.381 828.777 L257.381 824.055 Q260.205 822.92 262.659 822.342 Q265.113 821.763 267.15 821.763 Q272.52 821.763 275.715 824.448 Q278.909 827.133 278.909 831.624 Q278.909 833.754 278.099 835.675 Q277.312 837.573 275.205 840.166 Q274.627 840.837 271.525 844.055 Q268.423 847.249 262.775 853.013 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 825.467 Q295.298 825.467 293.469 829.032 Q291.664 832.573 291.664 839.703 Q291.664 846.809 293.469 850.374 Q295.298 853.916 298.909 853.916 Q302.543 853.916 304.349 850.374 Q306.177 846.809 306.177 839.703 Q306.177 832.573 304.349 829.032 Q302.543 825.467 298.909 825.467 M298.909 821.763 Q304.719 821.763 307.775 826.369 Q310.853 830.953 310.853 839.703 Q310.853 848.43 307.775 853.036 Q304.719 857.619 298.909 857.619 Q293.099 857.619 290.02 853.036 Q286.964 848.43 286.964 839.703 Q286.964 830.953 290.02 826.369 Q293.099 821.763 298.909 821.763 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M272.914 684.156 Q276.27 684.874 278.145 687.142 Q280.043 689.411 280.043 692.744 Q280.043 697.86 276.525 700.661 Q273.006 703.462 266.525 703.462 Q264.349 703.462 262.034 703.022 Q259.742 702.605 257.289 701.749 L257.289 697.235 Q259.233 698.369 261.548 698.948 Q263.863 699.527 266.386 699.527 Q270.784 699.527 273.076 697.79 Q275.39 696.054 275.39 692.744 Q275.39 689.689 273.238 687.976 Q271.108 686.24 267.289 686.24 L263.261 686.24 L263.261 682.397 L267.474 682.397 Q270.923 682.397 272.752 681.031 Q274.58 679.642 274.58 677.05 Q274.58 674.388 272.682 672.976 Q270.807 671.541 267.289 671.541 Q265.367 671.541 263.168 671.957 Q260.969 672.374 258.33 673.253 L258.33 669.087 Q260.992 668.346 263.307 667.976 Q265.645 667.605 267.705 667.605 Q273.029 667.605 276.131 670.036 Q279.233 672.443 279.233 676.564 Q279.233 679.434 277.59 681.425 Q275.946 683.392 272.914 684.156 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 671.309 Q295.298 671.309 293.469 674.874 Q291.664 678.416 291.664 685.545 Q291.664 692.652 293.469 696.216 Q295.298 699.758 298.909 699.758 Q302.543 699.758 304.349 696.216 Q306.177 692.652 306.177 685.545 Q306.177 678.416 304.349 674.874 Q302.543 671.309 298.909 671.309 M298.909 667.605 Q304.719 667.605 307.775 672.212 Q310.853 676.795 310.853 685.545 Q310.853 694.272 307.775 698.878 Q304.719 703.462 298.909 703.462 Q293.099 703.462 290.02 698.878 Q286.964 694.272 286.964 685.545 Q286.964 676.795 290.02 672.212 Q293.099 667.605 298.909 667.605 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M271.594 518.147 L259.789 536.596 L271.594 536.596 L271.594 518.147 M270.367 514.073 L276.247 514.073 L276.247 536.596 L281.177 536.596 L281.177 540.485 L276.247 540.485 L276.247 548.633 L271.594 548.633 L271.594 540.485 L255.992 540.485 L255.992 535.971 L270.367 514.073 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 517.151 Q295.298 517.151 293.469 520.716 Q291.664 524.258 291.664 531.387 Q291.664 538.494 293.469 542.059 Q295.298 545.6 298.909 545.6 Q302.543 545.6 304.349 542.059 Q306.177 538.494 306.177 531.387 Q306.177 524.258 304.349 520.716 Q302.543 517.151 298.909 517.151 M298.909 513.448 Q304.719 513.448 307.775 518.054 Q310.853 522.637 310.853 531.387 Q310.853 540.114 307.775 544.721 Q304.719 549.304 298.909 549.304 Q293.099 549.304 290.02 544.721 Q286.964 540.114 286.964 531.387 Q286.964 522.637 290.02 518.054 Q293.099 513.448 298.909 513.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M258.793 359.915 L277.15 359.915 L277.15 363.85 L263.076 363.85 L263.076 372.322 Q264.094 371.975 265.113 371.813 Q266.131 371.628 267.15 371.628 Q272.937 371.628 276.316 374.799 Q279.696 377.971 279.696 383.387 Q279.696 388.966 276.224 392.068 Q272.752 395.146 266.432 395.146 Q264.256 395.146 261.988 394.776 Q259.742 394.406 257.335 393.665 L257.335 388.966 Q259.418 390.1 261.641 390.656 Q263.863 391.211 266.34 391.211 Q270.344 391.211 272.682 389.105 Q275.02 386.998 275.02 383.387 Q275.02 379.776 272.682 377.67 Q270.344 375.563 266.34 375.563 Q264.465 375.563 262.59 375.98 Q260.738 376.396 258.793 377.276 L258.793 359.915 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 362.994 Q295.298 362.994 293.469 366.559 Q291.664 370.1 291.664 377.23 Q291.664 384.336 293.469 387.901 Q295.298 391.443 298.909 391.443 Q302.543 391.443 304.349 387.901 Q306.177 384.336 306.177 377.23 Q306.177 370.1 304.349 366.559 Q302.543 362.994 298.909 362.994 M298.909 359.29 Q304.719 359.29 307.775 363.897 Q310.853 368.48 310.853 377.23 Q310.853 385.957 307.775 390.563 Q304.719 395.146 298.909 395.146 Q293.099 395.146 290.02 390.563 Q286.964 385.957 286.964 377.23 Q286.964 368.48 290.02 363.897 Q293.099 359.29 298.909 359.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M269.326 221.174 Q266.178 221.174 264.326 223.327 Q262.497 225.48 262.497 229.23 Q262.497 232.956 264.326 235.132 Q266.178 237.285 269.326 237.285 Q272.474 237.285 274.303 235.132 Q276.154 232.956 276.154 229.23 Q276.154 225.48 274.303 223.327 Q272.474 221.174 269.326 221.174 M278.608 206.521 L278.608 210.781 Q276.849 209.947 275.043 209.507 Q273.261 209.068 271.502 209.068 Q266.872 209.068 264.418 212.193 Q261.988 215.318 261.641 221.637 Q263.006 219.623 265.066 218.558 Q267.127 217.47 269.603 217.47 Q274.812 217.47 277.821 220.642 Q280.853 223.79 280.853 229.23 Q280.853 234.554 277.705 237.771 Q274.557 240.989 269.326 240.989 Q263.33 240.989 260.159 236.405 Q256.988 231.799 256.988 223.072 Q256.988 214.878 260.877 210.017 Q264.766 205.132 271.316 205.132 Q273.076 205.132 274.858 205.48 Q276.664 205.827 278.608 206.521 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 208.836 Q295.298 208.836 293.469 212.401 Q291.664 215.943 291.664 223.072 Q291.664 230.179 293.469 233.743 Q295.298 237.285 298.909 237.285 Q302.543 237.285 304.349 233.743 Q306.177 230.179 306.177 223.072 Q306.177 215.943 304.349 212.401 Q302.543 208.836 298.909 208.836 M298.909 205.132 Q304.719 205.132 307.775 209.739 Q310.853 214.322 310.853 223.072 Q310.853 231.799 307.775 236.405 Q304.719 240.989 298.909 240.989 Q293.099 240.989 290.02 236.405 Q286.964 231.799 286.964 223.072 Q286.964 214.322 290.02 209.739 Q293.099 205.132 298.909 205.132 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip812)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1034.4 400.199,1049.1 400.786,1055.31 401.372,956.371 401.958,863.837 402.545,779.048 403.131,702.96 403.718,633.497 404.304,567.12 404.891,514.407 405.477,463.849 406.063,416.478 406.65,375.364 407.236,407.715 407.823,368.743 408.409,333.97 408.995,362.231 409.582,333.223 410.168,309.788 410.755,288.123 411.341,269.481 411.927,253.817 412.514,239.287 413.1,227.289 413.687,219.895 414.273,246.33 414.86,239.829 415.446,236.147 416.032,261.397 416.619,285.659 417.205,285.278 417.792,285.954 418.378,286.991 418.964,309.136 419.551,312.949 420.137,318.665 420.724,324.24 421.31,330.652 421.896,338.096 422.483,359.849 423.069,381.396 423.656,402.68 424.242,423.161 424.829,441.646 425.415,461.084 426.001,481.186 426.588,491.499 427.174,519.779 427.761,530.117 428.347,540.946 428.933,567.283 429.52,578.051 430.106,588.897 430.693,606.127 431.279,623.903 431.865,640.57 432.452,651.698 433.038,662.788 433.625,673.495 434.211,694.612 434.798,710.312 435.384,725.353 435.97,740.579 436.557,767.968 437.143,777.359 437.73,786.47 438.316,807.206 438.902,819.592 439.489,835.112 440.075,846.576 440.662,854.08 441.248,868.713 441.835,882.263 442.421,892.764 443.007,905.694 443.594,912.361 444.18,925.238 444.767,940.541 445.353,949.595 445.939,961.23 446.526,967.024 447.112,972.794 447.699,978.652 448.285,986.809 448.871,995.083 449.458,1005.18 450.044,1012.83 450.631,1022.75 451.217,1027.78 451.804,1039.77 452.39,1050.96 452.976,1055.38 453.563,1061.69 454.149,1069.93 454.736,1073.92 455.322,1077.7 455.908,1083.49 456.495,1091.08 457.081,1100.39 457.668,1103.63 458.254,1112.37 458.84,1115.2 459.427,1117.88 460.013,1120.7 460.6,1128.73 461.186,1130.91 461.773,1134.92 462.359,1140.74 462.945,1146.21 463.532,1151.43 464.118,1156.4 464.705,1162.92 465.291,1164.22 465.877,1165.67 466.464,1170.21 467.05,1177.78 467.637,1178.58 468.223,1181.13 468.809,1183.49 469.396,1185.65 469.982,1189.7 470.569,1190.67 471.155,1192.99 471.742,1195.18 472.328,1195.53 472.914,1199.21 473.501,1199.78 474.087,1201.79 474.674,1202.02 475.26,1203.86 475.846,1209.04 476.433,1208.05 477.019,1209.84 477.606,1210.07 478.192,1211.95 478.778,1212.08 479.365,1215.46 479.951,1217.12 480.538,1217.3 481.124,1218.83 481.711,1220.53 482.297,1222.22 482.883,1222.34 483.47,1223.72 484.056,1223.64 484.643,1224.92 485.229,1223.69 485.815,1223.81 486.402,1223.6 486.988,1226.41 487.575,1226.42 488.161,1224.92 488.748,1227.83 489.334,1231.88 489.92,1232.8 490.507,1235.03 491.093,1237.02 491.68,1236.39 492.266,1237.26 492.852,1242.07 493.439,1245.29 494.025,1245.95 494.612,1245.24 495.198,1245.63 495.784,1245.89 496.371,1245 496.957,1246.93 497.544,1248.71 498.13,1250.53 498.717,1247.96 499.303,1247.13 499.889,1242.27 500.476,1241.43 501.062,1242.09 501.649,1244.03 502.235,1247.23 502.821,1247.74 503.408,1246.78 503.994,1245.89 504.581,1246.48 505.167,1244.21 505.753,1243.44 506.34,1242.75 506.926,1244.6 507.513,1242.65 508.099,1242.18 508.686,1242.89 509.272,1242.48 509.858,1240.38 510.445,1241.16 511.031,1240.62 511.618,1242.71 512.204,1242.13 512.79,1241.28 513.377,1242.1 513.963,1244.11 514.55,1245.87 515.136,1246.41 515.722,1245.37 516.309,1244.72 516.895,1242.64 517.482,1243.14 518.068,1242.34 518.655,1240.35 519.241,1242.37 519.827,1244.17 520.414,1244.78 521,1246.55 521.587,1245.65 522.173,1242.34 522.759,1240.61 523.346,1240.05 523.932,1241.16 524.519,1244.54 525.105,1244.92 525.691,1245.35 526.278,1245.93 526.864,1243.6 527.451,1246.78 528.037,1249.51 528.624,1248.18 529.21,1248.7 529.796,1246.35 530.383,1245.58 530.969,1243.44 531.556,1244.16 532.142,1243.31 532.728,1241.35 533.315,1238.05 533.901,1240.31 534.488,1241 535.074,1243.08 535.661,1242.02 536.247,1244.07 536.833,1241.93 537.42,1241.47 538.006,1238.38 538.593,1235.43 539.179,1236.5 539.765,1234.95 540.352,1234.7 540.938,1234.48 541.525,1233.93 542.111,1232.35 542.697,1233.48 543.284,1234.45 543.87,1235.52 544.457,1236.39 545.043,1236.09 545.63,1237.01 546.216,1235.23 546.802,1236.34 547.389,1239.87 547.975,1239.29 548.562,1240.88 549.148,1241.42 549.734,1240.62 550.321,1241.37 550.907,1240.56 551.494,1238.8 552.08,1236.51 552.666,1236.18 553.253,1234.35 553.839,1235.17 554.426,1237.36 555.012,1235.73 555.599,1235.22 556.185,1235.96 556.771,1236.76 557.358,1236.5 557.944,1235.82 558.531,1236.57 559.117,1234.5 559.703,1234.09 560.29,1236.19 560.876,1233.99 561.463,1232.44 562.049,1233.24 562.635,1232.82 563.222,1233.74 563.808,1234.54 564.395,1234.02 564.981,1232.43 565.568,1234.76 566.154,1234.45 566.74,1235.58 567.327,1234.84 567.913,1233.23 568.5,1231.38 569.086,1233.75 569.672,1233.63 570.259,1233.29 570.845,1234.29 571.432,1233.9 572.018,1233.64 572.605,1233.19 573.191,1232.42 573.777,1231.93 574.364,1231.62 574.95,1232.25 575.537,1231.95 576.123,1230.19 576.709,1233.68 577.296,1234.27 577.882,1233.57 578.469,1234.31 579.055,1233.81 579.641,1233.62 580.228,1233.18 580.814,1234.96 581.401,1233.21 581.987,1231.63 582.574,1232.52 583.16,1231.91 583.746,1232.95 584.333,1232.43 584.919,1233.07 585.506,1235.2 586.092,1237.24 586.678,1237.87 587.265,1235.85 587.851,1231.66 588.438,1229.81 589.024,1229.46 589.61,1231.68 590.197,1231.2 590.783,1232.19 591.37,1234.35 591.956,1233.71 592.543,1231.81 593.129,1230.18 593.715,1231.1 594.302,1231.7 594.888,1231.2 595.475,1232.08 596.061,1235.13 596.647,1233.06 597.234,1234.95 597.82,1233.96 598.407,1234.68 598.993,1232.66 599.579,1232.02 600.166,1232.76 600.752,1234.96 601.339,1232.78 601.925,1228.16 602.512,1226.7 603.098,1225.07 603.684,1223.64 604.271,1222.1 604.857,1223.24 605.444,1221.92 606.03,1221.92 606.616,1222.1 607.203,1223.04 607.789,1224.2 608.376,1222.98 608.962,1224.1 609.548,1224.95 610.135,1224.73 610.721,1225.73 611.308,1226.76 611.894,1227.33 612.481,1228.25 613.067,1225.46 613.653,1223.75 614.24,1224.74 614.826,1225.81 615.413,1225.46 615.999,1222.79 616.585,1221.44 617.172,1222.81 617.758,1221.32 618.345,1222.5 618.931,1222.03 619.518,1221.93 620.104,1223.3 620.69,1223.1 621.277,1220.45 621.863,1221.56 622.45,1217.53 623.036,1218.92 623.622,1221.35 624.209,1223.94 624.795,1223.94 625.382,1223.71 625.968,1224.77 626.554,1224.55 627.141,1225.56 627.727,1226.72 628.314,1226.72 628.9,1225.13 629.487,1227.6 630.073,1228.74 630.659,1226.81 631.246,1224.45 631.832,1224.34 632.419,1226.46 633.005,1224.78 633.591,1223.09 634.178,1224.37 634.764,1228 635.351,1226.13 635.937,1221.94 636.523,1222.9 637.11,1223.81 637.696,1224.72 638.283,1225.18 638.869,1223.35 639.456,1221.69 640.042,1219.03 640.628,1217.26 641.215,1214.69 641.801,1214.62 642.388,1214.59 642.974,1217.28 643.56,1216.04 644.147,1216.25 644.733,1216.57 645.32,1219.07 645.906,1220.39 646.492,1221.39 647.079,1220.94 647.665,1219.72 648.252,1220.79 648.838,1220.76 649.425,1219.32 650.011,1220.58 650.597,1223.13 651.184,1226.66 651.77,1227.42 652.357,1228.15 652.943,1227.83 653.529,1227.07 654.116,1226.77 654.702,1227.56 655.289,1229.38 655.875,1227.44 656.462,1226.78 657.048,1226.19 657.634,1223.24 658.221,1221.48 658.807,1220.93 659.394,1219.57 659.98,1221.87 660.566,1221.43 661.153,1221.31 661.739,1221.07 662.326,1219.76 662.912,1222.1 663.498,1223 664.085,1220.22 664.671,1219.98 665.258,1217.17 665.844,1217.29 666.431,1218.44 667.017,1220.75 667.603,1216.55 668.19,1215.43 668.776,1216.75 669.363,1217.7 669.949,1218.7 670.535,1215.95 671.122,1217.11 671.708,1217.06 672.295,1216.89 672.881,1214.39 673.467,1212.04 674.054,1214.71 674.64,1213.32 675.227,1214.89 675.813,1216.27 676.4,1216.39 676.986,1216.14 677.572,1217.75 678.159,1219.13 678.745,1220.4 679.332,1220.23 679.918,1220.02 680.504,1223.51 681.091,1224.29 681.677,1219.95 682.264,1218.49 682.85,1218.37 683.436,1219.65 684.023,1223.54 684.609,1223.09 685.196,1219.22 685.782,1220.62 686.369,1218.76 686.955,1217.59 687.541,1217.56 688.128,1216.3 688.714,1216.22 689.301,1217.75 689.887,1216.55 690.473,1217.76 691.06,1214.97 691.646,1216.07 692.233,1216.03 692.819,1213.59 693.405,1212.47 693.992,1212.75 694.578,1211.65 695.165,1211.69 695.751,1209.43 696.338,1210.68 696.924,1212.15 697.51,1213.63 698.097,1217.64 698.683,1216.09 699.27,1217.33 699.856,1217.26 700.442,1218.5 701.029,1217.08 701.615,1220.95 702.202,1220.75 702.788,1219.15 703.375,1218.88 703.961,1218.31 704.547,1218.66 705.134,1216.99 705.72,1217.16 706.307,1218.3 706.893,1219.4 707.479,1219.32 708.066,1223.13 708.652,1220.49 709.239,1224.15 709.825,1222.37 710.411,1224.53 710.998,1225.07 711.584,1224.49 712.171,1225.44 712.757,1225.16 713.344,1225.85 713.93,1225.39 714.516,1222.24 715.103,1220.49 715.689,1220.34 716.276,1220.03 716.862,1219.66 717.448,1217.94 718.035,1217.66 718.621,1216.36 719.208,1217.28 719.794,1217.16 720.38,1218.29 720.967,1219.56 721.553,1221.67 722.14,1218.79 722.726,1218.2 723.313,1216.7 723.899,1218.05 724.485,1217.82 725.072,1220.36 725.658,1218.65 726.245,1214.45 726.831,1213.29 727.417,1212.02 728.004,1211.94 728.59,1212.06 729.177,1212.1 729.763,1213.55 730.349,1211.15 730.936,1212.64 731.522,1209.17 732.109,1210.62 732.695,1212.15 733.282,1212.28 733.868,1215.95 734.454,1219.65 735.041,1216.98 735.627,1219.31 736.214,1218.97 736.8,1218.67 737.386,1218.55 737.973,1219.55 738.559,1216.44 739.146,1216.44 739.732,1214.87 740.318,1214.87 740.905,1216.11 741.491,1215.81 742.078,1215.92 742.664,1215.8 743.251,1216.05 743.837,1216.08 744.423,1217 745.01,1217.02 745.596,1218.12 746.183,1219.18 746.769,1219.04 747.355,1218.6 747.942,1218.4 748.528,1216.86 749.115,1218 749.701,1216.46 750.288,1212.29 750.874,1212.29 751.46,1211.03 752.047,1211.32 752.633,1212.86 753.22,1214.16 753.806,1215.21 754.392,1215.1 754.979,1214.23 755.565,1214.21 756.152,1214.05 756.738,1213.87 757.324,1215.43 757.911,1213.96 758.497,1215.27 759.084,1213.98 759.67,1213.8 760.257,1213.78 760.843,1211.53 761.429,1211.86 762.016,1209.08 762.602,1209.11 763.189,1209.21 763.775,1215.72 764.361,1216.78 764.948,1214.01 765.534,1217.83 766.121,1216.23 766.707,1216.07 767.293,1217.26 767.88,1218.47 768.466,1218.16 769.053,1218.98 769.639,1218.48 770.226,1216.9 770.812,1215.11 771.398,1214.83 771.985,1213.82 772.571,1215.14 773.158,1214.9 773.744,1216.09 774.33,1214.6 774.917,1216.91 775.503,1216.66 776.09,1218.02 776.676,1217.75 777.262,1219.78 777.849,1221.91 778.435,1222.64 779.022,1221.83 779.608,1222.7 780.195,1222.13 780.781,1223.81 781.367,1221.74 781.954,1218.66 782.54,1218.25 783.127,1220.69 783.713,1220.36 784.299,1220.13 784.886,1223.61 785.472,1224.26 786.059,1222.6 786.645,1221.89 787.232,1221.42 787.818,1220.65 788.404,1220.24 788.991,1218.68 789.577,1218.18 790.164,1218.91 790.75,1217.31 791.336,1217.08 791.923,1214.54 792.509,1213.53 793.096,1212.16 793.682,1211 794.268,1211.18 794.855,1212.47 795.441,1212.29 796.028,1209.96 796.614,1209.2 797.201,1210.76 797.787,1212.06 798.373,1212.32 798.96,1212.37 799.546,1211.26 800.133,1211.54 800.719,1215.34 801.305,1216.59 801.892,1216.28 802.478,1218.44 803.065,1219.63 803.651,1220.69 804.237,1220.21 804.824,1215.96 805.41,1217.19 805.997,1216.81 806.583,1214.06 807.17,1211.46 807.756,1211.51 808.342,1210.27 808.929,1209.3 809.515,1209.52 810.102,1209.78 810.688,1208.44 811.274,1207.27 811.861,1208.68 812.447,1208.96 813.034,1205.52 813.62,1204.6 814.206,1203.71 814.793,1205.45 815.379,1207.37 815.966,1205.22 816.552,1205.6 817.139,1204.84 817.725,1209.04 818.311,1209.11 818.898,1208.15 819.484,1209.63 820.071,1209.96 820.657,1212.87 821.243,1209.16 821.83,1208 822.416,1207.09 823.003,1205.57 823.589,1204.57 824.175,1203.92 824.762,1204.17 825.348,1204.73 825.935,1203.73 826.521,1207.81 827.108,1206.69 827.694,1207.03 828.28,1209.94 828.867,1212.51 829.453,1211.34 830.04,1211.57 830.626,1209.14 831.212,1209.33 831.799,1209.6 832.385,1208.64 832.972,1209.05 833.558,1207.93 834.145,1204.46 834.731,1206.24 835.317,1204.05 835.904,1204.38 836.49,1204.71 837.077,1205.45 837.663,1208.24 838.249,1207.47 838.836,1210.09 839.422,1211.32 840.009,1210.3 840.595,1210.31 841.181,1207.99 841.768,1208.25 842.354,1210.82 842.941,1212.04 843.527,1212.04 844.114,1213.37 844.7,1212.23 845.286,1211.19 845.873,1211.02 846.459,1210.9 847.046,1209.89 847.632,1208.92 848.218,1212.78 848.805,1212.93 849.391,1212.54 849.978,1213.38 850.564,1213.26 851.15,1213.43 851.737,1214.49 852.323,1218.05 852.91,1218.01 853.496,1220.06 854.083,1219.81 854.669,1218.22 855.255,1217.96 855.842,1218.82 856.428,1217.08 857.015,1216.83 857.601,1215.43 858.187,1216.75 858.774,1220.17 859.36,1219.54 859.947,1218.86 860.533,1219.66 861.119,1216.51 861.706,1216.45 862.292,1214.93 862.879,1213.44 863.465,1211.98 864.052,1212.02 864.638,1214.55 865.224,1215.68 865.811,1216.46 866.397,1218.84 866.984,1219.69 867.57,1219.41 868.156,1220.28 868.743,1213.63 869.329,1210.97 869.916,1211.1 870.502,1209.9 871.089,1207.52 871.675,1211.44 872.261,1210.62 872.848,1210.94 873.434,1212.02 874.021,1213.18 874.607,1213.17 875.193,1210.83 875.78,1210.84 876.366,1208.57 876.953,1207.49 877.539,1207.92 878.125,1208.21 878.712,1208.5 879.298,1207.21 879.885,1211.26 880.471,1209.83 881.058,1208.69 881.644,1210.2 882.23,1209.13 882.817,1211.48 883.403,1211.35 883.99,1212.59 884.576,1211.14 885.162,1208.55 885.749,1212.5 886.335,1213.65 886.922,1211.12 887.508,1209.88 888.094,1212.38 888.681,1216.3 889.267,1216.28 889.854,1213.86 890.44,1216.15 891.027,1218.56 891.613,1219.62 892.199,1220.4 892.786,1222.07 893.372,1222.75 893.959,1220.97 894.545,1221.54 895.131,1221.02 895.718,1219.2 896.304,1217.4 896.891,1213.22 897.477,1210.81 898.063,1212.07 898.65,1214.74 899.236,1214.62 899.823,1213.31 900.409,1211.98 900.996,1212.02 901.582,1212.03 902.168,1210.48 902.755,1209.49 903.341,1207.06 903.928,1208.55 904.514,1208.59 905.1,1207.15 905.687,1206.1 906.273,1207.66 906.86,1207.67 907.446,1204.19 908.032,1204.46 908.619,1207.47 909.205,1206.5 909.792,1205.5 910.378,1206.21 910.965,1209.01 911.551,1210.35 912.137,1210.51 912.724,1206.84 913.31,1207 913.897,1205.89 914.483,1207.39 915.069,1205.26 915.656,1205.71 916.242,1207.13 916.829,1204.78 917.415,1206.45 918.002,1206.38 918.588,1204.11 919.174,1204.7 919.761,1206.42 920.347,1207.92 920.934,1206.85 921.52,1209.44 922.106,1208.46 922.693,1207.65 923.279,1210.37 923.866,1211.35 924.452,1211.32 925.038,1211.16 925.625,1211.1 926.211,1211.48 926.798,1207.9 927.384,1206.92 927.971,1207.32 928.557,1211.58 929.143,1211.3 929.73,1210.26 930.316,1209.28 930.903,1209.61 931.489,1207.02 932.075,1208.58 932.662,1207.59 933.248,1208.95 933.835,1205.01 934.421,1205.32 935.007,1205.46 935.594,1207.06 936.18,1207.2 936.767,1208.73 937.353,1213.55 937.94,1213.2 938.526,1214.42 939.112,1214.25 939.699,1214.01 940.285,1213.8 940.872,1214.84 941.458,1215.8 942.044,1218.03 942.631,1217.87 943.217,1218.87 943.804,1217.25 944.39,1218.17 944.976,1218.89 945.563,1220.87 946.149,1220.26 946.736,1220.89 947.322,1218.05 947.909,1217.88 948.495,1215.9 949.081,1216.84 949.668,1217.68 950.254,1218.78 950.841,1218.53 951.427,1219.52 952.013,1217.86 952.6,1219.84 953.186,1221.65 953.773,1221.07 954.359,1219.24 954.945,1215.05 955.532,1212.38 956.118,1213.3 956.705,1213.11 957.291,1212.87 957.878,1212.93 958.464,1212.97 959.05,1213.91 959.637,1214.95 960.223,1213.26 960.81,1214.47 961.396,1210.62 961.982,1210.69 962.569,1210.56 963.155,1207.86 963.742,1205.32 964.328,1206.82 964.915,1208.47 965.501,1212.12 966.087,1211.21 966.674,1208.94 967.26,1207.88 967.847,1207.21 968.433,1206.11 969.019,1203.71 969.606,1207.97 970.192,1207.88 970.779,1208.1 971.365,1208.37 971.951,1208.75 972.538,1207.67 973.124,1209.11 973.711,1208.02 974.297,1208.2 974.884,1208.34 975.47,1207.32 976.056,1206.41 976.643,1206.58 977.229,1207.82 977.816,1206.51 978.402,1207.06 978.988,1205.77 979.575,1207.27 980.161,1210.06 980.748,1208.71 981.334,1211.19 981.92,1208.78 982.507,1207.6 983.093,1209.17 983.68,1209.4 984.266,1206.76 984.853,1206.96 985.439,1208.77 986.025,1208.84 986.612,1209.24 987.198,1210.57 987.785,1210.45 988.371,1210.71 988.957,1208.08 989.544,1209.61 990.13,1212.14 990.717,1212.11 991.303,1212.4 991.889,1214.67 992.476,1212.98 993.062,1215.58 993.649,1215.49 994.235,1215.1 994.822,1214.74 995.408,1214.63 995.994,1210.65 996.581,1212.14 997.167,1212.1 997.754,1208.35 998.34,1210.89 998.926,1212.04 999.513,1213.32 1000.1,1214.52 1000.69,1216.76 1001.27,1216.38 1001.86,1212.54 1002.44,1211.12 1003.03,1208.3 1003.62,1208.52 1004.2,1208.79 1004.79,1207.48 1005.38,1210.21 1005.96,1210.16 1006.55,1210.03 1007.14,1211.11 1007.72,1211.14 1008.31,1211.21 1008.9,1208.6 1009.48,1208.62 1010.07,1208.87 1010.65,1206.51 1011.24,1207.8 1011.83,1207.76 1012.41,1205.43 1013,1205.76 1013.59,1206.06 1014.17,1207.67 1014.76,1206.57 1015.35,1207.83 1015.93,1208.09 1016.52,1205.98 1017.11,1206.03 1017.69,1207.5 1018.28,1209.09 1018.86,1209.17 1019.45,1209.32 1020.04,1209.49 1020.62,1209.66 1021.21,1210.93 1021.8,1209.61 1022.38,1208.17 1022.97,1209.67 1023.56,1211.37 1024.14,1207.81 1024.73,1210.43 1025.32,1209.12 1025.9,1209.3 1026.49,1207.99 1027.07,1209.14 1027.66,1208.9 1028.25,1207.52 1028.83,1206.31 1029.42,1209.11 1030.01,1209 1030.59,1209.12 1031.18,1210.26 1031.77,1212.56 1032.35,1214.04 1032.94,1208.64 1033.52,1211.38 1034.11,1212.85 1034.7,1210.27 1035.28,1208.93 1035.87,1211.85 1036.46,1210.41 1037.04,1211.87 1037.63,1214.29 1038.22,1216.64 1038.8,1216.4 1039.39,1218.75 1039.98,1218.26 1040.56,1216.56 1041.15,1217.49 1041.73,1214.51 1042.32,1214.3 1042.91,1213.89 1043.49,1213.77 1044.08,1212.21 1044.67,1210.81 1045.25,1211.06 1045.84,1209.8 1046.43,1209.59 1047.01,1209.48 1047.6,1208.32 1048.19,1208.55 1048.77,1209.89 1049.36,1207.55 1049.94,1207.59 1050.53,1207.81 1051.12,1207.99 1051.7,1208.3 1052.29,1207.15 1052.88,1204.87 1053.46,1206.29 1054.05,1205.65 1054.64,1207.36 1055.22,1207.21 1055.81,1208.65 1056.39,1207.43 1056.98,1207.79 1057.57,1206.75 1058.15,1205.7 1058.74,1204.83 1059.33,1205.05 1059.91,1206.68 1060.5,1207.02 1061.09,1203.75 1061.67,1205.62 1062.26,1205.79 1062.85,1204.42 1063.43,1203.39 1064.02,1203.65 1064.6,1208.96 1065.19,1207.76 1065.78,1207.78 1066.36,1207.97 1066.95,1206.98 1067.54,1207.19 1068.12,1207.38 1068.71,1207.71 1069.3,1207.69 1069.88,1208.76 1070.47,1206.34 1071.06,1206.6 1071.64,1207.77 1072.23,1209.51 1072.81,1212.18 1073.4,1210.62 1073.99,1209.52 1074.57,1210.83 1075.16,1212.31 1075.75,1211.93 1076.33,1214.52 1076.92,1215.77 1077.51,1215.46 1078.09,1213.91 1078.68,1216.13 1079.26,1214.62 1079.85,1215.65 1080.44,1217.76 1081.02,1217.22 1081.61,1218.36 1082.2,1218.82 1082.78,1218.8 1083.37,1217.13 1083.96,1216.64 1084.54,1216.32 1085.13,1217.22 1085.72,1220.68 1086.3,1219.95 1086.89,1219.44 1087.47,1222.65 1088.06,1221.86 1088.65,1221.36 1089.23,1218.38 1089.82,1216.72 1090.41,1217.47 1090.99,1215.76 1091.58,1215.41 1092.17,1215.12 1092.75,1213.86 1093.34,1212.35 1093.93,1212.31 1094.51,1212.29 1095.1,1212.23 1095.68,1210.73 1096.27,1208.12 1096.86,1206.84 1097.44,1205.85 1098.03,1204.81 1098.62,1202.58 1099.2,1204.23 1099.79,1203.3 1100.38,1205.13 1100.96,1209.19 1101.55,1209.33 1102.14,1209.38 1102.72,1208.27 1103.31,1204.4 1103.89,1203.38 1104.48,1203.73 1105.07,1204.21 1105.65,1204.53 1106.24,1203.47 1106.83,1205.59 1107.41,1204.3 1108,1207.11 1108.59,1205.98 1109.17,1209.89 1109.76,1208.46 1110.34,1208.28 1110.93,1206.91 1111.52,1206.04 1112.1,1207.8 1112.69,1207.58 1113.28,1207.74 1113.86,1207.87 1114.45,1207.67 1115.04,1207.98 1115.62,1212.13 1116.21,1209.65 1116.8,1208.55 1117.38,1208.65 1117.97,1211.5 1118.55,1211.57 1119.14,1213.15 1119.73,1213.27 1120.31,1211.68 1120.9,1212.8 1121.49,1215.28 1122.07,1213.82 1122.66,1214.68 1123.25,1212.23 1123.83,1209.75 1124.42,1209.84 1125.01,1213.56 1125.59,1213.23 1126.18,1213.04 1126.76,1212.83 1127.35,1212.81 1127.94,1215.15 1128.52,1213.59 1129.11,1215.65 1129.7,1214.1 1130.28,1212.71 1130.87,1213.99 1131.46,1215.11 1132.04,1214.84 1132.63,1212.14 1133.21,1211.81 1133.8,1210.48 1134.39,1212.95 1134.97,1212.83 1135.56,1215.27 1136.15,1216.03 1136.73,1215.43 1137.32,1215.3 1137.91,1216.29 1138.49,1218.34 1139.08,1218.15 1139.67,1216.15 1140.25,1215.67 1140.84,1216.42 1141.42,1216 1142.01,1215.79 1142.6,1214 1143.18,1214.85 1143.77,1215.88 1144.36,1215.37 1144.94,1215.24 1145.53,1215.13 1146.12,1212.18 1146.7,1215.63 1147.29,1215.46 1147.88,1217.37 1148.46,1215.72 1149.05,1215.49 1149.63,1212.25 1150.22,1212.02 1150.81,1210.47 1151.39,1210.37 1151.98,1210.21 1152.57,1210.4 1153.15,1209.39 1153.74,1209.3 1154.33,1209.29 1154.91,1209.35 1155.5,1210.97 1156.09,1213.54 1156.67,1209.5 1157.26,1209.41 1157.84,1211.91 1158.43,1213.05 1159.02,1210.43 1159.6,1212.77 1160.19,1212.31 1160.78,1212.15 1161.36,1211.93 1161.95,1212 1162.54,1211.97 1163.12,1210.53 1163.71,1206.76 1164.29,1208.29 1164.88,1209.84 1165.47,1209.8 1166.05,1208.44 1166.64,1207.28 1167.23,1205.13 1167.81,1201.66 1168.4,1200.84 1168.99,1200.19 1169.57,1201.83 1170.16,1204.99 1170.75,1206.52 1171.33,1209.17 1171.92,1210.2 1172.5,1208.83 1173.09,1209.06 1173.68,1207.68 1174.26,1206.43 1174.85,1206.73 1175.44,1208.17 1176.02,1208.11 1176.61,1209.54 1177.2,1212.29 1177.78,1215.97 1178.37,1215.45 1178.96,1215.04 1179.54,1214.59 1180.13,1214.28 1180.71,1213.85 1181.3,1212.52 1181.89,1209.87 1182.47,1206.12 1183.06,1203.84 1183.65,1204.34 1184.23,1206.07 1184.82,1208.71 1185.41,1207.49 1185.99,1206.76 1186.58,1208.09 1187.16,1208.21 1187.75,1208.13 1188.34,1208.4 1188.92,1208.45 1189.51,1208.45 1190.1,1209.5 1190.68,1211.99 1191.27,1215.65 1191.86,1216.41 1192.44,1216.28 1193.03,1214.74 1193.62,1217.03 1194.2,1215.51 1194.79,1215.09 1195.37,1217.17 1195.96,1216.95 1196.55,1216.82 1197.13,1218.82 1197.72,1218.27 1198.31,1219.13 1198.89,1217.4 1199.48,1218.17 1200.07,1216.57 1200.65,1214.64 1201.24,1214.59 1201.83,1213.18 1202.41,1211.82 1203,1213 1203.58,1211.6 1204.17,1210.07 1204.76,1212.57 1205.34,1211.26 1205.93,1209.83 1206.52,1208.33 1207.1,1210.75 1207.69,1210.75 1208.28,1212.32 1208.86,1209.91 1209.45,1208.57 1210.03,1210.16 1210.62,1209.02 1211.21,1210.27 1211.79,1209.03 1212.38,1209.17 1212.97,1209.27 1213.55,1209 1214.14,1209.21 1214.73,1211.78 1215.31,1208.18 1215.9,1209.69 1216.49,1207.46 1217.07,1205.34 1217.66,1204.24 1218.24,1204.58 1218.83,1203.47 1219.42,1202.65 1220,1204.36 1220.59,1204.59 1221.18,1205.06 1221.76,1205.32 1222.35,1204.21 1222.94,1206.93 1223.52,1209.43 1224.11,1208.3 1224.7,1207.03 1225.28,1208.51 1225.87,1208.43 1226.45,1208.99 1227.04,1210.65 1227.63,1213.35 1228.21,1214.44 1228.8,1213.01 1229.39,1212.87 1229.97,1213.82 1230.56,1213.49 1231.15,1218.23 1231.73,1219.43 1232.32,1218.07 1232.91,1217.6 1233.49,1215.9 1234.08,1214.45 1234.66,1215.68 1235.25,1214.25 1235.84,1213.95 1236.42,1214.93 1237.01,1213.61 1237.6,1215.75 1238.18,1212.96 1238.77,1213.65 1239.36,1211.07 1239.94,1209.42 1240.53,1209.25 1241.11,1206.63 1241.7,1204.33 1242.29,1203.34 1242.87,1203.47 1243.46,1202.36 1244.05,1201.44 1244.63,1200.67 1245.22,1201.14 1245.81,1198.91 1246.39,1200.94 1246.98,1204.05 1247.57,1205.57 1248.15,1205.95 1248.74,1208.48 1249.32,1207.29 1249.91,1208.82 1250.5,1212.57 1251.08,1213.79 1251.67,1213.62 1252.26,1213.65 1252.84,1214.41 1253.43,1214.25 1254.02,1212.9 1254.6,1208.97 1255.19,1204.22 1255.78,1208.17 1256.36,1208.26 1256.95,1208.38 1257.53,1209.82 1258.12,1210.98 1258.71,1209.76 1259.29,1208.49 1259.88,1210.93 1260.47,1210.97 1261.05,1211.02 1261.64,1210.25 1262.23,1206.45 1262.81,1209.27 1263.4,1214.39 1263.98,1217.99 1264.57,1216.35 1265.16,1216.22 1265.74,1215.92 1266.33,1214.3 1266.92,1215.73 1267.5,1215.48 1268.09,1214.14 1268.68,1213.78 1269.26,1210.98 1269.85,1212.25 1270.44,1214.66 1271.02,1211.61 1271.61,1211.49 1272.19,1212.64 1272.78,1213.96 1273.37,1210.07 1273.95,1210.05 1274.54,1207.58 1275.13,1208.81 1275.71,1209.16 1276.3,1211.73 1276.89,1212.8 1277.47,1214.03 1278.06,1212.54 1278.65,1214.87 1279.23,1214.56 1279.82,1213.93 1280.4,1210.93 1280.99,1206.83 1281.58,1203.12 1282.16,1203.54 1282.75,1204.96 1283.34,1203.88 1283.92,1202.77 1284.51,1204.46 1285.1,1204.75 1285.68,1209.03 1286.27,1210.48 1286.86,1211.73 1287.44,1213.04 1288.03,1213.82 1288.61,1212.49 1289.2,1212.52 1289.79,1211.06 1290.37,1210.99 1290.96,1211.98 1291.55,1212.88 1292.13,1210.1 1292.72,1209.05 1293.31,1205.23 1293.89,1205.5 1294.48,1205.67 1295.06,1208.31 1295.65,1210.5 1296.24,1208 1296.82,1209.34 1297.41,1209.67 1298,1210.86 1298.58,1206.93 1299.17,1207.03 1299.76,1207.09 1300.34,1207.05 1300.93,1207.08 1301.52,1203.48 1302.1,1204.07 1302.69,1206.94 1303.27,1213.09 1303.86,1211.78 1304.45,1214.75 1305.03,1215.73 1305.62,1215.58 1306.21,1212.95 1306.79,1212.82 1307.38,1212.76 1307.97,1215.01 1308.55,1215.88 1309.14,1215.79 1309.73,1215.71 1310.31,1214.3 1310.9,1213.95 1311.48,1214.91 1312.07,1214.69 1312.66,1217.04 1313.24,1217.99 1313.83,1215.33 1314.42,1214.85 1315,1212.1 1315.59,1212.14 1316.18,1209.42 1316.76,1210.51 1317.35,1210.62 1317.93,1209.25 1318.52,1206.75 1319.11,1209.42 1319.69,1203.37 1320.28,1203.78 1320.87,1203.24 1321.45,1206.13 1322.04,1207.52 1322.63,1205.12 1323.21,1204.44 1323.8,1203.59 1324.39,1202.59 1324.97,1204.13 1325.56,1204.36 1326.14,1204.9 1326.73,1204.91 1327.32,1206.56 1327.9,1210.55 1328.49,1208.11 1329.08,1209.3 1329.66,1208.11 1330.25,1208.23 1330.84,1208.46 1331.42,1208.47 1332.01,1207.3 1332.6,1207.2 1333.18,1207.64 1333.77,1207.74 1334.35,1208.11 1334.94,1207.25 1335.53,1208.9 1336.11,1210.23 1336.7,1213.81 1337.29,1214.95 1337.87,1216.07 1338.46,1213.57 1339.05,1213.77 1339.63,1210.01 1340.22,1210.05 1340.8,1213.84 1341.39,1213.65 1341.98,1214.92 1342.56,1210.99 1343.15,1210.75 1343.74,1210.73 1344.32,1210.75 1344.91,1208.19 1345.5,1205.65 1346.08,1204.68 1346.67,1207.25 1347.26,1207.15 1347.84,1210.82 1348.43,1210.53 1349.01,1209.26 1349.6,1209.4 1350.19,1212 1350.77,1211.68 1351.36,1211.57 1351.95,1210.34 1352.53,1211.95 1353.12,1214.2 1353.71,1214.01 1354.29,1213.71 1354.88,1213.8 1355.47,1213.57 1356.05,1212.32 1356.64,1213.44 1357.22,1214.6 1357.81,1214.33 1358.4,1215.14 1358.98,1216.07 1359.57,1217.01 1360.16,1215.38 1360.74,1214.99 1361.33,1213.34 1361.92,1211.57 1362.5,1212.76 1363.09,1211.18 1363.68,1207.54 1364.26,1208.8 1364.85,1205.24 1365.43,1203.14 1366.02,1202.26 1366.61,1202.72 1367.19,1205.81 1367.78,1206.03 1368.37,1206.27 1368.95,1206.43 1369.54,1207.82 1370.13,1205.36 1370.71,1208.24 1371.3,1206.05 1371.88,1203.55 1372.47,1203.97 1373.06,1206.87 1373.64,1208.37 1374.23,1207.38 1374.82,1208.56 1375.4,1208.92 1375.99,1207.45 1376.58,1207.82 1377.16,1208.03 1377.75,1208.33 1378.34,1208.39 1378.92,1209.69 1379.51,1209.83 1380.09,1210.19 1380.68,1207.37 1381.27,1209 1381.85,1210.21 1382.44,1207.61 1383.03,1209.4 1383.61,1209.45 1384.2,1208.41 1384.79,1206.01 1385.37,1208.84 1385.96,1207.82 1386.55,1206.42 1387.13,1203.08 1387.72,1200.77 1388.3,1202.64 1388.89,1203.11 1389.48,1202.1 1390.06,1202.53 1390.65,1204.12 1391.24,1204.57 1391.82,1205.12 1392.41,1207.81 1393,1210.72 1393.58,1210.82 1394.17,1210.72 1394.75,1209.53 1395.34,1212.41 1395.93,1210.99 1396.51,1210.88 1397.1,1209.41 1397.69,1210.73 1398.27,1213.21 1398.86,1211.65 1399.45,1213.92 1400.03,1210.96 1400.62,1209.68 1401.21,1209.73 1401.79,1211.07 1402.38,1211.23 1402.96,1208.57 1403.55,1207.64 1404.14,1208.82 1404.72,1208.88 1405.31,1210.3 1405.9,1210.45 1406.48,1213.04 1407.07,1211.62 1407.66,1210.52 1408.24,1210.51 1408.83,1209.06 1409.42,1209.02 1410,1208.19 1410.59,1208.1 1411.17,1209.38 1411.76,1210.92 1412.35,1209.33 1412.93,1206.6 1413.52,1209.12 1414.11,1205.31 1414.69,1205.48 1415.28,1202.25 1415.87,1204.05 1416.45,1204.64 1417.04,1203.41 1417.63,1203.6 1418.21,1205.34 1418.8,1208.14 1419.38,1209.47 1419.97,1213.22 1420.56,1211.79 1421.14,1214.31 1421.73,1216.74 1422.32,1217.65 1422.9,1216.12 1423.49,1218.34 1424.08,1219.33 1424.66,1219.86 1425.25,1219.24 1425.83,1218.74 1426.42,1218.33 1427.01,1222.94 1427.59,1222.05 1428.18,1219.8 1428.77,1219.54 1429.35,1218.98 1429.94,1218.42 1430.53,1218.04 1431.11,1218.08 1431.7,1217.5 1432.29,1220.8 1432.87,1220.07 1433.46,1219.57 1434.04,1217.67 1434.63,1216.1 1435.22,1213.1 1435.8,1209.23 1436.39,1207.92 1436.98,1207.17 1437.56,1207.05 1438.15,1204.82 1438.74,1204.89 1439.32,1207.8 1439.91,1205.49 1440.5,1205.66 1441.08,1207.08 1441.67,1207.09 1442.25,1205.81 1442.84,1203.27 1443.43,1204.8 1444.01,1207.67 1444.6,1207.59 1445.19,1207.46 1445.77,1206.34 1446.36,1205.6 1446.95,1207.05 1447.53,1208.58 1448.12,1208.58 1448.7,1207.48 1449.29,1210.43 1449.88,1209.24 1450.46,1207.93 1451.05,1205.42 1451.64,1205.75 1452.22,1205.83 1452.81,1203.77 1453.4,1202.68 1453.98,1204.2 1454.57,1206.12 1455.16,1207.37 1455.74,1207.39 1456.33,1210.22 1456.91,1210.3 1457.5,1210.34 1458.09,1211.75 1458.67,1210.55 1459.26,1210.83 1459.85,1210.79 1460.43,1211.9 1461.02,1213.97 1461.61,1212.6 1462.19,1212.47 1462.78,1214.85 1463.37,1215.77 1463.95,1217.94 1464.54,1218.72 1465.12,1215.96 1465.71,1214.15 1466.3,1214.15 1466.88,1218.75 1467.47,1217.12 1468.06,1215.45 1468.64,1216.45 1469.23,1214.92 1469.82,1217.03 1470.4,1216.28 1470.99,1214.81 1471.57,1215.58 1472.16,1216.16 1472.75,1213.49 1473.33,1213.34 1473.92,1212.9 1474.51,1211.43 1475.09,1210.25 1475.68,1210.15 1476.27,1210.16 1476.85,1210.07 1477.44,1211.08 1478.03,1210.92 1478.61,1210.68 1479.2,1211.81 1479.78,1210.37 1480.37,1207.72 1480.96,1205.4 1481.54,1205.84 1482.13,1209.37 1482.72,1208.28 1483.3,1208.28 1483.89,1209.3 1484.48,1206.72 1485.06,1206.67 1485.65,1205.64 1486.24,1207.11 1486.82,1207.09 1487.41,1208.27 1487.99,1208.15 1488.58,1211.02 1489.17,1210.78 1489.75,1209.92 1490.34,1207.35 1490.93,1207.42 1491.51,1206.14 1492.1,1207.81 1492.69,1206.86 1493.27,1208.19 1493.86,1208.13 1494.45,1209.52 1495.03,1209.51 1495.62,1208.27 1496.2,1211.86 1496.79,1210.82 1497.38,1210.82 1497.96,1212.24 1498.55,1213.34 1499.14,1213.07 1499.72,1215.57 1500.31,1212.78 1500.9,1212.82 1501.48,1212.79 1502.07,1212.97 1502.65,1214.16 1503.24,1214.09 1503.83,1211.11 1504.41,1212.03 1505,1212.11 1505.59,1209.7 1506.17,1209.75 1506.76,1209.43 1507.35,1209.12 1507.93,1210.49 1508.52,1210.73 1509.11,1210.4 1509.69,1210.37 1510.28,1209.16 1510.86,1212.83 1511.45,1211.52 1512.04,1215.16 1512.62,1215.08 1513.21,1215.82 1513.8,1216.58 1514.38,1213.57 1514.97,1213.39 1515.56,1210.67 1516.14,1210.56 1516.73,1213 1517.32,1211.57 1517.9,1212.4 1518.49,1213.32 1519.07,1213.03 1519.66,1211.47 1520.25,1210.01 1520.83,1209.91 1521.42,1210.28 1522.01,1210.48 1522.59,1206.8 1523.18,1205.57 1523.77,1203.17 1524.35,1206.09 1524.94,1205.11 1525.52,1207.71 1526.11,1207.71 1526.7,1208.86 1527.28,1209.13 1527.87,1210.37 1528.46,1211.39 1529.04,1211.56 1529.63,1211.74 1530.22,1215.6 1530.8,1215.2 1531.39,1213.7 1531.98,1213.24 1532.56,1214.22 1533.15,1216.72 1533.73,1216.43 1534.32,1218.53 1534.91,1215.23 1535.49,1215.31 1536.08,1215.12 1536.67,1213.75 1537.25,1214.68 1537.84,1212.18 1538.43,1209.26 1539.01,1208.88 1539.6,1208.78 1540.19,1208.78 1540.77,1212.35 1541.36,1213.19 1541.94,1210.66 1542.53,1212.11 1543.12,1212.13 1543.7,1210.89 1544.29,1209.54 1544.88,1211.84 1545.46,1214.03 1546.05,1213.61 1546.64,1213.43 1547.22,1214.6 1547.81,1214.28 1548.4,1215.31 1548.98,1214.73 1549.57,1215.87 1550.15,1214.26 1550.74,1212.91 1551.33,1211.35 1551.91,1211.05 1552.5,1209.65 1553.09,1208.45 1553.67,1210.88 1554.26,1210.79 1554.85,1209.58 1555.43,1208.16 1556.02,1208.3 1556.6,1207.02 1557.19,1204.48 1557.78,1204.83 1558.36,1204.01 1558.95,1201.74 1559.54,1202.17 1560.12,1202.6 1560.71,1201.63 1561.3,1202.98 1561.88,1204.73 1562.47,1205.11 1563.06,1204.19 1563.64,1209.75 1564.23,1209.55 1564.81,1208.4 1565.4,1208.43 1565.99,1207.47 1566.57,1206.38 1567.16,1205.57 1567.75,1207.34 1568.33,1209.88 1568.92,1205.84 1569.51,1207.27 1570.09,1206.1 1570.68,1206.24 1571.27,1205.27 1571.85,1205.4 1572.44,1205.64 1573.02,1205.97 1573.61,1203.79 1574.2,1204.18 1574.78,1204.57 1575.37,1208.81 1575.96,1210.1 1576.54,1211.38 1577.13,1210.23 1577.72,1209.31 1578.3,1209.31 1578.89,1207.98 1579.47,1209.48 1580.06,1210.76 1580.65,1208.19 1581.23,1209.77 1581.82,1208.54 1582.41,1208.78 1582.99,1208.09 1583.58,1208.17 1584.17,1207.36 1584.75,1207.67 1585.34,1207.87 1585.93,1209.5 1586.51,1211.1 1587.1,1208.91 1587.68,1209.23 1588.27,1208.19 1588.86,1206.04 1589.44,1205.25 1590.03,1204.4 1590.62,1202.1 1591.2,1201.36 1591.79,1204.22 1592.38,1207.05 1592.96,1207.18 1593.55,1209.94 1594.14,1211.16 1594.72,1211.26 1595.31,1211.03 1595.89,1212.98 1596.48,1216.46 1597.07,1216.24 1597.65,1216.95 1598.24,1216.91 1598.83,1215.52 1599.41,1212.84 1600,1210.46 1600.59,1207.72 1601.17,1209.21 1601.76,1206.75 1602.34,1206.63 1602.93,1206.84 1603.52,1209.74 1604.1,1206.1 1604.69,1203.78 1605.28,1205.35 1605.86,1204.5 1606.45,1205.9 1607.04,1206.1 1607.62,1207.69 1608.21,1210.34 1608.8,1210.27 1609.38,1211.33 1609.97,1211.16 1610.55,1210.01 1611.14,1209.78 1611.73,1209.93 1612.31,1207.56 1612.9,1207.78 1613.49,1205.05 1614.07,1205.25 1614.66,1207.83 1615.25,1207.93 1615.83,1208.17 1616.42,1207.09 1617.01,1206.97 1617.59,1209.72 1618.18,1212.24 1618.76,1212.22 1619.35,1212.06 1619.94,1209.45 1620.52,1208.35 1621.11,1208.4 1621.7,1208.12 1622.28,1208.16 1622.87,1210.77 1623.46,1210.52 1624.04,1207.84 1624.63,1205.18 1625.22,1205.52 1625.8,1204.29 1626.39,1203.3 1626.97,1202.26 1627.56,1203.85 1628.15,1205.52 1628.73,1207.04 1629.32,1208.71 1629.91,1212.67 1630.49,1215.2 1631.08,1212.5 1631.67,1213.71 1632.25,1213.47 1632.84,1213.41 1633.42,1214.48 1634.01,1213.88 1634.6,1213.9 1635.18,1212.53 1635.77,1212.47 1636.36,1209.86 1636.94,1208.43 1637.53,1209.82 1638.12,1209.85 1638.7,1211.53 1639.29,1210.46 1639.88,1206.44 1640.46,1205.43 1641.05,1208.4 1641.63,1208.6 1642.22,1207.63 1642.81,1207.63 1643.39,1208.87 1643.98,1208.87 1644.57,1210.14 1645.15,1210.33 1645.74,1210.45 1646.33,1210.35 1646.91,1209.32 1647.5,1210.76 1648.09,1211.91 1648.67,1211.59 1649.26,1210.13 1649.84,1211.25 1650.43,1212.5 1651.02,1212.34 1651.6,1210.97 1652.19,1207.29 1652.78,1208.85 1653.36,1208.9 1653.95,1209.13 1654.54,1207.84 1655.12,1210.42 1655.71,1208.25 1656.29,1207.15 1656.88,1210.88 1657.47,1212.2 1658.05,1212.04 1658.64,1211.83 1659.23,1211.61 1659.81,1211.45 1660.4,1212.74 1660.99,1217.48 1661.57,1214.46 1662.16,1214.27 1662.75,1215.23 1663.33,1216.19 1663.92,1219.47 1664.5,1219.16 1665.09,1218.71 1665.68,1215.89 1666.26,1216.67 1666.85,1216.43 1667.44,1216.19 1668.02,1215.73 1668.61,1216.11 1669.2,1215.42 1669.78,1215.12 1670.37,1214.96 1670.96,1213.49 1671.54,1210.88 1672.13,1209.61 1672.71,1208.34 1673.3,1209.76 1673.89,1209.88 1674.47,1210.18 1675.06,1211.53 1675.65,1212.6 1676.23,1208.77 1676.82,1208.68 1677.41,1207.47 1677.99,1206.5 1678.58,1207.88 1679.17,1208.04 1679.75,1207.75 1680.34,1209.09 1680.92,1207.9 1681.51,1206.56 1682.1,1209.38 1682.68,1210.71 1683.27,1210.57 1683.86,1207.89 1684.44,1209.26 1685.03,1205.52 1685.62,1206.93 1686.2,1205.94 1686.79,1205.06 1687.37,1207.87 1687.96,1205.46 1688.55,1207.08 1689.13,1207.21 1689.72,1210.2 1690.31,1207.69 1690.89,1209.21 1691.48,1208.95 1692.07,1209.02 1692.65,1207.9 1693.24,1206.82 1693.83,1208.39 1694.41,1211.08 1695,1207.16 1695.58,1207.34 1696.17,1207.27 1696.76,1204.9 1697.34,1208.86 1697.93,1210.07 1698.52,1208.73 1699.1,1206.3 1699.69,1207.72 1700.28,1204.23 1700.86,1203.33 1701.45,1205.15 1702.04,1205.24 1702.62,1205.81 1703.21,1206.14 1703.79,1203.84 1704.38,1204.21 1704.97,1206.01 1705.55,1202.64 1706.14,1203.07 1706.73,1207.05 1707.31,1208.64 1707.9,1207.42 1708.49,1206.2 1709.07,1206.37 1709.66,1205.37 1710.24,1205.85 1710.83,1206.09 1711.42,1208.86 1712,1211.49 1712.59,1211.41 1713.18,1210.13 1713.76,1210.06 1714.35,1208.89 1714.94,1208.88 1715.52,1206.28 1716.11,1207.95 1716.7,1207.97 1717.28,1206.35 1717.87,1206.57 1718.45,1204.45 1719.04,1206.21 1719.63,1205.18 1720.21,1205.57 1720.8,1205.89 1721.39,1204.81 1721.97,1203.95 1722.56,1203.11 1723.15,1203.72 1723.73,1201.7 1724.32,1202.29 1724.91,1206.48 1725.49,1206.76 1726.08,1206.77 1726.66,1208.47 1727.25,1208.23 1727.84,1212.14 1728.42,1210.9 1729.01,1209.6 1729.6,1210.87 1730.18,1213.5 1730.77,1214.57 1731.36,1214.7 1731.94,1213.55 1732.53,1211.94 1733.11,1209.45 1733.7,1209.62 1734.29,1211.96 1734.87,1211.92 1735.46,1213.03 1736.05,1213 1736.63,1209.16 1737.22,1209.12 1737.81,1210.57 1738.39,1211.92 1738.98,1212.05 1739.57,1214.63 1740.15,1213 1740.74,1212.93 1741.32,1214.17 1741.91,1213.87 1742.5,1212.32 1743.08,1211.97 1743.67,1210.69 1744.26,1210.81 1744.84,1209.85 1745.43,1211.35 1746.02,1211.35 1746.6,1211.27 1747.19,1211.4 1747.78,1215.13 1748.36,1215.95 1748.95,1211.91 1749.53,1209.19 1750.12,1210.73 1750.71,1211.67 1751.29,1210.49 1751.88,1211.64 1752.47,1212.47 1753.05,1213.38 1753.64,1213.42 1754.23,1214.56 1754.81,1214.2 1755.4,1212.8 1755.99,1212.77 1756.57,1212.64 1757.16,1214.01 1757.74,1213.75 1758.33,1213.68 1758.92,1214.51 1759.5,1213.17 1760.09,1213.21 1760.68,1214.22 1761.26,1215.36 1761.85,1215.39 1762.44,1215.13 1763.02,1214.83 1763.61,1214.42 1764.19,1214.22 1764.78,1212.78 1765.37,1212.53 1765.95,1214.86 1766.54,1214.54 1767.13,1215.7 1767.71,1214.16 1768.3,1212.74 1768.89,1212.52 1769.47,1216.22 1770.06,1213.23 1770.65,1213.03 1771.23,1212.69 1771.82,1212.65 1772.4,1209.91 1772.99,1208.69 1773.58,1208.5 1774.16,1207.28 1774.75,1207.37 1775.34,1206.51 1775.92,1206.72 1776.51,1207.07 1777.1,1204.7 1777.68,1206.23 1778.27,1206.45 1778.86,1201.69 1779.44,1203.44 1780.03,1203.75 1780.61,1201.47 1781.2,1202.03 1781.79,1202.43 1782.37,1204.35 1782.96,1203.11 1783.55,1202.41 1784.13,1204.07 1784.72,1204.44 1785.31,1205.92 1785.89,1211.25 1786.48,1212.19 1787.06,1215.76 1787.65,1216.76 1788.24,1217.63 1788.82,1218.22 1789.41,1219.02 1790,1218.53 1790.58,1218.2 1791.17,1218.58 1791.76,1218.17 1792.34,1217.86 1792.93,1217.76 1793.52,1217.33 1794.1,1216.97 1794.69,1211.31 1795.27,1211.11 1795.86,1212.21 1796.45,1211.03 1797.03,1211.12 1797.62,1213.38 1798.21,1215.54 1798.79,1211.71 1799.38,1211.7 1799.97,1212.9 1800.55,1212.76 1801.14,1211.26 1801.73,1209.92 1802.31,1204.74 1802.9,1202.25 1803.48,1201.74 1804.07,1203.43 1804.66,1207.38 1805.24,1206.26 1805.83,1206.44 1806.42,1206.56 1807,1209.1 1807.59,1210.56 1808.18,1211.72 1808.76,1211.51 1809.35,1210.1 1809.94,1210.32 1810.52,1208.77 1811.11,1211.57 1811.69,1211.6 1812.28,1212.72 1812.87,1209.97 1813.45,1209.99 1814.04,1213.39 1814.63,1211.79 1815.21,1215.25 1815.8,1217.44 1816.39,1217.05 1816.97,1216.57 1817.56,1217.5 1818.14,1215.98 1818.73,1215.65 1819.32,1215.2 1819.9,1215.04 1820.49,1216.02 1821.08,1211.65 1821.66,1210.31 1822.25,1210.48 1822.84,1209.28 1823.42,1209.24 1824.01,1209.03 1824.6,1210.57 1825.18,1207.93 1825.77,1207.85 1826.35,1210.47 1826.94,1207.87 1827.53,1208.08 1828.11,1208.11 1828.7,1210.9 1829.29,1213.24 1829.87,1211.65 1830.46,1210.22 1831.05,1210.23 1831.63,1210.47 1832.22,1214.21 1832.81,1215.18 1833.39,1213.56 1833.98,1218.54 1834.56,1218.15 1835.15,1216.26 1835.74,1214.62 1836.32,1213.05 1836.91,1212.61 1837.5,1211.46 1838.08,1208.89 1838.67,1207.37 1839.26,1207.8 1839.84,1209.08 1840.43,1207.58 1841.01,1206.55 1841.6,1209.21 1842.19,1211.88 1842.77,1208.04 1843.36,1207.02 1843.95,1208.5 1844.53,1207.27 1845.12,1205.97 1845.71,1209.66 1846.29,1210.91 1846.88,1212.12 1847.47,1213.35 1848.05,1212.03 1848.64,1209.45 1849.22,1207.84 1849.81,1208 1850.4,1208.02 1850.98,1211.66 1851.57,1211.27 1852.16,1211.26 1852.74,1209.9 1853.33,1211.43 1853.92,1215.01 1854.5,1214.47 1855.09,1212.23 1855.68,1213.38 1856.26,1211.69 1856.85,1211.62 1857.43,1211.77 1858.02,1211.49 1858.61,1211.38 1859.19,1211.42 1859.78,1211.27 1860.37,1211.29 1860.95,1213.61 1861.54,1212.25 1862.13,1209.61 1862.71,1207.15 1863.3,1209.98 1863.88,1212.52 1864.47,1212.32 1865.06,1213.82 1865.64,1213.65 1866.23,1212.12 1866.82,1212.17 1867.4,1211.99 1867.99,1211.82 1868.58,1210.8 1869.16,1208.08 1869.75,1208.36 1870.34,1208.77 1870.92,1209.16 1871.51,1211.81 1872.09,1211.77 1872.68,1209.21 1873.27,1210.56 1873.85,1208.09 1874.44,1208.2 1875.03,1208.05 1875.61,1208.28 1876.2,1207.07 1876.79,1205.79 1877.37,1207.2 1877.96,1208.75 1878.55,1207.45 1879.13,1208.78 1879.72,1208.96 1880.3,1208.99 1880.89,1209.17 1881.48,1211.63 1882.06,1211.58 1882.65,1211.44 1883.24,1213.76 1883.82,1213.82 1884.41,1211.08 1885,1211.03 1885.58,1209.69 1886.17,1209.38 1886.76,1207.9 1887.34,1207.93 1887.93,1208.24 1888.51,1209.42 1889.1,1209.42 1889.69,1208.09 1890.27,1208.01 1890.86,1208.01 1891.45,1207.91 1892.03,1209.2 1892.62,1209.08 1893.21,1207.94 1893.79,1210.71 1894.38,1211.93 1894.96,1213.03 1895.55,1210.45 1896.14,1211.73 1896.72,1211.49 1897.31,1212.35 1897.9,1211.11 1898.48,1209.43 1899.07,1209.2 1899.66,1210.27 1900.24,1208.77 1900.83,1211.38 1901.42,1211.33 1902,1212.49 1902.59,1211.34 1903.17,1210 1903.76,1210.07 1904.35,1210.05 1904.93,1211.23 1905.52,1209.77 1906.11,1207.27 1906.69,1210.06 1907.28,1214.89 1907.87,1215.6 1908.45,1215.17 1909.04,1214.83 1909.63,1217.04 1910.21,1214.23 1910.8,1214.13 1911.38,1213.84 1911.97,1212.22 1912.56,1211.98 1913.14,1206.74 1913.73,1207.08 1914.32,1207.11 1914.9,1206.09 1915.49,1208.94 1916.08,1211.66 1916.66,1210.51 1917.25,1211.7 1917.83,1211.63 1918.42,1207.76 1919.01,1207.98 1919.59,1209.42 1920.18,1213.32 1920.77,1213.17 1921.35,1214.27 1921.94,1215.45 1922.53,1215.35 1923.11,1214.99 1923.7,1213.81 1924.29,1211.12 1924.87,1212.23 1925.46,1213.08 1926.04,1212.75 1926.63,1212.5 1927.22,1211.09 1927.8,1211.07 1928.39,1212.4 1928.98,1213.58 1929.56,1213.67 1930.15,1209.47 1930.74,1212.13 1931.32,1211.9 1931.91,1211.99 1932.5,1209.44 1933.08,1211.12 1933.67,1208.46 1934.25,1208.56 1934.84,1208.45 1935.43,1208.22 1936.01,1212.16 1936.6,1210.81 1937.19,1213.48 1937.77,1210.77 1938.36,1207.05 1938.95,1205.75 1939.53,1202.1 1940.12,1202.92 1940.71,1204.68 1941.29,1207.49 1941.88,1206.3 1942.46,1206.59 1943.05,1207.67 1943.64,1206.54 1944.22,1207.82 1944.81,1210.21 1945.4,1207.92 1945.98,1206.51 1946.57,1206.86 1947.16,1208.12 1947.74,1208.31 1948.33,1208.37 1948.91,1212.18 1949.5,1211.96 1950.09,1210.41 1950.67,1210.62 1951.26,1210.71 1951.85,1209.37 1952.43,1208.03 1953.02,1209.41 1953.61,1207.98 1954.19,1209.23 1954.78,1207.8 1955.37,1206.95 1955.95,1207.17 1956.54,1207.52 1957.12,1207.74 1957.71,1207.66 1958.3,1208.86 1958.88,1208.75 1959.47,1207.84 1960.06,1208.03 1960.64,1209.35 1961.23,1209.42 1961.82,1209.64 1962.4,1205.84 1962.99,1204.92 1963.58,1207.78 1964.16,1206.88 1964.75,1206.93 1965.33,1207.01 1965.92,1208.31 1966.51,1207.24 1967.09,1206.07 1967.68,1208.9 1968.27,1208.94 1968.85,1210.35 1969.44,1210.37 1970.03,1210.22 1970.61,1207.67 1971.2,1207.77 1971.78,1209.18 1972.37,1208.08 1972.96,1209.29 1973.54,1209.32 1974.13,1209.11 1974.72,1210.43 1975.3,1207.67 1975.89,1207.9 1976.48,1206.54 1977.06,1209.09 1977.65,1207.93 1978.24,1209.19 1978.82,1207.79 1979.41,1206.58 1979.99,1210.62 1980.58,1210.48 1981.17,1210.56 1981.75,1210.51 1982.34,1210.43 1982.93,1210.69 1983.51,1212 1984.1,1205.61 1984.69,1208.46 1985.27,1204.67 1985.86,1205.09 1986.45,1202.77 1987.03,1205.78 1987.62,1204.67 1988.2,1208.71 1988.79,1210.18 1989.38,1211.3 1989.96,1213.65 1990.55,1212.12 1991.14,1212.99 1991.72,1215.42 1992.31,1215.02 1992.9,1211.01 1993.48,1212.27 1994.07,1214.41 1994.65,1211.77 1995.24,1210.47 1995.83,1211.81 1996.41,1211.72 1997,1212.88 1997.59,1213.93 1998.17,1214.98 1998.76,1214.95 1999.35,1211.93 1999.93,1212.81 2000.52,1211.31 2001.11,1210.06 2001.69,1211.18 2002.28,1209.85 2002.86,1207.39 2003.45,1204.99 2004.04,1203.74 2004.62,1202.8 2005.21,1204.61 2005.8,1203.73 2006.38,1201.66 2006.97,1204.51 2007.56,1204.79 2008.14,1201.12 2008.73,1205.52 2009.32,1203.14 2009.9,1204.49 2010.49,1204.94 2011.07,1205.14 2011.66,1205.4 2012.25,1208.24 2012.83,1209.75 2013.42,1207.15 2014.01,1206.09 2014.59,1208.96 2015.18,1212.8 2015.77,1214.16 2016.35,1208.63 2016.94,1207.61 2017.53,1211.39 2018.11,1211.32 2018.7,1208.89 2019.28,1210.39 2019.87,1209.14 2020.46,1207.92 2021.04,1206.88 2021.63,1210.74 2022.22,1210.51 2022.8,1209.26 2023.39,1213.07 2023.98,1211.85 2024.56,1211.98 2025.15,1209.64 2025.73,1210.97 2026.32,1210.92 2026.91,1210.84 2027.49,1213.41 2028.08,1212.06 2028.67,1211.73 2029.25,1211.29 2029.84,1210.04 2030.43,1208.91 2031.01,1212.72 2031.6,1212.5 2032.19,1217.39 2032.77,1217.02 2033.36,1215.36 2033.94,1216.53 2034.53,1216.14 2035.12,1216.98 2035.7,1217.82 2036.29,1217.56 2036.88,1215.97 2037.46,1212.04 2038.05,1211.87 2038.64,1213.04 2039.22,1212.63 2039.81,1211.15 2040.4,1211.16 2040.98,1207.36 2041.57,1206.2 2042.15,1206.42 2042.74,1209.26 2043.33,1210.58 2043.91,1212.06 2044.5,1210.92 2045.09,1209.61 2045.67,1208.76 2046.26,1208.89 2046.85,1206.42 2047.43,1206.54 2048.02,1205.53 2048.6,1205.82 2049.19,1205.97 2049.78,1206.37 2050.36,1205.55 2050.95,1204.5 2051.54,1201.15 2052.12,1199.14 2052.71,1202.08 2053.3,1203.89 2053.88,1202.96 2054.47,1202.07 2055.06,1201.24 2055.64,1201.56 2056.23,1203.27 2056.81,1204.73 2057.4,1204.94 2057.99,1204.07 2058.57,1203.07 2059.16,1204.71 2059.75,1205.1 2060.33,1206.71 2060.92,1205.7 2061.51,1206.06 2062.09,1206.58 2062.68,1205.63 2063.27,1203.51 2063.85,1204.06 2064.44,1200.6 2065.02,1202.18 2065.61,1205.05 2066.2,1207.99 2066.78,1206.81 2067.37,1208.07 2067.96,1209.3 2068.54,1208.28 2069.13,1208.58 2069.72,1211.42 2070.3,1211.17 2070.89,1212.56 2071.48,1212.33 2072.06,1213.63 2072.65,1214.49 2073.23,1214.04 2073.82,1211.27 2074.41,1211.22 2074.99,1212.39 2075.58,1213.56 2076.17,1214.36 2076.75,1214.08 2077.34,1216.47 2077.93,1217.26 2078.51,1216.79 2079.1,1219.2 2079.68,1218.79 2080.27,1217 2080.86,1216.56 2081.44,1219.71 2082.03,1216.81 2082.62,1215.4 2083.2,1215.27 2083.79,1215.29 2084.38,1212.59 2084.96,1212.4 2085.55,1210.05 2086.14,1212.48 2086.72,1213.86 2087.31,1215.01 2087.89,1213.6 2088.48,1214.59 2089.07,1216.97 2089.65,1216.72 2090.24,1213.93 2090.83,1213.9 2091.41,1213.7 2092,1213.48 2092.59,1213.23 2093.17,1214.34 2093.76,1212.83 2094.35,1211.51 2094.93,1210 2095.52,1208.75 2096.1,1207.27 2096.69,1207.44 2097.28,1207.52 2097.86,1207.82 2098.45,1209.18 2099.04,1210.3 2099.62,1209.11 2100.21,1209.1 2100.8,1209.25 2101.38,1210.37 2101.97,1209.18 2102.55,1209.54 2103.14,1210.7 2103.73,1210.68 2104.31,1209.34 2104.9,1210.57 2105.49,1212.99 2106.07,1211.41 2106.66,1211.21 2107.25,1209.99 2107.83,1208.66 2108.42,1210 2109.01,1209.96 2109.59,1208.84 2110.18,1206.34 2110.76,1206.65 2111.35,1206.74 2111.94,1206.67 2112.52,1209.19 2113.11,1208.21 2113.7,1209.67 2114.28,1209.29 2114.87,1204.3 2115.46,1203.33 2116.04,1203.78 2116.63,1203.95 2117.22,1206.52 2117.8,1209.03 2118.39,1211.64 2118.97,1211.59 2119.56,1210.35 2120.15,1210.25 2120.73,1210.26 2121.32,1209.18 2121.91,1210.61 2122.49,1209.51 2123.08,1208.56 2123.67,1207.39 2124.25,1207.42 2124.84,1207.58 2125.42,1207.6 2126.01,1208.84 2126.6,1211.38 2127.18,1211.34 2127.77,1212.55 2128.36,1213.6 2128.94,1215.61 2129.53,1215.43 2130.12,1214.05 2130.7,1211.42 2131.29,1211.14 2131.88,1207.27 2132.46,1207.39 2133.05,1207.44 2133.63,1207.81 2134.22,1210.25 2134.81,1214.19 2135.39,1213.04 2135.98,1211.8 2136.57,1212.92 2137.15,1212.66 2137.74,1217.38 2138.33,1215.76 2138.91,1213.94 2139.5,1214.78 2140.09,1215.76 2140.67,1216.57 2141.26,1214.94 2141.84,1213.69 2142.43,1211.08 2143.02,1210.89 2143.6,1210.75 2144.19,1209.41 2144.78,1209.26 2145.36,1209.05 2145.95,1207.4 2146.54,1207.39 2147.12,1206.27 2147.71,1205.2 2148.3,1206.53 2148.88,1206.86 2149.47,1208.17 2150.05,1208.2 2150.64,1209.68 2151.23,1208.39 2151.81,1208.46 2152.4,1208.72 2152.99,1207.48 2153.57,1208.78 2154.16,1209.08 2154.75,1210.2 2155.33,1210.21 2155.92,1210.18 2156.5,1207.57 2157.09,1209.96 2157.68,1207.53 2158.26,1207.88 \"/>\n<path clip-path=\"url(#clip812)\" d=\"M986.025 1210.48 L986.612 1210.48 L987.198 1210.48 L987.785 1210.48 L988.371 1210.48 L988.957 1210.48 L989.544 1210.48 L990.13 1210.48 L990.717 1210.48 L991.303 1210.48 L991.889 1210.48 L992.476 1210.48 L993.062 1210.48 L993.649 1210.48 L994.235 1210.48 L994.822 1210.48 L995.408 1210.48 L995.994 1210.48 L996.581 1210.48 L997.167 1210.48 L997.754 1210.48 L998.34 1210.48 L998.926 1210.48 L999.513 1210.48 L1000.1 1210.48 L1000.69 1210.48 L1001.27 1210.48 L1001.86 1210.48 L1002.44 1210.48 L1003.03 1210.48 L1003.62 1210.48 L1004.2 1210.48 L1004.79 1210.48 L1005.38 1210.48 L1005.96 1210.48 L1006.55 1210.48 L1007.14 1210.48 L1007.72 1210.48 L1008.31 1210.48 L1008.9 1210.48 L1009.48 1210.48 L1010.07 1210.48 L1010.65 1210.48 L1011.24 1210.48 L1011.83 1210.48 L1012.41 1210.48 L1013 1210.48 L1013.59 1210.48 L1014.17 1210.48 L1014.76 1210.48 L1015.35 1210.48 L1015.93 1210.48 L1016.52 1210.48 L1017.11 1210.48 L1017.69 1210.48 L1018.28 1210.48 L1018.86 1210.48 L1019.45 1210.48 L1020.04 1210.48 L1020.62 1210.48 L1021.21 1210.48 L1021.8 1210.48 L1022.38 1210.48 L1022.97 1210.48 L1023.56 1210.48 L1024.14 1210.48 L1024.73 1210.48 L1025.32 1210.48 L1025.9 1210.48 L1026.49 1210.48 L1027.07 1210.48 L1027.66 1210.48 L1028.25 1210.48 L1028.83 1210.48 L1029.42 1210.48 L1030.01 1210.48 L1030.59 1210.48 L1031.18 1210.48 L1031.77 1210.48 L1032.35 1210.48 L1032.94 1210.48 L1033.52 1210.48 L1034.11 1210.48 L1034.7 1210.48 L1035.28 1210.48 L1035.87 1210.48 L1036.46 1210.48 L1037.04 1210.48 L1037.63 1210.48 L1038.22 1210.48 L1038.8 1210.48 L1039.39 1210.48 L1039.98 1210.48 L1040.56 1210.48 L1041.15 1210.48 L1041.73 1210.48 L1042.32 1210.48 L1042.91 1210.48 L1043.49 1210.48 L1044.08 1210.48 L1044.67 1210.48 L1045.25 1210.48 L1045.84 1210.48 L1046.43 1210.48 L1047.01 1210.48 L1047.6 1210.48 L1048.19 1210.48 L1048.77 1210.48 L1049.36 1210.48 L1049.94 1210.48 L1050.53 1210.48 L1051.12 1210.48 L1051.7 1210.48 L1052.29 1210.48 L1052.88 1210.48 L1053.46 1210.48 L1054.05 1210.48 L1054.64 1210.48 L1055.22 1210.48 L1055.81 1210.48 L1056.39 1210.48 L1056.98 1210.48 L1057.57 1210.48 L1058.15 1210.48 L1058.74 1210.48 L1059.33 1210.48 L1059.91 1210.48 L1060.5 1210.48 L1061.09 1210.48 L1061.67 1210.48 L1062.26 1210.48 L1062.85 1210.48 L1063.43 1210.48 L1064.02 1210.48 L1064.6 1210.48 L1065.19 1210.48 L1065.78 1210.48 L1066.36 1210.48 L1066.95 1210.48 L1067.54 1210.48 L1068.12 1210.48 L1068.71 1210.48 L1069.3 1210.48 L1069.88 1210.48 L1070.47 1210.48 L1071.06 1210.48 L1071.64 1210.48 L1072.23 1210.48 L1072.81 1210.48 L1073.4 1210.48 L1073.99 1210.48 L1074.57 1210.48 L1075.16 1210.48 L1075.75 1210.48 L1076.33 1210.48 L1076.92 1210.48 L1077.51 1210.48 L1078.09 1210.48 L1078.68 1210.48 L1079.26 1210.48 L1079.85 1210.48 L1080.44 1210.48 L1081.02 1210.48 L1081.61 1210.48 L1082.2 1210.48 L1082.78 1210.48 L1083.37 1210.48 L1083.96 1210.48 L1084.54 1210.48 L1085.13 1210.48 L1085.72 1210.48 L1086.3 1210.48 L1086.89 1210.48 L1087.47 1210.48 L1088.06 1210.48 L1088.65 1210.48 L1089.23 1210.48 L1089.82 1210.48 L1090.41 1210.48 L1090.99 1210.48 L1091.58 1210.48 L1092.17 1210.48 L1092.75 1210.48 L1093.34 1210.48 L1093.93 1210.48 L1094.51 1210.48 L1095.1 1210.48 L1095.68 1210.48 L1096.27 1210.48 L1096.86 1210.48 L1097.44 1210.48 L1098.03 1210.48 L1098.62 1210.48 L1099.2 1210.48 L1099.79 1210.48 L1100.38 1210.48 L1100.96 1210.48 L1101.55 1210.48 L1102.14 1210.48 L1102.72 1210.48 L1103.31 1210.48 L1103.89 1210.48 L1104.48 1210.48 L1105.07 1210.48 L1105.65 1210.48 L1106.24 1210.48 L1106.83 1210.48 L1107.41 1210.48 L1108 1210.48 L1108.59 1210.48 L1109.17 1210.48 L1109.76 1210.48 L1110.34 1210.48 L1110.93 1210.48 L1111.52 1210.48 L1112.1 1210.48 L1112.69 1210.48 L1113.28 1210.48 L1113.86 1210.48 L1114.45 1210.48 L1115.04 1210.48 L1115.62 1210.48 L1116.21 1210.48 L1116.8 1210.48 L1117.38 1210.48 L1117.97 1210.48 L1118.55 1210.48 L1119.14 1210.48 L1119.73 1210.48 L1120.31 1210.48 L1120.9 1210.48 L1121.49 1210.48 L1122.07 1210.48 L1122.66 1210.48 L1123.25 1210.48 L1123.83 1210.48 L1124.42 1210.48 L1125.01 1210.48 L1125.59 1210.48 L1126.18 1210.48 L1126.76 1210.48 L1127.35 1210.48 L1127.94 1210.48 L1128.52 1210.48 L1129.11 1210.48 L1129.7 1210.48 L1130.28 1210.48 L1130.87 1210.48 L1131.46 1210.48 L1132.04 1210.48 L1132.63 1210.48 L1133.21 1210.48 L1133.8 1210.48 L1134.39 1210.48 L1134.97 1210.48 L1135.56 1210.48 L1136.15 1210.48 L1136.73 1210.48 L1137.32 1210.48 L1137.91 1210.48 L1138.49 1210.48 L1139.08 1210.48 L1139.67 1210.48 L1140.25 1210.48 L1140.84 1210.48 L1141.42 1210.48 L1142.01 1210.48 L1142.6 1210.48 L1143.18 1210.48 L1143.77 1210.48 L1144.36 1210.48 L1144.94 1210.48 L1145.53 1210.48 L1146.12 1210.48 L1146.7 1210.48 L1147.29 1210.48 L1147.88 1210.48 L1148.46 1210.48 L1149.05 1210.48 L1149.63 1210.48 L1150.22 1210.48 L1150.81 1210.48 L1151.39 1210.48 L1151.98 1210.48 L1152.57 1210.48 L1153.15 1210.48 L1153.74 1210.48 L1154.33 1210.48 L1154.91 1210.48 L1155.5 1210.48 L1156.09 1210.48 L1156.67 1210.48 L1157.26 1210.48 L1157.84 1210.48 L1158.43 1210.48 L1159.02 1210.48 L1159.6 1210.48 L1160.19 1210.48 L1160.78 1210.48 L1161.36 1210.48 L1161.95 1210.48 L1162.54 1210.48 L1163.12 1210.48 L1163.71 1210.48 L1164.29 1210.48 L1164.88 1210.48 L1165.47 1210.48 L1166.05 1210.48 L1166.64 1210.48 L1167.23 1210.48 L1167.81 1210.48 L1168.4 1210.48 L1168.99 1210.48 L1169.57 1210.48 L1170.16 1210.48 L1170.75 1210.48 L1171.33 1210.48 L1171.92 1210.48 L1172.5 1210.48 L1173.09 1210.48 L1173.68 1210.48 L1174.26 1210.48 L1174.85 1210.48 L1175.44 1210.48 L1176.02 1210.48 L1176.61 1210.48 L1177.2 1210.48 L1177.78 1210.48 L1178.37 1210.48 L1178.96 1210.48 L1179.54 1210.48 L1180.13 1210.48 L1180.71 1210.48 L1181.3 1210.48 L1181.89 1210.48 L1182.47 1210.48 L1183.06 1210.48 L1183.65 1210.48 L1184.23 1210.48 L1184.82 1210.48 L1185.41 1210.48 L1185.99 1210.48 L1186.58 1210.48 L1187.16 1210.48 L1187.75 1210.48 L1188.34 1210.48 L1188.92 1210.48 L1189.51 1210.48 L1190.1 1210.48 L1190.68 1210.48 L1191.27 1210.48 L1191.86 1210.48 L1192.44 1210.48 L1193.03 1210.48 L1193.62 1210.48 L1194.2 1210.48 L1194.79 1210.48 L1195.37 1210.48 L1195.96 1210.48 L1196.55 1210.48 L1197.13 1210.48 L1197.72 1210.48 L1198.31 1210.48 L1198.89 1210.48 L1199.48 1210.48 L1200.07 1210.48 L1200.65 1210.48 L1201.24 1210.48 L1201.83 1210.48 L1202.41 1210.48 L1203 1210.48 L1203.58 1210.48 L1204.17 1210.48 L1204.76 1210.48 L1205.34 1210.48 L1205.93 1210.48 L1206.52 1210.48 L1207.1 1210.48 L1207.69 1210.48 L1208.28 1210.48 L1208.86 1210.48 L1209.45 1210.48 L1210.03 1210.48 L1210.62 1210.48 L1211.21 1210.48 L1211.79 1210.48 L1212.38 1210.48 L1212.97 1210.48 L1213.55 1210.48 L1214.14 1210.48 L1214.73 1210.48 L1215.31 1210.48 L1215.9 1210.48 L1216.49 1210.48 L1217.07 1210.48 L1217.66 1210.48 L1218.24 1210.48 L1218.83 1210.48 L1219.42 1210.48 L1220 1210.48 L1220.59 1210.48 L1221.18 1210.48 L1221.76 1210.48 L1222.35 1210.48 L1222.94 1210.48 L1223.52 1210.48 L1224.11 1210.48 L1224.7 1210.48 L1225.28 1210.48 L1225.87 1210.48 L1226.45 1210.48 L1227.04 1210.48 L1227.63 1210.48 L1228.21 1210.48 L1228.8 1210.48 L1229.39 1210.48 L1229.97 1210.48 L1230.56 1210.48 L1231.15 1210.48 L1231.73 1210.48 L1232.32 1210.48 L1232.91 1210.48 L1233.49 1210.48 L1234.08 1210.48 L1234.66 1210.48 L1235.25 1210.48 L1235.84 1210.48 L1236.42 1210.48 L1237.01 1210.48 L1237.6 1210.48 L1238.18 1210.48 L1238.77 1210.48 L1239.36 1210.48 L1239.94 1210.48 L1240.53 1210.48 L1241.11 1210.48 L1241.7 1210.48 L1242.29 1210.48 L1242.87 1210.48 L1243.46 1210.48 L1244.05 1210.48 L1244.63 1210.48 L1245.22 1210.48 L1245.81 1210.48 L1246.39 1210.48 L1246.98 1210.48 L1247.57 1210.48 L1248.15 1210.48 L1248.74 1210.48 L1249.32 1210.48 L1249.91 1210.48 L1250.5 1210.48 L1251.08 1210.48 L1251.67 1210.48 L1252.26 1210.48 L1252.84 1210.48 L1253.43 1210.48 L1254.02 1210.48 L1254.6 1210.48 L1255.19 1210.48 L1255.78 1210.48 L1256.36 1210.48 L1256.95 1210.48 L1257.53 1210.48 L1258.12 1210.48 L1258.71 1210.48 L1259.29 1210.48 L1259.88 1210.48 L1260.47 1210.48 L1261.05 1210.48 L1261.64 1210.48 L1262.23 1210.48 L1262.81 1210.48 L1263.4 1210.48 L1263.98 1210.48 L1264.57 1210.48 L1265.16 1210.48 L1265.74 1210.48 L1266.33 1210.48 L1266.92 1210.48 L1267.5 1210.48 L1268.09 1210.48 L1268.68 1210.48 L1269.26 1210.48 L1269.85 1210.48 L1270.44 1210.48 L1271.02 1210.48 L1271.61 1210.48 L1272.19 1210.48 L1272.78 1210.48 L1273.37 1210.48 L1273.95 1210.48 L1274.54 1210.48 L1275.13 1210.48 L1275.71 1210.48 L1276.3 1210.48 L1276.89 1210.48 L1277.47 1210.48 L1278.06 1210.48 L1278.65 1210.48 L1279.23 1210.48 L1279.82 1210.48 L1280.4 1210.48 L1280.99 1210.48 L1281.58 1210.48 L1282.16 1210.48 L1282.75 1210.48 L1283.34 1210.48 L1283.92 1210.48 L1284.51 1210.48 L1285.1 1210.48 L1285.68 1210.48 L1286.27 1210.48 L1286.86 1210.48 L1287.44 1210.48 L1288.03 1210.48 L1288.61 1210.48 L1289.2 1210.48 L1289.79 1210.48 L1290.37 1210.48 L1290.96 1210.48 L1291.55 1210.48 L1292.13 1210.48 L1292.72 1210.48 L1293.31 1210.48 L1293.89 1210.48 L1294.48 1210.48 L1295.06 1210.48 L1295.65 1210.48 L1296.24 1210.48 L1296.82 1210.48 L1297.41 1210.48 L1298 1210.48 L1298.58 1210.48 L1299.17 1210.48 L1299.76 1210.48 L1300.34 1210.48 L1300.93 1210.48 L1301.52 1210.48 L1302.1 1210.48 L1302.69 1210.48 L1303.27 1210.48 L1303.86 1210.48 L1304.45 1210.48 L1305.03 1210.48 L1305.62 1210.48 L1306.21 1210.48 L1306.79 1210.48 L1307.38 1210.48 L1307.97 1210.48 L1308.55 1210.48 L1309.14 1210.48 L1309.73 1210.48 L1310.31 1210.48 L1310.9 1210.48 L1311.48 1210.48 L1312.07 1210.48 L1312.66 1210.48 L1313.24 1210.48 L1313.83 1210.48 L1314.42 1210.48 L1315 1210.48 L1315.59 1210.48 L1316.18 1210.48 L1316.76 1210.48 L1317.35 1210.48 L1317.93 1210.48 L1318.52 1210.48 L1319.11 1210.48 L1319.69 1210.48 L1320.28 1210.48 L1320.87 1210.48 L1321.45 1210.48 L1322.04 1210.48 L1322.63 1210.48 L1323.21 1210.48 L1323.8 1210.48 L1324.39 1210.48 L1324.97 1210.48 L1325.56 1210.48 L1326.14 1210.48 L1326.73 1210.48 L1327.32 1210.48 L1327.9 1210.48 L1328.49 1210.48 L1329.08 1210.48 L1329.66 1210.48 L1330.25 1210.48 L1330.84 1210.48 L1331.42 1210.48 L1332.01 1210.48 L1332.6 1210.48 L1333.18 1210.48 L1333.77 1210.48 L1334.35 1210.48 L1334.94 1210.48 L1335.53 1210.48 L1336.11 1210.48 L1336.7 1210.48 L1337.29 1210.48 L1337.87 1210.48 L1338.46 1210.48 L1339.05 1210.48 L1339.63 1210.48 L1340.22 1210.48 L1340.8 1210.48 L1341.39 1210.48 L1341.98 1210.48 L1342.56 1210.48 L1343.15 1210.48 L1343.74 1210.48 L1344.32 1210.48 L1344.91 1210.48 L1345.5 1210.48 L1346.08 1210.48 L1346.67 1210.48 L1347.26 1210.48 L1347.84 1210.48 L1348.43 1210.48 L1349.01 1210.48 L1349.6 1210.48 L1350.19 1210.48 L1350.77 1210.48 L1351.36 1210.48 L1351.95 1210.48 L1352.53 1210.48 L1353.12 1210.48 L1353.71 1210.48 L1354.29 1210.48 L1354.88 1210.48 L1355.47 1210.48 L1356.05 1210.48 L1356.64 1210.48 L1357.22 1210.48 L1357.81 1210.48 L1358.4 1210.48 L1358.98 1210.48 L1359.57 1210.48 L1360.16 1210.48 L1360.74 1210.48 L1361.33 1210.48 L1361.92 1210.48 L1362.5 1210.48 L1363.09 1210.48 L1363.68 1210.48 L1364.26 1210.48 L1364.85 1210.48 L1365.43 1210.48 L1366.02 1210.48 L1366.61 1210.48 L1367.19 1210.48 L1367.78 1210.48 L1368.37 1210.48 L1368.95 1210.48 L1369.54 1210.48 L1370.13 1210.48 L1370.71 1210.48 L1371.3 1210.48 L1371.88 1210.48 L1372.47 1210.48 L1373.06 1210.48 L1373.64 1210.48 L1374.23 1210.48 L1374.82 1210.48 L1375.4 1210.48 L1375.99 1210.48 L1376.58 1210.48 L1377.16 1210.48 L1377.75 1210.48 L1378.34 1210.48 L1378.92 1210.48 L1379.51 1210.48 L1380.09 1210.48 L1380.68 1210.48 L1381.27 1210.48 L1381.85 1210.48 L1382.44 1210.48 L1383.03 1210.48 L1383.61 1210.48 L1384.2 1210.48 L1384.79 1210.48 L1385.37 1210.48 L1385.96 1210.48 L1386.55 1210.48 L1387.13 1210.48 L1387.72 1210.48 L1388.3 1210.48 L1388.89 1210.48 L1389.48 1210.48 L1390.06 1210.48 L1390.65 1210.48 L1391.24 1210.48 L1391.82 1210.48 L1392.41 1210.48 L1393 1210.48 L1393.58 1210.48 L1394.17 1210.48 L1394.75 1210.48 L1395.34 1210.48 L1395.93 1210.48 L1396.51 1210.48 L1397.1 1210.48 L1397.69 1210.48 L1398.27 1210.48 L1398.86 1210.48 L1399.45 1210.48 L1400.03 1210.48 L1400.62 1210.48 L1401.21 1210.48 L1401.79 1210.48 L1402.38 1210.48 L1402.96 1210.48 L1403.55 1210.48 L1404.14 1210.48 L1404.72 1210.48 L1405.31 1210.48 L1405.9 1210.48 L1406.48 1210.48 L1407.07 1210.48 L1407.66 1210.48 L1408.24 1210.48 L1408.83 1210.48 L1409.42 1210.48 L1410 1210.48 L1410.59 1210.48 L1411.17 1210.48 L1411.76 1210.48 L1412.35 1210.48 L1412.93 1210.48 L1413.52 1210.48 L1414.11 1210.48 L1414.69 1210.48 L1415.28 1210.48 L1415.87 1210.48 L1416.45 1210.48 L1417.04 1210.48 L1417.63 1210.48 L1418.21 1210.48 L1418.8 1210.48 L1419.38 1210.48 L1419.97 1210.48 L1420.56 1210.48 L1421.14 1210.48 L1421.73 1210.48 L1422.32 1210.48 L1422.9 1210.48 L1423.49 1210.48 L1424.08 1210.48 L1424.66 1210.48 L1425.25 1210.48 L1425.83 1210.48 L1426.42 1210.48 L1427.01 1210.48 L1427.59 1210.48 L1428.18 1210.48 L1428.77 1210.48 L1429.35 1210.48 L1429.94 1210.48 L1430.53 1210.48 L1431.11 1210.48 L1431.7 1210.48 L1432.29 1210.48 L1432.87 1210.48 L1433.46 1210.48 L1434.04 1210.48 L1434.63 1210.48 L1435.22 1210.48 L1435.8 1210.48 L1436.39 1210.48 L1436.98 1210.48 L1437.56 1210.48 L1438.15 1210.48 L1438.74 1210.48 L1439.32 1210.48 L1439.91 1210.48 L1440.5 1210.48 L1441.08 1210.48 L1441.67 1210.48 L1442.25 1210.48 L1442.84 1210.48 L1443.43 1210.48 L1444.01 1210.48 L1444.6 1210.48 L1445.19 1210.48 L1445.77 1210.48 L1446.36 1210.48 L1446.95 1210.48 L1447.53 1210.48 L1448.12 1210.48 L1448.7 1210.48 L1449.29 1210.48 L1449.88 1210.48 L1450.46 1210.48 L1451.05 1210.48 L1451.64 1210.48 L1452.22 1210.48 L1452.81 1210.48 L1453.4 1210.48 L1453.98 1210.48 L1454.57 1210.48 L1455.16 1210.48 L1455.74 1210.48 L1456.33 1210.48 L1456.91 1210.48 L1457.5 1210.48 L1458.09 1210.48 L1458.67 1210.48 L1459.26 1210.48 L1459.85 1210.48 L1460.43 1210.48 L1461.02 1210.48 L1461.61 1210.48 L1462.19 1210.48 L1462.78 1210.48 L1463.37 1210.48 L1463.95 1210.48 L1464.54 1210.48 L1465.12 1210.48 L1465.71 1210.48 L1466.3 1210.48 L1466.88 1210.48 L1467.47 1210.48 L1468.06 1210.48 L1468.64 1210.48 L1469.23 1210.48 L1469.82 1210.48 L1470.4 1210.48 L1470.99 1210.48 L1471.57 1210.48 L1472.16 1210.48 L1472.75 1210.48 L1473.33 1210.48 L1473.92 1210.48 L1474.51 1210.48 L1475.09 1210.48 L1475.68 1210.48 L1476.27 1210.48 L1476.85 1210.48 L1477.44 1210.48 L1478.03 1210.48 L1478.61 1210.48 L1479.2 1210.48 L1479.78 1210.48 L1480.37 1210.48 L1480.96 1210.48 L1481.54 1210.48 L1482.13 1210.48 L1482.72 1210.48 L1483.3 1210.48 L1483.89 1210.48 L1484.48 1210.48 L1485.06 1210.48 L1485.65 1210.48 L1486.24 1210.48 L1486.82 1210.48 L1487.41 1210.48 L1487.99 1210.48 L1488.58 1210.48 L1489.17 1210.48 L1489.75 1210.48 L1490.34 1210.48 L1490.93 1210.48 L1491.51 1210.48 L1492.1 1210.48 L1492.69 1210.48 L1493.27 1210.48 L1493.86 1210.48 L1494.45 1210.48 L1495.03 1210.48 L1495.62 1210.48 L1496.2 1210.48 L1496.79 1210.48 L1497.38 1210.48 L1497.96 1210.48 L1498.55 1210.48 L1499.14 1210.48 L1499.72 1210.48 L1500.31 1210.48 L1500.9 1210.48 L1501.48 1210.48 L1502.07 1210.48 L1502.65 1210.48 L1503.24 1210.48 L1503.83 1210.48 L1504.41 1210.48 L1505 1210.48 L1505.59 1210.48 L1506.17 1210.48 L1506.76 1210.48 L1507.35 1210.48 L1507.93 1210.48 L1508.52 1210.48 L1509.11 1210.48 L1509.69 1210.48 L1510.28 1210.48 L1510.86 1210.48 L1511.45 1210.48 L1512.04 1210.48 L1512.62 1210.48 L1513.21 1210.48 L1513.8 1210.48 L1514.38 1210.48 L1514.97 1210.48 L1515.56 1210.48 L1516.14 1210.48 L1516.73 1210.48 L1517.32 1210.48 L1517.9 1210.48 L1518.49 1210.48 L1519.07 1210.48 L1519.66 1210.48 L1520.25 1210.48 L1520.83 1210.48 L1521.42 1210.48 L1522.01 1210.48 L1522.59 1210.48 L1523.18 1210.48 L1523.77 1210.48 L1524.35 1210.48 L1524.94 1210.48 L1525.52 1210.48 L1526.11 1210.48 L1526.7 1210.48 L1527.28 1210.48 L1527.87 1210.48 L1528.46 1210.48 L1529.04 1210.48 L1529.63 1210.48 L1530.22 1210.48 L1530.8 1210.48 L1531.39 1210.48 L1531.98 1210.48 L1532.56 1210.48 L1533.15 1210.48 L1533.73 1210.48 L1534.32 1210.48 L1534.91 1210.48 L1535.49 1210.48 L1536.08 1210.48 L1536.67 1210.48 L1537.25 1210.48 L1537.84 1210.48 L1538.43 1210.48 L1539.01 1210.48 L1539.6 1210.48 L1540.19 1210.48 L1540.77 1210.48 L1541.36 1210.48 L1541.94 1210.48 L1542.53 1210.48 L1543.12 1210.48 L1543.7 1210.48 L1544.29 1210.48 L1544.88 1210.48 L1545.46 1210.48 L1546.05 1210.48 L1546.64 1210.48 L1547.22 1210.48 L1547.81 1210.48 L1548.4 1210.48 L1548.98 1210.48 L1549.57 1210.48 L1550.15 1210.48 L1550.74 1210.48 L1551.33 1210.48 L1551.91 1210.48 L1552.5 1210.48 L1553.09 1210.48 L1553.67 1210.48 L1554.26 1210.48 L1554.85 1210.48 L1555.43 1210.48 L1556.02 1210.48 L1556.6 1210.48 L1557.19 1210.48 L1557.78 1210.48 L1558.36 1210.48 L1558.95 1210.48 L1559.54 1210.48 L1560.12 1210.48 L1560.71 1210.48 L1561.3 1210.48 L1561.88 1210.48 L1562.47 1210.48 L1563.06 1210.48 L1563.64 1210.48 L1564.23 1210.48 L1564.81 1210.48 L1565.4 1210.48 L1565.99 1210.48 L1566.57 1210.48 L1567.16 1210.48 L1567.75 1210.48 L1568.33 1210.48 L1568.92 1210.48 L1569.51 1210.48 L1570.09 1210.48 L1570.68 1210.48 L1571.27 1210.48 L1571.85 1210.48 L1572.44 1210.48 L1573.02 1210.48 L1573.61 1210.48 L1574.2 1210.48 L1574.78 1210.48 L1575.37 1210.48 L1575.96 1210.48 L1576.54 1210.48 L1577.13 1210.48 L1577.72 1210.48 L1578.3 1210.48 L1578.89 1210.48 L1579.47 1210.48 L1580.06 1210.48 L1580.65 1210.48 L1581.23 1210.48 L1581.82 1210.48 L1582.41 1210.48 L1582.99 1210.48 L1583.58 1210.48 L1584.17 1210.48 L1584.75 1210.48 L1585.34 1210.48 L1585.93 1210.48 L1586.51 1210.48 L1587.1 1210.48 L1587.68 1210.48 L1588.27 1210.48 L1588.86 1210.48 L1589.44 1210.48 L1590.03 1210.48 L1590.62 1210.48 L1591.2 1210.48 L1591.79 1210.48 L1592.38 1210.48 L1592.96 1210.48 L1593.55 1210.48 L1594.14 1210.48 L1594.72 1210.48 L1595.31 1210.48 L1595.89 1210.48 L1596.48 1210.48 L1597.07 1210.48 L1597.65 1210.48 L1598.24 1210.48 L1598.83 1210.48 L1599.41 1210.48 L1600 1210.48 L1600.59 1210.48 L1601.17 1210.48 L1601.76 1210.48 L1602.34 1210.48 L1602.93 1210.48 L1603.52 1210.48 L1604.1 1210.48 L1604.69 1210.48 L1605.28 1210.48 L1605.86 1210.48 L1606.45 1210.48 L1607.04 1210.48 L1607.62 1210.48 L1608.21 1210.48 L1608.8 1210.48 L1609.38 1210.48 L1609.97 1210.48 L1610.55 1210.48 L1611.14 1210.48 L1611.73 1210.48 L1612.31 1210.48 L1612.9 1210.48 L1613.49 1210.48 L1614.07 1210.48 L1614.66 1210.48 L1615.25 1210.48 L1615.83 1210.48 L1616.42 1210.48 L1617.01 1210.48 L1617.59 1210.48 L1618.18 1210.48 L1618.76 1210.48 L1619.35 1210.48 L1619.94 1210.48 L1620.52 1210.48 L1621.11 1210.48 L1621.7 1210.48 L1622.28 1210.48 L1622.87 1210.48 L1623.46 1210.48 L1624.04 1210.48 L1624.63 1210.48 L1625.22 1210.48 L1625.8 1210.48 L1626.39 1210.48 L1626.97 1210.48 L1627.56 1210.48 L1628.15 1210.48 L1628.73 1210.48 L1629.32 1210.48 L1629.91 1210.48 L1630.49 1210.48 L1631.08 1210.48 L1631.67 1210.48 L1632.25 1210.48 L1632.84 1210.48 L1633.42 1210.48 L1634.01 1210.48 L1634.6 1210.48 L1635.18 1210.48 L1635.77 1210.48 L1636.36 1210.48 L1636.94 1210.48 L1637.53 1210.48 L1638.12 1210.48 L1638.7 1210.48 L1639.29 1210.48 L1639.88 1210.48 L1640.46 1210.48 L1641.05 1210.48 L1641.63 1210.48 L1642.22 1210.48 L1642.81 1210.48 L1643.39 1210.48 L1643.98 1210.48 L1644.57 1210.48 L1645.15 1210.48 L1645.74 1210.48 L1646.33 1210.48 L1646.91 1210.48 L1647.5 1210.48 L1648.09 1210.48 L1648.67 1210.48 L1649.26 1210.48 L1649.84 1210.48 L1650.43 1210.48 L1651.02 1210.48 L1651.6 1210.48 L1652.19 1210.48 L1652.78 1210.48 L1653.36 1210.48 L1653.95 1210.48 L1654.54 1210.48 L1655.12 1210.48 L1655.71 1210.48 L1656.29 1210.48 L1656.88 1210.48 L1657.47 1210.48 L1658.05 1210.48 L1658.64 1210.48 L1659.23 1210.48 L1659.81 1210.48 L1660.4 1210.48 L1660.99 1210.48 L1661.57 1210.48 L1662.16 1210.48 L1662.75 1210.48 L1663.33 1210.48 L1663.92 1210.48 L1664.5 1210.48 L1665.09 1210.48 L1665.68 1210.48 L1666.26 1210.48 L1666.85 1210.48 L1667.44 1210.48 L1668.02 1210.48 L1668.61 1210.48 L1669.2 1210.48 L1669.78 1210.48 L1670.37 1210.48 L1670.96 1210.48 L1671.54 1210.48 L1672.13 1210.48 L1672.71 1210.48 L1673.3 1210.48 L1673.89 1210.48 L1674.47 1210.48 L1675.06 1210.48 L1675.65 1210.48 L1676.23 1210.48 L1676.82 1210.48 L1677.41 1210.48 L1677.99 1210.48 L1678.58 1210.48 L1679.17 1210.48 L1679.75 1210.48 L1680.34 1210.48 L1680.92 1210.48 L1681.51 1210.48 L1682.1 1210.48 L1682.68 1210.48 L1683.27 1210.48 L1683.86 1210.48 L1684.44 1210.48 L1685.03 1210.48 L1685.62 1210.48 L1686.2 1210.48 L1686.79 1210.48 L1687.37 1210.48 L1687.96 1210.48 L1688.55 1210.48 L1689.13 1210.48 L1689.72 1210.48 L1690.31 1210.48 L1690.89 1210.48 L1691.48 1210.48 L1692.07 1210.48 L1692.65 1210.48 L1693.24 1210.48 L1693.83 1210.48 L1694.41 1210.48 L1695 1210.48 L1695.58 1210.48 L1696.17 1210.48 L1696.76 1210.48 L1697.34 1210.48 L1697.93 1210.48 L1698.52 1210.48 L1699.1 1210.48 L1699.69 1210.48 L1700.28 1210.48 L1700.86 1210.48 L1701.45 1210.48 L1702.04 1210.48 L1702.62 1210.48 L1703.21 1210.48 L1703.79 1210.48 L1704.38 1210.48 L1704.97 1210.48 L1705.55 1210.48 L1706.14 1210.48 L1706.73 1210.48 L1707.31 1210.48 L1707.9 1210.48 L1708.49 1210.48 L1709.07 1210.48 L1709.66 1210.48 L1710.24 1210.48 L1710.83 1210.48 L1711.42 1210.48 L1712 1210.48 L1712.59 1210.48 L1713.18 1210.48 L1713.76 1210.48 L1714.35 1210.48 L1714.94 1210.48 L1715.52 1210.48 L1716.11 1210.48 L1716.7 1210.48 L1717.28 1210.48 L1717.87 1210.48 L1718.45 1210.48 L1719.04 1210.48 L1719.63 1210.48 L1720.21 1210.48 L1720.8 1210.48 L1721.39 1210.48 L1721.97 1210.48 L1722.56 1210.48 L1723.15 1210.48 L1723.73 1210.48 L1724.32 1210.48 L1724.91 1210.48 L1725.49 1210.48 L1726.08 1210.48 L1726.66 1210.48 L1727.25 1210.48 L1727.84 1210.48 L1728.42 1210.48 L1729.01 1210.48 L1729.6 1210.48 L1730.18 1210.48 L1730.77 1210.48 L1731.36 1210.48 L1731.94 1210.48 L1732.53 1210.48 L1733.11 1210.48 L1733.7 1210.48 L1734.29 1210.48 L1734.87 1210.48 L1735.46 1210.48 L1736.05 1210.48 L1736.63 1210.48 L1737.22 1210.48 L1737.81 1210.48 L1738.39 1210.48 L1738.98 1210.48 L1739.57 1210.48 L1740.15 1210.48 L1740.74 1210.48 L1741.32 1210.48 L1741.91 1210.48 L1742.5 1210.48 L1743.08 1210.48 L1743.67 1210.48 L1744.26 1210.48 L1744.84 1210.48 L1745.43 1210.48 L1746.02 1210.48 L1746.6 1210.48 L1747.19 1210.48 L1747.78 1210.48 L1748.36 1210.48 L1748.95 1210.48 L1749.53 1210.48 L1750.12 1210.48 L1750.71 1210.48 L1751.29 1210.48 L1751.88 1210.48 L1752.47 1210.48 L1753.05 1210.48 L1753.64 1210.48 L1754.23 1210.48 L1754.81 1210.48 L1755.4 1210.48 L1755.99 1210.48 L1756.57 1210.48 L1757.16 1210.48 L1757.74 1210.48 L1758.33 1210.48 L1758.92 1210.48 L1759.5 1210.48 L1760.09 1210.48 L1760.68 1210.48 L1761.26 1210.48 L1761.85 1210.48 L1762.44 1210.48 L1763.02 1210.48 L1763.61 1210.48 L1764.19 1210.48 L1764.78 1210.48 L1765.37 1210.48 L1765.95 1210.48 L1766.54 1210.48 L1767.13 1210.48 L1767.71 1210.48 L1768.3 1210.48 L1768.89 1210.48 L1769.47 1210.48 L1770.06 1210.48 L1770.65 1210.48 L1771.23 1210.48 L1771.82 1210.48 L1772.4 1210.48 L1772.99 1210.48 L1773.58 1210.48 L1774.16 1210.48 L1774.75 1210.48 L1775.34 1210.48 L1775.92 1210.48 L1776.51 1210.48 L1777.1 1210.48 L1777.68 1210.48 L1778.27 1210.48 L1778.86 1210.48 L1779.44 1210.48 L1780.03 1210.48 L1780.61 1210.48 L1781.2 1210.48 L1781.79 1210.48 L1782.37 1210.48 L1782.96 1210.48 L1783.55 1210.48 L1784.13 1210.48 L1784.72 1210.48 L1785.31 1210.48 L1785.89 1210.48 L1786.48 1210.48 L1787.06 1210.48 L1787.65 1210.48 L1788.24 1210.48 L1788.82 1210.48 L1789.41 1210.48 L1790 1210.48 L1790.58 1210.48 L1791.17 1210.48 L1791.76 1210.48 L1792.34 1210.48 L1792.93 1210.48 L1793.52 1210.48 L1794.1 1210.48 L1794.69 1210.48 L1795.27 1210.48 L1795.86 1210.48 L1796.45 1210.48 L1797.03 1210.48 L1797.62 1210.48 L1798.21 1210.48 L1798.79 1210.48 L1799.38 1210.48 L1799.97 1210.48 L1800.55 1210.48 L1801.14 1210.48 L1801.73 1210.48 L1802.31 1210.48 L1802.9 1210.48 L1803.48 1210.48 L1804.07 1210.48 L1804.66 1210.48 L1805.24 1210.48 L1805.83 1210.48 L1806.42 1210.48 L1807 1210.48 L1807.59 1210.48 L1808.18 1210.48 L1808.76 1210.48 L1809.35 1210.48 L1809.94 1210.48 L1810.52 1210.48 L1811.11 1210.48 L1811.69 1210.48 L1812.28 1210.48 L1812.87 1210.48 L1813.45 1210.48 L1814.04 1210.48 L1814.63 1210.48 L1815.21 1210.48 L1815.8 1210.48 L1816.39 1210.48 L1816.97 1210.48 L1817.56 1210.48 L1818.14 1210.48 L1818.73 1210.48 L1819.32 1210.48 L1819.9 1210.48 L1820.49 1210.48 L1821.08 1210.48 L1821.66 1210.48 L1822.25 1210.48 L1822.84 1210.48 L1823.42 1210.48 L1824.01 1210.48 L1824.6 1210.48 L1825.18 1210.48 L1825.77 1210.48 L1826.35 1210.48 L1826.94 1210.48 L1827.53 1210.48 L1828.11 1210.48 L1828.7 1210.48 L1829.29 1210.48 L1829.87 1210.48 L1830.46 1210.48 L1831.05 1210.48 L1831.63 1210.48 L1832.22 1210.48 L1832.81 1210.48 L1833.39 1210.48 L1833.98 1210.48 L1834.56 1210.48 L1835.15 1210.48 L1835.74 1210.48 L1836.32 1210.48 L1836.91 1210.48 L1837.5 1210.48 L1838.08 1210.48 L1838.67 1210.48 L1839.26 1210.48 L1839.84 1210.48 L1840.43 1210.48 L1841.01 1210.48 L1841.6 1210.48 L1842.19 1210.48 L1842.77 1210.48 L1843.36 1210.48 L1843.95 1210.48 L1844.53 1210.48 L1845.12 1210.48 L1845.71 1210.48 L1846.29 1210.48 L1846.88 1210.48 L1847.47 1210.48 L1848.05 1210.48 L1848.64 1210.48 L1849.22 1210.48 L1849.81 1210.48 L1850.4 1210.48 L1850.98 1210.48 L1851.57 1210.48 L1852.16 1210.48 L1852.74 1210.48 L1853.33 1210.48 L1853.92 1210.48 L1854.5 1210.48 L1855.09 1210.48 L1855.68 1210.48 L1856.26 1210.48 L1856.85 1210.48 L1857.43 1210.48 L1858.02 1210.48 L1858.61 1210.48 L1859.19 1210.48 L1859.78 1210.48 L1860.37 1210.48 L1860.95 1210.48 L1861.54 1210.48 L1862.13 1210.48 L1862.71 1210.48 L1863.3 1210.48 L1863.88 1210.48 L1864.47 1210.48 L1865.06 1210.48 L1865.64 1210.48 L1866.23 1210.48 L1866.82 1210.48 L1867.4 1210.48 L1867.99 1210.48 L1868.58 1210.48 L1869.16 1210.48 L1869.75 1210.48 L1870.34 1210.48 L1870.92 1210.48 L1871.51 1210.48 L1872.09 1210.48 L1872.68 1210.48 L1873.27 1210.48 L1873.85 1210.48 L1874.44 1210.48 L1875.03 1210.48 L1875.61 1210.48 L1876.2 1210.48 L1876.79 1210.48 L1877.37 1210.48 L1877.96 1210.48 L1878.55 1210.48 L1879.13 1210.48 L1879.72 1210.48 L1880.3 1210.48 L1880.89 1210.48 L1881.48 1210.48 L1882.06 1210.48 L1882.65 1210.48 L1883.24 1210.48 L1883.82 1210.48 L1884.41 1210.48 L1885 1210.48 L1885.58 1210.48 L1886.17 1210.48 L1886.76 1210.48 L1887.34 1210.48 L1887.93 1210.48 L1888.51 1210.48 L1889.1 1210.48 L1889.69 1210.48 L1890.27 1210.48 L1890.86 1210.48 L1891.45 1210.48 L1892.03 1210.48 L1892.62 1210.48 L1893.21 1210.48 L1893.79 1210.48 L1894.38 1210.48 L1894.96 1210.48 L1895.55 1210.48 L1896.14 1210.48 L1896.72 1210.48 L1897.31 1210.48 L1897.9 1210.48 L1898.48 1210.48 L1899.07 1210.48 L1899.66 1210.48 L1900.24 1210.48 L1900.83 1210.48 L1901.42 1210.48 L1902 1210.48 L1902.59 1210.48 L1903.17 1210.48 L1903.76 1210.48 L1904.35 1210.48 L1904.93 1210.48 L1905.52 1210.48 L1906.11 1210.48 L1906.69 1210.48 L1907.28 1210.48 L1907.87 1210.48 L1908.45 1210.48 L1909.04 1210.48 L1909.63 1210.48 L1910.21 1210.48 L1910.8 1210.48 L1911.38 1210.48 L1911.97 1210.48 L1912.56 1210.48 L1913.14 1210.48 L1913.73 1210.48 L1914.32 1210.48 L1914.9 1210.48 L1915.49 1210.48 L1916.08 1210.48 L1916.66 1210.48 L1917.25 1210.48 L1917.83 1210.48 L1918.42 1210.48 L1919.01 1210.48 L1919.59 1210.48 L1920.18 1210.48 L1920.77 1210.48 L1921.35 1210.48 L1921.94 1210.48 L1922.53 1210.48 L1923.11 1210.48 L1923.7 1210.48 L1924.29 1210.48 L1924.87 1210.48 L1925.46 1210.48 L1926.04 1210.48 L1926.63 1210.48 L1927.22 1210.48 L1927.8 1210.48 L1928.39 1210.48 L1928.98 1210.48 L1929.56 1210.48 L1930.15 1210.48 L1930.74 1210.48 L1931.32 1210.48 L1931.91 1210.48 L1932.5 1210.48 L1933.08 1210.48 L1933.67 1210.48 L1934.25 1210.48 L1934.84 1210.48 L1935.43 1210.48 L1936.01 1210.48 L1936.6 1210.48 L1937.19 1210.48 L1937.77 1210.48 L1938.36 1210.48 L1938.95 1210.48 L1939.53 1210.48 L1940.12 1210.48 L1940.71 1210.48 L1941.29 1210.48 L1941.88 1210.48 L1942.46 1210.48 L1943.05 1210.48 L1943.64 1210.48 L1944.22 1210.48 L1944.81 1210.48 L1945.4 1210.48 L1945.98 1210.48 L1946.57 1210.48 L1947.16 1210.48 L1947.74 1210.48 L1948.33 1210.48 L1948.91 1210.48 L1949.5 1210.48 L1950.09 1210.48 L1950.67 1210.48 L1951.26 1210.48 L1951.85 1210.48 L1952.43 1210.48 L1953.02 1210.48 L1953.61 1210.48 L1954.19 1210.48 L1954.78 1210.48 L1955.37 1210.48 L1955.95 1210.48 L1956.54 1210.48 L1957.12 1210.48 L1957.71 1210.48 L1958.3 1210.48 L1958.88 1210.48 L1959.47 1210.48 L1960.06 1210.48 L1960.64 1210.48 L1961.23 1210.48 L1961.82 1210.48 L1962.4 1210.48 L1962.99 1210.48 L1963.58 1210.48 L1964.16 1210.48 L1964.75 1210.48 L1965.33 1210.48 L1965.92 1210.48 L1966.51 1210.48 L1967.09 1210.48 L1967.68 1210.48 L1968.27 1210.48 L1968.85 1210.48 L1969.44 1210.48 L1970.03 1210.48 L1970.61 1210.48 L1971.2 1210.48 L1971.78 1210.48 L1972.37 1210.48 L1972.96 1210.48 L1973.54 1210.48 L1974.13 1210.48 L1974.72 1210.48 L1975.3 1210.48 L1975.89 1210.48 L1976.48 1210.48 L1977.06 1210.48 L1977.65 1210.48 L1978.24 1210.48 L1978.82 1210.48 L1979.41 1210.48 L1979.99 1210.48 L1980.58 1210.48 L1981.17 1210.48 L1981.75 1210.48 L1982.34 1210.48 L1982.93 1210.48 L1983.51 1210.48 L1984.1 1210.48 L1984.69 1210.48 L1985.27 1210.48 L1985.86 1210.48 L1986.45 1210.48 L1987.03 1210.48 L1987.62 1210.48 L1988.2 1210.48 L1988.79 1210.48 L1989.38 1210.48 L1989.96 1210.48 L1990.55 1210.48 L1991.14 1210.48 L1991.72 1210.48 L1992.31 1210.48 L1992.9 1210.48 L1993.48 1210.48 L1994.07 1210.48 L1994.65 1210.48 L1995.24 1210.48 L1995.83 1210.48 L1996.41 1210.48 L1997 1210.48 L1997.59 1210.48 L1998.17 1210.48 L1998.76 1210.48 L1999.35 1210.48 L1999.93 1210.48 L2000.52 1210.48 L2001.11 1210.48 L2001.69 1210.48 L2002.28 1210.48 L2002.86 1210.48 L2003.45 1210.48 L2004.04 1210.48 L2004.62 1210.48 L2005.21 1210.48 L2005.8 1210.48 L2006.38 1210.48 L2006.97 1210.48 L2007.56 1210.48 L2008.14 1210.48 L2008.73 1210.48 L2009.32 1210.48 L2009.9 1210.48 L2010.49 1210.48 L2011.07 1210.48 L2011.66 1210.48 L2012.25 1210.48 L2012.83 1210.48 L2013.42 1210.48 L2014.01 1210.48 L2014.59 1210.48 L2015.18 1210.48 L2015.77 1210.48 L2016.35 1210.48 L2016.94 1210.48 L2017.53 1210.48 L2018.11 1210.48 L2018.7 1210.48 L2019.28 1210.48 L2019.87 1210.48 L2020.46 1210.48 L2021.04 1210.48 L2021.63 1210.48 L2022.22 1210.48 L2022.8 1210.48 L2023.39 1210.48 L2023.98 1210.48 L2024.56 1210.48 L2025.15 1210.48 L2025.73 1210.48 L2026.32 1210.48 L2026.91 1210.48 L2027.49 1210.48 L2028.08 1210.48 L2028.67 1210.48 L2029.25 1210.48 L2029.84 1210.48 L2030.43 1210.48 L2031.01 1210.48 L2031.6 1210.48 L2032.19 1210.48 L2032.77 1210.48 L2033.36 1210.48 L2033.94 1210.48 L2034.53 1210.48 L2035.12 1210.48 L2035.7 1210.48 L2036.29 1210.48 L2036.88 1210.48 L2037.46 1210.48 L2038.05 1210.48 L2038.64 1210.48 L2039.22 1210.48 L2039.81 1210.48 L2040.4 1210.48 L2040.98 1210.48 L2041.57 1210.48 L2042.15 1210.48 L2042.74 1210.48 L2043.33 1210.48 L2043.91 1210.48 L2044.5 1210.48 L2045.09 1210.48 L2045.67 1210.48 L2046.26 1210.48 L2046.85 1210.48 L2047.43 1210.48 L2048.02 1210.48 L2048.6 1210.48 L2049.19 1210.48 L2049.78 1210.48 L2050.36 1210.48 L2050.95 1210.48 L2051.54 1210.48 L2052.12 1210.48 L2052.71 1210.48 L2053.3 1210.48 L2053.88 1210.48 L2054.47 1210.48 L2055.06 1210.48 L2055.64 1210.48 L2056.23 1210.48 L2056.81 1210.48 L2057.4 1210.48 L2057.99 1210.48 L2058.57 1210.48 L2059.16 1210.48 L2059.75 1210.48 L2060.33 1210.48 L2060.92 1210.48 L2061.51 1210.48 L2062.09 1210.48 L2062.68 1210.48 L2063.27 1210.48 L2063.85 1210.48 L2064.44 1210.48 L2065.02 1210.48 L2065.61 1210.48 L2066.2 1210.48 L2066.78 1210.48 L2067.37 1210.48 L2067.96 1210.48 L2068.54 1210.48 L2069.13 1210.48 L2069.72 1210.48 L2070.3 1210.48 L2070.89 1210.48 L2071.48 1210.48 L2072.06 1210.48 L2072.65 1210.48 L2073.23 1210.48 L2073.82 1210.48 L2074.41 1210.48 L2074.99 1210.48 L2075.58 1210.48 L2076.17 1210.48 L2076.75 1210.48 L2077.34 1210.48 L2077.93 1210.48 L2078.51 1210.48 L2079.1 1210.48 L2079.68 1210.48 L2080.27 1210.48 L2080.86 1210.48 L2081.44 1210.48 L2082.03 1210.48 L2082.62 1210.48 L2083.2 1210.48 L2083.79 1210.48 L2084.38 1210.48 L2084.96 1210.48 L2085.55 1210.48 L2086.14 1210.48 L2086.72 1210.48 L2087.31 1210.48 L2087.89 1210.48 L2088.48 1210.48 L2089.07 1210.48 L2089.65 1210.48 L2090.24 1210.48 L2090.83 1210.48 L2091.41 1210.48 L2092 1210.48 L2092.59 1210.48 L2093.17 1210.48 L2093.76 1210.48 L2094.35 1210.48 L2094.93 1210.48 L2095.52 1210.48 L2096.1 1210.48 L2096.69 1210.48 L2097.28 1210.48 L2097.86 1210.48 L2098.45 1210.48 L2099.04 1210.48 L2099.62 1210.48 L2100.21 1210.48 L2100.8 1210.48 L2101.38 1210.48 L2101.97 1210.48 L2102.55 1210.48 L2103.14 1210.48 L2103.73 1210.48 L2104.31 1210.48 L2104.9 1210.48 L2105.49 1210.48 L2106.07 1210.48 L2106.66 1210.48 L2107.25 1210.48 L2107.83 1210.48 L2108.42 1210.48 L2109.01 1210.48 L2109.59 1210.48 L2110.18 1210.48 L2110.76 1210.48 L2111.35 1210.48 L2111.94 1210.48 L2112.52 1210.48 L2113.11 1210.48 L2113.7 1210.48 L2114.28 1210.48 L2114.87 1210.48 L2115.46 1210.48 L2116.04 1210.48 L2116.63 1210.48 L2117.22 1210.48 L2117.8 1210.48 L2118.39 1210.48 L2118.97 1210.48 L2119.56 1210.48 L2120.15 1210.48 L2120.73 1210.48 L2121.32 1210.48 L2121.91 1210.48 L2122.49 1210.48 L2123.08 1210.48 L2123.67 1210.48 L2124.25 1210.48 L2124.84 1210.48 L2125.42 1210.48 L2126.01 1210.48 L2126.6 1210.48 L2127.18 1210.48 L2127.77 1210.48 L2128.36 1210.48 L2128.94 1210.48 L2129.53 1210.48 L2130.12 1210.48 L2130.7 1210.48 L2131.29 1210.48 L2131.88 1210.48 L2132.46 1210.48 L2133.05 1210.48 L2133.63 1210.48 L2134.22 1210.48 L2134.81 1210.48 L2135.39 1210.48 L2135.98 1210.48 L2136.57 1210.48 L2137.15 1210.48 L2137.74 1210.48 L2138.33 1210.48 L2138.91 1210.48 L2139.5 1210.48 L2140.09 1210.48 L2140.67 1210.48 L2141.26 1210.48 L2141.84 1210.48 L2142.43 1210.48 L2143.02 1210.48 L2143.6 1210.48 L2144.19 1210.48 L2144.78 1210.48 L2145.36 1210.48 L2145.95 1210.48 L2146.54 1210.48 L2147.12 1210.48 L2147.71 1210.48 L2148.3 1210.48 L2148.88 1210.48 L2149.47 1210.48 L2150.05 1210.48 L2150.64 1210.48 L2151.23 1210.48 L2151.81 1210.48 L2152.4 1210.48 L2152.99 1210.48 L2153.57 1210.48 L2154.16 1210.48 L2154.75 1210.48 L2155.33 1210.48 L2155.92 1210.48 L2156.5 1210.48 L2157.09 1210.48 L2157.68 1210.48 L2158.26 1210.48 L2158.26 1209.94 L2157.68 1209.94 L2157.09 1209.94 L2156.5 1209.94 L2155.92 1209.94 L2155.33 1209.94 L2154.75 1209.94 L2154.16 1209.94 L2153.57 1209.94 L2152.99 1209.94 L2152.4 1209.94 L2151.81 1209.94 L2151.23 1209.94 L2150.64 1209.94 L2150.05 1209.94 L2149.47 1209.94 L2148.88 1209.94 L2148.3 1209.94 L2147.71 1209.94 L2147.12 1209.94 L2146.54 1209.94 L2145.95 1209.94 L2145.36 1209.94 L2144.78 1209.94 L2144.19 1209.94 L2143.6 1209.94 L2143.02 1209.94 L2142.43 1209.94 L2141.84 1209.94 L2141.26 1209.94 L2140.67 1209.94 L2140.09 1209.94 L2139.5 1209.94 L2138.91 1209.94 L2138.33 1209.94 L2137.74 1209.94 L2137.15 1209.94 L2136.57 1209.94 L2135.98 1209.94 L2135.39 1209.94 L2134.81 1209.94 L2134.22 1209.94 L2133.63 1209.94 L2133.05 1209.94 L2132.46 1209.94 L2131.88 1209.94 L2131.29 1209.94 L2130.7 1209.94 L2130.12 1209.94 L2129.53 1209.94 L2128.94 1209.94 L2128.36 1209.94 L2127.77 1209.94 L2127.18 1209.94 L2126.6 1209.94 L2126.01 1209.94 L2125.42 1209.94 L2124.84 1209.94 L2124.25 1209.94 L2123.67 1209.94 L2123.08 1209.94 L2122.49 1209.94 L2121.91 1209.94 L2121.32 1209.94 L2120.73 1209.94 L2120.15 1209.94 L2119.56 1209.94 L2118.97 1209.94 L2118.39 1209.94 L2117.8 1209.94 L2117.22 1209.94 L2116.63 1209.94 L2116.04 1209.94 L2115.46 1209.94 L2114.87 1209.94 L2114.28 1209.94 L2113.7 1209.94 L2113.11 1209.94 L2112.52 1209.94 L2111.94 1209.94 L2111.35 1209.94 L2110.76 1209.94 L2110.18 1209.94 L2109.59 1209.94 L2109.01 1209.94 L2108.42 1209.94 L2107.83 1209.94 L2107.25 1209.94 L2106.66 1209.94 L2106.07 1209.94 L2105.49 1209.94 L2104.9 1209.94 L2104.31 1209.94 L2103.73 1209.94 L2103.14 1209.94 L2102.55 1209.94 L2101.97 1209.94 L2101.38 1209.94 L2100.8 1209.94 L2100.21 1209.94 L2099.62 1209.94 L2099.04 1209.94 L2098.45 1209.94 L2097.86 1209.94 L2097.28 1209.94 L2096.69 1209.94 L2096.1 1209.94 L2095.52 1209.94 L2094.93 1209.94 L2094.35 1209.94 L2093.76 1209.94 L2093.17 1209.94 L2092.59 1209.94 L2092 1209.94 L2091.41 1209.94 L2090.83 1209.94 L2090.24 1209.94 L2089.65 1209.94 L2089.07 1209.94 L2088.48 1209.94 L2087.89 1209.94 L2087.31 1209.94 L2086.72 1209.94 L2086.14 1209.94 L2085.55 1209.94 L2084.96 1209.94 L2084.38 1209.94 L2083.79 1209.94 L2083.2 1209.94 L2082.62 1209.94 L2082.03 1209.94 L2081.44 1209.94 L2080.86 1209.94 L2080.27 1209.94 L2079.68 1209.94 L2079.1 1209.94 L2078.51 1209.94 L2077.93 1209.94 L2077.34 1209.94 L2076.75 1209.94 L2076.17 1209.94 L2075.58 1209.94 L2074.99 1209.94 L2074.41 1209.94 L2073.82 1209.94 L2073.23 1209.94 L2072.65 1209.94 L2072.06 1209.94 L2071.48 1209.94 L2070.89 1209.94 L2070.3 1209.94 L2069.72 1209.94 L2069.13 1209.94 L2068.54 1209.94 L2067.96 1209.94 L2067.37 1209.94 L2066.78 1209.94 L2066.2 1209.94 L2065.61 1209.94 L2065.02 1209.94 L2064.44 1209.94 L2063.85 1209.94 L2063.27 1209.94 L2062.68 1209.94 L2062.09 1209.94 L2061.51 1209.94 L2060.92 1209.94 L2060.33 1209.94 L2059.75 1209.94 L2059.16 1209.94 L2058.57 1209.94 L2057.99 1209.94 L2057.4 1209.94 L2056.81 1209.94 L2056.23 1209.94 L2055.64 1209.94 L2055.06 1209.94 L2054.47 1209.94 L2053.88 1209.94 L2053.3 1209.94 L2052.71 1209.94 L2052.12 1209.94 L2051.54 1209.94 L2050.95 1209.94 L2050.36 1209.94 L2049.78 1209.94 L2049.19 1209.94 L2048.6 1209.94 L2048.02 1209.94 L2047.43 1209.94 L2046.85 1209.94 L2046.26 1209.94 L2045.67 1209.94 L2045.09 1209.94 L2044.5 1209.94 L2043.91 1209.94 L2043.33 1209.94 L2042.74 1209.94 L2042.15 1209.94 L2041.57 1209.94 L2040.98 1209.94 L2040.4 1209.94 L2039.81 1209.94 L2039.22 1209.94 L2038.64 1209.94 L2038.05 1209.94 L2037.46 1209.94 L2036.88 1209.94 L2036.29 1209.94 L2035.7 1209.94 L2035.12 1209.94 L2034.53 1209.94 L2033.94 1209.94 L2033.36 1209.94 L2032.77 1209.94 L2032.19 1209.94 L2031.6 1209.94 L2031.01 1209.94 L2030.43 1209.94 L2029.84 1209.94 L2029.25 1209.94 L2028.67 1209.94 L2028.08 1209.94 L2027.49 1209.94 L2026.91 1209.94 L2026.32 1209.94 L2025.73 1209.94 L2025.15 1209.94 L2024.56 1209.94 L2023.98 1209.94 L2023.39 1209.94 L2022.8 1209.94 L2022.22 1209.94 L2021.63 1209.94 L2021.04 1209.94 L2020.46 1209.94 L2019.87 1209.94 L2019.28 1209.94 L2018.7 1209.94 L2018.11 1209.94 L2017.53 1209.94 L2016.94 1209.94 L2016.35 1209.94 L2015.77 1209.94 L2015.18 1209.94 L2014.59 1209.94 L2014.01 1209.94 L2013.42 1209.94 L2012.83 1209.94 L2012.25 1209.94 L2011.66 1209.94 L2011.07 1209.94 L2010.49 1209.94 L2009.9 1209.94 L2009.32 1209.94 L2008.73 1209.94 L2008.14 1209.94 L2007.56 1209.94 L2006.97 1209.94 L2006.38 1209.94 L2005.8 1209.94 L2005.21 1209.94 L2004.62 1209.94 L2004.04 1209.94 L2003.45 1209.94 L2002.86 1209.94 L2002.28 1209.94 L2001.69 1209.94 L2001.11 1209.94 L2000.52 1209.94 L1999.93 1209.94 L1999.35 1209.94 L1998.76 1209.94 L1998.17 1209.94 L1997.59 1209.94 L1997 1209.94 L1996.41 1209.94 L1995.83 1209.94 L1995.24 1209.94 L1994.65 1209.94 L1994.07 1209.94 L1993.48 1209.94 L1992.9 1209.94 L1992.31 1209.94 L1991.72 1209.94 L1991.14 1209.94 L1990.55 1209.94 L1989.96 1209.94 L1989.38 1209.94 L1988.79 1209.94 L1988.2 1209.94 L1987.62 1209.94 L1987.03 1209.94 L1986.45 1209.94 L1985.86 1209.94 L1985.27 1209.94 L1984.69 1209.94 L1984.1 1209.94 L1983.51 1209.94 L1982.93 1209.94 L1982.34 1209.94 L1981.75 1209.94 L1981.17 1209.94 L1980.58 1209.94 L1979.99 1209.94 L1979.41 1209.94 L1978.82 1209.94 L1978.24 1209.94 L1977.65 1209.94 L1977.06 1209.94 L1976.48 1209.94 L1975.89 1209.94 L1975.3 1209.94 L1974.72 1209.94 L1974.13 1209.94 L1973.54 1209.94 L1972.96 1209.94 L1972.37 1209.94 L1971.78 1209.94 L1971.2 1209.94 L1970.61 1209.94 L1970.03 1209.94 L1969.44 1209.94 L1968.85 1209.94 L1968.27 1209.94 L1967.68 1209.94 L1967.09 1209.94 L1966.51 1209.94 L1965.92 1209.94 L1965.33 1209.94 L1964.75 1209.94 L1964.16 1209.94 L1963.58 1209.94 L1962.99 1209.94 L1962.4 1209.94 L1961.82 1209.94 L1961.23 1209.94 L1960.64 1209.94 L1960.06 1209.94 L1959.47 1209.94 L1958.88 1209.94 L1958.3 1209.94 L1957.71 1209.94 L1957.12 1209.94 L1956.54 1209.94 L1955.95 1209.94 L1955.37 1209.94 L1954.78 1209.94 L1954.19 1209.94 L1953.61 1209.94 L1953.02 1209.94 L1952.43 1209.94 L1951.85 1209.94 L1951.26 1209.94 L1950.67 1209.94 L1950.09 1209.94 L1949.5 1209.94 L1948.91 1209.94 L1948.33 1209.94 L1947.74 1209.94 L1947.16 1209.94 L1946.57 1209.94 L1945.98 1209.94 L1945.4 1209.94 L1944.81 1209.94 L1944.22 1209.94 L1943.64 1209.94 L1943.05 1209.94 L1942.46 1209.94 L1941.88 1209.94 L1941.29 1209.94 L1940.71 1209.94 L1940.12 1209.94 L1939.53 1209.94 L1938.95 1209.94 L1938.36 1209.94 L1937.77 1209.94 L1937.19 1209.94 L1936.6 1209.94 L1936.01 1209.94 L1935.43 1209.94 L1934.84 1209.94 L1934.25 1209.94 L1933.67 1209.94 L1933.08 1209.94 L1932.5 1209.94 L1931.91 1209.94 L1931.32 1209.94 L1930.74 1209.94 L1930.15 1209.94 L1929.56 1209.94 L1928.98 1209.94 L1928.39 1209.94 L1927.8 1209.94 L1927.22 1209.94 L1926.63 1209.94 L1926.04 1209.94 L1925.46 1209.94 L1924.87 1209.94 L1924.29 1209.94 L1923.7 1209.94 L1923.11 1209.94 L1922.53 1209.94 L1921.94 1209.94 L1921.35 1209.94 L1920.77 1209.94 L1920.18 1209.94 L1919.59 1209.94 L1919.01 1209.94 L1918.42 1209.94 L1917.83 1209.94 L1917.25 1209.94 L1916.66 1209.94 L1916.08 1209.94 L1915.49 1209.94 L1914.9 1209.94 L1914.32 1209.94 L1913.73 1209.94 L1913.14 1209.94 L1912.56 1209.94 L1911.97 1209.94 L1911.38 1209.94 L1910.8 1209.94 L1910.21 1209.94 L1909.63 1209.94 L1909.04 1209.94 L1908.45 1209.94 L1907.87 1209.94 L1907.28 1209.94 L1906.69 1209.94 L1906.11 1209.94 L1905.52 1209.94 L1904.93 1209.94 L1904.35 1209.94 L1903.76 1209.94 L1903.17 1209.94 L1902.59 1209.94 L1902 1209.94 L1901.42 1209.94 L1900.83 1209.94 L1900.24 1209.94 L1899.66 1209.94 L1899.07 1209.94 L1898.48 1209.94 L1897.9 1209.94 L1897.31 1209.94 L1896.72 1209.94 L1896.14 1209.94 L1895.55 1209.94 L1894.96 1209.94 L1894.38 1209.94 L1893.79 1209.94 L1893.21 1209.94 L1892.62 1209.94 L1892.03 1209.94 L1891.45 1209.94 L1890.86 1209.94 L1890.27 1209.94 L1889.69 1209.94 L1889.1 1209.94 L1888.51 1209.94 L1887.93 1209.94 L1887.34 1209.94 L1886.76 1209.94 L1886.17 1209.94 L1885.58 1209.94 L1885 1209.94 L1884.41 1209.94 L1883.82 1209.94 L1883.24 1209.94 L1882.65 1209.94 L1882.06 1209.94 L1881.48 1209.94 L1880.89 1209.94 L1880.3 1209.94 L1879.72 1209.94 L1879.13 1209.94 L1878.55 1209.94 L1877.96 1209.94 L1877.37 1209.94 L1876.79 1209.94 L1876.2 1209.94 L1875.61 1209.94 L1875.03 1209.94 L1874.44 1209.94 L1873.85 1209.94 L1873.27 1209.94 L1872.68 1209.94 L1872.09 1209.94 L1871.51 1209.94 L1870.92 1209.94 L1870.34 1209.94 L1869.75 1209.94 L1869.16 1209.94 L1868.58 1209.94 L1867.99 1209.94 L1867.4 1209.94 L1866.82 1209.94 L1866.23 1209.94 L1865.64 1209.94 L1865.06 1209.94 L1864.47 1209.94 L1863.88 1209.94 L1863.3 1209.94 L1862.71 1209.94 L1862.13 1209.94 L1861.54 1209.94 L1860.95 1209.94 L1860.37 1209.94 L1859.78 1209.94 L1859.19 1209.94 L1858.61 1209.94 L1858.02 1209.94 L1857.43 1209.94 L1856.85 1209.94 L1856.26 1209.94 L1855.68 1209.94 L1855.09 1209.94 L1854.5 1209.94 L1853.92 1209.94 L1853.33 1209.94 L1852.74 1209.94 L1852.16 1209.94 L1851.57 1209.94 L1850.98 1209.94 L1850.4 1209.94 L1849.81 1209.94 L1849.22 1209.94 L1848.64 1209.94 L1848.05 1209.94 L1847.47 1209.94 L1846.88 1209.94 L1846.29 1209.94 L1845.71 1209.94 L1845.12 1209.94 L1844.53 1209.94 L1843.95 1209.94 L1843.36 1209.94 L1842.77 1209.94 L1842.19 1209.94 L1841.6 1209.94 L1841.01 1209.94 L1840.43 1209.94 L1839.84 1209.94 L1839.26 1209.94 L1838.67 1209.94 L1838.08 1209.94 L1837.5 1209.94 L1836.91 1209.94 L1836.32 1209.94 L1835.74 1209.94 L1835.15 1209.94 L1834.56 1209.94 L1833.98 1209.94 L1833.39 1209.94 L1832.81 1209.94 L1832.22 1209.94 L1831.63 1209.94 L1831.05 1209.94 L1830.46 1209.94 L1829.87 1209.94 L1829.29 1209.94 L1828.7 1209.94 L1828.11 1209.94 L1827.53 1209.94 L1826.94 1209.94 L1826.35 1209.94 L1825.77 1209.94 L1825.18 1209.94 L1824.6 1209.94 L1824.01 1209.94 L1823.42 1209.94 L1822.84 1209.94 L1822.25 1209.94 L1821.66 1209.94 L1821.08 1209.94 L1820.49 1209.94 L1819.9 1209.94 L1819.32 1209.94 L1818.73 1209.94 L1818.14 1209.94 L1817.56 1209.94 L1816.97 1209.94 L1816.39 1209.94 L1815.8 1209.94 L1815.21 1209.94 L1814.63 1209.94 L1814.04 1209.94 L1813.45 1209.94 L1812.87 1209.94 L1812.28 1209.94 L1811.69 1209.94 L1811.11 1209.94 L1810.52 1209.94 L1809.94 1209.94 L1809.35 1209.94 L1808.76 1209.94 L1808.18 1209.94 L1807.59 1209.94 L1807 1209.94 L1806.42 1209.94 L1805.83 1209.94 L1805.24 1209.94 L1804.66 1209.94 L1804.07 1209.94 L1803.48 1209.94 L1802.9 1209.94 L1802.31 1209.94 L1801.73 1209.94 L1801.14 1209.94 L1800.55 1209.94 L1799.97 1209.94 L1799.38 1209.94 L1798.79 1209.94 L1798.21 1209.94 L1797.62 1209.94 L1797.03 1209.94 L1796.45 1209.94 L1795.86 1209.94 L1795.27 1209.94 L1794.69 1209.94 L1794.1 1209.94 L1793.52 1209.94 L1792.93 1209.94 L1792.34 1209.94 L1791.76 1209.94 L1791.17 1209.94 L1790.58 1209.94 L1790 1209.94 L1789.41 1209.94 L1788.82 1209.94 L1788.24 1209.94 L1787.65 1209.94 L1787.06 1209.94 L1786.48 1209.94 L1785.89 1209.94 L1785.31 1209.94 L1784.72 1209.94 L1784.13 1209.94 L1783.55 1209.94 L1782.96 1209.94 L1782.37 1209.94 L1781.79 1209.94 L1781.2 1209.94 L1780.61 1209.94 L1780.03 1209.94 L1779.44 1209.94 L1778.86 1209.94 L1778.27 1209.94 L1777.68 1209.94 L1777.1 1209.94 L1776.51 1209.94 L1775.92 1209.94 L1775.34 1209.94 L1774.75 1209.94 L1774.16 1209.94 L1773.58 1209.94 L1772.99 1209.94 L1772.4 1209.94 L1771.82 1209.94 L1771.23 1209.94 L1770.65 1209.94 L1770.06 1209.94 L1769.47 1209.94 L1768.89 1209.94 L1768.3 1209.94 L1767.71 1209.94 L1767.13 1209.94 L1766.54 1209.94 L1765.95 1209.94 L1765.37 1209.94 L1764.78 1209.94 L1764.19 1209.94 L1763.61 1209.94 L1763.02 1209.94 L1762.44 1209.94 L1761.85 1209.94 L1761.26 1209.94 L1760.68 1209.94 L1760.09 1209.94 L1759.5 1209.94 L1758.92 1209.94 L1758.33 1209.94 L1757.74 1209.94 L1757.16 1209.94 L1756.57 1209.94 L1755.99 1209.94 L1755.4 1209.94 L1754.81 1209.94 L1754.23 1209.94 L1753.64 1209.94 L1753.05 1209.94 L1752.47 1209.94 L1751.88 1209.94 L1751.29 1209.94 L1750.71 1209.94 L1750.12 1209.94 L1749.53 1209.94 L1748.95 1209.94 L1748.36 1209.94 L1747.78 1209.94 L1747.19 1209.94 L1746.6 1209.94 L1746.02 1209.94 L1745.43 1209.94 L1744.84 1209.94 L1744.26 1209.94 L1743.67 1209.94 L1743.08 1209.94 L1742.5 1209.94 L1741.91 1209.94 L1741.32 1209.94 L1740.74 1209.94 L1740.15 1209.94 L1739.57 1209.94 L1738.98 1209.94 L1738.39 1209.94 L1737.81 1209.94 L1737.22 1209.94 L1736.63 1209.94 L1736.05 1209.94 L1735.46 1209.94 L1734.87 1209.94 L1734.29 1209.94 L1733.7 1209.94 L1733.11 1209.94 L1732.53 1209.94 L1731.94 1209.94 L1731.36 1209.94 L1730.77 1209.94 L1730.18 1209.94 L1729.6 1209.94 L1729.01 1209.94 L1728.42 1209.94 L1727.84 1209.94 L1727.25 1209.94 L1726.66 1209.94 L1726.08 1209.94 L1725.49 1209.94 L1724.91 1209.94 L1724.32 1209.94 L1723.73 1209.94 L1723.15 1209.94 L1722.56 1209.94 L1721.97 1209.94 L1721.39 1209.94 L1720.8 1209.94 L1720.21 1209.94 L1719.63 1209.94 L1719.04 1209.94 L1718.45 1209.94 L1717.87 1209.94 L1717.28 1209.94 L1716.7 1209.94 L1716.11 1209.94 L1715.52 1209.94 L1714.94 1209.94 L1714.35 1209.94 L1713.76 1209.94 L1713.18 1209.94 L1712.59 1209.94 L1712 1209.94 L1711.42 1209.94 L1710.83 1209.94 L1710.24 1209.94 L1709.66 1209.94 L1709.07 1209.94 L1708.49 1209.94 L1707.9 1209.94 L1707.31 1209.94 L1706.73 1209.94 L1706.14 1209.94 L1705.55 1209.94 L1704.97 1209.94 L1704.38 1209.94 L1703.79 1209.94 L1703.21 1209.94 L1702.62 1209.94 L1702.04 1209.94 L1701.45 1209.94 L1700.86 1209.94 L1700.28 1209.94 L1699.69 1209.94 L1699.1 1209.94 L1698.52 1209.94 L1697.93 1209.94 L1697.34 1209.94 L1696.76 1209.94 L1696.17 1209.94 L1695.58 1209.94 L1695 1209.94 L1694.41 1209.94 L1693.83 1209.94 L1693.24 1209.94 L1692.65 1209.94 L1692.07 1209.94 L1691.48 1209.94 L1690.89 1209.94 L1690.31 1209.94 L1689.72 1209.94 L1689.13 1209.94 L1688.55 1209.94 L1687.96 1209.94 L1687.37 1209.94 L1686.79 1209.94 L1686.2 1209.94 L1685.62 1209.94 L1685.03 1209.94 L1684.44 1209.94 L1683.86 1209.94 L1683.27 1209.94 L1682.68 1209.94 L1682.1 1209.94 L1681.51 1209.94 L1680.92 1209.94 L1680.34 1209.94 L1679.75 1209.94 L1679.17 1209.94 L1678.58 1209.94 L1677.99 1209.94 L1677.41 1209.94 L1676.82 1209.94 L1676.23 1209.94 L1675.65 1209.94 L1675.06 1209.94 L1674.47 1209.94 L1673.89 1209.94 L1673.3 1209.94 L1672.71 1209.94 L1672.13 1209.94 L1671.54 1209.94 L1670.96 1209.94 L1670.37 1209.94 L1669.78 1209.94 L1669.2 1209.94 L1668.61 1209.94 L1668.02 1209.94 L1667.44 1209.94 L1666.85 1209.94 L1666.26 1209.94 L1665.68 1209.94 L1665.09 1209.94 L1664.5 1209.94 L1663.92 1209.94 L1663.33 1209.94 L1662.75 1209.94 L1662.16 1209.94 L1661.57 1209.94 L1660.99 1209.94 L1660.4 1209.94 L1659.81 1209.94 L1659.23 1209.94 L1658.64 1209.94 L1658.05 1209.94 L1657.47 1209.94 L1656.88 1209.94 L1656.29 1209.94 L1655.71 1209.94 L1655.12 1209.94 L1654.54 1209.94 L1653.95 1209.94 L1653.36 1209.94 L1652.78 1209.94 L1652.19 1209.94 L1651.6 1209.94 L1651.02 1209.94 L1650.43 1209.94 L1649.84 1209.94 L1649.26 1209.94 L1648.67 1209.94 L1648.09 1209.94 L1647.5 1209.94 L1646.91 1209.94 L1646.33 1209.94 L1645.74 1209.94 L1645.15 1209.94 L1644.57 1209.94 L1643.98 1209.94 L1643.39 1209.94 L1642.81 1209.94 L1642.22 1209.94 L1641.63 1209.94 L1641.05 1209.94 L1640.46 1209.94 L1639.88 1209.94 L1639.29 1209.94 L1638.7 1209.94 L1638.12 1209.94 L1637.53 1209.94 L1636.94 1209.94 L1636.36 1209.94 L1635.77 1209.94 L1635.18 1209.94 L1634.6 1209.94 L1634.01 1209.94 L1633.42 1209.94 L1632.84 1209.94 L1632.25 1209.94 L1631.67 1209.94 L1631.08 1209.94 L1630.49 1209.94 L1629.91 1209.94 L1629.32 1209.94 L1628.73 1209.94 L1628.15 1209.94 L1627.56 1209.94 L1626.97 1209.94 L1626.39 1209.94 L1625.8 1209.94 L1625.22 1209.94 L1624.63 1209.94 L1624.04 1209.94 L1623.46 1209.94 L1622.87 1209.94 L1622.28 1209.94 L1621.7 1209.94 L1621.11 1209.94 L1620.52 1209.94 L1619.94 1209.94 L1619.35 1209.94 L1618.76 1209.94 L1618.18 1209.94 L1617.59 1209.94 L1617.01 1209.94 L1616.42 1209.94 L1615.83 1209.94 L1615.25 1209.94 L1614.66 1209.94 L1614.07 1209.94 L1613.49 1209.94 L1612.9 1209.94 L1612.31 1209.94 L1611.73 1209.94 L1611.14 1209.94 L1610.55 1209.94 L1609.97 1209.94 L1609.38 1209.94 L1608.8 1209.94 L1608.21 1209.94 L1607.62 1209.94 L1607.04 1209.94 L1606.45 1209.94 L1605.86 1209.94 L1605.28 1209.94 L1604.69 1209.94 L1604.1 1209.94 L1603.52 1209.94 L1602.93 1209.94 L1602.34 1209.94 L1601.76 1209.94 L1601.17 1209.94 L1600.59 1209.94 L1600 1209.94 L1599.41 1209.94 L1598.83 1209.94 L1598.24 1209.94 L1597.65 1209.94 L1597.07 1209.94 L1596.48 1209.94 L1595.89 1209.94 L1595.31 1209.94 L1594.72 1209.94 L1594.14 1209.94 L1593.55 1209.94 L1592.96 1209.94 L1592.38 1209.94 L1591.79 1209.94 L1591.2 1209.94 L1590.62 1209.94 L1590.03 1209.94 L1589.44 1209.94 L1588.86 1209.94 L1588.27 1209.94 L1587.68 1209.94 L1587.1 1209.94 L1586.51 1209.94 L1585.93 1209.94 L1585.34 1209.94 L1584.75 1209.94 L1584.17 1209.94 L1583.58 1209.94 L1582.99 1209.94 L1582.41 1209.94 L1581.82 1209.94 L1581.23 1209.94 L1580.65 1209.94 L1580.06 1209.94 L1579.47 1209.94 L1578.89 1209.94 L1578.3 1209.94 L1577.72 1209.94 L1577.13 1209.94 L1576.54 1209.94 L1575.96 1209.94 L1575.37 1209.94 L1574.78 1209.94 L1574.2 1209.94 L1573.61 1209.94 L1573.02 1209.94 L1572.44 1209.94 L1571.85 1209.94 L1571.27 1209.94 L1570.68 1209.94 L1570.09 1209.94 L1569.51 1209.94 L1568.92 1209.94 L1568.33 1209.94 L1567.75 1209.94 L1567.16 1209.94 L1566.57 1209.94 L1565.99 1209.94 L1565.4 1209.94 L1564.81 1209.94 L1564.23 1209.94 L1563.64 1209.94 L1563.06 1209.94 L1562.47 1209.94 L1561.88 1209.94 L1561.3 1209.94 L1560.71 1209.94 L1560.12 1209.94 L1559.54 1209.94 L1558.95 1209.94 L1558.36 1209.94 L1557.78 1209.94 L1557.19 1209.94 L1556.6 1209.94 L1556.02 1209.94 L1555.43 1209.94 L1554.85 1209.94 L1554.26 1209.94 L1553.67 1209.94 L1553.09 1209.94 L1552.5 1209.94 L1551.91 1209.94 L1551.33 1209.94 L1550.74 1209.94 L1550.15 1209.94 L1549.57 1209.94 L1548.98 1209.94 L1548.4 1209.94 L1547.81 1209.94 L1547.22 1209.94 L1546.64 1209.94 L1546.05 1209.94 L1545.46 1209.94 L1544.88 1209.94 L1544.29 1209.94 L1543.7 1209.94 L1543.12 1209.94 L1542.53 1209.94 L1541.94 1209.94 L1541.36 1209.94 L1540.77 1209.94 L1540.19 1209.94 L1539.6 1209.94 L1539.01 1209.94 L1538.43 1209.94 L1537.84 1209.94 L1537.25 1209.94 L1536.67 1209.94 L1536.08 1209.94 L1535.49 1209.94 L1534.91 1209.94 L1534.32 1209.94 L1533.73 1209.94 L1533.15 1209.94 L1532.56 1209.94 L1531.98 1209.94 L1531.39 1209.94 L1530.8 1209.94 L1530.22 1209.94 L1529.63 1209.94 L1529.04 1209.94 L1528.46 1209.94 L1527.87 1209.94 L1527.28 1209.94 L1526.7 1209.94 L1526.11 1209.94 L1525.52 1209.94 L1524.94 1209.94 L1524.35 1209.94 L1523.77 1209.94 L1523.18 1209.94 L1522.59 1209.94 L1522.01 1209.94 L1521.42 1209.94 L1520.83 1209.94 L1520.25 1209.94 L1519.66 1209.94 L1519.07 1209.94 L1518.49 1209.94 L1517.9 1209.94 L1517.32 1209.94 L1516.73 1209.94 L1516.14 1209.94 L1515.56 1209.94 L1514.97 1209.94 L1514.38 1209.94 L1513.8 1209.94 L1513.21 1209.94 L1512.62 1209.94 L1512.04 1209.94 L1511.45 1209.94 L1510.86 1209.94 L1510.28 1209.94 L1509.69 1209.94 L1509.11 1209.94 L1508.52 1209.94 L1507.93 1209.94 L1507.35 1209.94 L1506.76 1209.94 L1506.17 1209.94 L1505.59 1209.94 L1505 1209.94 L1504.41 1209.94 L1503.83 1209.94 L1503.24 1209.94 L1502.65 1209.94 L1502.07 1209.94 L1501.48 1209.94 L1500.9 1209.94 L1500.31 1209.94 L1499.72 1209.94 L1499.14 1209.94 L1498.55 1209.94 L1497.96 1209.94 L1497.38 1209.94 L1496.79 1209.94 L1496.2 1209.94 L1495.62 1209.94 L1495.03 1209.94 L1494.45 1209.94 L1493.86 1209.94 L1493.27 1209.94 L1492.69 1209.94 L1492.1 1209.94 L1491.51 1209.94 L1490.93 1209.94 L1490.34 1209.94 L1489.75 1209.94 L1489.17 1209.94 L1488.58 1209.94 L1487.99 1209.94 L1487.41 1209.94 L1486.82 1209.94 L1486.24 1209.94 L1485.65 1209.94 L1485.06 1209.94 L1484.48 1209.94 L1483.89 1209.94 L1483.3 1209.94 L1482.72 1209.94 L1482.13 1209.94 L1481.54 1209.94 L1480.96 1209.94 L1480.37 1209.94 L1479.78 1209.94 L1479.2 1209.94 L1478.61 1209.94 L1478.03 1209.94 L1477.44 1209.94 L1476.85 1209.94 L1476.27 1209.94 L1475.68 1209.94 L1475.09 1209.94 L1474.51 1209.94 L1473.92 1209.94 L1473.33 1209.94 L1472.75 1209.94 L1472.16 1209.94 L1471.57 1209.94 L1470.99 1209.94 L1470.4 1209.94 L1469.82 1209.94 L1469.23 1209.94 L1468.64 1209.94 L1468.06 1209.94 L1467.47 1209.94 L1466.88 1209.94 L1466.3 1209.94 L1465.71 1209.94 L1465.12 1209.94 L1464.54 1209.94 L1463.95 1209.94 L1463.37 1209.94 L1462.78 1209.94 L1462.19 1209.94 L1461.61 1209.94 L1461.02 1209.94 L1460.43 1209.94 L1459.85 1209.94 L1459.26 1209.94 L1458.67 1209.94 L1458.09 1209.94 L1457.5 1209.94 L1456.91 1209.94 L1456.33 1209.94 L1455.74 1209.94 L1455.16 1209.94 L1454.57 1209.94 L1453.98 1209.94 L1453.4 1209.94 L1452.81 1209.94 L1452.22 1209.94 L1451.64 1209.94 L1451.05 1209.94 L1450.46 1209.94 L1449.88 1209.94 L1449.29 1209.94 L1448.7 1209.94 L1448.12 1209.94 L1447.53 1209.94 L1446.95 1209.94 L1446.36 1209.94 L1445.77 1209.94 L1445.19 1209.94 L1444.6 1209.94 L1444.01 1209.94 L1443.43 1209.94 L1442.84 1209.94 L1442.25 1209.94 L1441.67 1209.94 L1441.08 1209.94 L1440.5 1209.94 L1439.91 1209.94 L1439.32 1209.94 L1438.74 1209.94 L1438.15 1209.94 L1437.56 1209.94 L1436.98 1209.94 L1436.39 1209.94 L1435.8 1209.94 L1435.22 1209.94 L1434.63 1209.94 L1434.04 1209.94 L1433.46 1209.94 L1432.87 1209.94 L1432.29 1209.94 L1431.7 1209.94 L1431.11 1209.94 L1430.53 1209.94 L1429.94 1209.94 L1429.35 1209.94 L1428.77 1209.94 L1428.18 1209.94 L1427.59 1209.94 L1427.01 1209.94 L1426.42 1209.94 L1425.83 1209.94 L1425.25 1209.94 L1424.66 1209.94 L1424.08 1209.94 L1423.49 1209.94 L1422.9 1209.94 L1422.32 1209.94 L1421.73 1209.94 L1421.14 1209.94 L1420.56 1209.94 L1419.97 1209.94 L1419.38 1209.94 L1418.8 1209.94 L1418.21 1209.94 L1417.63 1209.94 L1417.04 1209.94 L1416.45 1209.94 L1415.87 1209.94 L1415.28 1209.94 L1414.69 1209.94 L1414.11 1209.94 L1413.52 1209.94 L1412.93 1209.94 L1412.35 1209.94 L1411.76 1209.94 L1411.17 1209.94 L1410.59 1209.94 L1410 1209.94 L1409.42 1209.94 L1408.83 1209.94 L1408.24 1209.94 L1407.66 1209.94 L1407.07 1209.94 L1406.48 1209.94 L1405.9 1209.94 L1405.31 1209.94 L1404.72 1209.94 L1404.14 1209.94 L1403.55 1209.94 L1402.96 1209.94 L1402.38 1209.94 L1401.79 1209.94 L1401.21 1209.94 L1400.62 1209.94 L1400.03 1209.94 L1399.45 1209.94 L1398.86 1209.94 L1398.27 1209.94 L1397.69 1209.94 L1397.1 1209.94 L1396.51 1209.94 L1395.93 1209.94 L1395.34 1209.94 L1394.75 1209.94 L1394.17 1209.94 L1393.58 1209.94 L1393 1209.94 L1392.41 1209.94 L1391.82 1209.94 L1391.24 1209.94 L1390.65 1209.94 L1390.06 1209.94 L1389.48 1209.94 L1388.89 1209.94 L1388.3 1209.94 L1387.72 1209.94 L1387.13 1209.94 L1386.55 1209.94 L1385.96 1209.94 L1385.37 1209.94 L1384.79 1209.94 L1384.2 1209.94 L1383.61 1209.94 L1383.03 1209.94 L1382.44 1209.94 L1381.85 1209.94 L1381.27 1209.94 L1380.68 1209.94 L1380.09 1209.94 L1379.51 1209.94 L1378.92 1209.94 L1378.34 1209.94 L1377.75 1209.94 L1377.16 1209.94 L1376.58 1209.94 L1375.99 1209.94 L1375.4 1209.94 L1374.82 1209.94 L1374.23 1209.94 L1373.64 1209.94 L1373.06 1209.94 L1372.47 1209.94 L1371.88 1209.94 L1371.3 1209.94 L1370.71 1209.94 L1370.13 1209.94 L1369.54 1209.94 L1368.95 1209.94 L1368.37 1209.94 L1367.78 1209.94 L1367.19 1209.94 L1366.61 1209.94 L1366.02 1209.94 L1365.43 1209.94 L1364.85 1209.94 L1364.26 1209.94 L1363.68 1209.94 L1363.09 1209.94 L1362.5 1209.94 L1361.92 1209.94 L1361.33 1209.94 L1360.74 1209.94 L1360.16 1209.94 L1359.57 1209.94 L1358.98 1209.94 L1358.4 1209.94 L1357.81 1209.94 L1357.22 1209.94 L1356.64 1209.94 L1356.05 1209.94 L1355.47 1209.94 L1354.88 1209.94 L1354.29 1209.94 L1353.71 1209.94 L1353.12 1209.94 L1352.53 1209.94 L1351.95 1209.94 L1351.36 1209.94 L1350.77 1209.94 L1350.19 1209.94 L1349.6 1209.94 L1349.01 1209.94 L1348.43 1209.94 L1347.84 1209.94 L1347.26 1209.94 L1346.67 1209.94 L1346.08 1209.94 L1345.5 1209.94 L1344.91 1209.94 L1344.32 1209.94 L1343.74 1209.94 L1343.15 1209.94 L1342.56 1209.94 L1341.98 1209.94 L1341.39 1209.94 L1340.8 1209.94 L1340.22 1209.94 L1339.63 1209.94 L1339.05 1209.94 L1338.46 1209.94 L1337.87 1209.94 L1337.29 1209.94 L1336.7 1209.94 L1336.11 1209.94 L1335.53 1209.94 L1334.94 1209.94 L1334.35 1209.94 L1333.77 1209.94 L1333.18 1209.94 L1332.6 1209.94 L1332.01 1209.94 L1331.42 1209.94 L1330.84 1209.94 L1330.25 1209.94 L1329.66 1209.94 L1329.08 1209.94 L1328.49 1209.94 L1327.9 1209.94 L1327.32 1209.94 L1326.73 1209.94 L1326.14 1209.94 L1325.56 1209.94 L1324.97 1209.94 L1324.39 1209.94 L1323.8 1209.94 L1323.21 1209.94 L1322.63 1209.94 L1322.04 1209.94 L1321.45 1209.94 L1320.87 1209.94 L1320.28 1209.94 L1319.69 1209.94 L1319.11 1209.94 L1318.52 1209.94 L1317.93 1209.94 L1317.35 1209.94 L1316.76 1209.94 L1316.18 1209.94 L1315.59 1209.94 L1315 1209.94 L1314.42 1209.94 L1313.83 1209.94 L1313.24 1209.94 L1312.66 1209.94 L1312.07 1209.94 L1311.48 1209.94 L1310.9 1209.94 L1310.31 1209.94 L1309.73 1209.94 L1309.14 1209.94 L1308.55 1209.94 L1307.97 1209.94 L1307.38 1209.94 L1306.79 1209.94 L1306.21 1209.94 L1305.62 1209.94 L1305.03 1209.94 L1304.45 1209.94 L1303.86 1209.94 L1303.27 1209.94 L1302.69 1209.94 L1302.1 1209.94 L1301.52 1209.94 L1300.93 1209.94 L1300.34 1209.94 L1299.76 1209.94 L1299.17 1209.94 L1298.58 1209.94 L1298 1209.94 L1297.41 1209.94 L1296.82 1209.94 L1296.24 1209.94 L1295.65 1209.94 L1295.06 1209.94 L1294.48 1209.94 L1293.89 1209.94 L1293.31 1209.94 L1292.72 1209.94 L1292.13 1209.94 L1291.55 1209.94 L1290.96 1209.94 L1290.37 1209.94 L1289.79 1209.94 L1289.2 1209.94 L1288.61 1209.94 L1288.03 1209.94 L1287.44 1209.94 L1286.86 1209.94 L1286.27 1209.94 L1285.68 1209.94 L1285.1 1209.94 L1284.51 1209.94 L1283.92 1209.94 L1283.34 1209.94 L1282.75 1209.94 L1282.16 1209.94 L1281.58 1209.94 L1280.99 1209.94 L1280.4 1209.94 L1279.82 1209.94 L1279.23 1209.94 L1278.65 1209.94 L1278.06 1209.94 L1277.47 1209.94 L1276.89 1209.94 L1276.3 1209.94 L1275.71 1209.94 L1275.13 1209.94 L1274.54 1209.94 L1273.95 1209.94 L1273.37 1209.94 L1272.78 1209.94 L1272.19 1209.94 L1271.61 1209.94 L1271.02 1209.94 L1270.44 1209.94 L1269.85 1209.94 L1269.26 1209.94 L1268.68 1209.94 L1268.09 1209.94 L1267.5 1209.94 L1266.92 1209.94 L1266.33 1209.94 L1265.74 1209.94 L1265.16 1209.94 L1264.57 1209.94 L1263.98 1209.94 L1263.4 1209.94 L1262.81 1209.94 L1262.23 1209.94 L1261.64 1209.94 L1261.05 1209.94 L1260.47 1209.94 L1259.88 1209.94 L1259.29 1209.94 L1258.71 1209.94 L1258.12 1209.94 L1257.53 1209.94 L1256.95 1209.94 L1256.36 1209.94 L1255.78 1209.94 L1255.19 1209.94 L1254.6 1209.94 L1254.02 1209.94 L1253.43 1209.94 L1252.84 1209.94 L1252.26 1209.94 L1251.67 1209.94 L1251.08 1209.94 L1250.5 1209.94 L1249.91 1209.94 L1249.32 1209.94 L1248.74 1209.94 L1248.15 1209.94 L1247.57 1209.94 L1246.98 1209.94 L1246.39 1209.94 L1245.81 1209.94 L1245.22 1209.94 L1244.63 1209.94 L1244.05 1209.94 L1243.46 1209.94 L1242.87 1209.94 L1242.29 1209.94 L1241.7 1209.94 L1241.11 1209.94 L1240.53 1209.94 L1239.94 1209.94 L1239.36 1209.94 L1238.77 1209.94 L1238.18 1209.94 L1237.6 1209.94 L1237.01 1209.94 L1236.42 1209.94 L1235.84 1209.94 L1235.25 1209.94 L1234.66 1209.94 L1234.08 1209.94 L1233.49 1209.94 L1232.91 1209.94 L1232.32 1209.94 L1231.73 1209.94 L1231.15 1209.94 L1230.56 1209.94 L1229.97 1209.94 L1229.39 1209.94 L1228.8 1209.94 L1228.21 1209.94 L1227.63 1209.94 L1227.04 1209.94 L1226.45 1209.94 L1225.87 1209.94 L1225.28 1209.94 L1224.7 1209.94 L1224.11 1209.94 L1223.52 1209.94 L1222.94 1209.94 L1222.35 1209.94 L1221.76 1209.94 L1221.18 1209.94 L1220.59 1209.94 L1220 1209.94 L1219.42 1209.94 L1218.83 1209.94 L1218.24 1209.94 L1217.66 1209.94 L1217.07 1209.94 L1216.49 1209.94 L1215.9 1209.94 L1215.31 1209.94 L1214.73 1209.94 L1214.14 1209.94 L1213.55 1209.94 L1212.97 1209.94 L1212.38 1209.94 L1211.79 1209.94 L1211.21 1209.94 L1210.62 1209.94 L1210.03 1209.94 L1209.45 1209.94 L1208.86 1209.94 L1208.28 1209.94 L1207.69 1209.94 L1207.1 1209.94 L1206.52 1209.94 L1205.93 1209.94 L1205.34 1209.94 L1204.76 1209.94 L1204.17 1209.94 L1203.58 1209.94 L1203 1209.94 L1202.41 1209.94 L1201.83 1209.94 L1201.24 1209.94 L1200.65 1209.94 L1200.07 1209.94 L1199.48 1209.94 L1198.89 1209.94 L1198.31 1209.94 L1197.72 1209.94 L1197.13 1209.94 L1196.55 1209.94 L1195.96 1209.94 L1195.37 1209.94 L1194.79 1209.94 L1194.2 1209.94 L1193.62 1209.94 L1193.03 1209.94 L1192.44 1209.94 L1191.86 1209.94 L1191.27 1209.94 L1190.68 1209.94 L1190.1 1209.94 L1189.51 1209.94 L1188.92 1209.94 L1188.34 1209.94 L1187.75 1209.94 L1187.16 1209.94 L1186.58 1209.94 L1185.99 1209.94 L1185.41 1209.94 L1184.82 1209.94 L1184.23 1209.94 L1183.65 1209.94 L1183.06 1209.94 L1182.47 1209.94 L1181.89 1209.94 L1181.3 1209.94 L1180.71 1209.94 L1180.13 1209.94 L1179.54 1209.94 L1178.96 1209.94 L1178.37 1209.94 L1177.78 1209.94 L1177.2 1209.94 L1176.61 1209.94 L1176.02 1209.94 L1175.44 1209.94 L1174.85 1209.94 L1174.26 1209.94 L1173.68 1209.94 L1173.09 1209.94 L1172.5 1209.94 L1171.92 1209.94 L1171.33 1209.94 L1170.75 1209.94 L1170.16 1209.94 L1169.57 1209.94 L1168.99 1209.94 L1168.4 1209.94 L1167.81 1209.94 L1167.23 1209.94 L1166.64 1209.94 L1166.05 1209.94 L1165.47 1209.94 L1164.88 1209.94 L1164.29 1209.94 L1163.71 1209.94 L1163.12 1209.94 L1162.54 1209.94 L1161.95 1209.94 L1161.36 1209.94 L1160.78 1209.94 L1160.19 1209.94 L1159.6 1209.94 L1159.02 1209.94 L1158.43 1209.94 L1157.84 1209.94 L1157.26 1209.94 L1156.67 1209.94 L1156.09 1209.94 L1155.5 1209.94 L1154.91 1209.94 L1154.33 1209.94 L1153.74 1209.94 L1153.15 1209.94 L1152.57 1209.94 L1151.98 1209.94 L1151.39 1209.94 L1150.81 1209.94 L1150.22 1209.94 L1149.63 1209.94 L1149.05 1209.94 L1148.46 1209.94 L1147.88 1209.94 L1147.29 1209.94 L1146.7 1209.94 L1146.12 1209.94 L1145.53 1209.94 L1144.94 1209.94 L1144.36 1209.94 L1143.77 1209.94 L1143.18 1209.94 L1142.6 1209.94 L1142.01 1209.94 L1141.42 1209.94 L1140.84 1209.94 L1140.25 1209.94 L1139.67 1209.94 L1139.08 1209.94 L1138.49 1209.94 L1137.91 1209.94 L1137.32 1209.94 L1136.73 1209.94 L1136.15 1209.94 L1135.56 1209.94 L1134.97 1209.94 L1134.39 1209.94 L1133.8 1209.94 L1133.21 1209.94 L1132.63 1209.94 L1132.04 1209.94 L1131.46 1209.94 L1130.87 1209.94 L1130.28 1209.94 L1129.7 1209.94 L1129.11 1209.94 L1128.52 1209.94 L1127.94 1209.94 L1127.35 1209.94 L1126.76 1209.94 L1126.18 1209.94 L1125.59 1209.94 L1125.01 1209.94 L1124.42 1209.94 L1123.83 1209.94 L1123.25 1209.94 L1122.66 1209.94 L1122.07 1209.94 L1121.49 1209.94 L1120.9 1209.94 L1120.31 1209.94 L1119.73 1209.94 L1119.14 1209.94 L1118.55 1209.94 L1117.97 1209.94 L1117.38 1209.94 L1116.8 1209.94 L1116.21 1209.94 L1115.62 1209.94 L1115.04 1209.94 L1114.45 1209.94 L1113.86 1209.94 L1113.28 1209.94 L1112.69 1209.94 L1112.1 1209.94 L1111.52 1209.94 L1110.93 1209.94 L1110.34 1209.94 L1109.76 1209.94 L1109.17 1209.94 L1108.59 1209.94 L1108 1209.94 L1107.41 1209.94 L1106.83 1209.94 L1106.24 1209.94 L1105.65 1209.94 L1105.07 1209.94 L1104.48 1209.94 L1103.89 1209.94 L1103.31 1209.94 L1102.72 1209.94 L1102.14 1209.94 L1101.55 1209.94 L1100.96 1209.94 L1100.38 1209.94 L1099.79 1209.94 L1099.2 1209.94 L1098.62 1209.94 L1098.03 1209.94 L1097.44 1209.94 L1096.86 1209.94 L1096.27 1209.94 L1095.68 1209.94 L1095.1 1209.94 L1094.51 1209.94 L1093.93 1209.94 L1093.34 1209.94 L1092.75 1209.94 L1092.17 1209.94 L1091.58 1209.94 L1090.99 1209.94 L1090.41 1209.94 L1089.82 1209.94 L1089.23 1209.94 L1088.65 1209.94 L1088.06 1209.94 L1087.47 1209.94 L1086.89 1209.94 L1086.3 1209.94 L1085.72 1209.94 L1085.13 1209.94 L1084.54 1209.94 L1083.96 1209.94 L1083.37 1209.94 L1082.78 1209.94 L1082.2 1209.94 L1081.61 1209.94 L1081.02 1209.94 L1080.44 1209.94 L1079.85 1209.94 L1079.26 1209.94 L1078.68 1209.94 L1078.09 1209.94 L1077.51 1209.94 L1076.92 1209.94 L1076.33 1209.94 L1075.75 1209.94 L1075.16 1209.94 L1074.57 1209.94 L1073.99 1209.94 L1073.4 1209.94 L1072.81 1209.94 L1072.23 1209.94 L1071.64 1209.94 L1071.06 1209.94 L1070.47 1209.94 L1069.88 1209.94 L1069.3 1209.94 L1068.71 1209.94 L1068.12 1209.94 L1067.54 1209.94 L1066.95 1209.94 L1066.36 1209.94 L1065.78 1209.94 L1065.19 1209.94 L1064.6 1209.94 L1064.02 1209.94 L1063.43 1209.94 L1062.85 1209.94 L1062.26 1209.94 L1061.67 1209.94 L1061.09 1209.94 L1060.5 1209.94 L1059.91 1209.94 L1059.33 1209.94 L1058.74 1209.94 L1058.15 1209.94 L1057.57 1209.94 L1056.98 1209.94 L1056.39 1209.94 L1055.81 1209.94 L1055.22 1209.94 L1054.64 1209.94 L1054.05 1209.94 L1053.46 1209.94 L1052.88 1209.94 L1052.29 1209.94 L1051.7 1209.94 L1051.12 1209.94 L1050.53 1209.94 L1049.94 1209.94 L1049.36 1209.94 L1048.77 1209.94 L1048.19 1209.94 L1047.6 1209.94 L1047.01 1209.94 L1046.43 1209.94 L1045.84 1209.94 L1045.25 1209.94 L1044.67 1209.94 L1044.08 1209.94 L1043.49 1209.94 L1042.91 1209.94 L1042.32 1209.94 L1041.73 1209.94 L1041.15 1209.94 L1040.56 1209.94 L1039.98 1209.94 L1039.39 1209.94 L1038.8 1209.94 L1038.22 1209.94 L1037.63 1209.94 L1037.04 1209.94 L1036.46 1209.94 L1035.87 1209.94 L1035.28 1209.94 L1034.7 1209.94 L1034.11 1209.94 L1033.52 1209.94 L1032.94 1209.94 L1032.35 1209.94 L1031.77 1209.94 L1031.18 1209.94 L1030.59 1209.94 L1030.01 1209.94 L1029.42 1209.94 L1028.83 1209.94 L1028.25 1209.94 L1027.66 1209.94 L1027.07 1209.94 L1026.49 1209.94 L1025.9 1209.94 L1025.32 1209.94 L1024.73 1209.94 L1024.14 1209.94 L1023.56 1209.94 L1022.97 1209.94 L1022.38 1209.94 L1021.8 1209.94 L1021.21 1209.94 L1020.62 1209.94 L1020.04 1209.94 L1019.45 1209.94 L1018.86 1209.94 L1018.28 1209.94 L1017.69 1209.94 L1017.11 1209.94 L1016.52 1209.94 L1015.93 1209.94 L1015.35 1209.94 L1014.76 1209.94 L1014.17 1209.94 L1013.59 1209.94 L1013 1209.94 L1012.41 1209.94 L1011.83 1209.94 L1011.24 1209.94 L1010.65 1209.94 L1010.07 1209.94 L1009.48 1209.94 L1008.9 1209.94 L1008.31 1209.94 L1007.72 1209.94 L1007.14 1209.94 L1006.55 1209.94 L1005.96 1209.94 L1005.38 1209.94 L1004.79 1209.94 L1004.2 1209.94 L1003.62 1209.94 L1003.03 1209.94 L1002.44 1209.94 L1001.86 1209.94 L1001.27 1209.94 L1000.69 1209.94 L1000.1 1209.94 L999.513 1209.94 L998.926 1209.94 L998.34 1209.94 L997.754 1209.94 L997.167 1209.94 L996.581 1209.94 L995.994 1209.94 L995.408 1209.94 L994.822 1209.94 L994.235 1209.94 L993.649 1209.94 L993.062 1209.94 L992.476 1209.94 L991.889 1209.94 L991.303 1209.94 L990.717 1209.94 L990.13 1209.94 L989.544 1209.94 L988.957 1209.94 L988.371 1209.94 L987.785 1209.94 L987.198 1209.94 L986.612 1209.94 L986.025 1209.94  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.21 986.612,1210.21 987.198,1210.21 987.785,1210.21 988.371,1210.21 988.957,1210.21 989.544,1210.21 990.13,1210.21 990.717,1210.21 991.303,1210.21 991.889,1210.21 992.476,1210.21 993.062,1210.21 993.649,1210.21 994.235,1210.21 994.822,1210.21 995.408,1210.21 995.994,1210.21 996.581,1210.21 997.167,1210.21 997.754,1210.21 998.34,1210.21 998.926,1210.21 999.513,1210.21 1000.1,1210.21 1000.69,1210.21 1001.27,1210.21 1001.86,1210.21 1002.44,1210.21 1003.03,1210.21 1003.62,1210.21 1004.2,1210.21 1004.79,1210.21 1005.38,1210.21 1005.96,1210.21 1006.55,1210.21 1007.14,1210.21 1007.72,1210.21 1008.31,1210.21 1008.9,1210.21 1009.48,1210.21 1010.07,1210.21 1010.65,1210.21 1011.24,1210.21 1011.83,1210.21 1012.41,1210.21 1013,1210.21 1013.59,1210.21 1014.17,1210.21 1014.76,1210.21 1015.35,1210.21 1015.93,1210.21 1016.52,1210.21 1017.11,1210.21 1017.69,1210.21 1018.28,1210.21 1018.86,1210.21 1019.45,1210.21 1020.04,1210.21 1020.62,1210.21 1021.21,1210.21 1021.8,1210.21 1022.38,1210.21 1022.97,1210.21 1023.56,1210.21 1024.14,1210.21 1024.73,1210.21 1025.32,1210.21 1025.9,1210.21 1026.49,1210.21 1027.07,1210.21 1027.66,1210.21 1028.25,1210.21 1028.83,1210.21 1029.42,1210.21 1030.01,1210.21 1030.59,1210.21 1031.18,1210.21 1031.77,1210.21 1032.35,1210.21 1032.94,1210.21 1033.52,1210.21 1034.11,1210.21 1034.7,1210.21 1035.28,1210.21 1035.87,1210.21 1036.46,1210.21 1037.04,1210.21 1037.63,1210.21 1038.22,1210.21 1038.8,1210.21 1039.39,1210.21 1039.98,1210.21 1040.56,1210.21 1041.15,1210.21 1041.73,1210.21 1042.32,1210.21 1042.91,1210.21 1043.49,1210.21 1044.08,1210.21 1044.67,1210.21 1045.25,1210.21 1045.84,1210.21 1046.43,1210.21 1047.01,1210.21 1047.6,1210.21 1048.19,1210.21 1048.77,1210.21 1049.36,1210.21 1049.94,1210.21 1050.53,1210.21 1051.12,1210.21 1051.7,1210.21 1052.29,1210.21 1052.88,1210.21 1053.46,1210.21 1054.05,1210.21 1054.64,1210.21 1055.22,1210.21 1055.81,1210.21 1056.39,1210.21 1056.98,1210.21 1057.57,1210.21 1058.15,1210.21 1058.74,1210.21 1059.33,1210.21 1059.91,1210.21 1060.5,1210.21 1061.09,1210.21 1061.67,1210.21 1062.26,1210.21 1062.85,1210.21 1063.43,1210.21 1064.02,1210.21 1064.6,1210.21 1065.19,1210.21 1065.78,1210.21 1066.36,1210.21 1066.95,1210.21 1067.54,1210.21 1068.12,1210.21 1068.71,1210.21 1069.3,1210.21 1069.88,1210.21 1070.47,1210.21 1071.06,1210.21 1071.64,1210.21 1072.23,1210.21 1072.81,1210.21 1073.4,1210.21 1073.99,1210.21 1074.57,1210.21 1075.16,1210.21 1075.75,1210.21 1076.33,1210.21 1076.92,1210.21 1077.51,1210.21 1078.09,1210.21 1078.68,1210.21 1079.26,1210.21 1079.85,1210.21 1080.44,1210.21 1081.02,1210.21 1081.61,1210.21 1082.2,1210.21 1082.78,1210.21 1083.37,1210.21 1083.96,1210.21 1084.54,1210.21 1085.13,1210.21 1085.72,1210.21 1086.3,1210.21 1086.89,1210.21 1087.47,1210.21 1088.06,1210.21 1088.65,1210.21 1089.23,1210.21 1089.82,1210.21 1090.41,1210.21 1090.99,1210.21 1091.58,1210.21 1092.17,1210.21 1092.75,1210.21 1093.34,1210.21 1093.93,1210.21 1094.51,1210.21 1095.1,1210.21 1095.68,1210.21 1096.27,1210.21 1096.86,1210.21 1097.44,1210.21 1098.03,1210.21 1098.62,1210.21 1099.2,1210.21 1099.79,1210.21 1100.38,1210.21 1100.96,1210.21 1101.55,1210.21 1102.14,1210.21 1102.72,1210.21 1103.31,1210.21 1103.89,1210.21 1104.48,1210.21 1105.07,1210.21 1105.65,1210.21 1106.24,1210.21 1106.83,1210.21 1107.41,1210.21 1108,1210.21 1108.59,1210.21 1109.17,1210.21 1109.76,1210.21 1110.34,1210.21 1110.93,1210.21 1111.52,1210.21 1112.1,1210.21 1112.69,1210.21 1113.28,1210.21 1113.86,1210.21 1114.45,1210.21 1115.04,1210.21 1115.62,1210.21 1116.21,1210.21 1116.8,1210.21 1117.38,1210.21 1117.97,1210.21 1118.55,1210.21 1119.14,1210.21 1119.73,1210.21 1120.31,1210.21 1120.9,1210.21 1121.49,1210.21 1122.07,1210.21 1122.66,1210.21 1123.25,1210.21 1123.83,1210.21 1124.42,1210.21 1125.01,1210.21 1125.59,1210.21 1126.18,1210.21 1126.76,1210.21 1127.35,1210.21 1127.94,1210.21 1128.52,1210.21 1129.11,1210.21 1129.7,1210.21 1130.28,1210.21 1130.87,1210.21 1131.46,1210.21 1132.04,1210.21 1132.63,1210.21 1133.21,1210.21 1133.8,1210.21 1134.39,1210.21 1134.97,1210.21 1135.56,1210.21 1136.15,1210.21 1136.73,1210.21 1137.32,1210.21 1137.91,1210.21 1138.49,1210.21 1139.08,1210.21 1139.67,1210.21 1140.25,1210.21 1140.84,1210.21 1141.42,1210.21 1142.01,1210.21 1142.6,1210.21 1143.18,1210.21 1143.77,1210.21 1144.36,1210.21 1144.94,1210.21 1145.53,1210.21 1146.12,1210.21 1146.7,1210.21 1147.29,1210.21 1147.88,1210.21 1148.46,1210.21 1149.05,1210.21 1149.63,1210.21 1150.22,1210.21 1150.81,1210.21 1151.39,1210.21 1151.98,1210.21 1152.57,1210.21 1153.15,1210.21 1153.74,1210.21 1154.33,1210.21 1154.91,1210.21 1155.5,1210.21 1156.09,1210.21 1156.67,1210.21 1157.26,1210.21 1157.84,1210.21 1158.43,1210.21 1159.02,1210.21 1159.6,1210.21 1160.19,1210.21 1160.78,1210.21 1161.36,1210.21 1161.95,1210.21 1162.54,1210.21 1163.12,1210.21 1163.71,1210.21 1164.29,1210.21 1164.88,1210.21 1165.47,1210.21 1166.05,1210.21 1166.64,1210.21 1167.23,1210.21 1167.81,1210.21 1168.4,1210.21 1168.99,1210.21 1169.57,1210.21 1170.16,1210.21 1170.75,1210.21 1171.33,1210.21 1171.92,1210.21 1172.5,1210.21 1173.09,1210.21 1173.68,1210.21 1174.26,1210.21 1174.85,1210.21 1175.44,1210.21 1176.02,1210.21 1176.61,1210.21 1177.2,1210.21 1177.78,1210.21 1178.37,1210.21 1178.96,1210.21 1179.54,1210.21 1180.13,1210.21 1180.71,1210.21 1181.3,1210.21 1181.89,1210.21 1182.47,1210.21 1183.06,1210.21 1183.65,1210.21 1184.23,1210.21 1184.82,1210.21 1185.41,1210.21 1185.99,1210.21 1186.58,1210.21 1187.16,1210.21 1187.75,1210.21 1188.34,1210.21 1188.92,1210.21 1189.51,1210.21 1190.1,1210.21 1190.68,1210.21 1191.27,1210.21 1191.86,1210.21 1192.44,1210.21 1193.03,1210.21 1193.62,1210.21 1194.2,1210.21 1194.79,1210.21 1195.37,1210.21 1195.96,1210.21 1196.55,1210.21 1197.13,1210.21 1197.72,1210.21 1198.31,1210.21 1198.89,1210.21 1199.48,1210.21 1200.07,1210.21 1200.65,1210.21 1201.24,1210.21 1201.83,1210.21 1202.41,1210.21 1203,1210.21 1203.58,1210.21 1204.17,1210.21 1204.76,1210.21 1205.34,1210.21 1205.93,1210.21 1206.52,1210.21 1207.1,1210.21 1207.69,1210.21 1208.28,1210.21 1208.86,1210.21 1209.45,1210.21 1210.03,1210.21 1210.62,1210.21 1211.21,1210.21 1211.79,1210.21 1212.38,1210.21 1212.97,1210.21 1213.55,1210.21 1214.14,1210.21 1214.73,1210.21 1215.31,1210.21 1215.9,1210.21 1216.49,1210.21 1217.07,1210.21 1217.66,1210.21 1218.24,1210.21 1218.83,1210.21 1219.42,1210.21 1220,1210.21 1220.59,1210.21 1221.18,1210.21 1221.76,1210.21 1222.35,1210.21 1222.94,1210.21 1223.52,1210.21 1224.11,1210.21 1224.7,1210.21 1225.28,1210.21 1225.87,1210.21 1226.45,1210.21 1227.04,1210.21 1227.63,1210.21 1228.21,1210.21 1228.8,1210.21 1229.39,1210.21 1229.97,1210.21 1230.56,1210.21 1231.15,1210.21 1231.73,1210.21 1232.32,1210.21 1232.91,1210.21 1233.49,1210.21 1234.08,1210.21 1234.66,1210.21 1235.25,1210.21 1235.84,1210.21 1236.42,1210.21 1237.01,1210.21 1237.6,1210.21 1238.18,1210.21 1238.77,1210.21 1239.36,1210.21 1239.94,1210.21 1240.53,1210.21 1241.11,1210.21 1241.7,1210.21 1242.29,1210.21 1242.87,1210.21 1243.46,1210.21 1244.05,1210.21 1244.63,1210.21 1245.22,1210.21 1245.81,1210.21 1246.39,1210.21 1246.98,1210.21 1247.57,1210.21 1248.15,1210.21 1248.74,1210.21 1249.32,1210.21 1249.91,1210.21 1250.5,1210.21 1251.08,1210.21 1251.67,1210.21 1252.26,1210.21 1252.84,1210.21 1253.43,1210.21 1254.02,1210.21 1254.6,1210.21 1255.19,1210.21 1255.78,1210.21 1256.36,1210.21 1256.95,1210.21 1257.53,1210.21 1258.12,1210.21 1258.71,1210.21 1259.29,1210.21 1259.88,1210.21 1260.47,1210.21 1261.05,1210.21 1261.64,1210.21 1262.23,1210.21 1262.81,1210.21 1263.4,1210.21 1263.98,1210.21 1264.57,1210.21 1265.16,1210.21 1265.74,1210.21 1266.33,1210.21 1266.92,1210.21 1267.5,1210.21 1268.09,1210.21 1268.68,1210.21 1269.26,1210.21 1269.85,1210.21 1270.44,1210.21 1271.02,1210.21 1271.61,1210.21 1272.19,1210.21 1272.78,1210.21 1273.37,1210.21 1273.95,1210.21 1274.54,1210.21 1275.13,1210.21 1275.71,1210.21 1276.3,1210.21 1276.89,1210.21 1277.47,1210.21 1278.06,1210.21 1278.65,1210.21 1279.23,1210.21 1279.82,1210.21 1280.4,1210.21 1280.99,1210.21 1281.58,1210.21 1282.16,1210.21 1282.75,1210.21 1283.34,1210.21 1283.92,1210.21 1284.51,1210.21 1285.1,1210.21 1285.68,1210.21 1286.27,1210.21 1286.86,1210.21 1287.44,1210.21 1288.03,1210.21 1288.61,1210.21 1289.2,1210.21 1289.79,1210.21 1290.37,1210.21 1290.96,1210.21 1291.55,1210.21 1292.13,1210.21 1292.72,1210.21 1293.31,1210.21 1293.89,1210.21 1294.48,1210.21 1295.06,1210.21 1295.65,1210.21 1296.24,1210.21 1296.82,1210.21 1297.41,1210.21 1298,1210.21 1298.58,1210.21 1299.17,1210.21 1299.76,1210.21 1300.34,1210.21 1300.93,1210.21 1301.52,1210.21 1302.1,1210.21 1302.69,1210.21 1303.27,1210.21 1303.86,1210.21 1304.45,1210.21 1305.03,1210.21 1305.62,1210.21 1306.21,1210.21 1306.79,1210.21 1307.38,1210.21 1307.97,1210.21 1308.55,1210.21 1309.14,1210.21 1309.73,1210.21 1310.31,1210.21 1310.9,1210.21 1311.48,1210.21 1312.07,1210.21 1312.66,1210.21 1313.24,1210.21 1313.83,1210.21 1314.42,1210.21 1315,1210.21 1315.59,1210.21 1316.18,1210.21 1316.76,1210.21 1317.35,1210.21 1317.93,1210.21 1318.52,1210.21 1319.11,1210.21 1319.69,1210.21 1320.28,1210.21 1320.87,1210.21 1321.45,1210.21 1322.04,1210.21 1322.63,1210.21 1323.21,1210.21 1323.8,1210.21 1324.39,1210.21 1324.97,1210.21 1325.56,1210.21 1326.14,1210.21 1326.73,1210.21 1327.32,1210.21 1327.9,1210.21 1328.49,1210.21 1329.08,1210.21 1329.66,1210.21 1330.25,1210.21 1330.84,1210.21 1331.42,1210.21 1332.01,1210.21 1332.6,1210.21 1333.18,1210.21 1333.77,1210.21 1334.35,1210.21 1334.94,1210.21 1335.53,1210.21 1336.11,1210.21 1336.7,1210.21 1337.29,1210.21 1337.87,1210.21 1338.46,1210.21 1339.05,1210.21 1339.63,1210.21 1340.22,1210.21 1340.8,1210.21 1341.39,1210.21 1341.98,1210.21 1342.56,1210.21 1343.15,1210.21 1343.74,1210.21 1344.32,1210.21 1344.91,1210.21 1345.5,1210.21 1346.08,1210.21 1346.67,1210.21 1347.26,1210.21 1347.84,1210.21 1348.43,1210.21 1349.01,1210.21 1349.6,1210.21 1350.19,1210.21 1350.77,1210.21 1351.36,1210.21 1351.95,1210.21 1352.53,1210.21 1353.12,1210.21 1353.71,1210.21 1354.29,1210.21 1354.88,1210.21 1355.47,1210.21 1356.05,1210.21 1356.64,1210.21 1357.22,1210.21 1357.81,1210.21 1358.4,1210.21 1358.98,1210.21 1359.57,1210.21 1360.16,1210.21 1360.74,1210.21 1361.33,1210.21 1361.92,1210.21 1362.5,1210.21 1363.09,1210.21 1363.68,1210.21 1364.26,1210.21 1364.85,1210.21 1365.43,1210.21 1366.02,1210.21 1366.61,1210.21 1367.19,1210.21 1367.78,1210.21 1368.37,1210.21 1368.95,1210.21 1369.54,1210.21 1370.13,1210.21 1370.71,1210.21 1371.3,1210.21 1371.88,1210.21 1372.47,1210.21 1373.06,1210.21 1373.64,1210.21 1374.23,1210.21 1374.82,1210.21 1375.4,1210.21 1375.99,1210.21 1376.58,1210.21 1377.16,1210.21 1377.75,1210.21 1378.34,1210.21 1378.92,1210.21 1379.51,1210.21 1380.09,1210.21 1380.68,1210.21 1381.27,1210.21 1381.85,1210.21 1382.44,1210.21 1383.03,1210.21 1383.61,1210.21 1384.2,1210.21 1384.79,1210.21 1385.37,1210.21 1385.96,1210.21 1386.55,1210.21 1387.13,1210.21 1387.72,1210.21 1388.3,1210.21 1388.89,1210.21 1389.48,1210.21 1390.06,1210.21 1390.65,1210.21 1391.24,1210.21 1391.82,1210.21 1392.41,1210.21 1393,1210.21 1393.58,1210.21 1394.17,1210.21 1394.75,1210.21 1395.34,1210.21 1395.93,1210.21 1396.51,1210.21 1397.1,1210.21 1397.69,1210.21 1398.27,1210.21 1398.86,1210.21 1399.45,1210.21 1400.03,1210.21 1400.62,1210.21 1401.21,1210.21 1401.79,1210.21 1402.38,1210.21 1402.96,1210.21 1403.55,1210.21 1404.14,1210.21 1404.72,1210.21 1405.31,1210.21 1405.9,1210.21 1406.48,1210.21 1407.07,1210.21 1407.66,1210.21 1408.24,1210.21 1408.83,1210.21 1409.42,1210.21 1410,1210.21 1410.59,1210.21 1411.17,1210.21 1411.76,1210.21 1412.35,1210.21 1412.93,1210.21 1413.52,1210.21 1414.11,1210.21 1414.69,1210.21 1415.28,1210.21 1415.87,1210.21 1416.45,1210.21 1417.04,1210.21 1417.63,1210.21 1418.21,1210.21 1418.8,1210.21 1419.38,1210.21 1419.97,1210.21 1420.56,1210.21 1421.14,1210.21 1421.73,1210.21 1422.32,1210.21 1422.9,1210.21 1423.49,1210.21 1424.08,1210.21 1424.66,1210.21 1425.25,1210.21 1425.83,1210.21 1426.42,1210.21 1427.01,1210.21 1427.59,1210.21 1428.18,1210.21 1428.77,1210.21 1429.35,1210.21 1429.94,1210.21 1430.53,1210.21 1431.11,1210.21 1431.7,1210.21 1432.29,1210.21 1432.87,1210.21 1433.46,1210.21 1434.04,1210.21 1434.63,1210.21 1435.22,1210.21 1435.8,1210.21 1436.39,1210.21 1436.98,1210.21 1437.56,1210.21 1438.15,1210.21 1438.74,1210.21 1439.32,1210.21 1439.91,1210.21 1440.5,1210.21 1441.08,1210.21 1441.67,1210.21 1442.25,1210.21 1442.84,1210.21 1443.43,1210.21 1444.01,1210.21 1444.6,1210.21 1445.19,1210.21 1445.77,1210.21 1446.36,1210.21 1446.95,1210.21 1447.53,1210.21 1448.12,1210.21 1448.7,1210.21 1449.29,1210.21 1449.88,1210.21 1450.46,1210.21 1451.05,1210.21 1451.64,1210.21 1452.22,1210.21 1452.81,1210.21 1453.4,1210.21 1453.98,1210.21 1454.57,1210.21 1455.16,1210.21 1455.74,1210.21 1456.33,1210.21 1456.91,1210.21 1457.5,1210.21 1458.09,1210.21 1458.67,1210.21 1459.26,1210.21 1459.85,1210.21 1460.43,1210.21 1461.02,1210.21 1461.61,1210.21 1462.19,1210.21 1462.78,1210.21 1463.37,1210.21 1463.95,1210.21 1464.54,1210.21 1465.12,1210.21 1465.71,1210.21 1466.3,1210.21 1466.88,1210.21 1467.47,1210.21 1468.06,1210.21 1468.64,1210.21 1469.23,1210.21 1469.82,1210.21 1470.4,1210.21 1470.99,1210.21 1471.57,1210.21 1472.16,1210.21 1472.75,1210.21 1473.33,1210.21 1473.92,1210.21 1474.51,1210.21 1475.09,1210.21 1475.68,1210.21 1476.27,1210.21 1476.85,1210.21 1477.44,1210.21 1478.03,1210.21 1478.61,1210.21 1479.2,1210.21 1479.78,1210.21 1480.37,1210.21 1480.96,1210.21 1481.54,1210.21 1482.13,1210.21 1482.72,1210.21 1483.3,1210.21 1483.89,1210.21 1484.48,1210.21 1485.06,1210.21 1485.65,1210.21 1486.24,1210.21 1486.82,1210.21 1487.41,1210.21 1487.99,1210.21 1488.58,1210.21 1489.17,1210.21 1489.75,1210.21 1490.34,1210.21 1490.93,1210.21 1491.51,1210.21 1492.1,1210.21 1492.69,1210.21 1493.27,1210.21 1493.86,1210.21 1494.45,1210.21 1495.03,1210.21 1495.62,1210.21 1496.2,1210.21 1496.79,1210.21 1497.38,1210.21 1497.96,1210.21 1498.55,1210.21 1499.14,1210.21 1499.72,1210.21 1500.31,1210.21 1500.9,1210.21 1501.48,1210.21 1502.07,1210.21 1502.65,1210.21 1503.24,1210.21 1503.83,1210.21 1504.41,1210.21 1505,1210.21 1505.59,1210.21 1506.17,1210.21 1506.76,1210.21 1507.35,1210.21 1507.93,1210.21 1508.52,1210.21 1509.11,1210.21 1509.69,1210.21 1510.28,1210.21 1510.86,1210.21 1511.45,1210.21 1512.04,1210.21 1512.62,1210.21 1513.21,1210.21 1513.8,1210.21 1514.38,1210.21 1514.97,1210.21 1515.56,1210.21 1516.14,1210.21 1516.73,1210.21 1517.32,1210.21 1517.9,1210.21 1518.49,1210.21 1519.07,1210.21 1519.66,1210.21 1520.25,1210.21 1520.83,1210.21 1521.42,1210.21 1522.01,1210.21 1522.59,1210.21 1523.18,1210.21 1523.77,1210.21 1524.35,1210.21 1524.94,1210.21 1525.52,1210.21 1526.11,1210.21 1526.7,1210.21 1527.28,1210.21 1527.87,1210.21 1528.46,1210.21 1529.04,1210.21 1529.63,1210.21 1530.22,1210.21 1530.8,1210.21 1531.39,1210.21 1531.98,1210.21 1532.56,1210.21 1533.15,1210.21 1533.73,1210.21 1534.32,1210.21 1534.91,1210.21 1535.49,1210.21 1536.08,1210.21 1536.67,1210.21 1537.25,1210.21 1537.84,1210.21 1538.43,1210.21 1539.01,1210.21 1539.6,1210.21 1540.19,1210.21 1540.77,1210.21 1541.36,1210.21 1541.94,1210.21 1542.53,1210.21 1543.12,1210.21 1543.7,1210.21 1544.29,1210.21 1544.88,1210.21 1545.46,1210.21 1546.05,1210.21 1546.64,1210.21 1547.22,1210.21 1547.81,1210.21 1548.4,1210.21 1548.98,1210.21 1549.57,1210.21 1550.15,1210.21 1550.74,1210.21 1551.33,1210.21 1551.91,1210.21 1552.5,1210.21 1553.09,1210.21 1553.67,1210.21 1554.26,1210.21 1554.85,1210.21 1555.43,1210.21 1556.02,1210.21 1556.6,1210.21 1557.19,1210.21 1557.78,1210.21 1558.36,1210.21 1558.95,1210.21 1559.54,1210.21 1560.12,1210.21 1560.71,1210.21 1561.3,1210.21 1561.88,1210.21 1562.47,1210.21 1563.06,1210.21 1563.64,1210.21 1564.23,1210.21 1564.81,1210.21 1565.4,1210.21 1565.99,1210.21 1566.57,1210.21 1567.16,1210.21 1567.75,1210.21 1568.33,1210.21 1568.92,1210.21 1569.51,1210.21 1570.09,1210.21 1570.68,1210.21 1571.27,1210.21 1571.85,1210.21 1572.44,1210.21 1573.02,1210.21 1573.61,1210.21 1574.2,1210.21 1574.78,1210.21 1575.37,1210.21 1575.96,1210.21 1576.54,1210.21 1577.13,1210.21 1577.72,1210.21 1578.3,1210.21 1578.89,1210.21 1579.47,1210.21 1580.06,1210.21 1580.65,1210.21 1581.23,1210.21 1581.82,1210.21 1582.41,1210.21 1582.99,1210.21 1583.58,1210.21 1584.17,1210.21 1584.75,1210.21 1585.34,1210.21 1585.93,1210.21 1586.51,1210.21 1587.1,1210.21 1587.68,1210.21 1588.27,1210.21 1588.86,1210.21 1589.44,1210.21 1590.03,1210.21 1590.62,1210.21 1591.2,1210.21 1591.79,1210.21 1592.38,1210.21 1592.96,1210.21 1593.55,1210.21 1594.14,1210.21 1594.72,1210.21 1595.31,1210.21 1595.89,1210.21 1596.48,1210.21 1597.07,1210.21 1597.65,1210.21 1598.24,1210.21 1598.83,1210.21 1599.41,1210.21 1600,1210.21 1600.59,1210.21 1601.17,1210.21 1601.76,1210.21 1602.34,1210.21 1602.93,1210.21 1603.52,1210.21 1604.1,1210.21 1604.69,1210.21 1605.28,1210.21 1605.86,1210.21 1606.45,1210.21 1607.04,1210.21 1607.62,1210.21 1608.21,1210.21 1608.8,1210.21 1609.38,1210.21 1609.97,1210.21 1610.55,1210.21 1611.14,1210.21 1611.73,1210.21 1612.31,1210.21 1612.9,1210.21 1613.49,1210.21 1614.07,1210.21 1614.66,1210.21 1615.25,1210.21 1615.83,1210.21 1616.42,1210.21 1617.01,1210.21 1617.59,1210.21 1618.18,1210.21 1618.76,1210.21 1619.35,1210.21 1619.94,1210.21 1620.52,1210.21 1621.11,1210.21 1621.7,1210.21 1622.28,1210.21 1622.87,1210.21 1623.46,1210.21 1624.04,1210.21 1624.63,1210.21 1625.22,1210.21 1625.8,1210.21 1626.39,1210.21 1626.97,1210.21 1627.56,1210.21 1628.15,1210.21 1628.73,1210.21 1629.32,1210.21 1629.91,1210.21 1630.49,1210.21 1631.08,1210.21 1631.67,1210.21 1632.25,1210.21 1632.84,1210.21 1633.42,1210.21 1634.01,1210.21 1634.6,1210.21 1635.18,1210.21 1635.77,1210.21 1636.36,1210.21 1636.94,1210.21 1637.53,1210.21 1638.12,1210.21 1638.7,1210.21 1639.29,1210.21 1639.88,1210.21 1640.46,1210.21 1641.05,1210.21 1641.63,1210.21 1642.22,1210.21 1642.81,1210.21 1643.39,1210.21 1643.98,1210.21 1644.57,1210.21 1645.15,1210.21 1645.74,1210.21 1646.33,1210.21 1646.91,1210.21 1647.5,1210.21 1648.09,1210.21 1648.67,1210.21 1649.26,1210.21 1649.84,1210.21 1650.43,1210.21 1651.02,1210.21 1651.6,1210.21 1652.19,1210.21 1652.78,1210.21 1653.36,1210.21 1653.95,1210.21 1654.54,1210.21 1655.12,1210.21 1655.71,1210.21 1656.29,1210.21 1656.88,1210.21 1657.47,1210.21 1658.05,1210.21 1658.64,1210.21 1659.23,1210.21 1659.81,1210.21 1660.4,1210.21 1660.99,1210.21 1661.57,1210.21 1662.16,1210.21 1662.75,1210.21 1663.33,1210.21 1663.92,1210.21 1664.5,1210.21 1665.09,1210.21 1665.68,1210.21 1666.26,1210.21 1666.85,1210.21 1667.44,1210.21 1668.02,1210.21 1668.61,1210.21 1669.2,1210.21 1669.78,1210.21 1670.37,1210.21 1670.96,1210.21 1671.54,1210.21 1672.13,1210.21 1672.71,1210.21 1673.3,1210.21 1673.89,1210.21 1674.47,1210.21 1675.06,1210.21 1675.65,1210.21 1676.23,1210.21 1676.82,1210.21 1677.41,1210.21 1677.99,1210.21 1678.58,1210.21 1679.17,1210.21 1679.75,1210.21 1680.34,1210.21 1680.92,1210.21 1681.51,1210.21 1682.1,1210.21 1682.68,1210.21 1683.27,1210.21 1683.86,1210.21 1684.44,1210.21 1685.03,1210.21 1685.62,1210.21 1686.2,1210.21 1686.79,1210.21 1687.37,1210.21 1687.96,1210.21 1688.55,1210.21 1689.13,1210.21 1689.72,1210.21 1690.31,1210.21 1690.89,1210.21 1691.48,1210.21 1692.07,1210.21 1692.65,1210.21 1693.24,1210.21 1693.83,1210.21 1694.41,1210.21 1695,1210.21 1695.58,1210.21 1696.17,1210.21 1696.76,1210.21 1697.34,1210.21 1697.93,1210.21 1698.52,1210.21 1699.1,1210.21 1699.69,1210.21 1700.28,1210.21 1700.86,1210.21 1701.45,1210.21 1702.04,1210.21 1702.62,1210.21 1703.21,1210.21 1703.79,1210.21 1704.38,1210.21 1704.97,1210.21 1705.55,1210.21 1706.14,1210.21 1706.73,1210.21 1707.31,1210.21 1707.9,1210.21 1708.49,1210.21 1709.07,1210.21 1709.66,1210.21 1710.24,1210.21 1710.83,1210.21 1711.42,1210.21 1712,1210.21 1712.59,1210.21 1713.18,1210.21 1713.76,1210.21 1714.35,1210.21 1714.94,1210.21 1715.52,1210.21 1716.11,1210.21 1716.7,1210.21 1717.28,1210.21 1717.87,1210.21 1718.45,1210.21 1719.04,1210.21 1719.63,1210.21 1720.21,1210.21 1720.8,1210.21 1721.39,1210.21 1721.97,1210.21 1722.56,1210.21 1723.15,1210.21 1723.73,1210.21 1724.32,1210.21 1724.91,1210.21 1725.49,1210.21 1726.08,1210.21 1726.66,1210.21 1727.25,1210.21 1727.84,1210.21 1728.42,1210.21 1729.01,1210.21 1729.6,1210.21 1730.18,1210.21 1730.77,1210.21 1731.36,1210.21 1731.94,1210.21 1732.53,1210.21 1733.11,1210.21 1733.7,1210.21 1734.29,1210.21 1734.87,1210.21 1735.46,1210.21 1736.05,1210.21 1736.63,1210.21 1737.22,1210.21 1737.81,1210.21 1738.39,1210.21 1738.98,1210.21 1739.57,1210.21 1740.15,1210.21 1740.74,1210.21 1741.32,1210.21 1741.91,1210.21 1742.5,1210.21 1743.08,1210.21 1743.67,1210.21 1744.26,1210.21 1744.84,1210.21 1745.43,1210.21 1746.02,1210.21 1746.6,1210.21 1747.19,1210.21 1747.78,1210.21 1748.36,1210.21 1748.95,1210.21 1749.53,1210.21 1750.12,1210.21 1750.71,1210.21 1751.29,1210.21 1751.88,1210.21 1752.47,1210.21 1753.05,1210.21 1753.64,1210.21 1754.23,1210.21 1754.81,1210.21 1755.4,1210.21 1755.99,1210.21 1756.57,1210.21 1757.16,1210.21 1757.74,1210.21 1758.33,1210.21 1758.92,1210.21 1759.5,1210.21 1760.09,1210.21 1760.68,1210.21 1761.26,1210.21 1761.85,1210.21 1762.44,1210.21 1763.02,1210.21 1763.61,1210.21 1764.19,1210.21 1764.78,1210.21 1765.37,1210.21 1765.95,1210.21 1766.54,1210.21 1767.13,1210.21 1767.71,1210.21 1768.3,1210.21 1768.89,1210.21 1769.47,1210.21 1770.06,1210.21 1770.65,1210.21 1771.23,1210.21 1771.82,1210.21 1772.4,1210.21 1772.99,1210.21 1773.58,1210.21 1774.16,1210.21 1774.75,1210.21 1775.34,1210.21 1775.92,1210.21 1776.51,1210.21 1777.1,1210.21 1777.68,1210.21 1778.27,1210.21 1778.86,1210.21 1779.44,1210.21 1780.03,1210.21 1780.61,1210.21 1781.2,1210.21 1781.79,1210.21 1782.37,1210.21 1782.96,1210.21 1783.55,1210.21 1784.13,1210.21 1784.72,1210.21 1785.31,1210.21 1785.89,1210.21 1786.48,1210.21 1787.06,1210.21 1787.65,1210.21 1788.24,1210.21 1788.82,1210.21 1789.41,1210.21 1790,1210.21 1790.58,1210.21 1791.17,1210.21 1791.76,1210.21 1792.34,1210.21 1792.93,1210.21 1793.52,1210.21 1794.1,1210.21 1794.69,1210.21 1795.27,1210.21 1795.86,1210.21 1796.45,1210.21 1797.03,1210.21 1797.62,1210.21 1798.21,1210.21 1798.79,1210.21 1799.38,1210.21 1799.97,1210.21 1800.55,1210.21 1801.14,1210.21 1801.73,1210.21 1802.31,1210.21 1802.9,1210.21 1803.48,1210.21 1804.07,1210.21 1804.66,1210.21 1805.24,1210.21 1805.83,1210.21 1806.42,1210.21 1807,1210.21 1807.59,1210.21 1808.18,1210.21 1808.76,1210.21 1809.35,1210.21 1809.94,1210.21 1810.52,1210.21 1811.11,1210.21 1811.69,1210.21 1812.28,1210.21 1812.87,1210.21 1813.45,1210.21 1814.04,1210.21 1814.63,1210.21 1815.21,1210.21 1815.8,1210.21 1816.39,1210.21 1816.97,1210.21 1817.56,1210.21 1818.14,1210.21 1818.73,1210.21 1819.32,1210.21 1819.9,1210.21 1820.49,1210.21 1821.08,1210.21 1821.66,1210.21 1822.25,1210.21 1822.84,1210.21 1823.42,1210.21 1824.01,1210.21 1824.6,1210.21 1825.18,1210.21 1825.77,1210.21 1826.35,1210.21 1826.94,1210.21 1827.53,1210.21 1828.11,1210.21 1828.7,1210.21 1829.29,1210.21 1829.87,1210.21 1830.46,1210.21 1831.05,1210.21 1831.63,1210.21 1832.22,1210.21 1832.81,1210.21 1833.39,1210.21 1833.98,1210.21 1834.56,1210.21 1835.15,1210.21 1835.74,1210.21 1836.32,1210.21 1836.91,1210.21 1837.5,1210.21 1838.08,1210.21 1838.67,1210.21 1839.26,1210.21 1839.84,1210.21 1840.43,1210.21 1841.01,1210.21 1841.6,1210.21 1842.19,1210.21 1842.77,1210.21 1843.36,1210.21 1843.95,1210.21 1844.53,1210.21 1845.12,1210.21 1845.71,1210.21 1846.29,1210.21 1846.88,1210.21 1847.47,1210.21 1848.05,1210.21 1848.64,1210.21 1849.22,1210.21 1849.81,1210.21 1850.4,1210.21 1850.98,1210.21 1851.57,1210.21 1852.16,1210.21 1852.74,1210.21 1853.33,1210.21 1853.92,1210.21 1854.5,1210.21 1855.09,1210.21 1855.68,1210.21 1856.26,1210.21 1856.85,1210.21 1857.43,1210.21 1858.02,1210.21 1858.61,1210.21 1859.19,1210.21 1859.78,1210.21 1860.37,1210.21 1860.95,1210.21 1861.54,1210.21 1862.13,1210.21 1862.71,1210.21 1863.3,1210.21 1863.88,1210.21 1864.47,1210.21 1865.06,1210.21 1865.64,1210.21 1866.23,1210.21 1866.82,1210.21 1867.4,1210.21 1867.99,1210.21 1868.58,1210.21 1869.16,1210.21 1869.75,1210.21 1870.34,1210.21 1870.92,1210.21 1871.51,1210.21 1872.09,1210.21 1872.68,1210.21 1873.27,1210.21 1873.85,1210.21 1874.44,1210.21 1875.03,1210.21 1875.61,1210.21 1876.2,1210.21 1876.79,1210.21 1877.37,1210.21 1877.96,1210.21 1878.55,1210.21 1879.13,1210.21 1879.72,1210.21 1880.3,1210.21 1880.89,1210.21 1881.48,1210.21 1882.06,1210.21 1882.65,1210.21 1883.24,1210.21 1883.82,1210.21 1884.41,1210.21 1885,1210.21 1885.58,1210.21 1886.17,1210.21 1886.76,1210.21 1887.34,1210.21 1887.93,1210.21 1888.51,1210.21 1889.1,1210.21 1889.69,1210.21 1890.27,1210.21 1890.86,1210.21 1891.45,1210.21 1892.03,1210.21 1892.62,1210.21 1893.21,1210.21 1893.79,1210.21 1894.38,1210.21 1894.96,1210.21 1895.55,1210.21 1896.14,1210.21 1896.72,1210.21 1897.31,1210.21 1897.9,1210.21 1898.48,1210.21 1899.07,1210.21 1899.66,1210.21 1900.24,1210.21 1900.83,1210.21 1901.42,1210.21 1902,1210.21 1902.59,1210.21 1903.17,1210.21 1903.76,1210.21 1904.35,1210.21 1904.93,1210.21 1905.52,1210.21 1906.11,1210.21 1906.69,1210.21 1907.28,1210.21 1907.87,1210.21 1908.45,1210.21 1909.04,1210.21 1909.63,1210.21 1910.21,1210.21 1910.8,1210.21 1911.38,1210.21 1911.97,1210.21 1912.56,1210.21 1913.14,1210.21 1913.73,1210.21 1914.32,1210.21 1914.9,1210.21 1915.49,1210.21 1916.08,1210.21 1916.66,1210.21 1917.25,1210.21 1917.83,1210.21 1918.42,1210.21 1919.01,1210.21 1919.59,1210.21 1920.18,1210.21 1920.77,1210.21 1921.35,1210.21 1921.94,1210.21 1922.53,1210.21 1923.11,1210.21 1923.7,1210.21 1924.29,1210.21 1924.87,1210.21 1925.46,1210.21 1926.04,1210.21 1926.63,1210.21 1927.22,1210.21 1927.8,1210.21 1928.39,1210.21 1928.98,1210.21 1929.56,1210.21 1930.15,1210.21 1930.74,1210.21 1931.32,1210.21 1931.91,1210.21 1932.5,1210.21 1933.08,1210.21 1933.67,1210.21 1934.25,1210.21 1934.84,1210.21 1935.43,1210.21 1936.01,1210.21 1936.6,1210.21 1937.19,1210.21 1937.77,1210.21 1938.36,1210.21 1938.95,1210.21 1939.53,1210.21 1940.12,1210.21 1940.71,1210.21 1941.29,1210.21 1941.88,1210.21 1942.46,1210.21 1943.05,1210.21 1943.64,1210.21 1944.22,1210.21 1944.81,1210.21 1945.4,1210.21 1945.98,1210.21 1946.57,1210.21 1947.16,1210.21 1947.74,1210.21 1948.33,1210.21 1948.91,1210.21 1949.5,1210.21 1950.09,1210.21 1950.67,1210.21 1951.26,1210.21 1951.85,1210.21 1952.43,1210.21 1953.02,1210.21 1953.61,1210.21 1954.19,1210.21 1954.78,1210.21 1955.37,1210.21 1955.95,1210.21 1956.54,1210.21 1957.12,1210.21 1957.71,1210.21 1958.3,1210.21 1958.88,1210.21 1959.47,1210.21 1960.06,1210.21 1960.64,1210.21 1961.23,1210.21 1961.82,1210.21 1962.4,1210.21 1962.99,1210.21 1963.58,1210.21 1964.16,1210.21 1964.75,1210.21 1965.33,1210.21 1965.92,1210.21 1966.51,1210.21 1967.09,1210.21 1967.68,1210.21 1968.27,1210.21 1968.85,1210.21 1969.44,1210.21 1970.03,1210.21 1970.61,1210.21 1971.2,1210.21 1971.78,1210.21 1972.37,1210.21 1972.96,1210.21 1973.54,1210.21 1974.13,1210.21 1974.72,1210.21 1975.3,1210.21 1975.89,1210.21 1976.48,1210.21 1977.06,1210.21 1977.65,1210.21 1978.24,1210.21 1978.82,1210.21 1979.41,1210.21 1979.99,1210.21 1980.58,1210.21 1981.17,1210.21 1981.75,1210.21 1982.34,1210.21 1982.93,1210.21 1983.51,1210.21 1984.1,1210.21 1984.69,1210.21 1985.27,1210.21 1985.86,1210.21 1986.45,1210.21 1987.03,1210.21 1987.62,1210.21 1988.2,1210.21 1988.79,1210.21 1989.38,1210.21 1989.96,1210.21 1990.55,1210.21 1991.14,1210.21 1991.72,1210.21 1992.31,1210.21 1992.9,1210.21 1993.48,1210.21 1994.07,1210.21 1994.65,1210.21 1995.24,1210.21 1995.83,1210.21 1996.41,1210.21 1997,1210.21 1997.59,1210.21 1998.17,1210.21 1998.76,1210.21 1999.35,1210.21 1999.93,1210.21 2000.52,1210.21 2001.11,1210.21 2001.69,1210.21 2002.28,1210.21 2002.86,1210.21 2003.45,1210.21 2004.04,1210.21 2004.62,1210.21 2005.21,1210.21 2005.8,1210.21 2006.38,1210.21 2006.97,1210.21 2007.56,1210.21 2008.14,1210.21 2008.73,1210.21 2009.32,1210.21 2009.9,1210.21 2010.49,1210.21 2011.07,1210.21 2011.66,1210.21 2012.25,1210.21 2012.83,1210.21 2013.42,1210.21 2014.01,1210.21 2014.59,1210.21 2015.18,1210.21 2015.77,1210.21 2016.35,1210.21 2016.94,1210.21 2017.53,1210.21 2018.11,1210.21 2018.7,1210.21 2019.28,1210.21 2019.87,1210.21 2020.46,1210.21 2021.04,1210.21 2021.63,1210.21 2022.22,1210.21 2022.8,1210.21 2023.39,1210.21 2023.98,1210.21 2024.56,1210.21 2025.15,1210.21 2025.73,1210.21 2026.32,1210.21 2026.91,1210.21 2027.49,1210.21 2028.08,1210.21 2028.67,1210.21 2029.25,1210.21 2029.84,1210.21 2030.43,1210.21 2031.01,1210.21 2031.6,1210.21 2032.19,1210.21 2032.77,1210.21 2033.36,1210.21 2033.94,1210.21 2034.53,1210.21 2035.12,1210.21 2035.7,1210.21 2036.29,1210.21 2036.88,1210.21 2037.46,1210.21 2038.05,1210.21 2038.64,1210.21 2039.22,1210.21 2039.81,1210.21 2040.4,1210.21 2040.98,1210.21 2041.57,1210.21 2042.15,1210.21 2042.74,1210.21 2043.33,1210.21 2043.91,1210.21 2044.5,1210.21 2045.09,1210.21 2045.67,1210.21 2046.26,1210.21 2046.85,1210.21 2047.43,1210.21 2048.02,1210.21 2048.6,1210.21 2049.19,1210.21 2049.78,1210.21 2050.36,1210.21 2050.95,1210.21 2051.54,1210.21 2052.12,1210.21 2052.71,1210.21 2053.3,1210.21 2053.88,1210.21 2054.47,1210.21 2055.06,1210.21 2055.64,1210.21 2056.23,1210.21 2056.81,1210.21 2057.4,1210.21 2057.99,1210.21 2058.57,1210.21 2059.16,1210.21 2059.75,1210.21 2060.33,1210.21 2060.92,1210.21 2061.51,1210.21 2062.09,1210.21 2062.68,1210.21 2063.27,1210.21 2063.85,1210.21 2064.44,1210.21 2065.02,1210.21 2065.61,1210.21 2066.2,1210.21 2066.78,1210.21 2067.37,1210.21 2067.96,1210.21 2068.54,1210.21 2069.13,1210.21 2069.72,1210.21 2070.3,1210.21 2070.89,1210.21 2071.48,1210.21 2072.06,1210.21 2072.65,1210.21 2073.23,1210.21 2073.82,1210.21 2074.41,1210.21 2074.99,1210.21 2075.58,1210.21 2076.17,1210.21 2076.75,1210.21 2077.34,1210.21 2077.93,1210.21 2078.51,1210.21 2079.1,1210.21 2079.68,1210.21 2080.27,1210.21 2080.86,1210.21 2081.44,1210.21 2082.03,1210.21 2082.62,1210.21 2083.2,1210.21 2083.79,1210.21 2084.38,1210.21 2084.96,1210.21 2085.55,1210.21 2086.14,1210.21 2086.72,1210.21 2087.31,1210.21 2087.89,1210.21 2088.48,1210.21 2089.07,1210.21 2089.65,1210.21 2090.24,1210.21 2090.83,1210.21 2091.41,1210.21 2092,1210.21 2092.59,1210.21 2093.17,1210.21 2093.76,1210.21 2094.35,1210.21 2094.93,1210.21 2095.52,1210.21 2096.1,1210.21 2096.69,1210.21 2097.28,1210.21 2097.86,1210.21 2098.45,1210.21 2099.04,1210.21 2099.62,1210.21 2100.21,1210.21 2100.8,1210.21 2101.38,1210.21 2101.97,1210.21 2102.55,1210.21 2103.14,1210.21 2103.73,1210.21 2104.31,1210.21 2104.9,1210.21 2105.49,1210.21 2106.07,1210.21 2106.66,1210.21 2107.25,1210.21 2107.83,1210.21 2108.42,1210.21 2109.01,1210.21 2109.59,1210.21 2110.18,1210.21 2110.76,1210.21 2111.35,1210.21 2111.94,1210.21 2112.52,1210.21 2113.11,1210.21 2113.7,1210.21 2114.28,1210.21 2114.87,1210.21 2115.46,1210.21 2116.04,1210.21 2116.63,1210.21 2117.22,1210.21 2117.8,1210.21 2118.39,1210.21 2118.97,1210.21 2119.56,1210.21 2120.15,1210.21 2120.73,1210.21 2121.32,1210.21 2121.91,1210.21 2122.49,1210.21 2123.08,1210.21 2123.67,1210.21 2124.25,1210.21 2124.84,1210.21 2125.42,1210.21 2126.01,1210.21 2126.6,1210.21 2127.18,1210.21 2127.77,1210.21 2128.36,1210.21 2128.94,1210.21 2129.53,1210.21 2130.12,1210.21 2130.7,1210.21 2131.29,1210.21 2131.88,1210.21 2132.46,1210.21 2133.05,1210.21 2133.63,1210.21 2134.22,1210.21 2134.81,1210.21 2135.39,1210.21 2135.98,1210.21 2136.57,1210.21 2137.15,1210.21 2137.74,1210.21 2138.33,1210.21 2138.91,1210.21 2139.5,1210.21 2140.09,1210.21 2140.67,1210.21 2141.26,1210.21 2141.84,1210.21 2142.43,1210.21 2143.02,1210.21 2143.6,1210.21 2144.19,1210.21 2144.78,1210.21 2145.36,1210.21 2145.95,1210.21 2146.54,1210.21 2147.12,1210.21 2147.71,1210.21 2148.3,1210.21 2148.88,1210.21 2149.47,1210.21 2150.05,1210.21 2150.64,1210.21 2151.23,1210.21 2151.81,1210.21 2152.4,1210.21 2152.99,1210.21 2153.57,1210.21 2154.16,1210.21 2154.75,1210.21 2155.33,1210.21 2155.92,1210.21 2156.5,1210.21 2157.09,1210.21 2157.68,1210.21 2158.26,1210.21 \"/>\n<path clip-path=\"url(#clip812)\" d=\"M986.025 1210.05 L986.612 1210.05 L987.198 1210.05 L987.785 1210.05 L988.371 1210.05 L988.957 1210.05 L989.544 1210.05 L990.13 1210.05 L990.717 1210.05 L991.303 1210.05 L991.889 1210.05 L992.476 1210.05 L993.062 1210.05 L993.649 1210.05 L994.235 1210.05 L994.822 1210.05 L995.408 1210.05 L995.994 1210.05 L996.581 1210.05 L997.167 1210.05 L997.754 1210.05 L998.34 1210.05 L998.926 1210.05 L999.513 1210.05 L1000.1 1210.05 L1000.69 1210.05 L1001.27 1210.05 L1001.86 1210.05 L1002.44 1210.05 L1003.03 1210.05 L1003.62 1210.05 L1004.2 1210.05 L1004.79 1210.05 L1005.38 1210.05 L1005.96 1210.05 L1006.55 1210.05 L1007.14 1210.05 L1007.72 1210.05 L1008.31 1210.05 L1008.9 1210.05 L1009.48 1210.05 L1010.07 1210.05 L1010.65 1210.05 L1011.24 1210.05 L1011.83 1210.05 L1012.41 1210.05 L1013 1210.05 L1013.59 1210.05 L1014.17 1210.05 L1014.76 1210.05 L1015.35 1210.05 L1015.93 1210.05 L1016.52 1210.05 L1017.11 1210.05 L1017.69 1210.05 L1018.28 1210.05 L1018.86 1210.05 L1019.45 1210.05 L1020.04 1210.05 L1020.62 1210.05 L1021.21 1210.05 L1021.8 1210.05 L1022.38 1210.05 L1022.97 1210.05 L1023.56 1210.05 L1024.14 1210.05 L1024.73 1210.05 L1025.32 1210.05 L1025.9 1210.05 L1026.49 1210.05 L1027.07 1210.05 L1027.66 1210.05 L1028.25 1210.05 L1028.83 1210.05 L1029.42 1210.05 L1030.01 1210.05 L1030.59 1210.05 L1031.18 1210.05 L1031.77 1210.05 L1032.35 1210.05 L1032.94 1210.05 L1033.52 1210.05 L1034.11 1210.05 L1034.7 1210.05 L1035.28 1210.05 L1035.87 1210.05 L1036.46 1210.05 L1037.04 1210.05 L1037.63 1210.05 L1038.22 1210.05 L1038.8 1210.05 L1039.39 1210.05 L1039.98 1210.05 L1040.56 1210.05 L1041.15 1210.05 L1041.73 1210.05 L1042.32 1210.05 L1042.91 1210.05 L1043.49 1210.05 L1044.08 1210.05 L1044.67 1210.05 L1045.25 1210.05 L1045.84 1210.05 L1046.43 1210.05 L1047.01 1210.05 L1047.6 1210.05 L1048.19 1210.05 L1048.77 1210.05 L1049.36 1210.05 L1049.94 1210.05 L1050.53 1210.05 L1051.12 1210.05 L1051.7 1210.05 L1052.29 1210.05 L1052.88 1210.05 L1053.46 1210.05 L1054.05 1210.05 L1054.64 1210.05 L1055.22 1210.05 L1055.81 1210.05 L1056.39 1210.05 L1056.98 1210.05 L1057.57 1210.05 L1058.15 1210.05 L1058.74 1210.05 L1059.33 1210.05 L1059.91 1210.05 L1060.5 1210.05 L1061.09 1210.05 L1061.67 1210.05 L1062.26 1210.05 L1062.85 1210.05 L1063.43 1210.05 L1064.02 1210.05 L1064.6 1210.05 L1065.19 1210.05 L1065.78 1210.05 L1066.36 1210.05 L1066.95 1210.05 L1067.54 1210.05 L1068.12 1210.05 L1068.71 1210.05 L1069.3 1210.05 L1069.88 1210.05 L1070.47 1210.05 L1071.06 1210.05 L1071.64 1210.05 L1072.23 1210.05 L1072.81 1210.05 L1073.4 1210.05 L1073.99 1210.05 L1074.57 1210.05 L1075.16 1210.05 L1075.75 1210.05 L1076.33 1210.05 L1076.92 1210.05 L1077.51 1210.05 L1078.09 1210.05 L1078.68 1210.05 L1079.26 1210.05 L1079.85 1210.05 L1080.44 1210.05 L1081.02 1210.05 L1081.61 1210.05 L1082.2 1210.05 L1082.78 1210.05 L1083.37 1210.05 L1083.96 1210.05 L1084.54 1210.05 L1085.13 1210.05 L1085.72 1210.05 L1086.3 1210.05 L1086.89 1210.05 L1087.47 1210.05 L1088.06 1210.05 L1088.65 1210.05 L1089.23 1210.05 L1089.82 1210.05 L1090.41 1210.05 L1090.99 1210.05 L1091.58 1210.05 L1092.17 1210.05 L1092.75 1210.05 L1093.34 1210.05 L1093.93 1210.05 L1094.51 1210.05 L1095.1 1210.05 L1095.68 1210.05 L1096.27 1210.05 L1096.86 1210.05 L1097.44 1210.05 L1098.03 1210.05 L1098.62 1210.05 L1099.2 1210.05 L1099.79 1210.05 L1100.38 1210.05 L1100.96 1210.05 L1101.55 1210.05 L1102.14 1210.05 L1102.72 1210.05 L1103.31 1210.05 L1103.89 1210.05 L1104.48 1210.05 L1105.07 1210.05 L1105.65 1210.05 L1106.24 1210.05 L1106.83 1210.05 L1107.41 1210.05 L1108 1210.05 L1108.59 1210.05 L1109.17 1210.05 L1109.76 1210.05 L1110.34 1210.05 L1110.93 1210.05 L1111.52 1210.05 L1112.1 1210.05 L1112.69 1210.05 L1113.28 1210.05 L1113.86 1210.05 L1114.45 1210.05 L1115.04 1210.05 L1115.62 1210.05 L1116.21 1210.05 L1116.8 1210.05 L1117.38 1210.05 L1117.97 1210.05 L1118.55 1210.05 L1119.14 1210.05 L1119.73 1210.05 L1120.31 1210.05 L1120.9 1210.05 L1121.49 1210.05 L1122.07 1210.05 L1122.66 1210.05 L1123.25 1210.05 L1123.83 1210.05 L1124.42 1210.05 L1125.01 1210.05 L1125.59 1210.05 L1126.18 1210.05 L1126.76 1210.05 L1127.35 1210.05 L1127.94 1210.05 L1128.52 1210.05 L1129.11 1210.05 L1129.7 1210.05 L1130.28 1210.05 L1130.87 1210.05 L1131.46 1210.05 L1132.04 1210.05 L1132.63 1210.05 L1133.21 1210.05 L1133.8 1210.05 L1134.39 1210.05 L1134.97 1210.05 L1135.56 1210.05 L1136.15 1210.05 L1136.73 1210.05 L1137.32 1210.05 L1137.91 1210.05 L1138.49 1210.05 L1139.08 1210.05 L1139.67 1210.05 L1140.25 1210.05 L1140.84 1210.05 L1141.42 1210.05 L1142.01 1210.05 L1142.6 1210.05 L1143.18 1210.05 L1143.77 1210.05 L1144.36 1210.05 L1144.94 1210.05 L1145.53 1210.05 L1146.12 1210.05 L1146.7 1210.05 L1147.29 1210.05 L1147.88 1210.05 L1148.46 1210.05 L1149.05 1210.05 L1149.63 1210.05 L1150.22 1210.05 L1150.81 1210.05 L1151.39 1210.05 L1151.98 1210.05 L1152.57 1210.05 L1153.15 1210.05 L1153.74 1210.05 L1154.33 1210.05 L1154.91 1210.05 L1155.5 1210.05 L1156.09 1210.05 L1156.67 1210.05 L1157.26 1210.05 L1157.84 1210.05 L1158.43 1210.05 L1159.02 1210.05 L1159.6 1210.05 L1160.19 1210.05 L1160.78 1210.05 L1161.36 1210.05 L1161.95 1210.05 L1162.54 1210.05 L1163.12 1210.05 L1163.71 1210.05 L1164.29 1210.05 L1164.88 1210.05 L1165.47 1210.05 L1166.05 1210.05 L1166.64 1210.05 L1167.23 1210.05 L1167.81 1210.05 L1168.4 1210.05 L1168.99 1210.05 L1169.57 1210.05 L1170.16 1210.05 L1170.75 1210.05 L1171.33 1210.05 L1171.92 1210.05 L1172.5 1210.05 L1173.09 1210.05 L1173.68 1210.05 L1174.26 1210.05 L1174.85 1210.05 L1175.44 1210.05 L1176.02 1210.05 L1176.61 1210.05 L1177.2 1210.05 L1177.78 1210.05 L1178.37 1210.05 L1178.96 1210.05 L1179.54 1210.05 L1180.13 1210.05 L1180.71 1210.05 L1181.3 1210.05 L1181.89 1210.05 L1182.47 1210.05 L1183.06 1210.05 L1183.65 1210.05 L1184.23 1210.05 L1184.82 1210.05 L1185.41 1210.05 L1185.99 1210.05 L1186.58 1210.05 L1187.16 1210.05 L1187.75 1210.05 L1188.34 1210.05 L1188.92 1210.05 L1189.51 1210.05 L1190.1 1210.05 L1190.68 1210.05 L1191.27 1210.05 L1191.86 1210.05 L1192.44 1210.05 L1193.03 1210.05 L1193.62 1210.05 L1194.2 1210.05 L1194.79 1210.05 L1195.37 1210.05 L1195.96 1210.05 L1196.55 1210.05 L1197.13 1210.05 L1197.72 1210.05 L1198.31 1210.05 L1198.89 1210.05 L1199.48 1210.05 L1200.07 1210.05 L1200.65 1210.05 L1201.24 1210.05 L1201.83 1210.05 L1202.41 1210.05 L1203 1210.05 L1203.58 1210.05 L1204.17 1210.05 L1204.76 1210.05 L1205.34 1210.05 L1205.93 1210.05 L1206.52 1210.05 L1207.1 1210.05 L1207.69 1210.05 L1208.28 1210.05 L1208.86 1210.05 L1209.45 1210.05 L1210.03 1210.05 L1210.62 1210.05 L1211.21 1210.05 L1211.79 1210.05 L1212.38 1210.05 L1212.97 1210.05 L1213.55 1210.05 L1214.14 1210.05 L1214.73 1210.05 L1215.31 1210.05 L1215.9 1210.05 L1216.49 1210.05 L1217.07 1210.05 L1217.66 1210.05 L1218.24 1210.05 L1218.83 1210.05 L1219.42 1210.05 L1220 1210.05 L1220.59 1210.05 L1221.18 1210.05 L1221.76 1210.05 L1222.35 1210.05 L1222.94 1210.05 L1223.52 1210.05 L1224.11 1210.05 L1224.7 1210.05 L1225.28 1210.05 L1225.87 1210.05 L1226.45 1210.05 L1227.04 1210.05 L1227.63 1210.05 L1228.21 1210.05 L1228.8 1210.05 L1229.39 1210.05 L1229.97 1210.05 L1230.56 1210.05 L1231.15 1210.05 L1231.73 1210.05 L1232.32 1210.05 L1232.91 1210.05 L1233.49 1210.05 L1234.08 1210.05 L1234.66 1210.05 L1235.25 1210.05 L1235.84 1210.05 L1236.42 1210.05 L1237.01 1210.05 L1237.6 1210.05 L1238.18 1210.05 L1238.77 1210.05 L1239.36 1210.05 L1239.94 1210.05 L1240.53 1210.05 L1241.11 1210.05 L1241.7 1210.05 L1242.29 1210.05 L1242.87 1210.05 L1243.46 1210.05 L1244.05 1210.05 L1244.63 1210.05 L1245.22 1210.05 L1245.81 1210.05 L1246.39 1210.05 L1246.98 1210.05 L1247.57 1210.05 L1248.15 1210.05 L1248.74 1210.05 L1249.32 1210.05 L1249.91 1210.05 L1250.5 1210.05 L1251.08 1210.05 L1251.67 1210.05 L1252.26 1210.05 L1252.84 1210.05 L1253.43 1210.05 L1254.02 1210.05 L1254.6 1210.05 L1255.19 1210.05 L1255.78 1210.05 L1256.36 1210.05 L1256.95 1210.05 L1257.53 1210.05 L1258.12 1210.05 L1258.71 1210.05 L1259.29 1210.05 L1259.88 1210.05 L1260.47 1210.05 L1261.05 1210.05 L1261.64 1210.05 L1262.23 1210.05 L1262.81 1210.05 L1263.4 1210.05 L1263.98 1210.05 L1264.57 1210.05 L1265.16 1210.05 L1265.74 1210.05 L1266.33 1210.05 L1266.92 1210.05 L1267.5 1210.05 L1268.09 1210.05 L1268.68 1210.05 L1269.26 1210.05 L1269.85 1210.05 L1270.44 1210.05 L1271.02 1210.05 L1271.61 1210.05 L1272.19 1210.05 L1272.78 1210.05 L1273.37 1210.05 L1273.95 1210.05 L1274.54 1210.05 L1275.13 1210.05 L1275.71 1210.05 L1276.3 1210.05 L1276.89 1210.05 L1277.47 1210.05 L1278.06 1210.05 L1278.65 1210.05 L1279.23 1210.05 L1279.82 1210.05 L1280.4 1210.05 L1280.99 1210.05 L1281.58 1210.05 L1282.16 1210.05 L1282.75 1210.05 L1283.34 1210.05 L1283.92 1210.05 L1284.51 1210.05 L1285.1 1210.05 L1285.68 1210.05 L1286.27 1210.05 L1286.86 1210.05 L1287.44 1210.05 L1288.03 1210.05 L1288.61 1210.05 L1289.2 1210.05 L1289.79 1210.05 L1290.37 1210.05 L1290.96 1210.05 L1291.55 1210.05 L1292.13 1210.05 L1292.72 1210.05 L1293.31 1210.05 L1293.89 1210.05 L1294.48 1210.05 L1295.06 1210.05 L1295.65 1210.05 L1296.24 1210.05 L1296.82 1210.05 L1297.41 1210.05 L1298 1210.05 L1298.58 1210.05 L1299.17 1210.05 L1299.76 1210.05 L1300.34 1210.05 L1300.93 1210.05 L1301.52 1210.05 L1302.1 1210.05 L1302.69 1210.05 L1303.27 1210.05 L1303.86 1210.05 L1304.45 1210.05 L1305.03 1210.05 L1305.62 1210.05 L1306.21 1210.05 L1306.79 1210.05 L1307.38 1210.05 L1307.97 1210.05 L1308.55 1210.05 L1309.14 1210.05 L1309.73 1210.05 L1310.31 1210.05 L1310.9 1210.05 L1311.48 1210.05 L1312.07 1210.05 L1312.66 1210.05 L1313.24 1210.05 L1313.83 1210.05 L1314.42 1210.05 L1315 1210.05 L1315.59 1210.05 L1316.18 1210.05 L1316.76 1210.05 L1317.35 1210.05 L1317.93 1210.05 L1318.52 1210.05 L1319.11 1210.05 L1319.69 1210.05 L1320.28 1210.05 L1320.87 1210.05 L1321.45 1210.05 L1322.04 1210.05 L1322.63 1210.05 L1323.21 1210.05 L1323.8 1210.05 L1324.39 1210.05 L1324.97 1210.05 L1325.56 1210.05 L1326.14 1210.05 L1326.73 1210.05 L1327.32 1210.05 L1327.9 1210.05 L1328.49 1210.05 L1329.08 1210.05 L1329.66 1210.05 L1330.25 1210.05 L1330.84 1210.05 L1331.42 1210.05 L1332.01 1210.05 L1332.6 1210.05 L1333.18 1210.05 L1333.77 1210.05 L1334.35 1210.05 L1334.94 1210.05 L1335.53 1210.05 L1336.11 1210.05 L1336.7 1210.05 L1337.29 1210.05 L1337.87 1210.05 L1338.46 1210.05 L1339.05 1210.05 L1339.63 1210.05 L1340.22 1210.05 L1340.8 1210.05 L1341.39 1210.05 L1341.98 1210.05 L1342.56 1210.05 L1343.15 1210.05 L1343.74 1210.05 L1344.32 1210.05 L1344.91 1210.05 L1345.5 1210.05 L1346.08 1210.05 L1346.67 1210.05 L1347.26 1210.05 L1347.84 1210.05 L1348.43 1210.05 L1349.01 1210.05 L1349.6 1210.05 L1350.19 1210.05 L1350.77 1210.05 L1351.36 1210.05 L1351.95 1210.05 L1352.53 1210.05 L1353.12 1210.05 L1353.71 1210.05 L1354.29 1210.05 L1354.88 1210.05 L1355.47 1210.05 L1356.05 1210.05 L1356.64 1210.05 L1357.22 1210.05 L1357.81 1210.05 L1358.4 1210.05 L1358.98 1210.05 L1359.57 1210.05 L1360.16 1210.05 L1360.74 1210.05 L1361.33 1210.05 L1361.92 1210.05 L1362.5 1210.05 L1363.09 1210.05 L1363.68 1210.05 L1364.26 1210.05 L1364.85 1210.05 L1365.43 1210.05 L1366.02 1210.05 L1366.61 1210.05 L1367.19 1210.05 L1367.78 1210.05 L1368.37 1210.05 L1368.95 1210.05 L1369.54 1210.05 L1370.13 1210.05 L1370.71 1210.05 L1371.3 1210.05 L1371.88 1210.05 L1372.47 1210.05 L1373.06 1210.05 L1373.64 1210.05 L1374.23 1210.05 L1374.82 1210.05 L1375.4 1210.05 L1375.99 1210.05 L1376.58 1210.05 L1377.16 1210.05 L1377.75 1210.05 L1378.34 1210.05 L1378.92 1210.05 L1379.51 1210.05 L1380.09 1210.05 L1380.68 1210.05 L1381.27 1210.05 L1381.85 1210.05 L1382.44 1210.05 L1383.03 1210.05 L1383.61 1210.05 L1384.2 1210.05 L1384.79 1210.05 L1385.37 1210.05 L1385.96 1210.05 L1386.55 1210.05 L1387.13 1210.05 L1387.72 1210.05 L1388.3 1210.05 L1388.89 1210.05 L1389.48 1210.05 L1390.06 1210.05 L1390.65 1210.05 L1391.24 1210.05 L1391.82 1210.05 L1392.41 1210.05 L1393 1210.05 L1393.58 1210.05 L1394.17 1210.05 L1394.75 1210.05 L1395.34 1210.05 L1395.93 1210.05 L1396.51 1210.05 L1397.1 1210.05 L1397.69 1210.05 L1398.27 1210.05 L1398.86 1210.05 L1399.45 1210.05 L1400.03 1210.05 L1400.62 1210.05 L1401.21 1210.05 L1401.79 1210.05 L1402.38 1210.05 L1402.96 1210.05 L1403.55 1210.05 L1404.14 1210.05 L1404.72 1210.05 L1405.31 1210.05 L1405.9 1210.05 L1406.48 1210.05 L1407.07 1210.05 L1407.66 1210.05 L1408.24 1210.05 L1408.83 1210.05 L1409.42 1210.05 L1410 1210.05 L1410.59 1210.05 L1411.17 1210.05 L1411.76 1210.05 L1412.35 1210.05 L1412.93 1210.05 L1413.52 1210.05 L1414.11 1210.05 L1414.69 1210.05 L1415.28 1210.05 L1415.87 1210.05 L1416.45 1210.05 L1417.04 1210.05 L1417.63 1210.05 L1418.21 1210.05 L1418.8 1210.05 L1419.38 1210.05 L1419.97 1210.05 L1420.56 1210.05 L1421.14 1210.05 L1421.73 1210.05 L1422.32 1210.05 L1422.9 1210.05 L1423.49 1210.05 L1424.08 1210.05 L1424.66 1210.05 L1425.25 1210.05 L1425.83 1210.05 L1426.42 1210.05 L1427.01 1210.05 L1427.59 1210.05 L1428.18 1210.05 L1428.77 1210.05 L1429.35 1210.05 L1429.94 1210.05 L1430.53 1210.05 L1431.11 1210.05 L1431.7 1210.05 L1432.29 1210.05 L1432.87 1210.05 L1433.46 1210.05 L1434.04 1210.05 L1434.63 1210.05 L1435.22 1210.05 L1435.8 1210.05 L1436.39 1210.05 L1436.98 1210.05 L1437.56 1210.05 L1438.15 1210.05 L1438.74 1210.05 L1439.32 1210.05 L1439.91 1210.05 L1440.5 1210.05 L1441.08 1210.05 L1441.67 1210.05 L1442.25 1210.05 L1442.84 1210.05 L1443.43 1210.05 L1444.01 1210.05 L1444.6 1210.05 L1445.19 1210.05 L1445.77 1210.05 L1446.36 1210.05 L1446.95 1210.05 L1447.53 1210.05 L1448.12 1210.05 L1448.7 1210.05 L1449.29 1210.05 L1449.88 1210.05 L1450.46 1210.05 L1451.05 1210.05 L1451.64 1210.05 L1452.22 1210.05 L1452.81 1210.05 L1453.4 1210.05 L1453.98 1210.05 L1454.57 1210.05 L1455.16 1210.05 L1455.74 1210.05 L1456.33 1210.05 L1456.91 1210.05 L1457.5 1210.05 L1458.09 1210.05 L1458.67 1210.05 L1459.26 1210.05 L1459.85 1210.05 L1460.43 1210.05 L1461.02 1210.05 L1461.61 1210.05 L1462.19 1210.05 L1462.78 1210.05 L1463.37 1210.05 L1463.95 1210.05 L1464.54 1210.05 L1465.12 1210.05 L1465.71 1210.05 L1466.3 1210.05 L1466.88 1210.05 L1467.47 1210.05 L1468.06 1210.05 L1468.64 1210.05 L1469.23 1210.05 L1469.82 1210.05 L1470.4 1210.05 L1470.99 1210.05 L1471.57 1210.05 L1472.16 1210.05 L1472.75 1210.05 L1473.33 1210.05 L1473.92 1210.05 L1474.51 1210.05 L1475.09 1210.05 L1475.68 1210.05 L1476.27 1210.05 L1476.85 1210.05 L1477.44 1210.05 L1478.03 1210.05 L1478.61 1210.05 L1479.2 1210.05 L1479.78 1210.05 L1480.37 1210.05 L1480.96 1210.05 L1481.54 1210.05 L1482.13 1210.05 L1482.72 1210.05 L1483.3 1210.05 L1483.89 1210.05 L1484.48 1210.05 L1485.06 1210.05 L1485.65 1210.05 L1486.24 1210.05 L1486.82 1210.05 L1487.41 1210.05 L1487.99 1210.05 L1488.58 1210.05 L1489.17 1210.05 L1489.75 1210.05 L1490.34 1210.05 L1490.93 1210.05 L1491.51 1210.05 L1492.1 1210.05 L1492.69 1210.05 L1493.27 1210.05 L1493.86 1210.05 L1494.45 1210.05 L1495.03 1210.05 L1495.62 1210.05 L1496.2 1210.05 L1496.79 1210.05 L1497.38 1210.05 L1497.96 1210.05 L1498.55 1210.05 L1499.14 1210.05 L1499.72 1210.05 L1500.31 1210.05 L1500.9 1210.05 L1501.48 1210.05 L1502.07 1210.05 L1502.65 1210.05 L1503.24 1210.05 L1503.83 1210.05 L1504.41 1210.05 L1505 1210.05 L1505.59 1210.05 L1506.17 1210.05 L1506.76 1210.05 L1507.35 1210.05 L1507.93 1210.05 L1508.52 1210.05 L1509.11 1210.05 L1509.69 1210.05 L1510.28 1210.05 L1510.86 1210.05 L1511.45 1210.05 L1512.04 1210.05 L1512.62 1210.05 L1513.21 1210.05 L1513.8 1210.05 L1514.38 1210.05 L1514.97 1210.05 L1515.56 1210.05 L1516.14 1210.05 L1516.73 1210.05 L1517.32 1210.05 L1517.9 1210.05 L1518.49 1210.05 L1519.07 1210.05 L1519.66 1210.05 L1520.25 1210.05 L1520.83 1210.05 L1521.42 1210.05 L1522.01 1210.05 L1522.59 1210.05 L1523.18 1210.05 L1523.77 1210.05 L1524.35 1210.05 L1524.94 1210.05 L1525.52 1210.05 L1526.11 1210.05 L1526.7 1210.05 L1527.28 1210.05 L1527.87 1210.05 L1528.46 1210.05 L1529.04 1210.05 L1529.63 1210.05 L1530.22 1210.05 L1530.8 1210.05 L1531.39 1210.05 L1531.98 1210.05 L1532.56 1210.05 L1533.15 1210.05 L1533.73 1210.05 L1534.32 1210.05 L1534.91 1210.05 L1535.49 1210.05 L1536.08 1210.05 L1536.67 1210.05 L1537.25 1210.05 L1537.84 1210.05 L1538.43 1210.05 L1539.01 1210.05 L1539.6 1210.05 L1540.19 1210.05 L1540.77 1210.05 L1541.36 1210.05 L1541.94 1210.05 L1542.53 1210.05 L1543.12 1210.05 L1543.7 1210.05 L1544.29 1210.05 L1544.88 1210.05 L1545.46 1210.05 L1546.05 1210.05 L1546.64 1210.05 L1547.22 1210.05 L1547.81 1210.05 L1548.4 1210.05 L1548.98 1210.05 L1549.57 1210.05 L1550.15 1210.05 L1550.74 1210.05 L1551.33 1210.05 L1551.91 1210.05 L1552.5 1210.05 L1553.09 1210.05 L1553.67 1210.05 L1554.26 1210.05 L1554.85 1210.05 L1555.43 1210.05 L1556.02 1210.05 L1556.6 1210.05 L1557.19 1210.05 L1557.78 1210.05 L1558.36 1210.05 L1558.95 1210.05 L1559.54 1210.05 L1560.12 1210.05 L1560.71 1210.05 L1561.3 1210.05 L1561.88 1210.05 L1562.47 1210.05 L1563.06 1210.05 L1563.64 1210.05 L1564.23 1210.05 L1564.81 1210.05 L1565.4 1210.05 L1565.99 1210.05 L1566.57 1210.05 L1567.16 1210.05 L1567.75 1210.05 L1568.33 1210.05 L1568.92 1210.05 L1569.51 1210.05 L1570.09 1210.05 L1570.68 1210.05 L1571.27 1210.05 L1571.85 1210.05 L1572.44 1210.05 L1573.02 1210.05 L1573.61 1210.05 L1574.2 1210.05 L1574.78 1210.05 L1575.37 1210.05 L1575.96 1210.05 L1576.54 1210.05 L1577.13 1210.05 L1577.72 1210.05 L1578.3 1210.05 L1578.89 1210.05 L1579.47 1210.05 L1580.06 1210.05 L1580.65 1210.05 L1581.23 1210.05 L1581.82 1210.05 L1582.41 1210.05 L1582.99 1210.05 L1583.58 1210.05 L1584.17 1210.05 L1584.75 1210.05 L1585.34 1210.05 L1585.93 1210.05 L1586.51 1210.05 L1587.1 1210.05 L1587.68 1210.05 L1588.27 1210.05 L1588.86 1210.05 L1589.44 1210.05 L1590.03 1210.05 L1590.62 1210.05 L1591.2 1210.05 L1591.79 1210.05 L1592.38 1210.05 L1592.96 1210.05 L1593.55 1210.05 L1594.14 1210.05 L1594.72 1210.05 L1595.31 1210.05 L1595.89 1210.05 L1596.48 1210.05 L1597.07 1210.05 L1597.65 1210.05 L1598.24 1210.05 L1598.83 1210.05 L1599.41 1210.05 L1600 1210.05 L1600.59 1210.05 L1601.17 1210.05 L1601.76 1210.05 L1602.34 1210.05 L1602.93 1210.05 L1603.52 1210.05 L1604.1 1210.05 L1604.69 1210.05 L1605.28 1210.05 L1605.86 1210.05 L1606.45 1210.05 L1607.04 1210.05 L1607.62 1210.05 L1608.21 1210.05 L1608.8 1210.05 L1609.38 1210.05 L1609.97 1210.05 L1610.55 1210.05 L1611.14 1210.05 L1611.73 1210.05 L1612.31 1210.05 L1612.9 1210.05 L1613.49 1210.05 L1614.07 1210.05 L1614.66 1210.05 L1615.25 1210.05 L1615.83 1210.05 L1616.42 1210.05 L1617.01 1210.05 L1617.59 1210.05 L1618.18 1210.05 L1618.76 1210.05 L1619.35 1210.05 L1619.94 1210.05 L1620.52 1210.05 L1621.11 1210.05 L1621.7 1210.05 L1622.28 1210.05 L1622.87 1210.05 L1623.46 1210.05 L1624.04 1210.05 L1624.63 1210.05 L1625.22 1210.05 L1625.8 1210.05 L1626.39 1210.05 L1626.97 1210.05 L1627.56 1210.05 L1628.15 1210.05 L1628.73 1210.05 L1629.32 1210.05 L1629.91 1210.05 L1630.49 1210.05 L1631.08 1210.05 L1631.67 1210.05 L1632.25 1210.05 L1632.84 1210.05 L1633.42 1210.05 L1634.01 1210.05 L1634.6 1210.05 L1635.18 1210.05 L1635.77 1210.05 L1636.36 1210.05 L1636.94 1210.05 L1637.53 1210.05 L1638.12 1210.05 L1638.7 1210.05 L1639.29 1210.05 L1639.88 1210.05 L1640.46 1210.05 L1641.05 1210.05 L1641.63 1210.05 L1642.22 1210.05 L1642.81 1210.05 L1643.39 1210.05 L1643.98 1210.05 L1644.57 1210.05 L1645.15 1210.05 L1645.74 1210.05 L1646.33 1210.05 L1646.91 1210.05 L1647.5 1210.05 L1648.09 1210.05 L1648.67 1210.05 L1649.26 1210.05 L1649.84 1210.05 L1650.43 1210.05 L1651.02 1210.05 L1651.6 1210.05 L1652.19 1210.05 L1652.78 1210.05 L1653.36 1210.05 L1653.95 1210.05 L1654.54 1210.05 L1655.12 1210.05 L1655.71 1210.05 L1656.29 1210.05 L1656.88 1210.05 L1657.47 1210.05 L1658.05 1210.05 L1658.64 1210.05 L1659.23 1210.05 L1659.81 1210.05 L1660.4 1210.05 L1660.99 1210.05 L1661.57 1210.05 L1662.16 1210.05 L1662.75 1210.05 L1663.33 1210.05 L1663.92 1210.05 L1664.5 1210.05 L1665.09 1210.05 L1665.68 1210.05 L1666.26 1210.05 L1666.85 1210.05 L1667.44 1210.05 L1668.02 1210.05 L1668.61 1210.05 L1669.2 1210.05 L1669.78 1210.05 L1670.37 1210.05 L1670.96 1210.05 L1671.54 1210.05 L1672.13 1210.05 L1672.71 1210.05 L1673.3 1210.05 L1673.89 1210.05 L1674.47 1210.05 L1675.06 1210.05 L1675.65 1210.05 L1676.23 1210.05 L1676.82 1210.05 L1677.41 1210.05 L1677.99 1210.05 L1678.58 1210.05 L1679.17 1210.05 L1679.75 1210.05 L1680.34 1210.05 L1680.92 1210.05 L1681.51 1210.05 L1682.1 1210.05 L1682.68 1210.05 L1683.27 1210.05 L1683.86 1210.05 L1684.44 1210.05 L1685.03 1210.05 L1685.62 1210.05 L1686.2 1210.05 L1686.79 1210.05 L1687.37 1210.05 L1687.96 1210.05 L1688.55 1210.05 L1689.13 1210.05 L1689.72 1210.05 L1690.31 1210.05 L1690.89 1210.05 L1691.48 1210.05 L1692.07 1210.05 L1692.65 1210.05 L1693.24 1210.05 L1693.83 1210.05 L1694.41 1210.05 L1695 1210.05 L1695.58 1210.05 L1696.17 1210.05 L1696.76 1210.05 L1697.34 1210.05 L1697.93 1210.05 L1698.52 1210.05 L1699.1 1210.05 L1699.69 1210.05 L1700.28 1210.05 L1700.86 1210.05 L1701.45 1210.05 L1702.04 1210.05 L1702.62 1210.05 L1703.21 1210.05 L1703.79 1210.05 L1704.38 1210.05 L1704.97 1210.05 L1705.55 1210.05 L1706.14 1210.05 L1706.73 1210.05 L1707.31 1210.05 L1707.9 1210.05 L1708.49 1210.05 L1709.07 1210.05 L1709.66 1210.05 L1710.24 1210.05 L1710.83 1210.05 L1711.42 1210.05 L1712 1210.05 L1712.59 1210.05 L1713.18 1210.05 L1713.76 1210.05 L1714.35 1210.05 L1714.94 1210.05 L1715.52 1210.05 L1716.11 1210.05 L1716.7 1210.05 L1717.28 1210.05 L1717.87 1210.05 L1718.45 1210.05 L1719.04 1210.05 L1719.63 1210.05 L1720.21 1210.05 L1720.8 1210.05 L1721.39 1210.05 L1721.97 1210.05 L1722.56 1210.05 L1723.15 1210.05 L1723.73 1210.05 L1724.32 1210.05 L1724.91 1210.05 L1725.49 1210.05 L1726.08 1210.05 L1726.66 1210.05 L1727.25 1210.05 L1727.84 1210.05 L1728.42 1210.05 L1729.01 1210.05 L1729.6 1210.05 L1730.18 1210.05 L1730.77 1210.05 L1731.36 1210.05 L1731.94 1210.05 L1732.53 1210.05 L1733.11 1210.05 L1733.7 1210.05 L1734.29 1210.05 L1734.87 1210.05 L1735.46 1210.05 L1736.05 1210.05 L1736.63 1210.05 L1737.22 1210.05 L1737.81 1210.05 L1738.39 1210.05 L1738.98 1210.05 L1739.57 1210.05 L1740.15 1210.05 L1740.74 1210.05 L1741.32 1210.05 L1741.91 1210.05 L1742.5 1210.05 L1743.08 1210.05 L1743.67 1210.05 L1744.26 1210.05 L1744.84 1210.05 L1745.43 1210.05 L1746.02 1210.05 L1746.6 1210.05 L1747.19 1210.05 L1747.78 1210.05 L1748.36 1210.05 L1748.95 1210.05 L1749.53 1210.05 L1750.12 1210.05 L1750.71 1210.05 L1751.29 1210.05 L1751.88 1210.05 L1752.47 1210.05 L1753.05 1210.05 L1753.64 1210.05 L1754.23 1210.05 L1754.81 1210.05 L1755.4 1210.05 L1755.99 1210.05 L1756.57 1210.05 L1757.16 1210.05 L1757.74 1210.05 L1758.33 1210.05 L1758.92 1210.05 L1759.5 1210.05 L1760.09 1210.05 L1760.68 1210.05 L1761.26 1210.05 L1761.85 1210.05 L1762.44 1210.05 L1763.02 1210.05 L1763.61 1210.05 L1764.19 1210.05 L1764.78 1210.05 L1765.37 1210.05 L1765.95 1210.05 L1766.54 1210.05 L1767.13 1210.05 L1767.71 1210.05 L1768.3 1210.05 L1768.89 1210.05 L1769.47 1210.05 L1770.06 1210.05 L1770.65 1210.05 L1771.23 1210.05 L1771.82 1210.05 L1772.4 1210.05 L1772.99 1210.05 L1773.58 1210.05 L1774.16 1210.05 L1774.75 1210.05 L1775.34 1210.05 L1775.92 1210.05 L1776.51 1210.05 L1777.1 1210.05 L1777.68 1210.05 L1778.27 1210.05 L1778.86 1210.05 L1779.44 1210.05 L1780.03 1210.05 L1780.61 1210.05 L1781.2 1210.05 L1781.79 1210.05 L1782.37 1210.05 L1782.96 1210.05 L1783.55 1210.05 L1784.13 1210.05 L1784.72 1210.05 L1785.31 1210.05 L1785.89 1210.05 L1786.48 1210.05 L1787.06 1210.05 L1787.65 1210.05 L1788.24 1210.05 L1788.82 1210.05 L1789.41 1210.05 L1790 1210.05 L1790.58 1210.05 L1791.17 1210.05 L1791.76 1210.05 L1792.34 1210.05 L1792.93 1210.05 L1793.52 1210.05 L1794.1 1210.05 L1794.69 1210.05 L1795.27 1210.05 L1795.86 1210.05 L1796.45 1210.05 L1797.03 1210.05 L1797.62 1210.05 L1798.21 1210.05 L1798.79 1210.05 L1799.38 1210.05 L1799.97 1210.05 L1800.55 1210.05 L1801.14 1210.05 L1801.73 1210.05 L1802.31 1210.05 L1802.9 1210.05 L1803.48 1210.05 L1804.07 1210.05 L1804.66 1210.05 L1805.24 1210.05 L1805.83 1210.05 L1806.42 1210.05 L1807 1210.05 L1807.59 1210.05 L1808.18 1210.05 L1808.76 1210.05 L1809.35 1210.05 L1809.94 1210.05 L1810.52 1210.05 L1811.11 1210.05 L1811.69 1210.05 L1812.28 1210.05 L1812.87 1210.05 L1813.45 1210.05 L1814.04 1210.05 L1814.63 1210.05 L1815.21 1210.05 L1815.8 1210.05 L1816.39 1210.05 L1816.97 1210.05 L1817.56 1210.05 L1818.14 1210.05 L1818.73 1210.05 L1819.32 1210.05 L1819.9 1210.05 L1820.49 1210.05 L1821.08 1210.05 L1821.66 1210.05 L1822.25 1210.05 L1822.84 1210.05 L1823.42 1210.05 L1824.01 1210.05 L1824.6 1210.05 L1825.18 1210.05 L1825.77 1210.05 L1826.35 1210.05 L1826.94 1210.05 L1827.53 1210.05 L1828.11 1210.05 L1828.7 1210.05 L1829.29 1210.05 L1829.87 1210.05 L1830.46 1210.05 L1831.05 1210.05 L1831.63 1210.05 L1832.22 1210.05 L1832.81 1210.05 L1833.39 1210.05 L1833.98 1210.05 L1834.56 1210.05 L1835.15 1210.05 L1835.74 1210.05 L1836.32 1210.05 L1836.91 1210.05 L1837.5 1210.05 L1838.08 1210.05 L1838.67 1210.05 L1839.26 1210.05 L1839.84 1210.05 L1840.43 1210.05 L1841.01 1210.05 L1841.6 1210.05 L1842.19 1210.05 L1842.77 1210.05 L1843.36 1210.05 L1843.95 1210.05 L1844.53 1210.05 L1845.12 1210.05 L1845.71 1210.05 L1846.29 1210.05 L1846.88 1210.05 L1847.47 1210.05 L1848.05 1210.05 L1848.64 1210.05 L1849.22 1210.05 L1849.81 1210.05 L1850.4 1210.05 L1850.98 1210.05 L1851.57 1210.05 L1852.16 1210.05 L1852.74 1210.05 L1853.33 1210.05 L1853.92 1210.05 L1854.5 1210.05 L1855.09 1210.05 L1855.68 1210.05 L1856.26 1210.05 L1856.85 1210.05 L1857.43 1210.05 L1858.02 1210.05 L1858.61 1210.05 L1859.19 1210.05 L1859.78 1210.05 L1860.37 1210.05 L1860.95 1210.05 L1861.54 1210.05 L1862.13 1210.05 L1862.71 1210.05 L1863.3 1210.05 L1863.88 1210.05 L1864.47 1210.05 L1865.06 1210.05 L1865.64 1210.05 L1866.23 1210.05 L1866.82 1210.05 L1867.4 1210.05 L1867.99 1210.05 L1868.58 1210.05 L1869.16 1210.05 L1869.75 1210.05 L1870.34 1210.05 L1870.92 1210.05 L1871.51 1210.05 L1872.09 1210.05 L1872.68 1210.05 L1873.27 1210.05 L1873.85 1210.05 L1874.44 1210.05 L1875.03 1210.05 L1875.61 1210.05 L1876.2 1210.05 L1876.79 1210.05 L1877.37 1210.05 L1877.96 1210.05 L1878.55 1210.05 L1879.13 1210.05 L1879.72 1210.05 L1880.3 1210.05 L1880.89 1210.05 L1881.48 1210.05 L1882.06 1210.05 L1882.65 1210.05 L1883.24 1210.05 L1883.82 1210.05 L1884.41 1210.05 L1885 1210.05 L1885.58 1210.05 L1886.17 1210.05 L1886.76 1210.05 L1887.34 1210.05 L1887.93 1210.05 L1888.51 1210.05 L1889.1 1210.05 L1889.69 1210.05 L1890.27 1210.05 L1890.86 1210.05 L1891.45 1210.05 L1892.03 1210.05 L1892.62 1210.05 L1893.21 1210.05 L1893.79 1210.05 L1894.38 1210.05 L1894.96 1210.05 L1895.55 1210.05 L1896.14 1210.05 L1896.72 1210.05 L1897.31 1210.05 L1897.9 1210.05 L1898.48 1210.05 L1899.07 1210.05 L1899.66 1210.05 L1900.24 1210.05 L1900.83 1210.05 L1901.42 1210.05 L1902 1210.05 L1902.59 1210.05 L1903.17 1210.05 L1903.76 1210.05 L1904.35 1210.05 L1904.93 1210.05 L1905.52 1210.05 L1906.11 1210.05 L1906.69 1210.05 L1907.28 1210.05 L1907.87 1210.05 L1908.45 1210.05 L1909.04 1210.05 L1909.63 1210.05 L1910.21 1210.05 L1910.8 1210.05 L1911.38 1210.05 L1911.97 1210.05 L1912.56 1210.05 L1913.14 1210.05 L1913.73 1210.05 L1914.32 1210.05 L1914.9 1210.05 L1915.49 1210.05 L1916.08 1210.05 L1916.66 1210.05 L1917.25 1210.05 L1917.83 1210.05 L1918.42 1210.05 L1919.01 1210.05 L1919.59 1210.05 L1920.18 1210.05 L1920.77 1210.05 L1921.35 1210.05 L1921.94 1210.05 L1922.53 1210.05 L1923.11 1210.05 L1923.7 1210.05 L1924.29 1210.05 L1924.87 1210.05 L1925.46 1210.05 L1926.04 1210.05 L1926.63 1210.05 L1927.22 1210.05 L1927.8 1210.05 L1928.39 1210.05 L1928.98 1210.05 L1929.56 1210.05 L1930.15 1210.05 L1930.74 1210.05 L1931.32 1210.05 L1931.91 1210.05 L1932.5 1210.05 L1933.08 1210.05 L1933.67 1210.05 L1934.25 1210.05 L1934.84 1210.05 L1935.43 1210.05 L1936.01 1210.05 L1936.6 1210.05 L1937.19 1210.05 L1937.77 1210.05 L1938.36 1210.05 L1938.95 1210.05 L1939.53 1210.05 L1940.12 1210.05 L1940.71 1210.05 L1941.29 1210.05 L1941.88 1210.05 L1942.46 1210.05 L1943.05 1210.05 L1943.64 1210.05 L1944.22 1210.05 L1944.81 1210.05 L1945.4 1210.05 L1945.98 1210.05 L1946.57 1210.05 L1947.16 1210.05 L1947.74 1210.05 L1948.33 1210.05 L1948.91 1210.05 L1949.5 1210.05 L1950.09 1210.05 L1950.67 1210.05 L1951.26 1210.05 L1951.85 1210.05 L1952.43 1210.05 L1953.02 1210.05 L1953.61 1210.05 L1954.19 1210.05 L1954.78 1210.05 L1955.37 1210.05 L1955.95 1210.05 L1956.54 1210.05 L1957.12 1210.05 L1957.71 1210.05 L1958.3 1210.05 L1958.88 1210.05 L1959.47 1210.05 L1960.06 1210.05 L1960.64 1210.05 L1961.23 1210.05 L1961.82 1210.05 L1962.4 1210.05 L1962.99 1210.05 L1963.58 1210.05 L1964.16 1210.05 L1964.75 1210.05 L1965.33 1210.05 L1965.92 1210.05 L1966.51 1210.05 L1967.09 1210.05 L1967.68 1210.05 L1968.27 1210.05 L1968.85 1210.05 L1969.44 1210.05 L1970.03 1210.05 L1970.61 1210.05 L1971.2 1210.05 L1971.78 1210.05 L1972.37 1210.05 L1972.96 1210.05 L1973.54 1210.05 L1974.13 1210.05 L1974.72 1210.05 L1975.3 1210.05 L1975.89 1210.05 L1976.48 1210.05 L1977.06 1210.05 L1977.65 1210.05 L1978.24 1210.05 L1978.82 1210.05 L1979.41 1210.05 L1979.99 1210.05 L1980.58 1210.05 L1981.17 1210.05 L1981.75 1210.05 L1982.34 1210.05 L1982.93 1210.05 L1983.51 1210.05 L1984.1 1210.05 L1984.69 1210.05 L1985.27 1210.05 L1985.86 1210.05 L1986.45 1210.05 L1987.03 1210.05 L1987.62 1210.05 L1988.2 1210.05 L1988.79 1210.05 L1989.38 1210.05 L1989.96 1210.05 L1990.55 1210.05 L1991.14 1210.05 L1991.72 1210.05 L1992.31 1210.05 L1992.9 1210.05 L1993.48 1210.05 L1994.07 1210.05 L1994.65 1210.05 L1995.24 1210.05 L1995.83 1210.05 L1996.41 1210.05 L1997 1210.05 L1997.59 1210.05 L1998.17 1210.05 L1998.76 1210.05 L1999.35 1210.05 L1999.93 1210.05 L2000.52 1210.05 L2001.11 1210.05 L2001.69 1210.05 L2002.28 1210.05 L2002.86 1210.05 L2003.45 1210.05 L2004.04 1210.05 L2004.62 1210.05 L2005.21 1210.05 L2005.8 1210.05 L2006.38 1210.05 L2006.97 1210.05 L2007.56 1210.05 L2008.14 1210.05 L2008.73 1210.05 L2009.32 1210.05 L2009.9 1210.05 L2010.49 1210.05 L2011.07 1210.05 L2011.66 1210.05 L2012.25 1210.05 L2012.83 1210.05 L2013.42 1210.05 L2014.01 1210.05 L2014.59 1210.05 L2015.18 1210.05 L2015.77 1210.05 L2016.35 1210.05 L2016.94 1210.05 L2017.53 1210.05 L2018.11 1210.05 L2018.7 1210.05 L2019.28 1210.05 L2019.87 1210.05 L2020.46 1210.05 L2021.04 1210.05 L2021.63 1210.05 L2022.22 1210.05 L2022.8 1210.05 L2023.39 1210.05 L2023.98 1210.05 L2024.56 1210.05 L2025.15 1210.05 L2025.73 1210.05 L2026.32 1210.05 L2026.91 1210.05 L2027.49 1210.05 L2028.08 1210.05 L2028.67 1210.05 L2029.25 1210.05 L2029.84 1210.05 L2030.43 1210.05 L2031.01 1210.05 L2031.6 1210.05 L2032.19 1210.05 L2032.77 1210.05 L2033.36 1210.05 L2033.94 1210.05 L2034.53 1210.05 L2035.12 1210.05 L2035.7 1210.05 L2036.29 1210.05 L2036.88 1210.05 L2037.46 1210.05 L2038.05 1210.05 L2038.64 1210.05 L2039.22 1210.05 L2039.81 1210.05 L2040.4 1210.05 L2040.98 1210.05 L2041.57 1210.05 L2042.15 1210.05 L2042.74 1210.05 L2043.33 1210.05 L2043.91 1210.05 L2044.5 1210.05 L2045.09 1210.05 L2045.67 1210.05 L2046.26 1210.05 L2046.85 1210.05 L2047.43 1210.05 L2048.02 1210.05 L2048.6 1210.05 L2049.19 1210.05 L2049.78 1210.05 L2050.36 1210.05 L2050.95 1210.05 L2051.54 1210.05 L2052.12 1210.05 L2052.71 1210.05 L2053.3 1210.05 L2053.88 1210.05 L2054.47 1210.05 L2055.06 1210.05 L2055.64 1210.05 L2056.23 1210.05 L2056.81 1210.05 L2057.4 1210.05 L2057.99 1210.05 L2058.57 1210.05 L2059.16 1210.05 L2059.75 1210.05 L2060.33 1210.05 L2060.92 1210.05 L2061.51 1210.05 L2062.09 1210.05 L2062.68 1210.05 L2063.27 1210.05 L2063.85 1210.05 L2064.44 1210.05 L2065.02 1210.05 L2065.61 1210.05 L2066.2 1210.05 L2066.78 1210.05 L2067.37 1210.05 L2067.96 1210.05 L2068.54 1210.05 L2069.13 1210.05 L2069.72 1210.05 L2070.3 1210.05 L2070.89 1210.05 L2071.48 1210.05 L2072.06 1210.05 L2072.65 1210.05 L2073.23 1210.05 L2073.82 1210.05 L2074.41 1210.05 L2074.99 1210.05 L2075.58 1210.05 L2076.17 1210.05 L2076.75 1210.05 L2077.34 1210.05 L2077.93 1210.05 L2078.51 1210.05 L2079.1 1210.05 L2079.68 1210.05 L2080.27 1210.05 L2080.86 1210.05 L2081.44 1210.05 L2082.03 1210.05 L2082.62 1210.05 L2083.2 1210.05 L2083.79 1210.05 L2084.38 1210.05 L2084.96 1210.05 L2085.55 1210.05 L2086.14 1210.05 L2086.72 1210.05 L2087.31 1210.05 L2087.89 1210.05 L2088.48 1210.05 L2089.07 1210.05 L2089.65 1210.05 L2090.24 1210.05 L2090.83 1210.05 L2091.41 1210.05 L2092 1210.05 L2092.59 1210.05 L2093.17 1210.05 L2093.76 1210.05 L2094.35 1210.05 L2094.93 1210.05 L2095.52 1210.05 L2096.1 1210.05 L2096.69 1210.05 L2097.28 1210.05 L2097.86 1210.05 L2098.45 1210.05 L2099.04 1210.05 L2099.62 1210.05 L2100.21 1210.05 L2100.8 1210.05 L2101.38 1210.05 L2101.97 1210.05 L2102.55 1210.05 L2103.14 1210.05 L2103.73 1210.05 L2104.31 1210.05 L2104.9 1210.05 L2105.49 1210.05 L2106.07 1210.05 L2106.66 1210.05 L2107.25 1210.05 L2107.83 1210.05 L2108.42 1210.05 L2109.01 1210.05 L2109.59 1210.05 L2110.18 1210.05 L2110.76 1210.05 L2111.35 1210.05 L2111.94 1210.05 L2112.52 1210.05 L2113.11 1210.05 L2113.7 1210.05 L2114.28 1210.05 L2114.87 1210.05 L2115.46 1210.05 L2116.04 1210.05 L2116.63 1210.05 L2117.22 1210.05 L2117.8 1210.05 L2118.39 1210.05 L2118.97 1210.05 L2119.56 1210.05 L2120.15 1210.05 L2120.73 1210.05 L2121.32 1210.05 L2121.91 1210.05 L2122.49 1210.05 L2123.08 1210.05 L2123.67 1210.05 L2124.25 1210.05 L2124.84 1210.05 L2125.42 1210.05 L2126.01 1210.05 L2126.6 1210.05 L2127.18 1210.05 L2127.77 1210.05 L2128.36 1210.05 L2128.94 1210.05 L2129.53 1210.05 L2130.12 1210.05 L2130.7 1210.05 L2131.29 1210.05 L2131.88 1210.05 L2132.46 1210.05 L2133.05 1210.05 L2133.63 1210.05 L2134.22 1210.05 L2134.81 1210.05 L2135.39 1210.05 L2135.98 1210.05 L2136.57 1210.05 L2137.15 1210.05 L2137.74 1210.05 L2138.33 1210.05 L2138.91 1210.05 L2139.5 1210.05 L2140.09 1210.05 L2140.67 1210.05 L2141.26 1210.05 L2141.84 1210.05 L2142.43 1210.05 L2143.02 1210.05 L2143.6 1210.05 L2144.19 1210.05 L2144.78 1210.05 L2145.36 1210.05 L2145.95 1210.05 L2146.54 1210.05 L2147.12 1210.05 L2147.71 1210.05 L2148.3 1210.05 L2148.88 1210.05 L2149.47 1210.05 L2150.05 1210.05 L2150.64 1210.05 L2151.23 1210.05 L2151.81 1210.05 L2152.4 1210.05 L2152.99 1210.05 L2153.57 1210.05 L2154.16 1210.05 L2154.75 1210.05 L2155.33 1210.05 L2155.92 1210.05 L2156.5 1210.05 L2157.09 1210.05 L2157.68 1210.05 L2158.26 1210.05 L2158.26 1209.79 L2157.68 1209.79 L2157.09 1209.79 L2156.5 1209.79 L2155.92 1209.79 L2155.33 1209.79 L2154.75 1209.79 L2154.16 1209.79 L2153.57 1209.79 L2152.99 1209.79 L2152.4 1209.79 L2151.81 1209.79 L2151.23 1209.79 L2150.64 1209.79 L2150.05 1209.79 L2149.47 1209.79 L2148.88 1209.79 L2148.3 1209.79 L2147.71 1209.79 L2147.12 1209.79 L2146.54 1209.79 L2145.95 1209.79 L2145.36 1209.79 L2144.78 1209.79 L2144.19 1209.79 L2143.6 1209.79 L2143.02 1209.79 L2142.43 1209.79 L2141.84 1209.79 L2141.26 1209.79 L2140.67 1209.79 L2140.09 1209.79 L2139.5 1209.79 L2138.91 1209.79 L2138.33 1209.79 L2137.74 1209.79 L2137.15 1209.79 L2136.57 1209.79 L2135.98 1209.79 L2135.39 1209.79 L2134.81 1209.79 L2134.22 1209.79 L2133.63 1209.79 L2133.05 1209.79 L2132.46 1209.79 L2131.88 1209.79 L2131.29 1209.79 L2130.7 1209.79 L2130.12 1209.79 L2129.53 1209.79 L2128.94 1209.79 L2128.36 1209.79 L2127.77 1209.79 L2127.18 1209.79 L2126.6 1209.79 L2126.01 1209.79 L2125.42 1209.79 L2124.84 1209.79 L2124.25 1209.79 L2123.67 1209.79 L2123.08 1209.79 L2122.49 1209.79 L2121.91 1209.79 L2121.32 1209.79 L2120.73 1209.79 L2120.15 1209.79 L2119.56 1209.79 L2118.97 1209.79 L2118.39 1209.79 L2117.8 1209.79 L2117.22 1209.79 L2116.63 1209.79 L2116.04 1209.79 L2115.46 1209.79 L2114.87 1209.79 L2114.28 1209.79 L2113.7 1209.79 L2113.11 1209.79 L2112.52 1209.79 L2111.94 1209.79 L2111.35 1209.79 L2110.76 1209.79 L2110.18 1209.79 L2109.59 1209.79 L2109.01 1209.79 L2108.42 1209.79 L2107.83 1209.79 L2107.25 1209.79 L2106.66 1209.79 L2106.07 1209.79 L2105.49 1209.79 L2104.9 1209.79 L2104.31 1209.79 L2103.73 1209.79 L2103.14 1209.79 L2102.55 1209.79 L2101.97 1209.79 L2101.38 1209.79 L2100.8 1209.79 L2100.21 1209.79 L2099.62 1209.79 L2099.04 1209.79 L2098.45 1209.79 L2097.86 1209.79 L2097.28 1209.79 L2096.69 1209.79 L2096.1 1209.79 L2095.52 1209.79 L2094.93 1209.79 L2094.35 1209.79 L2093.76 1209.79 L2093.17 1209.79 L2092.59 1209.79 L2092 1209.79 L2091.41 1209.79 L2090.83 1209.79 L2090.24 1209.79 L2089.65 1209.79 L2089.07 1209.79 L2088.48 1209.79 L2087.89 1209.79 L2087.31 1209.79 L2086.72 1209.79 L2086.14 1209.79 L2085.55 1209.79 L2084.96 1209.79 L2084.38 1209.79 L2083.79 1209.79 L2083.2 1209.79 L2082.62 1209.79 L2082.03 1209.79 L2081.44 1209.79 L2080.86 1209.79 L2080.27 1209.79 L2079.68 1209.79 L2079.1 1209.79 L2078.51 1209.79 L2077.93 1209.79 L2077.34 1209.79 L2076.75 1209.79 L2076.17 1209.79 L2075.58 1209.79 L2074.99 1209.79 L2074.41 1209.79 L2073.82 1209.79 L2073.23 1209.79 L2072.65 1209.79 L2072.06 1209.79 L2071.48 1209.79 L2070.89 1209.79 L2070.3 1209.79 L2069.72 1209.79 L2069.13 1209.79 L2068.54 1209.79 L2067.96 1209.79 L2067.37 1209.79 L2066.78 1209.79 L2066.2 1209.79 L2065.61 1209.79 L2065.02 1209.79 L2064.44 1209.79 L2063.85 1209.79 L2063.27 1209.79 L2062.68 1209.79 L2062.09 1209.79 L2061.51 1209.79 L2060.92 1209.79 L2060.33 1209.79 L2059.75 1209.79 L2059.16 1209.79 L2058.57 1209.79 L2057.99 1209.79 L2057.4 1209.79 L2056.81 1209.79 L2056.23 1209.79 L2055.64 1209.79 L2055.06 1209.79 L2054.47 1209.79 L2053.88 1209.79 L2053.3 1209.79 L2052.71 1209.79 L2052.12 1209.79 L2051.54 1209.79 L2050.95 1209.79 L2050.36 1209.79 L2049.78 1209.79 L2049.19 1209.79 L2048.6 1209.79 L2048.02 1209.79 L2047.43 1209.79 L2046.85 1209.79 L2046.26 1209.79 L2045.67 1209.79 L2045.09 1209.79 L2044.5 1209.79 L2043.91 1209.79 L2043.33 1209.79 L2042.74 1209.79 L2042.15 1209.79 L2041.57 1209.79 L2040.98 1209.79 L2040.4 1209.79 L2039.81 1209.79 L2039.22 1209.79 L2038.64 1209.79 L2038.05 1209.79 L2037.46 1209.79 L2036.88 1209.79 L2036.29 1209.79 L2035.7 1209.79 L2035.12 1209.79 L2034.53 1209.79 L2033.94 1209.79 L2033.36 1209.79 L2032.77 1209.79 L2032.19 1209.79 L2031.6 1209.79 L2031.01 1209.79 L2030.43 1209.79 L2029.84 1209.79 L2029.25 1209.79 L2028.67 1209.79 L2028.08 1209.79 L2027.49 1209.79 L2026.91 1209.79 L2026.32 1209.79 L2025.73 1209.79 L2025.15 1209.79 L2024.56 1209.79 L2023.98 1209.79 L2023.39 1209.79 L2022.8 1209.79 L2022.22 1209.79 L2021.63 1209.79 L2021.04 1209.79 L2020.46 1209.79 L2019.87 1209.79 L2019.28 1209.79 L2018.7 1209.79 L2018.11 1209.79 L2017.53 1209.79 L2016.94 1209.79 L2016.35 1209.79 L2015.77 1209.79 L2015.18 1209.79 L2014.59 1209.79 L2014.01 1209.79 L2013.42 1209.79 L2012.83 1209.79 L2012.25 1209.79 L2011.66 1209.79 L2011.07 1209.79 L2010.49 1209.79 L2009.9 1209.79 L2009.32 1209.79 L2008.73 1209.79 L2008.14 1209.79 L2007.56 1209.79 L2006.97 1209.79 L2006.38 1209.79 L2005.8 1209.79 L2005.21 1209.79 L2004.62 1209.79 L2004.04 1209.79 L2003.45 1209.79 L2002.86 1209.79 L2002.28 1209.79 L2001.69 1209.79 L2001.11 1209.79 L2000.52 1209.79 L1999.93 1209.79 L1999.35 1209.79 L1998.76 1209.79 L1998.17 1209.79 L1997.59 1209.79 L1997 1209.79 L1996.41 1209.79 L1995.83 1209.79 L1995.24 1209.79 L1994.65 1209.79 L1994.07 1209.79 L1993.48 1209.79 L1992.9 1209.79 L1992.31 1209.79 L1991.72 1209.79 L1991.14 1209.79 L1990.55 1209.79 L1989.96 1209.79 L1989.38 1209.79 L1988.79 1209.79 L1988.2 1209.79 L1987.62 1209.79 L1987.03 1209.79 L1986.45 1209.79 L1985.86 1209.79 L1985.27 1209.79 L1984.69 1209.79 L1984.1 1209.79 L1983.51 1209.79 L1982.93 1209.79 L1982.34 1209.79 L1981.75 1209.79 L1981.17 1209.79 L1980.58 1209.79 L1979.99 1209.79 L1979.41 1209.79 L1978.82 1209.79 L1978.24 1209.79 L1977.65 1209.79 L1977.06 1209.79 L1976.48 1209.79 L1975.89 1209.79 L1975.3 1209.79 L1974.72 1209.79 L1974.13 1209.79 L1973.54 1209.79 L1972.96 1209.79 L1972.37 1209.79 L1971.78 1209.79 L1971.2 1209.79 L1970.61 1209.79 L1970.03 1209.79 L1969.44 1209.79 L1968.85 1209.79 L1968.27 1209.79 L1967.68 1209.79 L1967.09 1209.79 L1966.51 1209.79 L1965.92 1209.79 L1965.33 1209.79 L1964.75 1209.79 L1964.16 1209.79 L1963.58 1209.79 L1962.99 1209.79 L1962.4 1209.79 L1961.82 1209.79 L1961.23 1209.79 L1960.64 1209.79 L1960.06 1209.79 L1959.47 1209.79 L1958.88 1209.79 L1958.3 1209.79 L1957.71 1209.79 L1957.12 1209.79 L1956.54 1209.79 L1955.95 1209.79 L1955.37 1209.79 L1954.78 1209.79 L1954.19 1209.79 L1953.61 1209.79 L1953.02 1209.79 L1952.43 1209.79 L1951.85 1209.79 L1951.26 1209.79 L1950.67 1209.79 L1950.09 1209.79 L1949.5 1209.79 L1948.91 1209.79 L1948.33 1209.79 L1947.74 1209.79 L1947.16 1209.79 L1946.57 1209.79 L1945.98 1209.79 L1945.4 1209.79 L1944.81 1209.79 L1944.22 1209.79 L1943.64 1209.79 L1943.05 1209.79 L1942.46 1209.79 L1941.88 1209.79 L1941.29 1209.79 L1940.71 1209.79 L1940.12 1209.79 L1939.53 1209.79 L1938.95 1209.79 L1938.36 1209.79 L1937.77 1209.79 L1937.19 1209.79 L1936.6 1209.79 L1936.01 1209.79 L1935.43 1209.79 L1934.84 1209.79 L1934.25 1209.79 L1933.67 1209.79 L1933.08 1209.79 L1932.5 1209.79 L1931.91 1209.79 L1931.32 1209.79 L1930.74 1209.79 L1930.15 1209.79 L1929.56 1209.79 L1928.98 1209.79 L1928.39 1209.79 L1927.8 1209.79 L1927.22 1209.79 L1926.63 1209.79 L1926.04 1209.79 L1925.46 1209.79 L1924.87 1209.79 L1924.29 1209.79 L1923.7 1209.79 L1923.11 1209.79 L1922.53 1209.79 L1921.94 1209.79 L1921.35 1209.79 L1920.77 1209.79 L1920.18 1209.79 L1919.59 1209.79 L1919.01 1209.79 L1918.42 1209.79 L1917.83 1209.79 L1917.25 1209.79 L1916.66 1209.79 L1916.08 1209.79 L1915.49 1209.79 L1914.9 1209.79 L1914.32 1209.79 L1913.73 1209.79 L1913.14 1209.79 L1912.56 1209.79 L1911.97 1209.79 L1911.38 1209.79 L1910.8 1209.79 L1910.21 1209.79 L1909.63 1209.79 L1909.04 1209.79 L1908.45 1209.79 L1907.87 1209.79 L1907.28 1209.79 L1906.69 1209.79 L1906.11 1209.79 L1905.52 1209.79 L1904.93 1209.79 L1904.35 1209.79 L1903.76 1209.79 L1903.17 1209.79 L1902.59 1209.79 L1902 1209.79 L1901.42 1209.79 L1900.83 1209.79 L1900.24 1209.79 L1899.66 1209.79 L1899.07 1209.79 L1898.48 1209.79 L1897.9 1209.79 L1897.31 1209.79 L1896.72 1209.79 L1896.14 1209.79 L1895.55 1209.79 L1894.96 1209.79 L1894.38 1209.79 L1893.79 1209.79 L1893.21 1209.79 L1892.62 1209.79 L1892.03 1209.79 L1891.45 1209.79 L1890.86 1209.79 L1890.27 1209.79 L1889.69 1209.79 L1889.1 1209.79 L1888.51 1209.79 L1887.93 1209.79 L1887.34 1209.79 L1886.76 1209.79 L1886.17 1209.79 L1885.58 1209.79 L1885 1209.79 L1884.41 1209.79 L1883.82 1209.79 L1883.24 1209.79 L1882.65 1209.79 L1882.06 1209.79 L1881.48 1209.79 L1880.89 1209.79 L1880.3 1209.79 L1879.72 1209.79 L1879.13 1209.79 L1878.55 1209.79 L1877.96 1209.79 L1877.37 1209.79 L1876.79 1209.79 L1876.2 1209.79 L1875.61 1209.79 L1875.03 1209.79 L1874.44 1209.79 L1873.85 1209.79 L1873.27 1209.79 L1872.68 1209.79 L1872.09 1209.79 L1871.51 1209.79 L1870.92 1209.79 L1870.34 1209.79 L1869.75 1209.79 L1869.16 1209.79 L1868.58 1209.79 L1867.99 1209.79 L1867.4 1209.79 L1866.82 1209.79 L1866.23 1209.79 L1865.64 1209.79 L1865.06 1209.79 L1864.47 1209.79 L1863.88 1209.79 L1863.3 1209.79 L1862.71 1209.79 L1862.13 1209.79 L1861.54 1209.79 L1860.95 1209.79 L1860.37 1209.79 L1859.78 1209.79 L1859.19 1209.79 L1858.61 1209.79 L1858.02 1209.79 L1857.43 1209.79 L1856.85 1209.79 L1856.26 1209.79 L1855.68 1209.79 L1855.09 1209.79 L1854.5 1209.79 L1853.92 1209.79 L1853.33 1209.79 L1852.74 1209.79 L1852.16 1209.79 L1851.57 1209.79 L1850.98 1209.79 L1850.4 1209.79 L1849.81 1209.79 L1849.22 1209.79 L1848.64 1209.79 L1848.05 1209.79 L1847.47 1209.79 L1846.88 1209.79 L1846.29 1209.79 L1845.71 1209.79 L1845.12 1209.79 L1844.53 1209.79 L1843.95 1209.79 L1843.36 1209.79 L1842.77 1209.79 L1842.19 1209.79 L1841.6 1209.79 L1841.01 1209.79 L1840.43 1209.79 L1839.84 1209.79 L1839.26 1209.79 L1838.67 1209.79 L1838.08 1209.79 L1837.5 1209.79 L1836.91 1209.79 L1836.32 1209.79 L1835.74 1209.79 L1835.15 1209.79 L1834.56 1209.79 L1833.98 1209.79 L1833.39 1209.79 L1832.81 1209.79 L1832.22 1209.79 L1831.63 1209.79 L1831.05 1209.79 L1830.46 1209.79 L1829.87 1209.79 L1829.29 1209.79 L1828.7 1209.79 L1828.11 1209.79 L1827.53 1209.79 L1826.94 1209.79 L1826.35 1209.79 L1825.77 1209.79 L1825.18 1209.79 L1824.6 1209.79 L1824.01 1209.79 L1823.42 1209.79 L1822.84 1209.79 L1822.25 1209.79 L1821.66 1209.79 L1821.08 1209.79 L1820.49 1209.79 L1819.9 1209.79 L1819.32 1209.79 L1818.73 1209.79 L1818.14 1209.79 L1817.56 1209.79 L1816.97 1209.79 L1816.39 1209.79 L1815.8 1209.79 L1815.21 1209.79 L1814.63 1209.79 L1814.04 1209.79 L1813.45 1209.79 L1812.87 1209.79 L1812.28 1209.79 L1811.69 1209.79 L1811.11 1209.79 L1810.52 1209.79 L1809.94 1209.79 L1809.35 1209.79 L1808.76 1209.79 L1808.18 1209.79 L1807.59 1209.79 L1807 1209.79 L1806.42 1209.79 L1805.83 1209.79 L1805.24 1209.79 L1804.66 1209.79 L1804.07 1209.79 L1803.48 1209.79 L1802.9 1209.79 L1802.31 1209.79 L1801.73 1209.79 L1801.14 1209.79 L1800.55 1209.79 L1799.97 1209.79 L1799.38 1209.79 L1798.79 1209.79 L1798.21 1209.79 L1797.62 1209.79 L1797.03 1209.79 L1796.45 1209.79 L1795.86 1209.79 L1795.27 1209.79 L1794.69 1209.79 L1794.1 1209.79 L1793.52 1209.79 L1792.93 1209.79 L1792.34 1209.79 L1791.76 1209.79 L1791.17 1209.79 L1790.58 1209.79 L1790 1209.79 L1789.41 1209.79 L1788.82 1209.79 L1788.24 1209.79 L1787.65 1209.79 L1787.06 1209.79 L1786.48 1209.79 L1785.89 1209.79 L1785.31 1209.79 L1784.72 1209.79 L1784.13 1209.79 L1783.55 1209.79 L1782.96 1209.79 L1782.37 1209.79 L1781.79 1209.79 L1781.2 1209.79 L1780.61 1209.79 L1780.03 1209.79 L1779.44 1209.79 L1778.86 1209.79 L1778.27 1209.79 L1777.68 1209.79 L1777.1 1209.79 L1776.51 1209.79 L1775.92 1209.79 L1775.34 1209.79 L1774.75 1209.79 L1774.16 1209.79 L1773.58 1209.79 L1772.99 1209.79 L1772.4 1209.79 L1771.82 1209.79 L1771.23 1209.79 L1770.65 1209.79 L1770.06 1209.79 L1769.47 1209.79 L1768.89 1209.79 L1768.3 1209.79 L1767.71 1209.79 L1767.13 1209.79 L1766.54 1209.79 L1765.95 1209.79 L1765.37 1209.79 L1764.78 1209.79 L1764.19 1209.79 L1763.61 1209.79 L1763.02 1209.79 L1762.44 1209.79 L1761.85 1209.79 L1761.26 1209.79 L1760.68 1209.79 L1760.09 1209.79 L1759.5 1209.79 L1758.92 1209.79 L1758.33 1209.79 L1757.74 1209.79 L1757.16 1209.79 L1756.57 1209.79 L1755.99 1209.79 L1755.4 1209.79 L1754.81 1209.79 L1754.23 1209.79 L1753.64 1209.79 L1753.05 1209.79 L1752.47 1209.79 L1751.88 1209.79 L1751.29 1209.79 L1750.71 1209.79 L1750.12 1209.79 L1749.53 1209.79 L1748.95 1209.79 L1748.36 1209.79 L1747.78 1209.79 L1747.19 1209.79 L1746.6 1209.79 L1746.02 1209.79 L1745.43 1209.79 L1744.84 1209.79 L1744.26 1209.79 L1743.67 1209.79 L1743.08 1209.79 L1742.5 1209.79 L1741.91 1209.79 L1741.32 1209.79 L1740.74 1209.79 L1740.15 1209.79 L1739.57 1209.79 L1738.98 1209.79 L1738.39 1209.79 L1737.81 1209.79 L1737.22 1209.79 L1736.63 1209.79 L1736.05 1209.79 L1735.46 1209.79 L1734.87 1209.79 L1734.29 1209.79 L1733.7 1209.79 L1733.11 1209.79 L1732.53 1209.79 L1731.94 1209.79 L1731.36 1209.79 L1730.77 1209.79 L1730.18 1209.79 L1729.6 1209.79 L1729.01 1209.79 L1728.42 1209.79 L1727.84 1209.79 L1727.25 1209.79 L1726.66 1209.79 L1726.08 1209.79 L1725.49 1209.79 L1724.91 1209.79 L1724.32 1209.79 L1723.73 1209.79 L1723.15 1209.79 L1722.56 1209.79 L1721.97 1209.79 L1721.39 1209.79 L1720.8 1209.79 L1720.21 1209.79 L1719.63 1209.79 L1719.04 1209.79 L1718.45 1209.79 L1717.87 1209.79 L1717.28 1209.79 L1716.7 1209.79 L1716.11 1209.79 L1715.52 1209.79 L1714.94 1209.79 L1714.35 1209.79 L1713.76 1209.79 L1713.18 1209.79 L1712.59 1209.79 L1712 1209.79 L1711.42 1209.79 L1710.83 1209.79 L1710.24 1209.79 L1709.66 1209.79 L1709.07 1209.79 L1708.49 1209.79 L1707.9 1209.79 L1707.31 1209.79 L1706.73 1209.79 L1706.14 1209.79 L1705.55 1209.79 L1704.97 1209.79 L1704.38 1209.79 L1703.79 1209.79 L1703.21 1209.79 L1702.62 1209.79 L1702.04 1209.79 L1701.45 1209.79 L1700.86 1209.79 L1700.28 1209.79 L1699.69 1209.79 L1699.1 1209.79 L1698.52 1209.79 L1697.93 1209.79 L1697.34 1209.79 L1696.76 1209.79 L1696.17 1209.79 L1695.58 1209.79 L1695 1209.79 L1694.41 1209.79 L1693.83 1209.79 L1693.24 1209.79 L1692.65 1209.79 L1692.07 1209.79 L1691.48 1209.79 L1690.89 1209.79 L1690.31 1209.79 L1689.72 1209.79 L1689.13 1209.79 L1688.55 1209.79 L1687.96 1209.79 L1687.37 1209.79 L1686.79 1209.79 L1686.2 1209.79 L1685.62 1209.79 L1685.03 1209.79 L1684.44 1209.79 L1683.86 1209.79 L1683.27 1209.79 L1682.68 1209.79 L1682.1 1209.79 L1681.51 1209.79 L1680.92 1209.79 L1680.34 1209.79 L1679.75 1209.79 L1679.17 1209.79 L1678.58 1209.79 L1677.99 1209.79 L1677.41 1209.79 L1676.82 1209.79 L1676.23 1209.79 L1675.65 1209.79 L1675.06 1209.79 L1674.47 1209.79 L1673.89 1209.79 L1673.3 1209.79 L1672.71 1209.79 L1672.13 1209.79 L1671.54 1209.79 L1670.96 1209.79 L1670.37 1209.79 L1669.78 1209.79 L1669.2 1209.79 L1668.61 1209.79 L1668.02 1209.79 L1667.44 1209.79 L1666.85 1209.79 L1666.26 1209.79 L1665.68 1209.79 L1665.09 1209.79 L1664.5 1209.79 L1663.92 1209.79 L1663.33 1209.79 L1662.75 1209.79 L1662.16 1209.79 L1661.57 1209.79 L1660.99 1209.79 L1660.4 1209.79 L1659.81 1209.79 L1659.23 1209.79 L1658.64 1209.79 L1658.05 1209.79 L1657.47 1209.79 L1656.88 1209.79 L1656.29 1209.79 L1655.71 1209.79 L1655.12 1209.79 L1654.54 1209.79 L1653.95 1209.79 L1653.36 1209.79 L1652.78 1209.79 L1652.19 1209.79 L1651.6 1209.79 L1651.02 1209.79 L1650.43 1209.79 L1649.84 1209.79 L1649.26 1209.79 L1648.67 1209.79 L1648.09 1209.79 L1647.5 1209.79 L1646.91 1209.79 L1646.33 1209.79 L1645.74 1209.79 L1645.15 1209.79 L1644.57 1209.79 L1643.98 1209.79 L1643.39 1209.79 L1642.81 1209.79 L1642.22 1209.79 L1641.63 1209.79 L1641.05 1209.79 L1640.46 1209.79 L1639.88 1209.79 L1639.29 1209.79 L1638.7 1209.79 L1638.12 1209.79 L1637.53 1209.79 L1636.94 1209.79 L1636.36 1209.79 L1635.77 1209.79 L1635.18 1209.79 L1634.6 1209.79 L1634.01 1209.79 L1633.42 1209.79 L1632.84 1209.79 L1632.25 1209.79 L1631.67 1209.79 L1631.08 1209.79 L1630.49 1209.79 L1629.91 1209.79 L1629.32 1209.79 L1628.73 1209.79 L1628.15 1209.79 L1627.56 1209.79 L1626.97 1209.79 L1626.39 1209.79 L1625.8 1209.79 L1625.22 1209.79 L1624.63 1209.79 L1624.04 1209.79 L1623.46 1209.79 L1622.87 1209.79 L1622.28 1209.79 L1621.7 1209.79 L1621.11 1209.79 L1620.52 1209.79 L1619.94 1209.79 L1619.35 1209.79 L1618.76 1209.79 L1618.18 1209.79 L1617.59 1209.79 L1617.01 1209.79 L1616.42 1209.79 L1615.83 1209.79 L1615.25 1209.79 L1614.66 1209.79 L1614.07 1209.79 L1613.49 1209.79 L1612.9 1209.79 L1612.31 1209.79 L1611.73 1209.79 L1611.14 1209.79 L1610.55 1209.79 L1609.97 1209.79 L1609.38 1209.79 L1608.8 1209.79 L1608.21 1209.79 L1607.62 1209.79 L1607.04 1209.79 L1606.45 1209.79 L1605.86 1209.79 L1605.28 1209.79 L1604.69 1209.79 L1604.1 1209.79 L1603.52 1209.79 L1602.93 1209.79 L1602.34 1209.79 L1601.76 1209.79 L1601.17 1209.79 L1600.59 1209.79 L1600 1209.79 L1599.41 1209.79 L1598.83 1209.79 L1598.24 1209.79 L1597.65 1209.79 L1597.07 1209.79 L1596.48 1209.79 L1595.89 1209.79 L1595.31 1209.79 L1594.72 1209.79 L1594.14 1209.79 L1593.55 1209.79 L1592.96 1209.79 L1592.38 1209.79 L1591.79 1209.79 L1591.2 1209.79 L1590.62 1209.79 L1590.03 1209.79 L1589.44 1209.79 L1588.86 1209.79 L1588.27 1209.79 L1587.68 1209.79 L1587.1 1209.79 L1586.51 1209.79 L1585.93 1209.79 L1585.34 1209.79 L1584.75 1209.79 L1584.17 1209.79 L1583.58 1209.79 L1582.99 1209.79 L1582.41 1209.79 L1581.82 1209.79 L1581.23 1209.79 L1580.65 1209.79 L1580.06 1209.79 L1579.47 1209.79 L1578.89 1209.79 L1578.3 1209.79 L1577.72 1209.79 L1577.13 1209.79 L1576.54 1209.79 L1575.96 1209.79 L1575.37 1209.79 L1574.78 1209.79 L1574.2 1209.79 L1573.61 1209.79 L1573.02 1209.79 L1572.44 1209.79 L1571.85 1209.79 L1571.27 1209.79 L1570.68 1209.79 L1570.09 1209.79 L1569.51 1209.79 L1568.92 1209.79 L1568.33 1209.79 L1567.75 1209.79 L1567.16 1209.79 L1566.57 1209.79 L1565.99 1209.79 L1565.4 1209.79 L1564.81 1209.79 L1564.23 1209.79 L1563.64 1209.79 L1563.06 1209.79 L1562.47 1209.79 L1561.88 1209.79 L1561.3 1209.79 L1560.71 1209.79 L1560.12 1209.79 L1559.54 1209.79 L1558.95 1209.79 L1558.36 1209.79 L1557.78 1209.79 L1557.19 1209.79 L1556.6 1209.79 L1556.02 1209.79 L1555.43 1209.79 L1554.85 1209.79 L1554.26 1209.79 L1553.67 1209.79 L1553.09 1209.79 L1552.5 1209.79 L1551.91 1209.79 L1551.33 1209.79 L1550.74 1209.79 L1550.15 1209.79 L1549.57 1209.79 L1548.98 1209.79 L1548.4 1209.79 L1547.81 1209.79 L1547.22 1209.79 L1546.64 1209.79 L1546.05 1209.79 L1545.46 1209.79 L1544.88 1209.79 L1544.29 1209.79 L1543.7 1209.79 L1543.12 1209.79 L1542.53 1209.79 L1541.94 1209.79 L1541.36 1209.79 L1540.77 1209.79 L1540.19 1209.79 L1539.6 1209.79 L1539.01 1209.79 L1538.43 1209.79 L1537.84 1209.79 L1537.25 1209.79 L1536.67 1209.79 L1536.08 1209.79 L1535.49 1209.79 L1534.91 1209.79 L1534.32 1209.79 L1533.73 1209.79 L1533.15 1209.79 L1532.56 1209.79 L1531.98 1209.79 L1531.39 1209.79 L1530.8 1209.79 L1530.22 1209.79 L1529.63 1209.79 L1529.04 1209.79 L1528.46 1209.79 L1527.87 1209.79 L1527.28 1209.79 L1526.7 1209.79 L1526.11 1209.79 L1525.52 1209.79 L1524.94 1209.79 L1524.35 1209.79 L1523.77 1209.79 L1523.18 1209.79 L1522.59 1209.79 L1522.01 1209.79 L1521.42 1209.79 L1520.83 1209.79 L1520.25 1209.79 L1519.66 1209.79 L1519.07 1209.79 L1518.49 1209.79 L1517.9 1209.79 L1517.32 1209.79 L1516.73 1209.79 L1516.14 1209.79 L1515.56 1209.79 L1514.97 1209.79 L1514.38 1209.79 L1513.8 1209.79 L1513.21 1209.79 L1512.62 1209.79 L1512.04 1209.79 L1511.45 1209.79 L1510.86 1209.79 L1510.28 1209.79 L1509.69 1209.79 L1509.11 1209.79 L1508.52 1209.79 L1507.93 1209.79 L1507.35 1209.79 L1506.76 1209.79 L1506.17 1209.79 L1505.59 1209.79 L1505 1209.79 L1504.41 1209.79 L1503.83 1209.79 L1503.24 1209.79 L1502.65 1209.79 L1502.07 1209.79 L1501.48 1209.79 L1500.9 1209.79 L1500.31 1209.79 L1499.72 1209.79 L1499.14 1209.79 L1498.55 1209.79 L1497.96 1209.79 L1497.38 1209.79 L1496.79 1209.79 L1496.2 1209.79 L1495.62 1209.79 L1495.03 1209.79 L1494.45 1209.79 L1493.86 1209.79 L1493.27 1209.79 L1492.69 1209.79 L1492.1 1209.79 L1491.51 1209.79 L1490.93 1209.79 L1490.34 1209.79 L1489.75 1209.79 L1489.17 1209.79 L1488.58 1209.79 L1487.99 1209.79 L1487.41 1209.79 L1486.82 1209.79 L1486.24 1209.79 L1485.65 1209.79 L1485.06 1209.79 L1484.48 1209.79 L1483.89 1209.79 L1483.3 1209.79 L1482.72 1209.79 L1482.13 1209.79 L1481.54 1209.79 L1480.96 1209.79 L1480.37 1209.79 L1479.78 1209.79 L1479.2 1209.79 L1478.61 1209.79 L1478.03 1209.79 L1477.44 1209.79 L1476.85 1209.79 L1476.27 1209.79 L1475.68 1209.79 L1475.09 1209.79 L1474.51 1209.79 L1473.92 1209.79 L1473.33 1209.79 L1472.75 1209.79 L1472.16 1209.79 L1471.57 1209.79 L1470.99 1209.79 L1470.4 1209.79 L1469.82 1209.79 L1469.23 1209.79 L1468.64 1209.79 L1468.06 1209.79 L1467.47 1209.79 L1466.88 1209.79 L1466.3 1209.79 L1465.71 1209.79 L1465.12 1209.79 L1464.54 1209.79 L1463.95 1209.79 L1463.37 1209.79 L1462.78 1209.79 L1462.19 1209.79 L1461.61 1209.79 L1461.02 1209.79 L1460.43 1209.79 L1459.85 1209.79 L1459.26 1209.79 L1458.67 1209.79 L1458.09 1209.79 L1457.5 1209.79 L1456.91 1209.79 L1456.33 1209.79 L1455.74 1209.79 L1455.16 1209.79 L1454.57 1209.79 L1453.98 1209.79 L1453.4 1209.79 L1452.81 1209.79 L1452.22 1209.79 L1451.64 1209.79 L1451.05 1209.79 L1450.46 1209.79 L1449.88 1209.79 L1449.29 1209.79 L1448.7 1209.79 L1448.12 1209.79 L1447.53 1209.79 L1446.95 1209.79 L1446.36 1209.79 L1445.77 1209.79 L1445.19 1209.79 L1444.6 1209.79 L1444.01 1209.79 L1443.43 1209.79 L1442.84 1209.79 L1442.25 1209.79 L1441.67 1209.79 L1441.08 1209.79 L1440.5 1209.79 L1439.91 1209.79 L1439.32 1209.79 L1438.74 1209.79 L1438.15 1209.79 L1437.56 1209.79 L1436.98 1209.79 L1436.39 1209.79 L1435.8 1209.79 L1435.22 1209.79 L1434.63 1209.79 L1434.04 1209.79 L1433.46 1209.79 L1432.87 1209.79 L1432.29 1209.79 L1431.7 1209.79 L1431.11 1209.79 L1430.53 1209.79 L1429.94 1209.79 L1429.35 1209.79 L1428.77 1209.79 L1428.18 1209.79 L1427.59 1209.79 L1427.01 1209.79 L1426.42 1209.79 L1425.83 1209.79 L1425.25 1209.79 L1424.66 1209.79 L1424.08 1209.79 L1423.49 1209.79 L1422.9 1209.79 L1422.32 1209.79 L1421.73 1209.79 L1421.14 1209.79 L1420.56 1209.79 L1419.97 1209.79 L1419.38 1209.79 L1418.8 1209.79 L1418.21 1209.79 L1417.63 1209.79 L1417.04 1209.79 L1416.45 1209.79 L1415.87 1209.79 L1415.28 1209.79 L1414.69 1209.79 L1414.11 1209.79 L1413.52 1209.79 L1412.93 1209.79 L1412.35 1209.79 L1411.76 1209.79 L1411.17 1209.79 L1410.59 1209.79 L1410 1209.79 L1409.42 1209.79 L1408.83 1209.79 L1408.24 1209.79 L1407.66 1209.79 L1407.07 1209.79 L1406.48 1209.79 L1405.9 1209.79 L1405.31 1209.79 L1404.72 1209.79 L1404.14 1209.79 L1403.55 1209.79 L1402.96 1209.79 L1402.38 1209.79 L1401.79 1209.79 L1401.21 1209.79 L1400.62 1209.79 L1400.03 1209.79 L1399.45 1209.79 L1398.86 1209.79 L1398.27 1209.79 L1397.69 1209.79 L1397.1 1209.79 L1396.51 1209.79 L1395.93 1209.79 L1395.34 1209.79 L1394.75 1209.79 L1394.17 1209.79 L1393.58 1209.79 L1393 1209.79 L1392.41 1209.79 L1391.82 1209.79 L1391.24 1209.79 L1390.65 1209.79 L1390.06 1209.79 L1389.48 1209.79 L1388.89 1209.79 L1388.3 1209.79 L1387.72 1209.79 L1387.13 1209.79 L1386.55 1209.79 L1385.96 1209.79 L1385.37 1209.79 L1384.79 1209.79 L1384.2 1209.79 L1383.61 1209.79 L1383.03 1209.79 L1382.44 1209.79 L1381.85 1209.79 L1381.27 1209.79 L1380.68 1209.79 L1380.09 1209.79 L1379.51 1209.79 L1378.92 1209.79 L1378.34 1209.79 L1377.75 1209.79 L1377.16 1209.79 L1376.58 1209.79 L1375.99 1209.79 L1375.4 1209.79 L1374.82 1209.79 L1374.23 1209.79 L1373.64 1209.79 L1373.06 1209.79 L1372.47 1209.79 L1371.88 1209.79 L1371.3 1209.79 L1370.71 1209.79 L1370.13 1209.79 L1369.54 1209.79 L1368.95 1209.79 L1368.37 1209.79 L1367.78 1209.79 L1367.19 1209.79 L1366.61 1209.79 L1366.02 1209.79 L1365.43 1209.79 L1364.85 1209.79 L1364.26 1209.79 L1363.68 1209.79 L1363.09 1209.79 L1362.5 1209.79 L1361.92 1209.79 L1361.33 1209.79 L1360.74 1209.79 L1360.16 1209.79 L1359.57 1209.79 L1358.98 1209.79 L1358.4 1209.79 L1357.81 1209.79 L1357.22 1209.79 L1356.64 1209.79 L1356.05 1209.79 L1355.47 1209.79 L1354.88 1209.79 L1354.29 1209.79 L1353.71 1209.79 L1353.12 1209.79 L1352.53 1209.79 L1351.95 1209.79 L1351.36 1209.79 L1350.77 1209.79 L1350.19 1209.79 L1349.6 1209.79 L1349.01 1209.79 L1348.43 1209.79 L1347.84 1209.79 L1347.26 1209.79 L1346.67 1209.79 L1346.08 1209.79 L1345.5 1209.79 L1344.91 1209.79 L1344.32 1209.79 L1343.74 1209.79 L1343.15 1209.79 L1342.56 1209.79 L1341.98 1209.79 L1341.39 1209.79 L1340.8 1209.79 L1340.22 1209.79 L1339.63 1209.79 L1339.05 1209.79 L1338.46 1209.79 L1337.87 1209.79 L1337.29 1209.79 L1336.7 1209.79 L1336.11 1209.79 L1335.53 1209.79 L1334.94 1209.79 L1334.35 1209.79 L1333.77 1209.79 L1333.18 1209.79 L1332.6 1209.79 L1332.01 1209.79 L1331.42 1209.79 L1330.84 1209.79 L1330.25 1209.79 L1329.66 1209.79 L1329.08 1209.79 L1328.49 1209.79 L1327.9 1209.79 L1327.32 1209.79 L1326.73 1209.79 L1326.14 1209.79 L1325.56 1209.79 L1324.97 1209.79 L1324.39 1209.79 L1323.8 1209.79 L1323.21 1209.79 L1322.63 1209.79 L1322.04 1209.79 L1321.45 1209.79 L1320.87 1209.79 L1320.28 1209.79 L1319.69 1209.79 L1319.11 1209.79 L1318.52 1209.79 L1317.93 1209.79 L1317.35 1209.79 L1316.76 1209.79 L1316.18 1209.79 L1315.59 1209.79 L1315 1209.79 L1314.42 1209.79 L1313.83 1209.79 L1313.24 1209.79 L1312.66 1209.79 L1312.07 1209.79 L1311.48 1209.79 L1310.9 1209.79 L1310.31 1209.79 L1309.73 1209.79 L1309.14 1209.79 L1308.55 1209.79 L1307.97 1209.79 L1307.38 1209.79 L1306.79 1209.79 L1306.21 1209.79 L1305.62 1209.79 L1305.03 1209.79 L1304.45 1209.79 L1303.86 1209.79 L1303.27 1209.79 L1302.69 1209.79 L1302.1 1209.79 L1301.52 1209.79 L1300.93 1209.79 L1300.34 1209.79 L1299.76 1209.79 L1299.17 1209.79 L1298.58 1209.79 L1298 1209.79 L1297.41 1209.79 L1296.82 1209.79 L1296.24 1209.79 L1295.65 1209.79 L1295.06 1209.79 L1294.48 1209.79 L1293.89 1209.79 L1293.31 1209.79 L1292.72 1209.79 L1292.13 1209.79 L1291.55 1209.79 L1290.96 1209.79 L1290.37 1209.79 L1289.79 1209.79 L1289.2 1209.79 L1288.61 1209.79 L1288.03 1209.79 L1287.44 1209.79 L1286.86 1209.79 L1286.27 1209.79 L1285.68 1209.79 L1285.1 1209.79 L1284.51 1209.79 L1283.92 1209.79 L1283.34 1209.79 L1282.75 1209.79 L1282.16 1209.79 L1281.58 1209.79 L1280.99 1209.79 L1280.4 1209.79 L1279.82 1209.79 L1279.23 1209.79 L1278.65 1209.79 L1278.06 1209.79 L1277.47 1209.79 L1276.89 1209.79 L1276.3 1209.79 L1275.71 1209.79 L1275.13 1209.79 L1274.54 1209.79 L1273.95 1209.79 L1273.37 1209.79 L1272.78 1209.79 L1272.19 1209.79 L1271.61 1209.79 L1271.02 1209.79 L1270.44 1209.79 L1269.85 1209.79 L1269.26 1209.79 L1268.68 1209.79 L1268.09 1209.79 L1267.5 1209.79 L1266.92 1209.79 L1266.33 1209.79 L1265.74 1209.79 L1265.16 1209.79 L1264.57 1209.79 L1263.98 1209.79 L1263.4 1209.79 L1262.81 1209.79 L1262.23 1209.79 L1261.64 1209.79 L1261.05 1209.79 L1260.47 1209.79 L1259.88 1209.79 L1259.29 1209.79 L1258.71 1209.79 L1258.12 1209.79 L1257.53 1209.79 L1256.95 1209.79 L1256.36 1209.79 L1255.78 1209.79 L1255.19 1209.79 L1254.6 1209.79 L1254.02 1209.79 L1253.43 1209.79 L1252.84 1209.79 L1252.26 1209.79 L1251.67 1209.79 L1251.08 1209.79 L1250.5 1209.79 L1249.91 1209.79 L1249.32 1209.79 L1248.74 1209.79 L1248.15 1209.79 L1247.57 1209.79 L1246.98 1209.79 L1246.39 1209.79 L1245.81 1209.79 L1245.22 1209.79 L1244.63 1209.79 L1244.05 1209.79 L1243.46 1209.79 L1242.87 1209.79 L1242.29 1209.79 L1241.7 1209.79 L1241.11 1209.79 L1240.53 1209.79 L1239.94 1209.79 L1239.36 1209.79 L1238.77 1209.79 L1238.18 1209.79 L1237.6 1209.79 L1237.01 1209.79 L1236.42 1209.79 L1235.84 1209.79 L1235.25 1209.79 L1234.66 1209.79 L1234.08 1209.79 L1233.49 1209.79 L1232.91 1209.79 L1232.32 1209.79 L1231.73 1209.79 L1231.15 1209.79 L1230.56 1209.79 L1229.97 1209.79 L1229.39 1209.79 L1228.8 1209.79 L1228.21 1209.79 L1227.63 1209.79 L1227.04 1209.79 L1226.45 1209.79 L1225.87 1209.79 L1225.28 1209.79 L1224.7 1209.79 L1224.11 1209.79 L1223.52 1209.79 L1222.94 1209.79 L1222.35 1209.79 L1221.76 1209.79 L1221.18 1209.79 L1220.59 1209.79 L1220 1209.79 L1219.42 1209.79 L1218.83 1209.79 L1218.24 1209.79 L1217.66 1209.79 L1217.07 1209.79 L1216.49 1209.79 L1215.9 1209.79 L1215.31 1209.79 L1214.73 1209.79 L1214.14 1209.79 L1213.55 1209.79 L1212.97 1209.79 L1212.38 1209.79 L1211.79 1209.79 L1211.21 1209.79 L1210.62 1209.79 L1210.03 1209.79 L1209.45 1209.79 L1208.86 1209.79 L1208.28 1209.79 L1207.69 1209.79 L1207.1 1209.79 L1206.52 1209.79 L1205.93 1209.79 L1205.34 1209.79 L1204.76 1209.79 L1204.17 1209.79 L1203.58 1209.79 L1203 1209.79 L1202.41 1209.79 L1201.83 1209.79 L1201.24 1209.79 L1200.65 1209.79 L1200.07 1209.79 L1199.48 1209.79 L1198.89 1209.79 L1198.31 1209.79 L1197.72 1209.79 L1197.13 1209.79 L1196.55 1209.79 L1195.96 1209.79 L1195.37 1209.79 L1194.79 1209.79 L1194.2 1209.79 L1193.62 1209.79 L1193.03 1209.79 L1192.44 1209.79 L1191.86 1209.79 L1191.27 1209.79 L1190.68 1209.79 L1190.1 1209.79 L1189.51 1209.79 L1188.92 1209.79 L1188.34 1209.79 L1187.75 1209.79 L1187.16 1209.79 L1186.58 1209.79 L1185.99 1209.79 L1185.41 1209.79 L1184.82 1209.79 L1184.23 1209.79 L1183.65 1209.79 L1183.06 1209.79 L1182.47 1209.79 L1181.89 1209.79 L1181.3 1209.79 L1180.71 1209.79 L1180.13 1209.79 L1179.54 1209.79 L1178.96 1209.79 L1178.37 1209.79 L1177.78 1209.79 L1177.2 1209.79 L1176.61 1209.79 L1176.02 1209.79 L1175.44 1209.79 L1174.85 1209.79 L1174.26 1209.79 L1173.68 1209.79 L1173.09 1209.79 L1172.5 1209.79 L1171.92 1209.79 L1171.33 1209.79 L1170.75 1209.79 L1170.16 1209.79 L1169.57 1209.79 L1168.99 1209.79 L1168.4 1209.79 L1167.81 1209.79 L1167.23 1209.79 L1166.64 1209.79 L1166.05 1209.79 L1165.47 1209.79 L1164.88 1209.79 L1164.29 1209.79 L1163.71 1209.79 L1163.12 1209.79 L1162.54 1209.79 L1161.95 1209.79 L1161.36 1209.79 L1160.78 1209.79 L1160.19 1209.79 L1159.6 1209.79 L1159.02 1209.79 L1158.43 1209.79 L1157.84 1209.79 L1157.26 1209.79 L1156.67 1209.79 L1156.09 1209.79 L1155.5 1209.79 L1154.91 1209.79 L1154.33 1209.79 L1153.74 1209.79 L1153.15 1209.79 L1152.57 1209.79 L1151.98 1209.79 L1151.39 1209.79 L1150.81 1209.79 L1150.22 1209.79 L1149.63 1209.79 L1149.05 1209.79 L1148.46 1209.79 L1147.88 1209.79 L1147.29 1209.79 L1146.7 1209.79 L1146.12 1209.79 L1145.53 1209.79 L1144.94 1209.79 L1144.36 1209.79 L1143.77 1209.79 L1143.18 1209.79 L1142.6 1209.79 L1142.01 1209.79 L1141.42 1209.79 L1140.84 1209.79 L1140.25 1209.79 L1139.67 1209.79 L1139.08 1209.79 L1138.49 1209.79 L1137.91 1209.79 L1137.32 1209.79 L1136.73 1209.79 L1136.15 1209.79 L1135.56 1209.79 L1134.97 1209.79 L1134.39 1209.79 L1133.8 1209.79 L1133.21 1209.79 L1132.63 1209.79 L1132.04 1209.79 L1131.46 1209.79 L1130.87 1209.79 L1130.28 1209.79 L1129.7 1209.79 L1129.11 1209.79 L1128.52 1209.79 L1127.94 1209.79 L1127.35 1209.79 L1126.76 1209.79 L1126.18 1209.79 L1125.59 1209.79 L1125.01 1209.79 L1124.42 1209.79 L1123.83 1209.79 L1123.25 1209.79 L1122.66 1209.79 L1122.07 1209.79 L1121.49 1209.79 L1120.9 1209.79 L1120.31 1209.79 L1119.73 1209.79 L1119.14 1209.79 L1118.55 1209.79 L1117.97 1209.79 L1117.38 1209.79 L1116.8 1209.79 L1116.21 1209.79 L1115.62 1209.79 L1115.04 1209.79 L1114.45 1209.79 L1113.86 1209.79 L1113.28 1209.79 L1112.69 1209.79 L1112.1 1209.79 L1111.52 1209.79 L1110.93 1209.79 L1110.34 1209.79 L1109.76 1209.79 L1109.17 1209.79 L1108.59 1209.79 L1108 1209.79 L1107.41 1209.79 L1106.83 1209.79 L1106.24 1209.79 L1105.65 1209.79 L1105.07 1209.79 L1104.48 1209.79 L1103.89 1209.79 L1103.31 1209.79 L1102.72 1209.79 L1102.14 1209.79 L1101.55 1209.79 L1100.96 1209.79 L1100.38 1209.79 L1099.79 1209.79 L1099.2 1209.79 L1098.62 1209.79 L1098.03 1209.79 L1097.44 1209.79 L1096.86 1209.79 L1096.27 1209.79 L1095.68 1209.79 L1095.1 1209.79 L1094.51 1209.79 L1093.93 1209.79 L1093.34 1209.79 L1092.75 1209.79 L1092.17 1209.79 L1091.58 1209.79 L1090.99 1209.79 L1090.41 1209.79 L1089.82 1209.79 L1089.23 1209.79 L1088.65 1209.79 L1088.06 1209.79 L1087.47 1209.79 L1086.89 1209.79 L1086.3 1209.79 L1085.72 1209.79 L1085.13 1209.79 L1084.54 1209.79 L1083.96 1209.79 L1083.37 1209.79 L1082.78 1209.79 L1082.2 1209.79 L1081.61 1209.79 L1081.02 1209.79 L1080.44 1209.79 L1079.85 1209.79 L1079.26 1209.79 L1078.68 1209.79 L1078.09 1209.79 L1077.51 1209.79 L1076.92 1209.79 L1076.33 1209.79 L1075.75 1209.79 L1075.16 1209.79 L1074.57 1209.79 L1073.99 1209.79 L1073.4 1209.79 L1072.81 1209.79 L1072.23 1209.79 L1071.64 1209.79 L1071.06 1209.79 L1070.47 1209.79 L1069.88 1209.79 L1069.3 1209.79 L1068.71 1209.79 L1068.12 1209.79 L1067.54 1209.79 L1066.95 1209.79 L1066.36 1209.79 L1065.78 1209.79 L1065.19 1209.79 L1064.6 1209.79 L1064.02 1209.79 L1063.43 1209.79 L1062.85 1209.79 L1062.26 1209.79 L1061.67 1209.79 L1061.09 1209.79 L1060.5 1209.79 L1059.91 1209.79 L1059.33 1209.79 L1058.74 1209.79 L1058.15 1209.79 L1057.57 1209.79 L1056.98 1209.79 L1056.39 1209.79 L1055.81 1209.79 L1055.22 1209.79 L1054.64 1209.79 L1054.05 1209.79 L1053.46 1209.79 L1052.88 1209.79 L1052.29 1209.79 L1051.7 1209.79 L1051.12 1209.79 L1050.53 1209.79 L1049.94 1209.79 L1049.36 1209.79 L1048.77 1209.79 L1048.19 1209.79 L1047.6 1209.79 L1047.01 1209.79 L1046.43 1209.79 L1045.84 1209.79 L1045.25 1209.79 L1044.67 1209.79 L1044.08 1209.79 L1043.49 1209.79 L1042.91 1209.79 L1042.32 1209.79 L1041.73 1209.79 L1041.15 1209.79 L1040.56 1209.79 L1039.98 1209.79 L1039.39 1209.79 L1038.8 1209.79 L1038.22 1209.79 L1037.63 1209.79 L1037.04 1209.79 L1036.46 1209.79 L1035.87 1209.79 L1035.28 1209.79 L1034.7 1209.79 L1034.11 1209.79 L1033.52 1209.79 L1032.94 1209.79 L1032.35 1209.79 L1031.77 1209.79 L1031.18 1209.79 L1030.59 1209.79 L1030.01 1209.79 L1029.42 1209.79 L1028.83 1209.79 L1028.25 1209.79 L1027.66 1209.79 L1027.07 1209.79 L1026.49 1209.79 L1025.9 1209.79 L1025.32 1209.79 L1024.73 1209.79 L1024.14 1209.79 L1023.56 1209.79 L1022.97 1209.79 L1022.38 1209.79 L1021.8 1209.79 L1021.21 1209.79 L1020.62 1209.79 L1020.04 1209.79 L1019.45 1209.79 L1018.86 1209.79 L1018.28 1209.79 L1017.69 1209.79 L1017.11 1209.79 L1016.52 1209.79 L1015.93 1209.79 L1015.35 1209.79 L1014.76 1209.79 L1014.17 1209.79 L1013.59 1209.79 L1013 1209.79 L1012.41 1209.79 L1011.83 1209.79 L1011.24 1209.79 L1010.65 1209.79 L1010.07 1209.79 L1009.48 1209.79 L1008.9 1209.79 L1008.31 1209.79 L1007.72 1209.79 L1007.14 1209.79 L1006.55 1209.79 L1005.96 1209.79 L1005.38 1209.79 L1004.79 1209.79 L1004.2 1209.79 L1003.62 1209.79 L1003.03 1209.79 L1002.44 1209.79 L1001.86 1209.79 L1001.27 1209.79 L1000.69 1209.79 L1000.1 1209.79 L999.513 1209.79 L998.926 1209.79 L998.34 1209.79 L997.754 1209.79 L997.167 1209.79 L996.581 1209.79 L995.994 1209.79 L995.408 1209.79 L994.822 1209.79 L994.235 1209.79 L993.649 1209.79 L993.062 1209.79 L992.476 1209.79 L991.889 1209.79 L991.303 1209.79 L990.717 1209.79 L990.13 1209.79 L989.544 1209.79 L988.957 1209.79 L988.371 1209.79 L987.785 1209.79 L987.198 1209.79 L986.612 1209.79 L986.025 1209.79  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.92 986.612,1209.92 987.198,1209.92 987.785,1209.92 988.371,1209.92 988.957,1209.92 989.544,1209.92 990.13,1209.92 990.717,1209.92 991.303,1209.92 991.889,1209.92 992.476,1209.92 993.062,1209.92 993.649,1209.92 994.235,1209.92 994.822,1209.92 995.408,1209.92 995.994,1209.92 996.581,1209.92 997.167,1209.92 997.754,1209.92 998.34,1209.92 998.926,1209.92 999.513,1209.92 1000.1,1209.92 1000.69,1209.92 1001.27,1209.92 1001.86,1209.92 1002.44,1209.92 1003.03,1209.92 1003.62,1209.92 1004.2,1209.92 1004.79,1209.92 1005.38,1209.92 1005.96,1209.92 1006.55,1209.92 1007.14,1209.92 1007.72,1209.92 1008.31,1209.92 1008.9,1209.92 1009.48,1209.92 1010.07,1209.92 1010.65,1209.92 1011.24,1209.92 1011.83,1209.92 1012.41,1209.92 1013,1209.92 1013.59,1209.92 1014.17,1209.92 1014.76,1209.92 1015.35,1209.92 1015.93,1209.92 1016.52,1209.92 1017.11,1209.92 1017.69,1209.92 1018.28,1209.92 1018.86,1209.92 1019.45,1209.92 1020.04,1209.92 1020.62,1209.92 1021.21,1209.92 1021.8,1209.92 1022.38,1209.92 1022.97,1209.92 1023.56,1209.92 1024.14,1209.92 1024.73,1209.92 1025.32,1209.92 1025.9,1209.92 1026.49,1209.92 1027.07,1209.92 1027.66,1209.92 1028.25,1209.92 1028.83,1209.92 1029.42,1209.92 1030.01,1209.92 1030.59,1209.92 1031.18,1209.92 1031.77,1209.92 1032.35,1209.92 1032.94,1209.92 1033.52,1209.92 1034.11,1209.92 1034.7,1209.92 1035.28,1209.92 1035.87,1209.92 1036.46,1209.92 1037.04,1209.92 1037.63,1209.92 1038.22,1209.92 1038.8,1209.92 1039.39,1209.92 1039.98,1209.92 1040.56,1209.92 1041.15,1209.92 1041.73,1209.92 1042.32,1209.92 1042.91,1209.92 1043.49,1209.92 1044.08,1209.92 1044.67,1209.92 1045.25,1209.92 1045.84,1209.92 1046.43,1209.92 1047.01,1209.92 1047.6,1209.92 1048.19,1209.92 1048.77,1209.92 1049.36,1209.92 1049.94,1209.92 1050.53,1209.92 1051.12,1209.92 1051.7,1209.92 1052.29,1209.92 1052.88,1209.92 1053.46,1209.92 1054.05,1209.92 1054.64,1209.92 1055.22,1209.92 1055.81,1209.92 1056.39,1209.92 1056.98,1209.92 1057.57,1209.92 1058.15,1209.92 1058.74,1209.92 1059.33,1209.92 1059.91,1209.92 1060.5,1209.92 1061.09,1209.92 1061.67,1209.92 1062.26,1209.92 1062.85,1209.92 1063.43,1209.92 1064.02,1209.92 1064.6,1209.92 1065.19,1209.92 1065.78,1209.92 1066.36,1209.92 1066.95,1209.92 1067.54,1209.92 1068.12,1209.92 1068.71,1209.92 1069.3,1209.92 1069.88,1209.92 1070.47,1209.92 1071.06,1209.92 1071.64,1209.92 1072.23,1209.92 1072.81,1209.92 1073.4,1209.92 1073.99,1209.92 1074.57,1209.92 1075.16,1209.92 1075.75,1209.92 1076.33,1209.92 1076.92,1209.92 1077.51,1209.92 1078.09,1209.92 1078.68,1209.92 1079.26,1209.92 1079.85,1209.92 1080.44,1209.92 1081.02,1209.92 1081.61,1209.92 1082.2,1209.92 1082.78,1209.92 1083.37,1209.92 1083.96,1209.92 1084.54,1209.92 1085.13,1209.92 1085.72,1209.92 1086.3,1209.92 1086.89,1209.92 1087.47,1209.92 1088.06,1209.92 1088.65,1209.92 1089.23,1209.92 1089.82,1209.92 1090.41,1209.92 1090.99,1209.92 1091.58,1209.92 1092.17,1209.92 1092.75,1209.92 1093.34,1209.92 1093.93,1209.92 1094.51,1209.92 1095.1,1209.92 1095.68,1209.92 1096.27,1209.92 1096.86,1209.92 1097.44,1209.92 1098.03,1209.92 1098.62,1209.92 1099.2,1209.92 1099.79,1209.92 1100.38,1209.92 1100.96,1209.92 1101.55,1209.92 1102.14,1209.92 1102.72,1209.92 1103.31,1209.92 1103.89,1209.92 1104.48,1209.92 1105.07,1209.92 1105.65,1209.92 1106.24,1209.92 1106.83,1209.92 1107.41,1209.92 1108,1209.92 1108.59,1209.92 1109.17,1209.92 1109.76,1209.92 1110.34,1209.92 1110.93,1209.92 1111.52,1209.92 1112.1,1209.92 1112.69,1209.92 1113.28,1209.92 1113.86,1209.92 1114.45,1209.92 1115.04,1209.92 1115.62,1209.92 1116.21,1209.92 1116.8,1209.92 1117.38,1209.92 1117.97,1209.92 1118.55,1209.92 1119.14,1209.92 1119.73,1209.92 1120.31,1209.92 1120.9,1209.92 1121.49,1209.92 1122.07,1209.92 1122.66,1209.92 1123.25,1209.92 1123.83,1209.92 1124.42,1209.92 1125.01,1209.92 1125.59,1209.92 1126.18,1209.92 1126.76,1209.92 1127.35,1209.92 1127.94,1209.92 1128.52,1209.92 1129.11,1209.92 1129.7,1209.92 1130.28,1209.92 1130.87,1209.92 1131.46,1209.92 1132.04,1209.92 1132.63,1209.92 1133.21,1209.92 1133.8,1209.92 1134.39,1209.92 1134.97,1209.92 1135.56,1209.92 1136.15,1209.92 1136.73,1209.92 1137.32,1209.92 1137.91,1209.92 1138.49,1209.92 1139.08,1209.92 1139.67,1209.92 1140.25,1209.92 1140.84,1209.92 1141.42,1209.92 1142.01,1209.92 1142.6,1209.92 1143.18,1209.92 1143.77,1209.92 1144.36,1209.92 1144.94,1209.92 1145.53,1209.92 1146.12,1209.92 1146.7,1209.92 1147.29,1209.92 1147.88,1209.92 1148.46,1209.92 1149.05,1209.92 1149.63,1209.92 1150.22,1209.92 1150.81,1209.92 1151.39,1209.92 1151.98,1209.92 1152.57,1209.92 1153.15,1209.92 1153.74,1209.92 1154.33,1209.92 1154.91,1209.92 1155.5,1209.92 1156.09,1209.92 1156.67,1209.92 1157.26,1209.92 1157.84,1209.92 1158.43,1209.92 1159.02,1209.92 1159.6,1209.92 1160.19,1209.92 1160.78,1209.92 1161.36,1209.92 1161.95,1209.92 1162.54,1209.92 1163.12,1209.92 1163.71,1209.92 1164.29,1209.92 1164.88,1209.92 1165.47,1209.92 1166.05,1209.92 1166.64,1209.92 1167.23,1209.92 1167.81,1209.92 1168.4,1209.92 1168.99,1209.92 1169.57,1209.92 1170.16,1209.92 1170.75,1209.92 1171.33,1209.92 1171.92,1209.92 1172.5,1209.92 1173.09,1209.92 1173.68,1209.92 1174.26,1209.92 1174.85,1209.92 1175.44,1209.92 1176.02,1209.92 1176.61,1209.92 1177.2,1209.92 1177.78,1209.92 1178.37,1209.92 1178.96,1209.92 1179.54,1209.92 1180.13,1209.92 1180.71,1209.92 1181.3,1209.92 1181.89,1209.92 1182.47,1209.92 1183.06,1209.92 1183.65,1209.92 1184.23,1209.92 1184.82,1209.92 1185.41,1209.92 1185.99,1209.92 1186.58,1209.92 1187.16,1209.92 1187.75,1209.92 1188.34,1209.92 1188.92,1209.92 1189.51,1209.92 1190.1,1209.92 1190.68,1209.92 1191.27,1209.92 1191.86,1209.92 1192.44,1209.92 1193.03,1209.92 1193.62,1209.92 1194.2,1209.92 1194.79,1209.92 1195.37,1209.92 1195.96,1209.92 1196.55,1209.92 1197.13,1209.92 1197.72,1209.92 1198.31,1209.92 1198.89,1209.92 1199.48,1209.92 1200.07,1209.92 1200.65,1209.92 1201.24,1209.92 1201.83,1209.92 1202.41,1209.92 1203,1209.92 1203.58,1209.92 1204.17,1209.92 1204.76,1209.92 1205.34,1209.92 1205.93,1209.92 1206.52,1209.92 1207.1,1209.92 1207.69,1209.92 1208.28,1209.92 1208.86,1209.92 1209.45,1209.92 1210.03,1209.92 1210.62,1209.92 1211.21,1209.92 1211.79,1209.92 1212.38,1209.92 1212.97,1209.92 1213.55,1209.92 1214.14,1209.92 1214.73,1209.92 1215.31,1209.92 1215.9,1209.92 1216.49,1209.92 1217.07,1209.92 1217.66,1209.92 1218.24,1209.92 1218.83,1209.92 1219.42,1209.92 1220,1209.92 1220.59,1209.92 1221.18,1209.92 1221.76,1209.92 1222.35,1209.92 1222.94,1209.92 1223.52,1209.92 1224.11,1209.92 1224.7,1209.92 1225.28,1209.92 1225.87,1209.92 1226.45,1209.92 1227.04,1209.92 1227.63,1209.92 1228.21,1209.92 1228.8,1209.92 1229.39,1209.92 1229.97,1209.92 1230.56,1209.92 1231.15,1209.92 1231.73,1209.92 1232.32,1209.92 1232.91,1209.92 1233.49,1209.92 1234.08,1209.92 1234.66,1209.92 1235.25,1209.92 1235.84,1209.92 1236.42,1209.92 1237.01,1209.92 1237.6,1209.92 1238.18,1209.92 1238.77,1209.92 1239.36,1209.92 1239.94,1209.92 1240.53,1209.92 1241.11,1209.92 1241.7,1209.92 1242.29,1209.92 1242.87,1209.92 1243.46,1209.92 1244.05,1209.92 1244.63,1209.92 1245.22,1209.92 1245.81,1209.92 1246.39,1209.92 1246.98,1209.92 1247.57,1209.92 1248.15,1209.92 1248.74,1209.92 1249.32,1209.92 1249.91,1209.92 1250.5,1209.92 1251.08,1209.92 1251.67,1209.92 1252.26,1209.92 1252.84,1209.92 1253.43,1209.92 1254.02,1209.92 1254.6,1209.92 1255.19,1209.92 1255.78,1209.92 1256.36,1209.92 1256.95,1209.92 1257.53,1209.92 1258.12,1209.92 1258.71,1209.92 1259.29,1209.92 1259.88,1209.92 1260.47,1209.92 1261.05,1209.92 1261.64,1209.92 1262.23,1209.92 1262.81,1209.92 1263.4,1209.92 1263.98,1209.92 1264.57,1209.92 1265.16,1209.92 1265.74,1209.92 1266.33,1209.92 1266.92,1209.92 1267.5,1209.92 1268.09,1209.92 1268.68,1209.92 1269.26,1209.92 1269.85,1209.92 1270.44,1209.92 1271.02,1209.92 1271.61,1209.92 1272.19,1209.92 1272.78,1209.92 1273.37,1209.92 1273.95,1209.92 1274.54,1209.92 1275.13,1209.92 1275.71,1209.92 1276.3,1209.92 1276.89,1209.92 1277.47,1209.92 1278.06,1209.92 1278.65,1209.92 1279.23,1209.92 1279.82,1209.92 1280.4,1209.92 1280.99,1209.92 1281.58,1209.92 1282.16,1209.92 1282.75,1209.92 1283.34,1209.92 1283.92,1209.92 1284.51,1209.92 1285.1,1209.92 1285.68,1209.92 1286.27,1209.92 1286.86,1209.92 1287.44,1209.92 1288.03,1209.92 1288.61,1209.92 1289.2,1209.92 1289.79,1209.92 1290.37,1209.92 1290.96,1209.92 1291.55,1209.92 1292.13,1209.92 1292.72,1209.92 1293.31,1209.92 1293.89,1209.92 1294.48,1209.92 1295.06,1209.92 1295.65,1209.92 1296.24,1209.92 1296.82,1209.92 1297.41,1209.92 1298,1209.92 1298.58,1209.92 1299.17,1209.92 1299.76,1209.92 1300.34,1209.92 1300.93,1209.92 1301.52,1209.92 1302.1,1209.92 1302.69,1209.92 1303.27,1209.92 1303.86,1209.92 1304.45,1209.92 1305.03,1209.92 1305.62,1209.92 1306.21,1209.92 1306.79,1209.92 1307.38,1209.92 1307.97,1209.92 1308.55,1209.92 1309.14,1209.92 1309.73,1209.92 1310.31,1209.92 1310.9,1209.92 1311.48,1209.92 1312.07,1209.92 1312.66,1209.92 1313.24,1209.92 1313.83,1209.92 1314.42,1209.92 1315,1209.92 1315.59,1209.92 1316.18,1209.92 1316.76,1209.92 1317.35,1209.92 1317.93,1209.92 1318.52,1209.92 1319.11,1209.92 1319.69,1209.92 1320.28,1209.92 1320.87,1209.92 1321.45,1209.92 1322.04,1209.92 1322.63,1209.92 1323.21,1209.92 1323.8,1209.92 1324.39,1209.92 1324.97,1209.92 1325.56,1209.92 1326.14,1209.92 1326.73,1209.92 1327.32,1209.92 1327.9,1209.92 1328.49,1209.92 1329.08,1209.92 1329.66,1209.92 1330.25,1209.92 1330.84,1209.92 1331.42,1209.92 1332.01,1209.92 1332.6,1209.92 1333.18,1209.92 1333.77,1209.92 1334.35,1209.92 1334.94,1209.92 1335.53,1209.92 1336.11,1209.92 1336.7,1209.92 1337.29,1209.92 1337.87,1209.92 1338.46,1209.92 1339.05,1209.92 1339.63,1209.92 1340.22,1209.92 1340.8,1209.92 1341.39,1209.92 1341.98,1209.92 1342.56,1209.92 1343.15,1209.92 1343.74,1209.92 1344.32,1209.92 1344.91,1209.92 1345.5,1209.92 1346.08,1209.92 1346.67,1209.92 1347.26,1209.92 1347.84,1209.92 1348.43,1209.92 1349.01,1209.92 1349.6,1209.92 1350.19,1209.92 1350.77,1209.92 1351.36,1209.92 1351.95,1209.92 1352.53,1209.92 1353.12,1209.92 1353.71,1209.92 1354.29,1209.92 1354.88,1209.92 1355.47,1209.92 1356.05,1209.92 1356.64,1209.92 1357.22,1209.92 1357.81,1209.92 1358.4,1209.92 1358.98,1209.92 1359.57,1209.92 1360.16,1209.92 1360.74,1209.92 1361.33,1209.92 1361.92,1209.92 1362.5,1209.92 1363.09,1209.92 1363.68,1209.92 1364.26,1209.92 1364.85,1209.92 1365.43,1209.92 1366.02,1209.92 1366.61,1209.92 1367.19,1209.92 1367.78,1209.92 1368.37,1209.92 1368.95,1209.92 1369.54,1209.92 1370.13,1209.92 1370.71,1209.92 1371.3,1209.92 1371.88,1209.92 1372.47,1209.92 1373.06,1209.92 1373.64,1209.92 1374.23,1209.92 1374.82,1209.92 1375.4,1209.92 1375.99,1209.92 1376.58,1209.92 1377.16,1209.92 1377.75,1209.92 1378.34,1209.92 1378.92,1209.92 1379.51,1209.92 1380.09,1209.92 1380.68,1209.92 1381.27,1209.92 1381.85,1209.92 1382.44,1209.92 1383.03,1209.92 1383.61,1209.92 1384.2,1209.92 1384.79,1209.92 1385.37,1209.92 1385.96,1209.92 1386.55,1209.92 1387.13,1209.92 1387.72,1209.92 1388.3,1209.92 1388.89,1209.92 1389.48,1209.92 1390.06,1209.92 1390.65,1209.92 1391.24,1209.92 1391.82,1209.92 1392.41,1209.92 1393,1209.92 1393.58,1209.92 1394.17,1209.92 1394.75,1209.92 1395.34,1209.92 1395.93,1209.92 1396.51,1209.92 1397.1,1209.92 1397.69,1209.92 1398.27,1209.92 1398.86,1209.92 1399.45,1209.92 1400.03,1209.92 1400.62,1209.92 1401.21,1209.92 1401.79,1209.92 1402.38,1209.92 1402.96,1209.92 1403.55,1209.92 1404.14,1209.92 1404.72,1209.92 1405.31,1209.92 1405.9,1209.92 1406.48,1209.92 1407.07,1209.92 1407.66,1209.92 1408.24,1209.92 1408.83,1209.92 1409.42,1209.92 1410,1209.92 1410.59,1209.92 1411.17,1209.92 1411.76,1209.92 1412.35,1209.92 1412.93,1209.92 1413.52,1209.92 1414.11,1209.92 1414.69,1209.92 1415.28,1209.92 1415.87,1209.92 1416.45,1209.92 1417.04,1209.92 1417.63,1209.92 1418.21,1209.92 1418.8,1209.92 1419.38,1209.92 1419.97,1209.92 1420.56,1209.92 1421.14,1209.92 1421.73,1209.92 1422.32,1209.92 1422.9,1209.92 1423.49,1209.92 1424.08,1209.92 1424.66,1209.92 1425.25,1209.92 1425.83,1209.92 1426.42,1209.92 1427.01,1209.92 1427.59,1209.92 1428.18,1209.92 1428.77,1209.92 1429.35,1209.92 1429.94,1209.92 1430.53,1209.92 1431.11,1209.92 1431.7,1209.92 1432.29,1209.92 1432.87,1209.92 1433.46,1209.92 1434.04,1209.92 1434.63,1209.92 1435.22,1209.92 1435.8,1209.92 1436.39,1209.92 1436.98,1209.92 1437.56,1209.92 1438.15,1209.92 1438.74,1209.92 1439.32,1209.92 1439.91,1209.92 1440.5,1209.92 1441.08,1209.92 1441.67,1209.92 1442.25,1209.92 1442.84,1209.92 1443.43,1209.92 1444.01,1209.92 1444.6,1209.92 1445.19,1209.92 1445.77,1209.92 1446.36,1209.92 1446.95,1209.92 1447.53,1209.92 1448.12,1209.92 1448.7,1209.92 1449.29,1209.92 1449.88,1209.92 1450.46,1209.92 1451.05,1209.92 1451.64,1209.92 1452.22,1209.92 1452.81,1209.92 1453.4,1209.92 1453.98,1209.92 1454.57,1209.92 1455.16,1209.92 1455.74,1209.92 1456.33,1209.92 1456.91,1209.92 1457.5,1209.92 1458.09,1209.92 1458.67,1209.92 1459.26,1209.92 1459.85,1209.92 1460.43,1209.92 1461.02,1209.92 1461.61,1209.92 1462.19,1209.92 1462.78,1209.92 1463.37,1209.92 1463.95,1209.92 1464.54,1209.92 1465.12,1209.92 1465.71,1209.92 1466.3,1209.92 1466.88,1209.92 1467.47,1209.92 1468.06,1209.92 1468.64,1209.92 1469.23,1209.92 1469.82,1209.92 1470.4,1209.92 1470.99,1209.92 1471.57,1209.92 1472.16,1209.92 1472.75,1209.92 1473.33,1209.92 1473.92,1209.92 1474.51,1209.92 1475.09,1209.92 1475.68,1209.92 1476.27,1209.92 1476.85,1209.92 1477.44,1209.92 1478.03,1209.92 1478.61,1209.92 1479.2,1209.92 1479.78,1209.92 1480.37,1209.92 1480.96,1209.92 1481.54,1209.92 1482.13,1209.92 1482.72,1209.92 1483.3,1209.92 1483.89,1209.92 1484.48,1209.92 1485.06,1209.92 1485.65,1209.92 1486.24,1209.92 1486.82,1209.92 1487.41,1209.92 1487.99,1209.92 1488.58,1209.92 1489.17,1209.92 1489.75,1209.92 1490.34,1209.92 1490.93,1209.92 1491.51,1209.92 1492.1,1209.92 1492.69,1209.92 1493.27,1209.92 1493.86,1209.92 1494.45,1209.92 1495.03,1209.92 1495.62,1209.92 1496.2,1209.92 1496.79,1209.92 1497.38,1209.92 1497.96,1209.92 1498.55,1209.92 1499.14,1209.92 1499.72,1209.92 1500.31,1209.92 1500.9,1209.92 1501.48,1209.92 1502.07,1209.92 1502.65,1209.92 1503.24,1209.92 1503.83,1209.92 1504.41,1209.92 1505,1209.92 1505.59,1209.92 1506.17,1209.92 1506.76,1209.92 1507.35,1209.92 1507.93,1209.92 1508.52,1209.92 1509.11,1209.92 1509.69,1209.92 1510.28,1209.92 1510.86,1209.92 1511.45,1209.92 1512.04,1209.92 1512.62,1209.92 1513.21,1209.92 1513.8,1209.92 1514.38,1209.92 1514.97,1209.92 1515.56,1209.92 1516.14,1209.92 1516.73,1209.92 1517.32,1209.92 1517.9,1209.92 1518.49,1209.92 1519.07,1209.92 1519.66,1209.92 1520.25,1209.92 1520.83,1209.92 1521.42,1209.92 1522.01,1209.92 1522.59,1209.92 1523.18,1209.92 1523.77,1209.92 1524.35,1209.92 1524.94,1209.92 1525.52,1209.92 1526.11,1209.92 1526.7,1209.92 1527.28,1209.92 1527.87,1209.92 1528.46,1209.92 1529.04,1209.92 1529.63,1209.92 1530.22,1209.92 1530.8,1209.92 1531.39,1209.92 1531.98,1209.92 1532.56,1209.92 1533.15,1209.92 1533.73,1209.92 1534.32,1209.92 1534.91,1209.92 1535.49,1209.92 1536.08,1209.92 1536.67,1209.92 1537.25,1209.92 1537.84,1209.92 1538.43,1209.92 1539.01,1209.92 1539.6,1209.92 1540.19,1209.92 1540.77,1209.92 1541.36,1209.92 1541.94,1209.92 1542.53,1209.92 1543.12,1209.92 1543.7,1209.92 1544.29,1209.92 1544.88,1209.92 1545.46,1209.92 1546.05,1209.92 1546.64,1209.92 1547.22,1209.92 1547.81,1209.92 1548.4,1209.92 1548.98,1209.92 1549.57,1209.92 1550.15,1209.92 1550.74,1209.92 1551.33,1209.92 1551.91,1209.92 1552.5,1209.92 1553.09,1209.92 1553.67,1209.92 1554.26,1209.92 1554.85,1209.92 1555.43,1209.92 1556.02,1209.92 1556.6,1209.92 1557.19,1209.92 1557.78,1209.92 1558.36,1209.92 1558.95,1209.92 1559.54,1209.92 1560.12,1209.92 1560.71,1209.92 1561.3,1209.92 1561.88,1209.92 1562.47,1209.92 1563.06,1209.92 1563.64,1209.92 1564.23,1209.92 1564.81,1209.92 1565.4,1209.92 1565.99,1209.92 1566.57,1209.92 1567.16,1209.92 1567.75,1209.92 1568.33,1209.92 1568.92,1209.92 1569.51,1209.92 1570.09,1209.92 1570.68,1209.92 1571.27,1209.92 1571.85,1209.92 1572.44,1209.92 1573.02,1209.92 1573.61,1209.92 1574.2,1209.92 1574.78,1209.92 1575.37,1209.92 1575.96,1209.92 1576.54,1209.92 1577.13,1209.92 1577.72,1209.92 1578.3,1209.92 1578.89,1209.92 1579.47,1209.92 1580.06,1209.92 1580.65,1209.92 1581.23,1209.92 1581.82,1209.92 1582.41,1209.92 1582.99,1209.92 1583.58,1209.92 1584.17,1209.92 1584.75,1209.92 1585.34,1209.92 1585.93,1209.92 1586.51,1209.92 1587.1,1209.92 1587.68,1209.92 1588.27,1209.92 1588.86,1209.92 1589.44,1209.92 1590.03,1209.92 1590.62,1209.92 1591.2,1209.92 1591.79,1209.92 1592.38,1209.92 1592.96,1209.92 1593.55,1209.92 1594.14,1209.92 1594.72,1209.92 1595.31,1209.92 1595.89,1209.92 1596.48,1209.92 1597.07,1209.92 1597.65,1209.92 1598.24,1209.92 1598.83,1209.92 1599.41,1209.92 1600,1209.92 1600.59,1209.92 1601.17,1209.92 1601.76,1209.92 1602.34,1209.92 1602.93,1209.92 1603.52,1209.92 1604.1,1209.92 1604.69,1209.92 1605.28,1209.92 1605.86,1209.92 1606.45,1209.92 1607.04,1209.92 1607.62,1209.92 1608.21,1209.92 1608.8,1209.92 1609.38,1209.92 1609.97,1209.92 1610.55,1209.92 1611.14,1209.92 1611.73,1209.92 1612.31,1209.92 1612.9,1209.92 1613.49,1209.92 1614.07,1209.92 1614.66,1209.92 1615.25,1209.92 1615.83,1209.92 1616.42,1209.92 1617.01,1209.92 1617.59,1209.92 1618.18,1209.92 1618.76,1209.92 1619.35,1209.92 1619.94,1209.92 1620.52,1209.92 1621.11,1209.92 1621.7,1209.92 1622.28,1209.92 1622.87,1209.92 1623.46,1209.92 1624.04,1209.92 1624.63,1209.92 1625.22,1209.92 1625.8,1209.92 1626.39,1209.92 1626.97,1209.92 1627.56,1209.92 1628.15,1209.92 1628.73,1209.92 1629.32,1209.92 1629.91,1209.92 1630.49,1209.92 1631.08,1209.92 1631.67,1209.92 1632.25,1209.92 1632.84,1209.92 1633.42,1209.92 1634.01,1209.92 1634.6,1209.92 1635.18,1209.92 1635.77,1209.92 1636.36,1209.92 1636.94,1209.92 1637.53,1209.92 1638.12,1209.92 1638.7,1209.92 1639.29,1209.92 1639.88,1209.92 1640.46,1209.92 1641.05,1209.92 1641.63,1209.92 1642.22,1209.92 1642.81,1209.92 1643.39,1209.92 1643.98,1209.92 1644.57,1209.92 1645.15,1209.92 1645.74,1209.92 1646.33,1209.92 1646.91,1209.92 1647.5,1209.92 1648.09,1209.92 1648.67,1209.92 1649.26,1209.92 1649.84,1209.92 1650.43,1209.92 1651.02,1209.92 1651.6,1209.92 1652.19,1209.92 1652.78,1209.92 1653.36,1209.92 1653.95,1209.92 1654.54,1209.92 1655.12,1209.92 1655.71,1209.92 1656.29,1209.92 1656.88,1209.92 1657.47,1209.92 1658.05,1209.92 1658.64,1209.92 1659.23,1209.92 1659.81,1209.92 1660.4,1209.92 1660.99,1209.92 1661.57,1209.92 1662.16,1209.92 1662.75,1209.92 1663.33,1209.92 1663.92,1209.92 1664.5,1209.92 1665.09,1209.92 1665.68,1209.92 1666.26,1209.92 1666.85,1209.92 1667.44,1209.92 1668.02,1209.92 1668.61,1209.92 1669.2,1209.92 1669.78,1209.92 1670.37,1209.92 1670.96,1209.92 1671.54,1209.92 1672.13,1209.92 1672.71,1209.92 1673.3,1209.92 1673.89,1209.92 1674.47,1209.92 1675.06,1209.92 1675.65,1209.92 1676.23,1209.92 1676.82,1209.92 1677.41,1209.92 1677.99,1209.92 1678.58,1209.92 1679.17,1209.92 1679.75,1209.92 1680.34,1209.92 1680.92,1209.92 1681.51,1209.92 1682.1,1209.92 1682.68,1209.92 1683.27,1209.92 1683.86,1209.92 1684.44,1209.92 1685.03,1209.92 1685.62,1209.92 1686.2,1209.92 1686.79,1209.92 1687.37,1209.92 1687.96,1209.92 1688.55,1209.92 1689.13,1209.92 1689.72,1209.92 1690.31,1209.92 1690.89,1209.92 1691.48,1209.92 1692.07,1209.92 1692.65,1209.92 1693.24,1209.92 1693.83,1209.92 1694.41,1209.92 1695,1209.92 1695.58,1209.92 1696.17,1209.92 1696.76,1209.92 1697.34,1209.92 1697.93,1209.92 1698.52,1209.92 1699.1,1209.92 1699.69,1209.92 1700.28,1209.92 1700.86,1209.92 1701.45,1209.92 1702.04,1209.92 1702.62,1209.92 1703.21,1209.92 1703.79,1209.92 1704.38,1209.92 1704.97,1209.92 1705.55,1209.92 1706.14,1209.92 1706.73,1209.92 1707.31,1209.92 1707.9,1209.92 1708.49,1209.92 1709.07,1209.92 1709.66,1209.92 1710.24,1209.92 1710.83,1209.92 1711.42,1209.92 1712,1209.92 1712.59,1209.92 1713.18,1209.92 1713.76,1209.92 1714.35,1209.92 1714.94,1209.92 1715.52,1209.92 1716.11,1209.92 1716.7,1209.92 1717.28,1209.92 1717.87,1209.92 1718.45,1209.92 1719.04,1209.92 1719.63,1209.92 1720.21,1209.92 1720.8,1209.92 1721.39,1209.92 1721.97,1209.92 1722.56,1209.92 1723.15,1209.92 1723.73,1209.92 1724.32,1209.92 1724.91,1209.92 1725.49,1209.92 1726.08,1209.92 1726.66,1209.92 1727.25,1209.92 1727.84,1209.92 1728.42,1209.92 1729.01,1209.92 1729.6,1209.92 1730.18,1209.92 1730.77,1209.92 1731.36,1209.92 1731.94,1209.92 1732.53,1209.92 1733.11,1209.92 1733.7,1209.92 1734.29,1209.92 1734.87,1209.92 1735.46,1209.92 1736.05,1209.92 1736.63,1209.92 1737.22,1209.92 1737.81,1209.92 1738.39,1209.92 1738.98,1209.92 1739.57,1209.92 1740.15,1209.92 1740.74,1209.92 1741.32,1209.92 1741.91,1209.92 1742.5,1209.92 1743.08,1209.92 1743.67,1209.92 1744.26,1209.92 1744.84,1209.92 1745.43,1209.92 1746.02,1209.92 1746.6,1209.92 1747.19,1209.92 1747.78,1209.92 1748.36,1209.92 1748.95,1209.92 1749.53,1209.92 1750.12,1209.92 1750.71,1209.92 1751.29,1209.92 1751.88,1209.92 1752.47,1209.92 1753.05,1209.92 1753.64,1209.92 1754.23,1209.92 1754.81,1209.92 1755.4,1209.92 1755.99,1209.92 1756.57,1209.92 1757.16,1209.92 1757.74,1209.92 1758.33,1209.92 1758.92,1209.92 1759.5,1209.92 1760.09,1209.92 1760.68,1209.92 1761.26,1209.92 1761.85,1209.92 1762.44,1209.92 1763.02,1209.92 1763.61,1209.92 1764.19,1209.92 1764.78,1209.92 1765.37,1209.92 1765.95,1209.92 1766.54,1209.92 1767.13,1209.92 1767.71,1209.92 1768.3,1209.92 1768.89,1209.92 1769.47,1209.92 1770.06,1209.92 1770.65,1209.92 1771.23,1209.92 1771.82,1209.92 1772.4,1209.92 1772.99,1209.92 1773.58,1209.92 1774.16,1209.92 1774.75,1209.92 1775.34,1209.92 1775.92,1209.92 1776.51,1209.92 1777.1,1209.92 1777.68,1209.92 1778.27,1209.92 1778.86,1209.92 1779.44,1209.92 1780.03,1209.92 1780.61,1209.92 1781.2,1209.92 1781.79,1209.92 1782.37,1209.92 1782.96,1209.92 1783.55,1209.92 1784.13,1209.92 1784.72,1209.92 1785.31,1209.92 1785.89,1209.92 1786.48,1209.92 1787.06,1209.92 1787.65,1209.92 1788.24,1209.92 1788.82,1209.92 1789.41,1209.92 1790,1209.92 1790.58,1209.92 1791.17,1209.92 1791.76,1209.92 1792.34,1209.92 1792.93,1209.92 1793.52,1209.92 1794.1,1209.92 1794.69,1209.92 1795.27,1209.92 1795.86,1209.92 1796.45,1209.92 1797.03,1209.92 1797.62,1209.92 1798.21,1209.92 1798.79,1209.92 1799.38,1209.92 1799.97,1209.92 1800.55,1209.92 1801.14,1209.92 1801.73,1209.92 1802.31,1209.92 1802.9,1209.92 1803.48,1209.92 1804.07,1209.92 1804.66,1209.92 1805.24,1209.92 1805.83,1209.92 1806.42,1209.92 1807,1209.92 1807.59,1209.92 1808.18,1209.92 1808.76,1209.92 1809.35,1209.92 1809.94,1209.92 1810.52,1209.92 1811.11,1209.92 1811.69,1209.92 1812.28,1209.92 1812.87,1209.92 1813.45,1209.92 1814.04,1209.92 1814.63,1209.92 1815.21,1209.92 1815.8,1209.92 1816.39,1209.92 1816.97,1209.92 1817.56,1209.92 1818.14,1209.92 1818.73,1209.92 1819.32,1209.92 1819.9,1209.92 1820.49,1209.92 1821.08,1209.92 1821.66,1209.92 1822.25,1209.92 1822.84,1209.92 1823.42,1209.92 1824.01,1209.92 1824.6,1209.92 1825.18,1209.92 1825.77,1209.92 1826.35,1209.92 1826.94,1209.92 1827.53,1209.92 1828.11,1209.92 1828.7,1209.92 1829.29,1209.92 1829.87,1209.92 1830.46,1209.92 1831.05,1209.92 1831.63,1209.92 1832.22,1209.92 1832.81,1209.92 1833.39,1209.92 1833.98,1209.92 1834.56,1209.92 1835.15,1209.92 1835.74,1209.92 1836.32,1209.92 1836.91,1209.92 1837.5,1209.92 1838.08,1209.92 1838.67,1209.92 1839.26,1209.92 1839.84,1209.92 1840.43,1209.92 1841.01,1209.92 1841.6,1209.92 1842.19,1209.92 1842.77,1209.92 1843.36,1209.92 1843.95,1209.92 1844.53,1209.92 1845.12,1209.92 1845.71,1209.92 1846.29,1209.92 1846.88,1209.92 1847.47,1209.92 1848.05,1209.92 1848.64,1209.92 1849.22,1209.92 1849.81,1209.92 1850.4,1209.92 1850.98,1209.92 1851.57,1209.92 1852.16,1209.92 1852.74,1209.92 1853.33,1209.92 1853.92,1209.92 1854.5,1209.92 1855.09,1209.92 1855.68,1209.92 1856.26,1209.92 1856.85,1209.92 1857.43,1209.92 1858.02,1209.92 1858.61,1209.92 1859.19,1209.92 1859.78,1209.92 1860.37,1209.92 1860.95,1209.92 1861.54,1209.92 1862.13,1209.92 1862.71,1209.92 1863.3,1209.92 1863.88,1209.92 1864.47,1209.92 1865.06,1209.92 1865.64,1209.92 1866.23,1209.92 1866.82,1209.92 1867.4,1209.92 1867.99,1209.92 1868.58,1209.92 1869.16,1209.92 1869.75,1209.92 1870.34,1209.92 1870.92,1209.92 1871.51,1209.92 1872.09,1209.92 1872.68,1209.92 1873.27,1209.92 1873.85,1209.92 1874.44,1209.92 1875.03,1209.92 1875.61,1209.92 1876.2,1209.92 1876.79,1209.92 1877.37,1209.92 1877.96,1209.92 1878.55,1209.92 1879.13,1209.92 1879.72,1209.92 1880.3,1209.92 1880.89,1209.92 1881.48,1209.92 1882.06,1209.92 1882.65,1209.92 1883.24,1209.92 1883.82,1209.92 1884.41,1209.92 1885,1209.92 1885.58,1209.92 1886.17,1209.92 1886.76,1209.92 1887.34,1209.92 1887.93,1209.92 1888.51,1209.92 1889.1,1209.92 1889.69,1209.92 1890.27,1209.92 1890.86,1209.92 1891.45,1209.92 1892.03,1209.92 1892.62,1209.92 1893.21,1209.92 1893.79,1209.92 1894.38,1209.92 1894.96,1209.92 1895.55,1209.92 1896.14,1209.92 1896.72,1209.92 1897.31,1209.92 1897.9,1209.92 1898.48,1209.92 1899.07,1209.92 1899.66,1209.92 1900.24,1209.92 1900.83,1209.92 1901.42,1209.92 1902,1209.92 1902.59,1209.92 1903.17,1209.92 1903.76,1209.92 1904.35,1209.92 1904.93,1209.92 1905.52,1209.92 1906.11,1209.92 1906.69,1209.92 1907.28,1209.92 1907.87,1209.92 1908.45,1209.92 1909.04,1209.92 1909.63,1209.92 1910.21,1209.92 1910.8,1209.92 1911.38,1209.92 1911.97,1209.92 1912.56,1209.92 1913.14,1209.92 1913.73,1209.92 1914.32,1209.92 1914.9,1209.92 1915.49,1209.92 1916.08,1209.92 1916.66,1209.92 1917.25,1209.92 1917.83,1209.92 1918.42,1209.92 1919.01,1209.92 1919.59,1209.92 1920.18,1209.92 1920.77,1209.92 1921.35,1209.92 1921.94,1209.92 1922.53,1209.92 1923.11,1209.92 1923.7,1209.92 1924.29,1209.92 1924.87,1209.92 1925.46,1209.92 1926.04,1209.92 1926.63,1209.92 1927.22,1209.92 1927.8,1209.92 1928.39,1209.92 1928.98,1209.92 1929.56,1209.92 1930.15,1209.92 1930.74,1209.92 1931.32,1209.92 1931.91,1209.92 1932.5,1209.92 1933.08,1209.92 1933.67,1209.92 1934.25,1209.92 1934.84,1209.92 1935.43,1209.92 1936.01,1209.92 1936.6,1209.92 1937.19,1209.92 1937.77,1209.92 1938.36,1209.92 1938.95,1209.92 1939.53,1209.92 1940.12,1209.92 1940.71,1209.92 1941.29,1209.92 1941.88,1209.92 1942.46,1209.92 1943.05,1209.92 1943.64,1209.92 1944.22,1209.92 1944.81,1209.92 1945.4,1209.92 1945.98,1209.92 1946.57,1209.92 1947.16,1209.92 1947.74,1209.92 1948.33,1209.92 1948.91,1209.92 1949.5,1209.92 1950.09,1209.92 1950.67,1209.92 1951.26,1209.92 1951.85,1209.92 1952.43,1209.92 1953.02,1209.92 1953.61,1209.92 1954.19,1209.92 1954.78,1209.92 1955.37,1209.92 1955.95,1209.92 1956.54,1209.92 1957.12,1209.92 1957.71,1209.92 1958.3,1209.92 1958.88,1209.92 1959.47,1209.92 1960.06,1209.92 1960.64,1209.92 1961.23,1209.92 1961.82,1209.92 1962.4,1209.92 1962.99,1209.92 1963.58,1209.92 1964.16,1209.92 1964.75,1209.92 1965.33,1209.92 1965.92,1209.92 1966.51,1209.92 1967.09,1209.92 1967.68,1209.92 1968.27,1209.92 1968.85,1209.92 1969.44,1209.92 1970.03,1209.92 1970.61,1209.92 1971.2,1209.92 1971.78,1209.92 1972.37,1209.92 1972.96,1209.92 1973.54,1209.92 1974.13,1209.92 1974.72,1209.92 1975.3,1209.92 1975.89,1209.92 1976.48,1209.92 1977.06,1209.92 1977.65,1209.92 1978.24,1209.92 1978.82,1209.92 1979.41,1209.92 1979.99,1209.92 1980.58,1209.92 1981.17,1209.92 1981.75,1209.92 1982.34,1209.92 1982.93,1209.92 1983.51,1209.92 1984.1,1209.92 1984.69,1209.92 1985.27,1209.92 1985.86,1209.92 1986.45,1209.92 1987.03,1209.92 1987.62,1209.92 1988.2,1209.92 1988.79,1209.92 1989.38,1209.92 1989.96,1209.92 1990.55,1209.92 1991.14,1209.92 1991.72,1209.92 1992.31,1209.92 1992.9,1209.92 1993.48,1209.92 1994.07,1209.92 1994.65,1209.92 1995.24,1209.92 1995.83,1209.92 1996.41,1209.92 1997,1209.92 1997.59,1209.92 1998.17,1209.92 1998.76,1209.92 1999.35,1209.92 1999.93,1209.92 2000.52,1209.92 2001.11,1209.92 2001.69,1209.92 2002.28,1209.92 2002.86,1209.92 2003.45,1209.92 2004.04,1209.92 2004.62,1209.92 2005.21,1209.92 2005.8,1209.92 2006.38,1209.92 2006.97,1209.92 2007.56,1209.92 2008.14,1209.92 2008.73,1209.92 2009.32,1209.92 2009.9,1209.92 2010.49,1209.92 2011.07,1209.92 2011.66,1209.92 2012.25,1209.92 2012.83,1209.92 2013.42,1209.92 2014.01,1209.92 2014.59,1209.92 2015.18,1209.92 2015.77,1209.92 2016.35,1209.92 2016.94,1209.92 2017.53,1209.92 2018.11,1209.92 2018.7,1209.92 2019.28,1209.92 2019.87,1209.92 2020.46,1209.92 2021.04,1209.92 2021.63,1209.92 2022.22,1209.92 2022.8,1209.92 2023.39,1209.92 2023.98,1209.92 2024.56,1209.92 2025.15,1209.92 2025.73,1209.92 2026.32,1209.92 2026.91,1209.92 2027.49,1209.92 2028.08,1209.92 2028.67,1209.92 2029.25,1209.92 2029.84,1209.92 2030.43,1209.92 2031.01,1209.92 2031.6,1209.92 2032.19,1209.92 2032.77,1209.92 2033.36,1209.92 2033.94,1209.92 2034.53,1209.92 2035.12,1209.92 2035.7,1209.92 2036.29,1209.92 2036.88,1209.92 2037.46,1209.92 2038.05,1209.92 2038.64,1209.92 2039.22,1209.92 2039.81,1209.92 2040.4,1209.92 2040.98,1209.92 2041.57,1209.92 2042.15,1209.92 2042.74,1209.92 2043.33,1209.92 2043.91,1209.92 2044.5,1209.92 2045.09,1209.92 2045.67,1209.92 2046.26,1209.92 2046.85,1209.92 2047.43,1209.92 2048.02,1209.92 2048.6,1209.92 2049.19,1209.92 2049.78,1209.92 2050.36,1209.92 2050.95,1209.92 2051.54,1209.92 2052.12,1209.92 2052.71,1209.92 2053.3,1209.92 2053.88,1209.92 2054.47,1209.92 2055.06,1209.92 2055.64,1209.92 2056.23,1209.92 2056.81,1209.92 2057.4,1209.92 2057.99,1209.92 2058.57,1209.92 2059.16,1209.92 2059.75,1209.92 2060.33,1209.92 2060.92,1209.92 2061.51,1209.92 2062.09,1209.92 2062.68,1209.92 2063.27,1209.92 2063.85,1209.92 2064.44,1209.92 2065.02,1209.92 2065.61,1209.92 2066.2,1209.92 2066.78,1209.92 2067.37,1209.92 2067.96,1209.92 2068.54,1209.92 2069.13,1209.92 2069.72,1209.92 2070.3,1209.92 2070.89,1209.92 2071.48,1209.92 2072.06,1209.92 2072.65,1209.92 2073.23,1209.92 2073.82,1209.92 2074.41,1209.92 2074.99,1209.92 2075.58,1209.92 2076.17,1209.92 2076.75,1209.92 2077.34,1209.92 2077.93,1209.92 2078.51,1209.92 2079.1,1209.92 2079.68,1209.92 2080.27,1209.92 2080.86,1209.92 2081.44,1209.92 2082.03,1209.92 2082.62,1209.92 2083.2,1209.92 2083.79,1209.92 2084.38,1209.92 2084.96,1209.92 2085.55,1209.92 2086.14,1209.92 2086.72,1209.92 2087.31,1209.92 2087.89,1209.92 2088.48,1209.92 2089.07,1209.92 2089.65,1209.92 2090.24,1209.92 2090.83,1209.92 2091.41,1209.92 2092,1209.92 2092.59,1209.92 2093.17,1209.92 2093.76,1209.92 2094.35,1209.92 2094.93,1209.92 2095.52,1209.92 2096.1,1209.92 2096.69,1209.92 2097.28,1209.92 2097.86,1209.92 2098.45,1209.92 2099.04,1209.92 2099.62,1209.92 2100.21,1209.92 2100.8,1209.92 2101.38,1209.92 2101.97,1209.92 2102.55,1209.92 2103.14,1209.92 2103.73,1209.92 2104.31,1209.92 2104.9,1209.92 2105.49,1209.92 2106.07,1209.92 2106.66,1209.92 2107.25,1209.92 2107.83,1209.92 2108.42,1209.92 2109.01,1209.92 2109.59,1209.92 2110.18,1209.92 2110.76,1209.92 2111.35,1209.92 2111.94,1209.92 2112.52,1209.92 2113.11,1209.92 2113.7,1209.92 2114.28,1209.92 2114.87,1209.92 2115.46,1209.92 2116.04,1209.92 2116.63,1209.92 2117.22,1209.92 2117.8,1209.92 2118.39,1209.92 2118.97,1209.92 2119.56,1209.92 2120.15,1209.92 2120.73,1209.92 2121.32,1209.92 2121.91,1209.92 2122.49,1209.92 2123.08,1209.92 2123.67,1209.92 2124.25,1209.92 2124.84,1209.92 2125.42,1209.92 2126.01,1209.92 2126.6,1209.92 2127.18,1209.92 2127.77,1209.92 2128.36,1209.92 2128.94,1209.92 2129.53,1209.92 2130.12,1209.92 2130.7,1209.92 2131.29,1209.92 2131.88,1209.92 2132.46,1209.92 2133.05,1209.92 2133.63,1209.92 2134.22,1209.92 2134.81,1209.92 2135.39,1209.92 2135.98,1209.92 2136.57,1209.92 2137.15,1209.92 2137.74,1209.92 2138.33,1209.92 2138.91,1209.92 2139.5,1209.92 2140.09,1209.92 2140.67,1209.92 2141.26,1209.92 2141.84,1209.92 2142.43,1209.92 2143.02,1209.92 2143.6,1209.92 2144.19,1209.92 2144.78,1209.92 2145.36,1209.92 2145.95,1209.92 2146.54,1209.92 2147.12,1209.92 2147.71,1209.92 2148.3,1209.92 2148.88,1209.92 2149.47,1209.92 2150.05,1209.92 2150.64,1209.92 2151.23,1209.92 2151.81,1209.92 2152.4,1209.92 2152.99,1209.92 2153.57,1209.92 2154.16,1209.92 2154.75,1209.92 2155.33,1209.92 2155.92,1209.92 2156.5,1209.92 2157.09,1209.92 2157.68,1209.92 2158.26,1209.92 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.46,1192.69 1399.91,899.083 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.6 985.439,1192.69 2158.26,1192.69 2158.26,1226.6 985.439,1226.6 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip813\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip813)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-1308.01 162.673,-2582.85 163.232,-3775.14 163.792,-4867.65 164.351,-5848.04 164.91,-6743.05 165.469,-7598.32 166.029,-8277.53 166.588,-8928.97 167.147,-9539.33 167.706,-10069.1 168.266,-9652.25 168.825,-10154.4 169.384,-10602.4 169.943,-10238.3 170.503,-10612.1 171.062,-10914 171.621,-11193.2 172.18,-11433.4 172.74,-11635.2 173.299,-11822.4 173.858,-11977 174.417,-12072.3 174.977,-11731.7 175.536,-11815.4 176.095,-11862.9 176.655,-11537.5 177.214,-11224.9 177.773,-11229.8 178.332,-11221.1 178.892,-11207.8 179.451,-10922.4 180.01,-10873.3 180.569,-10799.6 181.129,-10727.8 181.688,-10645.2 182.247,-10549.3 182.806,-10269 183.366,-9991.37 183.925,-9717.12 184.484,-9453.22 185.043,-9215.05 185.603,-8964.58 186.162,-8705.58 186.721,-8572.69 187.28,-8208.3 187.84,-8075.11 188.399,-7935.57 188.958,-7596.22 189.517,-7457.48 190.077,-7317.73 190.636,-7095.72 191.195,-6866.68 191.754,-6651.93 192.314,-6508.54 192.873,-6365.64 193.432,-6227.69 193.991,-5955.59 194.551,-5753.3 195.11,-5559.5 195.669,-5363.32 196.228,-5010.4 196.788,-4889.41 197.347,-4772.02 197.906,-4504.83 198.465,-4345.24 199.025,-4145.26 199.584,-3997.55 200.143,-3900.87 200.702,-3712.32 201.262,-3537.72 201.821,-3402.42 202.38,-3235.82 202.939,-3149.91 203.499,-2984 204.058,-2786.81 204.617,-2670.15 205.176,-2520.24 205.736,-2445.58 206.295,-2371.24 206.854,-2295.76 207.413,-2190.66 207.973,-2084.05 208.532,-1953.97 209.091,-1855.35 209.65,-1727.51 210.21,-1662.76 210.769,-1508.23 211.328,-1364.11 211.887,-1307.19 212.447,-1225.88 213.006,-1119.64 213.565,-1068.29 214.124,-1019.52 214.684,-944.929 215.243,-847.171 215.802,-727.197 216.361,-685.468 216.921,-572.753 217.48,-536.285 218.039,-501.826 218.598,-465.502 219.158,-361.995 219.717,-333.954 220.276,-282.197 220.835,-207.283 221.395,-136.722 221.954,-69.5018 222.513,-5.55051 223.072,78.5783 223.632,95.2981 224.191,113.931 224.75,172.475 225.309,270.052 225.869,280.322 226.428,313.121 226.987,343.521 227.546,371.402 228.106,423.622 228.665,436.079 229.224,465.973 229.783,494.253 230.343,498.688 230.902,546.143 231.461,553.408 232.02,579.397 232.58,582.263 233.139,606.037 233.698,672.728 234.257,660.028 234.817,683.081 235.376,686.015 235.935,710.211 236.494,711.937 237.054,755.46 237.613,776.911 238.172,779.189 238.731,798.976 239.291,820.87 239.85,842.648 240.409,844.162 240.968,861.887 241.528,860.844 242.087,877.373 242.646,861.528 243.205,863.077 243.765,860.425 244.324,896.556 244.883,896.706 245.442,877.408 246.002,914.915 246.561,967.077 247.12,978.915 247.679,1007.69 248.239,1033.31 248.798,1025.17 249.357,1036.35 249.916,1098.41 250.476,1139.8 251.035,1148.39 251.594,1139.22 252.153,1144.21 252.713,1147.54 253.272,1136.13 253.831,1161.04 254.39,1183.91 254.95,1207.35 255.509,1174.28 256.068,1163.51 256.627,1100.99 257.187,1090.11 257.746,1098.61 258.305,1123.57 258.864,1164.89 259.424,1171.48 259.983,1159.03 260.542,1147.58 261.101,1155.22 261.661,1125.96 262.22,1116.06 262.779,1107.18 263.338,1130.96 263.898,1105.81 264.457,1099.81 265.016,1108.96 265.575,1103.62 266.135,1076.63 266.694,1086.63 267.253,1079.73 267.812,1106.67 268.372,1099.11 268.931,1088.15 269.49,1098.77 270.049,1124.6 270.609,1147.36 271.168,1154.29 271.727,1140.9 272.286,1132.52 272.846,1105.67 273.405,1112.09 273.964,1101.82 274.523,1076.23 275.083,1102.24 275.642,1125.48 276.201,1133.31 276.76,1156.09 277.32,1144.55 277.879,1101.82 278.438,1079.49 278.997,1072.31 279.557,1086.66 280.116,1130.13 280.675,1135.09 281.234,1140.57 281.794,1148.1 282.353,1118.04 282.912,1159 283.471,1194.17 284.031,1177.15 284.59,1183.8 285.149,1153.53 285.708,1143.62 286.268,1115.96 286.827,1125.31 287.386,1114.33 287.945,1089.13 288.505,1046.58 289.064,1075.66 289.623,1084.62 290.182,1111.43 290.742,1097.68 291.301,1124.13 291.86,1096.55 292.419,1090.66 292.979,1050.84 293.538,1012.77 294.097,1026.66 294.656,1006.69 295.216,1003.38 295.775,1000.52 296.334,993.537 296.893,973.161 297.453,987.708 298.012,1000.24 298.571,1014.03 299.13,1025.15 299.69,1021.31 300.249,1033.2 300.808,1010.21 301.368,1024.48 301.927,1070.07 302.486,1062.61 303.045,1083.04 303.605,1089.93 304.164,1079.72 304.723,1089.41 305.282,1078.9 305.842,1056.24 306.401,1026.7 306.96,1022.5 307.519,998.87 308.079,1009.47 308.638,1037.73 309.197,1016.64 309.756,1010.14 310.316,1019.57 310.875,1029.99 311.434,1026.57 311.993,1017.77 312.553,1027.44 313.112,1000.84 313.671,995.488 314.23,1022.64 314.79,994.283 315.349,974.247 315.908,984.535 316.467,979.116 317.027,991.032 317.586,1001.35 318.145,994.611 318.704,974.144 319.264,1004.14 319.823,1000.16 320.382,1014.71 320.941,1005.2 321.501,984.431 322.06,960.616 322.619,991.221 323.178,989.577 323.738,985.225 324.297,998.085 324.856,993.134 325.415,989.703 325.975,984.002 326.534,974.008 327.093,967.718 327.652,963.656 328.212,971.772 328.771,967.929 329.33,945.304 329.889,990.225 330.449,997.82 331.008,988.816 331.567,998.36 332.126,991.913 332.686,989.457 333.245,983.777 333.804,1006.76 334.363,984.218 334.923,963.845 335.482,975.249 336.041,967.474 336.6,980.809 337.16,974.125 337.719,982.44 338.278,1009.9 338.837,1036.09 339.397,1044.21 339.956,1018.17 340.515,964.28 341.074,940.44 341.634,935.838 342.193,964.518 342.752,958.264 343.311,971.097 343.871,998.951 344.43,990.698 344.989,966.123 345.548,945.188 346.108,957.05 346.667,964.741 347.226,958.346 347.785,969.606 348.345,1008.92 348.904,982.335 349.463,1006.58 350.022,993.906 350.582,1003.21 351.141,977.176 351.7,968.812 352.259,978.386 352.819,1006.79 353.378,978.609 353.937,919.079 354.496,900.319 355.056,879.341 355.615,860.888 356.174,841.06 356.733,855.724 357.293,838.779 357.852,838.725 358.411,841.105 358.97,853.163 359.53,868.101 360.089,852.424 360.648,866.808 361.207,877.834 361.767,874.974 362.326,887.832 362.885,901.063 363.444,908.403 364.004,920.268 364.563,884.402 365.122,862.324 365.681,875.032 366.241,888.816 366.8,884.345 367.359,849.937 367.918,832.565 368.478,850.151 369.037,831.053 369.596,846.148 370.155,840.173 370.715,838.89 371.274,856.481 371.833,853.939 372.392,819.794 372.952,834.148 373.511,782.181 374.07,800.074 374.629,831.426 375.189,864.809 375.748,864.782 376.307,861.773 376.866,875.475 377.426,872.67 377.985,885.583 378.544,900.531 379.103,900.521 379.663,880.067 380.222,911.955 380.781,926.586 381.34,901.683 381.9,871.389 382.459,869.911 383.018,897.205 383.577,875.544 384.137,853.766 384.696,870.331 385.255,917.036 385.814,892.975 386.374,838.999 386.933,851.34 387.492,863.109 388.051,874.83 388.611,880.71 389.17,857.221 389.729,835.761 390.288,801.516 390.848,778.628 391.407,745.578 391.966,744.646 392.525,744.241 393.085,778.902 393.644,762.932 394.203,765.687 394.762,769.816 395.322,802.071 395.881,818.992 396.44,831.914 396.999,826.117 397.559,810.401 398.118,824.134 398.677,823.783 399.236,805.27 399.796,821.483 400.355,854.383 400.914,899.81 401.473,909.598 402.033,918.999 402.592,914.852 403.151,905.151 403.71,901.177 404.27,911.455 404.829,934.805 405.388,909.916 405.947,901.332 406.507,893.698 407.066,855.729 407.625,833.082 408.184,826.036 408.744,808.461 409.303,838.038 409.862,832.436 410.421,830.924 410.981,827.786 411.54,810.938 412.099,841.008 412.658,852.594 413.218,816.869 413.777,813.714 414.336,777.513 414.895,779.088 415.455,793.953 416.014,823.699 416.573,769.59 417.132,755.112 417.692,772.069 418.251,784.421 418.81,797.271 419.369,761.821 419.929,776.807 420.488,776.131 421.047,773.871 421.606,741.704 422.166,711.411 422.725,745.776 423.284,727.929 423.843,748.206 424.403,765.99 424.962,767.426 425.521,764.267 426.08,785.023 426.64,802.74 427.199,819.152 427.758,816.932 428.318,814.189 428.877,859.223 429.436,869.276 429.995,813.344 430.555,794.556 431.114,793.024 431.673,809.455 432.232,859.58 432.792,853.81 433.351,803.911 433.91,821.983 434.469,798.04 435.029,782.97 435.588,782.614 436.147,766.311 436.706,765.346 437.266,784.974 437.825,769.485 438.384,785.174 438.943,749.234 439.503,763.304 440.062,762.828 440.621,731.382 441.18,716.965 441.74,720.635 442.299,706.468 442.858,706.983 443.417,677.737 443.977,693.911 444.536,712.89 445.095,731.965 445.654,783.55 446.214,763.675 446.773,779.563 447.332,778.646 447.891,794.618 448.451,776.42 449.01,826.205 449.569,823.629 450.128,803.105 450.688,799.622 451.247,792.231 451.806,796.698 452.365,775.212 452.925,777.454 453.484,792.084 454.043,806.212 454.602,805.284 455.162,854.333 455.721,820.27 456.28,867.491 456.839,844.502 457.399,872.376 457.958,879.354 458.517,871.795 459.076,884.084 459.636,880.472 460.195,889.434 460.754,883.425 461.313,842.88 461.873,820.293 462.432,818.35 462.991,814.434 463.55,809.599 464.11,787.427 464.669,783.859 465.228,767.115 465.787,778.987 466.347,777.339 466.906,791.934 467.465,808.375 468.024,835.529 468.584,798.429 469.143,790.839 469.702,771.482 470.261,788.837 470.821,785.863 471.38,818.684 471.939,796.616 472.498,742.476 473.058,727.546 473.617,711.234 474.176,710.093 474.735,711.714 475.295,712.187 475.854,730.947 476.413,699.916 476.972,719.225 477.532,674.39 478.091,693.121 478.65,712.855 479.209,714.554 479.769,761.833 480.328,809.44 480.887,775.066 481.446,805.116 482.006,800.768 482.565,796.92 483.124,795.268 483.683,808.15 484.243,768.078 484.802,768.126 485.361,747.91 485.92,747.901 486.48,763.935 487.039,759.955 487.598,761.478 488.157,759.823 488.717,763.137 489.276,763.535 489.835,775.279 490.394,775.558 490.954,789.804 491.513,803.403 492.072,801.64 492.631,796.01 493.191,793.319 493.75,773.545 494.309,788.286 494.868,768.43 495.428,714.682 495.987,714.625 496.546,698.422 497.105,702.109 497.665,722.056 498.224,738.756 498.783,752.288 499.342,750.837 499.902,739.595 500.461,739.388 501.02,737.365 501.579,735.054 502.139,755.119 502.698,736.183 503.257,752.986 503.816,736.478 504.376,734.16 504.935,733.876 505.494,704.915 506.053,709.14 506.613,673.271 507.172,673.697 507.731,674.978 508.29,758.804 508.85,772.526 509.409,736.791 509.968,785.998 510.527,765.421 511.087,763.312 511.646,778.644 512.205,794.323 512.764,790.332 513.324,800.864 513.883,794.375 514.442,774.013 515.001,750.967 515.561,747.371 516.12,734.399 516.679,751.36 517.238,748.262 517.798,763.658 518.357,744.421 518.916,774.123 519.475,770.926 520.035,788.481 520.594,784.966 521.153,811.178 521.712,838.655 522.272,847.951 522.831,837.52 523.39,848.805 523.949,841.485 524.509,863.052 525.068,836.463 525.627,796.753 526.186,791.427 526.746,822.845 527.305,818.569 527.864,815.681 528.423,860.519 528.983,868.842 529.542,847.521 530.101,838.288 530.66,832.354 531.22,822.336 531.779,817.069 532.338,796.932 532.897,790.505 533.457,799.908 534.016,779.395 534.575,776.424 535.134,743.638 535.694,730.681 536.253,713.034 536.812,698.094 537.371,700.404 537.931,716.98 538.49,714.71 539.049,684.687 539.608,674.852 540.168,694.971 540.727,711.627 541.286,715.029 541.845,715.689 542.405,701.4 542.964,704.972 543.523,753.893 544.082,770.047 544.642,766.059 545.201,793.958 545.76,809.237 546.319,822.866 546.879,816.708 547.438,761.988 547.997,777.754 548.556,772.935 549.116,737.413 549.675,703.962 550.234,704.55 550.793,688.632 551.353,676.167 551.912,679.008 552.471,682.361 553.031,665.007 553.59,649.924 554.149,668.128 554.708,671.798 555.268,627.404 555.827,615.533 556.386,604.081 556.945,626.475 557.505,651.221 558.064,623.533 558.623,628.393 559.182,618.622 559.742,672.835 560.301,673.642 560.86,661.254 561.419,680.409 561.979,684.676 562.538,722.061 563.097,674.26 563.656,659.385 564.216,647.67 564.775,628.095 565.334,615.231 565.893,606.857 566.453,610.028 567.012,617.18 567.571,604.324 568.13,656.952 568.69,642.449 569.249,646.937 569.808,684.42 570.367,717.49 570.927,702.382 571.486,705.344 572.045,674.066 572.604,676.532 573.164,679.941 573.723,667.61 574.282,672.856 574.841,658.482 575.401,613.81 575.96,636.689 576.519,608.472 577.078,612.789 577.638,616.92 578.197,626.539 578.756,662.465 579.315,652.587 579.875,686.254 580.434,702.149 580.993,688.987 581.552,689.147 582.112,659.224 582.671,662.578 583.23,695.686 583.789,711.386 584.349,711.414 584.908,728.624 585.467,713.876 586.026,700.429 586.586,698.245 587.145,696.788 587.704,683.671 588.263,671.251 588.823,720.924 589.382,722.903 589.941,717.877 590.5,728.643 591.06,727.098 591.619,729.343 592.178,742.987 592.737,788.877 593.297,788.334 593.856,814.811 594.415,811.498 594.974,791.095 595.534,787.663 596.093,798.75 596.652,776.339 597.211,773.132 597.771,755.147 598.33,772.06 598.889,816.182 599.448,808.081 600.008,799.272 600.567,809.646 601.126,769.055 601.685,768.316 602.245,748.627 602.804,729.407 603.363,710.615 603.922,711.127 604.482,743.779 605.041,758.322 605.6,768.444 606.159,799.01 606.719,810.045 607.278,806.387 607.837,817.581 608.396,731.922 608.956,697.597 609.515,699.374 610.074,683.877 610.633,653.209 611.193,703.636 611.752,693.131 612.311,697.229 612.87,711.214 613.43,726.118 613.989,725.967 614.548,695.902 615.107,695.911 615.667,666.716 616.226,652.752 616.785,658.384 617.344,662.053 617.904,665.871 618.463,649.252 619.022,701.358 619.581,683.007 620.141,668.297 620.7,687.685 621.259,673.981 621.818,704.164 622.378,702.554 622.937,718.57 623.496,699.833 624.055,666.503 624.615,717.317 625.174,732.218 625.733,699.568 626.292,683.556 626.852,715.818 627.411,766.274 627.97,766.037 628.529,734.913 629.089,764.416 629.648,795.38 630.207,809.05 630.766,819.2 631.326,840.613 631.885,849.479 632.444,826.493 633.003,833.773 633.563,827.184 634.122,803.747 634.681,780.482 635.24,726.625 635.8,695.616 636.359,711.83 636.918,746.256 637.477,744.654 638.037,727.836 638.596,710.701 639.155,711.114 639.714,711.351 640.274,691.389 640.833,678.561 641.392,647.274 641.951,666.425 642.511,666.935 643.07,648.437 643.629,634.866 644.188,655.043 644.748,655.077 645.307,610.347 645.866,613.759 646.425,652.572 646.985,640.063 647.544,627.131 648.103,636.363 648.662,672.396 649.222,689.678 649.781,691.755 650.34,644.432 650.899,646.451 651.459,632.16 652.018,651.538 652.577,624.017 653.136,629.809 653.696,648.182 654.255,617.875 654.814,639.417 655.373,638.452 655.933,609.26 656.492,616.862 657.051,639.026 657.61,658.397 658.17,644.543 658.729,677.903 659.288,665.32 659.847,654.851 660.407,689.952 660.966,702.587 661.525,702.187 662.084,700.094 662.644,699.348 663.203,704.277 663.762,658.099 664.321,645.396 664.881,650.645 665.44,705.502 665.999,701.936 666.558,688.463 667.118,675.902 667.677,680.167 668.236,646.787 668.795,666.888 669.355,654.126 669.914,671.667 670.473,620.787 671.032,624.81 671.592,626.608 672.151,647.284 672.71,649.123 673.269,668.806 673.829,730.851 674.388,726.363 674.947,742.059 675.506,739.933 676.066,736.791 676.625,734.044 677.184,747.459 677.743,759.933 678.303,788.64 678.862,786.542 679.421,799.49 679.981,778.562 680.54,790.436 681.099,799.701 681.658,825.226 682.218,817.395 682.777,825.401 683.336,788.871 683.895,786.636 684.455,761.175 685.014,773.263 685.573,784.078 686.132,798.338 686.692,795.017 687.251,807.845 687.81,786.388 688.369,811.97 688.929,835.242 689.488,827.833 690.047,804.194 690.606,750.196 691.166,715.814 691.725,727.642 692.284,725.273 692.843,722.066 693.403,722.891 693.962,723.381 694.521,735.587 695.08,748.877 695.64,727.151 696.199,742.792 696.758,693.124 697.317,694.086 697.877,692.415 698.436,657.563 698.995,624.806 699.554,644.204 700.114,665.384 700.673,712.512 701.232,700.761 701.791,671.439 702.351,657.845 702.91,649.231 703.469,634.977 704.028,604.111 704.588,658.93 705.147,657.781 705.706,660.668 706.265,664.13 706.825,669.018 707.384,655.124 707.943,673.685 708.502,659.596 709.062,661.997 709.621,663.783 710.18,650.563 710.739,638.904 711.299,641.085 711.858,656.998 712.417,640.241 712.976,647.207 713.536,630.588 714.095,649.913 714.654,685.891 715.213,668.557 715.773,700.425 716.332,669.483 716.891,654.244 717.45,674.421 718.01,677.418 718.569,643.459 719.128,645.983 719.687,669.264 720.247,670.193 720.806,675.291 721.365,692.468 721.924,690.955 722.484,694.346 723.043,660.399 723.602,680.063 724.161,712.677 724.721,712.388 725.28,716.026 725.839,745.288 726.398,723.549 726.958,756.991 727.517,755.848 728.076,750.873 728.635,746.278 729.195,744.812 729.754,693.467 730.313,712.78 730.872,712.266 731.432,663.906 731.991,696.577 732.55,711.457 733.109,727.916 733.669,743.388 734.228,772.206 734.787,767.39 735.346,717.899 735.906,699.534 736.465,663.238 737.024,666.029 737.583,669.6 738.143,652.697 738.702,687.83 739.261,687.201 739.82,685.483 740.38,699.455 740.939,699.862 741.498,700.711 742.057,667.135 742.617,667.425 743.176,670.582 743.735,640.24 744.294,656.758 744.854,656.29 745.413,626.267 745.972,630.462 746.531,634.411 747.091,655.17 747.65,640.984 748.209,657.168 748.768,660.564 749.328,633.341 749.887,633.948 750.446,652.925 751.005,673.366 751.565,674.486 752.124,676.368 752.683,678.609 753.242,680.735 753.802,697.185 754.361,680.064 754.92,661.591 755.479,680.887 756.039,702.861 756.598,656.95 757.157,690.63 757.716,673.834 758.276,676.105 758.835,659.234 759.394,674.068 759.953,671.031 760.513,653.144 761.072,637.582 761.631,673.7 762.19,672.298 762.75,673.749 763.309,688.468 763.868,718.107 764.427,737.17 764.987,667.681 765.546,702.931 766.105,721.866 766.664,688.602 767.224,671.304 767.783,708.986 768.342,690.383 768.901,709.215 769.461,740.426 770.02,770.686 770.579,767.545 771.138,797.838 771.698,791.606 772.257,769.714 772.816,781.715 773.375,743.235 773.935,740.569 774.494,735.253 775.053,733.739 775.612,713.667 776.172,695.56 776.731,698.746 777.29,682.54 777.849,679.895 778.409,678.5 778.968,663.531 779.527,666.455 780.086,683.712 780.646,653.531 781.205,654.041 781.764,656.869 782.323,659.286 782.883,663.255 783.442,648.468 784.001,619.096 784.56,637.293 785.12,629.13 785.679,651.193 786.238,649.196 786.797,667.76 787.357,652.095 787.916,656.624 788.475,643.236 789.034,629.775 789.594,618.563 790.153,621.349 790.712,642.404 791.271,646.809 791.831,604.572 792.39,628.661 792.949,630.907 793.508,613.252 794.068,600.036 794.627,603.335 795.186,671.684 795.745,656.342 796.305,656.586 796.864,659.026 797.423,646.176 797.982,648.927 798.542,651.336 799.101,655.585 799.66,655.423 800.219,669.119 800.779,638.01 801.338,641.335 801.897,656.463 802.456,678.864 803.016,713.267 803.575,693.116 804.134,678.987 804.693,695.9 805.253,714.868 805.812,710.056 806.371,743.433 806.931,759.438 807.49,755.466 808.049,735.579 808.608,764.099 809.168,744.72 809.727,757.885 810.286,785.121 810.845,778.133 811.405,792.88 811.964,798.785 812.523,798.52 813.082,776.964 813.642,770.695 814.201,766.615 814.76,778.23 815.319,822.803 815.879,813.325 816.438,806.801 816.997,848.128 817.556,837.953 818.116,831.493 818.675,793.172 819.234,771.761 819.793,781.373 820.353,759.365 820.912,754.904 821.471,751.099 822.03,734.941 822.59,715.373 823.149,714.944 823.708,714.697 824.267,713.878 824.827,694.494 825.386,660.86 825.945,644.426 826.504,631.737 827.064,618.224 827.623,589.499 828.182,610.789 828.741,598.87 829.301,622.337 829.86,674.664 830.419,676.557 830.978,677.11 831.538,662.849 832.097,613.023 832.656,599.853 833.215,604.362 833.775,610.54 834.334,614.647 834.893,601.025 835.452,628.259 836.012,611.644 836.571,647.97 837.13,633.389 837.689,683.73 838.249,665.26 838.808,663.007 839.367,645.37 839.926,634.088 840.486,656.804 841.045,653.969 841.604,656.025 842.163,657.676 842.723,655.108 843.282,659.106 843.841,712.557 844.4,680.633 844.96,666.506 845.519,667.75 846.078,704.457 846.637,705.386 847.197,725.692 847.756,727.325 848.315,706.842 848.874,721.171 849.434,753.134 849.993,734.421 850.552,745.451 851.111,713.857 851.671,681.944 852.23,683.093 852.789,731.064 853.348,726.712 853.908,724.253 854.467,721.559 855.026,721.351 855.585,751.536 856.145,731.37 856.704,757.954 857.263,737.917 857.822,720.057 858.382,736.604 858.941,750.948 859.5,747.449 860.059,712.724 860.619,708.409 861.178,691.29 861.737,723.117 862.296,721.572 862.856,753.073 863.415,762.902 863.974,755.162 864.533,753.49 865.093,766.182 865.652,792.553 866.211,790.215 866.77,764.413 867.33,758.229 867.889,767.93 868.448,762.414 869.007,759.721 869.567,736.678 870.126,747.655 870.685,760.945 871.244,754.289 871.804,752.666 872.363,751.253 872.922,713.293 873.481,757.728 874.041,755.532 874.6,780.115 875.159,758.867 875.718,755.901 876.278,714.146 876.837,711.167 877.396,691.232 877.955,689.934 878.515,687.86 879.074,690.239 879.633,677.243 880.192,676.123 880.752,676.03 881.311,676.783 881.87,697.677 882.429,730.699 882.989,678.681 883.548,677.496 884.107,709.723 884.666,724.394 885.226,690.723 885.785,720.876 886.344,714.966 886.903,712.853 887.463,710.031 888.022,710.935 888.581,710.578 889.14,691.98 889.7,643.333 890.259,663.091 890.818,683.097 891.377,682.577 891.937,665.089 892.496,650.056 893.055,622.405 893.614,577.638 894.174,567.183 894.733,558.742 895.292,579.934 895.851,620.564 896.411,640.269 896.97,674.477 897.529,687.662 898.088,670.088 898.648,673.059 899.207,655.258 899.766,639.181 900.325,643.032 900.885,661.579 901.444,660.772 902.003,679.232 902.562,714.654 903.122,762.1 903.681,755.347 904.24,750.106 904.799,744.233 905.359,740.34 905.918,734.703 906.477,717.654 907.036,683.504 907.596,635.192 908.155,605.837 908.714,612.176 909.273,634.522 909.833,668.532 910.392,652.799 910.951,643.436 911.51,660.576 912.07,662.059 912.629,661.018 913.188,664.542 913.747,665.226 914.307,665.172 914.866,678.699 915.425,710.775 915.984,757.932 916.544,767.784 917.103,766.092 917.662,746.268 918.221,775.706 918.781,756.153 919.34,750.693 919.899,777.568 920.458,774.687 921.018,773.008 921.577,798.763 922.136,791.685 922.695,802.752 923.255,780.46 923.814,790.454 924.373,769.767 924.932,744.901 925.492,744.275 926.051,726.102 926.61,708.576 927.169,723.769 927.729,705.803 928.288,686.091 928.847,718.206 929.406,701.345 929.966,682.892 930.525,663.652 931.084,694.802 931.644,694.82 932.203,715.034 932.762,684.049 933.321,666.696 933.881,687.253 934.44,672.508 934.999,688.613 935.558,672.648 936.118,674.45 936.677,675.754 937.236,672.229 937.795,674.914 938.355,708.063 938.914,661.702 939.473,681.102 940.032,652.475 940.592,625.081 941.151,610.935 941.71,615.26 942.269,601.023 942.829,590.486 943.388,612.453 943.947,615.408 944.506,621.548 945.066,624.892 945.625,610.566 946.184,645.614 946.743,677.842 947.303,663.196 947.862,646.839 948.421,665.896 948.98,664.932 949.54,672.16 950.099,693.496 950.658,728.293 951.217,742.351 951.777,723.95 952.336,722.168 952.895,734.311 953.454,730.062 954.014,791.217 954.573,806.699 955.132,789.172 955.691,783.074 956.251,761.139 956.81,742.468 957.369,758.36 957.928,739.867 958.488,736.091 959.047,748.702 959.606,731.661 960.165,759.236 960.725,723.234 961.284,732.146 961.843,698.978 962.402,677.677 962.962,675.455 963.521,641.711 964.08,612.041 964.639,599.341 965.199,601.015 965.758,586.754 966.317,574.855 966.876,564.921 967.436,571 967.995,542.194 968.554,568.398 969.113,608.487 969.673,628.12 970.232,633.001 970.791,665.534 971.35,650.174 971.91,669.891 972.469,718.313 973.028,734.016 973.587,731.839 974.147,732.219 974.706,741.983 975.265,739.861 975.824,722.487 976.384,671.858 976.943,610.648 977.502,661.587 978.061,662.785 978.621,664.224 979.18,682.877 979.739,697.805 980.298,682.111 980.858,665.727 981.417,697.11 981.976,697.634 982.535,698.242 983.095,688.363 983.654,639.383 984.213,675.798 984.772,741.699 985.332,788.072 985.891,766.95 986.45,765.264 987.009,761.486 987.569,740.565 988.128,758.927 988.687,755.731 989.246,738.434 989.806,733.909 990.365,697.777 990.924,714.146 991.483,745.212 992.043,705.909 992.602,704.36 993.161,719.219 993.72,736.208 994.28,685.999 994.839,685.741 995.398,653.973 995.957,669.77 996.517,674.295 997.076,707.405 997.635,721.247 998.194,737.031 998.754,717.901 999.313,747.887 999.872,743.86 1000.43,735.725 1000.99,697.1 1001.55,644.293 1002.11,596.442 1002.67,601.866 1003.23,620.229 1003.79,606.291 1004.35,592.045 1004.91,613.806 1005.46,617.548 1006.02,672.706 1006.58,691.386 1007.14,707.455 1007.7,724.26 1008.26,734.33 1008.82,717.289 1009.38,717.579 1009.94,698.855 1010.5,697.877 1011.06,710.701 1011.62,722.222 1012.18,686.407 1012.73,672.895 1013.29,623.705 1013.85,627.199 1014.41,629.325 1014.97,663.365 1015.53,691.574 1016.09,659.314 1016.65,676.628 1017.21,680.845 1017.77,696.181 1018.33,645.652 1018.89,646.905 1019.45,647.707 1020.01,647.127 1020.56,647.564 1021.12,601.144 1021.68,608.676 1022.24,645.737 1022.8,724.917 1023.36,708.112 1023.92,746.402 1024.48,758.934 1025.04,757.031 1025.6,723.122 1026.16,721.44 1026.72,720.675 1027.28,749.699 1027.83,760.869 1028.39,759.727 1028.95,758.665 1029.51,740.554 1030.07,736.018 1030.63,748.466 1031.19,745.606 1031.75,775.85 1032.31,788.137 1032.87,753.865 1033.43,747.671 1033.99,712.262 1034.55,712.692 1035.1,677.734 1035.66,691.771 1036.22,693.08 1036.78,675.456 1037.34,643.262 1037.9,677.652 1038.46,599.753 1039.02,605.016 1039.58,598.081 1040.14,635.249 1040.7,653.187 1041.26,622.26 1041.82,613.448 1042.38,602.617 1042.93,589.616 1043.49,609.482 1044.05,612.524 1044.61,619.44 1045.17,619.569 1045.73,640.876 1046.29,692.24 1046.85,660.785 1047.41,676.119 1047.97,660.843 1048.53,662.387 1049.09,665.294 1049.65,665.394 1050.2,650.325 1050.76,649.062 1051.32,654.77 1051.88,655.979 1052.44,660.813 1053,649.725 1053.56,670.945 1054.12,688.118 1054.68,734.209 1055.24,748.897 1055.8,763.343 1056.36,731.111 1056.92,733.665 1057.48,685.228 1058.03,685.746 1058.59,734.618 1059.15,732.195 1059.71,748.522 1060.27,697.904 1060.83,694.774 1061.39,694.566 1061.95,694.803 1062.51,661.81 1063.07,629.035 1063.63,616.554 1064.19,649.723 1064.75,648.472 1065.3,695.685 1065.86,692.009 1066.42,675.57 1066.98,677.392 1067.54,710.904 1068.1,706.834 1068.66,705.354 1069.22,689.588 1069.78,710.241 1070.34,739.32 1070.9,736.869 1071.46,732.908 1072.02,734.093 1072.57,731.157 1073.13,714.976 1073.69,729.469 1074.25,744.371 1074.81,740.997 1075.37,751.431 1075.93,763.314 1076.49,775.502 1077.05,754.455 1077.61,749.44 1078.17,728.185 1078.73,705.424 1079.29,720.697 1079.85,700.359 1080.4,653.505 1080.96,669.73 1081.52,623.797 1082.08,596.703 1082.64,585.428 1083.2,591.329 1083.76,631.14 1084.32,634.045 1084.88,637.109 1085.44,639.1 1086,657.099 1086.56,625.418 1087.12,662.524 1087.67,634.203 1088.23,602.063 1088.79,607.431 1089.35,644.843 1089.91,664.155 1090.47,651.419 1091.03,666.564 1091.59,671.212 1092.15,652.232 1092.71,657.025 1093.27,659.81 1093.83,663.641 1094.39,664.403 1094.94,681.189 1095.5,683.017 1096.06,687.563 1096.62,651.241 1097.18,672.271 1097.74,687.817 1098.3,654.396 1098.86,677.455 1099.42,678.067 1099.98,664.604 1100.54,633.707 1101.1,670.18 1101.66,657.042 1102.22,638.995 1102.77,595.93 1103.33,566.281 1103.89,590.267 1104.45,596.422 1105.01,583.359 1105.57,588.903 1106.13,609.347 1106.69,615.166 1107.25,622.22 1107.81,656.965 1108.37,694.394 1108.93,695.653 1109.49,694.477 1110.04,679.124 1110.6,716.235 1111.16,697.864 1111.72,696.445 1112.28,677.576 1112.84,694.527 1113.4,726.515 1113.96,706.404 1114.52,735.613 1115.08,697.541 1115.64,681.019 1116.2,681.686 1116.76,698.959 1117.31,701.043 1117.87,666.768 1118.43,654.738 1118.99,669.919 1119.55,670.695 1120.11,689.005 1120.67,690.88 1121.23,724.377 1121.79,706.057 1122.35,691.797 1122.91,691.678 1123.47,673.037 1124.03,672.487 1124.59,661.84 1125.14,660.719 1125.7,677.194 1126.26,697.047 1126.82,676.572 1127.38,641.328 1127.94,673.827 1128.5,624.705 1129.06,626.888 1129.62,585.271 1130.18,608.487 1130.74,616.077 1131.3,600.264 1131.86,602.726 1132.41,625.1 1132.97,661.208 1133.53,678.303 1134.09,726.647 1134.65,708.151 1135.21,740.629 1135.77,771.97 1136.33,783.755 1136.89,763.998 1137.45,792.608 1138.01,805.351 1138.57,812.16 1139.13,804.145 1139.68,797.772 1140.24,792.538 1140.8,851.88 1141.36,840.42 1141.92,811.379 1142.48,808.051 1143.04,800.861 1143.6,793.575 1144.16,788.716 1144.72,789.279 1145.28,781.771 1145.84,824.363 1146.4,814.913 1146.96,808.463 1147.51,783.966 1148.07,763.722 1148.63,725.113 1149.19,675.264 1149.75,658.305 1150.31,648.715 1150.87,647.128 1151.43,618.34 1151.99,619.292 1152.55,656.859 1153.11,627.022 1153.67,629.179 1154.23,647.554 1154.78,647.616 1155.34,631.106 1155.9,598.462 1156.46,618.159 1157.02,655.136 1157.58,654.042 1158.14,652.43 1158.7,638.002 1159.26,628.401 1159.82,647.15 1160.38,666.88 1160.94,666.912 1161.5,652.638 1162.05,690.637 1162.61,675.373 1163.17,658.45 1163.73,626.193 1164.29,630.326 1164.85,631.405 1165.41,604.931 1165.97,590.872 1166.53,610.356 1167.09,635.183 1167.65,651.219 1168.21,651.524 1168.77,687.969 1169.33,689.012 1169.88,689.481 1170.44,707.712 1171,692.209 1171.56,695.796 1172.12,695.35 1172.68,709.62 1173.24,736.325 1173.8,718.61 1174.36,716.906 1174.92,747.62 1175.48,759.479 1176.04,787.393 1176.6,797.497 1177.15,761.896 1177.71,738.565 1178.27,738.624 1178.83,797.844 1179.39,776.833 1179.95,755.334 1180.51,768.242 1181.07,748.527 1181.63,775.729 1182.19,766.018 1182.75,747.127 1183.31,756.985 1183.87,764.537 1184.43,730.117 1184.98,728.2 1185.54,722.568 1186.1,703.527 1186.66,688.346 1187.22,687.014 1187.78,687.194 1188.34,686.064 1188.9,699.113 1189.46,697.004 1190.02,693.946 1190.58,708.444 1191.14,689.956 1191.7,655.82 1192.25,625.826 1192.81,631.589 1193.37,677.045 1193.93,662.95 1194.49,662.933 1195.05,676.17 1195.61,642.93 1196.17,642.258 1196.73,628.934 1197.29,647.938 1197.85,647.633 1198.41,662.799 1198.97,661.348 1199.52,698.327 1200.08,695.252 1200.64,684.116 1201.2,650.972 1201.76,651.947 1202.32,635.398 1202.88,656.986 1203.44,644.666 1204,661.84 1204.56,661.03 1205.12,678.955 1205.68,678.83 1206.24,662.862 1206.8,709.143 1207.35,695.695 1207.91,695.707 1208.47,713.943 1209.03,728.155 1209.59,724.745 1210.15,756.868 1210.71,720.987 1211.27,721.529 1211.83,721.1 1212.39,723.409 1212.95,738.687 1213.51,737.849 1214.07,699.44 1214.62,711.348 1215.18,712.371 1215.74,681.291 1216.3,681.882 1216.86,677.814 1217.42,673.778 1217.98,691.515 1218.54,694.59 1219.1,690.274 1219.66,689.912 1220.22,674.353 1220.78,721.59 1221.34,704.668 1221.89,751.648 1222.45,750.644 1223.01,760.131 1223.57,769.867 1224.13,731.118 1224.69,728.796 1225.25,693.722 1225.81,692.378 1226.37,723.818 1226.93,705.317 1227.49,716.026 1228.05,727.977 1228.61,724.148 1229.17,704.084 1229.72,685.27 1230.28,683.925 1230.84,688.781 1231.4,691.332 1231.96,643.921 1232.52,628.128 1233.08,597.204 1233.64,634.735 1234.2,622.171 1234.76,655.65 1235.32,655.67 1235.88,670.405 1236.44,673.907 1236.99,689.937 1237.55,703.047 1238.11,705.295 1238.67,707.521 1239.23,757.29 1239.79,752.145 1240.35,732.828 1240.91,726.906 1241.47,739.552 1242.03,771.727 1242.59,768.021 1243.15,795.038 1243.71,752.475 1244.26,753.525 1244.82,751.124 1245.38,733.466 1245.94,745.494 1246.5,713.172 1247.06,675.594 1247.62,670.71 1248.18,669.364 1248.74,669.446 1249.3,715.379 1249.86,726.185 1250.42,693.618 1250.98,712.344 1251.54,712.589 1252.09,696.591 1252.65,679.187 1253.21,708.822 1253.77,737.094 1254.33,731.646 1254.89,729.366 1255.45,744.446 1256.01,740.331 1256.57,753.556 1257.13,746.094 1257.69,760.749 1258.25,740.038 1258.81,722.62 1259.36,702.569 1259.92,698.733 1260.48,680.594 1261.04,665.235 1261.6,696.465 1262.16,695.314 1262.72,679.704 1263.28,661.481 1263.84,663.217 1264.4,646.75 1264.96,614.028 1265.52,618.577 1266.08,608.017 1266.63,578.7 1267.19,584.26 1267.75,589.845 1268.31,577.312 1268.87,594.739 1269.43,617.25 1269.99,622.169 1270.55,610.258 1271.11,681.908 1271.67,679.389 1272.23,664.579 1272.79,664.916 1273.35,652.588 1273.91,638.548 1274.46,628.028 1275.02,650.825 1275.58,683.547 1276.14,631.567 1276.7,649.959 1277.26,634.893 1277.82,636.756 1278.38,624.161 1278.94,625.857 1279.5,628.93 1280.06,633.18 1280.62,605.067 1281.18,610.139 1281.73,615.222 1282.29,669.781 1282.85,686.399 1283.41,702.876 1283.97,688.118 1284.53,676.223 1285.09,676.295 1285.65,659.135 1286.21,678.393 1286.77,694.964 1287.33,661.81 1287.89,682.136 1288.45,666.293 1289,669.465 1289.56,660.485 1290.12,661.581 1290.68,651.149 1291.24,655.143 1291.8,657.751 1292.36,678.734 1292.92,699.362 1293.48,671.045 1294.04,675.188 1294.6,661.82 1295.16,634.136 1295.72,623.931 1296.28,613.024 1296.83,583.408 1297.39,573.822 1297.95,610.638 1298.51,647.187 1299.07,648.819 1299.63,684.413 1300.19,700.073 1300.75,701.34 1301.31,698.453 1301.87,723.549 1302.43,768.369 1302.99,765.55 1303.55,774.739 1304.1,774.173 1304.66,756.309 1305.22,721.683 1305.78,691.087 1306.34,655.776 1306.9,674.955 1307.46,643.281 1308.02,641.663 1308.58,644.473 1309.14,681.838 1309.7,634.831 1310.26,605.06 1310.82,625.257 1311.38,614.215 1311.93,632.3 1312.49,634.911 1313.05,655.417 1313.61,689.574 1314.17,688.62 1314.73,702.296 1315.29,700.117 1315.85,685.327 1316.41,682.319 1316.97,684.214 1317.53,653.673 1318.09,656.481 1318.65,621.407 1319.2,623.988 1319.76,657.138 1320.32,658.425 1320.88,661.573 1321.44,647.692 1322,646.1 1322.56,681.49 1323.12,714.02 1323.68,713.777 1324.24,711.682 1324.8,677.998 1325.36,663.86 1325.92,664.489 1326.47,660.933 1327.03,661.449 1327.59,695.116 1328.15,691.909 1328.71,657.348 1329.27,622.993 1329.83,627.37 1330.39,611.548 1330.95,598.86 1331.51,585.385 1332.07,605.889 1332.63,627.433 1333.19,646.959 1333.75,668.492 1334.3,719.61 1334.86,752.118 1335.42,717.396 1335.98,732.951 1336.54,729.798 1337.1,729.031 1337.66,742.925 1338.22,735.192 1338.78,735.373 1339.34,717.803 1339.9,717.024 1340.46,683.346 1341.02,664.969 1341.57,682.825 1342.13,683.24 1342.69,704.803 1343.25,691.036 1343.81,639.291 1344.37,626.231 1344.93,664.591 1345.49,667.129 1346.05,654.566 1346.61,654.567 1347.17,670.585 1347.73,670.639 1348.29,686.954 1348.84,689.338 1349.4,690.918 1349.96,689.713 1350.52,676.426 1351.08,694.945 1351.64,709.72 1352.2,705.572 1352.76,686.766 1353.32,701.256 1353.88,717.412 1354.44,715.258 1355,697.706 1355.56,650.226 1356.12,670.336 1356.67,670.996 1357.23,673.935 1357.79,657.274 1358.35,690.504 1358.91,662.594 1359.47,648.449 1360.03,696.516 1360.59,713.515 1361.15,711.469 1361.71,708.753 1362.27,705.909 1362.83,703.829 1363.39,720.507 1363.94,781.534 1364.5,742.561 1365.06,740.218 1365.62,752.523 1366.18,764.846 1366.74,807.216 1367.3,803.215 1367.86,797.326 1368.42,760.979 1368.98,771.051 1369.54,767.965 1370.1,764.938 1370.66,758.947 1371.21,763.85 1371.77,754.943 1372.33,751.131 1372.89,749.036 1373.45,730.108 1374.01,696.509 1374.57,680.056 1375.13,663.798 1375.69,681.996 1376.25,683.65 1376.81,687.521 1377.37,704.846 1377.93,718.63 1378.49,669.329 1379.04,668.159 1379.6,652.609 1380.16,640.011 1380.72,657.839 1381.28,659.874 1381.84,656.148 1382.4,673.405 1382.96,658.134 1383.52,640.775 1384.08,677.181 1384.64,694.244 1385.2,692.486 1385.76,657.973 1386.31,675.625 1386.87,627.415 1387.43,645.647 1387.99,632.793 1388.55,621.529 1389.11,657.686 1389.67,626.607 1390.23,647.539 1390.79,649.235 1391.35,687.715 1391.91,655.356 1392.47,675.016 1393.03,671.664 1393.58,672.551 1394.14,658.037 1394.7,644.192 1395.26,664.397 1395.82,699.055 1396.38,648.533 1396.94,650.833 1397.5,649.953 1398.06,619.488 1398.62,670.472 1399.18,686.044 1399.74,668.796 1400.3,637.516 1400.86,655.75 1401.41,610.804 1401.97,599.15 1402.53,622.603 1403.09,623.759 1403.65,631.129 1404.21,635.387 1404.77,605.79 1405.33,610.538 1405.89,633.714 1406.45,590.319 1407.01,595.864 1407.57,647.091 1408.13,667.586 1408.68,651.915 1409.24,636.128 1409.8,638.365 1410.36,625.481 1410.92,631.657 1411.48,634.789 1412.04,670.469 1412.6,704.315 1413.16,703.292 1413.72,686.822 1414.28,685.898 1414.84,670.801 1415.4,670.721 1415.95,637.231 1416.51,658.702 1417.07,658.994 1417.63,638.11 1418.19,640.887 1418.75,613.608 1419.31,636.317 1419.87,623.062 1420.43,628.071 1420.99,632.153 1421.55,618.273 1422.11,607.211 1422.67,596.4 1423.23,604.188 1423.78,578.143 1424.34,585.776 1424.9,639.847 1425.46,643.369 1426.02,643.538 1426.58,665.386 1427.14,662.324 1427.7,712.692 1428.26,696.777 1428.82,679.998 1429.38,696.299 1429.94,730.196 1430.5,744.008 1431.05,745.641 1431.61,730.928 1432.17,710.148 1432.73,678.098 1433.29,680.219 1433.85,710.339 1434.41,709.84 1434.97,724.24 1435.53,723.763 1436.09,674.285 1436.65,673.801 1437.21,692.536 1437.77,709.827 1438.33,711.527 1438.88,744.809 1439.44,723.78 1440,722.879 1440.56,738.836 1441.12,735.052 1441.68,715.081 1442.24,710.495 1442.8,694.039 1443.36,695.538 1443.92,683.241 1444.48,702.501 1445.04,702.546 1445.6,701.518 1446.15,703.23 1446.71,751.299 1447.27,761.845 1447.83,709.735 1448.39,674.656 1448.95,694.571 1449.51,706.723 1450.07,691.46 1450.63,706.232 1451.19,717.023 1451.75,728.727 1452.31,729.254 1452.87,743.865 1453.42,739.288 1453.98,721.262 1454.54,720.894 1455.1,719.199 1455.66,736.751 1456.22,733.451 1456.78,732.521 1457.34,743.215 1457.9,726.005 1458.46,726.523 1459.02,739.472 1459.58,754.268 1460.14,754.551 1460.7,751.199 1461.25,747.321 1461.81,742.087 1462.37,739.523 1462.93,720.901 1463.49,717.771 1464.05,747.768 1464.61,743.647 1465.17,758.551 1465.73,738.703 1466.29,720.397 1466.85,717.599 1467.41,765.229 1467.97,726.788 1468.52,724.198 1469.08,719.789 1469.64,719.243 1470.2,683.95 1470.76,668.205 1471.32,665.771 1471.88,650.136 1472.44,651.215 1473,640.153 1473.56,642.903 1474.12,647.416 1474.68,616.837 1475.24,636.545 1475.79,639.464 1476.35,578.075 1476.91,600.662 1477.47,604.558 1478.03,575.262 1478.59,582.432 1479.15,587.599 1479.71,612.401 1480.27,596.371 1480.83,587.367 1481.39,608.76 1481.95,613.478 1482.51,632.567 1483.07,701.264 1483.62,713.403 1484.18,759.323 1484.74,772.21 1485.3,783.491 1485.86,791.035 1486.42,801.34 1486.98,795.104 1487.54,790.827 1488.1,795.659 1488.66,790.362 1489.22,786.376 1489.78,785.087 1490.34,779.577 1490.89,774.938 1491.45,701.973 1492.01,699.388 1492.57,713.61 1493.13,698.396 1493.69,699.561 1494.25,728.683 1494.81,756.468 1495.37,707.209 1495.93,707.103 1496.49,722.493 1497.05,720.698 1497.61,701.401 1498.16,684.12 1498.72,617.4 1499.28,585.274 1499.84,578.737 1500.4,600.466 1500.96,651.386 1501.52,636.94 1502.08,639.222 1502.64,640.842 1503.2,673.581 1503.76,692.404 1504.32,707.322 1504.88,704.609 1505.44,686.434 1505.99,689.326 1506.55,669.279 1507.11,705.389 1507.67,705.822 1508.23,720.136 1508.79,684.798 1509.35,685.036 1509.91,728.777 1510.47,708.222 1511.03,752.835 1511.59,781.011 1512.15,775.98 1512.71,769.835 1513.26,781.82 1513.82,762.196 1514.38,757.981 1514.94,752.181 1515.5,750.045 1516.06,762.715 1516.62,706.396 1517.18,689.09 1517.74,691.269 1518.3,675.871 1518.86,675.41 1519.42,672.649 1519.98,692.514 1520.53,658.517 1521.09,657.458 1521.65,691.207 1522.21,657.65 1522.77,660.419 1523.33,660.799 1523.89,696.727 1524.45,726.842 1525.01,706.446 1525.57,688.035 1526.13,688.076 1526.69,691.162 1527.25,739.374 1527.81,751.925 1528.36,730.962 1528.92,795.122 1529.48,790.095 1530.04,765.754 1530.6,744.651 1531.16,724.434 1531.72,718.833 1532.28,703.963 1532.84,670.812 1533.4,651.291 1533.96,656.738 1534.52,673.309 1535.08,653.927 1535.63,640.663 1536.19,674.923 1536.75,709.358 1537.31,659.874 1537.87,646.714 1538.43,665.828 1538.99,649.934 1539.55,633.156 1540.11,680.751 1540.67,696.822 1541.23,712.431 1541.79,728.266 1542.35,711.255 1542.9,678.016 1543.46,657.311 1544.02,659.424 1544.58,659.639 1545.14,706.556 1545.7,701.566 1546.26,701.335 1546.82,683.798 1547.38,703.522 1547.94,749.721 1548.5,742.796 1549.06,713.909 1549.62,728.728 1550.18,706.934 1550.73,706.057 1551.29,707.898 1551.85,704.383 1552.41,702.988 1552.97,703.383 1553.53,701.499 1554.09,701.768 1554.65,731.605 1555.21,714.159 1555.77,680.109 1556.33,648.406 1556.89,684.911 1557.45,717.565 1558,715.071 1558.56,734.407 1559.12,732.12 1559.68,712.435 1560.24,713.05 1560.8,710.842 1561.36,708.611 1561.92,695.487 1562.48,660.359 1563.04,663.995 1563.6,669.323 1564.16,674.294 1564.72,708.449 1565.28,707.985 1565.83,674.905 1566.39,692.372 1566.95,660.513 1567.51,661.916 1568.07,659.98 1568.63,662.99 1569.19,647.372 1569.75,630.902 1570.31,649.07 1570.87,669.103 1571.43,652.314 1571.99,669.445 1572.55,671.727 1573.1,672.08 1573.66,674.433 1574.22,706.107 1574.78,705.493 1575.34,703.695 1575.9,733.629 1576.46,734.349 1577.02,699.02 1577.58,698.469 1578.14,681.09 1578.7,677.204 1579.26,658.057 1579.82,658.445 1580.37,662.45 1580.93,677.688 1581.49,677.696 1582.05,660.541 1582.61,659.476 1583.17,659.467 1583.73,658.223 1584.29,674.823 1584.85,673.277 1585.41,658.564 1585.97,694.332 1586.53,709.969 1587.09,724.183 1587.65,690.946 1588.2,707.484 1588.76,704.385 1589.32,715.376 1589.88,699.464 1590.44,677.828 1591,674.777 1591.56,688.621 1592.12,669.321 1592.68,702.885 1593.24,702.332 1593.8,717.18 1594.36,702.47 1594.92,685.143 1595.47,686.065 1596.03,685.733 1596.59,700.962 1597.15,682.241 1597.71,649.951 1598.27,685.903 1598.83,748.181 1599.39,757.347 1599.95,751.763 1600.51,747.346 1601.07,775.827 1601.63,739.615 1602.19,738.322 1602.74,734.627 1603.3,713.694 1603.86,710.686 1604.42,643.092 1604.98,647.505 1605.54,647.947 1606.1,634.81 1606.66,671.522 1607.22,706.538 1607.78,691.705 1608.34,707.094 1608.9,706.173 1609.46,656.299 1610.02,659.113 1610.57,677.618 1611.13,727.933 1611.69,726.041 1612.25,740.112 1612.81,755.367 1613.37,754.131 1613.93,749.494 1614.49,734.3 1615.05,699.628 1615.61,713.934 1616.17,724.884 1616.73,720.618 1617.29,717.381 1617.84,699.209 1618.4,698.928 1618.96,716.106 1619.52,731.212 1620.08,732.482 1620.64,678.324 1621.2,712.595 1621.76,709.665 1622.32,710.811 1622.88,677.894 1623.44,699.519 1624,665.341 1624.56,666.538 1625.11,665.197 1625.67,662.236 1626.23,712.98 1626.79,695.545 1627.35,729.997 1627.91,695.09 1628.47,647.083 1629.03,630.429 1629.59,583.3 1630.15,593.856 1630.71,616.627 1631.27,652.766 1631.83,637.452 1632.39,641.222 1632.94,655.127 1633.5,640.53 1634.06,657.062 1634.62,687.805 1635.18,658.343 1635.74,640.131 1636.3,644.668 1636.86,660.865 1637.42,663.318 1637.98,664.163 1638.54,713.28 1639.1,710.36 1639.66,690.46 1640.21,693.121 1640.77,694.284 1641.33,677.004 1641.89,659.818 1642.45,677.562 1643.01,659.141 1643.57,675.174 1644.13,656.772 1644.69,645.783 1645.25,648.723 1645.81,653.233 1646.37,655.961 1646.93,655.058 1647.48,670.442 1648.04,668.978 1648.6,657.331 1649.16,659.729 1649.72,676.754 1650.28,677.719 1650.84,680.548 1651.4,631.499 1651.96,619.683 1652.52,656.571 1653.08,644.98 1653.64,645.553 1654.2,646.649 1654.76,663.308 1655.31,649.522 1655.87,634.455 1656.43,670.923 1656.99,671.548 1657.55,689.697 1658.11,689.858 1658.67,687.945 1659.23,655.067 1659.79,656.356 1660.35,674.605 1660.91,660.367 1661.47,675.954 1662.03,676.373 1662.58,673.652 1663.14,690.68 1663.7,655.068 1664.26,658.057 1664.82,640.601 1665.38,673.474 1665.94,658.484 1666.5,674.681 1667.06,656.686 1667.62,641.062 1668.18,693.103 1668.74,691.38 1669.3,692.41 1669.85,691.723 1670.41,690.677 1670.97,694.051 1671.53,710.885 1672.09,628.519 1672.65,665.306 1673.21,616.517 1673.77,621.831 1674.33,592.031 1674.89,630.729 1675.45,616.506 1676.01,668.486 1676.57,687.474 1677.13,701.841 1677.68,732.155 1678.24,712.521 1678.8,723.653 1679.36,754.925 1679.92,749.857 1680.48,698.116 1681.04,714.362 1681.6,741.973 1682.16,707.971 1682.72,691.2 1683.28,708.529 1683.84,707.355 1684.4,722.267 1684.95,735.831 1685.51,749.252 1686.07,748.932 1686.63,710.044 1687.19,721.334 1687.75,702.049 1688.31,685.961 1688.87,700.398 1689.43,683.224 1689.99,651.458 1690.55,620.613 1691.11,604.506 1691.67,592.348 1692.23,615.67 1692.78,604.37 1693.34,577.622 1693.9,614.348 1694.46,618.068 1695.02,570.784 1695.58,627.447 1696.14,596.791 1696.7,614.172 1697.26,620.009 1697.82,622.547 1698.38,625.811 1698.94,662.463 1699.5,681.903 1700.05,648.416 1700.61,634.722 1701.17,671.731 1701.73,721.254 1702.29,738.778 1702.85,667.477 1703.41,654.306 1703.97,703.068 1704.53,702.128 1705.09,670.888 1705.65,690.189 1706.21,674.103 1706.77,658.351 1707.32,644.955 1707.88,694.704 1708.44,691.689 1709,675.618 1709.56,724.666 1710.12,708.984 1710.68,710.682 1711.24,680.546 1711.8,697.682 1712.36,697.048 1712.92,695.949 1713.48,729.055 1714.04,711.738 1714.6,707.408 1715.15,701.823 1715.71,685.69 1716.27,671.058 1716.83,720.235 1717.39,717.419 1717.95,780.421 1718.51,775.555 1719.07,754.146 1719.63,769.348 1720.19,764.257 1720.75,775.129 1721.31,785.912 1721.87,782.542 1722.42,762.071 1722.98,711.402 1723.54,709.274 1724.1,724.266 1724.66,719.015 1725.22,700.003 1725.78,700.035 1726.34,651.169 1726.9,636.119 1727.46,639.052 1728.02,675.666 1728.58,692.68 1729.14,711.676 1729.69,696.941 1730.25,680.134 1730.81,669.181 1731.37,670.893 1731.93,639.022 1732.49,640.609 1733.05,627.556 1733.61,631.309 1734.17,633.157 1734.73,638.414 1735.29,627.809 1735.85,614.214 1736.41,571.105 1736.97,545.167 1737.52,583.042 1738.08,606.381 1738.64,594.402 1739.2,582.916 1739.76,572.252 1740.32,576.338 1740.88,598.377 1741.44,617.215 1742,619.925 1742.56,608.69 1743.12,595.909 1743.68,616.935 1744.24,622.026 1744.79,642.742 1745.35,629.8 1745.91,634.321 1746.47,641.076 1747.03,628.776 1747.59,601.526 1748.15,608.672 1748.71,563.966 1749.27,584.327 1749.83,621.391 1750.39,659.257 1750.95,643.99 1751.51,660.331 1752.06,676.142 1752.62,662.961 1753.18,666.9 1753.74,703.395 1754.3,700.16 1754.86,718.083 1755.42,715.188 1755.98,731.879 1756.54,742.992 1757.1,737.251 1757.66,701.544 1758.22,700.908 1758.78,715.947 1759.34,730.97 1759.89,741.277 1760.45,737.719 1761.01,768.478 1761.57,778.627 1762.13,772.65 1762.69,803.737 1763.25,798.34 1763.81,775.382 1764.37,769.724 1764.93,810.229 1765.49,772.936 1766.05,754.751 1766.61,753.06 1767.16,753.269 1767.72,718.5 1768.28,716.084 1768.84,685.805 1769.4,717.099 1769.96,734.936 1770.52,749.648 1771.08,731.568 1771.64,744.311 1772.2,774.965 1772.76,771.703 1773.32,735.773 1773.88,735.362 1774.43,732.837 1774.99,730.023 1775.55,726.825 1776.11,741.118 1776.67,721.632 1777.23,704.645 1777.79,685.122 1778.35,669.052 1778.91,649.914 1779.47,652.112 1780.03,653.219 1780.59,656.992 1781.15,674.636 1781.71,689.058 1782.26,673.678 1782.82,673.493 1783.38,675.53 1783.94,689.895 1784.5,674.564 1785.06,679.21 1785.62,694.138 1786.18,693.854 1786.74,676.592 1787.3,692.51 1787.86,723.648 1788.42,703.349 1788.98,700.717 1789.53,684.989 1790.09,667.913 1790.65,685.134 1791.21,684.636 1791.77,670.19 1792.33,637.937 1792.89,641.973 1793.45,643.154 1794.01,642.23 1794.57,674.745 1795.13,662.137 1795.69,680.834 1796.25,676 1796.8,611.762 1797.36,599.233 1797.92,604.986 1798.48,607.206 1799.04,640.31 1799.6,672.71 1800.16,706.263 1800.72,705.673 1801.28,689.679 1801.84,688.311 1802.4,688.444 1802.96,674.642 1803.52,693.048 1804.08,678.894 1804.63,666.63 1805.19,651.478 1805.75,651.915 1806.31,653.938 1806.87,654.177 1807.43,670.238 1807.99,702.911 1808.55,702.467 1809.11,718.03 1809.67,731.584 1810.23,757.399 1810.79,755.131 1811.35,737.335 1811.9,703.41 1812.46,699.841 1813.02,649.994 1813.58,651.524 1814.14,652.101 1814.7,656.932 1815.26,688.411 1815.82,739.142 1816.38,724.297 1816.94,708.276 1817.5,722.749 1818.06,719.459 1818.62,780.189 1819.18,759.33 1819.73,735.848 1820.29,746.748 1820.85,759.316 1821.41,769.739 1821.97,748.844 1822.53,732.645 1823.09,699.123 1823.65,696.561 1824.21,694.817 1824.77,677.555 1825.33,675.559 1825.89,672.945 1826.45,651.669 1827,651.56 1827.56,637.055 1828.12,623.35 1828.68,640.386 1829.24,644.661 1829.8,661.534 1830.36,662.003 1830.92,681.062 1831.48,664.336 1832.04,665.339 1832.6,668.686 1833.16,652.707 1833.72,669.385 1834.27,673.291 1834.83,687.735 1835.39,687.823 1835.95,687.445 1836.51,653.847 1837.07,684.692 1837.63,653.325 1838.19,657.829 \"/>\n<path clip-path=\"url(#clip813)\" d=\"M720.247 691.27 L720.806 691.27 L721.365 691.27 L721.924 691.27 L722.484 691.27 L723.043 691.27 L723.602 691.27 L724.161 691.27 L724.721 691.27 L725.28 691.27 L725.839 691.27 L726.398 691.27 L726.958 691.27 L727.517 691.27 L728.076 691.27 L728.635 691.27 L729.195 691.27 L729.754 691.27 L730.313 691.27 L730.872 691.27 L731.432 691.27 L731.991 691.27 L732.55 691.27 L733.109 691.27 L733.669 691.27 L734.228 691.27 L734.787 691.27 L735.346 691.27 L735.906 691.27 L736.465 691.27 L737.024 691.27 L737.583 691.27 L738.143 691.27 L738.702 691.27 L739.261 691.27 L739.82 691.27 L740.38 691.27 L740.939 691.27 L741.498 691.27 L742.057 691.27 L742.617 691.27 L743.176 691.27 L743.735 691.27 L744.294 691.27 L744.854 691.27 L745.413 691.27 L745.972 691.27 L746.531 691.27 L747.091 691.27 L747.65 691.27 L748.209 691.27 L748.768 691.27 L749.328 691.27 L749.887 691.27 L750.446 691.27 L751.005 691.27 L751.565 691.27 L752.124 691.27 L752.683 691.27 L753.242 691.27 L753.802 691.27 L754.361 691.27 L754.92 691.27 L755.479 691.27 L756.039 691.27 L756.598 691.27 L757.157 691.27 L757.716 691.27 L758.276 691.27 L758.835 691.27 L759.394 691.27 L759.953 691.27 L760.513 691.27 L761.072 691.27 L761.631 691.27 L762.19 691.27 L762.75 691.27 L763.309 691.27 L763.868 691.27 L764.427 691.27 L764.987 691.27 L765.546 691.27 L766.105 691.27 L766.664 691.27 L767.224 691.27 L767.783 691.27 L768.342 691.27 L768.901 691.27 L769.461 691.27 L770.02 691.27 L770.579 691.27 L771.138 691.27 L771.698 691.27 L772.257 691.27 L772.816 691.27 L773.375 691.27 L773.935 691.27 L774.494 691.27 L775.053 691.27 L775.612 691.27 L776.172 691.27 L776.731 691.27 L777.29 691.27 L777.849 691.27 L778.409 691.27 L778.968 691.27 L779.527 691.27 L780.086 691.27 L780.646 691.27 L781.205 691.27 L781.764 691.27 L782.323 691.27 L782.883 691.27 L783.442 691.27 L784.001 691.27 L784.56 691.27 L785.12 691.27 L785.679 691.27 L786.238 691.27 L786.797 691.27 L787.357 691.27 L787.916 691.27 L788.475 691.27 L789.034 691.27 L789.594 691.27 L790.153 691.27 L790.712 691.27 L791.271 691.27 L791.831 691.27 L792.39 691.27 L792.949 691.27 L793.508 691.27 L794.068 691.27 L794.627 691.27 L795.186 691.27 L795.745 691.27 L796.305 691.27 L796.864 691.27 L797.423 691.27 L797.982 691.27 L798.542 691.27 L799.101 691.27 L799.66 691.27 L800.219 691.27 L800.779 691.27 L801.338 691.27 L801.897 691.27 L802.456 691.27 L803.016 691.27 L803.575 691.27 L804.134 691.27 L804.693 691.27 L805.253 691.27 L805.812 691.27 L806.371 691.27 L806.931 691.27 L807.49 691.27 L808.049 691.27 L808.608 691.27 L809.168 691.27 L809.727 691.27 L810.286 691.27 L810.845 691.27 L811.405 691.27 L811.964 691.27 L812.523 691.27 L813.082 691.27 L813.642 691.27 L814.201 691.27 L814.76 691.27 L815.319 691.27 L815.879 691.27 L816.438 691.27 L816.997 691.27 L817.556 691.27 L818.116 691.27 L818.675 691.27 L819.234 691.27 L819.793 691.27 L820.353 691.27 L820.912 691.27 L821.471 691.27 L822.03 691.27 L822.59 691.27 L823.149 691.27 L823.708 691.27 L824.267 691.27 L824.827 691.27 L825.386 691.27 L825.945 691.27 L826.504 691.27 L827.064 691.27 L827.623 691.27 L828.182 691.27 L828.741 691.27 L829.301 691.27 L829.86 691.27 L830.419 691.27 L830.978 691.27 L831.538 691.27 L832.097 691.27 L832.656 691.27 L833.215 691.27 L833.775 691.27 L834.334 691.27 L834.893 691.27 L835.452 691.27 L836.012 691.27 L836.571 691.27 L837.13 691.27 L837.689 691.27 L838.249 691.27 L838.808 691.27 L839.367 691.27 L839.926 691.27 L840.486 691.27 L841.045 691.27 L841.604 691.27 L842.163 691.27 L842.723 691.27 L843.282 691.27 L843.841 691.27 L844.4 691.27 L844.96 691.27 L845.519 691.27 L846.078 691.27 L846.637 691.27 L847.197 691.27 L847.756 691.27 L848.315 691.27 L848.874 691.27 L849.434 691.27 L849.993 691.27 L850.552 691.27 L851.111 691.27 L851.671 691.27 L852.23 691.27 L852.789 691.27 L853.348 691.27 L853.908 691.27 L854.467 691.27 L855.026 691.27 L855.585 691.27 L856.145 691.27 L856.704 691.27 L857.263 691.27 L857.822 691.27 L858.382 691.27 L858.941 691.27 L859.5 691.27 L860.059 691.27 L860.619 691.27 L861.178 691.27 L861.737 691.27 L862.296 691.27 L862.856 691.27 L863.415 691.27 L863.974 691.27 L864.533 691.27 L865.093 691.27 L865.652 691.27 L866.211 691.27 L866.77 691.27 L867.33 691.27 L867.889 691.27 L868.448 691.27 L869.007 691.27 L869.567 691.27 L870.126 691.27 L870.685 691.27 L871.244 691.27 L871.804 691.27 L872.363 691.27 L872.922 691.27 L873.481 691.27 L874.041 691.27 L874.6 691.27 L875.159 691.27 L875.718 691.27 L876.278 691.27 L876.837 691.27 L877.396 691.27 L877.955 691.27 L878.515 691.27 L879.074 691.27 L879.633 691.27 L880.192 691.27 L880.752 691.27 L881.311 691.27 L881.87 691.27 L882.429 691.27 L882.989 691.27 L883.548 691.27 L884.107 691.27 L884.666 691.27 L885.226 691.27 L885.785 691.27 L886.344 691.27 L886.903 691.27 L887.463 691.27 L888.022 691.27 L888.581 691.27 L889.14 691.27 L889.7 691.27 L890.259 691.27 L890.818 691.27 L891.377 691.27 L891.937 691.27 L892.496 691.27 L893.055 691.27 L893.614 691.27 L894.174 691.27 L894.733 691.27 L895.292 691.27 L895.851 691.27 L896.411 691.27 L896.97 691.27 L897.529 691.27 L898.088 691.27 L898.648 691.27 L899.207 691.27 L899.766 691.27 L900.325 691.27 L900.885 691.27 L901.444 691.27 L902.003 691.27 L902.562 691.27 L903.122 691.27 L903.681 691.27 L904.24 691.27 L904.799 691.27 L905.359 691.27 L905.918 691.27 L906.477 691.27 L907.036 691.27 L907.596 691.27 L908.155 691.27 L908.714 691.27 L909.273 691.27 L909.833 691.27 L910.392 691.27 L910.951 691.27 L911.51 691.27 L912.07 691.27 L912.629 691.27 L913.188 691.27 L913.747 691.27 L914.307 691.27 L914.866 691.27 L915.425 691.27 L915.984 691.27 L916.544 691.27 L917.103 691.27 L917.662 691.27 L918.221 691.27 L918.781 691.27 L919.34 691.27 L919.899 691.27 L920.458 691.27 L921.018 691.27 L921.577 691.27 L922.136 691.27 L922.695 691.27 L923.255 691.27 L923.814 691.27 L924.373 691.27 L924.932 691.27 L925.492 691.27 L926.051 691.27 L926.61 691.27 L927.169 691.27 L927.729 691.27 L928.288 691.27 L928.847 691.27 L929.406 691.27 L929.966 691.27 L930.525 691.27 L931.084 691.27 L931.644 691.27 L932.203 691.27 L932.762 691.27 L933.321 691.27 L933.881 691.27 L934.44 691.27 L934.999 691.27 L935.558 691.27 L936.118 691.27 L936.677 691.27 L937.236 691.27 L937.795 691.27 L938.355 691.27 L938.914 691.27 L939.473 691.27 L940.032 691.27 L940.592 691.27 L941.151 691.27 L941.71 691.27 L942.269 691.27 L942.829 691.27 L943.388 691.27 L943.947 691.27 L944.506 691.27 L945.066 691.27 L945.625 691.27 L946.184 691.27 L946.743 691.27 L947.303 691.27 L947.862 691.27 L948.421 691.27 L948.98 691.27 L949.54 691.27 L950.099 691.27 L950.658 691.27 L951.217 691.27 L951.777 691.27 L952.336 691.27 L952.895 691.27 L953.454 691.27 L954.014 691.27 L954.573 691.27 L955.132 691.27 L955.691 691.27 L956.251 691.27 L956.81 691.27 L957.369 691.27 L957.928 691.27 L958.488 691.27 L959.047 691.27 L959.606 691.27 L960.165 691.27 L960.725 691.27 L961.284 691.27 L961.843 691.27 L962.402 691.27 L962.962 691.27 L963.521 691.27 L964.08 691.27 L964.639 691.27 L965.199 691.27 L965.758 691.27 L966.317 691.27 L966.876 691.27 L967.436 691.27 L967.995 691.27 L968.554 691.27 L969.113 691.27 L969.673 691.27 L970.232 691.27 L970.791 691.27 L971.35 691.27 L971.91 691.27 L972.469 691.27 L973.028 691.27 L973.587 691.27 L974.147 691.27 L974.706 691.27 L975.265 691.27 L975.824 691.27 L976.384 691.27 L976.943 691.27 L977.502 691.27 L978.061 691.27 L978.621 691.27 L979.18 691.27 L979.739 691.27 L980.298 691.27 L980.858 691.27 L981.417 691.27 L981.976 691.27 L982.535 691.27 L983.095 691.27 L983.654 691.27 L984.213 691.27 L984.772 691.27 L985.332 691.27 L985.891 691.27 L986.45 691.27 L987.009 691.27 L987.569 691.27 L988.128 691.27 L988.687 691.27 L989.246 691.27 L989.806 691.27 L990.365 691.27 L990.924 691.27 L991.483 691.27 L992.043 691.27 L992.602 691.27 L993.161 691.27 L993.72 691.27 L994.28 691.27 L994.839 691.27 L995.398 691.27 L995.957 691.27 L996.517 691.27 L997.076 691.27 L997.635 691.27 L998.194 691.27 L998.754 691.27 L999.313 691.27 L999.872 691.27 L1000.43 691.27 L1000.99 691.27 L1001.55 691.27 L1002.11 691.27 L1002.67 691.27 L1003.23 691.27 L1003.79 691.27 L1004.35 691.27 L1004.91 691.27 L1005.46 691.27 L1006.02 691.27 L1006.58 691.27 L1007.14 691.27 L1007.7 691.27 L1008.26 691.27 L1008.82 691.27 L1009.38 691.27 L1009.94 691.27 L1010.5 691.27 L1011.06 691.27 L1011.62 691.27 L1012.18 691.27 L1012.73 691.27 L1013.29 691.27 L1013.85 691.27 L1014.41 691.27 L1014.97 691.27 L1015.53 691.27 L1016.09 691.27 L1016.65 691.27 L1017.21 691.27 L1017.77 691.27 L1018.33 691.27 L1018.89 691.27 L1019.45 691.27 L1020.01 691.27 L1020.56 691.27 L1021.12 691.27 L1021.68 691.27 L1022.24 691.27 L1022.8 691.27 L1023.36 691.27 L1023.92 691.27 L1024.48 691.27 L1025.04 691.27 L1025.6 691.27 L1026.16 691.27 L1026.72 691.27 L1027.28 691.27 L1027.83 691.27 L1028.39 691.27 L1028.95 691.27 L1029.51 691.27 L1030.07 691.27 L1030.63 691.27 L1031.19 691.27 L1031.75 691.27 L1032.31 691.27 L1032.87 691.27 L1033.43 691.27 L1033.99 691.27 L1034.55 691.27 L1035.1 691.27 L1035.66 691.27 L1036.22 691.27 L1036.78 691.27 L1037.34 691.27 L1037.9 691.27 L1038.46 691.27 L1039.02 691.27 L1039.58 691.27 L1040.14 691.27 L1040.7 691.27 L1041.26 691.27 L1041.82 691.27 L1042.38 691.27 L1042.93 691.27 L1043.49 691.27 L1044.05 691.27 L1044.61 691.27 L1045.17 691.27 L1045.73 691.27 L1046.29 691.27 L1046.85 691.27 L1047.41 691.27 L1047.97 691.27 L1048.53 691.27 L1049.09 691.27 L1049.65 691.27 L1050.2 691.27 L1050.76 691.27 L1051.32 691.27 L1051.88 691.27 L1052.44 691.27 L1053 691.27 L1053.56 691.27 L1054.12 691.27 L1054.68 691.27 L1055.24 691.27 L1055.8 691.27 L1056.36 691.27 L1056.92 691.27 L1057.48 691.27 L1058.03 691.27 L1058.59 691.27 L1059.15 691.27 L1059.71 691.27 L1060.27 691.27 L1060.83 691.27 L1061.39 691.27 L1061.95 691.27 L1062.51 691.27 L1063.07 691.27 L1063.63 691.27 L1064.19 691.27 L1064.75 691.27 L1065.3 691.27 L1065.86 691.27 L1066.42 691.27 L1066.98 691.27 L1067.54 691.27 L1068.1 691.27 L1068.66 691.27 L1069.22 691.27 L1069.78 691.27 L1070.34 691.27 L1070.9 691.27 L1071.46 691.27 L1072.02 691.27 L1072.57 691.27 L1073.13 691.27 L1073.69 691.27 L1074.25 691.27 L1074.81 691.27 L1075.37 691.27 L1075.93 691.27 L1076.49 691.27 L1077.05 691.27 L1077.61 691.27 L1078.17 691.27 L1078.73 691.27 L1079.29 691.27 L1079.85 691.27 L1080.4 691.27 L1080.96 691.27 L1081.52 691.27 L1082.08 691.27 L1082.64 691.27 L1083.2 691.27 L1083.76 691.27 L1084.32 691.27 L1084.88 691.27 L1085.44 691.27 L1086 691.27 L1086.56 691.27 L1087.12 691.27 L1087.67 691.27 L1088.23 691.27 L1088.79 691.27 L1089.35 691.27 L1089.91 691.27 L1090.47 691.27 L1091.03 691.27 L1091.59 691.27 L1092.15 691.27 L1092.71 691.27 L1093.27 691.27 L1093.83 691.27 L1094.39 691.27 L1094.94 691.27 L1095.5 691.27 L1096.06 691.27 L1096.62 691.27 L1097.18 691.27 L1097.74 691.27 L1098.3 691.27 L1098.86 691.27 L1099.42 691.27 L1099.98 691.27 L1100.54 691.27 L1101.1 691.27 L1101.66 691.27 L1102.22 691.27 L1102.77 691.27 L1103.33 691.27 L1103.89 691.27 L1104.45 691.27 L1105.01 691.27 L1105.57 691.27 L1106.13 691.27 L1106.69 691.27 L1107.25 691.27 L1107.81 691.27 L1108.37 691.27 L1108.93 691.27 L1109.49 691.27 L1110.04 691.27 L1110.6 691.27 L1111.16 691.27 L1111.72 691.27 L1112.28 691.27 L1112.84 691.27 L1113.4 691.27 L1113.96 691.27 L1114.52 691.27 L1115.08 691.27 L1115.64 691.27 L1116.2 691.27 L1116.76 691.27 L1117.31 691.27 L1117.87 691.27 L1118.43 691.27 L1118.99 691.27 L1119.55 691.27 L1120.11 691.27 L1120.67 691.27 L1121.23 691.27 L1121.79 691.27 L1122.35 691.27 L1122.91 691.27 L1123.47 691.27 L1124.03 691.27 L1124.59 691.27 L1125.14 691.27 L1125.7 691.27 L1126.26 691.27 L1126.82 691.27 L1127.38 691.27 L1127.94 691.27 L1128.5 691.27 L1129.06 691.27 L1129.62 691.27 L1130.18 691.27 L1130.74 691.27 L1131.3 691.27 L1131.86 691.27 L1132.41 691.27 L1132.97 691.27 L1133.53 691.27 L1134.09 691.27 L1134.65 691.27 L1135.21 691.27 L1135.77 691.27 L1136.33 691.27 L1136.89 691.27 L1137.45 691.27 L1138.01 691.27 L1138.57 691.27 L1139.13 691.27 L1139.68 691.27 L1140.24 691.27 L1140.8 691.27 L1141.36 691.27 L1141.92 691.27 L1142.48 691.27 L1143.04 691.27 L1143.6 691.27 L1144.16 691.27 L1144.72 691.27 L1145.28 691.27 L1145.84 691.27 L1146.4 691.27 L1146.96 691.27 L1147.51 691.27 L1148.07 691.27 L1148.63 691.27 L1149.19 691.27 L1149.75 691.27 L1150.31 691.27 L1150.87 691.27 L1151.43 691.27 L1151.99 691.27 L1152.55 691.27 L1153.11 691.27 L1153.67 691.27 L1154.23 691.27 L1154.78 691.27 L1155.34 691.27 L1155.9 691.27 L1156.46 691.27 L1157.02 691.27 L1157.58 691.27 L1158.14 691.27 L1158.7 691.27 L1159.26 691.27 L1159.82 691.27 L1160.38 691.27 L1160.94 691.27 L1161.5 691.27 L1162.05 691.27 L1162.61 691.27 L1163.17 691.27 L1163.73 691.27 L1164.29 691.27 L1164.85 691.27 L1165.41 691.27 L1165.97 691.27 L1166.53 691.27 L1167.09 691.27 L1167.65 691.27 L1168.21 691.27 L1168.77 691.27 L1169.33 691.27 L1169.88 691.27 L1170.44 691.27 L1171 691.27 L1171.56 691.27 L1172.12 691.27 L1172.68 691.27 L1173.24 691.27 L1173.8 691.27 L1174.36 691.27 L1174.92 691.27 L1175.48 691.27 L1176.04 691.27 L1176.6 691.27 L1177.15 691.27 L1177.71 691.27 L1178.27 691.27 L1178.83 691.27 L1179.39 691.27 L1179.95 691.27 L1180.51 691.27 L1181.07 691.27 L1181.63 691.27 L1182.19 691.27 L1182.75 691.27 L1183.31 691.27 L1183.87 691.27 L1184.43 691.27 L1184.98 691.27 L1185.54 691.27 L1186.1 691.27 L1186.66 691.27 L1187.22 691.27 L1187.78 691.27 L1188.34 691.27 L1188.9 691.27 L1189.46 691.27 L1190.02 691.27 L1190.58 691.27 L1191.14 691.27 L1191.7 691.27 L1192.25 691.27 L1192.81 691.27 L1193.37 691.27 L1193.93 691.27 L1194.49 691.27 L1195.05 691.27 L1195.61 691.27 L1196.17 691.27 L1196.73 691.27 L1197.29 691.27 L1197.85 691.27 L1198.41 691.27 L1198.97 691.27 L1199.52 691.27 L1200.08 691.27 L1200.64 691.27 L1201.2 691.27 L1201.76 691.27 L1202.32 691.27 L1202.88 691.27 L1203.44 691.27 L1204 691.27 L1204.56 691.27 L1205.12 691.27 L1205.68 691.27 L1206.24 691.27 L1206.8 691.27 L1207.35 691.27 L1207.91 691.27 L1208.47 691.27 L1209.03 691.27 L1209.59 691.27 L1210.15 691.27 L1210.71 691.27 L1211.27 691.27 L1211.83 691.27 L1212.39 691.27 L1212.95 691.27 L1213.51 691.27 L1214.07 691.27 L1214.62 691.27 L1215.18 691.27 L1215.74 691.27 L1216.3 691.27 L1216.86 691.27 L1217.42 691.27 L1217.98 691.27 L1218.54 691.27 L1219.1 691.27 L1219.66 691.27 L1220.22 691.27 L1220.78 691.27 L1221.34 691.27 L1221.89 691.27 L1222.45 691.27 L1223.01 691.27 L1223.57 691.27 L1224.13 691.27 L1224.69 691.27 L1225.25 691.27 L1225.81 691.27 L1226.37 691.27 L1226.93 691.27 L1227.49 691.27 L1228.05 691.27 L1228.61 691.27 L1229.17 691.27 L1229.72 691.27 L1230.28 691.27 L1230.84 691.27 L1231.4 691.27 L1231.96 691.27 L1232.52 691.27 L1233.08 691.27 L1233.64 691.27 L1234.2 691.27 L1234.76 691.27 L1235.32 691.27 L1235.88 691.27 L1236.44 691.27 L1236.99 691.27 L1237.55 691.27 L1238.11 691.27 L1238.67 691.27 L1239.23 691.27 L1239.79 691.27 L1240.35 691.27 L1240.91 691.27 L1241.47 691.27 L1242.03 691.27 L1242.59 691.27 L1243.15 691.27 L1243.71 691.27 L1244.26 691.27 L1244.82 691.27 L1245.38 691.27 L1245.94 691.27 L1246.5 691.27 L1247.06 691.27 L1247.62 691.27 L1248.18 691.27 L1248.74 691.27 L1249.3 691.27 L1249.86 691.27 L1250.42 691.27 L1250.98 691.27 L1251.54 691.27 L1252.09 691.27 L1252.65 691.27 L1253.21 691.27 L1253.77 691.27 L1254.33 691.27 L1254.89 691.27 L1255.45 691.27 L1256.01 691.27 L1256.57 691.27 L1257.13 691.27 L1257.69 691.27 L1258.25 691.27 L1258.81 691.27 L1259.36 691.27 L1259.92 691.27 L1260.48 691.27 L1261.04 691.27 L1261.6 691.27 L1262.16 691.27 L1262.72 691.27 L1263.28 691.27 L1263.84 691.27 L1264.4 691.27 L1264.96 691.27 L1265.52 691.27 L1266.08 691.27 L1266.63 691.27 L1267.19 691.27 L1267.75 691.27 L1268.31 691.27 L1268.87 691.27 L1269.43 691.27 L1269.99 691.27 L1270.55 691.27 L1271.11 691.27 L1271.67 691.27 L1272.23 691.27 L1272.79 691.27 L1273.35 691.27 L1273.91 691.27 L1274.46 691.27 L1275.02 691.27 L1275.58 691.27 L1276.14 691.27 L1276.7 691.27 L1277.26 691.27 L1277.82 691.27 L1278.38 691.27 L1278.94 691.27 L1279.5 691.27 L1280.06 691.27 L1280.62 691.27 L1281.18 691.27 L1281.73 691.27 L1282.29 691.27 L1282.85 691.27 L1283.41 691.27 L1283.97 691.27 L1284.53 691.27 L1285.09 691.27 L1285.65 691.27 L1286.21 691.27 L1286.77 691.27 L1287.33 691.27 L1287.89 691.27 L1288.45 691.27 L1289 691.27 L1289.56 691.27 L1290.12 691.27 L1290.68 691.27 L1291.24 691.27 L1291.8 691.27 L1292.36 691.27 L1292.92 691.27 L1293.48 691.27 L1294.04 691.27 L1294.6 691.27 L1295.16 691.27 L1295.72 691.27 L1296.28 691.27 L1296.83 691.27 L1297.39 691.27 L1297.95 691.27 L1298.51 691.27 L1299.07 691.27 L1299.63 691.27 L1300.19 691.27 L1300.75 691.27 L1301.31 691.27 L1301.87 691.27 L1302.43 691.27 L1302.99 691.27 L1303.55 691.27 L1304.1 691.27 L1304.66 691.27 L1305.22 691.27 L1305.78 691.27 L1306.34 691.27 L1306.9 691.27 L1307.46 691.27 L1308.02 691.27 L1308.58 691.27 L1309.14 691.27 L1309.7 691.27 L1310.26 691.27 L1310.82 691.27 L1311.38 691.27 L1311.93 691.27 L1312.49 691.27 L1313.05 691.27 L1313.61 691.27 L1314.17 691.27 L1314.73 691.27 L1315.29 691.27 L1315.85 691.27 L1316.41 691.27 L1316.97 691.27 L1317.53 691.27 L1318.09 691.27 L1318.65 691.27 L1319.2 691.27 L1319.76 691.27 L1320.32 691.27 L1320.88 691.27 L1321.44 691.27 L1322 691.27 L1322.56 691.27 L1323.12 691.27 L1323.68 691.27 L1324.24 691.27 L1324.8 691.27 L1325.36 691.27 L1325.92 691.27 L1326.47 691.27 L1327.03 691.27 L1327.59 691.27 L1328.15 691.27 L1328.71 691.27 L1329.27 691.27 L1329.83 691.27 L1330.39 691.27 L1330.95 691.27 L1331.51 691.27 L1332.07 691.27 L1332.63 691.27 L1333.19 691.27 L1333.75 691.27 L1334.3 691.27 L1334.86 691.27 L1335.42 691.27 L1335.98 691.27 L1336.54 691.27 L1337.1 691.27 L1337.66 691.27 L1338.22 691.27 L1338.78 691.27 L1339.34 691.27 L1339.9 691.27 L1340.46 691.27 L1341.02 691.27 L1341.57 691.27 L1342.13 691.27 L1342.69 691.27 L1343.25 691.27 L1343.81 691.27 L1344.37 691.27 L1344.93 691.27 L1345.49 691.27 L1346.05 691.27 L1346.61 691.27 L1347.17 691.27 L1347.73 691.27 L1348.29 691.27 L1348.84 691.27 L1349.4 691.27 L1349.96 691.27 L1350.52 691.27 L1351.08 691.27 L1351.64 691.27 L1352.2 691.27 L1352.76 691.27 L1353.32 691.27 L1353.88 691.27 L1354.44 691.27 L1355 691.27 L1355.56 691.27 L1356.12 691.27 L1356.67 691.27 L1357.23 691.27 L1357.79 691.27 L1358.35 691.27 L1358.91 691.27 L1359.47 691.27 L1360.03 691.27 L1360.59 691.27 L1361.15 691.27 L1361.71 691.27 L1362.27 691.27 L1362.83 691.27 L1363.39 691.27 L1363.94 691.27 L1364.5 691.27 L1365.06 691.27 L1365.62 691.27 L1366.18 691.27 L1366.74 691.27 L1367.3 691.27 L1367.86 691.27 L1368.42 691.27 L1368.98 691.27 L1369.54 691.27 L1370.1 691.27 L1370.66 691.27 L1371.21 691.27 L1371.77 691.27 L1372.33 691.27 L1372.89 691.27 L1373.45 691.27 L1374.01 691.27 L1374.57 691.27 L1375.13 691.27 L1375.69 691.27 L1376.25 691.27 L1376.81 691.27 L1377.37 691.27 L1377.93 691.27 L1378.49 691.27 L1379.04 691.27 L1379.6 691.27 L1380.16 691.27 L1380.72 691.27 L1381.28 691.27 L1381.84 691.27 L1382.4 691.27 L1382.96 691.27 L1383.52 691.27 L1384.08 691.27 L1384.64 691.27 L1385.2 691.27 L1385.76 691.27 L1386.31 691.27 L1386.87 691.27 L1387.43 691.27 L1387.99 691.27 L1388.55 691.27 L1389.11 691.27 L1389.67 691.27 L1390.23 691.27 L1390.79 691.27 L1391.35 691.27 L1391.91 691.27 L1392.47 691.27 L1393.03 691.27 L1393.58 691.27 L1394.14 691.27 L1394.7 691.27 L1395.26 691.27 L1395.82 691.27 L1396.38 691.27 L1396.94 691.27 L1397.5 691.27 L1398.06 691.27 L1398.62 691.27 L1399.18 691.27 L1399.74 691.27 L1400.3 691.27 L1400.86 691.27 L1401.41 691.27 L1401.97 691.27 L1402.53 691.27 L1403.09 691.27 L1403.65 691.27 L1404.21 691.27 L1404.77 691.27 L1405.33 691.27 L1405.89 691.27 L1406.45 691.27 L1407.01 691.27 L1407.57 691.27 L1408.13 691.27 L1408.68 691.27 L1409.24 691.27 L1409.8 691.27 L1410.36 691.27 L1410.92 691.27 L1411.48 691.27 L1412.04 691.27 L1412.6 691.27 L1413.16 691.27 L1413.72 691.27 L1414.28 691.27 L1414.84 691.27 L1415.4 691.27 L1415.95 691.27 L1416.51 691.27 L1417.07 691.27 L1417.63 691.27 L1418.19 691.27 L1418.75 691.27 L1419.31 691.27 L1419.87 691.27 L1420.43 691.27 L1420.99 691.27 L1421.55 691.27 L1422.11 691.27 L1422.67 691.27 L1423.23 691.27 L1423.78 691.27 L1424.34 691.27 L1424.9 691.27 L1425.46 691.27 L1426.02 691.27 L1426.58 691.27 L1427.14 691.27 L1427.7 691.27 L1428.26 691.27 L1428.82 691.27 L1429.38 691.27 L1429.94 691.27 L1430.5 691.27 L1431.05 691.27 L1431.61 691.27 L1432.17 691.27 L1432.73 691.27 L1433.29 691.27 L1433.85 691.27 L1434.41 691.27 L1434.97 691.27 L1435.53 691.27 L1436.09 691.27 L1436.65 691.27 L1437.21 691.27 L1437.77 691.27 L1438.33 691.27 L1438.88 691.27 L1439.44 691.27 L1440 691.27 L1440.56 691.27 L1441.12 691.27 L1441.68 691.27 L1442.24 691.27 L1442.8 691.27 L1443.36 691.27 L1443.92 691.27 L1444.48 691.27 L1445.04 691.27 L1445.6 691.27 L1446.15 691.27 L1446.71 691.27 L1447.27 691.27 L1447.83 691.27 L1448.39 691.27 L1448.95 691.27 L1449.51 691.27 L1450.07 691.27 L1450.63 691.27 L1451.19 691.27 L1451.75 691.27 L1452.31 691.27 L1452.87 691.27 L1453.42 691.27 L1453.98 691.27 L1454.54 691.27 L1455.1 691.27 L1455.66 691.27 L1456.22 691.27 L1456.78 691.27 L1457.34 691.27 L1457.9 691.27 L1458.46 691.27 L1459.02 691.27 L1459.58 691.27 L1460.14 691.27 L1460.7 691.27 L1461.25 691.27 L1461.81 691.27 L1462.37 691.27 L1462.93 691.27 L1463.49 691.27 L1464.05 691.27 L1464.61 691.27 L1465.17 691.27 L1465.73 691.27 L1466.29 691.27 L1466.85 691.27 L1467.41 691.27 L1467.97 691.27 L1468.52 691.27 L1469.08 691.27 L1469.64 691.27 L1470.2 691.27 L1470.76 691.27 L1471.32 691.27 L1471.88 691.27 L1472.44 691.27 L1473 691.27 L1473.56 691.27 L1474.12 691.27 L1474.68 691.27 L1475.24 691.27 L1475.79 691.27 L1476.35 691.27 L1476.91 691.27 L1477.47 691.27 L1478.03 691.27 L1478.59 691.27 L1479.15 691.27 L1479.71 691.27 L1480.27 691.27 L1480.83 691.27 L1481.39 691.27 L1481.95 691.27 L1482.51 691.27 L1483.07 691.27 L1483.62 691.27 L1484.18 691.27 L1484.74 691.27 L1485.3 691.27 L1485.86 691.27 L1486.42 691.27 L1486.98 691.27 L1487.54 691.27 L1488.1 691.27 L1488.66 691.27 L1489.22 691.27 L1489.78 691.27 L1490.34 691.27 L1490.89 691.27 L1491.45 691.27 L1492.01 691.27 L1492.57 691.27 L1493.13 691.27 L1493.69 691.27 L1494.25 691.27 L1494.81 691.27 L1495.37 691.27 L1495.93 691.27 L1496.49 691.27 L1497.05 691.27 L1497.61 691.27 L1498.16 691.27 L1498.72 691.27 L1499.28 691.27 L1499.84 691.27 L1500.4 691.27 L1500.96 691.27 L1501.52 691.27 L1502.08 691.27 L1502.64 691.27 L1503.2 691.27 L1503.76 691.27 L1504.32 691.27 L1504.88 691.27 L1505.44 691.27 L1505.99 691.27 L1506.55 691.27 L1507.11 691.27 L1507.67 691.27 L1508.23 691.27 L1508.79 691.27 L1509.35 691.27 L1509.91 691.27 L1510.47 691.27 L1511.03 691.27 L1511.59 691.27 L1512.15 691.27 L1512.71 691.27 L1513.26 691.27 L1513.82 691.27 L1514.38 691.27 L1514.94 691.27 L1515.5 691.27 L1516.06 691.27 L1516.62 691.27 L1517.18 691.27 L1517.74 691.27 L1518.3 691.27 L1518.86 691.27 L1519.42 691.27 L1519.98 691.27 L1520.53 691.27 L1521.09 691.27 L1521.65 691.27 L1522.21 691.27 L1522.77 691.27 L1523.33 691.27 L1523.89 691.27 L1524.45 691.27 L1525.01 691.27 L1525.57 691.27 L1526.13 691.27 L1526.69 691.27 L1527.25 691.27 L1527.81 691.27 L1528.36 691.27 L1528.92 691.27 L1529.48 691.27 L1530.04 691.27 L1530.6 691.27 L1531.16 691.27 L1531.72 691.27 L1532.28 691.27 L1532.84 691.27 L1533.4 691.27 L1533.96 691.27 L1534.52 691.27 L1535.08 691.27 L1535.63 691.27 L1536.19 691.27 L1536.75 691.27 L1537.31 691.27 L1537.87 691.27 L1538.43 691.27 L1538.99 691.27 L1539.55 691.27 L1540.11 691.27 L1540.67 691.27 L1541.23 691.27 L1541.79 691.27 L1542.35 691.27 L1542.9 691.27 L1543.46 691.27 L1544.02 691.27 L1544.58 691.27 L1545.14 691.27 L1545.7 691.27 L1546.26 691.27 L1546.82 691.27 L1547.38 691.27 L1547.94 691.27 L1548.5 691.27 L1549.06 691.27 L1549.62 691.27 L1550.18 691.27 L1550.73 691.27 L1551.29 691.27 L1551.85 691.27 L1552.41 691.27 L1552.97 691.27 L1553.53 691.27 L1554.09 691.27 L1554.65 691.27 L1555.21 691.27 L1555.77 691.27 L1556.33 691.27 L1556.89 691.27 L1557.45 691.27 L1558 691.27 L1558.56 691.27 L1559.12 691.27 L1559.68 691.27 L1560.24 691.27 L1560.8 691.27 L1561.36 691.27 L1561.92 691.27 L1562.48 691.27 L1563.04 691.27 L1563.6 691.27 L1564.16 691.27 L1564.72 691.27 L1565.28 691.27 L1565.83 691.27 L1566.39 691.27 L1566.95 691.27 L1567.51 691.27 L1568.07 691.27 L1568.63 691.27 L1569.19 691.27 L1569.75 691.27 L1570.31 691.27 L1570.87 691.27 L1571.43 691.27 L1571.99 691.27 L1572.55 691.27 L1573.1 691.27 L1573.66 691.27 L1574.22 691.27 L1574.78 691.27 L1575.34 691.27 L1575.9 691.27 L1576.46 691.27 L1577.02 691.27 L1577.58 691.27 L1578.14 691.27 L1578.7 691.27 L1579.26 691.27 L1579.82 691.27 L1580.37 691.27 L1580.93 691.27 L1581.49 691.27 L1582.05 691.27 L1582.61 691.27 L1583.17 691.27 L1583.73 691.27 L1584.29 691.27 L1584.85 691.27 L1585.41 691.27 L1585.97 691.27 L1586.53 691.27 L1587.09 691.27 L1587.65 691.27 L1588.2 691.27 L1588.76 691.27 L1589.32 691.27 L1589.88 691.27 L1590.44 691.27 L1591 691.27 L1591.56 691.27 L1592.12 691.27 L1592.68 691.27 L1593.24 691.27 L1593.8 691.27 L1594.36 691.27 L1594.92 691.27 L1595.47 691.27 L1596.03 691.27 L1596.59 691.27 L1597.15 691.27 L1597.71 691.27 L1598.27 691.27 L1598.83 691.27 L1599.39 691.27 L1599.95 691.27 L1600.51 691.27 L1601.07 691.27 L1601.63 691.27 L1602.19 691.27 L1602.74 691.27 L1603.3 691.27 L1603.86 691.27 L1604.42 691.27 L1604.98 691.27 L1605.54 691.27 L1606.1 691.27 L1606.66 691.27 L1607.22 691.27 L1607.78 691.27 L1608.34 691.27 L1608.9 691.27 L1609.46 691.27 L1610.02 691.27 L1610.57 691.27 L1611.13 691.27 L1611.69 691.27 L1612.25 691.27 L1612.81 691.27 L1613.37 691.27 L1613.93 691.27 L1614.49 691.27 L1615.05 691.27 L1615.61 691.27 L1616.17 691.27 L1616.73 691.27 L1617.29 691.27 L1617.84 691.27 L1618.4 691.27 L1618.96 691.27 L1619.52 691.27 L1620.08 691.27 L1620.64 691.27 L1621.2 691.27 L1621.76 691.27 L1622.32 691.27 L1622.88 691.27 L1623.44 691.27 L1624 691.27 L1624.56 691.27 L1625.11 691.27 L1625.67 691.27 L1626.23 691.27 L1626.79 691.27 L1627.35 691.27 L1627.91 691.27 L1628.47 691.27 L1629.03 691.27 L1629.59 691.27 L1630.15 691.27 L1630.71 691.27 L1631.27 691.27 L1631.83 691.27 L1632.39 691.27 L1632.94 691.27 L1633.5 691.27 L1634.06 691.27 L1634.62 691.27 L1635.18 691.27 L1635.74 691.27 L1636.3 691.27 L1636.86 691.27 L1637.42 691.27 L1637.98 691.27 L1638.54 691.27 L1639.1 691.27 L1639.66 691.27 L1640.21 691.27 L1640.77 691.27 L1641.33 691.27 L1641.89 691.27 L1642.45 691.27 L1643.01 691.27 L1643.57 691.27 L1644.13 691.27 L1644.69 691.27 L1645.25 691.27 L1645.81 691.27 L1646.37 691.27 L1646.93 691.27 L1647.48 691.27 L1648.04 691.27 L1648.6 691.27 L1649.16 691.27 L1649.72 691.27 L1650.28 691.27 L1650.84 691.27 L1651.4 691.27 L1651.96 691.27 L1652.52 691.27 L1653.08 691.27 L1653.64 691.27 L1654.2 691.27 L1654.76 691.27 L1655.31 691.27 L1655.87 691.27 L1656.43 691.27 L1656.99 691.27 L1657.55 691.27 L1658.11 691.27 L1658.67 691.27 L1659.23 691.27 L1659.79 691.27 L1660.35 691.27 L1660.91 691.27 L1661.47 691.27 L1662.03 691.27 L1662.58 691.27 L1663.14 691.27 L1663.7 691.27 L1664.26 691.27 L1664.82 691.27 L1665.38 691.27 L1665.94 691.27 L1666.5 691.27 L1667.06 691.27 L1667.62 691.27 L1668.18 691.27 L1668.74 691.27 L1669.3 691.27 L1669.85 691.27 L1670.41 691.27 L1670.97 691.27 L1671.53 691.27 L1672.09 691.27 L1672.65 691.27 L1673.21 691.27 L1673.77 691.27 L1674.33 691.27 L1674.89 691.27 L1675.45 691.27 L1676.01 691.27 L1676.57 691.27 L1677.13 691.27 L1677.68 691.27 L1678.24 691.27 L1678.8 691.27 L1679.36 691.27 L1679.92 691.27 L1680.48 691.27 L1681.04 691.27 L1681.6 691.27 L1682.16 691.27 L1682.72 691.27 L1683.28 691.27 L1683.84 691.27 L1684.4 691.27 L1684.95 691.27 L1685.51 691.27 L1686.07 691.27 L1686.63 691.27 L1687.19 691.27 L1687.75 691.27 L1688.31 691.27 L1688.87 691.27 L1689.43 691.27 L1689.99 691.27 L1690.55 691.27 L1691.11 691.27 L1691.67 691.27 L1692.23 691.27 L1692.78 691.27 L1693.34 691.27 L1693.9 691.27 L1694.46 691.27 L1695.02 691.27 L1695.58 691.27 L1696.14 691.27 L1696.7 691.27 L1697.26 691.27 L1697.82 691.27 L1698.38 691.27 L1698.94 691.27 L1699.5 691.27 L1700.05 691.27 L1700.61 691.27 L1701.17 691.27 L1701.73 691.27 L1702.29 691.27 L1702.85 691.27 L1703.41 691.27 L1703.97 691.27 L1704.53 691.27 L1705.09 691.27 L1705.65 691.27 L1706.21 691.27 L1706.77 691.27 L1707.32 691.27 L1707.88 691.27 L1708.44 691.27 L1709 691.27 L1709.56 691.27 L1710.12 691.27 L1710.68 691.27 L1711.24 691.27 L1711.8 691.27 L1712.36 691.27 L1712.92 691.27 L1713.48 691.27 L1714.04 691.27 L1714.6 691.27 L1715.15 691.27 L1715.71 691.27 L1716.27 691.27 L1716.83 691.27 L1717.39 691.27 L1717.95 691.27 L1718.51 691.27 L1719.07 691.27 L1719.63 691.27 L1720.19 691.27 L1720.75 691.27 L1721.31 691.27 L1721.87 691.27 L1722.42 691.27 L1722.98 691.27 L1723.54 691.27 L1724.1 691.27 L1724.66 691.27 L1725.22 691.27 L1725.78 691.27 L1726.34 691.27 L1726.9 691.27 L1727.46 691.27 L1728.02 691.27 L1728.58 691.27 L1729.14 691.27 L1729.69 691.27 L1730.25 691.27 L1730.81 691.27 L1731.37 691.27 L1731.93 691.27 L1732.49 691.27 L1733.05 691.27 L1733.61 691.27 L1734.17 691.27 L1734.73 691.27 L1735.29 691.27 L1735.85 691.27 L1736.41 691.27 L1736.97 691.27 L1737.52 691.27 L1738.08 691.27 L1738.64 691.27 L1739.2 691.27 L1739.76 691.27 L1740.32 691.27 L1740.88 691.27 L1741.44 691.27 L1742 691.27 L1742.56 691.27 L1743.12 691.27 L1743.68 691.27 L1744.24 691.27 L1744.79 691.27 L1745.35 691.27 L1745.91 691.27 L1746.47 691.27 L1747.03 691.27 L1747.59 691.27 L1748.15 691.27 L1748.71 691.27 L1749.27 691.27 L1749.83 691.27 L1750.39 691.27 L1750.95 691.27 L1751.51 691.27 L1752.06 691.27 L1752.62 691.27 L1753.18 691.27 L1753.74 691.27 L1754.3 691.27 L1754.86 691.27 L1755.42 691.27 L1755.98 691.27 L1756.54 691.27 L1757.1 691.27 L1757.66 691.27 L1758.22 691.27 L1758.78 691.27 L1759.34 691.27 L1759.89 691.27 L1760.45 691.27 L1761.01 691.27 L1761.57 691.27 L1762.13 691.27 L1762.69 691.27 L1763.25 691.27 L1763.81 691.27 L1764.37 691.27 L1764.93 691.27 L1765.49 691.27 L1766.05 691.27 L1766.61 691.27 L1767.16 691.27 L1767.72 691.27 L1768.28 691.27 L1768.84 691.27 L1769.4 691.27 L1769.96 691.27 L1770.52 691.27 L1771.08 691.27 L1771.64 691.27 L1772.2 691.27 L1772.76 691.27 L1773.32 691.27 L1773.88 691.27 L1774.43 691.27 L1774.99 691.27 L1775.55 691.27 L1776.11 691.27 L1776.67 691.27 L1777.23 691.27 L1777.79 691.27 L1778.35 691.27 L1778.91 691.27 L1779.47 691.27 L1780.03 691.27 L1780.59 691.27 L1781.15 691.27 L1781.71 691.27 L1782.26 691.27 L1782.82 691.27 L1783.38 691.27 L1783.94 691.27 L1784.5 691.27 L1785.06 691.27 L1785.62 691.27 L1786.18 691.27 L1786.74 691.27 L1787.3 691.27 L1787.86 691.27 L1788.42 691.27 L1788.98 691.27 L1789.53 691.27 L1790.09 691.27 L1790.65 691.27 L1791.21 691.27 L1791.77 691.27 L1792.33 691.27 L1792.89 691.27 L1793.45 691.27 L1794.01 691.27 L1794.57 691.27 L1795.13 691.27 L1795.69 691.27 L1796.25 691.27 L1796.8 691.27 L1797.36 691.27 L1797.92 691.27 L1798.48 691.27 L1799.04 691.27 L1799.6 691.27 L1800.16 691.27 L1800.72 691.27 L1801.28 691.27 L1801.84 691.27 L1802.4 691.27 L1802.96 691.27 L1803.52 691.27 L1804.08 691.27 L1804.63 691.27 L1805.19 691.27 L1805.75 691.27 L1806.31 691.27 L1806.87 691.27 L1807.43 691.27 L1807.99 691.27 L1808.55 691.27 L1809.11 691.27 L1809.67 691.27 L1810.23 691.27 L1810.79 691.27 L1811.35 691.27 L1811.9 691.27 L1812.46 691.27 L1813.02 691.27 L1813.58 691.27 L1814.14 691.27 L1814.7 691.27 L1815.26 691.27 L1815.82 691.27 L1816.38 691.27 L1816.94 691.27 L1817.5 691.27 L1818.06 691.27 L1818.62 691.27 L1819.18 691.27 L1819.73 691.27 L1820.29 691.27 L1820.85 691.27 L1821.41 691.27 L1821.97 691.27 L1822.53 691.27 L1823.09 691.27 L1823.65 691.27 L1824.21 691.27 L1824.77 691.27 L1825.33 691.27 L1825.89 691.27 L1826.45 691.27 L1827 691.27 L1827.56 691.27 L1828.12 691.27 L1828.68 691.27 L1829.24 691.27 L1829.8 691.27 L1830.36 691.27 L1830.92 691.27 L1831.48 691.27 L1832.04 691.27 L1832.6 691.27 L1833.16 691.27 L1833.72 691.27 L1834.27 691.27 L1834.83 691.27 L1835.39 691.27 L1835.95 691.27 L1836.51 691.27 L1837.07 691.27 L1837.63 691.27 L1838.19 691.27 L1838.19 684.368 L1837.63 684.368 L1837.07 684.368 L1836.51 684.368 L1835.95 684.368 L1835.39 684.368 L1834.83 684.368 L1834.27 684.368 L1833.72 684.368 L1833.16 684.368 L1832.6 684.368 L1832.04 684.368 L1831.48 684.368 L1830.92 684.368 L1830.36 684.368 L1829.8 684.368 L1829.24 684.368 L1828.68 684.368 L1828.12 684.368 L1827.56 684.368 L1827 684.368 L1826.45 684.368 L1825.89 684.368 L1825.33 684.368 L1824.77 684.368 L1824.21 684.368 L1823.65 684.368 L1823.09 684.368 L1822.53 684.368 L1821.97 684.368 L1821.41 684.368 L1820.85 684.368 L1820.29 684.368 L1819.73 684.368 L1819.18 684.368 L1818.62 684.368 L1818.06 684.368 L1817.5 684.368 L1816.94 684.368 L1816.38 684.368 L1815.82 684.368 L1815.26 684.368 L1814.7 684.368 L1814.14 684.368 L1813.58 684.368 L1813.02 684.368 L1812.46 684.368 L1811.9 684.368 L1811.35 684.368 L1810.79 684.368 L1810.23 684.368 L1809.67 684.368 L1809.11 684.368 L1808.55 684.368 L1807.99 684.368 L1807.43 684.368 L1806.87 684.368 L1806.31 684.368 L1805.75 684.368 L1805.19 684.368 L1804.63 684.368 L1804.08 684.368 L1803.52 684.368 L1802.96 684.368 L1802.4 684.368 L1801.84 684.368 L1801.28 684.368 L1800.72 684.368 L1800.16 684.368 L1799.6 684.368 L1799.04 684.368 L1798.48 684.368 L1797.92 684.368 L1797.36 684.368 L1796.8 684.368 L1796.25 684.368 L1795.69 684.368 L1795.13 684.368 L1794.57 684.368 L1794.01 684.368 L1793.45 684.368 L1792.89 684.368 L1792.33 684.368 L1791.77 684.368 L1791.21 684.368 L1790.65 684.368 L1790.09 684.368 L1789.53 684.368 L1788.98 684.368 L1788.42 684.368 L1787.86 684.368 L1787.3 684.368 L1786.74 684.368 L1786.18 684.368 L1785.62 684.368 L1785.06 684.368 L1784.5 684.368 L1783.94 684.368 L1783.38 684.368 L1782.82 684.368 L1782.26 684.368 L1781.71 684.368 L1781.15 684.368 L1780.59 684.368 L1780.03 684.368 L1779.47 684.368 L1778.91 684.368 L1778.35 684.368 L1777.79 684.368 L1777.23 684.368 L1776.67 684.368 L1776.11 684.368 L1775.55 684.368 L1774.99 684.368 L1774.43 684.368 L1773.88 684.368 L1773.32 684.368 L1772.76 684.368 L1772.2 684.368 L1771.64 684.368 L1771.08 684.368 L1770.52 684.368 L1769.96 684.368 L1769.4 684.368 L1768.84 684.368 L1768.28 684.368 L1767.72 684.368 L1767.16 684.368 L1766.61 684.368 L1766.05 684.368 L1765.49 684.368 L1764.93 684.368 L1764.37 684.368 L1763.81 684.368 L1763.25 684.368 L1762.69 684.368 L1762.13 684.368 L1761.57 684.368 L1761.01 684.368 L1760.45 684.368 L1759.89 684.368 L1759.34 684.368 L1758.78 684.368 L1758.22 684.368 L1757.66 684.368 L1757.1 684.368 L1756.54 684.368 L1755.98 684.368 L1755.42 684.368 L1754.86 684.368 L1754.3 684.368 L1753.74 684.368 L1753.18 684.368 L1752.62 684.368 L1752.06 684.368 L1751.51 684.368 L1750.95 684.368 L1750.39 684.368 L1749.83 684.368 L1749.27 684.368 L1748.71 684.368 L1748.15 684.368 L1747.59 684.368 L1747.03 684.368 L1746.47 684.368 L1745.91 684.368 L1745.35 684.368 L1744.79 684.368 L1744.24 684.368 L1743.68 684.368 L1743.12 684.368 L1742.56 684.368 L1742 684.368 L1741.44 684.368 L1740.88 684.368 L1740.32 684.368 L1739.76 684.368 L1739.2 684.368 L1738.64 684.368 L1738.08 684.368 L1737.52 684.368 L1736.97 684.368 L1736.41 684.368 L1735.85 684.368 L1735.29 684.368 L1734.73 684.368 L1734.17 684.368 L1733.61 684.368 L1733.05 684.368 L1732.49 684.368 L1731.93 684.368 L1731.37 684.368 L1730.81 684.368 L1730.25 684.368 L1729.69 684.368 L1729.14 684.368 L1728.58 684.368 L1728.02 684.368 L1727.46 684.368 L1726.9 684.368 L1726.34 684.368 L1725.78 684.368 L1725.22 684.368 L1724.66 684.368 L1724.1 684.368 L1723.54 684.368 L1722.98 684.368 L1722.42 684.368 L1721.87 684.368 L1721.31 684.368 L1720.75 684.368 L1720.19 684.368 L1719.63 684.368 L1719.07 684.368 L1718.51 684.368 L1717.95 684.368 L1717.39 684.368 L1716.83 684.368 L1716.27 684.368 L1715.71 684.368 L1715.15 684.368 L1714.6 684.368 L1714.04 684.368 L1713.48 684.368 L1712.92 684.368 L1712.36 684.368 L1711.8 684.368 L1711.24 684.368 L1710.68 684.368 L1710.12 684.368 L1709.56 684.368 L1709 684.368 L1708.44 684.368 L1707.88 684.368 L1707.32 684.368 L1706.77 684.368 L1706.21 684.368 L1705.65 684.368 L1705.09 684.368 L1704.53 684.368 L1703.97 684.368 L1703.41 684.368 L1702.85 684.368 L1702.29 684.368 L1701.73 684.368 L1701.17 684.368 L1700.61 684.368 L1700.05 684.368 L1699.5 684.368 L1698.94 684.368 L1698.38 684.368 L1697.82 684.368 L1697.26 684.368 L1696.7 684.368 L1696.14 684.368 L1695.58 684.368 L1695.02 684.368 L1694.46 684.368 L1693.9 684.368 L1693.34 684.368 L1692.78 684.368 L1692.23 684.368 L1691.67 684.368 L1691.11 684.368 L1690.55 684.368 L1689.99 684.368 L1689.43 684.368 L1688.87 684.368 L1688.31 684.368 L1687.75 684.368 L1687.19 684.368 L1686.63 684.368 L1686.07 684.368 L1685.51 684.368 L1684.95 684.368 L1684.4 684.368 L1683.84 684.368 L1683.28 684.368 L1682.72 684.368 L1682.16 684.368 L1681.6 684.368 L1681.04 684.368 L1680.48 684.368 L1679.92 684.368 L1679.36 684.368 L1678.8 684.368 L1678.24 684.368 L1677.68 684.368 L1677.13 684.368 L1676.57 684.368 L1676.01 684.368 L1675.45 684.368 L1674.89 684.368 L1674.33 684.368 L1673.77 684.368 L1673.21 684.368 L1672.65 684.368 L1672.09 684.368 L1671.53 684.368 L1670.97 684.368 L1670.41 684.368 L1669.85 684.368 L1669.3 684.368 L1668.74 684.368 L1668.18 684.368 L1667.62 684.368 L1667.06 684.368 L1666.5 684.368 L1665.94 684.368 L1665.38 684.368 L1664.82 684.368 L1664.26 684.368 L1663.7 684.368 L1663.14 684.368 L1662.58 684.368 L1662.03 684.368 L1661.47 684.368 L1660.91 684.368 L1660.35 684.368 L1659.79 684.368 L1659.23 684.368 L1658.67 684.368 L1658.11 684.368 L1657.55 684.368 L1656.99 684.368 L1656.43 684.368 L1655.87 684.368 L1655.31 684.368 L1654.76 684.368 L1654.2 684.368 L1653.64 684.368 L1653.08 684.368 L1652.52 684.368 L1651.96 684.368 L1651.4 684.368 L1650.84 684.368 L1650.28 684.368 L1649.72 684.368 L1649.16 684.368 L1648.6 684.368 L1648.04 684.368 L1647.48 684.368 L1646.93 684.368 L1646.37 684.368 L1645.81 684.368 L1645.25 684.368 L1644.69 684.368 L1644.13 684.368 L1643.57 684.368 L1643.01 684.368 L1642.45 684.368 L1641.89 684.368 L1641.33 684.368 L1640.77 684.368 L1640.21 684.368 L1639.66 684.368 L1639.1 684.368 L1638.54 684.368 L1637.98 684.368 L1637.42 684.368 L1636.86 684.368 L1636.3 684.368 L1635.74 684.368 L1635.18 684.368 L1634.62 684.368 L1634.06 684.368 L1633.5 684.368 L1632.94 684.368 L1632.39 684.368 L1631.83 684.368 L1631.27 684.368 L1630.71 684.368 L1630.15 684.368 L1629.59 684.368 L1629.03 684.368 L1628.47 684.368 L1627.91 684.368 L1627.35 684.368 L1626.79 684.368 L1626.23 684.368 L1625.67 684.368 L1625.11 684.368 L1624.56 684.368 L1624 684.368 L1623.44 684.368 L1622.88 684.368 L1622.32 684.368 L1621.76 684.368 L1621.2 684.368 L1620.64 684.368 L1620.08 684.368 L1619.52 684.368 L1618.96 684.368 L1618.4 684.368 L1617.84 684.368 L1617.29 684.368 L1616.73 684.368 L1616.17 684.368 L1615.61 684.368 L1615.05 684.368 L1614.49 684.368 L1613.93 684.368 L1613.37 684.368 L1612.81 684.368 L1612.25 684.368 L1611.69 684.368 L1611.13 684.368 L1610.57 684.368 L1610.02 684.368 L1609.46 684.368 L1608.9 684.368 L1608.34 684.368 L1607.78 684.368 L1607.22 684.368 L1606.66 684.368 L1606.1 684.368 L1605.54 684.368 L1604.98 684.368 L1604.42 684.368 L1603.86 684.368 L1603.3 684.368 L1602.74 684.368 L1602.19 684.368 L1601.63 684.368 L1601.07 684.368 L1600.51 684.368 L1599.95 684.368 L1599.39 684.368 L1598.83 684.368 L1598.27 684.368 L1597.71 684.368 L1597.15 684.368 L1596.59 684.368 L1596.03 684.368 L1595.47 684.368 L1594.92 684.368 L1594.36 684.368 L1593.8 684.368 L1593.24 684.368 L1592.68 684.368 L1592.12 684.368 L1591.56 684.368 L1591 684.368 L1590.44 684.368 L1589.88 684.368 L1589.32 684.368 L1588.76 684.368 L1588.2 684.368 L1587.65 684.368 L1587.09 684.368 L1586.53 684.368 L1585.97 684.368 L1585.41 684.368 L1584.85 684.368 L1584.29 684.368 L1583.73 684.368 L1583.17 684.368 L1582.61 684.368 L1582.05 684.368 L1581.49 684.368 L1580.93 684.368 L1580.37 684.368 L1579.82 684.368 L1579.26 684.368 L1578.7 684.368 L1578.14 684.368 L1577.58 684.368 L1577.02 684.368 L1576.46 684.368 L1575.9 684.368 L1575.34 684.368 L1574.78 684.368 L1574.22 684.368 L1573.66 684.368 L1573.1 684.368 L1572.55 684.368 L1571.99 684.368 L1571.43 684.368 L1570.87 684.368 L1570.31 684.368 L1569.75 684.368 L1569.19 684.368 L1568.63 684.368 L1568.07 684.368 L1567.51 684.368 L1566.95 684.368 L1566.39 684.368 L1565.83 684.368 L1565.28 684.368 L1564.72 684.368 L1564.16 684.368 L1563.6 684.368 L1563.04 684.368 L1562.48 684.368 L1561.92 684.368 L1561.36 684.368 L1560.8 684.368 L1560.24 684.368 L1559.68 684.368 L1559.12 684.368 L1558.56 684.368 L1558 684.368 L1557.45 684.368 L1556.89 684.368 L1556.33 684.368 L1555.77 684.368 L1555.21 684.368 L1554.65 684.368 L1554.09 684.368 L1553.53 684.368 L1552.97 684.368 L1552.41 684.368 L1551.85 684.368 L1551.29 684.368 L1550.73 684.368 L1550.18 684.368 L1549.62 684.368 L1549.06 684.368 L1548.5 684.368 L1547.94 684.368 L1547.38 684.368 L1546.82 684.368 L1546.26 684.368 L1545.7 684.368 L1545.14 684.368 L1544.58 684.368 L1544.02 684.368 L1543.46 684.368 L1542.9 684.368 L1542.35 684.368 L1541.79 684.368 L1541.23 684.368 L1540.67 684.368 L1540.11 684.368 L1539.55 684.368 L1538.99 684.368 L1538.43 684.368 L1537.87 684.368 L1537.31 684.368 L1536.75 684.368 L1536.19 684.368 L1535.63 684.368 L1535.08 684.368 L1534.52 684.368 L1533.96 684.368 L1533.4 684.368 L1532.84 684.368 L1532.28 684.368 L1531.72 684.368 L1531.16 684.368 L1530.6 684.368 L1530.04 684.368 L1529.48 684.368 L1528.92 684.368 L1528.36 684.368 L1527.81 684.368 L1527.25 684.368 L1526.69 684.368 L1526.13 684.368 L1525.57 684.368 L1525.01 684.368 L1524.45 684.368 L1523.89 684.368 L1523.33 684.368 L1522.77 684.368 L1522.21 684.368 L1521.65 684.368 L1521.09 684.368 L1520.53 684.368 L1519.98 684.368 L1519.42 684.368 L1518.86 684.368 L1518.3 684.368 L1517.74 684.368 L1517.18 684.368 L1516.62 684.368 L1516.06 684.368 L1515.5 684.368 L1514.94 684.368 L1514.38 684.368 L1513.82 684.368 L1513.26 684.368 L1512.71 684.368 L1512.15 684.368 L1511.59 684.368 L1511.03 684.368 L1510.47 684.368 L1509.91 684.368 L1509.35 684.368 L1508.79 684.368 L1508.23 684.368 L1507.67 684.368 L1507.11 684.368 L1506.55 684.368 L1505.99 684.368 L1505.44 684.368 L1504.88 684.368 L1504.32 684.368 L1503.76 684.368 L1503.2 684.368 L1502.64 684.368 L1502.08 684.368 L1501.52 684.368 L1500.96 684.368 L1500.4 684.368 L1499.84 684.368 L1499.28 684.368 L1498.72 684.368 L1498.16 684.368 L1497.61 684.368 L1497.05 684.368 L1496.49 684.368 L1495.93 684.368 L1495.37 684.368 L1494.81 684.368 L1494.25 684.368 L1493.69 684.368 L1493.13 684.368 L1492.57 684.368 L1492.01 684.368 L1491.45 684.368 L1490.89 684.368 L1490.34 684.368 L1489.78 684.368 L1489.22 684.368 L1488.66 684.368 L1488.1 684.368 L1487.54 684.368 L1486.98 684.368 L1486.42 684.368 L1485.86 684.368 L1485.3 684.368 L1484.74 684.368 L1484.18 684.368 L1483.62 684.368 L1483.07 684.368 L1482.51 684.368 L1481.95 684.368 L1481.39 684.368 L1480.83 684.368 L1480.27 684.368 L1479.71 684.368 L1479.15 684.368 L1478.59 684.368 L1478.03 684.368 L1477.47 684.368 L1476.91 684.368 L1476.35 684.368 L1475.79 684.368 L1475.24 684.368 L1474.68 684.368 L1474.12 684.368 L1473.56 684.368 L1473 684.368 L1472.44 684.368 L1471.88 684.368 L1471.32 684.368 L1470.76 684.368 L1470.2 684.368 L1469.64 684.368 L1469.08 684.368 L1468.52 684.368 L1467.97 684.368 L1467.41 684.368 L1466.85 684.368 L1466.29 684.368 L1465.73 684.368 L1465.17 684.368 L1464.61 684.368 L1464.05 684.368 L1463.49 684.368 L1462.93 684.368 L1462.37 684.368 L1461.81 684.368 L1461.25 684.368 L1460.7 684.368 L1460.14 684.368 L1459.58 684.368 L1459.02 684.368 L1458.46 684.368 L1457.9 684.368 L1457.34 684.368 L1456.78 684.368 L1456.22 684.368 L1455.66 684.368 L1455.1 684.368 L1454.54 684.368 L1453.98 684.368 L1453.42 684.368 L1452.87 684.368 L1452.31 684.368 L1451.75 684.368 L1451.19 684.368 L1450.63 684.368 L1450.07 684.368 L1449.51 684.368 L1448.95 684.368 L1448.39 684.368 L1447.83 684.368 L1447.27 684.368 L1446.71 684.368 L1446.15 684.368 L1445.6 684.368 L1445.04 684.368 L1444.48 684.368 L1443.92 684.368 L1443.36 684.368 L1442.8 684.368 L1442.24 684.368 L1441.68 684.368 L1441.12 684.368 L1440.56 684.368 L1440 684.368 L1439.44 684.368 L1438.88 684.368 L1438.33 684.368 L1437.77 684.368 L1437.21 684.368 L1436.65 684.368 L1436.09 684.368 L1435.53 684.368 L1434.97 684.368 L1434.41 684.368 L1433.85 684.368 L1433.29 684.368 L1432.73 684.368 L1432.17 684.368 L1431.61 684.368 L1431.05 684.368 L1430.5 684.368 L1429.94 684.368 L1429.38 684.368 L1428.82 684.368 L1428.26 684.368 L1427.7 684.368 L1427.14 684.368 L1426.58 684.368 L1426.02 684.368 L1425.46 684.368 L1424.9 684.368 L1424.34 684.368 L1423.78 684.368 L1423.23 684.368 L1422.67 684.368 L1422.11 684.368 L1421.55 684.368 L1420.99 684.368 L1420.43 684.368 L1419.87 684.368 L1419.31 684.368 L1418.75 684.368 L1418.19 684.368 L1417.63 684.368 L1417.07 684.368 L1416.51 684.368 L1415.95 684.368 L1415.4 684.368 L1414.84 684.368 L1414.28 684.368 L1413.72 684.368 L1413.16 684.368 L1412.6 684.368 L1412.04 684.368 L1411.48 684.368 L1410.92 684.368 L1410.36 684.368 L1409.8 684.368 L1409.24 684.368 L1408.68 684.368 L1408.13 684.368 L1407.57 684.368 L1407.01 684.368 L1406.45 684.368 L1405.89 684.368 L1405.33 684.368 L1404.77 684.368 L1404.21 684.368 L1403.65 684.368 L1403.09 684.368 L1402.53 684.368 L1401.97 684.368 L1401.41 684.368 L1400.86 684.368 L1400.3 684.368 L1399.74 684.368 L1399.18 684.368 L1398.62 684.368 L1398.06 684.368 L1397.5 684.368 L1396.94 684.368 L1396.38 684.368 L1395.82 684.368 L1395.26 684.368 L1394.7 684.368 L1394.14 684.368 L1393.58 684.368 L1393.03 684.368 L1392.47 684.368 L1391.91 684.368 L1391.35 684.368 L1390.79 684.368 L1390.23 684.368 L1389.67 684.368 L1389.11 684.368 L1388.55 684.368 L1387.99 684.368 L1387.43 684.368 L1386.87 684.368 L1386.31 684.368 L1385.76 684.368 L1385.2 684.368 L1384.64 684.368 L1384.08 684.368 L1383.52 684.368 L1382.96 684.368 L1382.4 684.368 L1381.84 684.368 L1381.28 684.368 L1380.72 684.368 L1380.16 684.368 L1379.6 684.368 L1379.04 684.368 L1378.49 684.368 L1377.93 684.368 L1377.37 684.368 L1376.81 684.368 L1376.25 684.368 L1375.69 684.368 L1375.13 684.368 L1374.57 684.368 L1374.01 684.368 L1373.45 684.368 L1372.89 684.368 L1372.33 684.368 L1371.77 684.368 L1371.21 684.368 L1370.66 684.368 L1370.1 684.368 L1369.54 684.368 L1368.98 684.368 L1368.42 684.368 L1367.86 684.368 L1367.3 684.368 L1366.74 684.368 L1366.18 684.368 L1365.62 684.368 L1365.06 684.368 L1364.5 684.368 L1363.94 684.368 L1363.39 684.368 L1362.83 684.368 L1362.27 684.368 L1361.71 684.368 L1361.15 684.368 L1360.59 684.368 L1360.03 684.368 L1359.47 684.368 L1358.91 684.368 L1358.35 684.368 L1357.79 684.368 L1357.23 684.368 L1356.67 684.368 L1356.12 684.368 L1355.56 684.368 L1355 684.368 L1354.44 684.368 L1353.88 684.368 L1353.32 684.368 L1352.76 684.368 L1352.2 684.368 L1351.64 684.368 L1351.08 684.368 L1350.52 684.368 L1349.96 684.368 L1349.4 684.368 L1348.84 684.368 L1348.29 684.368 L1347.73 684.368 L1347.17 684.368 L1346.61 684.368 L1346.05 684.368 L1345.49 684.368 L1344.93 684.368 L1344.37 684.368 L1343.81 684.368 L1343.25 684.368 L1342.69 684.368 L1342.13 684.368 L1341.57 684.368 L1341.02 684.368 L1340.46 684.368 L1339.9 684.368 L1339.34 684.368 L1338.78 684.368 L1338.22 684.368 L1337.66 684.368 L1337.1 684.368 L1336.54 684.368 L1335.98 684.368 L1335.42 684.368 L1334.86 684.368 L1334.3 684.368 L1333.75 684.368 L1333.19 684.368 L1332.63 684.368 L1332.07 684.368 L1331.51 684.368 L1330.95 684.368 L1330.39 684.368 L1329.83 684.368 L1329.27 684.368 L1328.71 684.368 L1328.15 684.368 L1327.59 684.368 L1327.03 684.368 L1326.47 684.368 L1325.92 684.368 L1325.36 684.368 L1324.8 684.368 L1324.24 684.368 L1323.68 684.368 L1323.12 684.368 L1322.56 684.368 L1322 684.368 L1321.44 684.368 L1320.88 684.368 L1320.32 684.368 L1319.76 684.368 L1319.2 684.368 L1318.65 684.368 L1318.09 684.368 L1317.53 684.368 L1316.97 684.368 L1316.41 684.368 L1315.85 684.368 L1315.29 684.368 L1314.73 684.368 L1314.17 684.368 L1313.61 684.368 L1313.05 684.368 L1312.49 684.368 L1311.93 684.368 L1311.38 684.368 L1310.82 684.368 L1310.26 684.368 L1309.7 684.368 L1309.14 684.368 L1308.58 684.368 L1308.02 684.368 L1307.46 684.368 L1306.9 684.368 L1306.34 684.368 L1305.78 684.368 L1305.22 684.368 L1304.66 684.368 L1304.1 684.368 L1303.55 684.368 L1302.99 684.368 L1302.43 684.368 L1301.87 684.368 L1301.31 684.368 L1300.75 684.368 L1300.19 684.368 L1299.63 684.368 L1299.07 684.368 L1298.51 684.368 L1297.95 684.368 L1297.39 684.368 L1296.83 684.368 L1296.28 684.368 L1295.72 684.368 L1295.16 684.368 L1294.6 684.368 L1294.04 684.368 L1293.48 684.368 L1292.92 684.368 L1292.36 684.368 L1291.8 684.368 L1291.24 684.368 L1290.68 684.368 L1290.12 684.368 L1289.56 684.368 L1289 684.368 L1288.45 684.368 L1287.89 684.368 L1287.33 684.368 L1286.77 684.368 L1286.21 684.368 L1285.65 684.368 L1285.09 684.368 L1284.53 684.368 L1283.97 684.368 L1283.41 684.368 L1282.85 684.368 L1282.29 684.368 L1281.73 684.368 L1281.18 684.368 L1280.62 684.368 L1280.06 684.368 L1279.5 684.368 L1278.94 684.368 L1278.38 684.368 L1277.82 684.368 L1277.26 684.368 L1276.7 684.368 L1276.14 684.368 L1275.58 684.368 L1275.02 684.368 L1274.46 684.368 L1273.91 684.368 L1273.35 684.368 L1272.79 684.368 L1272.23 684.368 L1271.67 684.368 L1271.11 684.368 L1270.55 684.368 L1269.99 684.368 L1269.43 684.368 L1268.87 684.368 L1268.31 684.368 L1267.75 684.368 L1267.19 684.368 L1266.63 684.368 L1266.08 684.368 L1265.52 684.368 L1264.96 684.368 L1264.4 684.368 L1263.84 684.368 L1263.28 684.368 L1262.72 684.368 L1262.16 684.368 L1261.6 684.368 L1261.04 684.368 L1260.48 684.368 L1259.92 684.368 L1259.36 684.368 L1258.81 684.368 L1258.25 684.368 L1257.69 684.368 L1257.13 684.368 L1256.57 684.368 L1256.01 684.368 L1255.45 684.368 L1254.89 684.368 L1254.33 684.368 L1253.77 684.368 L1253.21 684.368 L1252.65 684.368 L1252.09 684.368 L1251.54 684.368 L1250.98 684.368 L1250.42 684.368 L1249.86 684.368 L1249.3 684.368 L1248.74 684.368 L1248.18 684.368 L1247.62 684.368 L1247.06 684.368 L1246.5 684.368 L1245.94 684.368 L1245.38 684.368 L1244.82 684.368 L1244.26 684.368 L1243.71 684.368 L1243.15 684.368 L1242.59 684.368 L1242.03 684.368 L1241.47 684.368 L1240.91 684.368 L1240.35 684.368 L1239.79 684.368 L1239.23 684.368 L1238.67 684.368 L1238.11 684.368 L1237.55 684.368 L1236.99 684.368 L1236.44 684.368 L1235.88 684.368 L1235.32 684.368 L1234.76 684.368 L1234.2 684.368 L1233.64 684.368 L1233.08 684.368 L1232.52 684.368 L1231.96 684.368 L1231.4 684.368 L1230.84 684.368 L1230.28 684.368 L1229.72 684.368 L1229.17 684.368 L1228.61 684.368 L1228.05 684.368 L1227.49 684.368 L1226.93 684.368 L1226.37 684.368 L1225.81 684.368 L1225.25 684.368 L1224.69 684.368 L1224.13 684.368 L1223.57 684.368 L1223.01 684.368 L1222.45 684.368 L1221.89 684.368 L1221.34 684.368 L1220.78 684.368 L1220.22 684.368 L1219.66 684.368 L1219.1 684.368 L1218.54 684.368 L1217.98 684.368 L1217.42 684.368 L1216.86 684.368 L1216.3 684.368 L1215.74 684.368 L1215.18 684.368 L1214.62 684.368 L1214.07 684.368 L1213.51 684.368 L1212.95 684.368 L1212.39 684.368 L1211.83 684.368 L1211.27 684.368 L1210.71 684.368 L1210.15 684.368 L1209.59 684.368 L1209.03 684.368 L1208.47 684.368 L1207.91 684.368 L1207.35 684.368 L1206.8 684.368 L1206.24 684.368 L1205.68 684.368 L1205.12 684.368 L1204.56 684.368 L1204 684.368 L1203.44 684.368 L1202.88 684.368 L1202.32 684.368 L1201.76 684.368 L1201.2 684.368 L1200.64 684.368 L1200.08 684.368 L1199.52 684.368 L1198.97 684.368 L1198.41 684.368 L1197.85 684.368 L1197.29 684.368 L1196.73 684.368 L1196.17 684.368 L1195.61 684.368 L1195.05 684.368 L1194.49 684.368 L1193.93 684.368 L1193.37 684.368 L1192.81 684.368 L1192.25 684.368 L1191.7 684.368 L1191.14 684.368 L1190.58 684.368 L1190.02 684.368 L1189.46 684.368 L1188.9 684.368 L1188.34 684.368 L1187.78 684.368 L1187.22 684.368 L1186.66 684.368 L1186.1 684.368 L1185.54 684.368 L1184.98 684.368 L1184.43 684.368 L1183.87 684.368 L1183.31 684.368 L1182.75 684.368 L1182.19 684.368 L1181.63 684.368 L1181.07 684.368 L1180.51 684.368 L1179.95 684.368 L1179.39 684.368 L1178.83 684.368 L1178.27 684.368 L1177.71 684.368 L1177.15 684.368 L1176.6 684.368 L1176.04 684.368 L1175.48 684.368 L1174.92 684.368 L1174.36 684.368 L1173.8 684.368 L1173.24 684.368 L1172.68 684.368 L1172.12 684.368 L1171.56 684.368 L1171 684.368 L1170.44 684.368 L1169.88 684.368 L1169.33 684.368 L1168.77 684.368 L1168.21 684.368 L1167.65 684.368 L1167.09 684.368 L1166.53 684.368 L1165.97 684.368 L1165.41 684.368 L1164.85 684.368 L1164.29 684.368 L1163.73 684.368 L1163.17 684.368 L1162.61 684.368 L1162.05 684.368 L1161.5 684.368 L1160.94 684.368 L1160.38 684.368 L1159.82 684.368 L1159.26 684.368 L1158.7 684.368 L1158.14 684.368 L1157.58 684.368 L1157.02 684.368 L1156.46 684.368 L1155.9 684.368 L1155.34 684.368 L1154.78 684.368 L1154.23 684.368 L1153.67 684.368 L1153.11 684.368 L1152.55 684.368 L1151.99 684.368 L1151.43 684.368 L1150.87 684.368 L1150.31 684.368 L1149.75 684.368 L1149.19 684.368 L1148.63 684.368 L1148.07 684.368 L1147.51 684.368 L1146.96 684.368 L1146.4 684.368 L1145.84 684.368 L1145.28 684.368 L1144.72 684.368 L1144.16 684.368 L1143.6 684.368 L1143.04 684.368 L1142.48 684.368 L1141.92 684.368 L1141.36 684.368 L1140.8 684.368 L1140.24 684.368 L1139.68 684.368 L1139.13 684.368 L1138.57 684.368 L1138.01 684.368 L1137.45 684.368 L1136.89 684.368 L1136.33 684.368 L1135.77 684.368 L1135.21 684.368 L1134.65 684.368 L1134.09 684.368 L1133.53 684.368 L1132.97 684.368 L1132.41 684.368 L1131.86 684.368 L1131.3 684.368 L1130.74 684.368 L1130.18 684.368 L1129.62 684.368 L1129.06 684.368 L1128.5 684.368 L1127.94 684.368 L1127.38 684.368 L1126.82 684.368 L1126.26 684.368 L1125.7 684.368 L1125.14 684.368 L1124.59 684.368 L1124.03 684.368 L1123.47 684.368 L1122.91 684.368 L1122.35 684.368 L1121.79 684.368 L1121.23 684.368 L1120.67 684.368 L1120.11 684.368 L1119.55 684.368 L1118.99 684.368 L1118.43 684.368 L1117.87 684.368 L1117.31 684.368 L1116.76 684.368 L1116.2 684.368 L1115.64 684.368 L1115.08 684.368 L1114.52 684.368 L1113.96 684.368 L1113.4 684.368 L1112.84 684.368 L1112.28 684.368 L1111.72 684.368 L1111.16 684.368 L1110.6 684.368 L1110.04 684.368 L1109.49 684.368 L1108.93 684.368 L1108.37 684.368 L1107.81 684.368 L1107.25 684.368 L1106.69 684.368 L1106.13 684.368 L1105.57 684.368 L1105.01 684.368 L1104.45 684.368 L1103.89 684.368 L1103.33 684.368 L1102.77 684.368 L1102.22 684.368 L1101.66 684.368 L1101.1 684.368 L1100.54 684.368 L1099.98 684.368 L1099.42 684.368 L1098.86 684.368 L1098.3 684.368 L1097.74 684.368 L1097.18 684.368 L1096.62 684.368 L1096.06 684.368 L1095.5 684.368 L1094.94 684.368 L1094.39 684.368 L1093.83 684.368 L1093.27 684.368 L1092.71 684.368 L1092.15 684.368 L1091.59 684.368 L1091.03 684.368 L1090.47 684.368 L1089.91 684.368 L1089.35 684.368 L1088.79 684.368 L1088.23 684.368 L1087.67 684.368 L1087.12 684.368 L1086.56 684.368 L1086 684.368 L1085.44 684.368 L1084.88 684.368 L1084.32 684.368 L1083.76 684.368 L1083.2 684.368 L1082.64 684.368 L1082.08 684.368 L1081.52 684.368 L1080.96 684.368 L1080.4 684.368 L1079.85 684.368 L1079.29 684.368 L1078.73 684.368 L1078.17 684.368 L1077.61 684.368 L1077.05 684.368 L1076.49 684.368 L1075.93 684.368 L1075.37 684.368 L1074.81 684.368 L1074.25 684.368 L1073.69 684.368 L1073.13 684.368 L1072.57 684.368 L1072.02 684.368 L1071.46 684.368 L1070.9 684.368 L1070.34 684.368 L1069.78 684.368 L1069.22 684.368 L1068.66 684.368 L1068.1 684.368 L1067.54 684.368 L1066.98 684.368 L1066.42 684.368 L1065.86 684.368 L1065.3 684.368 L1064.75 684.368 L1064.19 684.368 L1063.63 684.368 L1063.07 684.368 L1062.51 684.368 L1061.95 684.368 L1061.39 684.368 L1060.83 684.368 L1060.27 684.368 L1059.71 684.368 L1059.15 684.368 L1058.59 684.368 L1058.03 684.368 L1057.48 684.368 L1056.92 684.368 L1056.36 684.368 L1055.8 684.368 L1055.24 684.368 L1054.68 684.368 L1054.12 684.368 L1053.56 684.368 L1053 684.368 L1052.44 684.368 L1051.88 684.368 L1051.32 684.368 L1050.76 684.368 L1050.2 684.368 L1049.65 684.368 L1049.09 684.368 L1048.53 684.368 L1047.97 684.368 L1047.41 684.368 L1046.85 684.368 L1046.29 684.368 L1045.73 684.368 L1045.17 684.368 L1044.61 684.368 L1044.05 684.368 L1043.49 684.368 L1042.93 684.368 L1042.38 684.368 L1041.82 684.368 L1041.26 684.368 L1040.7 684.368 L1040.14 684.368 L1039.58 684.368 L1039.02 684.368 L1038.46 684.368 L1037.9 684.368 L1037.34 684.368 L1036.78 684.368 L1036.22 684.368 L1035.66 684.368 L1035.1 684.368 L1034.55 684.368 L1033.99 684.368 L1033.43 684.368 L1032.87 684.368 L1032.31 684.368 L1031.75 684.368 L1031.19 684.368 L1030.63 684.368 L1030.07 684.368 L1029.51 684.368 L1028.95 684.368 L1028.39 684.368 L1027.83 684.368 L1027.28 684.368 L1026.72 684.368 L1026.16 684.368 L1025.6 684.368 L1025.04 684.368 L1024.48 684.368 L1023.92 684.368 L1023.36 684.368 L1022.8 684.368 L1022.24 684.368 L1021.68 684.368 L1021.12 684.368 L1020.56 684.368 L1020.01 684.368 L1019.45 684.368 L1018.89 684.368 L1018.33 684.368 L1017.77 684.368 L1017.21 684.368 L1016.65 684.368 L1016.09 684.368 L1015.53 684.368 L1014.97 684.368 L1014.41 684.368 L1013.85 684.368 L1013.29 684.368 L1012.73 684.368 L1012.18 684.368 L1011.62 684.368 L1011.06 684.368 L1010.5 684.368 L1009.94 684.368 L1009.38 684.368 L1008.82 684.368 L1008.26 684.368 L1007.7 684.368 L1007.14 684.368 L1006.58 684.368 L1006.02 684.368 L1005.46 684.368 L1004.91 684.368 L1004.35 684.368 L1003.79 684.368 L1003.23 684.368 L1002.67 684.368 L1002.11 684.368 L1001.55 684.368 L1000.99 684.368 L1000.43 684.368 L999.872 684.368 L999.313 684.368 L998.754 684.368 L998.194 684.368 L997.635 684.368 L997.076 684.368 L996.517 684.368 L995.957 684.368 L995.398 684.368 L994.839 684.368 L994.28 684.368 L993.72 684.368 L993.161 684.368 L992.602 684.368 L992.043 684.368 L991.483 684.368 L990.924 684.368 L990.365 684.368 L989.806 684.368 L989.246 684.368 L988.687 684.368 L988.128 684.368 L987.569 684.368 L987.009 684.368 L986.45 684.368 L985.891 684.368 L985.332 684.368 L984.772 684.368 L984.213 684.368 L983.654 684.368 L983.095 684.368 L982.535 684.368 L981.976 684.368 L981.417 684.368 L980.858 684.368 L980.298 684.368 L979.739 684.368 L979.18 684.368 L978.621 684.368 L978.061 684.368 L977.502 684.368 L976.943 684.368 L976.384 684.368 L975.824 684.368 L975.265 684.368 L974.706 684.368 L974.147 684.368 L973.587 684.368 L973.028 684.368 L972.469 684.368 L971.91 684.368 L971.35 684.368 L970.791 684.368 L970.232 684.368 L969.673 684.368 L969.113 684.368 L968.554 684.368 L967.995 684.368 L967.436 684.368 L966.876 684.368 L966.317 684.368 L965.758 684.368 L965.199 684.368 L964.639 684.368 L964.08 684.368 L963.521 684.368 L962.962 684.368 L962.402 684.368 L961.843 684.368 L961.284 684.368 L960.725 684.368 L960.165 684.368 L959.606 684.368 L959.047 684.368 L958.488 684.368 L957.928 684.368 L957.369 684.368 L956.81 684.368 L956.251 684.368 L955.691 684.368 L955.132 684.368 L954.573 684.368 L954.014 684.368 L953.454 684.368 L952.895 684.368 L952.336 684.368 L951.777 684.368 L951.217 684.368 L950.658 684.368 L950.099 684.368 L949.54 684.368 L948.98 684.368 L948.421 684.368 L947.862 684.368 L947.303 684.368 L946.743 684.368 L946.184 684.368 L945.625 684.368 L945.066 684.368 L944.506 684.368 L943.947 684.368 L943.388 684.368 L942.829 684.368 L942.269 684.368 L941.71 684.368 L941.151 684.368 L940.592 684.368 L940.032 684.368 L939.473 684.368 L938.914 684.368 L938.355 684.368 L937.795 684.368 L937.236 684.368 L936.677 684.368 L936.118 684.368 L935.558 684.368 L934.999 684.368 L934.44 684.368 L933.881 684.368 L933.321 684.368 L932.762 684.368 L932.203 684.368 L931.644 684.368 L931.084 684.368 L930.525 684.368 L929.966 684.368 L929.406 684.368 L928.847 684.368 L928.288 684.368 L927.729 684.368 L927.169 684.368 L926.61 684.368 L926.051 684.368 L925.492 684.368 L924.932 684.368 L924.373 684.368 L923.814 684.368 L923.255 684.368 L922.695 684.368 L922.136 684.368 L921.577 684.368 L921.018 684.368 L920.458 684.368 L919.899 684.368 L919.34 684.368 L918.781 684.368 L918.221 684.368 L917.662 684.368 L917.103 684.368 L916.544 684.368 L915.984 684.368 L915.425 684.368 L914.866 684.368 L914.307 684.368 L913.747 684.368 L913.188 684.368 L912.629 684.368 L912.07 684.368 L911.51 684.368 L910.951 684.368 L910.392 684.368 L909.833 684.368 L909.273 684.368 L908.714 684.368 L908.155 684.368 L907.596 684.368 L907.036 684.368 L906.477 684.368 L905.918 684.368 L905.359 684.368 L904.799 684.368 L904.24 684.368 L903.681 684.368 L903.122 684.368 L902.562 684.368 L902.003 684.368 L901.444 684.368 L900.885 684.368 L900.325 684.368 L899.766 684.368 L899.207 684.368 L898.648 684.368 L898.088 684.368 L897.529 684.368 L896.97 684.368 L896.411 684.368 L895.851 684.368 L895.292 684.368 L894.733 684.368 L894.174 684.368 L893.614 684.368 L893.055 684.368 L892.496 684.368 L891.937 684.368 L891.377 684.368 L890.818 684.368 L890.259 684.368 L889.7 684.368 L889.14 684.368 L888.581 684.368 L888.022 684.368 L887.463 684.368 L886.903 684.368 L886.344 684.368 L885.785 684.368 L885.226 684.368 L884.666 684.368 L884.107 684.368 L883.548 684.368 L882.989 684.368 L882.429 684.368 L881.87 684.368 L881.311 684.368 L880.752 684.368 L880.192 684.368 L879.633 684.368 L879.074 684.368 L878.515 684.368 L877.955 684.368 L877.396 684.368 L876.837 684.368 L876.278 684.368 L875.718 684.368 L875.159 684.368 L874.6 684.368 L874.041 684.368 L873.481 684.368 L872.922 684.368 L872.363 684.368 L871.804 684.368 L871.244 684.368 L870.685 684.368 L870.126 684.368 L869.567 684.368 L869.007 684.368 L868.448 684.368 L867.889 684.368 L867.33 684.368 L866.77 684.368 L866.211 684.368 L865.652 684.368 L865.093 684.368 L864.533 684.368 L863.974 684.368 L863.415 684.368 L862.856 684.368 L862.296 684.368 L861.737 684.368 L861.178 684.368 L860.619 684.368 L860.059 684.368 L859.5 684.368 L858.941 684.368 L858.382 684.368 L857.822 684.368 L857.263 684.368 L856.704 684.368 L856.145 684.368 L855.585 684.368 L855.026 684.368 L854.467 684.368 L853.908 684.368 L853.348 684.368 L852.789 684.368 L852.23 684.368 L851.671 684.368 L851.111 684.368 L850.552 684.368 L849.993 684.368 L849.434 684.368 L848.874 684.368 L848.315 684.368 L847.756 684.368 L847.197 684.368 L846.637 684.368 L846.078 684.368 L845.519 684.368 L844.96 684.368 L844.4 684.368 L843.841 684.368 L843.282 684.368 L842.723 684.368 L842.163 684.368 L841.604 684.368 L841.045 684.368 L840.486 684.368 L839.926 684.368 L839.367 684.368 L838.808 684.368 L838.249 684.368 L837.689 684.368 L837.13 684.368 L836.571 684.368 L836.012 684.368 L835.452 684.368 L834.893 684.368 L834.334 684.368 L833.775 684.368 L833.215 684.368 L832.656 684.368 L832.097 684.368 L831.538 684.368 L830.978 684.368 L830.419 684.368 L829.86 684.368 L829.301 684.368 L828.741 684.368 L828.182 684.368 L827.623 684.368 L827.064 684.368 L826.504 684.368 L825.945 684.368 L825.386 684.368 L824.827 684.368 L824.267 684.368 L823.708 684.368 L823.149 684.368 L822.59 684.368 L822.03 684.368 L821.471 684.368 L820.912 684.368 L820.353 684.368 L819.793 684.368 L819.234 684.368 L818.675 684.368 L818.116 684.368 L817.556 684.368 L816.997 684.368 L816.438 684.368 L815.879 684.368 L815.319 684.368 L814.76 684.368 L814.201 684.368 L813.642 684.368 L813.082 684.368 L812.523 684.368 L811.964 684.368 L811.405 684.368 L810.845 684.368 L810.286 684.368 L809.727 684.368 L809.168 684.368 L808.608 684.368 L808.049 684.368 L807.49 684.368 L806.931 684.368 L806.371 684.368 L805.812 684.368 L805.253 684.368 L804.693 684.368 L804.134 684.368 L803.575 684.368 L803.016 684.368 L802.456 684.368 L801.897 684.368 L801.338 684.368 L800.779 684.368 L800.219 684.368 L799.66 684.368 L799.101 684.368 L798.542 684.368 L797.982 684.368 L797.423 684.368 L796.864 684.368 L796.305 684.368 L795.745 684.368 L795.186 684.368 L794.627 684.368 L794.068 684.368 L793.508 684.368 L792.949 684.368 L792.39 684.368 L791.831 684.368 L791.271 684.368 L790.712 684.368 L790.153 684.368 L789.594 684.368 L789.034 684.368 L788.475 684.368 L787.916 684.368 L787.357 684.368 L786.797 684.368 L786.238 684.368 L785.679 684.368 L785.12 684.368 L784.56 684.368 L784.001 684.368 L783.442 684.368 L782.883 684.368 L782.323 684.368 L781.764 684.368 L781.205 684.368 L780.646 684.368 L780.086 684.368 L779.527 684.368 L778.968 684.368 L778.409 684.368 L777.849 684.368 L777.29 684.368 L776.731 684.368 L776.172 684.368 L775.612 684.368 L775.053 684.368 L774.494 684.368 L773.935 684.368 L773.375 684.368 L772.816 684.368 L772.257 684.368 L771.698 684.368 L771.138 684.368 L770.579 684.368 L770.02 684.368 L769.461 684.368 L768.901 684.368 L768.342 684.368 L767.783 684.368 L767.224 684.368 L766.664 684.368 L766.105 684.368 L765.546 684.368 L764.987 684.368 L764.427 684.368 L763.868 684.368 L763.309 684.368 L762.75 684.368 L762.19 684.368 L761.631 684.368 L761.072 684.368 L760.513 684.368 L759.953 684.368 L759.394 684.368 L758.835 684.368 L758.276 684.368 L757.716 684.368 L757.157 684.368 L756.598 684.368 L756.039 684.368 L755.479 684.368 L754.92 684.368 L754.361 684.368 L753.802 684.368 L753.242 684.368 L752.683 684.368 L752.124 684.368 L751.565 684.368 L751.005 684.368 L750.446 684.368 L749.887 684.368 L749.328 684.368 L748.768 684.368 L748.209 684.368 L747.65 684.368 L747.091 684.368 L746.531 684.368 L745.972 684.368 L745.413 684.368 L744.854 684.368 L744.294 684.368 L743.735 684.368 L743.176 684.368 L742.617 684.368 L742.057 684.368 L741.498 684.368 L740.939 684.368 L740.38 684.368 L739.82 684.368 L739.261 684.368 L738.702 684.368 L738.143 684.368 L737.583 684.368 L737.024 684.368 L736.465 684.368 L735.906 684.368 L735.346 684.368 L734.787 684.368 L734.228 684.368 L733.669 684.368 L733.109 684.368 L732.55 684.368 L731.991 684.368 L731.432 684.368 L730.872 684.368 L730.313 684.368 L729.754 684.368 L729.195 684.368 L728.635 684.368 L728.076 684.368 L727.517 684.368 L726.958 684.368 L726.398 684.368 L725.839 684.368 L725.28 684.368 L724.721 684.368 L724.161 684.368 L723.602 684.368 L723.043 684.368 L722.484 684.368 L721.924 684.368 L721.365 684.368 L720.806 684.368 L720.247 684.368  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.819 720.806,687.819 721.365,687.819 721.924,687.819 722.484,687.819 723.043,687.819 723.602,687.819 724.161,687.819 724.721,687.819 725.28,687.819 725.839,687.819 726.398,687.819 726.958,687.819 727.517,687.819 728.076,687.819 728.635,687.819 729.195,687.819 729.754,687.819 730.313,687.819 730.872,687.819 731.432,687.819 731.991,687.819 732.55,687.819 733.109,687.819 733.669,687.819 734.228,687.819 734.787,687.819 735.346,687.819 735.906,687.819 736.465,687.819 737.024,687.819 737.583,687.819 738.143,687.819 738.702,687.819 739.261,687.819 739.82,687.819 740.38,687.819 740.939,687.819 741.498,687.819 742.057,687.819 742.617,687.819 743.176,687.819 743.735,687.819 744.294,687.819 744.854,687.819 745.413,687.819 745.972,687.819 746.531,687.819 747.091,687.819 747.65,687.819 748.209,687.819 748.768,687.819 749.328,687.819 749.887,687.819 750.446,687.819 751.005,687.819 751.565,687.819 752.124,687.819 752.683,687.819 753.242,687.819 753.802,687.819 754.361,687.819 754.92,687.819 755.479,687.819 756.039,687.819 756.598,687.819 757.157,687.819 757.716,687.819 758.276,687.819 758.835,687.819 759.394,687.819 759.953,687.819 760.513,687.819 761.072,687.819 761.631,687.819 762.19,687.819 762.75,687.819 763.309,687.819 763.868,687.819 764.427,687.819 764.987,687.819 765.546,687.819 766.105,687.819 766.664,687.819 767.224,687.819 767.783,687.819 768.342,687.819 768.901,687.819 769.461,687.819 770.02,687.819 770.579,687.819 771.138,687.819 771.698,687.819 772.257,687.819 772.816,687.819 773.375,687.819 773.935,687.819 774.494,687.819 775.053,687.819 775.612,687.819 776.172,687.819 776.731,687.819 777.29,687.819 777.849,687.819 778.409,687.819 778.968,687.819 779.527,687.819 780.086,687.819 780.646,687.819 781.205,687.819 781.764,687.819 782.323,687.819 782.883,687.819 783.442,687.819 784.001,687.819 784.56,687.819 785.12,687.819 785.679,687.819 786.238,687.819 786.797,687.819 787.357,687.819 787.916,687.819 788.475,687.819 789.034,687.819 789.594,687.819 790.153,687.819 790.712,687.819 791.271,687.819 791.831,687.819 792.39,687.819 792.949,687.819 793.508,687.819 794.068,687.819 794.627,687.819 795.186,687.819 795.745,687.819 796.305,687.819 796.864,687.819 797.423,687.819 797.982,687.819 798.542,687.819 799.101,687.819 799.66,687.819 800.219,687.819 800.779,687.819 801.338,687.819 801.897,687.819 802.456,687.819 803.016,687.819 803.575,687.819 804.134,687.819 804.693,687.819 805.253,687.819 805.812,687.819 806.371,687.819 806.931,687.819 807.49,687.819 808.049,687.819 808.608,687.819 809.168,687.819 809.727,687.819 810.286,687.819 810.845,687.819 811.405,687.819 811.964,687.819 812.523,687.819 813.082,687.819 813.642,687.819 814.201,687.819 814.76,687.819 815.319,687.819 815.879,687.819 816.438,687.819 816.997,687.819 817.556,687.819 818.116,687.819 818.675,687.819 819.234,687.819 819.793,687.819 820.353,687.819 820.912,687.819 821.471,687.819 822.03,687.819 822.59,687.819 823.149,687.819 823.708,687.819 824.267,687.819 824.827,687.819 825.386,687.819 825.945,687.819 826.504,687.819 827.064,687.819 827.623,687.819 828.182,687.819 828.741,687.819 829.301,687.819 829.86,687.819 830.419,687.819 830.978,687.819 831.538,687.819 832.097,687.819 832.656,687.819 833.215,687.819 833.775,687.819 834.334,687.819 834.893,687.819 835.452,687.819 836.012,687.819 836.571,687.819 837.13,687.819 837.689,687.819 838.249,687.819 838.808,687.819 839.367,687.819 839.926,687.819 840.486,687.819 841.045,687.819 841.604,687.819 842.163,687.819 842.723,687.819 843.282,687.819 843.841,687.819 844.4,687.819 844.96,687.819 845.519,687.819 846.078,687.819 846.637,687.819 847.197,687.819 847.756,687.819 848.315,687.819 848.874,687.819 849.434,687.819 849.993,687.819 850.552,687.819 851.111,687.819 851.671,687.819 852.23,687.819 852.789,687.819 853.348,687.819 853.908,687.819 854.467,687.819 855.026,687.819 855.585,687.819 856.145,687.819 856.704,687.819 857.263,687.819 857.822,687.819 858.382,687.819 858.941,687.819 859.5,687.819 860.059,687.819 860.619,687.819 861.178,687.819 861.737,687.819 862.296,687.819 862.856,687.819 863.415,687.819 863.974,687.819 864.533,687.819 865.093,687.819 865.652,687.819 866.211,687.819 866.77,687.819 867.33,687.819 867.889,687.819 868.448,687.819 869.007,687.819 869.567,687.819 870.126,687.819 870.685,687.819 871.244,687.819 871.804,687.819 872.363,687.819 872.922,687.819 873.481,687.819 874.041,687.819 874.6,687.819 875.159,687.819 875.718,687.819 876.278,687.819 876.837,687.819 877.396,687.819 877.955,687.819 878.515,687.819 879.074,687.819 879.633,687.819 880.192,687.819 880.752,687.819 881.311,687.819 881.87,687.819 882.429,687.819 882.989,687.819 883.548,687.819 884.107,687.819 884.666,687.819 885.226,687.819 885.785,687.819 886.344,687.819 886.903,687.819 887.463,687.819 888.022,687.819 888.581,687.819 889.14,687.819 889.7,687.819 890.259,687.819 890.818,687.819 891.377,687.819 891.937,687.819 892.496,687.819 893.055,687.819 893.614,687.819 894.174,687.819 894.733,687.819 895.292,687.819 895.851,687.819 896.411,687.819 896.97,687.819 897.529,687.819 898.088,687.819 898.648,687.819 899.207,687.819 899.766,687.819 900.325,687.819 900.885,687.819 901.444,687.819 902.003,687.819 902.562,687.819 903.122,687.819 903.681,687.819 904.24,687.819 904.799,687.819 905.359,687.819 905.918,687.819 906.477,687.819 907.036,687.819 907.596,687.819 908.155,687.819 908.714,687.819 909.273,687.819 909.833,687.819 910.392,687.819 910.951,687.819 911.51,687.819 912.07,687.819 912.629,687.819 913.188,687.819 913.747,687.819 914.307,687.819 914.866,687.819 915.425,687.819 915.984,687.819 916.544,687.819 917.103,687.819 917.662,687.819 918.221,687.819 918.781,687.819 919.34,687.819 919.899,687.819 920.458,687.819 921.018,687.819 921.577,687.819 922.136,687.819 922.695,687.819 923.255,687.819 923.814,687.819 924.373,687.819 924.932,687.819 925.492,687.819 926.051,687.819 926.61,687.819 927.169,687.819 927.729,687.819 928.288,687.819 928.847,687.819 929.406,687.819 929.966,687.819 930.525,687.819 931.084,687.819 931.644,687.819 932.203,687.819 932.762,687.819 933.321,687.819 933.881,687.819 934.44,687.819 934.999,687.819 935.558,687.819 936.118,687.819 936.677,687.819 937.236,687.819 937.795,687.819 938.355,687.819 938.914,687.819 939.473,687.819 940.032,687.819 940.592,687.819 941.151,687.819 941.71,687.819 942.269,687.819 942.829,687.819 943.388,687.819 943.947,687.819 944.506,687.819 945.066,687.819 945.625,687.819 946.184,687.819 946.743,687.819 947.303,687.819 947.862,687.819 948.421,687.819 948.98,687.819 949.54,687.819 950.099,687.819 950.658,687.819 951.217,687.819 951.777,687.819 952.336,687.819 952.895,687.819 953.454,687.819 954.014,687.819 954.573,687.819 955.132,687.819 955.691,687.819 956.251,687.819 956.81,687.819 957.369,687.819 957.928,687.819 958.488,687.819 959.047,687.819 959.606,687.819 960.165,687.819 960.725,687.819 961.284,687.819 961.843,687.819 962.402,687.819 962.962,687.819 963.521,687.819 964.08,687.819 964.639,687.819 965.199,687.819 965.758,687.819 966.317,687.819 966.876,687.819 967.436,687.819 967.995,687.819 968.554,687.819 969.113,687.819 969.673,687.819 970.232,687.819 970.791,687.819 971.35,687.819 971.91,687.819 972.469,687.819 973.028,687.819 973.587,687.819 974.147,687.819 974.706,687.819 975.265,687.819 975.824,687.819 976.384,687.819 976.943,687.819 977.502,687.819 978.061,687.819 978.621,687.819 979.18,687.819 979.739,687.819 980.298,687.819 980.858,687.819 981.417,687.819 981.976,687.819 982.535,687.819 983.095,687.819 983.654,687.819 984.213,687.819 984.772,687.819 985.332,687.819 985.891,687.819 986.45,687.819 987.009,687.819 987.569,687.819 988.128,687.819 988.687,687.819 989.246,687.819 989.806,687.819 990.365,687.819 990.924,687.819 991.483,687.819 992.043,687.819 992.602,687.819 993.161,687.819 993.72,687.819 994.28,687.819 994.839,687.819 995.398,687.819 995.957,687.819 996.517,687.819 997.076,687.819 997.635,687.819 998.194,687.819 998.754,687.819 999.313,687.819 999.872,687.819 1000.43,687.819 1000.99,687.819 1001.55,687.819 1002.11,687.819 1002.67,687.819 1003.23,687.819 1003.79,687.819 1004.35,687.819 1004.91,687.819 1005.46,687.819 1006.02,687.819 1006.58,687.819 1007.14,687.819 1007.7,687.819 1008.26,687.819 1008.82,687.819 1009.38,687.819 1009.94,687.819 1010.5,687.819 1011.06,687.819 1011.62,687.819 1012.18,687.819 1012.73,687.819 1013.29,687.819 1013.85,687.819 1014.41,687.819 1014.97,687.819 1015.53,687.819 1016.09,687.819 1016.65,687.819 1017.21,687.819 1017.77,687.819 1018.33,687.819 1018.89,687.819 1019.45,687.819 1020.01,687.819 1020.56,687.819 1021.12,687.819 1021.68,687.819 1022.24,687.819 1022.8,687.819 1023.36,687.819 1023.92,687.819 1024.48,687.819 1025.04,687.819 1025.6,687.819 1026.16,687.819 1026.72,687.819 1027.28,687.819 1027.83,687.819 1028.39,687.819 1028.95,687.819 1029.51,687.819 1030.07,687.819 1030.63,687.819 1031.19,687.819 1031.75,687.819 1032.31,687.819 1032.87,687.819 1033.43,687.819 1033.99,687.819 1034.55,687.819 1035.1,687.819 1035.66,687.819 1036.22,687.819 1036.78,687.819 1037.34,687.819 1037.9,687.819 1038.46,687.819 1039.02,687.819 1039.58,687.819 1040.14,687.819 1040.7,687.819 1041.26,687.819 1041.82,687.819 1042.38,687.819 1042.93,687.819 1043.49,687.819 1044.05,687.819 1044.61,687.819 1045.17,687.819 1045.73,687.819 1046.29,687.819 1046.85,687.819 1047.41,687.819 1047.97,687.819 1048.53,687.819 1049.09,687.819 1049.65,687.819 1050.2,687.819 1050.76,687.819 1051.32,687.819 1051.88,687.819 1052.44,687.819 1053,687.819 1053.56,687.819 1054.12,687.819 1054.68,687.819 1055.24,687.819 1055.8,687.819 1056.36,687.819 1056.92,687.819 1057.48,687.819 1058.03,687.819 1058.59,687.819 1059.15,687.819 1059.71,687.819 1060.27,687.819 1060.83,687.819 1061.39,687.819 1061.95,687.819 1062.51,687.819 1063.07,687.819 1063.63,687.819 1064.19,687.819 1064.75,687.819 1065.3,687.819 1065.86,687.819 1066.42,687.819 1066.98,687.819 1067.54,687.819 1068.1,687.819 1068.66,687.819 1069.22,687.819 1069.78,687.819 1070.34,687.819 1070.9,687.819 1071.46,687.819 1072.02,687.819 1072.57,687.819 1073.13,687.819 1073.69,687.819 1074.25,687.819 1074.81,687.819 1075.37,687.819 1075.93,687.819 1076.49,687.819 1077.05,687.819 1077.61,687.819 1078.17,687.819 1078.73,687.819 1079.29,687.819 1079.85,687.819 1080.4,687.819 1080.96,687.819 1081.52,687.819 1082.08,687.819 1082.64,687.819 1083.2,687.819 1083.76,687.819 1084.32,687.819 1084.88,687.819 1085.44,687.819 1086,687.819 1086.56,687.819 1087.12,687.819 1087.67,687.819 1088.23,687.819 1088.79,687.819 1089.35,687.819 1089.91,687.819 1090.47,687.819 1091.03,687.819 1091.59,687.819 1092.15,687.819 1092.71,687.819 1093.27,687.819 1093.83,687.819 1094.39,687.819 1094.94,687.819 1095.5,687.819 1096.06,687.819 1096.62,687.819 1097.18,687.819 1097.74,687.819 1098.3,687.819 1098.86,687.819 1099.42,687.819 1099.98,687.819 1100.54,687.819 1101.1,687.819 1101.66,687.819 1102.22,687.819 1102.77,687.819 1103.33,687.819 1103.89,687.819 1104.45,687.819 1105.01,687.819 1105.57,687.819 1106.13,687.819 1106.69,687.819 1107.25,687.819 1107.81,687.819 1108.37,687.819 1108.93,687.819 1109.49,687.819 1110.04,687.819 1110.6,687.819 1111.16,687.819 1111.72,687.819 1112.28,687.819 1112.84,687.819 1113.4,687.819 1113.96,687.819 1114.52,687.819 1115.08,687.819 1115.64,687.819 1116.2,687.819 1116.76,687.819 1117.31,687.819 1117.87,687.819 1118.43,687.819 1118.99,687.819 1119.55,687.819 1120.11,687.819 1120.67,687.819 1121.23,687.819 1121.79,687.819 1122.35,687.819 1122.91,687.819 1123.47,687.819 1124.03,687.819 1124.59,687.819 1125.14,687.819 1125.7,687.819 1126.26,687.819 1126.82,687.819 1127.38,687.819 1127.94,687.819 1128.5,687.819 1129.06,687.819 1129.62,687.819 1130.18,687.819 1130.74,687.819 1131.3,687.819 1131.86,687.819 1132.41,687.819 1132.97,687.819 1133.53,687.819 1134.09,687.819 1134.65,687.819 1135.21,687.819 1135.77,687.819 1136.33,687.819 1136.89,687.819 1137.45,687.819 1138.01,687.819 1138.57,687.819 1139.13,687.819 1139.68,687.819 1140.24,687.819 1140.8,687.819 1141.36,687.819 1141.92,687.819 1142.48,687.819 1143.04,687.819 1143.6,687.819 1144.16,687.819 1144.72,687.819 1145.28,687.819 1145.84,687.819 1146.4,687.819 1146.96,687.819 1147.51,687.819 1148.07,687.819 1148.63,687.819 1149.19,687.819 1149.75,687.819 1150.31,687.819 1150.87,687.819 1151.43,687.819 1151.99,687.819 1152.55,687.819 1153.11,687.819 1153.67,687.819 1154.23,687.819 1154.78,687.819 1155.34,687.819 1155.9,687.819 1156.46,687.819 1157.02,687.819 1157.58,687.819 1158.14,687.819 1158.7,687.819 1159.26,687.819 1159.82,687.819 1160.38,687.819 1160.94,687.819 1161.5,687.819 1162.05,687.819 1162.61,687.819 1163.17,687.819 1163.73,687.819 1164.29,687.819 1164.85,687.819 1165.41,687.819 1165.97,687.819 1166.53,687.819 1167.09,687.819 1167.65,687.819 1168.21,687.819 1168.77,687.819 1169.33,687.819 1169.88,687.819 1170.44,687.819 1171,687.819 1171.56,687.819 1172.12,687.819 1172.68,687.819 1173.24,687.819 1173.8,687.819 1174.36,687.819 1174.92,687.819 1175.48,687.819 1176.04,687.819 1176.6,687.819 1177.15,687.819 1177.71,687.819 1178.27,687.819 1178.83,687.819 1179.39,687.819 1179.95,687.819 1180.51,687.819 1181.07,687.819 1181.63,687.819 1182.19,687.819 1182.75,687.819 1183.31,687.819 1183.87,687.819 1184.43,687.819 1184.98,687.819 1185.54,687.819 1186.1,687.819 1186.66,687.819 1187.22,687.819 1187.78,687.819 1188.34,687.819 1188.9,687.819 1189.46,687.819 1190.02,687.819 1190.58,687.819 1191.14,687.819 1191.7,687.819 1192.25,687.819 1192.81,687.819 1193.37,687.819 1193.93,687.819 1194.49,687.819 1195.05,687.819 1195.61,687.819 1196.17,687.819 1196.73,687.819 1197.29,687.819 1197.85,687.819 1198.41,687.819 1198.97,687.819 1199.52,687.819 1200.08,687.819 1200.64,687.819 1201.2,687.819 1201.76,687.819 1202.32,687.819 1202.88,687.819 1203.44,687.819 1204,687.819 1204.56,687.819 1205.12,687.819 1205.68,687.819 1206.24,687.819 1206.8,687.819 1207.35,687.819 1207.91,687.819 1208.47,687.819 1209.03,687.819 1209.59,687.819 1210.15,687.819 1210.71,687.819 1211.27,687.819 1211.83,687.819 1212.39,687.819 1212.95,687.819 1213.51,687.819 1214.07,687.819 1214.62,687.819 1215.18,687.819 1215.74,687.819 1216.3,687.819 1216.86,687.819 1217.42,687.819 1217.98,687.819 1218.54,687.819 1219.1,687.819 1219.66,687.819 1220.22,687.819 1220.78,687.819 1221.34,687.819 1221.89,687.819 1222.45,687.819 1223.01,687.819 1223.57,687.819 1224.13,687.819 1224.69,687.819 1225.25,687.819 1225.81,687.819 1226.37,687.819 1226.93,687.819 1227.49,687.819 1228.05,687.819 1228.61,687.819 1229.17,687.819 1229.72,687.819 1230.28,687.819 1230.84,687.819 1231.4,687.819 1231.96,687.819 1232.52,687.819 1233.08,687.819 1233.64,687.819 1234.2,687.819 1234.76,687.819 1235.32,687.819 1235.88,687.819 1236.44,687.819 1236.99,687.819 1237.55,687.819 1238.11,687.819 1238.67,687.819 1239.23,687.819 1239.79,687.819 1240.35,687.819 1240.91,687.819 1241.47,687.819 1242.03,687.819 1242.59,687.819 1243.15,687.819 1243.71,687.819 1244.26,687.819 1244.82,687.819 1245.38,687.819 1245.94,687.819 1246.5,687.819 1247.06,687.819 1247.62,687.819 1248.18,687.819 1248.74,687.819 1249.3,687.819 1249.86,687.819 1250.42,687.819 1250.98,687.819 1251.54,687.819 1252.09,687.819 1252.65,687.819 1253.21,687.819 1253.77,687.819 1254.33,687.819 1254.89,687.819 1255.45,687.819 1256.01,687.819 1256.57,687.819 1257.13,687.819 1257.69,687.819 1258.25,687.819 1258.81,687.819 1259.36,687.819 1259.92,687.819 1260.48,687.819 1261.04,687.819 1261.6,687.819 1262.16,687.819 1262.72,687.819 1263.28,687.819 1263.84,687.819 1264.4,687.819 1264.96,687.819 1265.52,687.819 1266.08,687.819 1266.63,687.819 1267.19,687.819 1267.75,687.819 1268.31,687.819 1268.87,687.819 1269.43,687.819 1269.99,687.819 1270.55,687.819 1271.11,687.819 1271.67,687.819 1272.23,687.819 1272.79,687.819 1273.35,687.819 1273.91,687.819 1274.46,687.819 1275.02,687.819 1275.58,687.819 1276.14,687.819 1276.7,687.819 1277.26,687.819 1277.82,687.819 1278.38,687.819 1278.94,687.819 1279.5,687.819 1280.06,687.819 1280.62,687.819 1281.18,687.819 1281.73,687.819 1282.29,687.819 1282.85,687.819 1283.41,687.819 1283.97,687.819 1284.53,687.819 1285.09,687.819 1285.65,687.819 1286.21,687.819 1286.77,687.819 1287.33,687.819 1287.89,687.819 1288.45,687.819 1289,687.819 1289.56,687.819 1290.12,687.819 1290.68,687.819 1291.24,687.819 1291.8,687.819 1292.36,687.819 1292.92,687.819 1293.48,687.819 1294.04,687.819 1294.6,687.819 1295.16,687.819 1295.72,687.819 1296.28,687.819 1296.83,687.819 1297.39,687.819 1297.95,687.819 1298.51,687.819 1299.07,687.819 1299.63,687.819 1300.19,687.819 1300.75,687.819 1301.31,687.819 1301.87,687.819 1302.43,687.819 1302.99,687.819 1303.55,687.819 1304.1,687.819 1304.66,687.819 1305.22,687.819 1305.78,687.819 1306.34,687.819 1306.9,687.819 1307.46,687.819 1308.02,687.819 1308.58,687.819 1309.14,687.819 1309.7,687.819 1310.26,687.819 1310.82,687.819 1311.38,687.819 1311.93,687.819 1312.49,687.819 1313.05,687.819 1313.61,687.819 1314.17,687.819 1314.73,687.819 1315.29,687.819 1315.85,687.819 1316.41,687.819 1316.97,687.819 1317.53,687.819 1318.09,687.819 1318.65,687.819 1319.2,687.819 1319.76,687.819 1320.32,687.819 1320.88,687.819 1321.44,687.819 1322,687.819 1322.56,687.819 1323.12,687.819 1323.68,687.819 1324.24,687.819 1324.8,687.819 1325.36,687.819 1325.92,687.819 1326.47,687.819 1327.03,687.819 1327.59,687.819 1328.15,687.819 1328.71,687.819 1329.27,687.819 1329.83,687.819 1330.39,687.819 1330.95,687.819 1331.51,687.819 1332.07,687.819 1332.63,687.819 1333.19,687.819 1333.75,687.819 1334.3,687.819 1334.86,687.819 1335.42,687.819 1335.98,687.819 1336.54,687.819 1337.1,687.819 1337.66,687.819 1338.22,687.819 1338.78,687.819 1339.34,687.819 1339.9,687.819 1340.46,687.819 1341.02,687.819 1341.57,687.819 1342.13,687.819 1342.69,687.819 1343.25,687.819 1343.81,687.819 1344.37,687.819 1344.93,687.819 1345.49,687.819 1346.05,687.819 1346.61,687.819 1347.17,687.819 1347.73,687.819 1348.29,687.819 1348.84,687.819 1349.4,687.819 1349.96,687.819 1350.52,687.819 1351.08,687.819 1351.64,687.819 1352.2,687.819 1352.76,687.819 1353.32,687.819 1353.88,687.819 1354.44,687.819 1355,687.819 1355.56,687.819 1356.12,687.819 1356.67,687.819 1357.23,687.819 1357.79,687.819 1358.35,687.819 1358.91,687.819 1359.47,687.819 1360.03,687.819 1360.59,687.819 1361.15,687.819 1361.71,687.819 1362.27,687.819 1362.83,687.819 1363.39,687.819 1363.94,687.819 1364.5,687.819 1365.06,687.819 1365.62,687.819 1366.18,687.819 1366.74,687.819 1367.3,687.819 1367.86,687.819 1368.42,687.819 1368.98,687.819 1369.54,687.819 1370.1,687.819 1370.66,687.819 1371.21,687.819 1371.77,687.819 1372.33,687.819 1372.89,687.819 1373.45,687.819 1374.01,687.819 1374.57,687.819 1375.13,687.819 1375.69,687.819 1376.25,687.819 1376.81,687.819 1377.37,687.819 1377.93,687.819 1378.49,687.819 1379.04,687.819 1379.6,687.819 1380.16,687.819 1380.72,687.819 1381.28,687.819 1381.84,687.819 1382.4,687.819 1382.96,687.819 1383.52,687.819 1384.08,687.819 1384.64,687.819 1385.2,687.819 1385.76,687.819 1386.31,687.819 1386.87,687.819 1387.43,687.819 1387.99,687.819 1388.55,687.819 1389.11,687.819 1389.67,687.819 1390.23,687.819 1390.79,687.819 1391.35,687.819 1391.91,687.819 1392.47,687.819 1393.03,687.819 1393.58,687.819 1394.14,687.819 1394.7,687.819 1395.26,687.819 1395.82,687.819 1396.38,687.819 1396.94,687.819 1397.5,687.819 1398.06,687.819 1398.62,687.819 1399.18,687.819 1399.74,687.819 1400.3,687.819 1400.86,687.819 1401.41,687.819 1401.97,687.819 1402.53,687.819 1403.09,687.819 1403.65,687.819 1404.21,687.819 1404.77,687.819 1405.33,687.819 1405.89,687.819 1406.45,687.819 1407.01,687.819 1407.57,687.819 1408.13,687.819 1408.68,687.819 1409.24,687.819 1409.8,687.819 1410.36,687.819 1410.92,687.819 1411.48,687.819 1412.04,687.819 1412.6,687.819 1413.16,687.819 1413.72,687.819 1414.28,687.819 1414.84,687.819 1415.4,687.819 1415.95,687.819 1416.51,687.819 1417.07,687.819 1417.63,687.819 1418.19,687.819 1418.75,687.819 1419.31,687.819 1419.87,687.819 1420.43,687.819 1420.99,687.819 1421.55,687.819 1422.11,687.819 1422.67,687.819 1423.23,687.819 1423.78,687.819 1424.34,687.819 1424.9,687.819 1425.46,687.819 1426.02,687.819 1426.58,687.819 1427.14,687.819 1427.7,687.819 1428.26,687.819 1428.82,687.819 1429.38,687.819 1429.94,687.819 1430.5,687.819 1431.05,687.819 1431.61,687.819 1432.17,687.819 1432.73,687.819 1433.29,687.819 1433.85,687.819 1434.41,687.819 1434.97,687.819 1435.53,687.819 1436.09,687.819 1436.65,687.819 1437.21,687.819 1437.77,687.819 1438.33,687.819 1438.88,687.819 1439.44,687.819 1440,687.819 1440.56,687.819 1441.12,687.819 1441.68,687.819 1442.24,687.819 1442.8,687.819 1443.36,687.819 1443.92,687.819 1444.48,687.819 1445.04,687.819 1445.6,687.819 1446.15,687.819 1446.71,687.819 1447.27,687.819 1447.83,687.819 1448.39,687.819 1448.95,687.819 1449.51,687.819 1450.07,687.819 1450.63,687.819 1451.19,687.819 1451.75,687.819 1452.31,687.819 1452.87,687.819 1453.42,687.819 1453.98,687.819 1454.54,687.819 1455.1,687.819 1455.66,687.819 1456.22,687.819 1456.78,687.819 1457.34,687.819 1457.9,687.819 1458.46,687.819 1459.02,687.819 1459.58,687.819 1460.14,687.819 1460.7,687.819 1461.25,687.819 1461.81,687.819 1462.37,687.819 1462.93,687.819 1463.49,687.819 1464.05,687.819 1464.61,687.819 1465.17,687.819 1465.73,687.819 1466.29,687.819 1466.85,687.819 1467.41,687.819 1467.97,687.819 1468.52,687.819 1469.08,687.819 1469.64,687.819 1470.2,687.819 1470.76,687.819 1471.32,687.819 1471.88,687.819 1472.44,687.819 1473,687.819 1473.56,687.819 1474.12,687.819 1474.68,687.819 1475.24,687.819 1475.79,687.819 1476.35,687.819 1476.91,687.819 1477.47,687.819 1478.03,687.819 1478.59,687.819 1479.15,687.819 1479.71,687.819 1480.27,687.819 1480.83,687.819 1481.39,687.819 1481.95,687.819 1482.51,687.819 1483.07,687.819 1483.62,687.819 1484.18,687.819 1484.74,687.819 1485.3,687.819 1485.86,687.819 1486.42,687.819 1486.98,687.819 1487.54,687.819 1488.1,687.819 1488.66,687.819 1489.22,687.819 1489.78,687.819 1490.34,687.819 1490.89,687.819 1491.45,687.819 1492.01,687.819 1492.57,687.819 1493.13,687.819 1493.69,687.819 1494.25,687.819 1494.81,687.819 1495.37,687.819 1495.93,687.819 1496.49,687.819 1497.05,687.819 1497.61,687.819 1498.16,687.819 1498.72,687.819 1499.28,687.819 1499.84,687.819 1500.4,687.819 1500.96,687.819 1501.52,687.819 1502.08,687.819 1502.64,687.819 1503.2,687.819 1503.76,687.819 1504.32,687.819 1504.88,687.819 1505.44,687.819 1505.99,687.819 1506.55,687.819 1507.11,687.819 1507.67,687.819 1508.23,687.819 1508.79,687.819 1509.35,687.819 1509.91,687.819 1510.47,687.819 1511.03,687.819 1511.59,687.819 1512.15,687.819 1512.71,687.819 1513.26,687.819 1513.82,687.819 1514.38,687.819 1514.94,687.819 1515.5,687.819 1516.06,687.819 1516.62,687.819 1517.18,687.819 1517.74,687.819 1518.3,687.819 1518.86,687.819 1519.42,687.819 1519.98,687.819 1520.53,687.819 1521.09,687.819 1521.65,687.819 1522.21,687.819 1522.77,687.819 1523.33,687.819 1523.89,687.819 1524.45,687.819 1525.01,687.819 1525.57,687.819 1526.13,687.819 1526.69,687.819 1527.25,687.819 1527.81,687.819 1528.36,687.819 1528.92,687.819 1529.48,687.819 1530.04,687.819 1530.6,687.819 1531.16,687.819 1531.72,687.819 1532.28,687.819 1532.84,687.819 1533.4,687.819 1533.96,687.819 1534.52,687.819 1535.08,687.819 1535.63,687.819 1536.19,687.819 1536.75,687.819 1537.31,687.819 1537.87,687.819 1538.43,687.819 1538.99,687.819 1539.55,687.819 1540.11,687.819 1540.67,687.819 1541.23,687.819 1541.79,687.819 1542.35,687.819 1542.9,687.819 1543.46,687.819 1544.02,687.819 1544.58,687.819 1545.14,687.819 1545.7,687.819 1546.26,687.819 1546.82,687.819 1547.38,687.819 1547.94,687.819 1548.5,687.819 1549.06,687.819 1549.62,687.819 1550.18,687.819 1550.73,687.819 1551.29,687.819 1551.85,687.819 1552.41,687.819 1552.97,687.819 1553.53,687.819 1554.09,687.819 1554.65,687.819 1555.21,687.819 1555.77,687.819 1556.33,687.819 1556.89,687.819 1557.45,687.819 1558,687.819 1558.56,687.819 1559.12,687.819 1559.68,687.819 1560.24,687.819 1560.8,687.819 1561.36,687.819 1561.92,687.819 1562.48,687.819 1563.04,687.819 1563.6,687.819 1564.16,687.819 1564.72,687.819 1565.28,687.819 1565.83,687.819 1566.39,687.819 1566.95,687.819 1567.51,687.819 1568.07,687.819 1568.63,687.819 1569.19,687.819 1569.75,687.819 1570.31,687.819 1570.87,687.819 1571.43,687.819 1571.99,687.819 1572.55,687.819 1573.1,687.819 1573.66,687.819 1574.22,687.819 1574.78,687.819 1575.34,687.819 1575.9,687.819 1576.46,687.819 1577.02,687.819 1577.58,687.819 1578.14,687.819 1578.7,687.819 1579.26,687.819 1579.82,687.819 1580.37,687.819 1580.93,687.819 1581.49,687.819 1582.05,687.819 1582.61,687.819 1583.17,687.819 1583.73,687.819 1584.29,687.819 1584.85,687.819 1585.41,687.819 1585.97,687.819 1586.53,687.819 1587.09,687.819 1587.65,687.819 1588.2,687.819 1588.76,687.819 1589.32,687.819 1589.88,687.819 1590.44,687.819 1591,687.819 1591.56,687.819 1592.12,687.819 1592.68,687.819 1593.24,687.819 1593.8,687.819 1594.36,687.819 1594.92,687.819 1595.47,687.819 1596.03,687.819 1596.59,687.819 1597.15,687.819 1597.71,687.819 1598.27,687.819 1598.83,687.819 1599.39,687.819 1599.95,687.819 1600.51,687.819 1601.07,687.819 1601.63,687.819 1602.19,687.819 1602.74,687.819 1603.3,687.819 1603.86,687.819 1604.42,687.819 1604.98,687.819 1605.54,687.819 1606.1,687.819 1606.66,687.819 1607.22,687.819 1607.78,687.819 1608.34,687.819 1608.9,687.819 1609.46,687.819 1610.02,687.819 1610.57,687.819 1611.13,687.819 1611.69,687.819 1612.25,687.819 1612.81,687.819 1613.37,687.819 1613.93,687.819 1614.49,687.819 1615.05,687.819 1615.61,687.819 1616.17,687.819 1616.73,687.819 1617.29,687.819 1617.84,687.819 1618.4,687.819 1618.96,687.819 1619.52,687.819 1620.08,687.819 1620.64,687.819 1621.2,687.819 1621.76,687.819 1622.32,687.819 1622.88,687.819 1623.44,687.819 1624,687.819 1624.56,687.819 1625.11,687.819 1625.67,687.819 1626.23,687.819 1626.79,687.819 1627.35,687.819 1627.91,687.819 1628.47,687.819 1629.03,687.819 1629.59,687.819 1630.15,687.819 1630.71,687.819 1631.27,687.819 1631.83,687.819 1632.39,687.819 1632.94,687.819 1633.5,687.819 1634.06,687.819 1634.62,687.819 1635.18,687.819 1635.74,687.819 1636.3,687.819 1636.86,687.819 1637.42,687.819 1637.98,687.819 1638.54,687.819 1639.1,687.819 1639.66,687.819 1640.21,687.819 1640.77,687.819 1641.33,687.819 1641.89,687.819 1642.45,687.819 1643.01,687.819 1643.57,687.819 1644.13,687.819 1644.69,687.819 1645.25,687.819 1645.81,687.819 1646.37,687.819 1646.93,687.819 1647.48,687.819 1648.04,687.819 1648.6,687.819 1649.16,687.819 1649.72,687.819 1650.28,687.819 1650.84,687.819 1651.4,687.819 1651.96,687.819 1652.52,687.819 1653.08,687.819 1653.64,687.819 1654.2,687.819 1654.76,687.819 1655.31,687.819 1655.87,687.819 1656.43,687.819 1656.99,687.819 1657.55,687.819 1658.11,687.819 1658.67,687.819 1659.23,687.819 1659.79,687.819 1660.35,687.819 1660.91,687.819 1661.47,687.819 1662.03,687.819 1662.58,687.819 1663.14,687.819 1663.7,687.819 1664.26,687.819 1664.82,687.819 1665.38,687.819 1665.94,687.819 1666.5,687.819 1667.06,687.819 1667.62,687.819 1668.18,687.819 1668.74,687.819 1669.3,687.819 1669.85,687.819 1670.41,687.819 1670.97,687.819 1671.53,687.819 1672.09,687.819 1672.65,687.819 1673.21,687.819 1673.77,687.819 1674.33,687.819 1674.89,687.819 1675.45,687.819 1676.01,687.819 1676.57,687.819 1677.13,687.819 1677.68,687.819 1678.24,687.819 1678.8,687.819 1679.36,687.819 1679.92,687.819 1680.48,687.819 1681.04,687.819 1681.6,687.819 1682.16,687.819 1682.72,687.819 1683.28,687.819 1683.84,687.819 1684.4,687.819 1684.95,687.819 1685.51,687.819 1686.07,687.819 1686.63,687.819 1687.19,687.819 1687.75,687.819 1688.31,687.819 1688.87,687.819 1689.43,687.819 1689.99,687.819 1690.55,687.819 1691.11,687.819 1691.67,687.819 1692.23,687.819 1692.78,687.819 1693.34,687.819 1693.9,687.819 1694.46,687.819 1695.02,687.819 1695.58,687.819 1696.14,687.819 1696.7,687.819 1697.26,687.819 1697.82,687.819 1698.38,687.819 1698.94,687.819 1699.5,687.819 1700.05,687.819 1700.61,687.819 1701.17,687.819 1701.73,687.819 1702.29,687.819 1702.85,687.819 1703.41,687.819 1703.97,687.819 1704.53,687.819 1705.09,687.819 1705.65,687.819 1706.21,687.819 1706.77,687.819 1707.32,687.819 1707.88,687.819 1708.44,687.819 1709,687.819 1709.56,687.819 1710.12,687.819 1710.68,687.819 1711.24,687.819 1711.8,687.819 1712.36,687.819 1712.92,687.819 1713.48,687.819 1714.04,687.819 1714.6,687.819 1715.15,687.819 1715.71,687.819 1716.27,687.819 1716.83,687.819 1717.39,687.819 1717.95,687.819 1718.51,687.819 1719.07,687.819 1719.63,687.819 1720.19,687.819 1720.75,687.819 1721.31,687.819 1721.87,687.819 1722.42,687.819 1722.98,687.819 1723.54,687.819 1724.1,687.819 1724.66,687.819 1725.22,687.819 1725.78,687.819 1726.34,687.819 1726.9,687.819 1727.46,687.819 1728.02,687.819 1728.58,687.819 1729.14,687.819 1729.69,687.819 1730.25,687.819 1730.81,687.819 1731.37,687.819 1731.93,687.819 1732.49,687.819 1733.05,687.819 1733.61,687.819 1734.17,687.819 1734.73,687.819 1735.29,687.819 1735.85,687.819 1736.41,687.819 1736.97,687.819 1737.52,687.819 1738.08,687.819 1738.64,687.819 1739.2,687.819 1739.76,687.819 1740.32,687.819 1740.88,687.819 1741.44,687.819 1742,687.819 1742.56,687.819 1743.12,687.819 1743.68,687.819 1744.24,687.819 1744.79,687.819 1745.35,687.819 1745.91,687.819 1746.47,687.819 1747.03,687.819 1747.59,687.819 1748.15,687.819 1748.71,687.819 1749.27,687.819 1749.83,687.819 1750.39,687.819 1750.95,687.819 1751.51,687.819 1752.06,687.819 1752.62,687.819 1753.18,687.819 1753.74,687.819 1754.3,687.819 1754.86,687.819 1755.42,687.819 1755.98,687.819 1756.54,687.819 1757.1,687.819 1757.66,687.819 1758.22,687.819 1758.78,687.819 1759.34,687.819 1759.89,687.819 1760.45,687.819 1761.01,687.819 1761.57,687.819 1762.13,687.819 1762.69,687.819 1763.25,687.819 1763.81,687.819 1764.37,687.819 1764.93,687.819 1765.49,687.819 1766.05,687.819 1766.61,687.819 1767.16,687.819 1767.72,687.819 1768.28,687.819 1768.84,687.819 1769.4,687.819 1769.96,687.819 1770.52,687.819 1771.08,687.819 1771.64,687.819 1772.2,687.819 1772.76,687.819 1773.32,687.819 1773.88,687.819 1774.43,687.819 1774.99,687.819 1775.55,687.819 1776.11,687.819 1776.67,687.819 1777.23,687.819 1777.79,687.819 1778.35,687.819 1778.91,687.819 1779.47,687.819 1780.03,687.819 1780.59,687.819 1781.15,687.819 1781.71,687.819 1782.26,687.819 1782.82,687.819 1783.38,687.819 1783.94,687.819 1784.5,687.819 1785.06,687.819 1785.62,687.819 1786.18,687.819 1786.74,687.819 1787.3,687.819 1787.86,687.819 1788.42,687.819 1788.98,687.819 1789.53,687.819 1790.09,687.819 1790.65,687.819 1791.21,687.819 1791.77,687.819 1792.33,687.819 1792.89,687.819 1793.45,687.819 1794.01,687.819 1794.57,687.819 1795.13,687.819 1795.69,687.819 1796.25,687.819 1796.8,687.819 1797.36,687.819 1797.92,687.819 1798.48,687.819 1799.04,687.819 1799.6,687.819 1800.16,687.819 1800.72,687.819 1801.28,687.819 1801.84,687.819 1802.4,687.819 1802.96,687.819 1803.52,687.819 1804.08,687.819 1804.63,687.819 1805.19,687.819 1805.75,687.819 1806.31,687.819 1806.87,687.819 1807.43,687.819 1807.99,687.819 1808.55,687.819 1809.11,687.819 1809.67,687.819 1810.23,687.819 1810.79,687.819 1811.35,687.819 1811.9,687.819 1812.46,687.819 1813.02,687.819 1813.58,687.819 1814.14,687.819 1814.7,687.819 1815.26,687.819 1815.82,687.819 1816.38,687.819 1816.94,687.819 1817.5,687.819 1818.06,687.819 1818.62,687.819 1819.18,687.819 1819.73,687.819 1820.29,687.819 1820.85,687.819 1821.41,687.819 1821.97,687.819 1822.53,687.819 1823.09,687.819 1823.65,687.819 1824.21,687.819 1824.77,687.819 1825.33,687.819 1825.89,687.819 1826.45,687.819 1827,687.819 1827.56,687.819 1828.12,687.819 1828.68,687.819 1829.24,687.819 1829.8,687.819 1830.36,687.819 1830.92,687.819 1831.48,687.819 1832.04,687.819 1832.6,687.819 1833.16,687.819 1833.72,687.819 1834.27,687.819 1834.83,687.819 1835.39,687.819 1835.95,687.819 1836.51,687.819 1837.07,687.819 1837.63,687.819 1838.19,687.819 \"/>\n<path clip-path=\"url(#clip813)\" d=\"M720.247 685.818 L720.806 685.818 L721.365 685.818 L721.924 685.818 L722.484 685.818 L723.043 685.818 L723.602 685.818 L724.161 685.818 L724.721 685.818 L725.28 685.818 L725.839 685.818 L726.398 685.818 L726.958 685.818 L727.517 685.818 L728.076 685.818 L728.635 685.818 L729.195 685.818 L729.754 685.818 L730.313 685.818 L730.872 685.818 L731.432 685.818 L731.991 685.818 L732.55 685.818 L733.109 685.818 L733.669 685.818 L734.228 685.818 L734.787 685.818 L735.346 685.818 L735.906 685.818 L736.465 685.818 L737.024 685.818 L737.583 685.818 L738.143 685.818 L738.702 685.818 L739.261 685.818 L739.82 685.818 L740.38 685.818 L740.939 685.818 L741.498 685.818 L742.057 685.818 L742.617 685.818 L743.176 685.818 L743.735 685.818 L744.294 685.818 L744.854 685.818 L745.413 685.818 L745.972 685.818 L746.531 685.818 L747.091 685.818 L747.65 685.818 L748.209 685.818 L748.768 685.818 L749.328 685.818 L749.887 685.818 L750.446 685.818 L751.005 685.818 L751.565 685.818 L752.124 685.818 L752.683 685.818 L753.242 685.818 L753.802 685.818 L754.361 685.818 L754.92 685.818 L755.479 685.818 L756.039 685.818 L756.598 685.818 L757.157 685.818 L757.716 685.818 L758.276 685.818 L758.835 685.818 L759.394 685.818 L759.953 685.818 L760.513 685.818 L761.072 685.818 L761.631 685.818 L762.19 685.818 L762.75 685.818 L763.309 685.818 L763.868 685.818 L764.427 685.818 L764.987 685.818 L765.546 685.818 L766.105 685.818 L766.664 685.818 L767.224 685.818 L767.783 685.818 L768.342 685.818 L768.901 685.818 L769.461 685.818 L770.02 685.818 L770.579 685.818 L771.138 685.818 L771.698 685.818 L772.257 685.818 L772.816 685.818 L773.375 685.818 L773.935 685.818 L774.494 685.818 L775.053 685.818 L775.612 685.818 L776.172 685.818 L776.731 685.818 L777.29 685.818 L777.849 685.818 L778.409 685.818 L778.968 685.818 L779.527 685.818 L780.086 685.818 L780.646 685.818 L781.205 685.818 L781.764 685.818 L782.323 685.818 L782.883 685.818 L783.442 685.818 L784.001 685.818 L784.56 685.818 L785.12 685.818 L785.679 685.818 L786.238 685.818 L786.797 685.818 L787.357 685.818 L787.916 685.818 L788.475 685.818 L789.034 685.818 L789.594 685.818 L790.153 685.818 L790.712 685.818 L791.271 685.818 L791.831 685.818 L792.39 685.818 L792.949 685.818 L793.508 685.818 L794.068 685.818 L794.627 685.818 L795.186 685.818 L795.745 685.818 L796.305 685.818 L796.864 685.818 L797.423 685.818 L797.982 685.818 L798.542 685.818 L799.101 685.818 L799.66 685.818 L800.219 685.818 L800.779 685.818 L801.338 685.818 L801.897 685.818 L802.456 685.818 L803.016 685.818 L803.575 685.818 L804.134 685.818 L804.693 685.818 L805.253 685.818 L805.812 685.818 L806.371 685.818 L806.931 685.818 L807.49 685.818 L808.049 685.818 L808.608 685.818 L809.168 685.818 L809.727 685.818 L810.286 685.818 L810.845 685.818 L811.405 685.818 L811.964 685.818 L812.523 685.818 L813.082 685.818 L813.642 685.818 L814.201 685.818 L814.76 685.818 L815.319 685.818 L815.879 685.818 L816.438 685.818 L816.997 685.818 L817.556 685.818 L818.116 685.818 L818.675 685.818 L819.234 685.818 L819.793 685.818 L820.353 685.818 L820.912 685.818 L821.471 685.818 L822.03 685.818 L822.59 685.818 L823.149 685.818 L823.708 685.818 L824.267 685.818 L824.827 685.818 L825.386 685.818 L825.945 685.818 L826.504 685.818 L827.064 685.818 L827.623 685.818 L828.182 685.818 L828.741 685.818 L829.301 685.818 L829.86 685.818 L830.419 685.818 L830.978 685.818 L831.538 685.818 L832.097 685.818 L832.656 685.818 L833.215 685.818 L833.775 685.818 L834.334 685.818 L834.893 685.818 L835.452 685.818 L836.012 685.818 L836.571 685.818 L837.13 685.818 L837.689 685.818 L838.249 685.818 L838.808 685.818 L839.367 685.818 L839.926 685.818 L840.486 685.818 L841.045 685.818 L841.604 685.818 L842.163 685.818 L842.723 685.818 L843.282 685.818 L843.841 685.818 L844.4 685.818 L844.96 685.818 L845.519 685.818 L846.078 685.818 L846.637 685.818 L847.197 685.818 L847.756 685.818 L848.315 685.818 L848.874 685.818 L849.434 685.818 L849.993 685.818 L850.552 685.818 L851.111 685.818 L851.671 685.818 L852.23 685.818 L852.789 685.818 L853.348 685.818 L853.908 685.818 L854.467 685.818 L855.026 685.818 L855.585 685.818 L856.145 685.818 L856.704 685.818 L857.263 685.818 L857.822 685.818 L858.382 685.818 L858.941 685.818 L859.5 685.818 L860.059 685.818 L860.619 685.818 L861.178 685.818 L861.737 685.818 L862.296 685.818 L862.856 685.818 L863.415 685.818 L863.974 685.818 L864.533 685.818 L865.093 685.818 L865.652 685.818 L866.211 685.818 L866.77 685.818 L867.33 685.818 L867.889 685.818 L868.448 685.818 L869.007 685.818 L869.567 685.818 L870.126 685.818 L870.685 685.818 L871.244 685.818 L871.804 685.818 L872.363 685.818 L872.922 685.818 L873.481 685.818 L874.041 685.818 L874.6 685.818 L875.159 685.818 L875.718 685.818 L876.278 685.818 L876.837 685.818 L877.396 685.818 L877.955 685.818 L878.515 685.818 L879.074 685.818 L879.633 685.818 L880.192 685.818 L880.752 685.818 L881.311 685.818 L881.87 685.818 L882.429 685.818 L882.989 685.818 L883.548 685.818 L884.107 685.818 L884.666 685.818 L885.226 685.818 L885.785 685.818 L886.344 685.818 L886.903 685.818 L887.463 685.818 L888.022 685.818 L888.581 685.818 L889.14 685.818 L889.7 685.818 L890.259 685.818 L890.818 685.818 L891.377 685.818 L891.937 685.818 L892.496 685.818 L893.055 685.818 L893.614 685.818 L894.174 685.818 L894.733 685.818 L895.292 685.818 L895.851 685.818 L896.411 685.818 L896.97 685.818 L897.529 685.818 L898.088 685.818 L898.648 685.818 L899.207 685.818 L899.766 685.818 L900.325 685.818 L900.885 685.818 L901.444 685.818 L902.003 685.818 L902.562 685.818 L903.122 685.818 L903.681 685.818 L904.24 685.818 L904.799 685.818 L905.359 685.818 L905.918 685.818 L906.477 685.818 L907.036 685.818 L907.596 685.818 L908.155 685.818 L908.714 685.818 L909.273 685.818 L909.833 685.818 L910.392 685.818 L910.951 685.818 L911.51 685.818 L912.07 685.818 L912.629 685.818 L913.188 685.818 L913.747 685.818 L914.307 685.818 L914.866 685.818 L915.425 685.818 L915.984 685.818 L916.544 685.818 L917.103 685.818 L917.662 685.818 L918.221 685.818 L918.781 685.818 L919.34 685.818 L919.899 685.818 L920.458 685.818 L921.018 685.818 L921.577 685.818 L922.136 685.818 L922.695 685.818 L923.255 685.818 L923.814 685.818 L924.373 685.818 L924.932 685.818 L925.492 685.818 L926.051 685.818 L926.61 685.818 L927.169 685.818 L927.729 685.818 L928.288 685.818 L928.847 685.818 L929.406 685.818 L929.966 685.818 L930.525 685.818 L931.084 685.818 L931.644 685.818 L932.203 685.818 L932.762 685.818 L933.321 685.818 L933.881 685.818 L934.44 685.818 L934.999 685.818 L935.558 685.818 L936.118 685.818 L936.677 685.818 L937.236 685.818 L937.795 685.818 L938.355 685.818 L938.914 685.818 L939.473 685.818 L940.032 685.818 L940.592 685.818 L941.151 685.818 L941.71 685.818 L942.269 685.818 L942.829 685.818 L943.388 685.818 L943.947 685.818 L944.506 685.818 L945.066 685.818 L945.625 685.818 L946.184 685.818 L946.743 685.818 L947.303 685.818 L947.862 685.818 L948.421 685.818 L948.98 685.818 L949.54 685.818 L950.099 685.818 L950.658 685.818 L951.217 685.818 L951.777 685.818 L952.336 685.818 L952.895 685.818 L953.454 685.818 L954.014 685.818 L954.573 685.818 L955.132 685.818 L955.691 685.818 L956.251 685.818 L956.81 685.818 L957.369 685.818 L957.928 685.818 L958.488 685.818 L959.047 685.818 L959.606 685.818 L960.165 685.818 L960.725 685.818 L961.284 685.818 L961.843 685.818 L962.402 685.818 L962.962 685.818 L963.521 685.818 L964.08 685.818 L964.639 685.818 L965.199 685.818 L965.758 685.818 L966.317 685.818 L966.876 685.818 L967.436 685.818 L967.995 685.818 L968.554 685.818 L969.113 685.818 L969.673 685.818 L970.232 685.818 L970.791 685.818 L971.35 685.818 L971.91 685.818 L972.469 685.818 L973.028 685.818 L973.587 685.818 L974.147 685.818 L974.706 685.818 L975.265 685.818 L975.824 685.818 L976.384 685.818 L976.943 685.818 L977.502 685.818 L978.061 685.818 L978.621 685.818 L979.18 685.818 L979.739 685.818 L980.298 685.818 L980.858 685.818 L981.417 685.818 L981.976 685.818 L982.535 685.818 L983.095 685.818 L983.654 685.818 L984.213 685.818 L984.772 685.818 L985.332 685.818 L985.891 685.818 L986.45 685.818 L987.009 685.818 L987.569 685.818 L988.128 685.818 L988.687 685.818 L989.246 685.818 L989.806 685.818 L990.365 685.818 L990.924 685.818 L991.483 685.818 L992.043 685.818 L992.602 685.818 L993.161 685.818 L993.72 685.818 L994.28 685.818 L994.839 685.818 L995.398 685.818 L995.957 685.818 L996.517 685.818 L997.076 685.818 L997.635 685.818 L998.194 685.818 L998.754 685.818 L999.313 685.818 L999.872 685.818 L1000.43 685.818 L1000.99 685.818 L1001.55 685.818 L1002.11 685.818 L1002.67 685.818 L1003.23 685.818 L1003.79 685.818 L1004.35 685.818 L1004.91 685.818 L1005.46 685.818 L1006.02 685.818 L1006.58 685.818 L1007.14 685.818 L1007.7 685.818 L1008.26 685.818 L1008.82 685.818 L1009.38 685.818 L1009.94 685.818 L1010.5 685.818 L1011.06 685.818 L1011.62 685.818 L1012.18 685.818 L1012.73 685.818 L1013.29 685.818 L1013.85 685.818 L1014.41 685.818 L1014.97 685.818 L1015.53 685.818 L1016.09 685.818 L1016.65 685.818 L1017.21 685.818 L1017.77 685.818 L1018.33 685.818 L1018.89 685.818 L1019.45 685.818 L1020.01 685.818 L1020.56 685.818 L1021.12 685.818 L1021.68 685.818 L1022.24 685.818 L1022.8 685.818 L1023.36 685.818 L1023.92 685.818 L1024.48 685.818 L1025.04 685.818 L1025.6 685.818 L1026.16 685.818 L1026.72 685.818 L1027.28 685.818 L1027.83 685.818 L1028.39 685.818 L1028.95 685.818 L1029.51 685.818 L1030.07 685.818 L1030.63 685.818 L1031.19 685.818 L1031.75 685.818 L1032.31 685.818 L1032.87 685.818 L1033.43 685.818 L1033.99 685.818 L1034.55 685.818 L1035.1 685.818 L1035.66 685.818 L1036.22 685.818 L1036.78 685.818 L1037.34 685.818 L1037.9 685.818 L1038.46 685.818 L1039.02 685.818 L1039.58 685.818 L1040.14 685.818 L1040.7 685.818 L1041.26 685.818 L1041.82 685.818 L1042.38 685.818 L1042.93 685.818 L1043.49 685.818 L1044.05 685.818 L1044.61 685.818 L1045.17 685.818 L1045.73 685.818 L1046.29 685.818 L1046.85 685.818 L1047.41 685.818 L1047.97 685.818 L1048.53 685.818 L1049.09 685.818 L1049.65 685.818 L1050.2 685.818 L1050.76 685.818 L1051.32 685.818 L1051.88 685.818 L1052.44 685.818 L1053 685.818 L1053.56 685.818 L1054.12 685.818 L1054.68 685.818 L1055.24 685.818 L1055.8 685.818 L1056.36 685.818 L1056.92 685.818 L1057.48 685.818 L1058.03 685.818 L1058.59 685.818 L1059.15 685.818 L1059.71 685.818 L1060.27 685.818 L1060.83 685.818 L1061.39 685.818 L1061.95 685.818 L1062.51 685.818 L1063.07 685.818 L1063.63 685.818 L1064.19 685.818 L1064.75 685.818 L1065.3 685.818 L1065.86 685.818 L1066.42 685.818 L1066.98 685.818 L1067.54 685.818 L1068.1 685.818 L1068.66 685.818 L1069.22 685.818 L1069.78 685.818 L1070.34 685.818 L1070.9 685.818 L1071.46 685.818 L1072.02 685.818 L1072.57 685.818 L1073.13 685.818 L1073.69 685.818 L1074.25 685.818 L1074.81 685.818 L1075.37 685.818 L1075.93 685.818 L1076.49 685.818 L1077.05 685.818 L1077.61 685.818 L1078.17 685.818 L1078.73 685.818 L1079.29 685.818 L1079.85 685.818 L1080.4 685.818 L1080.96 685.818 L1081.52 685.818 L1082.08 685.818 L1082.64 685.818 L1083.2 685.818 L1083.76 685.818 L1084.32 685.818 L1084.88 685.818 L1085.44 685.818 L1086 685.818 L1086.56 685.818 L1087.12 685.818 L1087.67 685.818 L1088.23 685.818 L1088.79 685.818 L1089.35 685.818 L1089.91 685.818 L1090.47 685.818 L1091.03 685.818 L1091.59 685.818 L1092.15 685.818 L1092.71 685.818 L1093.27 685.818 L1093.83 685.818 L1094.39 685.818 L1094.94 685.818 L1095.5 685.818 L1096.06 685.818 L1096.62 685.818 L1097.18 685.818 L1097.74 685.818 L1098.3 685.818 L1098.86 685.818 L1099.42 685.818 L1099.98 685.818 L1100.54 685.818 L1101.1 685.818 L1101.66 685.818 L1102.22 685.818 L1102.77 685.818 L1103.33 685.818 L1103.89 685.818 L1104.45 685.818 L1105.01 685.818 L1105.57 685.818 L1106.13 685.818 L1106.69 685.818 L1107.25 685.818 L1107.81 685.818 L1108.37 685.818 L1108.93 685.818 L1109.49 685.818 L1110.04 685.818 L1110.6 685.818 L1111.16 685.818 L1111.72 685.818 L1112.28 685.818 L1112.84 685.818 L1113.4 685.818 L1113.96 685.818 L1114.52 685.818 L1115.08 685.818 L1115.64 685.818 L1116.2 685.818 L1116.76 685.818 L1117.31 685.818 L1117.87 685.818 L1118.43 685.818 L1118.99 685.818 L1119.55 685.818 L1120.11 685.818 L1120.67 685.818 L1121.23 685.818 L1121.79 685.818 L1122.35 685.818 L1122.91 685.818 L1123.47 685.818 L1124.03 685.818 L1124.59 685.818 L1125.14 685.818 L1125.7 685.818 L1126.26 685.818 L1126.82 685.818 L1127.38 685.818 L1127.94 685.818 L1128.5 685.818 L1129.06 685.818 L1129.62 685.818 L1130.18 685.818 L1130.74 685.818 L1131.3 685.818 L1131.86 685.818 L1132.41 685.818 L1132.97 685.818 L1133.53 685.818 L1134.09 685.818 L1134.65 685.818 L1135.21 685.818 L1135.77 685.818 L1136.33 685.818 L1136.89 685.818 L1137.45 685.818 L1138.01 685.818 L1138.57 685.818 L1139.13 685.818 L1139.68 685.818 L1140.24 685.818 L1140.8 685.818 L1141.36 685.818 L1141.92 685.818 L1142.48 685.818 L1143.04 685.818 L1143.6 685.818 L1144.16 685.818 L1144.72 685.818 L1145.28 685.818 L1145.84 685.818 L1146.4 685.818 L1146.96 685.818 L1147.51 685.818 L1148.07 685.818 L1148.63 685.818 L1149.19 685.818 L1149.75 685.818 L1150.31 685.818 L1150.87 685.818 L1151.43 685.818 L1151.99 685.818 L1152.55 685.818 L1153.11 685.818 L1153.67 685.818 L1154.23 685.818 L1154.78 685.818 L1155.34 685.818 L1155.9 685.818 L1156.46 685.818 L1157.02 685.818 L1157.58 685.818 L1158.14 685.818 L1158.7 685.818 L1159.26 685.818 L1159.82 685.818 L1160.38 685.818 L1160.94 685.818 L1161.5 685.818 L1162.05 685.818 L1162.61 685.818 L1163.17 685.818 L1163.73 685.818 L1164.29 685.818 L1164.85 685.818 L1165.41 685.818 L1165.97 685.818 L1166.53 685.818 L1167.09 685.818 L1167.65 685.818 L1168.21 685.818 L1168.77 685.818 L1169.33 685.818 L1169.88 685.818 L1170.44 685.818 L1171 685.818 L1171.56 685.818 L1172.12 685.818 L1172.68 685.818 L1173.24 685.818 L1173.8 685.818 L1174.36 685.818 L1174.92 685.818 L1175.48 685.818 L1176.04 685.818 L1176.6 685.818 L1177.15 685.818 L1177.71 685.818 L1178.27 685.818 L1178.83 685.818 L1179.39 685.818 L1179.95 685.818 L1180.51 685.818 L1181.07 685.818 L1181.63 685.818 L1182.19 685.818 L1182.75 685.818 L1183.31 685.818 L1183.87 685.818 L1184.43 685.818 L1184.98 685.818 L1185.54 685.818 L1186.1 685.818 L1186.66 685.818 L1187.22 685.818 L1187.78 685.818 L1188.34 685.818 L1188.9 685.818 L1189.46 685.818 L1190.02 685.818 L1190.58 685.818 L1191.14 685.818 L1191.7 685.818 L1192.25 685.818 L1192.81 685.818 L1193.37 685.818 L1193.93 685.818 L1194.49 685.818 L1195.05 685.818 L1195.61 685.818 L1196.17 685.818 L1196.73 685.818 L1197.29 685.818 L1197.85 685.818 L1198.41 685.818 L1198.97 685.818 L1199.52 685.818 L1200.08 685.818 L1200.64 685.818 L1201.2 685.818 L1201.76 685.818 L1202.32 685.818 L1202.88 685.818 L1203.44 685.818 L1204 685.818 L1204.56 685.818 L1205.12 685.818 L1205.68 685.818 L1206.24 685.818 L1206.8 685.818 L1207.35 685.818 L1207.91 685.818 L1208.47 685.818 L1209.03 685.818 L1209.59 685.818 L1210.15 685.818 L1210.71 685.818 L1211.27 685.818 L1211.83 685.818 L1212.39 685.818 L1212.95 685.818 L1213.51 685.818 L1214.07 685.818 L1214.62 685.818 L1215.18 685.818 L1215.74 685.818 L1216.3 685.818 L1216.86 685.818 L1217.42 685.818 L1217.98 685.818 L1218.54 685.818 L1219.1 685.818 L1219.66 685.818 L1220.22 685.818 L1220.78 685.818 L1221.34 685.818 L1221.89 685.818 L1222.45 685.818 L1223.01 685.818 L1223.57 685.818 L1224.13 685.818 L1224.69 685.818 L1225.25 685.818 L1225.81 685.818 L1226.37 685.818 L1226.93 685.818 L1227.49 685.818 L1228.05 685.818 L1228.61 685.818 L1229.17 685.818 L1229.72 685.818 L1230.28 685.818 L1230.84 685.818 L1231.4 685.818 L1231.96 685.818 L1232.52 685.818 L1233.08 685.818 L1233.64 685.818 L1234.2 685.818 L1234.76 685.818 L1235.32 685.818 L1235.88 685.818 L1236.44 685.818 L1236.99 685.818 L1237.55 685.818 L1238.11 685.818 L1238.67 685.818 L1239.23 685.818 L1239.79 685.818 L1240.35 685.818 L1240.91 685.818 L1241.47 685.818 L1242.03 685.818 L1242.59 685.818 L1243.15 685.818 L1243.71 685.818 L1244.26 685.818 L1244.82 685.818 L1245.38 685.818 L1245.94 685.818 L1246.5 685.818 L1247.06 685.818 L1247.62 685.818 L1248.18 685.818 L1248.74 685.818 L1249.3 685.818 L1249.86 685.818 L1250.42 685.818 L1250.98 685.818 L1251.54 685.818 L1252.09 685.818 L1252.65 685.818 L1253.21 685.818 L1253.77 685.818 L1254.33 685.818 L1254.89 685.818 L1255.45 685.818 L1256.01 685.818 L1256.57 685.818 L1257.13 685.818 L1257.69 685.818 L1258.25 685.818 L1258.81 685.818 L1259.36 685.818 L1259.92 685.818 L1260.48 685.818 L1261.04 685.818 L1261.6 685.818 L1262.16 685.818 L1262.72 685.818 L1263.28 685.818 L1263.84 685.818 L1264.4 685.818 L1264.96 685.818 L1265.52 685.818 L1266.08 685.818 L1266.63 685.818 L1267.19 685.818 L1267.75 685.818 L1268.31 685.818 L1268.87 685.818 L1269.43 685.818 L1269.99 685.818 L1270.55 685.818 L1271.11 685.818 L1271.67 685.818 L1272.23 685.818 L1272.79 685.818 L1273.35 685.818 L1273.91 685.818 L1274.46 685.818 L1275.02 685.818 L1275.58 685.818 L1276.14 685.818 L1276.7 685.818 L1277.26 685.818 L1277.82 685.818 L1278.38 685.818 L1278.94 685.818 L1279.5 685.818 L1280.06 685.818 L1280.62 685.818 L1281.18 685.818 L1281.73 685.818 L1282.29 685.818 L1282.85 685.818 L1283.41 685.818 L1283.97 685.818 L1284.53 685.818 L1285.09 685.818 L1285.65 685.818 L1286.21 685.818 L1286.77 685.818 L1287.33 685.818 L1287.89 685.818 L1288.45 685.818 L1289 685.818 L1289.56 685.818 L1290.12 685.818 L1290.68 685.818 L1291.24 685.818 L1291.8 685.818 L1292.36 685.818 L1292.92 685.818 L1293.48 685.818 L1294.04 685.818 L1294.6 685.818 L1295.16 685.818 L1295.72 685.818 L1296.28 685.818 L1296.83 685.818 L1297.39 685.818 L1297.95 685.818 L1298.51 685.818 L1299.07 685.818 L1299.63 685.818 L1300.19 685.818 L1300.75 685.818 L1301.31 685.818 L1301.87 685.818 L1302.43 685.818 L1302.99 685.818 L1303.55 685.818 L1304.1 685.818 L1304.66 685.818 L1305.22 685.818 L1305.78 685.818 L1306.34 685.818 L1306.9 685.818 L1307.46 685.818 L1308.02 685.818 L1308.58 685.818 L1309.14 685.818 L1309.7 685.818 L1310.26 685.818 L1310.82 685.818 L1311.38 685.818 L1311.93 685.818 L1312.49 685.818 L1313.05 685.818 L1313.61 685.818 L1314.17 685.818 L1314.73 685.818 L1315.29 685.818 L1315.85 685.818 L1316.41 685.818 L1316.97 685.818 L1317.53 685.818 L1318.09 685.818 L1318.65 685.818 L1319.2 685.818 L1319.76 685.818 L1320.32 685.818 L1320.88 685.818 L1321.44 685.818 L1322 685.818 L1322.56 685.818 L1323.12 685.818 L1323.68 685.818 L1324.24 685.818 L1324.8 685.818 L1325.36 685.818 L1325.92 685.818 L1326.47 685.818 L1327.03 685.818 L1327.59 685.818 L1328.15 685.818 L1328.71 685.818 L1329.27 685.818 L1329.83 685.818 L1330.39 685.818 L1330.95 685.818 L1331.51 685.818 L1332.07 685.818 L1332.63 685.818 L1333.19 685.818 L1333.75 685.818 L1334.3 685.818 L1334.86 685.818 L1335.42 685.818 L1335.98 685.818 L1336.54 685.818 L1337.1 685.818 L1337.66 685.818 L1338.22 685.818 L1338.78 685.818 L1339.34 685.818 L1339.9 685.818 L1340.46 685.818 L1341.02 685.818 L1341.57 685.818 L1342.13 685.818 L1342.69 685.818 L1343.25 685.818 L1343.81 685.818 L1344.37 685.818 L1344.93 685.818 L1345.49 685.818 L1346.05 685.818 L1346.61 685.818 L1347.17 685.818 L1347.73 685.818 L1348.29 685.818 L1348.84 685.818 L1349.4 685.818 L1349.96 685.818 L1350.52 685.818 L1351.08 685.818 L1351.64 685.818 L1352.2 685.818 L1352.76 685.818 L1353.32 685.818 L1353.88 685.818 L1354.44 685.818 L1355 685.818 L1355.56 685.818 L1356.12 685.818 L1356.67 685.818 L1357.23 685.818 L1357.79 685.818 L1358.35 685.818 L1358.91 685.818 L1359.47 685.818 L1360.03 685.818 L1360.59 685.818 L1361.15 685.818 L1361.71 685.818 L1362.27 685.818 L1362.83 685.818 L1363.39 685.818 L1363.94 685.818 L1364.5 685.818 L1365.06 685.818 L1365.62 685.818 L1366.18 685.818 L1366.74 685.818 L1367.3 685.818 L1367.86 685.818 L1368.42 685.818 L1368.98 685.818 L1369.54 685.818 L1370.1 685.818 L1370.66 685.818 L1371.21 685.818 L1371.77 685.818 L1372.33 685.818 L1372.89 685.818 L1373.45 685.818 L1374.01 685.818 L1374.57 685.818 L1375.13 685.818 L1375.69 685.818 L1376.25 685.818 L1376.81 685.818 L1377.37 685.818 L1377.93 685.818 L1378.49 685.818 L1379.04 685.818 L1379.6 685.818 L1380.16 685.818 L1380.72 685.818 L1381.28 685.818 L1381.84 685.818 L1382.4 685.818 L1382.96 685.818 L1383.52 685.818 L1384.08 685.818 L1384.64 685.818 L1385.2 685.818 L1385.76 685.818 L1386.31 685.818 L1386.87 685.818 L1387.43 685.818 L1387.99 685.818 L1388.55 685.818 L1389.11 685.818 L1389.67 685.818 L1390.23 685.818 L1390.79 685.818 L1391.35 685.818 L1391.91 685.818 L1392.47 685.818 L1393.03 685.818 L1393.58 685.818 L1394.14 685.818 L1394.7 685.818 L1395.26 685.818 L1395.82 685.818 L1396.38 685.818 L1396.94 685.818 L1397.5 685.818 L1398.06 685.818 L1398.62 685.818 L1399.18 685.818 L1399.74 685.818 L1400.3 685.818 L1400.86 685.818 L1401.41 685.818 L1401.97 685.818 L1402.53 685.818 L1403.09 685.818 L1403.65 685.818 L1404.21 685.818 L1404.77 685.818 L1405.33 685.818 L1405.89 685.818 L1406.45 685.818 L1407.01 685.818 L1407.57 685.818 L1408.13 685.818 L1408.68 685.818 L1409.24 685.818 L1409.8 685.818 L1410.36 685.818 L1410.92 685.818 L1411.48 685.818 L1412.04 685.818 L1412.6 685.818 L1413.16 685.818 L1413.72 685.818 L1414.28 685.818 L1414.84 685.818 L1415.4 685.818 L1415.95 685.818 L1416.51 685.818 L1417.07 685.818 L1417.63 685.818 L1418.19 685.818 L1418.75 685.818 L1419.31 685.818 L1419.87 685.818 L1420.43 685.818 L1420.99 685.818 L1421.55 685.818 L1422.11 685.818 L1422.67 685.818 L1423.23 685.818 L1423.78 685.818 L1424.34 685.818 L1424.9 685.818 L1425.46 685.818 L1426.02 685.818 L1426.58 685.818 L1427.14 685.818 L1427.7 685.818 L1428.26 685.818 L1428.82 685.818 L1429.38 685.818 L1429.94 685.818 L1430.5 685.818 L1431.05 685.818 L1431.61 685.818 L1432.17 685.818 L1432.73 685.818 L1433.29 685.818 L1433.85 685.818 L1434.41 685.818 L1434.97 685.818 L1435.53 685.818 L1436.09 685.818 L1436.65 685.818 L1437.21 685.818 L1437.77 685.818 L1438.33 685.818 L1438.88 685.818 L1439.44 685.818 L1440 685.818 L1440.56 685.818 L1441.12 685.818 L1441.68 685.818 L1442.24 685.818 L1442.8 685.818 L1443.36 685.818 L1443.92 685.818 L1444.48 685.818 L1445.04 685.818 L1445.6 685.818 L1446.15 685.818 L1446.71 685.818 L1447.27 685.818 L1447.83 685.818 L1448.39 685.818 L1448.95 685.818 L1449.51 685.818 L1450.07 685.818 L1450.63 685.818 L1451.19 685.818 L1451.75 685.818 L1452.31 685.818 L1452.87 685.818 L1453.42 685.818 L1453.98 685.818 L1454.54 685.818 L1455.1 685.818 L1455.66 685.818 L1456.22 685.818 L1456.78 685.818 L1457.34 685.818 L1457.9 685.818 L1458.46 685.818 L1459.02 685.818 L1459.58 685.818 L1460.14 685.818 L1460.7 685.818 L1461.25 685.818 L1461.81 685.818 L1462.37 685.818 L1462.93 685.818 L1463.49 685.818 L1464.05 685.818 L1464.61 685.818 L1465.17 685.818 L1465.73 685.818 L1466.29 685.818 L1466.85 685.818 L1467.41 685.818 L1467.97 685.818 L1468.52 685.818 L1469.08 685.818 L1469.64 685.818 L1470.2 685.818 L1470.76 685.818 L1471.32 685.818 L1471.88 685.818 L1472.44 685.818 L1473 685.818 L1473.56 685.818 L1474.12 685.818 L1474.68 685.818 L1475.24 685.818 L1475.79 685.818 L1476.35 685.818 L1476.91 685.818 L1477.47 685.818 L1478.03 685.818 L1478.59 685.818 L1479.15 685.818 L1479.71 685.818 L1480.27 685.818 L1480.83 685.818 L1481.39 685.818 L1481.95 685.818 L1482.51 685.818 L1483.07 685.818 L1483.62 685.818 L1484.18 685.818 L1484.74 685.818 L1485.3 685.818 L1485.86 685.818 L1486.42 685.818 L1486.98 685.818 L1487.54 685.818 L1488.1 685.818 L1488.66 685.818 L1489.22 685.818 L1489.78 685.818 L1490.34 685.818 L1490.89 685.818 L1491.45 685.818 L1492.01 685.818 L1492.57 685.818 L1493.13 685.818 L1493.69 685.818 L1494.25 685.818 L1494.81 685.818 L1495.37 685.818 L1495.93 685.818 L1496.49 685.818 L1497.05 685.818 L1497.61 685.818 L1498.16 685.818 L1498.72 685.818 L1499.28 685.818 L1499.84 685.818 L1500.4 685.818 L1500.96 685.818 L1501.52 685.818 L1502.08 685.818 L1502.64 685.818 L1503.2 685.818 L1503.76 685.818 L1504.32 685.818 L1504.88 685.818 L1505.44 685.818 L1505.99 685.818 L1506.55 685.818 L1507.11 685.818 L1507.67 685.818 L1508.23 685.818 L1508.79 685.818 L1509.35 685.818 L1509.91 685.818 L1510.47 685.818 L1511.03 685.818 L1511.59 685.818 L1512.15 685.818 L1512.71 685.818 L1513.26 685.818 L1513.82 685.818 L1514.38 685.818 L1514.94 685.818 L1515.5 685.818 L1516.06 685.818 L1516.62 685.818 L1517.18 685.818 L1517.74 685.818 L1518.3 685.818 L1518.86 685.818 L1519.42 685.818 L1519.98 685.818 L1520.53 685.818 L1521.09 685.818 L1521.65 685.818 L1522.21 685.818 L1522.77 685.818 L1523.33 685.818 L1523.89 685.818 L1524.45 685.818 L1525.01 685.818 L1525.57 685.818 L1526.13 685.818 L1526.69 685.818 L1527.25 685.818 L1527.81 685.818 L1528.36 685.818 L1528.92 685.818 L1529.48 685.818 L1530.04 685.818 L1530.6 685.818 L1531.16 685.818 L1531.72 685.818 L1532.28 685.818 L1532.84 685.818 L1533.4 685.818 L1533.96 685.818 L1534.52 685.818 L1535.08 685.818 L1535.63 685.818 L1536.19 685.818 L1536.75 685.818 L1537.31 685.818 L1537.87 685.818 L1538.43 685.818 L1538.99 685.818 L1539.55 685.818 L1540.11 685.818 L1540.67 685.818 L1541.23 685.818 L1541.79 685.818 L1542.35 685.818 L1542.9 685.818 L1543.46 685.818 L1544.02 685.818 L1544.58 685.818 L1545.14 685.818 L1545.7 685.818 L1546.26 685.818 L1546.82 685.818 L1547.38 685.818 L1547.94 685.818 L1548.5 685.818 L1549.06 685.818 L1549.62 685.818 L1550.18 685.818 L1550.73 685.818 L1551.29 685.818 L1551.85 685.818 L1552.41 685.818 L1552.97 685.818 L1553.53 685.818 L1554.09 685.818 L1554.65 685.818 L1555.21 685.818 L1555.77 685.818 L1556.33 685.818 L1556.89 685.818 L1557.45 685.818 L1558 685.818 L1558.56 685.818 L1559.12 685.818 L1559.68 685.818 L1560.24 685.818 L1560.8 685.818 L1561.36 685.818 L1561.92 685.818 L1562.48 685.818 L1563.04 685.818 L1563.6 685.818 L1564.16 685.818 L1564.72 685.818 L1565.28 685.818 L1565.83 685.818 L1566.39 685.818 L1566.95 685.818 L1567.51 685.818 L1568.07 685.818 L1568.63 685.818 L1569.19 685.818 L1569.75 685.818 L1570.31 685.818 L1570.87 685.818 L1571.43 685.818 L1571.99 685.818 L1572.55 685.818 L1573.1 685.818 L1573.66 685.818 L1574.22 685.818 L1574.78 685.818 L1575.34 685.818 L1575.9 685.818 L1576.46 685.818 L1577.02 685.818 L1577.58 685.818 L1578.14 685.818 L1578.7 685.818 L1579.26 685.818 L1579.82 685.818 L1580.37 685.818 L1580.93 685.818 L1581.49 685.818 L1582.05 685.818 L1582.61 685.818 L1583.17 685.818 L1583.73 685.818 L1584.29 685.818 L1584.85 685.818 L1585.41 685.818 L1585.97 685.818 L1586.53 685.818 L1587.09 685.818 L1587.65 685.818 L1588.2 685.818 L1588.76 685.818 L1589.32 685.818 L1589.88 685.818 L1590.44 685.818 L1591 685.818 L1591.56 685.818 L1592.12 685.818 L1592.68 685.818 L1593.24 685.818 L1593.8 685.818 L1594.36 685.818 L1594.92 685.818 L1595.47 685.818 L1596.03 685.818 L1596.59 685.818 L1597.15 685.818 L1597.71 685.818 L1598.27 685.818 L1598.83 685.818 L1599.39 685.818 L1599.95 685.818 L1600.51 685.818 L1601.07 685.818 L1601.63 685.818 L1602.19 685.818 L1602.74 685.818 L1603.3 685.818 L1603.86 685.818 L1604.42 685.818 L1604.98 685.818 L1605.54 685.818 L1606.1 685.818 L1606.66 685.818 L1607.22 685.818 L1607.78 685.818 L1608.34 685.818 L1608.9 685.818 L1609.46 685.818 L1610.02 685.818 L1610.57 685.818 L1611.13 685.818 L1611.69 685.818 L1612.25 685.818 L1612.81 685.818 L1613.37 685.818 L1613.93 685.818 L1614.49 685.818 L1615.05 685.818 L1615.61 685.818 L1616.17 685.818 L1616.73 685.818 L1617.29 685.818 L1617.84 685.818 L1618.4 685.818 L1618.96 685.818 L1619.52 685.818 L1620.08 685.818 L1620.64 685.818 L1621.2 685.818 L1621.76 685.818 L1622.32 685.818 L1622.88 685.818 L1623.44 685.818 L1624 685.818 L1624.56 685.818 L1625.11 685.818 L1625.67 685.818 L1626.23 685.818 L1626.79 685.818 L1627.35 685.818 L1627.91 685.818 L1628.47 685.818 L1629.03 685.818 L1629.59 685.818 L1630.15 685.818 L1630.71 685.818 L1631.27 685.818 L1631.83 685.818 L1632.39 685.818 L1632.94 685.818 L1633.5 685.818 L1634.06 685.818 L1634.62 685.818 L1635.18 685.818 L1635.74 685.818 L1636.3 685.818 L1636.86 685.818 L1637.42 685.818 L1637.98 685.818 L1638.54 685.818 L1639.1 685.818 L1639.66 685.818 L1640.21 685.818 L1640.77 685.818 L1641.33 685.818 L1641.89 685.818 L1642.45 685.818 L1643.01 685.818 L1643.57 685.818 L1644.13 685.818 L1644.69 685.818 L1645.25 685.818 L1645.81 685.818 L1646.37 685.818 L1646.93 685.818 L1647.48 685.818 L1648.04 685.818 L1648.6 685.818 L1649.16 685.818 L1649.72 685.818 L1650.28 685.818 L1650.84 685.818 L1651.4 685.818 L1651.96 685.818 L1652.52 685.818 L1653.08 685.818 L1653.64 685.818 L1654.2 685.818 L1654.76 685.818 L1655.31 685.818 L1655.87 685.818 L1656.43 685.818 L1656.99 685.818 L1657.55 685.818 L1658.11 685.818 L1658.67 685.818 L1659.23 685.818 L1659.79 685.818 L1660.35 685.818 L1660.91 685.818 L1661.47 685.818 L1662.03 685.818 L1662.58 685.818 L1663.14 685.818 L1663.7 685.818 L1664.26 685.818 L1664.82 685.818 L1665.38 685.818 L1665.94 685.818 L1666.5 685.818 L1667.06 685.818 L1667.62 685.818 L1668.18 685.818 L1668.74 685.818 L1669.3 685.818 L1669.85 685.818 L1670.41 685.818 L1670.97 685.818 L1671.53 685.818 L1672.09 685.818 L1672.65 685.818 L1673.21 685.818 L1673.77 685.818 L1674.33 685.818 L1674.89 685.818 L1675.45 685.818 L1676.01 685.818 L1676.57 685.818 L1677.13 685.818 L1677.68 685.818 L1678.24 685.818 L1678.8 685.818 L1679.36 685.818 L1679.92 685.818 L1680.48 685.818 L1681.04 685.818 L1681.6 685.818 L1682.16 685.818 L1682.72 685.818 L1683.28 685.818 L1683.84 685.818 L1684.4 685.818 L1684.95 685.818 L1685.51 685.818 L1686.07 685.818 L1686.63 685.818 L1687.19 685.818 L1687.75 685.818 L1688.31 685.818 L1688.87 685.818 L1689.43 685.818 L1689.99 685.818 L1690.55 685.818 L1691.11 685.818 L1691.67 685.818 L1692.23 685.818 L1692.78 685.818 L1693.34 685.818 L1693.9 685.818 L1694.46 685.818 L1695.02 685.818 L1695.58 685.818 L1696.14 685.818 L1696.7 685.818 L1697.26 685.818 L1697.82 685.818 L1698.38 685.818 L1698.94 685.818 L1699.5 685.818 L1700.05 685.818 L1700.61 685.818 L1701.17 685.818 L1701.73 685.818 L1702.29 685.818 L1702.85 685.818 L1703.41 685.818 L1703.97 685.818 L1704.53 685.818 L1705.09 685.818 L1705.65 685.818 L1706.21 685.818 L1706.77 685.818 L1707.32 685.818 L1707.88 685.818 L1708.44 685.818 L1709 685.818 L1709.56 685.818 L1710.12 685.818 L1710.68 685.818 L1711.24 685.818 L1711.8 685.818 L1712.36 685.818 L1712.92 685.818 L1713.48 685.818 L1714.04 685.818 L1714.6 685.818 L1715.15 685.818 L1715.71 685.818 L1716.27 685.818 L1716.83 685.818 L1717.39 685.818 L1717.95 685.818 L1718.51 685.818 L1719.07 685.818 L1719.63 685.818 L1720.19 685.818 L1720.75 685.818 L1721.31 685.818 L1721.87 685.818 L1722.42 685.818 L1722.98 685.818 L1723.54 685.818 L1724.1 685.818 L1724.66 685.818 L1725.22 685.818 L1725.78 685.818 L1726.34 685.818 L1726.9 685.818 L1727.46 685.818 L1728.02 685.818 L1728.58 685.818 L1729.14 685.818 L1729.69 685.818 L1730.25 685.818 L1730.81 685.818 L1731.37 685.818 L1731.93 685.818 L1732.49 685.818 L1733.05 685.818 L1733.61 685.818 L1734.17 685.818 L1734.73 685.818 L1735.29 685.818 L1735.85 685.818 L1736.41 685.818 L1736.97 685.818 L1737.52 685.818 L1738.08 685.818 L1738.64 685.818 L1739.2 685.818 L1739.76 685.818 L1740.32 685.818 L1740.88 685.818 L1741.44 685.818 L1742 685.818 L1742.56 685.818 L1743.12 685.818 L1743.68 685.818 L1744.24 685.818 L1744.79 685.818 L1745.35 685.818 L1745.91 685.818 L1746.47 685.818 L1747.03 685.818 L1747.59 685.818 L1748.15 685.818 L1748.71 685.818 L1749.27 685.818 L1749.83 685.818 L1750.39 685.818 L1750.95 685.818 L1751.51 685.818 L1752.06 685.818 L1752.62 685.818 L1753.18 685.818 L1753.74 685.818 L1754.3 685.818 L1754.86 685.818 L1755.42 685.818 L1755.98 685.818 L1756.54 685.818 L1757.1 685.818 L1757.66 685.818 L1758.22 685.818 L1758.78 685.818 L1759.34 685.818 L1759.89 685.818 L1760.45 685.818 L1761.01 685.818 L1761.57 685.818 L1762.13 685.818 L1762.69 685.818 L1763.25 685.818 L1763.81 685.818 L1764.37 685.818 L1764.93 685.818 L1765.49 685.818 L1766.05 685.818 L1766.61 685.818 L1767.16 685.818 L1767.72 685.818 L1768.28 685.818 L1768.84 685.818 L1769.4 685.818 L1769.96 685.818 L1770.52 685.818 L1771.08 685.818 L1771.64 685.818 L1772.2 685.818 L1772.76 685.818 L1773.32 685.818 L1773.88 685.818 L1774.43 685.818 L1774.99 685.818 L1775.55 685.818 L1776.11 685.818 L1776.67 685.818 L1777.23 685.818 L1777.79 685.818 L1778.35 685.818 L1778.91 685.818 L1779.47 685.818 L1780.03 685.818 L1780.59 685.818 L1781.15 685.818 L1781.71 685.818 L1782.26 685.818 L1782.82 685.818 L1783.38 685.818 L1783.94 685.818 L1784.5 685.818 L1785.06 685.818 L1785.62 685.818 L1786.18 685.818 L1786.74 685.818 L1787.3 685.818 L1787.86 685.818 L1788.42 685.818 L1788.98 685.818 L1789.53 685.818 L1790.09 685.818 L1790.65 685.818 L1791.21 685.818 L1791.77 685.818 L1792.33 685.818 L1792.89 685.818 L1793.45 685.818 L1794.01 685.818 L1794.57 685.818 L1795.13 685.818 L1795.69 685.818 L1796.25 685.818 L1796.8 685.818 L1797.36 685.818 L1797.92 685.818 L1798.48 685.818 L1799.04 685.818 L1799.6 685.818 L1800.16 685.818 L1800.72 685.818 L1801.28 685.818 L1801.84 685.818 L1802.4 685.818 L1802.96 685.818 L1803.52 685.818 L1804.08 685.818 L1804.63 685.818 L1805.19 685.818 L1805.75 685.818 L1806.31 685.818 L1806.87 685.818 L1807.43 685.818 L1807.99 685.818 L1808.55 685.818 L1809.11 685.818 L1809.67 685.818 L1810.23 685.818 L1810.79 685.818 L1811.35 685.818 L1811.9 685.818 L1812.46 685.818 L1813.02 685.818 L1813.58 685.818 L1814.14 685.818 L1814.7 685.818 L1815.26 685.818 L1815.82 685.818 L1816.38 685.818 L1816.94 685.818 L1817.5 685.818 L1818.06 685.818 L1818.62 685.818 L1819.18 685.818 L1819.73 685.818 L1820.29 685.818 L1820.85 685.818 L1821.41 685.818 L1821.97 685.818 L1822.53 685.818 L1823.09 685.818 L1823.65 685.818 L1824.21 685.818 L1824.77 685.818 L1825.33 685.818 L1825.89 685.818 L1826.45 685.818 L1827 685.818 L1827.56 685.818 L1828.12 685.818 L1828.68 685.818 L1829.24 685.818 L1829.8 685.818 L1830.36 685.818 L1830.92 685.818 L1831.48 685.818 L1832.04 685.818 L1832.6 685.818 L1833.16 685.818 L1833.72 685.818 L1834.27 685.818 L1834.83 685.818 L1835.39 685.818 L1835.95 685.818 L1836.51 685.818 L1837.07 685.818 L1837.63 685.818 L1838.19 685.818 L1838.19 682.471 L1837.63 682.471 L1837.07 682.471 L1836.51 682.471 L1835.95 682.471 L1835.39 682.471 L1834.83 682.471 L1834.27 682.471 L1833.72 682.471 L1833.16 682.471 L1832.6 682.471 L1832.04 682.471 L1831.48 682.471 L1830.92 682.471 L1830.36 682.471 L1829.8 682.471 L1829.24 682.471 L1828.68 682.471 L1828.12 682.471 L1827.56 682.471 L1827 682.471 L1826.45 682.471 L1825.89 682.471 L1825.33 682.471 L1824.77 682.471 L1824.21 682.471 L1823.65 682.471 L1823.09 682.471 L1822.53 682.471 L1821.97 682.471 L1821.41 682.471 L1820.85 682.471 L1820.29 682.471 L1819.73 682.471 L1819.18 682.471 L1818.62 682.471 L1818.06 682.471 L1817.5 682.471 L1816.94 682.471 L1816.38 682.471 L1815.82 682.471 L1815.26 682.471 L1814.7 682.471 L1814.14 682.471 L1813.58 682.471 L1813.02 682.471 L1812.46 682.471 L1811.9 682.471 L1811.35 682.471 L1810.79 682.471 L1810.23 682.471 L1809.67 682.471 L1809.11 682.471 L1808.55 682.471 L1807.99 682.471 L1807.43 682.471 L1806.87 682.471 L1806.31 682.471 L1805.75 682.471 L1805.19 682.471 L1804.63 682.471 L1804.08 682.471 L1803.52 682.471 L1802.96 682.471 L1802.4 682.471 L1801.84 682.471 L1801.28 682.471 L1800.72 682.471 L1800.16 682.471 L1799.6 682.471 L1799.04 682.471 L1798.48 682.471 L1797.92 682.471 L1797.36 682.471 L1796.8 682.471 L1796.25 682.471 L1795.69 682.471 L1795.13 682.471 L1794.57 682.471 L1794.01 682.471 L1793.45 682.471 L1792.89 682.471 L1792.33 682.471 L1791.77 682.471 L1791.21 682.471 L1790.65 682.471 L1790.09 682.471 L1789.53 682.471 L1788.98 682.471 L1788.42 682.471 L1787.86 682.471 L1787.3 682.471 L1786.74 682.471 L1786.18 682.471 L1785.62 682.471 L1785.06 682.471 L1784.5 682.471 L1783.94 682.471 L1783.38 682.471 L1782.82 682.471 L1782.26 682.471 L1781.71 682.471 L1781.15 682.471 L1780.59 682.471 L1780.03 682.471 L1779.47 682.471 L1778.91 682.471 L1778.35 682.471 L1777.79 682.471 L1777.23 682.471 L1776.67 682.471 L1776.11 682.471 L1775.55 682.471 L1774.99 682.471 L1774.43 682.471 L1773.88 682.471 L1773.32 682.471 L1772.76 682.471 L1772.2 682.471 L1771.64 682.471 L1771.08 682.471 L1770.52 682.471 L1769.96 682.471 L1769.4 682.471 L1768.84 682.471 L1768.28 682.471 L1767.72 682.471 L1767.16 682.471 L1766.61 682.471 L1766.05 682.471 L1765.49 682.471 L1764.93 682.471 L1764.37 682.471 L1763.81 682.471 L1763.25 682.471 L1762.69 682.471 L1762.13 682.471 L1761.57 682.471 L1761.01 682.471 L1760.45 682.471 L1759.89 682.471 L1759.34 682.471 L1758.78 682.471 L1758.22 682.471 L1757.66 682.471 L1757.1 682.471 L1756.54 682.471 L1755.98 682.471 L1755.42 682.471 L1754.86 682.471 L1754.3 682.471 L1753.74 682.471 L1753.18 682.471 L1752.62 682.471 L1752.06 682.471 L1751.51 682.471 L1750.95 682.471 L1750.39 682.471 L1749.83 682.471 L1749.27 682.471 L1748.71 682.471 L1748.15 682.471 L1747.59 682.471 L1747.03 682.471 L1746.47 682.471 L1745.91 682.471 L1745.35 682.471 L1744.79 682.471 L1744.24 682.471 L1743.68 682.471 L1743.12 682.471 L1742.56 682.471 L1742 682.471 L1741.44 682.471 L1740.88 682.471 L1740.32 682.471 L1739.76 682.471 L1739.2 682.471 L1738.64 682.471 L1738.08 682.471 L1737.52 682.471 L1736.97 682.471 L1736.41 682.471 L1735.85 682.471 L1735.29 682.471 L1734.73 682.471 L1734.17 682.471 L1733.61 682.471 L1733.05 682.471 L1732.49 682.471 L1731.93 682.471 L1731.37 682.471 L1730.81 682.471 L1730.25 682.471 L1729.69 682.471 L1729.14 682.471 L1728.58 682.471 L1728.02 682.471 L1727.46 682.471 L1726.9 682.471 L1726.34 682.471 L1725.78 682.471 L1725.22 682.471 L1724.66 682.471 L1724.1 682.471 L1723.54 682.471 L1722.98 682.471 L1722.42 682.471 L1721.87 682.471 L1721.31 682.471 L1720.75 682.471 L1720.19 682.471 L1719.63 682.471 L1719.07 682.471 L1718.51 682.471 L1717.95 682.471 L1717.39 682.471 L1716.83 682.471 L1716.27 682.471 L1715.71 682.471 L1715.15 682.471 L1714.6 682.471 L1714.04 682.471 L1713.48 682.471 L1712.92 682.471 L1712.36 682.471 L1711.8 682.471 L1711.24 682.471 L1710.68 682.471 L1710.12 682.471 L1709.56 682.471 L1709 682.471 L1708.44 682.471 L1707.88 682.471 L1707.32 682.471 L1706.77 682.471 L1706.21 682.471 L1705.65 682.471 L1705.09 682.471 L1704.53 682.471 L1703.97 682.471 L1703.41 682.471 L1702.85 682.471 L1702.29 682.471 L1701.73 682.471 L1701.17 682.471 L1700.61 682.471 L1700.05 682.471 L1699.5 682.471 L1698.94 682.471 L1698.38 682.471 L1697.82 682.471 L1697.26 682.471 L1696.7 682.471 L1696.14 682.471 L1695.58 682.471 L1695.02 682.471 L1694.46 682.471 L1693.9 682.471 L1693.34 682.471 L1692.78 682.471 L1692.23 682.471 L1691.67 682.471 L1691.11 682.471 L1690.55 682.471 L1689.99 682.471 L1689.43 682.471 L1688.87 682.471 L1688.31 682.471 L1687.75 682.471 L1687.19 682.471 L1686.63 682.471 L1686.07 682.471 L1685.51 682.471 L1684.95 682.471 L1684.4 682.471 L1683.84 682.471 L1683.28 682.471 L1682.72 682.471 L1682.16 682.471 L1681.6 682.471 L1681.04 682.471 L1680.48 682.471 L1679.92 682.471 L1679.36 682.471 L1678.8 682.471 L1678.24 682.471 L1677.68 682.471 L1677.13 682.471 L1676.57 682.471 L1676.01 682.471 L1675.45 682.471 L1674.89 682.471 L1674.33 682.471 L1673.77 682.471 L1673.21 682.471 L1672.65 682.471 L1672.09 682.471 L1671.53 682.471 L1670.97 682.471 L1670.41 682.471 L1669.85 682.471 L1669.3 682.471 L1668.74 682.471 L1668.18 682.471 L1667.62 682.471 L1667.06 682.471 L1666.5 682.471 L1665.94 682.471 L1665.38 682.471 L1664.82 682.471 L1664.26 682.471 L1663.7 682.471 L1663.14 682.471 L1662.58 682.471 L1662.03 682.471 L1661.47 682.471 L1660.91 682.471 L1660.35 682.471 L1659.79 682.471 L1659.23 682.471 L1658.67 682.471 L1658.11 682.471 L1657.55 682.471 L1656.99 682.471 L1656.43 682.471 L1655.87 682.471 L1655.31 682.471 L1654.76 682.471 L1654.2 682.471 L1653.64 682.471 L1653.08 682.471 L1652.52 682.471 L1651.96 682.471 L1651.4 682.471 L1650.84 682.471 L1650.28 682.471 L1649.72 682.471 L1649.16 682.471 L1648.6 682.471 L1648.04 682.471 L1647.48 682.471 L1646.93 682.471 L1646.37 682.471 L1645.81 682.471 L1645.25 682.471 L1644.69 682.471 L1644.13 682.471 L1643.57 682.471 L1643.01 682.471 L1642.45 682.471 L1641.89 682.471 L1641.33 682.471 L1640.77 682.471 L1640.21 682.471 L1639.66 682.471 L1639.1 682.471 L1638.54 682.471 L1637.98 682.471 L1637.42 682.471 L1636.86 682.471 L1636.3 682.471 L1635.74 682.471 L1635.18 682.471 L1634.62 682.471 L1634.06 682.471 L1633.5 682.471 L1632.94 682.471 L1632.39 682.471 L1631.83 682.471 L1631.27 682.471 L1630.71 682.471 L1630.15 682.471 L1629.59 682.471 L1629.03 682.471 L1628.47 682.471 L1627.91 682.471 L1627.35 682.471 L1626.79 682.471 L1626.23 682.471 L1625.67 682.471 L1625.11 682.471 L1624.56 682.471 L1624 682.471 L1623.44 682.471 L1622.88 682.471 L1622.32 682.471 L1621.76 682.471 L1621.2 682.471 L1620.64 682.471 L1620.08 682.471 L1619.52 682.471 L1618.96 682.471 L1618.4 682.471 L1617.84 682.471 L1617.29 682.471 L1616.73 682.471 L1616.17 682.471 L1615.61 682.471 L1615.05 682.471 L1614.49 682.471 L1613.93 682.471 L1613.37 682.471 L1612.81 682.471 L1612.25 682.471 L1611.69 682.471 L1611.13 682.471 L1610.57 682.471 L1610.02 682.471 L1609.46 682.471 L1608.9 682.471 L1608.34 682.471 L1607.78 682.471 L1607.22 682.471 L1606.66 682.471 L1606.1 682.471 L1605.54 682.471 L1604.98 682.471 L1604.42 682.471 L1603.86 682.471 L1603.3 682.471 L1602.74 682.471 L1602.19 682.471 L1601.63 682.471 L1601.07 682.471 L1600.51 682.471 L1599.95 682.471 L1599.39 682.471 L1598.83 682.471 L1598.27 682.471 L1597.71 682.471 L1597.15 682.471 L1596.59 682.471 L1596.03 682.471 L1595.47 682.471 L1594.92 682.471 L1594.36 682.471 L1593.8 682.471 L1593.24 682.471 L1592.68 682.471 L1592.12 682.471 L1591.56 682.471 L1591 682.471 L1590.44 682.471 L1589.88 682.471 L1589.32 682.471 L1588.76 682.471 L1588.2 682.471 L1587.65 682.471 L1587.09 682.471 L1586.53 682.471 L1585.97 682.471 L1585.41 682.471 L1584.85 682.471 L1584.29 682.471 L1583.73 682.471 L1583.17 682.471 L1582.61 682.471 L1582.05 682.471 L1581.49 682.471 L1580.93 682.471 L1580.37 682.471 L1579.82 682.471 L1579.26 682.471 L1578.7 682.471 L1578.14 682.471 L1577.58 682.471 L1577.02 682.471 L1576.46 682.471 L1575.9 682.471 L1575.34 682.471 L1574.78 682.471 L1574.22 682.471 L1573.66 682.471 L1573.1 682.471 L1572.55 682.471 L1571.99 682.471 L1571.43 682.471 L1570.87 682.471 L1570.31 682.471 L1569.75 682.471 L1569.19 682.471 L1568.63 682.471 L1568.07 682.471 L1567.51 682.471 L1566.95 682.471 L1566.39 682.471 L1565.83 682.471 L1565.28 682.471 L1564.72 682.471 L1564.16 682.471 L1563.6 682.471 L1563.04 682.471 L1562.48 682.471 L1561.92 682.471 L1561.36 682.471 L1560.8 682.471 L1560.24 682.471 L1559.68 682.471 L1559.12 682.471 L1558.56 682.471 L1558 682.471 L1557.45 682.471 L1556.89 682.471 L1556.33 682.471 L1555.77 682.471 L1555.21 682.471 L1554.65 682.471 L1554.09 682.471 L1553.53 682.471 L1552.97 682.471 L1552.41 682.471 L1551.85 682.471 L1551.29 682.471 L1550.73 682.471 L1550.18 682.471 L1549.62 682.471 L1549.06 682.471 L1548.5 682.471 L1547.94 682.471 L1547.38 682.471 L1546.82 682.471 L1546.26 682.471 L1545.7 682.471 L1545.14 682.471 L1544.58 682.471 L1544.02 682.471 L1543.46 682.471 L1542.9 682.471 L1542.35 682.471 L1541.79 682.471 L1541.23 682.471 L1540.67 682.471 L1540.11 682.471 L1539.55 682.471 L1538.99 682.471 L1538.43 682.471 L1537.87 682.471 L1537.31 682.471 L1536.75 682.471 L1536.19 682.471 L1535.63 682.471 L1535.08 682.471 L1534.52 682.471 L1533.96 682.471 L1533.4 682.471 L1532.84 682.471 L1532.28 682.471 L1531.72 682.471 L1531.16 682.471 L1530.6 682.471 L1530.04 682.471 L1529.48 682.471 L1528.92 682.471 L1528.36 682.471 L1527.81 682.471 L1527.25 682.471 L1526.69 682.471 L1526.13 682.471 L1525.57 682.471 L1525.01 682.471 L1524.45 682.471 L1523.89 682.471 L1523.33 682.471 L1522.77 682.471 L1522.21 682.471 L1521.65 682.471 L1521.09 682.471 L1520.53 682.471 L1519.98 682.471 L1519.42 682.471 L1518.86 682.471 L1518.3 682.471 L1517.74 682.471 L1517.18 682.471 L1516.62 682.471 L1516.06 682.471 L1515.5 682.471 L1514.94 682.471 L1514.38 682.471 L1513.82 682.471 L1513.26 682.471 L1512.71 682.471 L1512.15 682.471 L1511.59 682.471 L1511.03 682.471 L1510.47 682.471 L1509.91 682.471 L1509.35 682.471 L1508.79 682.471 L1508.23 682.471 L1507.67 682.471 L1507.11 682.471 L1506.55 682.471 L1505.99 682.471 L1505.44 682.471 L1504.88 682.471 L1504.32 682.471 L1503.76 682.471 L1503.2 682.471 L1502.64 682.471 L1502.08 682.471 L1501.52 682.471 L1500.96 682.471 L1500.4 682.471 L1499.84 682.471 L1499.28 682.471 L1498.72 682.471 L1498.16 682.471 L1497.61 682.471 L1497.05 682.471 L1496.49 682.471 L1495.93 682.471 L1495.37 682.471 L1494.81 682.471 L1494.25 682.471 L1493.69 682.471 L1493.13 682.471 L1492.57 682.471 L1492.01 682.471 L1491.45 682.471 L1490.89 682.471 L1490.34 682.471 L1489.78 682.471 L1489.22 682.471 L1488.66 682.471 L1488.1 682.471 L1487.54 682.471 L1486.98 682.471 L1486.42 682.471 L1485.86 682.471 L1485.3 682.471 L1484.74 682.471 L1484.18 682.471 L1483.62 682.471 L1483.07 682.471 L1482.51 682.471 L1481.95 682.471 L1481.39 682.471 L1480.83 682.471 L1480.27 682.471 L1479.71 682.471 L1479.15 682.471 L1478.59 682.471 L1478.03 682.471 L1477.47 682.471 L1476.91 682.471 L1476.35 682.471 L1475.79 682.471 L1475.24 682.471 L1474.68 682.471 L1474.12 682.471 L1473.56 682.471 L1473 682.471 L1472.44 682.471 L1471.88 682.471 L1471.32 682.471 L1470.76 682.471 L1470.2 682.471 L1469.64 682.471 L1469.08 682.471 L1468.52 682.471 L1467.97 682.471 L1467.41 682.471 L1466.85 682.471 L1466.29 682.471 L1465.73 682.471 L1465.17 682.471 L1464.61 682.471 L1464.05 682.471 L1463.49 682.471 L1462.93 682.471 L1462.37 682.471 L1461.81 682.471 L1461.25 682.471 L1460.7 682.471 L1460.14 682.471 L1459.58 682.471 L1459.02 682.471 L1458.46 682.471 L1457.9 682.471 L1457.34 682.471 L1456.78 682.471 L1456.22 682.471 L1455.66 682.471 L1455.1 682.471 L1454.54 682.471 L1453.98 682.471 L1453.42 682.471 L1452.87 682.471 L1452.31 682.471 L1451.75 682.471 L1451.19 682.471 L1450.63 682.471 L1450.07 682.471 L1449.51 682.471 L1448.95 682.471 L1448.39 682.471 L1447.83 682.471 L1447.27 682.471 L1446.71 682.471 L1446.15 682.471 L1445.6 682.471 L1445.04 682.471 L1444.48 682.471 L1443.92 682.471 L1443.36 682.471 L1442.8 682.471 L1442.24 682.471 L1441.68 682.471 L1441.12 682.471 L1440.56 682.471 L1440 682.471 L1439.44 682.471 L1438.88 682.471 L1438.33 682.471 L1437.77 682.471 L1437.21 682.471 L1436.65 682.471 L1436.09 682.471 L1435.53 682.471 L1434.97 682.471 L1434.41 682.471 L1433.85 682.471 L1433.29 682.471 L1432.73 682.471 L1432.17 682.471 L1431.61 682.471 L1431.05 682.471 L1430.5 682.471 L1429.94 682.471 L1429.38 682.471 L1428.82 682.471 L1428.26 682.471 L1427.7 682.471 L1427.14 682.471 L1426.58 682.471 L1426.02 682.471 L1425.46 682.471 L1424.9 682.471 L1424.34 682.471 L1423.78 682.471 L1423.23 682.471 L1422.67 682.471 L1422.11 682.471 L1421.55 682.471 L1420.99 682.471 L1420.43 682.471 L1419.87 682.471 L1419.31 682.471 L1418.75 682.471 L1418.19 682.471 L1417.63 682.471 L1417.07 682.471 L1416.51 682.471 L1415.95 682.471 L1415.4 682.471 L1414.84 682.471 L1414.28 682.471 L1413.72 682.471 L1413.16 682.471 L1412.6 682.471 L1412.04 682.471 L1411.48 682.471 L1410.92 682.471 L1410.36 682.471 L1409.8 682.471 L1409.24 682.471 L1408.68 682.471 L1408.13 682.471 L1407.57 682.471 L1407.01 682.471 L1406.45 682.471 L1405.89 682.471 L1405.33 682.471 L1404.77 682.471 L1404.21 682.471 L1403.65 682.471 L1403.09 682.471 L1402.53 682.471 L1401.97 682.471 L1401.41 682.471 L1400.86 682.471 L1400.3 682.471 L1399.74 682.471 L1399.18 682.471 L1398.62 682.471 L1398.06 682.471 L1397.5 682.471 L1396.94 682.471 L1396.38 682.471 L1395.82 682.471 L1395.26 682.471 L1394.7 682.471 L1394.14 682.471 L1393.58 682.471 L1393.03 682.471 L1392.47 682.471 L1391.91 682.471 L1391.35 682.471 L1390.79 682.471 L1390.23 682.471 L1389.67 682.471 L1389.11 682.471 L1388.55 682.471 L1387.99 682.471 L1387.43 682.471 L1386.87 682.471 L1386.31 682.471 L1385.76 682.471 L1385.2 682.471 L1384.64 682.471 L1384.08 682.471 L1383.52 682.471 L1382.96 682.471 L1382.4 682.471 L1381.84 682.471 L1381.28 682.471 L1380.72 682.471 L1380.16 682.471 L1379.6 682.471 L1379.04 682.471 L1378.49 682.471 L1377.93 682.471 L1377.37 682.471 L1376.81 682.471 L1376.25 682.471 L1375.69 682.471 L1375.13 682.471 L1374.57 682.471 L1374.01 682.471 L1373.45 682.471 L1372.89 682.471 L1372.33 682.471 L1371.77 682.471 L1371.21 682.471 L1370.66 682.471 L1370.1 682.471 L1369.54 682.471 L1368.98 682.471 L1368.42 682.471 L1367.86 682.471 L1367.3 682.471 L1366.74 682.471 L1366.18 682.471 L1365.62 682.471 L1365.06 682.471 L1364.5 682.471 L1363.94 682.471 L1363.39 682.471 L1362.83 682.471 L1362.27 682.471 L1361.71 682.471 L1361.15 682.471 L1360.59 682.471 L1360.03 682.471 L1359.47 682.471 L1358.91 682.471 L1358.35 682.471 L1357.79 682.471 L1357.23 682.471 L1356.67 682.471 L1356.12 682.471 L1355.56 682.471 L1355 682.471 L1354.44 682.471 L1353.88 682.471 L1353.32 682.471 L1352.76 682.471 L1352.2 682.471 L1351.64 682.471 L1351.08 682.471 L1350.52 682.471 L1349.96 682.471 L1349.4 682.471 L1348.84 682.471 L1348.29 682.471 L1347.73 682.471 L1347.17 682.471 L1346.61 682.471 L1346.05 682.471 L1345.49 682.471 L1344.93 682.471 L1344.37 682.471 L1343.81 682.471 L1343.25 682.471 L1342.69 682.471 L1342.13 682.471 L1341.57 682.471 L1341.02 682.471 L1340.46 682.471 L1339.9 682.471 L1339.34 682.471 L1338.78 682.471 L1338.22 682.471 L1337.66 682.471 L1337.1 682.471 L1336.54 682.471 L1335.98 682.471 L1335.42 682.471 L1334.86 682.471 L1334.3 682.471 L1333.75 682.471 L1333.19 682.471 L1332.63 682.471 L1332.07 682.471 L1331.51 682.471 L1330.95 682.471 L1330.39 682.471 L1329.83 682.471 L1329.27 682.471 L1328.71 682.471 L1328.15 682.471 L1327.59 682.471 L1327.03 682.471 L1326.47 682.471 L1325.92 682.471 L1325.36 682.471 L1324.8 682.471 L1324.24 682.471 L1323.68 682.471 L1323.12 682.471 L1322.56 682.471 L1322 682.471 L1321.44 682.471 L1320.88 682.471 L1320.32 682.471 L1319.76 682.471 L1319.2 682.471 L1318.65 682.471 L1318.09 682.471 L1317.53 682.471 L1316.97 682.471 L1316.41 682.471 L1315.85 682.471 L1315.29 682.471 L1314.73 682.471 L1314.17 682.471 L1313.61 682.471 L1313.05 682.471 L1312.49 682.471 L1311.93 682.471 L1311.38 682.471 L1310.82 682.471 L1310.26 682.471 L1309.7 682.471 L1309.14 682.471 L1308.58 682.471 L1308.02 682.471 L1307.46 682.471 L1306.9 682.471 L1306.34 682.471 L1305.78 682.471 L1305.22 682.471 L1304.66 682.471 L1304.1 682.471 L1303.55 682.471 L1302.99 682.471 L1302.43 682.471 L1301.87 682.471 L1301.31 682.471 L1300.75 682.471 L1300.19 682.471 L1299.63 682.471 L1299.07 682.471 L1298.51 682.471 L1297.95 682.471 L1297.39 682.471 L1296.83 682.471 L1296.28 682.471 L1295.72 682.471 L1295.16 682.471 L1294.6 682.471 L1294.04 682.471 L1293.48 682.471 L1292.92 682.471 L1292.36 682.471 L1291.8 682.471 L1291.24 682.471 L1290.68 682.471 L1290.12 682.471 L1289.56 682.471 L1289 682.471 L1288.45 682.471 L1287.89 682.471 L1287.33 682.471 L1286.77 682.471 L1286.21 682.471 L1285.65 682.471 L1285.09 682.471 L1284.53 682.471 L1283.97 682.471 L1283.41 682.471 L1282.85 682.471 L1282.29 682.471 L1281.73 682.471 L1281.18 682.471 L1280.62 682.471 L1280.06 682.471 L1279.5 682.471 L1278.94 682.471 L1278.38 682.471 L1277.82 682.471 L1277.26 682.471 L1276.7 682.471 L1276.14 682.471 L1275.58 682.471 L1275.02 682.471 L1274.46 682.471 L1273.91 682.471 L1273.35 682.471 L1272.79 682.471 L1272.23 682.471 L1271.67 682.471 L1271.11 682.471 L1270.55 682.471 L1269.99 682.471 L1269.43 682.471 L1268.87 682.471 L1268.31 682.471 L1267.75 682.471 L1267.19 682.471 L1266.63 682.471 L1266.08 682.471 L1265.52 682.471 L1264.96 682.471 L1264.4 682.471 L1263.84 682.471 L1263.28 682.471 L1262.72 682.471 L1262.16 682.471 L1261.6 682.471 L1261.04 682.471 L1260.48 682.471 L1259.92 682.471 L1259.36 682.471 L1258.81 682.471 L1258.25 682.471 L1257.69 682.471 L1257.13 682.471 L1256.57 682.471 L1256.01 682.471 L1255.45 682.471 L1254.89 682.471 L1254.33 682.471 L1253.77 682.471 L1253.21 682.471 L1252.65 682.471 L1252.09 682.471 L1251.54 682.471 L1250.98 682.471 L1250.42 682.471 L1249.86 682.471 L1249.3 682.471 L1248.74 682.471 L1248.18 682.471 L1247.62 682.471 L1247.06 682.471 L1246.5 682.471 L1245.94 682.471 L1245.38 682.471 L1244.82 682.471 L1244.26 682.471 L1243.71 682.471 L1243.15 682.471 L1242.59 682.471 L1242.03 682.471 L1241.47 682.471 L1240.91 682.471 L1240.35 682.471 L1239.79 682.471 L1239.23 682.471 L1238.67 682.471 L1238.11 682.471 L1237.55 682.471 L1236.99 682.471 L1236.44 682.471 L1235.88 682.471 L1235.32 682.471 L1234.76 682.471 L1234.2 682.471 L1233.64 682.471 L1233.08 682.471 L1232.52 682.471 L1231.96 682.471 L1231.4 682.471 L1230.84 682.471 L1230.28 682.471 L1229.72 682.471 L1229.17 682.471 L1228.61 682.471 L1228.05 682.471 L1227.49 682.471 L1226.93 682.471 L1226.37 682.471 L1225.81 682.471 L1225.25 682.471 L1224.69 682.471 L1224.13 682.471 L1223.57 682.471 L1223.01 682.471 L1222.45 682.471 L1221.89 682.471 L1221.34 682.471 L1220.78 682.471 L1220.22 682.471 L1219.66 682.471 L1219.1 682.471 L1218.54 682.471 L1217.98 682.471 L1217.42 682.471 L1216.86 682.471 L1216.3 682.471 L1215.74 682.471 L1215.18 682.471 L1214.62 682.471 L1214.07 682.471 L1213.51 682.471 L1212.95 682.471 L1212.39 682.471 L1211.83 682.471 L1211.27 682.471 L1210.71 682.471 L1210.15 682.471 L1209.59 682.471 L1209.03 682.471 L1208.47 682.471 L1207.91 682.471 L1207.35 682.471 L1206.8 682.471 L1206.24 682.471 L1205.68 682.471 L1205.12 682.471 L1204.56 682.471 L1204 682.471 L1203.44 682.471 L1202.88 682.471 L1202.32 682.471 L1201.76 682.471 L1201.2 682.471 L1200.64 682.471 L1200.08 682.471 L1199.52 682.471 L1198.97 682.471 L1198.41 682.471 L1197.85 682.471 L1197.29 682.471 L1196.73 682.471 L1196.17 682.471 L1195.61 682.471 L1195.05 682.471 L1194.49 682.471 L1193.93 682.471 L1193.37 682.471 L1192.81 682.471 L1192.25 682.471 L1191.7 682.471 L1191.14 682.471 L1190.58 682.471 L1190.02 682.471 L1189.46 682.471 L1188.9 682.471 L1188.34 682.471 L1187.78 682.471 L1187.22 682.471 L1186.66 682.471 L1186.1 682.471 L1185.54 682.471 L1184.98 682.471 L1184.43 682.471 L1183.87 682.471 L1183.31 682.471 L1182.75 682.471 L1182.19 682.471 L1181.63 682.471 L1181.07 682.471 L1180.51 682.471 L1179.95 682.471 L1179.39 682.471 L1178.83 682.471 L1178.27 682.471 L1177.71 682.471 L1177.15 682.471 L1176.6 682.471 L1176.04 682.471 L1175.48 682.471 L1174.92 682.471 L1174.36 682.471 L1173.8 682.471 L1173.24 682.471 L1172.68 682.471 L1172.12 682.471 L1171.56 682.471 L1171 682.471 L1170.44 682.471 L1169.88 682.471 L1169.33 682.471 L1168.77 682.471 L1168.21 682.471 L1167.65 682.471 L1167.09 682.471 L1166.53 682.471 L1165.97 682.471 L1165.41 682.471 L1164.85 682.471 L1164.29 682.471 L1163.73 682.471 L1163.17 682.471 L1162.61 682.471 L1162.05 682.471 L1161.5 682.471 L1160.94 682.471 L1160.38 682.471 L1159.82 682.471 L1159.26 682.471 L1158.7 682.471 L1158.14 682.471 L1157.58 682.471 L1157.02 682.471 L1156.46 682.471 L1155.9 682.471 L1155.34 682.471 L1154.78 682.471 L1154.23 682.471 L1153.67 682.471 L1153.11 682.471 L1152.55 682.471 L1151.99 682.471 L1151.43 682.471 L1150.87 682.471 L1150.31 682.471 L1149.75 682.471 L1149.19 682.471 L1148.63 682.471 L1148.07 682.471 L1147.51 682.471 L1146.96 682.471 L1146.4 682.471 L1145.84 682.471 L1145.28 682.471 L1144.72 682.471 L1144.16 682.471 L1143.6 682.471 L1143.04 682.471 L1142.48 682.471 L1141.92 682.471 L1141.36 682.471 L1140.8 682.471 L1140.24 682.471 L1139.68 682.471 L1139.13 682.471 L1138.57 682.471 L1138.01 682.471 L1137.45 682.471 L1136.89 682.471 L1136.33 682.471 L1135.77 682.471 L1135.21 682.471 L1134.65 682.471 L1134.09 682.471 L1133.53 682.471 L1132.97 682.471 L1132.41 682.471 L1131.86 682.471 L1131.3 682.471 L1130.74 682.471 L1130.18 682.471 L1129.62 682.471 L1129.06 682.471 L1128.5 682.471 L1127.94 682.471 L1127.38 682.471 L1126.82 682.471 L1126.26 682.471 L1125.7 682.471 L1125.14 682.471 L1124.59 682.471 L1124.03 682.471 L1123.47 682.471 L1122.91 682.471 L1122.35 682.471 L1121.79 682.471 L1121.23 682.471 L1120.67 682.471 L1120.11 682.471 L1119.55 682.471 L1118.99 682.471 L1118.43 682.471 L1117.87 682.471 L1117.31 682.471 L1116.76 682.471 L1116.2 682.471 L1115.64 682.471 L1115.08 682.471 L1114.52 682.471 L1113.96 682.471 L1113.4 682.471 L1112.84 682.471 L1112.28 682.471 L1111.72 682.471 L1111.16 682.471 L1110.6 682.471 L1110.04 682.471 L1109.49 682.471 L1108.93 682.471 L1108.37 682.471 L1107.81 682.471 L1107.25 682.471 L1106.69 682.471 L1106.13 682.471 L1105.57 682.471 L1105.01 682.471 L1104.45 682.471 L1103.89 682.471 L1103.33 682.471 L1102.77 682.471 L1102.22 682.471 L1101.66 682.471 L1101.1 682.471 L1100.54 682.471 L1099.98 682.471 L1099.42 682.471 L1098.86 682.471 L1098.3 682.471 L1097.74 682.471 L1097.18 682.471 L1096.62 682.471 L1096.06 682.471 L1095.5 682.471 L1094.94 682.471 L1094.39 682.471 L1093.83 682.471 L1093.27 682.471 L1092.71 682.471 L1092.15 682.471 L1091.59 682.471 L1091.03 682.471 L1090.47 682.471 L1089.91 682.471 L1089.35 682.471 L1088.79 682.471 L1088.23 682.471 L1087.67 682.471 L1087.12 682.471 L1086.56 682.471 L1086 682.471 L1085.44 682.471 L1084.88 682.471 L1084.32 682.471 L1083.76 682.471 L1083.2 682.471 L1082.64 682.471 L1082.08 682.471 L1081.52 682.471 L1080.96 682.471 L1080.4 682.471 L1079.85 682.471 L1079.29 682.471 L1078.73 682.471 L1078.17 682.471 L1077.61 682.471 L1077.05 682.471 L1076.49 682.471 L1075.93 682.471 L1075.37 682.471 L1074.81 682.471 L1074.25 682.471 L1073.69 682.471 L1073.13 682.471 L1072.57 682.471 L1072.02 682.471 L1071.46 682.471 L1070.9 682.471 L1070.34 682.471 L1069.78 682.471 L1069.22 682.471 L1068.66 682.471 L1068.1 682.471 L1067.54 682.471 L1066.98 682.471 L1066.42 682.471 L1065.86 682.471 L1065.3 682.471 L1064.75 682.471 L1064.19 682.471 L1063.63 682.471 L1063.07 682.471 L1062.51 682.471 L1061.95 682.471 L1061.39 682.471 L1060.83 682.471 L1060.27 682.471 L1059.71 682.471 L1059.15 682.471 L1058.59 682.471 L1058.03 682.471 L1057.48 682.471 L1056.92 682.471 L1056.36 682.471 L1055.8 682.471 L1055.24 682.471 L1054.68 682.471 L1054.12 682.471 L1053.56 682.471 L1053 682.471 L1052.44 682.471 L1051.88 682.471 L1051.32 682.471 L1050.76 682.471 L1050.2 682.471 L1049.65 682.471 L1049.09 682.471 L1048.53 682.471 L1047.97 682.471 L1047.41 682.471 L1046.85 682.471 L1046.29 682.471 L1045.73 682.471 L1045.17 682.471 L1044.61 682.471 L1044.05 682.471 L1043.49 682.471 L1042.93 682.471 L1042.38 682.471 L1041.82 682.471 L1041.26 682.471 L1040.7 682.471 L1040.14 682.471 L1039.58 682.471 L1039.02 682.471 L1038.46 682.471 L1037.9 682.471 L1037.34 682.471 L1036.78 682.471 L1036.22 682.471 L1035.66 682.471 L1035.1 682.471 L1034.55 682.471 L1033.99 682.471 L1033.43 682.471 L1032.87 682.471 L1032.31 682.471 L1031.75 682.471 L1031.19 682.471 L1030.63 682.471 L1030.07 682.471 L1029.51 682.471 L1028.95 682.471 L1028.39 682.471 L1027.83 682.471 L1027.28 682.471 L1026.72 682.471 L1026.16 682.471 L1025.6 682.471 L1025.04 682.471 L1024.48 682.471 L1023.92 682.471 L1023.36 682.471 L1022.8 682.471 L1022.24 682.471 L1021.68 682.471 L1021.12 682.471 L1020.56 682.471 L1020.01 682.471 L1019.45 682.471 L1018.89 682.471 L1018.33 682.471 L1017.77 682.471 L1017.21 682.471 L1016.65 682.471 L1016.09 682.471 L1015.53 682.471 L1014.97 682.471 L1014.41 682.471 L1013.85 682.471 L1013.29 682.471 L1012.73 682.471 L1012.18 682.471 L1011.62 682.471 L1011.06 682.471 L1010.5 682.471 L1009.94 682.471 L1009.38 682.471 L1008.82 682.471 L1008.26 682.471 L1007.7 682.471 L1007.14 682.471 L1006.58 682.471 L1006.02 682.471 L1005.46 682.471 L1004.91 682.471 L1004.35 682.471 L1003.79 682.471 L1003.23 682.471 L1002.67 682.471 L1002.11 682.471 L1001.55 682.471 L1000.99 682.471 L1000.43 682.471 L999.872 682.471 L999.313 682.471 L998.754 682.471 L998.194 682.471 L997.635 682.471 L997.076 682.471 L996.517 682.471 L995.957 682.471 L995.398 682.471 L994.839 682.471 L994.28 682.471 L993.72 682.471 L993.161 682.471 L992.602 682.471 L992.043 682.471 L991.483 682.471 L990.924 682.471 L990.365 682.471 L989.806 682.471 L989.246 682.471 L988.687 682.471 L988.128 682.471 L987.569 682.471 L987.009 682.471 L986.45 682.471 L985.891 682.471 L985.332 682.471 L984.772 682.471 L984.213 682.471 L983.654 682.471 L983.095 682.471 L982.535 682.471 L981.976 682.471 L981.417 682.471 L980.858 682.471 L980.298 682.471 L979.739 682.471 L979.18 682.471 L978.621 682.471 L978.061 682.471 L977.502 682.471 L976.943 682.471 L976.384 682.471 L975.824 682.471 L975.265 682.471 L974.706 682.471 L974.147 682.471 L973.587 682.471 L973.028 682.471 L972.469 682.471 L971.91 682.471 L971.35 682.471 L970.791 682.471 L970.232 682.471 L969.673 682.471 L969.113 682.471 L968.554 682.471 L967.995 682.471 L967.436 682.471 L966.876 682.471 L966.317 682.471 L965.758 682.471 L965.199 682.471 L964.639 682.471 L964.08 682.471 L963.521 682.471 L962.962 682.471 L962.402 682.471 L961.843 682.471 L961.284 682.471 L960.725 682.471 L960.165 682.471 L959.606 682.471 L959.047 682.471 L958.488 682.471 L957.928 682.471 L957.369 682.471 L956.81 682.471 L956.251 682.471 L955.691 682.471 L955.132 682.471 L954.573 682.471 L954.014 682.471 L953.454 682.471 L952.895 682.471 L952.336 682.471 L951.777 682.471 L951.217 682.471 L950.658 682.471 L950.099 682.471 L949.54 682.471 L948.98 682.471 L948.421 682.471 L947.862 682.471 L947.303 682.471 L946.743 682.471 L946.184 682.471 L945.625 682.471 L945.066 682.471 L944.506 682.471 L943.947 682.471 L943.388 682.471 L942.829 682.471 L942.269 682.471 L941.71 682.471 L941.151 682.471 L940.592 682.471 L940.032 682.471 L939.473 682.471 L938.914 682.471 L938.355 682.471 L937.795 682.471 L937.236 682.471 L936.677 682.471 L936.118 682.471 L935.558 682.471 L934.999 682.471 L934.44 682.471 L933.881 682.471 L933.321 682.471 L932.762 682.471 L932.203 682.471 L931.644 682.471 L931.084 682.471 L930.525 682.471 L929.966 682.471 L929.406 682.471 L928.847 682.471 L928.288 682.471 L927.729 682.471 L927.169 682.471 L926.61 682.471 L926.051 682.471 L925.492 682.471 L924.932 682.471 L924.373 682.471 L923.814 682.471 L923.255 682.471 L922.695 682.471 L922.136 682.471 L921.577 682.471 L921.018 682.471 L920.458 682.471 L919.899 682.471 L919.34 682.471 L918.781 682.471 L918.221 682.471 L917.662 682.471 L917.103 682.471 L916.544 682.471 L915.984 682.471 L915.425 682.471 L914.866 682.471 L914.307 682.471 L913.747 682.471 L913.188 682.471 L912.629 682.471 L912.07 682.471 L911.51 682.471 L910.951 682.471 L910.392 682.471 L909.833 682.471 L909.273 682.471 L908.714 682.471 L908.155 682.471 L907.596 682.471 L907.036 682.471 L906.477 682.471 L905.918 682.471 L905.359 682.471 L904.799 682.471 L904.24 682.471 L903.681 682.471 L903.122 682.471 L902.562 682.471 L902.003 682.471 L901.444 682.471 L900.885 682.471 L900.325 682.471 L899.766 682.471 L899.207 682.471 L898.648 682.471 L898.088 682.471 L897.529 682.471 L896.97 682.471 L896.411 682.471 L895.851 682.471 L895.292 682.471 L894.733 682.471 L894.174 682.471 L893.614 682.471 L893.055 682.471 L892.496 682.471 L891.937 682.471 L891.377 682.471 L890.818 682.471 L890.259 682.471 L889.7 682.471 L889.14 682.471 L888.581 682.471 L888.022 682.471 L887.463 682.471 L886.903 682.471 L886.344 682.471 L885.785 682.471 L885.226 682.471 L884.666 682.471 L884.107 682.471 L883.548 682.471 L882.989 682.471 L882.429 682.471 L881.87 682.471 L881.311 682.471 L880.752 682.471 L880.192 682.471 L879.633 682.471 L879.074 682.471 L878.515 682.471 L877.955 682.471 L877.396 682.471 L876.837 682.471 L876.278 682.471 L875.718 682.471 L875.159 682.471 L874.6 682.471 L874.041 682.471 L873.481 682.471 L872.922 682.471 L872.363 682.471 L871.804 682.471 L871.244 682.471 L870.685 682.471 L870.126 682.471 L869.567 682.471 L869.007 682.471 L868.448 682.471 L867.889 682.471 L867.33 682.471 L866.77 682.471 L866.211 682.471 L865.652 682.471 L865.093 682.471 L864.533 682.471 L863.974 682.471 L863.415 682.471 L862.856 682.471 L862.296 682.471 L861.737 682.471 L861.178 682.471 L860.619 682.471 L860.059 682.471 L859.5 682.471 L858.941 682.471 L858.382 682.471 L857.822 682.471 L857.263 682.471 L856.704 682.471 L856.145 682.471 L855.585 682.471 L855.026 682.471 L854.467 682.471 L853.908 682.471 L853.348 682.471 L852.789 682.471 L852.23 682.471 L851.671 682.471 L851.111 682.471 L850.552 682.471 L849.993 682.471 L849.434 682.471 L848.874 682.471 L848.315 682.471 L847.756 682.471 L847.197 682.471 L846.637 682.471 L846.078 682.471 L845.519 682.471 L844.96 682.471 L844.4 682.471 L843.841 682.471 L843.282 682.471 L842.723 682.471 L842.163 682.471 L841.604 682.471 L841.045 682.471 L840.486 682.471 L839.926 682.471 L839.367 682.471 L838.808 682.471 L838.249 682.471 L837.689 682.471 L837.13 682.471 L836.571 682.471 L836.012 682.471 L835.452 682.471 L834.893 682.471 L834.334 682.471 L833.775 682.471 L833.215 682.471 L832.656 682.471 L832.097 682.471 L831.538 682.471 L830.978 682.471 L830.419 682.471 L829.86 682.471 L829.301 682.471 L828.741 682.471 L828.182 682.471 L827.623 682.471 L827.064 682.471 L826.504 682.471 L825.945 682.471 L825.386 682.471 L824.827 682.471 L824.267 682.471 L823.708 682.471 L823.149 682.471 L822.59 682.471 L822.03 682.471 L821.471 682.471 L820.912 682.471 L820.353 682.471 L819.793 682.471 L819.234 682.471 L818.675 682.471 L818.116 682.471 L817.556 682.471 L816.997 682.471 L816.438 682.471 L815.879 682.471 L815.319 682.471 L814.76 682.471 L814.201 682.471 L813.642 682.471 L813.082 682.471 L812.523 682.471 L811.964 682.471 L811.405 682.471 L810.845 682.471 L810.286 682.471 L809.727 682.471 L809.168 682.471 L808.608 682.471 L808.049 682.471 L807.49 682.471 L806.931 682.471 L806.371 682.471 L805.812 682.471 L805.253 682.471 L804.693 682.471 L804.134 682.471 L803.575 682.471 L803.016 682.471 L802.456 682.471 L801.897 682.471 L801.338 682.471 L800.779 682.471 L800.219 682.471 L799.66 682.471 L799.101 682.471 L798.542 682.471 L797.982 682.471 L797.423 682.471 L796.864 682.471 L796.305 682.471 L795.745 682.471 L795.186 682.471 L794.627 682.471 L794.068 682.471 L793.508 682.471 L792.949 682.471 L792.39 682.471 L791.831 682.471 L791.271 682.471 L790.712 682.471 L790.153 682.471 L789.594 682.471 L789.034 682.471 L788.475 682.471 L787.916 682.471 L787.357 682.471 L786.797 682.471 L786.238 682.471 L785.679 682.471 L785.12 682.471 L784.56 682.471 L784.001 682.471 L783.442 682.471 L782.883 682.471 L782.323 682.471 L781.764 682.471 L781.205 682.471 L780.646 682.471 L780.086 682.471 L779.527 682.471 L778.968 682.471 L778.409 682.471 L777.849 682.471 L777.29 682.471 L776.731 682.471 L776.172 682.471 L775.612 682.471 L775.053 682.471 L774.494 682.471 L773.935 682.471 L773.375 682.471 L772.816 682.471 L772.257 682.471 L771.698 682.471 L771.138 682.471 L770.579 682.471 L770.02 682.471 L769.461 682.471 L768.901 682.471 L768.342 682.471 L767.783 682.471 L767.224 682.471 L766.664 682.471 L766.105 682.471 L765.546 682.471 L764.987 682.471 L764.427 682.471 L763.868 682.471 L763.309 682.471 L762.75 682.471 L762.19 682.471 L761.631 682.471 L761.072 682.471 L760.513 682.471 L759.953 682.471 L759.394 682.471 L758.835 682.471 L758.276 682.471 L757.716 682.471 L757.157 682.471 L756.598 682.471 L756.039 682.471 L755.479 682.471 L754.92 682.471 L754.361 682.471 L753.802 682.471 L753.242 682.471 L752.683 682.471 L752.124 682.471 L751.565 682.471 L751.005 682.471 L750.446 682.471 L749.887 682.471 L749.328 682.471 L748.768 682.471 L748.209 682.471 L747.65 682.471 L747.091 682.471 L746.531 682.471 L745.972 682.471 L745.413 682.471 L744.854 682.471 L744.294 682.471 L743.735 682.471 L743.176 682.471 L742.617 682.471 L742.057 682.471 L741.498 682.471 L740.939 682.471 L740.38 682.471 L739.82 682.471 L739.261 682.471 L738.702 682.471 L738.143 682.471 L737.583 682.471 L737.024 682.471 L736.465 682.471 L735.906 682.471 L735.346 682.471 L734.787 682.471 L734.228 682.471 L733.669 682.471 L733.109 682.471 L732.55 682.471 L731.991 682.471 L731.432 682.471 L730.872 682.471 L730.313 682.471 L729.754 682.471 L729.195 682.471 L728.635 682.471 L728.076 682.471 L727.517 682.471 L726.958 682.471 L726.398 682.471 L725.839 682.471 L725.28 682.471 L724.721 682.471 L724.161 682.471 L723.602 682.471 L723.043 682.471 L722.484 682.471 L721.924 682.471 L721.365 682.471 L720.806 682.471 L720.247 682.471  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.146 720.806,684.146 721.365,684.146 721.924,684.146 722.484,684.146 723.043,684.146 723.602,684.146 724.161,684.146 724.721,684.146 725.28,684.146 725.839,684.146 726.398,684.146 726.958,684.146 727.517,684.146 728.076,684.146 728.635,684.146 729.195,684.146 729.754,684.146 730.313,684.146 730.872,684.146 731.432,684.146 731.991,684.146 732.55,684.146 733.109,684.146 733.669,684.146 734.228,684.146 734.787,684.146 735.346,684.146 735.906,684.146 736.465,684.146 737.024,684.146 737.583,684.146 738.143,684.146 738.702,684.146 739.261,684.146 739.82,684.146 740.38,684.146 740.939,684.146 741.498,684.146 742.057,684.146 742.617,684.146 743.176,684.146 743.735,684.146 744.294,684.146 744.854,684.146 745.413,684.146 745.972,684.146 746.531,684.146 747.091,684.146 747.65,684.146 748.209,684.146 748.768,684.146 749.328,684.146 749.887,684.146 750.446,684.146 751.005,684.146 751.565,684.146 752.124,684.146 752.683,684.146 753.242,684.146 753.802,684.146 754.361,684.146 754.92,684.146 755.479,684.146 756.039,684.146 756.598,684.146 757.157,684.146 757.716,684.146 758.276,684.146 758.835,684.146 759.394,684.146 759.953,684.146 760.513,684.146 761.072,684.146 761.631,684.146 762.19,684.146 762.75,684.146 763.309,684.146 763.868,684.146 764.427,684.146 764.987,684.146 765.546,684.146 766.105,684.146 766.664,684.146 767.224,684.146 767.783,684.146 768.342,684.146 768.901,684.146 769.461,684.146 770.02,684.146 770.579,684.146 771.138,684.146 771.698,684.146 772.257,684.146 772.816,684.146 773.375,684.146 773.935,684.146 774.494,684.146 775.053,684.146 775.612,684.146 776.172,684.146 776.731,684.146 777.29,684.146 777.849,684.146 778.409,684.146 778.968,684.146 779.527,684.146 780.086,684.146 780.646,684.146 781.205,684.146 781.764,684.146 782.323,684.146 782.883,684.146 783.442,684.146 784.001,684.146 784.56,684.146 785.12,684.146 785.679,684.146 786.238,684.146 786.797,684.146 787.357,684.146 787.916,684.146 788.475,684.146 789.034,684.146 789.594,684.146 790.153,684.146 790.712,684.146 791.271,684.146 791.831,684.146 792.39,684.146 792.949,684.146 793.508,684.146 794.068,684.146 794.627,684.146 795.186,684.146 795.745,684.146 796.305,684.146 796.864,684.146 797.423,684.146 797.982,684.146 798.542,684.146 799.101,684.146 799.66,684.146 800.219,684.146 800.779,684.146 801.338,684.146 801.897,684.146 802.456,684.146 803.016,684.146 803.575,684.146 804.134,684.146 804.693,684.146 805.253,684.146 805.812,684.146 806.371,684.146 806.931,684.146 807.49,684.146 808.049,684.146 808.608,684.146 809.168,684.146 809.727,684.146 810.286,684.146 810.845,684.146 811.405,684.146 811.964,684.146 812.523,684.146 813.082,684.146 813.642,684.146 814.201,684.146 814.76,684.146 815.319,684.146 815.879,684.146 816.438,684.146 816.997,684.146 817.556,684.146 818.116,684.146 818.675,684.146 819.234,684.146 819.793,684.146 820.353,684.146 820.912,684.146 821.471,684.146 822.03,684.146 822.59,684.146 823.149,684.146 823.708,684.146 824.267,684.146 824.827,684.146 825.386,684.146 825.945,684.146 826.504,684.146 827.064,684.146 827.623,684.146 828.182,684.146 828.741,684.146 829.301,684.146 829.86,684.146 830.419,684.146 830.978,684.146 831.538,684.146 832.097,684.146 832.656,684.146 833.215,684.146 833.775,684.146 834.334,684.146 834.893,684.146 835.452,684.146 836.012,684.146 836.571,684.146 837.13,684.146 837.689,684.146 838.249,684.146 838.808,684.146 839.367,684.146 839.926,684.146 840.486,684.146 841.045,684.146 841.604,684.146 842.163,684.146 842.723,684.146 843.282,684.146 843.841,684.146 844.4,684.146 844.96,684.146 845.519,684.146 846.078,684.146 846.637,684.146 847.197,684.146 847.756,684.146 848.315,684.146 848.874,684.146 849.434,684.146 849.993,684.146 850.552,684.146 851.111,684.146 851.671,684.146 852.23,684.146 852.789,684.146 853.348,684.146 853.908,684.146 854.467,684.146 855.026,684.146 855.585,684.146 856.145,684.146 856.704,684.146 857.263,684.146 857.822,684.146 858.382,684.146 858.941,684.146 859.5,684.146 860.059,684.146 860.619,684.146 861.178,684.146 861.737,684.146 862.296,684.146 862.856,684.146 863.415,684.146 863.974,684.146 864.533,684.146 865.093,684.146 865.652,684.146 866.211,684.146 866.77,684.146 867.33,684.146 867.889,684.146 868.448,684.146 869.007,684.146 869.567,684.146 870.126,684.146 870.685,684.146 871.244,684.146 871.804,684.146 872.363,684.146 872.922,684.146 873.481,684.146 874.041,684.146 874.6,684.146 875.159,684.146 875.718,684.146 876.278,684.146 876.837,684.146 877.396,684.146 877.955,684.146 878.515,684.146 879.074,684.146 879.633,684.146 880.192,684.146 880.752,684.146 881.311,684.146 881.87,684.146 882.429,684.146 882.989,684.146 883.548,684.146 884.107,684.146 884.666,684.146 885.226,684.146 885.785,684.146 886.344,684.146 886.903,684.146 887.463,684.146 888.022,684.146 888.581,684.146 889.14,684.146 889.7,684.146 890.259,684.146 890.818,684.146 891.377,684.146 891.937,684.146 892.496,684.146 893.055,684.146 893.614,684.146 894.174,684.146 894.733,684.146 895.292,684.146 895.851,684.146 896.411,684.146 896.97,684.146 897.529,684.146 898.088,684.146 898.648,684.146 899.207,684.146 899.766,684.146 900.325,684.146 900.885,684.146 901.444,684.146 902.003,684.146 902.562,684.146 903.122,684.146 903.681,684.146 904.24,684.146 904.799,684.146 905.359,684.146 905.918,684.146 906.477,684.146 907.036,684.146 907.596,684.146 908.155,684.146 908.714,684.146 909.273,684.146 909.833,684.146 910.392,684.146 910.951,684.146 911.51,684.146 912.07,684.146 912.629,684.146 913.188,684.146 913.747,684.146 914.307,684.146 914.866,684.146 915.425,684.146 915.984,684.146 916.544,684.146 917.103,684.146 917.662,684.146 918.221,684.146 918.781,684.146 919.34,684.146 919.899,684.146 920.458,684.146 921.018,684.146 921.577,684.146 922.136,684.146 922.695,684.146 923.255,684.146 923.814,684.146 924.373,684.146 924.932,684.146 925.492,684.146 926.051,684.146 926.61,684.146 927.169,684.146 927.729,684.146 928.288,684.146 928.847,684.146 929.406,684.146 929.966,684.146 930.525,684.146 931.084,684.146 931.644,684.146 932.203,684.146 932.762,684.146 933.321,684.146 933.881,684.146 934.44,684.146 934.999,684.146 935.558,684.146 936.118,684.146 936.677,684.146 937.236,684.146 937.795,684.146 938.355,684.146 938.914,684.146 939.473,684.146 940.032,684.146 940.592,684.146 941.151,684.146 941.71,684.146 942.269,684.146 942.829,684.146 943.388,684.146 943.947,684.146 944.506,684.146 945.066,684.146 945.625,684.146 946.184,684.146 946.743,684.146 947.303,684.146 947.862,684.146 948.421,684.146 948.98,684.146 949.54,684.146 950.099,684.146 950.658,684.146 951.217,684.146 951.777,684.146 952.336,684.146 952.895,684.146 953.454,684.146 954.014,684.146 954.573,684.146 955.132,684.146 955.691,684.146 956.251,684.146 956.81,684.146 957.369,684.146 957.928,684.146 958.488,684.146 959.047,684.146 959.606,684.146 960.165,684.146 960.725,684.146 961.284,684.146 961.843,684.146 962.402,684.146 962.962,684.146 963.521,684.146 964.08,684.146 964.639,684.146 965.199,684.146 965.758,684.146 966.317,684.146 966.876,684.146 967.436,684.146 967.995,684.146 968.554,684.146 969.113,684.146 969.673,684.146 970.232,684.146 970.791,684.146 971.35,684.146 971.91,684.146 972.469,684.146 973.028,684.146 973.587,684.146 974.147,684.146 974.706,684.146 975.265,684.146 975.824,684.146 976.384,684.146 976.943,684.146 977.502,684.146 978.061,684.146 978.621,684.146 979.18,684.146 979.739,684.146 980.298,684.146 980.858,684.146 981.417,684.146 981.976,684.146 982.535,684.146 983.095,684.146 983.654,684.146 984.213,684.146 984.772,684.146 985.332,684.146 985.891,684.146 986.45,684.146 987.009,684.146 987.569,684.146 988.128,684.146 988.687,684.146 989.246,684.146 989.806,684.146 990.365,684.146 990.924,684.146 991.483,684.146 992.043,684.146 992.602,684.146 993.161,684.146 993.72,684.146 994.28,684.146 994.839,684.146 995.398,684.146 995.957,684.146 996.517,684.146 997.076,684.146 997.635,684.146 998.194,684.146 998.754,684.146 999.313,684.146 999.872,684.146 1000.43,684.146 1000.99,684.146 1001.55,684.146 1002.11,684.146 1002.67,684.146 1003.23,684.146 1003.79,684.146 1004.35,684.146 1004.91,684.146 1005.46,684.146 1006.02,684.146 1006.58,684.146 1007.14,684.146 1007.7,684.146 1008.26,684.146 1008.82,684.146 1009.38,684.146 1009.94,684.146 1010.5,684.146 1011.06,684.146 1011.62,684.146 1012.18,684.146 1012.73,684.146 1013.29,684.146 1013.85,684.146 1014.41,684.146 1014.97,684.146 1015.53,684.146 1016.09,684.146 1016.65,684.146 1017.21,684.146 1017.77,684.146 1018.33,684.146 1018.89,684.146 1019.45,684.146 1020.01,684.146 1020.56,684.146 1021.12,684.146 1021.68,684.146 1022.24,684.146 1022.8,684.146 1023.36,684.146 1023.92,684.146 1024.48,684.146 1025.04,684.146 1025.6,684.146 1026.16,684.146 1026.72,684.146 1027.28,684.146 1027.83,684.146 1028.39,684.146 1028.95,684.146 1029.51,684.146 1030.07,684.146 1030.63,684.146 1031.19,684.146 1031.75,684.146 1032.31,684.146 1032.87,684.146 1033.43,684.146 1033.99,684.146 1034.55,684.146 1035.1,684.146 1035.66,684.146 1036.22,684.146 1036.78,684.146 1037.34,684.146 1037.9,684.146 1038.46,684.146 1039.02,684.146 1039.58,684.146 1040.14,684.146 1040.7,684.146 1041.26,684.146 1041.82,684.146 1042.38,684.146 1042.93,684.146 1043.49,684.146 1044.05,684.146 1044.61,684.146 1045.17,684.146 1045.73,684.146 1046.29,684.146 1046.85,684.146 1047.41,684.146 1047.97,684.146 1048.53,684.146 1049.09,684.146 1049.65,684.146 1050.2,684.146 1050.76,684.146 1051.32,684.146 1051.88,684.146 1052.44,684.146 1053,684.146 1053.56,684.146 1054.12,684.146 1054.68,684.146 1055.24,684.146 1055.8,684.146 1056.36,684.146 1056.92,684.146 1057.48,684.146 1058.03,684.146 1058.59,684.146 1059.15,684.146 1059.71,684.146 1060.27,684.146 1060.83,684.146 1061.39,684.146 1061.95,684.146 1062.51,684.146 1063.07,684.146 1063.63,684.146 1064.19,684.146 1064.75,684.146 1065.3,684.146 1065.86,684.146 1066.42,684.146 1066.98,684.146 1067.54,684.146 1068.1,684.146 1068.66,684.146 1069.22,684.146 1069.78,684.146 1070.34,684.146 1070.9,684.146 1071.46,684.146 1072.02,684.146 1072.57,684.146 1073.13,684.146 1073.69,684.146 1074.25,684.146 1074.81,684.146 1075.37,684.146 1075.93,684.146 1076.49,684.146 1077.05,684.146 1077.61,684.146 1078.17,684.146 1078.73,684.146 1079.29,684.146 1079.85,684.146 1080.4,684.146 1080.96,684.146 1081.52,684.146 1082.08,684.146 1082.64,684.146 1083.2,684.146 1083.76,684.146 1084.32,684.146 1084.88,684.146 1085.44,684.146 1086,684.146 1086.56,684.146 1087.12,684.146 1087.67,684.146 1088.23,684.146 1088.79,684.146 1089.35,684.146 1089.91,684.146 1090.47,684.146 1091.03,684.146 1091.59,684.146 1092.15,684.146 1092.71,684.146 1093.27,684.146 1093.83,684.146 1094.39,684.146 1094.94,684.146 1095.5,684.146 1096.06,684.146 1096.62,684.146 1097.18,684.146 1097.74,684.146 1098.3,684.146 1098.86,684.146 1099.42,684.146 1099.98,684.146 1100.54,684.146 1101.1,684.146 1101.66,684.146 1102.22,684.146 1102.77,684.146 1103.33,684.146 1103.89,684.146 1104.45,684.146 1105.01,684.146 1105.57,684.146 1106.13,684.146 1106.69,684.146 1107.25,684.146 1107.81,684.146 1108.37,684.146 1108.93,684.146 1109.49,684.146 1110.04,684.146 1110.6,684.146 1111.16,684.146 1111.72,684.146 1112.28,684.146 1112.84,684.146 1113.4,684.146 1113.96,684.146 1114.52,684.146 1115.08,684.146 1115.64,684.146 1116.2,684.146 1116.76,684.146 1117.31,684.146 1117.87,684.146 1118.43,684.146 1118.99,684.146 1119.55,684.146 1120.11,684.146 1120.67,684.146 1121.23,684.146 1121.79,684.146 1122.35,684.146 1122.91,684.146 1123.47,684.146 1124.03,684.146 1124.59,684.146 1125.14,684.146 1125.7,684.146 1126.26,684.146 1126.82,684.146 1127.38,684.146 1127.94,684.146 1128.5,684.146 1129.06,684.146 1129.62,684.146 1130.18,684.146 1130.74,684.146 1131.3,684.146 1131.86,684.146 1132.41,684.146 1132.97,684.146 1133.53,684.146 1134.09,684.146 1134.65,684.146 1135.21,684.146 1135.77,684.146 1136.33,684.146 1136.89,684.146 1137.45,684.146 1138.01,684.146 1138.57,684.146 1139.13,684.146 1139.68,684.146 1140.24,684.146 1140.8,684.146 1141.36,684.146 1141.92,684.146 1142.48,684.146 1143.04,684.146 1143.6,684.146 1144.16,684.146 1144.72,684.146 1145.28,684.146 1145.84,684.146 1146.4,684.146 1146.96,684.146 1147.51,684.146 1148.07,684.146 1148.63,684.146 1149.19,684.146 1149.75,684.146 1150.31,684.146 1150.87,684.146 1151.43,684.146 1151.99,684.146 1152.55,684.146 1153.11,684.146 1153.67,684.146 1154.23,684.146 1154.78,684.146 1155.34,684.146 1155.9,684.146 1156.46,684.146 1157.02,684.146 1157.58,684.146 1158.14,684.146 1158.7,684.146 1159.26,684.146 1159.82,684.146 1160.38,684.146 1160.94,684.146 1161.5,684.146 1162.05,684.146 1162.61,684.146 1163.17,684.146 1163.73,684.146 1164.29,684.146 1164.85,684.146 1165.41,684.146 1165.97,684.146 1166.53,684.146 1167.09,684.146 1167.65,684.146 1168.21,684.146 1168.77,684.146 1169.33,684.146 1169.88,684.146 1170.44,684.146 1171,684.146 1171.56,684.146 1172.12,684.146 1172.68,684.146 1173.24,684.146 1173.8,684.146 1174.36,684.146 1174.92,684.146 1175.48,684.146 1176.04,684.146 1176.6,684.146 1177.15,684.146 1177.71,684.146 1178.27,684.146 1178.83,684.146 1179.39,684.146 1179.95,684.146 1180.51,684.146 1181.07,684.146 1181.63,684.146 1182.19,684.146 1182.75,684.146 1183.31,684.146 1183.87,684.146 1184.43,684.146 1184.98,684.146 1185.54,684.146 1186.1,684.146 1186.66,684.146 1187.22,684.146 1187.78,684.146 1188.34,684.146 1188.9,684.146 1189.46,684.146 1190.02,684.146 1190.58,684.146 1191.14,684.146 1191.7,684.146 1192.25,684.146 1192.81,684.146 1193.37,684.146 1193.93,684.146 1194.49,684.146 1195.05,684.146 1195.61,684.146 1196.17,684.146 1196.73,684.146 1197.29,684.146 1197.85,684.146 1198.41,684.146 1198.97,684.146 1199.52,684.146 1200.08,684.146 1200.64,684.146 1201.2,684.146 1201.76,684.146 1202.32,684.146 1202.88,684.146 1203.44,684.146 1204,684.146 1204.56,684.146 1205.12,684.146 1205.68,684.146 1206.24,684.146 1206.8,684.146 1207.35,684.146 1207.91,684.146 1208.47,684.146 1209.03,684.146 1209.59,684.146 1210.15,684.146 1210.71,684.146 1211.27,684.146 1211.83,684.146 1212.39,684.146 1212.95,684.146 1213.51,684.146 1214.07,684.146 1214.62,684.146 1215.18,684.146 1215.74,684.146 1216.3,684.146 1216.86,684.146 1217.42,684.146 1217.98,684.146 1218.54,684.146 1219.1,684.146 1219.66,684.146 1220.22,684.146 1220.78,684.146 1221.34,684.146 1221.89,684.146 1222.45,684.146 1223.01,684.146 1223.57,684.146 1224.13,684.146 1224.69,684.146 1225.25,684.146 1225.81,684.146 1226.37,684.146 1226.93,684.146 1227.49,684.146 1228.05,684.146 1228.61,684.146 1229.17,684.146 1229.72,684.146 1230.28,684.146 1230.84,684.146 1231.4,684.146 1231.96,684.146 1232.52,684.146 1233.08,684.146 1233.64,684.146 1234.2,684.146 1234.76,684.146 1235.32,684.146 1235.88,684.146 1236.44,684.146 1236.99,684.146 1237.55,684.146 1238.11,684.146 1238.67,684.146 1239.23,684.146 1239.79,684.146 1240.35,684.146 1240.91,684.146 1241.47,684.146 1242.03,684.146 1242.59,684.146 1243.15,684.146 1243.71,684.146 1244.26,684.146 1244.82,684.146 1245.38,684.146 1245.94,684.146 1246.5,684.146 1247.06,684.146 1247.62,684.146 1248.18,684.146 1248.74,684.146 1249.3,684.146 1249.86,684.146 1250.42,684.146 1250.98,684.146 1251.54,684.146 1252.09,684.146 1252.65,684.146 1253.21,684.146 1253.77,684.146 1254.33,684.146 1254.89,684.146 1255.45,684.146 1256.01,684.146 1256.57,684.146 1257.13,684.146 1257.69,684.146 1258.25,684.146 1258.81,684.146 1259.36,684.146 1259.92,684.146 1260.48,684.146 1261.04,684.146 1261.6,684.146 1262.16,684.146 1262.72,684.146 1263.28,684.146 1263.84,684.146 1264.4,684.146 1264.96,684.146 1265.52,684.146 1266.08,684.146 1266.63,684.146 1267.19,684.146 1267.75,684.146 1268.31,684.146 1268.87,684.146 1269.43,684.146 1269.99,684.146 1270.55,684.146 1271.11,684.146 1271.67,684.146 1272.23,684.146 1272.79,684.146 1273.35,684.146 1273.91,684.146 1274.46,684.146 1275.02,684.146 1275.58,684.146 1276.14,684.146 1276.7,684.146 1277.26,684.146 1277.82,684.146 1278.38,684.146 1278.94,684.146 1279.5,684.146 1280.06,684.146 1280.62,684.146 1281.18,684.146 1281.73,684.146 1282.29,684.146 1282.85,684.146 1283.41,684.146 1283.97,684.146 1284.53,684.146 1285.09,684.146 1285.65,684.146 1286.21,684.146 1286.77,684.146 1287.33,684.146 1287.89,684.146 1288.45,684.146 1289,684.146 1289.56,684.146 1290.12,684.146 1290.68,684.146 1291.24,684.146 1291.8,684.146 1292.36,684.146 1292.92,684.146 1293.48,684.146 1294.04,684.146 1294.6,684.146 1295.16,684.146 1295.72,684.146 1296.28,684.146 1296.83,684.146 1297.39,684.146 1297.95,684.146 1298.51,684.146 1299.07,684.146 1299.63,684.146 1300.19,684.146 1300.75,684.146 1301.31,684.146 1301.87,684.146 1302.43,684.146 1302.99,684.146 1303.55,684.146 1304.1,684.146 1304.66,684.146 1305.22,684.146 1305.78,684.146 1306.34,684.146 1306.9,684.146 1307.46,684.146 1308.02,684.146 1308.58,684.146 1309.14,684.146 1309.7,684.146 1310.26,684.146 1310.82,684.146 1311.38,684.146 1311.93,684.146 1312.49,684.146 1313.05,684.146 1313.61,684.146 1314.17,684.146 1314.73,684.146 1315.29,684.146 1315.85,684.146 1316.41,684.146 1316.97,684.146 1317.53,684.146 1318.09,684.146 1318.65,684.146 1319.2,684.146 1319.76,684.146 1320.32,684.146 1320.88,684.146 1321.44,684.146 1322,684.146 1322.56,684.146 1323.12,684.146 1323.68,684.146 1324.24,684.146 1324.8,684.146 1325.36,684.146 1325.92,684.146 1326.47,684.146 1327.03,684.146 1327.59,684.146 1328.15,684.146 1328.71,684.146 1329.27,684.146 1329.83,684.146 1330.39,684.146 1330.95,684.146 1331.51,684.146 1332.07,684.146 1332.63,684.146 1333.19,684.146 1333.75,684.146 1334.3,684.146 1334.86,684.146 1335.42,684.146 1335.98,684.146 1336.54,684.146 1337.1,684.146 1337.66,684.146 1338.22,684.146 1338.78,684.146 1339.34,684.146 1339.9,684.146 1340.46,684.146 1341.02,684.146 1341.57,684.146 1342.13,684.146 1342.69,684.146 1343.25,684.146 1343.81,684.146 1344.37,684.146 1344.93,684.146 1345.49,684.146 1346.05,684.146 1346.61,684.146 1347.17,684.146 1347.73,684.146 1348.29,684.146 1348.84,684.146 1349.4,684.146 1349.96,684.146 1350.52,684.146 1351.08,684.146 1351.64,684.146 1352.2,684.146 1352.76,684.146 1353.32,684.146 1353.88,684.146 1354.44,684.146 1355,684.146 1355.56,684.146 1356.12,684.146 1356.67,684.146 1357.23,684.146 1357.79,684.146 1358.35,684.146 1358.91,684.146 1359.47,684.146 1360.03,684.146 1360.59,684.146 1361.15,684.146 1361.71,684.146 1362.27,684.146 1362.83,684.146 1363.39,684.146 1363.94,684.146 1364.5,684.146 1365.06,684.146 1365.62,684.146 1366.18,684.146 1366.74,684.146 1367.3,684.146 1367.86,684.146 1368.42,684.146 1368.98,684.146 1369.54,684.146 1370.1,684.146 1370.66,684.146 1371.21,684.146 1371.77,684.146 1372.33,684.146 1372.89,684.146 1373.45,684.146 1374.01,684.146 1374.57,684.146 1375.13,684.146 1375.69,684.146 1376.25,684.146 1376.81,684.146 1377.37,684.146 1377.93,684.146 1378.49,684.146 1379.04,684.146 1379.6,684.146 1380.16,684.146 1380.72,684.146 1381.28,684.146 1381.84,684.146 1382.4,684.146 1382.96,684.146 1383.52,684.146 1384.08,684.146 1384.64,684.146 1385.2,684.146 1385.76,684.146 1386.31,684.146 1386.87,684.146 1387.43,684.146 1387.99,684.146 1388.55,684.146 1389.11,684.146 1389.67,684.146 1390.23,684.146 1390.79,684.146 1391.35,684.146 1391.91,684.146 1392.47,684.146 1393.03,684.146 1393.58,684.146 1394.14,684.146 1394.7,684.146 1395.26,684.146 1395.82,684.146 1396.38,684.146 1396.94,684.146 1397.5,684.146 1398.06,684.146 1398.62,684.146 1399.18,684.146 1399.74,684.146 1400.3,684.146 1400.86,684.146 1401.41,684.146 1401.97,684.146 1402.53,684.146 1403.09,684.146 1403.65,684.146 1404.21,684.146 1404.77,684.146 1405.33,684.146 1405.89,684.146 1406.45,684.146 1407.01,684.146 1407.57,684.146 1408.13,684.146 1408.68,684.146 1409.24,684.146 1409.8,684.146 1410.36,684.146 1410.92,684.146 1411.48,684.146 1412.04,684.146 1412.6,684.146 1413.16,684.146 1413.72,684.146 1414.28,684.146 1414.84,684.146 1415.4,684.146 1415.95,684.146 1416.51,684.146 1417.07,684.146 1417.63,684.146 1418.19,684.146 1418.75,684.146 1419.31,684.146 1419.87,684.146 1420.43,684.146 1420.99,684.146 1421.55,684.146 1422.11,684.146 1422.67,684.146 1423.23,684.146 1423.78,684.146 1424.34,684.146 1424.9,684.146 1425.46,684.146 1426.02,684.146 1426.58,684.146 1427.14,684.146 1427.7,684.146 1428.26,684.146 1428.82,684.146 1429.38,684.146 1429.94,684.146 1430.5,684.146 1431.05,684.146 1431.61,684.146 1432.17,684.146 1432.73,684.146 1433.29,684.146 1433.85,684.146 1434.41,684.146 1434.97,684.146 1435.53,684.146 1436.09,684.146 1436.65,684.146 1437.21,684.146 1437.77,684.146 1438.33,684.146 1438.88,684.146 1439.44,684.146 1440,684.146 1440.56,684.146 1441.12,684.146 1441.68,684.146 1442.24,684.146 1442.8,684.146 1443.36,684.146 1443.92,684.146 1444.48,684.146 1445.04,684.146 1445.6,684.146 1446.15,684.146 1446.71,684.146 1447.27,684.146 1447.83,684.146 1448.39,684.146 1448.95,684.146 1449.51,684.146 1450.07,684.146 1450.63,684.146 1451.19,684.146 1451.75,684.146 1452.31,684.146 1452.87,684.146 1453.42,684.146 1453.98,684.146 1454.54,684.146 1455.1,684.146 1455.66,684.146 1456.22,684.146 1456.78,684.146 1457.34,684.146 1457.9,684.146 1458.46,684.146 1459.02,684.146 1459.58,684.146 1460.14,684.146 1460.7,684.146 1461.25,684.146 1461.81,684.146 1462.37,684.146 1462.93,684.146 1463.49,684.146 1464.05,684.146 1464.61,684.146 1465.17,684.146 1465.73,684.146 1466.29,684.146 1466.85,684.146 1467.41,684.146 1467.97,684.146 1468.52,684.146 1469.08,684.146 1469.64,684.146 1470.2,684.146 1470.76,684.146 1471.32,684.146 1471.88,684.146 1472.44,684.146 1473,684.146 1473.56,684.146 1474.12,684.146 1474.68,684.146 1475.24,684.146 1475.79,684.146 1476.35,684.146 1476.91,684.146 1477.47,684.146 1478.03,684.146 1478.59,684.146 1479.15,684.146 1479.71,684.146 1480.27,684.146 1480.83,684.146 1481.39,684.146 1481.95,684.146 1482.51,684.146 1483.07,684.146 1483.62,684.146 1484.18,684.146 1484.74,684.146 1485.3,684.146 1485.86,684.146 1486.42,684.146 1486.98,684.146 1487.54,684.146 1488.1,684.146 1488.66,684.146 1489.22,684.146 1489.78,684.146 1490.34,684.146 1490.89,684.146 1491.45,684.146 1492.01,684.146 1492.57,684.146 1493.13,684.146 1493.69,684.146 1494.25,684.146 1494.81,684.146 1495.37,684.146 1495.93,684.146 1496.49,684.146 1497.05,684.146 1497.61,684.146 1498.16,684.146 1498.72,684.146 1499.28,684.146 1499.84,684.146 1500.4,684.146 1500.96,684.146 1501.52,684.146 1502.08,684.146 1502.64,684.146 1503.2,684.146 1503.76,684.146 1504.32,684.146 1504.88,684.146 1505.44,684.146 1505.99,684.146 1506.55,684.146 1507.11,684.146 1507.67,684.146 1508.23,684.146 1508.79,684.146 1509.35,684.146 1509.91,684.146 1510.47,684.146 1511.03,684.146 1511.59,684.146 1512.15,684.146 1512.71,684.146 1513.26,684.146 1513.82,684.146 1514.38,684.146 1514.94,684.146 1515.5,684.146 1516.06,684.146 1516.62,684.146 1517.18,684.146 1517.74,684.146 1518.3,684.146 1518.86,684.146 1519.42,684.146 1519.98,684.146 1520.53,684.146 1521.09,684.146 1521.65,684.146 1522.21,684.146 1522.77,684.146 1523.33,684.146 1523.89,684.146 1524.45,684.146 1525.01,684.146 1525.57,684.146 1526.13,684.146 1526.69,684.146 1527.25,684.146 1527.81,684.146 1528.36,684.146 1528.92,684.146 1529.48,684.146 1530.04,684.146 1530.6,684.146 1531.16,684.146 1531.72,684.146 1532.28,684.146 1532.84,684.146 1533.4,684.146 1533.96,684.146 1534.52,684.146 1535.08,684.146 1535.63,684.146 1536.19,684.146 1536.75,684.146 1537.31,684.146 1537.87,684.146 1538.43,684.146 1538.99,684.146 1539.55,684.146 1540.11,684.146 1540.67,684.146 1541.23,684.146 1541.79,684.146 1542.35,684.146 1542.9,684.146 1543.46,684.146 1544.02,684.146 1544.58,684.146 1545.14,684.146 1545.7,684.146 1546.26,684.146 1546.82,684.146 1547.38,684.146 1547.94,684.146 1548.5,684.146 1549.06,684.146 1549.62,684.146 1550.18,684.146 1550.73,684.146 1551.29,684.146 1551.85,684.146 1552.41,684.146 1552.97,684.146 1553.53,684.146 1554.09,684.146 1554.65,684.146 1555.21,684.146 1555.77,684.146 1556.33,684.146 1556.89,684.146 1557.45,684.146 1558,684.146 1558.56,684.146 1559.12,684.146 1559.68,684.146 1560.24,684.146 1560.8,684.146 1561.36,684.146 1561.92,684.146 1562.48,684.146 1563.04,684.146 1563.6,684.146 1564.16,684.146 1564.72,684.146 1565.28,684.146 1565.83,684.146 1566.39,684.146 1566.95,684.146 1567.51,684.146 1568.07,684.146 1568.63,684.146 1569.19,684.146 1569.75,684.146 1570.31,684.146 1570.87,684.146 1571.43,684.146 1571.99,684.146 1572.55,684.146 1573.1,684.146 1573.66,684.146 1574.22,684.146 1574.78,684.146 1575.34,684.146 1575.9,684.146 1576.46,684.146 1577.02,684.146 1577.58,684.146 1578.14,684.146 1578.7,684.146 1579.26,684.146 1579.82,684.146 1580.37,684.146 1580.93,684.146 1581.49,684.146 1582.05,684.146 1582.61,684.146 1583.17,684.146 1583.73,684.146 1584.29,684.146 1584.85,684.146 1585.41,684.146 1585.97,684.146 1586.53,684.146 1587.09,684.146 1587.65,684.146 1588.2,684.146 1588.76,684.146 1589.32,684.146 1589.88,684.146 1590.44,684.146 1591,684.146 1591.56,684.146 1592.12,684.146 1592.68,684.146 1593.24,684.146 1593.8,684.146 1594.36,684.146 1594.92,684.146 1595.47,684.146 1596.03,684.146 1596.59,684.146 1597.15,684.146 1597.71,684.146 1598.27,684.146 1598.83,684.146 1599.39,684.146 1599.95,684.146 1600.51,684.146 1601.07,684.146 1601.63,684.146 1602.19,684.146 1602.74,684.146 1603.3,684.146 1603.86,684.146 1604.42,684.146 1604.98,684.146 1605.54,684.146 1606.1,684.146 1606.66,684.146 1607.22,684.146 1607.78,684.146 1608.34,684.146 1608.9,684.146 1609.46,684.146 1610.02,684.146 1610.57,684.146 1611.13,684.146 1611.69,684.146 1612.25,684.146 1612.81,684.146 1613.37,684.146 1613.93,684.146 1614.49,684.146 1615.05,684.146 1615.61,684.146 1616.17,684.146 1616.73,684.146 1617.29,684.146 1617.84,684.146 1618.4,684.146 1618.96,684.146 1619.52,684.146 1620.08,684.146 1620.64,684.146 1621.2,684.146 1621.76,684.146 1622.32,684.146 1622.88,684.146 1623.44,684.146 1624,684.146 1624.56,684.146 1625.11,684.146 1625.67,684.146 1626.23,684.146 1626.79,684.146 1627.35,684.146 1627.91,684.146 1628.47,684.146 1629.03,684.146 1629.59,684.146 1630.15,684.146 1630.71,684.146 1631.27,684.146 1631.83,684.146 1632.39,684.146 1632.94,684.146 1633.5,684.146 1634.06,684.146 1634.62,684.146 1635.18,684.146 1635.74,684.146 1636.3,684.146 1636.86,684.146 1637.42,684.146 1637.98,684.146 1638.54,684.146 1639.1,684.146 1639.66,684.146 1640.21,684.146 1640.77,684.146 1641.33,684.146 1641.89,684.146 1642.45,684.146 1643.01,684.146 1643.57,684.146 1644.13,684.146 1644.69,684.146 1645.25,684.146 1645.81,684.146 1646.37,684.146 1646.93,684.146 1647.48,684.146 1648.04,684.146 1648.6,684.146 1649.16,684.146 1649.72,684.146 1650.28,684.146 1650.84,684.146 1651.4,684.146 1651.96,684.146 1652.52,684.146 1653.08,684.146 1653.64,684.146 1654.2,684.146 1654.76,684.146 1655.31,684.146 1655.87,684.146 1656.43,684.146 1656.99,684.146 1657.55,684.146 1658.11,684.146 1658.67,684.146 1659.23,684.146 1659.79,684.146 1660.35,684.146 1660.91,684.146 1661.47,684.146 1662.03,684.146 1662.58,684.146 1663.14,684.146 1663.7,684.146 1664.26,684.146 1664.82,684.146 1665.38,684.146 1665.94,684.146 1666.5,684.146 1667.06,684.146 1667.62,684.146 1668.18,684.146 1668.74,684.146 1669.3,684.146 1669.85,684.146 1670.41,684.146 1670.97,684.146 1671.53,684.146 1672.09,684.146 1672.65,684.146 1673.21,684.146 1673.77,684.146 1674.33,684.146 1674.89,684.146 1675.45,684.146 1676.01,684.146 1676.57,684.146 1677.13,684.146 1677.68,684.146 1678.24,684.146 1678.8,684.146 1679.36,684.146 1679.92,684.146 1680.48,684.146 1681.04,684.146 1681.6,684.146 1682.16,684.146 1682.72,684.146 1683.28,684.146 1683.84,684.146 1684.4,684.146 1684.95,684.146 1685.51,684.146 1686.07,684.146 1686.63,684.146 1687.19,684.146 1687.75,684.146 1688.31,684.146 1688.87,684.146 1689.43,684.146 1689.99,684.146 1690.55,684.146 1691.11,684.146 1691.67,684.146 1692.23,684.146 1692.78,684.146 1693.34,684.146 1693.9,684.146 1694.46,684.146 1695.02,684.146 1695.58,684.146 1696.14,684.146 1696.7,684.146 1697.26,684.146 1697.82,684.146 1698.38,684.146 1698.94,684.146 1699.5,684.146 1700.05,684.146 1700.61,684.146 1701.17,684.146 1701.73,684.146 1702.29,684.146 1702.85,684.146 1703.41,684.146 1703.97,684.146 1704.53,684.146 1705.09,684.146 1705.65,684.146 1706.21,684.146 1706.77,684.146 1707.32,684.146 1707.88,684.146 1708.44,684.146 1709,684.146 1709.56,684.146 1710.12,684.146 1710.68,684.146 1711.24,684.146 1711.8,684.146 1712.36,684.146 1712.92,684.146 1713.48,684.146 1714.04,684.146 1714.6,684.146 1715.15,684.146 1715.71,684.146 1716.27,684.146 1716.83,684.146 1717.39,684.146 1717.95,684.146 1718.51,684.146 1719.07,684.146 1719.63,684.146 1720.19,684.146 1720.75,684.146 1721.31,684.146 1721.87,684.146 1722.42,684.146 1722.98,684.146 1723.54,684.146 1724.1,684.146 1724.66,684.146 1725.22,684.146 1725.78,684.146 1726.34,684.146 1726.9,684.146 1727.46,684.146 1728.02,684.146 1728.58,684.146 1729.14,684.146 1729.69,684.146 1730.25,684.146 1730.81,684.146 1731.37,684.146 1731.93,684.146 1732.49,684.146 1733.05,684.146 1733.61,684.146 1734.17,684.146 1734.73,684.146 1735.29,684.146 1735.85,684.146 1736.41,684.146 1736.97,684.146 1737.52,684.146 1738.08,684.146 1738.64,684.146 1739.2,684.146 1739.76,684.146 1740.32,684.146 1740.88,684.146 1741.44,684.146 1742,684.146 1742.56,684.146 1743.12,684.146 1743.68,684.146 1744.24,684.146 1744.79,684.146 1745.35,684.146 1745.91,684.146 1746.47,684.146 1747.03,684.146 1747.59,684.146 1748.15,684.146 1748.71,684.146 1749.27,684.146 1749.83,684.146 1750.39,684.146 1750.95,684.146 1751.51,684.146 1752.06,684.146 1752.62,684.146 1753.18,684.146 1753.74,684.146 1754.3,684.146 1754.86,684.146 1755.42,684.146 1755.98,684.146 1756.54,684.146 1757.1,684.146 1757.66,684.146 1758.22,684.146 1758.78,684.146 1759.34,684.146 1759.89,684.146 1760.45,684.146 1761.01,684.146 1761.57,684.146 1762.13,684.146 1762.69,684.146 1763.25,684.146 1763.81,684.146 1764.37,684.146 1764.93,684.146 1765.49,684.146 1766.05,684.146 1766.61,684.146 1767.16,684.146 1767.72,684.146 1768.28,684.146 1768.84,684.146 1769.4,684.146 1769.96,684.146 1770.52,684.146 1771.08,684.146 1771.64,684.146 1772.2,684.146 1772.76,684.146 1773.32,684.146 1773.88,684.146 1774.43,684.146 1774.99,684.146 1775.55,684.146 1776.11,684.146 1776.67,684.146 1777.23,684.146 1777.79,684.146 1778.35,684.146 1778.91,684.146 1779.47,684.146 1780.03,684.146 1780.59,684.146 1781.15,684.146 1781.71,684.146 1782.26,684.146 1782.82,684.146 1783.38,684.146 1783.94,684.146 1784.5,684.146 1785.06,684.146 1785.62,684.146 1786.18,684.146 1786.74,684.146 1787.3,684.146 1787.86,684.146 1788.42,684.146 1788.98,684.146 1789.53,684.146 1790.09,684.146 1790.65,684.146 1791.21,684.146 1791.77,684.146 1792.33,684.146 1792.89,684.146 1793.45,684.146 1794.01,684.146 1794.57,684.146 1795.13,684.146 1795.69,684.146 1796.25,684.146 1796.8,684.146 1797.36,684.146 1797.92,684.146 1798.48,684.146 1799.04,684.146 1799.6,684.146 1800.16,684.146 1800.72,684.146 1801.28,684.146 1801.84,684.146 1802.4,684.146 1802.96,684.146 1803.52,684.146 1804.08,684.146 1804.63,684.146 1805.19,684.146 1805.75,684.146 1806.31,684.146 1806.87,684.146 1807.43,684.146 1807.99,684.146 1808.55,684.146 1809.11,684.146 1809.67,684.146 1810.23,684.146 1810.79,684.146 1811.35,684.146 1811.9,684.146 1812.46,684.146 1813.02,684.146 1813.58,684.146 1814.14,684.146 1814.7,684.146 1815.26,684.146 1815.82,684.146 1816.38,684.146 1816.94,684.146 1817.5,684.146 1818.06,684.146 1818.62,684.146 1819.18,684.146 1819.73,684.146 1820.29,684.146 1820.85,684.146 1821.41,684.146 1821.97,684.146 1822.53,684.146 1823.09,684.146 1823.65,684.146 1824.21,684.146 1824.77,684.146 1825.33,684.146 1825.89,684.146 1826.45,684.146 1827,684.146 1827.56,684.146 1828.12,684.146 1828.68,684.146 1829.24,684.146 1829.8,684.146 1830.36,684.146 1830.92,684.146 1831.48,684.146 1832.04,684.146 1832.6,684.146 1833.16,684.146 1833.72,684.146 1834.27,684.146 1834.83,684.146 1835.39,684.146 1835.95,684.146 1836.51,684.146 1837.07,684.146 1837.63,684.146 1838.19,684.146 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.036400634964093 ± 0.017373218290464308\nProjected Energy: -4.017910477897116 ± (0.00841930318818207, 0.008433671264961085)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.468169</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3656e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0631e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.586e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.202e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.515e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.885e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133868\n -0.7590191922770888\n  0.13584182219621255\n  0.1578999869460862\n  0.8767114411781538\n  1.5305929970973278\n  1.5835732611867392\n  3.072870330325868\n  3.1256726539518382\n  4.862107221562171\n  6.260694850380598\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
